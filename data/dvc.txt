TITLE: Complete DVCLive Logger Implementation with Lightning Fabric
DESCRIPTION: Demonstrates the complete workflow of using DVCLiveLogger with Lightning Fabric, including initialization, logging hyperparameters, metrics, and saving model artifacts.

LANGUAGE: python
CODE:
from dvclive.fabric import DVCLiveLogger
from lightning.fabric import Fabric
from lightning.fabric.utilities.rank_zero import rank_zero_only

...

fabric = Fabric()

# Create the DVCLiveLogger
logger = DVCLiveLogger()

# Log dict of hyperparameters
logger.log_hyperparams({"batch_size": 64, "epochs": 5, "lr": 1.0, ...})

for epoch in range(epochs):

    ...

    # Log dict of metrics
    logger.log_metrics({"loss": loss})

fabric.save("mnist_cnn.pt", model.state_dict())
# Check that `rank_zero_only.rank == 0` to avoid logging in other processes.
if rank_zero_only.rank == 0:
    # `logger.experiment` provides access to DVCLive's `Live` instance.
    logger.experiment.log_artifact("mnist_cnn.pt")

# Call finalize to save final results as a DVC experiment
logger.finalize("success")

----------------------------------------

TITLE: DVC Pipeline Stage Definition
DESCRIPTION: Example of a DVC pipeline stage definition in the dvc.yaml file, showing dependencies, parameters, and outputs.

LANGUAGE: yaml
CODE:
stages:
  prepare:
    cmd: python src/prepare.py data/data.xml
    deps:
      - src/prepare.py
      - data/data.xml
    params:
      - prepare.seed
      - prepare.split
    outs:
      - data/prepared

----------------------------------------

TITLE: Configuring and Using DVC Remote Storage in Bash
DESCRIPTION: Commands to set up a local remote storage for DVC, push data to the remote, and pull data from it. This shows how to store and share data using DVC remotes.

LANGUAGE: bash
CODE:
$ mkdir /tmp/dvcstore
$ dvc remote add -d myremote /tmp/dvcstore
$ dvc push
$ dvc pull

----------------------------------------

TITLE: Pulling DVC Experiments from Git Remote
DESCRIPTION: Command to download pushed experiments from a Git remote, including necessary files and data from both Git and DVC remotes.

LANGUAGE: cli
CODE:
$ dvc exp pull origin

----------------------------------------

TITLE: Basic DVCLive Usage Example in Python
DESCRIPTION: Demonstrates basic DVCLive functionality including logging metrics, images, artifacts and sklearn plots across multiple epochs.

LANGUAGE: python
CODE:
import random
from pathlib import Path

from dvclive import Live
from PIL import Image

EPOCHS = 2

with Live(report="notebook") as live:
    live.log_param("epochs", EPOCHS)

    for i in range(EPOCHS):
        live.log_metric("metric", i + random.random())
        live.log_metric("nested/metric", i + random.random())
        live.log_image(f"img/{live.step}.png", Image.new("RGB", (50, 50), (i, i, i)))
        Path("model.pt").write_text(str(random.random()))
        live.next_step()

    live.log_artifact("model.pt", type="model", name="mymodel")
    live.log_sklearn_plot("confusion_matrix", [0, 0, 1, 1], [0, 1, 0, 1])
    live.log_metric("summary_metric", 1.0, plot=False)

----------------------------------------

TITLE: Reproducing DVC Pipeline
DESCRIPTION: Executes the defined pipeline stages and creates a dvc.lock file to capture the reproduction results.

LANGUAGE: cli
CODE:
$ dvc repro
$ git add dvc.lock && git commit -m "first pipeline repro"

----------------------------------------

TITLE: Defining DVC Stage with Parameter Dependencies
DESCRIPTION: Example of a DVC stage that includes parameter dependencies, useful for tracking hyperparameters in machine learning workflows.

LANGUAGE: yaml
CODE:
stages:
  train:
    cmd: ...
    deps: ...
    params: # from params.yaml
      - learning_rate
      - nn.epochs
      - nn.batch_size
    outs: ...

----------------------------------------

TITLE: Installing DVC with pip
DESCRIPTION: Installs DVC using pip package manager. Optional dependencies can be added for specific remote storage support.

LANGUAGE: bash
CODE:
$ pip install dvc

----------------------------------------

TITLE: Setting up Keras with DVCLive
DESCRIPTION: Configure Keras model with DVCLiveCallback to track experiments and log artifacts.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.keras import DVCLiveCallback

...
with Live() as live:
    model.fit(
        train_dataset,
        validation_data=validation_dataset,
        callbacks=[
            DVCLiveCallback(live=live)
        ]
    )
    model.save("mymodel")
    live.log_artifact("mymodel", type="model")

----------------------------------------

TITLE: Running DVC Experiments with Parameter Modifications
DESCRIPTION: These CLI commands demonstrate how to run DVC experiments with modified parameters. They show single and multiple parameter modifications, as well as grid search setups.

LANGUAGE: cli
CODE:
$ dvc exp run --set-param "train.img_size=128"

$ dvc exp run \
-S "data_split.test_pct=0.1" -S "train.img_size=384"

$ dvc exp run \
--queue --set-param "train.batch_size=8,16,24"

$ dvc exp run --name "arch-size" --queue \
-S 'train.arch=alexnet,resnet34,squeezenet1_1' \
-S 'train.img_size=128,256'

----------------------------------------

TITLE: Defining DVC Pipeline Stages
DESCRIPTION: Creates three pipeline stages for data preparation, feature extraction, and model training using dvc stage add command.

LANGUAGE: cli
CODE:
$ dvc stage add -n prepare \
                -p prepare.seed,prepare.split \
                -d src/prepare.py -d data/data.xml \
                -o data/prepared \
                python src/prepare.py data/data.xml

$ dvc stage add -n featurize \
                -p featurize.max_features,featurize.ngrams \
                -d src/featurization.py -d data/prepared \
                -o data/features \
                python src/featurization.py data/prepared data/features

$ dvc stage add -n train \
                -p train.seed,train.n_est,train.min_split \
                -d src/train.py -d data/features \
                -o model.pkl \
                python src/train.py data/features model.pkl

----------------------------------------

TITLE: Initializing a DVC Project in Bash
DESCRIPTION: Commands to create a new directory, initialize a Git repository, and initialize DVC within it. This sets up the basic structure for a DVC project.

LANGUAGE: bash
CODE:
$ mkdir example-get-started
$ cd example-get-started
$ git init
$ dvc init
$ git status
$ git commit -m "Initialize DVC"

----------------------------------------

TITLE: Defining Basic DVC Pipeline Structure in YAML
DESCRIPTION: Example of a basic DVC pipeline structure defined in YAML format, showing three stages: prepare, train, and evaluate.

LANGUAGE: yaml
CODE:
stages:
  prepare: ... # stage 1 definition
  train: ... # stage 2 definition
  evaluate: ... # stage 3 definition

----------------------------------------

TITLE: Complete Training Example
DESCRIPTION: Full example showing DVCLive integration in a training loop with parameter logging, metric tracking, and artifact storage.

LANGUAGE: python
CODE:
# train.py

from dvclive import Live

with Live() as live:

    live.log_param("epochs", NUM_EPOCHS)

    for epoch in range(NUM_EPOCHS):
        train_model(...)
        metrics = evaluate_model(...)

        for metric_name, value in metrics.items():
            live.log_metric(metric_name, value)

        live.next_step()

    live.log_artifact(path, type="model", name=name)

----------------------------------------

TITLE: Initializing DVCLive Logger Class in Python
DESCRIPTION: Class constructor for DVCLive logger with parameters for directory management, experiment tracking, reporting, and system monitoring. The constructor configures where and how logging data will be stored and managed.

LANGUAGE: python
CODE:
class Live:

    def __init__(
        self,
        dir: str = "dvclive",
        resume: bool = False,
        report: Literal["md", "notebook", "html", None] = None,
        save_dvc_exp: bool = True,
        dvcyaml: Optional[str] = "dvc.yaml",
        cache_images: bool = False,
        exp_name: Optional[str] = None,
        exp_message: Optional[str] = None,
        monitor_system: bool = False,
    ):

----------------------------------------

TITLE: Configuring DVC Remote Storage
DESCRIPTION: Example configuration for defining a local remote storage named 'temp' and setting it as the default remote.

LANGUAGE: ini
CODE:
['remote "temp"']
    url = /tmp/dvcstore
[core]
    remote = temp

----------------------------------------

TITLE: Starting DVC Experiment Queue
DESCRIPTION: This snippet shows how to start executing queued DVC experiments using the 'dvc queue start' command.

LANGUAGE: cli
CODE:
$ dvc queue start
...

----------------------------------------

TITLE: Displaying Experiment Table with DVC CLI
DESCRIPTION: Shows how to display a formatted table of experiments with metrics, parameters and dependencies using the DVC CLI command.

LANGUAGE: cli
CODE:
$ dvc exp show

----------------------------------------

TITLE: Adding Dataset to DVC Registry
DESCRIPTION: Example of adding a dataset to a DVC registry by placing data in workspace and tracking with dvc add. Shows basic Git workflow with .dvc files.

LANGUAGE: cli
CODE:
$ mkdir -p music/songs
$ cp ~/Downloads/millionsongsubset_full music/songs

$ dvc add music/songs/

$ git add music/songs.dvc music/.gitignore
$ git commit -m "Track 1.8 GB 10,000 song dataset in music/"

----------------------------------------

TITLE: Initializing DVC in Git Repository
DESCRIPTION: Example of initializing a DVC project in a Git repository root, including Git commands to commit the initialization.

LANGUAGE: bash
CODE:
$ mkdir mydvcrepo && cd mydvcrepo
$ git init
$ dvc init
$ git status
...
        new file:   .dvc/.gitignore
        new file:   .dvc/config

$ git commit -m "Init DVC"

----------------------------------------

TITLE: Logging Scikit-learn Model Metrics with DVCLive
DESCRIPTION: Example showing how to use DVCLive to track RandomForestClassifier training and evaluation. The code demonstrates logging model parameters, calculating F1 scores, and generating confusion matrix plots for both training and test datasets.

LANGUAGE: python
CODE:
from DVCLive import Live

...

with Live() as live:

    live.log_param("n_estimators", n_estimators)

    clf = RandomForestClassifier(n_estimators=n_estimators)
    clf.fit(X_train, y_train)

    y_train_pred = clf.predict(X_train)

    live.log_metric("train/f1", f1_score(y_train, y_train_pred, average="weighted"), plot=False)
    live.log_sklearn_plot(
        "confusion_matrix", y_train, y_train_pred, name="train/confusion_matrix",
        title="Train Confusion Matrix")

    y_test_pred = clf.predict(X_test)

    live.log_metric("test/f1", f1_score(y_test, y_test_pred, average="weighted"), plot=False)
    live.log_sklearn_plot(
        "confusion_matrix", y_test, y_test_pred, name="test/confusion_matrix",
        title="Test Confusion Matrix")

----------------------------------------

TITLE: Complete DVC YAML Configuration
DESCRIPTION: This YAML snippet shows the full structure of the dvc.yaml file after adding all stages (data_split, train, and evaluate). It includes commands, dependencies, parameters, and outputs for each stage.

LANGUAGE: yaml
CODE:
stages:
  data_split:
    cmd: python src/data_split.py
    deps:
      - data/pool_data
      - src/data_split.py
    params:
      - base
      - data_split
    outs:
      - data/test_data
      - data/train_data
  train:
    cmd: python src/train.py
    deps:
      - data/train_data
      - src/train.py
    params:
      - base
      - train
    outs:
      - models/model.pkl
  evaluate:
    cmd: python src/evaluate.py
    deps:
      - data/test_data
      - models/model.pkl
      - src/evaluate.py
    params:
      - base
      - evaluate
    outs:
      - results

----------------------------------------

TITLE: Setting Up Python Environment
DESCRIPTION: Creates a virtual environment, installs requirements, and initializes Git repository.

LANGUAGE: cli
CODE:
$ virtualenv venv && echo "venv" > .gitignore
$ source venv/bin/activate
$ pip install -r src/requirements.txt
$ git add .github/ data/ params.yaml src .gitignore
$ git commit -m "Initial commit"

----------------------------------------

TITLE: Initializing DVCLiveLogger with PyTorch Lightning
DESCRIPTION: Example of how to use DVCLiveLogger with PyTorch Lightning. It demonstrates setting up a LightningModule, logging metrics, and initializing a Trainer with DVCLiveLogger.

LANGUAGE: python
CODE:
import lightning.pytorch as pl
from dvclive.lightning import DVCLiveLogger

...
class LitModule(pl.LightningModule):
    def __init__(self, layer_1_dim=128, learning_rate=1e-2):
        super().__init__()
        # layer_1_dim and learning_rate will be logged by DVCLive
        self.save_hyperparameters()

    def training_step(self, batch, batch_idx):
        metric = ...
        # See Output Format bellow
        self.log("train_metric", metric, on_step=False, on_epoch=True)

dvclive_logger = DVCLiveLogger()

model = LitModule()
trainer = pl.Trainer(logger=dvclive_logger)
trainer.fit(model)

----------------------------------------

TITLE: Tracking Data with DVC in Bash
DESCRIPTION: Commands to download a sample dataset, add it to DVC tracking, and commit the changes to Git. This demonstrates how to version control data files using DVC.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/iterative/dataset-registry \
          get-started/data.xml -o data/data.xml
$ dvc add data/data.xml
$ git add data/data.xml.dvc data/.gitignore
$ git commit -m "Add raw data"

----------------------------------------

TITLE: Visualizing DVC Pipeline
DESCRIPTION: Generates a graph visualization of the pipeline structure using the dvc dag command.

LANGUAGE: cli
CODE:
$ dvc dag

----------------------------------------

TITLE: Basic LightGBM Integration with DVCLiveCallback
DESCRIPTION: Basic example of integrating DVCLive tracking with LightGBM training by adding DVCLiveCallback to the callbacks list.

LANGUAGE: python
CODE:
from dvclive.lgbm import DVCLiveCallback

...

lightgbm.train(
  param, train_data, valid_sets=[validation_data], num_round=5,
  callbacks=[DVCLiveCallback()])

----------------------------------------

TITLE: Running DVC Experiment Pipeline
DESCRIPTION: This snippet demonstrates how to run a DVC experiment pipeline using the 'dvc exp run' command. It executes the pipeline defined in the default dvc.yaml file in the current directory.

LANGUAGE: cli
CODE:
$ dvc exp run
...
Reproduced experiment(s): matte-vies

----------------------------------------

TITLE: Installing DVC with Chocolatey on Windows
DESCRIPTION: Uses the Chocolatey package manager to install DVC. This is described as the easiest way to install from the command line for most cases.

LANGUAGE: cli
CODE:
$ choco install dvc

----------------------------------------

TITLE: Defining Pipeline Stages
DESCRIPTION: Example showing how to define a basic pipeline stage with command, dependencies and outputs

LANGUAGE: yaml
CODE:
stages:
  transpose:
    cmd: ./trans.r rows.txt > columns.txt
    deps:
      - rows.txt
    outs:
      - columns.txt

----------------------------------------

TITLE: Defining DVC Pipeline Configuration in YAML
DESCRIPTION: YAML configuration that specifies pipeline terminology matching patterns and provides tooltip documentation for DVC pipelines. The configuration defines various terms related to pipelines and explains how DVC uses dvc.yaml files to describe reproducible data processing workflows.

LANGUAGE: yaml
CODE:
name: Pipeline
match:
  - pipeline
  - pipelines
  - 'data pipeline'
  - 'data pipelines'
  - 'dvc pipelines'
  - 'dvc pipeline'
tooltip: >
  DVC pipelines describe data processing workflows in a standard declarative
  YAML format ([`dvc.yaml`](/doc/user-guide/project-structure/dvcyaml-files)).
  This guarantees DVC can reproduce them consistently. DVC also helps automate
  their execution and caches their results. See [Defining
  Pipelines](/doc/user-guide/pipelines/defining-pipelines) for more details.

----------------------------------------

TITLE: Logging Model Artifact with DVCLive in Python
DESCRIPTION: Python code snippet demonstrating how to use DVCLive's log_artifact method to cache a model with DVC and add it to the model registry. It includes parameters for model type, name, description, and labels.

LANGUAGE: python
CODE:
from dvclive import Live


with Live() as live:

...

    live.log_artifact(
        str("models/model.pkl"),
        type="model",
        name="pool-segmentation",
        desc="This is a Computer Vision (CV) model that's segmenting out swimming pools from satellite images.",
        labels=["cv", "segmentation", "satellite-images", params.train.arch],
    )

----------------------------------------

TITLE: Configuring DVC Cache Link Type
DESCRIPTION: Command to configure DVC to use hardlinks and symlinks for cache storage. This sets the cache.type configuration parameter to use both hardlink and symlink strategies.

LANGUAGE: cli
CODE:
$ dvc config cache.type hardlink,symlink

----------------------------------------

TITLE: Adding Evaluation Stage in DVC Pipeline
DESCRIPTION: Adds a final evaluation stage to the DVC pipeline using the 'dvc stage add' command. This stage runs an evaluation script on the model and features data.

LANGUAGE: cli
CODE:
$ dvc stage add -n evaluate \
  -d src/evaluate.py -d model.pkl -d data/features \
  -o eval \
  python src/evaluate.py model.pkl data/features

----------------------------------------

TITLE: Listing DVC Experiments in Bash
DESCRIPTION: Example of using 'dvc exp list' command to display all experiments in the project, showing their commit hashes and names.

LANGUAGE: bash
CODE:
$ dvc exp list --all-commits
11-bigrams-experiment:
    1d4c01d [conic-ease]
    a80bca5 [lucid-lair]
    9380a12 [major-mela]

----------------------------------------

TITLE: Customizing Metrics and Plots in DVC YAML
DESCRIPTION: Demonstrates how to customize metrics and plots configuration in the dvc.yaml file. This includes defining custom plot templates, axes, and data sources for various evaluation metrics.

LANGUAGE: yaml
CODE:
metrics:
- eval/metrics.json
plots:
- ROC:
    template: simple
    x: fpr
    y:
      eval/plots/sklearn/roc/train.json: tpr
      eval/plots/sklearn/roc/test.json: tpr
- Confusion-Matrix:
    template: confusion
    x: actual
    y:
      eval/plots/sklearn/cm/train.json: predicted
      eval/plots/sklearn/cm/test.json: predicted
- Precision-Recall:
    template: simple
    x: recall
    y:
      eval/plots/sklearn/prc/train.json: precision
      eval/plots/sklearn/prc/test.json: precision
- eval/plots/images/importance.png

----------------------------------------

TITLE: Simple DVC Pull Example
DESCRIPTION: Basic example showing how to pull all tracked files in a project using dvc pull with no arguments.

LANGUAGE: bash
CODE:
$ dvc pull

$ tree
.
├── data
│   ├── data.xml
│   ├── data.xml.dvc
...
└── model.pkl

----------------------------------------

TITLE: Defining Parameters in params.yaml
DESCRIPTION: Shows the structure of the params.yaml file, which contains configuration parameters for different stages of the ML pipeline including prepare, featurize, and train.

LANGUAGE: yaml
CODE:
prepare:
  split: 0.20
  seed: 20170428

featurize:
  max_features: 100
  ngrams: 1

train:
  seed: 20170428
  n_est: 50
  min_split: 2

----------------------------------------

TITLE: Using dvc.api.open() to Access Remote File in Python
DESCRIPTION: Example of using dvc.api.open() to open a file from a remote DVC project hosted on GitHub. The function returns a file-like object that can be processed normally.

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry'
) as f:
    # ... f is a file-like object that can be processed normally.

----------------------------------------

TITLE: Running DVC Experiment with Parameter Modification
DESCRIPTION: Example of running a DVC experiment using 'dvc exp run' command with a parameter modification. It shows the execution of pipeline stages and updating of the lock file.

LANGUAGE: cli
CODE:
$ dvc exp run --set-param featurize.ngrams=3

Reproducing experiment 'funny-dado'
'data/data.xml.dvc' didn't change, skipping
Stage 'prepare' didn't change, skipping
Running stage 'featurize':
> python src/featurization.py data/prepared data/features
Updating lock file 'dvc.lock'

Running stage 'train':
> python src/train.py data/features model.pkl
Updating lock file 'dvc.lock'

Running stage 'evaluate':
> python src/evaluate.py model.pkl data/features
Updating lock file 'dvc.lock'

Ran experiment(s): funny-dado
Experiment results have been applied to your workspace.

----------------------------------------

TITLE: Integrating DVCLive with Optuna and Keras in Python
DESCRIPTION: This snippet demonstrates how to use DVCLive with both Optuna and Keras. It uses the DVCLiveCallback for Keras and logs parameters from the Optuna trial.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.keras import DVCLiveCallback

...

with Live() as live:
    live.log_params(trial.params)
    model.fit(
        x_train,
        y_train,
        validation_data=(x_valid, y_valid),
        shuffle=True,
        batch_size=BATCHSIZE,
        epochs=EPOCHS,
        verbose=False,
        callbacks=[DVCLiveCallback(live=live)]
    )

----------------------------------------

TITLE: Queueing Multiple DVC Experiments
DESCRIPTION: This snippet shows how to queue multiple DVC experiments for future execution using the '--queue' option. It queues two experiments with different base learning rates.

LANGUAGE: cli
CODE:
$ dvc exp run --queue -S train.fine_tune_args.base_lr=0.001
Queueing with overrides '{"params.yaml": ["train.fine_tune_args.base_lr=0.001"]}'.
Queued experiment 'blowy-pail' for future execution.
$ dvc exp run --queue -S train.fine_tune_args.base_lr=0.002
Queueing with overrides '{"params.yaml": ["train.fine_tune_args.base_lr=0.002"]}'.
Queued experiment 'nubby-gram' for future execution.

----------------------------------------

TITLE: DVC Add Command Synopsis
DESCRIPTION: The command-line syntax for the 'dvc add' command, showing all available options and arguments.

LANGUAGE: cli
CODE:
usage: dvc add [-h] [-q | -v] [-f] [--no-commit]
               [--glob] [-o <path>]
               [--to-remote] [-r <name>] [--remote-jobs <number>]
               [--no-relink]
               targets [targets ...]

----------------------------------------

TITLE: Updating Parameters in params.yaml
DESCRIPTION: Demonstrates how to update parameters in the params.yaml file. This example shows changing the max_features and ngrams parameters for the featurize stage.

LANGUAGE: git
CODE:
 featurize:
-  max_features: 100
-  ngrams: 1
+  max_features: 200
+  ngrams: 2

----------------------------------------

TITLE: Deleting Files from Dataset
DESCRIPTION: Shows how to remove files from a DVC-tracked dataset and update tracking information.

LANGUAGE: cli
CODE:
$ rm images/test/0/00011.png

$ dvc data status --granular
DVC uncommitted changes:
  (use "dvc commit <file>..." to track changes)
  (use "dvc checkout <file>..." to discard changes)
        modified: images/
        deleted: images/test/0/00011.png

$ dvc add images/test/0/00011.png
100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.73file/s]

----------------------------------------

TITLE: Adding Amazon S3 Remote in DVC CLI
DESCRIPTION: This snippet demonstrates how to add an Amazon S3 remote to DVC using the CLI. It sets a name for the remote and specifies the S3 URL with bucket and optional key path.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote s3://<bucket>/<key>

----------------------------------------

TITLE: DVC File Structure for Directory
DESCRIPTION: Example of the .dvc file structure created when adding an entire directory to DVC tracking.

LANGUAGE: yaml
CODE:
outs:
  - md5: ce57450aa92ab8f2b957c24b0df73edc.dir
    path: pics

----------------------------------------

TITLE: Custom DVCLive Callback Configuration
DESCRIPTION: Example showing how to customize DVCLive tracking by adding a callback with custom directory configuration.

LANGUAGE: python
CODE:
from dvclive import Live
from transformers.integrations import DVCLiveCallback

...

trainer = Trainer(...)
trainer.add_callback(DVCLiveCallback(Live(dir="custom_dir")))
trainer.train()

----------------------------------------

TITLE: Basic DVCLive Usage Example in Python
DESCRIPTION: Simple example showing how to use the DVCLive logger as a context manager, which ensures proper cleanup by calling Live.end() when exiting the context.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    ...

----------------------------------------

TITLE: Running DVC Experiment with Parameter Override
DESCRIPTION: This snippet demonstrates how to run a DVC experiment while overriding a specific parameter value using the '--set-param' or '-S' option. It changes the base learning rate for fine-tuning.

LANGUAGE: cli
CODE:
$ dvc exp run --set-param train.fine_tune_args.base_lr=0.001
...

----------------------------------------

TITLE: Defining a DVC Stage with Dependencies and Outputs
DESCRIPTION: Example of a DVC stage definition in YAML, including command, dependencies, and outputs for a data preparation step.

LANGUAGE: yaml
CODE:
stages:
  prepare:
    cmd: source src/cleanup.sh
    deps:
      - src/cleanup.sh
      - data/raw
    outs:
      - data/clean.csv

----------------------------------------

TITLE: DVC Checkout Command Usage Syntax
DESCRIPTION: Command line syntax for the dvc checkout command showing available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc checkout [-h] [-q | -v] [--summary] [-d] [-R] [-f]
                    [--relink] [--allow-missing]
                    [targets [targets ...]]

----------------------------------------

TITLE: Integrating DVCLive with PyTorch for Experiment Tracking
DESCRIPTION: This snippet demonstrates how to use DVCLive to log parameters, metrics, plots, and artifacts during PyTorch model training and evaluation. It includes logging train and test metrics, confusion matrices, misclassified images, and saving the best model.

LANGUAGE: python
CODE:
from dvclive import Live

...

with Live(report="notebook") as live:

    live.log_params(params)

    for _ in range(params["epochs"]):

        train_one_epoch(
            model, criterion, x_train, y_train, params["lr"], params["weight_decay"]
        )

        # Train Evaluation
        metrics_train, acual_train, predicted_train = evaluate(
            model, x_train, y_train)

        for k, v in metrics_train.items():
            live.log_metric(f"train/{k}", v)

        live.log_sklearn_plot(
            "confusion_matrix",
            acual_train, predicted_train,
            name="train/confusion_matrix"
        )

        # Test Evaluation
        metrics_test, actual, predicted = evaluate(
            model, x_test, y_test)

        for k, v in metrics_test.items():
            live.log_metric(f"test/{k}", v)

        live.log_sklearn_plot(
            "confusion_matrix", actual, predicted, name="test/confusion_matrix"
        )

        live.log_image(
            "misclassified.jpg",
            get_missclassified_image(actual, predicted, mnist_test)
        )

        # Save best model
        if metrics_test["acc"] > best_test_acc:
            torch.save(model.state_dict(), "model.pt")

        live.next_step()

    live.log_artifact("model.pt", type="model", name="pytorch-model")

----------------------------------------

TITLE: Installing and Running YOLO with DVCLive
DESCRIPTION: Command line instructions for installing DVCLive and Ultralytics packages, followed by training a YOLO model with automatic experiment tracking. The command trains a YOLOv8n model on the COCO8 dataset for 5 epochs with 640px image size.

LANGUAGE: cli
CODE:
$ pip install dvclive ultralytics
$ yolo train model=yolov8n.pt data=coco8.yaml epochs=5 imgsz=640

----------------------------------------

TITLE: Adding GCS Remote Storage in DVC
DESCRIPTION: Command to add a Google Cloud Storage bucket as a default remote storage location in DVC. Requires specifying a bucket name and optional path within the bucket.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote gs://<mybucket>/<path>

----------------------------------------

TITLE: Basic DVC Pull Command Usage
DESCRIPTION: Shows the basic syntax and arguments for the dvc pull command including available options for parallelism, remote selection, and scope control.

LANGUAGE: bash
CODE:
usage: dvc pull [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]
                [-d] [-f] [-R] [--all-commits]
                [--run-cache | --no-run-cache] [--allow-missing]
                [targets [targets ...]]

----------------------------------------

TITLE: Basic DVCLiveCallback Implementation in Fast.ai
DESCRIPTION: Demonstrates how to add DVCLiveCallback to a Fast.ai Learner for basic experiment tracking. The callback is added to the fit_one_cycle method to track metrics during training.

LANGUAGE: python
CODE:
from dvclive.fastai import DVCLiveCallback

...

learn = tabular_learner(data_loader, metrics=accuracy)
learn.fit_one_cycle(
    n_epoch=2,
    cbs=[DVCLiveCallback()])

----------------------------------------

TITLE: DVC Repro Command Synopsis
DESCRIPTION: The usage syntax for the 'dvc repro' command, showing available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc repro [-h] [-q | -v] [-f] [-i]
                 [-s] [-p] [-P] [-R]
                 [--downstream] [--force-downstream]
                 [--pull] [--allow-missing] [--dry]
                 [--glob] [--no-commit] [--no-run-cache]
                 [-k] [--ignore-errors]
                 [targets [<target> ...]]

----------------------------------------

TITLE: Defining log_metric Method
DESCRIPTION: Function signature for logging metrics with type hints for parameters. Accepts metric name, value, optional timestamp flag, and plot configuration.

LANGUAGE: python
CODE:
def log_metric(
    name: str,
    val: Union[int, float, str],
    timestamp: bool = False,
    plot: Optional[bool] = True
):

----------------------------------------

TITLE: Defining dvc.api.open() Function in Python
DESCRIPTION: Function signature for dvc.api.open(), which opens a tracked file in a DVC project. It accepts parameters for specifying the file path, repository, revision, remote storage, and file opening mode.

LANGUAGE: python
CODE:
def open(path: str,
         repo: str = None,
         rev: str = None,
         remote: str = None,
         remote_config: dict = None,
         config: dict = None,
         mode: str = "r",
         encoding: str = None)

----------------------------------------

TITLE: Importing DVC API Module in Python
DESCRIPTION: Demonstrates how to import the DVC API module in a Python script. This is the first step to accessing DVC functionality programmatically.

LANGUAGE: python
CODE:
import dvc.api

----------------------------------------

TITLE: DVC Remote Add Command Usage
DESCRIPTION: Command syntax and arguments for adding a new remote storage location to DVC configuration.

LANGUAGE: usage
CODE:
usage: dvc remote add [-h] [--global | --system | --project | --local]
                      [-q | -v] [-d] [-f]
                      name url

positional arguments:
  name           Name of the remote.
  url            (See supported URLs in the examples below.)

----------------------------------------

TITLE: Running DVC Pipeline with Selective Data Pulling
DESCRIPTION: Example of running a DVC pipeline with the '--pull' and '--allow-missing' flags to selectively download only the necessary data for changed stages. It also shows how to modify a specific stage parameter.

LANGUAGE: cli
CODE:
$ dvc exp run --pull --allow-missing --set-param evaluate.n_samples_to_save=20
Reproducing experiment 'hefty-tils'
'data/pool_data.dvc' didn't change, skipping
Stage 'data_split' didn't change, skipping
Stage 'train' didn't change, skipping
Running stage 'evaluate':
...

----------------------------------------

TITLE: Initializing DVC Project
DESCRIPTION: Initializes a new DVC project within a Git repository.

LANGUAGE: bash
CODE:
dvc init

----------------------------------------

TITLE: Defining DVC Pipeline Stages in YAML
DESCRIPTION: Example of defining DVC pipeline stages in a 'dvc.yaml' file. It shows two stages: 'prepare' and 'featurize', with their respective commands, dependencies, parameters, and outputs.

LANGUAGE: yaml
CODE:
stages:
  prepare:
    cmd: python src/prepare.py data/data.xml
    deps:
      - data/data.xml
      - src/prepare.py
    params:
      - prepare.seed
      - prepare.split
    outs:
      - data/prepared
  featurize:
    cmd: python src/featurization.py data/prepared data/features
    deps:
      - data/prepared
      - src/featurization.py
    params:
      - featurize.max_features
      - featurize.ngrams
    outs:
      - data/features

----------------------------------------

TITLE: Using Live.make_dvcyaml() in Python
DESCRIPTION: Example usage of the Live.make_dvcyaml() function. It demonstrates logging parameters, metrics, and sklearn plots before generating the DVC configuration.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()
live.log_param("lr", 0.01)
live.log_metric("acc", 0.9)
live.log_sklearn_plot("confusion_matrix", [0, 0, 1, 1], [1, 0, 0, 1])
live.make_dvcyaml()

----------------------------------------

TITLE: Multiple Experiments Tracking with DVCLive
DESCRIPTION: Implementation of data drift tracking with separate experiments for each batch using DVCLive.

LANGUAGE: python
CODE:
from dvclive import Live

for step, date in enumerate(experiment_batches):
    with Live() as live:
        live.log_param("begin", date[0])
        live.log_param("end", date[1])
        live.log_param("step", step)

        metrics = eval_drift(
            df.loc[df.dteday.between(reference_dates[0], reference_dates[1])],
            df.loc[df.dteday.between(date[0], date[1])],
            column_mapping=data_columns,
        )

        for feature in metrics:
            live.log_metric(feature[0], round(feature[1], 3))

----------------------------------------

TITLE: Function Definition - DVC Experiment Show API
DESCRIPTION: Main function signature for exp_show() that retrieves DVC experiments. Takes optional parameters for repository location, revisions, parameter dependencies and configuration.

LANGUAGE: python
CODE:
def exp_show(
    repo: Optional[str] = None,
    revs: Optional[Union[str, List[str]]] = None,
    num: int = 1,
    param_deps: bool = False,
    force: bool = False,
    config: Optional[dict] = None,
) -> List[Dict]:

----------------------------------------

TITLE: Accessing Experiments via Python API
DESCRIPTION: Demonstrates how to programmatically access experiment data using the DVC Python API and convert to Pandas DataFrame.

LANGUAGE: python
CODE:
import dvc.api

exps = dvc.api.exp_show()

LANGUAGE: python
CODE:
import dvc.api
import pandas as pd

df = pd.DataFrame(dvc.api.exp_show())

----------------------------------------

TITLE: GitHub Actions Workflow for Model Deployment
DESCRIPTION: Complete GitHub Actions workflow configuration for automated model deployment triggered by model registry stage assignments.

LANGUAGE: yaml
CODE:
name: Deploy Model (Template)

on:
  # the workflow is triggered whenever a tag is pushed to the repository
  push:
    tags:
      - '*'
jobs:
  # This job parses the git tag with the GTO GitHub Action to identify model registry actions. You can most likely copy this job and what precedes it verbatim into your own workflow
  parse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Parse GTO tag'
        id: gto
        uses: iterative/gto-action@v2
    outputs:
      event: ${{ steps.gto.outputs.event }}
      name: ${{ steps.gto.outputs.name }}
      stage: ${{ steps.gto.outputs.stage }}
      version: ${{ steps.gto.outputs.version }}

  deploy-model:
    needs: parse
    # using the outputs from the "parse" job, we run this job only for actions
    # in the model registry and only when the model was assigned to a stage called "prod"
    # You can replace the conditions with your own
    if:
      ${{ needs.parse.outputs.event == 'assignment' && needs.parse.outputs.stage
      == 'prod' }}
    runs-on: ubuntu-latest
    steps:
      - uses: iterative/setup-dvc@v1
      # this step uses DVC to download the model from the remote repository and deploys the model
      # Model deployment is mocked here as it is specific to each deployment environment
      # The DVC Studio token is used to avoid having to store specific remote storage credentials on GitHub
      - name: Get Model For Deployment
        run: |
          dvc config --global studio.token ${{ secrets.DVC_STUDIO_TOKEN }}
          dvc artifacts get  ${{ github.server_url }}/${{ github.repository }} ${{ needs.parse.outputs.name }} --rev ${{ needs.parse.outputs.version }}
          echo "The right model is available and you can use the rest of this command to deploy it. Good job!"

----------------------------------------

TITLE: DVC Metrics Command Usage Syntax
DESCRIPTION: Basic command-line syntax for DVC metrics commands showing available subcommands and options.

LANGUAGE: usage
CODE:
usage: dvc metrics [-h] [-q | -v] {show,diff} ...

positional arguments:
  COMMAND
    show                Print metrics, with optional formatting
    diff                Show changes in metrics between commits.

----------------------------------------

TITLE: DVC File Structure in YAML
DESCRIPTION: Example of a DVC file structure showing how data files are tracked. This demonstrates the metadata format used by DVC to version control data.

LANGUAGE: yaml
CODE:
outs:
  - md5: 22a1a2931c8370d3aeedd7183606fd7f
    path: data.xml

----------------------------------------

TITLE: Adding Directory to DVC
DESCRIPTION: Command-line example of adding an entire directory to DVC tracking.

LANGUAGE: cli
CODE:
$ dvc add pics

----------------------------------------

TITLE: Adding a DVC Stage via Command Line
DESCRIPTION: Example of using the dvc stage add command to create a new stage in the pipeline, specifying dependencies and outputs.

LANGUAGE: bash
CODE:
$ dvc stage add --name train \
                --deps src/model.py \
                --deps data/clean.csv \
                --outs data/predict.dat \
                python src/model.py data/clean.csv

----------------------------------------

TITLE: Fetching DVC-tracked Data from Remote Storage
DESCRIPTION: Shows the basic usage of the 'dvc fetch' command to download tracked files and directories from a remote storage into the local cache.

LANGUAGE: cli
CODE:
$ dvc fetch

----------------------------------------

TITLE: Basic DVC File Structure in YAML
DESCRIPTION: Example of a simple .dvc file showing the basic structure for tracking a data file. Includes the output path, MD5 hash, description, and remote storage location.

LANGUAGE: yaml
CODE:
outs:
  - md5: a304afb96060aad90176268345e10355
    path: data.xml
    desc: Cats and dogs dataset
    remote: myremote

----------------------------------------

TITLE: Verifying DVC Pipeline Status
DESCRIPTION: Example of using 'dvc repro --dry --allow-missing' to check which pipeline stages need to be run without actually executing them or pulling any data. This is useful for CI jobs to verify pipeline status.

LANGUAGE: cli
CODE:
$ dvc repro --allow-missing --dry
'data/pool_data.dvc' didn't change, skipping
Stage 'data_split' didn't change, skipping
Stage 'train' didn't change, skipping
Stage 'evaluate' didn't change, skipping

----------------------------------------

TITLE: Defining metrics_show Function in Python
DESCRIPTION: Function signature for dvc.api.metrics_show(). It retrieves metrics from a DVC repository and returns a dictionary of metric values.

LANGUAGE: python
CODE:
def metrics_show(
    *targets: str,
    repo: Optional[str] = None,
    rev: Optional[str] = None,
    config: Optional[dict] = None,
) -> Dict:

----------------------------------------

TITLE: Creating a DVC Stage for Data Splitting
DESCRIPTION: This CLI command creates a DVC stage for the data splitting script. It specifies dependencies, outputs, and parameters for the stage.

LANGUAGE: cli
CODE:
$ dvc stage add --name data_split \
  --params base,data_split \
  --deps data/pool_data --deps src/data_split.py \
  --outs data/train_data --outs data/test_data \
  python src/data_split.py

----------------------------------------

TITLE: Basic DVC Push Commands
DESCRIPTION: Examples of basic push operations for entire cache and specific DVC files.

LANGUAGE: cli
CODE:
$ dvc push

LANGUAGE: cli
CODE:
$ dvc push data.zip.dvc

----------------------------------------

TITLE: Initializing DVCLive Context
DESCRIPTION: Initialize a DVCLive context manager for logging experiment data.

LANGUAGE: python
CODE:
with Live() as live:

----------------------------------------

TITLE: Setting Up DVC Development Environment in Python
DESCRIPTION: Steps to create a virtual environment, activate it, and install DVC in editable mode with development dependencies.

LANGUAGE: cli
CODE:
$ cd dvc
$ python3 -m venv venv
$ source venv/bin/activate
$ pip install --upgrade pip wheel
$ pip install -e ".[dev]"

----------------------------------------

TITLE: Using DVCLive with PyTorch DistributedDataParallel
DESCRIPTION: This snippet shows how to use DVCLive with PyTorch's DistributedDataParallel (DDP) by calling DVCLive only in the rank 0 process. It demonstrates conditional logging based on the process rank.

LANGUAGE: python
CODE:
from dvclive import Live
from torch.distributed import get_rank

...

rank = torch.distributed.get_rank()

if rank == 0:
    # Train model and log with dvclive
    with Live() as live:
        train(...)
        live.log_metric(...)

else:
    # Train model without dvclive
    train(...)

----------------------------------------

TITLE: DVC Push with Dependencies Example
DESCRIPTION: Demonstrates pushing specific stages and their dependencies in a DVC pipeline.

LANGUAGE: cli
CODE:
$ dvc status --cloud
...
	new:            data/model.p
	new:            data/matrix-test.p
	new:            data/matrix-train.p

LANGUAGE: cli
CODE:
$ dvc push --with-deps test-posts

# Do some work based on the partial update...
# Then push the rest of the data:

$ dvc push --with-deps matrix-train

$ dvc status --cloud
Cache and remote 'r1' are in sync.

----------------------------------------

TITLE: Using DVCLive General Python API
DESCRIPTION: Implement experiment tracking using DVCLive's general Python API for custom training loops.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    live.log_param("epochs", NUM_EPOCHS)

    for epoch in range(NUM_EPOCHS):
        train_model(...)
        metrics = evaluate_model(...)
        for metric_name, value in metrics.items():
            live.log_metric(metric_name, value)
        live.next_step()

    live.log_artifact("model.pkl", type="model")

----------------------------------------

TITLE: Logging Metrics in TensorFlow Training Loop with DVCLive
DESCRIPTION: This code snippet demonstrates how to use DVCLive to log metrics in a TensorFlow training loop. It includes logging train and validation accuracy for each epoch and uses the next_step() method to indicate the end of an epoch.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:

    for epoch in range(epochs):
        start_time = time.time()
        for step, (x_batch_train, y_batch_train) in enumerate(train_dataset):
            with tf.GradientTape() as tape:
                logits = model(x_batch_train, training=True)
                loss_value = loss_fn(y_batch_train, logits)
            grads = tape.gradient(loss_value, model.trainable_weights)
            optimizer.apply_gradients(zip(grads, model.trainable_weights))
            train_acc_metric.update_state(y_batch_train, logits)

        live.log_metric("train/accuracy", float(train_acc_metric.result())
        train_acc_metric.reset_states()

        for x_batch_val, y_batch_val in val_dataset:
            val_logits = model(x_batch_val, training=False)
            val_acc_metric.update_state(y_batch_val, val_logits)
        live.log_metric("val/accuracy", float(val_acc_metric.result())
        val_acc_metric.reset_states()

        live.next_step()

----------------------------------------

TITLE: GitLab CI Pipeline for Model Deployment
DESCRIPTION: Complete GitLab CI pipeline configuration for automated model deployment triggered by model registry stage assignments.

LANGUAGE: yaml
CODE:
# Deploy Model (Template)

workflow:
  rules:
    # Run the pipeline whenever a tag is pushed to the repository
    - if: $CI_COMMIT_TAG

parse:
  # This job parses the model tag to identify model registry actions
  # You can most likely copy this job and what precedes it verbatim into your own workflow
  image: python:3.11-slim
  script:
    # Install GTO to parse model tags
    - pip install gto
    # This job parses the model tags to identify model registry actions
    - echo "CI_COMMIT_TAG - ${CI_COMMIT_TAG}"
    - echo MODEL_NAME="$(gto check-ref ${CI_COMMIT_TAG} --name)" >> parse.env
    - echo MODEL_VERSION="$(gto check-ref ${CI_COMMIT_TAG} --version)" >>
      parse.env
    - echo MODEL_EVENT="$(gto check-ref ${CI_COMMIT_TAG} --event)" >> parse.env
    - echo MODEL_STAGE="$(gto check-ref ${CI_COMMIT_TAG} --stage)" >> parse.env
    # Print variables saved to parse.env
    - cat parse.env
  artifacts:
    reports:
      dotenv: parse.env

deploy-model:
  needs:
    - job: parse
      artifacts: true
  image: python:3.11-slim
  script:
    # Check if the model is assigned to prod (variables from parse.env are only available in the 'script' section)
    # You can replace the conditions with your own
    - if [[ $MODEL_EVENT == 'assignment' && $MODEL_STAGE == 'prod' ]]; then echo
      "Deploy model"; else exit 1; fi
    # Install DVC
    - pip install dvc
    # Build commands to download and deploy the model
    - dvc config --global studio.token ${DVC_STUDIO_TOKEN}
    - dvc artifacts get  ${CI_REPOSITORY_URL} ${MODEL_NAME} --rev
      ${MODEL_VERSION}
    - echo "The right model is available and you can use the rest of this
      command to deploy it. Good job!"

----------------------------------------

TITLE: Python Implementation for Project Creation
DESCRIPTION: Python script demonstrating how to create a DVC Studio project using the requests library. Includes authentication, payload construction, and response handling.

LANGUAGE: python
CODE:
import json
import os
import requests


url = "https://studio.datachain.ai/api/create-project"
token = os.environ["DVC_STUDIO_TOKEN"]
payload = json.dumps({
  "repo_url": "https://github.com/amritghimire/monorepo-model-registry-fixture",
  "public": True,
  "team_name": "team_name",
  "subdir": "nested",
  "name": "test-nested"
})
headers = {
  'Authorization': f'token {token}',
  'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)
for project in response.json()["projects"]:
    print(project["url"])
    ...

----------------------------------------

TITLE: Logging Model Checkpoints with DVCLiveLogger
DESCRIPTION: Examples of how to use the log_model parameter in DVCLiveLogger to save model checkpoints. It shows different configurations for logging checkpoints at the end of training or during training.

LANGUAGE: python
CODE:
from dvclive.lightning import DVCLiveLogger

logger = DVCLiveLogger(log_model=True)
trainer = Trainer(logger=logger)
trainer.fit(model)

LANGUAGE: python
CODE:
from dvclive.lightning import DVCLiveLogger

logger = DVCLiveLogger(log_model="all")
trainer = Trainer(logger=logger)
trainer.fit(model)

LANGUAGE: python
CODE:
from dvclive.lightning import DVCLiveLogger

logger = DVCLiveLogger(log_model=True),
checkpoint_callback = ModelCheckpoint(
        dirpath="model",
        monitor="val_acc",
        mode="max",
)
trainer = Trainer(logger=logger, callbacks=[checkpoint_callback])
trainer.fit(model)

----------------------------------------

TITLE: Python DVCLive Metrics Logging
DESCRIPTION: Example Python code showing how to log metrics using DVCLive in a machine learning project.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    ...
    live.log_metric("AUC", auc)
    live.log_metric("error", error)
    live.log_metric("TP", tp)

----------------------------------------

TITLE: Downloading Data using DVC CLI
DESCRIPTION: Downloads data from a DVC repository using dvc get command, useful for deployment scenarios outside DVC projects.

LANGUAGE: cli
CODE:
$ dvc get https://github.com/iterative/dataset-registry \
          use-cases/cats-dogs

----------------------------------------

TITLE: Basic XGBoost Integration with DVCLive
DESCRIPTION: Basic example showing how to integrate DVCLive callback with XGBoost classifier. The code demonstrates setting up a classifier with evaluation metrics and early stopping, using DVCLiveCallback for tracking.

LANGUAGE: python
CODE:
from dvclive.xgb import DVCLiveCallback

...

model = xgb.XGBClassifier(
    n_estimators=100,
    early_stopping_rounds=5,
    eval_metric=["merror", "mlogloss"],
    callbacks=[DVCLiveCallback()]
)

model.fit(
    X_train,
    y_train,
    eval_set=[(X_test, y_test)]
)

----------------------------------------

TITLE: Downloading DVC-Tracked Model File
DESCRIPTION: Example showing how to download a model file from a DVC project hosted on GitHub.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/iterative/example-get-started model.pkl
$ ls
model.pkl

----------------------------------------

TITLE: Integrating Hugging Face with DVCLive
DESCRIPTION: Configure Hugging Face trainer with DVCLiveCallback to track experiments and log artifacts.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.huggingface import DVCLiveCallback

...
with Live() as live:
    trainer.add_callback(
        DVCLiveCallback(live=live)
    )
    trainer.train()
    trainer.save_model("mymodel")
    live.log_artifact("mymodel", type="model")

----------------------------------------

TITLE: DVC Push Command Usage Syntax
DESCRIPTION: Shows the complete command line syntax and arguments for the dvc push command, including all available options and parameters.

LANGUAGE: usage
CODE:
usage: dvc push [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]
                [--all-commits] [--glob] [-d] [-R]
                [--run-cache | --no-run-cache]
                [targets [targets ...]]

----------------------------------------

TITLE: Executing DVC Move for File Renaming
DESCRIPTION: Example of using 'dvc move' to rename a file tracked by DVC. It demonstrates the command usage and the resulting file structure changes.

LANGUAGE: cli
CODE:
$ dvc add data.csv
...
$ tree
.
├── data.csv
└── data.csv.dvc

$ dvc move data.csv other.csv
...
$ tree
.
├── other.csv
└── other.csv.dvc

----------------------------------------

TITLE: DVC Studio Project Documentation
DESCRIPTION: Markdown documentation for DVC Studio's project dashboard features and functionality. Includes sections on Git history, display preferences, experiment visualization, and data export.

LANGUAGE: markdown
CODE:
# Explore ML Experiments

The projects dashboard in DVC Studio contains all your projects. Click on a
project name to open the project table, which contains:

- [Git history and live experiments](#git-history-and-live-metrics) of the
  project
- [Display preferences](#display-preferences)
- Buttons to
  [visualize and compare experiments](#visualize-and-compare-experiments).
- Button to [export project data](#export-project-data).

----------------------------------------

TITLE: Pulling Pipeline Data as Needed in DVC Experiments
DESCRIPTION: Illustrates how to use the '--pull' and '--allow-missing' flags to reproduce a pipeline while only pulling the necessary data for changed stages.

LANGUAGE: bash
CODE:
$ dvc exp run --pull --allow-missing
Reproducing experiment 'hefty-tils'
'data/pool_data.dvc' didn't change, skipping
Stage 'data_split' didn't change, skipping
Stage 'train' didn't change, skipping
Running stage 'evaluate':
...

----------------------------------------

TITLE: Setting Up DVC Grid Search Experiment
DESCRIPTION: This snippet demonstrates how to set up a grid search experiment in DVC by queueing multiple experiments with different combinations of architecture and learning rate parameters.

LANGUAGE: cli
CODE:
$ dvc exp run --queue \
    -S train.arch='resnet18,shufflenet_v2_x2_0' \
    -S 'train.fine_tune_args.base_lr=range(0.001, 0.01, 0.001)'
Queueing with overrides '{"params.yaml": ["train.arch=resnet18", "train.fine_tune_args.base_lr=0.001"]}'.
Queued experiment 'bijou-chis' for future execution.
Queueing with overrides '{"params.yaml": ["train.arch=resnet18", "train.fine_tune_args.base_lr=0.002"]}'.
Queued experiment 'color-meal' for future execution.
Queueing with overrides '{"params.yaml": ["train.arch=resnet18", "train.fine_tune_args.base_lr=0.003"]}'.
Queued experiment 'fusil-chin' for future execution.
...
Queueing with overrides '{"params.yaml": ["train.arch=shufflenet_v2_x2_0", "train.fine_tune_args.base_lr=0.001"]}'.
Queued experiment 'lumpy-jato' for future execution.
Queueing with overrides '{"params.yaml": ["train.arch=shufflenet_v2_x2_0", "train.fine_tune_args.base_lr=0.002"]}'.
Queued experiment 'gypsy-wino' for future execution.
Queueing with overrides '{"params.yaml": ["train.arch=shufflenet_v2_x2_0", "train.fine_tune_args.base_lr=0.003"]}'.
...

----------------------------------------

TITLE: Loading and Deserializing a Model from DVC Repository in Python
DESCRIPTION: Example of using dvc.api.read() to load a binary model file from a GitHub repository and then deserialize it using pickle. This demonstrates how to integrate DVC with data processing in Python.

LANGUAGE: python
CODE:
import pickle
import dvc.api

data = dvc.api.read(
    'model.pkl',
    repo='https://github.com/iterative/example-get-started'
    mode='rb'
)
model = pickle.loads(data)

----------------------------------------

TITLE: Timestamped Metric Logging
DESCRIPTION: Example demonstrating how to log metrics with timestamps and step progression using next_step().

LANGUAGE: python
CODE:
live.next_step()
live.log_metric("train/loss", 0.2, timestamp=True)
live.log_metric("val/loss", 0.4, timestamp=True)

----------------------------------------

TITLE: Custom DVCLive Instance with Additional Metrics
DESCRIPTION: Example showing how to use a custom DVCLive instance and log additional metrics after training.

LANGUAGE: python
CODE:
from dvclive import Live
from transformers.integrations import DVCLiveCallback

with Live("custom_dir") as live:
    trainer = Trainer(...)
    trainer.add_callback(DVCLiveCallback(live=live))

    # Log additional metrics after training
    live.log_metric("summary_metric", 1.0, plot=False)

----------------------------------------

TITLE: Setting Up DVC Remote Storage
DESCRIPTION: Example showing how to add and configure a default SSH remote storage location for DVC.

LANGUAGE: cli
CODE:
$ dvc remote add --default r1 \
                 ssh://user@example.com/path/to/dvc/cache/directory

----------------------------------------

TITLE: Configuring DVC Remote Storage
DESCRIPTION: Commands to set up remote storage and push data for accessibility across locations.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote s3://mybucket/dvcstore
$ dvc push

----------------------------------------

TITLE: Integrating DVCLiveCallback with Keras Model Training
DESCRIPTION: This snippet demonstrates how to include the DVCLiveCallback in the callbacks list passed to a Keras Model's fit method. It enables experiment tracking for the training process.

LANGUAGE: python
CODE:
from dvclive.keras import DVCLiveCallback

...

model.fit(
    train_dataset, epochs=num_epochs, validation_data=validation_dataset,
    callbacks=[DVCLiveCallback()])

----------------------------------------

TITLE: Sample DVC Configuration Output in YAML
DESCRIPTION: Example of the dvc.yaml file generated by Live.make_dvcyaml(). It includes configurations for parameters, metrics, and plots, including a confusion matrix plot with custom settings.

LANGUAGE: yaml
CODE:
params:
  - dvclive/params.yaml
metrics:
  - dvclive/metrics.json
plots:
  - dvclive/plots/metrics
  - dvclive/plots/sklearn/confusion_matrix.json:
      template: confusion
      x: actual
      y: predicted
      title: Confusion Matrix
      x_label: True Label
      y_label: Predicted Label

----------------------------------------

TITLE: Downloading Model Binaries using Python and DVC Studio API
DESCRIPTION: Python script to generate signed URLs for downloading model binaries from the DVC Studio model registry. It uses the requests library to make API calls and process the response.

LANGUAGE: python
CODE:
import json
import os
import requests


url = "https://studio.datachain.ai/api/model-registry/get-download-uris"
token = os.environ["DVC_STUDIO_TOKEN"]
headers = {"Authorization": f"token {token}"}
params = {
    "repo": "git@github.com:iterative/demo-bank-customer-churn.git",
    "name": "randomforest-model",
    "version": "v2.0.0"
}

response = requests.get(url, headers=headers, params=params)
for rel_path, obj_url in json.loads(response.content).items():
    obj = requests.get(obj_url)
    ...

----------------------------------------

TITLE: Adding a Default Local Remote in DVC
DESCRIPTION: Demonstrates how to add a default local remote storage location using the 'dvc remote add' command with the '-d' option.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote /path/to/remote

----------------------------------------

TITLE: Adding Files to DVC
DESCRIPTION: Tracks and caches data files or directories in DVC.

LANGUAGE: bash
CODE:
dvc add

----------------------------------------

TITLE: Customizing DVCLiveCallback with kwargs in Keras
DESCRIPTION: This snippet shows how to customize the new Live instance created by DVCLiveCallback using kwargs. In this case, it sets a custom directory for logging.

LANGUAGE: python
CODE:
model.fit(
    train_dataset,
    epochs=num_epochs,
    validation_data=validation_dataset,
    callbacks=[DVCLiveCallback(dir="custom_dir")])

----------------------------------------

TITLE: Using DVC Root for Fixed Path References
DESCRIPTION: Shows how to use 'dvc root' to reference fixed paths in other DVC commands, particularly useful when working in subdirectories.

LANGUAGE: bash
CODE:
$ dvc root
../../../

$ dvc stage add -d $(dvc root)/data/file.cvs ... \
      python $(dvc root)/scripts/something.py

----------------------------------------

TITLE: Working with Remote Datasets
DESCRIPTION: Demonstrates how to selectively pull, modify, and push changes to remote DVC datasets.

LANGUAGE: cli
CODE:
$ tree
.
└── images.dvc

0 directories, 1 file

$ dvc pull images/test/0

$ cp ~/Downloads/new.png images/test/0/70001.png

$ dvc add images/test/0/70001.png
100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.73file/s]

$ dvc push
2 files pushed

----------------------------------------

TITLE: Configuring DVC Cache Directory
DESCRIPTION: Illustrates setting the DVC cache directory to absolute and relative paths, and verifying the configuration.

LANGUAGE: bash
CODE:
$ dvc config cache.dir /mnt/cache
$ dvc config cache.dir
/mnt/cache
$ dvc config cache.dir ../../mycache
$ dvc pull
$ ls ../mycache
2f/

----------------------------------------

TITLE: DVC Remote Configuration File Example
DESCRIPTION: Example of the resulting configuration entries in the DVC config file after adding a default remote storage.

LANGUAGE: ini
CODE:
# .dvc/config
['remote "temp"']
    url = /tmp/dvcstore
[core]
    remote = myremote

----------------------------------------

TITLE: Assigning Stages Directly to Remote Repository
DESCRIPTION: This snippet shows how to use GTO to assign a stage directly to a remote repository, creating and pushing the necessary Git tag.

LANGUAGE: cli
CODE:
$ gto assign cv-class --stage dev \
             --repo https://github.com/myuser/example-gto
Created git tag 'cv-class#dev#1' that assigns stage to version 'v0.1.14'
Running `git push origin cv-class#dev#1`
Successfully pushed git tag cv-class#dev#1 on remote.

----------------------------------------

TITLE: Configuring S3-Compatible Server for DVC Remote
DESCRIPTION: This snippet shows how to set up a DVC remote for an S3-compatible server, such as DigitalOcean Spaces. It demonstrates adding the remote and specifying the endpoint URL.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote s3://mystore/path
$ dvc remote modify myremote endpointurl \
                    https://nyc3.digitaloceanspaces.com

----------------------------------------

TITLE: Displaying DVC Parameters File Content
DESCRIPTION: This snippet shows the content of a params.yaml file, which contains various parameters used in a DVC experiment, including training settings like validation percentage, architecture, image size, batch size, and fine-tuning arguments.

LANGUAGE: yaml
CODE:
...
train:
  valid_pct: 0.1
  arch: shufflenet_v2_x2_0
  img_size: 256
  batch_size: 8
  fine_tune_args:
    epochs: 8
    base_lr: 0.01
...

----------------------------------------

TITLE: Basic DVCLive Integration with Transformers
DESCRIPTION: Basic setup for enabling DVCLive tracking in Transformers with model logging enabled through environment variables.

LANGUAGE: python
CODE:
os.environ["HF_DVCLIVE_LOG_MODEL"] = "true"

from transformers import TrainingArguments, Trainer

# optional, `report_to` defaults to "all"
args = TrainingArguments(..., report_to="dvclive")
trainer = Trainer(..., args=args)

----------------------------------------

TITLE: Reproducing DVC Pipeline
DESCRIPTION: Executes or restores a specific version of the DVC pipeline.

LANGUAGE: bash
CODE:
dvc repro

----------------------------------------

TITLE: DVC Experiment Diff Output Example
DESCRIPTION: An example of the default output format for the 'dvc exp diff' command, showing changes in metrics and parameters between experiments.

LANGUAGE: bash
CODE:
$ dvc exp diff
Path         Metric   HEAD      workspace  Change
scores.json  roc_auc  0.915363  0.93345    0.018087
scores.json  grade    B         B-         —

Path         Param         HEAD  workspace  Change
params.yaml  max_features  1500  3000       1500

----------------------------------------

TITLE: Basic DVC Plots Diff Usage
DESCRIPTION: Command syntax and options for the DVC plots diff command, showing all available parameters and arguments.

LANGUAGE: bash
CODE:
usage: dvc plots diff [-h] [-q | -v]
                      [--targets [<paths> [<paths> ...]]]
                      [-t <name_or_path>] [-x <field>] [-y <field>]
                      [--no-header] [--title <text>]
                      [--x-label <text>] [--y-label <text>] [-o <path>]
                      [--show-vega] [--open] [--html-template <path>]
                      [revisions [revisions ...]]

----------------------------------------

TITLE: Running a Grid Search with DVC Experiments
DESCRIPTION: Demonstrates how to perform a grid search for hyperparameter tuning using DVC experiments. It uses the '--set-param' and '--queue' options to add multiple experiments to the queue.

LANGUAGE: bash
CODE:
$ dvc exp run -S 'train.min_split=8,64' -S 'train.n_est=range(100,500,100)' --queue
Queueing with overrides '{"params.yaml": ["train.min_split=8", "train.n_est=100"]}'.
Queued experiment 'azure-ices' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=8", "train.n_est=200"]}'.
Queued experiment 'zingy-peri' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=8", "train.n_est=300"]}'.
Queued experiment 'jammy-feds' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=8", "train.n_est=400"]}'.
Queued experiment 'lowse-shay' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=64", "train.n_est=100"]}'.
Queued experiment 'brown-hugs' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=64", "train.n_est=200"]}'.
Queued experiment 'local-scud' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=64", "train.n_est=300"]}'.
Queued experiment 'alpha-neck' for future execution.
Queueing with overrides '{"params.yaml": ["train.min_split=64", "train.n_est=400"]}'.
Queued experiment 'algal-hood' for future execution.
$ dvc queue start
...

----------------------------------------

TITLE: DVC Parameters Command Synopsis
DESCRIPTION: Command-line interface syntax for DVC params command showing available options and subcommands.

LANGUAGE: usage
CODE:
usage: dvc params [-h] [-q | -v] {diff} ...

positional arguments:
  COMMAND
    diff         Show changes in params between commits in the
                 DVC repository, or between a commit and the workspace.

----------------------------------------

TITLE: JSON Output with Hash Values
DESCRIPTION: Example showing diff output in JSON format with file hashes between two Git tags.

LANGUAGE: json
CODE:
{
  "added": [],
  "deleted": [],
  "modified": [
    {
      "path": "data/features/",
      "hash": {
        "old": "3338d2c21bdb521cda0ba4add89e1cb0.dir",
        "new": "42c7025fc0edeb174069280d17add2d4.dir"
      }
    }
  ]
}

----------------------------------------

TITLE: DVC Get Command Usage
DESCRIPTION: Example of using DVC get command to retrieve artifact files from a repository.

LANGUAGE: cli
CODE:
$ dvc get $REPO $ARTIFACT_PATH --rev $REVISION -o $OUTPUT_PATH

----------------------------------------

TITLE: Creating Basic DVC Pipeline Stage
DESCRIPTION: Example showing how to create a simple pipeline stage that counts lines in a text file, demonstrating basic dependency and output configuration.

LANGUAGE: cli
CODE:
$ dvc stage add -n count \
                -d test.txt \
                -o lines \
                "cat test.txt | wc -l > lines"

LANGUAGE: yaml
CODE:
stages:
  count:
    cmd: 'cat test.txt | wc -l > lines'
    deps:
      - test.txt
    outs:
      - lines

----------------------------------------

TITLE: Making Local Changes and Updating DVC Tracking in Bash
DESCRIPTION: Commands to modify a tracked data file, update DVC tracking, and commit changes. This demonstrates how to handle data updates in a DVC project.

LANGUAGE: bash
CODE:
$ cp data/data.xml /tmp/data.xml
$ cat /tmp/data.xml >> data/data.xml
$ dvc add data/data.xml
$ dvc push
$ git commit data/data.xml.dvc -m "Dataset updates"

----------------------------------------

TITLE: Setting DVCLive Environment Variables in Python
DESCRIPTION: This snippet demonstrates how to set environment variables for DVCLive using Python's os module. It sets the log level to DEBUG and enables automatic opening of HTML reports.

LANGUAGE: python
CODE:
import os
from dvclive import env

os.environ[env.DVCLIVE_LOGLEVEL] = "DEBUG"
os.environ[env.DVCLIVE_OPEN] = "True"

----------------------------------------

TITLE: DVC Pull with Dependencies
DESCRIPTION: Example showing how to pull files for a specific stage and its dependencies using the --with-deps flag.

LANGUAGE: bash
CODE:
$ dvc pull --with-deps featurize

# Use the partial update...
# Then pull the remaining data:

$ dvc pull
Everything is up to date.

----------------------------------------

TITLE: DVC Metrics Configuration in YAML
DESCRIPTION: Example of how metrics files are specified in dvc.yaml configuration file.

LANGUAGE: yaml
CODE:
metrics:
  - summary.json

----------------------------------------

TITLE: DVC Experiment Run Command Usage
DESCRIPTION: Shows the usage syntax for the 'dvc exp run' command, including all available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc exp run [-h] [-q | -v] [-f] [-i]
                   [-s] [-p] [-P] [-R]
                   [-n <name>] [-S [<filename>:]<override_pattern>]
                   [--queue] [--run-all] [-j <number>] [--temp]
                   [-r <experiment_rev>] [-C <path>]
                   [-m <message>]
                   [--downstream] [--force-downstream]
                   [--pull] [--dry] [--allow-missing]
                   [-k] [--ignore-errors]
                   [targets [targets ...]]

----------------------------------------

TITLE: Installing DVC with pip on Windows
DESCRIPTION: Uses pip to install DVC. It's recommended to use a virtual environment or pipx for installation. Python 3.8+ is required for the latest version of DVC.

LANGUAGE: cli
CODE:
$ pip install dvc

----------------------------------------

TITLE: Generating Random Metrics with Python and DVCLive
DESCRIPTION: This Python script demonstrates how to generate random metrics using DVCLive, which can be used for testing the 'dvc metrics diff' command.

LANGUAGE: python
CODE:
# train.py
import random
from dvclive import Live

with Live() as live:
    live.log_metric("AUC", random.random())
    live.log_metric("TP", random.randint(0, 1000))

----------------------------------------

TITLE: Updating Model from External Repository
DESCRIPTION: Example showing how to import and update a model file from an external Git repository using DVC.

LANGUAGE: cli
CODE:
$ dvc import git@github.com:iterative/example-get-started model.pkl
Importing 'model.pkl (git@github.com:iterative/example-get-started)'
-> 'model.pkl'

$ dvc update model.pkl.dvc
Output 'model.pkl' didn't change. Skipping saving.
Saving information to 'model.pkl.dvc'.

----------------------------------------

TITLE: Enabling Remote Verification (Bash)
DESCRIPTION: Shows how to enable the 'verify' option for a DVC remote to recalculate file hashes during pull and fetch operations.

LANGUAGE: bash
CODE:
$ dvc remote modify myremote verify true

----------------------------------------

TITLE: Filtering Metrics by Multiple Targets in Python
DESCRIPTION: Example of using dvc.api.metrics_show() with multiple targets to retrieve metrics from specific files.

LANGUAGE: python
CODE:
import dvc.api
metrics = dvc.api.metrics_show("eval/train_val_metrics.json", "eval/test_metrics.json")

----------------------------------------

TITLE: Installing DVClive Base Package
DESCRIPTION: Basic installation of DVClive using pip package manager. Requires Python 3.8 or higher.

LANGUAGE: cli
CODE:
$ pip install dvclive

----------------------------------------

TITLE: Custom Live Instance Implementation
DESCRIPTION: Example showing how to use a custom Live instance with DVCLiveCallback, allowing for additional metric logging after training completion.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.fastai import DVCLiveCallback

with Live("custom_dir") as live:
    learn = tabular_learner(data_loader, metrics=accuracy)
    learn.fit_one_cycle(
      n_epoch=2,
      cbs=[DVCLiveCallback(live=live)])

    # Log additional metrics after training
    live.log_metric("summary_metric", 1.0, plot=False)

----------------------------------------

TITLE: Sample Parameters YAML Configuration
DESCRIPTION: Example of a params.yaml file containing learning rate, training, and processing parameters for a machine learning project.

LANGUAGE: yaml
CODE:
lr: 0.0041

train:
  epochs: 70
  layers: 9

process:
  thresh: 0.98
  bow: 15000

----------------------------------------

TITLE: YAML Plot Configuration in dvc.yaml
DESCRIPTION: Configuration example showing how to define various types of plots in dvc.yaml, including confusion matrices, ROC curves, and image files.

LANGUAGE: yaml
CODE:
plots:
  - eval/live/plots/sklearn/cm/test.json:
      template: confusion
      x: actual
      y: predicted

  - ROC:
      x: fpr
      y:
        eval/live/plots/sklearn/roc/train.json: tpr
        eval/live/plots/sklearn/roc/test.json: tpr

  - eval/importance.png
  - eval/misclassified_examples

----------------------------------------

TITLE: Basic DVC Experiment Display
DESCRIPTION: Shows the default table output for experiment tracking, displaying workspace and HEAD experiments with metrics, parameters and dependencies.

LANGUAGE: cli
CODE:
$ dvc exp show

----------------------------------------

TITLE: Basic DVC GC Command Usage Syntax
DESCRIPTION: Shows the command line syntax for the dvc gc command with all available options and flags.

LANGUAGE: usage
CODE:
usage: dvc gc [-h] [-q | -v]
              [-w] [--rev <commit>] [-n <num>] [-a] [-T] [-A]
              [--date <YYYY-MM-DD>] [--all-experiments]
              [-p [<path> [<path> ...]]]
              [--not-in-remote]
              [-c] [-r <name>] [-j <number>] [-f] [--dry]

----------------------------------------

TITLE: Setting DVC Cache Type
DESCRIPTION: Shows how to configure the DVC cache type to use reflink if available, otherwise use copy.

LANGUAGE: bash
CODE:
$ dvc config cache.type reflink,copy

----------------------------------------

TITLE: DVC Lock File Structure
DESCRIPTION: Example of a dvc.lock file structure, showing the state of the pipeline including command, dependencies, parameters, and outputs with their respective hashes.

LANGUAGE: yaml
CODE:
schema: '2.0'
stages:
  prepare:
    cmd: python src/prepare.py data/data.xml
    deps:
      - path: data/data.xml
        md5: 22a1a2931c8370d3aeedd7183606fd7f
        size: 14445097
      - path: src/prepare.py
        md5: f09ea0c15980b43010257ccb9f0055e2
        size: 1576
    params:
      params.yaml:
        prepare.seed: 20170428
        prepare.split: 0.2
    outs:
      - path: data/prepared
        md5: 153aad06d376b6595932470e459ef42a.dir
        size: 8437363
        nfiles: 2

----------------------------------------

TITLE: Basic DVC Metrics Show Example
DESCRIPTION: Demonstrates basic usage of the metrics show command displaying AUC, TP, and error values from an eval.json file in the current workspace.

LANGUAGE: cli
CODE:
$ dvc metrics show
Path       AUC      TP    error
eval.json  0.66729  516   0.16982

----------------------------------------

TITLE: Configuring Pytorch Lightning with DVCLive
DESCRIPTION: Set up Pytorch Lightning trainer with DVCLiveLogger to track experiments.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.lightning import DVCLiveLogger

...
    trainer = Trainer(
        logger=DVCLiveLogger(log_model=True)
    )
    trainer.fit(model)

----------------------------------------

TITLE: Configuring Proxy User for WebHDFS in DVC
DESCRIPTION: Shows how to set up a proxy user (Hadoop superuser) for accessing WebHDFS in DVC. This feature requires proper cluster configuration and Kerberos authentication.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote proxy_to myuser

----------------------------------------

TITLE: Configuring Custom AWS CLI Config for DVC S3 Remote
DESCRIPTION: This snippet shows how to configure a DVC S3 remote to use custom AWS CLI config or credential files. It demonstrates setting the config path, credential path, and optional profile.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote \
                    configpath 'path/to/config'
# or
$ dvc remote modify --local myremote \
                    credentialpath 'path/to/credentials'
# and (optional)
$ dvc remote modify myremote profile 'myprofile'

----------------------------------------

TITLE: DVC Metrics Show with All Commits
DESCRIPTION: Shows how to display metrics history across all Git commits including the workspace, demonstrating the --all-commits option usage.

LANGUAGE: cli
CODE:
$ dvc metrics show --all-commits
Revision                                  Path       AUC      TP    error
workspace                                 eval.json  0.66729  516   0.16982
85acdb826754d175c2981510e183625bc817b2e6  eval.json  0.66524  521   0.17074
0335250a77cc9c196a40ff7fff1f53300a849ead  eval.json  0.66729  516   0.16982
fe0af34f66bb713d5a0ae8d8affeb8bda1512d00  eval.json  0.65115  528   0.17304
a9918370c0761e78a12d9a7b7fa7ededb073937d  eval.json  0.65115  528   0.17304

----------------------------------------

TITLE: Managing Default Remotes in DVC
DESCRIPTION: Shows how to set, get, and clear the default remote in DVC configuration.

LANGUAGE: bash
CODE:
$ dvc config core.remote myremote
$ dvc config core.remote
myremote
$ dvc config --unset core.remote

----------------------------------------

TITLE: DVC Lock File Structure Example
DESCRIPTION: Example of model file hash stored in dvc.lock file using YAML format.

LANGUAGE: yaml
CODE:
outs:
  - path: model.pkl
    md5: 98af33933679a75c2a51b953d3ab50aa

----------------------------------------

TITLE: DVC Remote Command Usage Synopsis
DESCRIPTION: Displays the usage syntax for the 'dvc remote' command and its subcommands, including add, default, remove, modify, and list.

LANGUAGE: bash
CODE:
usage: dvc remote [-h] [-q | -v] {add,default,remove,modify,list} ...

positional arguments:
  COMMAND
    add                 Add remote.
    default             Set/unset default remote.
    remove              Remove remote.
    modify              Modify remote.
    list                List available remotes.

----------------------------------------

TITLE: Configuring Azure Remote with Default Identity (Bash)
DESCRIPTION: Demonstrates setting up an Azure remote using default identity authentication.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote azure://mycontainer/object
$ dvc remote modify myremote account_name 'myaccount'
$ dvc push

----------------------------------------

TITLE: Logging Metrics
DESCRIPTION: Log numerical metrics with name and value.

LANGUAGE: python
CODE:
live.log_metric("acc", 0.9)

----------------------------------------

TITLE: Destroying DVC Project
DESCRIPTION: Command to remove all DVC-specific files from the directory, effectively deleting the DVC project and its configuration.

LANGUAGE: bash
CODE:
dvc destroy

----------------------------------------

TITLE: Generating Plots with DVC CLI
DESCRIPTION: Use DVC CLI to generate and display plots comparing different experiments.

LANGUAGE: cli
CODE:
$ dvc plots diff $(dvc exp list --name-only)

----------------------------------------

TITLE: Filtered DVC Experiment Display
DESCRIPTION: Example showing experiment results filtered to only show changed values using the --only-changed flag.

LANGUAGE: cli
CODE:
$ dvc exp show --only-changed

----------------------------------------

TITLE: Adding Local Remote Storage in DVC
DESCRIPTION: These snippets demonstrate how to add local directories as remote storage locations in DVC using absolute and relative paths.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote /tmp/dvcstore

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote ../dvcstore

----------------------------------------

TITLE: DVC Metrics Show Command Usage Syntax
DESCRIPTION: Shows the command line syntax and arguments for the dvc metrics show command. Includes positional arguments for targeting specific metrics files.

LANGUAGE: usage
CODE:
usage: dvc metrics show [-h] [-q | -v] [-a] [-T] [--all-commits]
                        [--json] [--md] [-R]
                        [targets [targets ...]]

----------------------------------------

TITLE: DVC Plots Command Usage Synopsis
DESCRIPTION: Command-line usage synopsis showing the main plots commands (show, diff, templates) and their basic purposes. Includes positional arguments and available commands.

LANGUAGE: usage
CODE:
usage: dvc plots [-h] [-q | -v] {show,diff,templates} ...

positional arguments:
  COMMAND
    show        Generate plots from target files or from `plots`
                definitions in `dvc.yaml`.
    diff        Show multiple versions of a plot by overlaying them
                in a single image.
    templates   List built-in plots templates or show JSON
                specification for one.

----------------------------------------

TITLE: Importing from Git Repository
DESCRIPTION: Example of importing files from a plain Git repository that is not a DVC repository.

LANGUAGE: cli
CODE:
$ dvc import git@github.com:GSA/data \
           enterprise-architecture/it-standards.csv

----------------------------------------

TITLE: Reading File Contents with DVCFileSystem in Python
DESCRIPTION: Examples of reading text and binary file contents using DVCFileSystem methods.

LANGUAGE: python
CODE:
>>> text = fs.read_text("get-started/data.xml", encoding="utf-8")

>>> contents = fs.read_bytes("get-started/data.xml")

----------------------------------------

TITLE: Fetching DVC Data with Dependencies
DESCRIPTION: Illustrates the use of the '--with-deps' option to fetch data for a specific stage and all its dependencies in the pipeline.

LANGUAGE: cli
CODE:
$ dvc fetch --with-deps train

----------------------------------------

TITLE: Running a DVC Experiment with Modified Data
DESCRIPTION: Demonstrates how to run a DVC experiment by modifying input data and using the 'dvc exp run' command. It also shows how to view the results using 'dvc metrics diff'.

LANGUAGE: bash
CODE:
$ truncate --size=20M data/data.xml
$ dvc exp run
...
Reproduced experiment(s): puffy-daks
Experiment results have been applied to your workspace.

$ dvc metrics diff
Path         Metric    HEAD     workspace  Change
scores.json  avg_prec  0.60405  0.56103    -0.04302
scores.json  roc_auc   0.9608   0.94003    -0.02077

----------------------------------------

TITLE: Image Logging Usage Examples in Python
DESCRIPTION: Demonstrates various ways to log different types of images including NumPy arrays, matplotlib figures, PIL images, and existing image files using DVCLive.

LANGUAGE: python
CODE:
from dvclive import Live

with Live(cache_images=True) as live:
    # 1. Log an image from a numpy array:
    import numpy as np
    img_numpy = np.ones((500, 500), np.uint8) * 255
    live.log_image("numpy.png", img_numpy)

    # 2. Or log a matplotlib figure:
    from matplotlib import pyplot as plt
    fig, ax = plt.subplots()
    ax.plot([1, 2, 3, 4])
    live.log_image("matplotlib.png", fig)

    # 3. Or log a `PIL.image`:
    from PIL import Image
    img_pil = Image.new("RGB", (500, 500), (250, 250, 250))
    live.log_image("pil.png", img_pil)

    # 4. Or log an existing image:
    live.log_image("sample.png", "run/batch_0_sample.png")

----------------------------------------

TITLE: Adding WebHDFS Remote with Security Settings in DVC CLI
DESCRIPTION: Shows how to add a WebHDFS remote storage with HTTPS and Kerberos security enabled. This series of commands sets up a new remote, enables HTTPS and Kerberos, and adds a token for authentication.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote webhdfs://example.com/path
$ dvc remote modify myremote use_https true
$ dvc remote modify myremote kerberos true
$ dvc remote modify --local myremote token SOME_BASE64_ENCODED_TOKEN

----------------------------------------

TITLE: Applying DVC Studio Configuration Updates with Helm
DESCRIPTION: Command to apply configuration changes to a DVC Studio deployment using Helm upgrade. This updates the running instance with new values from the values.yaml file.

LANGUAGE: cli
CODE:
$ helm upgrade --wait studio iterative/studio --namespace studio -f values.yaml

----------------------------------------

TITLE: Defining Stage Parameters in DVC YAML
DESCRIPTION: Illustrates how to define parameter dependencies for a stage in the dvc.yaml file. This example shows the 'featurize' stage with its command, dependencies, parameters, and outputs.

LANGUAGE: yaml
CODE:
featurize:
  cmd: python src/featurization.py data/prepared data/features
  deps:
    - data/prepared
    - src/featurization.py
  params:
    - featurize.max_features
    - featurize.ngrams
  outs:
    - data/features

----------------------------------------

TITLE: Combined DVC and Git Status Example
DESCRIPTION: Example showing how to use dvc data status and git status together to get complete repository status.

LANGUAGE: cli
CODE:
$ dvc data status
Not in cache:
  (use "dvc fetch <file>..." to download files)
        data/data.xml

DVC committed changes:
  (git commit the corresponding dvc files to update the repo)
        modified: data/features/

DVC uncommitted changes:
  (use "dvc commit <file>..." to track changes)
  (use "dvc checkout <file>..." to discard changes)
        deleted: model.pkl
(there are other changes not tracked by dvc, use "git status" to see)

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   dvc.lock

no changes added to commit (use "git add" and/or "git commit -a")

----------------------------------------

TITLE: Importing Data with Version Tracking
DESCRIPTION: Imports data while creating a DVC file that tracks the source repository's changes, enabling future updates.

LANGUAGE: cli
CODE:
$ dvc import https://github.com/iterative/dataset-registry \
             get-started/data.xml -o data/data.xml

----------------------------------------

TITLE: Comparing Specific Git Versions
DESCRIPTION: Example demonstrating how to compare plots between two specific Git versions using commit hashes.

LANGUAGE: bash
CODE:
$ dvc plots diff HEAD^ 0135527 --targets logs.csv

----------------------------------------

TITLE: Installing DVC with Homebrew on macOS
DESCRIPTION: This snippet shows how to install DVC using Homebrew package manager on macOS. Homebrew is the recommended installation method.

LANGUAGE: bash
CODE:
$ brew install dvc

----------------------------------------

TITLE: Displaying Registry State with GTO Show
DESCRIPTION: Demonstrates how to use 'gto show' to display the entire state of the registry, including all artifacts, their latest versions, and versions in each stage.

LANGUAGE: cli
CODE:
$ gto show -r https://github.com/iterative/example-gto
╒══════════╤══════════╤════════╤═════════╤════════════╕
│ name     │ latest   │ #dev   │ #prod   │ #staging   │
╞══════════╪══════════╪════════╪═════════╪════════════╡
│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │
│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │
│ cv-class │ v0.1.13  │ -      │ -       │ -          │
╘══════════╧══════════╧════════╧═════════╧════════════╛

----------------------------------------

TITLE: Load Specific Parameter Files - DVC Params Show
DESCRIPTION: Examples of loading parameters from specific parameter files.

LANGUAGE: python
CODE:
import dvc.api
params = dvc.api.params_show("configs/params_dev.yaml")

LANGUAGE: python
CODE:
import dvc.api
params = dvc.api.params_show(
  "configs/params_dev.yaml", "configs/params_prod.yaml")

----------------------------------------

TITLE: Importing and Pushing External Data to Remote in DVC
DESCRIPTION: Shows how to import external data and push it directly to a DVC remote without downloading it locally using the --to-remote flag.

LANGUAGE: cli
CODE:
$ dvc import-url --to-remote https://data.dvc.org/get-started/data.xml

$ ls
data.xml.dvc

$ dvc push
Everything is up to date.

----------------------------------------

TITLE: Adding HDFS Remote Storage in DVC CLI
DESCRIPTION: Demonstrates how to add an HDFS remote storage location using the DVC CLI. This command sets up a new remote named 'myremote' with the specified HDFS URL.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote hdfs://user@example.com:path

----------------------------------------

TITLE: Single Experiment Tracking with DVCLive
DESCRIPTION: Implementation of data drift tracking in a single experiment with multiple steps using DVCLive.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    for date in experiment_batches:
        live.log_param("begin", date[0])
        live.log_param("end", date[1])

        metrics = eval_drift(
            df.loc[df.dteday.between(reference_dates[0], reference_dates[1])],
            df.loc[df.dteday.between(date[0], date[1])],
            column_mapping=data_columns,
        )

        for feature in metrics:
            live.log_metric(feature[0], round(feature[1], 3))

        live.next_step()

----------------------------------------

TITLE: Defining dvc.api.artifacts_show() Function in Python
DESCRIPTION: Function signature for dvc.api.artifacts_show(). It takes parameters for artifact name, version, stage, and repository, returning a dictionary with path and Git revision.

LANGUAGE: python
CODE:
def artifacts_show(
    name: str,
    version: Optional[str] = None,
    stage: Optional[str] = None,
    repo: Optional[str] = None,
) -> Dict[str, str]:

----------------------------------------

TITLE: Setting Azure Environment Variables
DESCRIPTION: Examples of setting various Azure authentication environment variables

LANGUAGE: cli
CODE:
$ export AZURE_STORAGE_CONNECTION_STRING='mysecret'
$ export AZURE_STORAGE_ACCOUNT='myaccount'
$ export AZURE_STORAGE_KEY='mysecret'
$ export AZURE_STORAGE_SAS_TOKEN='mysecret'

----------------------------------------

TITLE: DVC Experiment Show Command Usage
DESCRIPTION: Shows the command line syntax and options for the 'dvc exp show' command.

LANGUAGE: usage
CODE:
usage: dvc exp show [-h] [-q | -v] [-a] [-T] [-A] [--rev <commit>]
                    [-n <num>] [--no-pager] [--drop <regex>]
                    [--keep <regex>] [--param-deps]
                    [--sort-by <metric/param>]
                    [--sort-order {asc,desc}] [--sha]
                    [--json] [--csv] [--md] [--precision <n>]
                    [--only-changed] [-f]

----------------------------------------

TITLE: Applying and Committing DVC Experiment Results
DESCRIPTION: Sequence of commands to apply a specific experiment ('gluey-leak'), check Git status and differences, and commit the changes to make the experiment persistent.

LANGUAGE: bash
CODE:
$ dvc exp apply gluey-leak
Changes for experiment 'gluey-leak' have been applied...

$ git status
On branch master
Changes not staged for commit:
        modified:   dvc.lock
        modified:   params.yaml
        modified:   scores.json
$ git diff params.yaml

LANGUAGE: git
CODE:
@@ -3,7 +3,7 @@ prepare:
 featurize:
-  max_features: 1500
+  max_features: 2000
   ngrams: 2

LANGUAGE: bash
CODE:
$ dvc status
Data and pipelines are up to date.
$ dvc diff
Modified:
    data/features/
    data/features/test.pkl
    data/features/train.pkl
    model.pkl
files summary: 0 added, 0 deleted, 3 modified, 0 not in cache

$ git add .
$ git commit -m "persist gluey-leak"

----------------------------------------

TITLE: Filtering Metrics by Git Revision in Python
DESCRIPTION: Example of using dvc.api.metrics_show() with a Git revision to retrieve metrics from a specific commit.

LANGUAGE: python
CODE:
import dvc.api
metrics = dvc.api.metrics_show(rev="HEAD~1")

----------------------------------------

TITLE: DVC Remote List Command Usage
DESCRIPTION: Shows the command syntax and available options for the dvc remote list command including optional flags for different config scopes and verbosity levels.

LANGUAGE: usage
CODE:
usage: dvc remote list [-h] [--global | --system | --project | --local]
                       [-q | -v]

----------------------------------------

TITLE: Python Parameters Loading Example
DESCRIPTION: Code example showing how to load DVC parameters in Python using dvc.api.

LANGUAGE: python
CODE:
import dvc.api

params = dvc.api.params_show()

lr = params['lr']
epochs = params['train']['epochs']
layers = params['train']['layers']

----------------------------------------

TITLE: Importing External Data without Downloading in DVC
DESCRIPTION: Demonstrates how to import external data metadata without downloading the actual file using the --no-download flag.

LANGUAGE: cli
CODE:
$ dvc import-url --no-download https://data.dvc.org/get-started/data.xml
Importing 'https://data.dvc.org/get-started/data.xml' -> 'data.xml'

$ ls
data.xml.dvc

----------------------------------------

TITLE: Setting HTTP Authentication Method in DVC
DESCRIPTION: Configures the authentication method for HTTP remote access. Supports basic authentication.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote auth basic

----------------------------------------

TITLE: Confusion Matrix Plot Generation
DESCRIPTION: Command to generate a confusion matrix plot using a predefined template and CSV data.

LANGUAGE: bash
CODE:
$ dvc plots diff -t confusion --targets classes.csv -x predicted

----------------------------------------

TITLE: DVC Experiment List Command Usage
DESCRIPTION: Shows the command syntax and arguments for the dvc exp list command, including optional parameters for Git remote specification and experiment filtering.

LANGUAGE: usage
CODE:
usage: dvc exp list [-h] [-q | -v] [-A] [--rev <commit>]
                    [-n <num>] [--name-only]
                    [git_remote]

positional arguments:
  git_remote    Optional Git remote name or Git URL

----------------------------------------

TITLE: Supported Parameter Types - Python
DESCRIPTION: Type definition showing supported parameter value types including nested structures.

LANGUAGE: python
CODE:
ParamLike = Union[
    int,
    float,
    str,
    bool,
    List["ParamLike"],
    Dict[str, "ParamLike"]
]

----------------------------------------

TITLE: Custom HTML Template for DVC Plots
DESCRIPTION: Example of a custom HTML template used to render DVC plots without an internet connection, including local JavaScript library references.

LANGUAGE: html
CODE:
<html>
  <head>
    <script src="../path/to/my_vega.js" type="text/javascript"></script>
    <script src="../path/to/my_vega_lite.js" type="text/javascript"></script>
    <script src="../path/to/my_vega_embed.js" type="text/javascript"></script>
  </head>
  <body>
    {plot_divs}
  </body>
</html>

----------------------------------------

TITLE: DVC Remote Rename Example Commands
DESCRIPTION: Example showing how to add an Amazon S3 remote storage and then rename it using the DVC remote rename command.

LANGUAGE: cli
CODE:
$ dvc remote add myremote s3://mybucket/path

LANGUAGE: cli
CODE:
$ dvc remote rename myremote s3remote

----------------------------------------

TITLE: DVC Experiment Branch Command Usage Syntax
DESCRIPTION: Shows the command syntax and arguments for the 'dvc exp branch' command. Takes an experiment name and optional branch name as arguments.

LANGUAGE: usage
CODE:
usage: dvc exp branch [-h] [-q | -v] experiment [branch]

positional arguments:
  experiment     Experiment to turn into a branch
  branch         Optional name for the new Git branch. Defaults to '{experiment-name}-branch'

----------------------------------------

TITLE: Viewing DVC Lock File Contents
DESCRIPTION: An example of the contents of a 'dvc.lock' file, showing the structure and information stored for a 'train' stage in a DVC pipeline.

LANGUAGE: yaml
CODE:
train:
  cmd: python src/train.py data/features model.pkl
  deps:
    - path: data/features
      md5: de03a7e34e003e54dde0d40582c6acf4.dir
    - path: src/train.py
      md5: ad8e71b2cca4334a7d3bb6495645068c
  params:
    params.yaml:
      train.n_estimators: 100
      train.seed: 20170428
  outs:
    - path: model.pkl
      md5: 9aba000ba83b341a423a81eed8ff9238

----------------------------------------

TITLE: Basic Usage of DVC Root Command
DESCRIPTION: Demonstrates the basic usage of the 'dvc root' command in the current directory and a subdirectory.

LANGUAGE: bash
CODE:
$ dvc root
.

$ mkdir subdir
$ cd subdir
$ dvc root
..

----------------------------------------

TITLE: Adding S3 Remote and Setting as Default
DESCRIPTION: Demonstrates how to add an S3 remote to DVC configuration and set it as the default remote.

LANGUAGE: bash
CODE:
$ dvc remote add myremote s3://bucket/path
$ dvc config core.remote myremote

----------------------------------------

TITLE: Configuring Azure Remote with SAS Token (Bash)
DESCRIPTION: Demonstrates how to configure an Azure remote using a SAS token for authentication.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote azure://mycontainer/object
$ dvc remote modify --local myremote account_name 'myaccount'
$ dvc remote modify --local myremote sas_token 'mysecret'
$ dvc push

----------------------------------------

TITLE: Enabling Hydra Composition in DVC
DESCRIPTION: Command to enable Hydra composition feature in DVC configuration.

LANGUAGE: cli
CODE:
$ dvc config hydra.enabled True

----------------------------------------

TITLE: List All DVC Experiments Example
DESCRIPTION: Example showing how to list all experiments in a DVC project using the --all-commits flag, displaying experiment names with their associated commits.

LANGUAGE: cli
CODE:
$ dvc exp list --all-commits
10-bigrams-experiment:
    60b225a [bally-gude]
    b485671 [gluey-leak]
    5f30433 [lurid-lair]

----------------------------------------

TITLE: Generated DVC File Structure
DESCRIPTION: Example of the .dvc file structure generated by import-url command

LANGUAGE: yaml
CODE:
md5: c4d6740ee09950bb532d418b8ae0b52e
frozen: true
deps:
- etag: '"f432e270cd634c51296ecd2bc2f5e752-5"'
  path: https://data.dvc.org/get-started/data.xml
outs:
- md5: a304afb96060aad90176268345e10355
  path: data.xml
  cache: true

----------------------------------------

TITLE: Listing Experiments Before Rename
DESCRIPTION: Example showing how to list existing experiments before renaming using dvc exp list command.

LANGUAGE: cli
CODE:
$ dvc exp list
master:
        major-mela
        conic-ease
        lucid-lair

----------------------------------------

TITLE: Cloning DVC Repository in Python
DESCRIPTION: Instructions for forking and cloning the DVC repository to get the latest development version.

LANGUAGE: cli
CODE:
$ git clone git@github.com:<your-username>/dvc.git

----------------------------------------

TITLE: DVC Experiment Diff Command with Git Revision
DESCRIPTION: An example of using 'dvc exp diff' to compare an experiment with a specific Git tag or revision.

LANGUAGE: bash
CODE:
$ dvc exp diff gluey-leak 7-ml-pipeline
Path         Metric  gluey-leak  7-ml-pipeline  Change
scores.json  auc     0.577559    None           diff not supported

Path         Param                   gluey-leak  7-ml-pipeline  Change
params.yaml  featurize.max_features  2000        500            -1500
params.yaml  featurize.ngrams        2           1              -1

----------------------------------------

TITLE: DVC Stage with Parameters Example
DESCRIPTION: Example demonstrating how to use parameter dependencies in a DVC stage and access them from Python code.

LANGUAGE: yaml
CODE:
seed: 20180226

train:
  lr: 0.0041
  epochs: 75
  layers: 9

processing:
  threshold: 0.98
  bow_size: 15000

LANGUAGE: python
CODE:
import dvc.api

params = dvc.api.params_show()

seed = params['seed']
lr = params['train']['lr']
epochs = params['train']['epochs']

----------------------------------------

TITLE: Installing DVC with conda on macOS
DESCRIPTION: This snippet illustrates how to install DVC using conda package manager on macOS. It uses mamba for faster installation and the conda-forge channel.

LANGUAGE: bash
CODE:
$ conda install -c conda-forge mamba
$ mamba install -c conda-forge dvc

----------------------------------------

TITLE: Basic Google Drive Remote Setup in DVC
DESCRIPTION: Demonstrates how to add a Google Drive remote and push data to it. Includes initial setup and OAuth authentication flow.

LANGUAGE: cli
CODE:
$ dvc add data
...
$ dvc remote add --default myremote \
                           gdrive://0AIac4JZqHhKmUk9PDA/dvcstore
$ dvc remote modify myremote gdrive_acknowledge_abuse true
$ dvc push
Your browser has been opened to visit:

    https://accounts.google.com/o/oauth2/auth...

Authentication successful.

----------------------------------------

TITLE: Initializing DVCLiveLogger
DESCRIPTION: Shows how to initialize the DVCLiveLogger with default settings and with custom directory configuration.

LANGUAGE: python
CODE:
from dvclive.fabric import DVCLiveLogger

logger = DVCLiveLogger()

LANGUAGE: python
CODE:
logger = DVCLiveLogger(dir="my_directory")

----------------------------------------

TITLE: Pushing DVC Experiments to Git Remote
DESCRIPTION: Command to push completed experiments to a Git remote, including metrics, plots, code, and DVC-cached files.

LANGUAGE: cli
CODE:
$ dvc exp push origin

----------------------------------------

TITLE: Configuring Azure Remote with Account Key (Bash)
DESCRIPTION: Illustrates the setup of an Azure remote using an account name and key for authentication.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote azure://mycontainer/object
$ dvc remote modify --local myremote account_name 'myaccount'
$ dvc remote modify --local myremote account_key 'mysecret'
$ dvc push

----------------------------------------

TITLE: Output Format - YAML
DESCRIPTION: Example of how parameters are written to the params.yaml file.

LANGUAGE: yaml
CODE:
lr: 1e-3
n_iter: 50

----------------------------------------

TITLE: Displaying Usage of DVC Remote Default Command
DESCRIPTION: Shows the usage syntax for the 'dvc remote default' command, including its arguments and options.

LANGUAGE: bash
CODE:
usage: dvc remote default [-h]
                          [--global | --system | --project | --local]
                          [-q | -v] [-u]
                          [name]

positional arguments:
  name           Name of the remote.

----------------------------------------

TITLE: Pushing DVC Experiments to Git Remote in Bash
DESCRIPTION: Example of using 'dvc exp push' command to upload experiments to a Git remote named 'origin'.

LANGUAGE: bash
CODE:
$ dvc exp push origin
Pushed experiment conic-ease, lucid-lair, and major-mela to Git remote 'origin'.

----------------------------------------

TITLE: DVC Stage List Basic Example
DESCRIPTION: Demonstrates the default output of the dvc stage list command showing stage names and their descriptions from the current directory's dvc.yaml file.

LANGUAGE: cli
CODE:
$ dvc stage list
prepare    Outputs data/prepared
featurize  Outputs data/features
train      Outputs model.pkl
evaluate   Reports scores.json, prc.json, roc.json

----------------------------------------

TITLE: Installing DVC with pip on macOS
DESCRIPTION: This snippet demonstrates how to install DVC using pip package manager on macOS. It's recommended to use a virtual environment or pipx for installation. Python 3.8+ is required for the latest version.

LANGUAGE: bash
CODE:
$ pip install dvc

----------------------------------------

TITLE: Configuring SSH Remote Storage in DVC
DESCRIPTION: Basic command to add an SSH remote storage location to DVC with custom port and user specifications.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote ssh://user@example.com:2222/path

----------------------------------------

TITLE: Logging SKLearn Plots
DESCRIPTION: Generate and log sklearn-specific plots like ROC curves.

LANGUAGE: python
CODE:
y_true = [0, 0, 1, 1]
y_pred = [0.2, 0.5, 0.3, 0.8]
live.log_sklearn_plot("roc", y_true, y_score)

----------------------------------------

TITLE: DVC Experiment Diff Command with Specific Experiments
DESCRIPTION: An example of using 'dvc exp diff' to compare two specific experiments, showing changes in metrics and parameters.

LANGUAGE: bash
CODE:
$ dvc exp diff gluey-leak ochre-dook
Path         Metric  gluey-leak  ochre-dook   Change
scores.json  auc     0.577559    0.51676     -0.060799

Path         Param                   gluey-leak  ochre-dook  Change
params.yaml  featurize.max_features  2000        500        -1500

----------------------------------------

TITLE: Synopsis of DVC Root Command
DESCRIPTION: Shows the usage syntax for the 'dvc root' command, including available options.

LANGUAGE: bash
CODE:
usage: dvc root [-h] [-q | -v]

----------------------------------------

TITLE: List DVC Experiments Using Git Remote Example
DESCRIPTION: Shows how to list experiments using a Git remote name instead of a full URL, including verification of the remote configuration.

LANGUAGE: cli
CODE:
$ git remote -v
origin  git@github.com:iterative/example-get-started.git
$ dvc exp list --all-commits origin
10-bigrams-experiment:
    bally-gude
    conic-ease

----------------------------------------

TITLE: Displaying DVC Config Command Usage
DESCRIPTION: Shows the usage syntax for the DVC config command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc config [-h] [--global | --system | --project | --local]
                  [-q | -v] [-u]
                  [-l] [--show-origin] [name] [value]

positional arguments:
  name     Option name in format: section.option or remote.name.option
           e.g. 'core.check_update', 'cache.dir', 'remote.myremote.url'
  value    Option value.

----------------------------------------

TITLE: DVC Experiment Table Output
DESCRIPTION: Shows tabulated output of experiments with metrics and parameters

LANGUAGE: dvctable
CODE:
 ────────────────────────────────────────────────────────────────────────────────────────────
  neutral:**Experiment**               neutral:**Created**           metric: **auc**   param:**featurize.max_features**   param:**featurize.ngrams**
 ────────────────────────────────────────────────────────────────────────────────────────────
  workspace                -              0.61314   1500                     2
  10-bigrams-experiment    Jun 20, 2020   0.61314   1500                     2
  ├── major-mela           Oct 21, 2020   0.61314   1500                     2
  ├── gluey-leak           Oct 09, 2020   0.57756   2000                     2
  └── ochre-dook           Oct 09, 2020   0.51676   500                      2
 ────────────────────────────────────────────────────────────────────────────────────────────

----------------------------------------

TITLE: CSV Data for Plotting
DESCRIPTION: Example of CSV data format used for generating plots with DVC.

LANGUAGE: csv
CODE:
epoch,loss,accuracy
1,0.19,0.81
2,0.11,0.89
3,0.07,0.93
4,0.04,0.96

----------------------------------------

TITLE: Installing DVC with winget on Windows
DESCRIPTION: Uses the winget package manager to install DVC.

LANGUAGE: cli
CODE:
$ winget install --id Iterative.DVC

----------------------------------------

TITLE: Modifying SSH Remote User and Port Settings
DESCRIPTION: Commands to modify the SSH remote configuration by setting or overriding the username and port separately.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote user myuser
$ dvc remote modify myremote port 2222

----------------------------------------

TITLE: Configuring DVC Database Connection
DESCRIPTION: Example configuration for setting up a PostgreSQL database connection named 'pgsql' with connection parameters.

LANGUAGE: ini
CODE:
['db "pgsql"']
  url = "postgresql://user@host/dbname

----------------------------------------

TITLE: Using DVC Get Command - Basic Syntax
DESCRIPTION: Shows the basic command line usage syntax for the DVC get command including all available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc get [-h] [-q | -v] [-o <path>] [--rev <commit>]
               [--show-url] [-j <number>] [-f]
               [--config <path>] [--remote <name>]
               [--remote-config [<name>=<value> ...]]
               url path

----------------------------------------

TITLE: DVC Stage Command Usage Synopsis
DESCRIPTION: Shows the usage synopsis for the DVC stage command, including available subcommands and their brief descriptions.

LANGUAGE: usage
CODE:
usage: dvc stage [-h] [-q | -v] {add,list} ...

positional arguments:
  COMMAND
    add         Create stage.
    list        List stages.

----------------------------------------

TITLE: Setting Default Remote with DVC List in Bash
DESCRIPTION: Shows how to use the 'dvc list' command to set a default remote for listing repository contents.

LANGUAGE: bash
CODE:
$ dvc list https://github.com/iterative/example-get-started-s3 data/prepared --remote myremote

----------------------------------------

TITLE: Downloading from WebHDFS using DVC Get-URL
DESCRIPTION: Illustrates the use of 'dvc get-url' command to download a file from WebHDFS (HDFS REST API).

LANGUAGE: bash
CODE:
$ dvc get-url webhdfs://user@example.com/path/to/file

----------------------------------------

TITLE: Displaying DVC Experiment Remove Command Usage
DESCRIPTION: Shows the usage syntax for the 'dvc exp remove' command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc exp remove [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>]
                      [--queue | -g <git_remote>] [--keep]
                      [<name> [<name> ...]]

----------------------------------------

TITLE: Supported Parameter Types - Python
DESCRIPTION: Type definition showing the supported parameter value types in DVCLive.

LANGUAGE: python
CODE:
ParamLike = Union[
    int,
    float,
    str,
    bool,
    List["ParamLike"],
    Dict[str, "ParamLike"]
]

----------------------------------------

TITLE: Modifying DVC Remote URL (Bash)
DESCRIPTION: Shows how to use 'dvc remote modify' to change the URL of an existing remote named 'temp'.

LANGUAGE: bash
CODE:
$ dvc remote modify temp url /mnt/c/tmp/dvcstore

----------------------------------------

TITLE: Advanced DVC Stage with Cached Outputs in YAML
DESCRIPTION: Demonstrates how to configure DVC stage with selective caching of outputs using YAML configuration.

LANGUAGE: yaml
CODE:
stages:
  train:
    cmd: python train.py
    deps:
      - train.py
      - data_dir
    outs:
      - model.pt
      - dvclive/metrics.json:
          cache: false
      - dvclive/plots

----------------------------------------

TITLE: Advanced DVC Stage with Cached Outputs in YAML
DESCRIPTION: Demonstrates how to configure DVC stage with selective caching of outputs using YAML configuration.

LANGUAGE: yaml
CODE:
stages:
  train:
    cmd: python train.py
    deps:
      - train.py
      - data_dir
    outs:
      - model.pt
      - dvclive/metrics.json:
          cache: false
      - dvclive/plots

----------------------------------------

TITLE: Installing DVC with S3 support using pip
DESCRIPTION: Installs DVC with Amazon S3 storage support, which includes the boto3 library.

LANGUAGE: bash
CODE:
$ pip install "dvc[s3]"

----------------------------------------

TITLE: Downloading from Google Cloud Storage using DVC Get-URL
DESCRIPTION: Shows how to use the 'dvc get-url' command to download a file or directory from Google Cloud Storage to a specific local path.

LANGUAGE: bash
CODE:
$ dvc get-url gs://bucket/path file

----------------------------------------

TITLE: Initializing DVCLiveCallback with Optuna Study Optimization in Python
DESCRIPTION: This snippet demonstrates how to include the DVCLiveCallback in the callbacks list passed to study.optimize(). Each trial will create a DVC Experiment, tracking associated metrics and parameters.

LANGUAGE: python
CODE:
from dvclive.optuna import DVCLiveCallback

...

study.optimize(
    objective, n_trials=7, callbacks=[DVCLiveCallback()])

----------------------------------------

TITLE: Adding Remote File to DVC
DESCRIPTION: Command-line example of adding a remote file to DVC tracking without downloading it locally.

LANGUAGE: cli
CODE:
$ dvc add https://data.dvc.org/get-started/data.xml --to-remote

----------------------------------------

TITLE: Usage Synopsis for DVC Queue Status Command
DESCRIPTION: Shows the command-line usage syntax for the 'dvc queue status' command, including optional flags for help, quiet mode, and verbose output.

LANGUAGE: bash
CODE:
usage: dvc queue status [-h] [-q | -v]

----------------------------------------

TITLE: DVC Plots Templates CLI Usage
DESCRIPTION: Command line interface syntax for the DVC plots templates command, showing available arguments and options.

LANGUAGE: bash
CODE:
usage: dvc plots templates [-h] [-q | -v] [template]

positional arguments:
 template    Template for which to show JSON specification.
             List all template names by default.

----------------------------------------

TITLE: Loading Bike Sharing Dataset
DESCRIPTION: Downloading and extracting the UCI bike sharing dataset, then loading it into a pandas DataFrame.

LANGUAGE: cli
CODE:
$ wget https://archive.ics.uci.edu/static/public/275/bike+sharing+dataset.zip
$ unzip bike+sharing+dataset.zip

LANGUAGE: python
CODE:
import pandas as pd

df = pd.read_csv("raw_data/day.csv", header=0, sep=',', parse_dates=['dteday'])
df.head()

----------------------------------------

TITLE: Changing Default Remote with DVC CLI
DESCRIPTION: Shows how to change the default remote to 'mynewremote' using the DVC command-line interface.

LANGUAGE: bash
CODE:
$ dvc remote default mynewremote

----------------------------------------

TITLE: Customizing an S3 Remote in DVC
DESCRIPTION: Shows how to add and modify an S3 remote storage location, including setting a custom endpoint URL.

LANGUAGE: bash
CODE:
$ dvc remote add newremote s3://mybucket/path
$ dvc remote modify newremote endpointurl https://object-storage.example.com

----------------------------------------

TITLE: Downloading Files with DVCFileSystem in Python
DESCRIPTION: Examples of downloading individual files and directories using DVCFileSystem methods.

LANGUAGE: python
CODE:
>>> fs.get_file("data/data.xml", "data.xml")

>>> fs.get("data", "data", recursive=True)

----------------------------------------

TITLE: Downloading from SSH using DVC Get-URL
DESCRIPTION: Illustrates the use of 'dvc get-url' command to download a file or directory from an SSH server using default SSH credentials.

LANGUAGE: bash
CODE:
$ dvc get-url ssh://user@example.com/path/to/data

----------------------------------------

TITLE: DVC Parameters Diff Command Usage Synopsis
DESCRIPTION: Command line usage syntax for the dvc params diff command showing available options and arguments.

LANGUAGE: usage
CODE:
usage: dvc params diff [-h] [-q | -v]
                       [--targets [<paths> [<paths> ...]]] [--all]
                       [--deps] [--json] [--md] [--no-path]

----------------------------------------

TITLE: Executing DVC Move for File Relocation
DESCRIPTION: Example of using 'dvc move' to relocate a file tracked by DVC to a different directory. It shows the command usage and resulting changes in file structure.

LANGUAGE: cli
CODE:
$ tree
.
├── data
│   └── foo
└── data2
    └── subdir

$  dvc add data/foo
...
$  tree
.
├── data
│   ├── foo
│   └── foo.dvc
└── data2
    └── subdir

$ dvc move data/foo data2/subdir/
...
$ tree
.
├── data
└── data2
    └── subdir
        ├── foo
        └── foo.dvc

----------------------------------------

TITLE: Enabling HTTPS for WebHDFS in DVC
DESCRIPTION: Demonstrates how to enable HTTPS (SWebHdfs) for a WebHDFS remote in DVC. Note that the URL protocol should still be 'webhdfs://' even when HTTPS is enabled.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote use_https true

----------------------------------------

TITLE: DVC Queue Logs Command Usage
DESCRIPTION: Shows the basic syntax and arguments for the dvc queue logs command.

LANGUAGE: bash
CODE:
usage: dvc queue logs [-h] [-q | -v] [-e <encoding>] [-f] <task>

----------------------------------------

TITLE: Checking Specific Files or Directories with DVC Status in Bash
DESCRIPTION: This example shows how to use 'dvc status' to check specific files or directories, demonstrating the output for targeted status checks.

LANGUAGE: bash
CODE:
$ dvc status foo.dvc dobar
foo.dvc:
	changed outs:
		modified:            foo
	changed checksum
dobar:
	changed deps:
		modified:           foo
	changed outs:
		not in cache:       bar

----------------------------------------

TITLE: Filtering Metrics by Target in Python
DESCRIPTION: Example of using dvc.api.metrics_show() with a single target to retrieve metrics from a specific file.

LANGUAGE: python
CODE:
import dvc.api
metrics = dvc.api.metrics_show("eval/train_val_metrics.json")

----------------------------------------

TITLE: Queuing and Removing DVC Experiments
DESCRIPTION: Demonstrates queuing experiments with 'dvc exp run --queue' and removing them by ID or name.

LANGUAGE: bash
CODE:
$ dvc exp run --queue -S train.min_split=64
Queued experiment 'e41d5b4' for future execution.
$ dvc exp run --queue -S train.min_split=32 --name split32
Queued experiment '5751540' for future execution.
$ dvc exp run --queue -S train.min_split=16 --name split16
Queued experiment '8de9a6c' for future execution.

$ dvc exp remove e41d5b4 split16

$ dvc exp show

----------------------------------------

TITLE: Import .dvc File Example
DESCRIPTION: Example of an import .dvc file created by the 'dvc import' command, showing the structure and content.

LANGUAGE: yaml
CODE:
md5: 7de90e7de7b432ad972095bc1f2ec0f8
frozen: true
wdir: .
deps:
  - path: data/data.xml
    repo:
      url: git@github.com:iterative/example-get-started
      rev_lock: 6c73875a5f5b522f90b5afa9ab12585f64327ca7
outs:
  - md5: a304afb96060aad90176268345e10355
    path: data.xml
    cache: true

----------------------------------------

TITLE: Listing All Files with DVCFileSystem in Python
DESCRIPTION: Example of recursively listing all files (including Git-tracked) in a repository.

LANGUAGE: python
CODE:
>>> fs.find("/", detail=False)
[
    ...
    '/.gitignore',
    '/README.md',
    '/data/.gitignore',
    '/data/data.xml',
    '/data/features/test.pkl',
    '/data/features/train.pkl',
    '/data/prepared/test.tsv',
    '/data/prepared/train.tsv',
    ...
    '/evaluation/.gitignore',
    '/evaluation/importance.png',
    '/evaluation/plots/confusion_matrix.json',
    '/evaluation/plots/precision_recall.json',
    '/evaluation/plots/roc.json',
    '/model.pkl',
    ...
]

----------------------------------------

TITLE: Unsetting Default Remote with DVC CLI
DESCRIPTION: Demonstrates how to clear or unset the default remote value using the DVC command-line interface.

LANGUAGE: bash
CODE:
$ dvc remote default -u

----------------------------------------

TITLE: Generating DET Plot in Python
DESCRIPTION: Example of using log_sklearn_plot to generate a detection error tradeoff (DET) plot.

LANGUAGE: python
CODE:
y_true = [1, 1, 2, 2]
y_score = [0.1, 0.4, 0.35, 0.8]
live.log_sklearn_plot("det", y_true, y_score)

----------------------------------------

TITLE: Executing DVC Move Command
DESCRIPTION: Syntax for using the 'dvc move' command to rename or relocate files tracked by DVC. It shows the command usage, including required arguments for source and destination paths.

LANGUAGE: cli
CODE:
usage: dvc move [-h] [-q | -v] src dst

----------------------------------------

TITLE: Renaming a DVC Remote
DESCRIPTION: Demonstrates how to rename an existing remote storage location using the 'dvc remote rename' command.

LANGUAGE: bash
CODE:
$ dvc remote rename oldremote newremote

----------------------------------------

TITLE: Creating Separate Code and Data Archives with DVC List and Zip in Bash
DESCRIPTION: Shows how to use 'dvc list' with 'git archive' and 'zip' to create separate archives for code and DVC-tracked data.

LANGUAGE: bash
CODE:
$ git archive -o code.zip HEAD
$ dvc list . -R --dvc-only | zip -@ data.zip

----------------------------------------

TITLE: Version Specific Parameters - DVC Params Show
DESCRIPTION: Example of retrieving parameters from a specific Git revision.

LANGUAGE: python
CODE:
import json
import dvc.api
params = dvc.api.params_show(rev="tune-hyperparams")

----------------------------------------

TITLE: Getting Storage URL of DVC-Tracked File
DESCRIPTION: Shows how to retrieve the actual storage location of a DVC-tracked file using the --show-url option.

LANGUAGE: bash
CODE:
$ dvc get --show-url \
          https://github.com/iterative/example-get-started model.pkl
https://remote.dvc.org/get-started/c8/d307aa005d6974a8525550956d5fb3

----------------------------------------

TITLE: Installing DVC with snap
DESCRIPTION: Installs DVC using snap package manager. Requires snapd to be installed on the system.

LANGUAGE: bash
CODE:
$ snap install --classic dvc

----------------------------------------

TITLE: Listing DVC-Tracked Files with DVCFileSystem in Python
DESCRIPTION: Example of recursively listing all DVC-tracked files in a repository.

LANGUAGE: python
CODE:
>>> fs.find("/", detail=False, dvc_only=True)
[
    '/data/data.xml',
    '/data/features/test.pkl',
    '/data/features/train.pkl',
    '/data/prepared/test.tsv',
    '/data/prepared/train.tsv',
    '/evaluation/importance.png',
    '/model.pkl'
]

----------------------------------------

TITLE: Setting Default Remote with DVC CLI
DESCRIPTION: Shows how to set 'myremote' as the default remote using the DVC command-line interface.

LANGUAGE: bash
CODE:
$ dvc remote default myremote

----------------------------------------

TITLE: DVC Destroy Command Synopsis
DESCRIPTION: This snippet shows the usage syntax for the 'dvc destroy' command, including available options for help, quiet mode, and verbosity.

LANGUAGE: bash
CODE:
usage: dvc destroy [-h] [-q | -v] [-f]

----------------------------------------

TITLE: Updating DVC File After Move Operation
DESCRIPTION: Example of how the .dvc file is updated after using 'dvc move' to rename a file. It shows the change in the 'path' field to reflect the new filename.

LANGUAGE: yaml
CODE:
outs:
  - md5: c8263e8422925b0872ee1fb7c953742a
    path: other.csv

----------------------------------------

TITLE: Basic DVC Check-Ignore Usage Syntax
DESCRIPTION: Shows the command-line syntax and arguments for the dvc check-ignore command.

LANGUAGE: usage
CODE:
usage: dvc check-ignore [-h] [-q | -v] [-d] [-a] [-n] [--stdin]
                        targets [targets ...]

----------------------------------------

TITLE: DVC Queue Command Synopsis
DESCRIPTION: Command-line syntax for the DVC queue management interface, showing all available subcommands and their basic purposes including start, stop, status, logs, remove, and kill operations.

LANGUAGE: bash
CODE:
usage: dvc queue [-h] [-q | -v]
                 {start,stop,status,logs,remove,kill} ...

positional arguments:
  COMMAND
    start       Start experiments queue workers.
    stop        Stop experiments queue workers.
    status      List the status of the queue tasks and workers.
    logs        Show output logs for a task in the experiments queue.
    remove      Remove tasks in experiments queue.
    kill        Kill tasks in experiments queue.

----------------------------------------

TITLE: Generating Precision-Recall Plot in Python
DESCRIPTION: Example of using log_sklearn_plot to generate a precision-recall curve plot.

LANGUAGE: python
CODE:
y_true = [1, 1, 2, 2]
y_score = [0.1, 0.4, 0.35, 0.8]
live.log_sklearn_plot("precision_recall", y_true, y_score)

----------------------------------------

TITLE: Displaying DVC DAG Command Usage in Bash
DESCRIPTION: Shows the usage synopsis for the 'dvc dag' command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc dag [-h] [-q | -v] [-o] [--full]
               [--md] [--mermaid] [--dot]
               [target]

----------------------------------------

TITLE: Displaying Usage Information for DVC Remote Remove Command
DESCRIPTION: This snippet shows the usage syntax for the 'dvc remote remove' command, including its arguments and options.

LANGUAGE: bash
CODE:
usage: dvc remote remove [-h]
                         [--global | --system | --project | --local]
                         [-q | -v]
                         name

positional arguments:
  name           Name of the remote to remove

----------------------------------------

TITLE: Installing DVC with Conda on Windows
DESCRIPTION: Uses Conda package manager to install DVC. It first installs mamba for faster installation, then uses mamba to install DVC from the conda-forge channel.

LANGUAGE: cli
CODE:
$ conda install -c conda-forge mamba # installs much faster than conda
$ mamba install -c conda-forge dvc

----------------------------------------

TITLE: Using fsspec API with DVCFileSystem in Python
DESCRIPTION: Examples of using fsspec API methods with DVCFileSystem for opening files and getting filesystem information.

LANGUAGE: python
CODE:
>>> import fsspec
>>> fsspec.open(
...   "dvc://workshop/satellite-data/jan_train.csv",
...   url="https://github.com/iterative/dataset-registry.git",
... )
<OpenFile 'workshop/satellite-data/jan_train.csv'>

>>> import fsspec
>>> fsspec.get_fs_token_paths(
...   "dvc://workshop/satellite-data/jan_train.csv",
...   storage_options={"url": "https://github.com/iterative/dataset-registry.git"},
... )
(<dvc.fs.dvc._DVCFileSystem object at 0x113f7a290>, '06e54af48d3513bf33a8988c47e6fb47', ['workshop/satellite-data/jan_train.csv'])

----------------------------------------

TITLE: DVC Project Configuration with Multiple Remotes
DESCRIPTION: Displays the resulting configuration in the DVC project's config file after adding and customizing multiple remote storage locations.

LANGUAGE: ini
CODE:
['remote "myremote"']
    url = /path/to/remote
[core]
    remote = myremote
['remote "newremote"']
    url = s3://mybucket/path
    endpointurl = https://object-storage.example.com

----------------------------------------

TITLE: JSON Metrics File Structure
DESCRIPTION: Example of a JSON metrics file showing hierarchical organization of machine learning metrics.

LANGUAGE: json
CODE:
{
  "train": {
    "accuracy": 0.9886999726295471,
    "loss": 0.041855331510305405,
    "TN": 473,
    "FP": 845
  },
  "time_real": 344.61309599876404
}

----------------------------------------

TITLE: Unprotecting DVC Tracked File
DESCRIPTION: Demonstrates the unprotect command usage on a specific file.

LANGUAGE: cli
CODE:
$ dvc unprotect Posts.xml.zip

----------------------------------------

TITLE: Creating Project Archives with DVC List and Tar in Bash
DESCRIPTION: Demonstrates how to use 'dvc list' in combination with 'tar' to create an archive of the entire DVC project workspace.

LANGUAGE: bash
CODE:
$ dvc list . -R | tar -cvf project.tar

----------------------------------------

TITLE: Listing Repository Contents with DVC List in Bash
DESCRIPTION: Demonstrates how to use the 'dvc list' command to view the contents of a DVC repository, including both Git and DVC-tracked files.

LANGUAGE: bash
CODE:
$ dvc list https://github.com/iterative/example-get-started
.dvcignore
.gitignore
README.md
data
dvc.lock
dvc.yaml
model.pkl
params.yaml
prc.json
scores.json
src

----------------------------------------

TITLE: Accessing Specific Data Version in DVC using Python
DESCRIPTION: Example demonstrating how to use the 'rev' parameter in dvc.api.open() to access a specific version of data in a DVC project.

LANGUAGE: python
CODE:
import csv
import dvc.api

with dvc.api.open('clean.csv', rev='v1.1.0') as f:
    reader = csv.reader(f)
    # ... Process 'clean' data from version 1.1.0

----------------------------------------

TITLE: Accessing Data using DVC Python API
DESCRIPTION: Demonstrates how to access DVC-tracked data directly in Python code using DVC's Python API.

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry'
) as f:
    # f is a file-like object which can be processed normally

----------------------------------------

TITLE: DVC Data Status with Remote Status
DESCRIPTION: Example showing remote status information using the --not-in-remote flag.

LANGUAGE: cli
CODE:
$ dvc data status --not-in-remote
Not in cache:
  (use "dvc fetch <file>..." to download files)
        data/data.xml

Not in remote:
  (use "dvc push <file>..." to upload files)
        data/data.xml

DVC committed changes:
  (git commit the corresponding dvc files to update the repo)
        modified: data/features/

DVC uncommitted changes:
  (use "dvc commit <file>..." to track changes)
  (use "dvc checkout <file>..." to discard changes)
        deleted: model.pkl
(there are other changes not tracked by dvc, use "git status" to see)

----------------------------------------

TITLE: Resolving Merge Conflicts in Simple .dvc Files
DESCRIPTION: Example of a merge conflict in a .dvc file generated by 'dvc add'. The conflict shows different MD5 hashes and sizes for the same file. Resolution involves choosing one version or merging the underlying data manually.

LANGUAGE: yaml
CODE:
outs:
<<<<<<< HEAD
- md5: a304afb96060aad90176268345e10355
  size: 12
=======
- md5: 35dd1fda9cfb4b645ae431f4621fa324
  size: 100
>>>>>>> branch
  path: data.xml

----------------------------------------

TITLE: Listing All DVC Remotes in a Project
DESCRIPTION: Demonstrates the use of 'dvc remote list' command to display all configured remote storage locations in a DVC project.

LANGUAGE: bash
CODE:
$ dvc remote list
myremote	/path/to/remote
newremote	s3://mybucket/path

----------------------------------------

TITLE: Visualizing DVC Pipeline Outputs in Bash
DESCRIPTION: Shows the output of 'dvc dag --outs' command, displaying a graph of how stage outputs and dependencies are connected.

LANGUAGE: bash
CODE:
$ dvc dag --outs
                  +---------------+
                  | data/prepared |
                  +---------------+
                          *
                          *
                          *
                  +---------------+
                  | data/features |
                **+---------------+**
            ****          *          *****
       *****              *               ****
   ****                   *                   ****
***                 +-----------+                 ***
  **                | model.pkl |                **
    **              +-----------+              **
      **           **           **           **
        **       **               **       **
          **   **                   **   **
      +-------------+            +----------+
      | scores.json |            | prc.json |
      +-------------+            +----------+

----------------------------------------

TITLE: DVC Check-Ignore with POSIX Pipe
DESCRIPTION: Example of using check-ignore as part of a POSIX pipe command.

LANGUAGE: cli
CODE:
cat file_list | dvc check-ignore --stdin

----------------------------------------

TITLE: Executing DVC Move for Directory Relocation
DESCRIPTION: Example of using 'dvc move' to relocate an entire directory tracked by DVC. It demonstrates the command usage for moving a directory imported from another DVC repository.

LANGUAGE: cli
CODE:
$ dvc import ../another-repo data
...
$ tree
.
├── data
│   ├── bar
│   └── foo
└── data.dvc

$ dvc move data data2/data3
...
$ tree
.
└── data2
    ├── data3
    │   ├── bar
    │   └── foo
    └── data3.dvc

----------------------------------------

TITLE: Displaying Usage for DVC Remove Command
DESCRIPTION: Shows the command-line usage syntax for the 'dvc remove' command, including its arguments and options.

LANGUAGE: text
CODE:
usage: dvc remove [-h] [-q | -v] [--outs] targets [targets ...]

----------------------------------------

TITLE: Downloading from Amazon S3 using DVC Get-URL
DESCRIPTION: Demonstrates how to use the 'dvc get-url' command to download an object from Amazon S3 to the current working directory.

LANGUAGE: bash
CODE:
$ dvc get-url s3://bucket/path

----------------------------------------

TITLE: Retrieving Metrics from Remote DVC Repository in Python
DESCRIPTION: Example of using dvc.api.metrics_show() to retrieve metrics from a remote DVC repository without cloning it locally.

LANGUAGE: python
CODE:
import dvc.api
metrics = dvc.api.metrics_show(
    repo="https://github.com/iterative/example-get-started")

----------------------------------------

TITLE: Downloading Model Binaries using CLI and DVC Studio API
DESCRIPTION: Command-line example using curl to generate signed URLs for downloading model binaries from the DVC Studio model registry. It demonstrates how to make the API request and includes a sample response.

LANGUAGE: cli
CODE:
$ curl "https://studio.datachain.ai/api/model-registry/get-download-uris?repo=git@github.com:iterative/demo-bank-customer-churn.git&name=randomforest-model&version=v2.0.0" --header "Authorization:token ${DVC_STUDIO_TOKEN}"

{
    ".mlem/model/clf-model": "https://sandbox-datasets-iterative.s3.amazonaws.com/bank-customer-churn/86/bd02376ac675568ba2fac566169ef9?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAU7UXIWDIQFPCO76Q%2F20230706%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20230706T134619Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=6807259ddd1f4448ed1e3c5d4503039884f7779381ee556175096b0a884ba1a6"
}

----------------------------------------

TITLE: Executing DVC Version Command Outside a Project
DESCRIPTION: Shows the output of the 'dvc version' command when run outside a DVC project, displaying limited environment information.

LANGUAGE: bash
CODE:
$ dvc version

DVC version: 1.10.0 (pip)
---------------------------------
Platform: Python 3.8.3 on Linux-5.4.0-47-generic-x86_64-with-debian-buster-sid
Supports: All remotes

----------------------------------------

TITLE: Resolving Merge Conflicts in Imported Data .dvc Files
DESCRIPTION: Example of a merge conflict in a .dvc file generated by 'dvc import' or 'dvc import-url'. Resolution involves removing conflicted values and using 'dvc update' to fetch the latest data from the original source.

LANGUAGE: yaml
CODE:
<<<<<<< HEAD
md5: 263395583f35403c8e0b1b94b30bea32
=======
md5: 520d2602f440d13372435d91d3bfa176
>>>>>>> branch
frozen: true
deps:
- path: get-started/data.xml
  repo:
    url: https://github.com/iterative/dataset-registry
<<<<<<< HEAD
    rev_lock: f31f5c4cdae787b4bdeb97a717687d44667d9e62
=======
    rev_lock: 06be1104741f8a7c65449322a1fcc8c5f1070a1e
>>>>>>> branch
outs:
<<<<<<< HEAD
- md5: a304afb96060aad90176268345e10355
  size: 12
=======
- md5: 35dd1fda9cfb4b645ae431f4621fa324
  size: 100
>>>>>>> branch
  path: data.xml

----------------------------------------

TITLE: Running DVC Experiment Queue with Grid Search
DESCRIPTION: Example of queueing multiple DVC experiments for grid search using Hydra config groups.

LANGUAGE: cli
CODE:
$ dvc exp run --queue \
              -S 'train/optimizer=adam,sgd' \
              -S 'train/model=resnet,efficientnet'

$ dvc queue start

----------------------------------------

TITLE: Setting HDFS User for DVC Remote Storage
DESCRIPTION: Demonstrates how to set or modify the user for accessing an HDFS remote storage in DVC. This command is used with the --local flag to store sensitive information in a Git-ignored config file.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote user myuser

----------------------------------------

TITLE: Interactive DVC Check-Ignore Usage
DESCRIPTION: Shows how to use check-ignore interactively with --stdin option.

LANGUAGE: cli
CODE:
$ dvc check-ignore --stdin
> file1
file1
> other
> file2
file2

----------------------------------------

TITLE: Parameter Comparison with Targets Example
DESCRIPTION: Example showing how to compare parameters using specific target files with the -- separator for POSIX terminals.

LANGUAGE: cli
CODE:
$ dvc params diff --targets m1.json m2.yaml -- HEAD v1

----------------------------------------

TITLE: Removing a .dvc File with DVC Remove
DESCRIPTION: Demonstrates how to use the 'dvc remove' command to remove a .dvc file and update the .gitignore file accordingly.

LANGUAGE: cli
CODE:
$ dvc remove foo.csv.dvc

$ ls
bar.csv  bar.csv.dvc  foo.csv
$ cat .gitignore
/bar.csv

----------------------------------------

TITLE: Creating Branch from Experiment
DESCRIPTION: Demonstrates creating a Git branch from a DVC experiment named 'gluey-leak'

LANGUAGE: bash
CODE:
$ dvc exp branch gluey-leak
Git branch 'gluey-leak-branch' has been created from experiment 'gluey-leak'.
To switch to the new branch run:
        git checkout exp-gluey-leak

----------------------------------------

TITLE: DVC Experiment Pull Command Usage Syntax
DESCRIPTION: Shows the command line syntax and arguments for the dvc exp pull command, including optional flags and positional arguments.

LANGUAGE: usage
CODE:
usage: dvc exp pull [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>] [-f]
                    [--no-cache] [-r <name>] [-j <number>]
                    [--run-cache | --no-run-cache]
                    git_remote [experiment ...]

positional arguments:
  git_remote          Git remote name or Git URL
  experiment          Experiment to pull

----------------------------------------

TITLE: Showing DVC Status Command Usage in Bash
DESCRIPTION: This snippet shows the usage syntax for the 'dvc status' command, including various options and arguments.

LANGUAGE: bash
CODE:
usage: dvc status [-h] [-v] [-j <number>] [-q] [-c] [-r <name>] [-a] [-T]
                  [--all-commits] [-d] [-R] [--json] [--no-updates]
                  [targets [targets ...]]

positional arguments:
  targets       Limit command scope to these tracked files/directories,
                .dvc files, or stage names.

----------------------------------------

TITLE: DVC Pipeline Configuration with Hydra
DESCRIPTION: Example of a DVC pipeline configuration using Hydra-composed parameters.

LANGUAGE: yaml
CODE:
stages:
  setup-dataset:
    cmd:
      - wget ${dataset.url} -O tmp.tgz
      - mkdir -p ${dataset.output_folder}
      - tar zxvf tmp.tgz -C ${dataset.output_folder}
      - rm tmp.tgz
    outs:
      - ${dataset.output_folder}
  train:
    cmd: python train.py
    deps:
      - ${dataset.output_folder}
    params:
      - train

----------------------------------------

TITLE: Modifying Parameters On-the-Fly in DVC Experiments
DESCRIPTION: Shows how to use the '--set-param' option to modify parameters without editing the params file directly. It includes examples of overriding, appending, and removing parameters.

LANGUAGE: bash
CODE:
$ dvc exp run -S 'prepare.split=0.1' -S 'featurize.max_features=100'
...

$ dvc exp run -S 'train_config.json:+train.weight_decay=0.001'
...

$ dvc params diff --targets train_config.json
Path               Param                HEAD    workspace
train_config.json  train.weight_decay   -       0.001

----------------------------------------

TITLE: Configuring Azure Storage Account Authentication
DESCRIPTION: Sets the Azure storage account name for remote authentication

LANGUAGE: cli
CODE:
$ dvc remote modify myremote account_name 'mystorage'

----------------------------------------

TITLE: Configuring Kerberos Ticket for HDFS in DVC
DESCRIPTION: Shows how to specify the path to the Kerberos ticket cache for accessing Kerberos-secured HDFS clusters in DVC. This setting is added locally to protect sensitive information.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote \
                              kerb_ticket /path/to/ticket/cache

----------------------------------------

TITLE: Using DVC Experiment Save Command
DESCRIPTION: The synopsis of the 'dvc exp save' command, showing its usage and available options.

LANGUAGE: bash
CODE:
usage: dvc exp save [-h] [-q | -v] [-R] [-f]
                   [--json] [-n <name>]
                   [-I path] [-m <message>]
                   [targets [targets ...]]

----------------------------------------

TITLE: Displaying .gitignore Contents in DVC
DESCRIPTION: Shows the contents of the .gitignore file in a DVC project, which includes entries for tracked files.

LANGUAGE: cli
CODE:
$ cat .gitignore
/foo.csv
/bar.csv

----------------------------------------

TITLE: DVC Unprotect Command Usage Syntax
DESCRIPTION: Shows the basic command syntax and arguments for the dvc unprotect command. The command accepts one or more target files/directories as arguments.

LANGUAGE: usage
CODE:
usage: dvc unprotect [-h] [-q | -v] targets [targets ...]

----------------------------------------

TITLE: DVC Experiment Diff Command Synopsis
DESCRIPTION: The usage syntax for the 'dvc exp diff' command, showing available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc exp diff [-h] [-q | -v] [--all] [--param-deps]
                    [--json] [--md]
                    [--no-path] [--precision <n>]
                    [a_rev] [b_rev]

----------------------------------------

TITLE: Download Artifact Using DVC Studio Token
DESCRIPTION: Example demonstrating how to download an artifact using DVC Studio authentication token for the production stage.

LANGUAGE: cli
CODE:
$ DVC_STUDIO_TOKEN=mytoken dvc artifacts get https://github.com/iterative/example-get-started.git text-classification --stage=prod
Downloaded 1 file(s) to 'model.pkl'

----------------------------------------

TITLE: DVC File Structure for Single File
DESCRIPTION: Example of the .dvc file structure created when adding a single file to DVC tracking.

LANGUAGE: yaml
CODE:
outs:
  - md5: 6137cde4893c59f76f005a8123d8e8e6
    path: data.xml

----------------------------------------

TITLE: Manually Renaming Stage Outputs in DVC YAML
DESCRIPTION: Example of manually renaming stage outputs in the dvc.yaml file, which is not supported by 'dvc move'. It shows how to update the output name in the YAML configuration.

LANGUAGE: yaml
CODE:
stages:
  train:
    ...
    outs:
    - keras.h5

----------------------------------------

TITLE: Downloading DVC Models with CLI Command
DESCRIPTION: Use the 'dvc artifacts get' command to download a DVC-tracked model artifact by name. This method requires DVC to be installed and configured.

LANGUAGE: bash
CODE:
dvc artifacts get

----------------------------------------

TITLE: Executing DVC Version Command Inside a Project
DESCRIPTION: Demonstrates the output of the 'dvc version' command when executed inside a DVC project, showing detailed environment and project information.

LANGUAGE: bash
CODE:
$ dvc version

DVC version: 1.10.0 (pip)
---------------------------------
Platform: Python 3.8.3 on Linux-5.4.0-47-generic-x86_64-with-debian-buster-sid
Supports: gs, hdfs, http, https, s3
Cache types: hardlink, symlink
Cache directory: ext4 on /dev/sda1
Caches: local
Remotes: https, s3, ssh
Workspace directory: ext4 on /dev/sda1
Repo: dvc, git

----------------------------------------

TITLE: Configuring Aliyun OSS Remote in DVC CLI
DESCRIPTION: These commands demonstrate how to add an Aliyun OSS remote to DVC and set the OSS endpoint. It also shows how to securely set the key ID and secret using local configuration.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote oss://mybucket/path
$ dvc remote modify myremote oss_endpoint endpoint
$ dvc remote modify --local myremote oss_key_id 'mykey'
$ dvc remote modify --local myremote oss_key_secret 'mysecret'

----------------------------------------

TITLE: Modifying Dependencies and Outputs in dvc.yaml
DESCRIPTION: Example of manually editing dvc.yaml to add a new dependency (data/raw.csv) and output (data/validate) to an existing 'prepare' stage.

LANGUAGE: git
CODE:
 stages:
   prepare:
     cmd: python src/prepare.py
     deps:
+    - data/raw.csv
     - src/prepare.py
     outs:
     - data/train
+    - data/validate

----------------------------------------

TITLE: Adding File to DVC
DESCRIPTION: Command-line example of adding a single file to DVC tracking.

LANGUAGE: cli
CODE:
$ dvc add data.xml

----------------------------------------

TITLE: Installing DVCLive Python Library
DESCRIPTION: Install the DVCLive Python library using pip to enable experiment tracking functionality.

LANGUAGE: cli
CODE:
$ pip install dvclive

----------------------------------------

TITLE: Usage Syntax for DVC Doctor Command
DESCRIPTION: Displays the command-line syntax for using the 'dvc doctor' command. It shows the basic structure of the command, including optional arguments for help, quiet mode, and verbose mode.

LANGUAGE: bash
CODE:
usage: dvc doctor [-h] [-q | -v]

----------------------------------------

TITLE: DVC Remote Setup and Pull
DESCRIPTION: Example showing how to set up a remote storage location and pull from it specifically using the --remote flag.

LANGUAGE: bash
CODE:
$ dvc remote add -d r1 ssh://user@example.com/path/to/dvc/remote/storage
$ dvc remote list
r1	ssh://user@example.com/path/to/dvc/remote/storage

$ dvc pull --remote r1

----------------------------------------

TITLE: Removing a DVC Stage and Its Output
DESCRIPTION: Demonstrates how to use the 'dvc remove' command with the '--outs' option to remove a stage and delete its output files.

LANGUAGE: cli
CODE:
$ dvc remove train --outs
$ ls
dvc.lock  dvc.yaml  foo.csv  foo.csv.dvc  train.py

----------------------------------------

TITLE: Downloading DVC Models with cURL or Python
DESCRIPTION: Utilize the DVC Studio REST API to download model artifacts using cURL in the terminal or within Python code. This method requires a DVC Studio client access token.

LANGUAGE: python
CODE:
# Example code not provided in the original text

----------------------------------------

TITLE: Listing Files in DVC Workspace
DESCRIPTION: Demonstrates the contents of a DVC workspace before and after using the 'dvc remove' command.

LANGUAGE: cli
CODE:
$ ls
bar.csv  bar.csv.dvc  foo.csv  foo.csv.dvc

----------------------------------------

TITLE: Setting Additional S3 Configuration Parameters for DVC Remote
DESCRIPTION: These snippets demonstrate how to set various S3 configuration parameters for a DVC remote, including region, timeouts, SSL options, server-side encryption, and access control lists.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote region 'us-east-2'

$ dvc remote modify myremote ssl_verify false
# or
$ dvc remote modify myremote \
                      ssl_verify 'path/to/ca_bundle.pem'

$ dvc remote modify myremote sse 'AES256'

$ dvc remote modify myremote \
                      acl 'bucket-owner-full-control'

$ dvc remote modify myremote grant_read \
        'id=myuser,id=anotheruser'

----------------------------------------

TITLE: Installing DVC Pre-release from GitHub
DESCRIPTION: Commands for installing pre-release DVC versions using pip. Includes both basic installation and cloud storage support options. Recommended to be used within a virtual environment or with pipx on Python 3.8+.

LANGUAGE: cli
CODE:
# Plain DVC
$ pip install git+https://github.com/iterative/dvc

# For cloud storage support, add `egg=dvc[option]` e.g. `s3`.
# Use `all` to include all available clouds.
$ pip install "git+https://github.com/iterative/dvc#egg=dvc[s3]"

----------------------------------------

TITLE: Downloading from Local Path using DVC Get-URL
DESCRIPTION: Demonstrates how to use the 'dvc get-url' command to copy a file or directory from a local path to the current directory.

LANGUAGE: bash
CODE:
$ dvc get-url /local/path/to/data

----------------------------------------

TITLE: DVC Artifacts Get Command Usage
DESCRIPTION: Shows the command line syntax and arguments for the dvc artifacts get command, including available options and required parameters.

LANGUAGE: usage
CODE:
usage: dvc artifacts get [-h] [-q | -v]
                         [--rev [<version>]] [--stage [<stage>]]
                         [-o [<path>]] [--show-url] [-j <number>] [-f]
                         [--config CONFIG]
                         [--remote REMOTE] [--remote-config [REMOTE_CONFIG ...]]
                         url name

----------------------------------------

TITLE: Generating DVC YAML Configuration for Plots
DESCRIPTION: Example of the YAML configuration generated by log_sklearn_plot function for ROC and confusion matrix plots in dvc.yaml file.

LANGUAGE: yaml
CODE:
plots:
  - dvclive/plots/sklearn/roc.json:
      template: simple
      x: fpr
      y: tpr
      title: Receiver operating characteristic (ROC)
      x_label: False Positive Rate
      y_label: True Positive Rate
  - dvclive/plots/sklearn/cm.json:
      template: confusion
      x: actual
      y: predicted
      title: Confusion Matrix
      x_label: True Label
      y_label: Predicted Label

----------------------------------------

TITLE: Replacing DVC-Tracked Files in Bash
DESCRIPTION: This snippet shows the process of replacing a file tracked by DVC. It involves stopping tracking, replacing the file content, and re-adding it to DVC and Git.

LANGUAGE: bash
CODE:
$ dvc remove train.tsv.dvc
$ echo new > train.tsv
$ dvc add train.tsv
$ git add train.tsv.dvc .gitignore
$ git commit -m "new train data"

# If you have remote storage and/or an upstream repo:
$ dvc push
$ git push

----------------------------------------

TITLE: DVC Project Configuration for Local Remote
DESCRIPTION: Shows the resulting configuration in the DVC project's config file after adding a default local remote.

LANGUAGE: ini
CODE:
['remote "myremote"']
    url = /path/to/remote
[core]
    remote = myremote

----------------------------------------

TITLE: Setting Remote Jobs Parameter (Bash)
DESCRIPTION: Demonstrates how to modify the 'jobs' parameter for a DVC remote to control synchronization processes.

LANGUAGE: bash
CODE:
$ dvc remote modify myremote jobs 8

----------------------------------------

TITLE: Comparing Different Versions of Model Files
DESCRIPTION: Example showing how to download and compare different versions of model files using Git revisions.

LANGUAGE: bash
CODE:
$ git clone https://github.com/iterative/example-get-started
$ cd example-get-started
$ dvc get . model.pkl --rev baseline-experiment \
                      --out model.monograms.pkl

----------------------------------------

TITLE: Extracting Helm Chart
DESCRIPTION: Command to extract the Helm chart archive.

LANGUAGE: cli
CODE:
$ tar zxvf studio-0.7.0.tgz

----------------------------------------

TITLE: Using Environment Variables for DVC S3 Remote Authentication
DESCRIPTION: This snippet shows how to use environment variables to set AWS credentials for DVC S3 remote authentication. It demonstrates setting access key ID and secret access key.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote s3://mybucket
$ export AWS_ACCESS_KEY_ID='myid'
$ export AWS_SECRET_ACCESS_KEY='mysecret'
$ dvc push

----------------------------------------

TITLE: DVC Metrics Show Across Branches
DESCRIPTION: Illustrates how to compare metrics across different Git branches using the --all-branches option.

LANGUAGE: cli
CODE:
$ dvc metrics show -a
Revision      Path       AUC      TP    error
increase_bow  eval.json  0.66524  521   0.17074
main          eval.json  0.66729  516   0.16982

----------------------------------------

TITLE: Using DVC Get-URL Command Syntax
DESCRIPTION: Shows the usage syntax for the 'dvc get-url' command, including its arguments and options.

LANGUAGE: bash
CODE:
usage: dvc get-url [-h] [-q | -v] [-j <number>] [-f] [--fs-config <name>=<value>] url [out]

----------------------------------------

TITLE: Listing IP Addresses for Firewall Configuration
DESCRIPTION: This snippet provides the IP addresses that should be allowed through the firewall for DVC Studio to access a custom GitLab server. These addresses are essential for configuring network access when the GitLab server is behind a firewall.

LANGUAGE: plaintext
CODE:
3.21.85.173/32
3.142.203.124/32

----------------------------------------

TITLE: Enabling Kanban-like Workflow with GTO Show
DESCRIPTION: Demonstrates how to use the '--vs' and '--av' options together with 'gto show' to enable a Kanban-like workflow where each version has a single stage.

LANGUAGE: cli
CODE:
$ gto show churn --av 1 --vs -1
╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage   │ created_at          │ ref          │
╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡
│ churn      │ v3.1.0    │ staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │
│ churn      │ v3.0.0    │ dev     │ 2022-08-24 01:52:10 │ churn@v3.0.0 │
╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛

----------------------------------------

TITLE: DVC Local Remote Storage Configuration
DESCRIPTION: These snippets show the resulting configuration entries in the DVC config file for local remote storage using absolute and relative paths.

LANGUAGE: ini
CODE:
# .dvc/config
['remote "myremote"']
    url = /tmp/dvcstore

LANGUAGE: ini
CODE:
# .dvc/config
['remote "myremote"']
    url = ../../dvcstore

----------------------------------------

TITLE: Displaying DVC Version Command Usage
DESCRIPTION: Shows the usage syntax for the 'dvc version' command, including available options.

LANGUAGE: bash
CODE:
usage: dvc version [-h] [-q | -v]

----------------------------------------

TITLE: Downloading Git-Tracked File
DESCRIPTION: Example demonstrating how to download a file tracked in a Git repository.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/schacon/cowsay install.sh
$ ls
install.sh

----------------------------------------

TITLE: Modifying WebHDFS Remote URL in DVC CLI
DESCRIPTION: Demonstrates how to modify the URL of an existing WebHDFS remote storage in DVC. This command updates the URL for the remote named 'myremote'.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote url webhdfs://user@example.com/path

----------------------------------------

TITLE: Querying Default Remote with DVC CLI
DESCRIPTION: Demonstrates how to retrieve the current default remote using the DVC command-line interface.

LANGUAGE: bash
CODE:
$ dvc remote default

myremote

----------------------------------------

TITLE: DVC Import URL Command Usage Synopsis
DESCRIPTION: Basic command syntax and arguments for dvc import-url

LANGUAGE: bash
CODE:
usage: dvc import-url [-h] [-q | -v]
           [--to-remote] [-r <name>] [--no-exec | --no-download]
           [-j <number>] [-f] [--version-aware]
           [--fs-config <name>=<value>]
           url [out]

----------------------------------------

TITLE: Updating DVC Config File (Git)
DESCRIPTION: Illustrates the changes made to the .dvc/config file when modifying a remote's URL.

LANGUAGE: git
CODE:
# .dvc/config
['remote "temp"']
-     url = /tmp/dvcstore
+     url = /mnt/c/tmp/dvcstore

----------------------------------------

TITLE: Pandas DataFrame Creation Example
DESCRIPTION: Example showing how to convert experiment data into a Pandas DataFrame for analysis and manipulation.

LANGUAGE: python
CODE:
import dvc.api
import pandas as pd

df = pd.DataFrame(dvc.api.exp_show())

----------------------------------------

TITLE: Enabling Symlinks in DVC Configuration
DESCRIPTION: Demonstrates how to enable symlink protection using DVC config command.

LANGUAGE: cli
CODE:
$ dvc config cache.type symlink

----------------------------------------

TITLE: Modifying DVC Remote Storage Configuration
DESCRIPTION: These commands show how to modify the configuration of a DVC remote, including setting local credentials and adjusting connection timeout.

LANGUAGE: bash
CODE:
$ dvc remote modify --local \
                    myremote credentialpath ~/.aws/alt
$ dvc remote modify myremote connect_timeout 300

----------------------------------------

TITLE: Viewing Queue Status and Task IDs
DESCRIPTION: Example showing how to check experiment task status before viewing logs.

LANGUAGE: cli
CODE:
$ dvc queue status
Task     Name    Created    Status
192a13c          04:15 PM   Failed
753b005          04:01 PM   Success
0bbb118          04:01 PM   Success
1ae8b65          04:01 PM   Success

Worker status: 0 active, 0 idle

----------------------------------------

TITLE: Download Artifact from DVC Remote
DESCRIPTION: Example showing how to download a specific version of an artifact from a DVC remote repository.

LANGUAGE: cli
CODE:
$ dvc artifacts get https://github.com/iterative/example-get-started.git text-classification --rev=v1.0.0
Downloaded 1 file(s) to 'model.pkl'

----------------------------------------

TITLE: Checking Dependencies with DVC Status in Bash
DESCRIPTION: This example demonstrates how to use 'dvc status' with the '--with-deps' option to check for changes in dependencies of a specific target.

LANGUAGE: bash
CODE:
$ vi code/featurization.py
... edit the code

$ dvc status model.p
Data and pipelines are up to date.

$ dvc status model.p --with-deps
matrix-train.p:
	changed deps:
		modified:  code/featurization.py

----------------------------------------

TITLE: Ignoring File State Changes in DVC
DESCRIPTION: Illustrates how DVC ignores changes to files specified in .dvcignore, while detecting changes in tracked files.

LANGUAGE: bash
CODE:
$ dvc status
Data and pipelines are up to date.

$ echo "2345" >> data/data1
$ dvc status
Data and pipelines are up to date.

$ rm data/data1
$ dvc status
Data and pipelines are up to date.

$ echo "345" >> data/data2
$ dvc status
data.dvc:
	changed outs:
		modified:           data

----------------------------------------

TITLE: Updated Default Remote in DVC Config File
DESCRIPTION: Displays the updated default remote value in the DVC config file after changing it.

LANGUAGE: ini
CODE:
[core]
remote = mynewremote

----------------------------------------

TITLE: Setting Default Remote
DESCRIPTION: Example showing how to specify a default remote when downloading files.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/iterative/example-get-started-s3 data/prepared --remote myremote

----------------------------------------

TITLE: Complete Example - Getting URL for DVC-tracked File
DESCRIPTION: Full example demonstrating how to get and print a URL for a DVC-tracked file from a GitHub repository

LANGUAGE: python
CODE:
import dvc.api

resource_url = dvc.api.get_url(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry',
)
print(resource_url)

----------------------------------------

TITLE: Registering Model Version Using GTO CLI
DESCRIPTION: Commands demonstrating how to register a model version using the GTO CLI. Shows examples for models in the root directory and in subdirectories.

LANGUAGE: bash
CODE:
gto register pool-segmentation --version v0.0.1

LANGUAGE: bash
CODE:
gto register cv:pool-segmentation --version v0.0.1

----------------------------------------

TITLE: Adding S3 Remote Storage in DVC
DESCRIPTION: This snippet demonstrates how to add an S3 bucket as a remote storage location in a DVC project using the command line interface.

LANGUAGE: bash
CODE:
$ dvc remote add myremote s3://mybucket

----------------------------------------

TITLE: Displaying Usage for DVC Queue Kill Command
DESCRIPTION: This snippet shows the usage syntax for the 'dvc queue kill' command, including its arguments and options. It specifies how to kill specific tasks or use various flags like quiet, verbose, or force.

LANGUAGE: usage
CODE:
usage: dvc queue kill [-h] [-q | -v] [-f] [<task> ...]

positional arguments:
  <task>         Tasks in queue to kill.

----------------------------------------

TITLE: Download Artifact from Specific DVC YAML File
DESCRIPTION: Example showing how to download an artifact that is defined in a specific dvc.yaml file within the repository.

LANGUAGE: cli
CODE:
$ dvc artifacts get https://github.com/iterative/lstm_seq2seq.git results/dvc.yaml:best
Downloaded 1 file(s) to 'epoch=0-step=16.ckpt'

----------------------------------------

TITLE: Logging Model Artifacts
DESCRIPTION: Log model artifacts with optional type and name parameters.

LANGUAGE: python
CODE:
live.log_artifact("model.pt", type="model", name="gpt")

----------------------------------------

TITLE: Ignoring DVC-Tracked Files
DESCRIPTION: Shows how to use .dvcignore to exclude previously tracked files from DVC operations and status checks.

LANGUAGE: bash
CODE:
$ mkdir dir1 dir2
$ echo data1 >> dir1/data1
$ echo data2 >> dir2/data2
$ dvc add dir1/data1 dir2/data2
$ tree .
.
├── dir1
│   ├── data1
│   └── data1.dvc
└── dir2
    ├── data2
    └── data2.dvc

$ echo mod > dir1/data1
$ echo mod > dir2/data2

$ dvc status
dir1/data1.dvc:
	changed outs:
		modified:           dir1/data1
dir2/data2.dvc:
	changed outs:
		modified:           dir2/data2

$ echo 'dir1/*' >> .dvcignore

$ dvc status
dir2/data2.dvc:
	changed outs:
		modified:           dir2/data2

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Example showing how to use log_metric within a Live context manager to log training and validation losses.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    live.log_metric("train/loss", 0.4)
    live.log_metric("val/loss", 0.9)

----------------------------------------

TITLE: Listing Contents from SSH Server using DVC list-url
DESCRIPTION: Shows how to use the DVC list-url command to list files and directories from a remote SSH server using default SSH credentials.

LANGUAGE: bash
CODE:
$ dvc list-url ssh://user@example.com/path/to/data

----------------------------------------

TITLE: Installing DVC from repository on Fedora/CentOS
DESCRIPTION: Installs DVC from the official repository on Fedora or CentOS systems. Adds the repository, imports the GPG key, and installs DVC.

LANGUAGE: bash
CODE:
$ sudo wget \
       https://dvc.org/rpm/dvc.repo \
       -O /etc/yum.repos.d/dvc.repo
$ sudo rpm --import https://dvc.org/rpm/iterative.asc
$ sudo yum update
$ sudo yum install dvc

----------------------------------------

TITLE: Displaying Usage for DVC Studio Token Command
DESCRIPTION: This code snippet shows the usage syntax for the 'dvc studio token' command. It outlines the basic structure of the command and its optional arguments.

LANGUAGE: usage
CODE:
usage: dvc studio token [-h] [-q | -v]

----------------------------------------

TITLE: Deleting All Tags for an Artifact with GTO Deprecate
DESCRIPTION: Illustrates how to use the 'gto deprecate' command with the --delete option to remove all tags associated with an artifact.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model --delete
Deleted git tag 'awesome-model@v0.0.1' that registered a version.
Deleted git tag 'awesome-model#prod#1' that assigned a stage to 'v0.0.1'.
Deleted git tag 'awesome-model#prod!#2' that unassigned a stage to 'v0.0.1'.
To push the changes upstream, run:
git push origin awesome-model@v0.0.1 awesome-model#prod#1 awesome-model#prod!#2 --delete

----------------------------------------

TITLE: Setting AWS Access Keys for DVC S3 Remote
DESCRIPTION: This snippet illustrates how to set AWS access key ID, secret access key, and optional session token for a DVC S3 remote using the CLI.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote \
                    access_key_id 'mysecret'
$ dvc remote modify --local myremote \
                    secret_access_key 'mysecret'
$ dvc remote modify --local myremote \
                    session_token 'mysecret'

----------------------------------------

TITLE: Checking Empty Queue Status in DVC
DESCRIPTION: Shows how to check the queue status when no experiments are queued and no workers are active, using the 'dvc queue status' command.

LANGUAGE: bash
CODE:
$ dvc queue status
No experiment tasks in the queue.

Worker status: 0 active, 0 idle

----------------------------------------

TITLE: Using log_plot with Structured NumPy Array in Python
DESCRIPTION: Example of using log_plot with a structured NumPy array to create a smooth plot of sepal width vs sepal length for the Iris dataset.

LANGUAGE: python
CODE:
import numpy as np
from dvclive import Live
from sklearn.datasets import load_iris

# Create a structured array
iris = load_iris()
dtypes = [(name, float) for name in iris.feature_names]
data = np.array([tuple(row) for row in iris.data], dtype=dtypes)

with Live() as live:

    live.log_plot(
        "sepal_array_named",
        data,
        x="sepal length (cm)",
        y="sepal width (cm)",
        template="smooth",
        title="Numpy Array with Names"
    )

----------------------------------------

TITLE: Starting DVC Queue Workers
DESCRIPTION: Demonstrates how to start multiple queue workers using the 'dvc queue start' command, allowing parallel execution of experiments.

LANGUAGE: bash
CODE:
$ dvc queue start -j 2
Started '2' new experiments task queue workers.
$ dvc queue status
Task     Name    Created    Status
753b005          04:01 PM   Running
0bbb118          04:01 PM   Running
1ae8b65          04:01 PM   Queued

Worker status: 2 active, 0 idle

----------------------------------------

TITLE: Initializing DVCLive with System Monitoring in Python
DESCRIPTION: Example of how to initialize DVCLive with system monitoring enabled using the monitor_system parameter set to True.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live(monitor_system=True)

----------------------------------------

TITLE: Using log_param Example - Python
DESCRIPTION: Example showing how to use log_param within a Live context manager to log learning rate and iteration count parameters.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    live.log_param("lr", 1e-3)
    live.log_param("n_iter", 50)

----------------------------------------

TITLE: Listing Contents from Amazon S3 Bucket using DVC list-url
DESCRIPTION: Demonstrates how to use the DVC list-url command to list objects and common prefixes under a specified path in an Amazon S3 bucket.

LANGUAGE: bash
CODE:
$ dvc list-url s3://bucket/path

----------------------------------------

TITLE: Basic DVC Stage Add Command Usage
DESCRIPTION: Synopsis showing the complete command-line usage pattern for dvc stage add command with all available options and arguments.

LANGUAGE: cli
CODE:
usage: dvc stage add [-h] [-q | -v] -n <name> [-f]
                 [-d <path>] [-p [<filename>:]<params_list>]
                 [-o <filename>] [-O <filename>] [-c <filename>]
                 [--outs-persist <filename>]
                 [--outs-persist-no-cache <filename>]
                 [-m <path>] [-M <path>]
                 [--plots <path>] [--plots-no-cache <path>]
                 [-w <path>] [--always-changed] [--desc <text>]
                 [--run]
                 command

----------------------------------------

TITLE: Displaying GTO Deprecate Command Usage
DESCRIPTION: Shows the usage syntax for the 'gto deprecate' command, including its arguments and options.

LANGUAGE: bash
CODE:
usage: gto deprecate [-r <text>] [-m <text>] [--simple <text>]
                     [--force] [-d] [--push] [-h]
                     name [version] [stage]

arguments:
  name             Artifact name
  [version]        Artifact version
  [stage]          Stage to unassign

----------------------------------------

TITLE: Setting Azure Connection String
DESCRIPTION: Configures Azure authentication using a connection string

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote \
                              connection_string 'mysecret'

----------------------------------------

TITLE: Checking DVC Queue Status After Task Completion
DESCRIPTION: Demonstrates how to check the queue status after all experiments have completed, showing the final status of tasks and workers.

LANGUAGE: bash
CODE:
$ dvc queue status
Task     Name    Created    Status
753b005          04:01 PM   Success
0bbb118          04:01 PM   Success
1ae8b65          04:01 PM   Success

Worker status: 0 active, 0 idle

----------------------------------------

TITLE: DVC Stage Definition via CLI
DESCRIPTION: Shows how to define a DVC pipeline stage using the command line interface, including dependencies and outputs.

LANGUAGE: cli
CODE:
$ dvc stage add --name train \
  --deps data_dir --deps src/train.py \
  --outs model.pt --outs dvclive \
  python train.py

----------------------------------------

TITLE: DVC Install Command Usage
DESCRIPTION: Shows the basic command syntax for installing DVC Git hooks.

LANGUAGE: usage
CODE:
usage: dvc install [-h] [-q | -v] [--use-pre-commit-tool]

----------------------------------------

TITLE: Defining Live.next_step() Method in Python
DESCRIPTION: Definition of the next_step() method in the Live class. This method signals the end of the current iteration and increments the step value by 1.

LANGUAGE: python
CODE:
def next_step()

----------------------------------------

TITLE: Hydra Defaults List Configuration
DESCRIPTION: Example of a Hydra defaults list configuration in YAML format.

LANGUAGE: yaml
CODE:
defaults:
  - dataset: imagenette
  - train/model: resnet
  - train/optimizer: sgd

----------------------------------------

TITLE: Displaying Doctor Command Usage in DVC
DESCRIPTION: Shows the usage syntax for the 'doctor' command in DVC, including available options.

LANGUAGE: usage
CODE:
usage: gto doctor [-r <text>] [-A] [-h]

----------------------------------------

TITLE: Installing DVC from package on Fedora/CentOS
DESCRIPTION: Installs DVC from a downloaded .rpm package on Fedora or CentOS systems.

LANGUAGE: bash
CODE:
$ sudo yum install dvc-0.62.1-1.x86_64.rpm

----------------------------------------

TITLE: Checking Imported Data Status with DVC in Bash
DESCRIPTION: This example demonstrates how to use 'dvc status' to check for updates in imported data and how to use the '--no-updates' option to skip this check.

LANGUAGE: bash
CODE:
$ dvc import different/repo/location data.csv

$ dvc status
data.csv.dvc:
	changed deps:
		update available:   data.csv (different/repo/location)

$ dvc status --no-updates
Data and pipelines are up to date.

----------------------------------------

TITLE: Installing DVC with S3 support using conda and mamba
DESCRIPTION: Installs DVC with Amazon S3 storage support using conda and mamba package managers.

LANGUAGE: bash
CODE:
$ conda install -c conda-forge mamba
$ mamba install -c conda-forge dvc-s3

----------------------------------------

TITLE: Initializing Azure Blob Storage Remote in DVC
DESCRIPTION: Sets up a new DVC remote storage using Azure Blob Storage with a container name and optional path

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote azure://<mycontainer>/<path>

----------------------------------------

TITLE: Comparing Multiple Targets with DVC Plots Diff
DESCRIPTION: Example showing how to compare multiple plot targets across different Git revisions using the --targets option.

LANGUAGE: bash
CODE:
$ dvc plots diff --targets t1.json t2.csv -- HEAD v1 v2

----------------------------------------

TITLE: TSV Metrics History Format
DESCRIPTION: Example of the TSV file format used to store metric history with timestamps and values.

LANGUAGE: typescript
CODE:
timestamp      step  loss
1623671484747  0     0.4
1623671484892  1     0.2

----------------------------------------

TITLE: Viewing Successful Task Logs
DESCRIPTION: Example showing how to view logs for a successful experiment task.

LANGUAGE: cli
CODE:
$ dvc queue logs 0bbb118
'data/data.xml.dvc' didn't change, skipping
Stage 'prepare' is cached - skipping run, checking out outputs
Updating lock file 'dvc.lock'

Stage 'featurize' is cached - skipping run, checking out outputs
Updating lock file 'dvc.lock'

Stage 'train' is cached - skipping run, checking out outputs
Updating lock file 'dvc.lock'

Stage 'evaluate' is cached - skipping run, checking out outputs
Updating lock file 'dvc.lock'

To track the changes with git, run:

    git add dvc.yaml scores.json roc.json params.yaml data/prepared data/data.xml prc.json src/featurization.py data/features src/evaluate.py model.pkl dvc.lock src/train.py src/prepare.py

To enable auto staging, run:

        dvc config core.autostage true

----------------------------------------

TITLE: Defining Live.end() Function in Python
DESCRIPTION: Definition of the Live.end() function, which signals that the current experiment has ended.

LANGUAGE: python
CODE:
def end():

----------------------------------------

TITLE: Basic DVC Check-Ignore Examples
DESCRIPTION: Demonstrates basic usage of check-ignore command with different file patterns.

LANGUAGE: cli
CODE:
$ dvc check-ignore file1
file1

$ dvc check-ignore file1 file2
file1
file2

$ dvc check-ignore other
  # There's no command output, meaning `other` is not excluded.

$ dvc check-ignore file*
file1
file2

----------------------------------------

TITLE: Updating Step Counter
DESCRIPTION: Increment the step counter and trigger summary updates.

LANGUAGE: python
CODE:
live.next_step()

----------------------------------------

TITLE: Installing Bash Completion on macOS
DESCRIPTION: This snippet shows how to install Bash completion support on macOS using Homebrew and configure it in the .bash_profile file.

LANGUAGE: cli
CODE:
$ brew install bash-completion

LANGUAGE: bash
CODE:
if [ -f "$(brew --prefix)"/etc/bash_completion ]; then
    . "$(brew --prefix)"/etc/bash_completion
fi

----------------------------------------

TITLE: Usage Syntax for DVC Studio Login Command
DESCRIPTION: Displays the usage syntax for the 'dvc studio login' command, showing available options and arguments.

LANGUAGE: usage
CODE:
usage: dvc studio login [-h] [-q | -v] [-H <hostname>] [-s <scopes>] [-n <name>] [-d]

----------------------------------------

TITLE: Registering a New Version with GTO
DESCRIPTION: Demonstrates how to use the 'gto register' command to create a new version tag for an artifact named 'awesome-model' with version 'v0.0.1'.

LANGUAGE: cli
CODE:
$ gto register awesome-model HEAD --version v0.0.1
Created git tag 'awesome-model@v0.0.1' that registers a version

----------------------------------------

TITLE: Setting Up OSS Emulator Using Docker for Testing
DESCRIPTION: This snippet shows how to set up a Docker container running an OSS emulator for testing purposes. It includes cloning the emulator repository, building the Docker image, running the container, and setting necessary environment variables.

LANGUAGE: cli
CODE:
$ git clone https://github.com/nanaya-tachibana/oss-emulator.git
$ docker image build -t oss:1.0 oss-emulator
$ docker run --detach -p 8880:8880 --name oss-emulator oss:1.0
$ export OSS_BUCKET='mybucket'
$ export OSS_ENDPOINT='endpoint'
$ export OSS_ACCESS_KEY_ID='mykey'
$ export OSS_ACCESS_KEY_SECRET='mysecret'

----------------------------------------

TITLE: Defining DVC Metrics Diff Command Usage in Bash
DESCRIPTION: This snippet shows the usage syntax for the 'dvc metrics diff' command, including its various options and arguments.

LANGUAGE: bash
CODE:
usage: dvc metrics diff [-h] [-q | -v]
                        [--targets [<paths> [<paths> ...]]] [-R]
                        [--all] [--json] [--md] [--no-path]
                        [--precision <n>]
                        [a_rev] [b_rev]

----------------------------------------

TITLE: Usage Example - Parameter Logging
DESCRIPTION: Example showing how to initialize Live instance and log nested parameters including model configuration and training settings.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()

params = {
    "num_classes": 10,
    "metrics": ["accuracy", "mae"],
    "training": {
        "epochs": 42,
        "batch_size": 128,
        "optimizer": {
            "name": "adam",
            "loss": "categorical_crossentropy",
            "learning_rate": 1e-3,
        },
    },
}
live.log_params(params)

----------------------------------------

TITLE: DVC Update Command Usage Syntax
DESCRIPTION: Shows the command line syntax and arguments for the dvc update command, including available options and target specification.

LANGUAGE: usage
CODE:
usage: dvc update [-h] [-q | -v] [-R] [--rev <commit>]
                  [--to-remote] [-r <name>]
                  [--no-download] [-j <number>]
                  targets [targets ...]

----------------------------------------

TITLE: Using Live.end() with Keras ML Framework in Python
DESCRIPTION: Shows how Live.end() is automatically called when training ends in supported ML frameworks, using Keras as an example.

LANGUAGE: python
CODE:
from dvclive.keras import DVCLiveCallback

...

model.fit(
    train_dataset, epochs=num_epochs, validation_data=validation_dataset,
    callbacks=[DVCLiveCallback()])
# live.end() has been called at this point

----------------------------------------

TITLE: Detailed DVC Check-Ignore Output
DESCRIPTION: Shows how to use the --details flag to get detailed pattern matching information.

LANGUAGE: cli
CODE:
$ dvc check-ignore -d file1 file2
.dvcignore:1:file*	file1
.dvcignore:2:!file2	file2

$ dvc check-ignore -d file*
.dvcignore:1:file*	file1
.dvcignore:2:!file2	file2

----------------------------------------

TITLE: Function Definition - Image Logging in Python
DESCRIPTION: Core function definition for logging images in DVCLive.

LANGUAGE: python
CODE:
def log_image(name: str, val):

----------------------------------------

TITLE: Installing DVC with Conda and S3 support on Windows
DESCRIPTION: Installs DVC using Conda with additional support for Amazon S3 storage. This installs the boto3 library along with DVC.

LANGUAGE: cli
CODE:
$ conda install -c conda-forge mamba # installs much faster than conda
$ mamba install -c conda-forge dvc-s3

----------------------------------------

TITLE: Installing DVC Completions for Bash on macOS
DESCRIPTION: This command installs DVC completions for Bash on macOS by generating the completion script and saving it to the appropriate location.

LANGUAGE: cli
CODE:
$ dvc completion -s bash \
  | sudo tee "$(brew --prefix)"/etc/bash_completion.d/dvc

----------------------------------------

TITLE: Tracking New Files in DVC
DESCRIPTION: Shows how to track newly added files using DVC add command and verify the changes.

LANGUAGE: cli
CODE:
$ dvc add images/test/0/70001.png
100% Adding...|████████████████████████████████████████|1/1 [00:00,  1.69file/s]

$ dvc data status --granular
DVC committed changes:
  (git commit the corresponding dvc files to update the repo)
        modified: images/
        added: images/test/0/70001.png
(there are other changes not tracked by dvc, use "git status" to see)

----------------------------------------

TITLE: Configuring WebDAV Authentication and Connection Parameters
DESCRIPTION: Commands for setting up authentication methods (token, user/password) and connection parameters for WebDAV remote storage.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote url \
      webdavs://example.com/nextcloud/remote.php/dav/files/myuser/

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote token 'mytoken'

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote user myuser

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote \
                      custom_auth_header 'My-Header'

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote password mypassword

LANGUAGE: cli
CODE:
$ dvc remote modify myremote ask_password true

LANGUAGE: cli
CODE:
$ dvc remote modify myremote ssl_verify false
# or
$ dvc remote modify myremote ssl_verify path/to/ca_bundle.pem

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote cert_path /path/to/cert

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote key_path /path/to/key

LANGUAGE: cli
CODE:
$ dvc remote modify myremote timeout 120

----------------------------------------

TITLE: Pre-commit Tool Configuration
DESCRIPTION: YAML configuration for setting up DVC hooks using the pre-commit tool, including pre-commit, pre-push, and post-checkout hooks.

LANGUAGE: yaml
CODE:
repos:
  - hooks:
      - id: dvc-pre-commit
        language_version: python3
        stages:
          - pre-commit
      - id: dvc-pre-push
        additional_dependencies: ['.[all]']
        language_version: python3
        stages:
          - pre-push
      - always_run: true
        id: dvc-post-checkout
        language_version: python3
        stages:
          - post-checkout
    repo: https://github.com/iterative/dvc
    rev: 3.56.0

----------------------------------------

TITLE: Logging Parameters
DESCRIPTION: Log single parameters or parameter dictionaries for experiment configuration.

LANGUAGE: python
CODE:
live.log_param("num_classes", 10)

LANGUAGE: python
CODE:
params = {
    "num_classes": 10,
    "metrics": ["accuracy", "mae"],
    "optimizer": "adam"
}
live.log_params(params)

----------------------------------------

TITLE: Listing Local DVC Experiments
DESCRIPTION: Shows how to verify that an experiment was successfully pulled by listing local experiments.

LANGUAGE: bash
CODE:
$ dvc exp list --all-commits
main:
    5cdc6a9 [lurid-air]

----------------------------------------

TITLE: Generating ROC Plot in Python
DESCRIPTION: Example of using log_sklearn_plot to generate a receiver operating characteristic (ROC) curve plot.

LANGUAGE: python
CODE:
y_true = [1, 1, 2, 2]
y_score = [0.1, 0.4, 0.35, 0.8]
live.log_sklearn_plot("roc", y_true, y_score)

----------------------------------------

TITLE: Loading DVC Data with Hugging Face Datasets
DESCRIPTION: Python code demonstrating how to load data from a DVC project using Hugging Face Datasets with DVCFileSystem integration.

LANGUAGE: python
CODE:
>>> from datasets import load_dataset
>>> load_dataset(
...     "csv",
...     data_files="dvc://workshop/satellite-data/jan_train.csv",
...     storage_options={"url": "https://github.com/iterative/dataset-registry.git"}
... )

----------------------------------------

TITLE: Step-by-Step Image Logging in Python
DESCRIPTION: Example showing how to log images for multiple steps using a counter to create unique filenames for each iteration.

LANGUAGE: python
CODE:
import numpy as np
from dvclive import Live

with Live() as live:
    base_img = np.ones((500, 500), np.uint8)
    for i in range(10):
      live.log_image(
        f"numpy/{live.step}.png", base_img * i * 10)
      live.next_step()

----------------------------------------

TITLE: Switching Between Data Versions with Git and DVC in Bash
DESCRIPTION: Commands to switch between different versions of data using Git and DVC. This shows how to manage multiple versions of datasets in a project.

LANGUAGE: bash
CODE:
$ git checkout <...>
$ dvc checkout
$ git checkout HEAD~1 data/data.xml.dvc
$ dvc checkout
$ git commit data/data.xml.dvc -m "Revert dataset updates"

----------------------------------------

TITLE: Installing DVC with S3 support using conda on macOS
DESCRIPTION: This example demonstrates how to install DVC with support for Amazon S3 storage using conda. It includes the boto3 library as a dependency and uses mamba for faster installation.

LANGUAGE: bash
CODE:
$ conda install -c conda-forge mamba
$ mamba install -c conda-forge dvc-s3

----------------------------------------

TITLE: Configuring Data Proxy Target for WebHDFS in DVC
DESCRIPTION: Demonstrates how to set the data_proxy_target parameter for WebHDFS in DVC. This enables support for accessing WebHDFS clusters behind a High Availability proxy server by rewriting the connection URL.

LANGUAGE: cli
CODE:
$ dvc remote modify data_proxy_target "https://host:port/gateway/cluster"

----------------------------------------

TITLE: Creating New AWS S3 Remote
DESCRIPTION: Example of creating a new AWS S3 remote and setting it as default during import.

LANGUAGE: cli
CODE:
$ dvc import https://github.com/iterative/example-get-started-s3 data/prepared \
    --remote myremote \
    --remote-config url=s3://mybucket/mypath profile=myprofile

----------------------------------------

TITLE: Comparing Against Remote Storage with DVC Status in Bash
DESCRIPTION: This example shows how to use 'dvc status' with the '--remote' option to compare local cache against a remote storage location.

LANGUAGE: bash
CODE:
$ dvc remote list
mystorage	s3://bucket/path

$ dvc status --remote mystorage
...
	new:      data/model.p
	new:      data/eval.txt
	new:      data/matrix-train.p
	new:      data/matrix-test.p

----------------------------------------

TITLE: Executing Doctor Command in DVC CLI
DESCRIPTION: Demonstrates the execution of the 'doctor' command in the DVC CLI, showing the GTO version and configuration details. It checks the registry and reports any issues found.

LANGUAGE: cli
CODE:
$ gto doctor
🪴  GTO Version: 0.2.5
---------------------------------
INDEX='artifacts.yaml'
TYPES=None
STAGES=None
LOG_LEVEL='INFO'
DEBUG=False
ENRICHMENTS=[]
AUTOLOAD_ENRICHMENTS=True
CONFIG_FILE_NAME='.gto'
EMOJIS=True
---------------------------------
✅  No issues found

----------------------------------------

TITLE: Defining log_sklearn_plot Function in Python
DESCRIPTION: Function signature for log_sklearn_plot, which generates and saves scikit-learn plots. It takes plot type, labels, predictions, and optional name as parameters.

LANGUAGE: python
CODE:
def log_sklearn_plot(
  kind: Literal['calibration', 'confusion_matrix', 'det', 'precision_recall', 'roc'],
  labels,
  predictions,
  name: Optional[str] = None,
  **kwargs):

----------------------------------------

TITLE: Downloading Artifact with DVCFileSystem in Python
DESCRIPTION: Example showing how to use artifacts_show() with DVCFileSystem to download a specific stage of an artifact to the local filesystem.

LANGUAGE: python
CODE:
import os
import dvc.api

artifact = dvc.api.artifacts_show(
    'text-classification',
    stage='prod',
    repo='https://github.com/iterative/example-get-started.git',
)
fs = dvc.api.DVCFileSystem(
    'https://github.com/iterative/example-get-started.git',
    rev=artifact['rev'],
)
fs.get_file(artifact['path'], os.path.basename(artifact['path']))

----------------------------------------

TITLE: Logging Custom Plots
DESCRIPTION: Create and log custom plots with specified templates and data points.

LANGUAGE: python
CODE:
datapoints = [
    {"name": "petal_width", "importance": 0.4},
    {"name": "petal_length", "importance": 0.33},
    {"name": "sepal_width", "importance": 0.24},
    {"name": "sepal_length", "importance": 0.03}
]
live.log_plot(
    "iris", datapoints, x="importance", y="name",
    template="bar_horizontal", title="Iris Feature Importance"
)

----------------------------------------

TITLE: Checking DVC Version in Terminal
DESCRIPTION: Command to verify DVC installation and check the installed version.

LANGUAGE: bash
CODE:
dvc version

----------------------------------------

TITLE: Using DVC Experiment Clean Command Syntax
DESCRIPTION: Shows the basic usage syntax for the dvc exp clean command with optional flags for help, quiet mode, and verbose output.

LANGUAGE: usage
CODE:
usage: dvc exp clean [-h] [-q | -v]

----------------------------------------

TITLE: DVC Stage Definition with Parameters
DESCRIPTION: Command to create a DVC pipeline stage that depends on specific parameters from the params file.

LANGUAGE: cli
CODE:
$ dvc stage add -n train \
                -d train.py -d users.csv -o model.pkl \
                -p lr,train \
                python train.py

----------------------------------------

TITLE: Setting Kerberos Principal for WebHDFS in DVC
DESCRIPTION: Demonstrates how to set a specific Kerberos principal for WebHDFS authentication in DVC. This is useful when multiple principals are available, such as for service accounts.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote kerberos_principal myprincipal

----------------------------------------

TITLE: DVC Import Command Synopsis
DESCRIPTION: Usage syntax for the 'dvc import' command, showing available options and arguments.

LANGUAGE: usage
CODE:
usage: dvc import [-h] [-q | -v]
                  [-o <path>] [-f] [--rev <commit>]
                  [--no-exec | --no-download]
                  [-j <number>]
                  [--config <path>] [--remote <name>]
                  [--remote-config [<name>=<value> ...]]
                  url path

----------------------------------------

TITLE: DVC Data Status Command Usage
DESCRIPTION: Basic command syntax and options for the dvc data status command.

LANGUAGE: usage
CODE:
usage: dvc data status [-h] [-q | -v]
                       [--granular] [--unchanged]
                       [--untracked-files [{no,all}]]
                       [--json]
                       [--not-in-remote] [--no-remote-refresh]

----------------------------------------

TITLE: SQL Query Import Example
DESCRIPTION: Example of importing SQL query results using DVC import-db command.

LANGUAGE: dvc
CODE:
$ dvc import-db --sql "select * from customers" --conn pgsql
...

----------------------------------------

TITLE: Logging Hyperparameters with DVCLiveLogger
DESCRIPTION: Demonstrates how to log hyperparameters using the log_hyperparams method.

LANGUAGE: python
CODE:
logger.log_hyperparams({"batch_size": 64, "epochs": 5, "lr": 1.0, ...})

----------------------------------------

TITLE: Confusion Matrix Example Data
DESCRIPTION: Sample CSV data structure for confusion matrix visualization.

LANGUAGE: csv
CODE:
predicted,actual
cat,cat
cat,cat
cat,cat
dog,cat
dinosaur,cat
dinosaur,cat
bird,cat
dog,turtle
cat,turtle
...

----------------------------------------

TITLE: Using Live.make_summary
DESCRIPTION: Example showing how to initialize Live object, set a metric value in the summary dictionary, and serialize it using make_summary().

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()
live.summary["foo"] = 1.0
live.make_summary()

----------------------------------------

TITLE: Updating Helm Repository for DVC Studio
DESCRIPTION: Updates the Helm repository to ensure access to the latest DVC Studio version.

LANGUAGE: cli
CODE:
helm repo update

----------------------------------------

TITLE: Installing DVC Completions for Zsh
DESCRIPTION: This command installs DVC completions for Zsh by generating the completion script and saving it to the appropriate location.

LANGUAGE: cli
CODE:
$ dvc completion -s zsh | sudo tee /usr/local/share/zsh/site-functions/_dvc

----------------------------------------

TITLE: Enabling Kerberos Authentication for WebHDFS in DVC
DESCRIPTION: Shows how to enable Kerberos authentication for a WebHDFS remote storage in DVC. This command sets the 'kerberos' parameter to true for the remote named 'myremote'.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote kerberos true

----------------------------------------

TITLE: Using DVC Experiment Push Command in Bash
DESCRIPTION: Syntax for using the 'dvc exp push' command to upload experiments to a Git remote. It includes various options for selecting experiments, managing caches, and controlling output verbosity.

LANGUAGE: bash
CODE:
usage: dvc exp push [-h] [-q | -v] [-A] [--rev <commit>] [-n <num>] [-f]
                    [--no-cache] [-r <name>] [-j <number>]
                    [--run-cache | --no-run-cache]
                    git_remote [experiment ...]

----------------------------------------

TITLE: DVC Diff Command Synopsis
DESCRIPTION: Shows the basic command syntax and arguments for the dvc diff command.

LANGUAGE: text
CODE:
usage: dvc diff [-h] [-q | -v]
                [--targets [<paths> [<paths> ...]]]
                [--json] [--show-hash] [--md]
                [a_rev] [b_rev]

----------------------------------------

TITLE: LightGBM with Custom Live Instance
DESCRIPTION: Advanced example showing how to use a custom Live instance with DVCLiveCallback and log additional metrics after training.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.lgbm import DVCLiveCallback

with Live("custom_dir") as live:
    lightgbm.train(
        param,
        train_data,
        valid_sets=[validation_data],
        num_round=5,
        callbacks=[DVCLiveCallback(live=live)])

    # Log additional metrics after training
    live.log_metric("summary_metric", 1.0, plot=False)

----------------------------------------

TITLE: Syntax for GTO Assign Command
DESCRIPTION: Displays the usage syntax for the 'gto assign' command, including all available options and arguments.

LANGUAGE: cli
CODE:
usage: gto assign [-r <text>] [--version <text>]
                  [--stage <text>] [-m <text>]
                  [--simple <text>] [--force] [--push] [--sr]
                  [-h]
                  name [ref]

arguments:
  name             Artifact name
  [ref]            Git reference to use

----------------------------------------

TITLE: Using Live.next_step() for Metric Logging in Python
DESCRIPTION: Example usage of Live.next_step() in a loop to log metrics and increment steps. This demonstrates how to use DVCLive for tracking metrics over multiple iterations.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()

for step in range(3):
    live.log_metric("metric", 0.9)
    live.next_step()

----------------------------------------

TITLE: DataFrame Manipulation Example
DESCRIPTION: Example demonstrating how to select specific columns, clean up data, and format the DataFrame as a markdown table.

LANGUAGE: python
CODE:
columns = ["Experiment", "dice_multi", "train.arch"]

df = pd.DataFrame(dvc.api.exp_show(), columns=columns)

df.dropna(inplace=True)
df.reset_index(drop=True, inplace=True)

df.to_markdown()

----------------------------------------

TITLE: Applying a Saved DVC Experiment
DESCRIPTION: Example of applying a previously saved experiment using 'dvc exp apply' command.

LANGUAGE: bash
CODE:
$ dvc exp apply extra-trees
Changes for experiment 'extra-trees' have been applied to your current workspace.

----------------------------------------

TITLE: Cache and DVC Files Migration
DESCRIPTION: Example showing cache migration with DVC files update using the --dvc-files flag, including Git tracking instructions.

LANGUAGE: cli
CODE:
$ dvc cache migrate --dvc-files
Migrated 3 files to DVC 3.0 cache location.
Updating DVC file 'foo.dvc'
Modifying stage 'baz' in 'dir/dvc.yaml'
Updating lock file 'dir/dvc.lock'
Updating DVC file 'dir/bar.dvc'

To track the changes with git, run:

        git add dir/dvc.yaml foo.dvc dir/dvc.lock dir/bar.dvc

To enable auto staging, run:

        dvc config core.autostage true

----------------------------------------

TITLE: Configuring SSL Verification in DVC
DESCRIPTION: Controls SSL certificate verification for HTTP remotes. Can be disabled or set to use custom CA bundle.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote ssl_verify false
# or
$ dvc remote modify myremote ssl_verify path/to/ca_bundle.pem

----------------------------------------

TITLE: Including Untracked or Ignored Paths in DVC Experiments
DESCRIPTION: Shows how to use the '--copy-paths' option to include untracked or ignored files in temporary or queued experiments without tracking them.

LANGUAGE: bash
CODE:
$ dvc exp run --temp -C secrets.txt -C symlinked-directory

----------------------------------------

TITLE: Comparing Targets with Git Revisions
DESCRIPTION: Example showing how to compare specific files between Git revisions using the --targets option.

LANGUAGE: shell
CODE:
$ dvc diff --targets t1.json t2.yaml -- HEAD v1

----------------------------------------

TITLE: CSV Data Format Example for DVC Plots
DESCRIPTION: Example of tabular data format (CSV) showing epoch, loss, and accuracy columns that can be used for DVC plot visualization.

LANGUAGE: text
CODE:
epoch,loss,accuracy
1,0.19,0.81
2,0.11,0.89
3,0.07,0.93
4,0.04,0.96

----------------------------------------

TITLE: Initializing and Using DVCLive Tracker with Hugging Face Accelerate in Python
DESCRIPTION: This snippet demonstrates how to initialize the Accelerator with DVCLive tracking, log hyperparameters and metrics, save a model checkpoint, and end the experiment. It covers the basic usage of DVCLive with Accelerate.

LANGUAGE: python
CODE:
from accelerate import Accelerator

# optional, `log_with` defaults to "all"
accelerator = Accelerator(log_with="dvclive")

# log hyperparameters
hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)

# log metrics
accelerator.log({"train_loss": 1.12, "valid_loss": 0.8})

# log model
accelerator.save_state("checkpoint_dir")
if accelerator.is_main_process:
    live = accelerator.get_tracker("dvclive", unwrap=True)
    live.log_artifact("checkpoint_dir")

# end logging
accelerator.end_training()

----------------------------------------

TITLE: Unassigning a Stage with GTO Deprecate
DESCRIPTION: Demonstrates how to use the 'gto deprecate' command to unassign a stage from a specific artifact version.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model v0.0.1 prod
Created git tag 'awesome-model#prod!#2' that unassigns a stage from 'v0.0.1'

----------------------------------------

TITLE: Defining log_plot Function in Python
DESCRIPTION: Function signature for the log_plot method in DVCLive, which creates custom plots for DVC projects. It accepts parameters for plot name, datapoints, axis labels, and plot properties.

LANGUAGE: python
CODE:
def log_plot(
    name: str,
    datapoints: pd.DataFrame | np.ndarray | List[Dict],
    x: str,
    y: Union[str, list[str]],
    template: Optional[str] = None,
    title: Optional[str] = None,
    x_label: Optional[str] = None,
    y_label: Optional[str] = None,
):

----------------------------------------

TITLE: Executing DVC Plots Show Command
DESCRIPTION: Basic usage syntax for the 'dvc plots show' command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc plots show [-h] [-q | -v] [-t <name_or_path>] [-x <field>]
                      [-y <field>] [--no-header] [--title <text>]
                      [--x-label <text>] [--y-label <text>] [-o <path>]
                      [--show-vega] [--open] [--html-template <path>]
                      [targets [targets ...]]

----------------------------------------

TITLE: Upgrading DVC Studio Installation
DESCRIPTION: Performs the upgrade of DVC Studio using Helm, applying custom configuration values from values.yaml file. The command upgrades the installation in the 'studio' namespace.

LANGUAGE: cli
CODE:
helm upgrade studio iterative/studio --namespace studio --values values.yaml

----------------------------------------

TITLE: Setting Absolute Path for DVC Cache Directory
DESCRIPTION: Illustrates setting an absolute path for the cache directory and displays how it's saved in the config file.

LANGUAGE: bash
CODE:
$ dvc cache dir /path/to/dir
$ cat .dvc/config
...
[cache]
    dir = /path/to/dir
...

----------------------------------------

TITLE: Configuring HTTP Remote URL in DVC
DESCRIPTION: Modifies the URL of an existing HTTP remote. The URL can include query strings.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote url https://example.com/path

----------------------------------------

TITLE: Applying DVC Experiment Results to Workspace
DESCRIPTION: Usage syntax for the 'dvc exp apply' command. It takes an experiment name or hash as an argument and supports optional flags for help, quiet mode, and verbose output.

LANGUAGE: bash
CODE:
usage: dvc exp apply [-h] [-q | -v] experiment

positional arguments:
  experiment     Experiment to be applied

----------------------------------------

TITLE: File Rename Operations
DESCRIPTION: Commands demonstrating how to rename files and view the resulting changes using dvc diff.

LANGUAGE: shell
CODE:
$ dvc move data/data.xml data/other_data.xml
$ dvc diff

$ echo "<row Id=\"12345678\" Body=\"New row\" />" >> data/other_data.xml
$ dvc diff

----------------------------------------

TITLE: DVC Stage Definition in YAML
DESCRIPTION: Demonstrates how to define a DVC pipeline stage using YAML configuration, specifying command, dependencies, and outputs.

LANGUAGE: yaml
CODE:
stages:
  train:
    cmd: python train.py
    deps:
      - train.py
      - data_dir
    outs:
      - model.pt
      - dvclive

----------------------------------------

TITLE: Importing DVCLive
DESCRIPTION: Basic import statement for the DVCLive module.

LANGUAGE: python
CODE:
from dvclive import Live

----------------------------------------

TITLE: API Response Format
DESCRIPTION: Example JSON response structure showing the format of a successful project creation, including project ID, URL, and name.

LANGUAGE: json
CODE:
{
  "projects": [
    {
      "id": "tsanhawn9y",
      "url": "https://studio.datachain.ai/user/amritghimire/projects/example-get-started-tsanhawn9y",
      "name": "example-get-started"
    }
  ]
}

----------------------------------------

TITLE: Finalizing DVCLiveLogger Experiment
DESCRIPTION: Shows how to properly finalize the experiment logging with a success status.

LANGUAGE: python
CODE:
logger.finalize("success")

----------------------------------------

TITLE: Displaying DVC Experiment Results
DESCRIPTION: Example of using 'dvc exp show' to display experiment results, including metrics and parameters for different experiments.

LANGUAGE: bash
CODE:
$ dvc exp show

----------------------------------------

TITLE: Using DVC Root with Non-DVC Commands
DESCRIPTION: Demonstrates how to use 'dvc root' with non-DVC commands like 'tree' to reference project files from subdirectories.

LANGUAGE: bash
CODE:
$ dvc root
../..

$ tree $(dvc root)/data/
../../data/
├── data.xml
├── data.xml.dvc
...

----------------------------------------

TITLE: DVC Experiment Show Command Example
DESCRIPTION: An example of using the 'dvc exp show' command to display a table of experiments with their metrics and parameters.

LANGUAGE: bash
CODE:
$ dvc exp show

----------------------------------------

TITLE: Running DVC Metrics Diff in Bash
DESCRIPTION: This example shows how to use the 'dvc metrics diff' command to compare metrics between the workspace and the latest commit.

LANGUAGE: bash
CODE:
$ dvc metrics diff
Path                  Metric    HEAD     workspace    Change
dvclive/metrics.json  AUC       0.78912  0.18114      -0.60798
dvclive/metrics.json  TP        215      768          553

----------------------------------------

TITLE: DVC Cache Migrate Command Syntax
DESCRIPTION: Basic usage syntax for the dvc cache migrate command, showing available options including help, quiet/verbose modes, DVC files migration, and dry run.

LANGUAGE: cli
CODE:
usage: dvc cache migrate [-h] [-q | -v] [--dvc-files] [--dry]

----------------------------------------

TITLE: Updating Fixed Revision Model Import
DESCRIPTION: Demonstrates importing a model from a specific version and updating it to a different version using the --rev flag.

LANGUAGE: cli
CODE:
$ dvc import --rev baseline-experiment \
            git@github.com:iterative/example-get-started \
            model.pkl
Importing 'model.pkl (git@github.com:iterative/example-get-started)'
-> 'model.pkl'

$ dvc update model.pkl.dvc

$ dvc update --rev bigrams-experiment model.pkl.dvc
Importing 'model.pkl (git@github.com:iterative/example-get-started)'
-> 'model.pkl'

----------------------------------------

TITLE: Basic Plot Comparison with CSV
DESCRIPTION: Example of comparing uncommitted changes in a CSV log file with its last committed version, including X-axis label customization.

LANGUAGE: bash
CODE:
$ dvc plots diff --targets logs.csv --x-label x

----------------------------------------

TITLE: Listing Contents from Local File System using DVC list-url
DESCRIPTION: Illustrates the usage of DVC list-url command to list contents of a local directory on the file system.

LANGUAGE: bash
CODE:
$ dvc list-url /local/path/to/data

----------------------------------------

TITLE: Checking Kubernetes Pod Status for DVC Studio
DESCRIPTION: Command to list all DVC Studio components and their current status in the studio namespace.

LANGUAGE: cli
CODE:
kubectl get pods -n studio

----------------------------------------

TITLE: Using Live.end() with Context Manager in Python
DESCRIPTION: Demonstrates how Live.end() is automatically called when exiting a context manager using the 'with' statement.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
    pass
# live.end() has been called at this point

----------------------------------------

TITLE: Updated Python Script with Description
DESCRIPTION: An updated version of the line counting script that includes a description in the output.

LANGUAGE: python
CODE:
import sys
num_lines = 0
with open(sys.argv[1], 'r') as f:
    for line in f:
        num_lines += 1
print('Number of lines:')
print(num_lines)

----------------------------------------

TITLE: Downloading from HDFS using DVC Get-URL
DESCRIPTION: Demonstrates how to use the 'dvc get-url' command to download a file from HDFS (Hadoop Distributed File System).

LANGUAGE: bash
CODE:
$ dvc get-url hdfs://user@example.com/path/to/file

----------------------------------------

TITLE: Downloading from HDFS using DVC Get-URL
DESCRIPTION: Demonstrates how to use the 'dvc get-url' command to download a file from HDFS (Hadoop Distributed File System).

LANGUAGE: bash
CODE:
$ dvc get-url hdfs://user@example.com/path/to/file

----------------------------------------

TITLE: DVCLive Generated Metrics JSON
DESCRIPTION: Example of the JSON metrics file automatically generated by DVCLive.

LANGUAGE: json
CODE:
{
  "AUC": 0.66729,
  "error": 0.16982,
  "TP": 516
}

----------------------------------------

TITLE: Displaying Usage for DVC Artifacts Command in Bash
DESCRIPTION: This code snippet shows the usage syntax for the 'dvc artifacts' command. It outlines the available subcommands and options, including the 'get' subcommand for downloading artifacts from a DVC project.

LANGUAGE: bash
CODE:
usage: dvc artifacts [-h] [-q | -v] {get} ...

positional arguments:
  COMMAND
    get          Download an artifact from a DVC project.

----------------------------------------

TITLE: DVC Cache Cleanup Example
DESCRIPTION: Demonstrates cleaning up the DVC cache using the gc command with the workspace option, showing before and after cache sizes.

LANGUAGE: cli
CODE:
$ du -sh .dvc/cache/
7.4G    .dvc/cache/

LANGUAGE: cli
CODE:
$ dvc gc --workspace

'.dvc/cache/files/md5/27e30965256ed4d3e71c2bf0c4caad2e' was removed
'.dvc/cache/files/md5/2e006be822767e8ba5d73ebad49ef082' was removed
'.dvc/cache/files/md5/2f412200dc53fb97dcac0353b609d199' was removed
'.dvc/cache/files/md5/541025db4da02fcab715ca2c2c8f4c19' was removed
'.dvc/cache/files/md5/62f8c2ba93cfe5a6501136078f0336f9' was removed
'.dvc/cache/files/md5/7c4521365288d69a03fa22ad3d399f32' was removed
'.dvc/cache/files/md5/9ff7365a8256766be8c363fac47fc0d4' was removed
'.dvc/cache/files/md5/a86ca87250ed8e54a9e2e8d6d34c252e' was removed
'.dvc/cache/files/md5/f64d65d4ccef9ff9d37ea4cf70b18700' was removed

LANGUAGE: cli
CODE:
$ du -sh .dvc/cache/
3.1G    .dvc/cache/

----------------------------------------

TITLE: Configuring Zsh Completion Support
DESCRIPTION: This snippet shows how to configure Zsh completion support by adding the necessary lines to the .zshrc file.

LANGUAGE: bash
CODE:
# Use modern completion system
autoload -Uz compinit
compinit

----------------------------------------

TITLE: Checking DVC Queue Status During Experiment Execution
DESCRIPTION: Shows how to check the queue status while experiments are running, displaying the progress of tasks and worker statuses.

LANGUAGE: bash
CODE:
$ dvc queue status
Task     Name    Created    Status
1ae8b65          04:01 PM   Running
753b005          04:01 PM   Success
0bbb118          04:01 PM   Success

Worker status: 1 active, 1 idle

----------------------------------------

TITLE: Keeping Specific DVC Experiments
DESCRIPTION: Demonstrates how to keep specific experiments and remove all others using the '--keep' flag.

LANGUAGE: bash
CODE:
$ dvc exp list
master:
        major-mela
        conic-ease
        lucid-lair

$ dvc exp remove --keep major-mela

$ dvc exp list
master:
        major-mela

----------------------------------------

TITLE: Training Second Model Version
DESCRIPTION: Track the expanded dataset, retrain the model, and track the new model version.

LANGUAGE: bash
CODE:
$ dvc add data
$ python train.py
$ dvc add model.weights.h5

----------------------------------------

TITLE: Cloud Version-Aware Import Example
DESCRIPTION: Example of importing version-aware data from cloud storage with corresponding DVC file structure

LANGUAGE: yaml
CODE:
md5: 0c00504e8539cba57c523413d6f98df3
frozen: true
deps:
- path: s3://mybucket/data
  files:
  - size: 14445097
    version_id: LiVFgBb24qRRbn1o2DcAZhh4_M8Zy7FK
    etag: 22a1a2931c8370d3aeedd7183606fd7f
    relpath: data.xml
  - size: 6728772
    version_id: fLkcP.Dq0zl7CtKexohzyJCazSMk_R9C
    etag: 9ca281786366acca17632c27c5c5cc75
    relpath: prepared/train.tsv
outs:
- md5: 3ce9c43d5bead55bee0d3752fc1d68c5.dir
  size: 25115048
  nfiles: 5
  path: data
  push: false

----------------------------------------

TITLE: Basic Usage - DVC Params Show
DESCRIPTION: Simple example showing how to import and use the params_show function.

LANGUAGE: python
CODE:
import dvc.api

params = dvc.api.params_show()

----------------------------------------

TITLE: Opening a File with DVCFileSystem in Python
DESCRIPTION: Example of opening a file using the DVCFileSystem instance and loading its contents.

LANGUAGE: python
CODE:
>>> with fs.open("model.pkl") as f:
        model = pickle.load(f)

----------------------------------------

TITLE: Listing DVC Experiments in Git Remote in Bash
DESCRIPTION: Example of using 'dvc exp list' command to display all experiments in the Git remote 'origin'.

LANGUAGE: bash
CODE:
$ dvc exp list --all origin
master:
    conic-ease
    lucid-lair
    major-mela

----------------------------------------

TITLE: Renaming Local DVC Experiment
DESCRIPTION: Example demonstrating how to rename a local experiment and verify the change.

LANGUAGE: cli
CODE:
$ dvc exp rename conic-ease renamed-exp

$ dvc exp list
master:
        major-mela
        renamed-exp
        lucid-lair

----------------------------------------

TITLE: Using log_plot with List of Dictionaries in Python
DESCRIPTION: Example usage of log_plot method to create a horizontal bar plot for feature importance in the Iris dataset. It demonstrates how to use a list of dictionaries as input data.

LANGUAGE: python
CODE:
from dvclive import Live

datapoints = [
    {"name": "petal_width", "importance": 0.4},
    {"name": "petal_length", "importance": 0.33},
    {"name": "sepal_width", "importance": 0.24},
    {"name": "sepal_length", "importance": 0.03}
]

with Live() as live:
    live.log_plot(
        "iris_feature_importance",
        datapoints,
        x="importance",
        y="name",
        template="bar_horizontal",
        title="Iris Dataset: Feature Importance",
        y_label="Feature Name",
        x_label="Feature Importance"
    )

----------------------------------------

TITLE: Displaying Usage for DVC Queue Remove Command
DESCRIPTION: This code snippet shows the usage syntax for the 'dvc queue remove' command, including its available options and arguments.

LANGUAGE: usage
CODE:
usage: dvc queue remove [-h] [-q | -v]
                        [--all] [--queued] [--success] [--failed]
                        [<task> ...]

positional arguments:
  <task>         Tasks in queue to remove.

----------------------------------------

TITLE: Removing All DVC Experiments
DESCRIPTION: Illustrates how to remove all experiments using the '--all' option with 'dvc exp remove'.

LANGUAGE: bash
CODE:
$ dvc exp remove -A

$ dvc exp list

----------------------------------------

TITLE: Expanding Dataset
DESCRIPTION: Download and extract additional images to expand the dataset.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/iterative/dataset-registry \
          tutorials/versioning/new-labels.zip
$ unzip -q new-labels.zip
$ rm -f new-labels.zip

----------------------------------------

TITLE: Displaying Local Workspace Status with DVC in Bash
DESCRIPTION: This example demonstrates the output of 'dvc status' command, showing changes in dependencies and outputs for different stages in the local workspace.

LANGUAGE: bash
CODE:
$ dvc status
baz.dvc:
	changed outs:
		modified:           baz
dofoo:
	changed deps:
		modified:           baz
	changed outs:
		modified:           foo
dobar:
	changed deps:
		modified:           foo
	changed outs:
		deleted:            bar

----------------------------------------

TITLE: Configuring DVC Studio for Live Updates in Databricks
DESCRIPTION: Sets up environment variables for DVC Studio integration to enable live experiment updates in Databricks Repos.

LANGUAGE: python
CODE:
import getpass
import os

os.environ["DVC_STUDIO_TOKEN"] = getpass.getpass()
os.environ["DVC_EXP_GIT_REMOTE"] = "https://github.com/<org>/<repo>"

----------------------------------------

TITLE: Adding and Listing DVC Remote Example
DESCRIPTION: Demonstrates how to add a default local remote storage and then list it using the remote list command.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote /path/to/remote
Setting 'myremote' as a default remote.

LANGUAGE: bash
CODE:
$ dvc remote list
myremote	/path/to/remote

----------------------------------------

TITLE: Configuring DVC Cache in Databricks
DESCRIPTION: Sets up a shared DVC cache on the Databricks File System (DBFS).

LANGUAGE: bash
CODE:
!dvc config cache.dir /dbfs/dvc/cache

----------------------------------------

TITLE: Renaming Remote DVC Experiment
DESCRIPTION: Example showing how to rename an experiment in a remote repository using the -g option.

LANGUAGE: cli
CODE:
$ dvc exp push myremote

$ dvc exp list myremote
master:
        conic-ease
        urban-sign
        major-mela

$ dvc exp rename -g myremote urban-sign renamed-exp
$ dvc exp list myremote
master:
        conic-ease
        renamed-exp
        major-mela

----------------------------------------

TITLE: Generating Confusion Matrix Plot in Python
DESCRIPTION: Example of using log_sklearn_plot to generate a confusion matrix plot.

LANGUAGE: python
CODE:
y_true = [1, 1, 2, 2]
y_pred = [2, 1, 1, 2]
live.log_sklearn_plot("confusion_matrix", y_true, y_pred)

----------------------------------------

TITLE: Monitoring Running Task Logs
DESCRIPTION: Example showing how to queue a new experiment and view its logs while running.

LANGUAGE: cli
CODE:
$ dvc exp run --queue -S prepare.split=0.40 -S featurize.max_features=4000
Queued experiment '93cfa70' for future execution.
$ dvc queue start
Started '1' new experiments task queue worker.
$ dvc queue logs 93cfa70
'data/data.xml.dvc' didn't change, skipping
Running stage 'prepare':
> python src/prepare.py data/data.xml
Updating lock file 'dvc.lock'

Running stage 'featurize':
> python src/featurization.py data/prepared data/features

----------------------------------------

TITLE: All-Patterns DVC Check-Ignore Output
DESCRIPTION: Demonstrates using --all flag to show all matched patterns for a file.

LANGUAGE: cli
CODE:
$ dvc check-ignore -d -a file2
.dvcignore:1:file*	file2
.dvcignore:2:!file2	file2

----------------------------------------

TITLE: Assigning Stage to Model Version using GTO CLI
DESCRIPTION: This command assigns the 'dev' stage to version v0.0.1 of the pool-segmentation model using the GTO CLI. It assumes the dvc.yaml file is in the root directory.

LANGUAGE: bash
CODE:
gto assign pool-segmentation --version v0.0.1 --stage dev

----------------------------------------

TITLE: Adding Data to DVC in Databricks
DESCRIPTION: Demonstrates how to add data to DVC tracking in a Databricks environment.

LANGUAGE: bash
CODE:
!dvc add data

----------------------------------------

TITLE: Configuring File Associations in Visual Studio Code for DVC
DESCRIPTION: This JSON snippet sets file associations in VS Code to recognize .dvc and dvc.lock files as YAML. It should be added to the settings.json file in VS Code.

LANGUAGE: json
CODE:
"files.associations": {
    "*.dvc": "yaml",
    "dvc.lock": "yaml"
}

----------------------------------------

TITLE: Adding Dependencies Using DVC Stage Command
DESCRIPTION: Alternative method using dvc stage add command with -f flag to add new dependencies and outputs to an existing stage. The -f flag allows overwriting the existing stage in dvc.yaml.

LANGUAGE: cli
CODE:
$ dvc stage add -n prepare \
          -f \
          -d src/prepare.py \
          -d data/raw.csv \
          -o data/train \
          -o data/validate \
          python src/prepare.py data/raw.csv

----------------------------------------

TITLE: Further Updated Python Script with File Name
DESCRIPTION: A final version of the line counting script that includes the file name in the output description.

LANGUAGE: python
CODE:
print(f'Number of lines in {sys.argv[1]}:')
print(num_lines)

----------------------------------------

TITLE: Setting Up Comparison Windows
DESCRIPTION: Defining reference and experiment time periods for data drift comparison.

LANGUAGE: python
CODE:
#set reference dates
reference_dates = ('2011-01-01 00:00:00','2011-01-28 23:00:00')

#set experiment batches dates
experiment_batches = [
    ('2011-01-01 00:00:00','2011-01-29 23:00:00'),
    ('2011-01-29 00:00:00','2011-02-07 23:00:00'),
    ('2011-02-07 00:00:00','2011-02-14 23:00:00'),
    ('2011-02-15 00:00:00','2011-02-21 23:00:00'),
]

----------------------------------------

TITLE: Viewing Git Branches
DESCRIPTION: Shows how to list Git branches after creating a new branch from an experiment

LANGUAGE: bash
CODE:
$ git branch
* master
  gluey-leak-branch

----------------------------------------

TITLE: Configuring Azure Remote with Connection String (Bash)
DESCRIPTION: Shows how to set up an Azure remote using a connection string for authentication.

LANGUAGE: bash
CODE:
$ dvc remote add -d myremote azure://mycontainer/object
$ dvc remote modify --local myremote connection_string 'mysecret'
$ dvc push

----------------------------------------

TITLE: Viewing Failed Task Logs
DESCRIPTION: Example showing how to view logs for a failed experiment task.

LANGUAGE: cli
CODE:
$ dvc queue logs 192a13c
'data/data.xml.dvc' didn't change, skipping
Running stage 'prepare':
> python src/prepare.py data/data.xml
Traceback (most recent call last):
  File "/Users/pmrowla/git/example-get-started/.dvc/tmp/exps/tmp217n0tjv/src/prepare.py", line 10, in <module>
    raise AssertionError
AssertionError
ERROR: failed to reproduce 'prepare': failed to run: python src/prepare.py data/data.xml, exited with 1

----------------------------------------

TITLE: Loading Docker Images
DESCRIPTION: Commands to load the transferred Docker images into the container runtime.

LANGUAGE: cli
CODE:
$ docker load -i studio-frontend-$STUDIO_VERSION.tar
$ docker load -i studio-backend-$STUDIO_VERSION.tar
$ docker load -i studio-datachain-worker-$STUDIO_VERSION.tar

----------------------------------------

TITLE: Configuring Azure AD Federation with Terraform
DESCRIPTION: Terraform configuration for setting up Azure AD federation for DVC Studio. Includes application registration, service principal creation, and role assignments for storage access.

LANGUAGE: hcl
CODE:
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "3.61.0"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "2.30.0"
    }
  }
}

provider "azuread" {}

provider "azurerm" {
  features {}
}

locals {
  provider  = "studio.datachain.ai/api"
  condition = "credentials:example-team/example-credentials"
}

data "azuread_client_config" "current" {}
data "azurerm_subscription" "current" {}

resource "azuread_application" "studio" {
  display_name = "studio"

  api {
    requested_access_token_version = 2
  }
}

resource "azuread_service_principal" "studio" {
  client_id = azuread_application.studio.client_id
  owners    = [data.azuread_client_config.current.object_id]
}

resource "azuread_application_federated_identity_credential" "studio" {
  application_id = azuread_application.studio.id
  display_name   = azuread_application.studio.display_name
  audiences      = ["api://AzureADTokenExchange"]
  issuer         = "https://${local.provider}"
  subject        = local.condition
}

resource "azurerm_role_definition" "studio" {
  name  = azuread_application.studio.display_name
  scope = data.azurerm_subscription.current.id

  permissions {
    actions = [
      "Microsoft.Storage/storageAccounts/listKeys/action",
      "Microsoft.Storage/storageAccounts/read",
    ]
  }
}

resource "azurerm_role_assignment" "studio" {
  name               = azurerm_role_definition.studio.role_definition_id
  scope              = data.azurerm_subscription.current.id
  role_definition_id = azurerm_role_definition.studio.role_definition_resource_id
  principal_id       = azuread_service_principal.studio.object_id
}

output "azure_subscription_id" {
  value = basename(data.azurerm_subscription.current.id)
}

output "azure_tenant_id" {
  value = data.azurerm_subscription.current.tenant_id
}

output "azure_client_id" {
  value = azuread_application.studio.client_id
}

----------------------------------------

TITLE: List Remote DVC Experiments Example
DESCRIPTION: Demonstrates listing experiments from a remote Git repository using its URL, showing how to access experiments in external DVC repositories.

LANGUAGE: cli
CODE:
$ dvc exp list --all-commits git@github.com:iterative/example-get-started.git
10-bigrams-experiment:
    bally-gude
    conic-ease

----------------------------------------

TITLE: Updating DVC Studio Helm Deployment
DESCRIPTION: Command to upgrade the DVC Studio Helm deployment with new TLS configuration using the updated values.yaml file.

LANGUAGE: cli
CODE:
$ helm upgrade --wait studio iterative/studio --namespace studio -f values.yaml

----------------------------------------

TITLE: SageMaker Environment Variable Setup
DESCRIPTION: Python code to configure environment variables for DVC Studio integration in SageMaker jobs.

LANGUAGE: python
CODE:
import os
from sagemaker.estimator import Estimator

env = {name: value for name, value in os.environ.items() if name.startswith("DVC")}

estimator = Estimator(
    environment=env,
    entry_point="train.py",
    source_dir="src",
    ...
)

----------------------------------------

TITLE: Simple Python Script for Line Counting
DESCRIPTION: A basic Python script used in the example pipeline to count the number of lines in a file.

LANGUAGE: python
CODE:
import sys
num_lines = 0
with open(sys.argv[1], 'r') as f:
    for line in f:
        num_lines += 1
print(num_lines)

----------------------------------------

TITLE: DVC Studio Authentication
DESCRIPTION: Command to log into DVC Studio for tracking live experiment updates.

LANGUAGE: cli
CODE:
$ dvc studio login

----------------------------------------

TITLE: Installing DVC with conda and mamba
DESCRIPTION: Installs DVC using conda package manager with mamba for faster installation. Requires Miniconda or Anaconda Distribution.

LANGUAGE: bash
CODE:
$ conda install -c conda-forge mamba
$ mamba install -c conda-forge dvc

----------------------------------------

TITLE: DVC Queue Stop Command Usage
DESCRIPTION: Shows the command line syntax for the DVC queue stop command. The command supports optional flags for help (-h), quiet mode (-q), verbose mode (-v), and immediate termination (--kill).

LANGUAGE: usage
CODE:
usage: dvc queue stop [-h] [-q | -v] [--kill]

----------------------------------------

TITLE: Logging Metrics with DVCLiveLogger
DESCRIPTION: Shows different ways to log metrics, including single and multiple metrics, with optional step parameter.

LANGUAGE: python
CODE:
logger.log_metrics({"train_loss": loss})
...
logger.log_metrics({"test_loss": test_loss, "test_acc": test_acc})

LANGUAGE: python
CODE:
logger.log_metrics({"train_loss": loss}, step=step)

----------------------------------------

TITLE: Setting up DVC Studio Login via CLI
DESCRIPTION: Command to interactively set up DVC Studio access token for local experiment running

LANGUAGE: cli
CODE:
$ dvc studio login

----------------------------------------

TITLE: Installing Dependencies for Hugging Face Datasets Integration
DESCRIPTION: Installing both datasets and DVC packages to enable loading DVC data with Hugging Face Datasets.

LANGUAGE: cli
CODE:
$ pip install datasets dvc

----------------------------------------

TITLE: Configuring Default Remote and Credentials in DVC API
DESCRIPTION: Example showing how to change the default remote and specify credentials for it using the 'config' parameter in dvc.api.open().

LANGUAGE: python
CODE:
import dvc.api

config = {
    'core': {'remote': 'myremote'},
    'remote': {
        'myremote': {
            'access_key_id': 'mykey',
            'secret_access_key': 'mysecretkey',
            'session_token': 'mytoken',
        },
    },
}

with dvc.api.open('data', config=config) as f:
    # ... Process data

----------------------------------------

TITLE: Installing DVC for Hugging Face Integration
DESCRIPTION: Basic pip installation command for DVC to enable Hugging Face Hub integration.

LANGUAGE: cli
CODE:
$ pip install dvc

----------------------------------------

TITLE: Deprecating an Artifact with GTO Deprecate
DESCRIPTION: Shows how to use the 'gto deprecate' command to mark an entire artifact as deprecated.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model
Created Git tag 'awesome-model@deprecated' that deprecates an artifact.

----------------------------------------

TITLE: Adding WebDAV Remote Storage in DVC
DESCRIPTION: Commands to add a new WebDAV remote storage location to DVC. Shows both base URL and subfolder configuration options.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote \
                    webdavs://example.com/owncloud/remote.php/dav

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote \
      webdavs://example.com/owncloud/remote.php/dav/files/myuser

----------------------------------------

TITLE: Installing DVC with S3 support using pip on macOS
DESCRIPTION: This example shows how to install DVC with support for Amazon S3 storage using pip. It includes the boto3 library as a dependency.

LANGUAGE: bash
CODE:
$ pip install "dvc[s3]"

----------------------------------------

TITLE: Installing Bash Completion on Debian/Ubuntu
DESCRIPTION: This snippet demonstrates how to install Bash completion support on Debian/Ubuntu systems and configure it in the .bashrc file.

LANGUAGE: cli
CODE:
$ sudo apt install --reinstall bash-completion

LANGUAGE: bash
CODE:
# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

----------------------------------------

TITLE: YAML Plot Configuration in dvc.yaml
DESCRIPTION: Example of defining plot configurations in the dvc.yaml file, including customizations for data sources, axes, and titles.

LANGUAGE: yaml
CODE:
plots:
  - logs.csv:
      x: epoch
      y: accuracy
      title: Displaying accuracy
      x_label: This is epoch
      y_label: This is accuracy

----------------------------------------

TITLE: Listing DVC List Command Usage in Bash
DESCRIPTION: Shows the usage syntax for the 'dvc list' command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc list [-h] [-q | -v] [-R|-T] [-L depth] [--dvc-only]
                [--json] [--rev [<commit>]]
                [--config <path>] [--remote <name>]
                [--remote-config [<name>=<value> ...]]
                [--size] [--show-hash]
                url [path]

----------------------------------------

TITLE: DVC Studio Firewall IP Allowlist Configuration
DESCRIPTION: IP addresses that need to be allowed through firewalls to enable access to self-hosted S3 storage or SSH servers from DVC Studio.

LANGUAGE: bash
CODE:
3.21.85.173/32
3.142.203.124/32

----------------------------------------

TITLE: Specifying Text Encoding in DVC API Open Function
DESCRIPTION: Example demonstrating how to specify the text encoding when opening a file using dvc.api.open().

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open('data/nlp/words_ru.txt', encoding='koi8_r') as f:
    # ... Process Russian words

----------------------------------------

TITLE: Installing Less Pager on Windows
DESCRIPTION: CLI command to install Less pager using Chocolatey package manager for DVC dag output visualization.

LANGUAGE: cli
CODE:
$ choco install less

----------------------------------------

TITLE: Executing GTO History Command Example
DESCRIPTION: Demonstrates the execution of the 'gto history' command for the 'churn' artifact, showing a tabular output of registry operations including timestamps, events, versions, stages, commits, and references.

LANGUAGE: cli
CODE:
$ gto history churn -r https://github.com/iterative/example-gto
╒═════════════════════╤════════════╤══════════════╤═══════════╤═════════╤══════════╤═════════════════╕
│ timestamp           │ artifact   │ event        │ version   │ stage   │ commit   │ ref             │
╞═════════════════════╪════════════╪══════════════╪═══════════╪═════════╪══════════╪═════════════════╡
│ 2022-11-09 13:40:33 │ churn      │ assignment   │ v3.1.1    │ dev     │ 2f2a8de  │ churn#dev#5     │
│ 2022-11-09 13:40:33 │ churn      │ registration │ v3.1.1    │ -       │ 2f2a8de  │ churn@v3.1.1    │
│ 2022-11-08 09:53:53 │ churn      │ commit       │ v3.1.1    │ -       │ 2f2a8de  │ 2f2a8de         │
│ 2022-11-07 06:07:13 │ churn      │ assignment   │ v3.1.0    │ dev     │ 064f173  │ churn#dev#4     │
│ 2022-11-06 02:20:33 │ churn      │ assignment   │ v3.0.0    │ prod    │ ddae695  │ churn#prod#3    │
│ 2022-11-04 22:33:53 │ churn      │ assignment   │ v3.1.0    │ staging │ 064f173  │ churn#staging#2 │
│ 2022-11-03 18:47:13 │ churn      │ assignment   │ v3.0.0    │ dev     │ ddae695  │ churn#dev#1     │
│ 2022-11-02 15:00:33 │ churn      │ registration │ v3.1.0    │ -       │ 064f173  │ churn@v3.1.0    │
│ 2022-11-01 11:13:53 │ churn      │ commit       │ v3.1.0    │ -       │ 064f173  │ 064f173         │
│ 2022-10-28 23:53:53 │ churn      │ registration │ v3.0.0    │ -       │ ddae695  │ churn@v3.0.0    │
│ 2022-10-27 20:07:13 │ churn      │ commit       │ v3.0.0    │ -       │ ddae695  │ ddae695         │
╘═════════════════════╧════════════╧══════════════╧═══════════╧═════════╧══════════╧═════════════════╛

----------------------------------------

TITLE: Setting Up Password Authentication
DESCRIPTION: Commands to configure password-based authentication for SSH remote storage.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote password mypassword
# or
$ dvc remote modify myremote ask_password true

----------------------------------------

TITLE: Adding SSH Key to macOS Keychain for DVC Authentication
DESCRIPTION: Command to decrypt an SSH key and add it to the SSH agent on macOS, allowing DVC to use it for authentication with Git remotes.

LANGUAGE: bash
CODE:
ssh-add --apple-load-keychain ~/.ssh/ed255

----------------------------------------

TITLE: Setting Default Remote in DVC Config File
DESCRIPTION: Demonstrates how the default remote is assigned in the 'core' section of the DVC config file.

LANGUAGE: ini
CODE:
[core]
remote = myremote

----------------------------------------

TITLE: Sample CSV Data Structure
DESCRIPTION: Example CSV file structure used to demonstrate plot template visualization.

LANGUAGE: csv
CODE:
y
0.1
0.4
0.9
1.6

----------------------------------------

TITLE: Creating Shared DVC Cache Directory in Bash
DESCRIPTION: Creates a directory to be used as a shared cache location for DVC projects. This command creates the directory '/home/shared/dvc-cache' and any necessary parent directories.

LANGUAGE: bash
CODE:
$ mkdir -p /home/shared/dvc-cache

----------------------------------------

TITLE: Downloading Docker Images
DESCRIPTION: Commands to pull and save DVC Studio Docker images for frontend, backend, and datachain worker components.

LANGUAGE: cli
CODE:
$ docker pull docker.iterative.ai/studio-frontend:$STUDIO_VERSION
$ docker save docker.iterative.ai/studio-frontend:$STUDIO_VERSION > studio-frontend-$STUDIO_VERSION.tar

$ docker pull docker.iterative.ai/studio-backend:$STUDIO_VERSION
$ docker save docker.iterative.ai/studio-backend:$STUDIO_VERSION > studio-backend-$STUDIO_VERSION.tar

$ docker pull docker.iterative.ai/studio-datachain-worker:$STUDIO_VERSION
$ docker save docker.iterative.ai/studio-datachain-worker:$STUDIO_VERSION > studio-datachain-worker-$STUDIO_VERSION.tar

----------------------------------------

TITLE: Setting Git Line Ending Attributes
DESCRIPTION: Git attributes configuration to enforce LF line endings across all text files regardless of platform.

LANGUAGE: text
CODE:
* text=auto eol=lf

----------------------------------------

TITLE: Restarting DVC Studio Components
DESCRIPTION: Series of commands to restart all DVC Studio deployments after updating Docker credentials.

LANGUAGE: cli
CODE:
kubectl rollout restart deploy/studio-beat -n studio
kubectl rollout restart deploy/studio-backend -n studio
kubectl rollout restart deploy/studio-worker -n studio
kubectl rollout restart deploy/studio-ui -n studio

LANGUAGE: cli
CODE:
kubectl get pods -n studio

----------------------------------------

TITLE: Setting HDFS Replication Factor in DVC
DESCRIPTION: Demonstrates how to set the replication factor for write operations on an HDFS cluster in DVC. This command modifies the 'replication' parameter for the remote named 'myremote'.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote replication 2

----------------------------------------

TITLE: GTO Register Command Examples
DESCRIPTION: Provides various examples of using the 'gto register' command, including registering at HEAD, at a specific ref, with an explicit version, and bumping version parts.

LANGUAGE: cli
CODE:
Register new version at HEAD:
$ gto register nn

Register new version at a specific ref:
$ gto register nn abc1234

Assign version name explicitly:
$ gto register nn --version v1.0.0

Choose a part to bump version by:
$ gto register nn --bump-minor

----------------------------------------

TITLE: DVC Remote Storage Configuration Files
DESCRIPTION: This snippet shows the resulting configuration files after setting up a remote storage location in DVC, including the main config, local config, and gitignore entries.

LANGUAGE: ini
CODE:
# .dvc/config
['remote "myremote"']
    url = s3://my-bucket
    connect_timeout = 300

LANGUAGE: ini
CODE:
# .dvc/config.local
['remote "myremote"']
    credentialpath = ~/.aws/alt

LANGUAGE: ini
CODE:
# .gitignore
.dvc/config.local

----------------------------------------

TITLE: Setting Up Python Virtual Environment
DESCRIPTION: Create and activate a Python virtual environment, then install the required dependencies.

LANGUAGE: bash
CODE:
$ python3 -m venv .env
$ source .env/bin/activate
$ pip install -r requirements.txt

----------------------------------------

TITLE: Executing DVC Destroy Command in Bash
DESCRIPTION: This snippet demonstrates the usage of the 'dvc destroy' command. It initializes a DVC project, adds a file, and then destroys the DVC-related files and directories, leaving only the original files and Git-related items.

LANGUAGE: bash
CODE:
$ dvc init
$ echo foo > foo
$ dvc add foo
$ ls -a

.dvc .git code.py foo foo.dvc

$ dvc destroy
This will destroy all information about your pipelines, all data files...
Are you sure you want to continue?
yes

$ ls -a

.git code.py foo

----------------------------------------

TITLE: Comparing Metrics Between Specific Git Commits in Bash
DESCRIPTION: This example demonstrates how to use 'dvc metrics diff' to compare metrics between two specific Git commits using their hashes.

LANGUAGE: bash
CODE:
$ dvc metrics diff --targets metrics.json -- 305fb8b c7bef55
Path                  Metric    305fb8b  c7bef55  Change
dvclive/metrics.json  AUC       0.9643   0.9743   0.0100
dvclive/metrics.json  TP        527      516      -11

----------------------------------------

TITLE: Logging Metrics with DVCLive and Hugging Face Accelerate in Python
DESCRIPTION: This snippet shows how to log metrics using the Accelerator's log method. It also demonstrates how to optionally specify a step number for the logged metrics.

LANGUAGE: python
CODE:
accelerator.log({"train_loss": 1.12, "valid_loss": 0.8})

LANGUAGE: python
CODE:
accelerator.log({"train_loss": 1.12, "valid_loss": 0.8}, step=1)

----------------------------------------

TITLE: Docker Registry Authentication
DESCRIPTION: Command to authenticate with the Iterative Docker registry.

LANGUAGE: cli
CODE:
$ docker login docker.iterative.ai

----------------------------------------

TITLE: Logging into DVC Studio
DESCRIPTION: Log into DVC Studio from the command line to enable realtime experiment updates and remote sharing.

LANGUAGE: cli
CODE:
$ dvc studio login

----------------------------------------

TITLE: Configuring SSL Verification for WebHDFS in DVC
DESCRIPTION: Shows how to configure SSL verification for HTTPS connections to WebHDFS in DVC. This command sets the 'ssl_verify' parameter to false for the remote named 'myremote'.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote ssl_verify false

----------------------------------------

TITLE: DVC Stages Command Usage
DESCRIPTION: Command syntax for the DVC stages command showing all available options including repository specification, allowed stages, used stages, and output format options.

LANGUAGE: bash
CODE:
usage: gto stages [-r <text>] [--allowed] [--used] [--json]
                  [-h]

----------------------------------------

TITLE: Setting Read Timeout in DVC
DESCRIPTION: Configures the read timeout duration for HTTP remote operations.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote read_timeout 300

----------------------------------------

TITLE: Using Databricks Secrets with DVC
DESCRIPTION: Shows how to use Databricks secrets to securely access data with DVC, specifically for AWS credentials.

LANGUAGE: python
CODE:
import dvc.api

remote_config = {
    'access_key_id': dbutils.secrets.get(scope='test_scope', key='aws_access_key_id'),
    'secret_access_key': dbutils.secrets.get(scope='test_scope', key='aws_secret_access_key'),
}

with dvc.api.open(
    'recent-grads.csv',
    repo='https://github.com/efiop/mydataregistry',
    remote_config=remote_config
) as fobj:
    ...

----------------------------------------

TITLE: Basic Cache Migration
DESCRIPTION: Example demonstrating basic cache migration without modifying DVC files.

LANGUAGE: cli
CODE:
$ dvc cache migrate
Migrated 94975 files to DVC 3.0 cache location.

----------------------------------------

TITLE: Import to Remote Storage Example
DESCRIPTION: Example showing how to import directly to remote storage using --to-remote flag

LANGUAGE: bash
CODE:
$ dvc import-url https://data.dvc.org/get-started/data.xml data.xml --to-remote

----------------------------------------

TITLE: Setting AWS Profile for Default Remote with DVC List in Bash
DESCRIPTION: Demonstrates how to use the 'dvc list' command with remote configuration options to set an AWS profile for the default remote.

LANGUAGE: bash
CODE:
$ dvc list https://github.com/iterative/example-get-started-s3 data/prepared --remote-config profile=myprofile

----------------------------------------

TITLE: Adding Iterative Helm Repository
DESCRIPTION: Adds the Iterative Helm repository to fetch DVC Studio charts.

LANGUAGE: cli
CODE:
$ helm repo add iterative https://helm.iterative.ai

----------------------------------------

TITLE: Relinking Data Files in DVC Workspace
DESCRIPTION: DVC command to re-link data files in the workspace after reconfiguring cache types, which can help resolve 'No possible cache types' errors.

LANGUAGE: bash
CODE:
dvc checkout --relink

----------------------------------------

TITLE: DVC YAML Configuration for Data Split Stage
DESCRIPTION: This YAML snippet shows the structure of the dvc.yaml file after adding the data_split stage. It includes command, dependencies, parameters, and outputs.

LANGUAGE: yaml
CODE:
stages:
  data_split:
    cmd: python src/data_split.py
    deps:
      - src/data_split.py
      - data/pool_data
    params:
      - base
      - data_split
    outs:
      - data/train_data
      - data/test_data

----------------------------------------

TITLE: Pushing/Pulling DVC Data
DESCRIPTION: Shares data artifacts between repositories using remote storage.

LANGUAGE: bash
CODE:
dvc push

----------------------------------------

TITLE: Assigning Model Stage with GTO CLI
DESCRIPTION: Command to assign a lifecycle stage to a model version using the GTO command-line interface. This is equivalent to assigning a stage through the DVC Studio UI.

LANGUAGE: bash
CODE:
gto assign pool-segmentation --version v1.0.0 --stage dev

----------------------------------------

TITLE: Setting HTTP Password in DVC
DESCRIPTION: Configures the password for HTTP remote authentication.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote password mypassword

----------------------------------------

TITLE: Importing Data with DVC in Databricks
DESCRIPTION: Shows how to import data from a URL using DVC in Databricks.

LANGUAGE: bash
CODE:
!dvc import-url https://archive.ics.uci.edu/static/public/186/wine+quality.zip

----------------------------------------

TITLE: Downloading from HTTP/HTTPS using DVC Get-URL
DESCRIPTION: Shows how to use the 'dvc get-url' command to download a file from an HTTP or HTTPS URL.

LANGUAGE: bash
CODE:
$ dvc get-url https://example.com/path/to/file

----------------------------------------

TITLE: Setting AWS Profile for Default Remote
DESCRIPTION: Example of importing data with a specified AWS profile for the default remote.

LANGUAGE: cli
CODE:
$ dvc import https://github.com/iterative/example-get-started-s3 data/prepared --remote-config profile=myprofile

----------------------------------------

TITLE: Usage Synopsis for GTO Register Command
DESCRIPTION: Displays the usage syntax for the 'gto register' command, including all available options and arguments.

LANGUAGE: cli
CODE:
usage: gto register [-r <text>] [--ver <text>] [-m <text>]
                    [--simple <text>] [--force] [--bump-major]
                    [--bump-minor] [--bump-patch] [--push] [-h]
                    name [ref]

arguments:
  name             Artifact name
  [ref]            Git reference to use for registration [default: HEAD]

----------------------------------------

TITLE: Configuring Docker Registry Secret
DESCRIPTION: Creates a Kubernetes secret for accessing the private Docker registry containing DVC Studio images. Requires credentials from the Iterative team.

LANGUAGE: cli
CODE:
$ kubectl create secret docker-registry iterativeai \
    --namespace studio \
    --docker-server=docker.iterative.ai \
    --docker-username=<username> \
    --docker-password=<password>

----------------------------------------

TITLE: Installing DVC Completions for Bash on Debian/Ubuntu
DESCRIPTION: This command installs DVC completions for Bash on Debian/Ubuntu systems by generating the completion script and saving it to the appropriate location.

LANGUAGE: cli
CODE:
$ dvc completion -s bash | sudo tee /etc/bash_completion.d/dvc

----------------------------------------

TITLE: DVC Studio Helm Values Configuration
DESCRIPTION: YAML configuration for DVC Studio deployment, including image pull secrets and global variables for hostname and license key.

LANGUAGE: yaml
CODE:
imagePullSecrets:
  - name: iterativeai

global:
  host: '<DVC Studio hostname>'
  envVars:
    SELF_HOSTED_LICENSE_KEY: '<License key provided by the Iterative team>'

----------------------------------------

TITLE: Managing Experiment Results
DESCRIPTION: Shows how to apply experiment results to workspace and remove unwanted experiments.

LANGUAGE: cli
CODE:
$ dvc exp apply ochre-dook

LANGUAGE: cli
CODE:
$ dvc exp remove cnn-32 cnn-64

----------------------------------------

TITLE: Configuring HTTP Username in DVC
DESCRIPTION: Sets the username for basic authentication with the HTTP remote.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote user myuser

----------------------------------------

TITLE: Downloading Model from Hugging Face Hub using DVC
DESCRIPTION: Example of using dvc get to download a Stable Diffusion model file from Hugging Face Hub without cloning the repository.

LANGUAGE: cli
CODE:
$ dvc get https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0 sd_xl_base_1.0.safetensors

----------------------------------------

TITLE: Sample JSON Output of metrics_show Function
DESCRIPTION: Example of the dictionary structure returned by dvc.api.metrics_show(), showing metric values for training and validation sets.

LANGUAGE: json
CODE:
{
  "avg_prec": { "train": 0.97, "val": 0.92 },
  "roc_auc": { "train": 0.98, "val": 0.94 }
}

----------------------------------------

TITLE: Initializing DVC in Subdirectory
DESCRIPTION: Example of initializing a DVC project in a subdirectory of a Git repository using the --subdir option.

LANGUAGE: bash
CODE:
$ mkdir mygitrepo && cd mygitrepo
$ git init

$ mkdir project-a && cd project-a
$ dvc init --subdir

----------------------------------------

TITLE: Service Account Configuration
DESCRIPTION: Shows how to configure a Google Drive remote to use service account authentication and delegation.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote gdrive_use_service_account true
$ dvc remote modify myremote --local \
                 gdrive_service_account_json_file_path path/to/file.json
$ dvc remote modify myremote gdrive_service_account_user_email \
              example_adress@some_google_domain.com

----------------------------------------

TITLE: Setting Connection Timeout in DVC
DESCRIPTION: Configures the connection timeout duration for HTTP remote operations.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote connect_timeout 300

----------------------------------------

TITLE: Creating Kubernetes Namespace for DVC Studio
DESCRIPTION: Creates a dedicated 'studio' namespace in Kubernetes for DVC Studio installation.

LANGUAGE: cli
CODE:
$ kubectl create namespace studio

----------------------------------------

TITLE: Installing DVC Completions for tcsh
DESCRIPTION: This command installs DVC completions for tcsh by generating the completion script and saving it to the appropriate location.

LANGUAGE: cli
CODE:
$ dvc completion -s tcsh | sudo tee /etc/profile.d/dvc.completion.csh

----------------------------------------

TITLE: cURL Command for Project Creation
DESCRIPTION: CLI command using cURL to create a DVC Studio project, demonstrating the API usage with authentication and JSON payload.

LANGUAGE: cli
CODE:
$ curl --location 'https://studio.datachain.ai/api/create-project' \
--header "Authorization:token ${DVC_STUDIO_TOKEN}" \
--header 'Content-Type: application/json' \
--data '{
    "repo_url": "https://github.com/organization/repo",
    "public": true,
    "team_name": "team",
    "subdir": "nested",
    "name": "test-nested"
}'

----------------------------------------

TITLE: Comparing Experiment Plots
DESCRIPTION: Shows how to compare plots across different experiments using the DVC CLI.

LANGUAGE: cli
CODE:
$ dvc plots diff $(dvc exp list --name-only)

----------------------------------------

TITLE: Configuring HTTP Method for Uploads in DVC
DESCRIPTION: Overrides the default HTTP method (POST) for file uploads to the remote storage.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote method PUT

----------------------------------------

TITLE: Installing DVC Dependencies
DESCRIPTION: pip command to install DVC and DVCLive packages in SageMaker environment.

LANGUAGE: bash
CODE:
pip install dvc dvclive

----------------------------------------

TITLE: Using Subrepos with DVCFileSystem in Python
DESCRIPTION: Example of accessing DVC-tracked files in subdirectories of a Git repository.

LANGUAGE: python
CODE:
>>> from dvc.api import DVCFileSystem
>>> url = "https://github.com/iterative/monorepo-example.git"
# by default, DVC initialized in a subdirectory will be ignored
>>> fs = DVCFileSystem(url, rev="develop")
>>> fs.find("nlp", detail=False, dvc_only=True)
[]
# use subrepos=True to list those files
>>> fs = DVCFileSystem(url, subrepos=True, rev="develop")
>>> fs.find("nlp", detail=False, dvc_only=True)
['nlp/data/data.xml', 'nlp/data/features/test.pkl', 'nlp/data/features/train.pkl', 'nlp/data/prepared/test.tsv', 'nlp/data/prepared/train.tsv', 'nlp/eval/importance.png', 'nlp/model.pkl']

----------------------------------------

TITLE: Setting AWS Profile for Remote
DESCRIPTION: Example showing how to specify an AWS profile when downloading from an S3 remote.

LANGUAGE: bash
CODE:
$ dvc get https://github.com/iterative/example-get-started-s3 data/prepared --remote-config profile=myprofile

----------------------------------------

TITLE: DVC Data Status with Granular Output
DESCRIPTION: Example showing granular file-level changes using the --granular flag.

LANGUAGE: cli
CODE:
$ dvc data status --granular
Not in cache:
  (use "dvc fetch <file>..." to download files)
        data/data.xml

DVC committed changes:
  (git commit the corresponding dvc files to update the repo)
        added: data/features/foo

DVC uncommitted changes:
  (use "dvc commit <file>..." to track changes)
  (use "dvc checkout <file>..." to discard changes)
        deleted: model.pkl
(there are other changes not tracked by dvc, use "git status" to see)

----------------------------------------

TITLE: Initializing HTTP Remote in DVC
DESCRIPTION: Adds a new HTTP remote storage with a specified URL as the default remote.

LANGUAGE: cli
CODE:
$ dvc remote add -d myremote https://example.com/path

----------------------------------------

TITLE: Pulling DVC Experiment Example
DESCRIPTION: Demonstrates how to list available experiments from a remote and pull them to the local repository.

LANGUAGE: bash
CODE:
$ dvc exp list --all-commits origin
main:
    lurid-air
$ dvc exp pull origin
Pulled experiment 'lurid-lair' from Git remote 'origin'.

----------------------------------------

TITLE: Installing Support Bundle Script for Helm Deployment
DESCRIPTION: Commands to download and make executable the create-support-bundle script for Helm-based DVC Studio deployments.

LANGUAGE: cli
CODE:
$ curl -o create-support-bundle https://raw.githubusercontent.com/iterative/studio-selfhosted/main/packer/create-support-bundle.sh
$ chmod +x create-support-bundle

----------------------------------------

TITLE: Configuring TLS in DVC Studio Values
DESCRIPTION: YAML configuration to enable TLS in DVC Studio by updating the values.yaml file with TLS settings.

LANGUAGE: yaml
CODE:
global:
  ingress:
    tlsEnabled: true
    tlsSecretName: studio-ingress-tls

----------------------------------------

TITLE: Running DVC Experiment with Hydra Config Override
DESCRIPTION: Example of running a DVC experiment with Hydra config override using command-line parameters.

LANGUAGE: cli
CODE:
$ dvc exp run --set-param 'train/model=efficientnet'

----------------------------------------

TITLE: Setting Password for Basic Authentication in WebHDFS
DESCRIPTION: Shows how to set a password for Basic Authentication with WebHDFS in DVC. This must be used in combination with a 'user' and is recommended to be stored in the local config for security.

LANGUAGE: cli
CODE:
$ dvc remote modify --local password "mypassword"

----------------------------------------

TITLE: Configuring GitHub Actions Environment for DVC Studio
DESCRIPTION: YAML configuration for securely providing DVC Studio access token in CI environment using GitHub secrets

LANGUAGE: yaml
CODE:
steps:
  - name: Train model
    env:
      DVC_STUDIO_TOKEN: ${{ secrets.DVC_STUDIO_TOKEN }}

----------------------------------------

TITLE: Configuring Service Principal Authentication
DESCRIPTION: Sets up Azure Active Directory service principal authentication using tenant ID, client ID, and client secret

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote tenant_id 'mytenant'
$ dvc remote modify --local myremote client_id 'myclient'
$ dvc remote modify --local myremote client_secret 'mysecret'

----------------------------------------

TITLE: Saving a DVC Experiment with Custom Name and Untracked Files
DESCRIPTION: Example of using 'dvc exp save' command to save an experiment with a custom name and include untracked files.

LANGUAGE: bash
CODE:
dvc exp save --name extra-trees \
             -I data/new.xml.dvc -I src/extra_trees.py

----------------------------------------

TITLE: Configuring Local Path Download in DVC
DESCRIPTION: Creates a DVC stage to copy a file from a local filesystem path outside the workspace.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d /home/shared/data.txt \
          -o data.txt \
          cp /home/shared/data.txt data.txt

----------------------------------------

TITLE: Enabling Anonymous Access
DESCRIPTION: Enables anonymous read access for public containers

LANGUAGE: cli
CODE:
$ dvc remote modify myremote allow_anonymous_login true

----------------------------------------

TITLE: Creating Kubernetes TLS Secret
DESCRIPTION: Command to create a Kubernetes secret containing the TLS certificate and private key in the studio namespace.

LANGUAGE: cli
CODE:
$ kubectl create secret tls studio-ingress-tls \
      --namespace studio \
      --cert=studio.crt \
      --key=studio.pem

----------------------------------------

TITLE: Creating DVC Studio Support Bundle
DESCRIPTION: Command to execute the support bundle creation script which generates a ZIP file containing application logs.

LANGUAGE: cli
CODE:
$ create-support-bundle

----------------------------------------

TITLE: GitHub Docker Build Workflow
DESCRIPTION: GitHub Actions workflow configuration for building and pushing Docker images when new model versions are registered.

LANGUAGE: yaml
CODE:
on:
  push:
    tags:
      - '*'

jobs:
  act:
    name: Build a Docker image for new model versions
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: actions/checkout@v3
      - id: gto
        uses: iterative/gto-action@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - if: steps.gto.outputs.event == 'registration'
        run: |
          # build docker image and push it to Dockerhub
          ...

----------------------------------------

TITLE: Simple YAML Plot Configuration
DESCRIPTION: Basic plot configuration in dvc.yaml showing the simplest way to define a plot using a CSV file.

LANGUAGE: yaml
CODE:
plots:
  - logs.csv

----------------------------------------

TITLE: Best Model Checkpoint Logging
DESCRIPTION: Configuration for saving the best model checkpoint at the end of training using DVCLive.

LANGUAGE: python
CODE:
os.environ["HF_DVCLIVE_LOG_MODEL"] = "true"

from transformers import TrainingArguments, Trainer

args = TrainingArguments(..., report_to="dvclive")
trainer = Trainer(..., args=args)
trainer.args.load_best_model_at_end = True

----------------------------------------

TITLE: Configuring DVC Studio with GitHub App Credentials in YAML
DESCRIPTION: This YAML configuration snippet demonstrates how to set up DVC Studio with GitHub App credentials. It includes settings for the GitHub provider, app details, and API URLs for self-hosted instances.

LANGUAGE: yaml
CODE:
global:
  scmProviders:
    # Optional
    # This is useful in cases where DVC Studio is on an internal
    # network, but the webhook endpoint is on an external network.
    # Default: `global.host` value.
    #webhookHost: ""

    github:
      enabled: true

      # Set this if you're using the selfhosted version
      url: <GitHub Enterprise URL>
      # Set this if you're using the selfhosted version
      apiUrl: <GitHub Enterprise API URL>

      appName: <GitHub OAuth App Name>
      appId: <GitHub OAuth App ID>
      clientId: <GitHub OAuth App Client ID>
      clientSecret: <GitHub OAuth App Client Secret>
      privateKey: <GitHub OAuth App Private Key>

----------------------------------------

TITLE: Processing XML Data from DVC Repository in Python
DESCRIPTION: Example demonstrating how to use dvc.api.open() to stream and process an XML file from a public DVC repository on GitHub using a SAX parser.

LANGUAGE: python
CODE:
from xml.sax import parse
import dvc.api
from mymodule import mySAXHandler

with dvc.api.open(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry'
) as f:
    parse(f, mySAXHandler)

----------------------------------------

TITLE: Custom Pager Configuration
DESCRIPTION: Shows how to configure a custom pager for the experiment display output using environment variables.

LANGUAGE: cli
CODE:
$ DVC_PAGER=more dvc exp show  # Use more as pager once.
...

$ export DVC_PAGER=more  # Set more as pager for all commands.
$ dvc exp show ...

----------------------------------------

TITLE: Configuring HTTP Download in DVC
DESCRIPTION: Creates a DVC stage to download a file from HTTP/HTTPS using wget.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d https://example.com/data.txt \
          -o data.txt \
          wget https://example.com/data.txt -O data.txt

----------------------------------------

TITLE: Configuring SSH Key Authentication
DESCRIPTION: Commands to set up private key authentication with optional passphrase configuration.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote keyfile /path/to/keyfile
# and (if needed)
$ dvc remote modify myremote ask_passphrase true
# or
$ dvc remote modify --local myremote passphrase mypassphrase

----------------------------------------

TITLE: SSH Connection to EC2 Instance
DESCRIPTION: Command to establish SSH connection to the EC2 instance using the EC2 key pair.

LANGUAGE: cli
CODE:
$ ssh -i <EC2 key pair> ubuntu@$EC2_INSTANCE

----------------------------------------

TITLE: Registering New Version with GTO
DESCRIPTION: This snippet demonstrates how to register a new version of an artifact (cv-class) using the 'gto register' command and view the updated registry status.

LANGUAGE: cli
CODE:
$ gto register cv-class
Created git tag 'cv-class@v0.1.14' that registers version
To push the changes upstream, run:
    git push origin cv-class@v0.1.14

$ gto show
╒══════════╤══════════╤════════╤═════════╤════════════╕
│ name     │ latest   │ #dev   │ #prod   │ #staging   │
╞══════════╪══════════╪════════╪═════════╪════════════╡
│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │
│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │
│ cv-class │ v0.1.14  │ -      │ -       │ -          │
╘══════════╧══════════╧════════╧═════════╧════════════╛

----------------------------------------

TITLE: Setting Permissions for Shared DVC Cache in Bash
DESCRIPTION: Sets appropriate permissions for the shared cache directory and its contents. This ensures that all users in the same group can access and modify the cache.

LANGUAGE: bash
CODE:
$ sudo find /home/shared/dvc-cache -type d -exec chmod 0775 {} \;
$ sudo find /home/shared/dvc-cache -type f -exec chmod 0444 {} \;
$ sudo chown -R myuser:ourgroup /home/shared/dvc-cache/

----------------------------------------

TITLE: Implementing Optuna Callback with DVCLive in Python
DESCRIPTION: This example shows a complete implementation of using DVCLiveCallback with Optuna. It defines an objective function, creates a study, and optimizes it using the DVCLiveCallback.

LANGUAGE: python
CODE:
import optuna

from dvclive.optuna import DVCLiveCallback

def objective(trial):
    x = trial.suggest_float("x", -10, 10)
    return (x - 2) ** 2

study = optuna.create_study()

study.optimize(
    objective, n_trials=7, callbacks=[DVCLiveCallback()])

----------------------------------------

TITLE: Adding Custom CA Certificates in YAML Configuration for DVC Studio
DESCRIPTION: This YAML snippet demonstrates how to add custom CA certificates to the values.yaml configuration file for DVC Studio. It shows the structure for including multiple certificates under the global.customCaCerts list.

LANGUAGE: yaml
CODE:
global:
  customCaCerts:
    # First certificate
    - |-
      -----BEGIN CERTIFICATE-----
      ....
      -----END CERTIFICATE-----
    # Second certificate
    - |-
      -----BEGIN CERTIFICATE-----
      ....
      -----END CERTIFICATE-----

----------------------------------------

TITLE: Setting Custom Pager for DVC Commands in Bash
DESCRIPTION: Demonstrates how to set a custom pager for DVC commands using the DVC_PAGER environment variable.

LANGUAGE: bash
CODE:
$ DVC_PAGER=more dvc exp show  # Use more as pager once.
...

$ export DVC_PAGER=more  # Set more as pager for all commands.
$ dvc exp show ...

----------------------------------------

TITLE: Generating Mermaid Flowchart for DVC Pipeline in Bash
DESCRIPTION: Demonstrates the output of 'dvc dag --mermaid' command, which generates a flowchart in Mermaid format representing the pipeline stages and their connections.

LANGUAGE: bash
CODE:
$ dvc dag --mermaid
flowchart TD
        node1["data/data.xml.dvc"]
        node2["evaluate"]
        node3["featurize"]
        node4["prepare"]
        node5["train"]
        node1-->node4
        node3-->node2
        node3-->node5
        node4-->node3
        node5-->node2

----------------------------------------

TITLE: Configuring HDFS Download in DVC
DESCRIPTION: Creates a DVC stage to download a file from HDFS using hdfs command.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d hdfs://user@example.com/data.txt \
          -o data.txt \
          hdfs fs -copyToLocal \
                  hdfs://user@example.com/data.txt data.txt

----------------------------------------

TITLE: Setting Delegation Token for WebHDFS in DVC
DESCRIPTION: Demonstrates how to set a Hadoop delegation token for authentication with WebHDFS in DVC. This requires Kerberos to be enabled and is incompatible with 'user' and 'proxy_to' parameters.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote token "mysecret"

----------------------------------------

TITLE: Defining Live.make_dvcyaml() Function in Python
DESCRIPTION: Function signature for Live.make_dvcyaml() method, which writes DVC configuration for metrics, plots, and parameters to the Live.dvc_file.

LANGUAGE: python
CODE:
def make_dvcyaml()

----------------------------------------

TITLE: DVC Remote Rename Command Usage Syntax
DESCRIPTION: Command line syntax showing the usage pattern and available arguments for the 'dvc remote rename' command. Includes positional arguments for old and new remote names.

LANGUAGE: usage
CODE:
usage: dvc remote rename [-h]
                         [--global | --system | --project | --local]
                         [-q | -v]
                         name new

positional arguments:
  name           Remote to be renamed
  new            New name of the remote

----------------------------------------

TITLE: Installing DVClive with Tensorflow Support
DESCRIPTION: Installation of DVClive with Tensorflow integration support. This command installs both DVClive and the tensorflow library as a dependency.

LANGUAGE: cli
CODE:
$ pip install "dvclive[tf]"

----------------------------------------

TITLE: Implementing Data Drift Evaluation
DESCRIPTION: Function to calculate data drift metrics using Evidently's DataDriftPreset and generate drift scores for each feature.

LANGUAGE: python
CODE:
from evidently.report import Report
from evidently.metric_preset import DataDriftPreset


def eval_drift(reference, production, column_mapping):
    data_drift_report = Report(metrics=[DataDriftPreset()])
    data_drift_report.run(
        reference_data=reference, current_data=production, column_mapping=column_mapping
    )
    report = data_drift_report.as_dict()

    drifts = []

    for feature in (
        column_mapping.numerical_features + column_mapping.categorical_features
    ):
        drifts.append(
            (
                feature,
                report["metrics"][1]["result"]["drift_by_columns"][feature][
                    "drift_score"
                ],
            )
        )

    return drifts

----------------------------------------

TITLE: Ending DVCLive Tracking with Hugging Face Accelerate in Python
DESCRIPTION: This snippet shows how to end the experiment and trigger the Live.end() method using Hugging Face Accelerate.

LANGUAGE: python
CODE:
accelerator.end_training()

----------------------------------------

TITLE: Applying SSL Certificate Changes with Helm CLI for DVC Studio
DESCRIPTION: This CLI command upgrades the DVC Studio installation using Helm, applying the changes made to the values.yaml file, including the newly added SSL certificate.

LANGUAGE: cli
CODE:
helm upgrade studio iterative/studio --namespace studio -f values.yaml

----------------------------------------

TITLE: Demonstrating DVC Command Completion in CLI
DESCRIPTION: This snippet shows how DVC command completion works in the command-line interface. It demonstrates the auto-completion of DVC commands when pressing the tab key.

LANGUAGE: cli
CODE:
$ dvc r<tab>
Completing dvc commands
remote  -- Set up and manage data remotes.
remove  -- Remove stages or .dvc files, unprotect their outputs, ...
repro   -- Reproduce complete or partial pipelines by executing ...
root    -- Return the relative path to the root of the DVC project.
run     -- Generate a stage file from a command and execute the command

----------------------------------------

TITLE: Retrieving Current DVC Cache Directory
DESCRIPTION: Shows how to get the current cache directory location using the 'dvc cache dir' command without arguments.

LANGUAGE: bash
CODE:
$ dvc cache dir
/home/user/dvc/.dvc/cache

----------------------------------------

TITLE: Configuring SSH Download in DVC
DESCRIPTION: Creates a DVC stage to download a file via SSH using scp command.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d ssh://user@example.com/path/to/data.txt \
          -o data.txt \
          scp user@example.com:/path/to/data.txt data.txt

----------------------------------------

TITLE: Modifying HDFS Remote URL in DVC CLI
DESCRIPTION: Shows how to modify the URL of an existing HDFS remote storage in DVC. This command updates the URL for the remote named 'myremote'.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote url hdfs://user@example.com/path

----------------------------------------

TITLE: GitHub Model Deployment Workflow
DESCRIPTION: GitHub Actions workflow configuration for deploying models to Heroku upon stage assignment.

LANGUAGE: yaml
CODE:
on:
  push:
    tags:
      - '*'

env:
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  act:
    name: Deploy a model upon stage assignment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: gto
        uses: iterative/gto-action@v2
      - uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      - if: steps.gto.outputs.event == 'assignment'
        run: |
          # deploy your model here
          ...

----------------------------------------

TITLE: DVC Experiment Rename Command Synopsis
DESCRIPTION: Command line usage syntax for the DVC experiment rename command, showing all available arguments and options.

LANGUAGE: cli
CODE:
usage: dvc exp rename [-h] [-q | -v]
                      [-g <git_remote>]
                      [--force]
                      [experiment] [name]

----------------------------------------

TITLE: Configuring Git in SageMaker Environment
DESCRIPTION: Basic Git configuration commands to set up user name and email in SageMaker environment.

LANGUAGE: bash
CODE:
git config --global user.name ...
git config --global user.email ...

----------------------------------------

TITLE: DVCLive Report Generation Example
DESCRIPTION: Example showing how to initialize DVCLive, log a sklearn confusion matrix plot, and generate a report. Demonstrates typical usage pattern of the make_report() function.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()
live.log_sklearn_plot("confusion_matrix", [0, 0, 1, 1], [1, 0, 0, 1])
live.make_report()

----------------------------------------

TITLE: Connecting to EC2 Instance via SSH
DESCRIPTION: Command to establish an SSH connection to the EC2 instance where DVC Studio is deployed.

LANGUAGE: cli
CODE:
$ ssh ubuntu@my-ec2-instance

----------------------------------------

TITLE: Custom Profile and Credentials Configuration
DESCRIPTION: Demonstrates how to set up custom profiles and credential file locations for Google Drive remotes.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote profile myprofile
$ dvc remote modify myremote --local \
      gdrive_user_credentials_file ~/.gdrive/myremote-credentials.json

----------------------------------------

TITLE: Defining a DVC Stage in YAML
DESCRIPTION: Shows an example of a 'train' stage definition in a dvc.yaml file, including command, dependencies, and outputs.

LANGUAGE: yaml
CODE:
train:
  cmd: python train.py data.csv
  deps:
    - data.csv
    - train.py
  outs:
    - model

----------------------------------------

TITLE: Setting Azure SAS Token Authentication
DESCRIPTION: Configures Azure authentication using a shared access signature token

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote sas_token 'mysecret'

----------------------------------------

TITLE: Configuring OSS Remote Parameters in DVC CLI
DESCRIPTION: These commands illustrate how to modify various parameters for an OSS remote in DVC, including the URL, endpoint, key ID, and secret. The --local flag is used for sensitive information to prevent it from being committed to Git.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote url oss://mybucket/path
$ dvc remote modify myremote oss_endpoint endpoint
$ dvc remote modify --local myremote oss_key_id 'mykey'
$ dvc remote modify --local myremote oss_key_secret 'mysecret'

----------------------------------------

TITLE: Template Modification Example
DESCRIPTION: Git diff showing how to modify a template from line to bar chart type in the Vega-Lite specification.

LANGUAGE: git
CODE:
 {
   "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
   ...
   "mark": {
-    "type": "line"
+    "type": "bar"
   },
   "encoding": { ...
   ...
 }

----------------------------------------

TITLE: Transferring Existing DVC Cache in Bash
DESCRIPTION: Moves the contents of the existing local DVC cache to the new shared cache directory. This command assumes the current directory is the root of a DVC project.

LANGUAGE: bash
CODE:
$ mv .dvc/cache/* /home/shared/dvc-cache

----------------------------------------

TITLE: Displaying GTO Show Command Usage
DESCRIPTION: Shows the usage syntax for the 'gto show' command, including available options and arguments.

LANGUAGE: cli
CODE:
usage: gto show [-r <text>] [-a] [-A] [--json] [--plain]
                [--name] [--version] [--stage] [--ref]
                [--ro] [--av <integer>] [--vs <integer>]
                [--sort <text>] [-h]
                [name]

arguments:
  [name]           Artifact name to show. If empty, show registry

----------------------------------------

TITLE: Debugging DVC Stages with Verbose Output
DESCRIPTION: Example of using 'dvc repro -vv' or 'dvc exp run -vv' to get detailed debug information, including interpolated values from advanced features like templating or Hydra composition.

LANGUAGE: cli
CODE:
2023-05-18 07:38:43,955 TRACE: Hydra composition enabled.
Contents dumped to params.yaml: {'model': {'batch_size':
512, 'latent_dim': 8, 'lr': 0.01, 'duration': '00:00:30:00',
'max_epochs': 2}, 'data_path': 'fra.txt', 'num_samples':
100000, 'seed': 423}
2023-05-18 07:38:44,027 TRACE: Context during resolution of
stage download: {'model': {'batch_size': 512, 'latent_dim':
8, 'lr': 0.01, 'duration': '00:00:30:00', 'max_epochs': 2},
'data_path': 'fra.txt', 'num_samples': 100000, 'seed': 423}
2023-05-18 07:38:44,073 TRACE: Context during resolution of
stage train: {'model': {'batch_size': 512, 'latent_dim': 8,
'lr': 0.01, 'duration': '00:00:30:00', 'max_epochs': 2},
'data_path': 'fra.txt', 'num_samples': 100000, 'seed': 423}

----------------------------------------

TITLE: Generating Calibration Plot in Python
DESCRIPTION: Example of using log_sklearn_plot to generate a calibration curve plot.

LANGUAGE: python
CODE:
y_true = [0, 0, 1, 1]
y_score = [0.1, 0.4, 0.35, 0.8]
live.log_sklearn_plot("calibration", y_true, y_score)

----------------------------------------

TITLE: Downloading DVC Studio Helm Chart
DESCRIPTION: Commands to update and pull the latest Helm chart for DVC Studio from the Iterative repository.

LANGUAGE: cli
CODE:
$ helm repo update
$ helm pull iterative/studio

----------------------------------------

TITLE: Filter by Stage Name - DVC Params Show
DESCRIPTION: Examples of filtering parameters by single or multiple stage names.

LANGUAGE: python
CODE:
import dvc.api
params = dvc.api.params_show(stages="train")

LANGUAGE: python
CODE:
import dvc.api
params = dvc.api.params_show(stages=["featurize", "train"])

----------------------------------------

TITLE: Removing a DVC Remote
DESCRIPTION: Shows how to remove a configured remote storage location using the 'dvc remote remove' command.

LANGUAGE: bash
CODE:
$ dvc remote remove oldremote

----------------------------------------

TITLE: Legacy DVCLive Callback Import
DESCRIPTION: Shows how to import DVCLive callback for older versions of Transformers (< 4.36.0).

LANGUAGE: python
CODE:
from dvclive.huggingface import DVCLiveCallback

...

trainer = Trainer(...)
trainer.add_callback(DVCLiveCallback())
trainer.train()

----------------------------------------

TITLE: File Generation Example - Line Endings in Python
DESCRIPTION: Example showing explicit line ending handling in Python pipeline stages. Code should specify Unix-style \n or Windows-style \r\n line endings instead of using platform-default os.linesep.

LANGUAGE: shell
CODE:
dvc cache migrate

LANGUAGE: shell
CODE:
dvc cache migrate --dvc-files

LANGUAGE: shell
CODE:
dvc gc -c

----------------------------------------

TITLE: Providing Remote Credentials in DVC API Open Function
DESCRIPTION: Example demonstrating how to provide credentials for remote storage access using the 'remote_config' parameter in dvc.api.open().

LANGUAGE: python
CODE:
import dvc.api

remote_config = {
    'access_key_id': 'mykey',
    'secret_access_key': 'mysecretkey',
    'session_token': 'mytoken',
}

with dvc.api.open('data', remote_config=remote_config) as f:
    # ... Process data

----------------------------------------

TITLE: Example Usage of GTO Check-Ref Command
DESCRIPTION: Demonstrates how to use the 'gto check-ref' command to interpret a Git tag, showing the output for a specific artifact version and stage.

LANGUAGE: cli
CODE:
$ gto check-ref -r build/example-gto churn#prod#3
✅  Stage "prod" was assigned to version "v3.0.0" of artifact "churn"

----------------------------------------

TITLE: Displaying DVC Cache Directory Structure
DESCRIPTION: Shows the resulting cache directory structure after adding image files to DVC tracking.

LANGUAGE: bash
CODE:
.dvc/cache/
└── files
    └── md5
        ├── 40
        │   └── 2e97968614f583ece3b35555971f64
        ├── 6f
        │   └── db5336fce0dbfd669f83065f107551.dir
        └── de
            └── 7371b0119f4f75f9de703c7c3bac16

----------------------------------------

TITLE: Filtering Non-GTO Git Tags
DESCRIPTION: Command to list manually created Git tags by filtering out GTO-generated tags using unix commands.

LANGUAGE: cli
CODE:
comm -2 -3 <(sort <<< $(git tag)) <(sort <<< $(gto history --json | jq -r '.[].ref'))

----------------------------------------

TITLE: Extracting Studio Version from Chart
DESCRIPTION: Command to extract the DVC Studio application version from the Helm chart metadata.

LANGUAGE: cli
CODE:
$ export STUDIO_VERSION=$(tar zxf studio-0.7.0.tgz -O studio/Chart.yaml | grep -Po '(?<=appVersion: )v[\d.]+')

----------------------------------------

TITLE: Switching to Previous Version
DESCRIPTION: Use Git and DVC to switch back to the first version of the project.

LANGUAGE: bash
CODE:
$ git checkout v1.0
$ dvc checkout

----------------------------------------

TITLE: Usage Syntax for DVC Studio Logout Command
DESCRIPTION: This code snippet shows the usage syntax for the 'dvc studio logout' command. It includes optional arguments for help, quiet mode, and verbose mode.

LANGUAGE: plaintext
CODE:
usage: dvc studio logout [-h] [-q | -v]

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Demonstrates how to import and use the SCM utility functions to retrieve branches, commits, and tags from a DVC repository.

LANGUAGE: python
CODE:
import dvc.api

branches = dvc.api.scm.all_branches()
commits = dvc.api.scm.all_commits()
tags = dvc.api.scm.all_tags()

----------------------------------------

TITLE: Viewing DVC Run Cache Structure
DESCRIPTION: Displays the structure of DVC's run cache directory which stores execution records.

LANGUAGE: bash
CODE:
$ tree .dvc/cache/runs
.dvc/cache/runs
└── 86
    └── 8632e1555283d6e23ec808c9ee1fadc30630c888d5c08695333609ef341508bf
        └── e98a34c44fa6b564ef211e76fb3b265bc67f19e5de2e255217d3900d8f...

----------------------------------------

TITLE: Adding File to DVC Tracking
DESCRIPTION: Shows the process of adding a file to DVC tracking, including the before and after file states.

LANGUAGE: cli
CODE:
$ ls -lh
-rw-r--r--  1 10576022 Nov 27 13:30 Posts.xml.zip

$ dvc add Posts.xml.zip

----------------------------------------

TITLE: Increasing Open File Descriptors Limit on UNIX-like Systems
DESCRIPTION: Command to increase the open file descriptors limit to 1024 on UNIX-like systems, which can help resolve 'Too many open files' errors.

LANGUAGE: bash
CODE:
ulimit -n 1024

----------------------------------------

TITLE: Hierarchical JSON Data for Plotting
DESCRIPTION: Example of hierarchical JSON data structure used for generating plots with DVC.

LANGUAGE: json
CODE:
{
  "train": [
    { "accuracy": 0.96658, "loss": 0.10757 },
    { "accuracy": 0.97641, "loss": 0.07324 },
    { "accuracy": 0.87707, "loss": 0.08136 },
    { "accuracy": 0.87402, "loss": 0.09026 },
    { "accuracy": 0.8795, "loss": 0.0764 },
    { "accuracy": 0.88038, "loss": 0.07608 },
    { "accuracy": 0.89872, "loss": 0.08455 }
  ]
}

----------------------------------------

TITLE: Displaying DVC Unfreeze Command Usage
DESCRIPTION: Shows the usage syntax for the 'dvc unfreeze' command, including its arguments and options.

LANGUAGE: bash
CODE:
usage: dvc unfreeze [-h] [-q | -v] targets [targets ...]

----------------------------------------

TITLE: Function Definition - DVC Get URL
DESCRIPTION: Function signature that returns a URL string for accessing DVC-tracked resources. Takes path, repo, revision, remote and config parameters.

LANGUAGE: python
CODE:
def get_url(path: str,
            repo: str = None,
            rev: str = None,
            remote: str = None,
            remote_config: dict = None,
            config: dict = None) -> str

----------------------------------------

TITLE: Defining log_param Method - Python
DESCRIPTION: Method signature for logging a single parameter with DVCLive. Takes a parameter name and value as arguments.

LANGUAGE: python
CODE:
def log_param(name: str, val: ParamLike):

----------------------------------------

TITLE: Configuring Matrix Pipeline Stages
DESCRIPTION: Example demonstrating how to define multiple stages using matrix combinations of variables

LANGUAGE: yaml
CODE:
stages:
  train:
    matrix:
      model: [cnn, xgb]
      feature: [feature1, feature2, feature3]
    cmd: ./train.py --feature ${item.feature} ${item.model}
    outs:
      - ${key}.pkl

----------------------------------------

TITLE: Using DVC Remote Modify Command (Bash)
DESCRIPTION: Demonstrates the usage syntax for the 'dvc remote modify' command, including required and optional arguments.

LANGUAGE: bash
CODE:
usage: dvc remote modify [-h] [--global | --system | --project | --local]
                         [-q | -v] [-u]
                         name option [value]

----------------------------------------

TITLE: DVC Metadata Configuration
DESCRIPTION: YAML configuration example showing how to add metadata to DVC artifacts including type, description and labels.

LANGUAGE: yaml
CODE:
# dvc.yaml
artifacts:
  get-started-data:
    path: get-started/data.xml.dvc
    type: data
    desc: 'Stack Overflow questions'
    labels:
      - nlp
      - classification

----------------------------------------

TITLE: Pushing GTO Tags to Remote Repository
DESCRIPTION: This snippet demonstrates how to push GTO-created Git tags to a remote repository to trigger CI/CD workflows.

LANGUAGE: cli
CODE:
$ git push origin cv-class@v0.1.14
* [new tag]         cv-class@v0.1.14 -> cv-class@v0.1.14

----------------------------------------

TITLE: Recursively Listing Data Registry Contents with DVC List in Bash
DESCRIPTION: Shows how to use the 'dvc list' command with the -R option to recursively list all files in a data registry.

LANGUAGE: bash
CODE:
$ dvc list -R https://github.com/iterative/dataset-registry
.gitignore
README.md
get-started/.gitignore
get-started/data.xml
get-started/data.xml.dvc
images/.gitignore
images/dvc-logo-outlines.png
images/dvc-logo-outlines.png.dvc
images/owl_sticker.png
...

----------------------------------------

TITLE: Project Setup Commands
DESCRIPTION: Commands to set up the example project by cloning and fetching data.

LANGUAGE: shell
CODE:
$ git clone https://github.com/iterative/example-get-started
$ cd example-get-started

LANGUAGE: shell
CODE:
$ dvc fetch -T

----------------------------------------

TITLE: Integration with DVC Experiments
DESCRIPTION: Shows how to combine SCM utilities with DVC experiment functionality by passing tag information to exp_show(). This example demonstrates practical usage in a data science workflow.

LANGUAGE: python
CODE:
import dvc.api
import pandas as pd

all_tags = dvc.api.scm.all_tags()
exps = dvc.api.exp_show(revs=all_tags)

----------------------------------------

TITLE: Displaying Multiple Versions in Same Stage with GTO Show
DESCRIPTION: Shows how to use the '--vs' option with 'gto show' to display multiple versions assigned to the same stage, which is useful for certain workflows.

LANGUAGE: cli
CODE:
$ gto show churn --vs -1
╒════════════╤═══════════╤══════════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage        │ created_at          │ ref          │
╞════════════╪═══════════╪══════════════╪═════════════════════╪══════════════╡
│ churn      │ v3.1.0    │ dev, staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │
│ churn      │ v3.0.0    │ dev, prod    │ 2022-08-24 01:52:10 │ churn@v3.0.0 │
╘════════════╧═══════════╧══════════════╧═════════════════════╧══════════════╛

----------------------------------------

TITLE: Handling Ignored File Movements in DVC
DESCRIPTION: Demonstrates how DVC responds when an ignored file is moved to a tracked location within the project.

LANGUAGE: bash
CODE:
$ mkdir data
$ echo data1 >> data/data1
$ echo data2 >> data/data2
$ tree .

.
└── data
    ├── data1
    └── data2

$ echo data/data1 >> .dvcignore
$ cat .dvcignore

data/data1

$ dvc add data

$ dvc status
Data and pipelines are up to date.

$ mv data/data1 data/data3
$ dvc status
data.dvc:
	changed outs:
		modified:           data

----------------------------------------

TITLE: Checking Protected File Status
DESCRIPTION: Displays how to verify that a file is protected (read-only link) after being tracked by DVC.

LANGUAGE: cli
CODE:
$ ls -lh
-r--r--r--@ 1 10576022 Apr 25  2017 Posts.xml.zip
-rw-r--r--  1      120 Nov 27 13:29 Posts.xml.zip.dvc

----------------------------------------

TITLE: Python Integration with DVC
DESCRIPTION: Example showing how to use DVC's Python API to load data directly from external DVC projects.

LANGUAGE: python
CODE:
import dvc.api

model_path = 'model.pkl'
repo_url = 'https://github.com/example/registry'

with dvc.api.open(model_path, repo_url) as f:
    model = pickle.load(f)
    # ... Use the model!

----------------------------------------

TITLE: DVC Init Command Synopsis
DESCRIPTION: The usage syntax for the 'dvc init' command, showing available options.

LANGUAGE: bash
CODE:
usage: dvc init [-h] [-q | -v] [--no-scm] [-f] [--subdir]

----------------------------------------

TITLE: Git Revision Function Definitions
DESCRIPTION: Core function definitions for retrieving Git revision information from a DVC repository. Each function accepts an optional repo parameter to specify the repository location.

LANGUAGE: python
CODE:
def all_branches(repo: Optional[str] = None) -> List[str]:

def all_commits(repo: Optional[str] = None) -> List[str]:

def all_tags(repo: Optional[str] = None) -> List[str]:

----------------------------------------

TITLE: Database Connection Configuration
DESCRIPTION: Example of configuring database connection settings in DVC, including URL and password configuration.

LANGUAGE: dvc
CODE:
$ dvc config db.pgsql.url postgresql://user@hostname:port/database
$ dvc config --local db.pgsql.password password

----------------------------------------

TITLE: Logging Images
DESCRIPTION: Log image data using numpy arrays.

LANGUAGE: python
CODE:
img = np.ones((500, 500, 3), np.uint8)
live.log_image("image.png", img)

----------------------------------------

TITLE: Configuring Azure Blob Storage Download in DVC
DESCRIPTION: Creates a DVC stage to download a file from Azure Blob Storage using the Azure CLI.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d azure://mycontainer/data.txt \
          -o data.txt \
          az storage copy \
                     -d data.json \
                     --source-account-name my-account \
                     --source-container mycontainer \
                     --source-blob data.txt

----------------------------------------

TITLE: Installing DVC Studio Helm Chart
DESCRIPTION: Deploys DVC Studio using Helm with the specified configuration values.

LANGUAGE: cli
CODE:
$ helm install studio iterative/studio \
    --namespace studio \
    -f values.yaml

----------------------------------------

TITLE: Automating Model Training with DVC Pipelines
DESCRIPTION: Create a DVC pipeline stage for the model training process.

LANGUAGE: bash
CODE:
$ dvc stage add -n train -d train.py -d data \
          -o model.weights.h5 -o bottleneck_features_train.npy \
          -o bottleneck_features_validation.npy -M metrics.csv \
          python train.py
$ dvc repro

----------------------------------------

TITLE: Using GTO Show Shortcuts for Specific Versions and Stages
DESCRIPTION: Demonstrates how to use 'gto show' shortcuts to display the greatest version of an artifact or the version in a specific stage.

LANGUAGE: cli
CODE:
$ gto show churn@greatest
╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage   │ created_at          │ ref          │
╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡
│ churn      │ v3.1.1    │ dev     │ 2022-11-09 13:40:33 │ churn@v3.1.1 │
╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛

$ gto show churn#prod
╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage   │ created_at          │ ref          │
╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡
│ churn      │ v3.0.0    │ prod    │ 2022-10-28 23:53:53 │ churn@v3.0.0 │
╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛

$ gto show churn@v3.0.0
╒════════════╤═══════════╤═════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage   │ created_at          │ ref          │
╞════════════╪═══════════╪═════════╪═════════════════════╪══════════════╡
│ churn      │ v3.0.0    │ prod    │ 2022-10-28 23:53:53 │ churn@v3.0.0 │
╘════════════╧═══════════╧═════════╧═════════════════════╧══════════════╛

----------------------------------------

TITLE: Viewing DVC .gitignore Contents
DESCRIPTION: Displays the contents of the .dvc/.gitignore file, showing which directories are not tracked by Git.

LANGUAGE: bash
CODE:
$ cat .dvc/.gitignore
/config.local
/tmp
/cache

----------------------------------------

TITLE: Setting OSS Environment Variables for DVC
DESCRIPTION: This snippet demonstrates how to set environment variables for configuring OSS remotes in DVC. These variables are used if no other configuration parameters are set, providing an alternative method for OSS authentication and endpoint specification.

LANGUAGE: cli
CODE:
$ export OSS_ACCESS_KEY_ID='mykey'
$ export OSS_ACCESS_KEY_SECRET='mysecret'
$ export OSS_ENDPOINT='endpoint'

----------------------------------------

TITLE: Table Import Example
DESCRIPTION: Example of importing a table from a PostgreSQL database using DVC import-db command.

LANGUAGE: dvc
CODE:
$ dvc import-db --table "customers_table" --conn pgsql
...

----------------------------------------

TITLE: Listing DVC Experiments
DESCRIPTION: Demonstrates how to list existing experiments using the 'dvc exp list' command.

LANGUAGE: bash
CODE:
$ dvc exp list
master:
        major-mela
        conic-ease
        lucid-lair

----------------------------------------

TITLE: XGBoost Pipeline Preparation Stage
DESCRIPTION: DVC pipeline stage definition for data preparation including downloading and preprocessing data with external S3 dependencies.

LANGUAGE: yaml
CODE:
prepare:
  cmd:
    - wget
      https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip
      -O bank-additional.zip
    - python sm_prepare.py --bucket ${bucket} --prefix ${prefix}
  deps:
    - sm_prepare.py
    - https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip
  outs:
    - s3://${bucket}/${prefix}/input_data:
        cache: false

----------------------------------------

TITLE: Enabling Hardlink Lock for Network Filesystems in DVC
DESCRIPTION: DVC configuration command to enable hardlink locking, which can resolve 'Unable to acquire lock' errors when using DVC on network filesystems like NFS or Lustre.

LANGUAGE: bash
CODE:
dvc config core.hardlink_lock true

----------------------------------------

TITLE: Training First Model Version
DESCRIPTION: Train the first model using the initial dataset and track the model file with DVC.

LANGUAGE: bash
CODE:
$ python train.py
$ dvc add model.weights.h5

----------------------------------------

TITLE: Assigning Stage at Specific Git Reference
DESCRIPTION: Example of assigning the 'prod' stage to the 'nn' artifact at a specific Git reference 'abcd123'. This also registers a version if it doesn't exist.

LANGUAGE: cli
CODE:
$ gto assign nn abcd123 --stage prod

----------------------------------------

TITLE: Visualizing DVC Pipeline Stages in Bash
DESCRIPTION: Displays the output of 'dvc dag' command, showing a graph of pipeline stages including prepare, featurize, train, and evaluate.

LANGUAGE: bash
CODE:
$ dvc dag
         +---------+
         | prepare |
         +---------+
              *
              *
              *
        +-----------+
        | featurize |
        +-----------+
         **        **
       **            *
      *               **
+-------+               *
| train |             **
+-------+            *
         **        **
           **    **
             *  *
        +----------+
        | evaluate |
        +----------+

----------------------------------------

TITLE: Python Parameters File Example
DESCRIPTION: Example of a Python file used for DVC parameter definitions, showing supported variable types and class-based parameters.

LANGUAGE: python
CODE:
# All standard variable types are supported.
BOOL = True
INT = 5
FLOAT = 0.001
STR = 'abc'
DICT = {'a': 1, 'b': 2}
LIST = [1, 2, 3]
SET = {4, 5, 6}
TUPLE = (10, 100)
NONE = None
UNARY_OP = -1

# Complex expressions will be ignored.
DICT_EXP = dict(a=1, b=2)

# DVC can retrieve class constants and variables defined in __init__
class TrainConfig:

    EPOCHS = 70

    def __init__(self):
        self.layers = 5
        self.layers = 9  # TrainConfig.layers param will be 9
        self.sum = 1 + 2  # Will NOT be found due to the expression
        bar = 3  # Will NOT be found since it's locally scoped


class TestConfig:

    TEST_DIR = 'path'
    METRICS = ['metric']

----------------------------------------

TITLE: Using DVC Python API in Databricks
DESCRIPTION: Demonstrates how to use the DVC Python API to open a file from a remote DVC project.

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry',
) as fobj:
    ...

----------------------------------------

TITLE: Custom Live Instance with XGBoost
DESCRIPTION: Advanced example showing how to use a custom Live instance with XGBoost callback. This allows for additional metric logging after training and custom directory specification.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.xgb import DVCLiveCallback

...

with Live("custom_dir") as live:
    model = xgb.XGBClassifier(
        n_estimators=100,
        early_stopping_rounds=5,
        eval_metric=["merror", "mlogloss"],
        callbacks=[DVCLiveCallback()]
    )

    model.fit(
        X_train,
        y_train,
        eval_set=[(X_test, y_test)]
    )

    # Log additional metrics after training
    live.log_metric("summary_metric", 1.0, plot=False)

----------------------------------------

TITLE: Importing Model from Hugging Face Hub to DVC Project
DESCRIPTION: Example of using dvc import to add a Stable Diffusion model file to a DVC project from Hugging Face Hub.

LANGUAGE: cli
CODE:
$ dvc import https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0 sd_xl_base_1.0.safetensors

----------------------------------------

TITLE: DVC Studio Helm Installation
DESCRIPTION: Command to install DVC Studio using Helm with the specified configuration values.

LANGUAGE: cli
CODE:
ubuntu@ami:~$ helm install --wait studio iterative/studio --namespace studio -f values.yaml

----------------------------------------

TITLE: Cloning the Example Repository
DESCRIPTION: Clone the example repository and set up the project directory.

LANGUAGE: bash
CODE:
$ git clone https://github.com/iterative/example-versioning.git
$ cd example-versioning

----------------------------------------

TITLE: Remote Repository Usage - DVC Params Show
DESCRIPTION: Example of retrieving parameters from a remote DVC repository.

LANGUAGE: python
CODE:
import dvc.api
params = dvc.api.params_show(
    repo="https://github.com/iterative/example-get-started")

----------------------------------------

TITLE: Pre-commit Installation Command
DESCRIPTION: Command to install multiple Git hooks using the pre-commit tool.

LANGUAGE: cli
CODE:
$ pre-commit install --hook-type pre-push --hook-type post-checkout --hook-type pre-commit

----------------------------------------

TITLE: Configuring DVC Remote with SSH
DESCRIPTION: Example of setting up a DVC remote with SSH authentication and using it in a stage definition.

LANGUAGE: cli
CODE:
$ dvc remote add myssh ssh://user@example.com
$ dvc remote modify --local myssh password 'mypassword'

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d remote://myssh/path/to/data.txt \
          -o data.txt \
          wget https://example.com/data.txt -O data.txt

----------------------------------------

TITLE: Upgrading DVC Studio Installation
DESCRIPTION: Command to upgrade DVC Studio using Helm with custom values configuration.

LANGUAGE: cli
CODE:
$ helm upgrade studio studio --namespace studio --values values.yaml

----------------------------------------

TITLE: Importing Version-Aware External Data in DVC
DESCRIPTION: Demonstrates importing version-aware external data from a cloud provider without downloading, using the --no-download and --version-aware flags.

LANGUAGE: cli
CODE:
$ dvc import-url --no-download --version-aware s3://myversionedbucket/data.xml
Importing 's3://myversionedbucket/data.xml' -> 'data.xml'

$ ls
data.xml.dvc

$ dvc push
Everything is up to date.

----------------------------------------

TITLE: Configuring Evidently Column Mapping
DESCRIPTION: Defining column mappings for categorical and numerical features to ensure correct statistical testing.

LANGUAGE: python
CODE:
from evidently.pipeline.column_mapping import ColumnMapping

data_columns = ColumnMapping()
data_columns.numerical_features = ['weathersit', 'temp', 'atemp', 'hum', 'windspeed']
data_columns.categorical_features = ['holiday', 'workingday']

----------------------------------------

TITLE: Installing DVC with S3 Support (Bash)
DESCRIPTION: Shows how to install DVC with optional dependencies for S3 support using pip.

LANGUAGE: bash
CODE:
$ pip install "dvc[s3]"

----------------------------------------

TITLE: Generated Parameters File - YAML
DESCRIPTION: Example of the resulting YAML file content after logging parameters, showing how parameters are stored in params.yaml.

LANGUAGE: yaml
CODE:
lr: 1e-3
n_iter: 50

----------------------------------------

TITLE: Specifying Remote Storage in DVC API Open Function
DESCRIPTION: Example showing how to use the 'remote' parameter in dvc.api.open() to choose a specific remote storage as the data source.

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open('activity.log', remote='my-s3-bucket') as f:
    for line in f:
        match = re.search(r'user=(\w+)', line)
        # ... Process users activity log

----------------------------------------

TITLE: Modifying a Dependency and Freezing a Stage
DESCRIPTION: Shows how to modify a file that a stage depends on, freeze the stage, and check the project status using 'dvc status'.

LANGUAGE: bash
CODE:
$ echo zoo > foo
$ dvc freeze make_copy
$ dvc status
foo.dvc:
	changed outs:
		modified:           foo

----------------------------------------

TITLE: Windows Authentication Exclusion Parameters
DESCRIPTION: Configuration commands for Windows users to exclude specific authentication methods

LANGUAGE: cli
CODE:
$ dvc remote modify --system myremote \
             exclude_environment_credential true
$ dvc remote modify --system myremote \
             exclude_visual_studio_code_credential true
$ dvc remote modify --system myremote \
             exclude_shared_token_cache_credential true
$ dvc remote modify --system myremote \
             exclude_managed_identity_credential true

----------------------------------------

TITLE: Configuring DVC Studio GitLab Integration in YAML
DESCRIPTION: YAML configuration for setting up GitLab integration with DVC Studio. Includes settings for webhook host, GitLab URL, OAuth credentials, and webhook secret.

LANGUAGE: yaml
CODE:
global:
  scmProviders:
    #webhookHost: ""
    gitlab:
      enabled: true
      url: <GitLab URL>
      clientId: <GitLab OAuth App Client ID>
      secretKey: <GitLab OAuth App Secret Key>
      webhookSecret: <GitLab Webhook Secret>

----------------------------------------

TITLE: CLI Usage - Parameter Diff
DESCRIPTION: Command to view parameter differences using DVC CLI.

LANGUAGE: cli
CODE:
dvc params diff dvclive/params.yaml

----------------------------------------

TITLE: Configuring DVC for Databricks Repos
DESCRIPTION: Sets up DVC to work without SCM integration, which is necessary for Databricks Repos.

LANGUAGE: bash
CODE:
!dvc config core.no_scm true --local

----------------------------------------

TITLE: Defining DVC Studio Command Usage in Markdown
DESCRIPTION: This snippet defines the usage syntax for the 'dvc studio' command, including its subcommands and options. It specifies the available subcommands (login, logout, token) and general options for help, quiet mode, and verbose output.

LANGUAGE: usage
CODE:
usage: dvc studio [-h] [-q | -v] {login,logout,token} ...

positional arguments:
  COMMAND
    login               Authenticate DVC with Studio host.
    logout              Logout user from Studio.
    token               View the token DVC uses to contact Studio.

----------------------------------------

TITLE: Function Definition - Python
DESCRIPTION: Function signature for log_params method that accepts a dictionary of parameters.

LANGUAGE: python
CODE:
def log_params(params: Dict[ParamLike]):

----------------------------------------

TITLE: Using dvc.api.artifacts_show() in Python
DESCRIPTION: Basic usage example of the artifacts_show() function to retrieve information about a 'text-classification' artifact from a GitHub repository.

LANGUAGE: python
CODE:
import dvc.api

artifact = dvc.api.artifacts_show(
    'text-classification',
    repo='https://github.com/iterative/example-get-started.git',
)

----------------------------------------

TITLE: DVC Experiments Command Usage in Bash
DESCRIPTION: Displays the usage syntax for the 'dvc exp' command and its subcommands. It shows the available options and positional arguments for managing experiments in a DVC project.

LANGUAGE: bash
CODE:
usage: dvc exp [-h] [-q | -v]
          {show,apply,diff,run,branch,list,push,pull,remove,clean}
          ...

positional arguments:
  COMMAND
    show                Print experiments.
    run                 Run or resume an experiment.
    apply               Apply the changes from an experiment to your workspace.
    branch              Promote an experiment to a Git branch.
    clean               Cleanup experiments temporary internal files.
    diff                Show changes between experiments.
    list                List local and remote experiments.
    pull                Pull an experiment from a Git remote.
    push                Push a local experiment to a Git remote.
    remove              Remove experiments.
    save                Save current workspace as an experiment.

----------------------------------------

TITLE: Committing Second Version
DESCRIPTION: Commit the second version of the dataset and model to Git.

LANGUAGE: bash
CODE:
$ git add data.dvc model.weights.h5.dvc metrics.csv
$ git commit -m "Second model, trained with 2000 images"
$ git tag -a "v2.0" -m "model v2.0, 2000 images"

----------------------------------------

TITLE: DVCLive Generated YAML Configuration
DESCRIPTION: Example of the dvc.yaml configuration automatically generated by DVCLive.

LANGUAGE: yaml
CODE:
metrics:
  - dvclive/metrics.json

----------------------------------------

TITLE: Configuring AWS IAM OIDC Provider with Terraform
DESCRIPTION: Terraform configuration for setting up AWS IAM OIDC provider and role for DVC Studio access. Includes role creation with S3 access permissions and OIDC trust relationship configuration.

LANGUAGE: hcl
CODE:
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region = "us-east-1"
}

locals {
  provider  = "studio.datachain.ai/api"
  condition = "credentials:example-team/example-credentials"
}

data "tls_certificate" "studio" {
  url = "https://${local.provider}"
}

data "aws_iam_policy_document" "studio_assume_role" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRoleWithWebIdentity"]

    principals {
      type        = "Federated"
      identifiers = [aws_iam_openid_connect_provider.studio.arn]
    }

    condition {
      test     = "ForAnyValue:StringLike"
      variable = "${aws_iam_openid_connect_provider.studio.url}:sub"
      values   = [local.condition]
    }
  }
}

data "aws_iam_policy_document" "studio" {
  statement {
    actions   = ["s3:*"]
    resources = ["*"]
  }
}

resource "aws_iam_openid_connect_provider" "studio" {
  url             = data.tls_certificate.studio.url
  client_id_list  = ["sts.amazonaws.com"]
  thumbprint_list = [data.tls_certificate.studio.certificates.0.sha1_fingerprint]
}

resource "aws_iam_role" "studio" {
  max_session_duration = 12 * 60 * 60 # 12 hours
  assume_role_policy   = data.aws_iam_policy_document.studio_assume_role.json

  inline_policy {
    name   = "studio"
    policy = data.aws_iam_policy_document.studio.json
  }
}

output "role_arn" {
  value = aws_iam_role.studio.arn
}

----------------------------------------

TITLE: Importing External Data with DVC CLI
DESCRIPTION: Demonstrates how to import external data using the dvc import-url command. This downloads the file and creates a .dvc file to track the source data.

LANGUAGE: cli
CODE:
$ dvc import-url https://data.dvc.org/get-started/data.xml
Importing 'https://data.dvc.org/get-started/data.xml' -> 'data.xml'

----------------------------------------

TITLE: Committing First Version
DESCRIPTION: Commit the first version of the dataset and model to Git.

LANGUAGE: bash
CODE:
$ git add data.dvc model.weights.h5.dvc metrics.csv .gitignore
$ git commit -m "First model, trained with 1000 images"
$ git tag -a "v1.0" -m "model v1.0, 1000 images"

----------------------------------------

TITLE: Using log_plot with Unstructured NumPy Array in Python
DESCRIPTION: Example of using log_plot with an unstructured NumPy array to create a linear plot of training loss over epochs, demonstrating how to handle unnamed columns.

LANGUAGE: python
CODE:
import numpy as np
from dvclive import Live

# Create an unstructured array
epochs = np.arange(1, 16)
values = np.sort(np.random.uniform(0.45, 0.965, 15))
data = np.column_stack((epochs, values))

with Live() as live:
    live.log_plot(
        "training_loss_plot",
        data,
        x="0",
        y="1",
        template="linear",
        title="Training Loss",
        x_label="Epochs",
        y_label="Loss"
    )

----------------------------------------

TITLE: Registering Model Version with GTO CLI
DESCRIPTION: Command to register a model version using the GTO command-line interface. This is equivalent to registering a model version through the DVC Studio UI.

LANGUAGE: bash
CODE:
gto register pool-segmentation [ref] --version v1.0.0

----------------------------------------

TITLE: Example Output of DVC Queue Status Command
DESCRIPTION: Demonstrates the typical output of the 'dvc queue status' command, showing task IDs, names, creation times, statuses, and worker status information.

LANGUAGE: bash
CODE:
$ dvc queue status
Task     Name    Created    Status
753b005          04:01 PM   Running
1ae8b65          04:01 PM   Queued

Worker status: 1 active, 0 idle

----------------------------------------

TITLE: Creating and Viewing DVC Ignore Patterns
DESCRIPTION: Example showing how to create a .dvcignore file with patterns and view its contents.

LANGUAGE: cli
CODE:
$ echo "file*\n\!file2" >> .dvcignore
$ cat .dvcignore
file*
!file2

$ touch file1 file2 other
$ ls
file1  file2 other

----------------------------------------

TITLE: Disabling DVC Analytics via CLI Command
DESCRIPTION: Shows how to disable DVC analytics using the dvc config command at the project level. The command sets core.analytics configuration to false.

LANGUAGE: cli
CODE:
$ dvc config core.analytics false

----------------------------------------

TITLE: Running DVC Command in Specific Directory
DESCRIPTION: Executes a DVC command in a specified directory path without changing the current terminal location.

LANGUAGE: bash
CODE:
dvc --cd <path> ...

----------------------------------------

TITLE: Installing DVC from package on Debian/Ubuntu
DESCRIPTION: Installs DVC from a downloaded .deb package on Debian or Ubuntu systems.

LANGUAGE: bash
CODE:
$ sudo apt install ./dvc_0.62.1_amd64.deb

----------------------------------------

TITLE: Adding and Removing an Amazon S3 Remote in DVC
DESCRIPTION: These examples demonstrate how to add an Amazon S3 remote named 'myremote' and then remove it using the 'dvc remote remove' command.

LANGUAGE: bash
CODE:
$ dvc remote add myremote s3://mybucket/path

LANGUAGE: bash
CODE:
$ dvc remote remove myremote

----------------------------------------

TITLE: Using log_plot with Pandas DataFrame in Python
DESCRIPTION: Example of using log_plot with a Pandas DataFrame to create a scatter plot of sepal width vs sepal length for the Iris dataset.

LANGUAGE: python
CODE:
import pandas as pd
from dvclive import Live
from sklearn.datasets import load_iris

iris = load_iris()
datapoints = pd.DataFrame(data=iris.data, columns=iris.feature_names)

with Live() as live:
    live.log_plot(
        "sepal",
        datapoints,
        x="sepal length (cm)",
        y="sepal width (cm)",
        template="scatter",
        title="Sepal width vs Sepal length")

----------------------------------------

TITLE: Loading Parameters from YAML in Python
DESCRIPTION: This snippet shows how to load parameters from a YAML file in Python using the ruamel.yaml library. It's used to parametrize scripts in the DVC pipeline.

LANGUAGE: python
CODE:
from ruamel.yaml import YAML

yaml = YAML(typ="safe")

def data_split():
    params = yaml.load(open("params.yaml", encoding="utf-8"))
...

----------------------------------------

TITLE: Git Clone and DVC Fetch Setup
DESCRIPTION: Commands to clone the example repository and fetch DVC-tracked data from remote storage.

LANGUAGE: bash
CODE:
$ git clone https://github.com/iterative/example-get-started
$ cd example-get-started
$ dvc fetch -aT

----------------------------------------

TITLE: Defining log_artifact Function in Python for DVC Live
DESCRIPTION: Function signature for log_artifact in DVC Live. It takes parameters for path, type, name, description, labels, metadata, copy, and cache options.

LANGUAGE: python
CODE:
def log_artifact(
    path: Union[str, Path],
    type: Optional[str] = None,
    name: Optional[str] = None,
    desc: Optional[str] = None,
    labels: Optional[List[str]] = None,
    meta: Optional[Dict[str, Any]] = None,
    copy: Optional[bool] = False,
    cache: Optional[bool] = True,
):

----------------------------------------

TITLE: Configuring VS Code Line Endings for DVC
DESCRIPTION: JSON configuration for VS Code to enforce LF line endings in both global settings.json or project's .vscode/settings.json.

LANGUAGE: json
CODE:
{
  "files.eol": "\n"
}

----------------------------------------

TITLE: Using Existing Live Instance with DVCLiveCallback in Keras
DESCRIPTION: This example shows how to use an existing Live instance with DVCLiveCallback. It also demonstrates logging additional metrics after training using the Live instance.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.keras import DVCLiveCallback

with Live("custom_dir") as live:
    model.fit(
        train_dataset,
        epochs=num_epochs,
        validation_data=validation_dataset,
        callbacks=[DVCLiveCallback(live=live)])

    model.load_weights(os.path.join("model", "best_model"))

    # Log additional data after training
    test_loss, test_acc = model.evaluate(test_dataset)
    live.log_metric("test_loss", test_loss, plot=False)
    live.log_metric("test_acc", test_acc, plot=False)

----------------------------------------

TITLE: Enhancing Zsh Completion Output with Color Hints
DESCRIPTION: This snippet provides optional configuration to enhance Zsh completion output with color hints and improved formatting.

LANGUAGE: bash
CODE:
# Case insensitive match
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Group matches and describe.
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes

----------------------------------------

TITLE: Adding DVC-Tracked Directory with Ignored Files
DESCRIPTION: Shows how DVC handles ignored files when adding a directory to tracking, and demonstrates the resulting cache structure.

LANGUAGE: bash
CODE:
$ dvc add data
...
$ tree .dvc/cache/files/md5
.dvc/cache/files/md5
├── 26
│   └── ab0db90d72e28ad0ba1e22ee510510
└── ad
    └── 8b0ddcf133a6e5833002ce28f97c5a.dir
$ md5 data/*
b026324c6904b2a9cb4b88d6d61c81d1  data/data1
26ab0db90d72e28ad0ba1e22ee510510  data/data2

----------------------------------------

TITLE: Checking DVC Metrics Difference
DESCRIPTION: CLI command to compare metrics using the DVC metrics system with the generated summary file.

LANGUAGE: cli
CODE:
$ dvc metrics diff dvclive/metrics.json

----------------------------------------

TITLE: Configuring Google Cloud Workload Identity with Terraform
DESCRIPTION: Terraform configuration for setting up Google Cloud Workload Identity federation for DVC Studio. Includes service account creation and IAM bindings for storage access.

LANGUAGE: hcl
CODE:
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "5.13.0"
    }
  }
}

provider "google" {
  project = "iterative-sandbox"
  region  = "us-central1"
}

locals {
  provider  = "studio.datachain.ai/api"
  condition = "credentials:example-team/example-credentials"
}

data "google_project" "current" {}

resource "google_project_organization_policy" "credential_lifetime_extension" {
  project    = data.google_project.current.project_id
  constraint = "constraints/iam.allowServiceAccountCredentialLifetimeExtension"

  list_policy {
    allow {
      all = true
    }
  }
}

resource "google_iam_workload_identity_pool" "studio" {
  workload_identity_pool_id = "iterative-studio"
}

resource "google_iam_workload_identity_pool_provider" "studio" {
  workload_identity_pool_provider_id = "studio"
  workload_identity_pool_id          = google_iam_workload_identity_pool.studio.workload_identity_pool_id

  attribute_mapping = {
    "google.subject" = "assertion.sub"
  }

  oidc {
    issuer_uri = "https://${local.provider}"
  }
}

resource "google_service_account" "studio" {
  account_id = "iterative-studio"
}

resource "google_service_account_iam_binding" "workload_identity_binding" {
  service_account_id = google_service_account.studio.name
  role               = "roles/iam.workloadIdentityUser"
  members            = ["principal://iam.googleapis.com/${google_iam_workload_identity_pool.studio.name}/subject/${local.condition}"]
}

resource "google_project_iam_member" "studio" {
  project = data.google_project.current.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.studio.email}"
}

output "workload_identity_provider" {
  value = google_iam_workload_identity_pool_provider.studio.name
}

output "service_account" {
  value = google_service_account.studio.email
}

output "project_id" {
  value = data.google_project.current.project_id
}

----------------------------------------

TITLE: Setting Default Remote
DESCRIPTION: Example of importing data with a specified default remote.

LANGUAGE: cli
CODE:
$ dvc import https://github.com/iterative/example-get-started-s3 data/prepared --remote myremote

----------------------------------------

TITLE: DVC File Example - YAML Format
DESCRIPTION: Example .dvc file showing how file path and MD5 hash are stored

LANGUAGE: yaml
CODE:
outs:
  - md5: a304afb96060aad90176268345e10355
    path: get-started/data.xml

----------------------------------------

TITLE: Setting DVC File Types in Vim
DESCRIPTION: This Vim script configures Vim to recognize Dvcfile, .dvc, and dvc.lock files as YAML. It should be added to the ~/.vimrc file.

LANGUAGE: vim
CODE:
" DVC
autocmd! BufNewFile,BufRead Dvcfile,*.dvc,dvc.lock setfiletype yaml

----------------------------------------

TITLE: DVC-compatible Python Script with Hydra Composition
DESCRIPTION: Example of a Python script adapted for use with DVC and Hydra composition.

LANGUAGE: python
CODE:
from omegaconf import OmegaConf

def main() -> None:
    cfg = OmegaConf.load("params.yaml")
    # train model using cfg parameters

if __name__ == "__main__":
    main()

----------------------------------------

TITLE: Continuous Checkpoint Logging
DESCRIPTION: Setup for continuous logging of model checkpoints throughout training.

LANGUAGE: python
CODE:
os.environ["HF_DVCLIVE_LOG_MODEL"] = "all"

from transformers import TrainingArguments, Trainer

args = TrainingArguments(..., report_to="dvclive")
trainer = Trainer(..., args=args)

----------------------------------------

TITLE: SCM Integration Example
DESCRIPTION: Example showing how to use DVC's SCM (Source Control Management) functions with exp_show() to retrieve experiments from specific tags.

LANGUAGE: python
CODE:
import dvc.api
import pandas as pd

all_tags = dvc.api.scm.all_tags()
exps = dvc.api.exp_show(revs=all_tags)

----------------------------------------

TITLE: Defining monitor_system Function in Python for DVCLive
DESCRIPTION: Function signature for the monitor_system method in DVCLive. It sets up system metric monitoring with customizable interval, number of samples, and directories to monitor.

LANGUAGE: python
CODE:
def monitor_system(
    interval: float = 0.05,
    num_samples: int = 20,
    directories_to_monitor: Optional[Dict[str, str]] = None,
    ):

----------------------------------------

TITLE: Managing Docker Credentials in Kubernetes
DESCRIPTION: Commands to delete existing Docker credentials and create new ones for accessing the Iterative AI Docker registry.

LANGUAGE: cli
CODE:
kubectl delete secret iterativeai -n studio

LANGUAGE: cli
CODE:
kubectl create secret docker-registry iterativeai \
    --namespace studio \
    --docker-server=docker.iterative.ai \
    --docker-username=<username> \
    --docker-password=<password>

----------------------------------------

TITLE: Basic Usage Example - DVC Get URL
DESCRIPTION: Simple example showing how to get a resource URL from a GitHub repository using dvc.api.get_url()

LANGUAGE: python
CODE:
import dvc.api

resource_url = dvc.api.get_url(
    'get-started/data.xml',
    repo='https://github.com/iterative/dataset-registry'
)
# resource_url is now "https://remote.dvc.org/dataset-registry/a3/04afb96060aad90176268345e10355"

----------------------------------------

TITLE: YAML Parameters File Example
DESCRIPTION: Example of a YAML parameters file structure showing nested parameters for machine learning configuration.

LANGUAGE: yaml
CODE:
epochs: 900
tuning:
  - learning-rate: 0.945
  - max_depth: 7
paths:
  - labels: 'materials/labels'
  - truth: 'materials/ground'

----------------------------------------

TITLE: Setting Azure Storage Key Authentication
DESCRIPTION: Configures Azure authentication using a storage account key

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote account_key 'mysecret'

----------------------------------------

TITLE: Examining DVC Directory Cache Contents
DESCRIPTION: Shows the contents of a .dir cache file which maps files inside a tracked directory using their hash values.

LANGUAGE: bash
CODE:
$ cat .dvc/cache/files/md5/6f/db5336fce0dbfd669f83065f107551.dir
[{"md5": "de7371b0119f4f75f9de703c7c3bac16", "relpath": "cat.jpeg"},
{"md5": "402e97968614f583ece3b35555971f64", "relpath": "index.jpeg"}]

----------------------------------------

TITLE: Viewing Project Structure after Subdirectory Initialization
DESCRIPTION: Shows the directory structure after initializing DVC in a subdirectory, illustrating the relationship between Git and DVC repositories.

LANGUAGE: bash
CODE:
$ tree repo -a
repo
├── .git
.
.
.
└── project-a
    └── .dvc

----------------------------------------

TITLE: Removing DVC Experiments from Remote Git Repository
DESCRIPTION: Shows how to remove experiments from a remote Git repository using the '-g' option.

LANGUAGE: bash
CODE:
$ dvc exp push myremote

$ dvc exp list myremote
master:
        conic-ease
        urban-sign
        major-mela

$ dvc exp remove -g myremote urban-sign major-mela
$ dvc exp list myremote
master:
        conic-ease

----------------------------------------

TITLE: Manual Step Management in DVCLive with Python
DESCRIPTION: Example of manual step management in DVCLive. This approach allows for custom step intervals and selective calling of summary and report methods. It demonstrates how to directly modify the Live.step property.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()

for custom_step in [0, 15, 20]:
    live.step = custom_step
    live.log_metric("metric_1", 0.9)
    live.log_metric("metric_2", 0.7)
    live.make_summary()
# Create report only at the end instead of at each iteration
live.make_report()

----------------------------------------

TITLE: Configuring SSL Certificate in YAML for DVC Studio
DESCRIPTION: This YAML snippet shows how to add a custom CA certificate to the values.yaml file for a DVC Studio instance. The certificate should be placed between the BEGIN and END CERTIFICATE markers.

LANGUAGE: yaml
CODE:
global:
  customCaCerts:
    - |-
      -----BEGIN CERTIFICATE-----
      ...
      -----END CERTIFICATE-----

----------------------------------------

TITLE: Defining dvc.api.read() Function in Python
DESCRIPTION: Function signature for dvc.api.read(), which returns the contents of a tracked file in a DVC project. It accepts parameters for file path, repository, revision, remote storage, configuration, and file opening mode.

LANGUAGE: python
CODE:
def read(path: str,
         repo: str = None,
         rev: str = None,
         remote: str = None,
         remote_config: dict = None,
         config: dict = None,
         mode: str = "r",
         encoding: str = None)

----------------------------------------

TITLE: Displaying DVC list-url Command Usage in Bash
DESCRIPTION: Shows the usage syntax for the DVC list-url command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc list-url [-h] [-q | -v] [-R|-T] [-L depth] [--size] [--fs-config <name>=<value>] url

----------------------------------------

TITLE: Installing GTO using pip in CLI
DESCRIPTION: This command installs GTO using pip, the Python package manager. It will install both the command-line interface and make the Python API available for use in code.

LANGUAGE: cli
CODE:
$ pip install gto

----------------------------------------

TITLE: Google Cloud Project Credentials Configuration
DESCRIPTION: Shows how to configure client ID and secret for a custom Google Cloud project in DVC remote settings.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote gdrive_client_id 'client-id'
$ dvc remote modify myremote gdrive_client_secret 'client-secret'

----------------------------------------

TITLE: HTTP Import Example
DESCRIPTION: Example showing how to import a file from an HTTP source using dvc import-url

LANGUAGE: bash
CODE:
$ dvc import-url https://data.dvc.org/get-started/data.xml data/data.xml

----------------------------------------

TITLE: Using Custom Resolver in Hydra Config
DESCRIPTION: Example of using a custom OmegaConf resolver in Hydra configuration.

LANGUAGE: yaml
CODE:
dir: raw/data
relpath: dataset.csv
fullpath: ${join:${dir},${relpath}}

----------------------------------------

TITLE: Initializing DVCLive Tracker with Hugging Face Accelerate in Python
DESCRIPTION: This snippet shows how to initialize the Accelerator with DVCLive tracking. It also demonstrates how to customize the tracking by passing additional arguments to the Live instance.

LANGUAGE: python
CODE:
from accelerate import Accelerator

# optional, `log_with` defaults to "all"
accelerator = Accelerator(log_with="dvclive")
accelerator.init_trackers(project_name="my_project")

LANGUAGE: python
CODE:
accelerator.init_trackers(
    project_name="my_project",
    init_kwargs={"dvclive": {"dir": "my_directory"}}
)

----------------------------------------

TITLE: API Endpoint Specification
DESCRIPTION: Defines the API endpoint details including the HTTP method and content type for creating DVC Studio projects.

LANGUAGE: yaml
CODE:
Endpoint: api/create-project
HTTP Method: POST
Content-Type: application/json

----------------------------------------

TITLE: Basic Usage of metrics_show Function in Python
DESCRIPTION: Simple example of using dvc.api.metrics_show() to retrieve all metrics from the current DVC repository.

LANGUAGE: python
CODE:
import dvc.api

metrics = dvc.api.metrics_show()

----------------------------------------

TITLE: Accessing Private DVC Repository in Python
DESCRIPTION: Example showing how to use dvc.api.open() to access a file in a private DVC repository using an SSH URL.

LANGUAGE: python
CODE:
import dvc.api

with dvc.api.open(
    'features.dat',
    repo='git@server.com:path/to/repo.git'
) as f:
    # ... Process 'features'

----------------------------------------

TITLE: Cloning and Viewing GTO Registry
DESCRIPTION: This snippet shows how to clone an example GTO model registry and view its current state using the 'gto show' command.

LANGUAGE: cli
CODE:
$ git clone https://github.com/iterative/example-gto
$ cd example-gto

$ gto show
╒══════════╤══════════╤════════╤═════════╤════════════╕
│ name     │ latest   │ #dev   │ #prod   │ #staging   │
╞══════════╪══════════╪════════╪═════════╪════════════╡
│ churn    │ v3.1.1   │ v3.1.1 │ v3.0.0  │ v3.1.0     │
│ segment  │ v0.4.1   │ v0.4.1 │ -       │ -          │
│ cv-class │ v0.1.13  │ -      │ -       │ -          │
╘══════════╧══════════╧════════╧═════════╧════════════╛

----------------------------------------

TITLE: Installing DVC in Databricks
DESCRIPTION: Installs the DVC package in a Databricks environment using pip.

LANGUAGE: bash
CODE:
%pip install dvc

----------------------------------------

TITLE: DVC Import-DB Command Usage
DESCRIPTION: Shows the basic command syntax for importing database content using DVC import-db command.

LANGUAGE: bash
CODE:
usage: dvc import-db [-h] [-q | -v]
            [--sql sql | --table table] [--conn conn]
            [--output-format [{csv,json}]] [-o [<path>]] [-f]

----------------------------------------

TITLE: Importing with Fixed Revision
DESCRIPTION: Example of importing a specific version of a file/directory using the '--rev' option.

LANGUAGE: cli
CODE:
$ dvc import --rev cats-dogs-v1 \
             git@github.com:iterative/dataset-registry.git \
             use-cases/cats-dogs

----------------------------------------

TITLE: Logging Artifacts with DVCLiveLogger
DESCRIPTION: Demonstrates how to log model artifacts using the experiment property with rank zero check.

LANGUAGE: python
CODE:
fabric.save("mnist_cnn.pt", model.state_dict())
if rank_zero_only.rank == 0:
    logger.experiment.log_artifact("mnist_cnn.pt")

----------------------------------------

TITLE: Configuring DVC File Associations in Doom Emacs
DESCRIPTION: This Emacs Lisp code sets up Doom Emacs to recognize .dvc and dvc.lock files as YAML. It should be added to the ~/.doom.d/config.el file.

LANGUAGE: emacs-lisp
CODE:
(use-package! yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.dvc" . yaml-mode))
  (add-to-list 'auto-mode-alist '("dvc.lock" . yaml-mode))
  )

----------------------------------------

TITLE: Function Definition - DVC Params Show
DESCRIPTION: Main function definition for params_show with type hints and optional parameters for retrieving DVC parameters.

LANGUAGE: python
CODE:
def params_show(
    *targets: str,  # Optional
    stages: Optional[Union[str, Iterable[str]]] = None,
    repo: Optional[str] = None,
    rev: Optional[str] = None,
    deps: bool = False,
    config: Optional[dict] = None,
) -> Dict:

----------------------------------------

TITLE: Displaying Specific Artifact Versions with GTO Show
DESCRIPTION: Shows how to use 'gto show' to display all versions of a specific artifact, including their stages, creation times, and references.

LANGUAGE: cli
CODE:
$ gto show churn
╒════════════╤═══════════╤══════════════╤═════════════════════╤══════════════╕
│ artifact   │ version   │ stage        │ created_at          │ ref          │
╞════════════╪═══════════╪══════════════╪═════════════════════╪══════════════╡
│ churn      │ v3.1.0    │ dev, staging │ 2022-08-28 16:58:50 │ churn@v3.1.0 │
│ churn      │ v3.0.0    │ prod         │ 2022-08-24 01:52:10 │ churn@v3.0.0 │
╘════════════╧═══════════╧══════════════╧═════════════════════╧══════════════╛

----------------------------------------

TITLE: Deregistering a Version with GTO Deprecate
DESCRIPTION: Illustrates how to use the 'gto deprecate' command to deregister a specific version of an artifact.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model v0.0.1
Created git tag 'awesome-model@v0.0.1!' that deregistered a version.

----------------------------------------

TITLE: Cleaning Up DVC Cache
DESCRIPTION: This snippet shows how to use 'dvc gc' with the '-w' option to remove the data and all its previous versions from the DVC cache after untracking a file.

LANGUAGE: cli
CODE:
$ dvc gc -w

----------------------------------------

TITLE: DVC Fetch Command Synopsis
DESCRIPTION: Provides the full command-line syntax for the 'dvc fetch' command, including all available options and arguments.

LANGUAGE: usage
CODE:
usage: dvc fetch [-h] [-q | -v] [-j <number>] [-r <name>] [-a] [-T]
                 [--all-commits] [-d] [-R] [--run-cache | --no-run-cache]
                 [--max-size <bytes>] [--type {metrics,plots}]
                 [targets [targets ...]]

----------------------------------------

TITLE: Listing Helm Chart File
DESCRIPTION: Command to view the downloaded Helm chart file details.

LANGUAGE: cli
CODE:
$ ls -l studio-*.tgz
-rw-r--r--. 1 username username 392409 Oct 11 14:30 studio-0.7.0.tgz

----------------------------------------

TITLE: Custom Directory Configuration
DESCRIPTION: Shows how to customize the DVCLiveCallback directory using kwargs, allowing for specification of a custom output directory.

LANGUAGE: python
CODE:
learn.fit_one_cycle(
  n_epoch=2,
  cbs=[DVCLiveCallback(dir="custom_dir")])

----------------------------------------

TITLE: Basic Report Generation Function Definition
DESCRIPTION: Simple function definition for make_report() method in DVCLive

LANGUAGE: python
CODE:
def make_report()

----------------------------------------

TITLE: Version Switching Example Commands
DESCRIPTION: Commands demonstrating how to switch between different versions of the model using git and dvc checkout.

LANGUAGE: bash
CODE:
$ git checkout baseline-experiment
$ dvc checkout
M       model.pkl
M       data\features\

----------------------------------------

TITLE: Assigning Stage with Explicit Version Naming
DESCRIPTION: Example of assigning the 'prod' stage to the 'nn' artifact at a specific Git reference 'abcd123', while explicitly naming the version 'v1.0.0'.

LANGUAGE: cli
CODE:
$ gto assign nn abcd123 --version v1.0.0 --stage prod

----------------------------------------

TITLE: Using DVC Freeze Command in Bash
DESCRIPTION: Demonstrates the usage of the 'dvc freeze' command to freeze stages in a DVC pipeline. It shows how to create a stage, modify dependencies, and freeze the stage to prevent reproduction.

LANGUAGE: bash
CODE:
$ echo foo > foo
$ dvc add foo
$ dvc stage add -n make_copy -d foo -o bar cp foo bar

LANGUAGE: bash
CODE:
$ echo zoo > foo
$ dvc status

LANGUAGE: bash
CODE:
$ dvc freeze make_copy
$ dvc status

----------------------------------------

TITLE: Fetching Specific Files or Directories in DVC
DESCRIPTION: Demonstrates how to use 'dvc fetch' to download only specific tracked data corresponding to given targets.

LANGUAGE: cli
CODE:
$ dvc fetch prepare

LANGUAGE: cli
CODE:
$ dvc fetch data/features/test.pkl

----------------------------------------

TITLE: API Endpoint Definition for DVC Studio get-download-uris
DESCRIPTION: Defines the API endpoint and HTTP method for the DVC Studio get-download-uris API used to download model binaries.

LANGUAGE: yaml
CODE:
Endpoint: api/model-registry/get-download-uris
HTTP Method: GET

----------------------------------------

TITLE: LightGBM with Custom Directory Configuration
DESCRIPTION: Example demonstrating how to customize the DVCLiveCallback initialization with specific directory parameters.

LANGUAGE: python
CODE:
lightgbm.train(
    param,
    train_data,
    valid_sets=[validation_data],
    num_round=5,
    callbacks=[DVCLiveCallback(dir="custom_dir")])

----------------------------------------

TITLE: Configuring DVCLive System Monitoring with Custom Parameters in Python
DESCRIPTION: Demonstrates how to initialize DVCLive and then configure system monitoring with custom interval, number of samples, and directories to monitor.

LANGUAGE: python
CODE:
from dvclive import Live

live = Live()
live.monitor_system(
    interval = 0.01
    num_samples = 20,
    directories_to_monitor = {"data": "/data", "users": "/home"},
)

----------------------------------------

TITLE: Defining Live.make_summary Method
DESCRIPTION: Function signature for the make_summary method that serializes metrics to the Live.metrics_file.

LANGUAGE: python
CODE:
def make_summary()

----------------------------------------

TITLE: Installing Project Dependencies with Yarn
DESCRIPTION: Command to install project dependencies using Yarn in the project directory.

LANGUAGE: cli
CODE:
$ yarn

----------------------------------------

TITLE: Logging into DVC Studio
DESCRIPTION: Command to log into DVC Studio, which configures automatic sharing of experiments.

LANGUAGE: dvc
CODE:
$ dvc studio login

----------------------------------------

TITLE: Displaying Experiment Status
DESCRIPTION: Shows how to list existing experiments using 'dvc exp show' command

LANGUAGE: bash
CODE:
$ dvc exp show

----------------------------------------

TITLE: Assigning Stages with GTO
DESCRIPTION: This snippet shows how to assign a stage (dev) to a version using the 'gto assign' command and view the updated registry status.

LANGUAGE: cli
CODE:
$ gto assign cv-class --stage dev
Created git tag 'cv-class#dev#1' that assigns stage to version 'v0.1.14'
To push the changes upstream, run:
    git push origin cv-class#dev#1

$ gto show
╒══════════╤══════════╤═════════╤═════════╤════════════╕
│ name     │ latest   │ #dev    │ #prod   │ #staging   │
╞══════════╪══════════╪═════════╪═════════╪════════════╡
│ churn    │ v3.1.1   │ v3.1.1  │ v3.0.0  │ v3.1.0     │
│ segment  │ v0.4.1   │ v0.4.1  │ -       │ -          │
│ cv-class │ v0.1.14  │ v0.1.14 │ -       │ -          │
╘══════════╧══════════╧═════════╧═════════╧════════════╛

----------------------------------------

TITLE: Configuring DvcliveLoggerHook in OpenMMlab Project
DESCRIPTION: This snippet shows how to register the DvcliveLoggerHook in the config file of an OpenMMlab project. It sets up logging at 100-interval steps using both TextLoggerHook and DvcliveLoggerHook.

LANGUAGE: python
CODE:
log_config = dict(
    interval=100,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='DvcliveLoggerHook')
    ]
)

----------------------------------------

TITLE: Using log_sklearn_plot Function in Python
DESCRIPTION: Example usage of log_sklearn_plot function to generate ROC and confusion matrix plots using DVC Live.

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
  y_true = [0, 0, 1, 1]
  y_pred = [1, 0, 1, 0]
  y_score = [0.1, 0.4, 0.35, 0.8]
  live.log_sklearn_plot("roc", y_true, y_score)
  live.log_sklearn_plot(
    "confusion_matrix", y_true, y_pred, name="cm.json")

----------------------------------------

TITLE: Configuring Amazon S3 Download in DVC
DESCRIPTION: Creates a DVC stage to download a file from Amazon S3 bucket using the AWS CLI.

LANGUAGE: cli
CODE:
$ dvc stage add -n download_file \
          -d s3://mybucket/data.txt \
          -o data.txt \
          aws s3 cp s3://mybucket/data.txt data.txt

----------------------------------------

TITLE: Launching Local Development Server
DESCRIPTION: Command to start the local development server using Yarn.

LANGUAGE: cli
CODE:
$ yarn develop

----------------------------------------

TITLE: Deleting Version and Related Tags with GTO Deprecate
DESCRIPTION: Demonstrates how to use the 'gto deprecate' command with the --delete option to remove a version and all related tags.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model v0.0.1 --delete
Deleted git tag 'awesome-model@v0.0.1' that registered a version.
Deleted git tag 'awesome-model#prod#1' that assigned a stage to 'v0.0.1'.
Deleted git tag 'awesome-model#prod!#2' that unassigned a stage to 'v0.0.1'.
To push the changes upstream, run:
git push origin awesome-model@v0.0.1 awesome-model#prod#1 awesome-model#prod!#2 --delete

----------------------------------------

TITLE: Reverting DVC Experiment Application
DESCRIPTION: Git commands to revert the changes made by 'dvc exp apply'. This involves using git stash to temporarily store changes and then applying a specific stash reference.

LANGUAGE: bash
CODE:
$ git stash
$ git stash apply refs/exps/apply/stash

----------------------------------------

TITLE: Advanced DVC Stage with Cached Outputs via CLI
DESCRIPTION: Shows how to configure DVC stage with selective caching of outputs using CLI commands.

LANGUAGE: cli
CODE:
$ dvc stage add --name train \
  --deps data_dir --deps src/train.py \
  --outs model.pt --outs-no-cache dvclive/metrics.json \
  --outs dvclive/plots \
  python train.py

----------------------------------------

TITLE: Customizing DVCLiveLogger with Additional Arguments
DESCRIPTION: Examples of how to pass additional arguments to DVCLiveLogger, either by using an existing Live instance or by passing keyword arguments to customize the Live object.

LANGUAGE: python
CODE:
from dvclive import Live
from dvclive.lightning import DVCLiveLogger

with Live("custom_dir") as live:
    trainer = Trainer(
        logger=DVCLiveLogger(experiment=live))
    trainer.fit(model)
    # Log additional metrics after training
    live.log_metric("summary_metric", 1.0, plot=False)

LANGUAGE: python
CODE:
from dvclive.lightning import DVCLiveLogger

trainer = Trainer(
    logger=DVCLiveLogger(dir='my_logs_dir'))
trainer.fit(model)

----------------------------------------

TITLE: Logging Parameters with DVCLive and Hugging Face Accelerate in Python
DESCRIPTION: This snippet demonstrates how to log hyperparameters using the config argument when initializing the trackers with Hugging Face Accelerate.

LANGUAGE: python
CODE:
hps = {"num_iterations": 5, "learning_rate": 1e-2}
accelerator.init_trackers("my_project", config=hps)

----------------------------------------

TITLE: Example Response - DVC Experiment Data
DESCRIPTION: Sample JSON output showing the structure of experiment data returned by exp_show(). Each experiment includes metadata and metrics.

LANGUAGE: json
CODE:
[
  {
    "Experiment": "paled-acre",
    "rev": "883442c",
    "Created": "Apr 19, 2023",
    "dice_multi": 0.8590125166103912,
    "train.arch": "squeezenet1_1"
  },
  {
    "Experiment": "vocal-suer",
    "rev": "231e504",
    "Created": "Apr 19, 2023",
    "dice_multi": 0.8997336177828745,
    "train.arch": "resnet34"
  },
  {
    "Experiment": "banal-hogs",
    "rev": "ff4a08a",
    "Created": "Apr 19, 2023",
    "dice_multi": 0.8758231459806097,
    "train.arch": "alexnet"
  }
]

----------------------------------------

TITLE: Installing Yarn for Node.js Development
DESCRIPTION: Command to install Yarn package manager globally using npm.

LANGUAGE: cli
CODE:
$ npm install -g yarn

----------------------------------------

TITLE: Queuing Multiple DVC Experiments
DESCRIPTION: Demonstrates how to queue multiple experiments using the 'dvc exp run --queue' command with different parameters for each experiment.

LANGUAGE: bash
CODE:
$ dvc exp run --queue -S prepare.split=0.25 -S featurize.max_features=2000
Queued experiment '0bbb118' for future execution.
$ dvc exp run --queue -S prepare.split=0.30 -S featurize.max_features=2500
Queued experiment '753b005' for future execution.
$ dvc exp run --queue -S prepare.split=0.35 -S featurize.max_features=3000
Queued experiment '1ae8b65' for future execution.

----------------------------------------

TITLE: Updating YAML Configuration File
DESCRIPTION: An example of modifying the 'params.yaml' file to adjust parameters for the featurization stage in a DVC pipeline.

LANGUAGE: yaml
CODE:
featurize:
  max_features: 6000
  ngrams: 2

----------------------------------------

TITLE: Customizing Live Instance with kwargs
DESCRIPTION: Example showing how to customize the Live instance using kwargs parameter to specify a custom directory for logging.

LANGUAGE: python
CODE:
model = xgb.XGBClassifier(
    ...
    callbacks=[DVCLiveCallback(dir="custom_dir")]
)

----------------------------------------

TITLE: Logging Additional Data with DVCLive and Hugging Face Accelerate in Python
DESCRIPTION: This snippet demonstrates how to log models and other artifacts using the DVCLive instance directly. It shows how to retrieve the Live instance from the tracker and ensure logging only occurs on the main process.

LANGUAGE: python
CODE:
accelerator.save_state("checkpoint_dir")
if accelerator.is_main_process:
    live = accelerator.get_tracker("dvclive", unwrap=True)
    live.log_artifact("checkpoint_dir")

----------------------------------------

TITLE: Generated DVC YAML Configuration for Custom Plot
DESCRIPTION: Example of the DVC YAML configuration generated by the log_plot method. It shows how the plot properties are stored in the DVC project configuration.

LANGUAGE: yaml
CODE:
plots:
  - dvclive/plots/custom/iris_feature_importance.json:
      template: bar_horizontal
      x: importance
      y: name
      title: 'Iris Dataset: Feature Importance'
      x_label: Feature Importance
      y_label: Feature Name

----------------------------------------

TITLE: Adding Domain to GitLab Webhook Allowlist
DESCRIPTION: Example of adding a domain to GitLab's webhook allowlist to enable local network requests.

LANGUAGE: bash
CODE:
studio.example.com

----------------------------------------

TITLE: Executing DVC commit Command
DESCRIPTION: The basic usage syntax for the 'dvc commit' command, including available options and arguments.

LANGUAGE: cli
CODE:
usage: dvc commit [-h] [-q | -v] [-f] [-d] [-R]
                  [--no-relink] [targets [targets ...]]

----------------------------------------

TITLE: Metrics Summary JSON Output
DESCRIPTION: Example of the JSON structure generated for metrics summary containing step count and latest metric values.

LANGUAGE: json
CODE:
{
  "step": 1,
  "train": {
    "loss": 0.2
  },
  "val": {
    "loss": 0.4
  }
}

----------------------------------------

TITLE: Configuring Shared DVC Cache
DESCRIPTION: Sets up the DVC configuration for using the shared cache. This includes setting the cache directory, enabling group permissions, and configuring symlinks for optimization.

LANGUAGE: bash
CODE:
$ dvc cache dir /home/shared/dvc-cache

$ dvc config cache.shared group
$ dvc config cache.type symlink

----------------------------------------

TITLE: DVC Studio Configuration
DESCRIPTION: Example YAML configuration for DVC Studio with GitLab integration, including host settings, SCM provider configuration, and authentication details.

LANGUAGE: yaml
CODE:
imagePullSecrets:
  - name: iterativeai

global:
  host: <Studio hostname>
  scmProviders:
    gitlab:
      enabled: true
      url: '<GitLab URL>'
      clientId: '<GitLab OAuth App Client ID>'
      secretKey: '<GitLab OAuth App Secret Key>'
      webhookSecret: '<GitLab Webhook Secret>'

----------------------------------------

TITLE: Download Model Using DVC CLI
DESCRIPTION: Command to download a specific model version from the DVC remote using the artifacts get command.

LANGUAGE: cli
CODE:
$ dvc artifacts get https://github.com/<user>/example-get-started-experiments pool-segmentation

----------------------------------------

TITLE: Setting Relative Path for DVC Cache Directory
DESCRIPTION: Demonstrates setting a relative path for the cache directory and shows how it's stored in the config file.

LANGUAGE: bash
CODE:
$ dvc cache dir ../dir
$ cat .dvc/config
...
[cache]
    dir = ../../dir
...

----------------------------------------

TITLE: Helm Repository Update
DESCRIPTION: Command to update the Helm repository before installation.

LANGUAGE: cli
CODE:
ubuntu@ami:~$ helm repo update

----------------------------------------

TITLE: Checking DVC Queue Status with Queued Experiments
DESCRIPTION: Shows how to check the queue status after queuing multiple experiments, displaying the task IDs, creation times, and statuses of queued experiments.

LANGUAGE: bash
CODE:
$ dvc queue status
Task     Name    Created    Status
753b005          04:01 PM   Queued
0bbb118          04:01 PM   Queued
1ae8b65          04:01 PM   Queued

Worker status: 0 active, 0 idle

----------------------------------------

TITLE: Committing DVC Configuration Changes in Git
DESCRIPTION: Commits the changes made to the DVC configuration file to Git. This step is necessary if you're using Git for version control of your DVC project.

LANGUAGE: bash
CODE:
$ git add .dvc/config
$ git commit -m "config external/shared DVC cache"

----------------------------------------

TITLE: DVC Config Example - INI Format
DESCRIPTION: Example DVC config file showing remote storage configuration

LANGUAGE: ini
CODE:
['remote "storage"']
url = https://remote.dvc.org/dataset-registry

----------------------------------------

TITLE: Listing Directory Structure for DVC Images Example
DESCRIPTION: Example showing the tree structure of a directory containing images before being added to DVC.

LANGUAGE: bash
CODE:
$ tree data/images/
data/images/
├── cat.jpeg
└── index.jpeg

$ dvc add data/images

----------------------------------------

TITLE: Basic Usage - DVC Experiment Show
DESCRIPTION: Simple example showing how to import and use the exp_show function to retrieve experiments.

LANGUAGE: python
CODE:
import dvc.api

exps = dvc.api.exp_show()

----------------------------------------

TITLE: Querying Artifact Versions with GTO CLI
DESCRIPTION: Examples of using GTO show command to retrieve Git tags for latest version and production stage artifacts.

LANGUAGE: cli
CODE:
$ gto show churn@latest --ref
churn@v3.1.1

$ gto show churn#prod --ref
churn@v3.0.0

----------------------------------------

TITLE: DVC Import File Structure
DESCRIPTION: Example of the generated .dvc file structure after importing a database table.

LANGUAGE: yaml
CODE:
md5: ddd4654188815dcae6ce4d4a37f83bde
frozen: true
deps:
  - db:
      file_format: csv
      connection: pgsql
      table: customers_table
outs:
  - md5: 131543a828b297ce0a5925800bd88810
    size: 15084226
    hash: md5
    path: customers_table.csv

----------------------------------------

TITLE: Committing New Dependencies to DVC Cache
DESCRIPTION: Using dvc commit to cache newly specified outputs and update the deps and outs file hashes in dvc.lock without re-executing the stage.

LANGUAGE: cli
CODE:
$ dvc commit

----------------------------------------

TITLE: Adding a Sample Data File in DVC
DESCRIPTION: This snippet shows how to add a sample data file 'data.csv' to DVC tracking. It demonstrates the use of 'dvc add' command and its effects on the file structure and .gitignore.

LANGUAGE: cli
CODE:
$ dvc add data.csv

$ ls
data.csv    data.csv.dvc
$ cat .gitignore
/data.csv

----------------------------------------

TITLE: Docker Registry Credentials Configuration
DESCRIPTION: Kubernetes command to create a docker registry secret for accessing Iterative AI's docker repository. Requires docker username and password provided by support team.

LANGUAGE: cli
CODE:
ubuntu@ami:~$ kubectl create secret docker-registry iterativeai \
  --namespace studio \
  --docker-server=docker.iterative.ai \
  --docker-username=<username> \
  --docker-password=<password>

----------------------------------------

TITLE: Creating DVCFileSystem Instances in Python
DESCRIPTION: Examples of creating DVCFileSystem instances for local and remote repositories.

LANGUAGE: python
CODE:
>>> from dvc.api import DVCFileSystem
# opening a local repository
>>> fs = DVCFileSystem("/path/to/local/repository")
# opening a remote repository
>>> url = "https://github.com/iterative/example-get-started.git"
>>> fs = DVCFileSystem(url, rev="main")

----------------------------------------

TITLE: Installing Required Dependencies
DESCRIPTION: Installing the necessary Python packages including DVC, DVCLive, Evidently, and Pandas.

LANGUAGE: cli
CODE:
$ pip install dvc dvclive evidently pandas

----------------------------------------

TITLE: Running DVC Test Suite in Python
DESCRIPTION: Command to run the full DVC test suite using pytest, with examples of running specific tests and passing additional arguments.

LANGUAGE: cli
CODE:
$ python -m tests

LANGUAGE: cli
CODE:
$ python -m tests tests/func/test_metrics.py::TestCachedMetrics

LANGUAGE: cli
CODE:
$ python -m tests tests/unit/utils/test_fs.py::test_get_inode

LANGUAGE: cli
CODE:
$ python -m tests --pdb

----------------------------------------

TITLE: Adding New Files to Dataset
DESCRIPTION: Demonstrates adding a new file to an existing DVC-tracked dataset and checking its status.

LANGUAGE: cli
CODE:
$ cp ~/Downloads/new.png images/test/0/70001.png

$ dvc data status --granular
DVC uncommitted changes:
  (use "dvc commit <file>..." to track changes)
  (use "dvc checkout <file>..." to discard changes)
        modified: images/
        added: images/test/0/70001.png

----------------------------------------

TITLE: DVC Stage Definition with Parameters
DESCRIPTION: Example of defining parameters in dvc.yaml stage configuration file.

LANGUAGE: yaml
CODE:
stages:
  learn:
    cmd: python deep.py # reads params.yaml internally
    params:
      - epochs # specific param from params.yaml
      - tuning.learning-rate # nested param from params.yaml
      - paths # entire group from params.yaml
      - myparams.toml:
          - batch_size # param from custom file
      - config.json: # all params in this file

----------------------------------------

TITLE: DVC Stage Definition with Parameters
DESCRIPTION: Example of defining parameters in dvc.yaml stage configuration file.

LANGUAGE: yaml
CODE:
stages:
  learn:
    cmd: python deep.py # reads params.yaml internally
    params:
      - epochs # specific param from params.yaml
      - tuning.learning-rate # nested param from params.yaml
      - paths # entire group from params.yaml
      - myparams.toml:
          - batch_size # param from custom file
      - config.json: # all params in this file

----------------------------------------

TITLE: Checking DVC Remote Data Status
DESCRIPTION: Command to check if all data exists on the remote storage. It uses 'dvc data status' with JSON output and grep to verify that no data is missing from the remote.

LANGUAGE: cli
CODE:
$ dvc data status --not-in-remote --json | grep -v not_in_remote
true

----------------------------------------

TITLE: Initializing DVCFileSystem Class in Python
DESCRIPTION: Definition of the DVCFileSystem class constructor with optional parameters for URL, revision, and configuration.

LANGUAGE: python
CODE:
class DVCFileSystem(AbstractFileSystem):
    def __init__(
        self,
        url: Optional[str] = None,
        rev: Optional[str] = None,
        config: Optional[Dict[str, Any]] = None,
        **kwargs,
    ):

----------------------------------------

TITLE: Installing DVCLive Python Library
DESCRIPTION: Command to install the DVCLive Python library, which is required for logging model artifacts.

LANGUAGE: cli
CODE:
$ pip install dvclive

----------------------------------------

TITLE: Initializing DVC Project and Downloading Sample Code
DESCRIPTION: Sets up the initial project structure by downloading sample code and data, then tracking it with DVC.

LANGUAGE: cli
CODE:
$ wget https://code.dvc.org/get-started/code.zip
$ unzip code.zip && rm -f code.zip

$ dvc get https://github.com/iterative/dataset-registry \
          get-started/data.xml -o data/data.xml
$ dvc add data/data.xml

----------------------------------------

TITLE: Setting Custom Authentication Header in DVC
DESCRIPTION: Defines a custom HTTP header field for authentication when using custom auth method.

LANGUAGE: cli
CODE:
$ dvc remote modify --local myremote custom_auth_header 'My-Header'

----------------------------------------

TITLE: Updating DVC Studio Hostname Configuration in YAML
DESCRIPTION: Example of how to update the hostname configuration in values.yaml file for DVC Studio deployment. This configuration sets the global host parameter for the DVC Studio instance.

LANGUAGE: yaml
CODE:
global:
  host: studio.company2.com

----------------------------------------

TITLE: Updating DVC Workspace with Git and DVC Checkout Commands
DESCRIPTION: Example showing how to synchronize a DVC workspace by pulling the latest Git changes and linking cached data files using dvc checkout. The output shows new (A) and modified (M) data files being updated in the workspace.

LANGUAGE: cli
CODE:
$ git pull
$ dvc checkout
A       data/new
M       data/labels

----------------------------------------

TITLE: Reading Artifact Contents with dvc.api in Python
DESCRIPTION: Example demonstrating how to use artifacts_show() in combination with dvc.api.read() to retrieve and load the contents of a specific artifact version.

LANGUAGE: python
CODE:
import pickle
import dvc.api

artifact = dvc.api.artifacts_show(
    'text-classification',
    version='v1.0.0',
    repo='https://github.com/iterative/example-get-started.git',
)
data = dvc.api.read(
    artifact['path'],
    rev=artifact['rev'],
    repo='https://github.com/iterative/example-get-started.git',
    mode='rb',
)
model = pickle.loads(data)

----------------------------------------

TITLE: Configuring Git Global Line Ending Settings
DESCRIPTION: CLI commands to configure Git's global line ending behavior by setting core.autocrlf and core.eol.

LANGUAGE: cli
CODE:
$ git config --global core.autocrlf false
$ git config --global core.eol lf

----------------------------------------

TITLE: Queueing and Running DVC Experiments
DESCRIPTION: These CLI commands show how to queue DVC experiments for later execution and how to run all queued experiments.

LANGUAGE: cli
CODE:
$ dvc exp run --queue --set-param "train.img_size=512"

$ dvc exp run --run-all

----------------------------------------

TITLE: Configuring Automatic Experiment Pushing in DVC
DESCRIPTION: Command to set the configuration option for automatically pushing experiments at the end of dvc exp run or dvc exp save.

LANGUAGE: cli
CODE:
$ dvc config exp.auto_push true

----------------------------------------

TITLE: Defining Always Changed Stage in DVC YAML
DESCRIPTION: Example of defining a stage that should always run in DVC, regardless of whether its dependencies have changed. This is achieved using the 'always_changed' property in the 'dvc.yaml' file.

LANGUAGE: yaml
CODE:
stages:
  pull_latest:
    cmd: python pull_latest.py
    deps:
      - pull_latest.py
    outs:
      - latest_results.csv
    always_changed: true

----------------------------------------

TITLE: DVC Queue Start Command Usage
DESCRIPTION: Command syntax for starting the DVC experiment queue processor. Supports options for help (-h), verbosity control (-q, -v), and parallel job execution (-j).

LANGUAGE: usage
CODE:
usage: dvc queue start [-h] [-q | -v] [-j <number>]

----------------------------------------

TITLE: Verifying Unprotected File Status
DESCRIPTION: Shows how to verify that a file has been successfully unprotected and is now writable, with the cache remaining intact.

LANGUAGE: cli
CODE:
$ ls -lh
-rw-r--r--  1  120B Nov 27 13:29 Posts.xml.zip.dvc
-rw-r--r--  1   10M Nov 27 13:30 Posts.xml.zip

$ ls -lh .dvc/cache/files/md5/ce/
-rw-r--r--@ 1 10M Apr 25  2017 68b98d82545628782c66192c96f2d2

----------------------------------------

TITLE: Registering Custom OmegaConf Resolver for Hydra
DESCRIPTION: Example of registering a custom OmegaConf resolver for use with Hydra and DVC.

LANGUAGE: python
CODE:
import os
from omegaconf import OmegaConf

OmegaConf.register_new_resolver('join', lambda x, y : os.path.join(x, y))

----------------------------------------

TITLE: Creating DVC Stages for Training and Evaluation
DESCRIPTION: These CLI commands create DVC stages for model training and evaluation. They specify dependencies, outputs, and parameters for each stage.

LANGUAGE: cli
CODE:
$ dvc stage add -n train \
  -p base,train \
  -d src/train.py -d data/train_data \
  -o models/model.pkl \
  python src/train.py

$ dvc stage add -n evaluate \
  -p base,evaluate \
  -d src/evaluate.py -d models/model.pkl -d data/test_data \
  -o results python src/evaluate.py

----------------------------------------

TITLE: Resulting DVC Pipeline YAML After Adding Stage
DESCRIPTION: The updated YAML configuration showing two stages (prepare and train) after adding a new stage via command line.

LANGUAGE: yaml
CODE:
stages:
  prepare:
    ...
    outs:
      - data/clean.csv
  train:
    cmd: python src/model.py data/model.csv
    deps:
      - src/model.py
      - data/clean.csv
    outs:
      - data/predict.dat

----------------------------------------

TITLE: Installing DVC from repository on Debian/Ubuntu
DESCRIPTION: Installs DVC from the official repository on Debian or Ubuntu systems. Adds the repository, imports the GPG key, and installs DVC.

LANGUAGE: bash
CODE:
$ sudo apt install wget gpg
$ sudo mkdir -p /etc/apt/keyrings
$ wget -qO - https://dvc.org/deb/iterative.asc | sudo gpg --dearmor -o /etc/apt/keyrings/packages.iterative.gpg
$ echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/packages.iterative.gpg] https://dvc.org/deb/ stable main" | sudo tee /etc/apt/sources.list.d/dvc.list
$ sudo chmod 644 /etc/apt/keyrings/packages.iterative.gpg /etc/apt/sources.list.d/dvc.list
$ sudo apt update
$ sudo apt install dvc

----------------------------------------

TITLE: Assigning Stage to Artifact Version
DESCRIPTION: Example of using the 'gto assign' command to assign a 'prod' stage to version 'v0.0.1' of the 'awesome-model' artifact.

LANGUAGE: cli
CODE:
$ gto assign awesome-model --version v0.0.1 --stage prod
Created git tag 'awesome-model#prod#1' that assigns stage to 'v0.0.1'

----------------------------------------

TITLE: Creating a Sample DVC Stage
DESCRIPTION: Demonstrates how to create a simple DVC stage that copies a file 'foo' to 'bar' using the 'dvc stage add' command.

LANGUAGE: bash
CODE:
$ echo foo > foo
$ dvc add foo
$ dvc stage add -n make_copy -d foo -o bar cp foo bar

----------------------------------------

TITLE: Installing DVC with pip and S3 support on Windows
DESCRIPTION: Installs DVC using pip with additional support for Amazon S3 storage. This installs the boto3 library along with DVC.

LANGUAGE: cli
CODE:
$ pip install "dvc[s3]"

----------------------------------------

TITLE: Displaying Experiments with DVC CLI
DESCRIPTION: Use DVC CLI commands to show and compare experiment results, including metrics and parameters.

LANGUAGE: cli
CODE:
$ dvc exp show
─────────────────────────────────────────────────────────────────────────────────────
Experiment                 Created    train.loss   eval.loss   dice_multi   base_lr
─────────────────────────────────────────────────────────────────────────────────────
workspace                  -            0.024942    0.013983        0.922   0.001
master                     05:26 PM      0.78426    0.054157      0.49599   0.1
├── 950c3b5 [bifid-says]   05:33 PM     0.024942    0.013983        0.922   0.001
├── 06090d7 [potty-sash]   05:31 PM     0.026193    0.015237      0.91494   0.01
└── d1ad0a9 [soupy-leak]   05:28 PM     0.075223    0.034786      0.49596   0.1
─────────────────────────────────────────────────────────────────────────────────────

----------------------------------------

TITLE: Displaying Usage for DVC Cache Dir Command
DESCRIPTION: Shows the usage syntax for the 'dvc cache dir' command, including available options and arguments.

LANGUAGE: bash
CODE:
usage: dvc cache dir [-h] [--global | --system | --project | --local]
                     [-u] [value]

----------------------------------------

TITLE: Enabling Password Prompt in DVC
DESCRIPTION: Configures DVC to prompt for password each time when accessing the remote.

LANGUAGE: cli
CODE:
$ dvc remote modify myremote ask_password true

----------------------------------------

TITLE: DVC YAML Configuration for Model Artifact
DESCRIPTION: YAML configuration snippet showing how the model artifact information is stored in the dvc.yaml file after logging. It includes the model path, type, description, and labels.

LANGUAGE: yaml
CODE:
artifacts:
  pool-segmentation:
    path: models/model.pkl
    type: model
    desc:
      This is a Computer Vision (CV) model that's segmenting out swimming pools
      from satellite images.
    labels:
      - cv
      - segmentation
      - satellite-images

----------------------------------------

TITLE: Removing Pushed DVC Experiments
DESCRIPTION: Command to remove pushed experiments from a Git remote using DVC.

LANGUAGE: cli
CODE:
$ dvc exp remove -g origin unwet-jinn

----------------------------------------

TITLE: Transferring TLS Certificates to EC2 Instance
DESCRIPTION: Command to securely copy TLS certificate and private key files to an EC2 instance using SCP.

LANGUAGE: cli
CODE:
$ scp studio.crt studio.pem ubuntu@my-ec2-instance:.

----------------------------------------

TITLE: DVC Cache Command Usage
DESCRIPTION: Command line usage syntax for the DVC cache command, showing available subcommands (dir and migrate) and their purposes. The dir subcommand configures cache directory location while migrate handles migration to DVC 3.0 cache location.

LANGUAGE: shell
CODE:
usage: dvc cache [-h] [-q] [-v] {dir,migrate} ...

positional arguments:
    dir          Configure cache directory location.
    migrate      Migrate cached files to the DVC 3.0 cache location.

----------------------------------------

TITLE: Implementing Live Metrics Logging with DVCLive
DESCRIPTION: Python code example showing how to use DVCLive to log metrics and send automatic updates to DVC Studio during model training

LANGUAGE: python
CODE:
from dvclive import Live

with Live() as live:
  for i in range(params["epochs"]):
    ...
    live.log_metric("accuracy", accuracy)
    live.next_step()
  ...

----------------------------------------

TITLE: Configuring External Output to S3 in DVC
DESCRIPTION: Creates a DVC stage to upload a file to Amazon S3 as an external output.

LANGUAGE: cli
CODE:
$ dvc stage add -n upload_file \
          -d data.txt \
          -O s3://mybucket/data.txt \
          aws s3 cp data.txt s3://mybucket/data.txt

----------------------------------------

TITLE: Checking Migration Steps with Dry Run
DESCRIPTION: Example showing how to preview migration steps without actually performing them using the --dry flag.

LANGUAGE: cli
CODE:
$ dvc cache migrate --dry
94975 files will be re-hashed and migrated to the DVC 3.0 cache location.

----------------------------------------

TITLE: Viewing Dataset Structure
DESCRIPTION: Shows the directory structure of a DVC-tracked image dataset using the tree command.

LANGUAGE: cli
CODE:
$ tree images
images
├── test
│   ├── 0
│   │   ├── 00004.png
│   │   ├── 00011.png
│   │   ├── 00014.png
│   │   ├── 00026.png
│   │   ├── 00029.png
│   │   ├── 00056.png
│   │   ├── 00070.png
...
└── images.dvc

23 directories, 70001 files

----------------------------------------

TITLE: GTO Configuration File
DESCRIPTION: Example of .gto configuration file for specifying allowed stages.

LANGUAGE: yaml
CODE:
stages: [dev, stage, prod] # list of allowed Stages

----------------------------------------

TITLE: Deleting a Stage Assignment with GTO Deprecate
DESCRIPTION: Shows how to use the 'gto deprecate' command with the --delete option to remove a stage assignment without creating a new tag.

LANGUAGE: bash
CODE:
$ gto deprecate awesome-model v0.0.1 prod --delete
Deleted git tag 'awesome-model#prod#1' that assigned a stage to 'v0.0.1'
To push the changes upstream, run:
git push origin awesome-model#prod#1 --delete