TITLE: Basic FastAPI Application Setup
DESCRIPTION: Example showing how to create a basic FastAPI application with GET endpoints for root and items routes using path parameters and query parameters.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Basic FastAPI Application Setup
DESCRIPTION: Example of a simple FastAPI application with two endpoints: a root endpoint and an item endpoint with path and query parameters.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Creating Basic FastAPI Application in Python
DESCRIPTION: Minimal FastAPI application that defines a single GET endpoint returning a JSON response. Shows the core pattern of importing FastAPI, creating an app instance, and defining a path operation.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Installing FastAPI with Standard Dependencies
DESCRIPTION: Command to install FastAPI with its standard optional dependencies using pip.

LANGUAGE: bash
CODE:
pip install "fastapi[standard]"

----------------------------------------

TITLE: Configuring CORS Middleware in FastAPI
DESCRIPTION: Example shows how to set up CORS middleware in a FastAPI application with custom allowed origins, methods, and headers. Demonstrates importing CORSMiddleware, defining allowed origins, and adding middleware to the FastAPI app.

LANGUAGE: python
CODE:
from fastapi.middleware.cors import CORSMiddleware

origins = [
    "http://localhost.tiangolo.com",
    "https://localhost.tiangolo.com",
    "http://localhost",
    "http://localhost:8080",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

----------------------------------------

TITLE: Creating a basic FastAPI application in Python
DESCRIPTION: This snippet shows how to create a simple FastAPI application with two endpoints: a root endpoint and an item endpoint with path and query parameters.

LANGUAGE: Python
CODE:
from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: str = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Synchronous FastAPI Route Definition
DESCRIPTION: Alternative implementation of the root endpoint using a synchronous function instead of async. Demonstrates that FastAPI supports both sync and async route handlers.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def root():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Setting Response Status Code in FastAPI
DESCRIPTION: Shows how to set HTTP status codes for FastAPI path operations using both direct integer codes and status constants.

LANGUAGE: python
CODE:
from fastapi import FastAPI, status

app = FastAPI()

@app.get("/items/", status_code=status.HTTP_201_CREATED)
async def create_item():
    return {"name": "item", "id": 1}

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: Command line instructions for starting a FastAPI development server with a main.py file. Shows server startup output including documentation URLs and process information.

LANGUAGE: console
CODE:
$ fastapi dev main.py

  FastAPI  Starting development server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://127.0.0.1:8000
   server  Documentation at http://127.0.0.1:8000/docs

----------------------------------------

TITLE: Creating a Dependency Function in Python for FastAPI
DESCRIPTION: Defines a common_parameters function that serves as a dependency for FastAPI route handlers. It processes query parameters for pagination and filtering.

LANGUAGE: Python
CODE:
def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}

----------------------------------------

TITLE: Basic Response Model with Type Annotations
DESCRIPTION: Example showing how to declare response types using Python type annotations on path operation functions.

LANGUAGE: python
CODE:
def read_items() -> List[Item]:
    return ["Portal gun", "Plumbus"]

----------------------------------------

TITLE: Basic FastAPI Application Example
DESCRIPTION: A simple FastAPI application with two routes, demonstrating basic usage and type hints

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Declaring Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to declare query parameters in a FastAPI route function. The parameters 'skip' and 'limit' are automatically interpreted as query parameters.

LANGUAGE: python
CODE:
async def read_item(skip: int = 0, limit: int = 10):

----------------------------------------

TITLE: Creating a Database Session Dependency with Yield in FastAPI
DESCRIPTION: This snippet demonstrates how to create a dependency that yields a database session and closes it after the response is sent. It uses a try-finally block to ensure proper cleanup.

LANGUAGE: Python
CODE:
def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()

----------------------------------------

TITLE: Password Form Data Handling in FastAPI
DESCRIPTION: Demonstrates handling username and password form data using OAuth2PasswordRequestForm dependency in FastAPI. Shows user lookup and authentication logic.

LANGUAGE: Python
CODE:
if not user_dict:
    raise HTTPException(
        status_code=400, detail="Incorrect username or password"
    )

----------------------------------------

TITLE: Using Context Managers in Dependencies with Yield in FastAPI
DESCRIPTION: This example demonstrates how to use context managers within a FastAPI dependency that uses yield. It shows the proper way to manage resources using 'with' statements inside the dependency.

LANGUAGE: Python
CODE:
class MySuperContextManager:
    def __init__(self):
        self.db = DBSession()

    def __enter__(self):
        return self.db

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.db.close()

async def get_db():
    with MySuperContextManager() as db:
        yield db

----------------------------------------

TITLE: Basic Async FastAPI Route Example
DESCRIPTION: Demonstrates the basic pattern for creating an asynchronous path operation function in FastAPI using async/await syntax.

LANGUAGE: Python
CODE:
@app.get('/')
async def read_results():
    results = await some_library()
    return results

----------------------------------------

TITLE: Raising HTTPException in FastAPI
DESCRIPTION: Demonstrates how to raise an HTTPException with a 404 status code when an item is not found

LANGUAGE: python
CODE:
from fastapi import HTTPException

if item_id not in items:
    raise HTTPException(status_code=404, detail="Item not found")

----------------------------------------

TITLE: Implementing User Authentication with OAuth2
DESCRIPTION: Creates a dependency for getting the current user using OAuth2 token authentication. Includes a fake utility function for token validation and user retrieval.

LANGUAGE: python
CODE:
def fake_decode_token(token):
    return User(
        username=token + "fakedecoded",
        email="john@example.com",
        full_name="John Doe"
    )

async def get_current_user(token: str = Depends(oauth2_scheme)):
    user = fake_decode_token(token)
    return user

----------------------------------------

TITLE: Session Dependency Implementation
DESCRIPTION: Creates a FastAPI dependency that provides database session management for requests.

LANGUAGE: python
CODE:
from typing import Annotated
from sqlmodel import Session

def get_session():
    with Session(engine) as session:
        yield session

SessionDep = Annotated[Session, Depends(get_session)]

----------------------------------------

TITLE: Importing FastAPI Class in Python
DESCRIPTION: This code snippet demonstrates how to import the FastAPI class directly from the fastapi module. This is the primary way to start using FastAPI in your Python projects.

LANGUAGE: python
CODE:
from fastapi import FastAPI

----------------------------------------

TITLE: PATCH Request Partial Update in FastAPI
DESCRIPTION: Implementation of partial updates using PATCH method in FastAPI. Shows how to use Pydantic's exclude_unset and model_copy for handling partial updates while preserving existing data.

LANGUAGE: Python
CODE:
stored_item_model = Item(**stored_item_data)
update_data = item.dict(exclude_unset=True)
updated_item = stored_item_model.copy(update=update_data)
stored_item_data = jsonable_encoder(updated_item)

----------------------------------------

TITLE: Configuring OAuth2 Password Bearer in FastAPI
DESCRIPTION: This snippet shows how to set up OAuth2 password bearer authentication in a FastAPI application. It defines a token URL and creates a dependency for token validation.

LANGUAGE: python
CODE:
from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


@app.get("/items/")
async def read_items(token: str = Depends(oauth2_scheme)):
    return {"token": token}

----------------------------------------

TITLE: FastAPI Route with Request Body
DESCRIPTION: Demonstrates how to declare a FastAPI route that accepts a request body using the Pydantic model.

LANGUAGE: python
CODE:
@app.post("/items/")
async def create_item(item: Item):
    return item

----------------------------------------

TITLE: Main FastAPI Application Configuration
DESCRIPTION: Shows how to set up the main FastAPI application and include multiple routers with their configurations

LANGUAGE: Python
CODE:
from fastapi import Depends, FastAPI
from .dependencies import get_query_token
from .routers import items, users
from .internal import admin

app = FastAPI(dependencies=[Depends(get_query_token)])

app.include_router(users.router)
app.include_router(items.router)
app.include_router(
    admin.router,
    prefix="/admin",
    tags=["admin"],
    dependencies=[Depends(get_token_header)],
    responses={418: {"description": "I'm a teapot"}},
)

----------------------------------------

TITLE: Python Type Declarations with Pydantic
DESCRIPTION: Demonstrates basic Python type declarations and Pydantic model usage. Shows how to define typed variables and create Pydantic models with validated fields.

LANGUAGE: python
CODE:
from datetime import date

from pydantic import BaseModel

# Declare a variable as a str
# and get editor support inside the function
def main(user_id: str):
    return user_id


# A Pydantic model
class User(BaseModel):
    id: int
    name: str
    joined: date

----------------------------------------

TITLE: FastAPI Application with Request Body
DESCRIPTION: Advanced example demonstrating PUT endpoint with request body validation using Pydantic models, including path parameters and JSON request/response handling.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None

@app.get("/")
def read_root():
    return {"Hello": "World"}

@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}

----------------------------------------

TITLE: Creating FastAPI HTTP Middleware with Process Time Tracking
DESCRIPTION: Implementation of a FastAPI middleware that measures request processing time and adds it as a custom X-Process-Time header. The middleware processes both incoming requests and outgoing responses, demonstrating the complete request-response cycle handling.

LANGUAGE: python
CODE:
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.perf_counter()
    response = await call_next(request)
    process_time = time.perf_counter() - start_time
    response.headers["X-Process-Time"] = str(process_time)

----------------------------------------

TITLE: Basic APIRouter Implementation in FastAPI
DESCRIPTION: Example of implementing an APIRouter in a users module with basic path operations. Shows how to import and create an APIRouter instance.

LANGUAGE: Python
CODE:
from fastapi import APIRouter

router = APIRouter()

@router.get("/users/", tags=["users"])
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

@router.get("/users/me", tags=["users"])
async def read_user_me():
    return {"username": "fakecurrentuser"}

@router.get("/users/{username}", tags=["users"])
async def read_user(username: str):
    return {"username": username}

----------------------------------------

TITLE: Defining a List Field in a Pydantic Model
DESCRIPTION: Demonstrates how to define a list field in a Pydantic model without specifying the type of list elements.

LANGUAGE: Python
CODE:
tags: list

----------------------------------------

TITLE: Basic Path Parameter Implementation in FastAPI
DESCRIPTION: Demonstrates how to declare basic path parameters in FastAPI using Python format string syntax.

LANGUAGE: python
CODE:
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}

----------------------------------------

TITLE: Declaring Model Attributes with Field
DESCRIPTION: Demonstrates how to use Field to declare model attributes with validation and metadata. Shows implementation of a Pydantic model with Field validators for title and description fields.

LANGUAGE: python
CODE:
title: str = Field(min_length=1, max_length=50, description="Title of the item")
description: str | None = Field(
    default=None, title="The description of the item", max_length=300
)

----------------------------------------

TITLE: Extended FastAPI Application Example
DESCRIPTION: Advanced FastAPI application example with multiple endpoints and error handling

LANGUAGE: python
CODE:
from typing import Annotated
from fastapi import FastAPI, Header, HTTPException

app = FastAPI()

@app.get("/items/")
async def read_items(x_token: Annotated[str | None, Header()] = None):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    return {"item": "Foo", "rating": 42}

@app.post("/items/")
async def create_item(item: dict, x_token: Annotated[str | None, Header()] = None):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="Invalid X-Token header")
    if not item:
        raise HTTPException(status_code=400, detail="Invalid item")
    return {"item": item, "rating": 42}

----------------------------------------

TITLE: Configuring TrustedHostMiddleware in FastAPI
DESCRIPTION: Illustrates the use of TrustedHostMiddleware to validate the Host header in incoming requests, protecting against HTTP Host Header attacks.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from fastapi.middleware.trustedhost import TrustedHostMiddleware

app = FastAPI()

app.add_middleware(
    TrustedHostMiddleware, allowed_hosts=["example.com", "*.example.com"]
)

----------------------------------------

TITLE: Declaring Dependencies in FastAPI Route Handlers using Python
DESCRIPTION: Demonstrates how to use the Depends function to inject dependencies into FastAPI route handlers. The example shows two routes using the common_parameters dependency.

LANGUAGE: Python
CODE:
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

----------------------------------------

TITLE: Basic Path Parameter Implementation in FastAPI
DESCRIPTION: Demonstrates how to declare basic path parameters in FastAPI using Python format string syntax.

LANGUAGE: python
CODE:
@app.get("/items/{item_id}")
async def read_item(item_id):
    return {"item_id": item_id}

----------------------------------------

TITLE: Implementing WebSocket endpoint in FastAPI
DESCRIPTION: Demonstrates how to create a WebSocket endpoint in FastAPI, including receiving and sending messages.

LANGUAGE: python
CODE:
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")

----------------------------------------

TITLE: Implementing WebSocket endpoint in FastAPI
DESCRIPTION: Demonstrates how to create a WebSocket endpoint in FastAPI, including receiving and sending messages.

LANGUAGE: python
CODE:
from fastapi import FastAPI, WebSocket

app = FastAPI()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(f"Message text was: {data}")

----------------------------------------

TITLE: Combining Path, Query, and Request Body Parameters
DESCRIPTION: Shows how to handle path parameters, query parameters, and request body all in one FastAPI route.

LANGUAGE: python
CODE:
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item, q: str | None = None):
    result = {"item_id": item_id, **item.dict()}
    if q:
        result.update({"q": q})
    return result

----------------------------------------

TITLE: Custom Exception Handler Implementation
DESCRIPTION: Example of implementing a custom exception handler for a UnicornException

LANGUAGE: python
CODE:
class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name

@app.exception_handler(UnicornException)
async def unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."}
    )

----------------------------------------

TITLE: Implementing TimedRoute for Response Time Tracking in FastAPI
DESCRIPTION: This code defines a TimedRoute class that extends APIRoute to add timing information to the response. It measures the time taken to generate the response and adds an X-Response-Time header with the duration in milliseconds.

LANGUAGE: python
CODE:
class TimedRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            before = time.time()
            response: Response = await original_route_handler(request)
            duration = time.time() - before
            response.headers["X-Response-Time"] = str(duration)
            return response

        return custom_route_handler

----------------------------------------

TITLE: Basic FastAPI Test Setup
DESCRIPTION: Example showing how to set up basic tests using TestClient with FastAPI

LANGUAGE: python
CODE:
from fastapi.testclient import TestClient

from app.main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"msg": "Hello World"}

----------------------------------------

TITLE: Combining Path Parameters and Request Body
DESCRIPTION: Demonstrates how to use both path parameters and request body in a single FastAPI route.

LANGUAGE: python
CODE:
@app.put("/items/{item_id}")
async def create_item(item_id: int, item: Item):
    return {"item_id": item_id, **item.dict()}

----------------------------------------

TITLE: Secure Username/Password Verification with Timing Attack Protection
DESCRIPTION: Implementation of secure credential verification using the secrets module to prevent timing attacks. Includes proper error handling and HTTP 401 responses for invalid credentials.

LANGUAGE: python
CODE:
from fastapi import Depends, FastAPI, HTTPBasic, HTTPBasicCredentials, HTTPException
from fastapi.security import HTTPBasicCredentials
import secrets

app = FastAPI()
security = HTTPBasic()

def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):
    current_username_bytes = credentials.username.encode("utf8")
    correct_username_bytes = b"stanleyjobson"
    is_correct_username = secrets.compare_digest(
        current_username_bytes, correct_username_bytes
    )
    current_password_bytes = credentials.password.encode("utf8")
    correct_password_bytes = b"swordfish"
    is_correct_password = secrets.compare_digest(
        current_password_bytes, correct_password_bytes
    )
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username

----------------------------------------

TITLE: Defining Lifespan Events with Async Context Manager in FastAPI
DESCRIPTION: This snippet demonstrates how to create an async context manager for handling lifespan events in a FastAPI application. It simulates loading and unloading a machine learning model during startup and shutdown.

LANGUAGE: Python
CODE:
from contextlib import asynccontextmanager

from fastapi import FastAPI

fake_items_db = [{"item_name": "Foo"}, {"item_name": "Bar"}, {"item_name": "Baz"}]

class Model:
    def __init__(self):
        self.data = {"key": "value"}

    def predict(self, x):
        return self.data

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Load the ML model
    model = Model()
    app.state.model = model
    yield
    # Clean up the ML models and release the resources
    app.state.model = None

app = FastAPI(lifespan=lifespan)

----------------------------------------

TITLE: Importing FastAPI Request Parameter Functions
DESCRIPTION: This snippet demonstrates how to import all the special request parameter functions directly from the fastapi module. These functions include Query, Path, Body, Cookie, Header, Form, and File.

LANGUAGE: python
CODE:
from fastapi import Body, Cookie, File, Form, Header, Path, Query

----------------------------------------

TITLE: Securing FastAPI Endpoint with User Authentication
DESCRIPTION: Demonstrates how to protect an API endpoint by requiring user authentication through dependency injection of the current user.

LANGUAGE: python
CODE:
@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user

----------------------------------------

TITLE: Implementing GzipRequest Class for Decompressing Request Bodies in Python
DESCRIPTION: This snippet defines a custom GzipRequest class that overrides the body() method to decompress gzip-compressed request bodies when the appropriate header is present. It allows handling both compressed and uncompressed requests seamlessly.

LANGUAGE: python
CODE:
class GzipRequest(Request):
    async def body(self) -> bytes:
        if not hasattr(self, "_body"):
            body = await super().body()
            if "gzip" in self.headers.getlist("Content-Encoding"):
                body = gzip.decompress(body)
            self._body = body
        return self._body

----------------------------------------

TITLE: Creating Basic Hero Model with SQLModel
DESCRIPTION: Defines a basic Hero table model with SQLModel including id, name, secret_name and age fields.

LANGUAGE: python
CODE:
from typing import Optional
from sqlmodel import Field, SQLModel

class Hero(SQLModel, table=True):
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str
    secret_name: str
    age: Optional[int] = Field(default=None, index=True)

----------------------------------------

TITLE: Defining a Class as a Dependency in FastAPI
DESCRIPTION: This snippet shows how to define a class 'CommonQueryParams' to be used as a dependency in FastAPI. It includes query parameters for q, skip, and limit.

LANGUAGE: Python
CODE:
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit

----------------------------------------

TITLE: Securing FastAPI Endpoint with User Authentication
DESCRIPTION: Demonstrates how to protect an API endpoint by requiring user authentication through dependency injection of the current user.

LANGUAGE: python
CODE:
@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user

----------------------------------------

TITLE: User Model with Password Input/Output
DESCRIPTION: Demonstrates handling sensitive data by using separate input and output models for user data with passwords.

LANGUAGE: python
CODE:
class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

----------------------------------------

TITLE: User Model with Password Input/Output
DESCRIPTION: Demonstrates handling sensitive data by using separate input and output models for user data with passwords.

LANGUAGE: python
CODE:
class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

----------------------------------------

TITLE: User Validation Dependencies in FastAPI
DESCRIPTION: Implements dependency functions to validate current user and check if user is active. Returns HTTP errors for invalid or inactive users.

LANGUAGE: Python
CODE:
async def get_current_active_user(
    current_user: Annotated[User, Depends(get_current_user)]
) -> User:
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

----------------------------------------

TITLE: Comprehensive FastAPI Test Suite
DESCRIPTION: Complete test suite demonstrating various testing scenarios including headers and error cases

LANGUAGE: python
CODE:
from fastapi.testclient import TestClient

from .main import app

client = TestClient(app)

def test_read_item_bad_token():
    response = client.get("/items/", headers={"X-Token": "hailhydra"})
    assert response.status_code == 400
    assert response.json() == {"detail": "Invalid X-Token header"}

def test_read_item():
    response = client.get("/items/", headers={"X-Token": "fake-super-secret-token"})
    assert response.status_code == 200
    assert response.json() == {"item": "Foo", "rating": 42}

def test_create_item():
    response = client.post(
        "/items/",
        headers={"X-Token": "fake-super-secret-token"},
        json={"id": "Foo", "title": "The Foo ID"},
    )
    assert response.status_code == 200
    assert response.json() == {
        "item": {"id": "Foo", "title": "The Foo ID"},
        "rating": 42,
    }

----------------------------------------

TITLE: Using JSONResponse with jsonable_encoder in FastAPI
DESCRIPTION: Example of using JSONResponse and jsonable_encoder to return a custom response with a Pydantic model. Demonstrates proper data conversion before sending the response.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from pydantic import BaseModel

class Item(BaseModel):
    id: int
    name: str

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: int):
    item = Item(id=item_id, name="Foo")
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)

----------------------------------------

TITLE: Creating a Dockerfile for FastAPI Application
DESCRIPTION: This Dockerfile sets up a Python environment, installs dependencies, and configures the FastAPI application to run with Uvicorn.

LANGUAGE: Dockerfile
CODE:
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

----------------------------------------

TITLE: Dockerfile for Single-File FastAPI Application
DESCRIPTION: Modified Dockerfile for a FastAPI application that consists of a single file, adjusting the copy command and the CMD instruction accordingly.

LANGUAGE: Dockerfile
CODE:
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./main.py /code/

CMD ["fastapi", "run", "main.py", "--port", "80"]

----------------------------------------

TITLE: Handling WebSocket disconnections and multiple clients
DESCRIPTION: Demonstrates how to handle WebSocket disconnections and manage multiple client connections in FastAPI.

LANGUAGE: python
CODE:
try:
    while True:
        data = await websocket.receive_text()
        await manager.broadcast(f"Client #{client_id} says: {data}")
except WebSocketDisconnect:
    manager.disconnect(websocket)
    await manager.broadcast(f"Client #{client_id} left the chat")

----------------------------------------

TITLE: Converting Pydantic Models to JSON Compatible Data in Python
DESCRIPTION: Demonstrates how to use FastAPI's jsonable_encoder to convert Pydantic models and datetime objects into JSON-compatible formats. This is useful when working with databases that only accept JSON-compatible data or when preparing data for JSON serialization.

LANGUAGE: python
CODE:
from datetime import datetime
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel

class Item(BaseModel):
    title: str
    timestamp: datetime
    description: str | None = None

fake_db = {}

item = Item(title="Hello", timestamp=datetime.now(), description="Hello description")

fake_db_item = jsonable_encoder(item)
fake_db["my_item"] = fake_db_item

----------------------------------------

TITLE: Mixed Query Parameters in FastAPI
DESCRIPTION: This example demonstrates using a mix of required, optional, and default-value query parameters in a single FastAPI route.

LANGUAGE: python
CODE:
async def read_item(item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None):

----------------------------------------

TITLE: Dockerfile for FastAPI with Poetry
DESCRIPTION: A multi-stage Dockerfile that uses Poetry to manage dependencies and generates a requirements.txt file for the final image.

LANGUAGE: Dockerfile
CODE:
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

----------------------------------------

TITLE: Defining Multiple User Models with Password Handling in Python
DESCRIPTION: This snippet shows the definition of multiple Pydantic models for handling user data with different password representations. It includes models for user input, database storage, and output, demonstrating proper password hashing practices.

LANGUAGE: python
CODE:
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str

def fake_password_hasher(raw_password: str):
    return "supersecret" + raw_password

def fake_save_user(user_in: UserIn):
    hashed_password = fake_password_hasher(user_in.password)
    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)
    print("User saved! ..not really")
    return user_in_db

@app.post("/user/", response_model=UserOut)
async def create_user(user_in: UserIn):
    user_saved = fake_save_user(user_in)
    return user_saved

----------------------------------------

TITLE: Declaring Additional Response Model in FastAPI
DESCRIPTION: Example showing how to declare an additional 404 response with a Pydantic model in a FastAPI path operation.

LANGUAGE: python
CODE:
responses={\n    404: {\n        "model": Message,\n        "description": "Additional Response",\n    }\n}

----------------------------------------

TITLE: Basic Query Parameter Definition in FastAPI
DESCRIPTION: Simple example showing how to define an optional string query parameter using FastAPI with modern Python type hints.

LANGUAGE: Python
CODE:
q: str | None = None

----------------------------------------

TITLE: Configuring Documentation URLs in FastAPI
DESCRIPTION: Demonstrates how to customize the URLs for Swagger UI and ReDoc documentation interfaces in a FastAPI application.

LANGUAGE: python
CODE:
app = FastAPI(docs_url="/documentation", redoc_url=None)

----------------------------------------

TITLE: Testing FastAPI Event Handlers with TestClient
DESCRIPTION: Shows how to properly test FastAPI startup and shutdown event handlers by using TestClient within a with statement context manager. This ensures event handlers are executed during test execution.

LANGUAGE: python
CODE:
@app.on_event("startup")
def startup_event():
    items["foo"] = {"name": "Fighters"}
    items["bar"] = {"name": "Tenders"}


with TestClient(app) as client:
    response = client.get("/items/foo")
    assert response.status_code == 200
    assert response.json() == {"name": "Fighters"}

----------------------------------------

TITLE: Creating Pydantic Data Model
DESCRIPTION: Defines a Pydantic model class 'Item' with required and optional fields using Python types.

LANGUAGE: python
CODE:
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

----------------------------------------

TITLE: Simple HTTP Basic Auth Setup in FastAPI
DESCRIPTION: Basic implementation of HTTP authentication using FastAPI's HTTPBasic and HTTPBasicCredentials. Creates a security scheme and uses it as a dependency to protect routes.

LANGUAGE: python
CODE:
from fastapi import Depends, FastAPI, HTTPBasic, HTTPBasicCredentials

app = FastAPI()
security = HTTPBasic()

@app.get("/users/me")
def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):
    return {"username": credentials.username, "password": credentials.password}

----------------------------------------

TITLE: Query Parameter Validation with Annotated
DESCRIPTION: Implementation of query parameter validation using Annotated and Query with maximum length restriction.

LANGUAGE: Python
CODE:
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str | None, Query(max_length=50)] = None):
    results = {"items": ["Foo", "Bar"]}
    if q:
        results.update({"q": q})
    return results

----------------------------------------

TITLE: Implementing Sub-dependencies with Yield in FastAPI
DESCRIPTION: This example shows how to create a chain of dependencies using yield, where each dependency relies on the previous one. It demonstrates the correct order of execution for nested dependencies.

LANGUAGE: Python
CODE:
def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        dep_a.close()

def dependency_b(dep_a: DepA = Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        dep_b.close(dep_a)

def dependency_c(dep_b: DepB = Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        dep_c.close(dep_b)

----------------------------------------

TITLE: Using dependencies in WebSocket endpoints
DESCRIPTION: Shows how to use FastAPI dependencies like Depends, Security, Cookie, Header, Path, and Query in WebSocket endpoints.

LANGUAGE: python
CODE:
@app.websocket("/items/{item_id}/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: str | None = None,
    cookie_or_token: str = Depends(get_cookie_or_token),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or token value is: {cookie_or_token}"
        )
        if q:
            await websocket.send_text(f"Query parameter q is: {q}")
        await websocket.send_text(f"Message text was: {data}, for item ID: {item_id}")

----------------------------------------

TITLE: Python Basic Async Test Example
DESCRIPTION: Example showing how to implement an async test using pytest.mark.anyio and HTTPX AsyncClient to test FastAPI endpoints

LANGUAGE: python
CODE:
@pytest.mark.anyio
async def test_root():
    async with AsyncClient(app=app, base_url="http://test") as ac:
        response = await ac.get("/")

----------------------------------------

TITLE: Implementing GZipMiddleware in FastAPI
DESCRIPTION: Demonstrates how to use GZipMiddleware to handle GZip compression for responses in a FastAPI application.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from fastapi.middleware.gzip import GZipMiddleware

app = FastAPI()

app.add_middleware(GZipMiddleware)

----------------------------------------

TITLE: Using jsonable_encoder with JSONResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to use the jsonable_encoder to convert a Pydantic model to a JSON-compatible dict before passing it to a JSONResponse in a FastAPI path operation.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float


@app.post("/items")
def create_item(item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)

----------------------------------------

TITLE: Using Docstrings for FastAPI Operation Descriptions
DESCRIPTION: Shows how to use function docstrings to provide detailed Markdown-compatible descriptions for FastAPI operations.

LANGUAGE: python
CODE:
@app.get("/items/")
async def read_items():
    """Retrieve items.
    
    This will retrieve all items from the database.
    
    The response will include:
    * List of items
    * Timestamps
    * Counter values
    """
    return ["Item 1", "Item 2"]

----------------------------------------

TITLE: Using jsonable_encoder with JSONResponse in FastAPI
DESCRIPTION: This snippet demonstrates how to use the jsonable_encoder to convert a Pydantic model to a JSON-compatible dict before passing it to a JSONResponse in a FastAPI path operation.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float


@app.post("/items")
def create_item(item: Item):
    json_compatible_item_data = jsonable_encoder(item)
    return JSONResponse(content=json_compatible_item_data)

----------------------------------------

TITLE: Configuring APIRouter with Prefix and Dependencies
DESCRIPTION: Demonstrates configuring an APIRouter with prefix, tags, responses and dependencies for items module

LANGUAGE: Python
CODE:
from fastapi import APIRouter, Depends
from ..dependencies import get_token_header

router = APIRouter(
    prefix="/items",
    tags=["items"],
    dependencies=[Depends(get_token_header)],
    responses={404: {"description": "Not found"}},
)

@router.get("/")
async def read_items():
    return [{"name": "Item Foo"}, {"name": "item Bar"}]

----------------------------------------

TITLE: Implementing Invoice Creation Endpoint with Callback in FastAPI
DESCRIPTION: Defines a FastAPI endpoint for creating invoices that includes a callback URL. This endpoint uses the previously defined callback router to document the expected structure of the external API that will receive callbacks.

LANGUAGE: Python
CODE:
from fastapi import FastAPI, Body
from pydantic import HttpUrl

app = FastAPI()

@app.post(
    "/invoices/",
    callbacks=invoices_callback_router.routes,
)
async def create_invoice(
    invoice: Invoice,
    callback_url: HttpUrl | None = None,
):
    """Create an invoice.

    This will (let's imagine) let the API user (some external developer) create an
    invoice, and then it will send notifications to the provided callback URL.
    """
    return {"description": "Invoice created"}

----------------------------------------

TITLE: Custom Headers with HTTPException
DESCRIPTION: Shows how to add custom headers when raising an HTTPException

LANGUAGE: python
CODE:
raise HTTPException(
    status_code=404,
    detail="Item not found",
    headers={"X-Error": "There goes my error"}
)

----------------------------------------

TITLE: Streaming Response in FastAPI
DESCRIPTION: Demonstrates how to use StreamingResponse for continuous data streaming in FastAPI. The example shows creating a generator function and using it with StreamingResponse.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import StreamingResponse

app = FastAPI()

async def fake_video_streamer():
    for i in range(10):
        yield b"some fake video bytes"

@app.get("/")
async def main():
    return StreamingResponse(fake_video_streamer())

----------------------------------------

TITLE: Running FastAPI Application with Uvicorn
DESCRIPTION: This snippet demonstrates how to run a FastAPI application using Uvicorn directly. It specifies the host, port, and the import string for the FastAPI app.

LANGUAGE: console
CODE:
$ uvicorn main:app --host 0.0.0.0 --port 80

INFO:     Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit)

----------------------------------------

TITLE: Custom Headers with HTTPException
DESCRIPTION: Shows how to add custom headers when raising an HTTPException

LANGUAGE: python
CODE:
raise HTTPException(
    status_code=404,
    detail="Item not found",
    headers={"X-Error": "There goes my error"}
)

----------------------------------------

TITLE: Running Gunicorn with Uvicorn Workers for FastAPI
DESCRIPTION: Command to run Gunicorn with Uvicorn workers, specifying the number of workers, worker class, and binding address for a FastAPI application.

LANGUAGE: Bash
CODE:
$ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:80

----------------------------------------

TITLE: Override Default Validation Error Handler
DESCRIPTION: Shows how to override FastAPI's default request validation error handler

LANGUAGE: python
CODE:
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return PlainTextResponse(str(exc), status_code=400)

----------------------------------------

TITLE: Creating Dependency Functions with Requirements in FastAPI
DESCRIPTION: Demonstrates how to create dependency functions that declare request requirements like headers and can raise exceptions. These functions can be used in the dependencies parameter of path operation decorators.

LANGUAGE: python
CODE:
async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")
    return x_token

async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

----------------------------------------

TITLE: Using ORJSONResponse in FastAPI
DESCRIPTION: Demonstrates how to use the ORJSONResponse class for faster JSON serialization in a FastAPI route.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI()

@app.get("/items/", response_class=ORJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]

----------------------------------------

TITLE: Defining Dependency Functions in FastAPI
DESCRIPTION: This snippet shows the implementation of two dependency functions that verify a token and a key from request headers, raising HTTPExceptions if validation fails.

LANGUAGE: python
CODE:
async def verify_token(x_token: str = Header(...)):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


async def verify_key(x_key: str = Header(...)):
    if x_key != "fake-super-secret-key":
        raise HTTPException(status_code=400, detail="X-Key header invalid")
    return x_key

----------------------------------------

TITLE: Override Default Validation Error Handler
DESCRIPTION: Shows how to override FastAPI's default request validation error handler

LANGUAGE: python
CODE:
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return PlainTextResponse(str(exc), status_code=400)

----------------------------------------

TITLE: Starting FastAPI with Multiple Workers using 'fastapi' Command
DESCRIPTION: Demonstrates how to use the 'fastapi' command to start a FastAPI application with multiple worker processes. This approach allows for better utilization of multi-core CPUs and improved request handling capacity.

LANGUAGE: console
CODE:
$ fastapi run --workers 4 main.py

----------------------------------------

TITLE: Synchronous FastAPI Route Example
DESCRIPTION: Shows how to create a synchronous path operation function for libraries without async support.

LANGUAGE: Python
CODE:
@app.get('/')
def results():
    results = some_library()
    return results

----------------------------------------

TITLE: Custom Response Class in FastAPI
DESCRIPTION: Demonstrates how to create and use a custom response class in FastAPI. The example shows creating a CustomORJSONResponse class that inherits from Response and overrides the render method.

LANGUAGE: python
CODE:
import orjson
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()

class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content) -> bytes:
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)

@app.get("/", response_class=CustomORJSONResponse)
async def main():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Accessing Request Validation Error Body
DESCRIPTION: Demonstrates how to access and return the invalid request body in validation errors

LANGUAGE: python
CODE:
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": exc.errors(), "body": exc.body}
    )

----------------------------------------

TITLE: Multiple Model Implementation
DESCRIPTION: Defines multiple models for different use cases including base, public, create, and update models.

LANGUAGE: python
CODE:
class HeroBase(SQLModel):
    name: str
    age: int | None = None

class Hero(HeroBase, table=True):
    id: int | None = Field(default=None, primary_key=True)
    secret_name: str

class HeroCreate(HeroBase):
    secret_name: str

class HeroUpdate(HeroBase):
    name: str | None = None
    age: int | None = None
    secret_name: str | None = None

----------------------------------------

TITLE: Accessing Request Validation Error Body
DESCRIPTION: Demonstrates how to access and return the invalid request body in validation errors

LANGUAGE: python
CODE:
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={"detail": exc.errors(), "body": exc.body}
    )

----------------------------------------

TITLE: Setting API Metadata in FastAPI
DESCRIPTION: Demonstrates how to set various metadata fields for a FastAPI application, including title, summary, description, version, terms of service, contact information, and license details.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI(
    title="My Super Project",
    summary="This is a very fancy project, with auto docs for the API and everything",
    description="This is a very fancy project, with auto docs for the API and everything",
    version="2.5.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "Deadpoolio the Amazing",
        "url": "http://x-force.example.com/contact/",
        "email": "dp@x-force.example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)


@app.get("/items/")
async def read_items():
    return [{"name": "Katana"}]

----------------------------------------

TITLE: Float Number Validation in FastAPI
DESCRIPTION: This code demonstrates how to apply number validations to float values in FastAPI, using 'gt' and 'lt' for precise range specification.

LANGUAGE: python
CODE:
size: Annotated[float, Query(gt=0, lt=10.5)]

----------------------------------------

TITLE: Setting Response Headers by Returning Response Object in FastAPI
DESCRIPTION: This snippet shows how to set response headers by directly returning a Response object in a FastAPI path operation function. It creates a JSONResponse with custom headers.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import JSONResponse

@app.get("/headers/")
def get_headers():
    content = {"message": "Hello World"}
    headers = {"X-Cat-Dog": "alone in the world", "Content-Language": "en-US"}
    return JSONResponse(content=content, headers=headers)

----------------------------------------

TITLE: Mounting StaticFiles in FastAPI
DESCRIPTION: This snippet shows how to import StaticFiles from fastapi.staticfiles and mount it to a specific path in a FastAPI application. It serves static files from a directory named 'static' and mounts them at the '/static' URL path.

LANGUAGE: python
CODE:
from fastapi.staticfiles import StaticFiles

app.mount("/static", StaticFiles(directory="static"), name="static")

----------------------------------------

TITLE: Creating a Virtual Environment with venv
DESCRIPTION: Creates a new virtual environment using Python's built-in venv module. This command creates a new directory named .venv in the current project folder.

LANGUAGE: bash
CODE:
python -m venv .venv

----------------------------------------

TITLE: Implementing Path Operation with Complex Data Types in FastAPI
DESCRIPTION: This code snippet demonstrates how to use various complex data types as parameters in a FastAPI path operation. It includes examples of UUID, datetime, date, and frozenset. The function also shows how to perform date manipulations with these types.

LANGUAGE: python
CODE:
from datetime import datetime, time, timedelta
from uuid import UUID

from fastapi import FastAPI

app = FastAPI()


@app.put("/items/{item_id}")
async def read_items(
    item_id: UUID,
    start_datetime: datetime | None = None,
    end_datetime: datetime | None = None,
    repeat_at: time | None = None,
    process_after: timedelta | None = None,
):
    start_process = start_datetime + process_after
    duration = end_datetime - start_process
    return {
        "item_id": item_id,
        "start_datetime": start_datetime,
        "end_datetime": end_datetime,
        "repeat_at": repeat_at,
        "process_after": process_after,
        "start_process": start_process,
        "duration": duration,
    }

----------------------------------------

TITLE: Multiple Path and Query Parameters in FastAPI
DESCRIPTION: This example demonstrates using multiple path and query parameters in a single FastAPI route. FastAPI automatically distinguishes between path and query parameters.

LANGUAGE: python
CODE:
async def read_user_item(item_id: str, user_id: int, q: Union[str, None] = None, short: bool = False):

----------------------------------------

TITLE: Adding Summary and Description to FastAPI Endpoints
DESCRIPTION: Demonstrates how to add summary and description metadata to FastAPI path operations using decorator parameters.

LANGUAGE: python
CODE:
@app.get(
    "/items/",
    summary="Create an item",
    description="Create an item with all the information"
)

----------------------------------------

TITLE: Basic Settings Configuration with Pydantic v2
DESCRIPTION: Example of creating a Settings class using Pydantic v2 to manage application configuration with environment variables.

LANGUAGE: python
CODE:
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str
    items_per_user: int = 50

settings = Settings()

----------------------------------------

TITLE: Reducing Model Duplication with Inheritance in Python
DESCRIPTION: This code demonstrates how to reduce duplication in Pydantic models by using inheritance. A base UserBase model is defined, and other models inherit from it, adding or overriding fields as needed.

LANGUAGE: python
CODE:
from pydantic import BaseModel

class UserBase(BaseModel):
    username: str
    email: str
    full_name: str | None = None

class UserIn(UserBase):
    password: str

class UserOut(UserBase):
    pass

class UserInDB(UserBase):
    hashed_password: str

----------------------------------------

TITLE: Importing Form in FastAPI
DESCRIPTION: This snippet demonstrates how to import the Form class from FastAPI. The Form class is used to declare form data input parameters in FastAPI applications.

LANGUAGE: python
CODE:
from fastapi import Form

----------------------------------------

TITLE: Poetry-based FastAPI Docker Configuration
DESCRIPTION: Multi-stage Dockerfile for FastAPI applications using Poetry for dependency management, generating requirements.txt during build.

LANGUAGE: dockerfile
CODE:
FROM python:3.9 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY ./pyproject.toml ./poetry.lock* /tmp/

RUN poetry export -f requirements.txt --output requirements.txt --without-hashes

FROM python:3.9

WORKDIR /code

COPY --from=requirements-stage /tmp/requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

----------------------------------------

TITLE: Installing Required Dependencies with pip
DESCRIPTION: Installing python-multipart package which is required for handling file uploads in FastAPI

LANGUAGE: console
CODE:
$ pip install python-multipart

----------------------------------------

TITLE: Body Parameters with Query Parameter in FastAPI
DESCRIPTION: Demonstrates combining body parameters with optional query parameters in a FastAPI route.

LANGUAGE: python
CODE:
async def update_item(
    *,
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
    q: str | None = None,
):

----------------------------------------

TITLE: Enum Path Parameters in FastAPI
DESCRIPTION: Shows how to use Python enums to create predefined path parameter values with validation.

LANGUAGE: python
CODE:
from enum import Enum

class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"

@app.get("/models/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}

----------------------------------------

TITLE: Setting License Identifier in FastAPI Metadata
DESCRIPTION: Shows how to set the license identifier in the FastAPI application metadata using the SPDX license expression.

LANGUAGE: python
CODE:
license_info={
    "name": "Apache 2.0",
    "identifier": "Apache-2.0",
}

----------------------------------------

TITLE: Installing python-multipart for FastAPI File Uploads
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling file uploads and form data in FastAPI.

LANGUAGE: console
CODE:
$ pip install python-multipart

----------------------------------------

TITLE: Setting Default Value for Query Parameter
DESCRIPTION: This snippet demonstrates how to set a default value for a query parameter while also applying validation rules.

LANGUAGE: python
CODE:
q: str = Query(default="fixedquery", min_length=3)

----------------------------------------

TITLE: Importing UploadFile Class in FastAPI
DESCRIPTION: Shows how to import the UploadFile class from FastAPI framework. This class is used to handle file uploads in FastAPI path operation functions.

LANGUAGE: python
CODE:
from fastapi import UploadFile

----------------------------------------

TITLE: Multiple Value Query Parameters
DESCRIPTION: Implementation of query parameters that can accept multiple values as a list.

LANGUAGE: Python
CODE:
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[list[str] | None, Query()] = None):
    query_items = {"q": q}
    return query_items

----------------------------------------

TITLE: Required Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to make query parameters required by not declaring a default value. The 'needy' parameter is a required query parameter of type str.

LANGUAGE: python
CODE:
async def read_item(item_id: str, needy: str):

----------------------------------------

TITLE: Defining File and Form Parameters in FastAPI
DESCRIPTION: This snippet shows how to define parameters for file uploads and form fields in a FastAPI route using File and Form decorators.

LANGUAGE: python
CODE:
async def create_file(
    file: Annotated[bytes, File()],
    fileb: Annotated[UploadFile, File()],
    token: Annotated[str, Form()]
):

----------------------------------------

TITLE: Handling Multiple Values in Query Parameter
DESCRIPTION: This snippet illustrates how to handle a query parameter that can accept multiple values using a list.

LANGUAGE: python
CODE:
q: List[str] = Query(default=["foo", "bar"])

----------------------------------------

TITLE: Path Operation Order Example in FastAPI
DESCRIPTION: Demonstrates the importance of path operation order with fixed paths versus parameterized paths.

LANGUAGE: python
CODE:
@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}

@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}

----------------------------------------

TITLE: Using Status Code Convenience Variables in FastAPI
DESCRIPTION: Shows how to import and use convenience variables from fastapi.status to set HTTP status codes in a more readable and maintainable way.

LANGUAGE: python
CODE:
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)

----------------------------------------

TITLE: Defining Startup Event in FastAPI (Deprecated)
DESCRIPTION: This snippet shows how to define a startup event handler in FastAPI using the deprecated method. It initializes a fake database with some values before the application starts.

LANGUAGE: Python
CODE:
@app.on_event("startup")
def startup_event():
    items_db.extend([{"item_name": "Foo"}, {"item_name": "Bar"}])

----------------------------------------

TITLE: Returning Custom Status Codes in FastAPI
DESCRIPTION: This code snippet demonstrates how to return custom status codes in a FastAPI application. It shows an update_item function that returns either a 200 OK status for existing items or a 201 Created status for new items.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.put("/items/{item_id}")
def update_item(item_id: str, name: str):
    if item_id in items:
        return {"id": item_id, "name": name}
    else:
        return JSONResponse(status_code=201, content={"id": item_id, "name": name})

----------------------------------------

TITLE: Creating Custom ORJSONResponse in FastAPI
DESCRIPTION: Shows how to create a custom ORJSONResponse class with specific options in FastAPI.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import Response
import orjson

app = FastAPI()

class CustomORJSONResponse(Response):
    media_type = "application/json"

    def render(self, content: Any) -> bytes:
        return orjson.dumps(content, option=orjson.OPT_INDENT_2)

@app.get("/", response_class=CustomORJSONResponse)
async def main():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Enhanced FastAPI Application with PUT Request
DESCRIPTION: Extended FastAPI application example including a PUT request handler with a Pydantic model for request body validation.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}

----------------------------------------

TITLE: Using Pydantic's HttpUrl Type for URL Validation
DESCRIPTION: Illustrates the use of Pydantic's HttpUrl type for automatic URL validation in a model field.

LANGUAGE: Python
CODE:
from pydantic import HttpUrl

class Image:
    url: HttpUrl
    name: str

----------------------------------------

TITLE: Optional Query Parameters in FastAPI
DESCRIPTION: This example demonstrates how to declare optional query parameters by setting their default value to None. The 'q' parameter is optional and will be None if not provided.

LANGUAGE: python
CODE:
async def read_item(item_id: str, q: Union[str, None] = None):

----------------------------------------

TITLE: Pinning Exact FastAPI Version in Requirements.txt
DESCRIPTION: Specifies an exact FastAPI version to use in a requirements.txt file, ensuring consistent dependency versions across deployments.

LANGUAGE: txt
CODE:
fastapi[standard]==0.112.0

----------------------------------------

TITLE: Setting Response Status Code in FastAPI Route Decorator
DESCRIPTION: Demonstrates how to use the status_code parameter in a FastAPI route decorator to specify a custom HTTP status code for the response.

LANGUAGE: python
CODE:
@app.post("/items/", status_code=201)

----------------------------------------

TITLE: Path Parameters Containing Paths in FastAPI
DESCRIPTION: Demonstrates how to handle path parameters that contain full file paths using Starlette's path converter.

LANGUAGE: python
CODE:
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}

----------------------------------------

TITLE: Custom Validation with AfterValidator
DESCRIPTION: Implementation of custom validation logic using Pydantic's AfterValidator for query parameters.

LANGUAGE: Python
CODE:
from typing import Annotated
from fastapi import FastAPI, Query
from pydantic import AfterValidator

def validate_id(value: str) -> str:
    if not value.startswith(("isbn-", "imdb-")):
        raise ValueError("ID must start with 'isbn-' or 'imdb-'")
    return value

app = FastAPI()

@app.get("/items/")
async def read_items(item_id: Annotated[str, Query(), AfterValidator(validate_id)]):
    return {"item_id": item_id}

----------------------------------------

TITLE: Number Validation: Greater Than and Less Than or Equal in FastAPI
DESCRIPTION: This snippet shows how to use 'gt' and 'le' parameters for number validation in FastAPI, setting both lower and upper bounds for a value.

LANGUAGE: python
CODE:
item_id: Annotated[int, Path(title="The ID of the item to get", gt=0, le=1000)]

----------------------------------------

TITLE: Optional Body Parameter in FastAPI
DESCRIPTION: Demonstrates declaring an optional body parameter with a default None value in FastAPI

LANGUAGE: python
CODE:
Item | None = None

----------------------------------------

TITLE: Pinning FastAPI Version Range in Requirements.txt
DESCRIPTION: Defines an acceptable range of FastAPI versions, allowing patch updates while preventing minor version updates that might include breaking changes.

LANGUAGE: txt
CODE:
fastapi[standard]>=0.112.0,<0.113.0

----------------------------------------

TITLE: Configuring Pydantic Model to Forbid Extra Form Fields in FastAPI
DESCRIPTION: This snippet shows how to configure a Pydantic model to forbid extra form fields in FastAPI. It uses the model_config attribute to set extra='forbid'.

LANGUAGE: python
CODE:
model_config = ConfigDict(extra='forbid')

----------------------------------------

TITLE: Boolean Query Parameters in FastAPI
DESCRIPTION: This snippet shows how to use boolean query parameters in FastAPI. The 'short' parameter is converted to a boolean value based on the input.

LANGUAGE: python
CODE:
async def read_item(item_id: str, short: bool = False):

----------------------------------------

TITLE: Number Validation: Greater Than or Equal in FastAPI
DESCRIPTION: This code demonstrates how to use the 'ge' parameter for number validation in FastAPI, ensuring a value is greater than or equal to a specified number.

LANGUAGE: python
CODE:
item_id: Annotated[int, Path(title="The ID of the item to get", ge=1)]

----------------------------------------

TITLE: OpenAPI Schema Processing Script
DESCRIPTION: Python script to modify OpenAPI operation IDs for cleaner client method names.

LANGUAGE: python
CODE:
import json

with open("openapi.json") as f:
    openapi = json.load(f)

for path in openapi["paths"].values():
    for operation in path.values():
        if "operationId" in operation:
            operation["operationId"] = operation["operationId"].split("-")[-1]

with open("openapi.json", "w") as f:
    json.dump(openapi, f, indent=2)

----------------------------------------

TITLE: Running FastAPI Server with fastapi run Command
DESCRIPTION: This snippet demonstrates how to use the 'fastapi run' command to start a FastAPI application. It shows the console output, including server startup information and log messages.

LANGUAGE: console
CODE:
$ fastapi run main.py

  FastAPI  Starting production server 🚀

             Searching for package file structure from directories
             with __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with
             the following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://0.0.0.0:8000
   server  Documentation at http://0.0.0.0:8000/docs

             Logs:

     INFO  Started server process [2306215]
     INFO  Waiting for application startup.
     INFO  Application startup complete.
     INFO  Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C
             to quit)

----------------------------------------

TITLE: Using Dict with Dynamic Keys in FastAPI Request Body
DESCRIPTION: Shows how to use a dict with dynamic integer keys and float values in a FastAPI request body. This allows for flexible data structures with type checking.

LANGUAGE: python
CODE:
async def create_index_weights(weights: Dict[int, float]):
    return weights

----------------------------------------

TITLE: Creating Pydantic User Model in FastAPI
DESCRIPTION: Defines a Pydantic model for user data representation with username and email fields, showing how to use Pydantic for data modeling beyond request bodies.

LANGUAGE: python
CODE:
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

----------------------------------------

TITLE: Reading File Contents in Async Functions
DESCRIPTION: Examples of reading uploaded file contents in both async and sync contexts

LANGUAGE: python
CODE:
contents = await myfile.read()

LANGUAGE: python
CODE:
contents = myfile.file.read()

----------------------------------------

TITLE: Using RedirectResponse with Custom Status Code in FastAPI
DESCRIPTION: Demonstrates how to use RedirectResponse with a custom status code in a FastAPI route.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/typer", response_class=RedirectResponse, status_code=302)
async def redirect_typer():
    return "https://typer.tiangolo.com"

----------------------------------------

TITLE: Creating Pydantic User Model in FastAPI
DESCRIPTION: Defines a Pydantic model for user data representation with username and email fields, showing how to use Pydantic for data modeling beyond request bodies.

LANGUAGE: python
CODE:
from pydantic import BaseModel

class User(BaseModel):
    username: str
    email: str | None = None
    full_name: str | None = None
    disabled: bool | None = None

----------------------------------------

TITLE: Translation Configuration in YAML
DESCRIPTION: YAML configuration file for inheriting documentation settings from English version

LANGUAGE: yaml
CODE:
INHERIT: ../en/mkdocs.yml

----------------------------------------

TITLE: Creating GzipRoute Class for Custom Request Handling in FastAPI
DESCRIPTION: This code defines a GzipRoute class that extends FastAPI's APIRoute to use the custom GzipRequest. It overrides the get_route_handler() method to create a GzipRequest instance from the original request, enabling automatic decompression of gzip-compressed bodies.

LANGUAGE: python
CODE:
class GzipRoute(APIRoute):
    def get_route_handler(self) -> Callable:
        original_route_handler = super().get_route_handler()

        async def custom_route_handler(request: Request) -> Response:
            request = GzipRequest(request.scope, request.receive)
            return await original_route_handler(request)

        return custom_route_handler

----------------------------------------

TITLE: Optional File Upload Parameters
DESCRIPTION: Demonstrating how to make file uploads optional using type annotations and default values

LANGUAGE: python
CODE:
async def create_file(file: UploadFile | None = None):
    if not file:
        return {"message": "No file sent"}
    return {"filename": file.filename}

----------------------------------------

TITLE: Example JSON Request Body
DESCRIPTION: Shows valid JSON request body formats based on the Pydantic model definition.

LANGUAGE: json
CODE:
{
    "name": "Foo",
    "description": "An optional description",
    "price": 45.2,
    "tax": 3.5
}

LANGUAGE: json
CODE:
{
    "name": "Foo",
    "price": 45.2
}

----------------------------------------

TITLE: Initializing BackgroundTasks in FastAPI Route
DESCRIPTION: Example showing how to import BackgroundTasks and use it as a parameter in a FastAPI route function.

LANGUAGE: python
CODE:
from fastapi import BackgroundTasks

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks):

----------------------------------------

TITLE: FastAPI Async Test Directory Structure
DESCRIPTION: Example directory structure for organizing FastAPI async tests

LANGUAGE: plaintext
CODE:
.
├── app
│   ├── __init__.py
│   ├── main.py
│   └── test_main.py

----------------------------------------

TITLE: Using Inheritance for Type Checking and Response Filtering in FastAPI
DESCRIPTION: Shows how to use class inheritance to enable type checking while still allowing response filtering in FastAPI.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()

class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

@app.post("/user/", response_model=BaseUser)
def create_user(user: UserIn) -> BaseUser:
    return user

----------------------------------------

TITLE: Implementing HTTPSRedirectMiddleware in FastAPI
DESCRIPTION: Shows how to use HTTPSRedirectMiddleware to enforce HTTPS for all incoming requests in a FastAPI application.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware

app = FastAPI()

app.add_middleware(HTTPSRedirectMiddleware)

----------------------------------------

TITLE: Restricting Extra Query Parameters in FastAPI
DESCRIPTION: Demonstrates how to configure a Pydantic model to forbid extra query parameters in the request, providing strict parameter validation.

LANGUAGE: python
CODE:
class Item(BaseModel):
    model_config = ConfigDict(extra="forbid")

----------------------------------------

TITLE: Disabling Deep Linking in Swagger UI
DESCRIPTION: Example of how to disable the deep linking feature in Swagger UI by setting the deepLinking parameter to False in the FastAPI configuration.

LANGUAGE: python
CODE:
app = FastAPI(
    swagger_ui_parameters={"deepLinking": False}
)

----------------------------------------

TITLE: Flask Response Example
DESCRIPTION: Example output from the mounted Flask application when accessing the /v1/ endpoint.

LANGUAGE: txt
CODE:
Hello, World from Flask!

----------------------------------------

TITLE: Python TestClient Equivalent Example
DESCRIPTION: Synchronous test example using TestClient for comparison with async testing approach

LANGUAGE: python
CODE:
response = client.get('/')

----------------------------------------

TITLE: Using FastAPI Status Codes in Route Handler
DESCRIPTION: This example shows how to create a FastAPI application with a GET route that returns a custom status code. It uses the status.HTTP_418_IM_A_TEAPOT constant to set the response status code.

LANGUAGE: python
CODE:
from fastapi import FastAPI, status

app = FastAPI()


@app.get("/items/", status_code=status.HTTP_418_IM_A_TEAPOT)
def read_items():
    return [{"name": "Plumbus"}, {"name": "Portal Gun"}]

----------------------------------------

TITLE: Async Function Definition Example
DESCRIPTION: Example showing how to define an asynchronous function that returns burgers.

LANGUAGE: Python
CODE:
async def get_burgers(number: int):
    # Do some asynchronous stuff to create the burgers
    return burgers

----------------------------------------

TITLE: Setting Cookies Using Response Parameter in FastAPI
DESCRIPTION: Demonstrates how to set cookies using a Response parameter in a FastAPI path operation function. The response object is used temporarily to set cookies while still allowing return of normal objects that can be filtered through response_model.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Response

app = FastAPI()

@app.get("/cookie/")
def create_cookie(response: Response):
    response.set_cookie(key="fakesession", value="fake-cookie-session-value")
    return {"message": "Come to the dark side, we have cookies"}

----------------------------------------

TITLE: Custom Request Body Schema Definition
DESCRIPTION: Define custom request body schema in OpenAPI without using FastAPI's automatic parsing, allowing for manual request handling while maintaining API documentation.

LANGUAGE: python
CODE:
@app.post(
    "/items/",
    openapi_extra={
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {"name": {"type": "string"}}
                    }
                }
            }
        }
    }
)

----------------------------------------

TITLE: Starting FastAPI with Multiple Workers using 'uvicorn' Command
DESCRIPTION: Shows how to use the 'uvicorn' command directly to start a FastAPI application with multiple worker processes. This method provides more control over the server configuration and is an alternative to using the 'fastapi' command.

LANGUAGE: console
CODE:
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4

----------------------------------------

TITLE: Using Request Object in FastAPI Path Operation
DESCRIPTION: Demonstrates how to access the client's IP address by using the Request object directly in a FastAPI path operation function. The example shows how to combine direct Request object usage with standard path parameters while maintaining FastAPI's validation features.

LANGUAGE: python
CODE:
from fastapi import Request

@app.get("/items/{item_id}")
async def read_root(item_id: str, request: Request):
    client_host = request.client.host
    return {"client_host": client_host, "item_id": item_id}

----------------------------------------

TITLE: Importing Query from FastAPI
DESCRIPTION: This snippet shows how to import the Query class from FastAPI, which is used for advanced query parameter configuration.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Query

----------------------------------------

TITLE: Importing Path and Annotated in FastAPI
DESCRIPTION: This snippet shows how to import Path from fastapi and Annotated from typing for use with path parameters.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Path
from typing import Annotated

----------------------------------------

TITLE: Creating Custom Documentation Routes in FastAPI
DESCRIPTION: This code demonstrates how to create custom routes for Swagger UI and ReDoc documentation in FastAPI, using custom CDN URLs for JavaScript and CSS files.

LANGUAGE: python
CODE:
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
    get_swagger_ui_oauth2_redirect_html,
)

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=app.title + " - Swagger UI",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js",
        swagger_css_url="https://unpkg.com/swagger-ui-dist@5/swagger-ui.css",
    )


@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)
async def swagger_ui_redirect():
    return get_swagger_ui_oauth2_redirect_html()


@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=app.title + " - ReDoc",
        redoc_js_url="https://unpkg.com/redoc@next/bundles/redoc.standalone.js",
    )

----------------------------------------

TITLE: Basic FastAPI Docker Container Configuration
DESCRIPTION: Basic Dockerfile configuration for running a FastAPI application in a container, using Python 3.9 as the base image and configuring the working directory and dependencies.

LANGUAGE: dockerfile
CODE:
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]

----------------------------------------

TITLE: Creating Callback APIRouter in FastAPI
DESCRIPTION: Creates an APIRouter for handling callback routes in a FastAPI application. This router is used to document the expected structure of the external API that will receive callbacks.

LANGUAGE: Python
CODE:
from fastapi import APIRouter

invoices_callback_router = APIRouter()

@invoices_callback_router.post(
    "{$callback_url}/invoices/{$request.body.id}",
    responses={200: {"description": "Success"}},
)
async def invoice_notification(
    body: InvoiceEvent,
) -> InvoiceEventReceived:
    pass

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: Creates a new virtual environment using the uv tool. By default, it creates a directory named .venv in the current project folder.

LANGUAGE: bash
CODE:
uv venv

----------------------------------------

TITLE: Pydantic Model Usage Example
DESCRIPTION: Shows how to instantiate and use Pydantic models with direct attribute assignment and dictionary unpacking for data validation.

LANGUAGE: python
CODE:
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")

second_user_data = {
    "id": 4,
    "name": "Mary",
    "joined": "2018-11-30",
}

my_second_user: User = User(**second_user_data)

----------------------------------------

TITLE: Using Dependencies with WebSocket Endpoints in FastAPI
DESCRIPTION: Example of implementing dependency injection in WebSocket endpoints, including authentication and parameter validation.

LANGUAGE: python
CODE:
from fastapi import FastAPI, WebSocket, Depends, Query

app = FastAPI()

async def get_cookie_or_token(websocket: WebSocket, session: str | None = Cookie(None), token: str | None = Query(None)):
    if session is None and token is None:
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
    return session or token

@app.websocket("/items/{item_id}/ws")
async def websocket_endpoint(
    websocket: WebSocket,
    item_id: str,
    q: str | None = None,
    cookie_or_token: str = Depends(get_cookie_or_token),
):
    await websocket.accept()
    while True:
        data = await websocket.receive_text()
        await websocket.send_text(
            f"Session cookie or query token value is: {cookie_or_token}"
        )
        if q is not None:
            await websocket.send_text(f"Query parameter q is: {q}")
        await websocket.send_text(f"Message text was: {data}, for item ID: {item_id}")

----------------------------------------

TITLE: Creating FastAPI Sub-Application in Python
DESCRIPTION: This snippet shows how to create a sub-application in FastAPI, which will be mounted to the main application.

LANGUAGE: python
CODE:
subapi = FastAPI()

@subapi.get("/sub")
def read_sub():
    return {"message": "Hello World from sub API"}

----------------------------------------

TITLE: Template URL Generation
DESCRIPTION: Example of using url_for in Jinja2 templates to generate dynamic URLs

LANGUAGE: jinja
CODE:
<a href="{{ url_for('read_item', id=id) }}">

----------------------------------------

TITLE: Swagger UI HTML Generator for FastAPI
DESCRIPTION: Function that generates the HTML for Swagger UI documentation interface, available by default at the /docs endpoint.

LANGUAGE: python
CODE:
fastapi.openapi.docs.get_swagger_ui_html

----------------------------------------

TITLE: Optional Body Parameter in FastAPI
DESCRIPTION: Demonstrates how to declare an optional body parameter using None as default value in FastAPI route definition.

LANGUAGE: python
CODE:
async def update_item(
    item_id: int,
    item: Item | None = None
):

----------------------------------------

TITLE: Ordering Parameters with Path and Annotated in FastAPI
DESCRIPTION: This code demonstrates how to order parameters using Path and Annotated for path and query parameters in FastAPI.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Path, Query
from typing import Annotated

app = FastAPI()


@app.get("/items/{item_id}")
async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")],
    q: Annotated[str | None, Query(alias="item-query")] = None,
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results

----------------------------------------

TITLE: Sample FastAPI OpenAPI Schema
DESCRIPTION: Example of the auto-generated OpenAPI schema JSON that FastAPI produces to describe the API endpoints and their specifications.

LANGUAGE: json
CODE:
{
    "openapi": "3.1.0",
    "info": {
        "title": "FastAPI",
        "version": "0.1.0"
    },
    "paths": {
        "/items/": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {}
                        }
                    }
                }
            }
        }
    }
}

----------------------------------------

TITLE: Importing Request Class from FastAPI in Python
DESCRIPTION: This snippet demonstrates how to import the Request class directly from FastAPI. This allows access to the raw request object without any validation in path operation functions or dependencies.

LANGUAGE: python
CODE:
from fastapi import Request

----------------------------------------

TITLE: ReDoc HTML Generator for FastAPI
DESCRIPTION: Function that generates the HTML for ReDoc documentation interface, available by default at the /redoc endpoint.

LANGUAGE: python
CODE:
fastapi.openapi.docs.get_redoc_html

----------------------------------------

TITLE: Upgrading pip in a Virtual Environment
DESCRIPTION: Upgrades pip to the latest version within the active virtual environment. This is recommended to ensure compatibility with newer package versions.

LANGUAGE: bash
CODE:
python -m pip install --upgrade pip

----------------------------------------

TITLE: Configuring Traefik Routes for Path Prefix Stripping
DESCRIPTION: This TOML configuration sets up Traefik routes to strip the /api/v1 prefix from incoming requests before forwarding them to the backend server.

LANGUAGE: TOML
CODE:
[http]
  [http.middlewares]

    [http.middlewares.api-stripprefix.stripPrefix]
      prefixes = ["/api/v1"]

  [http.routers]

    [http.routers.app-http]
      entryPoints = ["http"]
      service = "app"
      rule = "PathPrefix(`/api/v1`)"
      middlewares = ["api-stripprefix"]

  [http.services]

    [http.services.app]
      [http.services.app.loadBalancer]
        [[http.services.app.loadBalancer.servers]]
          url = "http://127.0.0.1:8000"

----------------------------------------

TITLE: Pydantic Model Example
DESCRIPTION: Creating a Pydantic model with type annotations for data validation and serialization.

LANGUAGE: Python
CODE:
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

class User(BaseModel):
    id: int
    name: str
    signup_ts: Optional[datetime] = None
    friends: List[int] = []

external_data = {
    'id': '123',
    'name': 'John Doe',
    'signup_ts': '2019-06-01 12:22',
    'friends': [1, 2, '3']
}

user = User(**external_data)
print(user.id)
print(repr(user.signup_ts))
print(user.friends)

----------------------------------------

TITLE: Setting and Resetting Dependency Overrides in FastAPI
DESCRIPTION: Shows how to use the app.dependency_overrides attribute to override dependencies during testing and how to reset them afterwards. The dependency override is done by assigning a dictionary with the original dependency as key and override function as value.

LANGUAGE: python
CODE:
app.dependency_overrides[common_parameters] = override_dependency

LANGUAGE: python
CODE:
app.dependency_overrides = {}

----------------------------------------

TITLE: Disabling Swagger UI Syntax Highlighting in FastAPI
DESCRIPTION: Demonstrates how to disable the default syntax highlighting in Swagger UI by setting the syntaxHighlight parameter to False when initializing the FastAPI application.

LANGUAGE: python
CODE:
app = FastAPI(
    swagger_ui_parameters={"syntaxHighlight": False}
)

----------------------------------------

TITLE: Basic Types Declaration Example
DESCRIPTION: Demonstration of common Python type hints including int, float, bool, and bytes.

LANGUAGE: python
CODE:
def process_items(item_id: int, item_weight: float, is_available: bool, item_code: bytes):
    return item_id

----------------------------------------

TITLE: Accessing root_path in FastAPI Route Handler
DESCRIPTION: This snippet shows how to access the current root_path within a FastAPI route handler function. The root_path is obtained from the request's scope dictionary.

LANGUAGE: Python
CODE:
@app.get("/app")
async def read_main(request: Request):
    return {"message": "Hello World", "root_path": request.scope.get("root_path")}

----------------------------------------

TITLE: Class Type Hint in Python
DESCRIPTION: Declaring a function parameter as a custom class type.

LANGUAGE: Python
CODE:
class Person:
    def __init__(self, name: str):
        self.name = name

def get_person_name(person: Person):
    return person.name

----------------------------------------

TITLE: Combining Dataclasses with Nested Data Structures in FastAPI
DESCRIPTION: This snippet illustrates how to use Pydantic dataclasses for nested data structures in FastAPI. It shows the creation of nested dataclasses, their use in request and response models, and how to handle lists of dataclasses.

LANGUAGE: python
CODE:
from dataclasses import field
from pydantic.dataclasses import dataclass
from fastapi import FastAPI

@dataclass
class Item:
    name: str
    price: float

@dataclass
class Author:
    name: str
    items: list[Item]

app = FastAPI()

@app.post("/authors/{author_id}/items", response_model=Author)
def add_author_items(author_id: int, items: list[Item]):
    return {"name": "Foo", "items": items}

@app.get("/authors", response_model=list[Author])
def get_authors():
    return [
        {"name": "Foo", "items": []},
        {"name": "Bar", "items": [{
            "name": "Bar",
            "price": 42,
        }]},
    ]

----------------------------------------

TITLE: Defining Additional Servers in FastAPI OpenAPI Schema
DESCRIPTION: This snippet shows how to define additional servers in the FastAPI application's OpenAPI schema, which can be useful for environments like staging and production.

LANGUAGE: Python
CODE:
app = FastAPI(
    servers=[
        {"url": "https://stag.example.com", "description": "Staging environment"},
        {"url": "https://prod.example.com", "description": "Production environment"},
    ]
)

----------------------------------------

TITLE: Activating a Virtual Environment (Windows Bash)
DESCRIPTION: Activates the virtual environment on Windows using Bash (e.g., Git Bash). This command modifies the current shell's environment variables to use the Python installation in the virtual environment.

LANGUAGE: bash
CODE:
source .venv/Scripts/activate

----------------------------------------

TITLE: Importing FastAPI Exceptions
DESCRIPTION: Shows how to import HTTPException and WebSocketException from the FastAPI framework. These exceptions are used to handle errors and abort requests with appropriate error responses.

LANGUAGE: python
CODE:
from fastapi import HTTPException, WebSocketException

----------------------------------------

TITLE: Declaring Header Parameters in FastAPI
DESCRIPTION: Demonstrates how to declare header parameters with validation and default values using the Header class.

LANGUAGE: python
CODE:
async def read_items(user_agent: str | None = Header(default=None))

----------------------------------------

TITLE: Setting Value Range for Path Parameter in FastAPI
DESCRIPTION: Demonstrates how to set a value range (greater than and less than or equal to) for a path parameter using Path.

LANGUAGE: python
CODE:
item_id: int = Path(..., title="The ID of the item to get", gt=0, le=1000)

----------------------------------------

TITLE: Using Inheritance for Type Support and Data Filtering in FastAPI
DESCRIPTION: Shows how to use class inheritance to get both type support from tools and data filtering from FastAPI when the response model is a subset of the returned data.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

class BaseUser(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

class UserIn(BaseUser):
    password: str

app = FastAPI()

@app.post("/user/")
def create_user(user: UserIn) -> BaseUser:
    return user

----------------------------------------

TITLE: Pinning FastAPI Minor Version Range
DESCRIPTION: Example of pinning FastAPI to a specific minor version range, allowing patch updates while preventing breaking changes.

LANGUAGE: txt
CODE:
fastapi>=0.45.0,<0.46.0

----------------------------------------

TITLE: Activating a Virtual Environment (Windows PowerShell)
DESCRIPTION: Activates the virtual environment on Windows using PowerShell. This script modifies the current shell's environment variables to use the Python installation in the virtual environment.

LANGUAGE: powershell
CODE:
.venv\Scripts\Activate.ps1

----------------------------------------

TITLE: Importing FastAPI Response Classes
DESCRIPTION: Shows how to import all available response classes from fastapi.responses module. These classes can be used to return different types of responses from path operations.

LANGUAGE: python
CODE:
from fastapi.responses import (
    FileResponse,
    HTMLResponse,
    JSONResponse,
    ORJSONResponse,
    PlainTextResponse,
    RedirectResponse,
    Response,
    StreamingResponse,
    UJSONResponse,
)

----------------------------------------

TITLE: Importing BackgroundTasks in FastAPI (Python)
DESCRIPTION: This snippet shows how to import the BackgroundTasks class from the FastAPI module. This class is used to declare a parameter in a path operation function or dependency function for scheduling background tasks.

LANGUAGE: python
CODE:
from fastapi import BackgroundTasks

----------------------------------------

TITLE: Disabling Automatic Docs in FastAPI
DESCRIPTION: This snippet shows how to disable the automatic documentation generation in FastAPI by setting the docs_url and redoc_url to None when creating the FastAPI app instance.

LANGUAGE: python
CODE:
app = FastAPI(docs_url=None, redoc_url=None)

----------------------------------------

TITLE: Configuring Response Model Encoding in FastAPI
DESCRIPTION: Demonstrates how to use response_model_exclude_unset to omit default values from the response, and how to use response_model_include and response_model_exclude to filter response fields.

LANGUAGE: python
CODE:
from typing import Union
from fastapi import FastAPI
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: float = 10.5
    tags: list[str] = []

app = FastAPI()

@app.post("/items/", response_model=Item, response_model_exclude_unset=True)
def create_item(item: Item) -> Item:
    return item

@app.get("/items/{item_id}", response_model=Item, response_model_include={"name", "description"})
def read_item(item_id: str):
    return items[item_id]

@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude={"tax"})
def read_item_public(item_id: str):
    return items[item_id]

----------------------------------------

TITLE: Pinning Pydantic Version Range
DESCRIPTION: Example of specifying compatible Pydantic version range, ensuring compatibility with FastAPI while allowing updates within major version 2.

LANGUAGE: txt
CODE:
pydantic>=2.7.0,<3.0.0

----------------------------------------

TITLE: Importing CORS Middleware in FastAPI
DESCRIPTION: Shows how to import the CORS (Cross-Origin Resource Sharing) middleware from FastAPI package.

LANGUAGE: python
CODE:
from fastapi.middleware.cors import CORSMiddleware

----------------------------------------

TITLE: External Links Template Structure - Jinja2
DESCRIPTION: Template structure for rendering external links and articles organized by sections and languages. Uses Jinja2 templating to iterate through nested data structures of external resources.

LANGUAGE: jinja2
CODE:
{% for section_name, section_content in external_links.items() %}

## {{ section_name }}

{% for lang_name, lang_content in section_content.items() %}

### {{ lang_name }}

{% for item in lang_content %}

* <a href="{{ item.link }}" class="external-link" target="_blank">{{ item.title }}</a> by <a href="{{ item.author_link }}" class="external-link" target="_blank">{{ item.author }}</a>.

{% endfor %}
{% endfor %}
{% endfor %}

----------------------------------------

TITLE: Importing StaticFiles Class in FastAPI (Python)
DESCRIPTION: This snippet demonstrates how to import the StaticFiles class from the fastapi.staticfiles module. This class is used to serve static files in a FastAPI application.

LANGUAGE: python
CODE:
from fastapi.staticfiles import StaticFiles

----------------------------------------

TITLE: Disabling Automatic Underscore Conversion in FastAPI Headers
DESCRIPTION: Set convert_underscores to False in the Header class to disable automatic conversion of underscores to hyphens in header names.

LANGUAGE: python
CODE:
async def read_items(strange_header: str | None = Header(default=None, convert_underscores=False)):

----------------------------------------

TITLE: Defining Optional File Upload in FastAPI
DESCRIPTION: This example demonstrates how to define an optional file upload parameter using UploadFile and setting a default value of None.

LANGUAGE: Python
CODE:
async def create_file(file: bytes | None = File(default=None)):

async def create_upload_file(file: UploadFile | None = None):

----------------------------------------

TITLE: Installing Gunicorn and Uvicorn for FastAPI Deployment
DESCRIPTION: Command to install Uvicorn with standard extensions and Gunicorn for deploying FastAPI applications.

LANGUAGE: Bash
CODE:
$ pip install "uvicorn[standard]" gunicorn

----------------------------------------

TITLE: Importing OpenAPI Models in FastAPI
DESCRIPTION: This code snippet demonstrates how to import and use the OpenAPI models defined in FastAPI. These models are used for generating and validating OpenAPI schemas.

LANGUAGE: python
CODE:
::: fastapi.openapi.models

----------------------------------------

TITLE: Importing WebSocketDisconnect from FastAPI
DESCRIPTION: Demonstrates how to import the WebSocketDisconnect exception from FastAPI, which is raised when a client disconnects.

LANGUAGE: python
CODE:
from fastapi import WebSocketDisconnect

----------------------------------------

TITLE: Sample FastAPI Application Code
DESCRIPTION: A basic FastAPI application with two endpoints: a root endpoint and an item endpoint with query parameters.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Handling Multiple File Uploads in FastAPI
DESCRIPTION: This example demonstrates how to handle multiple file uploads using a list of bytes or UploadFile objects.

LANGUAGE: Python
CODE:
async def create_files(files: list[bytes] = File()):

async def create_upload_files(files: list[UploadFile]):

----------------------------------------

TITLE: Running Uvicorn with Multiple Workers for FastAPI
DESCRIPTION: Command to run Uvicorn directly with multiple workers for a FastAPI application, specifying the host, port, and number of workers.

LANGUAGE: Bash
CODE:
$ uvicorn main:app --host 0.0.0.0 --port 8080 --workers 4

----------------------------------------

TITLE: Declaring Metadata for Path Parameter in FastAPI
DESCRIPTION: This code demonstrates how to declare metadata (title) for a path parameter using Path in FastAPI.

LANGUAGE: python
CODE:
item_id: Annotated[int, Path(title="The ID of the item to get")]

----------------------------------------

TITLE: Importing TestClient in Python for FastAPI Testing
DESCRIPTION: This code snippet demonstrates how to import the TestClient class from the fastapi.testclient module. TestClient is used for testing FastAPI applications by communicating directly with the FastAPI code without creating actual HTTP connections.

LANGUAGE: python
CODE:
from fastapi.testclient import TestClient

----------------------------------------

TITLE: Importing HTTPConnection in FastAPI
DESCRIPTION: This snippet shows how to import the HTTPConnection class from the fastapi.requests module. This class is used to define dependencies that are compatible with both HTTP and WebSocket connections.

LANGUAGE: python
CODE:
from fastapi.requests import HTTPConnection

----------------------------------------

TITLE: Importing Additional WebSocket Classes from FastAPI
DESCRIPTION: Shows how to import additional WebSocket-related classes (WebSocketDisconnect and WebSocketState) from FastAPI's websockets module.

LANGUAGE: python
CODE:
from fastapi.websockets import WebSocketDisconnect, WebSocketState

----------------------------------------

TITLE: Adding Metadata to Multiple File Uploads in FastAPI
DESCRIPTION: This snippet shows how to add metadata to multiple file uploads using the File class with UploadFile.

LANGUAGE: Python
CODE:
async def create_upload_files(
    files: list[UploadFile] = File(description="Multiple files as UploadFile"),
):

----------------------------------------

TITLE: Setting Minimum Value for Path Parameter in FastAPI
DESCRIPTION: Shows how to set a minimum value (greater than or equal to) for a path parameter using Path.

LANGUAGE: python
CODE:
item_id: int = Path(..., title="The ID of the item to get", ge=1)

----------------------------------------

TITLE: Importing WSGI Middleware in FastAPI
DESCRIPTION: Shows how to import the WSGI middleware for running WSGI applications alongside FastAPI.

LANGUAGE: python
CODE:
from fastapi.middleware.wsgi import WSGIMiddleware

----------------------------------------

TITLE: Importing APIRouter in FastAPI
DESCRIPTION: Shows how to import the APIRouter class from the FastAPI framework. This is the basic setup required before creating route handlers using APIRouter.

LANGUAGE: python
CODE:
from fastapi import APIRouter

----------------------------------------

TITLE: Importing FastAPI Security Tools in Python
DESCRIPTION: This code snippet demonstrates how to import various security tools from the fastapi.security module. These tools are used for implementing different authentication and authorization schemes in FastAPI applications.

LANGUAGE: python
CODE:
from fastapi.security import (
    APIKeyCookie,
    APIKeyHeader,
    APIKeyQuery,
    HTTPAuthorizationCredentials,
    HTTPBasic,
    HTTPBasicCredentials,
    HTTPBearer,
    HTTPDigest,
    OAuth2,
    OAuth2AuthorizationCodeBearer,
    OAuth2PasswordBearer,
    OAuth2PasswordRequestForm,
    OAuth2PasswordRequestFormStrict,
    OpenIdConnect,
    SecurityScopes,
)

----------------------------------------

TITLE: Running Code Formatting Script
DESCRIPTION: Bash script command to format and clean code, including auto-sorting imports

LANGUAGE: console
CODE:
$ bash scripts/format.sh

----------------------------------------

TITLE: Defining an async function
DESCRIPTION: Example of defining an asynchronous function using async def syntax. This allows the use of await inside the function.

LANGUAGE: Python
CODE:
async def get_burgers(number: int):
    # Prepare burgers asynchronously
    return burgers

----------------------------------------

TITLE: Importing Path from FastAPI in Python
DESCRIPTION: Shows how to import the Path class from the fastapi module.

LANGUAGE: python
CODE:
from fastapi import Path

----------------------------------------

TITLE: Checking Active Virtual Environment (Linux/macOS/Windows Bash)
DESCRIPTION: Verifies that the virtual environment is active by checking the path of the Python executable. This command should return the path to the Python binary within the virtual environment directory.

LANGUAGE: bash
CODE:
which python

----------------------------------------

TITLE: Installing Uvicorn ASGI Server
DESCRIPTION: This snippet shows how to install Uvicorn, a high-performance ASGI server, using pip. The 'standard' option installs recommended extra dependencies for better performance.

LANGUAGE: console
CODE:
$ pip install "uvicorn[standard]"

---> 100%

----------------------------------------

TITLE: Defining File Parameters in FastAPI
DESCRIPTION: This example demonstrates how to define a file parameter using the File class in a FastAPI route function.

LANGUAGE: Python
CODE:
async def create_file(file: bytes = File()):

----------------------------------------

TITLE: Defining a regular function
DESCRIPTION: Example of defining a regular (non-async) function using def syntax. This function cannot use await inside it.

LANGUAGE: Python
CODE:
def get_sequential_burgers(number: int):
    # Prepare burgers sequentially
    return burgers

----------------------------------------

TITLE: Excluding Query Parameters from OpenAPI Schema
DESCRIPTION: This snippet demonstrates how to exclude a query parameter from the OpenAPI schema and automatic documentation.

LANGUAGE: Python
CODE:
hidden_query: Union[str, None] = Query(default=None, include_in_schema=False)

----------------------------------------

TITLE: Importing FastAPI Application (Python)
DESCRIPTION: This snippet shows how to import a FastAPI application from another file. This is used to explain why the __name__ == "__main__" pattern is useful for preventing unintended server execution when importing.

LANGUAGE: python
CODE:
from myapp import app

# Some more code

----------------------------------------

TITLE: Settings with Environment File Configuration
DESCRIPTION: Example of a dotenv file configuration for storing environment variables.

LANGUAGE: bash
CODE:
ADMIN_EMAIL="deadpool@example.com"
APP_NAME="ChimichangApp"

----------------------------------------

TITLE: Reading Environment Variables in Python
DESCRIPTION: This snippet demonstrates how to read an environment variable in Python using os.getenv(). It also shows how to provide a default value if the environment variable is not set.

LANGUAGE: python
CODE:
import os

name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")

----------------------------------------

TITLE: Including Scopes in JWT Token Response
DESCRIPTION: Modifies the token path operation to include requested scopes in the JWT token response.

LANGUAGE: Python
CODE:
access_token = create_access_token(
    data={"sub": user.username, "scopes": form_data.scopes},
    expires_delta=access_token_expires
)

----------------------------------------

TITLE: Creating Separate Input and Output Models in FastAPI
DESCRIPTION: Demonstrates creating separate input and output Pydantic models to filter sensitive data from API responses.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel, EmailStr

app = FastAPI()

class UserIn(BaseModel):
    username: str
    password: str
    email: EmailStr
    full_name: str | None = None

class UserOut(BaseModel):
    username: str
    email: EmailStr
    full_name: str | None = None

@app.post("/user/", response_model=UserOut)
def create_user(user: UserIn):
    return user

----------------------------------------

TITLE: Using Regex with Query Parameter
DESCRIPTION: This example illustrates how to use a regular expression to validate a query parameter's value.

LANGUAGE: python
CODE:
q: Union[str, None] = Query(default=None, min_length=3, max_length=50, regex="^fixedquery$")

----------------------------------------

TITLE: Creating a FastAPI Application in Python
DESCRIPTION: Example of a basic FastAPI application with two endpoints: a root endpoint and an item endpoint with query parameters.

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI

app = FastAPI()


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}

----------------------------------------

TITLE: Testing WebSocket Connection with TestClient in FastAPI
DESCRIPTION: This code snippet demonstrates how to use the TestClient to test a WebSocket connection in a FastAPI application. It uses a 'with' statement to establish the connection and perform assertions on the WebSocket communication.

LANGUAGE: python
CODE:
with client.websocket_connect("/ws") as websocket:
    data = websocket.receive_json()
    assert data == {"msg": "Hello WebSocket"}
    websocket.send_json({"msg": "Hello WebSocket"})

----------------------------------------

TITLE: Defining Shutdown Event in FastAPI (Deprecated)
DESCRIPTION: This snippet demonstrates how to define a shutdown event handler in FastAPI using the deprecated method. It writes a log message to a file when the application is shutting down.

LANGUAGE: Python
CODE:
@app.on_event("shutdown")
def shutdown_event():
    with open("log.txt", mode="a") as log:
        log.write("Application shutdown")

----------------------------------------

TITLE: Declaring Response Type in FastAPI Path Operation Function
DESCRIPTION: Demonstrates how to declare a response type using a return type annotation on a FastAPI path operation function.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/")
def create_item(item: Item) -> Item:
    return item

@app.get("/items/")
def read_items() -> list[Item]:
    return [
        Item(name="Portal Gun", price=42.0),
        Item(name="Plumbus", price=32.0)
    ]

----------------------------------------

TITLE: Using response_model_exclude_unset in FastAPI Path Operation
DESCRIPTION: Demonstrates how to use response_model_exclude_unset to exclude default values from the API response.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel
from typing import List

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float = 10.5
    tags: List[str] = []

items = {
    "foo": {"name": "Foo", "price": 50.2},
    "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
    "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
}

@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)
def read_item(item_id: str):
    return items[item_id]

----------------------------------------

TITLE: Deprecating a Query Parameter
DESCRIPTION: This example illustrates how to mark a query parameter as deprecated in the API documentation.

LANGUAGE: python
CODE:
q: Union[str, None] = Query(
    default=None,
    alias="item-query",
    title="Query string",
    description="Query string for the items to search in the database that have a good match",
    min_length=3,
    max_length=50,
    regex="^fixedquery$",
    deprecated=True,
)

----------------------------------------

TITLE: Importing Cookie Class in FastAPI (Python)
DESCRIPTION: This snippet shows how to import the Cookie class from FastAPI, which is necessary for defining cookie parameters in route functions.

LANGUAGE: python
CODE:
from fastapi import Cookie

----------------------------------------

TITLE: Python Template Context
DESCRIPTION: Example of passing context data to Jinja2 template

LANGUAGE: python
CODE:
{"id": id}

----------------------------------------

TITLE: Python Template Context
DESCRIPTION: Example of passing context data to Jinja2 template

LANGUAGE: python
CODE:
{"id": id}

----------------------------------------

TITLE: Handling Arbitrary Dict Bodies in FastAPI
DESCRIPTION: Demonstrates how to define an endpoint that accepts a dict with arbitrary keys of one type and values of another type.

LANGUAGE: Python
CODE:
weights: Dict[int, float]

----------------------------------------

TITLE: Defining List Field in Pydantic Model for FastAPI
DESCRIPTION: Shows how to define a list field in a Pydantic model for use in FastAPI. The 'tags' field is defined as a list without specifying the element type.

LANGUAGE: python
CODE:
tags: list

----------------------------------------

TITLE: Importing HTTPException in FastAPI
DESCRIPTION: Import the HTTPException class from fastapi to handle HTTP errors.

LANGUAGE: python
CODE:
from fastapi import HTTPException

----------------------------------------

TITLE: Ordering Parameters with Path in FastAPI (Python 3.8)
DESCRIPTION: This snippet shows how to order parameters when using Path for a path parameter and a required query parameter in Python 3.8 without Annotated.

LANGUAGE: python
CODE:
async def read_items(q: str, item_id: int = Path(title="The ID of the item to get")):

----------------------------------------

TITLE: Creating Top-Level FastAPI Application in Python
DESCRIPTION: This snippet demonstrates how to create the main FastAPI application with its path operations.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/app")
def read_main():
    return {"message": "Hello World from main app"}

----------------------------------------

TITLE: Basic FastAPI Server Process Example
DESCRIPTION: Example showing the basic way to run a FastAPI server using the fastapi command which internally uses Uvicorn. This is useful for development but not recommended for production.

LANGUAGE: bash
CODE:
fastapi run

----------------------------------------

TITLE: Declaring List with Subtype in Pydantic Model for FastAPI
DESCRIPTION: Demonstrates how to declare a list field with a specific subtype (string) in a Pydantic model for FastAPI. This provides more type safety and better documentation.

LANGUAGE: python
CODE:
tags: List[str]

----------------------------------------

TITLE: Adding Custom Headers to HTTPException
DESCRIPTION: Add custom headers to an HTTPException when raising it in a FastAPI route.

LANGUAGE: python
CODE:
raise HTTPException(status_code=404, detail="Item not found", headers={"X-Error": "There goes my error"})

----------------------------------------

TITLE: Installing FastAPI and dependencies
DESCRIPTION: Commands to install FastAPI and its dependencies using pip

LANGUAGE: bash
CODE:
$ pip install "fastapi[standard]"

---> 100%

$ pip install "uvicorn[standard]"

---> 100%

----------------------------------------

TITLE: Basic FastAPI Application Setup
DESCRIPTION: Basic FastAPI application with a single endpoint for creating items, demonstrating model usage for request and response schemas.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    price: float

class ResponseMessage(BaseModel):
    message: str

@app.post("/items/", response_model=ResponseMessage)
async def create_item(item: Item):
    return {"message": f"Created item {item.name}"}

----------------------------------------

TITLE: Declaring Scopes for Path Operations and Dependencies
DESCRIPTION: Uses Security instead of Depends to declare required scopes for path operations and dependencies.

LANGUAGE: Python
CODE:
current_user: User = Depends(get_current_active_user)

@app.get("/users/me/items/")
async def read_own_items(
    current_user: User = Security(get_current_active_user, scopes=["items"])
):
    return [{"item_id": "Foo", "owner": current_user.username}]

----------------------------------------

TITLE: Defining Nested Pydantic Models for FastAPI
DESCRIPTION: Illustrates how to define nested Pydantic models for complex JSON structures in FastAPI. An 'Image' model is defined and used within an 'Item' model.

LANGUAGE: python
CODE:
class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    image: Image | None = None

----------------------------------------

TITLE: Setting Environment Variables in Bash (Linux, macOS)
DESCRIPTION: This snippet shows how to set an environment variable in Bash and use it with the echo command.

LANGUAGE: bash
CODE:
$ export MY_NAME="Wade Wilson"
$ echo "Hello $MY_NAME"

Hello Wade Wilson

----------------------------------------

TITLE: Adding Tags to FastAPI Path Operations
DESCRIPTION: Demonstrates how to add tags to FastAPI path operations for better API organization and documentation.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/", tags=["items"])
async def get_items():
    return ["Item 1", "Item 2"]

@app.get("/users/", tags=["users"])
async def get_users():
    return ["User 1", "User 2"]

@app.get("/elements/", tags=["items"])
async def get_elements():
    return ["Element 1", "Element 2"]

----------------------------------------

TITLE: Customizing OpenAPI URL in FastAPI
DESCRIPTION: Shows how to change the URL where the OpenAPI schema is served in a FastAPI application.

LANGUAGE: python
CODE:
app = FastAPI(openapi_url="/api/v1/openapi.json")

----------------------------------------

TITLE: Importing Pydantic BaseModel
DESCRIPTION: Shows how to import the BaseModel class from Pydantic, which is used for creating data models.

LANGUAGE: python
CODE:
from pydantic import BaseModel

----------------------------------------

TITLE: Using Special Types in Pydantic Models for FastAPI
DESCRIPTION: Demonstrates the use of special types like HttpUrl in Pydantic models for FastAPI. This provides additional validation for URL fields.

LANGUAGE: python
CODE:
from pydantic import BaseModel, HttpUrl

class Image(BaseModel):
    url: HttpUrl
    name: str

----------------------------------------

TITLE: Setting Environment Variables in PowerShell (Windows)
DESCRIPTION: This snippet demonstrates how to set an environment variable in Windows PowerShell and use it with the echo command.

LANGUAGE: powershell
CODE:
$ $Env:MY_NAME = "Wade Wilson"
$ echo "Hello $Env:MY_NAME"

Hello Wade Wilson

----------------------------------------

TITLE: Disabling Underscore to Hyphen Conversion in Headers
DESCRIPTION: Shows how to disable the automatic conversion of underscores to hyphens in header names by setting convert_underscores to False.

LANGUAGE: python
CODE:
async def read_items(strange_header: str | None = Header(default=None, convert_underscores=False))

----------------------------------------

TITLE: Declaring Form Fields with Pydantic Models in FastAPI
DESCRIPTION: This code demonstrates how to use a Pydantic model to declare form fields and use them in a FastAPI route. It defines a UserForm model with username and password fields.

LANGUAGE: python
CODE:
class UserForm(BaseModel):
    username: str
    password: str

@app.post("/login/")
async def login(form: Annotated[UserForm, Form()]):

----------------------------------------

TITLE: Declaring OAuth2 Security Scheme with Scopes in FastAPI
DESCRIPTION: Defines an OAuth2 security scheme with 'me' and 'items' scopes using the OAuth2PasswordBearer class.

LANGUAGE: Python
CODE:
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={"me": "Read information about the current user.", "items": "Read items."}
)

----------------------------------------

TITLE: Defining List of Nested Models in Pydantic for FastAPI
DESCRIPTION: Shows how to define a list of nested Pydantic models in FastAPI. The 'images' field is a list of 'Image' models.

LANGUAGE: python
CODE:
images: List[Image] = []

----------------------------------------

TITLE: Installing Jinja2 Dependencies
DESCRIPTION: Command to install Jinja2 template engine using pip package manager

LANGUAGE: console
CODE:
$ pip install jinja2

---> 100%

----------------------------------------

TITLE: Importing FastAPI App in Python
DESCRIPTION: This snippet shows the Python equivalent of the import string used in the Uvicorn command. It demonstrates how to import the FastAPI app object from the main module.

LANGUAGE: python
CODE:
from main import app

----------------------------------------

TITLE: Creating Translation Discussion Template in Markdown
DESCRIPTION: Template for creating new language translation discussions with tracking information.

LANGUAGE: markdown
CODE:
## Bosnian translations

This is the issue to track translations of the docs to Bosnian. 🚀

Here are the [PRs to review with the label `lang-bs`](https://github.com/fastapi/fastapi/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc+label%3Alang-bs+label%3A%22awaiting-review%22). 🤓

----------------------------------------

TITLE: Installing python-multipart Dependency for FastAPI Forms
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling form data in FastAPI.

LANGUAGE: console
CODE:
$ pip install python-multipart

----------------------------------------

TITLE: Importing FastAPI Security Function
DESCRIPTION: Demonstrates importing the Security function from FastAPI, which extends Depends() functionality with OAuth2 scope support for authentication and authorization.

LANGUAGE: python
CODE:
from fastapi import Security

----------------------------------------

TITLE: Creating Deeply Nested Models in Pydantic for FastAPI
DESCRIPTION: Illustrates the creation of deeply nested Pydantic models for complex JSON structures in FastAPI. Models include Offer, Item, and Image with various relationships.

LANGUAGE: python
CODE:
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]

----------------------------------------

TITLE: HTML Template Output
DESCRIPTION: Example of rendered HTML output with template variables

LANGUAGE: html
CODE:
Item ID: 42

----------------------------------------

TITLE: Running Test Coverage Script
DESCRIPTION: Bash script command to run tests and generate HTML coverage reports

LANGUAGE: console
CODE:
$ bash scripts/test-cov-html.sh

----------------------------------------

TITLE: Configuring Translation MkDocs YAML
DESCRIPTION: Basic YAML configuration for language translations that inherits from the English documentation setup.

LANGUAGE: yaml
CODE:
INHERIT: ../en/mkdocs.yml

----------------------------------------

TITLE: Installing python-multipart for Form Handling in FastAPI
DESCRIPTION: This snippet shows how to install the python-multipart package, which is required for handling form data in FastAPI. It uses pip to install the package in a virtual environment.

LANGUAGE: console
CODE:
$ pip install python-multipart

----------------------------------------

TITLE: Using await in an asynchronous path operation function
DESCRIPTION: Example of using await within an asynchronous FastAPI path operation function.

LANGUAGE: Python
CODE:
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers

----------------------------------------

TITLE: Handling Pure List Request Bodies in FastAPI
DESCRIPTION: Demonstrates how to handle request bodies that are pure lists in FastAPI. The function expects a list of Image objects directly.

LANGUAGE: python
CODE:
@app.post("/images/multiple/")
async def create_multiple_images(images: List[Image]):
    return images

----------------------------------------

TITLE: Using Set Type in Pydantic Model for FastAPI
DESCRIPTION: Shows how to use a set type for unique elements in a Pydantic model for FastAPI. This ensures that the 'tags' field contains only unique strings.

LANGUAGE: python
CODE:
tags: Set[str]

----------------------------------------

TITLE: Installing Development Dependencies with pip
DESCRIPTION: Command to install required packages for FastAPI development using pip and requirements.txt

LANGUAGE: console
CODE:
$ pip install -r requirements.txt

---> 100%

----------------------------------------

TITLE: Installing HTTPX for Testing
DESCRIPTION: Command to install the HTTPX library required for TestClient functionality

LANGUAGE: console
CODE:
$ pip install httpx

----------------------------------------

TITLE: Type Hints with String Concatenation
DESCRIPTION: Example showing type hints with string operations and age conversion.

LANGUAGE: python
CODE:
def get_name_with_age(name: str, age: int):
    return f"{name} is {str(age)} years old"

----------------------------------------

TITLE: Setting Max Length for Query Parameter
DESCRIPTION: This example demonstrates how to set a maximum length constraint on a query parameter using the Query class.

LANGUAGE: python
CODE:
q: Union[str, None] = Query(default=None, max_length=50)

----------------------------------------

TITLE: Declaring Cookie Parameters in FastAPI Route (Python)
DESCRIPTION: This example demonstrates how to declare a cookie parameter in a FastAPI route function. It shows the syntax for defining the parameter name, type, and using the Cookie class.

LANGUAGE: python
CODE:
async def read_items(ads_id: Annotated[str | None, Cookie()] = None):

----------------------------------------

TITLE: Required Query Parameters with Validation
DESCRIPTION: Example showing how to make a query parameter required while applying validation rules.

LANGUAGE: Python
CODE:
from fastapi import FastAPI, Query
from typing import Annotated

app = FastAPI()

@app.get("/items/")
async def read_items(q: Annotated[str, Query(min_length=3)]):
    results = {"items": ["Foo", "Bar"]}
    if q:
        results.update({"q": q})
    return results

----------------------------------------

TITLE: Installing Packages from requirements.txt with pip
DESCRIPTION: Installs all packages listed in the requirements.txt file using pip. This command should be run after activating the virtual environment.

LANGUAGE: bash
CODE:
pip install -r requirements.txt

----------------------------------------

TITLE: Importing Pydantic Field
DESCRIPTION: Shows how to import the Field class from Pydantic for use with FastAPI models.

LANGUAGE: python
CODE:
from pydantic import Field

----------------------------------------

TITLE: Using a Nested Model as a Field Type
DESCRIPTION: Shows how to use a previously defined Pydantic model as a field type in another model.

LANGUAGE: Python
CODE:
image: Image

----------------------------------------

TITLE: Adding Min Length to Query Parameter
DESCRIPTION: This snippet shows how to add both minimum and maximum length constraints to a query parameter.

LANGUAGE: python
CODE:
q: Union[str, None] = Query(default=None, min_length=3, max_length=50)

----------------------------------------

TITLE: Returning HTML Response Directly in FastAPI
DESCRIPTION: Demonstrates how to return an HTMLResponse object directly from a FastAPI route function.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/")
async def read_items():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)

----------------------------------------

TITLE: Multi-Worker Uvicorn Configuration
DESCRIPTION: Example of running Uvicorn with multiple worker processes for better resource utilization and concurrency handling.

LANGUAGE: bash
CODE:
uvicorn --workers

----------------------------------------

TITLE: Adding .gitignore for Virtual Environment
DESCRIPTION: Creates a .gitignore file within the .venv directory to exclude all its contents from version control. This prevents unnecessary files from being tracked by Git.

LANGUAGE: bash
CODE:
echo "*" > .venv/.gitignore

----------------------------------------

TITLE: Scope-Protected Path Operation Declaration
DESCRIPTION: Shows how to declare required scopes for path operations using Security dependency with a list of required scopes.

LANGUAGE: python
CODE:
async def read_own_items(
    current_user: User = Security(get_current_active_user, scopes=["items"])
):
    return [{"item_id": "Foo", "owner": current_user.username}]

----------------------------------------

TITLE: Returning a List of Models in FastAPI
DESCRIPTION: This example demonstrates how to define a FastAPI route that returns a list of Pydantic models. It uses typing.List to specify a response model that is a list of Item objects.

LANGUAGE: python
CODE:
from typing import List
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str

@app.get("/items/", response_model=List[Item])
async def read_items():
    return [
        {"name": "Portal Gun", "description": "Device to create portals."},
        {"name": "Plumbus", "description": "Common household item."},
    ]

----------------------------------------

TITLE: Declaring Required Query Parameter
DESCRIPTION: This example shows how to declare a required query parameter using the Query class without a default value.

LANGUAGE: python
CODE:
q: str = Query(min_length=3)

----------------------------------------

TITLE: Using HTMLResponse with Auto-Documentation in FastAPI
DESCRIPTION: Shows how to use HTMLResponse as the response_class while still returning the content directly, enabling automatic API documentation.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

def generate_html_response():
    html_content = """
    <html>
        <head>
            <title>Some HTML in here</title>
        </head>
        <body>
            <h1>Look ma! HTML!</h1>
        </body>
    </html>
    """
    return HTMLResponse(content=html_content, status_code=200)

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return generate_html_response()

----------------------------------------

TITLE: Returning Custom XML Response in FastAPI
DESCRIPTION: This example shows how to return a custom XML response using FastAPI by creating a Response object with XML content and specifying the media type.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import Response

app = FastAPI()


@app.get("/legacy/")
def get_legacy_data():
    data = """
    <?xml version="1.0"?>
    <shampoo>
    <Header>
        <Company>ACME Shampoo Company</Company>
    </Header>
    <Ingredients>
        <Ingredient>Water</Ingredient>
        <Ingredient>Sodium Laureth Sulfate</Ingredient>
    </Ingredients>
    </shampoo>
    """
    return Response(content=data, media_type="application/xml")

----------------------------------------

TITLE: Checking Active Virtual Environment (Windows PowerShell)
DESCRIPTION: Verifies that the virtual environment is active in Windows PowerShell by checking the path of the Python executable. This command should return the path to the Python binary within the virtual environment directory.

LANGUAGE: powershell
CODE:
Get-Command python

----------------------------------------

TITLE: Declaring Examples in Pydantic V2 Model
DESCRIPTION: Shows how to declare example data in a Pydantic V2 model using model_config with json_schema_extra

LANGUAGE: python
CODE:
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    model_config = {
        "json_schema_extra": {
            "examples": [
                {
                    "name": "Foo",
                    "description": "A very nice Item",
                    "price": 35.4,
                    "tax": 3.2
                }
            ]
        }
    }

----------------------------------------

TITLE: Basic FastAPI Application Setup
DESCRIPTION: Initial setup of a FastAPI application with a basic route handler.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]

----------------------------------------

TITLE: Using Alias for Query Parameter
DESCRIPTION: This snippet shows how to use an alias for a query parameter, allowing a different name in the URL than in the Python code.

LANGUAGE: python
CODE:
q: Union[str, None] = Query(default=None, alias="item-query")

----------------------------------------

TITLE: Configuring Python Dependencies for FastAPI Development
DESCRIPTION: Requirements specification file that defines Python package dependencies with version constraints for FastAPI development environment. Includes packages for testing (pytest), code coverage (coverage), type checking (mypy), and various utilities.

LANGUAGE: plaintext
CODE:
-e .[all]
-r requirements-docs-tests.txt
pytest >=7.1.3,<9.0.0
coverage[toml] >= 6.5.0,< 8.0
mypy ==1.8.0
dirty-equals ==0.8.0
sqlmodel==0.0.23
flask >=1.1.2,<4.0.0
anyio[trio] >=3.2.1,<5.0.0
PyJWT==2.8.0
pyyaml >=5.3.1,<7.0.0
passlib[bcrypt] >=1.7.2,<2.0.0
inline-snapshot==0.19.3
# types
types-ujson ==5.10.0.20240515
types-orjson ==3.6.2

----------------------------------------

TITLE: Modifying Response Status Code in FastAPI Endpoint
DESCRIPTION: Demonstrates how to use a Response parameter in a FastAPI path operation function to dynamically set the status code. Shows setting a 201 CREATED status when creating new data while maintaining the ability to use response_model for data filtering.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Response\n\napp = FastAPI()\n\n\n@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, response: Response):\n    if item_id not in items:\n        items[item_id] = {\"id\": item_id, \"value\": \"Fake value\"}\n        response.status_code = 201\n    return items[item_id]

----------------------------------------

TITLE: Installing FastAPI Package
DESCRIPTION: Pip command for installing FastAPI with standard optional dependencies. The standard installation includes commonly used extra features.

LANGUAGE: console
CODE:
$ pip install "fastapi[standard]"

---> 100%

----------------------------------------

TITLE: Making a GET request with Requests
DESCRIPTION: Example of how to make a GET request using the Requests library in Python.

LANGUAGE: Python
CODE:
response = requests.get("http://example.com/some/url")

----------------------------------------

TITLE: Using a regular library in FastAPI
DESCRIPTION: Example of using a regular (non-async) library in a FastAPI path operation function. The function can be declared with regular def syntax.

LANGUAGE: Python
CODE:
@app.get('/')
def results():
    results = some_library()
    return results

----------------------------------------

TITLE: Using SecurityScopes in Dependency Functions
DESCRIPTION: Demonstrates how to use the SecurityScopes class to access and validate scopes in dependency functions.

LANGUAGE: Python
CODE:
async def get_current_user(
    security_scopes: SecurityScopes,
    token: str = Depends(oauth2_scheme)
):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = f"Bearer"
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": authenticate_value},
    )
    # ... (token validation and scope checking logic)

----------------------------------------

TITLE: Specifying FastAPI Development Dependencies
DESCRIPTION: This snippet lists the additional dependencies required for FastAPI development, including all optional dependencies, test requirements, documentation requirements, pre-commit hooks, and a tool for generating screenshots.

LANGUAGE: plaintext
CODE:
-e .[all]
-r requirements-tests.txt
-r requirements-docs.txt
pre-commit >=2.17.0,<5.0.0
# For generating screenshots
playwright

----------------------------------------

TITLE: Combining Predefined and Custom Responses in FastAPI
DESCRIPTION: Shows how to combine predefined responses with custom ones using Python dictionary unpacking.

LANGUAGE: python
CODE:
responses_404 = {\n    404: {\n        "model": Message,\n        "description": "The item was not found",\n    }\n}\n\n@app.get(\"/items/{item_id}\", response_model=Item, responses={**responses_404})

----------------------------------------

TITLE: Running FastAPI Development Server
DESCRIPTION: Command to run the FastAPI development server using the FastAPI CLI.

LANGUAGE: bash
CODE:
fastapi dev main.py

----------------------------------------

TITLE: Generic Types with Python 3.9+
DESCRIPTION: Example of generic type hints using built-in list type in Python 3.9+.

LANGUAGE: python
CODE:
items: list[str] = ["foo", "bar", "baz"]

----------------------------------------

TITLE: Adding Dependencies to FastAPI Route Decorator
DESCRIPTION: This snippet demonstrates how to add a list of dependencies to a FastAPI route decorator using the 'dependencies' parameter.

LANGUAGE: python
CODE:
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async def read_items():
    return [{"item": "Foo"}, {"item": "Bar"}]

----------------------------------------

TITLE: Validating Token Scopes
DESCRIPTION: Checks if the token's scopes include all the required scopes for the current request.

LANGUAGE: Python
CODE:
for scope in security_scopes.scopes:
    if scope not in token_scopes:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Not enough permissions",
            headers={"WWW-Authenticate": authenticate_value},
        )

----------------------------------------

TITLE: Specifying FastAPI Project Dependencies in YAML
DESCRIPTION: This YAML configuration specifies the required dependencies for the FastAPI project. It includes httpx for mkdocstrings and tests, with a version constraint of >=0.23.0 and <0.28.0. It also specifies ruff version 0.9.4 for linting and generating documentation versions.

LANGUAGE: yaml
CODE:
# For mkdocstrings and tests
httpx >=0.23.0,<0.28.0
# For linting and generating docs versions
ruff ==0.9.4

----------------------------------------

TITLE: Defining FastAPI Endpoints with Dataclasses in Python
DESCRIPTION: This snippet shows how to use standard Python dataclasses to define request and response models in a FastAPI application. It demonstrates creating a dataclass and using it as a parameter type and return type in a FastAPI route.

LANGUAGE: python
CODE:
from dataclasses import dataclass
from fastapi import FastAPI

app = FastAPI()

@dataclass
class Item:
    name: str
    price: float
    is_offer: bool = None

@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}

----------------------------------------

TITLE: Running FastAPI in Development Mode with CLI
DESCRIPTION: This snippet demonstrates how to use the 'fastapi dev' command to start a FastAPI application in development mode. It shows the console output, including server information, documentation URL, and log messages.

LANGUAGE: console
CODE:
$ fastapi dev main.py

  FastAPI  Starting development server 🚀

             Searching for package file structure from directories with
             __init__.py files
             Importing from /home/user/code/awesomeapp

   module  🐍 main.py

     code  Importing the FastAPI app object from the module with the
             following code:

             from main import app

      app  Using import string: main:app

   server  Server started at http://127.0.0.1:8000
   server  Documentation at http://127.0.0.1:8000/docs

      tip  Running in development mode, for production use:
             fastapi run

             Logs:

     INFO  Will watch for changes in these directories:
             ['/home/user/code/awesomeapp']
     INFO  Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to
             quit)
     INFO  Started reloader process [383138] using WatchFiles
     INFO  Started server process [383153]
     INFO  Waiting for application startup.
     INFO  Application startup complete.

----------------------------------------

TITLE: Dict Type Hint in Python
DESCRIPTION: Declaring a function parameter as a dictionary with specific key and value types.

LANGUAGE: Python
CODE:
from typing import Dict

def process_items(prices: Dict[str, float]):
    for item_name, item_price in prices.items():
        print(item_name)
        print(item_price)

----------------------------------------

TITLE: Importing Header in FastAPI
DESCRIPTION: Shows how to import the Header class from FastAPI module for handling header parameters.

LANGUAGE: python
CODE:
from fastapi import Header

----------------------------------------

TITLE: Specifying Python Package Dependencies for FastAPI Project
DESCRIPTION: This snippet lists the required Python packages and their version constraints for a FastAPI project. It includes PyGithub for GitHub integration, pydantic for data validation, httpx for HTTP requests, pyyaml for YAML processing, and smokeshow for testing.

LANGUAGE: plaintext
CODE:
PyGithub>=2.3.0,<3.0.0
pydantic>=2.5.3,<3.0.0
pydantic-settings>=2.1.0,<3.0.0
httpx>=0.27.0,<0.28.0
pyyaml >=5.3.1,<7.0.0
smokeshow

----------------------------------------

TITLE: OAuth2 Security Scheme Definition in FastAPI
DESCRIPTION: Defines the OAuth2 security scheme with available scopes 'me' and 'items'. The scopes parameter receives a dictionary with scope names as keys and descriptions as values.

LANGUAGE: python
CODE:
oauth2_scheme = OAuth2PasswordBearer(
    tokenUrl="token",
    scopes={"me": "Read information about the current user.", "items": "Read items."}
)

----------------------------------------

TITLE: Union Type Hint in Python 3.10+
DESCRIPTION: Declaring a function parameter that can be either an integer or a string using the new union syntax in Python 3.10+.

LANGUAGE: Python
CODE:
def process_item(item: int | str):
    print(item)

----------------------------------------

TITLE: Using Custom Route Class in FastAPI Router
DESCRIPTION: This snippet shows how to set a custom route class (TimedRoute) for an APIRouter in FastAPI. All path operations under this router will use the custom route class, adding timing information to the responses.

LANGUAGE: python
CODE:
router = APIRouter(route_class=TimedRoute)

----------------------------------------

TITLE: サブモデルのリストを持つ属性の定義 (Python)
DESCRIPTION: Itemモデル内でImageモデルのリストを定義します。これにより、複数の画像オブジェクトを含むJSONボディを処理できます。

LANGUAGE: Python
CODE:
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None

----------------------------------------

TITLE: Jinja2 Template HTML Structure
DESCRIPTION: Example HTML template using Jinja2 syntax to display item details and include static resources

LANGUAGE: jinja
CODE:
Item ID: {{ id }}

----------------------------------------

TITLE: Using async function in FastAPI path operation
DESCRIPTION: Example of using an async function in a FastAPI path operation. The path operation function must be declared as async def to use await inside it.

LANGUAGE: Python
CODE:
@app.get('/burgers')
async def read_burgers():
    burgers = await get_burgers(2)
    return burgers

----------------------------------------

TITLE: Declaring Path and Query Parameters with Kwargs in FastAPI
DESCRIPTION: Demonstrates how to use *args to allow declaring path parameters after query parameters in FastAPI.

LANGUAGE: python
CODE:
async def read_items(*, q: str, item_id: int = Path(..., title="The ID of the item to get")):

----------------------------------------

TITLE: セット型フィールドの使用 (Python)
DESCRIPTION: タグをユニークな文字列のセットとして定義します。これにより、重複したタグが自動的に削除されます。

LANGUAGE: Python
CODE:
from typing import Set

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()

----------------------------------------

TITLE: Dict Unpacking in Python
DESCRIPTION: Shows how to unpack a dictionary into a Pydantic model constructor with additional parameters.

LANGUAGE: python
CODE:
UserInDB(**user_dict)

# Equivalent to:
UserInDB(
    username = user_dict["username"],
    password = user_dict["password"],
    email = user_dict["email"],
    full_name = user_dict["full_name"]
)

----------------------------------------

TITLE: Database Engine Configuration
DESCRIPTION: Creates SQLite database engine with configuration for multi-thread support.

LANGUAGE: python
CODE:
from sqlmodel import create_engine

sqlite_url = "sqlite:///database.db"
engine = create_engine(sqlite_url, echo=True, connect_args={"check_same_thread": False})

----------------------------------------

TITLE: Validating Float Path Parameters in FastAPI
DESCRIPTION: Shows how to validate float path parameters with specific range constraints using Path.

LANGUAGE: python
CODE:
size: float = Path(..., gt=0, lt=10.5)

----------------------------------------

TITLE: Defining a List Field in a Pydantic Model
DESCRIPTION: Demonstrates how to define a simple list field in a Pydantic model without specifying the type of list elements.

LANGUAGE: Python
CODE:
tags: list

----------------------------------------

TITLE: Defining a synchronous function
DESCRIPTION: Example of defining a synchronous function using regular def syntax.

LANGUAGE: Python
CODE:
def get_sequential_burgers(number: int):
    # Do something sequential to create burgers
    return burgers

----------------------------------------

TITLE: Basic Model Definition in Python
DESCRIPTION: Demonstrates how to use Pydantic's .dict() method to convert model data and unpack it into new objects.

LANGUAGE: python
CODE:
user_in = UserIn(username="john", password="secret", email="john.doe@example.com")
user_dict = user_in.dict()
print(user_dict)

----------------------------------------

TITLE: Adding Metadata to File Uploads in FastAPI
DESCRIPTION: This snippet shows how to add metadata to file uploads using the File class with UploadFile.

LANGUAGE: Python
CODE:
async def create_file(file: bytes = File(description="A file read as bytes")):

async def create_upload_file(file: UploadFile = File(description="A file read as UploadFile")):

----------------------------------------

TITLE: Tuple and Set Type Hints in Python
DESCRIPTION: Declaring function parameters as tuple and set with specific types.

LANGUAGE: Python
CODE:
from typing import Tuple, Set

def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):
    return items_t, items_s

----------------------------------------

TITLE: ネストされたPydanticモデルの定義 (Python)
DESCRIPTION: Imageモデルを定義し、それをItemモデル内で使用します。これにより、深くネストされたJSONオブジェクトを表現できます。

LANGUAGE: Python
CODE:
class Image(BaseModel):
    url: str
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    image: Image | None = None

----------------------------------------

TITLE: Using await with third-party libraries in FastAPI
DESCRIPTION: Example of using await with a third-party library in a FastAPI path operation function.

LANGUAGE: Python
CODE:
@app.get('/')
async def read_results():
    results = await some_library()
    return results

----------------------------------------

TITLE: Defining Lists of Submodels in Pydantic
DESCRIPTION: Shows how to define a field as a list of submodels, allowing for more complex nested structures.

LANGUAGE: Python
CODE:
images: List[Image]

----------------------------------------

TITLE: Handling Arbitrary Dict Responses in FastAPI
DESCRIPTION: This code shows how to define a FastAPI route that returns an arbitrary dictionary. It uses typing.Dict to specify a response model with string keys and values of any type.

LANGUAGE: python
CODE:
from typing import Dict
from fastapi import FastAPI

app = FastAPI()

@app.get("/keyword-weights/", response_model=Dict[str, float])
async def read_keyword_weights():
    return {"foo": 2.3, "bar": 3.4}

----------------------------------------

TITLE: Optional Type Hint in Python
DESCRIPTION: Declaring a function parameter that can be a string or None.

LANGUAGE: Python
CODE:
from typing import Optional

def say_hi(name: Optional[str] = None):
    if name is not None:
        print(f"Hey {name}!")
    else:
        print("Hello World")

----------------------------------------

TITLE: Using Set Type for Unique Items in Pydantic Model
DESCRIPTION: Demonstrates how to use the Set type for fields that should contain unique items, such as tags.

LANGUAGE: Python
CODE:
from typing import Set

# ...

tags: Set[str]

----------------------------------------

TITLE: Defining a GET endpoint with FastAPI
DESCRIPTION: Example of defining a GET endpoint in FastAPI, showing the similarity to Requests syntax.

LANGUAGE: Python
CODE:
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Using Special Types for Validation in Pydantic
DESCRIPTION: Demonstrates the use of special Pydantic types like HttpUrl for additional validation and documentation.

LANGUAGE: Python
CODE:
from pydantic import HttpUrl

class Image:
    url: HttpUrl
    name: str

----------------------------------------

TITLE: Synchronous Function Definition Example
DESCRIPTION: Example showing how to define a synchronous function that returns burgers.

LANGUAGE: Python
CODE:
def get_sequential_burgers(number: int):
    # Do some sequential stuff to create the burgers
    return burgers

----------------------------------------

TITLE: Specifying FastAPI Documentation Dependencies
DESCRIPTION: This requirements file lists all the necessary Python packages and their versions for building and testing FastAPI documentation. It includes MkDocs with Material theme, various MkDocs plugins, and tools for processing Python code and documentation.

LANGUAGE: plaintext
CODE:
-e .
-r requirements-docs-tests.txt
mkdocs-material==9.6.1
mdx-include >=1.4.1,<2.0.0
mkdocs-redirects>=1.2.1,<1.3.0
typer == 0.12.5
pyyaml >=5.3.1,<7.0.0
# For Material for MkDocs, Chinese search
jieba==0.42.1
# For image processing by Material for MkDocs
pillow==11.1.0
# For image processing by Material for MkDocs
cairosvg==2.7.1
mkdocstrings[python]==0.26.1
griffe-typingdoc==0.2.7
# For griffe, it formats with black
black==25.1.0
mkdocs-macros-plugin==1.3.7
markdown-include-variants==0.0.4

----------------------------------------

TITLE: 任意のdict型リクエストボディの定義 (Python)
DESCRIPTION: キーと値の型を指定した任意のdict型をリクエストボディとして受け入れる方法を示します。

LANGUAGE: Python
CODE:
@app.post("/index-weights/")
async def create_index_weights(weights: Dict[int, float]):
    return weights

----------------------------------------

TITLE: Making a GET request with Requests
DESCRIPTION: Example of using the Requests library to make a GET request to a URL.

LANGUAGE: Python
CODE:
response = requests.get("http://example.com/some/url")

----------------------------------------

TITLE: Defining Invoice and InvoiceEvent Models in Python
DESCRIPTION: Defines Pydantic models for Invoice and InvoiceEvent, which are used in the FastAPI application for handling invoice data and events.

LANGUAGE: Python
CODE:
from pydantic import BaseModel, HttpUrl

class Invoice(BaseModel):
    id: str
    title: str | None = None
    customer: str
    total: float

class InvoiceEvent(BaseModel):
    description: str
    paid: bool

class InvoiceEventReceived(BaseModel):
    ok: bool

----------------------------------------

TITLE: Defining Pure List Bodies in FastAPI
DESCRIPTION: Shows how to define a FastAPI endpoint that expects a list of objects as the request body.

LANGUAGE: Python
CODE:
@app.post("/images/multiple/")
async def create_multiple_images(images: List[Image]):

----------------------------------------

TITLE: Defining Invoice and InvoiceEvent Models in Python
DESCRIPTION: Defines Pydantic models for Invoice and InvoiceEvent, which are used in the FastAPI application for handling invoice data and events.

LANGUAGE: Python
CODE:
from pydantic import BaseModel, HttpUrl

class Invoice(BaseModel):
    id: str
    title: str | None = None
    customer: str
    total: float

class InvoiceEvent(BaseModel):
    description: str
    paid: bool

class InvoiceEventReceived(BaseModel):
    ok: bool

----------------------------------------

TITLE: Specifying Git Dependencies for FastAPI Project
DESCRIPTION: This snippet lists three Git-based dependencies required for the FastAPI project. It includes specific versions or branches of mkdocs-material-insiders, griffe-typing-deprecated, and mkdocstrings-python. Each dependency uses a token-based authentication for accessing private repositories.

LANGUAGE: plaintext
CODE:
git+https://${TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git@9.5.30-insiders-4.53.11
git+https://${TOKEN}@github.com/pawamoy-insiders/griffe-typing-deprecated.git
git+https://${TOKEN}@github.com/pawamoy-insiders/mkdocstrings-python.git

----------------------------------------

TITLE: リストフィールドを持つPydanticモデルの定義 (Python)
DESCRIPTION: タグのリストを含むItemモデルを定義します。tagsフィールドは型指定のないリストとして宣言されています。

LANGUAGE: Python
CODE:
class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: list = []

----------------------------------------

TITLE: Using Pydantic Model as Input in FastAPI Endpoint
DESCRIPTION: This code snippet demonstrates how to use the Pydantic model as input in a FastAPI endpoint. The description field is not required for input due to its default value.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None

@app.post("/items/")
def create_item(item: Item):
    return item

----------------------------------------

TITLE: Using BackgroundTasks with Dependency Injection in FastAPI
DESCRIPTION: Advanced example demonstrating background tasks with FastAPI's dependency injection system, showing task execution at multiple levels.

LANGUAGE: python
CODE:
async def write_log(background_tasks: BackgroundTasks, q: str | None = None):
    if q:
        background_tasks.add_task(write_notification, q)

@app.post("/send-notification/{email}")
async def send_notification(email: str, background_tasks: BackgroundTasks, q: str | None = None):
    background_tasks.add_task(write_notification, email, message="some notification")

----------------------------------------

TITLE: 型パラメータ付きリストフィールドの定義 (Python)
DESCRIPTION: typingモジュールからListをインポートし、tagsフィールドを文字列のリストとして明示的に型指定します。

LANGUAGE: Python
CODE:
from typing import List

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: List[str] = []

----------------------------------------

TITLE: Restricting Extra Headers in FastAPI
DESCRIPTION: Example showing how to forbid extra headers using Pydantic model configuration. This prevents clients from sending unauthorized header parameters.

LANGUAGE: json
CODE:
{
    "detail": [
        {
            "type": "extra_forbidden",
            "loc": ["header", "tool"],
            "msg": "Extra inputs are not permitted",
            "input": "plumbus"
        }
    ]
}

----------------------------------------

TITLE: Importing File and UploadFile in FastAPI
DESCRIPTION: This snippet shows how to import the File and UploadFile classes from FastAPI, which are used to handle file uploads.

LANGUAGE: Python
CODE:
from fastapi import File, UploadFile

----------------------------------------

TITLE: リスト型のリクエストボディの定義 (Python)
DESCRIPTION: トップレベルがリストであるJSONボディを処理するための関数パラメータを定義します。

LANGUAGE: Python
CODE:
@app.post("/images/multiple/")
async def create_multiple_images(images: List[Image]):
    return images

----------------------------------------

TITLE: Running Documentation Live Server
DESCRIPTION: Python script command to run a live-reloading documentation server for development

LANGUAGE: console
CODE:
$ python ./scripts/docs.py live

[INFO] Serving on http://127.0.0.1:8008
[INFO] Start watching changes
[INFO] Start detecting changes

----------------------------------------

TITLE: 深くネストされたモデルの定義 (Python)
DESCRIPTION: 複数の階層を持つ深くネストされたモデルを定義します。これにより、複雑な構造を持つJSONデータを表現できます。

LANGUAGE: Python
CODE:
class Image(BaseModel):
    url: HttpUrl
    name: str

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: Set[str] = set()
    images: List[Image] | None = None

class Offer(BaseModel):
    name: str
    description: str | None = None
    price: float
    items: List[Item]

----------------------------------------

TITLE: Formatting Translation PR Title in Markdown
DESCRIPTION: Example showing the correct format for translation PR titles using emoji and file path.

LANGUAGE: markdown
CODE:
🌐 Add Spanish translation for `docs/es/docs/teleporting.md`

----------------------------------------

TITLE: Mounting FastAPI Sub-Application in Python
DESCRIPTION: This snippet demonstrates how to mount the sub-application to the main application at a specific path.

LANGUAGE: python
CODE:
app.mount("/subapi", subapi)

----------------------------------------

TITLE: Handling Multiple WebSocket Connections in FastAPI
DESCRIPTION: Demonstrates managing multiple WebSocket connections, broadcasting messages, and handling disconnections.

LANGUAGE: python
CODE:
from fastapi import FastAPI, WebSocket, WebSocketDisconnect

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = ConnectionManager()

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: int):
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.broadcast(f"Client #{client_id} says: {data}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        await manager.broadcast(f"Client #{client_id} left the chat")

----------------------------------------

TITLE: Running a Python Script in a Virtual Environment
DESCRIPTION: Executes a Python script named main.py within the active virtual environment. This ensures that the script uses the Python interpreter and packages from the virtual environment.

LANGUAGE: bash
CODE:
python main.py

----------------------------------------

TITLE: Security Scopes Verification Implementation
DESCRIPTION: Implements security scope verification logic using SecurityScopes class to check if the token has required permissions.

LANGUAGE: python
CODE:
async def get_current_user(
    security_scopes: SecurityScopes,
    token: str = Depends(oauth2_scheme)
):
    if security_scopes.scopes:
        authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
    else:
        authenticate_value = "Bearer"

----------------------------------------

TITLE: Setting Cookies with Direct Response Object in FastAPI
DESCRIPTION: This snippet shows how to set cookies by creating a Response object directly in a FastAPI path operation. It allows full control over the response, including setting cookies before returning it.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/cookie/")
def create_cookie():
    content = {"message": "Come to the dark side, we have cookies"}
    response = JSONResponse(content=content)
    response.set_cookie(key="fakesession", value="fake-cookie-session-value")
    return response

----------------------------------------

TITLE: Deactivating a Virtual Environment
DESCRIPTION: Deactivates the current virtual environment, reverting the shell to use the system-wide Python installation and packages.

LANGUAGE: bash
CODE:
deactivate

----------------------------------------

TITLE: Defining Optional Query Parameter in FastAPI
DESCRIPTION: This snippet shows how to define an optional query parameter 'q' with a default value of None.

LANGUAGE: Python
CODE:
q: Union[str, None] = None

----------------------------------------

TITLE: Defining a GET route with FastAPI
DESCRIPTION: Example of how to define a GET route using FastAPI, showing the similarity to Requests syntax.

LANGUAGE: Python
CODE:
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Installing Packages with pip
DESCRIPTION: Installs the FastAPI package with all optional dependencies using pip. This command should be run after activating the virtual environment.

LANGUAGE: bash
CODE:
pip install "fastapi[standard]"

----------------------------------------

TITLE: Creating Deeply Nested Pydantic Models
DESCRIPTION: Demonstrates how to create deeply nested Pydantic models for complex JSON structures.

LANGUAGE: Python
CODE:
class Image:
    url: str
    name: str

class Item:
    name: str
    description: str | None = None
    price: float
    tax: float | None = None
    tags: set[str] = set()
    images: list[Image] | None = None

class Offer:
    name: str
    description: str | None = None
    price: float
    items: list[Item]

----------------------------------------

TITLE: Defining a GET Route with FastAPI
DESCRIPTION: Example of defining a GET route handler function in FastAPI.

LANGUAGE: python
CODE:
@app.get("/some/url")
def read_url():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Installing Packages with uv
DESCRIPTION: Installs the FastAPI package with all optional dependencies using uv. This command should be run after activating the virtual environment.

LANGUAGE: bash
CODE:
uv pip install "fastapi[standard]"

----------------------------------------

TITLE: Defining File Upload Parameters with UploadFile
DESCRIPTION: Example of how to define file upload parameters using FastAPI's UploadFile class with proper type annotations

LANGUAGE: python
CODE:
async def create_files(
    files: Annotated[list[UploadFile], File(description="Multiple files as UploadFile")],
):
    return {"filenames": [file.filename for file in files]}

----------------------------------------

TITLE: Making a GET Request with Requests Library
DESCRIPTION: Example of using the Requests library to make a GET request to a URL.

LANGUAGE: python
CODE:
response = requests.get("http://example.com/some/url")

----------------------------------------

TITLE: Activating a Virtual Environment (Linux/macOS)
DESCRIPTION: Activates the virtual environment on Linux or macOS systems. This command modifies the current shell's environment variables to use the Python installation in the virtual environment.

LANGUAGE: bash
CODE:
source .venv/bin/activate

----------------------------------------

TITLE: Default Swagger UI JavaScript Configuration
DESCRIPTION: Shows the default JavaScript configuration for Swagger UI presets that cannot be directly modified through Python code.

LANGUAGE: javascript
CODE:
presets: [
    SwaggerUIBundle.presets.apis,
    SwaggerUIBundle.SwaggerUIStandalonePreset
]

----------------------------------------

TITLE: Basic Function with Type Hints in Python
DESCRIPTION: A simple function that takes two string parameters and returns a full name string.

LANGUAGE: Python
CODE:
def get_full_name(first_name: str, last_name: str):
    full_name = first_name.title() + " " + last_name.title()
    return full_name

----------------------------------------

TITLE: Installing WebSockets Package for FastAPI
DESCRIPTION: Command to install the WebSockets package required for WebSocket functionality in FastAPI.

LANGUAGE: shell
CODE:
$ pip install websockets

----------------------------------------

TITLE: Settings with Dependency Injection and Caching
DESCRIPTION: Implementation of settings using FastAPI dependency injection and LRU cache for performance optimization.

LANGUAGE: python
CODE:
from functools import lru_cache

@lru_cache()
def get_settings():
    return Settings()

@app.get("/info")
async def info(settings: Settings = Depends(get_settings)):
    return {
        "app_name": settings.app_name,
        "admin_email": settings.admin_email
    }

----------------------------------------

TITLE: Defining an asynchronous function
DESCRIPTION: Example of defining an asynchronous function using async def syntax.

LANGUAGE: Python
CODE:
async def get_burgers(number: int):
    # Do something asynchronous to create burgers
    return burgers

----------------------------------------

TITLE: Basic Database Connection with Yield
DESCRIPTION: Example of using yield in a dependency to setup and cleanup a database connection

LANGUAGE: python
CODE:
async def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()

----------------------------------------

TITLE: Multiple Body Parameters in FastAPI
DESCRIPTION: Shows how to handle multiple body parameters (item and user) in a single FastAPI endpoint.

LANGUAGE: python
CODE:
async def update_item(
    *,
    item_id: int,
    item: Item,
    user: User,
):

----------------------------------------

TITLE: Using synchronous libraries in FastAPI
DESCRIPTION: Example of using a synchronous third-party library in a FastAPI path operation function.

LANGUAGE: Python
CODE:
@app.get('/')
def results():
    results = some_library()
    return results

----------------------------------------

TITLE: Custom Context Manager Implementation
DESCRIPTION: Shows how to create a custom context manager class that can be used with FastAPI dependencies

LANGUAGE: python
CODE:
class MySuperContextManager:
    def __init__(self):
        self.db = DBSession()

    def __enter__(self):
        return self.db

    def __exit__(self, exc_type, exc_value, traceback):
        self.db.close()

async def get_db():
    with MySuperContextManager() as db:
        yield db

----------------------------------------

TITLE: Embedded Single Body Parameter in FastAPI
DESCRIPTION: Shows how to force a single body parameter to be embedded in a JSON object using Body(embed=True).

LANGUAGE: python
CODE:
async def update_item(
    item_id: int,
    item: Item = Body(embed=True),
):

----------------------------------------

TITLE: Typed Path Parameters in FastAPI
DESCRIPTION: Shows how to declare path parameters with type annotations for automatic type conversion and validation.

LANGUAGE: python
CODE:
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}

----------------------------------------

TITLE: Custom OpenAPI Schema Generation
DESCRIPTION: Function to generate a custom OpenAPI schema with modified properties and ReDoc extensions.

LANGUAGE: python
CODE:
from fastapi.openapi.utils import get_openapi

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Custom title",
        version="2.5.0",
        description="This is a very custom OpenAPI schema",
        routes=app.routes,
    )
    openapi_schema["info"]["x-logo"] = {
        "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png"
    }
    app.openapi_schema = openapi_schema
    return app.openapi_schema

----------------------------------------

TITLE: Shortcut for Class Dependencies in FastAPI
DESCRIPTION: This snippet shows a shortcut provided by FastAPI for declaring class dependencies, reducing code repetition.

LANGUAGE: Python
CODE:
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response

----------------------------------------

TITLE: Typed Path Parameters in FastAPI
DESCRIPTION: Shows how to declare path parameters with type annotations for automatic type conversion and validation.

LANGUAGE: python
CODE:
@app.get("/items/{item_id}")
async def read_item(item_id: int):
    return {"item_id": item_id}

----------------------------------------

TITLE: Configuring Conditional OpenAPI in FastAPI using Environment Variables
DESCRIPTION: This snippet shows how to use Pydantic settings to configure the OpenAPI URL conditionally. It allows disabling OpenAPI documentation by setting the OPENAPI_URL environment variable to an empty string.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    openapi_url: str = "/openapi.json"


settings = Settings()

app = FastAPI(
    openapi_url=settings.openapi_url
)


@app.get("/items/")
async def read_items():
    return [{"name": "Foo"}]

----------------------------------------

TITLE: Installing Pydantic Settings in Python
DESCRIPTION: Commands to install the pydantic-settings package either standalone or as part of FastAPI's all extras.

LANGUAGE: console
CODE:
$ pip install pydantic-settings
---> 100%

LANGUAGE: console
CODE:
$ pip install "fastapi[all]"
---> 100%

----------------------------------------

TITLE: Plain Text Response in FastAPI
DESCRIPTION: Demonstrates how to return a plain text response using PlainTextResponse in FastAPI. The example shows importing and using PlainTextResponse as the response_class.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"

----------------------------------------

TITLE: Using a Dependency in FastAPI Path Operation
DESCRIPTION: Demonstrates how to use a dependency in a FastAPI path operation function, which automatically resolves sub-dependencies.

LANGUAGE: Python
CODE:
async def read_query(query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]):

----------------------------------------

TITLE: Declaring a Required Path Parameter with Title in FastAPI
DESCRIPTION: Demonstrates how to declare a required path parameter 'item_id' with a title using Path.

LANGUAGE: python
CODE:
item_id: int = Path(..., title="The ID of the item to get")

----------------------------------------

TITLE: File Response in FastAPI
DESCRIPTION: Shows how to send a file asynchronously using FileResponse in FastAPI. The example demonstrates using FileResponse with a file path.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import FileResponse

app = FastAPI()

some_file_path = "large-video-file.mp4"

@app.get("/")
async def main():
    return FileResponse(some_file_path)

----------------------------------------

TITLE: Adding Global Dependencies to FastAPI Application in Python
DESCRIPTION: This code snippet demonstrates how to add global dependencies to a FastAPI application. The dependencies are specified in the FastAPI constructor and will be applied to all path operations in the application.

LANGUAGE: python
CODE:
app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])

----------------------------------------

TITLE: Importing HTTPS Redirect Middleware in FastAPI
DESCRIPTION: Shows how to import the HTTPS redirect middleware that enforces HTTPS connections.

LANGUAGE: python
CODE:
from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware

----------------------------------------

TITLE: Setting Default Response Class in FastAPI
DESCRIPTION: Shows how to set a default response class for all routes in a FastAPI application. The example demonstrates using ORJSONResponse as the default_response_class.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse

app = FastAPI(default_response_class=ORJSONResponse)

----------------------------------------

TITLE: Setting Custom OpenAPI OperationId in FastAPI
DESCRIPTION: Configure a custom operationId for a FastAPI path operation using the operation_id parameter to ensure unique operation identification in the OpenAPI schema.

LANGUAGE: python
CODE:
@app.get("/items/", operation_id="some_specific_id_you_define")

----------------------------------------

TITLE: Importing Jinja2Templates in FastAPI
DESCRIPTION: Basic import statement for the Jinja2Templates class from FastAPI's templating module. This class enables template rendering functionality in FastAPI applications.

LANGUAGE: python
CODE:
from fastapi.templating import Jinja2Templates

----------------------------------------

TITLE: Changing Response Status Code with FastAPI in Python
DESCRIPTION: This code snippet shows how to use a Response parameter in a FastAPI route function to dynamically set the status code. It demonstrates creating an item with a 201 status code if it doesn't exist, or returning it with a 200 status code if it does.

LANGUAGE: python
CODE:
from fastapi import FastAPI, Response, status

app = FastAPI()

@app.get("/items/{item_id}")
def read_item(item_id: str, response: Response):
    if item_id not in items:
        items[item_id] = {"id": item_id, "name": f"Fake Item {item_id}"}
        response.status_code = status.HTTP_201_CREATED
    return items[item_id]

----------------------------------------

TITLE: Using Function Names as OperationIds in FastAPI
DESCRIPTION: Automatically set path operation function names as operationIds by iterating through all routes and updating their operation_id attribute.

LANGUAGE: python
CODE:
for route in app.routes:
    if isinstance(route, APIRoute):
        route.operation_id = route.name

----------------------------------------

TITLE: Using UploadFile for File Handling in FastAPI
DESCRIPTION: This snippet shows how to use the UploadFile class to handle file uploads, which provides more functionality than using bytes.

LANGUAGE: Python
CODE:
async def create_upload_file(file: UploadFile):

----------------------------------------

TITLE: HTML Link Output
DESCRIPTION: Example of rendered HTML link with dynamic URL

LANGUAGE: html
CODE:
<a href="/items/42">

----------------------------------------

TITLE: Multiple Body Parameters in FastAPI
DESCRIPTION: Shows how to declare multiple body parameters (item and user) in a FastAPI endpoint

LANGUAGE: python
CODE:
def update_item(item: Item, user: User):

----------------------------------------

TITLE: Importing Depends from FastAPI in Python
DESCRIPTION: Shows how to import the Depends function from FastAPI, which is used to declare dependencies in route handlers.

LANGUAGE: Python
CODE:
from fastapi import Depends

----------------------------------------

TITLE: Including Mailjet Client Script - JavaScript
DESCRIPTION: JavaScript script tag to include the Mailjet embedded form functionality

LANGUAGE: html
CODE:
<script type="text/javascript" src="https://app.mailjet.com/pas-nc-embedded-v1.js"></script>

----------------------------------------

TITLE: Returning HTML Response in FastAPI
DESCRIPTION: Shows how to return an HTML response using HTMLResponse class in a FastAPI route.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

app = FastAPI()

@app.get("/items/", response_class=HTMLResponse)
async def read_items():
    return """<html><body><h1>Hello World</h1></body></html>"""

----------------------------------------

TITLE: Using await with an async library in FastAPI
DESCRIPTION: Example of using await with an async library in a FastAPI path operation function. The function must be declared as async def to use await inside it.

LANGUAGE: Python
CODE:
@app.get('/')
async def read_results():
    results = await some_library()
    return results

----------------------------------------

TITLE: Embedding Mailjet Newsletter Form - HTML
DESCRIPTION: HTML iframe implementation to embed a Mailjet newsletter subscription form with specific styling and parameters

LANGUAGE: html
CODE:
<iframe data-w-type="embedded" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://xr4n4.mjt.lu/wgt/xr4n4/hj5/form?c=40a44fa4" width="100%" style="height: 800px;"></iframe>

----------------------------------------

TITLE: Using PlainTextResponse in FastAPI
DESCRIPTION: Demonstrates how to return a plain text response using PlainTextResponse in a FastAPI route.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse

app = FastAPI()

@app.get("/", response_class=PlainTextResponse)
async def main():
    return "Hello World"

----------------------------------------

TITLE: Nested Dependencies with Yield
DESCRIPTION: Demonstrates how to create nested dependency chains where each level can have its own cleanup logic

LANGUAGE: python
CODE:
async def dependency_a():
    dep_a = generate_dep_a()
    try:
        yield dep_a
    finally:
        dep_a.close()

async def dependency_b(dep_a = Depends(dependency_a)):
    dep_b = generate_dep_b()
    try:
        yield dep_b
    finally:
        dep_b.close(dep_a)

async def dependency_c(dep_b = Depends(dependency_b)):
    dep_c = generate_dep_c()
    try:
        yield dep_c
    finally:
        dep_c.close(dep_b)

----------------------------------------

TITLE: Deprecating FastAPI Path Operations
DESCRIPTION: Demonstrates how to mark FastAPI path operations as deprecated while keeping them functional.

LANGUAGE: python
CODE:
@app.get("/items/", deprecated=True)
async def read_items():
    return ["Item 1", "Item 2"]

----------------------------------------

TITLE: Using UJSONResponse in FastAPI
DESCRIPTION: Shows how to use UJSONResponse for potentially faster JSON serialization in a FastAPI route.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import UJSONResponse

app = FastAPI()

@app.get("/items/", response_class=UJSONResponse)
async def read_items():
    return [{"item_id": "Foo"}]

----------------------------------------

TITLE: Dockerfile with Multiple Workers
DESCRIPTION: Example of a Dockerfile that configures FastAPI to run with multiple worker processes using the --workers option.

LANGUAGE: Dockerfile
CODE:
FROM python:3.9

WORKDIR /code

COPY ./requirements.txt /code/requirements.txt

RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt

COPY ./app /code/app

CMD ["fastapi", "run", "app/main.py", "--port", "80", "--workers", "4"]

----------------------------------------

TITLE: Request Body with Price Calculation
DESCRIPTION: Shows how to access and manipulate Pydantic model attributes within a FastAPI route handler.

LANGUAGE: python
CODE:
@app.post("/items/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return item_dict

----------------------------------------

TITLE: Running a FastAPI Application
DESCRIPTION: Command to run a FastAPI application using Uvicorn

LANGUAGE: bash
CODE:
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.

----------------------------------------

TITLE: PUT Request Body Update in Python using FastAPI
DESCRIPTION: Example showing how to update data using PUT requests with FastAPI and jsonable_encoder. Demonstrates converting input data to JSON-compatible format and handling data replacement.

LANGUAGE: Python
CODE:
{
    "name": "Barz",
    "price": 3,
    "description": None,
}

----------------------------------------

TITLE: Extended FastAPI Application Example
DESCRIPTION: An extended FastAPI application example with a PUT request and Pydantic model

LANGUAGE: Python
CODE:
from typing import Union

from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Item(BaseModel):
    name: str
    price: float
    is_offer: Union[bool, None] = None


@app.get("/")
def read_root():
    return {"Hello": "World"}


@app.get("/items/{item_id}")
def read_item(item_id: int, q: Union[str, None] = None):
    return {"item_id": item_id, "q": q}


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    return {"item_name": item.name, "item_id": item_id}

----------------------------------------

TITLE: Basic Python Type Hints Example
DESCRIPTION: A simple function demonstrating basic string type annotations for function parameters.

LANGUAGE: python
CODE:
def get_full_name(first_name: str, last_name: str):
    return f"{first_name.title()} {last_name.title()}"

----------------------------------------

TITLE: Defining a Typed List Field in a Pydantic Model
DESCRIPTION: Illustrates how to define a list field with a specific element type (string) in a Pydantic model.

LANGUAGE: Python
CODE:
tags: list[str]

----------------------------------------

TITLE: Declaring Header Parameters in FastAPI
DESCRIPTION: Declare a header parameter using the Header class, similar to Path, Query, and Cookie parameters.

LANGUAGE: python
CODE:
async def read_items(user_agent: str | None = Header(default=None)):

----------------------------------------

TITLE: Installing Packages from requirements.txt with uv
DESCRIPTION: Installs all packages listed in the requirements.txt file using uv. This command should be run after activating the virtual environment.

LANGUAGE: bash
CODE:
uv pip install -r requirements.txt

----------------------------------------

TITLE: Embedded Single Body Parameter
DESCRIPTION: Shows how to use Body(embed=True) to nest a single body parameter under a key

LANGUAGE: python
CODE:
item: Item = Body(embed=True)

----------------------------------------

TITLE: Importing List from typing Module
DESCRIPTION: Shows how to import the List type from the typing module for use in type annotations in Python versions before 3.9.

LANGUAGE: Python
CODE:
from typing import List

----------------------------------------

TITLE: Handling HTTPException in Dependencies with Yield in FastAPI
DESCRIPTION: This snippet shows how to raise an HTTPException in the exit code of a dependency with yield. It demonstrates error handling after the main execution of the dependency.

LANGUAGE: Python
CODE:
def get_db():
    db = DBSession()
    try:
        yield db
    finally:
        db.close()

def validate_token(token: str):
    ...

@app.get("/items/")
async def read_items(token: str, db: DBSession = Depends(get_db)):
    if token is None:
        raise HTTPException(status_code=401, detail="Token required")
    validate_token(token)
    ...

----------------------------------------

TITLE: Handling Duplicate Headers in FastAPI
DESCRIPTION: Use a list type annotation to receive all values from duplicate headers as a Python list.

LANGUAGE: python
CODE:
async def read_items(x_token: list[str] | None = Header(default=None)):

----------------------------------------

TITLE: Model Inheritance Pattern
DESCRIPTION: Shows how to use model inheritance to reduce code duplication when dealing with related models.

LANGUAGE: python
CODE:
UserInDB(**user_in.dict(), hashed_password=hashed_password)

----------------------------------------

TITLE: Importing FastAPI Response Class
DESCRIPTION: Shows how to import the Response class from FastAPI, which can be used to set response headers, cookies, and other response data in path operation functions

LANGUAGE: python
CODE:
from fastapi import Response

----------------------------------------

TITLE: Swagger UI Default Parameters Configuration
DESCRIPTION: Default configuration parameters for Swagger UI interface customization in FastAPI.

LANGUAGE: python
CODE:
fastapi.openapi.docs.swagger_ui_default_parameters

----------------------------------------

TITLE: Defining Webhooks in FastAPI
DESCRIPTION: This snippet demonstrates how to define webhooks in a FastAPI application using the app.webhooks attribute. It shows the creation of a POST webhook for a 'new-subscription' event.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Subscription(BaseModel):
    username: str
    monthly_fee: float

@app.webhooks.post("new-subscription")
def new_subscription(body: Subscription):
    """Webhook for new subscriptions"""
    # In your code, you would handle this data and probably store it in a database
    print(f"New subscription for {body.username}, fee: {body.monthly_fee}")
    # You don't have to return anything, this is just an example
    return {"ok": True}

----------------------------------------

TITLE: Importing GZip Middleware in FastAPI
DESCRIPTION: Shows how to import the GZip compression middleware from FastAPI package.

LANGUAGE: python
CODE:
from fastapi.middleware.gzip import GZipMiddleware

----------------------------------------

TITLE: Simplified Class Dependency Declaration in FastAPI
DESCRIPTION: This snippet shows a shortcut provided by FastAPI for declaring class-based dependencies. Instead of repeating the class name, you can use Depends() without arguments when the dependency is a class that FastAPI will instantiate.

LANGUAGE: python
CODE:
@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends()]):
    response = {}
    if commons.q:
        response.update({"q": commons.q})
    items = fake_items_db[commons.skip : commons.skip + commons.limit]
    response.update({"items": items})
    return response

----------------------------------------

TITLE: Using response_model Parameter in FastAPI Path Operation Decorator
DESCRIPTION: Shows how to use the response_model parameter in a FastAPI path operation decorator to specify the response type.

LANGUAGE: Python
CODE:
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

@app.post("/items/", response_model=Item)
def create_item(item: Item):
    return item

@app.get("/items/", response_model=list[Item])
def read_items():
    return [
        Item(name="Portal Gun", price=42.0),
        Item(name="Plumbus", price=32.0)
    ]

----------------------------------------

TITLE: Body Parameter with Additional Field in FastAPI
DESCRIPTION: Example of adding a singular value as a body parameter using Body() alongside other Pydantic models.

LANGUAGE: python
CODE:
async def update_item(
    *,
    item_id: int,
    item: Item,
    user: User,
    importance: int = Body(gt=0),
):

----------------------------------------

TITLE: Defining Form Parameters in FastAPI
DESCRIPTION: This code snippet shows how to define form parameters in a FastAPI application using the Form class. It creates a form parameter named 'username' of type string.

LANGUAGE: python
CODE:
username: str = Form(...)

----------------------------------------

TITLE: Setting Cookies by Returning Response Directly in FastAPI
DESCRIPTION: Shows how to set cookies by creating and returning a Response object directly. This approach requires ensuring data compatibility with the response type and proper handling of response_model filtering.

LANGUAGE: python
CODE:
from fastapi import FastAPI
from fastapi.responses import JSONResponse

app = FastAPI()

@app.get("/cookie/")
def create_cookie():
    content = {"message": "Come to the dark side, we have cookies"}
    response = JSONResponse(content=content)
    response.set_cookie(key="fakesession", value="fake-cookie-session-value")
    return response