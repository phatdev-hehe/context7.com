TITLE: Installing Dependencies Using Yarn CLI Commands
DESCRIPTION: Various Yarn CLI commands for installing project dependencies with different options, including installing all dependencies, flat installation, force reinstallation, and production-only dependencies.

LANGUAGE: bash
CODE:
yarn install

LANGUAGE: bash
CODE:
yarn install --flat

LANGUAGE: bash
CODE:
yarn install --force

LANGUAGE: bash
CODE:
yarn install --production

----------------------------------------

TITLE: Adding Dependencies with Specific Types in Yarn
DESCRIPTION: These commands demonstrate how to add dependencies of different types using Yarn. The flags specify whether the package should be added to devDependencies, peerDependencies, or optionalDependencies.

LANGUAGE: sh
CODE:
yarn add --dev
yarn add --peer
yarn add --optional

----------------------------------------

TITLE: Adding Dependencies to Specific Categories
DESCRIPTION: These commands show how to add dependencies to different categories: devDependencies, peerDependencies, and optionalDependencies.

LANGUAGE: sh
CODE:
yarn add [package] --dev
yarn add [package] --peer
yarn add [package] --optional

----------------------------------------

TITLE: Specifying Version Ranges in package.json for Yarn
DESCRIPTION: This snippet demonstrates how to specify version ranges for dependencies in a package.json file using different operators like >=, <, ^, and ~.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "package-1": ">=2.0.0 <3.1.4",
    "package-2": "^0.4.2",
    "package-3": "~2.7.1"
  }
}

----------------------------------------

TITLE: Adding a Dependency with Yarn
DESCRIPTION: This command adds a new package to the project dependencies. It updates both package.json and yarn.lock files. You can specify version or tag, and use flags for different dependency types.

LANGUAGE: sh
CODE:
yarn add [package]

LANGUAGE: sh
CODE:
yarn add [package]@[version]
yarn add [package]@[tag]

LANGUAGE: sh
CODE:
yarn add package-1@1.2.3
yarn add package-2@^1.0.0
yarn add package-3@beta

----------------------------------------

TITLE: Upgrading a Dependency with Yarn
DESCRIPTION: These commands show how to upgrade an existing dependency. You can specify a new version or tag, or let Yarn choose the latest compatible version. This operation updates both package.json and yarn.lock files.

LANGUAGE: sh
CODE:
yarn upgrade [package]
yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]

----------------------------------------

TITLE: Package Name Configuration in package.json
DESCRIPTION: Demonstrates how to specify the package name in package.json. The name must be URL-safe, less than 214 characters, and follow specific formatting rules.

LANGUAGE: json
CODE:
{
  "name": "my-awesome-package"
}

----------------------------------------

TITLE: Yarn Package Installation Commands
DESCRIPTION: Various commands for installing packages with different dependency types and version constraints

LANGUAGE: sh
CODE:
yarn add <package...>

LANGUAGE: sh
CODE:
yarn add <package...> [--dev/-D]

LANGUAGE: sh
CODE:
yarn add <package...> [--peer/-P]

LANGUAGE: sh
CODE:
yarn add <package...> [--optional/-O]

LANGUAGE: sh
CODE:
yarn add <package...> [--exact/-E]

LANGUAGE: sh
CODE:
yarn add <package...> [--tilde/-T]

LANGUAGE: sh
CODE:
yarn add <package...> [--ignore-workspace-root-check/-W]

LANGUAGE: sh
CODE:
yarn add <alias-package>@npm:<package>

LANGUAGE: sh
CODE:
yarn add <package...> --audit

----------------------------------------

TITLE: Package Description Configuration
DESCRIPTION: Demonstrates how to add a description to your package for better searchability and understanding.

LANGUAGE: json
CODE:
{
  "description": "My short description of my awesome package"
}

----------------------------------------

TITLE: Basic Yarn Upgrade Commands
DESCRIPTION: Examples of basic yarn upgrade commands for updating single packages, multiple packages, and scoped packages to their latest versions based on package.json constraints.

LANGUAGE: sh
CODE:
yarn upgrade
yarn upgrade left-pad
yarn upgrade left-pad@^1.0.0
yarn upgrade left-pad grunt
yarn upgrade @angular

----------------------------------------

TITLE: Upgrading Dependencies with Yarn
DESCRIPTION: These commands demonstrate how to upgrade dependencies in a Yarn project. You can specify package names, versions, or tags to upgrade to.

LANGUAGE: sh
CODE:
yarn upgrade [package]
yarn upgrade [package]@[version]
yarn upgrade [package]@[tag]

----------------------------------------

TITLE: Initializing a Yarn Project
DESCRIPTION: This command starts the interactive process of creating a new Yarn project. It prompts the user for various project details and generates a package.json file.

LANGUAGE: sh
CODE:
yarn init

----------------------------------------

TITLE: Installing All Project Dependencies with Yarn
DESCRIPTION: These commands demonstrate how to install all dependencies listed in the project's package.json file.

LANGUAGE: sh
CODE:
yarn

LANGUAGE: sh
CODE:
yarn install

----------------------------------------

TITLE: Removing Dependencies with Yarn
DESCRIPTION: This command shows how to remove a dependency from a Yarn project.

LANGUAGE: sh
CODE:
yarn remove [package]

----------------------------------------

TITLE: Basic Yarn Init Interactive Session
DESCRIPTION: Demonstrates the basic interactive session of yarn init command that creates a new package.json file with user input for various fields.

LANGUAGE: sh
CODE:
$ yarn init

question name (testdir): my-awesome-package
question version (1.0.0):
question description: The best package you will ever find.
question entry point (index.js):
question git repository: https://github.com/yarnpkg/example-yarn-package
question author: Yarn Contributor
question license (MIT):
question private:
success Saved package.json
✨  Done in 87.70s.

LANGUAGE: json
CODE:
{
  "name": "my-awesome-package",
  "version": "1.0.0",
  "description": "The best package you will ever find.",
  "main": "index.js",
  "repository": {
    "url": "https://github.com/yarnpkg/example-yarn-package",
    "type": "git"
  },
  "author": "Yarn Contributor",
  "license": "MIT"
}

----------------------------------------

TITLE: Installing Global Packages with Yarn
DESCRIPTION: Command syntax for installing packages globally using yarn global add command

LANGUAGE: sh
CODE:
yarn global add <package...>

----------------------------------------

TITLE: Initializing a Yarn Project
DESCRIPTION: Commands to create a new git repository and initialize a Yarn project. This process creates a new directory, initializes git, and runs the Yarn init command to set up a new package.

LANGUAGE: sh
CODE:
git init my-new-project
cd my-new-project
yarn init

----------------------------------------

TITLE: npm to Yarn CLI Command Mapping
DESCRIPTION: Comprehensive table showing the equivalent Yarn commands for common npm operations, including package installation, updates, cache management, and version control.

LANGUAGE: markdown
CODE:
| npm (v5)                                | Yarn                                      |
| --------------------------------------- | ----------------------------------------- |
| `npm install`                           | `yarn add`                            |
| **_(N/A)_**                             | `yarn add --flat`                     |
| **_(N/A)_**                             | `yarn add --har`                      |
| `npm install --no-package-lock`         | `yarn add --no-lockfile`              |
| **_(N/A)_**                             | `yarn add --pure-lockfile`            |
| `npm install [package] --save`          | `yarn add [package]`                      |
| `npm install [package] --save-dev`      | `yarn add [package] --dev`                |
| **_(N/A)_**                             | `yarn add [package] --peer`               |
| `npm install [package] --save-optional` | `yarn add [package] --optional`           |
| `npm install [package] --save-exact`    | `yarn add [package] --exact`              |
| **_(N/A)_**                             | `yarn add [package] --tilde`              |
| `npm install [package] --global`        | `yarn global add [package]`               |
| `npm update --global`                   | `yarn global upgrade`                     |
| `npm rebuild`                           | `yarn add --force`                        |
| `npm uninstall [package]`               | `yarn remove [package]`                   |
| `npm cache clean`                       | `yarn cache clean [package]`              |
| `rm -rf node_modules && npm install`    | `yarn upgrade`                            |
| `npm version major`                     | `yarn version --major`                    |
| `npm version minor`                     | `yarn version --minor`                    |
| `npm version patch`                     | `yarn version --patch`                    |
| `npm explain [package]`                 | `yarn why [package]`                      |
| `npm audit [package]`                   | `yarn audit [package]`                    |

----------------------------------------

TITLE: Removing Packages with Yarn CLI
DESCRIPTION: Command for removing a package from project dependencies. This command updates both package.json and yarn.lock files, removing the specified package from all dependency types including dependencies and devDependencies.

LANGUAGE: bash
CODE:
yarn remove foo

LANGUAGE: bash
CODE:
yarn remove <package> --<flag>

----------------------------------------

TITLE: Defining Package Resolutions in package.json
DESCRIPTION: Example of how to specify package resolutions in package.json when using the '--flat' flag with 'yarn install'. This allows only one version for each package.

LANGUAGE: json
CODE:
{
  "resolutions": {
    "package-a": "2.0.0",
    "package-b": "5.0.0",
    "package-c": "1.5.2"
  }
}

----------------------------------------

TITLE: Using Yarn Help Command
DESCRIPTION: Shows how to use the basic yarn help command to display available commands and flags. The command provides brief explanations for each available option.

LANGUAGE: markdown
CODE:
yarn help

----------------------------------------

TITLE: Basic package.json Structure
DESCRIPTION: Example of a basic package.json file created by Yarn init. This JSON structure includes essential fields such as name, version, description, main entry point, repository information, author, and license.

LANGUAGE: json
CODE:
{
  "name": "my-new-project",
  "version": "1.0.0",
  "description": "My New Project description.",
  "main": "index.js",
  "repository": {
    "url": "https://example.com/your-username/my-new-project",
    "type": "git"
  },
  "author": "Your Name <you@example.com>",
  "license": "MIT"
}

----------------------------------------

TITLE: Example Structure of a yarn.lock File in YAML
DESCRIPTION: This snippet demonstrates the typical structure of a yarn.lock file. It shows how package versions, resolved URLs, and nested dependencies are recorded. The file is auto-generated and should not be manually edited.

LANGUAGE: yaml
CODE:
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
package-1@^1.0.0:
  version "1.0.3"
  resolved "https://registry.npmjs.org/package-1/-/package-1-1.0.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
package-2@^2.0.0:
  version "2.0.1"
  resolved "https://registry.npmjs.org/package-2/-/package-2-2.0.1.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
  dependencies:
    package-4 "^4.0.0"
package-3@^3.0.0:
  version "3.1.9"
  resolved "https://registry.npmjs.org/package-3/-/package-3-3.1.9.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"
  dependencies:
    package-4 "^4.5.0"
package-4@^4.0.0, package-4@^4.5.0:
  version "4.6.3"
  resolved "https://registry.npmjs.org/package-4/-/package-4-2.6.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"

----------------------------------------

TITLE: Yarn Dependency Integrity Check
DESCRIPTION: Verifies both versions and hash values of package contents between package.json and yarn.lock to ensure dependencies haven't been altered.

LANGUAGE: bash
CODE:
yarn check --integrity

----------------------------------------

TITLE: Package.json Dependency Types Example
DESCRIPTION: Example package.json file demonstrating the different types of dependencies that can be specified in a Node.js/Yarn project. Shows the syntax for declaring regular dependencies, development dependencies, peer dependencies, and optional dependencies.

LANGUAGE: json
CODE:
{
  "name": "my-project",
  "dependencies": {
    "package-a": "^1.0.0"
  },
  "devDependencies": {
    "package-b": "^1.2.1"
  },
  "peerDependencies": {
    "package-c": "^2.5.4"
  },
  "optionalDependencies": {
    "package-d": "^3.1.0"
  }
}

----------------------------------------

TITLE: Using Yarn Upgrade Interactive Command
DESCRIPTION: Example of running yarn upgrade-interactive command which shows the interactive interface for selecting packages to upgrade. The output displays package names, current versions, available versions, and package URLs. Users can use space to select, 'a' to toggle all, and 'i' to inverse selection.

LANGUAGE: plaintext
CODE:
[1/? Choose which packages to update. (Press <space> to select, <a> to toggle all, <i> to inverse selection)
 devDependencies
❯◯ autoprefixer      6.7.7  ❯  7.0.0          https://github.com/postcss/autoprefixer#readme
 ◯ webpack           2.4.1  ❯  2.5.1          https://github.com/webpack/webpack

 dependencies
 ◯ bull              2.2.6  ❯  3.0.0-alpha.3  https://github.com/OptimalBits/bull#readme
 ◯ fs-extra          3.0.0  ❯  3.0.1          https://github.com/jprichardson/node-fs-extra
 ◯ socket.io         1.7.3  ❯  1.7.4          https://github.com/socketio/socket.io#readme
 ◯ socket.io-client  1.7.3  ❯  1.7.4          https://github.com/Automattic/socket.io-client#readme

----------------------------------------

TITLE: Listing Cached Packages with Pattern Matching in Yarn
DESCRIPTION: Examples of using yarn cache list command with different pattern matching options to filter cached packages. Supports simple package names, OR conditions with pipe operator, and glob patterns.

LANGUAGE: sh
CODE:
yarn cache list --pattern gulp
yarn cache list --pattern "gulp|grunt"
yarn cache list --pattern "gulp-(match|newer)"

----------------------------------------

TITLE: Configuring package.json for Yarn in JSON
DESCRIPTION: An example package.json configuration for a 'pet-kitten' package. It defines the package name, version, main entry point, and dependencies. This file is used by Yarn to identify and configure the package.

LANGUAGE: json
CODE:
{
  "name": "pet-kitten",
  "version": "0.1.0",
  "main": "pet.js",
  "dependencies": {
    "hand": "1.0.0"
  }
}

----------------------------------------

TITLE: Publishing a Package with Yarn
DESCRIPTION: This command starts the package publishing process. It prompts for a new version number and npm password before publishing the package and revoking the login token.

LANGUAGE: sh
CODE:
yarn publish

----------------------------------------

TITLE: Installing Yarn via Homebrew on macOS
DESCRIPTION: Uses the Homebrew package manager to install Yarn. This command will also install Node.js if not already present. Note: If using nvm, ensure PATH lists nvm's shims before Homebrew's Node.js.

LANGUAGE: sh
CODE:
brew install yarn

----------------------------------------

TITLE: Initializing a New Yarn Project
DESCRIPTION: This command initializes a new Yarn project, creating a package.json file with default values.

LANGUAGE: sh
CODE:
yarn init

----------------------------------------

TITLE: Installing Global Package with Yarn
DESCRIPTION: Demonstrates how to globally install the nodemon package using Yarn and verify its installation. Shows usage of the --prefix flag to specify installation location.

LANGUAGE: sh
CODE:
$ yarn global add nodemon --prefix /usr/local
# the `nodemon` command is now available globally:
$ which nodemon
$ /usr/local/bin/nodemon
$ nodemon

----------------------------------------

TITLE: Configuring Yarn Repository for Stable Version on Debian/Ubuntu
DESCRIPTION: These commands add the Yarn package repository for the stable version to the system's package sources. It first adds the GPG key and then adds the repository to the sources list.

LANGUAGE: sh
CODE:
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

----------------------------------------

TITLE: Basic Package Publishing
DESCRIPTION: Publishes the package defined by package.json in the current directory to npm registry.

LANGUAGE: bash
CODE:
yarn publish

----------------------------------------

TITLE: Basic Yarn Why Command Usage
DESCRIPTION: Example showing how to use the 'yarn why' command to check why a package (jest) is installed. The command displays dependency relationships, disk space usage, and installation reasoning.

LANGUAGE: sh
CODE:
yarn why jest

LANGUAGE: sh
CODE:
yarn why vx.x.x
[1/4] 🤔  Why do we have the module "jest"...?
[2/4] 🚚  Initializing dependency graph...
[3/4] 🔍  Finding dependency...
[4/4] 🚡  Calculating file sizes...
info Has been hoisted to "jest"
info This module exists because it's specified in "devDependencies".
info Disk size without dependencies: "1.29kB"
info Disk size with unique dependencies: "101.31kB"
info Disk size with transitive dependencies: "20.35MB"
info Amount of shared dependencies: 125

----------------------------------------

TITLE: Auditing Dependencies with Yarn
DESCRIPTION: Example of using the 'yarn audit' command to check for vulnerabilities in the dependencies group only.

LANGUAGE: sh
CODE:
$ yarn audit --groups dependencies

----------------------------------------

TITLE: Configuring Yarn Workspaces in package.json
DESCRIPTION: Demonstrates how to set up the root package.json file to enable Yarn workspaces. It includes the 'private' flag and the 'workspaces' array listing workspace directories.

LANGUAGE: json
CODE:
{
  "private": true,
  "workspaces": ["workspace-a", "workspace-b"]
}

----------------------------------------

TITLE: Pattern-Based Yarn Upgrade Commands
DESCRIPTION: Examples of using pattern matching to upgrade packages that match specific name patterns, including multiple pattern combinations.

LANGUAGE: sh
CODE:
yarn upgrade --pattern gulp
yarn upgrade left-pad --pattern "gulp|grunt"
yarn upgrade --latest --pattern "gulp-(match|newer)"

----------------------------------------

TITLE: Running Yarn Versions Command
DESCRIPTION: Demonstrates how to execute the yarn versions command to display version information of the currently installed Yarn, Node.js, and its dependencies.

LANGUAGE: sh
CODE:
yarn versions

LANGUAGE: sh
CODE:
yarn versions v0.24.5
{ http_parser: '2.7.0',
  node: '7.10.0',
  v8: '5.5.372.43',
  uv: '1.11.0',
  zlib: '1.2.11',
  ares: '1.10.1-DEV',
  modules: '51',
  openssl: '1.0.2k',
  icu: '58.2',
  unicode: '9.0',
  cldr: '30.0.3',
  tz: '2016j' }
✨  Done in 0.04s.

----------------------------------------

TITLE: Retrieving Nested Fields from Package Information with Yarn
DESCRIPTION: Demonstrates how to retrieve nested fields from package information using the 'yarn info' command, including an example of retrieving the 'time' field in both regular and JSON formats.

LANGUAGE: sh
CODE:
yarn info react time

LANGUAGE: sh
CODE:
yarn info vx.x.x
{ modified: '2016-10-06T22:09:27.397Z',
  created: '2011-10-26T17:46:21.942Z', ... }

LANGUAGE: sh
CODE:
yarn info react time --json

LANGUAGE: json
CODE:
{"type":"inspect","data":{"modified":"2016-10-06T22:09:27.397Z","created":...}}
...

----------------------------------------

TITLE: Retrieving Basic Package Information with Yarn
DESCRIPTION: Demonstrates how to use the 'yarn info' command to fetch and display basic information about a package (in this case, React) in a tree format.

LANGUAGE: sh
CODE:
yarn info react

LANGUAGE: sh
CODE:
yarn info vx.x.x
{ name: 'react',
  version: '15.4.0-rc.2',
  description: 'React is a JavaScript library for building user interfaces.',
  time: { modified: '2016-10-06T22:09:27.397Z', ... } ... }

----------------------------------------

TITLE: Yarn Test Command Output
DESCRIPTION: Example output when running the yarn test command showing execution time and results

LANGUAGE: sh
CODE:
$ yarn test
yarn test v0.15.1
$ "./scripts/test"
Hello, world!
✨ Done in 0.17s.

----------------------------------------

TITLE: Listing All Yarn Configuration Settings
DESCRIPTION: Displays the complete current configuration using the yarn config list command, showing both Yarn and npm configurations.

LANGUAGE: sh
CODE:
$ yarn config list
yarn config vx.x.x
info yarn config
{ 'version-tag-prefix': 'v',
  'version-git-tag': true,
  'version-git-sign': false,
  'version-git-message': 'v%s',
  'init-version': '1.0.0',
  'init-license': 'MIT',
  'save-prefix': '^',
  'ignore-scripts': false,
  'ignore-optional': true,
  registry: 'https://registry.yarnpkg.com',
  'user-agent': 'yarn/0.15.0 npm/? node/v6.2.1 darwin x64' }
info npm config
{ registry: 'https://registry.npmjs.org/',
  '//localhost:4873/:_authToken': 'some-auth-token' }
✨  Done in 0.05s.

----------------------------------------

TITLE: Running Yarn Import Command
DESCRIPTION: Example of running the yarn import command in the terminal to generate a yarn.lock file from an existing package-lock.json or node_modules folder.

LANGUAGE: sh
CODE:
$ yarn import

LANGUAGE: sh
CODE:
yarn import vx.x.x
success Folder in sync.
warning Using version "2.2.4" of "lru-cache" instead of "2.7.3" for "ngstorage > grunt > minimatch"
warning Using version "2.0.6" of "readable-stream" instead of "2.2.9" for "ngstorage > karma > chokidar > readdirp"
[...]
success Saved lockfile.
✨  Done in 11.96s.

----------------------------------------

TITLE: Retrieving Specific Fields from Package Information with Yarn
DESCRIPTION: Shows how to use the 'yarn info' command to retrieve specific fields from package information, such as description or available versions.

LANGUAGE: sh
CODE:
yarn info react description

LANGUAGE: sh
CODE:
yarn info vx.x.x
React is a JavaScript library for building user interfaces.

LANGUAGE: sh
CODE:
yarn info react versions

LANGUAGE: sh
CODE:
yarn info v1.1.0
[ '0.0.1',
  '0.0.2',
  '0.0.3',
(etc)

----------------------------------------

TITLE: Creating Teams in Yarn CLI
DESCRIPTION: Command to create a new team within a specified scope in Yarn.

LANGUAGE: bash
CODE:
yarn team create <scope:team>

----------------------------------------

TITLE: Configuring Individual Workspace package.json (workspace-a)
DESCRIPTION: Shows the package.json configuration for workspace-a, including its name, version, and dependencies.

LANGUAGE: json
CODE:
{
  "name": "workspace-a",
  "version": "1.0.0",

  "dependencies": {
    "cross-env": "5.0.5"
  }
}

----------------------------------------

TITLE: Basic Yarn List Command
DESCRIPTION: Shows how to use the basic yarn list command to display all installed dependencies in the current working directory.

LANGUAGE: sh
CODE:
yarn list

----------------------------------------

TITLE: Tag Management Commands in Yarn
DESCRIPTION: Core commands for managing package tags in Yarn, including adding tags to specific versions, removing tags, and listing all tags for a package.

LANGUAGE: sh
CODE:
yarn tag add <package>@<version> <tag>
yarn tag remove <package> <tag>
yarn tag list [<package>]

----------------------------------------

TITLE: Package Version Configuration
DESCRIPTION: Shows how to specify the package version in package.json using semantic versioning.

LANGUAGE: json
CODE:
{
  "version": "1.0.0"
}

----------------------------------------

TITLE: Generating License Disclaimer with Yarn
DESCRIPTION: This command generates a sorted list of licenses from all installed packages and outputs it to stdout. The result includes the package name and its full license text.

LANGUAGE: sh
CODE:
yarn licenses generate-disclaimer

----------------------------------------

TITLE: Adding Dependencies to a Specific Workspace using Yarn CLI
DESCRIPTION: This command adds React and React DOM as development dependencies to a specific package workspace named 'awesome-package'.

LANGUAGE: sh
CODE:
yarn workspace awesome-package add react react-dom --dev

----------------------------------------

TITLE: Listing Licenses for Installed Packages with Yarn
DESCRIPTION: This command lists all packages installed by Yarn along with their associated licenses and source code URLs. The output is alphabetically sorted.

LANGUAGE: sh
CODE:
yarn licenses list

----------------------------------------

TITLE: Latest Version Yarn Upgrade Commands
DESCRIPTION: Examples of upgrading packages to their latest versions while ignoring package.json constraints, with options for version range specifiers.

LANGUAGE: sh
CODE:
yarn upgrade --latest
yarn upgrade left-pad --latest
yarn upgrade left-pad grunt --latest --tilde

----------------------------------------

TITLE: Yarn List Command Output Example
DESCRIPTION: Example output of the yarn list command showing dependency tree structure with package versions.

LANGUAGE: sh
CODE:
yarn list vx.x.x
├─ package-1@1.3.3
├─ package-2@5.0.9
│  └─ package-3@^2.1.0
└─ package-3@2.7.0

----------------------------------------

TITLE: Yarn List with Pattern Filtering
DESCRIPTION: Examples of using the --pattern flag to filter dependencies by name, including single patterns and multiple patterns with depth limitation.

LANGUAGE: sh
CODE:
yarn list --pattern gulp
yarn list --pattern "gulp|grunt"
yarn list --pattern "gulp|grunt" --depth=1

----------------------------------------

TITLE: Complete Package Linking Example
DESCRIPTION: Example showing the complete workflow of linking a react package into react-relay project. Demonstrates both registering a package for linking and consuming a linked package.

LANGUAGE: sh
CODE:
$ cd react
$ yarn link
yarn link vx.x.x
success Registered "react".
info You can now run `yarn link "react"` in the projects where you want to use this module and it will be used instead.

LANGUAGE: sh
CODE:
$ cd ../react-relay
$ yarn link react
yarn link vx.x.x
success Registered "react".

----------------------------------------

TITLE: Running a Script with Arguments using Yarn
DESCRIPTION: Example of running a script with additional arguments using yarn run. This snippet shows how to pass the '-o' and '--watch' flags to the 'test' script.

LANGUAGE: sh
CODE:
yarn run test -o --watch

----------------------------------------

TITLE: Using Yarn Install for Deduplication
DESCRIPTION: This snippet demonstrates that the yarn install command automatically performs deduplication, making the dedupe command unnecessary.

LANGUAGE: shell
CODE:
yarn install

----------------------------------------

TITLE: Adding Yarn Global Binary Path to Shell Environment
DESCRIPTION: Shows how to add the Yarn global binary location to the shell's PATH environment variable in .bashrc file for accessing globally installed packages.

LANGUAGE: sh
CODE:
export PATH="$(yarn global bin):$PATH"

----------------------------------------

TITLE: Publishing from Tarball
DESCRIPTION: Publishes a package from a .tgz gzipped tarball file.

LANGUAGE: bash
CODE:
yarn publish [tarball]

----------------------------------------

TITLE: Setting Yarn Configuration Values
DESCRIPTION: Sets a configuration key to a specified value using the yarn config set command. This example sets the init-license configuration to BSD-2-Clause.

LANGUAGE: sh
CODE:
$ yarn config set init-license BSD-2-Clause
yarn config vx.x.x
success Set "init-license" to "BSD-2-Clause".
✨  Done in 0.05s.

----------------------------------------

TITLE: Installing Yarn via Chocolatey Package Manager
DESCRIPTION: Installs Yarn using the Chocolatey package manager for Windows. This command also ensures Node.js is installed as a dependency.

LANGUAGE: sh
CODE:
choco install yarn

----------------------------------------

TITLE: Publishing from Folder
DESCRIPTION: Publishes a package from a specified folder containing package.json.

LANGUAGE: bash
CODE:
yarn publish [folder]

----------------------------------------

TITLE: Installing and Upgrading Yarn using npm
DESCRIPTION: This command installs Yarn globally on your system using npm. It can be used for both initial installation and upgrading to the latest version of Yarn. Requires npm to be already installed, which typically comes with Node.js.

LANGUAGE: sh
CODE:
npm install --global yarn

----------------------------------------

TITLE: Installing Yarn via Pacman on Arch Linux
DESCRIPTION: Command to install the stable version of Yarn package manager using Arch Linux's official package manager pacman.

LANGUAGE: sh
CODE:
pacman -S yarn

----------------------------------------

TITLE: Publishing with Specific Version
DESCRIPTION: Publishes a package with a specified version, skipping the version prompt.

LANGUAGE: bash
CODE:
yarn publish --new-version <version>

----------------------------------------

TITLE: Updating Yarn via npm
DESCRIPTION: This command updates Yarn to the latest version using npm. It's recommended if Yarn was originally installed via npm.

LANGUAGE: bash
CODE:
npm install --global yarn

----------------------------------------

TITLE: Installing Yarn on Alpine Linux using apk
DESCRIPTION: This command installs the stable version of Yarn package manager on Alpine Linux 3.6 or later using the apk package manager.

LANGUAGE: sh
CODE:
apk add yarn

----------------------------------------

TITLE: Publishing with Access Control
DESCRIPTION: Publishes a package with specified access control (public or restricted) to the npm registry.

LANGUAGE: bash
CODE:
yarn publish --access <public|restricted>

----------------------------------------

TITLE: Updating Yarn on Unix systems
DESCRIPTION: This command updates Yarn on Unix systems by downloading and executing an installation script. It's suitable for Unix-based operating systems.

LANGUAGE: bash
CODE:
curl --compressed -o- -L https://yarnpkg.com/install.sh | bash

----------------------------------------

TITLE: Installing Yarn using portage on Gentoo Linux
DESCRIPTION: This command uses the Gentoo package manager portage to install the Yarn package manager. The --ask flag prompts for confirmation before proceeding with the installation.

LANGUAGE: sh
CODE:
sudo emerge --ask sys-apps/yarn

----------------------------------------

TITLE: Listing Package Owners with Yarn CLI
DESCRIPTION: Command to list all owners of a specified package in the registry.

LANGUAGE: bash
CODE:
yarn owner list <package>

----------------------------------------

TITLE: Enforcing Yarn Version with CLI Command
DESCRIPTION: Demonstrates various ways to use the 'yarn policies set-version' command to set a specific Yarn version for a project. This command downloads the specified Yarn release and updates the project configuration to use it.

LANGUAGE: shell
CODE:
yarn policies set-version

LANGUAGE: shell
CODE:
yarn policies set-version --rc

LANGUAGE: shell
CODE:
yarn policies set-version 1.13.0

LANGUAGE: shell
CODE:
yarn policies set-version '^1.12.0'

----------------------------------------

TITLE: Configuring Yarn Offline Mirror
DESCRIPTION: These Bash commands demonstrate how to configure Yarn to use an offline mirror. It sets the offline mirror directory and enables pruning of the offline cache.

LANGUAGE: bash
CODE:
$ yarn config set yarn-offline-mirror ./npm-packages-offline-cache
yarn config v0.23.2
success Set "yarn-offline-mirror" to "./npm-packages-offline-cache".
✨  Done in 0.06s.

$ yarn config set yarn-offline-mirror-pruning true
yarn config v0.23.2
success Set "yarn-offline-mirror-pruning" to "true".
✨  Done in 0.06s.

----------------------------------------

TITLE: Removing Package Owner with Yarn CLI
DESCRIPTION: Command to remove a user from the owner list of a specified package. Requires existing owner permissions to execute.

LANGUAGE: bash
CODE:
yarn owner remove <user> <package>

----------------------------------------

TITLE: Package.json Dependencies Example
DESCRIPTION: Example package.json configuration showing dependency declarations for underscore and lodash packages

LANGUAGE: javascript
CODE:
{
  "dependencies": {
    "underscore": "~1.6.0"
  },
  "devDependencies": {
    "lodash": "4.15.0"
  }
}

----------------------------------------

TITLE: Enhanced Package Fetching with Path Support
DESCRIPTION: Extended version of fetchPackage that handles filesystem paths and semver versions.

LANGUAGE: javascript
CODE:
import fs from 'fs-extra';

async function fetchPackage({ name, reference }) {
  if ([`/`, `./`, `../`].some(prefix => reference.startsWith(prefix)))
    return await fs.readFile(reference);

  // ... same code as before
}

----------------------------------------

TITLE: Retrieving Package Information in JSON Format with Yarn
DESCRIPTION: Shows how to use the '--json' flag with the 'yarn info' command to output package information in JSON format for easier parsing and processing.

LANGUAGE: sh
CODE:
yarn info react --json

LANGUAGE: json
CODE:
{"type":"inspect","data":{"name":"react","time":{...}}}
{"type":"finished","data":417}

----------------------------------------

TITLE: Displaying Yarn bin Folder Location
DESCRIPTION: This snippet demonstrates how to use the 'yarn bin' command to display the location of the Yarn bin folder. This folder is where Yarn installs executable files for your package.

LANGUAGE: sh
CODE:
$ yarn bin
/home/emillumine/Code/Funkwhale/funkwhale/front/node_modules/.bin

----------------------------------------

TITLE: Monorepo Root Package.json Example
DESCRIPTION: Complete example of a monorepo root package.json with workspaces and nohoist configuration.

LANGUAGE: json
CODE:
// monorepo's package.json
{
  "name": "monorepo",
  "private": true,
  "workspaces": {
    "packages": ["packages/*"],
    "nohoist": ["**/react-native", "**/react-native/**"]
  }
}

----------------------------------------

TITLE: Retrieving Version-Specific Package Information with Yarn
DESCRIPTION: Demonstrates how to query information for a specific version of a package by appending '@[version]' to the package name in the 'yarn info' command.

LANGUAGE: sh
CODE:
yarn info react@15.3.0

LANGUAGE: sh
CODE:
yarn info vx.x.x
{ name: 'react',
  version: '15.3.0',
  description: 'React is a JavaScript library for building user interfaces.',
  time: { modified: '2016-10-06T22:09:27.397Z', ... } ... }

----------------------------------------

TITLE: Unlinking a Package from Global Scope
DESCRIPTION: Example showing how to unlink a React package from the global scope using yarn unlink in the package directory

LANGUAGE: sh
CODE:
$ cd react
$ yarn unlink
yarn link vx.x.x
success Unregistered "react".

----------------------------------------

TITLE: Workspace Package Configuration - jest-matcher-utils
DESCRIPTION: Example package.json configuration for a workspace package with its own dependencies.

LANGUAGE: json
CODE:
{
  "name": "jest-matcher-utils",
  "description": "...",
  "version": "20.0.3",
  "license": "...",
  "main": "...",
  "browser": "...",
  "dependencies": {
    "chalk": "^1.1.3",
    "pretty-format": "^20.0.3"
  }
}

----------------------------------------

TITLE: Reading Yarn Configuration Values
DESCRIPTION: Retrieves the value of a specified configuration key using the yarn config get command. The example shows retrieving the init-license value.

LANGUAGE: sh
CODE:
$ yarn config get init-license
BSD-2-Clause

----------------------------------------

TITLE: Checking Specific Package Version
DESCRIPTION: Command and output example showing how to check version information for a specific package using yarn outdated

LANGUAGE: shell
CODE:
yarn outdated lodash

LANGUAGE: plaintext
CODE:
Package Current Wanted Latest Package Type    URL
lodash  4.15.0  4.15.0 4.16.4 devDependencies https://github.com/lodash/lodash#readme
✨  Done in 1.04s.

----------------------------------------

TITLE: Adding Users to Teams in Yarn CLI
DESCRIPTION: Command to add a user to an existing team within a specified scope in Yarn.

LANGUAGE: bash
CODE:
yarn team add <scope:team> <user>

----------------------------------------

TITLE: Deleting Yarn Configuration Keys
DESCRIPTION: Removes a specified configuration key using the yarn config delete command. The example demonstrates deleting a test-key configuration.

LANGUAGE: sh
CODE:
$ yarn config delete test-key
yarn config vx.x.x
success Deleted "test-key".
✨  Done in 0.06s.

----------------------------------------

TITLE: Package Keywords Configuration
DESCRIPTION: Shows how to add searchable keywords to your package.json file.

LANGUAGE: json
CODE:
{
  "keywords": ["short", "relevant", "keywords", "for", "searching"]
}

----------------------------------------

TITLE: Publishing with Tag
DESCRIPTION: Publishes a package with a specific tag for versioning control.

LANGUAGE: bash
CODE:
yarn publish --tag <tag>

----------------------------------------

TITLE: Finding Path to Specific Executable
DESCRIPTION: This snippet shows how to use 'yarn bin <executable>' to find the path to a specific executable file. In this example, it locates the 'gettext-compile' executable.

LANGUAGE: sh
CODE:
$ yarn bin gettext-compile
/home/emillumine/Code/Funkwhale/funkwhale/front/node_modules/.bin/gettext-compile

----------------------------------------

TITLE: Listing Teams and Members in Yarn CLI
DESCRIPTION: Command to list either all teams in an organization or all users in a specific team. The behavior depends on whether a team is specified in the scope parameter.

LANGUAGE: bash
CODE:
yarn team list <scope>|<scope:team>

----------------------------------------

TITLE: Executing Shell Command with Yarn exec
DESCRIPTION: Demonstrates how to use the 'yarn exec' command to execute a simple shell command. In this example, it runs the 'echo' command to print a test message.

LANGUAGE: sh
CODE:
$ yarn exec echo test message
test message

----------------------------------------

TITLE: Basic Yarn Dependency Check Command
DESCRIPTION: Basic command to verify package dependency versions between package.json and yarn.lock. Note: This command is deprecated and will be removed in Yarn 2.0. Use 'yarn install --check-files' instead.

LANGUAGE: bash
CODE:
yarn check

----------------------------------------

TITLE: Adding Package Owner with Yarn CLI
DESCRIPTION: Command to add a new user as an owner of a specified package. Requires existing owner permissions to execute.

LANGUAGE: bash
CODE:
yarn owner add <user> <package>

----------------------------------------

TITLE: Creating Yarn Alias in Bash and Zsh
DESCRIPTION: Demonstrates how to create a simple alias for 'yarn info --verbose --no-emoji' in Bash and Zsh shells. This alias can be added to .bashrc or .zshrc files for persistence.

LANGUAGE: sh
CODE:
alias ynf="yarn info --verbose --no-emoji"

----------------------------------------

TITLE: Installing and Running React App Starter Kit with Yarn Create
DESCRIPTION: Example showing how the 'yarn create react-app my-app' command translates to installing create-react-app globally and executing it with the my-app argument.

LANGUAGE: sh
CODE:
$ yarn global add create-react-app
$ create-react-app my-app

----------------------------------------

TITLE: Configuring Yarn Repository for Nightly Version on Debian/Ubuntu
DESCRIPTION: These commands add the Yarn package repository for the nightly version to the system's package sources. It first adds the GPG key and then adds the repository to the sources list.

LANGUAGE: sh
CODE:
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://nightly.yarnpkg.com/debian/ nightly main" | sudo tee /etc/apt/sources.list.d/yarn.list

----------------------------------------

TITLE: Manual Yarn Installation via Tarball - RC
DESCRIPTION: Manually installs Yarn by downloading and extracting the release candidate version tarball to the /opt directory.

LANGUAGE: sh
CODE:
cd /opt
wget https://yarnpkg.com/latest-rc.tar.gz
tar zvxf latest-rc.tar.gz
# Yarn is now in /opt/yarn-[version]/

----------------------------------------

TITLE: Specifying Mutex File for Yarn Concurrency Control
DESCRIPTION: Commands to specify a mutex file for managing concurrent Yarn instances. This helps avoid conflicts when running multiple Yarn processes.

LANGUAGE: sh
CODE:
--mutex file
--mutex file:/tmp/.yarn-mutex

----------------------------------------

TITLE: Configuring Yarn RPM Repository
DESCRIPTION: Adds the official Yarn package repository to the system's package manager configuration.

LANGUAGE: sh
CODE:
curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo

----------------------------------------

TITLE: Manual Yarn Installation via Tarball - Nightly
DESCRIPTION: Manually installs Yarn by downloading and extracting the nightly version tarball to the /opt directory.

LANGUAGE: sh
CODE:
cd /opt
wget https://nightly.yarnpkg.com/latest.tar.gz
tar zvxf latest.tar.gz
# Yarn is now in /opt/yarn-[version]/

----------------------------------------

TITLE: Configuring Network Mutex for Yarn Concurrency Control
DESCRIPTION: Commands to set up a network mutex for managing concurrent Yarn instances. This creates a server on a specified port to coordinate Yarn processes.

LANGUAGE: sh
CODE:
--mutex network
--mutex network:30330

----------------------------------------

TITLE: Setting up NodeSource Repository
DESCRIPTION: Configures the NodeSource repository to install Node.js version 12.x, which is a prerequisite for Yarn if not already installed.

LANGUAGE: sh
CODE:
curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -

----------------------------------------

TITLE: Installing Yarn via Shell Script - Nightly Version
DESCRIPTION: Installs the nightly build version of Yarn package manager using a shell script with the --nightly flag.

LANGUAGE: sh
CODE:
curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --nightly

----------------------------------------

TITLE: Yarn List with Depth Parameter
DESCRIPTION: Demonstrates using the --depth flag to limit the displayed dependency tree depth to the specified level.

LANGUAGE: sh
CODE:
yarn list --depth=0

----------------------------------------

TITLE: Installing Yarn Package
DESCRIPTION: Installs the Yarn package using either yum or dnf package manager, depending on the system's default package manager.

LANGUAGE: sh
CODE:
sudo yum install yarn
## OR ##
sudo dnf install yarn

----------------------------------------

TITLE: Installing Specific Yarn Version
DESCRIPTION: Installs a specific version of Yarn package manager using the --version flag with the shell script.

LANGUAGE: sh
CODE:
curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version [version]

----------------------------------------

TITLE: Executing Yarn Login Command
DESCRIPTION: This snippet demonstrates how to run the 'yarn login' command. It prompts the user for their npm registry username and email, but does not ask for a password.

LANGUAGE: sh
CODE:
yarn login

----------------------------------------

TITLE: Manual Yarn Installation via Tarball - Stable
DESCRIPTION: Manually installs Yarn by downloading and extracting the stable version tarball to the /opt directory.

LANGUAGE: sh
CODE:
cd /opt
wget https://yarnpkg.com/latest.tar.gz
tar zvxf latest.tar.gz
# Yarn is now in /opt/yarn-[version]/

----------------------------------------

TITLE: Installing Yarn via Shell Script - RC Version
DESCRIPTION: Installs the release candidate (RC) version of Yarn package manager using a shell script with the --rc flag.

LANGUAGE: sh
CODE:
curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --rc

----------------------------------------

TITLE: Example Yarn Login Command Output
DESCRIPTION: This snippet shows an example output of running the 'yarn login' command. It displays the version of Yarn, prompts for npm username and email, and indicates completion of the login process.

LANGUAGE: sh
CODE:
yarn login vx.x.x
question npm username: my-username
question npm email: my-username@example.com
✨  Done in 6.03s.

----------------------------------------

TITLE: Verifying Yarn Tarball using GPG
DESCRIPTION: Verifies the authenticity of the downloaded Yarn tarball using GPG signature verification.

LANGUAGE: sh
CODE:
wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import
wget https://yarnpkg.com/latest.tar.gz.asc
gpg --verify latest.tar.gz.asc
# Look for "Good signature from 'Yarn Packaging'" in the output

----------------------------------------

TITLE: Setting Custom Cache Directory in Yarn Config
DESCRIPTION: Command to set a custom cache directory path in Yarn's configuration using the config command.

LANGUAGE: sh
CODE:
yarn config set cache-folder <path>

----------------------------------------

TITLE: Checking All Outdated Dependencies
DESCRIPTION: Command and output example showing how to check all outdated dependencies in a project using yarn outdated

LANGUAGE: shell
CODE:
yarn outdated

LANGUAGE: plaintext
CODE:
Package    Current Wanted Latest Package Type    URL
lodash     4.15.0  4.15.0 4.16.4 devDependencies https://github.com/lodash/lodash#readme
underscore 1.6.0   1.6.0  1.8.3  dependencies    https://github.com/jashkenas/underscore#readme
✨  Done in 0.72s.

----------------------------------------

TITLE: Configuring Yarn Global Path in Fish Shell
DESCRIPTION: Fish shell command to permanently add Yarn's global binary directory to the user paths, enabling access to globally installed packages.

LANGUAGE: fish
CODE:
set -U fish_user_paths (yarn global bin) $fish_user_paths

----------------------------------------

TITLE: Using Cache Folder Flag in Yarn Commands
DESCRIPTION: Example of specifying a custom cache directory using the --cache-folder flag with any Yarn command.

LANGUAGE: sh
CODE:
yarn <command> --cache-folder <path>

----------------------------------------

TITLE: Creating Named Package Archive with Yarn Pack
DESCRIPTION: Extended yarn pack command that creates a compressed gzip archive with a custom filename specified by the --filename parameter.

LANGUAGE: bash
CODE:
yarn pack --filename <filename>

----------------------------------------

TITLE: Enabling Offline Mirror Pruning in Yarn
DESCRIPTION: Controls automatic pruning of the offline mirror. The value must be a boolean, defaulting to false.

LANGUAGE: shell
CODE:
yarn-offline-mirror-pruning true

----------------------------------------

TITLE: Yarn Dependency Tree Verification
DESCRIPTION: Recursively checks if dependencies listed in package.json are present in node_modules with correct versions, without considering yarn.lock file.

LANGUAGE: bash
CODE:
yarn check --verify-tree

----------------------------------------

TITLE: Running a Specific Script with Yarn
DESCRIPTION: Example of running a specific script defined in package.json using the yarn run command. This snippet demonstrates how to execute the 'test' script.

LANGUAGE: sh
CODE:
yarn run test

----------------------------------------

TITLE: Disabling Yarn Self-Update Check
DESCRIPTION: Prevents Yarn from providing upgrade instructions when an outdated CLI installation is detected during package installation.

LANGUAGE: shell
CODE:
disable-self-update-check true

----------------------------------------

TITLE: Yarn Init with Existing package.json
DESCRIPTION: Shows how yarn init uses existing package.json values as defaults during the interactive session.

LANGUAGE: json
CODE:
{
  "name": "my-existing-package",
  "version": "0.1",
  "description": "I exist therefore I am.",
  "repository": {
    "url": "https://github.com/yarnpkg/example-yarn-package",
    "type": "git"
  },
  "license": "BSD-2-Clause"
}

LANGUAGE: sh
CODE:
$ yarn init

question name (my-existing-package):
question version (0.1):
question description (I exist therefore I am.):
question entry point (index.js):
question git repository (https://github.com/yarnpkg/example-yarn-package):
question author: Yarn Contributor
question license (BSD-2-Clause):
question private:
success Saved package.json
✨  Done in 121.53s.

----------------------------------------

TITLE: Installing Packages Using Tags in Yarn
DESCRIPTION: Examples showing how to install packages using stable and canary tags with Yarn package manager.

LANGUAGE: sh
CODE:
yarn add your-package-name@stable
yarn add your-package-name@canary

----------------------------------------

TITLE: Package.json Test Script Configuration
DESCRIPTION: Example package.json configuration showing how to define a test script that references an external test file

LANGUAGE: json
CODE:
{
  "name": "my-tribute-package",
  "version": "1.0.0",
  "description": "This is not the best package in the world, this is just a tribute.",
  "main": "index.js",
  "author": "Yarn Contributor",
  "license": "MIT",
  "scripts": {
    "test": "scripts/test"
  }
}

----------------------------------------

TITLE: Yarn Init with --yes Flag
DESCRIPTION: Shows how to use yarn init with the --yes flag to skip the interactive session and generate a package.json with default values.

LANGUAGE: sh
CODE:
$ yarn init --yes

warning The yes flag has been set. This will automatically answer yes to all questions which may have security implications.
success Saved package.json
✨  Done in 0.09s.

LANGUAGE: json
CODE:
{
  "name": "yarn-example",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT"
}

----------------------------------------

TITLE: Invalid Tag Version Example in Yarn
DESCRIPTION: Demonstrates the syntax for package installation using either version numbers or tags, highlighting why tags cannot match version numbers.

LANGUAGE: sh
CODE:
yarn add your-package-name@<version>
yarn add your-package-name@<tag>

----------------------------------------

TITLE: Repository Information in package.json
DESCRIPTION: Example of how to add repository, homepage, and bugs information to package.json. This is useful for linking to the project's source code, website, and issue tracker.

LANGUAGE: json
CODE:
{
  "homepage": "https://github.com/username/my-new-project",
  "bugs": "https://github.com/username/my-new-project/issues",
  "repository": {
    "url": "https://github.com/username/my-new-project",
    "type": "git"
  }
}

----------------------------------------

TITLE: Yarn Init with --private Flag
DESCRIPTION: Demonstrates using yarn init with the --private flag to automatically set private: true in the package.json while still allowing interactive input.

LANGUAGE: sh
CODE:
$ yarn init --private

LANGUAGE: json
CODE:
{
  "name": "my-awesome-package",
  "version": "1.0.0",
  "description": "The best package you will ever find.",
  "main": "index.js",
  "repository": {
    "url": "https://github.com/yarnpkg/example-yarn-package",
    "type": "git"
  },
  "author": "Yarn Contributor",
  "license": "MIT",
  "private": true
}

----------------------------------------

TITLE: Destroying Teams in Yarn CLI
DESCRIPTION: Command to destroy an existing team within a specified scope in Yarn.

LANGUAGE: bash
CODE:
yarn team destroy <scope:team>

----------------------------------------

TITLE: Displaying Workspace Dependency Tree with Yarn CLI
DESCRIPTION: This command displays the workspace dependency tree of the current project. It shows the location of each workspace, its workspace dependencies, and any mismatched workspace dependencies.

LANGUAGE: sh
CODE:
yarn workspaces info

----------------------------------------

TITLE: Retrieving README Content from Package Information with Yarn
DESCRIPTION: Shows how to explicitly request the 'readme' field from package information using the 'yarn info' command, which is not returned by default due to its typically large size.

LANGUAGE: sh
CODE:
yarn info react readme

LANGUAGE: sh
CODE:
yarn info vx.x.x
## react

An npm package to get you immediate access to
[React](https://facebook.github.io/react/).
...

----------------------------------------

TITLE: Removing Dependencies from a Specific Workspace using Yarn CLI
DESCRIPTION: This command removes a package named 'some-package' from the 'web-project' workspace.

LANGUAGE: sh
CODE:
yarn workspace web-project remove some-package

----------------------------------------

TITLE: Directory Structure Example - Standard Installation
DESCRIPTION: Shows the typical directory structure of a monorepo project using Yarn Workspaces with packages A and B, where A depends on B, and B depends on an external package.

LANGUAGE: bash
CODE:
| my_project/
|      package.json
|      node_modules/
|          A/ (symlink to packages/A)
|          B/ (symlink to packages/B)
|          External/
|      packages/
|          A/
|              node_modules/ (empty)
|          B/
|              node_modules/ (empty)

----------------------------------------

TITLE: Test Script Example in Shell
DESCRIPTION: Simple bash script example showing a basic test script that prints 'Hello, world!'

LANGUAGE: sh
CODE:
#!/bin/bash

echo "Hello, world!"

----------------------------------------

TITLE: Running Commands Across All Workspaces with Yarn CLI
DESCRIPTION: This command runs a specified Yarn command in each workspace. It can be used to execute scripts like tests across all workspaces and supports passing additional flags.

LANGUAGE: sh
CODE:
yarn workspaces run test

LANGUAGE: sh
CODE:
yarn workspaces run test --ci

----------------------------------------

TITLE: Directory Structure Example - Version Conflicts
DESCRIPTION: Shows how Yarn handles version conflicts in dependencies when using focused workspaces, demonstrating nested node_modules structure.

LANGUAGE: bash
CODE:
| my_project/
|      package.json
|      node_modules/
|          A/ (symlink to packages/A)
|          B/ (symlink to packages/B)
|          External/ (v2)
|      packages/
|          A/
|              node_modules/
|                  External (v1)
|                  B/
|                      node_modules/
|                          External/ (v2)
|          B/
|              node_modules/ (empty)

----------------------------------------

TITLE: Scoped Package Yarn Upgrade Commands
DESCRIPTION: Examples of upgrading scoped packages using the --scope flag, with options for latest versions.

LANGUAGE: sh
CODE:
yarn upgrade --scope @angular
yarn upgrade -S @angular

----------------------------------------

TITLE: Setting Child Process Concurrency in Yarn
DESCRIPTION: Controls the parallel execution of child processes when building node modules. Setting this to 1 forces sequential builds, which can help avoid linker errors with node-gyp on Windows systems.

LANGUAGE: javascript
CODE:
process.env.CHILD_CONCURRENCY=#number#

----------------------------------------

TITLE: Configuring Root Project with Nohoist
DESCRIPTION: Example of configuring workspaces with nohoist rules in a root project's package.json, preventing react-native modules from being hoisted.

LANGUAGE: json
CODE:
"workspaces": {
  "packages": ["packages/*"],
  "nohoist": ["**/react-native", "**/react-native/**"]
}

----------------------------------------

TITLE: Linking yarn 3+ Project
DESCRIPTION: Command to link a yarn 3+ project into a project using older yarn versions using YARN_IGNORE_PATH environment variable.

LANGUAGE: sh
CODE:
$ YARN_IGNORE_PATH=1 yarn link

----------------------------------------

TITLE: Package License Configuration
DESCRIPTION: Examples of different ways to specify licensing information in package.json.

LANGUAGE: json
CODE:
{
  "license": "MIT",
  "license": "(MIT or GPL-3.0)",
  "license": "SEE LICENSE IN LICENSE_FILENAME.txt",
  "license": "UNLICENSED"
}

----------------------------------------

TITLE: Incorrect Dependency Configuration for React Plugin
DESCRIPTION: This snippet shows an incorrect way of specifying React as a dependency for a plugin. This approach can lead to multiple copies of React in the project.

LANGUAGE: json
CODE:
{
  "name": "my-awesome-plugin",
  "dependencies": {
    "react": "^16.0.0"
  }
}

----------------------------------------

TITLE: Removing Users from Teams in Yarn CLI
DESCRIPTION: Command to remove a user from a team they belong to within a specified scope in Yarn.

LANGUAGE: bash
CODE:
yarn team remove <scope:team> <user>

----------------------------------------

TITLE: Configuring Individual Workspace package.json (workspace-b)
DESCRIPTION: Demonstrates the package.json configuration for workspace-b, including its dependencies on both an external package and another workspace.

LANGUAGE: json
CODE:
{
  "name": "workspace-b",
  "version": "1.0.0",

  "dependencies": {
    "cross-env": "5.0.5",
    "workspace-a": "1.0.0"
  }
}

----------------------------------------

TITLE: Updating Yarn Lockfile to Use HTTPS
DESCRIPTION: This command uses sed to replace all occurrences of 'http:' with 'https:' in the yarn.lock file. This is a security measure to ensure all package references use encrypted connections.

LANGUAGE: bash
CODE:
$ sed -i '' 's/http:/https:/g' yarn.lock

----------------------------------------

TITLE: Auditing Multiple Dependency Groups with Yarn
DESCRIPTION: Example of using the 'yarn audit' command to check for vulnerabilities in both dependencies and devDependencies groups.

LANGUAGE: sh
CODE:
$ yarn audit --groups "dependencies devDependencies"

----------------------------------------

TITLE: Configuring Offline Mirror in Yarn
DESCRIPTION: Sets up an offline mirror for package caching. The value must be a relative file path or 'false' to disable the mirror.

LANGUAGE: shell
CODE:
yarn-offline-mirror "./packages-cache"

----------------------------------------

TITLE: Configuring Yarn Steps in Codefresh Pipeline YAML
DESCRIPTION: A Codefresh pipeline configuration that demonstrates cloning a repository, running Yarn tests, and building a React application. The pipeline uses different Node.js versions through Docker images and includes automatic caching of the node_modules directory.

LANGUAGE: yaml
CODE:
version: '1.0'
stages:
  - prepare
  - test
  - build
steps:
  main_clone:
    title: Cloning main repository...
    stage: prepare
    type: git-clone
    repo: 'codefresh-contrib/react-sample-app'
    revision: master
    git: github
  MyUnitTests:
    title: Unit test
    stage: test
    image: node:11.0
    commands:
      - yarn install
      - yarn test
    environment:
      - CI=true
  MyReactBuild:
    title: Packaging application
    stage: build
    image: node:8.16
    commands:
      - yarn build

----------------------------------------

TITLE: Creating a .yarnclean File for Yarn Autoclean
DESCRIPTION: This example demonstrates how to create a .yarnclean file with glob patterns to delete YAML and Markdown files from node_modules. The file is used by the 'yarn autoclean' command to remove unnecessary files from package dependencies.

LANGUAGE: yaml
CODE:
*.yaml
*.md

----------------------------------------

TITLE: Specifying Custom Yarn Path
DESCRIPTION: Instructs Yarn to use a specific binary for execution. Useful for ensuring consistent Yarn versions across a team. Requires Yarn >= 1.0.

LANGUAGE: shell
CODE:
yarn-path "./bin/yarn"

----------------------------------------

TITLE: Complete GitLab CI Configuration with Yarn Testing
DESCRIPTION: Full example of GitLab CI configuration that includes Node.js image specification, Yarn installation with caching, and test stage configuration.

LANGUAGE: yaml
CODE:
# .gitlab-ci.yml
image: node:9.11.1

before_script:
  - yarn install --cache-folder .yarn

test:
  stage: test
  cache:
    paths:
    - node_modules/
    - .yarn

----------------------------------------

TITLE: Generating Lock File Entry with Yarn CLI
DESCRIPTION: This command generates a lock file entry based on the current package.json manifest. It outputs an autogenerated file with version and dependency information. Note that this is considered an advanced command for specific use-cases and tooling.

LANGUAGE: sh
CODE:
$ yarn generate-lock-entry
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
yarnpkg@0.14.0:
  version "0.14.0"
  dependencies:
    babel-plugin-transform-inline-imports-commonjs "^1.0.0"
    babel-runtime "^6.0.0"
    bytes "^2.4.0"
    [...]

----------------------------------------

TITLE: Setting Child Concurrency in Yarn
DESCRIPTION: Controls the number of child processes that run in parallel to build node modules. Setting to 1 causes sequential building, which can avoid linker errors on Windows with node-gyp.

LANGUAGE: shell
CODE:
child-concurrency #number#

----------------------------------------

TITLE: Installing Specific Yarn Version on Semaphore CI
DESCRIPTION: Shell commands to add Yarn package repository, import GPG key, and install a specific version of Yarn using Semaphore's install-package tool. Uses apt package manager for Debian-based systems.

LANGUAGE: sh
CODE:
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb http://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
# install-package is a tool for caching APT installations in Semaphore
# defining a package version is optional
install-package --update-new yarn=<version>

----------------------------------------

TITLE: Generating Lockfile with Yarn Install Command
DESCRIPTION: This snippet demonstrates that the 'yarn install' command automatically generates a lockfile, making a separate lockfile command unnecessary.

LANGUAGE: shell
CODE:
yarn install

----------------------------------------

TITLE: Disabling Integrity Migration in Yarn
DESCRIPTION: Enables yarn.lock checksum migration for sha512 support when set to false. This causes a lockfile format change and will be the default in version 2.0.

LANGUAGE: shell
CODE:
unsafe-disable-integrity-migration false

----------------------------------------

TITLE: Running a Script without 'run' Keyword in Yarn
DESCRIPTION: Example of running a script without using the 'run' keyword in the yarn command. This snippet demonstrates a shorthand way to execute the 'test' script with arguments.

LANGUAGE: sh
CODE:
yarn test -o --watch

----------------------------------------

TITLE: Using Yarn CLI Logout Command
DESCRIPTION: The yarn logout command removes stored authentication credentials (username and email) for the npm registry that were previously set using yarn login. Note that individual registry actions handle authentication separately.

LANGUAGE: bash
CODE:
yarn logout

----------------------------------------

TITLE: Setting CLI Arguments in Yarn Configuration
DESCRIPTION: Demonstrates how to set CLI arguments in .yarnrc file. This is equivalent to passing the arguments directly to the yarn command.

LANGUAGE: shell
CODE:
--install.check-files true

LANGUAGE: shell
CODE:
--cache-folder /tmp/yarn-cache/

----------------------------------------

TITLE: Creating Package Archive with Yarn Pack
DESCRIPTION: Basic yarn pack command that creates a compressed gzip archive containing all package dependencies.

LANGUAGE: bash
CODE:
yarn pack

----------------------------------------

TITLE: Reinitializing Yarn Installation with Offline Mirror
DESCRIPTION: This Bash snippet shows the process of removing existing node_modules and yarn.lock, then running a fresh 'yarn install' to generate a new lockfile with offline mirror configuration.

LANGUAGE: bash
CODE:
$ rm -rf node_modules/ yarn.lock
$ yarn install
yarn install v0.17.8
[1/4] 🔍  Resolving packages...
[2/4] 🚚  Fetching packages...
[3/4] 🔗  Linking dependencies...
[4/4] 📃  Building fresh packages...
success Saved lockfile.
✨  Done in 0.57s.

----------------------------------------

TITLE: Configuring Yarn Documentation Index Page with YAML Front Matter
DESCRIPTION: This YAML front matter block sets up the configuration for the Yarn documentation index page. It specifies the page ID, layout template, and includes a custom stylesheet for DocSearch functionality.

LANGUAGE: yaml
CODE:
---
id: docs_index
layout: pages/docs
stylesheets: https://cdn.jsdelivr.net/docsearch.js/2/docsearch.min.css
---

----------------------------------------

TITLE: Running Yarn Install to Prune Packages
DESCRIPTION: The yarn install command automatically prunes extraneous packages, making the separate prune command unnecessary.

LANGUAGE: shell
CODE:
yarn install

----------------------------------------

TITLE: Using Yarn Create Command for Project Initialization
DESCRIPTION: Demonstrates how to use the new 'yarn create' command to initialize projects for various frameworks like React, React Native, and Next.js. This command simplifies the process of setting up new projects by automatically installing or updating the required package and running its executable.

LANGUAGE: bash
CODE:
yarn create react-app my-app
yarn create react-native-app my-app
yarn create next-app my-app

----------------------------------------

TITLE: YAML Frontmatter Configuration for Yarn Installation Docs
DESCRIPTION: YAML frontmatter block that configures the metadata and layout for the Yarn installation documentation page. Specifies the page ID, associated guide section, and layout template path.

LANGUAGE: yaml
CODE:
---
id: docs_install
guide: docs_getting_started
layout: pages/install
---

----------------------------------------

TITLE: Defining Scripts in package.json
DESCRIPTION: Example of defining scripts in a package.json file. This snippet shows how to specify build and test scripts that can be executed using yarn run.

LANGUAGE: json
CODE:
{
  "name": "my-package",
  "scripts": {
    "build": "babel src -d lib",
    "test": "jest"
  }
}

----------------------------------------

TITLE: Yarn Lockfile Structure Example
DESCRIPTION: Example of Yarn's lockfile format showing dependency declarations for has-flag and supports-color packages. The structure demonstrates Yarn's flat, diff-friendly format that requires package.json for complete dependency resolution.

LANGUAGE: yaml
CODE:
has-flag@^1.0.0:
  version "1.0.0"
  resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-1.0.0.tgz#9d9e793165ce017a00f00418c43f942a7b1d11fa"

supports-color@^3.2.3:
  version "3.2.3"
  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-3.2.3.tgz#65ac0504b3954171d8a64946b2ae3cbb8a5f54f6"
  dependencies:
    has-flag "^1.0.0"

----------------------------------------

TITLE: Windows-specific Installation and Serving Commands
DESCRIPTION: Commands for Windows systems where Make is not available, using Bundle and Jekyll directly to install dependencies and serve the website.

LANGUAGE: batch
CODE:
bundle install
bundle exec jekyll serve --incremental

----------------------------------------

TITLE: Defining Pre-scripts in package.json
DESCRIPTION: Example of defining a pre-script in package.json. This snippet shows how to specify a 'prebuild' script that will run automatically before the 'build' script when using yarn run.

LANGUAGE: json
CODE:
{
  "name": "my-package",
  "scripts": {
    "build": "babel src -d lib",
    "prebuild": "jest"
  }
}

----------------------------------------

TITLE: npm 5 Package-Lock Structure Example
DESCRIPTION: Example of npm 5's package-lock.json format showing the same dependencies as the Yarn example. The structure includes complete hoisting information and can serve as a single source of truth for dependency resolution.

LANGUAGE: json
CODE:
{
  "name": "react-example",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "dependencies": {
    "has-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz",
      "integrity": "sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo="
    },
    "supports-color": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-3.2.3.tgz",
      "integrity": "sha1-ZawFBLOVQXHYpklGsq48u4pfVPY="
    }
  }
}

----------------------------------------

TITLE: Configuring YAML Front Matter for Jekyll Blog Post
DESCRIPTION: This YAML snippet sets up the front matter for a Jekyll blog post, including layout, title, author information, date, categories, and share text.

LANGUAGE: yaml
CODE:
---
layout     : post
title      : "Lockfiles should be committed on all projects"
author     : James Kyle
author_url : "https://twitter.com/thejameskyle"
date       : 2016-11-24 8:00:00
categories : announcements
share_text : "Yarn: Lockfiles should be committed on all projects @yarnpkg"
---

----------------------------------------

TITLE: Interactive Prompts for Yarn Project Initialization
DESCRIPTION: These are the prompts that appear when running 'yarn init'. Users can provide answers or use default values for each field.

LANGUAGE: plaintext
CODE:
name (your-project):
version (1.0.0):
description:
entry point (index.js):
git repository:
author:
license (MIT):

----------------------------------------

TITLE: Configuring Custom Host Suffix for VSTS in Yarn's .npmrc
DESCRIPTION: Shows how to set up the new 'custom-host-suffix' configuration in the .npmrc file to enable Yarn to work with Visual Studio Team Services private registries.

LANGUAGE: plaintext
CODE:
custom-host-suffix='pkgs.visualstudio.com'

----------------------------------------

TITLE: Example package.json for a Yarn Project
DESCRIPTION: This is a sample package.json file generated after running 'yarn init'. It contains basic project information and can be further edited as needed.

LANGUAGE: json
CODE:
{
  "name": "my-new-project",
  "version": "1.0.0",
  "description": "My New Project description.",
  "main": "index.js",
  "repository": {
    "url": "https://example.com/your-username/my-new-project",
    "type": "git"
  },
  "author": "Your Name <you@example.com>",
  "license": "MIT"
}

----------------------------------------

TITLE: Creating Yarn Function Alias in Bash and Zsh
DESCRIPTION: Shows how to create a function-based alias in Bash and Zsh that allows for additional parameters. This function aliases 'yarn info --verbose --no-emoji <package> dist-tags'.

LANGUAGE: sh
CODE:
function ynftag { yarn info --verbose --no-emoji "$@" dist-tags; }

----------------------------------------

TITLE: Example of package.json with Various Dependency Versions
DESCRIPTION: This JSON snippet shows how different versions and tags of packages are represented in the package.json file after being added with Yarn.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "package-1": "1.2.3",
    "package-2": "^1.0.0",
    "package-3": "beta"
  }
}

----------------------------------------

TITLE: Creating Yarn Alias in Windows PowerShell
DESCRIPTION: Demonstrates how to create a function-based alias in Windows PowerShell for 'yarn info --verbose --no-emoji <package> dist-tags'. PowerShell aliases are pointers to existing functions.

LANGUAGE: powershell
CODE:
function Get-NpmPackageDistributionTags { yarn info --verbose --no-emoji @Args dist-tags }
New-Alias ynftag Get-NpmPackageDistributionTags

----------------------------------------

TITLE: Updating package.json After Upgrading Dependency
DESCRIPTION: This diff demonstrates how the package.json file changes after upgrading a dependency. The version of the package is updated to reflect the new version.

LANGUAGE: diff
CODE:
  {
    "name": "my-package",
    "dependencies": {
-     "package-1": "^1.0.0"
+     "package-1": "^2.0.0"
    }
  }

----------------------------------------

TITLE: Implementing Basic Package Fetching in JavaScript
DESCRIPTION: A function that downloads package tarballs from URLs using node-fetch. Handles both remote URLs and local filesystem paths.

LANGUAGE: javascript
CODE:
import fetch from 'node-fetch';

async function fetchPackage(reference) {
  let response = await fetch(reference);

  if (!response.ok) throw new Error(`Couldn't fetch package "${reference}"`);

  return await response.buffer();
}

----------------------------------------

TITLE: Removing a Dependency with Yarn
DESCRIPTION: This command removes a package from the project dependencies. It updates both package.json and yarn.lock files to reflect the removal of the specified package.

LANGUAGE: sh
CODE:
yarn remove [package]

----------------------------------------

TITLE: Enabling Yarn Workspaces Configuration
DESCRIPTION: Command to enable Yarn Workspaces feature by setting the workspaces-experimental flag in the .yarnrc file.

LANGUAGE: bash
CODE:
yarn config set workspaces-experimental true

----------------------------------------

TITLE: Installing Dependencies with Yarn
DESCRIPTION: Basic command to initialize a Yarn project and install dependencies from an existing package.json file. This command generates a yarn.lock file and sets up the node_modules directory.

LANGUAGE: sh
CODE:
yarn

----------------------------------------

TITLE: Root Package.json Configuration for Workspaces
DESCRIPTION: Example of root package.json configuration that enables workspaces and defines project-wide dependencies.

LANGUAGE: json
CODE:
{
  "private": true,
  "name": "jest",
  "devDependencies": {
    "chalk": "^2.0.1"
  },
  "workspaces": [
    "packages/*"
  ]
}

----------------------------------------

TITLE: Enabling Plug'n'Play in package.json
DESCRIPTION: This JSON snippet shows how to enable Yarn's Plug'n'Play feature by adding the installConfig.pnp setting to your package.json file. When set to true, Yarn will create a .pnp.js file instead of a node_modules folder during installation.

LANGUAGE: json
CODE:
{
  "installConfig": {
    "pnp": true
  }
}

----------------------------------------

TITLE: Defining Workspaces Config Type in Flow
DESCRIPTION: Flow type definition for the workspaces configuration structure, showing the optional packages and nohoist array properties.

LANGUAGE: typescript
CODE:
// flow type definition:
export type WorkspacesConfig = {
  packages?: Array<string>,
  nohoist?: Array<string>,
};

----------------------------------------

TITLE: Resolving Jest Environment in JavaScript
DESCRIPTION: Demonstrates how to safely resolve Jest environment modules using require.resolve with the paths option. This approach is recommended for resolving dynamic module names without relying on unsafe behaviors.

LANGUAGE: javascript
CODE:
require(require.resolve(`jest-environment-${config.environment}`, {paths:[config.projectPath]}))

----------------------------------------

TITLE: Correct Peer Dependency Configuration for React Plugin
DESCRIPTION: This snippet demonstrates the correct way to specify React as a peer dependency for a plugin. This approach ensures that the plugin uses the same instance of React as the parent project.

LANGUAGE: json
CODE:
{
  "name": "my-awesome-plugin",
  "peerDependencies": {
    "react": "^16.0.0"
  }
}

----------------------------------------

TITLE: Setting Node Options for Plug'n'Play in Shell
DESCRIPTION: Shows how to set Node options to enable Plug'n'Play resolution. This command ensures that the PnP resolver is used, allowing require calls to load files from dependencies correctly.

LANGUAGE: shell
CODE:
NODE_OPTIONS="--require /path/to/.pnp.js"

----------------------------------------

TITLE: Configuring Default Focus in .yarnrc
DESCRIPTION: YAML configuration example showing how to set up default focused installation for specific workspaces using .yarnrc file.

LANGUAGE: yaml
CODE:
--install.focus true

----------------------------------------

TITLE: Logging into npm with Yarn
DESCRIPTION: This command initiates the login process for npm through Yarn. It prompts for username and email, but not password, which is requested during package publishing.

LANGUAGE: sh
CODE:
yarn login

----------------------------------------

TITLE: Example package-lock.json Structure
DESCRIPTION: Demonstrates a simplified package-lock.json file structure showing dependency resolution with multiple versions of the same package.

LANGUAGE: json
CODE:
{
  "name": "nuanced-dependency-tree",
  "dependencies": {
    "a": {
      "version": "9.9.9",
      "requires": {
        "c": "^1.0.0"
      },
      "dependencies": {
        "c": {
          "version": "1.0.1"
        }
      }
    },
    "b": {
      "version": "8.8.8",
      "requires": {
        "c": "^1.0.0"
      }
    },
    "c": {
      "version": "1.0.5"
    }
  }
}

----------------------------------------

TITLE: Configuring Selective Version Resolutions in package.json
DESCRIPTION: Example of configuring package.json with resolutions field to override dependency versions. Shows how to specify custom versions for nested dependencies using both exact versions and version ranges.

LANGUAGE: json
CODE:
{
  "name": "project",
  "version": "1.0.0",
  "dependencies": {
    "left-pad": "1.0.0",
    "c": "file:../c-1",
    "d2": "file:../d2-1"
  },
  "resolutions": {
    "d2/left-pad": "1.1.1",
    "c/**/left-pad": "^1.1.2"
  }
}

----------------------------------------

TITLE: Example yarn.lock Structure
DESCRIPTION: Shows the corresponding yarn.lock file structure after importing the package-lock.json, highlighting how Yarn handles dependency resolution differently.

LANGUAGE: yaml
CODE:
a@9.9.9
  version "9.9.9"
  dependencies:
    c "^1.0.0"

b@8.8.8
  version "8.8.8"
  dependencies:
    c "^1.0.0"

c@^1.0.0
  version "1.0.5"

----------------------------------------

TITLE: Adding Dependencies with Yarn
DESCRIPTION: These commands demonstrate how to add dependencies to a Yarn project. You can specify package names, versions, or tags.

LANGUAGE: sh
CODE:
yarn add [package]
yarn add [package]@[version]
yarn add [package]@[tag]

----------------------------------------

TITLE: Caching Yarn's Cache Folder in AppVeyor YAML Configuration
DESCRIPTION: This YAML configuration snippet demonstrates how to cache Yarn's local cache folder in AppVeyor to speed up builds. It adds the Yarn cache directory located in the local application data to the cache list.

LANGUAGE: yaml
CODE:
cache:
 - "%LOCALAPPDATA%\\Yarn"

----------------------------------------

TITLE: Initializing package.json for Yarn Offline Example
DESCRIPTION: This JSON snippet shows a basic package.json file for a project that will demonstrate Yarn's offline capabilities. It includes several dependencies that will be used in the offline mirror setup.

LANGUAGE: json
CODE:
{
  "name": "yarn-offline",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "is-array": "^1.0.1",
    "left-pad": "^1.1.3",
    "mime-types": "^2.1.13"
  }
}

----------------------------------------

TITLE: Using Node Docker Image with Pre-installed Yarn
DESCRIPTION: Basic GitLab CI configuration using a Node.js Docker image that comes with Yarn pre-installed.

LANGUAGE: yaml
CODE:
# .gitlab-ci.yml
image: node:9.4.0

----------------------------------------

TITLE: Examining Yarn Lockfile Contents
DESCRIPTION: This YAML snippet shows the contents of a yarn.lock file after running 'yarn install'. It demonstrates how Yarn resolves and locks dependencies, including their versions and download URLs.

LANGUAGE: yaml
CODE:
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1

is-array@^1.0.1:
  version "1.0.1"
  resolved "https://registry.yarnpkg.com/is-array/-/is-array-1.0.1.tgz#e9850cc2cc860c3bc0977e84ccf0dd464584279a"

left-pad@^1.1.3:
  version "1.1.3"
  resolved "https://registry.yarnpkg.com/left-pad/-/left-pad-1.1.3.tgz#612f61c033f3a9e08e939f1caebeea41b6f3199a"

mime-db@~1.25.0:
  version "1.25.0"
  resolved "https://registry.yarnpkg.com/mime-db/-/mime-db-1.25.0.tgz#c18dbd7c73a5dbf6f44a024dc0d165a1e7b1c392"

mime-types@^2.1.13:
  version "2.1.13"
  resolved "https://registry.yarnpkg.com/mime-types/-/mime-types-2.1.13.tgz#e07aaa9c6c6b9a7ca3012c69003ad25a39e92a88"
  dependencies:
    mime-db "~1.25.0"

----------------------------------------

TITLE: Configuring Yarn Cache in GitLab CI
DESCRIPTION: Configuration for caching the .yarn folder to improve build performance in GitLab CI pipelines.

LANGUAGE: yaml
CODE:
# .gitlab-ci.yml
cache:
  paths:
    - .yarn

----------------------------------------

TITLE: Updating a Package with Yarn Offline Mirror
DESCRIPTION: This Bash snippet demonstrates the process of updating a package (shelljs) using Yarn with the offline mirror configured. It shows the command to update the package and the resulting changes in git.

LANGUAGE: bash
CODE:
$ yarn add shelljs@0.7.0 --dev
yarn add v0.23.2
[1/4] 🔍  Resolving packages...
[2/4] 🚚  Fetching packages...
[3/4] 🔗  Linking dependencies...
[4/4] 📃  Building fresh packages...
success Saved lockfile.
success Saved 4 new dependencies.
├─ interpret@1.0.1
├─ rechoir@0.6.2
└─ shelljs@0.7.0
│  └─ glob@7.1.1
✨  Done in 8.15s.

$ git diff
diff --git a/package.json b/package.json
index 4619f16..7acb42f 100644
--- a/package.json
+++ b/package.json
@@ -220,7 +220,7 @@
     "mock-fs": "^3.11.0",
     "portfinder": "0.4.0",
     "react": "~15.3.1",
-    "shelljs": "0.6.0",
+    "shelljs": "0.7.0",
     "sinon": "^2.0.0-pre.2"
   }
 }
diff --git a/yarn.lock b/yarn.lock
index 11ce116..f5d81ba 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1,9 +1,12 @@
-shelljs@0.6.0:
-  version "0.6.0"
-  resolved https://registry.yarnpkg.com/shelljs/-/shelljs-0.6.0.tgz#ce1ed837b4b0e55b5ec3dab84251ab9dbdc0c7ec
+shelljs@0.7.0:
+  version "0.7.0"
+  resolved https://registry.yarnpkg.com/shelljs/-/shelljs-0.7.0.tgz#3f6f2e4965cec565f65ff3861d644f879281a576
+  dependencies:
+    glob "^7.0.0"
+    interpret "^1.0.0"
+    rechoir "^0.6.2"
 
 shellwords@^0.1.0:
   version "0.1.0"

$ git status
On branch testing-yarn
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   package.json
    modified:   yarn.lock

Untracked files:
  (use "git add <file>..." to include in what will be committed)

    yarn-offline-mirror/interpret-1.0.1.tgz
    yarn-offline-mirror/rechoir-0.6.2.tgz
    yarn-offline-mirror/shelljs-0.7.0.tgz

no changes added to commit (use "git add" and/or "git commit -a")

----------------------------------------

TITLE: Installing Yarn on Debian/Ubuntu
DESCRIPTION: This command updates the package list and installs Yarn. It should be run after configuring the Yarn repository.

LANGUAGE: sh
CODE:
sudo apt update && sudo apt install yarn

----------------------------------------

TITLE: Demonstrating Package Feed URL Structure for VSTS in Yarn
DESCRIPTION: Shows the URL format for a private package feed in Visual Studio Team Services. This URL is used to access the registry information.

LANGUAGE: plaintext
CODE:
// Package feed URL
https://$ACCOUNT_NAME.pkgs.visualstudio.com/_packaging/$FEED_NAME/npm/registry

----------------------------------------

TITLE: Installing Yarn via RPM Repository on openSUSE
DESCRIPTION: Commands to add the Yarn RPM repository, import its public key, and install Yarn using zypper package manager on openSUSE Linux.

LANGUAGE: bash
CODE:
sudo rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg
sudo zypper ar -f https://dl.yarnpkg.com/rpm/ Yarn
sudo zypper in yarn

----------------------------------------

TITLE: Illustrating Package Archive URL Structure for VSTS in Yarn
DESCRIPTION: Demonstrates the URL format for downloading a specific package archive from Visual Studio Team Services. This URL contains a GUID instead of the feed name and includes package-specific information.

LANGUAGE: plaintext
CODE:
// Package archive URL
https://$ACCOUNT_NAME.pkgs.visualstudio.com/_packaging/da6e033f-20ad-4ee1-a784-8995dd6836b72/npm/registry/@scope/package-name/-/package-name-0.0.1.tgz

----------------------------------------

TITLE: Installing Yarn via Solus Package Manager
DESCRIPTION: Command to install the stable version of Yarn package manager using Solus's eopkg package manager. This requires sudo privileges.

LANGUAGE: sh
CODE:
sudo eopkg install yarn

----------------------------------------

TITLE: Creating Yarn Abbreviation in Fish Shell
DESCRIPTION: Illustrates how to add an abbreviation in Fish shell for 'yarn info --verbose --no-emoji'. Fish abbreviations expand into full commands as you type.

LANGUAGE: sh
CODE:
abbr --add ynf yarn info --verbose --no-emoji

----------------------------------------

TITLE: Installing Yarn via Shell Script - Stable Version
DESCRIPTION: Installs the stable version of Yarn package manager using a shell script. The installation process includes GPG signature verification for security.

LANGUAGE: sh
CODE:
curl -o- -L https://yarnpkg.com/install.sh | bash

----------------------------------------

TITLE: Creating Yarn Function in Fish Shell
DESCRIPTION: Demonstrates how to create a function in Fish shell that allows for additional parameters. This function aliases 'yarn info --verbose --no-emoji <package> dist-tags'.

LANGUAGE: sh
CODE:
function ynftag --wraps yarn --description "yarn info --verbose --no-emoji <package> dist-tags"
  yarn info --verbose --no-emoji $argv dist-tags
end

----------------------------------------

TITLE: Adding Yarn to PATH in Bash/Zsh
DESCRIPTION: Command to add Yarn's installation directory to the system PATH variable. This allows Yarn to be executed from any directory in the terminal.

LANGUAGE: bash
CODE:
export PATH="$PATH:/opt/yarn-[version]/bin"

----------------------------------------

TITLE: Persisting Fish Shell Function
DESCRIPTION: Shows how to save a Fish shell function to the autoload directory for persistence across sessions.

LANGUAGE: sh
CODE:
funcsave ynftag

----------------------------------------

TITLE: Adding Yarn Global Binaries to PATH in Bash/Zsh
DESCRIPTION: Command to add Yarn's global binary directory to PATH, enabling access to globally installed packages from anywhere.

LANGUAGE: bash
CODE:
export PATH="$PATH:`yarn global bin`"

----------------------------------------

TITLE: Creating Yarn 'ls' Alias in Windows PowerShell
DESCRIPTION: Shows how to create a function in PowerShell that re-adds the 'ls' command to list packages in Yarn. This function modifies the arguments passed to Yarn.

LANGUAGE: powershell
CODE:
function Private:yarn() {
	$modifiedArgs = @()
	foreach ( $arg in $args ) {
		if ( $arg -cmatch '^ls$' ) {
			$arg = 'list'
		}
		$modifiedArgs += $arg
	}
	& yarn $modifiedArgs
}

----------------------------------------

TITLE: Installing Yarn via Scoop Command-line Installer
DESCRIPTION: Installs Yarn using the Scoop command-line installer for Windows. May require separate Node.js installation.

LANGUAGE: sh
CODE:
scoop install yarn

----------------------------------------

TITLE: Creating Yarn Alias in Command Prompt
DESCRIPTION: Demonstrates how to create an alias in Windows Command Prompt for 'yarn info --verbose --no-emoji <package> dist-tags'. This alias is created using the 'doskey' command.

LANGUAGE: sh
CODE:
doskey ynftag=yarn info --verbose --no-emoji $* dist-tags

----------------------------------------

TITLE: Installing Node.js via Scoop
DESCRIPTION: Installs Node.js using Scoop if not already present on the system. This is a prerequisite for Yarn installation.

LANGUAGE: sh
CODE:
scoop install nodejs

----------------------------------------

TITLE: Persisting Command Prompt Aliases
DESCRIPTION: Shows how to create a custom 'cmdrc.cmd' file to persist aliases in Windows Command Prompt. This file is then referenced in the Command Prompt shortcut target.

LANGUAGE: sh
CODE:
@echo off
doskey ynftag=yarn info --verbose --no-emoji $* dist-tags

----------------------------------------

TITLE: Adding Yarn to Windows PATH Variable
DESCRIPTION: Command to add Yarn's binary directory to the Windows PATH environment variable, enabling global access to Yarn commands from any terminal location

LANGUAGE: batch
CODE:
set PATH=%PATH%;C:\.yarn\bin

----------------------------------------

TITLE: Package.json Example for Dependencies
DESCRIPTION: Example package.json file showing how dependencies are specified with version ranges.

LANGUAGE: json
CODE:
{
    "dependencies": {
        "react": "^15.5.4",
        "babel-core": "6.25.0"
    }
}

----------------------------------------

TITLE: Building Yarn from Source
DESCRIPTION: Commands to build Yarn from source code. The first command performs a one-off build, while the second command enables automatic rebuilding as changes are made.

LANGUAGE: sh
CODE:
yarn build

LANGUAGE: sh
CODE:
yarn watch

----------------------------------------

TITLE: Workspace Package Configuration - jest-diff
DESCRIPTION: Example package.json configuration for a workspace package that depends on another workspace package.

LANGUAGE: json
CODE:
{
  "name": "jest-diff",
  "version": "20.0.3",
  "license": "...",
  "main": "...",
  "browser": "...",
  "dependencies": {
    "chalk": "^1.1.3",
    "diff": "^3.2.0",
    "jest-matcher-utils": "^20.0.3",
    "pretty-format": "^20.0.3"
  }
}

----------------------------------------

TITLE: Testing Local Changes in Yarn
DESCRIPTION: Command to create an alias for testing local changes to Yarn without overriding an existing installation. This allows developers to run a locally modified version of Yarn for testing purposes.

LANGUAGE: sh
CODE:
alias yarn-local="node $PWD/lib/cli/index.js"

----------------------------------------

TITLE: Lerna Configuration with Workspaces
DESCRIPTION: Example lerna.json configuration that enables integration with Yarn Workspaces.

LANGUAGE: json
CODE:
{
  "lerna": "2.0.0",
  "npmClient": "yarn",
  "useWorkspaces": true
}

----------------------------------------

TITLE: Running Yarn Tests and Linters
DESCRIPTION: Commands to run tests and linters for the Yarn project. The first command runs both linters and tests, while the subsequent commands run linters and tests separately.

LANGUAGE: sh
CODE:
yarn test

LANGUAGE: sh
CODE:
yarn lint

LANGUAGE: sh
CODE:
yarn test-only

----------------------------------------

TITLE: Root Project Without Nohoist
DESCRIPTION: Basic workspaces configuration without nohoist settings, showing the standard packages array only.

LANGUAGE: json
CODE:
"workspaces": {
  "packages": ["packages/*"]
}

----------------------------------------

TITLE: Signing Yarn Release Artifacts with GPG
DESCRIPTION: Command to GPG sign the .tar.gz and .js artifacts for a Yarn release. This generates .asc signature files that should be attached to the release.

LANGUAGE: bash
CODE:
gpg -u 9D41F3C3 --armor --detach-sign yarn-0.xx.xx.tar.gz

----------------------------------------

TITLE: Child Project Nohoist Configuration
DESCRIPTION: Example of configuring nohoist rules in a child project's package.json, specifically for react-native dependencies.

LANGUAGE: json
CODE:
"workspaces": {
  "nohoist": ["react-native", "react-native/**"]
}

----------------------------------------

TITLE: Authenticode Signing Yarn Windows Installer
DESCRIPTION: Commands to Authenticode sign the .msi artifacts for Yarn Windows installer. This process uses osslsigncode to sign with SHA1 and SHA2 algorithms.

LANGUAGE: bash
CODE:
osslsigncode sign -t http://timestamp.digicert.com -n "Yarn Installer" -i https://yarnpkg.com/ -pkcs12 yarn-20161122.pfx -readpass yarn-20161122.key -h sha1 -in yarn-0.xx.xx-unsigned.msi -out yarn-0.xx.xx.msi
osslsigncode sign -t http://timestamp.digicert.com -n "Yarn Installer" -i https://yarnpkg.com/ -pkcs12 yarn-20161122.pfx -readpass yarn-20161122.key -nest -h sha2 -in yarn-0.xx.xx.msi -out yarn-0.xx.xx.msi

----------------------------------------

TITLE: Directory Structure Example - Focused Installation
DESCRIPTION: Demonstrates the directory structure after running yarn install --focus, showing how package B is installed directly under package A's node_modules instead of being symlinked.

LANGUAGE: bash
CODE:
| my_project/
|      package.json
|      node_modules/
|          A/ (symlink to packages/A)
|          B/ (symlink to packages/B)
|          External/
|      packages/
|          A/
|              node_modules/
|                  B/ (not a symlink. Pulled from registry. No need to build.)
|          B/
|              node_modules/ (empty)

----------------------------------------

TITLE: Building Chocolatey Package for Yarn
DESCRIPTION: PowerShell script to build and push Yarn package to Chocolatey package manager.

LANGUAGE: powershell
CODE:
./scripts/build-chocolatey.ps1

----------------------------------------

TITLE: Installing Bundler Dependency
DESCRIPTION: Command to install the Bundler package manager for Ruby dependencies.

LANGUAGE: sh
CODE:
$ gem install bundler

----------------------------------------

TITLE: Updating Yarn in Homebrew
DESCRIPTION: Bash script to update Yarn package in Homebrew package manager.

LANGUAGE: bash
CODE:
./scripts/update-homebrew.sh

----------------------------------------

TITLE: Installing Specific Yarn Version with apt-get on Linux
DESCRIPTION: This command installs a specific version of Yarn using apt-get. The '{{site.latest_version}}' placeholder should be replaced with the desired Yarn version number. The '-y' flag automatically answers yes to prompts, and '-qq' reduces output verbosity.

LANGUAGE: bash
CODE:
sudo apt-get install -y -qq yarn={{site.latest_version}}-1

----------------------------------------

TITLE: Defining Metadata for Yarn Users Page in Markdown
DESCRIPTION: This snippet defines the front matter for a markdown document, specifying the page ID as 'users' and the layout as 'pages/users'. This metadata is likely used by a static site generator to render the appropriate page template and content.

LANGUAGE: markdown
CODE:
---
id: users
layout: pages/users
---

----------------------------------------

TITLE: Installing Yarn in Custom Docker Image
DESCRIPTION: Configuration for installing Yarn in a Docker container that doesn't have it pre-installed, including the installation script and PATH configuration.

LANGUAGE: yaml
CODE:
# .gitlab-ci.yml
image: does-not-have-yarn

before_script:
  # Install yarn as outlined in (https://yarnpkg.com/lang/en/docs/install/#alternatives-stable)
  - curl -o- -L https://yarnpkg.com/install.sh | bash
  # Make available in the current terminal
  - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

----------------------------------------

TITLE: Configuring Layout for Yarn Homepage in YAML
DESCRIPTION: This YAML configuration specifies the layout template to be used for the Yarn package manager's homepage. It sets the layout to 'pages/homepage', indicating that the content should be rendered using the homepage template located in the pages directory.

LANGUAGE: yaml
CODE:
---
layout: pages/homepage
---

----------------------------------------

TITLE: Installing Yarn on Travis CI with Debian Package Manager
DESCRIPTION: Configuration snippet for installing Yarn manually on Travis CI using apt package manager. Includes adding the Yarn repository, installing Yarn, and enabling caching.

LANGUAGE: yaml
CODE:
before_install: # if "install" is overridden
  # Repo for Yarn
  - sudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg
  - echo "deb http://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
  - sudo apt-get update -qq
  - sudo apt-get install -y -qq yarn
cache:
  yarn: true

----------------------------------------

TITLE: Defining Markdown Frontmatter for Yarn Organization Guide
DESCRIPTION: This snippet defines the frontmatter for the Yarn organization guide page, specifying the ID, guide type, and layout.

LANGUAGE: markdown
CODE:
---
id: organization
guide: yarn_organization
layout: guide
---

----------------------------------------

TITLE: Configuring Yarn Repository for Release Candidate Version on Debian/Ubuntu
DESCRIPTION: These commands add the Yarn package repository for the release candidate version to the system's package sources. It first adds the GPG key and then adds the repository to the sources list.

LANGUAGE: sh
CODE:
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ rc main" | sudo tee /etc/apt/sources.list.d/yarn.list

----------------------------------------

TITLE: Cloning Yarn Website Repository
DESCRIPTION: Commands to clone the Yarn website repository and navigate to the project directory.

LANGUAGE: sh
CODE:
$ git clone git@github.com:yarnpkg/website.git yarn-website
$ cd yarn-website

----------------------------------------

TITLE: Installing Yarn without Node.js on Debian/Ubuntu
DESCRIPTION: This command installs Yarn without installing Node.js, useful when using nvm. It updates the package list and installs Yarn without recommended packages.

LANGUAGE: sh
CODE:
sudo apt update && sudo apt install --no-install-recommends yarn

----------------------------------------

TITLE: Building Website Using Make
DESCRIPTION: Single command to build the website using Make configuration.

LANGUAGE: sh
CODE:
$ make

----------------------------------------

TITLE: Installing Yarn via MacPorts on macOS
DESCRIPTION: Installs Yarn using the MacPorts package manager. This command will also install Node.js if not already present. Requires sudo privileges.

LANGUAGE: sh
CODE:
sudo port install yarn

----------------------------------------

TITLE: Alternative Make Commands for Installation and Serving
DESCRIPTION: Two-step process using Make to install dependencies and serve the website locally.

LANGUAGE: sh
CODE:
$ make install
$ make serve

----------------------------------------

TITLE: Upgrading Yarn via Homebrew on macOS
DESCRIPTION: Updates Yarn to the latest version available through Homebrew. Yarn will warn you when a new version is available.

LANGUAGE: sh
CODE:
brew upgrade yarn

----------------------------------------

TITLE: Setting Robot Exclusion Rules for Yarn Website
DESCRIPTION: Configures web crawler access rules to prevent indexing of debug pages, paginated content, and package subdirectories. Also specifies the location of the XML sitemap.

LANGUAGE: robots.txt
CODE:
User-agent: *
Disallow: /-debug/
Disallow: /page*/
Disallow: /*/packages/

Sitemap: http://sitemap.yarnpkg.com/sitemap-index.xml

----------------------------------------

TITLE: Installing Yarn Nightly via Shell Script
DESCRIPTION: Direct installation of Yarn nightly build using a curl command and shell script execution.

LANGUAGE: sh
CODE:
curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --nightly

----------------------------------------

TITLE: Setting up Yarn Nightly on Ubuntu/Debian
DESCRIPTION: Series of commands to add the Yarn nightly repository to apt sources and install Yarn on Ubuntu/Debian systems. Includes adding GPG key, configuring repository, and installing the package.

LANGUAGE: sh
CODE:
sudo apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg
echo "deb http://nightly.yarnpkg.com/debian/ nightly main" | sudo tee /etc/apt/sources.list.d/yarn-nightly.list
sudo apt update && sudo apt install yarn

----------------------------------------

TITLE: Including Variables in HTML for Yarn Documentation
DESCRIPTION: This snippet includes a variables file, likely containing shared variables used throughout the Yarn documentation.

LANGUAGE: html
CODE:
{% include vars.html %}

----------------------------------------

TITLE: Displaying Lead Paragraph in HTML for Yarn Organization Guide
DESCRIPTION: This HTML snippet creates a lead paragraph introducing the purpose of the Yarn organization guide.

LANGUAGE: html
CODE:
<p class="lead">
  Rules, guidelines, and documentation on Yarn contribution, processes, and
  community.
</p>

----------------------------------------

TITLE: Configuring YAML Front Matter for Yarn Nightly Documentation
DESCRIPTION: This YAML snippet defines the configuration for a Yarn documentation page about nightly builds. It sets the page ID, specifies the associated getting started guide, and defines the layout template to be used.

LANGUAGE: yaml
CODE:
---
id: docs_nightly
guide: docs_getting_started
layout: pages/nightly
---