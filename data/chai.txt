TITLE: Using BDD Assertion Styles in Chai
DESCRIPTION: Demonstrates the two main BDD assertion styles available in Chai: 'expect' and 'should'. Both styles provide the same chainable assertion functionality but are initialized differently.

LANGUAGE: javascript
CODE:
expect
should

----------------------------------------

TITLE: Testing HTTP GET request using chai-http in JavaScript
DESCRIPTION: Provides a complete example of testing an HTTP GET request using chai-http plugin. It demonstrates setting up the test, making the request, and asserting the response.

LANGUAGE: javascript
CODE:
import * as chai from 'chai';
import { request, default as chaiHttp } from 'chai-http';

const {expect} = chai;

chai.use(chaiHttp);

describe('GET /user', () => {
  it('should return the user', done => {
    request('http://example.com')
      .get('/user')
      .end((err, res) => {
        expect(res).to.have.status(200);
        expect(res.body).to.be.an('object');
        done();
      });
  });
});

----------------------------------------

TITLE: Using Assert Style in Chai
DESCRIPTION: Demonstrates the classic assert-dot notation style for making assertions in Chai. Shows type checking, equality testing, and length verification with optional error messages.

LANGUAGE: javascript
CODE:
import {assert} from 'chai';

const foo = 'bar';
const beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };

assert.typeOf(foo, 'string'); // without optional message
assert.typeOf(foo, 'string', 'foo is a string'); // with optional message
assert.equal(foo, 'bar', 'foo equal `bar`');
assert.lengthOf(foo, 3, 'foo`s value has a length of 3');
assert.lengthOf(beverages.tea, 3, 'beverages has 3 types of tea');

----------------------------------------

TITLE: Simplified Promise Assertion using Chai as Promised in JavaScript
DESCRIPTION: Shows how to use Chai as Promised to write more expressive and concise assertions for promises.

LANGUAGE: javascript
CODE:
return doSomethingAsync().should.eventually.equal("foo");

----------------------------------------

TITLE: Handling Responses with Promises in Chai HTTP
DESCRIPTION: Example of making a request and asserting on its response using Promises, which is available if Promise is supported.

LANGUAGE: javascript
CODE:
chai.request(app)
  .put('/user/me')
  .send({ password: '123', confirmPassword: '123' })
  .then(function (res) {
     expect(res).to.have.status(200);
  })
  .catch(function (err) {
     throw err;
  });

----------------------------------------

TITLE: Basic React Element Assertions with Chai
DESCRIPTION: Examples of basic assertions using the chai-react-element plugin to test React components. Shows testing for text content, element type, and props.

LANGUAGE: javascript
CODE:
expect(<div>hello</div>).to.have.text('hello');
expect(<div></div>).to.have.elementOfType('div')
expect(<div data-foo="bar"></div>).to.have.prop('data-foo', 'bar');

expect(<div><div data-foo="bar"></div></div>).to.include.prop('data-foo', 'bar');

expect(<div><span>hello</span></div>).to.include.elementOfType('span').with.text('hello');

----------------------------------------

TITLE: Sinon-Chai Expect Style Testing Example
DESCRIPTION: Complete example showing how to use Sinon-Chai with Chai's expect assertion style in a test case.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
var expect = chai.expect;
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        expect(cb).to.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Composing a Basic Assertion in Chai
DESCRIPTION: Demonstrates how to compose a basic assertion using the 'assert' method, including error message handling.

LANGUAGE: javascript
CODE:
const arthur = new Assertion('Arthur Dent');

arthur.assert(
    arthur._obj === 'Arthur Dent'
  , "expected #{this} to be 'Arthur Dent'"
  , "expected #{this} to not be 'Arthur Dent'"
);

----------------------------------------

TITLE: Sinon-Chai Should Style Testing Example
DESCRIPTION: Complete example showing how to use Sinon-Chai with Chai's should assertion style in a test case.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
chai.should();
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        cb.should.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Creating a Reusable Chai Helper
DESCRIPTION: Shows how to structure a reusable Chai helper function in an external file for use across multiple test files.

LANGUAGE: javascript
CODE:
export function chaiModel(chai, utils) {
  var Assertion = chai.Assertion;

  // your helpers here
};

----------------------------------------

TITLE: Using Expect Style in Chai
DESCRIPTION: Shows the BDD-style expect interface for making assertions with chainable language. Includes examples of type checking, equality testing, and property verification.

LANGUAGE: javascript
CODE:
import {expect} from 'chai';

const foo = 'bar';
const beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };

expect(foo).to.be.a('string');
expect(foo).to.equal('bar');
expect(foo).to.have.lengthOf(3);
expect(beverages).to.have.property('tea').with.lengthOf(3);

LANGUAGE: javascript
CODE:
const answer = 43;

// AssertionError: expected 43 to equal 42.
expect(answer).to.equal(42);

// AssertionError: topic [answer]: expected 43 to equal 42.
expect(answer, 'topic [answer]').to.equal(42);

----------------------------------------

TITLE: Using Expect and Should Syntax with ChaiRx in JavaScript
DESCRIPTION: This snippet shows how to use both 'expect' and 'should' syntax with ChaiRx. It demonstrates testing for both 'onNext' and 'onError' events in an Observable stream.

LANGUAGE: javascript
CODE:
const xs = scheduler.createHotObservable(onNext(250, { 'foo': 'bar' }), onError(300, new Error('An error')));
const output = scheduler.startScheduler(() => xs);

// expect
expect(output).to.emit([
  onNext(250, { 'foo': 'bar' }),
  onError(300, ({error}) => error.message === 'An error')
]);

// should
output.should.emit([
  onNext(250, { 'foo': 'bar' }),
  onError(300, ({error}) => error.message === 'An error')
]);

----------------------------------------

TITLE: Testing RxJS Observable Emissions with ChaiRx in JavaScript
DESCRIPTION: This snippet demonstrates how to use ChaiRx to test RxJS Observable emissions. It sets up a test scheduler, creates a hot observable, and uses the 'emit' assertion to verify the expected output.

LANGUAGE: javascript
CODE:
import Rx from 'rx';
import chai from 'chai';
import chaiRx from 'chai-rx';

chai.use(chaiRx);

const { onNext, onCompleted } = Rx.ReactiveTest;
const scheduler = new Rx.TestScheduler();

const xs = scheduler.createHotObservable(
  onNext(150, 1),
  onNext(210, 2),
  onNext(220, 3),
  onCompleted(230)
);

// Note we'll start at 200 for subscribe, hence missing the 150 mark
const output = scheduler.startScheduler(() => xs.map(x => x * x), {
  created: 100,
  subscribed: 200,
  disposed: 300
});

expect(output).to.emit([
  onNext(210, 4),
  onNext(220, 9),
  onCompleted(230)
]);

----------------------------------------

TITLE: Using Should Style in Chai
DESCRIPTION: Demonstrates the BDD-style should interface that extends Object.prototype. Shows chainable assertions for type checking, equality, and property verification.

LANGUAGE: javascript
CODE:
import {should} from 'chai';

should(); //actually call the function

const foo = 'bar';
const beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };

foo.should.be.a('string');
foo.should.equal('bar');
foo.should.have.lengthOf(3);
beverages.should.have.property('tea').with.lengthOf(3);

----------------------------------------

TITLE: Promise Assertions Examples
DESCRIPTION: Various examples of promise assertions using should/expect interfaces.

LANGUAGE: javascript
CODE:
return promise.should.be.fulfilled;
return promise.should.eventually.deep.equal("foo");
return promise.should.become("foo"); // same as `.eventually.deep.equal`
return promise.should.be.rejected;
return promise.should.be.rejectedWith(Error);

----------------------------------------

TITLE: Using chai-as-promised with the assert interface
DESCRIPTION: Demonstrates how to use chai-as-promised with Chai's assert interface for promise assertions.

LANGUAGE: javascript
CODE:
return assert.eventually.equal(Promise.resolve(2 + 2), 4, "This had better be true, eventually");

return assert.isFulfilled(promise, "optional message");

return assert.becomes(promise, "foo", "optional message");
return assert.doesNotBecome(promise, "foo", "optional message");

return assert.isRejected(promise, "optional message");
return assert.isRejected(promise, Error, "optional message");
return assert.isRejected(promise, /error message matcher/, "optional message");

----------------------------------------

TITLE: Guarding Against Multiple Calls to use() in Chai Plugin
DESCRIPTION: Demonstrates a best practice for Chai plugins to check if the plugin has already been applied, preventing multiple applications of the same plugin functionality.

LANGUAGE: javascript
CODE:
import * as chai from 'chai';

let overwritten = false;

function somePlugin(base) {
  if (!overwritten) {
    base.util.overwriteMethod(base.Assertion.prototype, "equal", function (_super) {
      return function(...args) {
        console.log("Called!"); // log something out

        return _super.call(this, ...args);
      };
    });
    overwritten = true;
  }
}

chai.use(somePlugin);
chai.use(somePlugin);

chai.expect(123).to.equal(123); // Logs `Called!` only once

----------------------------------------

TITLE: Basic dirty-chai Setup and Usage
DESCRIPTION: Demonstrates how to require and initialize dirty-chai with Chai, showing basic assertion usage

LANGUAGE: javascript
CODE:
var chai = require('chai');
var dirtyChai = require('dirty-chai');
var expect = chai.expect

chai.use(dirtyChai);
// ...
expect(true).to.be.true();

----------------------------------------

TITLE: Using chai-interface for basic object interface assertions in JavaScript
DESCRIPTION: Demonstrates how to use chai-interface to assert the structure of a simple JavaScript object, including various data types like Boolean, String, Number, Function, and Array.

LANGUAGE: javascript
CODE:
var chai = require('chai')
chai.should()
chai.use(require('chai-interface'))

var foo = {
  bar: true,
  baz: 'green',
  qux: 37,
  quack: function () {},
  ducks: [1, 2, 3]
}

foo.should.have.interface({
  bar: Boolean,
  baz: String,
  qux: Number,
  quack: Function,
  ducks: Array
})

----------------------------------------

TITLE: Basic Sinon-Chai Usage Example
DESCRIPTION: Demonstrates the basic usage comparison between Sinon.JS assertions and Sinon-Chai syntax.

LANGUAGE: javascript
CODE:
sinon.assert.calledWith(mySpy, "foo");

mySpy.calledWith("foo").should.be.ok;
expect(mySpy.calledWith("foo")).to.be.ok;

mySpy.should.have.been.calledWith("foo");
expect(mySpy).to.have.been.calledWith("foo");

----------------------------------------

TITLE: Handling Responses with Callbacks in Chai HTTP
DESCRIPTION: Example of making a request and asserting on its response using the 'end' method with a callback function.

LANGUAGE: javascript
CODE:
chai.request(app)
  .put('/user/me')
  .send({ password: '123', confirmPassword: '123' })
  .end(function (err, res) {
     expect(err).to.be.null;
     expect(res).to.have.status(200);
  });

----------------------------------------

TITLE: Defining JSON Pattern for Object Validation in JavaScript
DESCRIPTION: Demonstrates how to create a JSON pattern for validating object properties using various validators. The pattern includes rules for username, password, access token, birthyear, and email fields.

LANGUAGE: javascript
CODE:
const pattern = `
    {
        "username": String AND alphanum AND minLength(3) AND maxLength(30),
        "password": String AND regex("/^[0-9a-zA-Z]{5,30}$/"),
        "access_token"?: String AND Number,
        "birthyear": Integer AND range(1900, 2017),
        "email": String,
        ...
    }
`;

expect(user).to.matchPattern(pattern);

----------------------------------------

TITLE: Basic Promise Assertion Example
DESCRIPTION: Demonstrates the traditional way of asserting promises using manual promise handlers compared to using Chai as Promised.

LANGUAGE: javascript
CODE:
doSomethingAsync().then(
    function (result) {
        result.should.equal("foo");
        done();
    },
    function (err) {
       done(err);
    }
);

----------------------------------------

TITLE: Using chai-subset-in-order Plugin with Chai in JavaScript
DESCRIPTION: This snippet demonstrates how to install, import, and use the chai-subset-in-order plugin with Chai assertions. It shows various examples of using the 'containSubsetInOrder' assertion for objects and arrays.

LANGUAGE: JavaScript
CODE:
const chai = require('chai');
const chaiSubsetInOrder = require('chai-subset-in-order');

chai.use(chaiSubsetInOrder);
const expect = chai.expect;

expect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ foo: 2 });
expect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ bar: 3 });
expect({ foo: 2, bar: 3 }).to.containSubsetInOrder({ foo:2, bar: 3 });
expect({ foo: 2, bar: 3 }).to.not.containSubsetInOrder({ foo: 5 });
expect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ foo: 123 }]);
expect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ bar: 456 }]);
expect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.containSubsetInOrder([{ foo: 123 }, { baz: 111 }]);
expect([{ foo: 123, bar: 456 }, { baz: 111 }]).to.not.containSubsetInOrder([{ baz: 111 }, { foo: 123 }]);

----------------------------------------

TITLE: Defining JSON Pattern for Object Validation in JavaScript
DESCRIPTION: Demonstrates how to create a JSON pattern for validating object properties using various validators. The pattern includes rules for username, password, access token, birthyear, and email fields.

LANGUAGE: javascript
CODE:
const pattern = `
    {
        "username": String AND alphanum AND minLength(3) AND maxLength(30),
        "password": String AND regex("/^[0-9a-zA-Z]{5,30}$/"),
        "access_token"?: String AND Number,
        "birthyear": Integer AND range(1900, 2017),
        "email": String,
        ...
    }
`;

expect(user).to.matchPattern(pattern);

----------------------------------------

TITLE: Chai-Shallowly API Examples for React Component Testing
DESCRIPTION: Demonstrates various assertions provided by chai-shallowly, including checking for classes, text content, element types, finding elements, simulating events, and manipulating state and props.

LANGUAGE: jsx
CODE:
// hasClass
expect(shallow(component).hasClass("class")).to.be.true;
expect(component).to.shallowly.haveClass("class");

// text
expect(shallow(component).text()).to.equal("text");
expect(component).to.shallowly.have.text().equal("text");

// is
expect(shallow(component).is("div")).to.be.true;
expect(component).to.shallowly.match("div");

// type
expect(shallow(component).type("div")).to.be.true;
expect(component).to.shallowly.have.type("div");


// find
expect(shallow(component).find(".foo")).to.have.length(2);
expect(component).to.shallowly.find(".foo").to.have.length(2);

// filter
expect(shallow(component).find(".foo").filter(".bar")).to.have.length(1);
expect(component).to.shallowly.find(".foo").filter(".bar").to.have.length(1);

// not
expect(shallow(component).find(".foo").not(".bar")).to.have.length(1);
expect(component).to.shallowly.find(".foo").without(".bar").to.have.length(1);

// contains
expect(shallow(component).contains("div")).to.be.true;
expect(component).to.shallowly.containJSX("div");

// state
expect(shallow(component).state(state)).to.eql({"foo": "bar"});
expect(component).to.shallowly.have.state(state).eql({"foo": "bar"});

// props
expect(shallow(component).instance().props(propKey)).to.eql(propValue);
expect(component).to.shallowly.have.props(propKey).eql(propValue);

// simulate
/* all of this */
var shallowComponent = shallow(component);
shallowComponent.simulate("click");
expect(shallowComponent.state()).to.eql({"state":"clicked"});

/* vs */
expect(component).to.shallowly.on("click").have.state().eql({"state":"clicked"});

// setState / setProps
var shallowComponent = shallow(component);
shallowComponent.setState(state);
expect(shallowComponent.state()).to.equal(state);

expect(component).to.shallowly.withState(state).to.have.state().equal(state);

----------------------------------------

TITLE: Installing Chai via NPM for Node.js
DESCRIPTION: Command to install Chai as a development dependency using npm package manager.

LANGUAGE: bash
CODE:
npm install --save-dev chai

----------------------------------------

TITLE: Installing and setting up chai-as-promised in Node.js
DESCRIPTION: Shows how to install chai-as-promised using npm and set it up with Chai in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);

// Then either:
var expect = chai.expect;
// or:
var assert = chai.assert;
// or:
chai.should();
// according to your preference of assertion style

----------------------------------------

TITLE: Asserting Spy Behavior with Chai
DESCRIPTION: Demonstrates various assertions available for testing spy behavior, including checking if a function is a spy, if it was called, and with what arguments.

LANGUAGE: javascript
CODE:
expect(spy).to.be.spy;
spy.should.be.spy;

expect(spy).to.have.been.called();
spy.should.have.been.called();

spy('foo');
expect(spy).to.have.been.called.with('foo');
spy.should.have.been.called.with('foo');

spy('foo', 'bar', 1);
expect(spy).to.have.been.called.with('bar', 'foo');
spy.should.have.been.called.with('bar', 'foo');

expect(spy).to.have.been.called.exactly(3);
expect(spy).to.not.have.been.called.exactly(3);
spy.should.have.been.called.exactly(3);
spy.should.not.have.been.called.exactly(3);

----------------------------------------

TITLE: Testing CLI with Chai Exec Assertions in JavaScript
DESCRIPTION: This example demonstrates how to use Chai Exec to test a CLI application using different assertion styles (should, expect, and assert).

LANGUAGE: javascript
CODE:
describe("My CLI", () => {
  it("should exit with a zero exit code", () => {
    // Run your CLI
    let myCLI = chaiExec('my-cli --arg1 --arg2 "some other arg"');

    // Should syntax
    myCLI.should.exit.with.code(0);
    myCLI.stdout.should.contain("Success!");
    myCLI.stderr.should.be.empty;

    // Expect sytnax
    expect(myCLI).to.exit.with.code(0);
    expect(myCLI).stdout.to.contain("Success!");
    expect(myCLI).stderr.to.be.empty;

    // Assert syntax
    assert.exitCode(myCLI, 0);
    assert.stdout(myCLI, "Success!");
    assert.stderr(myCLI, "");
  });
});

----------------------------------------

TITLE: Testing CLI with Chai Exec Assertions in JavaScript
DESCRIPTION: This example demonstrates how to use Chai Exec to test a CLI application using different assertion styles (should, expect, and assert).

LANGUAGE: javascript
CODE:
describe("My CLI", () => {
  it("should exit with a zero exit code", () => {
    // Run your CLI
    let myCLI = chaiExec('my-cli --arg1 --arg2 "some other arg"');

    // Should syntax
    myCLI.should.exit.with.code(0);
    myCLI.stdout.should.contain("Success!");
    myCLI.stderr.should.be.empty;

    // Expect sytnax
    expect(myCLI).to.exit.with.code(0);
    expect(myCLI).stdout.to.contain("Success!");
    expect(myCLI).stderr.to.be.empty;

    // Assert syntax
    assert.exitCode(myCLI, 0);
    assert.stdout(myCLI, "Success!");
    assert.stderr(myCLI, "");
  });
});

----------------------------------------

TITLE: Using chai-js-factories to define and create factories
DESCRIPTION: This JavaScript snippet demonstrates how to use chai-js-factories to define a factory and create instances with default and custom arguments. It showcases the basic usage of the plugin's functionality.

LANGUAGE: javascript
CODE:
chai.factory.define('testFactory', function (args) {
  return new Example(_.extend({foo: 'bar'}, args));
});

console.log(chai.factory.create('testFactory'));
console.log(chai.factory.create('testFactory', {wom: 'bat'}));
console.log(chai.factory.create('testFactory', {foo: 'wombat'}));

----------------------------------------

TITLE: JSON Schema Validation Example
DESCRIPTION: JavaScript code demonstrating the usage of chai-json-schema for validating objects against a JSON schema using different assertion styles.

LANGUAGE: javascript
CODE:
var goodApple = {
  skin: 'thin',
  colors: ['red', 'green', 'yellow'],
  taste: 10
};
var badApple = {
  colors: ['brown'],
  taste: 0,
  worms: 2
};
var fruitSchema = {
  title: 'fresh fruit schema v1',
  type: 'object',
  required: ['skin', 'colors', 'taste'],
  properties: {
    colors: {
      type: 'array',
      minItems: 1,
      uniqueItems: true,
      items: {
        type: 'string'
      }
    },
    skin: {
      type: 'string'
    },
    taste: {
      type: 'number',
      minimum: 5
    }
  }
};

//bdd style
expect(goodApple).to.be.jsonSchema(fruitSchema);
expect(badApple).to.not.be.jsonSchema(fruitSchema);

goodApple.should.be.jsonSchema(fruitSchema);
badApple.should.not.be.jsonSchema(fruitSchema);

//tdd style
assert.jsonSchema(goodApple, fruitSchema);
assert.notJsonSchema(badApple, fruitSchema);

----------------------------------------

TITLE: Testing Event Emitters with Chai Events Plugin
DESCRIPTION: Demonstrates how to use chai-events plugin to test NodeJS EventEmitter instances. Includes examples of asserting emitted events, handling non-emitted events, and configuring timeout options. Shows integration with Mocha testing framework.

LANGUAGE: javascript
CODE:
const chai = require("chai");
chai.use(require("chai-events"));
const should = chai.should();
const EventEmitter = require("events");

describe("Event Emitting", function() {

  let emitter = null;
  beforeEach(function() {
    emitter = new EventEmitter();
  });

  it("should get emitted events", function() {
    let p = emitter.should.emit("get");
    setTimeout(function() {
      emitter.emit("get");
    }, 200);
    return p;
  });

  it("should handle non-emitted events", function() {
    emitter.should.not.emit("missing");
  });

  it("can be configured", function() {
    emitter.should.not.emit("another missing", {
      timeout: 50, // in milliseconds
    });
  });

});

----------------------------------------

TITLE: Customizing Promise Output
DESCRIPTION: Example of customizing promise behavior by overriding transferPromiseness.

LANGUAGE: javascript
CODE:
chaiAsPromised.transferPromiseness = function (assertion, promise) {
    assertion.then = promise.then.bind(promise); // this is all you get by default
    assertion.finally = promise.finally.bind(promise);
    assertion.done = promise.done.bind(promise);
};

----------------------------------------

TITLE: Testing a Custom Iterable Object with chai-iterator
DESCRIPTION: Shows how to use chai-iterator assertions to test the custom 'Count' iterable class.

LANGUAGE: javascript
CODE:
let tens = new Count(10, 10);

tens.should.be.iterable;
tens.should.iterate.from([10, 20, 30]);
tens.should.iterate.from([10, 20, 30, 40, 50]);

----------------------------------------

TITLE: Creating and Using Chai Spies
DESCRIPTION: Demonstrates various ways to create and use spies, including wrapping existing functions, creating empty spies, and spying on object methods.

LANGUAGE: javascript
CODE:
function original () {
  // do something cool
}

var spy = chai.spy(original);

// then use in place of original
ee.on('some event', spy);

// or use without original
var spy_again = chai.spy();
ee.on('some other event', spy_again);

// or you can track an object's method
var array = [ 1, 2, 3 ];
chai.spy.on(array, 'push');

// or you can track multiple object's methods
chai.spy.on(array, 'push', 'pop');

array.push(5);

// and you can reset the object calls
array.push.reset();

// or you can create spy object
var object = chai.spy.object([ 'push', 'pop' ]);
object.push(5);

// or you create spy which returns static value
var spy = chai.spy.returns(true);

spy(); // true

----------------------------------------

TITLE: Basic BigNumber Assertions
DESCRIPTION: Examples of basic assertion methods using chai-bignumber for comparing large numbers and using comparison operators.

LANGUAGE: javascript
CODE:
var result = new BigNumber('100000000000000000').plus(1);
var expected = '100000000000000001';
result.should.be.bignumber.equal(expected);
expect(result).to.be.bignumber.at.most(expected);
'1000'.should.be.bignumber.lessThan(2000);

----------------------------------------

TITLE: Testing a Custom Iterable Object with chai-iterator
DESCRIPTION: Shows how to use chai-iterator assertions to test the custom 'Count' iterable class.

LANGUAGE: javascript
CODE:
let tens = new Count(10, 10);

tens.should.be.iterable;
tens.should.iterate.from([10, 20, 30]);
tens.should.iterate.from([10, 20, 30, 40, 50]);

----------------------------------------

TITLE: Using Chai Deep Match Plugin in JavaScript
DESCRIPTION: Example demonstrating how to require and use the chai-deep-match plugin for performing deep object matching assertions. Shows both positive and negative matching cases.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiDeepMatch = require('chai-deep-match');

chai.use( chaiDeepMatch );


chai.expect( { a: 'foo', b: 'bar', c: 'baz' } ).to.deep.match( { a: 'foo', c: 'baz' } );
// =>  pass

chai.expect( { a: 'foo', b: 'bar', c: 'baz' } ).to.not.deep.match( { a: 'fuzz', c: 'baz' } );
// =>  pass

----------------------------------------

TITLE: Chai Configuration Options
DESCRIPTION: Demonstrates various configuration options in Chai including stack trace inclusion, diff display, and value truncation settings.

LANGUAGE: javascript
CODE:
chai.config.includeStack = true; // turn on stack trace

chai.config.showDiff = false; // turn off reporter diff display

chai.config.truncateThreshold = 0; // disable truncating

----------------------------------------

TITLE: Basic Chai-WebDriver Assertions Example
DESCRIPTION: Demonstrates basic DOM assertions using chai-webdriver for checking text content and visibility of elements.

LANGUAGE: javascript
CODE:
expect('.frequency-field').dom.to.contain.text('One time')
expect('.toggle-pane').dom.to.not.be.visible()

----------------------------------------

TITLE: Chai Spy Assertions
DESCRIPTION: Shows various assertions available for chai spies, including checking if an object is a spy, if it was called, and with what arguments.

LANGUAGE: javascript
CODE:
expect(spy).to.be.spy;
spy.should.be.spy;

expect(spy).to.have.been.called();
spy.should.have.been.called();

spy('foo');
expect(spy).to.have.been.called.with('foo');
spy.should.have.been.called.with('foo');

spy('foo', 'bar', 1);
expect(spy).to.have.been.called.with('bar', 'foo');
spy.should.have.been.called.with('bar', 'foo');

spy();
spy('foo', 'bar');
expect(spy).to.have.been.called.with.exactly('foo', 'bar');
spy.should.have.been.called.with.exactly('foo', 'bar');

spy('foo');
spy('foo', 'bar');
spy(1, 2, 'foo');
expect(spy).to.have.been.called.always.with('foo');
spy.should.have.been.called.always.with('foo');

spy('foo');
spy('foo');
expect(spy).to.have.been.called.always.with.exactly('foo');
spy.should.have.been.called.always.with.exactly('foo');

expect(spy).to.have.been.called.once;
expect(spy).to.not.have.been.called.once;
spy.should.have.been.called.once;
spy.should.not.have.been.called.once;

expect(spy).to.have.been.called.twice;
expect(spy).to.not.have.been.called.twice;
spy.should.have.been.called.twice;
spy.should.not.have.been.called.twice;

expect(spy).to.have.been.called.exactly(3);
expect(spy).to.not.have.been.called.exactly(3);
spy.should.have.been.called.exactly(3);
spy.should.not.have.been.called.exactly(3);

expect(spy).to.have.been.called.min(3);
expect(spy).to.not.have.been.called.at.least(3);
spy.should.have.been.called.at.least(3);
spy.should.not.have.been.called.min(3);

expect(spy).to.have.been.called.max(3);
expect(spy).to.not.have.been.called.at.most(3);
spy.should.have.been.called.at.most(3);
spy.should.not.have.been.called.max(3);

expect(spy).to.have.been.called.above(3);
expect(spy).to.not.have.been.called.gt(3);
spy.should.have.been.called.gt(3);
spy.should.not.have.been.called.above(3);

expect(spy).to.have.been.called.below(3);
expect(spy).to.not.have.been.called.lt(3);
spy.should.have.been.called.lt(3);
spy.should.not.have.been.called.below(3);

----------------------------------------

TITLE: Asserting DOM Attributes with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates how to use the 'attr' and 'attribute' assertions to check for the presence and value of HTML element attributes.

LANGUAGE: javascript
CODE:
document.getElementById('header').should.have.attr('foo')
expect(document.querySelector('main article')).to.have.attribute('foo', 'bar')
expect(document.querySelector('main article')).to.have.attr('foo').match(/bar/)

----------------------------------------

TITLE: Using chai-rx-assert in JavaScript tests
DESCRIPTION: Example of how to use chai-rx-assert in a test scenario. It demonstrates importing the plugin, creating observables with a TestScheduler, and using the rxEqual assertion to compare observable messages.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiRx = require('chai-rx-assert');
chai.use(chaiRx);

it('should return messages with delay', () => {
    var scheduler = new TestScheduler();

    var xs = scheduler.createHotObservable(onNext(250, 2), onCompleted(550));

    var results = scheduler.startScheduler(() => {
        return xs.delay(100, scheduler);
    });

    expect(results.messages).to.rxEqual([onNext(350, 2), onCompleted(650)]) // assert ok

    // or without wrapping in list

    expect(results.messages).to.rxEqual(onNext(350, 2), onCompleted(650)) // assert ok
});

----------------------------------------

TITLE: Asserting JSON Equality in Chai (JavaScript)
DESCRIPTION: Demonstrates how to use the chai-json-equal plugin to compare a string with an object that has a toJSON method. This snippet shows the basic usage of the jsonEqual assertion.

LANGUAGE: javascript
CODE:
var ship = "ship",
    barge = {toJSON: function () {
      return "ship";
    }}
ship.should.jsonEqual(barge);

----------------------------------------

TITLE: Making HTTP Requests with Chai HTTP
DESCRIPTION: Examples of making various HTTP requests using Chai HTTP, including setting headers, sending data, and handling file attachments.

LANGUAGE: javascript
CODE:
// Send some JSON
chai.request(app)
  .put('/user/me')
  .set('X-API-Key', 'foobar')
  .send({ password: '123', confirmPassword: '123' })

LANGUAGE: javascript
CODE:
// Send some Form Data
chai.request(app)
  .post('/user/me')
  .type('form')
  .send({
    '_method': 'put',
    'password': '123',
    'confirmPassword': '123'
  })

LANGUAGE: javascript
CODE:
// Attach a file
chai.request(app)
  .post('/user/avatar')
  .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')

LANGUAGE: javascript
CODE:
// Authenticate with Basic authentication
chai.request(app)
  .get('/protected')
  .auth('user', 'pass')

LANGUAGE: javascript
CODE:
// Chain some GET query parameters
chai.request(app)
  .get('/search')
  .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10

----------------------------------------

TITLE: Using chai-graphql assertions in JavaScript tests
DESCRIPTION: Example usage of chai-graphql assertions in a test file, demonstrating various assertion methods and their behavior with different responses.

LANGUAGE: javascript
CODE:
var goodResponse = {
  data: {
    foo: 'bar'
  }
}

// Passes
assert.graphQL(goodResponse, { foo: 'bar' })
assert.graphQLSubset(goodResponse, { foo: 'bar' })
assert.graphQL(goodResponse)
assert.graphQLSubset(goodResponse)
assert.graphQLSubset(goodResponse, { })
assert.notGraphQLError(goodResponse)
expect(goodResponse).to.be.graphQl({ foo: 'bar' })

// Fails
assert.graphQL(goodResponse, { foo: 'FAIL' })
assert.graphQL(goodResponse, { })
assert.graphQLError(goodResponse)
expect(goodResponse).to.be.graphQLError()

const badResponse = {
  errors: [
    {
      message: 'Error message',
      stack: 'Prints if present'
    },
    new GraphQLError('GraphQL Error Object'),
    new Error('Regular Error')
  ]
}

// Passes
assert.graphQLError(badResponse)
expect(badResponse).to.be.graphQLError()

assert.graphQLError(badResponse, 'Error message')
assert.graphQLError(badResponse, /GraphQL Error Object/)
assert.graphQLError(badResponse, [
  'Error message',
  /GraphQL Error Object/
])

// fails
assert.graphQL(badResponse, { foo: 'bar' })
assert.graphQL(badResponse)
assert.notGraphQLError(badResponse)
expect(badResponse).to.be.graphQl({ foo: 'bar' })
assert.graphQLError(badResponse, 'Rando Error')
assert.graphQLError(badResponse, [ 'Error message' ])

----------------------------------------

TITLE: Testing with Sinon-Chai and Mocha (Expect Syntax)
DESCRIPTION: Complete example of using Sinon-Chai with Mocha testing framework, demonstrating the 'expect' syntax for assertions.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
var expect = chai.expect;
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        expect(cb).to.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Making HTTP Requests with Chai HTTP
DESCRIPTION: Examples of making various HTTP requests using Chai HTTP, including setting headers, sending data, and handling file attachments.

LANGUAGE: javascript
CODE:
// Send some JSON
chai.request(app)
  .put('/user/me')
  .set('X-API-Key', 'foobar')
  .send({ password: '123', confirmPassword: '123' })

LANGUAGE: javascript
CODE:
// Send some Form Data
chai.request(app)
  .post('/user/me')
  .type('form')
  .send({
    '_method': 'put',
    'password': '123',
    'confirmPassword': '123'
  })

LANGUAGE: javascript
CODE:
// Attach a file
chai.request(app)
  .post('/user/avatar')
  .attach('imageField', fs.readFileSync('avatar.png'), 'avatar.png')

LANGUAGE: javascript
CODE:
// Authenticate with Basic authentication
chai.request(app)
  .get('/protected')
  .auth('user', 'pass')

LANGUAGE: javascript
CODE:
// Chain some GET query parameters
chai.request(app)
  .get('/search')
  .query({name: 'foo', limit: 10}) // /search?name=foo&limit=10

----------------------------------------

TITLE: Using Chai in Browser via CDN
DESCRIPTION: Example of importing Chai's expect function in a browser environment using ES modules through a CDN, with a basic assertion demonstration.

LANGUAGE: html
CODE:
<script type="module">
  import { expect } from 'https://cdn.jsdelivr.net/npm/chai@5.1.1/+esm';

  expect(1 + 1).to.equal(2);
</script>

----------------------------------------

TITLE: Installing @thiscode/chai-subset via npm
DESCRIPTION: Command to install the @thiscode/chai-subset plugin as a dev dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev @thiscode/chai-subset

----------------------------------------

TITLE: Configuring chai-retry plugin in JavaScript
DESCRIPTION: JavaScript code to configure the chai-retry plugin, including setting the retry count and polling interval. This snippet demonstrates how to import the plugin, add it to Chai, and set custom configuration options.

LANGUAGE: javascript
CODE:
const chaiRetry = require('chai-retry')
chai.use(chaiRetry)

chai.config.retry = 20 // will retry same assertion for 20 times, defaults to 10
chai.config.interval = 5000 // the polling interval in ms between each retry, defaults to 2000 ms

----------------------------------------

TITLE: Basic Chai Change Usage Example
DESCRIPTION: Demonstrates the basic comparison between traditional testing and using chai-change for more robust assertions.

LANGUAGE: javascript
CODE:
users.create();
expect(users.count()).to.equal(1);

LANGUAGE: javascript
CODE:
expect(() => {
  users.create();
}).to.alter(users.count, { by: 1 });

----------------------------------------

TITLE: Basic Chai Change Usage Example
DESCRIPTION: Demonstrates the basic comparison between traditional testing and using chai-change for more robust assertions.

LANGUAGE: javascript
CODE:
users.create();
expect(users.count()).to.equal(1);

LANGUAGE: javascript
CODE:
expect(() => {
  users.create();
}).to.alter(users.count, { by: 1 });

----------------------------------------

TITLE: Using dirty-chai with Chai
DESCRIPTION: Example of how to require and use the dirty-chai plugin with Chai. It demonstrates importing Chai and dirty-chai, and using the plugin to enable function-form assertions.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var dirtyChai = require('dirty-chai');
var expect = chai.expect

chai.use(dirtyChai);
// ...
expect(true).to.be.true();

----------------------------------------

TITLE: Accessing Chai Utilities in a Plugin
DESCRIPTION: Demonstrates how to access Chai's utility functions within a plugin using the 'use' method.

LANGUAGE: javascript
CODE:
chai.use(function (_chai, utils) {
  // ...
});

----------------------------------------

TITLE: Real-world Image Service Testing Example
DESCRIPTION: Comprehensive example showing how to test an image transformation service using chai-image

LANGUAGE: typescript
CODE:
// Real-world Example
import * as sharp from "sharp";

class ImageService {
  public async transform(buf: Buffer): Promise<Buffer> {
    return await sharp(buf).resize().max(320, 320).png().toBuffer();
  }
}

const service = new ImageService();

describe("ImageService", () => {
  describe("#transform", () => {
    it("should transform image", async () => {
      const input = fs.readFileSync("fixtures/input.png");
      const output = fs.readFileSync("fixtures/output.png");
      
      expect(await service.transform(input)).to.matchImage(output);
    });
  });
});

----------------------------------------

TITLE: String Comparison Methods - JavaScript
DESCRIPTION: Collection of various string comparison assertion examples including startsWith, endsWith, equalIgnoreCase, and more

LANGUAGE: javascript
CODE:
assert.startsWith('abcdef', 'abc');
expect('abcdef').to.startsWith('abc');
'abcdef'.should.startWith('abc');

LANGUAGE: javascript
CODE:
assert.endsWith('abcdef', 'def');
expect('abcdef').to.endsWith('def');
'abcdef'.should.endWith('def');

LANGUAGE: javascript
CODE:
assert.equalIgnoreCase('abcdef', 'AbCdEf');
expect('abcdef').to.equalIgnoreCase('AbCdEf');

LANGUAGE: javascript
CODE:
assert.equalIgnoreSpaces('abcdef', 'a\nb\tc\r d  ef');
expect('abcdef').to.equalIgnoreSpaces('a\nb\tc\r d  ef');

LANGUAGE: javascript
CODE:
assert.containIgnoreSpaces('abcdefgh', 'a\nb\tc\r d  ef');
expect('abcdefgh').to.containIgnoreSpaces('a\nb\tc\r d  ef');

LANGUAGE: javascript
CODE:
assert.containIgnoreCase('abcdefgh', 'AbcDefGH'); 
expect('abcdefgh').to.containIgnoreCase('AbcDefGH');
'abcdef'.should.containIgnoreCase('cDe');

LANGUAGE: javascript
CODE:
assert.singleLine('abcdef');
expect('abcdef').to.be.singleLine();

LANGUAGE: javascript
CODE:
assert.reverseOf('abcdef', 'fedcba');
expect('abcdef').to.be.reverseOf('fedcba');

LANGUAGE: javascript
CODE:
assert.palindrome('abccba');
expect('abccba').to.be.palindrome();

LANGUAGE: javascript
CODE:
assert.entriesCount('abcabd', 'ab', 2);
expect('abcabd').to.have.entriesCount('ab', 2);

LANGUAGE: javascript
CODE:
assert.indexOf('abcabd', 'ab', 0);
expect('abcabd').to.have.indexOf('ab', 0);

----------------------------------------

TITLE: Assert Interface Examples
DESCRIPTION: Examples of using the assert interface with promises.

LANGUAGE: javascript
CODE:
return assert.eventually.equal(Promise.resolve(2 + 2), 4, "This had better be true, eventually");

----------------------------------------

TITLE: Using chai-contained Plugin with Chai in JavaScript
DESCRIPTION: This snippet demonstrates how to use the chai-contained plugin with Chai. It shows how to require the necessary modules and use the 'containedIn' assertion for both passing and failing cases.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , expect = chai.expect
  , chaiContained = require('chai-contained');

expect('foo').to.be.containedIn(['foo', 'bar']); // will pass
expect('foo').to.be.containedIn(['noFoo', 'baz']); // will fail

----------------------------------------

TITLE: Basic RxJS Observable Testing with chai-rx
DESCRIPTION: Demonstrates the basic setup and usage of chai-rx for testing RxJS Observables using TestScheduler. Shows how to create a hot observable, schedule its execution, and test its emissions.

LANGUAGE: javascript
CODE:
import Rx from 'rx';
import chai from 'chai';
import chaiRx from 'chai-rx';

chai.use(chaiRx);

const { onNext, onCompleted } = Rx.ReactiveTest;
const scheduler = new Rx.TestScheduler();

const xs = scheduler.createHotObservable(
  onNext(150, 1),
  onNext(210, 2),
  onNext(220, 3),
  onCompleted(230)
);

// Note we'll start at 200 for subscribe, hence missing the 150 mark
const output = scheduler.startScheduler(() => xs.map(x => x * x), {
  created: 100,
  subscribed: 200,
  disposed: 300
});

expect(output).to.emit([
  onNext(210, 4),
  onNext(220, 9),
  onCompleted(230)
]);

----------------------------------------

TITLE: Basic Sinon.JS Assertion Example
DESCRIPTION: Shows the traditional Sinon.JS assertion syntax compared to the enhanced Sinon-Chai syntax.

LANGUAGE: javascript
CODE:
sinon.assertCalledWith(mySpy, "foo");

----------------------------------------

TITLE: JSON Schema Validation Example
DESCRIPTION: Complete example demonstrating JSON Schema validation using chai-json-schema with both BDD and TDD assertion styles.

LANGUAGE: javascript
CODE:
var goodApple = {
  skin: 'thin',
  colors: ['red', 'green', 'yellow'],
  taste: 10
};
var badApple = {
  colors: ['brown'],
  taste: 0,
  worms: 2
};
var fruitSchema = {
  title: 'fresh fruit schema v1',
  type: 'object',
  required: ['skin', 'colors', 'taste'],
  properties: {
    colors: {
      type: 'array',
      minItems: 1,
      uniqueItems: true,
      items: {
        type: 'string'
      }
    },
    skin: {
      type: 'string'
    },
    taste: {
      type: 'number',
      minimum: 5
    }
  }
};

//bdd style
expect(goodApple).to.be.jsonSchema(fruitSchema);
expect(badApple).to.not.be.jsonSchema(fruitSchema);

goodApple.should.be.jsonSchema(fruitSchema);
badApple.should.not.be.jsonSchema(fruitSchema);

//tdd style
assert.jsonSchema(goodApple, fruitSchema);
assert.notJsonSchema(badApple, fruitSchema);

----------------------------------------

TITLE: Testing Backbone Model Triggers with Chai
DESCRIPTION: Demonstrates how to test Backbone model trigger events using chai-backbone assertions. Shows basic trigger testing and chained assertions.

LANGUAGE: javascript
CODE:
model.should.trigger("change", { with: [model] }).when(function() {
  model.set({ attribute: "value" });
});

LANGUAGE: javascript
CODE:
model.should.trigger("change").and.trigger("change:attribute").when(function() {
  model.set({ attribute: "value" });
});

model.should.trigger("change").and.not.trigger("reset").when(function() {
  model.set({ attribute: "value" });
});

----------------------------------------

TITLE: Advanced Chai Shallow Deep Equal Examples
DESCRIPTION: Provides comprehensive examples of shallow deep equal assertions with various object structures including nested objects, arrays, and undefined values.

LANGUAGE: javascript
CODE:
assert.shallowDeepEqual({name: 'Michel', language: 'javascript'}, {name: 'Michel'}); // true

assert.shallowDeepEqual({
  name: 'Michel',
  language: 'javascript',
  tags: [
    'developer',
    'gamer'
  ]},
  {
  name: 'Michel',
  tags: [
    'developer'
  ]}); // true

assert.shallowDeepEqual([
    {brand: 'apple', color: 'red'},
    {brand: 'samsung', color: 'blue'},
  ],
  {
  length: 2,
  0: {color: 'red'},
  1: {brand: 'samsung'},
  }); // true

assert.shallowDeepEqual({
  name: 'Michel',
  age: undefined
  },
  {
  name: 'Michel',
  age: 37
  }); // false (age should not be defined)

----------------------------------------

TITLE: Basic Sinon.JS Assertion Example
DESCRIPTION: Demonstrates the traditional Sinon.JS assertion syntax.

LANGUAGE: javascript
CODE:
sinon.assert.calledWith(mySpy, "foo");

----------------------------------------

TITLE: Using jsonWithProps assertion
DESCRIPTION: Example demonstrating how to check if a JSON file contains objects with specific properties

LANGUAGE: javascript
CODE:
/* 
Content of testFile:  
[{"repoName":"giper","labName":"TelnetClientSniffing_1","state":"STOPPED"},{"repoName":"giper","labName":"ErrorSameSubnet","state":"STOPPED"},
{"repoName":"giper","labName":"ErrorSamePort","state":"STOPPED"},    
{"repoName":"giper","labName":"ErrorWrongAction","state":"STOPPED"},{"repoName":"giper","labName":"ErrorNoDefinedAction","state":"NO_NETWORK"},{"repoName":"giper","labName":"ErrorCopyFile","state":"STOPPED"},
{"repoName":"giper","labName":"TestActionNoArgs","state":"STOPPED"}
]
*/ 
expect(testFile).to.be.a.jsonFile().and.contain.jsonWithProps({ repoName: 'giper' });

----------------------------------------

TITLE: Using js.spec-chai with Chai and TypeScript
DESCRIPTION: This snippet demonstrates how to set up and use the js.spec-chai plugin with Chai assertions in a TypeScript environment. It includes examples of defining specs, conforming objects, and writing test cases.

LANGUAGE: typescript
CODE:
import * as s from "js.spec"
import * as chai from "chai";
import jsSpecChai from "../src/index";
// fancy chai dancing
chai.use(jsSpecChai);
chai.should();

describe("Spec tests", () => {

  context("with nested maps", () => {
    const school = s.spec.map("schoolSpec", {
      city: s.string
    });
    const friend = s.spec.map("friendSpec", {
      name: s.spec.string,
      age: s.spec.number,
      school
    });

    it("conforms a good object", () => {
      const obj = {
        name: "andrea",
        age: 18,
        school: {
          city: "Turin",
        }
      };
      obj.should.conform(friend);
    })

    it("does not conform is there is a missing key", () => {
      const obj = {
        name: "andrea",
        school: {
          city: "Turin",
        }
      };
      obj.should.not.conform(friend);
    });
  });
});

----------------------------------------

TITLE: Implementing API Contract Validation with Chai.js
DESCRIPTION: Example showing how to set up and use the validator plugin with Chai.js for API response validation against schema definitions.

LANGUAGE: javascript
CODE:
const matchApiSchema = require('api-contract-validator').chaiPlugin;
const path = require('path');
const { expect, use } = require('chai');

// API definitions path
const apiDefinitionsPath = path.join(__dirname, 'myApp.yaml'); 

// add as chai plugin
use(matchApiSchema({ apiDefinitionsPath }));

it('GET /pets/123', async () => {
    const response = await request.get('/pet/123');
    expect(response).to.have.status(200).and.to.matchApiSchema();

    // alternatively pass
    const { statusCode, headers, body } = response
    expect({
        path: '/pet/123',
        method: 'get',
        status: statusCode,
        body: body,
        headers: headers,
    }).to.have.status(200).and.to.matchApiSchema();
})

----------------------------------------

TITLE: Importing and Using a Custom Chai Helper
DESCRIPTION: Demonstrates how to import and use a custom Chai helper in a test file.

LANGUAGE: javascript
CODE:
import * as chai from 'chai';
import {chaiModel} from './helpers/model.js'
import {expect} from 'chai';

chai.use(chaiModel);

----------------------------------------

TITLE: Using chai-date-string Plugin for Date String Validation in JavaScript
DESCRIPTION: This snippet demonstrates how to use the chai-date-string plugin to validate date strings in Chai assertions. It shows both passing and failing examples, including validation of the time part.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , expect = chai.expect
  , chaiDateString = require('chai-date-string');

expect('2015-11-12').to.be.a.dateString(); // will pass
expect('2015-24-12').to.be.a.dateString(); // will fail

----------------------------------------

TITLE: Using Chai as Promised with async/await in JavaScript
DESCRIPTION: Illustrates how to use Chai as Promised with async/await syntax in promise-friendly test runners.

LANGUAGE: javascript
CODE:
it('should work well with async/await', async () => {
  (await Promise.resolve(42)).should.equal(42)
  await Promise.reject(new Error()).should.be.rejectedWith(Error);
});

----------------------------------------

TITLE: Checking Text Content with Chai-DOM in JavaScript
DESCRIPTION: Shows various ways to use the 'text' assertion for verifying text content of elements, including trimmed and rendered text options.

LANGUAGE: javascript
CODE:
document.querySelector('.name').should.have.text('John Doe')
expect(document.querySelector('#title')).to.have.text('Chai Tea')
document.querySelectorAll('ul li').should.have.text('JohnJaneJessie')
document.querySelector('h1').should.have.trimmed.text('chai-tests')
expect(document.querySelector('article')).to.have.rendered.text('Chai Tea is great')

document.querySelector('.name').should.contain.text('John')
expect(document.querySelector('#title')).to.contain.text('Chai')
document.querySelectorAll('ul li').should.contain.text('Jane')

----------------------------------------

TITLE: Demonstrating Array Element Assertions with Chai Things in JavaScript
DESCRIPTION: This snippet showcases the use of Chai Things for making assertions on array elements. It demonstrates how Chai Things allows for more flexible and descriptive array testing compared to standard Chai assertions.

LANGUAGE: javascript
CODE:
// Although they are equal, two different { a: 1 } objects are not the same
[{ a: 1 }, { b: 2 }].should.not.include({ a: 1 })
// However, Chai Things allows us to test what we want
[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ b: 2 })
// If the test fails, we get a descriptive message
[{ a: 1 }, { b: 2 }].should.include.something.that.deep.equals({ c: 3 })
/* expected an element of [ { a: 1 }, { b: 2 } ] to deeply equal { c: 3 } */

----------------------------------------

TITLE: Using chai-parentheses plugin with Chai
DESCRIPTION: Example of how to require and use the chai-parentheses plugin with Chai. It demonstrates importing Chai, the plugin, and setting up an expectation.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var parentheses = require('chai-parentheses');
var expect = chai.expect

chai.use(parentheses);
// ...
expect(true).to.be.true();

----------------------------------------

TITLE: Array Comparison with Chai-Like
DESCRIPTION: Demonstrates how to compare arrays containing objects while ignoring unspecified properties.

LANGUAGE: javascript
CODE:
var array = [{
  id: 1,
  name: 'test',
  product: {
    id: 1,
    name: 'product'
  },
  updatedAt: 'now'
}];
array.should.like([{
  name: 'test',
  product: {
    name: 'product'
  }
}]);
array.should.not.like([{
  name: 'test',
  product: {
    name: 'product1'
  }
}]);

----------------------------------------

TITLE: Checking Element Tag Names with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates the use of the 'tagName' assertion to verify the tag name of an element.

LANGUAGE: javascript
CODE:
document.querySelector('.container').should.have.tagName('div')
expect(document.querySelector('.container')).not.to.have.tagName('span')

----------------------------------------

TITLE: Using chai-bites for Byte Array Equality Assertions in JavaScript
DESCRIPTION: Demonstrates how to use the chai-bites plugin to perform equality assertions on byte arrays using both expect and assert styles. The example shows different input types accepted by the equalBytes function.

LANGUAGE: javascript
CODE:
const { expect, assert } = require('chai')
  .use(require('chai-bites'));

const buffer = new Uint8Array([ 1, 2, 3, 4, 5 ]);
expect(buffer).to.equalBytes('0102030405');
// `assert` style works, too
assert.equalBytes(buffer, [1, 2, 3, 4, 5], 'error message');

----------------------------------------

TITLE: Using chai-fs assertions
DESCRIPTION: Examples of using various chai-fs assertions for files and directories

LANGUAGE: javascript
CODE:
expect(path).to.be.a.path();
path.should.be.a.directory();
assert.isFile(path);

expect(path).to.have.basename('file.txt');
path.should.have.dirname('/tmp');
assert.extname(path, '.js');

expect(dir).to.be.a.directory().and.empty;
path.should.be.a.file().with.json;
assert.fileContent('/tmp/file.txt', 'expected content');

----------------------------------------

TITLE: Basic Type Assertions
DESCRIPTION: Examples of basic type assertions for strings, booleans, objects, arrays, dates, and functions

LANGUAGE: typescript
CODE:
expect('').to.be.string();
expect('foobar').to.be.string();

expect(true).to.be.boolean();
expect(false).to.be.boolean();

expect({}).to.be.object();

expect([]).to.be.array();
expect([1, 2, 3]).to.be.array();

expect(new Date()).to.be.date();

expect(() => true).to.be.function();

----------------------------------------

TITLE: Mixing Assertion Forms with dirty-chai
DESCRIPTION: Examples of mixing property and function forms of assertions with dirty-chai. It demonstrates that chains must always be terminated with a function call.

LANGUAGE: javascript
CODE:
expect(true).to.be.true.and.not.false();
expect(true).to.be.true().and.not.false();

----------------------------------------

TITLE: Installing Development Dependencies
DESCRIPTION: Commands for setting up the development environment and running tests

LANGUAGE: shell
CODE:
$ npm install

LANGUAGE: shell
CODE:
$ npm install grunt-cli -g

LANGUAGE: shell
CODE:
$ grunt

----------------------------------------

TITLE: Checking Element Existence with Chai-DOM in JavaScript
DESCRIPTION: Shows how to use the 'exist' assertion to verify the existence of elements in a NodeList.

LANGUAGE: javascript
CODE:
document.querySelectorAll('dl dd').should.exist
expect(document.querySelectorAll('.nonexistent')).not.to.exist

----------------------------------------

TITLE: Asserting jQuery property with chai-jquery
DESCRIPTION: Shows how to use chai-jquery to assert the presence and value of properties on jQuery objects using the 'prop' assertion.

LANGUAGE: javascript
CODE:
$('#header').should.have.prop('disabled');
expect($('body')).to.have.prop('disabled', false);
expect($('body')).to.have.prop('value').match(/bar/);

----------------------------------------

TITLE: Chai-WebDriver Setup Configuration
DESCRIPTION: Shows how to initialize and configure chai-webdriver with selenium-webdriver, including creating a driver instance and setting up the Chai plugin.

LANGUAGE: javascript
CODE:
// Start with a webdriver instance:
var sw = require('selenium-webdriver');
var driver = new sw.Builder()
  .withCapabilities(sw.Capabilities.chrome())
  .build()

// And then...
var chai = require('chai');
var chaiWebdriver = require('chai-webdriver');
chai.use(chaiWebdriver(driver));

// And you're good to go!
driver.get('http://github.com');
chai.expect('#site-container h1.heading').dom.to.not.contain.text("I'm a kitty!");

----------------------------------------

TITLE: Comparing Color Representations with Chai Colors Plugin
DESCRIPTION: Demonstrates how to use the chai-colors plugin to compare different color representations. This example shows an assertion comparing an RGBA color string with a hexadecimal color code.

LANGUAGE: javascript
CODE:
'rgba(0, 0, 0, 1)'.should.be.colored('#000000');

----------------------------------------

TITLE: Return Assertion Examples - JavaScript
DESCRIPTION: Demonstrates various ways to use the return assertion with expect, should, and assert syntax.

LANGUAGE: javascript
CODE:
expect(generator).to.return()
expect(generator).to.return(1)
expect(generator).not.to.return('missing')
expect(generator.next(10)).to.return(10)

generator.should.return()
generator.should.return(1)
generator.should.not.return('missing')
generator.next(10).should.return(10)

assert.return(generator)
assert.return(generator, 1)
assert.notReturn(generator, 'missing')
assert.return(generator.next(10), 10)

----------------------------------------

TITLE: Firebase Security Testing with Chai-Fireproof
DESCRIPTION: These snippets demonstrate how to use chai-fireproof for testing Firebase security rules. They show examples of testing read and write permissions for different user scenarios.

LANGUAGE: javascript
CODE:
return expect({ uid: 'metropolis:maria' }).can.read.ref(root.child('users/maria'));

LANGUAGE: javascript
CODE:
return expect({ uid: 'metropolis:robotmaria'}).cannot.read.ref(root.child('users/maria'));

LANGUAGE: javascript
CODE:
return expect({ uid: 'metropolis:robotmaria'}).cannot.write(true)
.to.ref(root.child('city/agitation'));

----------------------------------------

TITLE: Working Around Length and Arguments Assertions
DESCRIPTION: Example of how to work around limitations with length and arguments assertions when using dirty-chai. It shows the incorrect usage and the recommended approach.

LANGUAGE: javascript
CODE:
myArray.should.exist.and.should.have.length(3); // Error: length is not a function

// Do two assert statements instead
myArray.should.exist();
myArray.should.have.length(3);

----------------------------------------

TITLE: Referencing Chai-Spy Package
DESCRIPTION: Example of referencing the chai-spy package name as used in Chai assertion library.

LANGUAGE: markdown
CODE:
chai-spy

----------------------------------------

TITLE: Using Chai Expectations with Signal Spies
DESCRIPTION: Demonstrates various Chai expectations that can be used with signal spies, including checking for dispatch counts and dispatch arguments.

LANGUAGE: JavaScript
CODE:
expect(signalSpy).to.have.been.dispatched();
expect(signalSpy).to.have.been.dispatched(n);
expect(signal).to.have.been.dispatched();
expect(signal).to.have.been.dispatched(n);
expect(signalSpy).to.not.have.been.dispatched();
expect(signalSpy).to.not.have.been.dispatched(n);
expect(signal).to.not.have.been.dispatched();
expect(signal).to.not.have.been.dispatched(n);

expect(signalSpy).to.have.been.dispatchedWith(n);
expect(signalSpy).to.have.been.dispatchedWith(m, n);
expect(signalSpy).to.have.been.dispatchedWith(<object>);
expect(signal).to.have.been.dispatchedWith(n);
expect(signal).to.have.been.dispatchedWith(m, n);
expect(signal).to.have.been.dispatchedWith(<object>);
expect(signalSpy).to.not.have.been.dispatchedWith(n);
expect(signalSpy).to.not.have.been.dispatchedWith(m, n);
expect(signalSpy).to.not.have.been.dispatchedWith(<object>);
expect(signal).to.not.have.been.dispatchedWith(n);
expect(signal).to.not.have.been.dispatchedWith(m, n);
expect(signal).to.not.have.been.dispatchedWith(<object>);

----------------------------------------

TITLE: Executing Chai Assertions with WebDriver in JavaScript
DESCRIPTION: Demonstrates basic usage of chai-webdriver-exec plugin for executing and asserting scripts using Chai and selenium-webdriver. It shows how to use the 'exec' mechanism with chai.expect() for DOM-based assertions.

LANGUAGE: JavaScript
CODE:
chai.expect('return document.childElementCount').exec.to.equal(1)
chai.expect('return document.childElementCount').exec.to.exist

----------------------------------------

TITLE: Async/Await Example with chai-fetch
DESCRIPTION: Shows how to use chai-fetch with async/await syntax for more readable HTTP tests. Requires Babel, TypeScript, or modern JS engines.

LANGUAGE: javascript
CODE:
it('should match responses with matching bodies', async () => {
    await mockServer.get('/match').thenReply(200, 'matching body');

    await expect(fetch('http://localhost:8080/match')).to.have.responseText('matching body');
});

----------------------------------------

TITLE: Array Sorting Assertion in Chai
DESCRIPTION: Demonstrates the sorted() assertion to check if an array is sorted, optionally with a custom comparison function.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.sorted();
expect([1, 2, 4, 3]).not.to.be.sorted();

expect([3, 2, 1]).to.be.sorted((prev, next) => prev < next); // sorting based on the provided function

----------------------------------------

TITLE: Initializing Chai HTTP Plugin in Node.js
DESCRIPTION: Code snippet demonstrating how to require and use the Chai HTTP plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiHttp = require('chai-http');

chai.use(chaiHttp);

----------------------------------------

TITLE: Creating Spy Interfaces
DESCRIPTION: Examples of creating mock objects with spied methods using spy.interface

LANGUAGE: javascript
CODE:
const eventBus = chai.spy.interface(['on', 'off', 'emit']);

// with implementation
const arrayLike = chai.spy.interface({
  push(item) {
    this.__items = this.__items || [];
    return this.__items.push(item)
  },
  // other methods
});

arrayLike.push(5);

----------------------------------------

TITLE: Validating JSON Data Against Schema
DESCRIPTION: Example showing how to validate JSON data against a schema using expect and assert syntax

LANGUAGE: javascript
CODE:
const chai = require('chai')
chai.use(require('chai-json-schema-ajv'))
const expect = chai.expect
const assert = chai.assert

const apple = {
  name: 'foo',
  color: ['red', 'green', 'yellow'],
  value: 10
}
const car = {
  name: 'bar',
  speed: 1.1
}
const schema = {
  title: 'fruit schema v0.1',
  type: 'object',
  required: ['name', 'color', 'value'],
  properties: {
    name: {
      type: 'string',
      minLength: 3
    },
    color: {
      type: 'array',
      minItems: 1,
      uniqueItems: true,
      items: {
        type: 'string'
      }
    },
    value: {
      type: 'integer',
      minimum: 5
    }
  }
}

expect(apple).to.be.jsonSchema(schema, 'custom flag')
expect(car).to.not.be.jsonSchema(schema, 'custom flag')

assert.jsonSchema(apple, schema, 'custom flag')
assert.notJsonSchema(car, schema, 'custom flag')

----------------------------------------

TITLE: Setting up Chai Stats in Node.js
DESCRIPTION: Demonstrates how to require and configure chai-stats plugin in a Node.js environment

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiStats = require('chai-stats');

chai.use(chaiStats);

var should = chai.should()
  , expect = chai.expect;

----------------------------------------

TITLE: Testing for ascending sort order by attribute using .ascendingBy()
DESCRIPTION: Demonstrates the use of the .ascendingBy() method as an alternative to .sortedBy() for testing ascending sort order by attribute.

LANGUAGE: javascript
CODE:
expect([{id:2,name:"apple"},{id:3,name:"bat"}]).to.be.ascendingBy("name")

----------------------------------------

TITLE: Array Sorting Assertion in Chai with chai-arrays
DESCRIPTION: Demonstrates the sorted() assertion to check if an array is sorted, optionally with a custom sorting function.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.sorted();
expect([1, 2, 4, 3]).not.to.be.sorted();

expect([3, 2, 1]).to.be.sorted((prev, next) => prev < next); // sorting based on the provided function

----------------------------------------

TITLE: Using spy.on to Add Spies to Existing Methods
DESCRIPTION: Shows how to add spies to existing methods of an object using chai.spy.on, including spying on multiple methods and providing custom implementations.

LANGUAGE: javascript
CODE:
const array = [1, 2, 3];

chai.spy.on(array, 'push');

// or multiple spies
chai.spy.on(array, ['push', 'pop']);

// With custom implementation
chai.spy.on(array, 'push', function (...items) {
  // custom implementation of `push` method
});

// Using arrow function to replace method with constant
chai.spy.on(array, 'push', () => 5);

// or more readable :)
chai.spy.on(array, 'push', returns => 5);

----------------------------------------

TITLE: Asserting HTML Content with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates how to use the 'html' assertion to check the HTML content of elements, including partial matching.

LANGUAGE: javascript
CODE:
document.querySelector('.name').should.have.html('<em>John Doe</em>')
expect(document.querySelector('#title')).to.have.html('Chai Tea')

document.querySelector('.name').should.contain.html('<span>Doe</span>')
expect(document.querySelector('#title')).to.contain.html('<em>Tea</em>')

----------------------------------------

TITLE: Excluding multiple properties in a deeply nested object
DESCRIPTION: Examples of using chai-exclude to exclude multiple properties at all levels in a deeply nested object and array.

LANGUAGE: javascript
CODE:
const actualObj = {
  a: 'a',
  b: 'b',
  c: {
    a: 'a',
    b: {
      a: 'a',
      d: {
        a: 'a',
        b: 'b',
        d: null
      }
    }
  },
  d: ['a', 'c']
}

const actualArray = [actualObj]

const expectedObj = {
  b: 'b',
  c: {
    b: {
    }
  }
}

const expectedArray = [expectedObj]

// Object
assert.deepEqualExcludingEvery(actualObj, expectedObj, ['a', 'd'])
expect(actualObj).excludingEvery(['a', 'd']).to.deep.equal(expectedObj)

// Array
assert.deepEqualExcludingEvery(actualArray, expectedArray, ['a', 'd'])
expect(actualArray).excludingEvery(['a', 'd']).to.deep.equal(expectedArray)

----------------------------------------

TITLE: Using Chai Quantifiers Assertions
DESCRIPTION: Example demonstrating how to use the three main assertions provided by chai-quantifiers: containAll, containOne, and containExactlyOne. Shows setup with chai and test cases for each assertion type.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiQuantifiers = require('chai-quantifiers');

chai.use(chaiQuantifiers);

const { expect } = chai;

describe('chai-quantifiers', () => {
  it('containAll should be true if all items are true', () => {
    expect([0, 1, 2, 3]).to.containAll(item => item < 4);
  });
  it('containOne should be true if at least one item is true', () => {
    expect([0, 1, 2, 3]).to.containOne(item => item >= 2);
  });
  it('containExactlyOne should be true if exactly one item is true', () => {
    expect([0, 1, 2, 3]).to.containExactlyOne(item => item === 2);
  });
});

----------------------------------------

TITLE: Array Any Element Containment Assertion in Chai
DESCRIPTION: Shows the usage of containingAnyOf() assertion to check if an array contains any of the specified elements.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containingAnyOf([1]);
expect([1, 2, 3]).to.be.containingAnyOf([6, 7, 3, 5]);
expect([1, 2, 3]).to.be.containingAnyOf([1, 2, 3]);

----------------------------------------

TITLE: Asynchronous Schema Loading Example
DESCRIPTION: JavaScript code showing an example of asynchronously loading remote schemas before running tests, using a test runner's before hook.

LANGUAGE: javascript
CODE:
before(function (done) {

  // iterate missing
  var checkMissing = function (callback) {
    var missing = chai.tv4.getMissingUris();
    if (missing.length === 0) {
      // all $ref's solved
      callback();
      return;
    }
    // load a schema using your favourite JSON loader
    // (jQuery, request, SuperAgent etc)
    var uri = missing.pop();
    myFavoriteJsonLoader.load(uri, function (err, schema) {
      if (err || !schema) {
        callback(err || 'no data loaded');
        return;
      }
      // add it
      chai.tv4.addSchema(uri, schema);
      // iterate
      checkMissing(callback);
    });
  };

  // load first instance manually
  myFavoriteJsonLoader.load(uri, function (err, schema) {
    if (err || !schema) {
      done(err || 'no data loaded');
      return;
    }
    // add it
    chai.tv4.addSchema(uri, schema);

    // start checking
    checkMissing(done);
  });
});

----------------------------------------

TITLE: Excluding a property in a deeply nested object
DESCRIPTION: Examples of using chai-exclude to exclude a property at all levels in a deeply nested object and array.

LANGUAGE: javascript
CODE:
const actualObj = {
  a: 'a',
  b: 'b',
  c: {
    a: 'a',
    b: {
      a: 'a',
      d: {
        a: 'a',
        b: 'b',
        d: null
      }
    }
  },
  d: ['a', 'c']
}

const actualArray = [actualObj]

const expectedObj = {
  a: 'z',     // a is excluded from comparison
  b: 'b',
  c: {
    b: {
      d: {
        b: 'b',
        d: null
      }
    }
  },
  d: ['a', 'c']
}

const expectedArray = [expectedObj]

// Object
assert.deepEqualExcludingEvery(actualObj, expectedObj, 'a')
expect(actualObj).excludingEvery('a').to.deep.equal(expectedObj)

// Array
assert.deepEqualExcludingEvery(actualArray, expectedArray, 'a')
expect(actualArray).excludingEvery('a').to.deep.equal(expectedArray)

----------------------------------------

TITLE: Checking Element Descendants with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates the use of 'descendant' and 'descendants' assertions to verify child elements and change the assertion subject.

LANGUAGE: javascript
CODE:
document.querySelector('section').should.have.descendant('ul').and.have.class('items')
document.querySelector('section').should.have.descendant(document.querySelector('section div'))
expect(document.querySelector('#content')).to.have.descendant('p')

document.querySelector('section').should.have.descendants('ul li').and.have.length(3)

----------------------------------------

TITLE: Asserting jQuery input value with chai-jquery
DESCRIPTION: Illustrates how to use chai-jquery to assert the value of form inputs using the 'value' assertion on jQuery objects.

LANGUAGE: javascript
CODE:
$('.name').should.have.value('John Doe');
expect($('.year')).to.have.value('2012');

----------------------------------------

TITLE: Using Chai DateTime Assertions
DESCRIPTION: Example showing how to use chai-datetime assertions in different syntax styles (BDD and TDD).

LANGUAGE: javascript
CODE:
var d1 = new Date(2013, 4, 30, 16, 5),
    d2 = new Date(2013, 4, 30, 17);

d1.should.equalDate(d2)
expect(d1).to.equalDate(d2)
assert.equalDate(d1, d2)

----------------------------------------

TITLE: Using chai-integer Plugin with Chai in JavaScript
DESCRIPTION: This snippet demonstrates how to require and use the chai-integer plugin with Chai. It shows how to set up the assertion library and perform integer checks using the new assertion.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , expect = chai.expect
  , chai.use( require('chai-integer') );

expect(2015).to.be.an.integer();
expect(2.015).not.to.be.an.integer();

----------------------------------------

TITLE: Installing Chai-Roughly Plugin via NPM
DESCRIPTION: Command to install the chai-roughly plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-roughly

----------------------------------------

TITLE: Asserting Changes with chai-changes in CoffeeScript
DESCRIPTION: Examples of using the 'change' assertion to check if a value changes, increases, or decreases.

LANGUAGE: coffeescript
CODE:
result = 0
(-> result).should.change.when -> result += 1
expect(-> result).to.change.when -> result -= 1
expect(-> result).not.to.change.when -> result = result * 1

----------------------------------------

TITLE: Matching File Content with RegExp
DESCRIPTION: Examples of matching file contents against regular expressions.

LANGUAGE: javascript
CODE:
expect(file('foo.txt')).to.match(/fo+/);
expect(file('foo.txt')).to.not.match(/bar?/);

----------------------------------------

TITLE: Using Chai-Subset with Should Interface
DESCRIPTION: Demonstrates using containSubset with arrays and the should interface, including error cases.

LANGUAGE: javascript
CODE:
var list = [{a: 'a', b: 'b'}, {v: 'f', d: {z: 'g'}}];

list.should.containSubset([{a:'a'}]); //Assertion error is not thrown
list.should.containSubset([{a:'a',  b: 'b'}]); //Assertion error is not thrown

list.should.containSubset([{a:'a', b: 'bd'}]);

----------------------------------------

TITLE: Adding a Custom Property to Chai Assertions
DESCRIPTION: Extends Chai with a custom 'model' property to check if an object is an instance of Model.

LANGUAGE: javascript
CODE:
utils.addProperty(Assertion.prototype, 'model', function () {
  this.assert(
      this._obj instanceof Model
    , 'expected #{this} to be a Model'
    , 'expected #{this} to not be a Model'
  );
});

----------------------------------------

TITLE: Chai as Promised Assertions with assert Interface in JavaScript
DESCRIPTION: Shows how to use Chai as Promised with the assert interface, including promise-specific extensions.

LANGUAGE: javascript
CODE:
return assert.eventually.equal(Promise.resolve(2 + 2), 4, "This had better be true, eventually");

return assert.isFulfilled(promise, "optional message");

return assert.becomes(promise, "foo", "optional message");
return assert.doesNotBecome(promise, "foo", "optional message");

return assert.isRejected(promise, Error, "optional message");
return assert.isRejected(promise, /error message regex matcher/, "optional message");
return assert.isRejected(promise, "substring to search error message for", "optional message");

----------------------------------------

TITLE: Using chai-jq assertions with object context
DESCRIPTION: Examples of using chai-jq assertions while maintaining the original object context.

LANGUAGE: javascript
CODE:
var $elem = $("<div id=\"hi\" foo=\"bar time\" />");

expect($elem)
  // Assertion object is `$elem`
  .to.have.$attr("id", "hi").and
  // Assertion object is still `$elem`
  .to.contain.$attr("foo", "bar");

----------------------------------------

TITLE: Complete Usage Example
DESCRIPTION: Provides a complete example of using chai-nock in a test suite.

LANGUAGE: javascript
CODE:
const { expect } = require('chai');
const nock = require('nock');
const request = require('request-promise-native');

describe('example', () => {
  it('test', () => {
    const requestNock = nock('http://bbc.co.uk')
    .get('/')
    .reply(200);

    request({
      json: true,
      uri: 'http://bbc.co.uk',
      body: {
        hello: 'world'
      }
    });

    return expect(requestNock).to.have.been.requestedWith({ hello: 'world' });
  });
});

----------------------------------------

TITLE: Karma Configuration Setup
DESCRIPTION: Complete Karma configuration setup including webpack, snapshot, and mocha settings

LANGUAGE: javascript
CODE:
const webpack = require("webpack");

module.exports = function (config) {
  config.set({
    browsers: ["ChromeHeadless"],
    frameworks: ["mocha", "snapshot", "mocha-snapshot"],
    reporters: ["mocha"],
    preprocessors: {
      "**/__snapshots__/**/*.md": ["snapshot"],
      "__tests__/index.js": ["webpack", "sourcemap"]
    },
    files: [
      "**/__snapshots__/**/*.md",
      "__tests__/index.js"
    ],

    colors: true,
    autoWatch: true,

    webpack: {
      devtool: "inline-source-map",
      performance: {
        hints: false
      },
    },

    webpackMiddleware: {
      stats: "errors-only",
      noInfo: true
    },

    snapshot: {
      update: !!process.env.UPDATE,
      prune: !!process.env.PRUNE,
    },

    mochaReporter: {
      showDiff: true,
    },

    client: {
      mocha: {
        reporter: "html",
        ui: "bdd",
      }
    },
  });
};

----------------------------------------

TITLE: Function Type Assertions
DESCRIPTION: Example of asserting function type values using chai-asserttype

LANGUAGE: javascript
CODE:
expect(() => true).to.be.function();

----------------------------------------

TITLE: Number Type Assertions
DESCRIPTION: Examples of asserting number type values using chai-asserttype

LANGUAGE: javascript
CODE:
expect(1).to.be.number();
expect(0).to.be.number();
expect(-1).to.be.number();
expect(63465789908753).to.be.number();
expect(27.11).to.be.number();

----------------------------------------

TITLE: Custom Type Matching Configuration
DESCRIPTION: Demonstrates how to configure custom type matching behavior using the addMatch API.

LANGUAGE: javascript
CODE:
chaiBetterShallowDeepEqual.addMatch({
  leftType: "CustomDate",
  rightType: "string",
  handler: (lhs, rhs) => [lhs.toISOString(), rhs]
});

----------------------------------------

TITLE: Installing Chai-DOM via npm
DESCRIPTION: Shows the npm command to install the chai-dom package.

LANGUAGE: bash
CODE:
npm install chai-dom

----------------------------------------

TITLE: Using jQuery Property Assertions
DESCRIPTION: Examples of using the prop() assertion to check element properties using jQuery's .prop() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.prop('disabled');
expect($('body')).to.have.prop('disabled', false);
expect($('body')).to.have.prop('value').match(/bar/);

----------------------------------------

TITLE: Using Deep Almost Equality Assertions
DESCRIPTION: Examples of using deep almost-equal assertions with nested objects and arrays

LANGUAGE: javascript
CODE:
expect({ taco: 'pastor', num: 3.9999999 }).to.almost.eql({ taco: 'pastor', num: 4 }); // passes
expect([[1, 2, 2.9999999], 1.0000001]).to.be.deep.almost([[1, 2, 3], 1]);             // passes
expect({ taco: 'pastor', num: 3.9 }).to.not.almost.eql({ taco: 'pastor', num: 4 });   // passes

----------------------------------------

TITLE: Implementing API Contract Validation with Jest
DESCRIPTION: Example showing how to integrate the validator plugin with Jest testing framework.

LANGUAGE: javascript
CODE:
const matchApiSchema = require('api-contract-validator').jestPlugin;

// API definitions path
const apiDefinitionsPath = path.join(__dirname, 'myApp.yaml');

// add as jest plugin
matchApiSchema({ apiDefinitionsPath });

it('GET /pets/123', async () => {
    const response = await request.get('/pet/123');
    expect(response).toHaveStatus(200);
    expect(response).toMatchApiSchema();
})

----------------------------------------

TITLE: Setting Chai Exec Defaults in JavaScript
DESCRIPTION: This example demonstrates how to set default values for Chai Exec to reduce repetition in tests.

LANGUAGE: javascript
CODE:
const chaiExec = require("@jsdevtools/chai-exec");
const chai = require("chai");

chai.use(chaiExec);

// Set some defaults
chaiExec.defaults = {
  command: "my-cli",
  args: "--arg1 --arg2",
  options: {
    cwd: "/usr/bin"
  }
};

describe("My CLI", () => {
  it("should use defaults", () => {
    // Run your CLI using defaults + one-time args
    let myCLI("--arg3 --arg4");

    myCLI.command.should.equal("my-cli");
    myCLI.args.should.deep.equal([ "--arg1", "--arg2", "--arg3", "--arg4" ]);
  });
});

----------------------------------------

TITLE: Installing and Using Chai Better Shallow Deep Equal Plugin
DESCRIPTION: Shows how to import and initialize the plugin with Chai testing framework.

LANGUAGE: javascript
CODE:
const chai = require("chai");
const expect = chai.expect;

chai.use(require("chai-better-shallow-deep-equal"));

----------------------------------------

TITLE: Sinon-Chai AMD Module Usage
DESCRIPTION: Demonstrates how to use Sinon-Chai as an AMD module.

LANGUAGE: javascript
CODE:
define(function (require, exports, module) {
    var chai = require("chai");
    var sinonChai = require("sinon-chai");

    chai.use(sinonChai);
});

----------------------------------------

TITLE: Basic Shallow Deep Equal Assertion Example
DESCRIPTION: Demonstrates basic usage of the shallowDeepEqual assertion with object comparison.

LANGUAGE: javascript
CODE:
expect({ foo: true, bar: 0 }).to.shallowDeepEqual({ foo: true, bar: 1 });

----------------------------------------

TITLE: Excluding a top-level property from an object
DESCRIPTION: Examples of using chai-exclude to exclude a single top-level property from object and array comparisons.

LANGUAGE: javascript
CODE:
// Object
assert.deepEqualExcluding({ a: 'a', b: 'b' }, { b: 'b' }, 'a')
assert.deepEqualExcluding({ a: 'a', b: 'b' }, { a: 'z', b: 'b' }, 'a')

expect({ a: 'a', b: 'b' }).excluding('a').to.deep.equal({ b: 'b' })
expect({ a: 'a', b: 'b' }).excluding('a').to.deep.equal({ a: 'z', b: 'b' })

// Array
assert.deepEqualExcluding([{ a: 'a', b: 'b' }], [{ b: 'b' }], 'a')
assert.deepEqualExcluding([{ a: 'a', b: 'b' }], [{ a: 'z', b: 'b' }], 'a')

expect([{ a: 'a', b: 'b' }]).excluding('a').to.deep.equal([{ b: 'b' }])
expect([{ a: 'a', b: 'b' }]).excluding('a').to.deep.equal([{ a: 'z', b: 'b' }])

----------------------------------------

TITLE: Asynchronous Callback-based Testing
DESCRIPTION: Example of using chai-change with error-first callbacks for asynchronous testing.

LANGUAGE: javascript
CODE:
let count = 0;
const User = {
  create(attrs,cb) {
    setTimeout(() => {
      count += 1
      cb();
    });
  },
  count(cb) {
    setTimeout(() => {
      cb(null,count);
    });
  },
};

expect((stepDone) => {
  User.create({name: "bob"}, stepDone)
}).to.alter((stepDone) => {
  User.count(stepDone);
},{
  by: 1,
  callback: done
});

----------------------------------------

TITLE: Defining and Testing a Fibonacci Generator Function
DESCRIPTION: Demonstrates how to create a generator function for the Fibonacci sequence and test it using chai-iterator.

LANGUAGE: javascript
CODE:
function* fibonacci() {
  for (let [x, y] = [1, 1]; true; [x, y] = [y, x + y]) {
    yield x;
  }
}

fibonacci().should.iterate.from([1, 1, 2, 3, 5]);

----------------------------------------

TITLE: Coverage Report Configuration
DESCRIPTION: Example of configuring the plugin to generate API coverage reports, showing both in-memory reporting and JSON file export options.

LANGUAGE: javascript
CODE:
use(matchApiSchema({
    apiDefinitionsPath,
    reportCoverage: true
}));

use(matchApiSchema({
    apiDefinitionsPath,
    exportCoverage: true
}));

----------------------------------------

TITLE: Using chai-roughly-v2 Assertions
DESCRIPTION: Example test case demonstrating how to use chai-roughly-v2 for approximate number comparison with default tolerance (1e-6).

LANGUAGE: javascript
CODE:
const { expect } = chai;

it('works', () => {
  const result = { value: 41.9999999 };
  expect(result).to.roughly.deep.equal({ value: 42 });
});

----------------------------------------

TITLE: Chai Plugin Integration
DESCRIPTION: Basic setup to integrate chai-by-proxy with Chai assertion library.

LANGUAGE: javascript
CODE:
var chai = require('chai')
chai.use(require('chai-by-proxy'))

----------------------------------------

TITLE: Asynchronous Callback-based Testing
DESCRIPTION: Example of using chai-change with error-first callbacks for asynchronous testing.

LANGUAGE: javascript
CODE:
let count = 0;
const User = {
  create(attrs,cb) {
    setTimeout(() => {
      count += 1
      cb();
    });
  },
  count(cb) {
    setTimeout(() => {
      cb(null,count);
    });
  },
};

expect((stepDone) => {
  User.create({name: "bob"}, stepDone)
}).to.alter((stepDone) => {
  User.count(stepDone);
},{
  by: 1,
  callback: done
});

----------------------------------------

TITLE: Number Type Assertions
DESCRIPTION: Examples of number type assertions including integers and floats

LANGUAGE: typescript
CODE:
expect(1).to.be.number();
expect(0).to.be.number();
expect(-1).to.be.number();
expect(63465789908753).to.be.number();
expect(27.11).to.be.number();

expect(1).to.be.number;
expect(0).to.be.number;
expect(-1).to.be.number;
expect(63465789908753).to.be.number;
expect(27.11).to.be.number;

expect(27).to.be.integer();
expect(27).to.be.integer;

expect(27.11).to.be.float();
expect(27.11).to.be.float;

----------------------------------------

TITLE: Adding Schemas to TV4 Instance
DESCRIPTION: JavaScript code showing how to add schemas to the TV4 instance exported by chai-json-schema for use in validations.

LANGUAGE: javascript
CODE:
chai.tv4.addSchema(uri, schema);

----------------------------------------

TITLE: Using deepAlmostEqual assertion
DESCRIPTION: Examples of using the deepAlmostEqual assertion to compare objects containing numbers with a specified precision.

LANGUAGE: javascript
CODE:
expect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);
assert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);

----------------------------------------

TITLE: Basic HTTP Request Testing Example
DESCRIPTION: Example showing how to make an HTTP request using superagent and test the response using chai assertions.

LANGUAGE: javascript
CODE:
import request from 'superagent';

request
  .get('http://localhost:8000/foo')
  .then(res => expect(res).to.have.status(200));

----------------------------------------

TITLE: Detailed Example with Expects vs Assertions
DESCRIPTION: Shows the difference between counting expects and assertions, demonstrating how a single expect can contain multiple assertions.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiAssertionsCount = require('chai-assertions-count');
chai.use(chaiAssertionsCount);

describe('suite #3', () => {
  it('test #1', () => {
    chai.Assertion.expectAssertions(3);
    chai.Assertion.expectExpects(2);

    chai.expect(1).to.be.equal(1);
    chai.expect([]).to.have.property('length', 0);
  });
});

----------------------------------------

TITLE: Node < 6 Setup Configuration
DESCRIPTION: Additional setup required for Node.js versions below 6, including harmony-reflect installation and mocha configuration.

LANGUAGE: bash
CODE:
$ npm install --save-dev harmony-reflect

$ echo "--harmony_proxies"         >> test/mocha.opts
$ echo "--require harmony-reflect" >> test/mocha.opts

----------------------------------------

TITLE: Using deepAlmostEqual assertion
DESCRIPTION: Examples of using the deepAlmostEqual assertion to compare objects containing numbers with a specified precision.

LANGUAGE: javascript
CODE:
expect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);
assert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);

----------------------------------------

TITLE: Expect API Usage Examples
DESCRIPTION: Examples of using the expect API with various assertion options including by, from, and to.

LANGUAGE: javascript
CODE:
let x = 0;

expect(() => { x += 1; }).to.alter(() => x);
expect(() => {         }).not.to.alter(() => x);

expect(() => { x += 1 }).to.alter(() => x, { by: 1 });
expect(() => { x += 1 }).to.alter(() => x, { from: x });
expect(() => { x += 1 }).to.alter(() => x, { from: x, to: x + 1 });
expect(() => { x += 1 }).to.alter(() => x, { to: x + 1 });

----------------------------------------

TITLE: Testing for ascending sort order by attribute using .sortedBy()
DESCRIPTION: Demonstrates how to use the .sortedBy() method to test if an array of objects is sorted by a specific attribute in ascending order.

LANGUAGE: javascript
CODE:
expect([{id:2,name:"apple"},{id:3,name:"bat"}]).to.be.sortedBy("name")

----------------------------------------

TITLE: Boolean Type Assertions
DESCRIPTION: Examples of asserting boolean type values using chai-asserttype

LANGUAGE: javascript
CODE:
expect(true).to.be.boolean();
expect(false).to.be.boolean();

----------------------------------------

TITLE: Using mean assertion
DESCRIPTION: Examples of using the mean assertion to compare the mean of an array of numbers.

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3 ]).to.have.mean.equal(2);
expect([ 1, 2, 3 ]).to.have.mean.above(1.5);
expect([ 1, 2, 3 ]).to.have.mean.below(2.5);

----------------------------------------

TITLE: Using almost.equal assertion
DESCRIPTION: Examples of using the almost.equal assertion to compare numbers with a specified precision.

LANGUAGE: javascript
CODE:
expect(3.1415).to.almost.equal(3.14159, 3);
assert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');

----------------------------------------

TITLE: Basic Usage of chai-bytes Plugin
DESCRIPTION: Demonstrates how to use the chai-bytes plugin to test equality of Uint8Array instances using both expect and assert styles. Shows comparison with hexadecimal strings and arrays.

LANGUAGE: javascript
CODE:
const { expect, assert } = require('chai')
  .use(require('chai-bytes'));

const buffer = new Uint8Array([ 1, 2, 3, 4, 5 ]);
expect(buffer).to.equalBytes('0102030405');
// `assert` style works, too
assert.equalBytes(buffer, [1, 2, 3, 4, 5], 'error message');

----------------------------------------

TITLE: Installing XCode Command Line Tools on MacOS
DESCRIPTION: Command to install XCode Command Line Tools on MacOS, which includes Git and other essential development tools.

LANGUAGE: sh
CODE:
$ xcode-select --install

----------------------------------------

TITLE: Installing Chai-Subset Plugin
DESCRIPTION: Demonstrates how to require and initialize the chai-subset plugin with Chai assertion library.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiSubset = require('chai-subset');
chai.use(chaiSubset);

----------------------------------------

TITLE: Including Chai DateTime in Node.js
DESCRIPTION: How to require and use the chai-datetime plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-datetime'));

----------------------------------------

TITLE: Using almost.equal assertion
DESCRIPTION: Examples of using the almost.equal assertion to compare numbers with a specified precision.

LANGUAGE: javascript
CODE:
expect(3.1415).to.almost.equal(3.14159, 3);
assert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');

----------------------------------------

TITLE: Basic Pattern Matching Example
DESCRIPTION: Example showing basic usage of matchPattern assertion to validate object properties using both exact values and type checking

LANGUAGE: javascript
CODE:
chai.expect({a: 1, b: 'abc'}).to.matchPattern({a: 1, b: _.isString});

----------------------------------------

TITLE: Using momentFormat Assertion with Locale
DESCRIPTION: Example of using the momentFormat assertion to validate a date string with a specified locale (French in this case).

LANGUAGE: javascript
CODE:
expect('2012 juillet').to.momentFormat('YYYY MMMM', 'fr');

----------------------------------------

TITLE: Testing IPv4 Address Validation
DESCRIPTION: Examples of asserting valid IPv4 addresses using the .ipv4 assertion.

LANGUAGE: javascript
CODE:
expect('127.0.0.1').to.be.an.ipv4;
expect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.not.be.an.ipv4;

----------------------------------------

TITLE: Installing and Setting Up Chai as Promised in Node.js
DESCRIPTION: Demonstrates how to install and set up Chai as Promised in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);

// Then either:
var expect = chai.expect;
// or:
var assert = chai.assert;
// or:
chai.should();
// according to your preference of assertion style

----------------------------------------

TITLE: Integrating chai-jq in Node.js with JsDom
DESCRIPTION: JavaScript code showing how to require and use chai-jq in a Node.js environment with JsDom.

LANGUAGE: javascript
CODE:
var chai    = require("chai");
var plugin  = require("chai-jq");

// Inject plugin.
chai.use(plugin);

// Rest of test code here...

----------------------------------------

TITLE: Initializing Chai-Fuzzy on Server
DESCRIPTION: Demonstrates how to initialize the chai-fuzzy plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-fuzzy'));

----------------------------------------

TITLE: Partial Path Matching with chai-url in JavaScript
DESCRIPTION: This snippet shows how to use the chai-url plugin for partial matching of URL paths. It demonstrates the use of the 'contains' clause in the test statement.

LANGUAGE: javascript
CODE:
expect('http://example.com/foo/bar').to.contain.path('/foo');

----------------------------------------

TITLE: Using Chai-Fuzzy jsonOf Matcher
DESCRIPTION: Examples of using the 'jsonOf' matcher to compare JSON-stringified and parsed objects.

LANGUAGE: javascript
CODE:
var apple = {
  skin: 'thin',
  colors: ['red', 'green', 'yellow'],
  isFruit: true,
  picked: new Date()
};
var orange = {
  skin: 'thin',
  colors: ['red', 'green', 'yellow'],
  isFruit: true,
  picked: new Date()
};
var appleJSON = JSON.parse(JSON.stringify(apple));

appleJSON.should.be.jsonOf(apple);
appleJSON.should.not.be.jsonOf(orange);

expect(appleJSON).to.be.jsonOf(apple);
expect(appleJSON).to.not.be.jsonOf(orange);

assert.jsonOf(appleJSON, apple);
assert.notJsonOf(appleJSON, orange);

----------------------------------------

TITLE: Using chai-jest-mocks assertions in tests
DESCRIPTION: Examples of various assertions provided by chai-jest-mocks for testing Jest mock functions. Includes checks for call count, arguments, and return behavior.

LANGUAGE: javascript
CODE:
// Expect a mock to be called
expect(mockFn).to.have.beenCalled();

// Expect a mock to have been called a certain number of times
expect(mockFn).to.have.beenCalledTimes(4);

// Expect a mock to have been called with specific arguments
expect(mockFn).to.have.beenCalledWith('hello', 'world');

// Expect a mock to have been last called with specific arguments
expect(mockFn).to.have.beenLastCalledWith('hello', 'world');

// Expect a mock to have been nth (in this case, second) called with specific arguments
expect(mockFn).to.have.beenNthCalledWith(2, 'hello', 'world');

// Expect a mock to have returned succesfully (i.e, not throw)
expect(mockFn).to.have.returned();

// Expect a mock to have returned succesfully a certain number of times
expect(mockFn).to.have.returnedTimes(3);

----------------------------------------

TITLE: Using chai-param for Parameter Validation
DESCRIPTION: Example showing how to use chai-param to validate method parameters using both 'should' and 'expect' assertion styles

LANGUAGE: javascript
CODE:
function register(user, pass) {
    // using should
    param(user, 'user', 'UsersCtl.register').should.not.be.empty;
    
    // or using expect
    expect(user).param('user', 'UsersCtl.register')
        .to.have.length.above(5)
        .and.below(16);
}

----------------------------------------

TITLE: Installing chai-jq with package managers
DESCRIPTION: Commands to install chai-jq using NPM and Bower package managers.

LANGUAGE: shell
CODE:
npm install chai-jq

LANGUAGE: shell
CODE:
bower install chai-jq

----------------------------------------

TITLE: Basic Usage Example - JavaScript
DESCRIPTION: Demonstrates different syntax styles (BDD and TDD) for using the plugin

LANGUAGE: javascript
CODE:
var d1 = 'abcdef',
    d2 = 'abc';

d1.should.startWith.d2
expect(d1).to.startsWith(d2)
assert.startsWith(d1, d2)

----------------------------------------

TITLE: Verifying MongoDB ObjectID in JavaScript using Chai
DESCRIPTION: This snippet shows how to use the 'objectId' assertion to verify that a value is a valid MongoDB ObjectID. It uses the Chai expectation syntax.

LANGUAGE: javascript
CODE:
expect(someObjectId).to.be.objectId

----------------------------------------

TITLE: Asserting Element Length with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates the use of the 'length' assertion to check the number of child nodes in an element or NodeList.

LANGUAGE: javascript
CODE:
document.querySelector('ul').should.have.length(2)
document.querySelector('li').should.have.length(2)
expect(document.querySelector('ul')).not.to.have.length(3)

----------------------------------------

TITLE: Initializing chai-immutable with ES6
DESCRIPTION: Setup code for using chai-immutable plugin with ES6 import syntax.

LANGUAGE: javascript
CODE:
import chai from 'chai';
import chaiImmutable from 'chai-immutable';

chai.use(chaiImmutable);

----------------------------------------

TITLE: Testing Associated Values with successWrapping and failureWrapping
DESCRIPTION: Shows how to use the 'successWrapping' and 'failureWrapping' methods to test the associated value of a Result object. These methods can be used with equality modifiers like 'deep'.

LANGUAGE: javascript
CODE:
const error = new Error('Failure message')
expect(Failure(error)).to.be.a.failureWrapping(error) // OK
expect(Failure(error)).to.be.a.successWrapping(error) // FAIL - not a Success
expect(Failure(error)).to.be.a.failureWrapping('some other value') // FAIL

expect(Success('Success String')).to.be.a.successWrapping('Success String') // OK
expect(Success('Success String')).to.be.a.failureWrapping('Success String') // Fail - not a Failure

// equality modifiers can be used, such as deep, on successWrapping and failureWrapping
expect(Success({ a: '423' })).to.be.a.deep.successWrapping({ a: '423' })

----------------------------------------

TITLE: Using deep-equal-in-any-order with Chai Expect Style
DESCRIPTION: Demonstrates how to use the deep-equal-in-any-order plugin with Chai's expect assertion style. It shows various examples of comparing arrays and nested objects.

LANGUAGE: javascript
CODE:
const deepEqualInAnyOrder = require('deep-equal-in-any-order');
const chai = require('chai');

chai.use(deepEqualInAnyOrder);

const { expect } = chai;

expect([1, 2]).to.deep.equalInAnyOrder([2, 1]);
expect([1, 2]).to.not.deep.equalInAnyOrder([2, 1, 3]);
expect({ foo: [1, 2], bar: [4, 89, 22] }).to.deep.equalInAnyOrder({ foo: [2, 1], bar: [4, 22, 89] });
expect({ foo: ['foo-1', 'foo-2', [1, 2], null ] }).to.deep.equalInAnyOrder({ foo: [null, [1, 2], 'foo-1', 'foo-2'] });
expect({ foo: [1, 2], bar: { baz: ['a', 'b', { lorem: [5, 6] }] } }).to.deep.equalInAnyOrder({ foo: [2, 1], bar: { baz: ['b', 'a', { lorem: [6, 5] }] } });

----------------------------------------

TITLE: Basic File Path Assertions
DESCRIPTION: Example showing basic file path assertion syntax using expect, should and assert styles

LANGUAGE: javascript
CODE:
expect(path).to.be.a.path(?msg);
path.should.be.a.path(?msg);
assert.pathExists(path, ?msg);

----------------------------------------

TITLE: Sinon-Chai Enhanced Assertion Syntax
DESCRIPTION: Shows the improved assertion syntax provided by Sinon-Chai integration.

LANGUAGE: javascript
CODE:
mySpy.should.have.been.calledWith("foo");
expect(mySpy).to.have.been.calledWith("foo");

----------------------------------------

TITLE: Initializing chai-immutable with CommonJS
DESCRIPTION: Setup code for using chai-immutable plugin with CommonJS require statements.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiImmutable = require('chai-immutable');

chai.use(chaiImmutable);

----------------------------------------

TITLE: Using momentFormat Assertion without Locale
DESCRIPTION: Example of using the momentFormat assertion to validate a date string without specifying a locale.

LANGUAGE: javascript
CODE:
expect('2018-01-26').to.momentFormat('YYYY-MM-DD');

----------------------------------------

TITLE: Verifying Element IDs with Chai-DOM in JavaScript
DESCRIPTION: Illustrates the use of the 'id' assertion to check the ID of HTML elements.

LANGUAGE: javascript
CODE:
document.querySelector('section').should.have.id('#main')
expect(document.querySelector('section')).to.have.id('foo')

----------------------------------------

TITLE: ES6 Set Comparison Example
DESCRIPTION: Demonstrates comparing ES6 Set objects using shallowDeepEqual.

LANGUAGE: javascript
CODE:
expect(new Set(["foo", "baz"])).to.shallowDeepEqual(
  new Set(["foo", "bar"])
);

----------------------------------------

TITLE: Date-Only Comparison Examples
DESCRIPTION: Demonstrates date-only comparison methods that ignore time components using various assertion styles

LANGUAGE: javascript
CODE:
const date = DateTime.fromISO('2020-04-21T12:00:00Z');
const oneHourLater = date.plus({ hour: 1 });
const oneHourEarlier = date.minus({ hour: 1 });
const oneDayLater = date.plus({ day: 1 });
const oneDayEarlier = date.minus({ day: 1 });

// using should-style assertions
date.should.be.sameDate(oneHourLater);
date.should.be.beforeDate(oneHourLater); // fails
date.should.be.beforeDate(oneDayLater);
date.should.be.afterDate(oneHourEarlier); // fails
date.should.be.afterDate(oneDayLater);

// using expect-style assertions
expect(date).to.be.sameDate(oneHourLater);
expect(date).to.be.beforeDate(oneHourLater); // fails
expect(date).to.be.beforeDate(oneDayLater);
expect(date).to.be.afterDate(oneHourEarlier); // fails
expect(date).to.be.afterDate(oneDayLater);

// using tdd assertions
assert.sameDate(date, oneHourLater);
assert.beforeDate(date, oneDayLater);
assert.beforeDate(date, oneHourLater); // fails
assert.afterDate(oneDayLater, date);
assert.afterDate(oneDayLater, oneHourLater); // fails

----------------------------------------

TITLE: Header Assertion Examples
DESCRIPTION: Examples of asserting HTTP headers including key presence and value matching.

LANGUAGE: javascript
CODE:
expect(req).to.have.header('x-api-key');
expect(req).to.have.header('content-type', 'text/plain');
expect(req).to.have.header('content-type', /^text/);

----------------------------------------

TITLE: Initializing Chai HTTP Plugin in Node.js
DESCRIPTION: Code snippet showing how to require and use the Chai HTTP plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiHttp = require('chai-http');

chai.use(chaiHttp);

----------------------------------------

TITLE: Initializing chai-fs Plugin
DESCRIPTION: Code to require and initialize the chai-fs plugin with Chai testing framework

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-fs'));

----------------------------------------

TITLE: Creating a Null Object from an Existing Object
DESCRIPTION: This code shows how to create a null object based on an existing object, where all properties and methods will return null.

LANGUAGE: javascript
CODE:
var nullobject = chai.Null(obj).create();

----------------------------------------

TITLE: Asserting jQuery text content with chai-jquery
DESCRIPTION: Demonstrates how to use chai-jquery to assert that jQuery objects contain specific text using the 'contain' assertion.

LANGUAGE: javascript
CODE:
$('body').should.contain('text');
expect($('#content')).to.contain('text');

----------------------------------------

TITLE: Asynchronous Promise-based Testing
DESCRIPTION: Example of using chai-change with promises for asynchronous testing.

LANGUAGE: javascript
CODE:
it("creates a user", () => {
  let count = 0;
  const User = {
    create(attrs) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          count += 1
          resolve();
        });
      });
    },
    count() {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve(count);
        });
      });
    },
  };

  return expect(() => (
    User.create({name: "bob"});
  )).to.alter(() => (
    User.count();
  ),{
    by: 1,
  });
})

----------------------------------------

TITLE: Testing for descending sort order using .sorted()
DESCRIPTION: Shows how to use the .sorted() method with the descending option to test if an array is sorted in descending order.

LANGUAGE: javascript
CODE:
expect(["b","apples"]).to.be.sorted({descending: true})

----------------------------------------

TITLE: Importing and Setting Up Chai Each
DESCRIPTION: Shows how to import and register the chai-each plugin with Chai testing framework.

LANGUAGE: javascript
CODE:
import { use } from "chai";
import * as chaiEach from "chai-each";
use(chaiEach);

----------------------------------------

TITLE: UUID validation using Chai expect style
DESCRIPTION: Examples of UUID validation using Chai's expect interface, showing validation for different UUID versions (v1-v5) and GUID

LANGUAGE: javascript
CODE:
const chai = require("chai");
chai.use(require('chai-uuid'));
const expect = chai.expect;

// validate UUID v1
expect('bd74c8da-4d9e-11e7-b114-b2f933d5fe66').to.be.a.uuid('v1');
// validate UUID v2
expect('f6b93689-1c6a-2931-a785-c7d5606f7f4d').to.be.a.uuid('v2');
// validate UUID v3
expect('622ab4f8-c3e7-3747-a548-0e2d11bf5ab1').to.be.a.uuid('v3');
// validate UUID v4
expect('0ce529f4-8854-41ec-b67c-fbcb4e716e42').to.be.a.uuid('v4');
// validate UUID v5
expect('48a698a0-1641-5aca-bc1b-de9b1a482ee1').to.be.a.uuid('v5');
// validate UUID (any version)
expect('a416d989-91d1-48c9-b583-267df138834c').to.be.a.uuid();

// optionally, you can use the guid method
expect('a416d989-91d1-48c9-b583-267df138834c').to.be.a.guid();

----------------------------------------

TITLE: Using dirty-chai with Sinon-Chai
DESCRIPTION: Demonstrates how dirty-chai converts other plugin's property assertions to method assertions

LANGUAGE: javascript
CODE:
spy.should.have.been.called();
spy.should.have.been.calledOnce();
spy.should.have.been.calledTwice();

----------------------------------------

TITLE: Comparing File Content with String
DESCRIPTION: Examples of comparing file contents with expected string values.

LANGUAGE: javascript
CODE:
expect(file('foo.txt')).to.equal('foo');
expect(file('foo.txt')).to.not.equal('bar');

expect('foo').to.equal(file('foo.txt'));
expect('foo').to.not.equal(file('foo.txt'));

----------------------------------------

TITLE: Schema Validation Test Example
DESCRIPTION: Example showing how to validate objects against schemas defined in an OpenAPI spec

LANGUAGE: javascript
CODE:
// Set up Chai
import chai from 'chai';
const expect = chai.expect;

// Import this plugin and the function you want to test
import chaiResponseValidator from 'chai-openapi-response-validator';
import { functionToTest } from 'path/to/your/code';

// Load an OpenAPI file (YAML or JSON) into this plugin
chai.use(chaiResponseValidator('path/to/openapi.yml'));

// Write your test (e.g. using Mocha)
describe('functionToTest()', () => {
  it('should satisfy OpenAPI spec', async () => {
    // Assert that the function returns a value satisfying a schema defined in your OpenAPI spec
    expect(functionToTest()).to.satisfySchemaInApiSpec('ExampleSchemaObject');
  });
});

----------------------------------------

TITLE: Asserting jQuery element hidden state with chai-jquery
DESCRIPTION: Shows how to use chai-jquery to assert that jQuery objects are hidden using the 'hidden' assertion.

LANGUAGE: javascript
CODE:
$('.name').should.be.hidden;
expect($('.year')).to.be.hidden;

----------------------------------------

TITLE: Traditional Chai Assertion Examples
DESCRIPTION: Examples of using Chai's should and expect interfaces with Sinon spy properties.

LANGUAGE: javascript
CODE:
mySpy.calledWith("foo").should.be.ok;
expect(mySpy.calledWith("foo")).to.be.ok;

----------------------------------------

TITLE: Using deviation assertion
DESCRIPTION: Example of using the deviation assertion to compare the standard deviation of an array of numbers.

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3, 4 ]).to.have.deviation.almost.equal(1.290, 2);

----------------------------------------

TITLE: Complete Example of Chai-WebDriver-Exec Usage in JavaScript
DESCRIPTION: Provides a full example of setting up and using chai-webdriver-exec in a test file, including WebDriver setup, Chai configuration, and a simple test case using the plugin.

LANGUAGE: JavaScript
CODE:
var webdriver = require('selenium-webdriver'),
  test = require('selenium-webdriver/testing')
var driver = new webdriver.Builder()
  .forBrowser('firefox')
  .build()

var chai = require('chai')
var chaiWebdriverExec = require('chai-webdriver-exec')
chai.use(chaiWebdriverExec(driver)) // here you hook it up

test.describe('some cool feature', function() {
  this.timeout(10000)
  
  test.it('should work as expected', function() {
    driver.get('http://github.com');
    chai.expect('return window.scrollX').to.be.a('number')
  })
})

----------------------------------------

TITLE: Array Type Assertion in Chai
DESCRIPTION: Demonstrates how to use the array() assertion to check if a value is an Array or specific typed array.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.array();
expect('foobar').not.to.be.array();

expect(new Uint8Array([1])).to.be.Uint8Array();
expect(new Uint16Array([1])).to.be.Uint16Array();
expect(new Uint32Array([1])).to.be.Uint32Array();
expect(new Uint8ClampedArray([1])).to.be.Uint8ClampedArray();

----------------------------------------

TITLE: Installing Node Fetch Response Matchers via npm
DESCRIPTION: Demonstrates how to install the node-fetch-response-matchers package as a development dependency using npm.

LANGUAGE: shell
CODE:
$ npm install --save-dev node-fetch-response-matchers

----------------------------------------

TITLE: JavaScript Setup and Usage
DESCRIPTION: Example of setting up and using Chai Smoothie in a JavaScript project

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-smoothie'));
var expect = chai.expect;

expect(element(by.css('h1'))).to.be.present;

----------------------------------------

TITLE: Installing ChaiRx via npm
DESCRIPTION: This snippet shows the npm command to install the ChaiRx package.

LANGUAGE: shell
CODE:
npm install chai-rx

----------------------------------------

TITLE: Redirect Assertion Examples
DESCRIPTION: Examples of asserting HTTP redirects and redirect locations.

LANGUAGE: javascript
CODE:
expect(res).to.redirect;
expect(res).to.redirectTo('http://example.com');
expect(res).to.redirectTo(/^\/search\/results\?orderBy=desc$/);

----------------------------------------

TITLE: Example Test with Potential Missing Assertions
DESCRIPTION: Demonstrates a test case where it's difficult to verify if a method was called without using assertion counting.

LANGUAGE: javascript
CODE:
import InstanceGenerator from '../lib/instances-generator';

describe('suite #1', () => {
  it('test #1', () => {
    class S1T1A {
      /* Other props and methods are skipped */
      /**
       * I'm called after any instance of S1T1A is created
       */
      afterCreate(...args) {
        // I need to check `args` here
        // chai.expect(args)... 
      }
    }
    InstanceGenerator.create(S1T1A, 3); // create 3 instances of S1T1A
  });
});

----------------------------------------

TITLE: Asserting Checkbox and Radio Button State with Chai-DOM
DESCRIPTION: Shows how to use the 'checked' assertion to verify the checked state of checkbox and radio input elements.

LANGUAGE: javascript
CODE:
document.querySelector('input').should.be.checked
expect(document.querySelector('.checkbox')).not.to.be.checked

----------------------------------------

TITLE: BeforeDateTime Assertion Examples
DESCRIPTION: Demonstrates usage of beforeDateTime assertion with different assertion styles and granularity options

LANGUAGE: javascript
CODE:
var dateString = '2020-04-21',
  oneDayLater = '2020-04-22';

// using should-style assertions
dateString.should.be.beforeDateTime(oneDayLater);
dateString.should.be.beforeDateTime(oneDayLater, 'month'); // fails

// using expect-style assertions
expect(dateString).to.be.beforeDateTime(oneDayLater);
expect(dateString).to.be.beforeDateTime(oneDayLater, 'month'); // fails

// using tdd assertions
assert.beforeDateTime(luxonDateTime, oneDayLater);
assert.beforeDateTime(luxonDateTime, oneDayLater, 'month'); // fails
assert.beforeDateTime(luxonDateTime, oneDayLater, 'month', 'custom error message'); // fails
assert.beforeDateTime(luxonDateTime, oneDayLater, 'custom error message');

----------------------------------------

TITLE: Using sinon-chai-in-order in ES5 JavaScript
DESCRIPTION: This snippet shows how to use the sinon-chai-in-order plugin in ES5 JavaScript environments.

LANGUAGE: javascript
CODE:
chai.use(require('chai-react-element').default);

----------------------------------------

TITLE: Asynchronous Assertions with Callbacks and Promises in JavaScript
DESCRIPTION: Illustrates how to use asynchronous assertions with chai-webdriver-exec, demonstrating both callback and promise-based approaches for handling asynchronous flow in tests.

LANGUAGE: JavaScript
CODE:
expect(script).exec.to.have.ownProperty('string', function(){...})
expect(script).exec.to.have.ownProperty('string').then(function(){...})

----------------------------------------

TITLE: BigNumber Property Assertions
DESCRIPTION: Examples showing how to use property-based assertions for checking number characteristics like finite, integer, negative, and zero.

LANGUAGE: javascript
CODE:
(100 / 0).should.not.be.finite;
expect(10).to.be.integer;
(-100).should.be.negative;
expect(1 - 1).to.be.zero;

----------------------------------------

TITLE: Complex Chaining Example
DESCRIPTION: Complex example showing multiple chained assertions in CoffeeScript.

LANGUAGE: coffeescript
CODE:
response =
  status: 200
  body:
    data:
      count: 1
      items: [
        { name: 'party pooper' }
      ]

response.should.have.status.which.eq(200)
                .and.body.without.error
                .and.body.data.has.count.above(0)
                              .and.items[0].name= 'party pooper'

----------------------------------------

TITLE: Importing ChaiRx using AMD in JavaScript
DESCRIPTION: This snippet shows how to import and use ChaiRx using AMD (Asynchronous Module Definition).

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiRx = require('chai-rx');

chai.use(chaiRx);

----------------------------------------

TITLE: BigNumber Property Assertions
DESCRIPTION: Examples showing how to use property-based assertions for checking number characteristics like finite, integer, negative, and zero.

LANGUAGE: javascript
CODE:
(100 / 0).should.not.be.finite;
expect(10).to.be.integer;
(-100).should.be.negative;
expect(1 - 1).to.be.zero;

----------------------------------------

TITLE: Testing Strictly Monotonic Sequences with Chai
DESCRIPTION: Examples of testing strictly increasing and decreasing sequences where adjacent values must be different.

LANGUAGE: javascript
CODE:
expect([1,2,3,4,5]).to.be.strictly.increasing;
expect([1,2,3,3,4,5]).not.to.be.strictly.increasing;
expect([10,9,8,7,6]).to.be.strictly.increasing;
expect([10,9,8,7,7]).not.to.be.strictly.decreasing;

----------------------------------------

TITLE: UUID validation using Chai should style
DESCRIPTION: Examples of UUID validation using Chai's should interface for UUID v1 and GUID validation

LANGUAGE: javascript
CODE:
const chai = require("chai");
chai.use(require('chai-uuid'));
const should = chai.should();

// validate UUID v1
'bd74c8da-4d9e-11e7-b114-b2f933d5fe66'.should.be.a.uuid('v1');

// validate GUID
'bd74c8da-4d9e-11e7-b114-b2f933d5fe66'.should.be.a.guid();

----------------------------------------

TITLE: Using chai-jscodeshift for transformer testing in JavaScript
DESCRIPTION: This example shows how to use chai-jscodeshift to test a transformer function against a fixture.

LANGUAGE: javascript
CODE:
import myTransform from '../src/my-transform';

describe('myTransform', () => {
  it('transforms properly', () => {
    expect(myTransform).to.transform('my-fixture');

    // or

    assert.transforms(myTransform, 'my-fixture');
  });
});

----------------------------------------

TITLE: Using strict momentFormat Assertion with Locale
DESCRIPTION: Example of using the strict momentFormat assertion to validate a date string with a specified locale (French in this case).

LANGUAGE: javascript
CODE:
expect('2012 juillet').to.momentFormat.strict('YYYY MMMM', 'fr');

----------------------------------------

TITLE: Subset ID Comparisons in Chai
DESCRIPTION: Shows how to test for ID subsets using include or contain chain modifiers.

LANGUAGE: javascript
CODE:
[{id:'a'}, {id:'b'}].should.include.same.ids [{id:'a'}]

----------------------------------------

TITLE: Initializing chai-param with Chai
DESCRIPTION: Setup code to require and configure chai-param with the Chai assertion library. Shows how to import necessary dependencies and initialize the plugin.

LANGUAGE: javascript
CODE:
var chai = require('chai'),
    chaiParam = require('chai-param'),
    expect = chai.expect,
    should = chai.should(),
    param = chaiParam.param;

chai.use(chaiParam);

----------------------------------------

TITLE: Testing for ascending sort order using .sorted()
DESCRIPTION: Demonstrates how to use the .sorted() method to test if an array is sorted in ascending order.

LANGUAGE: javascript
CODE:
expect(["a","b"]).to.be.sorted()
// or
expect(["a","b"]).to.be.sorted({descending: false})

----------------------------------------

TITLE: Using Just Assertions with Maybe-Chai
DESCRIPTION: Examples of using the 'just' assertion to test Maybe.Just values, including deep equality checks and chaining assertions.

LANGUAGE: javascript
CODE:
expect( Maybe.just(5) ).to.be.a.just()      // OK!
expect( Maybe.just(5) ).to.be.just(5)       // OK!
expect( Maybe.nothing() ).to.be.just(5)     // fails
expect( Maybe.nothing() ).to.not.be.just(5) // OK!
expect( 'string' ).to.be.just(5)            // fails
expect( 'string' ).to.not.be.just(5)        // OK!

LANGUAGE: javascript
CODE:
expect( Maybe.just({a: 'test'}) ).to.be.just({a: 'test'})

LANGUAGE: javascript
CODE:
expect( Maybe.just( { status: 200 } ) ).to.be.a.just()
    .and.to.have.property( 'status', 200 ) // OK

----------------------------------------

TITLE: Property Priority Example
DESCRIPTION: Shows how Chai's properties take precedence over object properties.

LANGUAGE: javascript
CODE:
obj = { a: { property: '' } }
// you can't do
obj.should.have.a.property
// instead, fallback to old style
obj.should.have.deep.property('a.property')

----------------------------------------

TITLE: Asserting MongoDB Document Equality in JavaScript using Chai
DESCRIPTION: This snippet demonstrates how to use the 'mongoDoc' assertion to compare a MongoDB document with an expected document. It utilizes the Chai expectation syntax.

LANGUAGE: javascript
CODE:
expect(someDoc).to.be.mongoDoc(actualDoc)

----------------------------------------

TITLE: Importing chai-moment-string in Node.js Environment
DESCRIPTION: Demonstrates how to require and use the chai-moment-string plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-moment-string'));

----------------------------------------

TITLE: Array Size Assertion in Chai
DESCRIPTION: Shows how to use the ofSize() assertion to verify the length of an array.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.ofSize(3);
expect([1, 2, 3]).not.to.be.ofSize(5);

----------------------------------------

TITLE: Asserting Element Styles with Chai-DOM in JavaScript
DESCRIPTION: Shows how to use the 'style' assertion to check specific CSS property values of an element.

LANGUAGE: javascript
CODE:
document.querySelector('.container').should.have.style('color', 'rgb(55, 66, 77)')
expect(document.querySelector('.container')).not.to.have.style('borderWidth', '3px')

----------------------------------------

TITLE: Array Size Assertion in Chai
DESCRIPTION: Shows how to use the ofSize() assertion to verify the length of an array.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.ofSize(3);
expect([1, 2, 3]).not.to.be.ofSize(5);

----------------------------------------

TITLE: Using sum assertion
DESCRIPTION: Examples of using the sum assertion to compare the sum of an array of numbers.

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3 ]).to.have.sum.equal(6);
expect([ 1, 2, 3 ]).to.have.sum.above(5);
expect([ 1, 2, 3 ]).to.have.sum.below(7);

----------------------------------------

TITLE: Using sum assertion
DESCRIPTION: Examples of using the sum assertion to compare the sum of an array of numbers.

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3 ]).to.have.sum.equal(6);
expect([ 1, 2, 3 ]).to.have.sum.above(5);
expect([ 1, 2, 3 ]).to.have.sum.below(7);

----------------------------------------

TITLE: Integrating Chai Colors Plugin with Chai
DESCRIPTION: Shows how to integrate the chai-colors plugin with the Chai assertion library. This code snippet demonstrates the proper way to require and use the plugin in your test setup.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiColors = require('chai-colors');

chai.use(chaiColors);

----------------------------------------

TITLE: Using Chai Colors with Webdriver for Element Color Testing
DESCRIPTION: Illustrates how to combine the chai-colors plugin with webdriver for testing element colors in a web application. This example retrieves the computed color of a code element and asserts it against a named color.

LANGUAGE: javascript
CODE:
browser
  .elementByCss('code .hljs-keyword')
  .getComputedCss('color').should.eventually.be.colored('mintcream')

----------------------------------------

TITLE: Testing for descending sort order by attribute using .descendingBy()
DESCRIPTION: Shows the use of the .descendingBy() method as an alternative to .sortedBy() for testing descending sort order by attribute.

LANGUAGE: javascript
CODE:
expect([{id:2,name:"bat"},{id:3,name:"apples"}]).to.be.descendingBy("name")

----------------------------------------

TITLE: Using noReservedWordsExcept Assertion
DESCRIPTION: Examples of using the noReservedWordsExcept assertion to allow specific reserved words while checking for others. Accepts single string or array of strings as arguments.

LANGUAGE: javascript
CODE:
const usingAttributeNamePrefix = 'SET #name = :fullname';
const usingAttributeValuePrefix = 'SET username = :name';
const missingPrefix = 'SET username = name';

// using should-style assertions
usingAttributeNamePrefix.should.have.noReservedWordsExcept('set');
usingAttributeValuePrefix.should.have.noReservedWordsExcept('SET');
missingPrefix.should.have.noReservedWordsExcept(['SET', 'NAME']);
missingPrefix.should.have.noReservedWordsExcept('SET'); // fails

// using expect-style assertions
expect(usingAttributeNamePrefix).to.have.noReservedWordsExcept('set');
expect(usingAttributeValuePrefix).to.have.noReservedWordsExcept('SET');
expect(missingPrefix).to.have.noReservedWordsExcept(['SET', 'NAME']);
expect(missingPrefix).to.have.noReservedWordsExcept('SET'); // fails

// using tdd assertions
assert.noReservedWordsExcept(usingAttributeNamePrefix, 'set');
assert.noReservedWordsExcept(usingAttributeValuePrefix, 'SET');
assert.noReservedWordsExcept(missingPrefix, ['SET', 'NAME']);
assert.noReservedWordsExcept(missingPrefix, 'SET'); // fails

----------------------------------------

TITLE: Chai Nock Installation Setup
DESCRIPTION: Shows how to install and set up chai-nock in a test environment.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiNock = require('chai-nock');

chai.use(chaiNock);

----------------------------------------

TITLE: Asserting Success Type with chai-kekka
DESCRIPTION: Shows how to use the 'success' property to check if a value is a Success instance of the Result class. Includes examples of positive and negative assertions.

LANGUAGE: javascript
CODE:
// Positive
expect(Success('Success String')).to.be.a.success // OK
expect(Failure(new Error('Failure...'))).to.be.a.success // FAIL
expect('Not a result').to.be.a.success // FAIL

// Negative
expect(Success('Success String')).not.to.be.a.success // FAIL
expect(Failure(new Error('Failure...'))).not.to.be.a.success // OK
expect('Not a result').not.to.be.a.success // FAIL with 'expected 'Not a result' to be an instance of Result'

----------------------------------------

TITLE: Browser Integration - HTML
DESCRIPTION: How to include chai-string plugin in browser environment

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-string.js"></script>

----------------------------------------

TITLE: Using Shallow Almost Equality Assertions
DESCRIPTION: Examples of using shallow almost-equal assertions with numbers

LANGUAGE: javascript
CODE:
expect(3.9999999).to.almost.equal(4);	        // passes
expect(3.9).to.almost.equal(4);			// fails
expect(4.0000001).to.be.almost(4);		// passes
expect(4.1).to.not.be.almost(4);		// passes

----------------------------------------

TITLE: Configuring chai-param Settings
DESCRIPTION: Example of configuring chai-param options by setting properties in the config object

LANGUAGE: javascript
CODE:
var chaiParam = require('chai-param');

chaiParam.config.improveMessages = true;

----------------------------------------

TITLE: Asserting Failure Type with chai-kekka
DESCRIPTION: Demonstrates how to use the 'failure' property to check if a value is a Failure instance of the Result class. Includes examples of positive and negative assertions.

LANGUAGE: javascript
CODE:
// Positive
expect(Success('Success String')).to.be.a.failure // FAIL
expect(Failure(new Error('Failure...'))).to.be.a.failure // OK
expect('Not a result').to.be.a.failure // FAIL

// Negative
expect(Success('Success String')).not.to.be.a.failure // OK
expect(Failure(new Error('Failure...'))).not.to.be.a.failure // FAIL
expect('Not a result').not.to.be.a.failure // FAIL with 'expected 'Not a result' to be an instance of Result'

----------------------------------------

TITLE: Using noReservedWords Assertion
DESCRIPTION: Examples of using the noReservedWords assertion with different Chai assertion styles (should, expect, and tdd) to check strings for DynamoDB reserved words.

LANGUAGE: javascript
CODE:
const safe = 'id, phone, email';
const notSafe = 'id, name, phone, email';
const usingAttributeNamePrefix = 'id, #name, phone, email';
const usingAttributeValuePrefix = 'username = :name';

// using should-style assertions
safe.should.have.noReservedWords();
notSafe.should.have.noReservedWords(); // fails
usingAttributeNamePrefix.should.have.noReservedWords();
usingAttributeValuePrefix.should.have.noReservedWords();

// using expect-style assertions
expect(safe).to.have.noReservedWords();
expect(notSafe).to.have.noReservedWords(); // fails
expect(usingAttributeNamePrefix).to.have.noReservedWords();
expect(usingAttributeValuePrefix).to.have.noReservedWords();

// using tdd assertions
assert.noReservedWords(safe);
assert.noReservedWords(notSafe); // fails
assert.noReservedWords(usingAttributeNamePrefix);
assert.noReservedWords(usingAttributeValuePrefix);

----------------------------------------

TITLE: Using Chai-Subset with Expect Interface
DESCRIPTION: Shows how to use containSubset matcher with nested objects and compare functions using the expect interface.

LANGUAGE: javascript
CODE:
var obj = {
	a: 'b',
	c: 'd',
	e: {
		foo: 'bar',
		baz: {
			qux: 'quux'
		}
	}
};

expect(obj).to.containSubset({
	a: 'b',
	e: {
		baz: {
			qux: 'quux'
		}
	}
});

// or using a compare function
expect(obj).containSubset({
	a: (expectedValue) => expectedValue,
	c: (expectedValue) => expectedValue === 'd'
})

// or with 'not'
expect(obj).to.not.containSubset({
	g: 'whatever'
});

----------------------------------------

TITLE: Chai Integration Example
DESCRIPTION: Demonstrates using Chai's should/expect interfaces with Sinon spy properties.

LANGUAGE: javascript
CODE:
mySpy.calledWith("foo").should.be.ok;
expect(mySpy.calledWith("foo")).to.be.ok;

----------------------------------------

TITLE: Setting Timeout Configuration
DESCRIPTION: Shows how to configure the timeout for chai-nock assertions.

LANGUAGE: javascript
CODE:
const chaiNock = require('chai-nock');

chai.use(chaiNock);
// Set a timeout of 10 seconds
chaiNock.setTimeout(10000);

----------------------------------------

TITLE: Checking Element Focus with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates how to use the 'focus' assertion to verify if an element has focus.

LANGUAGE: javascript
CODE:
document.querySelector('input').should.have.focus
expect(document.querySelector('.container')).not.to.have.focus

----------------------------------------

TITLE: Using Chai-Subset with Expect Interface
DESCRIPTION: Shows how to use containSubset matcher with nested objects and compare functions using the expect interface.

LANGUAGE: javascript
CODE:
var obj = {
	a: 'b',
	c: 'd',
	e: {
		foo: 'bar',
		baz: {
			qux: 'quux'
		}
	}
};

expect(obj).to.containSubset({
	a: 'b',
	e: {
		baz: {
			qux: 'quux'
		}
	}
});

// or using a compare function
expect(obj).containSubset({
	a: (expectedValue) => expectedValue,
	c: (expectedValue) => expectedValue === 'd'
})

// or with 'not'
expect(obj).to.not.containSubset({
	g: 'whatever'
});

----------------------------------------

TITLE: Basic ID Assertions in Chai
DESCRIPTION: Demonstrates basic ID equality assertions using different ID formats and locations. Shows how the plugin handles both string and object representations of IDs.

LANGUAGE: javascript
CODE:
{_id: 'foo'}.should.have.id('foo')
'foo'.should.id({id: 'foo'})
{id: 'foo', bar: 2}.should.have.same.id({id: 'foo', baz: 3})
{_id: 'foo'}.should.not.have.same.id({_id: 'bar'})
{_id: 'foo'}.should.have.same.id({id: {toString: function() { return 'foo'}}})
{_id: 'foo'}.should.have.id(new ObjectId('foo'))

----------------------------------------

TITLE: Creating a Null Object from Scratch
DESCRIPTION: This example shows how to build a null object from scratch using the Chai Null plugin, adding methods 'foo' and 'bar'.

LANGUAGE: javascript
CODE:
var nullobject = chai.Null().method('foo').method('bar').create();

----------------------------------------

TITLE: Importing chai-exclude in TypeScript
DESCRIPTION: Example of how to import and use the chai-exclude plugin in a TypeScript file.

LANGUAGE: typescript
CODE:
import * as chai from 'chai';
import chaiExclude from 'chai-exclude';

chai.use(chaiExclude);

// The typings for chai-exclude are included with the package itself.

----------------------------------------

TITLE: Using chai-doge plugin with Mocha and Chai
DESCRIPTION: Example of how to use the chai-doge plugin in a Mocha test suite. It demonstrates importing the necessary modules, setting up Chai with the plugin, and writing tests using doge-style language chains.

LANGUAGE: javascript
CODE:
import chai from "chai"
import chaiDoge from "../src/chai-doge"
import {describe as such, it as wow} from "mocha"

chai.use(chaiDoge)

const expect = chai.expect

such("getTreats", function () {

  wow("very test", function () {
    const treats = getTreats(10)
    expect(treats).so.lengthOf(10)
  })

  wow("many chaining", function () {
    const treats = getTreats(100)
    expect(treats).wow.such.many.lengthOf(100)    
  })
})

----------------------------------------

TITLE: Installing API Contract Validator
DESCRIPTION: NPM installation command for the api-contract-validator package as a development dependency.

LANGUAGE: bash
CODE:
npm i --save-dev api-contract-validator

----------------------------------------

TITLE: Initializing chai-jest-mocks plugin with Chai
DESCRIPTION: JavaScript code to import and initialize the chai-jest-mocks plugin with Chai. This setup is required before using the plugin's assertions.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiJestMock = require('chai-jest-mocks');

chai.use(chaiJestMock);

----------------------------------------

TITLE: Installing chai-jquery Dependencies
DESCRIPTION: Example showing how to include required script files for using chai-jquery in tests. jQuery and Chai must be loaded before chai-jquery.

LANGUAGE: html
CODE:
<script src="jquery.js"></script>
<script src="chai.js"></script>
<script src="chai-jquery.js"></script>

----------------------------------------

TITLE: Content Type Assertion Examples
DESCRIPTION: Examples of asserting response content types (JSON, HTML, text).

LANGUAGE: javascript
CODE:
expect(req).to.be.json;
expect(req).to.be.html;
expect(req).to.be.text;

----------------------------------------

TITLE: Using Chai-Subset with Assert Interface
DESCRIPTION: Shows how to use containSubset with Chai's assert interface for simple object comparison.

LANGUAGE: javascript
CODE:
assert.containSubset({a: 1, b: 2}, {a: 1});

----------------------------------------

TITLE: Using Chai-Subset with Assert Interface
DESCRIPTION: Shows how to use containSubset with Chai's assert interface for simple object comparison.

LANGUAGE: javascript
CODE:
assert.containSubset({a: 1, b: 2}, {a: 1});

----------------------------------------

TITLE: Including Chai DateTime in Browser
DESCRIPTION: How to include the chai-datetime plugin in a browser environment using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-datetime.js"></script>

----------------------------------------

TITLE: Plugin Setup and Installation
DESCRIPTION: Instructions for installing and configuring the chai-react-element plugin with both ES6 and ES5 syntax.

LANGUAGE: javascript
CODE:
import chai, {expect} from 'chai';
import matcher from 'chai-react-element';
chai.use(matcher);

LANGUAGE: javascript
CODE:
chai.use(require('chai-react-element').default);

----------------------------------------

TITLE: Checking Empty Files and Directories
DESCRIPTION: Examples of checking if files or directories are empty.

LANGUAGE: javascript
CODE:
expect(file('empty.txt')).to.be.empty;
expect(file('foo.txt')).to.not.be.empty;

expect(dir('empty')).to.be.empty;
expect(dir('foo')).to.not.be.empty;

----------------------------------------

TITLE: Installing chai-json-equal Plugin via npm (Shell)
DESCRIPTION: Provides the npm command to install the chai-json-equal plugin. This is a prerequisite for using the plugin in your Chai assertions.

LANGUAGE: shell
CODE:
npm install chai-json-equal

----------------------------------------

TITLE: Importing Chai's expect interface in JavaScript ESM
DESCRIPTION: Demonstrates how to import the 'expect' interface from Chai using ECMAScript modules syntax.

LANGUAGE: javascript
CODE:
import { expect } from 'chai';

----------------------------------------

TITLE: Installing Chai Each Plugin
DESCRIPTION: Command to install the chai-each plugin using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn add chai-each

----------------------------------------

TITLE: Integrating chai-v8-optimisation with Chai
DESCRIPTION: Example of how to use the chai-v8-optimisation plugin with the Chai testing framework.

LANGUAGE: JavaScript
CODE:
var chai = require("chai"),
    v8opt = require("chai-v8-optimisation");
    
chai.use(v8opt);

----------------------------------------

TITLE: Verbose Fetch Response Assertion Without Node Fetch Response Matchers in JavaScript
DESCRIPTION: Shows a more verbose way of asserting a fetch response without using the node-fetch-response-matchers plugin, highlighting the complexity it aims to reduce.

LANGUAGE: javascript
CODE:
it('some-test', function(done){
   fetch('http://localhost/')
      .then(res => {
         expect(res.status).to.equal(200);
         return res.text();
      }).then(text => {
         expect(text).to.equal('foo');
         done();
      })
});

----------------------------------------

TITLE: Validating JSON Schema Structure
DESCRIPTION: Example demonstrating how to validate if a schema itself is valid using expect and assert syntax

LANGUAGE: javascript
CODE:
const chai = require('chai')
chai.use(require('chai-json-schema-ajv'))
const expect = chai.expect
const assert = chai.assert

const schema = {
  title: 'valid schema',
  type: 'object',
  required: ['name'],
  properties: {
    name: {
      type: 'string',
      minLength: 3
    }
  }
}

expect(schema, 'custom flag').to.be.validJsonSchema
expect({ type: '__invalid__' }, 'custom flag').to.not.be.validJsonSchema

assert.validJsonSchema(schema, 'custom flag')
assert.notValidJsonSchema({ type: '__invalid__' }, 'custom flag')

----------------------------------------

TITLE: Using Custom Tolerance in Assertions
DESCRIPTION: Examples of using custom tolerance values in individual assertions

LANGUAGE: javascript
CODE:
expect(10).to.be.almost(15, 10)                   // passes
expect([4, 2, 5]).to.be.deep.almost([3, 4, 7], 3) // passes

----------------------------------------

TITLE: Installing Chai Almost Plugin
DESCRIPTION: NPM installation command for the chai-almost plugin

LANGUAGE: bash
CODE:
npm install chai-almost --save-dev

----------------------------------------

TITLE: Customizing Output Promises in Chai as Promised
DESCRIPTION: Demonstrates how to customize the output promises by overriding the transferPromiseness function.

LANGUAGE: javascript
CODE:
chaiAsPromised.transferPromiseness = function (assertion, promise) {
    assertion.then = promise.then.bind(promise); // this is all you get by default
    assertion.finally = promise.finally.bind(promise);
    assertion.done = promise.done.bind(promise);
};

----------------------------------------

TITLE: Listing Available Type Assertions
DESCRIPTION: Shows how to get a list of all available type assertions provided by the plugin

LANGUAGE: typescript
CODE:
console.log(ChaiPluginAssertType.list());
/*
[ 'array',
  'boolean',
  'date',
  'float',
  'function',
  'integer',
  'null',
  'number',
  'object',
  'regexp',
  'string',
  'undefined' ]
*/

----------------------------------------

TITLE: Selecting DOM Elements with CSS Selectors in Chai WebDriver Promised
DESCRIPTION: Shows how to use CSS selectors to target DOM elements for assertions.

LANGUAGE: javascript
CODE:
expect('.list')
expect('div > h1')
expect('a[href=http://google.com]')

----------------------------------------

TITLE: Configuring Webpack for Enzyme compatibility with Karma
DESCRIPTION: Provides Webpack configuration to resolve issues when using Enzyme with Karma. It sets up externals, resolves aliases, and configures module parsing.

LANGUAGE: js
CODE:
externals: {
  jsdom: "window",
  cheerio: "window",
  "react/lib/ExecutionEnvironment": true,
  "react/lib/ReactContext": true
},
resolve: {
  alias: {
    sinon: require.resolve("sinon/pkg/sinon")
  }
},
module: {
  noParse: [
    /node_modules\/sinon\//
  ]
}

----------------------------------------

TITLE: Initializing Chai Files Plugin
DESCRIPTION: Setup code to import and configure chai-files plugin with Chai assertion library.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiFiles = require('chai-files');

chai.use(chaiFiles);

var expect = chai.expect;
var file = chaiFiles.file;
var dir = chaiFiles.dir;

----------------------------------------

TITLE: Installing chai-match via NPM
DESCRIPTION: Command to install the chai-match plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
npm i --save-dev chai-match

----------------------------------------

TITLE: Basic Nock Request Assertion Example
DESCRIPTION: Demonstrates the traditional way of asserting Nock requests using manual event handling.

LANGUAGE: javascript
CODE:
const nockedRequest = nock('http://some-url');

nockedRequest.on('request', function(req, interceptor, body) {
  expect(body).to.deep.equal({ hello: 'world' });
});

----------------------------------------

TITLE: Configuring chai-roughly-v2 Plugin
DESCRIPTION: Code to import and configure the chai-roughly-v2 plugin with the Chai assertion library.

LANGUAGE: javascript
CODE:
const chai = require('chai');

chai.use(require('chai-roughly-v2'));

----------------------------------------

TITLE: Using chai-withintoleranceof for Numeric Assertions in JavaScript
DESCRIPTION: Demonstrates various use cases of the chai-withintoleranceof plugin, including asserting numbers within percentage-based tolerance ranges, handling positive and negative tolerances, and using it with array lengths.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var expect = chai.expect;

chai.use(require('chai-withintoleranceof'));

// check that 515 is within tolerance of 500 +/- 5% (475 .. 525)
expect(515).to.be.withinToleranceOf(500, 0.05);

// check that 786 is within tolerance of 1000 +30% / -70% (300 .. 1300)
expect(786).to.be.withinToleranceOf(1000, [+0.3, -0.7]);
expect(786).to.be.withinToleranceOf(1000, [-0.7, +0.3]);

// check that 400 is within tolerance of 350 +15% (350 .. 402.5)
expect(400).to.be.withinToleranceOf(350, [+0.15]);

// check that 500 is within tolerance of 555 -37% (349.65 .. 555)
expect(500).to.be.withinToleranceOf(555, [-0.37]);

// check that -645 is within tolerance of -1000 +30% / -70% (-1300 .. -300)
expect(-645).to.be.withinToleranceOf(-1000, [+0.3, -0.7]);
expect(-645).to.be.withinToleranceOf(-1000, [-0.7, +0.3]);

// Can also be used in conjunction with `length`
// check that the length of 'foo' is within tolerance of 2 +/- 50% (1 .. 3)
expect('foo').to.have.length.withinToleranceOf(2, 0.5);

// check that the length of the array is within tolerance of
// 2 +50% / -40% (1.2 .. 3)
expect([ 1, 2, 3 ]).to.have.length.withinToleranceOf(2, [+0.5, -0.4]);

// There is also an abbreviated form
expect(786).to.be.withinTolOf(1000, [+0.3, -0.7]);

----------------------------------------

TITLE: Importing chai-exclude in ES6
DESCRIPTION: Example of how to import and use the chai-exclude plugin using ES6 import syntax.

LANGUAGE: javascript
CODE:
import chai from 'chai';
import chaiExclude from 'chai-exclude';

chai.use(chaiExclude);

----------------------------------------

TITLE: Retaining Cookies Between Requests in Chai HTTP
DESCRIPTION: Example of using an agent to retain cookies between multiple requests, useful for scenarios like maintaining a login session.

LANGUAGE: javascript
CODE:
var agent = chai.request.agent(app)
agent
  .post('/session')
  .send({ username: 'me', password: '123' })
  .then(function (res) {
    expect(res).to.have.cookie('sessionid');
    return agent.get('/user/me')
      .then(function (res) {
         expect(res).to.have.status(200);
      });
  });

----------------------------------------

TITLE: Using chai-signals in AMD tests
DESCRIPTION: Demonstrates how to use chai-signals in AMD-style tests, including defining dependencies and writing a test case.

LANGUAGE: JavaScript
CODE:
define(['myClass', 'chaiSignals'], function(myClass, chaiSignals) {
	it('should signal completed', function () {
		chai.signals.spyOnSignal(myClass.completed);

		myClass.doSomething();

		expect(myClass.completed).to.have.been.dispatched();
	});
});

----------------------------------------

TITLE: Installing and Using chai-url Plugin in JavaScript
DESCRIPTION: This snippet demonstrates how to require the chai-url plugin and use it with Chai assertions. It shows examples of asserting URL path and protocol.

LANGUAGE: javascript
CODE:
const chai = require('chai');
chai.use(require('chai-url'));

chai.expect('http://example.com/foo/bar').to.have.path('/foo/bar');
chai.expect('http://example.com/foo/bar').to.have.protocol('http');

----------------------------------------

TITLE: Installing chai-bn via npm
DESCRIPTION: Command to install the chai-bn package as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-bn

----------------------------------------

TITLE: Yield Assertion Examples - JavaScript
DESCRIPTION: Demonstrates various ways to use the yield assertion with expect, should, and assert syntax.

LANGUAGE: javascript
CODE:
expect(generator).to.yield()
expect(generator).to.yield(1)
expect(generator).not.to.yield('missing')
expect(generator.next(10)).to.yield(10)

generator.should.yield()
generator.should.yield(1)
generator.should.not.yield('missing')
generator.next(10).should.yield(10)

assert.yield(generator, 1)
assert.notYield(generator, 'missing')
assert.yield(generator.next(10), 10)

----------------------------------------

TITLE: Matching Elements with Selectors in Chai-DOM
DESCRIPTION: Demonstrates the use of the 'match' assertion to check if elements match a given CSS selector.

LANGUAGE: javascript
CODE:
document.querySelectorAll('input').should.match('[name="bar"]')
expect(document.getElementById('empty')).to.match('.disabled')

----------------------------------------

TITLE: Custom Error Messages with dirty-chai
DESCRIPTION: Shows how to use custom error messages with dirty-chai assertions in different chain positions

LANGUAGE: javascript
CODE:
expect(true).to.be.true.and.not.false('Reason: Paradox');
expect(true).to.be.true('The fabric of logic has torn').and.not.false();

----------------------------------------

TITLE: Installing deep-equal-in-any-order Plugin for Chai
DESCRIPTION: Commands to install the deep-equal-in-any-order plugin using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm i --save deep-equal-in-any-order

LANGUAGE: bash
CODE:
yarn add deep-equal-in-any-order

----------------------------------------

TITLE: Non-numeric Almost Equality Examples
DESCRIPTION: Examples showing how almost-equal assertions handle non-numeric values

LANGUAGE: javascript
CODE:
expect('taco').to.almost.equal('taco');   // still passes
expect({ x: 5 }).to.be.almost({ x: 5 });  // still fails (shallow equality)
expect(['tacos', 2, 3]).to.be.deep.almost(['burritos', 2, 2.9999999]); // still fails

----------------------------------------

TITLE: Customizing fixture directory for chai-jscodeshift in JavaScript
DESCRIPTION: This snippet shows how to customize the fixture directory used by chai-jscodeshift.

LANGUAGE: javascript
CODE:
import path from 'path';

chai.use(chaiJSCodeShift({
  fixtureDirectory: path.join(__dirname, 'fixtures')
}));

----------------------------------------

TITLE: Using Spy Sandboxes
DESCRIPTION: Example of using spy sandboxes for tracking and restoring original methods in testing scenarios

LANGUAGE: javascript
CODE:
const sandbox = chai.spy.sandbox();

describe('Array', () => {
  let array;

  beforeEach(() => {
    array = [];
    sandbox.on(array, ['push', 'pop']);
  });

  afterEach(() => {
    sandbox.restore(); // restores original methods on `array`
  })

  it('allows to add items', () => {
    array.push(1);

    expect(array.push).to.have.been.called.with(1);
  });
});

----------------------------------------

TITLE: Using Spy Sandboxes
DESCRIPTION: Example of using spy sandboxes for tracking and restoring original methods in testing scenarios

LANGUAGE: javascript
CODE:
const sandbox = chai.spy.sandbox();

describe('Array', () => {
  let array;

  beforeEach(() => {
    array = [];
    sandbox.on(array, ['push', 'pop']);
  });

  afterEach(() => {
    sandbox.restore(); // restores original methods on `array`
  })

  it('allows to add items', () => {
    array.push(1);

    expect(array.push).to.have.been.called.with(1);
  });
});

----------------------------------------

TITLE: Installing Chai JSON Schema AJV Plugin
DESCRIPTION: Commands for installing the required dependencies including ajv and chai-json-schema-ajv plugin

LANGUAGE: sh
CODE:
npm i ajv --save-dev # Or any version you prefer `npm i ajv@4 --save-dev`
npm i chai-json-schema-ajv --save-dev

----------------------------------------

TITLE: Node.js Plugin Setup
DESCRIPTION: Shows how to include and initialize the chai-change plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
const chai = require('chai');

chai.use(require('chai-change'));

----------------------------------------

TITLE: Using Almost Equal Assertion
DESCRIPTION: Shows how to use the almost.equal assertion for comparing numbers with specified precision

LANGUAGE: javascript
CODE:
expect(3.1415).to.almost.equal(3.14159, 3);
assert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');

----------------------------------------

TITLE: Using dirty-chai with sinon-chai
DESCRIPTION: Example of how dirty-chai affects other Chai plugins like sinon-chai. It shows how property assertions from other plugins are converted to method assertions.

LANGUAGE: javascript
CODE:
spy.should.have.been.called();
spy.should.have.been.calledOnce();
spy.should.have.been.calledTwice();

----------------------------------------

TITLE: Using Mean Assertions
DESCRIPTION: Demonstrates how to use mean assertions to test the average of an array of numbers

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3 ]).to.have.mean.equal(2);
expect([ 1, 2, 3 ]).to.have.mean.above(1.5);
expect([ 1, 2, 3 ]).to.have.mean.below(2.5);

----------------------------------------

TITLE: Testing IPv6 Address Validation
DESCRIPTION: Examples of asserting valid IPv6 addresses using the .ipv6 assertion.

LANGUAGE: javascript
CODE:
expect('127.0.0.1').to.not.be.an.ipv6;
expect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ipv6;

----------------------------------------

TITLE: Source File Implementation
DESCRIPTION: Example source file containing function to be tested

LANGUAGE: javascript
CODE:
export function test() {
  return "Snapshot Test";
}

----------------------------------------

TITLE: Additional Optimisation Testing Options
DESCRIPTION: Examples of other optimisation states that can be tested using chai-v8-optimisation.

LANGUAGE: JavaScript
CODE:
expect(fn).optimisation("always");  // always-optimised
expect(fn).optimisation("never");   // never-optimised
expect(fn).optimisation("maybe");   // maybe-deoptimised

----------------------------------------

TITLE: Installing chai-sip via NPM
DESCRIPTION: Command to install the chai-sip plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
$ npm install chai-sip --save

----------------------------------------

TITLE: Installing chai-json via npm
DESCRIPTION: Command to install the chai-json plugin using npm package manager

LANGUAGE: bash
CODE:
$ npm install chai-json

----------------------------------------

TITLE: Using jsonFile assertion
DESCRIPTION: Example of using the jsonFile assertion to verify a file is valid JSON

LANGUAGE: javascript
CODE:
expect(testFile).to.be.a.jsonFile();

----------------------------------------

TITLE: Asserting Response Body with Node Fetch Response Matchers in JavaScript
DESCRIPTION: Demonstrates how to assert the response body content using the node-fetch-response-matchers plugin, specifically checking for an object in the body.

LANGUAGE: javascript
CODE:
it('have body object', () => {
  return expect(fetch('http://localhost/').to.haveBodyObject({foo: 'bar'});
});

----------------------------------------

TITLE: Initializing Jest-Kefir Extensions
DESCRIPTION: Code to initialize jest-kefir by creating extensions and registering them with Jest

LANGUAGE: javascript
CODE:
const {extensions, activate, send, stream, prop, pool} = chaiKefir(Kefir)
expect.extend(extensions)

----------------------------------------

TITLE: Testing Empty Arrays with Chai Increasing
DESCRIPTION: Demonstrates that empty arrays are considered both increasing and decreasing (vacuous truth).

LANGUAGE: javascript
CODE:
expect([]).to.be.increasing;
expect([]).to.be.decreasing;
expect([]).to.be.strictly.increasing;
expect([]).to.be.strictly.decreasing;

----------------------------------------

TITLE: Basic Image Assertion in TypeScript
DESCRIPTION: Simple example of using the chai-image assertion to compare two images

LANGUAGE: typescript
CODE:
expect(bufImage).to.matchImage(bufExpectedImage);

----------------------------------------

TITLE: And Chaining Example
DESCRIPTION: Demonstrates using 'and' to chain multiple assertions.

LANGUAGE: javascript
CODE:
obj = { foo: { bar: '' },
        baz: { qux: 11 } }

obj.should.have.foo.bar.with.a('string')
           .and.baz.qux.eq(11)

----------------------------------------

TITLE: Installing chai-assertions-count
DESCRIPTION: Shows the npm and yarn commands to install the plugin as a development dependency.

LANGUAGE: shell
CODE:
npm i -D chai-assertions-count

LANGUAGE: shell
CODE:
yarn add -D chai-assertions-count

----------------------------------------

TITLE: Deep Object Comparison with Chai-Like
DESCRIPTION: Shows how to compare nested objects while ignoring unspecified properties at any level.

LANGUAGE: javascript
CODE:
var object = {
  id: 1,
  name: 'test',
  product: {
    id: 1,
    name: 'product'
  },
  updatedAt: 'now'
};
object.should.like({
  name: 'test',
  product: {
    name: 'product'
  }
});
object.should.not.like({
  name: 'test',
  product: {
    name: 'product1'
  }
});

----------------------------------------

TITLE: Without Negation Example
DESCRIPTION: Shows how to use 'without' for negative assertions.

LANGUAGE: javascript
CODE:
obj = { foo: {} }

obj.should.have.foo.without.bar

----------------------------------------

TITLE: Chai Assert Integration Example
DESCRIPTION: Shows how to integrate Sinon assertions with Chai's assert interface.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var sinon = require("sinon");

sinon.assert.expose(chai.assert, { prefix: "" });

----------------------------------------

TITLE: Server Integration - JavaScript
DESCRIPTION: How to require and use chai-string plugin in Node.js environment

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-string'));

----------------------------------------

TITLE: Installing chai-ip with npm
DESCRIPTION: Command to install the chai-ip package using npm package manager.

LANGUAGE: bash
CODE:
$ npm install chai-ip

----------------------------------------

TITLE: Using Chai-DOM with AMD
DESCRIPTION: Shows how to load and use chai-dom in an AMD (Asynchronous Module Definition) environment.

LANGUAGE: javascript
CODE:
require(['chai', 'chai-dom'], function(chai, chaiDom) {
  chai.use(chaiDom)
})

----------------------------------------

TITLE: Asserting Value Increases and Decreases with chai-changes in CoffeeScript
DESCRIPTION: Examples of using 'increase' and 'decrease' assertions to check if a value increases or decreases.

LANGUAGE: coffeescript
CODE:
result = 0
expect(-> result).to.increase.when -> result += 1
expect(-> result).not.to.increase.when -> result
expect(-> result).not.to.increase.when -> result -= 1

LANGUAGE: coffeescript
CODE:
result = 0
expect(-> result).to.decrease.when -> result -= 1
expect(-> result).not.to.decrease.when -> result
expect(-> result).not.to.decrease.when -> result += 1

----------------------------------------

TITLE: Installing chai-doge plugin with npm
DESCRIPTION: Command to install the chai-doge plugin as a dev dependency using npm.

LANGUAGE: bash
CODE:
npm install chai-doge --save-dev

----------------------------------------

TITLE: Setting Up and Using Node Fetch Response Matchers with Chai in JavaScript
DESCRIPTION: Shows how to set up and use the node-fetch-response-matchers plugin with Chai, including importing required modules and writing test cases.

LANGUAGE: javascript
CODE:
const nodeFetchMatchers = require('node-fetch-response-matchers');
const fetch = require('node-fetch');
const chai = require('chai');

chai.use(nodeFetchMatchers);

describe('test suite', function(){
    it('http success test', function(){
        return expect(fetch('http://localhost/')).to.be.successful();
    });
    it('and', function(){
          return expect(fetch('http://localhost/')).to.be.successful()
                                                    .and.haveBodyText('foo');
    });
});

----------------------------------------

TITLE: Node 0.10 Configuration
DESCRIPTION: Specific configuration required for Node.js version 0.10.

LANGUAGE: bash
CODE:
$ echo "--harmony_collections" >> test/mocha.opts

----------------------------------------

TITLE: Using Zombied Chai Assertions in JavaScript
DESCRIPTION: Examples of how to use Zombied Chai assertions compared to standard ZombieJS assertions. This snippet demonstrates the improved readability and chainability of Zombied Chai.

LANGUAGE: javascript
CODE:
browser.assert.status(200)

LANGUAGE: javascript
CODE:
browser.should.have.status(200)
expect(browser).to.have.status(200)

----------------------------------------

TITLE: Initializing chai-uuid plugin
DESCRIPTION: Basic setup to require and initialize the chai-uuid plugin with Chai

LANGUAGE: javascript
CODE:
const chai = require("chai");
chai.use(require('chai-uuid'));

----------------------------------------

TITLE: Initializing Chai-Kefir Plugin
DESCRIPTION: Code to initialize the chai-kefir plugin and extract helper functions

LANGUAGE: javascript
CODE:
const { plugin, activate, send, stream, prop, pool } = chaiKefir(Kefir);
use(plugin);

----------------------------------------

TITLE: Array Equality Assertion in Chai
DESCRIPTION: Demonstrates the equalTo() assertion for comparing array equality.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.equalTo([1, 2, 3]);
expect([1, 2, 3]).not.to.be.equalTo([1, 2, 5]);

----------------------------------------

TITLE: Array Equality Assertion in Chai
DESCRIPTION: Demonstrates the equalTo() assertion for comparing array equality.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.equalTo([1, 2, 3]);
expect([1, 2, 3]).not.to.be.equalTo([1, 2, 5]);

----------------------------------------

TITLE: Installing chai-postman via npm
DESCRIPTION: Command to install the chai-postman plugin as a dev dependency.

LANGUAGE: bash
CODE:
$ npm install chai-postman --save-dev

----------------------------------------

TITLE: Installing Chai Smoothie via npm
DESCRIPTION: Command to install the Chai Smoothie plugin as a dev dependency

LANGUAGE: bash
CODE:
npm install chai-smoothie --save-dev

----------------------------------------

TITLE: Installing chai-fetch with npm
DESCRIPTION: Command to install the chai-fetch plugin as a dev dependency using npm.

LANGUAGE: javascript
CODE:
npm install --save-dev chai-fetch

----------------------------------------

TITLE: Defining a Model Class in JavaScript
DESCRIPTION: Creates a simple Model class with type and attribute storage functionality.

LANGUAGE: javascript
CODE:
function Model (type) {
  this._type = type;
  this._attrs = {};
}

Model.prototype.set = function (key, value) {
  this._attrs[key] = value;
};

Model.prototype.get = function (key) {
  return this._attrs[key];
};

----------------------------------------

TITLE: Initializing Chai Null in Node.js
DESCRIPTION: This code demonstrates how to require and use the Chai Null plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , nil = require('chai-null');

chai.use(nil);

----------------------------------------

TITLE: Initializing Chai Null in Node.js
DESCRIPTION: This code demonstrates how to require and use the Chai Null plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , nil = require('chai-null');

chai.use(nil);

----------------------------------------

TITLE: Custom Plugin Implementation for Chai-Like
DESCRIPTION: Example of extending chai-like with a custom plugin for number-string comparison.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var like = require('chai-like');

var numberStringPlugin = {
  match: function(object) {
    return !isNaN(Number(object));
  },
  assert: function(object, expected) {
    return object === Number(expected);
  }
};
like.extend(numberStringPlugin);

chai.use(like);

----------------------------------------

TITLE: Initializing chai-match-pattern
DESCRIPTION: Setup code for integrating chai-match-pattern with Chai.js and obtaining the extended lodash module

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiMatchPattern = require('chai-match-pattern');
chai.use(chaiMatchPattern);
const _ = chaiMatchPattern.getLodashModule(); // recommend using our lodash extension

----------------------------------------

TITLE: Using Standard Deviation Assertion
DESCRIPTION: Shows how to test the standard deviation of an array of numbers

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3, 4 ]).to.have.deviation.almost.equal(1.290, 2);

----------------------------------------

TITLE: Installing dirty-chai via npm
DESCRIPTION: Command to install the dirty-chai plugin as a dev dependency

LANGUAGE: bash
CODE:
npm install dirty-chai --save-dev

----------------------------------------

TITLE: Installing and Configuring Maybe-Chai Plugin
DESCRIPTION: Shows how to install the maybe-chai plugin via npm and configure it with Chai testing framework.

LANGUAGE: bash
CODE:
npm install maybe-chai --save-dev

LANGUAGE: javascript
CODE:
import chai from 'chai'
import maybeChai from 'maybe-chai'

chai.use( maybeChai() )

----------------------------------------

TITLE: Enabling TypeScript Checking in JavaScript
DESCRIPTION: Shows how to enable TypeScript type checking in a JavaScript file using the @ts-check directive

LANGUAGE: javascript
CODE:
// @ts-check

----------------------------------------

TITLE: Adding a Custom Method to Chai Assertions
DESCRIPTION: Extends Chai with a custom 'model' method to check if an object is a Model of a specific type.

LANGUAGE: javascript
CODE:
Assertion.addMethod('model', function (type) {
  const obj = this._obj;

  new Assertion(this._obj).to.be.instanceof(Model);

  this.assert(
      obj._type === type
    , "expected #{this} to be of type #{exp} but got #{act}"
    , "expected #{this} to not be of type #{act}"
    , type        // expected
    , obj._type   // actual
  );
});

----------------------------------------

TITLE: Installing sinon-chai-in-order via npm
DESCRIPTION: This snippet shows the npm command to install the sinon-chai-in-order plugin.

LANGUAGE: bash
CODE:
$ npm install sinon-chai-in-order

----------------------------------------

TITLE: Requiring chai-exclude in JavaScript
DESCRIPTION: Example of how to require and use the chai-exclude plugin in a JavaScript file.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiExclude = require('chai-exclude');

chai.use(chaiExclude);

----------------------------------------

TITLE: Installing and Configuring Chai-fs Plugin
DESCRIPTION: Code showing how to install the chai-fs plugin via npm and configure it with Chai

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-fs'));

----------------------------------------

TITLE: Installing chai-withintoleranceof via npm
DESCRIPTION: Command to install the chai-withintoleranceof plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-withintoleranceof

----------------------------------------

TITLE: Installing chai-fs via NPM
DESCRIPTION: Command to install the chai-fs plugin using npm package manager

LANGUAGE: shell
CODE:
$ npm install chai-fs

----------------------------------------

TITLE: Filtering Signals with a Matching Function
DESCRIPTION: Shows how to use a matching function to filter which signal dispatches are registered by the spy.

LANGUAGE: JavaScript
CODE:
var signal = new signals.Signal();
var signalSpy = chai.signals.spyOnSignal(signal).matching(function (dispatchInfo) {
	return dispatchInfo !== null;
});
signal.dispatch();  // ignored
signal.dispatch(5); // registered

----------------------------------------

TITLE: Including Chai-Luxon in Browser
DESCRIPTION: Shows how to include chai-luxon plugin in browser-side JavaScript after loading chai and luxon dependencies

LANGUAGE: html
CODE:
<script src="luxon.js"></script>
<script src="chai.js"></script>
<script src="chai-luxon.js"></script>

----------------------------------------

TITLE: Building Chai Browser Package
DESCRIPTION: Command to rebuild the browser package after making changes to Chai components

LANGUAGE: shell
CODE:
$ make

----------------------------------------

TITLE: Installing Chai-DOM via Bower
DESCRIPTION: Shows the Bower command to install the chai-dom package.

LANGUAGE: bash
CODE:
bower install chai-dom

----------------------------------------

TITLE: Including chai-immutable in Browser
DESCRIPTION: HTML script tag for including chai-immutable in browser environments.

LANGUAGE: html
CODE:
<script src="chai-immutable.js"></script>

----------------------------------------

TITLE: Including Chai Null in HTML
DESCRIPTION: This snippet shows how to include the Chai Null plugin in an HTML file after including Chai.js.

LANGUAGE: html
CODE:
<script src="chai-null.js"></script>

----------------------------------------

TITLE: Node.js Setup - JavaScript
DESCRIPTION: Shows how to set up chai-generator plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
chai.use(require('chai-generator'))

----------------------------------------

TITLE: Installing chai-param via npm
DESCRIPTION: Command to install the chai-param package using npm package manager

LANGUAGE: bash
CODE:
npm install chai-param

----------------------------------------

TITLE: Including chai-moment-string in Browser Environment
DESCRIPTION: Shows how to include the chai-moment-string plugin in a browser environment using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-moment-string.js"></script>

----------------------------------------

TITLE: Adding Custom Type Support
DESCRIPTION: Shows how to add support for custom types using the addType API.

LANGUAGE: javascript
CODE:
const chaiBetterShallowDeepEqual = require("chai-better-shallow-deep-equal");

chaiBetterShallowDeepEqual.addType({
  name: "CustomDate",
  base: "date",
  identify: obj => obj && obj._isCustomDate
});

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the test suite documentation page, specifying the title, layout, weight and permalink.

LANGUAGE: yaml
CODE:
---
  title: Online Test Suite
  layout: test
  weight: 35
  permalink: /api/test/
---

----------------------------------------

TITLE: Using chai-immutable with Other Plugins
DESCRIPTION: Example showing proper loading order when using chai-immutable with other Chai plugins.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiAsPromised = require('chai-as-promised');
const chaiImmutable = require('chai-immutable');
const dirtyChai = require('dirty-chai');
const { expect } = chai;

chai.use(chaiImmutable);
chai.use(chaiAsPromised);
chai.use(dirtyChai);

const { List } = require('immutable');

/* ... */

expect(Promise.resolve(List.of(1, 2, 3))).to.eventually.have.size(3);
expect(true).to.be.true();

----------------------------------------

TITLE: Installing chai-interface via npm
DESCRIPTION: Command to install the chai-interface plugin using npm package manager.

LANGUAGE: bash
CODE:
$ npm install chai-interface

----------------------------------------

TITLE: RequestedWith Assertion Example
DESCRIPTION: Shows how to assert that a request was made with a specific body payload.

LANGUAGE: javascript
CODE:
it('requestedWith', () => {
  const requestNock = nock('http://bbc.co.uk')
    .get('/')
    .reply(200);

  request({
    json: true,
    uri: 'http://bbc.co.uk',
    body: {
      hello: 'world'
    }
  });

  return expect(requestNock).to.have.been.requestedWith({ hello: 'world' });
});

----------------------------------------

TITLE: Chai Image Plugin Installation
DESCRIPTION: Command to install the chai-image plugin using npm

LANGUAGE: bash
CODE:
$ npm install chai-image --save-dev

----------------------------------------

TITLE: Asserting jQuery element disabled state with chai-jquery
DESCRIPTION: Illustrates how to use chai-jquery to assert that jQuery objects are disabled using the 'disabled' assertion.

LANGUAGE: javascript
CODE:
$('.disabled').should.be.disabled;
expect($('input')).not.to.be.disabled;

----------------------------------------

TITLE: Including chai-json-schema in HTML
DESCRIPTION: HTML script tags to include the necessary dependencies and chai-json-schema for browser-side usage.

LANGUAGE: html
CODE:
<script src="jsonpointer.js"></script>
<script src="tv4.js"></script>
<script src="chai.js"></script>
<script src="chai-json-schema.js"></script>

----------------------------------------

TITLE: Installing Sinon-Chai in Node.js
DESCRIPTION: Code snippet showing how to install and use Sinon-Chai in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var sinonChai = require("sinon-chai");

chai.use(sinonChai);

----------------------------------------

TITLE: Installing chai-fs via npm
DESCRIPTION: Command to install the chai-fs plugin using npm

LANGUAGE: bash
CODE:
$ npm install chai-fs

----------------------------------------

TITLE: Using ContainSubset with Arrays
DESCRIPTION: Shows how to use containSubset with arrays and the should assertion interface

LANGUAGE: javascript
CODE:
var list = [{a: 'a', b: 'b'}, {v: 'f', d: {z: 'g'}}];

list.should.containSubset([{a:'a'}]); //Assertion error is not thrown
list.should.containSubset([{a:'a',  b: 'b'}]); //Assertion error is not thrown

list.should.containSubset([{a:'a', b: 'bd'}]);

----------------------------------------

TITLE: Installing Chai-Like with NPM
DESCRIPTION: Command to install chai-like as a development dependency using npm package manager.

LANGUAGE: bash
CODE:
npm install --save-dev chai-like

----------------------------------------

TITLE: Setting Verbose Logging for Debugging
DESCRIPTION: Environment variable configuration to enable verbose logging for troubleshooting test execution.

LANGUAGE: bash
CODE:
$ export LOG_LEVEL=verbose

----------------------------------------

TITLE: Importing chai-rx with ES6
DESCRIPTION: Demonstrates how to import and setup chai-rx using ES6 module syntax.

LANGUAGE: javascript
CODE:
import chai from 'chai';
import chaiRx from 'chai-rx';

chai.use(chaiRx);

----------------------------------------

TITLE: Installing Jest-Kefir Package
DESCRIPTION: Command to install jest-kefir as a dev dependency using npm

LANGUAGE: bash
CODE:
npm i --save-dev jest-kefir

----------------------------------------

TITLE: Browser Setup for chai-eventemitter
DESCRIPTION: Installation and setup instructions for using chai-eventemitter in browser environments.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-eventemitter.js"></script>

----------------------------------------

TITLE: Array Element Containment Assertion in Chai with chai-arrays
DESCRIPTION: Illustrates the use of containing() assertion to check if an array contains a specific element.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containing(1);
expect([1, 2, 3]).not.to.be.containing(5);

----------------------------------------

TITLE: Installing Chai Things via NPM
DESCRIPTION: Command to install the chai-things plugin using npm package manager.

LANGUAGE: bash
CODE:
$ npm install chai-things

----------------------------------------

TITLE: Using Chai-Fuzzy Like Matcher with Objects
DESCRIPTION: Examples of using the 'like' matcher to compare object attributes and values rather than references.

LANGUAGE: javascript
CODE:
var subject = {a: 'a'};
subject.should.be.like({a: 'a'});
subject.should.not.be.like({x: 'x'});
subject.should.not.be.like({a: 'a', b: 'b'});

expect(subject).to.be.like({a: 'a'});
expect(subject).not.to.be.like({x: 'x'});
expect(subject).not.to.be.like({a: 'a', b: 'b'});

assert.like(subject, {a: 'a'});
assert.notLike(subject, {x: 'x'});
assert.notLike(subject, {a: 'a', b: 'b'});

----------------------------------------

TITLE: Installing chai-jest-mocks via npm
DESCRIPTION: Command to install the chai-jest-mocks package as a development dependency using npm.

LANGUAGE: bash
CODE:
$ npm install --save-dev chai-jest-mocks

----------------------------------------

TITLE: Configuring Custom AJV Options
DESCRIPTION: Examples showing how to configure the plugin with custom options and reuse AJV instances

LANGUAGE: javascript
CODE:
const ajv = new Ajv
chai.use(
  require('chai-json-schema-ajv').create({
    ajv
  })
)
assert.ok(ajv === chai.ajv)

// Accessing AJV instance
chai.use(
  require('chai-json-schema-ajv')
)
assert.ok(chai.ajv instanceof Ajv)

----------------------------------------

TITLE: Importing and Setting up chai-ip Plugin
DESCRIPTION: Code to import and initialize the chai-ip plugin with Chai's use method.

LANGUAGE: javascript
CODE:
import { use } from 'chai';
import ip from 'chai-ip';

use(ip);

----------------------------------------

TITLE: Multiple Promise Assertions with Chai as Promised
DESCRIPTION: Shows how to perform assertions on multiple promises using Promise.all with Chai as Promised.

LANGUAGE: javascript
CODE:
it("should all be well", function () {
    return Promise.all([
        promiseA.should.become("happy"),
        promiseB.should.eventually.have.property("fun times"),
        promiseC.should.be.rejectedWith(TypeError, "only joyful types are allowed")
    ]);
});

----------------------------------------

TITLE: Running Tests with NPM
DESCRIPTION: Command to execute the test suite after installing dependencies using npm. Requires Node.js to be installed on the system.

LANGUAGE: shell
CODE:
npm test

----------------------------------------

TITLE: Array Any Element Containment Assertion in Chai with chai-arrays
DESCRIPTION: Shows the usage of containingAnyOf() to check if an array contains any of the specified elements.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containingAnyOf([1]);
expect([1, 2, 3]).to.be.containingAnyOf([6, 7, 3, 5]);
expect([1, 2, 3]).to.be.containingAnyOf([1, 2, 3]);

----------------------------------------

TITLE: Importing and using chai-sorted in Node.js
DESCRIPTION: Example of how to require and use the chai-sorted plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai"),
    expect = chai.expect; // preference and tested with expect

chai.use(require("chai-sorted"));

----------------------------------------

TITLE: Asserting jQuery element selected state with chai-jquery
DESCRIPTION: Illustrates how to use chai-jquery to assert that jQuery objects are selected using the 'selected' assertion.

LANGUAGE: javascript
CODE:
$('option').should.be.selected;
expect($('option')).not.to.be.selected;

----------------------------------------

TITLE: Installing chai-match-pattern
DESCRIPTION: Commands for installing the chai-match-pattern package using npm or yarn package managers

LANGUAGE: bash
CODE:
# with npm
npm install chai-match-pattern --save-dev
# or with yarn
yarn add --dev chai-match-pattern

----------------------------------------

TITLE: Equals Operator Example
DESCRIPTION: Demonstrates using the equals operator for assertions.

LANGUAGE: javascript
CODE:
obj = { foo: { bar: 'baz' } }

obj.should.have.foo.bar= 'baz'

----------------------------------------

TITLE: Installing and Configuring ChaId Plugin
DESCRIPTION: Shows how to install the plugin via npm and configure it with Chai.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaid = require('chaid');

chai.use(chaid);

----------------------------------------

TITLE: Importing ChaiRx in ES6 JavaScript
DESCRIPTION: This snippet demonstrates how to import and use ChaiRx in an ES6 environment.

LANGUAGE: javascript
CODE:
import chai from 'chai';
import chaiRx from 'chai-rx';

chai.use(chaiRx);

----------------------------------------

TITLE: Using chai-bn property assertions in JavaScript
DESCRIPTION: Examples of using chai-bn property assertions to check for negative numbers and zero values.

LANGUAGE: javascript
CODE:
(new BN('-100')).should.be.a.bignumber.that.is.negative;
expect(new BN('1').sub(new BN('1'))).to.be.a.bignumber.that.is.zero;

----------------------------------------

TITLE: Installing Chai HTTP Plugin with npm
DESCRIPTION: Command to install the Chai HTTP plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install chai-http

----------------------------------------

TITLE: Setting up Zombied Chai in JavaScript
DESCRIPTION: Code snippet showing how to set up Zombied Chai in a specHelper.js file. It demonstrates loading the required modules and configuring Chai to use the Zombied Chai plugin.

LANGUAGE: javascript
CODE:
'use strict'

var chai = require('chai')
var zombiedChai = require('zombied-chai')

chai.should()
chai.use(zombiedChai)

----------------------------------------

TITLE: Using Chai-DOM with CommonJS
DESCRIPTION: Demonstrates how to require and use chai-dom in a CommonJS environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
chai.use(require('chai-dom'))

----------------------------------------

TITLE: Creating a Null Object from a Class
DESCRIPTION: This snippet demonstrates how to create a null object based on a given class, where all properties and methods will return null.

LANGUAGE: javascript
CODE:
var nullobject = chai.Null(Klass).create();

----------------------------------------

TITLE: Installing chai-json-schema with npm
DESCRIPTION: Command to install the chai-json-schema plugin using npm for server-side usage.

LANGUAGE: bash
CODE:
$ npm install chai-json-schema

----------------------------------------

TITLE: Installing chai-immutable via Package Managers
DESCRIPTION: Commands to install the chai-immutable plugin using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install --save-dev chai-immutable
yarn add --dev chai-immutable

----------------------------------------

TITLE: Creating a Null Object from a Class
DESCRIPTION: This snippet demonstrates how to create a null object based on a given class, where all properties and methods will return null.

LANGUAGE: javascript
CODE:
var nullobject = chai.Null(Klass).create();

----------------------------------------

TITLE: Comparing Two Files
DESCRIPTION: Examples of comparing contents between two different files.

LANGUAGE: javascript
CODE:
expect(file('foo.txt')).to.equal(file('foo-copy.txt'));
expect(file('foo.txt')).to.not.equal(file('bar.txt'));

----------------------------------------

TITLE: Including Chai-Fuzzy in Browser
DESCRIPTION: Shows how to include the chai-fuzzy plugin in a browser environment after loading chai and underscore dependencies.

LANGUAGE: html
CODE:
<script src="underscore.js"></script>
<script src="chai.js"></script>
<script src="chai-fuzzy.js"></script>

----------------------------------------

TITLE: Node.js Setup Example
DESCRIPTION: Shows how to set up chai-iterator in a Node.js environment

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiIterator = require('chai-iterator');

chai.use(chaiIterator);

----------------------------------------

TITLE: Demonstrating Traditional Sinon-Chai Assertions in JavaScript
DESCRIPTION: This snippet shows the awkward way of asserting multiple spy calls in order using traditional Sinon-Chai assertions.

LANGUAGE: javascript
CODE:
var spy = sinon.spy();
[1, 2, 3].forEach(spy);
expect(spy.getCall(0).args[0]).to.equal(1);
expect(spy.getCall(1).args[0]).to.equal(2);
expect(spy.getCall(2).args[0]).to.equal(3);

----------------------------------------

TITLE: AfterDateTime Assertion Examples
DESCRIPTION: Shows how to use afterDateTime assertion with different assertion styles and granularity options

LANGUAGE: javascript
CODE:
var dateString = '2020-04-21',
  oneDayLater = '2020-04-22';

// using should-style assertions
oneDayLater.should.be.afterDateTime(luxonDateTime);
oneDayLater.should.be.afterDateTime(luxonDateTime, 'month'); // fails

// using expect-style assertions
expect(oneDayLater).to.be.afterDateTime(luxonDateTime);
expect(oneDayLater).to.be.afterDateTime(luxonDateTime, 'month'); // fails

// using tdd assertions
assert.afterDateTime(oneDayLater, luxonDateTime);
assert.afterDateTime(oneDayLater, luxonDateTime, 'month'); // fails
assert.afterDateTime(oneDayLater, luxonDateTime, 'month', 'custom error message'); // fails
assert.afterDateTime(oneDayLater, luxonDateTime, 'custom error message');

----------------------------------------

TITLE: Installing chai-signals with npm
DESCRIPTION: Command to install the chai-signals plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install chai-signals

----------------------------------------

TITLE: Including Chai-Spies in Browser
DESCRIPTION: HTML script tag for including the chai-spies plugin in browser environments after chai.js

LANGUAGE: xml
CODE:
<script src="chai-spies.js"></script>

----------------------------------------

TITLE: Installing chai-by-proxy
DESCRIPTION: Basic installation command for the chai-by-proxy plugin using npm.

LANGUAGE: bash
CODE:
$ npm install --save-dev chai-by-proxy

----------------------------------------

TITLE: Installing chai-arrays via npm
DESCRIPTION: Command to install the chai-arrays plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install chai-arrays

----------------------------------------

TITLE: Including Chai-Spies in Browser
DESCRIPTION: HTML script tag for including the chai-spies plugin in browser environments after chai.js

LANGUAGE: xml
CODE:
<script src="chai-spies.js"></script>

----------------------------------------

TITLE: Using chai-match capture assertions
DESCRIPTION: Example usage of the .capture() assertion method to test specific capture groups from regular expression matches.

LANGUAGE: javascript
CODE:
expect('some thing to test').to.match(/some (\w+) to test/).and.capture(0).equals('thing');
'Here in London'.should.match(/(here|there) in (\w+)/i).and.capture(1).equals('London');

----------------------------------------

TITLE: Importing chai-rx with AMD
DESCRIPTION: Shows how to import and setup chai-rx using AMD module syntax.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiRx = require('chai-rx');

chai.use(chaiRx);

----------------------------------------

TITLE: Basic Sinon.JS Assertion Example
DESCRIPTION: Traditional Sinon.JS assertion syntax example showing spy verification.

LANGUAGE: javascript
CODE:
sinon.assert.calledWith(mySpy, "foo");

----------------------------------------

TITLE: Installing chai-arrays via npm
DESCRIPTION: Command to install the chai-arrays plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install chai-arrays

----------------------------------------

TITLE: Server-side Chai-Luxon Setup
DESCRIPTION: Demonstrates how to configure chai to use the chai-luxon plugin in Node.js environment

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-luxon'));

----------------------------------------

TITLE: Installing Chai-Kefir with npm
DESCRIPTION: Command to install chai-kefir as a dev dependency using npm

LANGUAGE: bash
CODE:
npm i --save-dev chai-kefir

----------------------------------------

TITLE: Installing chai-exclude with npm or yarn
DESCRIPTION: Commands to install the chai-exclude plugin using npm or yarn package managers.

LANGUAGE: bash
CODE:
npm install chai-exclude --save-dev

LANGUAGE: bash
CODE:
yarn add chai-exclude --dev

----------------------------------------

TITLE: UUID validation using Chai assert style
DESCRIPTION: Examples of UUID validation using Chai's assert interface for UUID v1 and GUID validation

LANGUAGE: javascript
CODE:
const chai = require("chai");
chai.use(require('chai-uuid'));
const assert = chai.assert;

// validate UUID v1
assert.uuid('bd74c8da-4d9e-11e7-b114-b2f933d5fe66', 'v1');

// validate GUID
assert.guid('bd74c8da-4d9e-11e7-b114-b2f933d5fe66');

----------------------------------------

TITLE: Asserting Element Display and Visibility with Chai-DOM
DESCRIPTION: Shows how to use the 'displayed' and 'visible' assertions to check if elements are visually present on the page.

LANGUAGE: javascript
CODE:
document.querySelector('dl dd').should.be.displayed
expect(document.querySelector('.hidden')).not.to.be.displayed

document.querySelector('dl dd').should.be.visible
expect(document.querySelector('.invisible')).not.to.be.visible

----------------------------------------

TITLE: Sinon-Chai Enhanced Assertions
DESCRIPTION: Improved assertion syntax using Sinon-Chai integration.

LANGUAGE: javascript
CODE:
mySpy.should.have.been.calledWith("foo");
expect(mySpy).to.have.been.calledWith("foo");

----------------------------------------

TITLE: Installing chai-eventemitter2 with Yarn
DESCRIPTION: Command to install the chai-eventemitter2 plugin using Yarn as a development dependency.

LANGUAGE: bash
CODE:
yarn add -D chai-eventemitter2

----------------------------------------

TITLE: Using Chai Checkmark in Tests
DESCRIPTION: Example showing how to use chai-checkmark to track assertions in both synchronous and asynchronous test scenarios.

LANGUAGE: javascript
CODE:
describe("something", function() {
  it("should check two things", function(next) {
    expect(2).checks(next) // <-- pass in the callback

    "sync test".should.be.a("string").mark() // <-- check 1

    setTimeout(function() {
      // check 2, callback is called after the current event finishes
      "async test".should.be.a("string").mark()
    }, 500)
  })
})

----------------------------------------

TITLE: Installing chai-roughly-v2 with npm
DESCRIPTION: Command to install the chai-roughly-v2 package as a development dependency using npm.

LANGUAGE: shell
CODE:
npm install --save-dev chai-roughly-v2

----------------------------------------

TITLE: Node.js Setup for chai-eventemitter
DESCRIPTION: Installation and setup instructions for using chai-eventemitter in Node.js/io.js environments.

LANGUAGE: javascript
CODE:
var chai = require('chai')
chai.use(require('chai-eventemitter'))

----------------------------------------

TITLE: Workaround for length and arguments assertions
DESCRIPTION: Example of a workaround for using length and arguments assertions, which can break when chained after other assertions.

LANGUAGE: javascript
CODE:
myArray.should.exist();
myArray.should.have.length(3);

----------------------------------------

TITLE: Asserting jQuery element enabled state with chai-jquery
DESCRIPTION: Shows how to use chai-jquery to assert that jQuery objects are enabled using the 'enabled' assertion.

LANGUAGE: javascript
CODE:
$('.enabled').should.be.enabled;
expect($('enabled')).to.be.enabled;

----------------------------------------

TITLE: Installing chai-eventemitter2 with NPM
DESCRIPTION: Command to install the chai-eventemitter2 plugin using NPM as a development dependency.

LANGUAGE: bash
CODE:
npm install -D chai-eventemitter2

----------------------------------------

TITLE: Transforming Asserter Arguments in Chai as Promised
DESCRIPTION: Shows how to transform arguments to the asserters, potentially asynchronously, using the transformAsserterArgs function.

LANGUAGE: javascript
CODE:
chaiAsPromised.transformAsserterArgs = function (args) {
    return args.map(function (x) { return x + 1; });
}

Promise.resolve(2).should.eventually.equal(2); // will now fail!
Promise.resolve(3).should.eventually.equal(2); // will now pass!

----------------------------------------

TITLE: Including Chai-DOM Globally
DESCRIPTION: Demonstrates how to include chai-dom in a web page for global use.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-dom.js"></script>

----------------------------------------

TITLE: Asserting Specific Changes with chai-changes in CoffeeScript
DESCRIPTION: Examples of using 'change.by', 'change.from', and 'change.to' assertions to check specific value changes.

LANGUAGE: coffeescript
CODE:
result = 0
(-> result).should.change.by(3).when -> result += 3
expect(-> result).not.to.change.by(-3).when -> result += 1
expect(-> result).to.change.by(-2).when -> result -= 2

LANGUAGE: coffeescript
CODE:
result = ['a', 'b']
(-> result).should.change.from(['a', 'b']).when -> result.push('c')
(-> result).should.change.from(['a', 'b']).to(['a', 'b', 'c']).when -> result.push('c')

LANGUAGE: coffeescript
CODE:
result = ['a', 'b']
(-> result).should.change.to(['a', 'b', 'c']).when -> result.push('c')
(-> result).should.change.from(['a', 'b']).to(['a', 'c']).when -> result = ['a', 'c']

----------------------------------------

TITLE: Installing Chai Spies in Node.js
DESCRIPTION: Shows how to install chai-spies using npm for Node.js projects.

LANGUAGE: bash
CODE:
$ npm install chai-spies

----------------------------------------

TITLE: Development Setup Commands
DESCRIPTION: Command-line instructions for setting up the development environment and running tests for the chai-webdriver project.

LANGUAGE: bash
CODE:
npm install           # download the necessary development dependencies
npm run-script build  # compile coffee-script into javascript
npm test              # build and run the specs

----------------------------------------

TITLE: Using jQuery Attribute Assertions
DESCRIPTION: Examples of using the attr() assertion to check element attributes using jQuery's .attr() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.attr('foo');
expect($('body')).to.have.attr('foo', 'bar');
expect($('body')).to.have.attr('foo').match(/bar/);

----------------------------------------

TITLE: Using chai-parentheses with chai-as-promised
DESCRIPTION: Example of how to properly use chai-parentheses with chai-as-promised, emphasizing the correct order of plugin loading.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");
var parentheses = require("chai-parentheses");


chai.use(chaiAsPromised);
chai.use(parentheses);

----------------------------------------

TITLE: Using deep-equal-in-any-order with Chai Assert Style
DESCRIPTION: Demonstrates how to use the deep-equal-in-any-order plugin with Chai's assert style. It provides examples of asserting equality and inequality for arrays and nested objects.

LANGUAGE: javascript
CODE:
const deepEqualInAnyOrder = require('deep-equal-in-any-order');
const chai = require('chai');

chai.use(deepEqualInAnyOrder);

const { assert } = chai;

assert.deepEqualInAnyOrder([1, 2], [2, 1]);
assert.notDeepEqualInAnyOrder(1, 2], [2, 1, 3]);
assert.deepEqualInAnyOrder({ foo: [1, 2], bar: [4, 89, 22] }, { foo: [2, 1], bar: [4, 22, 89] });
assert.deepEqualInAnyOrder({ foo: ['foo-1', 'foo-2', [1, 2], null ] }, { foo: [null, [1, 2], 'foo-1', 'foo-2'] });
assert.deepEqualInAnyOrder({ foo: [1, 2], bar: { baz: ['a', 'b', { lorem: [5, 6] }] } }, { foo: [2, 1], bar: { baz: ['b', 'a', { lorem: [6, 5] }] } });

----------------------------------------

TITLE: Using jQuery Attribute Assertions
DESCRIPTION: Examples of using the attr() assertion to check element attributes using jQuery's .attr() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.attr('foo');
expect($('body')).to.have.attr('foo', 'bar');
expect($('body')).to.have.attr('foo').match(/bar/);

----------------------------------------

TITLE: Setting up Sinon-Chai with Chai's 'expect' Interface
DESCRIPTION: This example demonstrates how to set up Sinon-Chai with Chai's 'expect' interface. It shows the required module imports, Chai configuration, and usage of Sinon-Chai assertions in a test case.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
var expect = chai.expect;
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        expect(cb).to.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Initializing Chai Almost Plugin
DESCRIPTION: Setup code to import and initialize the chai-almost plugin with default tolerance (1e-6)

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiAlmost = require('chai-almost');

chai.use(chaiAlmost());

----------------------------------------

TITLE: Demonstrating Basic Usage of chai-iterator Assertions in JavaScript
DESCRIPTION: Shows various assertions that can be made using chai-iterator, including checking if an object is iterable, comparing iteration results, and testing iteration length.

LANGUAGE: javascript
CODE:
[2, 3, 5].should.be.iterable;

[2, 3, 5].should.iterate.over([2, 3, 5]);
[2, 3, 5].should.iterate.from([2, 3]);
[2, 3, 5].should.iterate.until([3, 5]);

[2, 3, 5].should.iterate.for.lengthOf(3);
[2, 3, 5].should.iterate.for.length.above(2);
[2, 3, 5].should.iterate.for.length.below(4);
[2, 3, 5].should.iterate.for.length.of.at.least(3);
[2, 3, 5].should.iterate.for.length.of.at.most(3);
[2, 3, 5].should.iterate.for.length.within(2, 4);

[2, 3, 5].should.not.iterate.over([1, 2, 3]);
[{n: 2}, {n: 3}].should.deep.iterate.from([{n: 2}]);

----------------------------------------

TITLE: Installing Chai-SamSam Dependencies
DESCRIPTION: Commands to install the required npm packages for using chai-samsam plugin

LANGUAGE: shell
CODE:
$ npm install --save chai
$ npm install --save chai-samsam

----------------------------------------

TITLE: Demonstrating Basic Usage of chai-iterator Assertions in JavaScript
DESCRIPTION: Shows various assertions that can be made using chai-iterator, including checking if an object is iterable, comparing iteration results, and testing iteration length.

LANGUAGE: javascript
CODE:
[2, 3, 5].should.be.iterable;

[2, 3, 5].should.iterate.over([2, 3, 5]);
[2, 3, 5].should.iterate.from([2, 3]);
[2, 3, 5].should.iterate.until([3, 5]);

[2, 3, 5].should.iterate.for.lengthOf(3);
[2, 3, 5].should.iterate.for.length.above(2);
[2, 3, 5].should.iterate.for.length.below(4);
[2, 3, 5].should.iterate.for.length.of.at.least(3);
[2, 3, 5].should.iterate.for.length.of.at.most(3);
[2, 3, 5].should.iterate.for.length.within(2, 4);

[2, 3, 5].should.not.iterate.over([1, 2, 3]);
[{n: 2}, {n: 3}].should.deep.iterate.from([{n: 2}]);

----------------------------------------

TITLE: Using Jest-Kefir Assertions
DESCRIPTION: Examples of using jest-kefir assertions to test Kefir Observables

LANGUAGE: javascript
CODE:
expect(obs).toEmit([value(1), error(new Error('whoops!')), end()], () => {
  send(obs, [value(1), error(new Error('whoops!')), end()])
})

----------------------------------------

TITLE: Browser Integration HTML Setup
DESCRIPTION: HTML script tags needed to include chai-json-schema and its dependencies in the browser.

LANGUAGE: html
CODE:
<script src="jsonpointer.js"></script>
<script src="tv4.js"></script>
<script src="chai.js"></script>
<script src="chai-json-schema.js"></script>

----------------------------------------

TITLE: Testing EventEmitter Using Spies
DESCRIPTION: Traditional approach using spy-based testing for EventEmitter events and arguments.

LANGUAGE: javascript
CODE:
var spy = sinon.spy()

ee.on('test', spy)
ee.emit('test')
expect(spy).to.have.been.called()

spy.reset()
ee.emit('test', args)
expect(spy).to.have.been.calledWith(args)

----------------------------------------

TITLE: Extending Factories
DESCRIPTION: JavaScript example demonstrating how to extend an existing factory to create a new one with additional properties.

LANGUAGE: javascript
CODE:
var cat = chai.factory('cat', { cute: true, age: 4 });
chai.factory('tiger', cat.extend({ scary: true }));

----------------------------------------

TITLE: Including chai-jquery in HTML
DESCRIPTION: Shows how to include the necessary script files for using chai-jquery in a test file. jQuery and Chai must be included before chai-jquery.

LANGUAGE: html
CODE:
<script src="jquery.js"></script>
<script src="chai.js"></script>
<script src="chai-jquery.js"></script>

----------------------------------------

TITLE: Testing Associated Values with associatedValue Property
DESCRIPTION: Demonstrates how to use the 'associatedValue' property to test the associated value of a Result object. This property must be used after a 'result', 'success', or 'failure' assertion.

LANGUAGE: javascript
CODE:
expect(Success('Success String')).to.be.a.success
  .with.associatedValue.that.equals('Success String') // OK
expect(Success({ a: '423' })).to.be.a.success
  .with.associatedValue.that.deep.equals({ a: '423' }) // OK - equality modifiers accepted
expect(Success({ a: '423' })).to.be.a.failure
  .with.associatedValue.that.deep.equals({ a: '423' }) // FAIL - not a failure
expect(Success({ a: '423' })).to.be.a.result
  .with.associatedValue.that.deep.equals({ a: '423' }) // OK
expect(Success('Success String')).to.have.associatedValue.that.equals('Success String') // FAILS 
// associatedValue must be after either a result, success or failure assertion property

----------------------------------------

TITLE: Installing chai-uuid via npm
DESCRIPTION: Command to install the chai-uuid plugin using npm package manager

LANGUAGE: bash
CODE:
$ npm install chai-uuid

----------------------------------------

TITLE: Setting up Chai-Fireproof Plugin in Gulp Task
DESCRIPTION: This snippet demonstrates how to set up the chai-fireproof plugin in a Gulp task. It loads the necessary dependencies, sets up global variables, and configures the Firebase test environment.

LANGUAGE: javascript
CODE:
gulp.task('test:setup', 'Set up tests.', ['build'], function() {


  var Firebase = require('firebase'),
    chai = require('chai');

  require('./dist/chai-fireproof');
  global.chai = chai;
  global.expect = chai.expect;

  if (!process.env.FIREBASE_TEST_URL || !process.env.FIREBASE_TEST_SECRET) {

    gutil.log('Please set FIREBASE_TEST_URL and FIREBASE_TEST_SECRET.');
    process.exit(1);

  }

  global.root = new Fireproof(new Firebase(process.env.FIREBASE_TEST_URL));
  global.authToken = process.env.FIREBASE_TEST_SECRET;

});

----------------------------------------

TITLE: Installing Chai Stats via Browser Script Tag
DESCRIPTION: Shows how to include the chai-stats plugin in a browser environment using a script tag after loading chai.js

LANGUAGE: xml
CODE:
<script src="chai-stats.js"></script>

----------------------------------------

TITLE: Integrating chai-json-schema with Chai
DESCRIPTION: JavaScript code to integrate the chai-json-schema plugin with the Chai assertion library for server-side usage.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-json-schema'));

----------------------------------------

TITLE: Configuring Chai to use chai-fs
DESCRIPTION: JavaScript code to have Chai use the chai-fs plugin

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-fs'));

----------------------------------------

TITLE: Installing Chai Deep Match Plugin via NPM
DESCRIPTION: Commands to install both the Chai assertion library and the chai-deep-match plugin as project dependencies.

LANGUAGE: shell
CODE:
$ npm install --save chai
$ npm install --save chai-deep-match

----------------------------------------

TITLE: Basic Usage with Reset and Check Methods
DESCRIPTION: Demonstrates how to use the plugin's reset and check methods in a test suite setup.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiAssertionsCount = require('chai-assertions-count');
chai.use(chaiAssertionsCount);

describe('suite #2', () => {
  beforeEach(() => {
    chai.Assertion.resetAssertsCheck();
  });
  afterEach(() => {
    // you don't need both of them
    chai.Assertion.checkAssertionsCount();
    chai.Assertion.checkExpectsCount();
  });
});

----------------------------------------

TITLE: Testing Function Optimisation with Chai
DESCRIPTION: Examples of using chai-v8-optimisation to test if functions are optimised by the V8 engine.

LANGUAGE: JavaScript
CODE:
function fn() {}
expect(fn).optimisation("yes");
expect(fn).optimization("yes"); // american spelling

expect(fn).to.be.optimised;
expect(fn).to.be.optimized;     // american spelling

----------------------------------------

TITLE: Loading Chai-Fireproof Plugin
DESCRIPTION: This snippet shows how to load the chai-fireproof plugin using the Chai use method.

LANGUAGE: javascript
CODE:
chai.use(require('chai-fireproof'));

----------------------------------------

TITLE: Including ChaiRx via Script Tag in HTML
DESCRIPTION: This snippet demonstrates how to include ChaiRx directly in an HTML file using a script tag.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-rx.js"></script>

----------------------------------------

TITLE: Installing bn-chai Package
DESCRIPTION: NPM installation command for the bn-chai package

LANGUAGE: bash
CODE:
npm install -s bn-chai

----------------------------------------

TITLE: Asserting jQuery element emptiness with chai-jquery
DESCRIPTION: Demonstrates how to use chai-jquery to assert that jQuery objects are empty using the 'empty' assertion.

LANGUAGE: javascript
CODE:
$('.empty').should.be.empty;
expect($('body')).not.to.be.empty;

----------------------------------------

TITLE: Initializing Chai Stats in Node.js
DESCRIPTION: Demonstrates how to require and initialize the chai-stats plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiStats = require('chai-stats');

chai.use(chaiStats);

var should = chai.should()
  , expect = chai.expect;

----------------------------------------

TITLE: Using Chai-Fuzzy Like Matcher with Arrays
DESCRIPTION: Examples of using the 'like' matcher to compare array contents.

LANGUAGE: javascript
CODE:
var subject = ['a'];
subject.should.be.like(['a']);
subject.should.not.be.like(['x']);
subject.should.not.be.like(['a', 'b']);

expect(subject).to.be.like(['a']);
expect(subject).not.to.be.like(['x']);
expect(subject).not.to.be.like(['a', 'b']);

assert.like(subject, ['a']);
assert.notLike(subject, ['x']);
assert.notLike(subject, ['a', 'b']);

----------------------------------------

TITLE: Installing chai-retry plugin via npm
DESCRIPTION: Command to install the chai-retry plugin as a dev dependency using npm.

LANGUAGE: ssh
CODE:
npm i --save-dev chai-retry

----------------------------------------

TITLE: Installing chai-sorted via npm
DESCRIPTION: Command to install the chai-sorted plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install chai-sorted

----------------------------------------

TITLE: Array Element Containment Assertion in Chai
DESCRIPTION: Shows how to use the containing() assertion to check if an array contains a specific element.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containing(1);
expect([1, 2, 3]).not.to.be.containing(5);

----------------------------------------

TITLE: Testing Backbone Router Routes with Chai
DESCRIPTION: Shows how to test Backbone router route mappings and argument extraction using chai-backbone route.to assertions.

LANGUAGE: javascript
CODE:
"page/3".should.route.to(myRouter, "openPage", { arguments: ["3"] });
"pages/3".should.not.route.to(myRouter, "openPage");
"page/3".should.route.to(myRouter, "openPage", { considering: [conflictingRouter] });

----------------------------------------

TITLE: Direct Assertion Function Usage
DESCRIPTION: Example demonstrating how to use the built-in assertion functions directly for value validation

LANGUAGE: javascript
CODE:
chai.expect(7.5).isBetween(7, 8);

----------------------------------------

TITLE: Asserting jQuery selector matching with chai-jquery
DESCRIPTION: Illustrates how to use chai-jquery to assert that jQuery objects match a given selector using the 'match' assertion.

LANGUAGE: javascript
CODE:
$('input').should.match('#foo');
expect($('#empty')).to.match(':empty');

----------------------------------------

TITLE: Installing Chai Stats in Browser
DESCRIPTION: Shows how to include the chai-stats plugin in a browser environment using a script tag.

LANGUAGE: xml
CODE:
<script src="chai-stats.js"></script>

----------------------------------------

TITLE: Mixed Type BN.js Comparisons
DESCRIPTION: Demonstrates how bn-chai handles comparisons between BN objects, strings, and numbers

LANGUAGE: javascript
CODE:
expect(new BN('1')).to.eq.BN(new BN('1'));
expect(new BN('1')).to.eq.BN('1');
expect(new BN('1')).to.eq.BN(1);

expect('1').to.eq.BN(new BN('1'));
expect('1').to.eq.BN('1');
expect('1').to.eq.BN(1);

expect(1).to.eq.BN(new BN('1'));
expect(1).to.eq.BN('1');
expect(1).to.eq.BN(1);

----------------------------------------

TITLE: Importing Chai-Kefir with ES Modules
DESCRIPTION: Example showing how to import and set up chai-kefir using ES Modules syntax

LANGUAGE: javascript
CODE:
import Kefir from 'kefir';
import { use } from 'chai';
import chaiKefir from 'chai-kefir';

----------------------------------------

TITLE: Installing chai-counting plugin with npm
DESCRIPTION: Command to install the chai-counting plugin using npm package manager.

LANGUAGE: shell
CODE:
npm install chai-counting

----------------------------------------

TITLE: Array Multiple Elements Containment Assertion in Chai
DESCRIPTION: Demonstrates the containingAllOf() assertion to check if an array contains all specified elements.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containingAllOf([1]);
expect([1, 2, 3]).to.be.containingAllOf([1, 3]);
expect([1, 2, 3]).to.be.containingAllOf([1, 2, 3]);

----------------------------------------

TITLE: Using chai-semver Assertions in JavaScript Tests
DESCRIPTION: Examples of using chai-semver assertions in JavaScript tests. It shows how to check if a string is in semver format and if it satisfies a version range.

LANGUAGE: javascript
CODE:
expect('1.2.0').to.be.semver() // passes if given string is in semver format, rejects if not
'1.6.3'.should.be.semver() // equivalent
expect('1.2.0').to.satisfySemver('>1.0.3') // passes if given string is in given version range, rejects if not

----------------------------------------

TITLE: Status Assertion Example
DESCRIPTION: Example of asserting HTTP response status code.

LANGUAGE: javascript
CODE:
expect(res).to.have.status(200);

----------------------------------------

TITLE: Asserting jQuery descendants with chai-jquery
DESCRIPTION: Shows how to use chai-jquery to assert that jQuery objects have descendants matching a given selector using the 'descendants' assertion.

LANGUAGE: javascript
CODE:
$('body').should.have.descendants('h1');
expect($('#content')).to.have.descendants('div');

----------------------------------------

TITLE: Configuring Maybe-Chai Adapter Interface
DESCRIPTION: Demonstrates the adapter interface required to customize maybe-chai for different Maybe monad implementations.

LANGUAGE: javascript
CODE:
maybeChai( {
    match: (maybe: Maybe<T>, cases: MatchCases<T, U>) => U,
    isMaybe: (maybe: Maybe<T>) => Boolean,
} )

type MatchCases<T, U> = {
    Just: (value: T) => U,
    Nothing: () => U,
}

----------------------------------------

TITLE: Importing Chai-Kefir with CommonJS
DESCRIPTION: Example showing how to require and set up chai-kefir using CommonJS syntax

LANGUAGE: javascript
CODE:
const Kefir = require('kefir');
const { use } = require('chai');
const chaiKefir = require('chai-kefir').default;

----------------------------------------

TITLE: Installing chai-js-factories in Node.js
DESCRIPTION: This snippet demonstrates how to install and use chai-js-factories in a Node.js environment. It shows the required npm install command and the code to include and use the plugin with Chai.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiJsFactories = require('chai-js-factories');
chai.use(chaiJsFactories);

----------------------------------------

TITLE: Installing chai-parentheses with npm
DESCRIPTION: Command to install the chai-parentheses plugin using npm as a dev dependency.

LANGUAGE: shell
CODE:
npm install chai-parentheses --save-dev

----------------------------------------

TITLE: Configuring Custom Tolerance
DESCRIPTION: Example of initializing chai-almost with a custom tolerance value of 0.1

LANGUAGE: javascript
CODE:
chai.use(chaiAlmost(0.1));

----------------------------------------

TITLE: Test File Implementation
DESCRIPTION: Example test file showing how to use chai-karma-snapshot with both expect and assert syntax

LANGUAGE: javascript
CODE:
import { use, expect, assert } from "chai";
import { matchSnapshot } from "chai-karma-snapshot";
import { test } from "../src/index.js";
use(matchSnapshot);

describe("src/index.js", () => {
  it("check snapshot", () => {
    // 'expect' syntax:
    expect(test()).to.matchSnapshot();
    // 'assert' syntax:
    assert.matchSnapshot(test());
  });
});

----------------------------------------

TITLE: Testing for descending sort order using .descending property
DESCRIPTION: Shows how to use the .descending property to test if an array is sorted in descending order.

LANGUAGE: javascript
CODE:
expect(["b","apples"]).to.be.descending

----------------------------------------

TITLE: Asserting jQuery HTML content with chai-jquery
DESCRIPTION: Demonstrates how to use chai-jquery to assert the HTML content of jQuery objects using the 'html' assertion.

LANGUAGE: javascript
CODE:
$('.name').should.have.html('<em>John Doe</em>');
expect($('#title')).to.have.html('Chai Tea');

----------------------------------------

TITLE: Array ID Comparisons in Chai
DESCRIPTION: Shows how to compare arrays of objects by their IDs, including exact matches and ordered comparisons.

LANGUAGE: javascript
CODE:
[{id:'a'}, {id:'b'}].should.have.ids ['a', 'b']
['a', 'b'].should.be.ids ['a', 'b']
[{id:'a'}, {id:'b'}].should.have.same.ids [{id:'a'}, {id:'b'}]
[{id:'a'}, {id:'b'}].should.not.have.same.ids [{id:'b'}, {id:'a'}]

----------------------------------------

TITLE: Installing Chai HTTP Plugin via npm
DESCRIPTION: Command to install the Chai HTTP plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install chai-http

----------------------------------------

TITLE: Installing chai-cron using Yarn or npm in JavaScript
DESCRIPTION: Commands to install the chai-cron plugin using either Yarn or npm package managers.

LANGUAGE: shell
CODE:
yarn add chai-cron

LANGUAGE: shell
CODE:
npm i chai-cron

----------------------------------------

TITLE: Installing chai-asserttype-extra Plugin
DESCRIPTION: Shows different ways to install the chai-asserttype-extra plugin using npm and various import methods

LANGUAGE: bash
CODE:
npm install chai chai-asserttype-extra

LANGUAGE: typescript
CODE:
const ChaiPluginAssertType = require('chai-asserttype-extra');
import ChaiPluginAssertType = require('chai-asserttype-extra');
import ChaiPluginAssertType from 'chai-asserttype-extra';
import { ChaiPlugin as ChaiPluginAssertType } from 'chai-asserttype-extra';

----------------------------------------

TITLE: Using Nothing Assertions with Maybe-Chai
DESCRIPTION: Examples of using the 'nothing' assertion to test Maybe.Nothing values.

LANGUAGE: javascript
CODE:
expect( Maybe.nothing() ).to.be.nothing()   // OK!
expect( Maybe.just(5) ).to.be.nothing()     // fails
expect( Maybe.just(5) ).to.not.be.nothing() // OK!
expect( 'string' ).to.be.nothing()          // fails
expect( 'string' ).to.not.be.nothing()      // OK!

----------------------------------------

TITLE: Using Chai's Native 'not' Assertion with Node Fetch Response Matchers in JavaScript
DESCRIPTION: Demonstrates how to use Chai's native 'not' assertion in combination with the node-fetch-response-matchers plugin.

LANGUAGE: javascript
CODE:
it('not', function(){
   return expect(fetch('http://localhost/')).to.not.be.successful();
});

----------------------------------------

TITLE: Installing chai-json-schema via npm
DESCRIPTION: Commands to install the chai-json-schema plugin using npm package manager.

LANGUAGE: bash
CODE:
$ npm install chai-json-schema

----------------------------------------

TITLE: Unordered Array ID Comparisons in Chai
DESCRIPTION: Demonstrates how to perform unordered array comparisons using the unordered chain modifier.

LANGUAGE: javascript
CODE:
[{id:'a'}, {id:'b'}].should.have.same.unordered.ids [{id:'b'}, {id:'a'}]

----------------------------------------

TITLE: Setting Up chai-iterator in Node.js
DESCRIPTION: Shows how to import and set up chai-iterator in a Node.js environment.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiIterator = require('chai-iterator');

chai.use(chaiIterator);

----------------------------------------

TITLE: Installing Chai Shallow Deep Equal in Browser
DESCRIPTION: Shows how to include the chai-shallow-deep-equal plugin in a browser environment using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-shallow-deep-equal.js"></script>

----------------------------------------

TITLE: Installing chai-v8-optimisation via NPM
DESCRIPTION: Instructions for installing the chai-v8-optimisation plugin using NPM and requiring it in a JavaScript project.

LANGUAGE: JavaScript
CODE:
require('chai-v8-optimisation')

LANGUAGE: Shell
CODE:
npm install --save chai-v8-optimisation

----------------------------------------

TITLE: Using Deep Almost Equal Assertion
DESCRIPTION: Demonstrates deep comparison of objects containing numerical values with specified precision

LANGUAGE: javascript
CODE:
expect({ pi: 3.1416 }).to.almost.eql({ pi: 3.14159 }, 3);
assert.deepAlmostEqual({ pi: 3.1416 }, { pi: 3.14159 }, 3);

----------------------------------------

TITLE: Using notify() for Asynchronous Completion in JavaScript
DESCRIPTION: Demonstrates how to use the notify() method when return is not possible or preferred in asynchronous tests.

LANGUAGE: javascript
CODE:
doSomethingAsync().should.eventually.equal("foo").notify(done);

----------------------------------------

TITLE: Installing chai-stats via npm
DESCRIPTION: Command to install the chai-stats plugin using npm for Node.js environments.

LANGUAGE: bash
CODE:
$ npm install chai-stats

----------------------------------------

TITLE: Creating Null Object from Object
DESCRIPTION: Example of creating a null object based on an existing object instance.

LANGUAGE: javascript
CODE:
var nullobject = chai.Null(obj).create();

----------------------------------------

TITLE: Installing chai-xml plugin with npm
DESCRIPTION: Command to install the chai-xml plugin using npm. This should be run in addition to installing the chai package.

LANGUAGE: bash
CODE:
npm install chai-xml --save-dev

----------------------------------------

TITLE: Testing Monotonic Sequences with Chai
DESCRIPTION: Examples of testing monotonic increasing and decreasing sequences using the chai-increasing plugin. These tests allow for equal adjacent values.

LANGUAGE: javascript
CODE:
expect([1,2,2,3,3,4]).to.be.increasing;
expect([5,4,4,4,4,3]).to.be.decreasing;
expect([1,1,1,1,1,1]).to.be.increasing;
expect([1,1,1,1,1,1]).to.be.decreasing;

----------------------------------------

TITLE: Installing Chai Colors Plugin via npm
DESCRIPTION: Provides the npm command to install the chai-colors plugin. This is a prerequisite for using the plugin in your Chai-based tests.

LANGUAGE: bash
CODE:
npm install chai-colors

----------------------------------------

TITLE: Using 'expect' with chai-changes in CoffeeScript
DESCRIPTION: Demonstrates how to use the 'expect' style with chai-changes to assert changes in code execution.

LANGUAGE: coffeescript
CODE:
expect(-> codeThatYieldsAChangedResult).to....when ->
  executeTheCodeThatCausesTheChange()

----------------------------------------

TITLE: Basic Property Chain Example
DESCRIPTION: Demonstrates basic property chaining using have/has syntax.

LANGUAGE: javascript
CODE:
obj = { foo: { bar: 'baz' } })

obj.should.have.foo.bar.eq('baz')
// same as
obj.should.have.property('foo').property('bar').eq('baz')

----------------------------------------

TITLE: Basic BN.js Equality Comparison
DESCRIPTION: Demonstrates the traditional way of comparing BN.js values versus the simplified bn-chai syntax

LANGUAGE: javascript
CODE:
expect(bn1.eq(bn2)).to.be.true;

LANGUAGE: javascript
CODE:
expect(bn1).to.eq.BN(bn2);

----------------------------------------

TITLE: Markdown Snapshot Format Example
DESCRIPTION: Example showing the markdown format for storing snapshots with syntax highlighting support

LANGUAGE: markdown
CODE:
# `src/html.js`

## `Sub Suite`

####   `HTML Snapshot`

```html
<div>
  <span />
</div>
```

----------------------------------------

TITLE: Cloning Chai Documentation Repository
DESCRIPTION: Git command to clone the Chai.js documentation website repository to your local machine.

LANGUAGE: sh
CODE:
$ git clone https://github.com/chaijs/chaijs.github.io

----------------------------------------

TITLE: Importing and Using chai-arrays Plugin
DESCRIPTION: Example of how to import and use the chai-arrays plugin with Chai assertion library.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const assertArrays = require('chai-arrays');
chai.use(assertArrays);

----------------------------------------

TITLE: Simplified Promise Assertion with Chai as Promised
DESCRIPTION: Shows the improved syntax using Chai as Promised's eventually chain.

LANGUAGE: javascript
CODE:
return doSomethingAsync().should.eventually.equal("foo");

----------------------------------------

TITLE: Importing and Using chai-arrays Plugin
DESCRIPTION: Example of how to import and use the chai-arrays plugin with Chai assertion library.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const assertArrays = require('chai-arrays');
chai.use(assertArrays);

----------------------------------------

TITLE: Testing Function Optimisation with Parameters
DESCRIPTION: Example of testing function optimisation while passing parameters and a thisArg context.

LANGUAGE: JavaScript
CODE:
function fn(a, b, c) {}
expect(fn).optimisation("yes", [1, 2, 3], thisArg);

----------------------------------------

TITLE: Installing Chai HTTP Plugin
DESCRIPTION: Basic setup code showing how to include and use the chai-http plugin with Node.js

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiHttp = require('chai-http');

chai.use(chaiHttp);

----------------------------------------

TITLE: Using Sinon.JS Assertions
DESCRIPTION: Example of using Sinon.JS assertions directly, which is less intuitive and not recommended when using Sinon-Chai.

LANGUAGE: javascript
CODE:
sinon.assertCalledWith(mySpy, "foo");

----------------------------------------

TITLE: Installing Chai Checkmark with CommonJS
DESCRIPTION: How to include and initialize the chai-checkmark plugin using CommonJS module system.

LANGUAGE: javascript
CODE:
var chai = require("chai"),
    plugin = require("chai-checkmark")
chai.use(plugin)

----------------------------------------

TITLE: Setting Up chai-changes with AMD
DESCRIPTION: Instructions for setting up chai-changes in an AMD (Asynchronous Module Definition) environment.

LANGUAGE: javascript
CODE:
define(function (require, exports, module) {
    var chai = require("chai");
    var chaiChanges = require("chai-changes");

    chai.use(chaiChanges);
});

----------------------------------------

TITLE: Initializing chai-js-factories with AMD
DESCRIPTION: This code snippet illustrates how to initialize chai-js-factories when using AMD (Asynchronous Module Definition). It shows how to require the necessary modules and explicitly initialize the plugin.

LANGUAGE: javascript
CODE:
require(['chai', 'js-factories', 'chai-js-factories'], function(chai, Factory, chaiJsFactories) {
  chai.use(function(chai, utils) {
    chaiJsFactories(Factory, chai, utils);
  });
});

----------------------------------------

TITLE: Using chai-xml plugin for XML assertions in JavaScript
DESCRIPTION: Example of how to use the chai-xml plugin in a test suite. It demonstrates importing the plugin, loading it into Chai, and using various XML assertions.

LANGUAGE: javascript
CODE:
var chai    = require('chai');
var expect  = require('chai').expect;
var chaiXml = require('chai-xml');

//loads the plugin
chai.use(chaiXml);

describe('assert some xml', function(){

    var someXml = '<root>\n\t<child name="foo" value="bar"></child>\n</root>';
    var otherXml = '<root><child value="bar" name="foo" /></root>';

    it("should be valid", function(){
        expect(someXml).xml.to.be.valid();
    });

    it("should be the same string as otherXml ", function(){
        expect(someXml).to.not.equal(otherXml);
    });
    it("should be the same XML as otherXml ", function(){
        expect(someXml).xml.to.equal(otherXml);
    });

    it("should be the same XML ignoring the whitespace at the begining and end of the text nodes", function () {
        var formattedXml = "<tag>\n\tContent\n</tag>";
        var unformattedXml = "<tag>Content</tag>";
        expect(formattedXml).xml.to.deep.equal(unformattedXml);
    });
});

----------------------------------------

TITLE: Using Almost Equal Assertion
DESCRIPTION: Shows how to use the almost.equal assertion for comparing numbers with specified precision.

LANGUAGE: javascript
CODE:
expect(3.1415).to.almost.equal(3.14159, 3);
assert.almostEqual(3.1416, 3.14159, 3, 'these numbers are almost equal');

----------------------------------------

TITLE: Including Chai HTTP in Browser
DESCRIPTION: HTML code showing how to include chai-http in a web page environment

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-http.js"></script>
<script>
  chai.use(chaiHttp);
</script>

----------------------------------------

TITLE: Asserting jQuery CSS with chai-jquery
DESCRIPTION: Illustrates how to use chai-jquery to assert the presence and value of CSS properties on jQuery objects using the 'css' assertion.

LANGUAGE: javascript
CODE:
$('#header').should.have.css('background');
expect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)');
expect($('body')).to.have.css('font-family').match(/sans-serif/);

----------------------------------------

TITLE: Configuration Interface Definitions
DESCRIPTION: TypeScript interface definitions for configuring image comparison options

LANGUAGE: typescript
CODE:
enum Align {
  LEFT_TOP = "leftTop",
  CENTER = "center",
}

interface MatchImageOptions {
  // Custom diff config passed to pixelmatch
  diff?: DiffOptions;
  
  // Image aligning config for aligning different size image (default: Align.LEFT_TOP)
  align?: Align;
  
  // Output config
  // if specified, chai-image will create output files to visualize diff 
  output?: OutputOptions;
}

interface DiffOptions {
  threshold?: number;
  includeAA?: boolean;
  alpha?: number;
  aaColor?: [number, number, number];
  /* The color of differing pixels in the diff output. [255, 0, 0] by default. */
  diffColor?: [number, number, number];
}

interface OutputOptions {
  // Currently name is used to generate filename
  name: string;
  // Path of output directory (default: WORKDING_DIR/outputs)
  dir?: string;
  
  // Output creation conditions
  // Controls when to create output files (default: failure)
  on?: "failure" | "always";
  
  // Controls output file types (default: false)
  diffOnly?: boolean;
}

----------------------------------------

TITLE: Installing Chai SuperAgent Plugin
DESCRIPTION: NPM installation command for chai-superagent and its dependency superagent.

LANGUAGE: bash
CODE:
$ npm install chai-superagent superagent

----------------------------------------

TITLE: Array Type Assertion in Chai with chai-arrays
DESCRIPTION: Examples of using the array() assertion to check if a value is an array or specific typed array.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.array();
expect('foobar').not.to.be.array();

expect(new Uint8Array([1])).to.be.Uint8Array();
expect(new Uint16Array([1])).to.be.Uint16Array();
expect(new Uint32Array([1])).to.be.Uint32Array();
expect(new Uint8ClampedArray([1])).to.be.Uint8ClampedArray();

----------------------------------------

TITLE: Protractor Assertion Example
DESCRIPTION: Example of using Chai Smoothie assertions with Protractor

LANGUAGE: typescript
CODE:
expect(element(by.id('title'))).to.eventually.be.displayed

----------------------------------------

TITLE: Creating Signal Spies in JavaScript
DESCRIPTION: Demonstrates how to create signal spies using chai-signals. It shows creating a spy for a single signal and for multiple signals.

LANGUAGE: JavaScript
CODE:
var signal = new signals.Signal();
var signalSpy = chai.signals.spyOnSignal(signal);
var signalSpies = chai.signals.createSignalSpyObj([signal1, signal2]);

----------------------------------------

TITLE: Promise Assertion with Notification
DESCRIPTION: Example of using notify() pattern when return is not possible or preferred.

LANGUAGE: javascript
CODE:
doSomethingAsync().should.eventually.equal("foo").notify(done);

----------------------------------------

TITLE: Installing Chai Files Plugin with NPM
DESCRIPTION: Command to install chai-files as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-files

----------------------------------------

TITLE: Asserting Minimum and Maximum Changes with chai-changes in CoffeeScript
DESCRIPTION: Examples of using 'atLeast' and 'atMost' assertions to check for minimum and maximum value changes.

LANGUAGE: coffeescript
CODE:
result = 0
expect(-> result).to.change.by.atLeast(4).when -> result += 5
expect(-> result).to.change.by.atLeast(4).when -> result -= 10

LANGUAGE: coffeescript
CODE:
result = 0
expect(-> result).to.change.by.atMost(7).when -> result += 5
expect(-> result).to.change.by.atMost(14).when -> result -= 10

----------------------------------------

TITLE: Importing and Using Chai JSON Pattern in JavaScript
DESCRIPTION: Shows how to import the Chai JSON Pattern plugin, use it with Chai, and create a simple pattern matching assertion. This snippet demonstrates the basic setup required to use the plugin in a test environment.

LANGUAGE: javascript
CODE:
import chai, { expect } from 'chai';
import chaiJsonPattern from 'chai-json-pattern';

chai.use(chaiJsonPattern);

expect({ a: 2 }).to.matchPattern(`{
    "a": Number AND range(0, 5),
}`);

----------------------------------------

TITLE: Including chai-stats in browser
DESCRIPTION: HTML script tag to include the chai-stats plugin in a browser environment after loading Chai.

LANGUAGE: xml
CODE:
<script src="chai-stats.js"></script>

----------------------------------------

TITLE: Array Multiple Elements Containment Assertion in Chai with chai-arrays
DESCRIPTION: Demonstrates the use of containingAllOf() to check if an array contains all specified elements.

LANGUAGE: javascript
CODE:
expect([1, 2, 3]).to.be.containingAllOf([1]);
expect([1, 2, 3]).to.be.containingAllOf([1, 3]);
expect([1, 2, 3]).to.be.containingAllOf([1, 2, 3]);

----------------------------------------

TITLE: Importing and Using Chai JSON Pattern in JavaScript
DESCRIPTION: Shows how to import the Chai JSON Pattern plugin, use it with Chai, and create a simple pattern matching assertion. This snippet demonstrates the basic setup required to use the plugin in a test environment.

LANGUAGE: javascript
CODE:
import chai, { expect } from 'chai';
import chaiJsonPattern from 'chai-json-pattern';

chai.use(chaiJsonPattern);

expect({ a: 2 }).to.matchPattern(`{
    "a": Number AND range(0, 5),
}`);

----------------------------------------

TITLE: Setting up chai-stats in Node.js
DESCRIPTION: JavaScript code to require and use the chai-stats plugin in a Node.js environment, setting up should and expect interfaces.

LANGUAGE: javascript
CODE:
var chai = require('chai')
  , chaiStats = require('chai-stats');

chai.use(chaiStats);

var should = chai.should()
  , expect = chai.expect;

----------------------------------------

TITLE: Testing for Expected Type Errors
DESCRIPTION: Shows how to assert the presence of a specific number of type errors in a JavaScript file

LANGUAGE: javascript
CODE:
expect('/absolute/path/to/filename.js').to.have.types.errors(1);

----------------------------------------

TITLE: Asserting Element Containment with Chai-DOM in JavaScript
DESCRIPTION: Shows how to use the 'contain' assertion to check if an element contains another element or matches a selector.

LANGUAGE: javascript
CODE:
document.querySelector('section').should.contain('ul.items')
document.querySelector('section').should.contain(document.querySelector('section div'))
expect(document.querySelector('#content')).to.contain('p')

----------------------------------------

TITLE: Testing Different Data Types with Chai Increasing
DESCRIPTION: Examples showing support for strings, floating point numbers and Immutable.js Lists.

LANGUAGE: javascript
CODE:
expect(['Apple','Banana','Coconut']).to.be.strictly.increasing;
expect([1.15, 1.75, 3.28, 4.96]).to.be.strictly.increasing;
expect(Immutable.List.of([1,2,3,4])).to.be.strictly.increasing;

----------------------------------------

TITLE: Using Chai-SamSam Plugin
DESCRIPTION: Example demonstrating how to set up and use the chai-samsam plugin for deep matching assertions, including both positive and negative test cases

LANGUAGE: javascript
CODE:
const chai = require('chai')
const chaiSamSam = require('chai-samsam')

chai.use(chaiSamSam)

expect([{
  firstName: 'John',
  lastName: 'Doe',
  jobs: [{ bartender: true, barista: true }]
}]).to.deep.match([
  { jobs: [{ barista: true }] }
])
// =>  pass

expect([{
  firstName: 'John',
  lastName: 'Doe',
  jobs: [{ bartender: true, barista: true }]
}]).to.not.deep.match([
  { jobs: [{ pilot: true }] }
])
// =>  pass

// also possible
assert.deepMatch(a, b)
assert.notDeepMatch(a, b)

----------------------------------------

TITLE: Including chai-js-factories via script tags
DESCRIPTION: This HTML snippet shows how to include chai-js-factories in a web page using script tags. It demonstrates the correct order of including Chai, js-factories, and chai-js-factories scripts.

LANGUAGE: html
CODE:
<script src="chai.js" encoding="utf-8"></script>
<script src="js-factories.js" encoding="utf-8"></script>
<script src="chai-js-factories.js" encoding="utf-8"></script>

----------------------------------------

TITLE: Installing and Setting Up chai-as-typed
DESCRIPTION: Shows how to import and configure the chai-as-typed plugin with Chai

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiAsTyped = require('chai-as-typed');

chai.use(chaiAsTyped);

----------------------------------------

TITLE: Setting up bn-chai with Chai
DESCRIPTION: Initialize and configure bn-chai plugin with Chai testing framework. Requires chai, bn.js, and bn-chai packages.

LANGUAGE: javascript
CODE:
var chai = require('chai');
var BN = require('bn.js');
var bnChai = require('bn-chai');
chai.use(bnChai(BN));

----------------------------------------

TITLE: Using Chai Exec Async in JavaScript
DESCRIPTION: This snippet shows how to use the asynchronous version of Chai Exec (chaiExecAsync) in a test file.

LANGUAGE: javascript
CODE:
const { chaiExecAsync } = require("@jsdevtools/chai-exec");
const chai = require("chai");

chai.use(chaiExecAsync);

describe("My CLI", () => {
  it("should exit with a zero exit code", async () => {
    // Run your CLI
    let myCLI = await chaiExecAsync('my-cli --arg1 --arg2 "some other arg"');

    // Should syntax
    myCLI.should.exit.with.code(0);
    myCLI.stdout.should.contain("Success!");
    myCLI.stderr.should.be.empty;

    // Expect sytnax
    expect(myCLI).to.exit.with.code(0);
    expect(myCLI).stdout.to.contain("Success!");
    expect(myCLI).stderr.to.be.empty;

    // Assert syntax
    assert.exitCode(myCLI, 0);
    assert.stdout(myCLI, "Success!");
    assert.stderr(myCLI, "");
  });
});

----------------------------------------

TITLE: Asserting Element Values with Chai-DOM in JavaScript
DESCRIPTION: Demonstrates the use of the 'value' assertion to check the value of form elements.

LANGUAGE: javascript
CODE:
document.querySelector('.name').should.have.value('John Doe')
expect(document.querySelector('input.year')).to.have.value('2012')

----------------------------------------

TITLE: Using chai-bn assertions in JavaScript
DESCRIPTION: Examples of using chai-bn assertions to compare BN instances and string representations of large numbers.

LANGUAGE: javascript
CODE:
const actual = new BN('100000000000000000').plus(new BN('1'));
const expected = '100000000000000001';

actual.should.be.a.bignumber.that.equals(expected);
expect(actual).to.be.a.bignumber.that.is.at.most(expected);
(new BN('1000')).should.be.a.bignumber.that.is.lessThan('2000');

----------------------------------------

TITLE: Array Property Assertion Example using Chai Each
DESCRIPTION: Demonstrates how to use chai-each to verify that each object in an array has a 'value' property below 20.

LANGUAGE: javascript
CODE:
// Each item has a "value" property that is below 20
[{"value": 4}, {"value": 11}, {"value": 15}].should.each.have.property('value').that.is.below(20)

----------------------------------------

TITLE: HTML Element Example
DESCRIPTION: Sample HTML element used to demonstrate assertions

LANGUAGE: html
CODE:
<h1 id="title">Chai Smoothie is delicious!</h1>

----------------------------------------

TITLE: String Type Assertions
DESCRIPTION: Examples of asserting string type values using chai-asserttype

LANGUAGE: javascript
CODE:
expect('').to.be.string();
expect('foobar').to.be.string();

----------------------------------------

TITLE: Configuring Chai to use chai-bn with BN.js
DESCRIPTION: JavaScript code to set up Chai with the chai-bn plugin, injecting the BN dependency for arbitrary-precision integer assertions.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const BN = require('bn.js');

// Enable and inject BN dependency
chai.use(require('chai-bn')(BN));

----------------------------------------

TITLE: Installing Bundler on Linux/MacOS
DESCRIPTION: Command to install the Bundler gem, which is required for managing Ruby dependencies in the project.

LANGUAGE: sh
CODE:
$ sudo gem install bundler

----------------------------------------

TITLE: Excluding multiple top-level properties from an object
DESCRIPTION: Examples of using chai-exclude to exclude multiple top-level properties from object and array comparisons.

LANGUAGE: javascript
CODE:
const obj = {
  a: 'a',
  b: 'b',
  c: {
    d: 'd',
    e: 'e'
  }
}

// Object
assert.deepEqualExcluding(obj, { b: 'b' }, ['a', 'c'])
assert.deepEqualExcluding(obj, { a: 'z', b: 'b' }, ['a', 'c'])

expect(obj).excluding(['a', 'c']).to.deep.equal({ b: 'b' })
expect(obj).excluding(['a', 'c']).to.deep.equal({ a: 'z', b: 'b' })

const array = [
  {
    a: 'a',
    b: 'b',
    c: {
      d: 'd',
      e: 'e'
    }
  }
]

// Array
assert.deepEqualExcluding(array, [{ b: 'b' }], ['a', 'c'])
assert.deepEqualExcluding(array, [{ a: 'z', b: 'b' }], ['a', 'c'])

expect(array).excluding(['a', 'c']).to.deep.equal([{ b: 'b' }])
expect(array).excluding(['a', 'c']).to.deep.equal([{ a: 'z', b: 'b' }])

----------------------------------------

TITLE: Initializing Chai Things Plugin
DESCRIPTION: Code to set up and initialize the chai-things plugin with Chai testing framework. Demonstrates required imports and configuration.

LANGUAGE: javascript
CODE:
var chai = require("chai");
chai.should();
chai.use(require('chai-things'));

----------------------------------------

TITLE: Initializing Chai Things Plugin
DESCRIPTION: Code to set up and initialize the chai-things plugin with Chai testing framework. Demonstrates required imports and configuration.

LANGUAGE: javascript
CODE:
var chai = require("chai");
chai.should();
chai.use(require('chai-things'));

----------------------------------------

TITLE: Comparing Array Members with JSON Equality in Chai (JavaScript)
DESCRIPTION: Shows how to use the chai-json-equal plugin to compare array members using JSON equality. This extends the functionality to work with arrays.

LANGUAGE: javascript
CODE:
[ship].should.have.jsonEqual.members [barge]

----------------------------------------

TITLE: Serenity/JS Assertion Example
DESCRIPTION: Example of using Chai Smoothie assertions with Serenity/JS

LANGUAGE: typescript
CODE:
expect(actor.toSee(WebElement.of(Article.Title))).displayed

----------------------------------------

TITLE: Initializing chai-asserttype-extra Plugin
DESCRIPTION: Different methods to initialize and use the plugin with Chai, including TypeScript support without @ts-ignore

LANGUAGE: typescript
CODE:
const chai = ChaiPluginAssertType.install();

const chai = ChaiPluginAssertType.install(require('chai'));

const chai = require('chai-asserttype-extra').install()

const chai = require('chai');
chai.use(ChaiPluginAssertType);

const chai = require('chai');
chai.use(ChaiPluginAssertType);

----------------------------------------

TITLE: Retaining Cookies Between Requests in Chai HTTP
DESCRIPTION: Example of using an agent to retain cookies between multiple requests in Chai HTTP, useful for authenticated sessions.

LANGUAGE: javascript
CODE:
const agent = chai.request.agent(app)
agent
  .post('/session')
  .send({ username: 'me', password: '123' })
  .then((res) => {
    expect(res).to.have.cookie('sessionid');
    return agent.get('/user/me')
      .then((res) => {
         expect(res).to.have.status(200);
      });
  });

----------------------------------------

TITLE: Initializing chai-asserttype Plugin
DESCRIPTION: Setup code to integrate chai-asserttype plugin with Chai assertion library

LANGUAGE: javascript
CODE:
const chai = require('chai');
const asserttype = require('chai-asserttype');
chai.use(asserttype);

----------------------------------------

TITLE: Creating Basic Spies
DESCRIPTION: Examples of creating spies with and without original functions

LANGUAGE: javascript
CODE:
function original () {
  // do something cool
}

const spy = chai.spy(original);

// then use in place of original
ee.on('some event', spy);

// or use without original
const spyAgain = chai.spy();
ee.on('some other event', spyAgain);

----------------------------------------

TITLE: Contributing to Chai WebDriver Promised Project
DESCRIPTION: Provides instructions for contributing to the chai-webdriver-promised project, including editing and testing.

LANGUAGE: bash
CODE:
$EDITOR index.js      # edit index.js
npm test              # run the specs

----------------------------------------

TITLE: Chai Nock Simplified Assertion
DESCRIPTION: Shows the simplified assertion syntax provided by chai-nock for the same test case.

LANGUAGE: javascript
CODE:
return expect(nock('http://some-url')).to.have.been.requestedWith({
  hello: 'world'
});

----------------------------------------

TITLE: Creating Basic Spies
DESCRIPTION: Examples of creating spies with and without original functions

LANGUAGE: javascript
CODE:
function original () {
  // do something cool
}

const spy = chai.spy(original);

// then use in place of original
ee.on('some event', spy);

// or use without original
const spyAgain = chai.spy();
ee.on('some other event', spyAgain);

----------------------------------------

TITLE: Sinon-Chai Browser Installation
DESCRIPTION: Shows how to include Sinon-Chai in a browser environment using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="sinon-chai.js"></script>
<script src="sinon.js"></script>

----------------------------------------

TITLE: Testing Backbone View Callbacks with Chai
DESCRIPTION: Demonstrates testing Backbone view event callbacks and DOM event bindings using chai-backbone call assertions.

LANGUAGE: javascript
CODE:
view.should.call('startAuthentication').when(function() {
  view.$('a.login').trigger('click');
});

----------------------------------------

TITLE: Configuring TV4 Properties
DESCRIPTION: JavaScript code demonstrating how to configure non-standard TV4 properties for cyclical object support, banning unknown properties, and validating multiple errors.

LANGUAGE: javascript
CODE:
chai.tv4.cyclicCheck = true;
chai.tv4.banUnknown = true;
chai.tv4.multiple = true;

----------------------------------------

TITLE: Using chai-jq assertions with context switching
DESCRIPTION: Example of how certain chai-jq assertions can switch the object context under specific conditions.

LANGUAGE: javascript
CODE:
var $elem = $("<div id=\"hi\" foo=\"bar time\" />");

expect($elem)
  // Assertion object is `$elem`
  .to.have.$attr("foo").and
    // Assertion object now changed to `$attr()` value: `"bar time"`
    .to.equal("bar time").and
    .to.match(/^b/).and
    .to.not.have.length(2);

----------------------------------------

TITLE: Sinon-Chai Expect Interface Example
DESCRIPTION: Complete example demonstrating Sinon-Chai usage with Chai's expect interface.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
var expect = chai.expect;
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        expect(cb).to.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Sinon-Chai Improved Assertions
DESCRIPTION: Demonstrates the improved assertion syntax provided by Sinon-Chai.

LANGUAGE: javascript
CODE:
mySpy.should.have.been.calledWith("foo");
expect(mySpy).to.have.been.calledWith("foo");

----------------------------------------

TITLE: ES6 Map Comparison Example
DESCRIPTION: Shows how to use shallowDeepEqual with ES6 Map objects.

LANGUAGE: javascript
CODE:
expect(
  new Map([
    ["foo", 1],
    ["bar", false]
  ])
).to.shallowDeepEqual(
  new Map([
    ["foo", 1],
    ["bar", true]
  ])
);

----------------------------------------

TITLE: Importing Chai OpenAPI Validator in TypeScript
DESCRIPTION: Shows how to import the validator plugin using ES6/TypeScript syntax

LANGUAGE: typescript
CODE:
import chaiResponseValidator from 'chai-openapi-response-validator';

----------------------------------------

TITLE: Assert API Usage Examples
DESCRIPTION: Demonstrates using the assert API with both alters and unaltered assertions.

LANGUAGE: javascript
CODE:
let x = 0;
assert.alters(changer, changeWatcher);

function changer() { x += 1; }
function changeWatcher() { return x }

assert.alters(() => { x += 1 }, () => x, { by: 1 });
assert.alters(() => { x += 1 }, () => x, { from: x });
assert.alters(() => { x += 1 }, () => x, { from: x, to: x + 1 });
assert.alters(() => { x += 1 }, () => x, { to: x + 1 });

let x = 0;
const noop = () => undefined;
assert.unaltered(noop, () => x);

----------------------------------------

TITLE: Running V8 Optimisation Tests
DESCRIPTION: Command to run tests with the --allow-natives-syntax flag, which is required for V8 optimisation analysis.

LANGUAGE: Shell
CODE:
node --allow-natives-syntax your-optimisation-tests.js

----------------------------------------

TITLE: Date Type Assertions
DESCRIPTION: Example of asserting date type values using chai-asserttype

LANGUAGE: javascript
CODE:
expect(new Date()).to.be.date();

----------------------------------------

TITLE: Configuring Chai DecimalJS Plugin Page in YAML
DESCRIPTION: This YAML configuration block sets up the page layout, URL, and plugin name for the chai-decimaljs plugin documentation. It uses front matter syntax, likely for a static site generator like Jekyll.

LANGUAGE: yaml
CODE:
---
layout: plugin
permalink: plugins/chai-decimaljs/
pluginName: chai-decimaljs
---

----------------------------------------

TITLE: Custom Date Comparison Example
DESCRIPTION: Shows practical usage of custom type matching with date objects.

LANGUAGE: javascript
CODE:
const fooDate = new Date(1583947016326);

expect({ fooDate }).to.shallowDeepEqual({
  fooDate: "2020-03-11T17:16:56.326Z"
});

----------------------------------------

TITLE: Using chai-interface for nested object interface assertions in JavaScript
DESCRIPTION: Shows how to use chai-interface to assert the structure of a more complex, nested JavaScript object with multiple levels of properties.

LANGUAGE: javascript
CODE:
var user = {
  name: {
    first: 'Betty',
    last: 'Dodson'
  },
  emails: {
    work: 'b.dodson@megacorp.com',
    home: 'butterflychica947@lol.com',
    school: 'bdodso4@stateu.edu'
  }
}

user.should.have.interface({
  name: {
    first: String,
    last: String
  },
  emails: {
    work: String,
    home: String,
    school: String
  }
})

----------------------------------------

TITLE: Assert API Usage Examples
DESCRIPTION: Demonstrates using the assert API with both alters and unaltered assertions.

LANGUAGE: javascript
CODE:
let x = 0;
assert.alters(changer, changeWatcher);

function changer() { x += 1; }
function changeWatcher() { return x }

assert.alters(() => { x += 1 }, () => x, { by: 1 });
assert.alters(() => { x += 1 }, () => x, { from: x });
assert.alters(() => { x += 1 }, () => x, { from: x, to: x + 1 });
assert.alters(() => { x += 1 }, () => x, { to: x + 1 });

let x = 0;
const noop = () => undefined;
assert.unaltered(noop, () => x);

----------------------------------------

TITLE: Including Chai DynamoDB Plugin Server-Side
DESCRIPTION: Configuration for using the chai-dynamodb plugin in Node.js server-side code.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-dynamodb'));

----------------------------------------

TITLE: Defining a Custom Iterable Class in JavaScript
DESCRIPTION: Demonstrates how to create a custom iterable class 'Count' that generates an infinite sequence of numbers.

LANGUAGE: javascript
CODE:
class Count {

  constructor(start=0, step=1) {
    this.start = start;
    this.step = step;
  }

  *[Symbol.iterator]() {
    for (let n = this.start; true; n += this.step) {
      yield n;
    }
  }
}

----------------------------------------

TITLE: Defining a Custom Iterable Class in JavaScript
DESCRIPTION: Demonstrates how to create a custom iterable class 'Count' that generates an infinite sequence of numbers.

LANGUAGE: javascript
CODE:
class Count {

  constructor(start=0, step=1) {
    this.start = start;
    this.step = step;
  }

  *[Symbol.iterator]() {
    for (let n = this.start; true; n += this.step) {
      yield n;
    }
  }
}

----------------------------------------

TITLE: Using the Model Class in JavaScript
DESCRIPTION: Demonstrates how to create and use an instance of the Model class.

LANGUAGE: javascript
CODE:
const arthur = new Model('person');
arthur.set('name', 'Arthur Dent');
arthur.set('occupation', 'traveller');
console.log(arthur.get('name')); // Arthur Dent

----------------------------------------

TITLE: Setting up chai-graphql in JavaScript
DESCRIPTION: Code snippet showing how to import and set up the chai-graphql plugin with Chai.

LANGUAGE: javascript
CODE:
import chai from 'chai'
import chaiGraphQL from 'chai-graphql'
chai.use(chaiGraphQL)

----------------------------------------

TITLE: Not Equals Operator Example
DESCRIPTION: Shows how to use the not equals operator for negative assertions.

LANGUAGE: javascript
CODE:
obj = { foo: { bar: 'baz' } }

obj.should.have.foo.bar.not= 'qux'

----------------------------------------

TITLE: Installing and Setting Up chai-changes with Node.js
DESCRIPTION: Instructions for installing chai-changes via npm and setting it up in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var chaiChanges = require("chai-changes");

chai.use(chaiChanges);

----------------------------------------

TITLE: Installing chai-graphql via npm
DESCRIPTION: Command to install the chai-graphql plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-graphql

----------------------------------------

TITLE: Integrating chai-jq in an AMD environment
DESCRIPTION: JavaScript code demonstrating how to use chai-jq with RequireJS/AMD.

LANGUAGE: javascript
CODE:
require(["chai", "chai-jq"], function (chai, plugin) {
  // Inject plugin.
  chai.use(plugin);

  // Rest of your test code here...
});

----------------------------------------

TITLE: Including Chai HTTP Plugin in Browser
DESCRIPTION: HTML snippet showing how to include and use the Chai HTTP plugin in a web browser environment.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-http.js"></script>
<script>
  chai.use(chaiHttp);
</script>

----------------------------------------

TITLE: Installing and Importing chai-kekka in Node.js
DESCRIPTION: Shows how to install the chai-kekka plugin using npm and import it into a Node.js project. The plugin is then added to Chai using the 'use' method.

LANGUAGE: bash
CODE:
npm install --save-dev chai-kekka

LANGUAGE: javascript
CODE:
const chai = require("chai")
const chaiKekka = require("chai-kekka")
 
chai.use(chaiKekka)

----------------------------------------

TITLE: Including Chai HTTP Plugin in Browser
DESCRIPTION: HTML snippet showing how to include and use the Chai HTTP plugin in a web browser environment.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-http.js"></script>
<script>
  chai.use(chaiHttp);
</script>

----------------------------------------

TITLE: Installing Chai Checkmark in Browser
DESCRIPTION: How to include the chai-checkmark plugin in a browser environment using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-checkmark.js"></script>

----------------------------------------

TITLE: Mixing Assertion Styles with chai-parentheses
DESCRIPTION: Examples of mixing property and function-call assertion styles. It emphasizes the need to always terminate the chain with a function call.

LANGUAGE: javascript
CODE:
expect(true).to.be.true.and.not.false();
expect(true).to.be.true().and.not.false();

----------------------------------------

TITLE: Setting custom transform options for chai-jscodeshift in JavaScript
DESCRIPTION: This snippet shows how to set custom options that will be passed to the transformer function when using chai-jscodeshift.

LANGUAGE: javascript
CODE:
chai.use(chaiJSCodeShift({
  transformOptions: {
    printOptions: {space: 'single'},
  },
}));

----------------------------------------

TITLE: Using chai-iterator with TypeScript
DESCRIPTION: Shows how to import and use chai-iterator in a TypeScript environment.

LANGUAGE: typescript
CODE:
import chai = require("chai");
import chaiIterator = require("chai-iterator");

chai.use(chaiIterator);

[2, 3, 5].should.iterate.over([2, 3, 5]);

----------------------------------------

TITLE: Traditional Asynchronous Testing with Promises in JavaScript
DESCRIPTION: Demonstrates the traditional way of testing asynchronous code with promises, manually wiring up expectations to promise handlers.

LANGUAGE: javascript
CODE:
doSomethingAsync().then(
    function (result) {
        result.should.equal("foo");
        done();
    },
    function (err) {
       done(err);
    }
);

----------------------------------------

TITLE: Traditional Asynchronous Testing with Promises in JavaScript
DESCRIPTION: Demonstrates the traditional way of testing asynchronous code with promises, manually wiring up expectations to promise handlers.

LANGUAGE: javascript
CODE:
doSomethingAsync().then(
    function (result) {
        result.should.equal("foo");
        done();
    },
    function (err) {
       done(err);
    }
);

----------------------------------------

TITLE: Asserting Result Type with chai-kekka
DESCRIPTION: Demonstrates how to use the 'result' property to check if a value is an instance of the Result class. This works for both Success and Failure types.

LANGUAGE: javascript
CODE:
expect(Success('Some String')).to.be.a.result
expect(Failure(new Error('Failure...'))).to.be.a.result

----------------------------------------

TITLE: Customizing output promises in chai-as-promised
DESCRIPTION: Shows how to customize the promises returned by chai-as-promised assertions by overriding the transferPromiseness function.

LANGUAGE: javascript
CODE:
chaiAsPromised.transferPromiseness = function (assertion, promise) {
    assertion.then = promise.then.bind(promise); // this is all you get by default
    assertion.finally = promise.finally.bind(promise);
    assertion.done = promise.done.bind(promise);
};

----------------------------------------

TITLE: Testing EventEmitter Using chai-eventemitter
DESCRIPTION: Simplified testing approach using the chai-eventemitter plugin assertions.

LANGUAGE: javascript
CODE:
expect(function(){ ee.emit('test') }).to.emitFrom(ee, 'test')
expect(function(){ ee.emit('test', arg) }).to.emitFrom(ee, 'test', arg)

----------------------------------------

TITLE: Installing Chai-Backbone with AMD
DESCRIPTION: Demonstrates how to load and configure chai-backbone as an AMD module using define and require.

LANGUAGE: javascript
CODE:
define(function (require, exports, module) {
    var chai = require("chai");
    var chaiBackbone = require("chai-backbone");

    chai.use(chaiBackbone);
});

----------------------------------------

TITLE: Setting up chai-jscodeshift in JavaScript
DESCRIPTION: This snippet demonstrates how to import and set up the chai-jscodeshift plugin with Chai.

LANGUAGE: javascript
CODE:
import chai from 'chai';
import chaiJSCodeShift from 'chai-jscodeshift';
chai.use(chaiJSCodeShift());

----------------------------------------

TITLE: Importing Jest-Kefir with ES Modules
DESCRIPTION: Example showing how to import jest-kefir and Kefir using ES Module syntax

LANGUAGE: javascript
CODE:
import Kefir from 'kefir'
import jestKefir from 'jest-kefir'

----------------------------------------

TITLE: Initializing Chai Spies in Node.js
DESCRIPTION: Shows how to require and use chai-spies in a Node.js environment, including setting up chai, spies, and assertion styles.

LANGUAGE: javascript
CODE:
const chai = require('chai')
  , spies = require('chai-spies');

chai.use(spies);

const should = chai.should()
  , expect = chai.expect;

----------------------------------------

TITLE: Using strict momentFormat Assertion without Locale
DESCRIPTION: Example of using the strict momentFormat assertion to validate a date string without specifying a locale.

LANGUAGE: javascript
CODE:
expect('2018-01-26').to.momentFormat.strict('YYYY-MM-DD');

----------------------------------------

TITLE: Using chai-eventemitter2 with Expect API
DESCRIPTION: Example of using chai-eventemitter2 with the Expect API. It demonstrates how to test various event emissions on an EventEmitter instance.

LANGUAGE: javascript
CODE:
const emitter = new EventEmitter();

expect(emitter).to.be.an.eventEmitter;

expect(emitter)
	.to.emit('foo')
	.to.emit('bar', {count: 2})
	.to.emit('baz', {withArgs: ['X', 'Y', 'Z']})
	.to.emit('error', {count: 0})
	.on(() =>
	{
		emitter.emit('foo');
		emitter.emit('bar');
		emitter.emit('bar');
		emitter.emit('baz', 'X', 'Y', 'Z');
	});

----------------------------------------

TITLE: Including chai-iterator via HTML Script Tag
DESCRIPTION: Demonstrates how to include chai-iterator in an HTML file using a script tag.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-iterator.js"></script>

----------------------------------------

TITLE: Exposing Globals in Chai Plugin (Potential Issues)
DESCRIPTION: Shows two examples of exposing globals in Chai plugins that may lead to issues when trying to use the global across multiple files.

LANGUAGE: javascript
CODE:
const myGlobal = {...};

export default function myPlugin(chai, utils) {
  chai.myGlobal = myGlobal;
}

LANGUAGE: javascript
CODE:
export default function myPlugin(chai, utils) {
  chai.myGlobal = {...};
}

----------------------------------------

TITLE: Importing Jest-Kefir with CommonJS
DESCRIPTION: Example showing how to require jest-kefir and Kefir using CommonJS syntax

LANGUAGE: javascript
CODE:
const Kefir = require('kefir')
const {use} = require('chai')
const jestKefir = require('jest-kefir').default

----------------------------------------

TITLE: Using Sum Assertions
DESCRIPTION: Shows how to use sum assertions to test the sum of an array of numbers

LANGUAGE: javascript
CODE:
expect([ 1, 2, 3 ]).to.have.sum.equal(6);
expect([ 1, 2, 3 ]).to.have.sum.above(5);
expect([ 1, 2, 3 ]).to.have.sum.below(7);

----------------------------------------

TITLE: Asserting Response Cookies with Node Fetch Response Matchers in JavaScript
DESCRIPTION: Demonstrates how to assert the presence and value of cookies in the response using the node-fetch-response-matchers plugin.

LANGUAGE: javascript
CODE:
it('have cookie', () => {
  return expect(fetch('http://localhost/').to.haveCookie('foo', 'bar');
});

----------------------------------------

TITLE: Checking File and Directory Existence
DESCRIPTION: Examples of asserting whether files or directories exist using chai-files.

LANGUAGE: javascript
CODE:
expect(file('index.js')).to.exist;
expect(file('index.coffee')).to.not.exist;

expect(dir('foo')).to.exist;
expect(dir('missing')).to.not.exist;

----------------------------------------

TITLE: Initializing chai-match Plugin
DESCRIPTION: JavaScript code to require and initialize the chai-match plugin with Chai.js testing framework.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-match'));

----------------------------------------

TITLE: Negative Testing with chai-rx
DESCRIPTION: Demonstrates how to use the 'not' chain for negative assertions in Observable testing.

LANGUAGE: javascript
CODE:
const const xs = scheduler.createHotObservable(onNext(250));
const output = scheduler.startScheduler(() => xs);

// with `not`
expect(output).to.not.emit([
  onNext(300)
]);

----------------------------------------

TITLE: Including Chai Spies in Browser
DESCRIPTION: Demonstrates how to include chai-spies.js in a browser environment after chai.js.

LANGUAGE: xml
CODE:
<script src="chai-spies.js"></script>

----------------------------------------

TITLE: Using spy.on Method
DESCRIPTION: Examples of adding spies to existing object methods with optional custom implementations

LANGUAGE: javascript
CODE:
const array = [1, 2, 3];

chai.spy.on(array, 'push');

// or multiple spies
chai.spy.on(array, ['push', 'pop']);

LANGUAGE: javascript
CODE:
chai.spy.on(array, 'push', function (...items) {
  // custom implementation of `push` method
});

LANGUAGE: javascript
CODE:
chai.spy.on(array, 'push', () => 5);

// or more readable :)
chai.spy.on(array, 'push', returns => 5);

----------------------------------------

TITLE: Initializing Chai BigNumber Plugin
DESCRIPTION: Examples showing how to initialize the chai-bignumber plugin with either default or custom BigNumber implementation.

LANGUAGE: javascript
CODE:
var chai = require('chai');

//use default BigNumber
chai.use(require('chai-bignumber')());

//use custom BigNumber
chai.use(require('chai-bignumber')(BigNumber));

----------------------------------------

TITLE: Checking File Content Contains String
DESCRIPTION: Examples of checking if a file's content contains specific strings.

LANGUAGE: javascript
CODE:
expect(file('foo.txt')).to.contain('foo');
expect(file('foo.txt')).to.not.contain('bar');

----------------------------------------

TITLE: Chai Image Plugin Setup
DESCRIPTION: Setup code showing how to import and configure the chai-image plugin with different assertion styles

LANGUAGE: typescript
CODE:
import * as chai from "chai";
import { chaiImage } from "chai-image";

chai.use(chaiImage);

// Then either:
const expect = chai.expect;
// or:
const assert = chai.assert;
// or:
chai.should();
// according to your preference of assertion style

----------------------------------------

TITLE: Using chai-parentheses with sinon-chai
DESCRIPTION: Example of how chai-parentheses affects other Chai plugins, specifically sinon-chai, converting property assertions to method assertions.

LANGUAGE: javascript
CODE:
spy.should.have.been.called();
spy.should.have.been.calledOnce();
spy.should.have.been.calledTwice();

----------------------------------------

TITLE: Setting Up chai-semver in a JavaScript Test File
DESCRIPTION: Code snippet showing how to require and set up the chai-semver plugin in a JavaScript test file. It demonstrates importing chai and chai-semver, then using the plugin with chai.

LANGUAGE: javascript
CODE:
const chai = require('chai')
const chaiSemver = require('chai-semver')

chai.use(chaiSemver)

----------------------------------------

TITLE: Complete Should-Style Test Example
DESCRIPTION: Full example demonstrating Sinon-Chai usage with Chai's should syntax.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
chai.should();
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        cb.should.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Integrating chai-jq in a standard browser environment
DESCRIPTION: HTML snippet showing how to include chai-jq in a standard browser page after Chai.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-jq.js"></script>

----------------------------------------

TITLE: Installing Chai Increasing Plugin
DESCRIPTION: Installation instructions using npm and setup with Chai.js.

LANGUAGE: bash
CODE:
npm install chai-increasing --save-dev

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-increasing'));

----------------------------------------

TITLE: Using containSubset Assertion with Chai Expect
DESCRIPTION: Demonstrates how to use the containSubset assertion with Chai's expect syntax, including nested objects and compare functions.

LANGUAGE: javascript
CODE:
var obj = {
	a: 'b',
	c: 'd',
	e: {
		foo: 'bar',
		baz: {
			qux: 'quux'
		}
	}
};
	
expect(obj).to.containSubset({
	a: 'b',
	e: {
		baz: {
			qux: 'quux'
		}
	}
});

// or using a compare function
expect(obj).containSubset({
	a: (expectedValue) => expectedValue,
	c: (expectedValue) => expectedValue === 'd'
})

// or with 'not'
expect(obj).to.not.containSubset({
	g: 'whatever'
});

----------------------------------------

TITLE: TypeScript Setup and Usage
DESCRIPTION: Example of setting up and using Chai Smoothie in a TypeScript project

LANGUAGE: typescript
CODE:
import chai = require('chai');
chai.use(require('chai-smoothie'));
const expect = chai.expect;

expect(element(by.css('h1'))).to.be.present;

----------------------------------------

TITLE: Including chai-change in browser
DESCRIPTION: HTML script tag to include the chai-change plugin in a browser environment after loading Chai.

LANGUAGE: html
CODE:
<script src="chai-change.js"></script>

----------------------------------------

TITLE: Transforming asserter arguments in chai-as-promised
DESCRIPTION: Demonstrates how to transform arguments passed to chai-as-promised asserters using the transformAsserterArgs function.

LANGUAGE: javascript
CODE:
chaiAsPromised.transformAsserterArgs = function (args) {
    return args.map(function (x) { return x + 1; });
}

Promise.resolve(2).should.eventually.equal(2); // will now fail!
Promise.resolve(3).should.eventually.equal(2); // will now pass!

----------------------------------------

TITLE: Initializing chai-json plugin
DESCRIPTION: Code to include and initialize the chai-json plugin with Chai assertion library

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-json'));

----------------------------------------

TITLE: Alternative Terminology for Chai Increasing
DESCRIPTION: Shows alternative terminology using nondecreasing/nonincreasing aliases for increasing/decreasing.

LANGUAGE: javascript
CODE:
expect([1,1,1]).to.be.increasing;
expect([1,1,1]).to.be.nondecreasing;

----------------------------------------

TITLE: Using ContainSubset with Assert Interface
DESCRIPTION: Demonstrates using containSubset with Chai's assert interface

LANGUAGE: javascript
CODE:
assert.containSubset({a: 1, b: 2}, {a: 1});

----------------------------------------

TITLE: Using Chai WebDriver Promised Assertions in JavaScript
DESCRIPTION: Demonstrates basic usage of chai-webdriver-promised assertions for testing DOM elements.

LANGUAGE: javascript
CODE:
expect('.frequency-field').dom.to.contain.text('One time')
expect('.toggle-pane').dom.to.eventually.not.be.visible()

----------------------------------------

TITLE: Using Chai Exec Async for Asynchronous CLI Testing
DESCRIPTION: Example of using Chai Exec Async for asynchronous CLI testing with async/await syntax.

LANGUAGE: javascript
CODE:
const { chaiExecAsync } = require("@jsdevtools/chai-exec");
const chai = require("chai");

chai.use(chaiExecAsync);

describe("My CLI", () => {
  it("should exit with a zero exit code", async () => {
    // Run your CLI
    let myCLI = await chaiExecAsync('my-cli --arg1 --arg2 "some other arg"');

    // Should syntax
    myCLI.should.exit.with.code(0);
    myCLI.stdout.should.contain("Success!");
    myCLI.stderr.should.be.empty;

    // Expect sytnax
    expect(myCLI).to.exit.with.code(0);
    expect(myCLI).stdout.to.contain("Success!");
    expect(myCLI).stderr.to.be.empty;

    // Assert syntax
    assert.exitCode(myCLI, 0);
    assert.stdout(myCLI, "Success!");
    assert.stderr(myCLI, "");
  });
});

----------------------------------------

TITLE: Asserting Cache Control Directives with Node Fetch Response Matchers in JavaScript
DESCRIPTION: Shows examples of asserting various cache control directives in the response using the node-fetch-response-matchers plugin.

LANGUAGE: javascript
CODE:
it('must-revalidate', () => {
  return expect(fetch('http://localhost/').to.have.cacheControlMustRevalidate();
});
it('max-age', () => {
     return expect(fetch('http://localhost/').to.have.cacheControlmMaxAge(120);
});

----------------------------------------

TITLE: Setting up chai-eventemitter2 in test environment
DESCRIPTION: JavaScript code to set up the chai-eventemitter2 plugin in the test environment. It requires chai and the plugin, then adds the plugin to chai.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const eventemitter2 = require('chai-eventemitter2');

chai.use(eventemitter2());

----------------------------------------

TITLE: Configuring Sinon-Chai as an AMD Module
DESCRIPTION: This example demonstrates how to use Sinon-Chai as an AMD module, assuming the loader is configured to map Chai and Sinon-Chai files to their respective module IDs.

LANGUAGE: javascript
CODE:
define(function (require, exports, module) {
    var chai = require("chai");
    var sinonChai = require("sinon-chai");

    chai.use(sinonChai);
});

----------------------------------------

TITLE: Testing Time-based Emissions
DESCRIPTION: Example of testing time-based emissions using jest-kefir's toEmitInTime matcher

LANGUAGE: javascript
CODE:
const expected = [[0, value(1)], [10, error(new Error('whoops!'))], [20, end()]]

expect(obs).toEmitInTime(expected, (tick, clock) => {
  send(obs, [value(1)])
  tick(10)
  send(obs, [error(new Error('whoops!'))])
  tick(10)
  send(obs, [end()])
})

----------------------------------------

TITLE: Initializing Chai SuperAgent Plugin
DESCRIPTION: Setup code for incorporating the chai-superagent plugin into Chai. The plugin can be configured with a strict option to enforce type checking.

LANGUAGE: javascript
CODE:
import { use } from 'chai';
import superagent from 'chai-superagent';

use(superagent());

----------------------------------------

TITLE: Non-Eager Chain Matching Example
DESCRIPTION: Demonstrates how the chain works non-eagerly, matching against all elements rather than just the first one found.

LANGUAGE: javascript
CODE:
expect(<div><span></span><span>hello</span></div>).to.include.elementOfType('span').with.text('hello');

----------------------------------------

TITLE: Handling Responses with Promises in Chai HTTP
DESCRIPTION: Example of handling HTTP responses using Promises in Chai HTTP, including chaining and error handling.

LANGUAGE: javascript
CODE:
chai.request(app)
  .put('/user/me')
  .send({ password: '123', confirmPassword: '123' })
  .then((res) => {
     expect(res).to.have.status(200);
  })
  .catch((err) => {
     throw err;
  });

----------------------------------------

TITLE: Setting up Sinon-Chai with Chai's 'should' Interface
DESCRIPTION: This example shows how to set up Sinon-Chai with Chai's 'should' interface. It includes requiring the necessary modules, setting up Chai to use 'should', and using Sinon-Chai assertions in a test case.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
chai.should();
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        cb.should.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: Browser Setup - HTML
DESCRIPTION: Shows how to include chai-generator plugin in a browser environment.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-generator.js"></script>

----------------------------------------

TITLE: Initializing chai-assertions-count Plugin
DESCRIPTION: Shows how to initialize and use the plugin with Chai.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiAssertionsCount = require('chai-assertions-count');

chai.use(chaiAssertionsCount);

----------------------------------------

TITLE: Installing chai-rx-assert via npm
DESCRIPTION: Command to install the chai-rx-assert plugin using npm package manager.

LANGUAGE: bash
CODE:
npm install chai-rx-assert

----------------------------------------

TITLE: Installing Dependencies and Running Chai Docs Server
DESCRIPTION: Commands to install dependencies and start the Chai documentation server. This assumes you have the necessary prerequisites installed.

LANGUAGE: sh
CODE:
$ make install
$ make

----------------------------------------

TITLE: Sinon-Chai Should Interface Example
DESCRIPTION: Complete example demonstrating Sinon-Chai usage with Chai's should interface.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
chai.should();
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        cb.should.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: MongoDB ObjectId Assertions in Chai
DESCRIPTION: Demonstrates integration with MongoDB ObjectIds for ID comparisons.

LANGUAGE: javascript
CODE:
doc.should.have.id(new ObjectId())
doc.should.have.same.id(otherDoc)
(new ObjectId()).should.id(doc)

----------------------------------------

TITLE: Initializing Chai-Subset Plugin
DESCRIPTION: Shows how to require and initialize the chai-subset plugin with Chai assertion library

LANGUAGE: javascript
CODE:
var chai = require('chai');
var chaiSubset = require('chai-subset');
chai.use(chaiSubset);

----------------------------------------

TITLE: Using chai-counting plugin in JavaScript
DESCRIPTION: Example of how to require and use the chai-counting plugin with the Chai assertion library in JavaScript.

LANGUAGE: JavaScript
CODE:
const chai = require('chai');
const chaiCounting = require('chai-counting');
chai.use(chaiCounting);

----------------------------------------

TITLE: Using chai-shallowly for React component testing with Enzyme
DESCRIPTION: Demonstrates the basic usage of chai-shallowly to test a React component's class. The 'shallowly' keyword is required to use the shallow rendering API.

LANGUAGE: jsx
CODE:
let component = <Foo />;
expect(component).to.shallowly.haveClass("this-is-a-class");

----------------------------------------

TITLE: Installing Dependencies on Debian Linux
DESCRIPTION: Commands to install Git, Node.js, and Ruby on Debian-based Linux distributions. Note that the Node.js version might be outdated and may require additional steps to install a newer version.

LANGUAGE: sh
CODE:
$ sudo apt-get install -y git nodejs ruby

----------------------------------------

TITLE: Installing and Importing Chai JSON Pattern
DESCRIPTION: Shows how to install the chai-json-pattern package via npm and import it into a test file for use with Chai assertions.

LANGUAGE: bash
CODE:
npm install --save-dev chai-json-pattern

LANGUAGE: javascript
CODE:
import chai, { expect } from 'chai';
import chaiJsonPattern from 'chai-json-pattern';

chai.use(chaiJsonPattern);

expect({ a: 2 }).to.matchPattern(`{
    "a": Number AND range(0, 5),
}`);

----------------------------------------

TITLE: Requested Assertion Example
DESCRIPTION: Demonstrates how to assert that a request has been made to a nocked endpoint.

LANGUAGE: javascript
CODE:
it('requested', () => {
  const requestNock = nock('http://bbc.co.uk')
    .get('/')
    .reply(200);

  request({
    uri: 'http://bbc.co.uk',
  });

  return expect(requestNock).to.have.been.requested;
});

----------------------------------------

TITLE: Creating Mock Objects with spy.interface
DESCRIPTION: Demonstrates how to create mock objects or spy interfaces using chai.spy.interface, with and without custom implementations.

LANGUAGE: javascript
CODE:
const eventBus = chai.spy.interface(['on', 'off', 'emit']);

// with implementation
const arrayLike = chai.spy.interface({
  push(item) {
    this.__items = this.__items || [];
    return this.__items.push(item)
  },
  // other methods
});

arrayLike.push(5);

----------------------------------------

TITLE: Initializing and Using chai-postman Plugin
DESCRIPTION: Example showing how to set up and use the chai-postman plugin with Postman Collection SDK. Demonstrates creating request/response objects and making assertions on them using the plugin's custom matchers.

LANGUAGE: javascript
CODE:
var _ = require('lodash'),
    chai = require('chai'),
    sdk = require('postman-collection'),
    chaiPostman = require('chai-postman'),

    req,
    res,
    expect = chai.expect;

chai.use(chaiPostman(sdk, _));

// create postman-collection request and response instances
req = new sdk.Request({
    header: [{
        key: 'Content-Type',
        value: 'application/json; charset=utf-8'
    }]
});
res = new sdk.Response({ code: 200 });

// request assertions
expect(req).to.be.a.postmanRequest;
expect(req).to.have.header('Content-Type'); // an optional second argument can also be provided to assert value

// response assertions
expect(res).to.be.a.postmanResponse;
expect(res).to.have.statusCode(200);

----------------------------------------

TITLE: Installing Chai Shallow Deep Equal in Node.js
DESCRIPTION: Demonstrates how to require and configure the chai-shallow-deep-equal plugin in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require('chai');
chai.use(require('chai-shallow-deep-equal'));

----------------------------------------

TITLE: Running Chai Documentation Server
DESCRIPTION: Commands to generate required data and start the Jekyll server for hosting the Chai documentation website locally.

LANGUAGE: sh
CODE:
$ make generated_data
$ make docs-server

----------------------------------------

TITLE: Using Sinon-Chai Assertions
DESCRIPTION: Example of using Sinon-Chai assertions, which provides a more natural and readable syntax for testing Sinon.JS spies.

LANGUAGE: javascript
CODE:
mySpy.should.have.been.calledWith("foo");
expect(mySpy).to.have.been.calledWith("foo");

----------------------------------------

TITLE: API Response Validation Test Example
DESCRIPTION: Complete example showing how to write a test that validates an HTTP response against an OpenAPI spec

LANGUAGE: javascript
CODE:
// Set up Chai
import chai from 'chai';
const expect = chai.expect;

// Import this plugin
import chaiResponseValidator from 'chai-openapi-response-validator';

// Load an OpenAPI file (YAML or JSON) into this plugin
chai.use(chaiResponseValidator('path/to/openapi.yml'));

// Write your test (e.g. using Mocha)
describe('GET /example/endpoint', () => {
  it('should satisfy OpenAPI spec', async () => {
    // Get an HTTP response from your server (e.g. using axios)
    const res = await axios.get('http://localhost:3000/example/endpoint');

    expect(res.status).to.equal(200);

    // Assert that the HTTP response satisfies the OpenAPI spec
    expect(res).to.satisfyApiSpec;
  });
});

----------------------------------------

TITLE: Setting up sinon-chai-in-order in JavaScript Tests
DESCRIPTION: This snippet demonstrates how to set up and use the sinon-chai-in-order plugin in JavaScript tests, along with sinon-chai.

LANGUAGE: javascript
CODE:
import chai, {expect} from 'chai';
import sinonChai from 'sinon-chai';
import sinonChaiInOrder from 'sinon-chai-in-order';

chai.use(sinonChai);
chai.use(sinonChaiInOrder);

----------------------------------------

TITLE: Basic Chai Shallow Deep Equal Usage
DESCRIPTION: Shows the three different assertion styles available for using shallow deep equal comparisons with Chai.

LANGUAGE: javascript
CODE:
var a = {name: 'Michel', language: 'javascript'};
var b = {name: 'Michel'};

a.should.shallowDeepEqual(b);
expect(a).to.shallowDeepEqual(b);
assert.shallowDeepEqual(a, b);

----------------------------------------

TITLE: Including Chai DynamoDB Plugin in Browser
DESCRIPTION: Instructions for including the chai-dynamodb plugin in browser-side code via script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-dynamodb.js"></script>

----------------------------------------

TITLE: Installing Chai-Backbone via Script Tags
DESCRIPTION: Shows how to include chai-backbone directly in HTML using script tags.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="chai-backbone.js"></script>

----------------------------------------

TITLE: Sinon Assert Integration
DESCRIPTION: Example of integrating Sinon assertions directly into Chai's assert object.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var sinon = require("sinon");

sinon.assert.expose(chai.assert, { prefix: "" });

----------------------------------------

TITLE: Asserting jQuery text content with chai-jquery
DESCRIPTION: Shows how to use chai-jquery to assert the text content of jQuery objects using the 'text' assertion.

LANGUAGE: javascript
CODE:
$('.name').should.have.text('John Doe');
expect($('#title')).to.have.text('Chai Tea');

----------------------------------------

TITLE: Installing Chai Checkmark with AMD
DESCRIPTION: How to include and initialize the chai-checkmark plugin using AMD (Asynchronous Module Definition).

LANGUAGE: javascript
CODE:
require(["chai", "chai-checkmark"], function(chai, plugin) {
    chai.use(plugin)
})

----------------------------------------

TITLE: Using chai-as-promised with notify for non-returning contexts
DESCRIPTION: Demonstrates how to use chai-as-promised in testing frameworks that don't allow returning promises.

LANGUAGE: javascript
CODE:
doSomethingAsync().should.eventually.equal("foo").notify(done);

----------------------------------------

TITLE: Using chai-http plugin with Chai in JavaScript ESM
DESCRIPTION: Shows how to import and use the chai-http plugin with Chai in ECMAScript modules. This setup allows for HTTP request testing.

LANGUAGE: javascript
CODE:
import * as chai from 'chai';
import { request, default as chaiHttp } from 'chai-http';

chai.use(chaiHttp);

// Now you can use `chai-http` using the `request` function.

----------------------------------------

TITLE: Customizing fixture paths for chai-jscodeshift in JavaScript
DESCRIPTION: This example demonstrates how to customize the input and output fixture paths used by chai-jscodeshift.

LANGUAGE: javascript
CODE:
chai.use(chaiJSCodeShift({
  fixtureDirectory: path.join(__dirname, 'fixtures'),
  inputFixturePath(fixtureName, fixtureDirectory) {
    return path.join(fixtureDirectory, 'input', `${fixtureName}.js`);
  },
  inputFixturePath(fixtureName, fixtureDirectory) {
    return path.join(fixtureDirectory, 'output', `${fixtureName}.js`);
  },
}));

----------------------------------------

TITLE: Complete Expect Example
DESCRIPTION: Full example demonstrating Sinon-Chai usage with Chai's expect interface.

LANGUAGE: javascript
CODE:
"use strict";
var chai = require("chai");
var sinon = require("sinon");
var sinonChai = require("sinon-chai");
var expect = chai.expect;
chai.use(sinonChai);

function hello(name, cb) {
    cb("hello " + name);
}

describe("hello", function () {
    it("should call callback with correct greeting", function () {
        var cb = sinon.spy();

        hello("foo", cb);

        expect(cb).to.have.been.calledWith("hello foo");
    });
});

----------------------------------------

TITLE: AMD Module Integration Example
DESCRIPTION: Example of using Sinon-Chai with AMD module system.

LANGUAGE: javascript
CODE:
define(function (require, exports, module) {
    var chai = require("chai");
    var sinonChai = require("sinon-chai");

    chai.use(sinonChai);
});

----------------------------------------

TITLE: Deep Yield Assertions - JavaScript
DESCRIPTION: Shows how to use deep equality checking with yield assertions.

LANGUAGE: javascript
CODE:
expect(generator).to.deep.yield([1, 2, 3])
generator.should.deep.yield([1, 2, 3])
assert.deepYield([1, 2, 3])

----------------------------------------

TITLE: Implementing API Contract Validation with Should.js
DESCRIPTION: Example demonstrating how to use the validator plugin with Should.js testing framework.

LANGUAGE: javascript
CODE:
const matchApiSchema = require('api-contract-validator').shouldPlugin;

// API definitions path
const apiDefinitionsPath = path.join(__dirname, 'myApp.yaml');

// add as should plugin
matchApiSchema(should, { apiDefinitionsPath });

it('GET /pets/123', async () => {
    const response = await request.get('/pet/123');
    should(response).have.status(200).and.matchApiSchema();
})

----------------------------------------

TITLE: Using 'should' with chai-changes in CoffeeScript
DESCRIPTION: Shows how to use the 'should' style with chai-changes to assert changes in code execution.

LANGUAGE: coffeescript
CODE:
(-> codeThatYieldsAChangedResult).should....when ->
  executeTheCodeThatCausesTheChange()

----------------------------------------

TITLE: Using sinon-chai-in-order for Fluent In-Order Assertions in JavaScript
DESCRIPTION: This snippet demonstrates how to use the sinon-chai-in-order plugin to create more fluent and readable in-order assertions for spy calls.

LANGUAGE: javascript
CODE:
expect(spy).inOrder.to.have.been.calledWith(1)
                   .subsequently.calledWith(2)
                   .subsequently.calledWith(3);

----------------------------------------

TITLE: Testing for ascending sort order using .ascending property
DESCRIPTION: Demonstrates how to use the .ascending property to test if an array is sorted in ascending order.

LANGUAGE: javascript
CODE:
expect(["a","b"]).to.be.ascending

----------------------------------------

TITLE: Using Chai Assertions on Spy Properties
DESCRIPTION: Example of using Chai's should or expect interfaces on spy properties, which is awkward and not recommended when using Sinon-Chai.

LANGUAGE: javascript
CODE:
mySpy.calledWith("foo").should.be.ok;
expect(mySpy.calledWith("foo")).to.be.ok;

----------------------------------------

TITLE: Using Language Chains with ChaiRx in JavaScript
DESCRIPTION: This snippet demonstrates the use of language chains, specifically the 'not' chain, with ChaiRx assertions.

LANGUAGE: javascript
CODE:
const const xs = scheduler.createHotObservable(onNext(250));
const output = scheduler.startScheduler(() => xs);

// with `not`
expect(output).to.not.emit([
  onNext(300)
]);

----------------------------------------

TITLE: Using chai-change with assert API
DESCRIPTION: Examples of using the chai-change plugin with Chai's assert API, demonstrating both alters and unaltered assertions.

LANGUAGE: javascript
CODE:
let x = 0;
assert.alters(changer, changeWatcher);

function changer() { x += 1; }
function changeWatcher() { return x }

assert.alters(() => { x += 1 }, () => x, { by: 1 });
assert.alters(() => { x += 1 }, () => x, { from: x });
assert.alters(() => { x += 1 }, () => x, { from: x, to: x + 1 });
assert.alters(() => { x += 1 }, () => x, { to: x + 1 });

let x = 0;
const noop = () => undefined;
assert.unaltered(noop, () => x);

----------------------------------------

TITLE: Using Request Agent for Cookies
DESCRIPTION: Example demonstrating how to retain cookies between requests using an agent

LANGUAGE: javascript
CODE:
var agent = chai.request.agent(app)
agent
  .post('/session')
  .send({ username: 'me', password: '123' })
  .then(function (res) {
    expect(res).to.have.cookie('sessionid');
    return agent.get('/user/me')
      .then(function (res) {
         expect(res).to.have.status(200);
      });
  });

----------------------------------------

TITLE: Setting Up Chai WebDriver Promised in JavaScript
DESCRIPTION: Demonstrates how to set up and configure chai-webdriver-promised with Selenium WebDriver and Chai.

LANGUAGE: javascript
CODE:
// Start with a webdriver instance:
var sw = require('selenium-webdriver');
var driver = new sw.Builder()
  .withCapabilities(sw.Capabilities.chrome())
  .build()

//optional timeout in ms to use with eventually (defaults to 1000)
var timeout = 15000;
//optional interval in ms to use when polling (defaults to 200)
var interval = 100;

// And then...
var chai = require('chai');
var chaiWebdriver = require('chai-webdriver-promised');
chai.use(chaiWebdriver(driver, timeout, interval));

// And you're good to go!
chai.describe('kitty test', function() {
  chai.before(function(done) {
    driver.get('http://github.com').then(done);
  });
  it('should not find a kitty', function() {
    return chai.expect('#site-container h1.heading').dom.to.not.contain.text("I'm a kitty!");
  });
});

----------------------------------------

TITLE: Using chai-as-promised with traditional promise handling
DESCRIPTION: Demonstrates the traditional way of asserting promise results using callback functions.

LANGUAGE: javascript
CODE:
doSomethingAsync().then(
    function (result) {
        result.should.equal("foo");
        done();
    },
    function (err) {
       done(err);
    }
);

----------------------------------------

TITLE: Checking Element Emptiness with Chai-DOM in JavaScript
DESCRIPTION: Shows how to use the 'empty' assertion to verify if an element or NodeList has no child nodes.

LANGUAGE: javascript
CODE:
document.querySelector('.empty').should.be.empty
expect(document.querySelector('section')).not.to.be.empty

----------------------------------------

TITLE: Installing Chai-Backbone with Node.js
DESCRIPTION: Shows how to install and configure chai-backbone in a Node.js environment using npm and require statements.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var chaiBackbone = require("chai-backbone");

chai.use(chaiBackbone);

----------------------------------------

TITLE: BigNumber Assertions with Rounding
DESCRIPTION: Examples demonstrating how to use assertions with decimal place rounding and custom rounding modes.

LANGUAGE: javascript
CODE:
var BigNumber = require('bignumber.js');
(100.343).should.be.bignumber.equal(100.341, 2);
(100.349).should.be.bignumber.equal(100.341, 2, BigNumber.ROUND_DOWN);

----------------------------------------

TITLE: BigNumber Assertions with Rounding
DESCRIPTION: Examples demonstrating how to use assertions with decimal place rounding and custom rounding modes.

LANGUAGE: javascript
CODE:
var BigNumber = require('bignumber.js');
(100.343).should.be.bignumber.equal(100.341, 2);
(100.349).should.be.bignumber.equal(100.341, 2, BigNumber.ROUND_DOWN);

----------------------------------------

TITLE: Asserting Fetch Response Using Node Fetch Response Matchers in JavaScript
DESCRIPTION: Demonstrates the declarative syntax for asserting a successful fetch response with specific body text using the node-fetch-response-matchers plugin.

LANGUAGE: javascript
CODE:
it('some-test', function(){
  return expect(fetch('http://localhost/')).to.be.successful()
                         .and.to.haveBodyText('foo');
});

----------------------------------------

TITLE: Chai as Promised Assertions with should/expect Interface in JavaScript
DESCRIPTION: Illustrates various promise-specific assertions using the should/expect interface of Chai as Promised.

LANGUAGE: javascript
CODE:
return promise.should.be.fulfilled;
return promise.should.eventually.deep.equal("foo");
return promise.should.become("foo"); // same as `.eventually.deep.equal`
return promise.should.be.rejected;
return promise.should.be.rejectedWith(Error); // other variants of Chai's `throw` assertion work too.

----------------------------------------

TITLE: Using chai-cron for cron expression assertions in JavaScript
DESCRIPTION: Example of how to use chai-cron plugin with Chai to assert cron time expressions. It demonstrates importing the plugin, adding it to Chai, and using various assertion methods.

LANGUAGE: javascript
CODE:
const chai = require('chai');
const chaiCron = require('chai-cron');

const { expect } = chai;

chai.use(chaiCron);

expect('0 0 1,15 * *').to.be.cron();
expect('0 0 1,15 * *').to.be.cronTime();
expect('0 0 1,15 * *').to.be.a.cronExpression();
expect('0 0 1,15 * *').to.be.a.cronTimeExpression();

----------------------------------------

TITLE: Handling Promises with chai-changes in CoffeeScript
DESCRIPTION: Demonstrates how to use chai-changes with promises, including notifying Mocha's 'done' callback.

LANGUAGE: coffeescript
CODE:
expect(-> value).to.change.when(
  -> promise
  notify: done
)

LANGUAGE: coffeescript
CODE:
expect(-> value).to.change.when(-> promise).then
  -> done()
  (error) -> done(error)

----------------------------------------

TITLE: Handling Promises with chai-changes in CoffeeScript
DESCRIPTION: Demonstrates how to use chai-changes with promises, including notifying Mocha's 'done' callback.

LANGUAGE: coffeescript
CODE:
expect(-> value).to.change.when(
  -> promise
  notify: done
)

LANGUAGE: coffeescript
CODE:
expect(-> value).to.change.when(-> promise).then
  -> done()
  (error) -> done(error)

----------------------------------------

TITLE: Asserting HTTP Status with Node Fetch Response Matchers in JavaScript
DESCRIPTION: Shows examples of asserting HTTP status codes using the node-fetch-response-matchers plugin, including both predefined status matchers and custom status assertions.

LANGUAGE: javascript
CODE:
it('http success test', function(){
   return expect(fetch('http://localhost/')).to.be.successful();
});
it('http status assert', function(){
     return expect(fetch('http://localhost/')).to.haveStatus(500);
});

----------------------------------------

TITLE: Overwriting Existing Chai Property
DESCRIPTION: Overwrites the 'ok' property to provide custom behavior for Model instances while preserving original functionality.

LANGUAGE: javascript
CODE:
chai.overwriteProperty('ok', function (_super) {
  return function checkModel () {
    const obj = this._obj;
    if (obj && obj instanceof Model) {
      new Assertion(obj).to.have.deep.property('_attrs.id');
      const assertId = new Assertion(obj._attrs.id, 'model assert ok id type');
      utils.transferFlags(this, assertId, false);
      assertId.is.a('number');
    } else {
      _super.call(this);
    }
  };
});

----------------------------------------

TITLE: Installing dirty-chai with npm
DESCRIPTION: Command to install the dirty-chai plugin using npm as a development dependency.

LANGUAGE: bash
CODE:
npm install dirty-chai --save-dev

----------------------------------------

TITLE: Testing Generic IP Address Validation
DESCRIPTION: Examples of asserting valid IP addresses using the .ip assertion for both IPv4 and IPv6.

LANGUAGE: javascript
CODE:
expect('127.0.0.1').to.be.an.ip;
expect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;

----------------------------------------

TITLE: Traditional Chai Assertion Examples
DESCRIPTION: Shows awkward traditional Chai assertions with Sinon spies.

LANGUAGE: javascript
CODE:
mySpy.calledWith("foo").should.be.ok;
expect(mySpy.calledWith("foo")).to.be.ok;

----------------------------------------

TITLE: Including Sinon-Chai via Script Tags
DESCRIPTION: HTML snippet showing how to include Sinon-Chai directly in a web page using script tags, along with its dependencies.

LANGUAGE: html
CODE:
<script src="chai.js"></script>
<script src="sinon-chai.js"></script>
<script src="sinon.js"></script>

----------------------------------------

TITLE: Using jQuery CSS Assertions
DESCRIPTION: Examples of using the css() assertion to check element CSS properties using jQuery's .css() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.css('background');
expect($('body')).to.have.css('background-color', 'rgb(0, 0, 0)');
expect($('body')).to.have.css('font-family').match(/sans-serif/);

----------------------------------------

TITLE: Custom Error Messages with dirty-chai
DESCRIPTION: Examples of using custom error messages with dirty-chai assertions. It shows how to provide custom messages for both mid-chain and end-of-chain assertions.

LANGUAGE: javascript
CODE:
expect(true).to.be.true.and.not.false('Reason: Paradox');
expect(true).to.be.true('The fabric of logic has torn').and.not.false();

----------------------------------------

TITLE: Using chai-as-promised for simplified promise assertions
DESCRIPTION: Shows how to use chai-as-promised to write more expressive and concise assertions for promises.

LANGUAGE: javascript
CODE:
return doSomethingAsync().should.eventually.equal("foo");

----------------------------------------

TITLE: Using jQuery Data Assertions
DESCRIPTION: Examples of using the data() assertion to check element data attributes using jQuery's .data() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.data('foo');
expect($('body')).to.have.data('foo', 'bar');
expect($('body')).to.have.data('foo').match(/bar/);

----------------------------------------

TITLE: Using jQuery Data Assertions
DESCRIPTION: Examples of using the data() assertion to check element data attributes using jQuery's .data() method.

LANGUAGE: javascript
CODE:
$('#header').should.have.data('foo');
expect($('body')).to.have.data('foo', 'bar');
expect($('body')).to.have.data('foo').match(/bar/);

----------------------------------------

TITLE: Exporting Globals in Chai Plugin (Good Practice)
DESCRIPTION: Demonstrates the recommended way to expose globals in a Chai plugin by exporting them directly in the module record, allowing for direct import.

LANGUAGE: javascript
CODE:
export const myGlobal = {...};

export default function myPlugin(chai, utils) {
}

----------------------------------------

TITLE: Installing and Configuring Sinon-Chai in Node.js
DESCRIPTION: This snippet shows how to install Sinon-Chai using npm and configure it with Chai in a Node.js environment.

LANGUAGE: javascript
CODE:
var chai = require("chai");
var sinonChai = require("sinon-chai");

chai.use(sinonChai);

----------------------------------------

TITLE: Installing chai-bignumber plugin using npm
DESCRIPTION: Command to install the chai-bignumber plugin as a development dependency using npm.

LANGUAGE: bash
CODE:
npm install --save-dev chai-bignumber

----------------------------------------

TITLE: Overwriting Existing Chai Method
DESCRIPTION: Overwrites the 'above' method to provide custom age comparison for Model instances while preserving original functionality.

LANGUAGE: javascript
CODE:
Assertion.overwriteMethod('above', function (_super) {
  return function assertAge (n) {
    if (utils.flag(this, 'model.age')) {
      const obj = this._obj;

      new Assertion(obj).instanceof(Model);

      new Assertion(obj).to.have.deep.property('_attrs.age').a('number');

      const age = obj.get('age');
      this.assert(
          age > n
        , "expected #{this} to have an age above #{exp} but got #{act}"
        , "expected #{this} to not have an age above #{exp} but got #{act}"
        , n
        , age
      );
    } else {
      _super.apply(this, arguments);
    }
  };
});

----------------------------------------

TITLE: Validating Types with Chai Assertion
DESCRIPTION: Demonstrates how to validate type checking for a JavaScript file using the chai-as-typed plugin assertion

LANGUAGE: javascript
CODE:
expect('/absolute/path/to/filename.js').to.have.types.validated();

----------------------------------------

TITLE: Importing Chai OpenAPI Validator in JavaScript
DESCRIPTION: Shows how to import the validator plugin using CommonJS syntax

LANGUAGE: javascript
CODE:
const chaiResponseValidator = require('chai-openapi-response-validator').default;

----------------------------------------

TITLE: Creating a Chainable Method for Chai Assertions
DESCRIPTION: Implements a chainable 'age' method for asserting model age, allowing both exact and comparative assertions.

LANGUAGE: javascript
CODE:
function assertModelAge (n) {
  new Assertion(this._obj).to.be.instanceof(Model);

  const age = this._obj.get('age');
  new Assertion(age).to.be.a('number');

  this.assert(
      age === n
    , "expected #{this} to have age #{exp} but got #{act}"
    , "expected #{this} to not have age #{act}"
    , n
    , age
  );
}

function chainModelAge () {
  utils.flag(this, 'model.age', true);
}

Assertion.addChainableMethod('age', assertModelAge, chainModelAge);

----------------------------------------

TITLE: Using Flags in Chai Assertions
DESCRIPTION: Explains how to use flags to store and retrieve data within Chai assertions.

LANGUAGE: javascript
CODE:
const myAssert = new Assertion(obj);
utils.flag(myAssert, 'owner', 'me'); // sets key `owner` to `me`
const owner = utils.flag(myAssert, 'owner'); // get key `owner', returns value

----------------------------------------

TITLE: BN.js Comparison with Constants
DESCRIPTION: Shows how bn-chai simplifies comparing BN.js values with numeric constants

LANGUAGE: javascript
CODE:
expect(bn1.eq(new BN('1'))).to.be.true;

LANGUAGE: javascript
CODE:
expect(bn1).to.eq.BN(1);

----------------------------------------

TITLE: Using chai-as-promised with the should/expect interface
DESCRIPTION: Shows various examples of using chai-as-promised with Chai's should and expect interfaces for promise assertions.

LANGUAGE: javascript
CODE:
return Promise.resolve(2 + 2).should.eventually.equal(4);

return expect(Promise.resolve({ foo: "bar" })).to.eventually.have.property("foo");

return promise.should.be.fulfilled;
return promise.should.eventually.deep.equal("foo");
return promise.should.become("foo"); // same as `.eventually.deep.equal`
return promise.should.be.rejected;
return promise.should.be.rejectedWith(Error); // other variants of Chai's `throw` assertion work too.