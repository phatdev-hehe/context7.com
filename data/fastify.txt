TITLE: Creating a Basic Fastify Server in JavaScript
DESCRIPTION: Sets up a simple Fastify server with a single route and starts listening on port 3000. Demonstrates both CommonJS and ES Module syntax.

LANGUAGE: js
CODE:
// ESM
import Fastify from 'fastify'

const fastify = Fastify({
  logger: true
})
// CommonJs
const fastify = require('fastify')({
  logger: true
})

// Declare a route
fastify.get('/', function (request, reply) {
  reply.send({ hello: 'world' })
})

// Run the server!
fastify.listen({ port: 3000 }, function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  // Server is now listening on ${address}
})

----------------------------------------

TITLE: Async/Await Syntax for Fastify Server in JavaScript
DESCRIPTION: Demonstrates how to use async/await syntax with Fastify for route handlers and server startup. Includes both CommonJS and ES Module examples.

LANGUAGE: js
CODE:
// ESM
import Fastify from 'fastify'

const fastify = Fastify({
  logger: true
})
// CommonJs
const fastify = require('fastify')({
  logger: true
})

fastify.get('/', async (request, reply) => {
  return { hello: 'world' }
})

/**
 * Run the server!
 */
const start = async () => {
  try {
    await fastify.listen({ port: 3000 })
  } catch (err) {
    fastify.log.error(err)
    process.exit(1)
  }
}
start()

----------------------------------------

TITLE: Initializing a Basic Fastify HTTP Server in TypeScript
DESCRIPTION: Sets up a basic Fastify HTTP server with a single route using TypeScript. Demonstrates importing Fastify, creating a server instance, defining a route, and starting the server.

LANGUAGE: typescript
CODE:
import fastify from 'fastify'

const server = fastify()

server.get('/ping', async (request, reply) => {
  return 'pong\n'
})

server.listen({ port: 8080 }, (err, address) => {
  if (err) {
    console.error(err)
    process.exit(1)
  }
  console.log(`Server listening at ${address}`)
})

----------------------------------------

TITLE: Basic Fastify Server Example
DESCRIPTION: Example showing how to create a basic Fastify server with a single route using both ESM and CommonJS syntax.

LANGUAGE: javascript
CODE:
// ESM
import Fastify from 'fastify'

const fastify = Fastify({
  logger: true
})
// CommonJs
const fastify = require('fastify')({
  logger: true
})

// Declare a route
fastify.get('/', (request, reply) => {
  reply.send({ hello: 'world' })
})

// Run the server!
fastify.listen({ port: 3000 }, (err, address) => {
  if (err) throw err
  // Server is now listening on ${address}
})

----------------------------------------

TITLE: Full Route Declaration in Fastify
DESCRIPTION: Example of declaring a route using the full route method with schema validation and handler configuration.

LANGUAGE: javascript
CODE:
fastify.route({
  method: 'GET',
  url: '/',
  schema: {
    querystring: {
      type: 'object',
      properties: {
        name: { type: 'string' },
        excitement: { type: 'integer' }
      }
    },
    response: {
      200: {
        type: 'object',
        properties: {
          hello: { type: 'string' }
        }
      }
    }
  },
  handler: function (request, reply) {
    reply.send({ hello: 'world' })
  }
})

----------------------------------------

TITLE: Async-Await Fastify Server Example
DESCRIPTION: Example demonstrating how to create a Fastify server using async-await syntax with both ESM and CommonJS imports.

LANGUAGE: javascript
CODE:
// ESM
import Fastify from 'fastify'

const fastify = Fastify({
  logger: true
})
// CommonJs
const fastify = require('fastify')({
  logger: true
})

fastify.get('/', async (request, reply) => {
  reply.type('application/json').code(200)
  return { hello: 'world' }
})

fastify.listen({ port: 3000 }, (err, address) => {
  if (err) throw err
  // Server is now listening on ${address}
})

----------------------------------------

TITLE: Defining Request Validation Schemas in Fastify
DESCRIPTION: Shows how to define JSON Schema validation for request body, querystring, params and headers in a Fastify route.

LANGUAGE: javascript
CODE:
const bodyJsonSchema = {
  type: 'object',
  required: ['requiredKey'],
  properties: {
    someKey: { type: 'string' },
    someOtherKey: { type: 'number' },
    requiredKey: {
      type: 'array',
      maxItems: 3,
      items: { type: 'integer' }
    },
    nullableKey: { type: ['number', 'null'] },
    multipleTypesKey: { type: ['boolean', 'number'] },
    multipleRestrictedTypesKey: {
      oneOf: [
        { type: 'string', maxLength: 5 },
        { type: 'number', minimum: 10 }
      ]
    },
    enumKey: {
      type: 'string',
      enum: ['John', 'Foo']
    },
    notTypeKey: {
      not: { type: 'array' }
    }
  }
}

const queryStringJsonSchema = {
  type: 'object',
  properties: {
    name: { type: 'string' },
    excitement: { type: 'integer' }
  }
}

const paramsJsonSchema = {
  type: 'object',
  properties: {
    par1: { type: 'string' },
    par2: { type: 'number' }
  }
}

const headersJsonSchema = {
  type: 'object',
  properties: {
    'x-foo': { type: 'string' }
  },
  required: ['x-foo']
}

const schema = {
  body: bodyJsonSchema,
  querystring: queryStringJsonSchema,
  params: paramsJsonSchema,
  headers: headersJsonSchema
}

fastify.post('/the/url', { schema }, handler)

----------------------------------------

TITLE: Creating a Fastify Plugin for MongoDB Connection
DESCRIPTION: Demonstrates how to create a Fastify plugin for connecting to MongoDB using @fastify/mongodb. Uses fastify-plugin to expose decorators to the parent scope.

LANGUAGE: js
CODE:
// ESM
import fastifyPlugin from 'fastify-plugin'
import fastifyMongo from '@fastify/mongodb'

/**
 * @param {FastifyInstance} fastify
 * @param {Object} options
 */
async function dbConnector (fastify, options) {
  fastify.register(fastifyMongo, {
    url: 'mongodb://localhost:27017/test_database'
  })
}

// Wrapping a plugin function with fastify-plugin exposes the decorators
// and hooks, declared inside the plugin to the parent scope.
export default fastifyPlugin(dbConnector)


----------------------------------------

TITLE: Shorthand Route Declaration in Fastify
DESCRIPTION: Simplified route declaration using HTTP method shortcuts with schema options.

LANGUAGE: javascript
CODE:
const opts = {
  schema: {
    response: {
      200: {
        type: 'object',
        properties: {
          hello: { type: 'string' }
        }
      }
    }
  }
}
fastify.get('/', opts, (request, reply) => {
  reply.send({ hello: 'world' })
})

----------------------------------------

TITLE: Basic Plugin Creation
DESCRIPTION: Shows the basic structure for creating a Fastify plugin with route handling and decorators.

LANGUAGE: javascript
CODE:
module.exports = function (fastify, opts, done) {
  fastify.decorate('utility', function () {})

  fastify.get('/', handler)

  done()
}

----------------------------------------

TITLE: Visualizing Fastify Request Lifecycle Flow
DESCRIPTION: ASCII diagram showing the complete request lifecycle in Fastify, from incoming request through various hooks to outgoing response. Includes error handling paths with corresponding HTTP status codes.

LANGUAGE: ascii-diagram
CODE:
Incoming Request
  │
  └─▶ Routing
        │
        └─▶ Instance Logger
             │
   4**/5** ◀─┴─▶ onRequest Hook
                  │
        4**/5** ◀─┴─▶ preParsing Hook
                        │
              4**/5** ◀─┴─▶ Parsing
                             │
                   4**/5** ◀─┴─▶ preValidation Hook
                                  │
                            400 ◀─┴─▶ Validation
                                        │
                              4**/5** ◀─┴─▶ preHandler Hook
                                              │
                                    4**/5** ◀─┴─▶ User Handler
                                                    │
                                                    └─▶ Reply
                                                          │
                                                4**/5** ◀─┴─▶ preSerialization Hook
                                                                │
                                                                └─▶ onSend Hook
                                                                      │
                                                            4**/5** ◀─┴─▶ Outgoing Response
                                                                            │
                                                                            └─▶ onResponse Hook

----------------------------------------

TITLE: Installing Fastify with npm or yarn
DESCRIPTION: Commands to install Fastify using npm or yarn package managers.

LANGUAGE: sh
CODE:
npm i fastify

LANGUAGE: sh
CODE:
yarn add fastify

----------------------------------------

TITLE: Creating a Basic Fastify Plugin
DESCRIPTION: Shows the structure of a basic Fastify plugin that registers a route. The plugin function must call the done callback when setup is complete.

LANGUAGE: javascript
CODE:
module.exports = function (fastify, options, done) {
  fastify.get('/plugin', (request, reply) => {
    reply.send({ hello: 'world' })
  })

  done()
}

----------------------------------------

TITLE: Creating a Fastify Plugin with TypeScript
DESCRIPTION: Demonstrates how to create a Fastify plugin using TypeScript. Includes type definitions for the plugin, options, and decorated properties.

LANGUAGE: typescript
CODE:
import { FastifyPluginCallback, FastifyPluginAsync } from 'fastify'
import fp from 'fastify-plugin'

declare module 'fastify' {
  interface FastifyRequest {
    myPluginProp: string
  }
  interface FastifyReply {
    myPluginProp: number
  }
}

export interface MyPluginOptions {
  myPluginOption: string
}

const myPluginCallback: FastifyPluginCallback<MyPluginOptions> = (fastify, options, done) => {
  fastify.decorateRequest('myPluginProp', 'super_secret_value')
  fastify.decorateReply('myPluginProp', options.myPluginOption)

  done()
}

export default fp(myPluginCallback, '3.x')

----------------------------------------

TITLE: Custom Error Handler in Fastify
DESCRIPTION: Shows how to implement a custom error handler in Fastify, including handling specific error types.

LANGUAGE: javascript
CODE:
const Fastify = require('fastify')

// Instantiate the framework
const fastify = Fastify({
  logger: true
})

// Declare a route
fastify.get('/', function (request, reply) {
  reply.code('bad status code').send({ hello: 'world' })
})

fastify.setErrorHandler(function (error, request, reply) {
  if (error instanceof Fastify.errorCodes.FST_ERR_BAD_STATUS_CODE) {
    // Log error
    this.log.error(error)
    // Send error response
    reply.status(500).send({ ok: false })
  } else {
    // Fastify will use parent error handler to handle this
    reply.send(error)
  }
})

// Run the server!
fastify.listen({ port: 3000 }, function (err, address) {
  if (err) {
    fastify.log.error(err)
    process.exit(1)
  }
  // Server is now listening on ${address}
})

----------------------------------------

TITLE: Using JSON Schema with TypeBox in Fastify
DESCRIPTION: Shows how to use TypeBox to define JSON schemas and TypeScript types for Fastify routes. Includes example of creating a schema, defining types, and using them in a route definition.

LANGUAGE: typescript
CODE:
import { Static, Type } from '@sinclair/typebox'

export const User = Type.Object({
  name: Type.String(),
  mail: Type.Optional(Type.String({ format: 'email' })),
})

export type UserType = Static<typeof User>

fastify.post<{ Body: UserType, Reply: UserType }>(
  '/',
  {
    schema: {
      body: User,
      response: {
        200: User
      },
    },
  },
  (request, reply) => {
    const { name, mail } = request.body;
    reply.status(200).send({ name, mail });
  }
)

----------------------------------------

TITLE: Sending Different Types of Responses in Fastify
DESCRIPTION: Shows how to send various types of responses including objects, strings, streams, and errors.

LANGUAGE: javascript
CODE:
fastify.get('/json', options, function (request, reply) {
  reply.send({ hello: 'world' })
})

fastify.get('/text', options, function (request, reply) {
  reply.send('plain string')
})

fastify.get('/streams', function (request, reply) {
  const stream = fs.createReadStream('some-file', 'utf8')
  reply.header('Content-Type', 'application/octet-stream')
  reply.send(stream)
})

fastify.get('/error', function (request, reply) {
  reply.send(httpErrors.Gone())
})

----------------------------------------

TITLE: Connecting Fastify to MySQL
DESCRIPTION: Demonstrates how to register and use the @fastify/mysql plugin to connect Fastify to a MySQL database. The example shows querying user data based on an ID parameter.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()

fastify.register(require('@fastify/mysql'), {
  connectionString: 'mysql://root@localhost/mysql'
})

fastify.get('/user/:id', function(req, reply) {
  fastify.mysql.query(
    'SELECT id, username, hash, salt FROM users WHERE id=?', [req.params.id],
    function onResult (err, result) {
      reply.send(err || result)
    }
  )
})

fastify.listen({ port: 3000 }, err => {
  if (err) throw err
  console.log(`server listening on ${fastify.server.address().port}`)
})

----------------------------------------

TITLE: HTTP Injection Testing Example
DESCRIPTION: Demonstrates how to use Fastify's built-in HTTP injection support for testing routes without starting a server. Shows various injection methods including async/await patterns.

LANGUAGE: javascript
CODE:
'use strict'

const { test } = require('node:test')
const build = require('./app')

test('requests the "/" route', async t => {
  t.plan(1)
  const app = build()

  const response = await app.inject({
    method: 'GET',
    url: '/'
  })
  t.assert.strictEqual(response.statusCode, 200, 'returns a status code of 200')
})

----------------------------------------

TITLE: Connecting Fastify to PostgreSQL
DESCRIPTION: Shows how to use the @fastify/postgres plugin to connect Fastify to a PostgreSQL database. The example demonstrates querying user data with a parameterized query.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()

fastify.register(require('@fastify/postgres'), {
  connectionString: 'postgres://postgres@localhost/postgres'
})

fastify.get('/user/:id', function (req, reply) {
  fastify.pg.query(
    'SELECT id, username, hash, salt FROM users WHERE id=$1', [req.params.id],
    function onResult (err, result) {
      reply.send(err || result)
    }
  )
})

fastify.listen({ port: 3000 }, err => {
  if (err) throw err
  console.log(`server listening on ${fastify.server.address().port}`)
})

----------------------------------------

TITLE: Implementing Route-Level Hooks in Fastify
DESCRIPTION: Shows how to add custom lifecycle hooks at the route level in Fastify. These hooks are unique to the specific route and are executed after the shared hooks.

LANGUAGE: JavaScript
CODE:
fastify.route({
  method: 'GET',
  url: '/',
  onRequest: function (request, reply, done) {
    // This hook will always be executed after the shared `onRequest` hooks
    done()
  },
  preHandler: function (request, reply, done) {
    // This hook will always be executed after the shared `preHandler` hooks
    done()
  },
  handler: function (request, reply) {
    reply.send({ hello: 'world' })
  }
})

----------------------------------------

TITLE: Connecting Fastify to MongoDB
DESCRIPTION: Demonstrates the integration of MongoDB with Fastify using the @fastify/mongodb plugin. The example shows how to query a user by ID, including handling ObjectId conversion.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()

fastify.register(require('@fastify/mongodb'), {
  // force to close the mongodb connection when app stopped
  // the default value is false
  forceClose: true,

  url: 'mongodb://mongo/mydb'
})

fastify.get('/user/:id', async function (req, reply) {
  // Or this.mongo.client.db('mydb').collection('users')
  const users = this.mongo.db.collection('users')

  // if the id is an ObjectId format, you need to create a new ObjectId
  const id = this.mongo.ObjectId(req.params.id)
  try {
    const user = await users.findOne({ id })
    return user
  } catch (err) {
    return err
  }
})

fastify.listen({ port: 3000 }, err => {
  if (err) throw err
})

----------------------------------------

TITLE: Error Handling in Plugins
DESCRIPTION: Shows different approaches to handling errors in plugin registration using after, ready, and listen hooks.

LANGUAGE: javascript
CODE:
fastify.register(require('my-plugin'))

fastify.after(err => console.log(err))

fastify.ready(err => console.log(err))

fastify.listen({ port: 3000 }, (err, address) => {
  if (err) console.log(err)
})

----------------------------------------

TITLE: Implementing onRequest Hook in Fastify
DESCRIPTION: Demonstrates how to add an onRequest hook in Fastify using both callback and async/await styles. This hook is executed at the beginning of the request lifecycle.

LANGUAGE: JavaScript
CODE:
fastify.addHook('onRequest', (request, reply, done) => {
  // Some code
  done()
})

// Or async/await:
fastify.addHook('onRequest', async (request, reply) => {
  // Some code
  await asyncMethod()
})

----------------------------------------

TITLE: Adding a Shared Schema in Fastify
DESCRIPTION: Demonstrates how to add a reusable schema to the Fastify instance using addSchema() and reference it in route definitions.

LANGUAGE: javascript
CODE:
fastify.addSchema({
  $id: 'http://example.com/',
  type: 'object', 
  properties: {
    hello: { type: 'string' }
  }
})

fastify.post('/', {
  handler () {},
  schema: {
    body: {
      type: 'array',
      items: { $ref: 'http://example.com#/properties/hello' }
    }
  }
})

----------------------------------------

TITLE: Basic Content Type Parser Implementation
DESCRIPTION: Examples of adding content type parsers for specific MIME types using both callback and async patterns.

LANGUAGE: javascript
CODE:
fastify.addContentTypeParser('application/jsoff', function (request, payload, done) {
  jsoffParser(payload, function (err, body) {
    done(err, body)
  })
})

// Handle multiple content types with the same function
fastify.addContentTypeParser(['text/xml', 'application/xml'], function (request, payload, done) {
  xmlParser(payload, function (err, body) {
    done(err, body)
  })
})

// Async is also supported in Node versions >= 8.0.0
fastify.addContentTypeParser('application/jsoff', async function (request, payload) {
  const res = await jsoffParserAsync(payload)

  return res
})

// Handle all content types that matches RegExp
fastify.addContentTypeParser(/^image\/([\w-]+);?/, function (request, payload, done) {
  imageParser(payload, function (err, body) {
    done(err, body)
  })
})

// Can use default JSON/Text parser for different content Types
fastify.addContentTypeParser('text/json', { parseAs: 'string' }, fastify.getDefaultJsonParser('ignore', 'ignore'))

----------------------------------------

TITLE: Sharing Context Between Plugins in Fastify (JavaScript)
DESCRIPTION: This snippet demonstrates how to break encapsulation and share context between plugins using fastify-plugin, allowing parent contexts to access entities from descendant contexts.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()
const fastifyPlugin = require('fastify-plugin')

fastify.decorateRequest('answer', 42)

fastify.register(async function publicContext (childServer) {
  childServer.decorateRequest('foo', 'foo')

  childServer.route({
    path: '/two',
    method: 'GET',
    handler (request, response) {
      response.send({
        answer: request.answer,
        foo: request.foo,
        bar: request.bar
      })
    }
  })

  childServer.register(fastifyPlugin(grandchildContext))

  async function grandchildContext (grandchildServer) {
    grandchildServer.decorateRequest('bar', 'bar')

    grandchildServer.route({
      path: '/three',
      method: 'GET',
      handler (request, response) {
        response.send({
          answer: request.answer,
          foo: request.foo,
          bar: request.bar
        })
      }
    })
  }
})

fastify.listen({ port: 8000 })

----------------------------------------

TITLE: Implementing Secure HTTP2 (HTTPS) in Fastify
DESCRIPTION: This snippet demonstrates how to set up a Fastify server with HTTP2 over HTTPS. It includes configuration for SSL certificates and a basic route handler.

LANGUAGE: javascript
CODE:
'use strict'

const fs = require('node:fs')
const path = require('node:path')
const fastify = require('fastify')({
  http2: true,
  https: {
    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),
    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))
  }
})

fastify.get('/', function (request, reply) {
  reply.code(200).send({ hello: 'world' })
})

fastify.listen({ port: 3000 })

----------------------------------------

TITLE: Decorating Fastify Server Instance (JavaScript)
DESCRIPTION: Shows how to decorate the Fastify server instance with both methods and non-function values using the decorate method. It also demonstrates how to access decorated properties.

LANGUAGE: javascript
CODE:
fastify.decorate('utility', function () {
  // Something very useful
})

fastify.decorate('conf', {
  db: 'some.db',
  port: 3000
})

fastify.utility()

console.log(fastify.conf.db)

----------------------------------------

TITLE: Creating a Custom Client Error Handler in JavaScript
DESCRIPTION: Example showing how to configure a custom client error handler that returns a 400 Bad Request response with JSON payload

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  clientErrorHandler: function (err, socket) {
    const body = JSON.stringify({
      error: {
        message: 'Client error',
        code: '400'
      }
    })

    this.log.trace({ err }, 'client error')

    socket.end([
      'HTTP/1.1 400 Bad Request',
      `Content-Length: ${body.length}`,
      `Content-Type: application/json\r\n\r\n${body}`
    ].join('\r\n'))
  }
})

----------------------------------------

TITLE: Enabling Basic Logging in Fastify (JavaScript)
DESCRIPTION: This snippet demonstrates how to enable the production JSON logger in Fastify. It creates a Fastify instance with logging enabled using the default configuration.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  logger: true
})

----------------------------------------

TITLE: Configuring Environment-Specific Logging in Fastify (JavaScript)
DESCRIPTION: This code sets up environment-specific logging configurations for development, production, and test environments. It uses pino-pretty for development and adjusts settings based on the current environment.

LANGUAGE: javascript
CODE:
const envToLogger = {
  development: {
    transport: {
      target: 'pino-pretty',
      options: {
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname',
      },
    },
  },
  production: true,
  test: false,
}
const fastify = require('fastify')({
  logger: envToLogger[environment] ?? true // defaults to true if no entry matches in the map
})

----------------------------------------

TITLE: Database Migration with Postgrator
DESCRIPTION: Demonstrates how to use Postgrator for database schema migrations with Fastify. The example includes a SQL migration script and a JavaScript file to execute the migration.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY NOT NULL,
  created_at DATE NOT NULL DEFAULT CURRENT_DATE,
  firstName TEXT NOT NULL,
  lastName TEXT NOT NULL
);

LANGUAGE: javascript
CODE:
const pg = require('pg')
const Postgrator = require('postgrator')
const path = require('node:path')

async function migrate() {
  const client = new pg.Client({
    host: 'localhost',
    port: 5432,
    database: 'example',
    user: 'example',
    password: 'example',
  });

  try {
    await client.connect();

    const postgrator = new Postgrator({
      migrationPattern: path.join(__dirname, '/migrations/*'),
      driver: 'pg',
      database: 'example',
      schemaTable: 'migrations',
      currentSchema: 'public', // Postgres and MS SQL Server only
      execQuery: (query) => client.query(query),
    });

    const result = await postgrator.migrate()

    if (result.length === 0) {
      console.log(
        'No migrations run for schema "public". Already at the latest one.'
      )
    }

    console.log('Migration done.')

    process.exitCode = 0
  } catch(err) {
    console.error(err)
    process.exitCode = 1
  }

  await client.end()
}

migrate()

----------------------------------------

TITLE: Setting Response Headers in Fastify
DESCRIPTION: Demonstrates how to set response headers using the reply.header() method.

LANGUAGE: javascript
CODE:
reply.header('set-cookie', 'foo');
reply.header('set-cookie', 'bar');

----------------------------------------

TITLE: Using Async-Await with Fastify Replies
DESCRIPTION: Demonstrates how to use async-await syntax with Fastify routes and replies.

LANGUAGE: javascript
CODE:
const { promisify } = require('node:util')
const delay = promisify(setTimeout)

fastify.get('/async-await', options, async function (request, reply) {
  await delay(200)
  return { hello: 'world' }
})

----------------------------------------

TITLE: Accessing Fastify Request Properties
DESCRIPTION: Shows how to access various properties of the Fastify request object within a route handler. This includes body, query parameters, headers, and other request-specific information.

LANGUAGE: javascript
CODE:
fastify.post('/:params', options, function (request, reply) {
  console.log(request.body)
  console.log(request.query)
  console.log(request.params)
  console.log(request.headers)
  console.log(request.raw)
  console.log(request.server)
  console.log(request.id)
  console.log(request.ip)
  console.log(request.ips)
  console.log(request.host)
  console.log(request.hostname)
  console.log(request.port)
  console.log(request.protocol)
  console.log(request.url)
  console.log(request.routeOptions.method)
  console.log(request.routeOptions.bodyLimit)
  console.log(request.routeOptions.method)
  console.log(request.routeOptions.url)
  console.log(request.routeOptions.attachValidation)
  console.log(request.routeOptions.logLevel)
  console.log(request.routeOptions.version)
  console.log(request.routeOptions.exposeHeadRoute)
  console.log(request.routeOptions.prefixTrailingSlash)
  console.log(request.routeOptions.logLevel)
  request.log.info('some info')
})

----------------------------------------

TITLE: Registering @fastify/express Plugin for Middleware in Fastify
DESCRIPTION: This snippet demonstrates how to register the @fastify/express plugin and use various Express middleware functions with Fastify.

LANGUAGE: javascript
CODE:
await fastify.register(require('@fastify/express'))
fastify.use(require('cors')())
fastify.use(require('dns-prefetch-control')())
fastify.use(require('frameguard')())
fastify.use(require('hsts')())
fastify.use(require('ienoopen')())
fastify.use(require('x-xss-protection')())

----------------------------------------

TITLE: Basic Fastify Application Setup
DESCRIPTION: Shows how to structure a basic Fastify application by separating the app and server code for better testability. Includes route definition and server configuration.

LANGUAGE: javascript
CODE:
'use strict'

const fastify = require('fastify')

function build(opts={}) {
  const app = fastify(opts)
  app.get('/', async function (request, reply) {
    return { hello: 'world' }
  })

  return app
}

----------------------------------------

TITLE: Configuring Nginx as Reverse Proxy for Fastify
DESCRIPTION: Nginx configuration example showing SSL/TLS setup, HTTP/2 support, upstream server groups, and proxy settings for Fastify applications.

LANGUAGE: nginx
CODE:
upstream fastify_app {
  server 10.10.11.1:80;
  server 10.10.11.2:80;
  server 10.10.11.3:80 backup;
}

server {
  listen 80 default_server;
  listen [::]:80 default_server;

  location / {
    return 301 https://$host$request_uri;
  }
}

server {
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;

  http2 on;

  ssl_certificate /path/to/fullchain.pem;
  ssl_certificate_key /path/to/private.pem;

  ssl_session_timeout 1d;
  ssl_session_cache shared:FastifyApp:10m;
  ssl_session_tickets off;

  ssl_protocols TLSv1.3;
  ssl_prefer_server_ciphers off;

  add_header Strict-Transport-Security "max-age=63072000" always;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /path/to/chain.pem;

  location / {
    proxy_http_version 1.1;
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://fastify_app;
  }
}

----------------------------------------

TITLE: Setting up TypeBox Type Provider in Fastify
DESCRIPTION: This code demonstrates how to set up and use the TypeBox Type Provider in a Fastify server. It includes defining a route with a querystring schema using TypeBox types and shows type inference for request parameters.

LANGUAGE: typescript
CODE:
import fastify from 'fastify'
import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'
import { Type } from '@sinclair/typebox'

const server = fastify().withTypeProvider<TypeBoxTypeProvider>()

server.get('/route', {
  schema: {
    querystring: Type.Object({
      foo: Type.Number(),
      bar: Type.String()
    })
  }
}, (request, reply) => {

  // type Query = { foo: number, bar: string }
  const { foo, bar } = request.query // type safe!
})

----------------------------------------

TITLE: Using Scoped Type Providers in Fastify
DESCRIPTION: This code shows how to use multiple Type Providers in different scopes within a Fastify application. It demonstrates using both TypeBox and json-schema-to-ts providers in separate plugins.

LANGUAGE: typescript
CODE:
import Fastify from 'fastify'
import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'
import { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'
import { Type } from '@sinclair/typebox'

const fastify = Fastify()

function pluginWithTypebox(fastify: FastifyInstance, _opts, done): void {
  fastify.withTypeProvider<TypeBoxTypeProvider>()
    .get('/', {
      schema: {
        body: Type.Object({
          x: Type.String(),
          y: Type.Number(),
          z: Type.Boolean()
        })
      }
    }, (req) => {
        const { x, y, z } = req.body // type safe
    });
  done()
}

function pluginWithJsonSchema(fastify: FastifyInstance, _opts, done): void {
  fastify.withTypeProvider<JsonSchemaToTsProvider>()
    .get('/', {
      schema: {
        body: {
          type: 'object',
          properties: {
            x: { type: 'string' },
            y: { type: 'number' },
            z: { type: 'boolean' }
          },
        }
      }
    }, (req) => {
      const { x, y, z } = req.body // type safe
    });
  done()
}

fastify.register(pluginWithJsonSchema)
fastify.register(pluginWithTypebox)

----------------------------------------

TITLE: Plugin Scope Management with fastify-plugin
DESCRIPTION: Shows how to use fastify-plugin to prevent scope creation and specify version compatibility.

LANGUAGE: javascript
CODE:
const fp = require('fastify-plugin')

module.exports = fp(function (fastify, opts, done) {
  fastify.decorate('utility', function () {})
  done()
}, '0.x')

----------------------------------------

TITLE: Defining Generic Interfaces for Fastify Route Parameters
DESCRIPTION: Demonstrates how to use TypeScript generics to define strongly-typed request parameters for Fastify routes. Includes examples for querystring, headers, and reply interfaces.

LANGUAGE: typescript
CODE:
interface IQuerystring {
  username: string;
  password: string;
}

interface IHeaders {
  'h-Custom': string;
}

interface IReply {
  200: { success: boolean };
  302: { url: string };
  '4xx': { error: string };
}

server.get<{
  Querystring: IQuerystring,
  Headers: IHeaders,
  Reply: IReply
}>('/auth', async (request, reply) => {
  const { username, password } = request.query
  const customerHeader = request.headers['h-Custom']
  // do something with request data

  reply.code(200).send({ success: true });
  return `logged in!`
})

----------------------------------------

TITLE: Defining FastifyInstance with Type Provider for Modules
DESCRIPTION: This code demonstrates how to define and use a FastifyInstance with a Type Provider when working with modules. It shows the setup in the main file and the route definition in a separate module.

LANGUAGE: typescript
CODE:
// index.ts
import Fastify from 'fastify'
import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'
import { registerRoutes } from './routes'

const server = Fastify().withTypeProvider<TypeBoxTypeProvider>()

registerRoutes(server)

server.listen({ port: 3000 })

LANGUAGE: typescript
CODE:
// routes.ts
import { Type } from '@sinclair/typebox'
import {
  FastifyInstance,
  FastifyBaseLogger,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerDefault
} from 'fastify'
import { TypeBoxTypeProvider } from '@fastify/type-provider-typebox'

type FastifyTypebox = FastifyInstance<
  RawServerDefault,
  RawRequestDefaultExpression<RawServerDefault>,
  RawReplyDefaultExpression<RawServerDefault>,
  FastifyBaseLogger,
  TypeBoxTypeProvider
>;

export function registerRoutes(fastify: FastifyTypebox): void {
  fastify.get('/', {
    schema: {
      body: Type.Object({
        x: Type.String(),
        y: Type.Number(),
        z: Type.Boolean()
      })
    }
  }, (req) => {
    // works
    const { x, y, z } = req.body
  });
}

----------------------------------------

TITLE: AWS Lambda Fastify Application Setup
DESCRIPTION: Basic Fastify application setup for AWS Lambda with conditional local/serverless execution logic.

LANGUAGE: javascript
CODE:
const fastify = require('fastify');

function init() {
  const app = fastify();
  app.get('/', (request, reply) => reply.send({ hello: 'world' }));
  return app;
}

if (require.main === module) {
  // called directly i.e. "node app"
  init().listen({ port: 3000 }, (err) => {
    if (err) console.error(err);
    console.log('server listening on 3000');
  });
} else {
  // required as a module => executed on aws lambda
  module.exports = init;
}

----------------------------------------

TITLE: Decorating Request Object in Fastify (JavaScript)
DESCRIPTION: Demonstrates how to properly decorate the request object in Fastify using the decorateRequest method and a preHandler hook. This approach avoids JavaScript engine deoptimization.

LANGUAGE: javascript
CODE:
// Decorate request with a 'user' property
fastify.decorateRequest('user', '')

// Update our property
fastify.addHook('preHandler', (req, reply, done) => {
  req.user = 'Bob Dylan'
  done()
})
// And finally access it
fastify.get('/', (req, reply) => {
  reply.send(`Hello, ${req.user}!`)
})

----------------------------------------

TITLE: Validating Input in Fastify
DESCRIPTION: Demonstrates how to use the validateInput method to validate input data against a schema or HTTP part. This method compiles a new validation function if one doesn't exist for the given schema.

LANGUAGE: javascript
CODE:
request
  .validateInput({ foo: 'bar'}, {
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  }) // true

// or

request
  .validateInput({ foo: 'bar'}, {
    type: 'object',
    properties: {
      foo: {
        type: 'string'
      }
    }
  }, 'body') // true

// or

request
  .validateInput({ hello: 'world'}, 'query') // false

----------------------------------------

TITLE: Using Decorated Server in Route Handlers (JavaScript)
DESCRIPTION: Demonstrates how to use decorated properties within Fastify route handlers. The decorated server is bound to 'this' in the handler function.

LANGUAGE: javascript
CODE:
fastify.decorate('db', new DbConnection())

fastify.get('/', async function (request, reply) {
  // using return
  return { hello: await this.db.query('world') }

  // or
  // using reply.send()
  reply.send({ hello: await this.db.query('world') })
  await reply
})

----------------------------------------

TITLE: Nested Plugin Registration
DESCRIPTION: Demonstrates how to register plugins within other plugins for modular functionality.

LANGUAGE: javascript
CODE:
module.exports = function (fastify, opts, done) {
  fastify.decorate('utility', function () {})

  fastify.get('/', handler)

  fastify.register(require('./other-plugin'))

  done()
}

----------------------------------------

TITLE: Using Logger in Fastify Route Handlers (JavaScript)
DESCRIPTION: This snippet shows how to use the logger within a Fastify route handler. It logs information about the current request using the request.log object.

LANGUAGE: javascript
CODE:
fastify.get('/', options, function (request, reply) {
  request.log.info('Some info about the current request')
  reply.send({ hello: 'world' })
})

----------------------------------------

TITLE: Redirecting Requests in Fastify
DESCRIPTION: Shows different ways to perform redirects using reply.redirect().

LANGUAGE: javascript
CODE:
reply.redirect('/home')

reply.redirect('/home', 303)

reply.code(303).redirect('/home')

reply.code(303).redirect('/home', 302)

----------------------------------------

TITLE: Configuring Log Redaction in Fastify (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure log redaction in Fastify using Pino. It redacts the 'Authorization' header from logs for security purposes and customizes the request serializer.

LANGUAGE: javascript
CODE:
const fastify = Fastify({
  logger: {
    stream: stream,
    redact: ['req.headers.authorization'],
    level: 'info',
    serializers: {
      req (request) {
        return {
          method: request.method,
          url: request.url,
          headers: request.headers,
          host: request.host,
          remoteAddress: request.ip,
          remotePort: request.socket.remotePort
        }
      }
    }
  }
})

----------------------------------------

TITLE: Content Type Parser Registration Order
DESCRIPTION: Demonstrates the importance of parser registration order for overlapping content types.

LANGUAGE: javascript
CODE:
fastify.addContentTypeParser('application/vnd.custom', (request, body, done) => {} )
fastify.addContentTypeParser('application/vnd.custom+xml', (request, body, done) => {} )

----------------------------------------

TITLE: Correct Parser Registration with Fastify.register
DESCRIPTION: Shows the proper way to register content type parsers within plugin scope.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')();

fastify.register((fastify, opts) => {
  fastify.addContentTypeParser('application/json', function (request, payload, done) {
    jsonParser(payload, function (err, body) {
      done(err, body)
    })
  })

  fastify.get('/hello', async (req, res) => {});
});

----------------------------------------

TITLE: Visualizing Fastify Reply Lifecycle Flow
DESCRIPTION: ASCII diagram illustrating the reply lifecycle in Fastify, showing error handling paths and processing flow from schema validation through error formatting to final response.

LANGUAGE: ascii-diagram
CODE:
                        ★ schema validation Error
                                    │
                                    └─▶ schemaErrorFormatter
                                               │
                          reply sent ◀── JSON ─┴─ Error instance
                                                      │
                                                      │         ★ throw an Error
                     ★ send or return                 │                 │
                            │                         │                 │
                            │                         ▼                 │
       reply sent ◀── JSON ─┴─ Error instance ──▶ setErrorHandler ◀─────┘
                                                      │
                                 reply sent ◀── JSON ─┴─ Error instance ──▶ onError Hook
                                                                                │
                                                                                └─▶ reply sent

----------------------------------------

TITLE: Configuring Fastify for ALPN with HTTP2 and HTTP1 Support
DESCRIPTION: This code sets up a Fastify server with HTTP2 and fallback support for HTTP1 using ALPN negotiation. It allows the server to handle both protocols on the same socket.

LANGUAGE: javascript
CODE:
'use strict'

const fs = require('node:fs')
const path = require('node:path')
const fastify = require('fastify')({
  http2: true,
  https: {
    allowHTTP1: true, // fallback support for HTTP1
    key: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.key')),
    cert: fs.readFileSync(path.join(__dirname, '..', 'https', 'fastify.cert'))
  }
})

// this route can be accessed through both protocols
fastify.get('/', function (request, reply) {
  reply.code(200).send({ hello: 'world' })
})

fastify.listen({ port: 3000 })

----------------------------------------

TITLE: Basic Plugin Registration in Fastify
DESCRIPTION: Shows the basic syntax for registering a plugin in Fastify using the register API.

LANGUAGE: javascript
CODE:
fastify.register(plugin, [options])

----------------------------------------

TITLE: Async Route Handlers in Fastify
DESCRIPTION: Implementation of async/await handlers for asynchronous route processing.

LANGUAGE: javascript
CODE:
fastify.get('/', options, async function (request, reply) {
  const data = await getData()
  const processed = await processData(data)
  return processed
})

----------------------------------------

TITLE: Configuring Custom Route Constraints in JavaScript
DESCRIPTION: Example demonstrating how to add a custom constraint strategy for route handling based on Accept header

LANGUAGE: javascript
CODE:
const customResponseTypeStrategy = {
  name: 'accept',
  storage: function () {
    let handlers = {}
    return {
      get: (type) => { return handlers[type] || null },
      set: (type, store) => { handlers[type] = store }
    }
  },
  deriveConstraint: (req, ctx) => {
    return req.headers['accept']
  },
  mustMatchWhenDerived: true
}

const router = Fastify();
router.addConstraintStrategy(customResponseTypeStrategy);

----------------------------------------

TITLE: Async/Await Plugin Usage
DESCRIPTION: Demonstrates using async/await syntax with plugin registration and lifecycle methods.

LANGUAGE: javascript
CODE:
await fastify.register(require('my-plugin'))

await fastify.after()

await fastify.ready()

await fastify.listen({ port: 3000 })

----------------------------------------

TITLE: Retrieving and Removing Response Headers in Fastify
DESCRIPTION: Demonstrates how to get, set, and remove response headers.

LANGUAGE: javascript
CODE:
reply.header('x-foo', 'foo') // setHeader: key, value
reply.getHeader('x-foo') // 'foo'
reply.removeHeader('x-foo')
reply.getHeader('x-foo') // undefined

----------------------------------------

TITLE: ESM Plugin Example
DESCRIPTION: Shows how to use ESM modules with Fastify plugins, including both main application and plugin files.

LANGUAGE: javascript
CODE:
// main.mjs
import Fastify from 'fastify'
const fastify = Fastify()

fastify.register(import('./plugin.mjs'))

fastify.listen({ port: 3000 }, console.log)


// plugin.mjs
async function plugin (fastify, opts) {
  fastify.get('/', async (req, reply) => {
    return { hello: 'world' }
  })
}

export default plugin

----------------------------------------

TITLE: Demonstrating Error Handling Composition in Fastify v4
DESCRIPTION: This snippet shows how error handling is composed in Fastify v4, with errors being passed to upper-level handlers if present.

LANGUAGE: javascript
CODE:
import Fastify from 'fastify'

const fastify = Fastify()

fastify.register(async fastify => {
  fastify.setErrorHandler(async err => {
    console.log(err.message) // 'kaboom'
    throw new Error('caught')
  })

  fastify.get('/encapsulated', async () => {
    throw new Error('kaboom')
  })
})

fastify.setErrorHandler(async err => {
  console.log(err.message) // 'caught'
  throw new Error('wrapped')
})

const res = await fastify.inject('/encapsulated')
console.log(res.json().message) // 'wrapped'

----------------------------------------

TITLE: Custom Error Handling for Validation in Fastify
DESCRIPTION: Shows how to implement custom error handling for validation errors in Fastify using setErrorHandler.

LANGUAGE: javascript
CODE:
fastify.setErrorHandler(function (error, request, reply) {
  if (error.validation) {
     reply.status(422).send(new Error('validation failed'))
  }
})

----------------------------------------

TITLE: Restricting Middleware to Specific Paths in Fastify
DESCRIPTION: This snippet illustrates how to restrict middleware execution to certain paths in Fastify, including single paths, wildcard paths, and multiple paths.

LANGUAGE: javascript
CODE:
const path = require('node:path')
const serveStatic = require('serve-static')

// Single path
fastify.use('/css', serveStatic(path.join(__dirname, '/assets')))

// Wildcard path
fastify.use('/css/(.*)', serveStatic(path.join(__dirname, '/assets')))

// Multiple paths
fastify.use(['/css', '/js'], serveStatic(path.join(__dirname, '/assets')))

----------------------------------------

TITLE: Setting Up Ignore Trailing Slash Option in JavaScript
DESCRIPTION: Example showing how to configure Fastify to ignore trailing slashes in routes

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  ignoreTrailingSlash: true
})

// registers both "/foo" and "/foo/"
fastify.get('/foo/', function (req, reply) {
  reply.send('foo')
})

// registers both "/bar" and "/bar/"
fastify.get('/bar', function (req, reply) {
  reply.send('bar')
})

----------------------------------------

TITLE: Setting up json-schema-to-ts Type Provider in Fastify
DESCRIPTION: This code demonstrates how to set up and use the json-schema-to-ts Type Provider in a Fastify server. It includes defining a route with a querystring schema and shows type inference for request parameters.

LANGUAGE: typescript
CODE:
import fastify from 'fastify'
import { JsonSchemaToTsProvider } from '@fastify/type-provider-json-schema-to-ts'

const server = fastify().withTypeProvider<JsonSchemaToTsProvider>()

server.get('/route', {
  schema: {
    querystring: {
      type: 'object',
      properties: {
        foo: { type: 'number' },
        bar: { type: 'string' },
      },
      required: ['foo', 'bar']
    }
  }
}, (request, reply) => {

  // type Query = { foo: number, bar: string }
  const { foo, bar } = request.query // type safe!
})

----------------------------------------

TITLE: Logging Outside Route Handlers in Fastify (JavaScript)
DESCRIPTION: This code demonstrates how to trigger new logs outside of route handlers using the Pino instance from the Fastify instance.

LANGUAGE: javascript
CODE:
fastify.log.info('Something important happened!');

----------------------------------------

TITLE: Updating Query String Schema in Fastify v5
DESCRIPTION: In Fastify v5, full JSON schema is required for querystring, params, and body schemas. This example shows how to update the querystring schema from v4 to v5 format.

LANGUAGE: javascript
CODE:
// v4
fastify.get('/route', {
  schema: {
    querystring: {
      name: { type: 'string' }
    }
  }
}, (req, reply) => {
  reply.send({ hello: req.query.name });
});

LANGUAGE: javascript
CODE:
// v5
fastify.get('/route', {
  schema: {
    querystring: {
      type: 'object',
      properties: {
        name: { type: 'string' }
      },
      required: ['name']
    }
  }
}, (req, reply) => {
  reply.send({ hello: req.query.name });
});

----------------------------------------

TITLE: Implementing Plain Text HTTP2 in Fastify for Microservices
DESCRIPTION: This snippet shows how to set up a Fastify server with plain text HTTP2, suitable for microservices. It's not supported by browsers but can be used for server-to-server communication.

LANGUAGE: javascript
CODE:
'use strict'

const fastify = require('fastify')({
  http2: true
})

fastify.get('/', function (request, reply) {
  reply.code(200).send({ hello: 'world' })
})

fastify.listen({ port: 3000 })

----------------------------------------

TITLE: Configuring Fastify Logger with Custom Stream (JavaScript)
DESCRIPTION: This code demonstrates how to pass a custom stream to the Pino instance in Fastify. It uses the split2 package to create a stream that parses JSON.

LANGUAGE: javascript
CODE:
const split = require('split2')
const stream = split(JSON.parse)

const fastify = require('fastify')({
  logger: {
    level: 'info',
    stream: stream
  }
})

----------------------------------------

TITLE: Implementing preParsing Hook in Fastify
DESCRIPTION: Shows how to add a preParsing hook in Fastify, which allows transformation of the request payload stream before parsing. This can be used for tasks like decompression.

LANGUAGE: JavaScript
CODE:
fastify.addHook('preParsing', (request, reply, payload, done) => {
  // Some code
  done(null, newPayload)
})

// Or async/await:
fastify.addHook('preParsing', async (request, reply, payload) => {
  // Some code
  await asyncMethod()
  return newPayload
})

----------------------------------------

TITLE: Accessing Fastify Error Codes
DESCRIPTION: Demonstrates how to access Fastify error codes in both ESM and CommonJS.

LANGUAGE: javascript
CODE:
// ESM
import { errorCodes } from 'fastify'

// CommonJS
const errorCodes = require('fastify').errorCodes

----------------------------------------

TITLE: Implementing onClose Hook in Fastify
DESCRIPTION: Demonstrates how to add an onClose hook in Fastify, which is triggered when fastify.close() is invoked to stop the server. This is useful for cleanup operations.

LANGUAGE: JavaScript
CODE:
// callback style
fastify.addHook('onClose', (instance, done) => {
  // Some code
  done()
})

// or async/await style
fastify.addHook('onClose', async (instance) => {
  // Some async code
  await closeDatabaseConnections()
})

----------------------------------------

TITLE: Checking for Decorators in Fastify (JavaScript)
DESCRIPTION: Shows how to check for the existence of decorators on server, request, and reply objects using hasDecorator, hasRequestDecorator, and hasReplyDecorator methods.

LANGUAGE: javascript
CODE:
fastify.hasDecorator('utility')

fastify.hasRequestDecorator('utility')

fastify.hasReplyDecorator('utility')

----------------------------------------

TITLE: Connecting Fastify to Redis
DESCRIPTION: Illustrates the usage of the @fastify/redis plugin to integrate Redis with Fastify. The example includes GET and POST routes for interacting with Redis key-value pairs.

LANGUAGE: javascript
CODE:
'use strict'

const fastify = require('fastify')()

fastify.register(require('@fastify/redis'), { host: '127.0.0.1' })
// or
fastify.register(require('@fastify/redis'), { url: 'redis://127.0.0.1', /* other redis options */ })

fastify.get('/foo', function (req, reply) {
  const { redis } = fastify
  redis.get(req.query.key, (err, val) => {
    reply.send(err || val)
  })
})

fastify.post('/foo', function (req, reply) {
  const { redis } = fastify
  redis.set(req.body.key, req.body.value, (err) => {
    reply.send(err || { status: 'ok' })
  })
})

fastify.listen({ port: 3000 }, err => {
  if (err) throw err
  console.log(`server listening on ${fastify.server.address().port}`)
})

----------------------------------------

TITLE: Updating TypeScript route definitions for Fastify v3
DESCRIPTION: Demonstrates how to update TypeScript route definitions to use the new type system in Fastify v3, which introduces generic constraining and defaulting.

LANGUAGE: typescript
CODE:
server.get<{
  Querystring: PingQuerystring;
  Params: PingParams;
  Headers: PingHeaders;
  Body: PingBody;
}>('/ping/:bar', opts, async (request, reply) => {
  console.log(request.query); // This is of type `PingQuerystring`
  console.log(request.params); // This is of type `PingParams`
  console.log(request.headers); // This is of type `PingHeaders`
  console.log(request.body); // This is of type `PingBody`
});

----------------------------------------

TITLE: Connecting Fastify to LevelDB
DESCRIPTION: Shows how to use the @fastify/leveldb plugin to integrate LevelDB with Fastify. The example includes GET and POST routes for interacting with LevelDB key-value pairs.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()

fastify.register(
  require('@fastify/leveldb'),
  { name: 'db' }
)

fastify.get('/foo', async function (req, reply) {
  const val = await this.level.db.get(req.query.key)
  return val
})

fastify.post('/foo', async function (req, reply) {
  await this.level.db.put(req.body.key, req.body.value)
  return { status: 'ok' }
})

fastify.listen({ port: 3000 }, err => {
  if (err) throw err
  console.log(`server listening on ${fastify.server.address().port}`)
})

----------------------------------------

TITLE: Setting Response Trailers in Fastify
DESCRIPTION: Demonstrates how to set response trailers, which are sent after the response body.

LANGUAGE: javascript
CODE:
reply.trailer('server-timing', function() {
  return 'db;dur=53, app;dur=47.2'
})

const { createHash } = require('node:crypto')
reply.trailer('content-md5', function(reply, payload, done) {
  const hash = createHash('md5')
  hash.update(payload)
  done(null, hash.disgest('hex'))
})

----------------------------------------

TITLE: Creating a Custom Knex Plugin for Fastify
DESCRIPTION: Demonstrates how to create a custom Fastify plugin for the Knex database library. The plugin decorates Fastify with a Knex instance and handles connection cleanup on server close.

LANGUAGE: javascript
CODE:
'use strict'

const fp = require('fastify-plugin')
const knex = require('knex')

function knexPlugin(fastify, options, done) {
  if(!fastify.knex) {
    const knex = knex(options)
    fastify.decorate('knex', knex)

    fastify.addHook('onClose', (fastify, done) => {
      if (fastify.knex === knex) {
        fastify.knex.destroy(done)
      }
    })
  }

  done()
}

export default fp(knexPlugin, { name: 'fastify-knex-example' })

----------------------------------------

TITLE: Configuring Fastify Logger with File Destination (JavaScript)
DESCRIPTION: This snippet shows how to configure the Fastify logger with a specific log level and file destination. It uses pino.destination() to specify the file path.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  logger: {
    level: 'info',
    file: '/path/to/file' // Will use pino.destination()
  }
})

fastify.get('/', options, function (request, reply) {
  request.log.info('Some info about the current request')
  reply.send({ hello: 'world' })
})

----------------------------------------

TITLE: Creating a Custom MySQL Plugin for Fastify
DESCRIPTION: Shows how to create a basic custom Fastify plugin for MySQL from scratch. The plugin decorates Fastify with a MySQL connection and handles connection cleanup on server close.

LANGUAGE: javascript
CODE:
const fp = require('fastify-plugin')
const mysql = require('mysql2/promise')

function fastifyMysql(fastify, options, done) {
  const connection = mysql.createConnection(options)

  if (!fastify.mysql) {
    fastify.decorate('mysql', connection)
  }

  fastify.addHook('onClose', (fastify, done) => connection.end().then(done).catch(done))

  done()
}

export default fp(fastifyMysql, { name: 'fastify-mysql-example' })

----------------------------------------

TITLE: Using Getters and Setters for Decorators in Fastify (JavaScript)
DESCRIPTION: Demonstrates how to use getter and setter functions when defining decorators in Fastify. This allows for defining properties with custom behavior.

LANGUAGE: javascript
CODE:
fastify.decorate('foo', {
  getter () {
    return 'a getter'
  }
})

console.log(fastify.foo) // 'a getter'

----------------------------------------

TITLE: Defining Routes with MongoDB Integration in Fastify
DESCRIPTION: Shows how to define routes that interact with MongoDB, including GET and POST endpoints with schema validation.

LANGUAGE: js
CODE:
/**
 * A plugin that provide encapsulated routes
 * @param {FastifyInstance} fastify encapsulated fastify instance
 * @param {Object} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options
 */
async function routes (fastify, options) {
  const collection = fastify.mongo.db.collection('test_collection')

  fastify.get('/', async (request, reply) => {
    return { hello: 'world' }
  })

  fastify.get('/animals', async (request, reply) => {
    const result = await collection.find().toArray()
    if (result.length === 0) {
      throw new Error('No documents found')
    }
    return result
  })

  fastify.get('/animals/:animal', async (request, reply) => {
    const result = await collection.findOne({ animal: request.params.animal })
    if (!result) {
      throw new Error('Invalid value')
    }
    return result
  })

  const animalBodyJsonSchema = {
    type: 'object',
    required: ['animal'],
    properties: {
      animal: { type: 'string' },
    },
  }

  const schema = {
    body: animalBodyJsonSchema,
  }

  fastify.post('/animals', { schema }, async (request, reply) => {
    // we can use the `request.body` object to get the data sent by the client
    const result = await collection.insertOne({ animal: request.body.animal })
    return result
  })
}

module.exports = routes

----------------------------------------

TITLE: Enabling Semicolon Delimiter in Query String for Fastify v5
DESCRIPTION: In Fastify v5, semicolon delimiters in query strings are disabled by default. To enable them, set 'useSemicolonDelimiter: true' in the server configuration.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  useSemicolonDelimiter: true
});

----------------------------------------

TITLE: Google Cloud Functions Fastify Setup
DESCRIPTION: Configuration for running Fastify on Google Cloud Functions with custom content type parser

LANGUAGE: javascript
CODE:
const fastify = require("fastify")({
  logger: true
});

fastify.addContentTypeParser('application/json', {}, (req, body, done) => {
  done(null, body.body);
});

const fastifyFunction = async (request, reply) => {
  await fastify.ready();
  fastify.server.emit('request', request, reply)
}

exports.fastifyFunction = fastifyFunction;

----------------------------------------

TITLE: Accessing Route Parameters in Fastify v5
DESCRIPTION: In Fastify v5, the parameters object no longer has a prototype. Use Object.hasOwn() instead of hasOwnProperty to check for parameter existence.

LANGUAGE: javascript
CODE:
// v4
fastify.get('/route/:name', (req, reply) => {
  console.log(req.params.hasOwnProperty('name')); // true
  return { hello: req.params.name };
});

LANGUAGE: javascript
CODE:
// v5
fastify.get('/route/:name', (req, reply) => {
  console.log(Object.hasOwn(req.params, 'name')); // true
  return { hello: req.params.name };
});

----------------------------------------

TITLE: Vercel Serverless Configuration
DESCRIPTION: Setup for deploying Fastify on Vercel's serverless platform

LANGUAGE: json
CODE:
{
    "rewrites": [
        {
            "source": "/(.*)",
            "destination": "/api/serverless.js"
        }
    ]
}

LANGUAGE: javascript
CODE:
"use strict";

import * as dotenv from "dotenv";
dotenv.config();

import Fastify from "fastify";

const app = Fastify({
  logger: true,
});

app.register(import("../src/app.js"));

export default async (req, res) => {
    await app.ready();
    app.server.emit('request', req, res);
}

----------------------------------------

TITLE: Updating logging serializers for Fastify v3
DESCRIPTION: Shows how to update custom logging serializers to work with Fastify v3's Request and Reply objects instead of native ones.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  logger: {
    serializers: {
      res(reply) {
        return {
          statusCode: reply.statusCode,
          customProp: reply.raw.customProp
        };
      }
    }
  }
});

----------------------------------------

TITLE: Setting Multiple Response Headers in Fastify
DESCRIPTION: Shows how to set multiple response headers at once using the reply.headers() method.

LANGUAGE: javascript
CODE:
reply.headers({
  'x-foo': 'foo',
  'x-bar': 'bar'
});

----------------------------------------

TITLE: Using Getter/Setter Pattern for Request Decoration in Fastify (JavaScript)
DESCRIPTION: Demonstrates an alternative approach to decorating the Request object using the getter/setter pattern. This ensures unique properties for each request without using hooks.

LANGUAGE: javascript
CODE:
fastify.decorateRequest('my_decorator_holder') // define the holder
fastify.decorateRequest('user', {
  getter () {
    this.my_decorator_holder ??= {} // initialize the holder
    return this.my_decorator_holder
  }
})

fastify.get('/', async function (req, reply) {
  req.user.access = 'granted'
  // other code
})

----------------------------------------

TITLE: Sending Early Hints in Fastify
DESCRIPTION: Shows how to send early hints to the client using reply.writeEarlyHints().

LANGUAGE: javascript
CODE:
reply.writeEarlyHints({
  Link: '</styles.css>; rel=preload; as=style'
});

----------------------------------------

TITLE: Setting Trailers in Fastify v5
DESCRIPTION: In Fastify v5, directly returning trailers from a handler is no longer possible. Use an async function or callback instead.

LANGUAGE: javascript
CODE:
// v4
fastify.get('/route', (req, reply) => {
  reply.trailer('ETag', function (reply, payload) {
    return 'custom-etag'
  })
  reply.send('')
});

LANGUAGE: javascript
CODE:
// v5
fastify.get('/route', (req, reply) => {
  reply.trailer('ETag', async function (reply, payload) {
    return 'custom-etag'
  })
  reply.send('')
});

----------------------------------------

TITLE: Setting Custom Headers in Fastify Request
DESCRIPTION: Demonstrates how to set custom headers on a Fastify request object. This operation adds new values to the request headers, which are accessible via request.headers.

LANGUAGE: javascript
CODE:
request.headers = {
  'foo': 'bar',
  'baz': 'qux'
}

----------------------------------------

TITLE: Using Custom Logger Instance in Fastify (JavaScript)
DESCRIPTION: This code demonstrates how to use a custom logger instance in Fastify. It creates a Pino logger instance and passes it to Fastify as loggerInstance.

LANGUAGE: javascript
CODE:
const log = require('pino')({ level: 'info' })
const fastify = require('fastify')({ loggerInstance: log })

log.info('does not have request information')

fastify.get('/', function (request, reply) {
  request.log.info('includes request information, but is the same logger instance as `log`')
  reply.send({ hello: 'world' })
})

----------------------------------------

TITLE: Compiling Validation Schema in Fastify
DESCRIPTION: Shows how to use the compileValidationSchema method to compile a validation schema and obtain a validation function. This method caches compiled functions for performance.

LANGUAGE: javascript
CODE:
const validate = request
                  .compileValidationSchema({
                    type: 'object',
                    properties: {
                      foo: {
                        type: 'string'
                      }
                    }
                  })
console.log(validate({ foo: 'bar' })) // true
console.log(validate.errors) // null

// or

const validate = request
                  .compileValidationSchema({
                    type: 'object',
                    properties: {
                      foo: {
                        type: 'string'
                      }
                    }
                  }, 200)
console.log(validate({ hello: 'world' })) // false
console.log(validate.errors) // validation errors

----------------------------------------

TITLE: Serializing Response Data in Fastify
DESCRIPTION: Demonstrates how to use custom serializers for response data.

LANGUAGE: javascript
CODE:
reply
  .header('Content-Type', 'application/x-protobuf')
  .serializer(protoBuf.serialize)

----------------------------------------

TITLE: URL Parameter Handling in Fastify
DESCRIPTION: Examples of handling static, parametric and wildcard URL patterns in route definitions.

LANGUAGE: javascript
CODE:
// parametric
fastify.get('/example/:userId', function (request, reply) {
  const { userId } = request.params;
})

// wildcard
fastify.get('/example/*', function (request, reply) {})

// regexp
fastify.get('/example/:file(^\\d+).png', function (request, reply) {
  const { file } = request.params;
})

----------------------------------------

TITLE: Using getValidationFunction in Fastify
DESCRIPTION: Demonstrates how to use the getValidationFunction method to obtain a validation function for a given schema or HTTP part. The function returns a validation function that can be used to validate data.

LANGUAGE: javascript
CODE:
const validate = request
                  .getValidationFunction({
                    type: 'object',
                    properties: {
                      foo: {
                        type: 'string'
                      }
                    }
                  })
console.log(validate({ foo: 'bar' })) // true
console.log(validate.errors) // null

// or

const validate = request
                  .getValidationFunction('body')
console.log(validate({ foo: 0.5 })) // false
console.log(validate.errors) // validation errors

----------------------------------------

TITLE: Body Parser Implementation
DESCRIPTION: Example of implementing a body parser with string parsing and error handling.

LANGUAGE: javascript
CODE:
fastify.addContentTypeParser('application/json', { parseAs: 'string' }, function (req, body, done) {
  try {
    const json = JSON.parse(body)
    done(null, json)
  } catch (err) {
    err.statusCode = 400
    done(err, undefined)
  }
})

----------------------------------------

TITLE: Handling uncaught exceptions in Fastify v3
DESCRIPTION: Shows how Fastify v3 handles uncaught exceptions in both sync and async routes, calling the configured error handler.

LANGUAGE: javascript
CODE:
fastify.setErrorHandler((error, request, reply) => {
  // this IS called
  reply.send(error)
})
fastify.get('/', (request, reply) => {
  const maybeAnArray = request.body.something ? [] : 'I am a string'
  maybeAnArray.substr() // Thrown: [].substr is not a function, but it is handled
})

----------------------------------------

TITLE: Catch-All Content Parser Implementation
DESCRIPTION: Examples of implementing catch-all content type parsers for handling all request types.

LANGUAGE: javascript
CODE:
const split2 = require('split2')
const pump = require('pump')

fastify.addContentTypeParser('*', (request, payload, done) => {
  done(null, pump(payload, split2(JSON.parse)))
})

fastify.route({
  method: 'POST',
  url: '/api/log/jsons',
  handler: (req, res) => {
    req.body.on('data', d => console.log(d)) // log every incoming object
  }
})

----------------------------------------

TITLE: Customizing Fastify Logger Serializers (JavaScript)
DESCRIPTION: This snippet shows how to customize the logger serializers in Fastify. It provides an example of a custom serializer for the request object that only logs the URL.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')({
  logger: {
    serializers: {
      req (request) {
        return { url: request.url }
      }
    }
  }
})

----------------------------------------

TITLE: Decorating with Dependencies in Fastify (JavaScript)
DESCRIPTION: Illustrates how to use the dependencies parameter when decorating Fastify objects. It shows how to ensure that required decorators are available before defining a new decorator.

LANGUAGE: javascript
CODE:
async function greetDecorator (fastify, opts) {
  fastify.decorate('greet', () => {
    return 'greet message'
  })
}

async function hiDecorator (fastify, opts) {
  fastify.decorate('hi', () => {
    return 'hi message'
  })
}

async function utilityDecorator (fastify, opts) {
  fastify.decorate('utility', () => {
    return `${fastify.greet()} | ${fastify.hi()}`
  })
}

fastify.register(fastifyPlugin(greetDecorator, { name: 'greet' }))
fastify.register(fastifyPlugin(hiDecorator, { name: 'hi' }))
fastify.register(fastifyPlugin(utilityDecorator, { dependencies: ['greet', 'hi'] }))

fastify.get('/', function (req, reply) {
  // Response: {"hello":"greet message | hi message"}
  reply.send({ hello: fastify.utility() })
})

fastify.listen({ port: 3000 }, (err, address) => {
  if (err) throw err
})

----------------------------------------

TITLE: Using redirect() Method in Fastify v5
DESCRIPTION: The reply.redirect() method has a new signature in Fastify v5: reply.redirect(url: string, code?: number).

LANGUAGE: javascript
CODE:
// v4
reply.redirect(301, '/new-route')

LANGUAGE: javascript
CODE:
// v5
reply.redirect('/new-route', 301)

----------------------------------------

TITLE: Decorating Reply Object in Fastify (JavaScript)
DESCRIPTION: Shows how to decorate the Reply object in Fastify using the decorateReply method. It also demonstrates proper encapsulation using an onRequest hook.

LANGUAGE: javascript
CODE:
const fp = require('fastify-plugin')

async function myPlugin (app) {
  app.decorateReply('foo')
  app.addHook('onRequest', async (req, reply) => {
    reply.foo = { bar: 42 }
  })
}

module.exports = fp(myPlugin)

----------------------------------------

TITLE: Plugin Options without Namespacing
DESCRIPTION: Shows plugin registration with direct options when name collisions are not a concern.

LANGUAGE: javascript
CODE:
fastify.register(require('fastify-foo'), {
  prefix: '/foo',
  fooOption1: 'value',
  fooOption2: 'value'
})

----------------------------------------

TITLE: Customizing Ajv Instance in Fastify
DESCRIPTION: Shows how to create a custom Ajv instance with specific options and set it as the validator compiler in Fastify.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()
const Ajv = require('ajv')
const ajv = new Ajv({
  removeAdditional: 'all',
  useDefaults: true,
  coerceTypes: 'array',
  // any other options
  // ...
})
fastify.setValidatorCompiler(({ schema, method, url, httpPart }) => {
  return ajv.compile(schema)
})

----------------------------------------

TITLE: Adding Await to Register Calls Codemod for Fastify v4
DESCRIPTION: This codemod adds 'await' to register calls in Fastify v4 for proper asynchronous execution.

LANGUAGE: bash
CODE:
npx codemod@latest fastify/4/await-register-calls

----------------------------------------

TITLE: Defining Response Serialization Schema in Fastify
DESCRIPTION: Demonstrates how to define a JSON Schema for serializing the response in a Fastify route.

LANGUAGE: javascript
CODE:
const schema = {
  response: {
    200: {
      type: 'object',
      properties: {
        value: { type: 'string' },
        otherValue: { type: 'boolean' }
      }
    }
  }
}

fastify.post('/the/url', { schema }, handler)

----------------------------------------

TITLE: Removing app.use() Codemod for Fastify v4
DESCRIPTION: This codemod removes the deprecated app.use() method in Fastify v4.

LANGUAGE: bash
CODE:
npx codemod@latest fastify/4/remove-app-use

----------------------------------------

TITLE: Installing TypeBox Type Provider for Fastify
DESCRIPTION: This snippet shows how to install the TypeBox Type Provider package for Fastify using npm.

LANGUAGE: bash
CODE:
$ npm i @fastify/type-provider-typebox

----------------------------------------

TITLE: Plugin Options with Namespacing
DESCRIPTION: Demonstrates how to register a plugin with namespaced options to avoid option name collisions.

LANGUAGE: javascript
CODE:
fastify.register(require('fastify-foo'), {
  prefix: '/foo',
  foo: {
    fooOption1: 'value',
    fooOption2: 'value'
  }
})

----------------------------------------

TITLE: Plugin Scope Management with skip-override
DESCRIPTION: Demonstrates using the skip-override Symbol to prevent scope creation (not recommended).

LANGUAGE: javascript
CODE:
function yourPlugin (fastify, opts, done) {
  fastify.decorate('utility', function () {})
  done()
}
yourPlugin[Symbol.for('skip-override')] = true
module.exports = yourPlugin

----------------------------------------

TITLE: Function-based Plugin Options
DESCRIPTION: Illustrates using a function to generate plugin options with access to the Fastify instance.

LANGUAGE: javascript
CODE:
const fp = require('fastify-plugin')

fastify.register(fp((fastify, opts, done) => {
  fastify.decorate('foo_bar', { hello: 'world' })

  done()
}))

fastify.register(require('fastify-foo'), parent => parent.foo_bar)

----------------------------------------

TITLE: AWS Lambda Handler Integration
DESCRIPTION: Integration code for connecting Fastify with AWS Lambda using @fastify/aws-lambda adapter

LANGUAGE: javascript
CODE:
const awsLambdaFastify = require('@fastify/aws-lambda')
const init = require('./app');

const proxy = awsLambdaFastify(init())

exports.handler = proxy;

----------------------------------------

TITLE: Installing json-schema-to-ts Type Provider for Fastify
DESCRIPTION: This snippet shows how to install the json-schema-to-ts Type Provider package for Fastify using npm.

LANGUAGE: bash
CODE:
$ npm i @fastify/type-provider-json-schema-to-ts

----------------------------------------

TITLE: Running Fastify v4 Migration Recipe Codemod
DESCRIPTION: This command runs a migration recipe to automatically update code to Fastify v4 using the Codemod tool.

LANGUAGE: bash
CODE:
npx codemod@latest fastify/4/migration-recipe

----------------------------------------

TITLE: Implementing Encapsulated Contexts in Fastify (JavaScript)
DESCRIPTION: This snippet demonstrates how to create encapsulated contexts in Fastify, including authenticated and public routes with different levels of access to decorators and plugins.

LANGUAGE: javascript
CODE:
const fastify = require('fastify')()

fastify.decorateRequest('answer', 42)

fastify.register(async function authenticatedContext (childServer) {
  childServer.register(require('@fastify/bearer-auth'), { keys: ['abc123'] })

  childServer.route({
    path: '/one',
    method: 'GET',
    handler (request, response) {
      response.send({
        answer: request.answer,
        foo: request.foo,
        bar: request.bar
      })
    }
  })
})

fastify.register(async function publicContext (childServer) {
  childServer.decorateRequest('foo', 'foo')

  childServer.route({
    path: '/two',
    method: 'GET',
    handler (request, response) {
      response.send({
        answer: request.answer,
        foo: request.foo,
        bar: request.bar
      })
    }
  })

  childServer.register(async function grandchildContext (grandchildServer) {
    grandchildServer.decorateRequest('bar', 'bar')

    grandchildServer.route({
      path: '/three',
      method: 'GET',
      handler (request, response) {
        response.send({
          answer: request.answer,
          foo: request.foo,
          bar: request.bar
        })
      }
    })
  })
})

fastify.listen({ port: 8000 })

----------------------------------------

TITLE: Conditional Logic Based on Request Abort Status
DESCRIPTION: Shows how to check the abort status during request processing to conditionally execute different logic paths.

LANGUAGE: javascript
CODE:
app.get('/', async (request, reply) => {
  await sleep(3000)
  if (request.raw.aborted) {
    // do something here
  }
  await sleep(3000)
  reply.code(200).send({ ok: true })
})

----------------------------------------

TITLE: Testing Shared Context with cURL (Shell)
DESCRIPTION: This snippet shows how to test the shared context using cURL commands, demonstrating that both routes now have access to all decorators.

LANGUAGE: shell
CODE:
# curl http://127.0.0.1:8000/two
{"answer":42,"foo":"foo","bar":"bar"}
# curl http://127.0.0.1:8000/three
{"answer":42,"foo":"foo","bar":"bar"}

----------------------------------------

TITLE: Initializing Fastify Server with Abort Detection
DESCRIPTION: Sets up a Fastify server with global abort detection using an onRequest hook. Includes a delayed response endpoint and logging configuration using pino-pretty.

LANGUAGE: javascript
CODE:
import Fastify from 'fastify';

const sleep = async (time) => {
  return await new Promise(resolve => setTimeout(resolve, time || 1000));
}

const app = Fastify({
  logger: {
    transport: {
      target: 'pino-pretty',
      options: {
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname',
      },
    },
  },
})

app.addHook('onRequest', async (request, reply) => {
  request.raw.on('close', () => {
    if (request.raw.aborted) {
      app.log.info('request closed')
    }
  })
})

app.get('/', async (request, reply) => {
  await sleep(3000)
  reply.code(200).send({ ok: true })
})

const start = async () => {
  try {
    await app.listen({ port: 3000 })
  } catch (err) {
    app.log.error(err)
    process.exit(1)
  }
}

start()

----------------------------------------

TITLE: Running Benchmark Against Different Node.js Versions
DESCRIPTION: Uses npx to run the benchmark test with a specific Node.js version (10 in this example).

LANGUAGE: sh
CODE:
npx -p node@10 -- npm run benchmark

----------------------------------------

TITLE: Schema Reuse with Replace Method in Fastify
DESCRIPTION: Demonstrates the replace-way method of schema reuse where schemas are referenced by their $id. This approach allows for direct schema replacement before validation.

LANGUAGE: javascript
CODE:
const sharedAddressSchema = {
  $id: 'sharedAddress',
  type: 'object',
  required: ['line1', 'country', 'city', 'zipcode'],
  properties: {
    line1: { type: 'string' },
    line2: { type: 'string' },
    country: { type: 'string' },
    city: { type: 'string' },
    zipcode: { type: 'string' }
  }
}
fastify.addSchema(sharedAddressSchema)

const bodyJsonSchema = {
  type: 'object',
  properties: {
    vacation: 'sharedAddress#'
  }
}

const schema = { body: bodyJsonSchema }

fastify.post('/the/url', { schema }, handler)

----------------------------------------

TITLE: Running Benchmark in Different Branches
DESCRIPTION: Uses branchcmp to run the benchmark test across multiple Git branches, with 2 rounds of testing.

LANGUAGE: sh
CODE:
branchcmp --rounds 2 --script "npm run benchmark"

----------------------------------------

TITLE: Implementing Non-Substitutable Type Provider in TypeScript
DESCRIPTION: This snippet demonstrates an incorrect implementation of a custom type provider that is not substitutable with FastifyTypeProviderDefault due to the use of 'never' in type narrowing.

LANGUAGE: typescript
CODE:
export interface NotSubstitutableTypeProvider extends FastifyTypeProvider {
   // bad, nothing is assignable to `never` (except for itself)
  validator: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : never;
  serializer: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : never;
}

----------------------------------------

TITLE: Running Benchmark with Custom Example
DESCRIPTION: Demonstrates how to run a benchmark with a specific example using branchcmp, concurrently, and autocannon. It runs an async/await example and benchmarks it with 100 connections for 5 seconds.

LANGUAGE: sh
CODE:
branchcmp --rounds 2 -s "node ./node_modules/concurrently -k -s first \"node ./examples/asyncawait.js\" \"node ./node_modules/autocannon -c 100 -d 5 -p 10 localhost:3000/\""

----------------------------------------

TITLE: Mock Provider Implementation
DESCRIPTION: Simulates an external authentication provider with delayed responses and magic key validation. Includes webhook simulation and sensitive data fetch functionality.

LANGUAGE: javascript
CODE:
const { fetch } = require('undici')
const { setTimeout } = require('node:timers/promises')

const MAGIC_KEY = '12345'

const delay = setTimeout

exports.thirdPartyMagicKeyGenerator = async (ms) => {
  await delay(ms)

  const { status } = await fetch(
    'http://localhost:1234/webhook',
    {
      body: JSON.stringify({ magicKey: MAGIC_KEY }),
      method: 'POST',
      headers: {
        'content-type': 'application/json',
      },
    },
  )

  if (status !== 200) {
    throw new Error('Failed to fetch magic key')
  }
}

exports.fetchSensitiveData = async (key) => {
  await delay(700)
  const data = { sensitive: true }

  if (key === MAGIC_KEY) {
    return data
  }

  throw new Error('Invalid key')
}

----------------------------------------

TITLE: Unsandboxing VSCode Application
DESCRIPTION: Command to remove quarantine attribute from VSCode for portable mode operation

LANGUAGE: shell
CODE:
xattr -dr com.apple.quarantine /Applications/VSCodeFastify/Visual\ Studio\ Code.app

----------------------------------------

TITLE: Demonstrating JSON.parse() Behavior with __proto__
DESCRIPTION: This snippet illustrates how JSON.parse() handles the __proto__ property name, creating a regular property instead of setting the object's prototype.

LANGUAGE: javascript
CODE:
> const text = '{"b": 5, "__proto__": { "c": 6 }}';
> const a = JSON.parse(text);
> a;
{b: 5, __proto__: { c: 6 }}

----------------------------------------

TITLE: Creating VSCode Data Directories
DESCRIPTION: Shell command to create required portable data directories for VSCode

LANGUAGE: shell
CODE:
mkdir -p /Applications/VSCodeFastify/code-portable-data/{user-data,extensions}

----------------------------------------

TITLE: Running Benchmark in Current Branch
DESCRIPTION: Executes the benchmark test in the current Git branch using npm.

LANGUAGE: sh
CODE:
npm run benchmark

----------------------------------------

TITLE: Installing ESLint Extension
DESCRIPTION: Command to install ESLint extension for VSCode

LANGUAGE: shell
CODE:
code-fastify --install-extension dbaeumer.vscode-eslint

----------------------------------------

TITLE: Comparing Current Branch with Main (Gitflow)
DESCRIPTION: Uses branchcmp to compare the current branch with the main branch using Gitflow, running 2 rounds of benchmarks.

LANGUAGE: sh
CODE:
branchcmp --rounds 2 --gitflow --script "npm run benchmark"

LANGUAGE: sh
CODE:
npm run bench

----------------------------------------

TITLE: VSCode Settings Configuration
DESCRIPTION: JSON configuration for VSCode editor settings including JavaScript formatting and visual customizations

LANGUAGE: json
CODE:
{
    "[javascript]": {
        "editor.defaultFormatter": "dbaeumer.vscode-eslint",
        "editor.codeActionsOnSave": {
            "source.fixAll": true
        }
    },

    "workbench.colorCustomizations": {
        "statusBar.background": "#178bb9"
    }
}

----------------------------------------

TITLE: Verifying VSCode Installation Path
DESCRIPTION: Shell command to verify VSCode installation in the Fastify-specific directory

LANGUAGE: shell
CODE:
[ -d /Applications/VSCodeFastify/Visual\ Studio\ Code.app ] && echo "found"

----------------------------------------

TITLE: Route-Specific Abort Detection in Fastify
DESCRIPTION: Demonstrates how to implement abort detection within a specific route handler instead of using a global hook.

LANGUAGE: javascript
CODE:
app.get('/', async (request, reply) => {
  request.raw.on('close', () => {
    if (request.raw.aborted) {
      app.log.info('request closed')
    }
  })
  await sleep(3000)
  reply.code(200).send({ ok: true })
})

----------------------------------------

TITLE: Setting VSCode Command Alias
DESCRIPTION: Shell alias definition for Fastify-specific VSCode command

LANGUAGE: shell
CODE:
alias code-fastify="/Applications/VSCodeFastify/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code"

----------------------------------------

TITLE: Testing Abort Detection with Fetch API
DESCRIPTION: Example code showing how to test abort detection using the Fetch API with AbortController to simulate client disconnection.

LANGUAGE: javascript
CODE:
const controller = new AbortController();
const signal = controller.signal;

(async () => {
   try {
      const response = await fetch('http://localhost:3000', { signal });
      const body = await response.text();
      console.log(body);
   } catch (error) {
      console.error(error);
   }
})();

setTimeout(() => {
   controller.abort()
}, 1000);

----------------------------------------

TITLE: Adding Documentation References in Markdown
DESCRIPTION: Shows how to properly format reference links in Fastify documentation using Markdown syntax.

LANGUAGE: markdown
CODE:
To learn more about hooks, see [Fastify hooks](https://fastify.dev/docs/latest/Reference/Hooks/).

----------------------------------------

TITLE: Using Express middleware in Fastify v3
DESCRIPTION: Demonstrates how to use Express middleware in Fastify v3 by registering the @fastify/express plugin.

LANGUAGE: javascript
CODE:
await fastify.register(require('@fastify/express'));
fastify.use(require('cors')());

----------------------------------------

TITLE: Displaying CI Tested Operating Systems in Markdown Table
DESCRIPTION: A markdown table showing the CI testing environments for Fastify, including operating systems, package managers, and Node.js versions.

LANGUAGE: markdown
CODE:
| OS      | YAML Workflow Label | Package Manager | Node.js     | Nsolid(Node)  |
| ------- | ------------------- | --------------- | ----------- | ------------- |
| Linux   | `ubuntu-latest`     | npm             | 20          | v5(20)        |
| Linux   | `ubuntu-latest`     | yarn,pnpm       | 20          | v5(20)        |
| Windows | `windows-latest`    | npm             | 20          | v5(20)        |
| MacOS   | `macos-latest`      | npm             | 20          | v5(20)        |

----------------------------------------

TITLE: Updating schema substitution for Fastify v3
DESCRIPTION: Demonstrates how to update schema substitution to use JSON Schema compliant $ref based substitution in Fastify v3.

LANGUAGE: javascript
CODE:
const schema = {
  body: {
    $ref: 'schemaId#'
  }
};
fastify.route({ method, url, schema, handler });

----------------------------------------

TITLE: Creating Centered Heading in Markdown
DESCRIPTION: Demonstrates how to create a centered heading using HTML within a Markdown file. This is used to display the main 'Fastify' title at the top of the document.

LANGUAGE: markdown
CODE:
<h1 align="center">Fastify</h1>

----------------------------------------

TITLE: Updating schema validation options for Fastify v3
DESCRIPTION: Shows how to update schema validation options using setValidatorCompiler instead of setSchemaCompiler and setSchemaResolver in Fastify v3.

LANGUAGE: javascript
CODE:
const fastify = Fastify();
const ajv = new AJV();
ajv.addSchema(schemaA);
ajv.addSchema(schemaB);

fastify.setValidatorCompiler(({ schema, method, url, httpPart }) =>
  ajv.compile(schema)
);

----------------------------------------

TITLE: Updating reply.res to reply.raw Codemod for Fastify v4
DESCRIPTION: This codemod updates the deprecated reply.res to reply.raw in Fastify v4.

LANGUAGE: bash
CODE:
npx codemod@latest fastify/4/reply-raw-access

----------------------------------------

TITLE: Wrapping Routes in Plugin Codemod for Fastify v4
DESCRIPTION: This codemod wraps synchronous route definitions in a plugin for Fastify v4.

LANGUAGE: bash
CODE:
npx codemod@latest fastify/4/wrap-routes-plugin

----------------------------------------

TITLE: Updating Schema for Multiple Types in Fastify v4
DESCRIPTION: This snippet demonstrates how to update schemas with multiple types to comply with Ajv v8 in Fastify v4.

LANGUAGE: javascript
CODE:
{
  type: 'object',
  properties: {
    api_key: { type: 'string' },
    image: {
      anyOf: [
        { type: 'array' },
        { type: 'object' }
      ]
    }
  }
}

----------------------------------------

TITLE: Using Custom Logger Instance in Fastify v5
DESCRIPTION: In Fastify v5, the 'logger' option no longer accepts a custom logger instance. Use the 'loggerInstance' option instead to provide a custom logger.

LANGUAGE: javascript
CODE:
// v4
const logger = require('pino')();
const fastify = require('fastify')({
  logger
});

LANGUAGE: javascript
CODE:
// v5
const loggerInstance = require('pino')();
const fastify = require('fastify')({
  loggerInstance
});

----------------------------------------

TITLE: Using listen() Method in Fastify v5
DESCRIPTION: The variadic argument signature of the listen() method has been removed in Fastify v5. Use an options object instead.

LANGUAGE: javascript
CODE:
// v4
fastify.listen(8000)

LANGUAGE: javascript
CODE:
// v5
fastify.listen({ port: 8000 })

----------------------------------------

TITLE: Hijacking Response in Fastify v5
DESCRIPTION: In Fastify v5, modifying reply.sent is no longer allowed. Use reply.hijack() instead to prevent the response from being sent automatically.

LANGUAGE: javascript
CODE:
// v4
fastify.get('/route', (req, reply) => {
  reply.sent = true;
  reply.raw.end('hello');
});

LANGUAGE: javascript
CODE:
// v5
fastify.get('/route', (req, reply) => {
  reply.hijack();
  reply.raw.end('hello');
});

----------------------------------------

TITLE: Using Diagnostic Channel in Fastify v5
DESCRIPTION: Fastify v5 now supports the Diagnostics Channel API natively and provides a way to trace the lifecycle of a request.

LANGUAGE: javascript
CODE:
'use strict'

const diagnostics = require('node:diagnostics_channel')
const sget = require('simple-get').concat
const Fastify = require('fastify')

diagnostics.subscribe('tracing:fastify.request.handler:start', (msg) => {
  console.log(msg.route.url) // '/:id'
  console.log(msg.route.method) // 'GET'
})

diagnostics.subscribe('tracing:fastify.request.handler:end', (msg) => {
  // msg is the same as the one emitted by the 'tracing:fastify.request.handler:start' channel
  console.log(msg)
})

diagnostics.subscribe('tracing:fastify.request.handler:error', (msg) => {
  // in case of error
})

const fastify = Fastify()
fastify.route({
  method: 'GET',
  url: '/:id',
  handler: function (req, reply) {
    return { hello: 'world' }
  }
})

fastify.listen({ port: 0 }, function () {
  sget({
    method: 'GET',
    url: fastify.listeningOrigin + '/7'
  }, (err, response, body) => {
    t.error(err)
    t.equal(response.statusCode, 200)
    t.same(JSON.parse(body), { hello: 'world' })
  })
})

----------------------------------------

TITLE: Demonstrating JavaScript Prototype Behavior
DESCRIPTION: This snippet shows how object prototypes work in JavaScript, including setting a prototype and accessing inherited properties.

LANGUAGE: javascript
CODE:
> const a = { b: 5 };
> a.b;
5
> a.__proto__ = { c: 6 };
> a.c;
6
> a;
{ b: 5 }

----------------------------------------

TITLE: Demonstrating Prototype Poisoning with Object.assign()
DESCRIPTION: This snippet shows how Object.assign() can unintentionally set an object's prototype when copying properties, leading to potential security issues.

LANGUAGE: javascript
CODE:
> const x = Object.assign({}, a);
> x;
{ b: 5}
> x.c;
6;

----------------------------------------

TITLE: Configuring HAProxy as Reverse Proxy for Fastify
DESCRIPTION: Complete HAProxy configuration example demonstrating TLS termination, multiple domain routing, static file serving, and load balancing across multiple Fastify instances.

LANGUAGE: conf
CODE:
# The global section defines base HAProxy (engine) instance configuration.
global
  log /dev/log syslog
  maxconn 4096
  chroot /var/lib/haproxy
  user haproxy
  group haproxy

  # Set some baseline TLS options.
  tune.ssl.default-dh-param 2048
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
  ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11
  ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

# Each defaults section defines options that will apply to each subsequent
# subsection until another defaults section is encountered.
defaults
  log   global
  mode  http
  option        httplog
  option        dontlognull
  retries       3
  option redispatch
  # The following option makes haproxy close connections to backend servers
  # instead of keeping them open. This can alleviate unexpected connection
  # reset errors in the Node process.
  option http-server-close
  maxconn       2000
  timeout connect 5000
  timeout client 50000
  timeout server 50000

  # Enable content compression for specific content types.
  compression algo gzip
  compression type text/html text/plain text/css application/javascript

# A "frontend" section defines a public listener, i.e. an "http server"
# as far as clients are concerned.
frontend proxy
  # The IP address here would be the _public_ IP address of the server.
  # Here, we use a private address as an example.
  bind 10.0.0.10:80
  # This redirect rule will redirect all traffic that is not TLS traffic
  # to the same incoming request URL on the HTTPS port.
  redirect scheme https code 308 if !{ ssl_fc }
  # Technically this use_backend directive is useless since we are simply
  # redirecting all traffic to this frontend to the HTTPS frontend. It is
  # merely included here for completeness sake.
  use_backend default-server

# This frontend defines our primary, TLS only, listener. It is here where
# we will define the TLS certificates to expose and how to direct incoming
# requests.
frontend proxy-ssl
  # The `/etc/haproxy/certs` directory in this example contains a set of
  # certificate PEM files that are named for the domains the certificates are
  # issued for. When HAProxy starts, it will read this directory, load all of
  # the certificates it finds here, and use SNI matching to apply the correct
  # certificate to the connection.
  bind 10.0.0.10:443 ssl crt /etc/haproxy/certs

  # Here we define rule pairs to handle static resources. Any incoming request
  # that has a path starting with `/static`, e.g.
  # `https://one.example.com/static/foo.jpeg`, will be redirected to the
  # static resources server.
  acl is_static path -i -m beg /static
  use_backend static-backend if is_static

  # Here we define rule pairs to direct requests to appropriate Node.js
  # servers based on the requested domain. The `acl` line is used to match
  # the incoming hostname and define a boolean indicating if it is a match.
  # The `use_backend` line is used to direct the traffic if the boolean is
  # true.
  acl example1 hdr_sub(Host) one.example.com
  use_backend example1-backend if example1

  acl example2 hdr_sub(Host) two.example.com
  use_backend example2-backend if example2

  # Finally, we have a fallback redirect if none of the requested hosts
  # match the above rules.
  default_backend default-server

# A "backend" is used to tell HAProxy where to request information for the
# proxied request. These sections are where we will define where our Node.js
# apps live and any other servers for things like static assets.
backend default-server
  # In this example we are defaulting unmatched domain requests to a single
  # backend server for all requests. Notice that the backend server does not
  # have to be serving TLS requests. This is called "TLS termination": the TLS
  # connection is "terminated" at the reverse proxy.
  # It is possible to also proxy to backend servers that are themselves serving
  # requests over TLS, but that is outside the scope of this example.
  server server1 10.10.10.2:80

# This backend configuration will serve requests for `https://one.example.com`
# by proxying requests to three backend servers in a round-robin manner.
backend example1-backend
  server example1-1 10.10.11.2:80
  server example1-2 10.10.11.2:80
  server example2-2 10.10.11.3:80

# This one serves requests for `https://two.example.com`
backend example2-backend
  server example2-1 10.10.12.2:80
  server example2-2 10.10.12.2:80
  server example2-3 10.10.12.3:80

# This backend handles the static resources requests.
backend static-backend
  server static-server1 10.10.9.2:80

----------------------------------------

TITLE: Configuring Kubernetes Readiness Probe for Fastify
DESCRIPTION: Kubernetes readiness probe configuration for Fastify applications, ensuring proper health checking in containerized environments.

LANGUAGE: yaml
CODE:
readinessProbe:
    httpGet:
        path: /health
        port: 4000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 5

----------------------------------------

TITLE: Creating Markdown Hyperlinks in Fastify Documentation
DESCRIPTION: Demonstrates the correct and incorrect ways to format hyperlinks in Markdown for Fastify documentation. Shows proper link text formatting and explains best practices for reference links.

LANGUAGE: markdown
CODE:
<!-- More like this -->

// Add clear & brief description
[Fastify Plugins] (https://fastify.dev/docs/latest/Plugins/)

<!--Less like this -->

// incomplete description
[Fastify] (https://fastify.dev/docs/latest/Plugins/)

// Adding title in link brackets
[](https://fastify.dev/docs/latest/Plugins/ "fastify plugin")

// Empty title
[](https://fastify.dev/docs/latest/Plugins/)

// Adding links localhost URLs instead of using code strings (``)
[http://localhost:3000/](http://localhost:3000/)

----------------------------------------

TITLE: Plugin Testing Setup
DESCRIPTION: Shows how to test Fastify plugins by creating a mock application and testing both decorators and endpoints.

LANGUAGE: javascript
CODE:
const Fastify = require("fastify");
const { test }= require("node:test");
const myPlugin = require("../plugin/myFirstPlugin");

test("Test the Plugin Route", async t => {
    t.plan(5)
    const fastify = Fastify()

    fastify.register(myPlugin)

    fastify.get("/", async (request, reply) => {
        t.assert.ifError(request.helloRequest)
        t.assert.ok(request.helloRequest, "Hello World")
        t.assert.ok(fastify.helloInstance, "Hello Fastify Instance")
        return ({ message: request.helloRequest })
    })

    const fastifyResponse = await fastify.inject({
        method: "GET",
        url: "/"
    })
    t.assert.strictEqual(fastifyResponse.statusCode, 200)
    t.assert.deepStrictEqual(JSON.parse(fastifyResponse.body), { message: "Hello World" })
})

----------------------------------------

TITLE: Implementing Substitutable Type Provider in TypeScript
DESCRIPTION: This snippet shows the correct implementation of a custom type provider that is substitutable with FastifyTypeProviderDefault by using 'unknown' instead of 'never' for type narrowing.

LANGUAGE: typescript
CODE:
export interface SubstitutableTypeProvider extends FastifyTypeProvider {
  // good, anything can be assigned to `unknown`
  validator: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : unknown;
  serializer: this['schema'] extends /** custom check here**/ ? /** narrowed type here **/ : unknown;
}

----------------------------------------

TITLE: Displaying Fastify Version Branches in Markdown
DESCRIPTION: A Markdown table showing the different Fastify version branches and their corresponding GitHub links. This helps contributors identify which branch to use for version-specific changes.

LANGUAGE: Markdown
CODE:
|Version|Branch|
|-------|------|
**v1.x**|[branch 1.x](https://github.com/fastify/fastify/tree/1.x)|
**v2.x**|[branch 2.x](https://github.com/fastify/fastify/tree/2.x)|
**v3.x**|[branch 3.x](https://github.com/fastify/fastify/tree/3.x)|
**v4.x**|[branch 4.x](https://github.com/fastify/fastify/tree/4.x)|

----------------------------------------

TITLE: Adding Bounty Template in Markdown
DESCRIPTION: Template for adding bounty information to GitHub issues, including the bounty amount and link to the bounty program documentation.

LANGUAGE: markdown
CODE:
## 💰 Bounty

This issue has a bounty of [$AMOUNT](LINK TO THE BOUNTY COMMENT).
_Read more about [the bounty program](./EXPENSE_POLICY.md)_

----------------------------------------

TITLE: Installing Fastify Project
DESCRIPTION: Commands to create and initialize a new Fastify project using npm init and install dependencies.

LANGUAGE: shell
CODE:
mkdir my-app
cd my-app
npm init fastify
npm i
npm run dev
npm start

----------------------------------------

TITLE: Installing Fastify as Dependency
DESCRIPTION: Command to install Fastify as a dependency in an existing project.

LANGUAGE: shell
CODE:
npm i fastify

----------------------------------------

TITLE: Basic Fastify Server Setup with Request Delay
DESCRIPTION: Initial server implementation showing basic route handlers and magic key initialization pattern. Includes ping endpoint, webhook handler, and protected customer routes.

LANGUAGE: javascript
CODE:
const Fastify = require('fastify')

const provider = require('./provider')

const server = Fastify({ logger: true })
const USUAL_WAIT_TIME_MS = 5000

server.get('/ping', function (request, reply) {
  reply.send({ error: false, ready: request.server.magicKey !== null })
})

server.post('/webhook', function (request, reply) {
  const { magicKey } = request.body
  request.server.magicKey = magicKey
  request.log.info('Ready for customer requests!')

  reply.send({ error: false })
})

server.get('/v1*', async function (request, reply) {
  try {
    const data = await provider.fetchSensitiveData(request.server.magicKey)
    return { customer: true, error: false }
  } catch (error) {
    request.log.error({
      error,
      message: 'Failed at fetching sensitive data from provider',
    })

    reply.statusCode = 500
    return { customer: null, error: true }
  }
})

server.decorate('magicKey')

server.listen({ port: '1234' }, () => {
  provider.thirdPartyMagicKeyGenerator(USUAL_WAIT_TIME_MS)
    .catch((error) => {
      server.log.error({
        error,
        message: 'Got an error while trying to get the magic key!'
      })
      server.close(() => process.exit(1))
    })
})

----------------------------------------

TITLE: Improved Fastify Request Delay Implementation
DESCRIPTION: Enhanced implementation using plugins to manage request delays and initialization. Separates concerns into setup plugin and delay factory.

LANGUAGE: javascript
CODE:
const fp = require('fastify-plugin')

const provider = require('./provider')

const USUAL_WAIT_TIME_MS = 5000

async function setup(fastify) {
  fastify.server.on('listening', doMagic)
  fastify.decorate('magicKey')

  function doMagic() {
    fastify.log.info('Doing magic!')

    provider.thirdPartyMagicKeyGenerator(USUAL_WAIT_TIME_MS)
      .catch((error) => {
        fastify.log.error({
          error,
          message: 'Got an error while trying to get the magic key!'
        })
        fastify.close(() => process.exit(1))
      })
  }
}

const delay = (routes) =>
  function (fastify, opts, done) {
    fastify.addHook('onRequest', function (request, reply, next) {
      if (!request.server.magicKey) {
        reply.statusCode = 503
        reply.header('Retry-After', USUAL_WAIT_TIME_MS)
        reply.send({ error: true, retryInMs: USUAL_WAIT_TIME_MS })
      }
      next()
    })

    fastify.register(routes, opts)
    done()
  }

module.exports = {
  setup: fp(setup),
  delay,
}

----------------------------------------

TITLE: Configuring Basic Fastify Schema Validation using fluent-json-schema
DESCRIPTION: Demonstrates setting up basic request validation for body, querystring, params, and headers using fluent-json-schema. Shows how to define various types of properties including strings, numbers, arrays, nullable fields, and enums.

LANGUAGE: javascript
CODE:
const S = require('fluent-json-schema')

// You can have an object like this, or query a DB to get the values
const MY_KEYS = {
  KEY1: 'ONE',
  KEY2: 'TWO'
}

const bodyJsonSchema = S.object()
  .prop('someKey', S.string())
  .prop('someOtherKey', S.number())
  .prop('requiredKey', S.array().maxItems(3).items(S.integer()).required())
  .prop('nullableKey', S.mixed([S.TYPES.NUMBER, S.TYPES.NULL]))
  .prop('multipleTypesKey', S.mixed([S.TYPES.BOOLEAN, S.TYPES.NUMBER]))
  .prop('multipleRestrictedTypesKey', S.oneOf([S.string().maxLength(5), S.number().minimum(10)]))
  .prop('enumKey', S.enum(Object.values(MY_KEYS)))
  .prop('notTypeKey', S.not(S.array()))

const queryStringJsonSchema = S.object()
  .prop('name', S.string())
  .prop('excitement', S.integer())

const paramsJsonSchema = S.object()
  .prop('par1', S.string())
  .prop('par2', S.integer())

const headersJsonSchema = S.object()
  .prop('x-foo', S.string().required())

// Note that there is no need to call `.valueOf()`!
const schema = {
  body: bodyJsonSchema,
  querystring: queryStringJsonSchema, // (or) query: queryStringJsonSchema
  params: paramsJsonSchema,
  headers: headersJsonSchema
}

fastify.post('/the/url', { schema }, handler)

----------------------------------------

TITLE: Schema Reuse with $ref in Fastify
DESCRIPTION: Shows how to reuse schemas using the $ref approach, where schemas are defined separately and referenced using URLs. This method allows for schema composition and reuse across multiple endpoints.

LANGUAGE: javascript
CODE:
const addressSchema = S.object()
  .id('#address')
  .prop('line1').required()
  .prop('line2')
  .prop('country').required()
  .prop('city').required()
  .prop('zipcode').required()

const commonSchemas = S.object()
  .id('https://fastify/demo')
  .definition('addressSchema', addressSchema)
  .definition('otherSchema', otherSchema) // You can add any schemas you need

fastify.addSchema(commonSchemas)

const bodyJsonSchema = S.object()
  .prop('residence', S.ref('https://fastify/demo#address')).required()
  .prop('office', S.ref('https://fastify/demo#/definitions/addressSchema')).required()

const schema = { body: bodyJsonSchema }

fastify.post('/the/url', { schema }, handler)

----------------------------------------

TITLE: Creating Table of Contents Anchor in Markdown
DESCRIPTION: Shows how to create an anchor point for the table of contents using an HTML 'a' tag with an 'id' attribute in Markdown. This allows for easy navigation to the table of contents section.

LANGUAGE: markdown
CODE:
<a id="guides-toc"></a>

----------------------------------------

TITLE: Installing Dependencies and Running Bundler Tests for Fastify (Bash)
DESCRIPTION: This snippet demonstrates the commands to install dependencies and run bundler tests for the Fastify project, specifically for the webpack bundler. It includes steps for installing root dependencies, navigating to the webpack test directory, installing its dependencies, and running the test command.

LANGUAGE: bash
CODE:
  # path: root of repository /fastify
  npm i
  cd test/bundler/webpack
  npm i
  npm run test # test command runs bundle before of starting the test