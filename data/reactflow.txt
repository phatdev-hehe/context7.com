TITLE: Basic React Flow Implementation Example
DESCRIPTION: A complete example of implementing a basic flow diagram with React Flow. It demonstrates how to initialize nodes and edges, handle state changes, and render the flow with additional components like MiniMap, Controls, and Background.

LANGUAGE: jsx
CODE:
import { useCallback } from 'react';
import {
  ReactFlow,
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
} from '@xyflow/react';

import '@xyflow/react/dist/style.css';

const initialNodes = [
  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },
  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },
];

const initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];

function Flow() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
    >
      <MiniMap />
      <Controls />
      <Background />
    </ReactFlow>
  );
}

export default Flow;

----------------------------------------

TITLE: Basic React Flow Implementation Example
DESCRIPTION: A quickstart example demonstrating how to set up a basic React Flow component with nodes, edges, controls, and background. Shows how to use React Flow hooks for managing state and handling connections.

LANGUAGE: jsx
CODE:
import { useCallback } from 'react';
import {
  ReactFlow,
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  addEdge,
} from '@xyflow/react';

import '@xyflow/react/dist/style.css';

const initialNodes = [
  { id: '1', position: { x: 0, y: 0 }, data: { label: '1' } },
  { id: '2', position: { x: 0, y: 100 }, data: { label: '2' } },
];

const initialEdges = [{ id: 'e1-2', source: '1', target: '2' }];

function Flow() {
  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), [setEdges]);

  return (
    <ReactFlow
      nodes={nodes}
      edges={edges}
      onNodesChange={onNodesChange}
      onEdgesChange={onEdgesChange}
      onConnect={onConnect}
    >
      <MiniMap />
      <Controls />
      <Background />
    </ReactFlow>
  );
}

export default Flow;

----------------------------------------

TITLE: Creating a Basic Svelte Flow Implementation
DESCRIPTION: A complete example showing how to create a basic Svelte Flow implementation with nodes, edges, background, controls, and minimap. This demonstrates importing components, creating nodes and edges with writables, and setting up event handlers.

LANGUAGE: svelte
CODE:
<script lang="ts">
  import { writable } from 'svelte/store';
  import { SvelteFlow, Controls, Background, BackgroundVariant, MiniMap } from '@xyflow/svelte';

  // you need to import the styles for Svelte Flow to work
  // if you just want to load the basic styleds, you can import '@xyflow/svelte/dist/base.css'
  import '@xyflow/svelte/dist/style.css';

  // We are using writables for the nodes and edges to sync them easily. When a user drags a node for example, Svelte Flow updates its position. This also makes it easier to update nodes in user land.
  const nodes = writable([
    {
      id: '1',
      type: 'input',
      data: { label: 'Input Node' },
      position: { x: 0, y: 0 }
    },
    {
      id: '2',
      type: 'custom',
      data: { label: 'Node' },
      position: { x: 0, y: 150 }
    }
  ]);

  // same for edges
  const edges = writable([
    {
      id: '1-2',
      type: 'default',
      source: '1',
      target: '2',
      label: 'Edge Text'
    }
  ]);
</script>

<SvelteFlow {nodes} {edges} fitView on:nodeclick={(event) => console.log('on node click', event)}>
  <Controls />
  <Background variant={BackgroundVariant.Dots} />
  <MiniMap />
</SvelteFlow>

----------------------------------------

TITLE: Basic Svelte Flow Implementation Example
DESCRIPTION: A complete example of implementing a basic flow diagram with Svelte Flow. It demonstrates how to initialize nodes and edges using Svelte's writable stores and render the flow with additional components like Controls, Background, and MiniMap.

LANGUAGE: svelte
CODE:
<script lang="ts">
  import { writable } from 'svelte/store';
  import {
    SvelteFlow,
    Controls,
    Background,
    BackgroundVariant,
    MiniMap,
  } from '@xyflow/svelte';

  import '@xyflow/svelte/dist/style.css'
  
  const nodes = writable([
    {
      id: '1',
      type: 'input',
      data: { label: 'Input Node' },
      position: { x: 0, y: 0 }
    },
    {
      id: '2',
      type: 'custom',
      data: { label: 'Node' },
      position: { x: 0, y: 150 }
    }
  ]);

  const edges = writable([
    {
      id: '1-2',
      type: 'default',
      source: '1',
      target: '2',
      label: 'Edge Text'
    }
  ]);
</script>

<SvelteFlow
  {nodes}
  {edges}
  fitView
  on:nodeclick={(event) => console.log('on node click', event)}
>
  <Controls />
  <Background variant={BackgroundVariant.Dots} />
  <MiniMap />
</SvelteFlow>

----------------------------------------

TITLE: TypeScript Type Definitions in React Flow v12
DESCRIPTION: Updated approach for defining custom node types in React Flow v12, allowing for multiple node types with different data structures within a single flow.

LANGUAGE: typescript
CODE:
type MyNodeType = Node<{ value: number }, 'number'> | Node<{ value: string }, 'text'>; applyNodeChange<MyNodeType>

----------------------------------------

TITLE: Updating Nodes in React Flow v12 (Immutable Pattern)
DESCRIPTION: The v12 approach to updating node properties using the immutable pattern with object spread syntax, which is now required.

LANGUAGE: javascript
CODE:
setNodes((nds) =>
  nds.map((node) => ({
    ...node,
    hidden: true,
  }))
);

----------------------------------------

TITLE: Creating Test Configuration for ReactFlow E2E Tests
DESCRIPTION: Example of creating a new ReactFlow test configuration file. This contains the flow properties including nodes, edges, and other settings that will be used in the E2E test environment.

LANGUAGE: javascript
CODE:
// NewFolder/NewTest.ts
export default {
  flowProps: {
    minZoom: 0.25,
    maxZoom: 4,
    fitView: true,
    nodes: [
      {
        id: '1',
        data: { label: '1' },
        position: { x: 0, y: 0 },
        type: 'input',
      },
      {
        id: '2',
        data: { label: '2' },
        position: { x: -100, y: 100 },
      },
      {
        id: '3',
        data: { label: '3' },
        position: { x: 100, y: 100 },
      },
    ],
    edges: [
      {
        id: 'first-edge',
        source: '1',
        target: '2',
      },
      {
        id: 'second-edge',
        source: '1',
        target: '3',
      },
    ],
  },
  backgroundProps: { /*... */},
  panelProps: { /*... */},
  minimapProps:  { /*... */},
  controlsProps:  { /*... */},
} satisfies FlowConfig;

----------------------------------------

TITLE: Setting Up and Running the Development Environment for xyflow Projects
DESCRIPTION: Commands for installing dependencies, starting the development server, and running tests for xyflow projects. These are the basic steps needed to begin contributing code changes to React Flow or Svelte Flow.

LANGUAGE: bash
CODE:
pnpm install

LANGUAGE: bash
CODE:
pnpm dev

LANGUAGE: bash
CODE:
pnpm test

----------------------------------------

TITLE: Installing React Flow via Package Manager
DESCRIPTION: Command to install the latest version of React Flow using npm. Similar commands can be used with yarn or pnpm package managers.

LANGUAGE: bash
CODE:
npm install @xyflow/react

----------------------------------------

TITLE: Installing React Flow Package
DESCRIPTION: Command to install the React Flow package using npm. This installs the @xyflow/react package which is required for using React Flow in your React applications.

LANGUAGE: sh
CODE:
npm install @xyflow/react

----------------------------------------

TITLE: Importing React Flow in v12
DESCRIPTION: Updated import pattern for React Flow v12, using a named import from the new '@xyflow/react' package.

LANGUAGE: javascript
CODE:
import { ReactFlow } from '@xyflow/react';

----------------------------------------

TITLE: TypeScript Generic Usage in React Flow v11
DESCRIPTION: Example of how generic type parameters were used in React Flow v11 functions for NodeData and NodeType.

LANGUAGE: typescript
CODE:
applyNodeChange<NodeData, NodeType>

----------------------------------------

TITLE: Running Playwright Tests for React and Svelte
DESCRIPTION: Commands for executing the E2E tests in different modes for both React and Svelte frameworks. Includes headless test execution and UI mode for debugging.

LANGUAGE: bash
CODE:
pnpm run test:react # runs all the tests headless for react
pnpm run test:react:ui # runs tests for react in UI mode, good for debugging

pnpm run test:svelte # runs all the tests headless for svelte
pnpm run test:svelte:ui # runs tests for svelte in UI mode, good for debugging

----------------------------------------

TITLE: Installing @xyflow/system Package with npm
DESCRIPTION: Command to install the @xyflow/system package using npm. This package provides core utilities for React Flow and Svelte Flow implementations.

LANGUAGE: sh
CODE:
npm install @xyflow/system

----------------------------------------

TITLE: Installing Svelte Flow Package
DESCRIPTION: Command to install the Svelte Flow package using npm. This installs the @xyflow/svelte package which is required for using Svelte Flow in your Svelte applications.

LANGUAGE: sh
CODE:
npm install @xyflow/svelte

----------------------------------------

TITLE: Installing Svelte Flow via Package Manager
DESCRIPTION: Command to install the Svelte Flow package using npm. Alternative package managers like yarn or pnpm can also be used.

LANGUAGE: sh
CODE:
npm install @xyflow/svelte

----------------------------------------

TITLE: Starting Local Development Server for React Flow
DESCRIPTION: Command to initiate the local development server for the React Flow library using pnpm.

LANGUAGE: shell
CODE:
pnpm dev

----------------------------------------

TITLE: Starting Local Development Server for Svelte Flow
DESCRIPTION: Command to start the local development server for Svelte Flow using pnpm package manager. This will launch the Vite app used for internal testing of the library.

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Starting the Local Development Server for Astro with React/Svelte Flow
DESCRIPTION: Command to start the local development server using pnpm. This allows testing of the integration between React Flow, Svelte Flow, and Astro.

LANGUAGE: sh
CODE:
pnpm dev

----------------------------------------

TITLE: Installing Playwright Dependencies for ReactFlow E2E Tests
DESCRIPTION: Commands for installing the necessary dependencies for running Playwright tests. This includes both NPM dependencies and browser installations required for E2E testing.

LANGUAGE: bash
CODE:
cd tests/playwright # check if you are in the correct directory 

pnpm install # install node dependencies
npx playwright install # follow the instructions to install browsers

----------------------------------------

TITLE: Importing React Flow in v11
DESCRIPTION: Example of how to import the main ReactFlow component in v11 as a default import from the 'reactflow' package.

LANGUAGE: javascript
CODE:
import ReactFlow from 'reactflow';

----------------------------------------

TITLE: Updating Nodes in React Flow v11 (Deprecated Pattern)
DESCRIPTION: Example of the v11 approach to updating node properties by directly mutating node objects, which is no longer supported in v12.

LANGUAGE: javascript
CODE:
setNodes((nds) =>
  nds.map((node) => {
    node.hidden = true;
    return node;
  })
);