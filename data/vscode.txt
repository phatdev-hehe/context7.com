TITLE: Configuring Custom Code Generation Instructions in JSON
DESCRIPTION: This snippet demonstrates how to define custom code generation instructions for GitHub Copilot in the VS Code settings.json file. It shows how to specify direct text instructions and reference external files for more complex instructions.

LANGUAGE: json
CODE:
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "text": "Always add a comment: 'Generated by Copilot'."
    },
    {
      "text": "In TypeScript always use underscore for private field names."
    },
    {
      "file": "code-style.md" // import instructions from file `code-style.md`
    }
  ],

----------------------------------------

TITLE: Defining Base Prompt for Code Tutor
DESCRIPTION: Sets up the initial prompt for the code tutor, guiding its behavior and responses.

LANGUAGE: typescript
CODE:
const BASE_PROMPT = 'You are a helpful code tutor. Your job is to teach the user with simple descriptions and sample code of the concept. Respond with a guided overview of the concept in a series of messages. Do not give the user the answer directly, but guide them to find the answer themselves. If the user asks a non-programming question, politely decline to respond.';

----------------------------------------

TITLE: Creating Hello World Node.js Application
DESCRIPTION: A simple Node.js script that prints 'Hello World' to the console, demonstrating basic JavaScript functionality and VS Code IntelliSense features.

LANGUAGE: javascript
CODE:
var msg = 'Hello World';
console.log(msg);

----------------------------------------

TITLE: Language Client Extension Entry Point
DESCRIPTION: Implementation of the Language Client extension that starts and manages the Language Server

LANGUAGE: typescript
CODE:
import * as path from 'path';
import { workspace, ExtensionContext } from 'vscode';

import {
  LanguageClient,
  LanguageClientOptions,
  ServerOptions,
  TransportKind
} from 'vscode-languageclient/node';

let client: LanguageClient;

export function activate(context: ExtensionContext) {
  let serverModule = context.asAbsolutePath(path.join('server', 'out', 'server.js'));
  let debugOptions = { execArgv: ['--nolazy', '--inspect=6009'] };

  let serverOptions: ServerOptions = {
    run: { module: serverModule, transport: TransportKind.ipc },
    debug: {
      module: serverModule,
      transport: TransportKind.ipc,
      options: debugOptions
    }
  };

  let clientOptions: LanguageClientOptions = {
    documentSelector: [{ scheme: 'file', language: 'plaintext' }],
    synchronize: {
      fileEvents: workspace.createFileSystemWatcher('**/.clientrc')
    }
  };

  client = new LanguageClient(
    'languageServerExample',
    'Language Server Example',
    serverOptions,
    clientOptions
  );

  client.start();
}

export function deactivate(): Thenable<void> | undefined {
  if (!client) {
    return undefined;
  }
  return client.stop();
}

----------------------------------------

TITLE: Managing Python Dependencies with requirements.txt
DESCRIPTION: These commands show how to create a requirements.txt file listing all installed packages, and how to install packages from this file. This is useful for managing dependencies across different environments.

LANGUAGE: powershell
CODE:
# Generate requirements.txt
pip freeze > requirements.txt

# Install packages from requirements.txt
pip install -r requirements.txt

----------------------------------------

TITLE: Sending Code to Language Model API in TypeScript
DESCRIPTION: Select the chat model, prepare the messages, and send them to the Language Model API for generating annotations.

LANGUAGE: typescript
CODE:
const disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {
  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);

  let [model] = await vscode.lm.selectChatModels({
    vendor: 'copilot',
    family: 'gpt-4o',
  });

  const messages = [
    vscode.LanguageModelChatMessage.User(ANNOTATION_PROMPT),
    vscode.LanguageModelChatMessage.User(codeWithLineNumbers),
  ];

  if (model) {
    let chatResponse = await model.sendRequest(messages, {}, new vscode.CancellationTokenSource().token);
    await parseChatResponse(chatResponse, textEditor);
  }
});

----------------------------------------

TITLE: Initializing VS Code Extension Project with Yeoman (One-time Use)
DESCRIPTION: Command to scaffold a new VS Code extension project using Yeoman and the VS Code Extension Generator without global installation.

LANGUAGE: bash
CODE:
npx --package yo --package generator-code -- yo code

----------------------------------------

TITLE: Using NumPy to Generate Random Numbers in Python
DESCRIPTION: This code snippet shows how to import and use the NumPy library to generate a random integer between 1 and 8. It builds upon the previous example by adding more functionality.

LANGUAGE: python
CODE:
import numpy as np

msg = "Roll a dice!"
print(msg)

print(np.random.randint(1,9))

----------------------------------------

TITLE: Express Port Configuration Refactoring in TypeScript
DESCRIPTION: Example showing how to make a hard-coded port number configurable using environment variables in an Express.js application.

LANGUAGE: typescript
CODE:
const port = 3000

LANGUAGE: typescript
CODE:
const port = process.env.PORT || 3000

----------------------------------------

TITLE: Terminal Commands for Express Setup
DESCRIPTION: Command line instructions for creating and initializing a new Express application using the Express Generator.

LANGUAGE: bash
CODE:
mkdir hello
cd hello
code .

npm install -g express-generator
express myExpressApp --view pug
cd myExpressApp
npm install

----------------------------------------

TITLE: Installing Dev Container CLI via npm
DESCRIPTION: Command to install the Dev Container CLI globally using npm. Requires Python, Node.js (version 14 or greater), and C/C++ to be installed.

LANGUAGE: bash
CODE:
npm install -g @devcontainers/cli

----------------------------------------

TITLE: GDB/LLDB Debugger Configuration
DESCRIPTION: Advanced configuration for GDB/LLDB debuggers, including platform-specific settings and custom launch commands.

LANGUAGE: json
CODE:
{
   "name": "C++ Launch",
   "type": "cppdbg",
   "request": "launch",
   "program": "${workspaceFolder}/a.out",
   "stopAtEntry": false,
   "customLaunchSetupCommands": [
      { "text": "target-run", "description": "run target", "ignoreFailures": false }
   ],
   "launchCompleteCommand": "exec-run",
   "linux": {
      "MIMode": "gdb",
      "miDebuggerPath": "/usr/bin/gdb"
   },
   "osx": {
      "MIMode": "lldb"
   },
   "windows": {
      "MIMode": "gdb",
      "miDebuggerPath": "C:\\MinGw\\bin\\gdb.exe"
   }
}

----------------------------------------

TITLE: Adding Editor Title Bar Button in package.json
DESCRIPTION: Modify the package.json to add a button in the editor title bar for toggling Code Tutor annotations.

LANGUAGE: json
CODE:
"contributes": {
  "commands": [
    {
      "command": "code-tutor.annotate",
      "title": "Toggle Tutor Annotations",
      "icon": "$(comment)"
    }
  ],
  "menus": {
    "editor/title": [
      {
        "command": "code-tutor.annotate",
        "group": "navigation"
      }
    ]
  }
}

----------------------------------------

TITLE: Building a Language Model Prompt in TypeScript
DESCRIPTION: This snippet demonstrates how to create a language model prompt using the LanguageModelChatMessage class. It sets up a context for the AI to act as a cat explaining computer science concepts.

LANGUAGE: typescript
CODE:
const craftedPrompt = [
    vscode.LanguageModelChatMessage.User('You are a cat! Think carefully and step by step like a cat would. Your job is to explain computer science concepts in the funny manner of a cat, using cat metaphors. Always start your response by stating what concept you are explaining. Always include code samples.'),
    vscode.LanguageModelChatMessage.User('I want to understand recursion')
];

----------------------------------------

TITLE: Loading and Preprocessing Titanic Data with Pandas in Python
DESCRIPTION: Imports pandas and numpy libraries, loads Titanic CSV data into a DataFrame, and replaces missing values with numpy NaN. Also converts data types for age and fare columns.

LANGUAGE: python
CODE:
import pandas as pd
import numpy as np
data = pd.read_csv('titanic3.csv')

data.replace('?', np.nan, inplace= True)
data = data.astype({"age": np.float64, "fare": np.float64})

----------------------------------------

TITLE: Configuring tasks.json for MSVC Compilation
DESCRIPTION: JSON configuration for tasks.json to build C++ files using the Microsoft Visual C++ compiler (cl.exe) in Visual Studio Code.

LANGUAGE: json
CODE:
{
"version": "2.0.0",
"tasks": [
    {
        "type": "shell",
        "label": "C/C++: cl.exe build active file",
        "command": "cl.exe",
        "args": [
            "/Zi",
            "/EHsc",
            "/Fe:",
            "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "${file}"
        ],
        "problemMatcher": [
            "$msCompile"
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "detail": "Task generated by Debugger."
    }
]
}

----------------------------------------

TITLE: Selecting and Sending a Language Model Request in TypeScript
DESCRIPTION: This code shows how to select a language model, send a request, and handle potential errors. It uses the selectChatModels method to choose a Copilot model and the sendRequest method to interact with the model.

LANGUAGE: typescript
CODE:
try {
    const [model] = await vscode.lm.selectChatModels({ vendor: 'copilot', family: 'gpt-4o' });
    const request = model.sendRequest(craftedPrompt, {}, token);
} catch (err) {
    if (err instanceof vscode.LanguageModelError) {
        console.log(err.message, err.code, err.cause);
        if (err.cause instanceof Error && err.cause.message.includes('off_topic')) {
            stream.markdown(vscode.l10n.t('I\'m sorry, I can only explain computer science concepts.'));
        }
    } else {
        throw err;
    }
}

----------------------------------------

TITLE: Implementing VS Code Extension Entry Point in TypeScript
DESCRIPTION: Shows the main extension entry file implementation with activate and deactivate functions, command registration, and basic message display functionality.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  console.log('Congratulations, your extension "helloworld-sample" is now active!');

  let disposable = vscode.commands.registerCommand('helloworld.helloWorld', () => {
    vscode.window.showInformationMessage('Hello World!');
  });

  context.subscriptions.push(disposable);
}

export function deactivate() {}

----------------------------------------

TITLE: Implementing Annotation Command in TypeScript
DESCRIPTION: Implement the 'annotate' command to get visible code with line numbers from the current editor.

LANGUAGE: typescript
CODE:
function getVisibleCodeWithLineNumbers(textEditor: vscode.TextEditor) {
  let currentLine = textEditor.visibleRanges[0].start.line;
  const endLine = textEditor.visibleRanges[0].end.line;

  let code = '';

  while (currentLine < endLine) {
    code += `${currentLine + 1}: ${textEditor.document.lineAt(currentLine).text} \n`;
    currentLine++;
  }
  return code;
}

const disposable = vscode.commands.registerTextEditorCommand('code-tutor.annotate', async (textEditor: vscode.TextEditor) => {
  const codeWithLineNumbers = getVisibleCodeWithLineNumbers(textEditor);
});

----------------------------------------

TITLE: Remote Debugging Configuration for Node.js
DESCRIPTION: This launch configuration snippet demonstrates how to set up remote debugging for a Node.js application, including path mapping between local and remote locations.

LANGUAGE: json
CODE:
{
    "type": "node",
    "request": "attach",
    "name": "Attach to remote",
    "address": "TCP/IP address of process to be debugged",
    "port": 9229,
    "localRoot": "${workspaceFolder}",
    "remoteRoot": "C:\\Users\\username\\project\\server"
}

----------------------------------------

TITLE: Selecting Copilot Chat Models in VS Code Extensions
DESCRIPTION: Example of how to select Copilot chat models using the new Language Model API in VS Code extensions.

LANGUAGE: typescript
CODE:
const models = await vscode.lm.selectChatModels({
	vendor: 'copilot',
});

if(models.length === 0) {
	// no models available
	return;
}

----------------------------------------

TITLE: Example c_cpp_properties.json Configuration
DESCRIPTION: Complete example showing all possible fields in a c_cpp_properties.json file, including configurations for Linux, Mac and Windows platforms. Demonstrates environment variables, compiler settings, include paths, language standards and browse configurations.

LANGUAGE: json
CODE:
{
    "env": {
        "myIncludePath": [
            "${workspaceFolder}/include",
            "${workspaceFolder}/src"
        ],
        "myDefines": [
            "DEBUG",
            "MY_FEATURE=1"
        ]
    },
    "configurations": [
        {
            "name": "Linux",
            "compilerPath": "/usr/bin/gcc",
            "compilerArgs": [
                "-m32"
            ],
            "intelliSenseMode": "linux-gcc-x86",
            "includePath": [
                "${myIncludePath}",
                "/usr/include"
            ],
            "defines": [
                "${myDefines}"
            ],
            "cStandard": "gnu11",
            "cppStandard": "gnu++14",
            "configurationProvider": "ms-vscode.cmake-tools",
            "forcedInclude": [
                "${workspaceFolder}/common.h"
            ],
            "compileCommands": "${workspaceFolder}/build/compile_commands.json",
            "dotConfig": "${workspaceFolder}/.config",
            "mergeConfigurations": true,
            "customConfigurationVariables": {
                "myVar": "myvalue"
            },
            "browse": {
                "path": [
                    "${myIncludePath}",
                    "/usr/include",
                    "${workspaceFolder}"
                ],
                "limitSymbolsToIncludedHeaders": true,
                "databaseFilename": "${workspaceFolder}/.vscode/browse.vc.db"
            }
        },
        {
            "name": "Mac",
            "compilerPath": "/usr/bin/clang",
            "intelliSenseMode": "macos-clang-x64",
            "includePath": [
                "${myIncludePath}"
            ],
            "defines": [
                "${myDefines}"
            ],
            "cStandard": "c11",
            "cppStandard": "c++17",
            "macFrameworkPath": [
                "/System/Library/Frameworks",
                "/Library/Frameworks"
            ],
            "browse": {
                "path": [
                    "${myIncludePath}",
                    "${workspaceFolder}"
                ]
            }
        },
        {
            "name": "Win32",
            "compilerPath": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/cl.exe",
            "intelliSenseMode": "windows-msvc-x64",
            "includePath": [
                "${myIncludePath}"
            ],
            "defines": [
                "${myDefines}",
                "_WINDOWS"
            ],
            "cStandard": "c17",
            "cppStandard": "c++20",
            "windowsSdkVersion": "10.0.19041.0",
            "browse": {
                "path": [
                    "${myIncludePath}",
                    "${workspaceFolder}"
                ]
            }
        }
    ],
    "version": 4,
    "enableConfigurationSquiggles": true
}

----------------------------------------

TITLE: Creating Django Model for Log Messages
DESCRIPTION: Defines a LogMessage model class to store dated message entries in the database, including message text and timestamp fields.

LANGUAGE: python
CODE:
from django.db import models
from django.utils import timezone

class LogMessage(models.Model):
    message = models.CharField(max_length=300)
    log_date = models.DateTimeField("date logged")

    def __str__(self):
        """Returns a string representation of a message."""
        date = timezone.localtime(self.log_date)
        return f"'{self.message}' logged on {date.strftime('%A, %d %B, %Y at %X')}"

----------------------------------------

TITLE: Basic devcontainer.json Configuration
DESCRIPTION: A simple devcontainer.json file that uses a pre-built TypeScript and Node.js VS Code Development Container image.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/devcontainers/typescript-node:0-18"
}

----------------------------------------

TITLE: Creating Test Controller in TypeScript
DESCRIPTION: Creates a TestController instance with a unique ID and label to provide tests in VS Code.

LANGUAGE: typescript
CODE:
const controller = vscode.tests.createTestController('helloWorldTests', 'Hello World Tests');

----------------------------------------

TITLE: Docker Metadata Label Configuration
DESCRIPTION: Example of adding dev container metadata to a Dockerfile using labels to configure container properties.

LANGUAGE: docker
CODE:
LABEL devcontainer.metadata='[{ \
  "capAdd": [ "SYS_PTRACE" ], \
  "remoteUser": "devcontainer", \
  "postCreateCommand": "yarn install" \
}]'

----------------------------------------

TITLE: Fixing TypeScript Error with Copilot in VS Code
DESCRIPTION: This snippet demonstrates how to use Copilot's '/fix' command to resolve a TypeScript error in a quick sort algorithm. The error 'Argument of type 'number' is not assignable to parameter of type 'never'' is addressed by Copilot, which proposes a fix by updating the type declarations for 'left' and 'right' arrays.

LANGUAGE: typescript
CODE:
// Original code with error
function quickSort(arr: number[]): number[] {
  if (arr.length <= 1) return arr;
  const pivot = arr[0];
  const left = arr.slice(1).filter(x => x < pivot);
  const right = arr.slice(1).filter(x => x >= pivot);
  return [...quickSort(left), pivot, ...quickSort(right)];
}

// Copilot's proposed fix
function quickSort(arr: number[]): number[] {
  if (arr.length <= 1) return arr;
  const pivot = arr[0];
  const left: number[] = arr.slice(1).filter(x => x < pivot);
  const right: number[] = arr.slice(1).filter(x => x >= pivot);
  return [...quickSort(left), pivot, ...quickSort(right)];
}

----------------------------------------

TITLE: Basic Attach Configuration for Node.js Debugging
DESCRIPTION: This launch configuration snippet shows a simple setup for attaching the VS Code debugger to a Node.js process running on a specific port.

LANGUAGE: json
CODE:
{
    "name": "Attach to Process",
    "type": "node",
    "request": "attach",
    "port": 9229
}

----------------------------------------

TITLE: Configuring a TypeScript Compile Task in tasks.json
DESCRIPTION: This snippet shows how to configure a task to compile TypeScript files using the TypeScript compiler (tsc) in Visual Studio Code's tasks.json file.

LANGUAGE: JSON
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

----------------------------------------

TITLE: Implementing invoke for a Language Model Tool in TypeScript
DESCRIPTION: This snippet shows the implementation of the invoke method for a language model tool, which is called when the tool is invoked and returns the result.

LANGUAGE: typescript
CODE:
async invoke(
    options: vscode.LanguageModelToolInvocationOptions<ITabCountParameters>,
    _token: vscode.CancellationToken
) {
    const params = options.input;
    if (typeof params.tabGroup === 'number') {
        const group = vscode.window.tabGroups.all[Math.max(params.tabGroup - 1, 0)];
        const nth =
            params.tabGroup === 1
                ? '1st'
                : params.tabGroup === 2
                    ? '2nd'
                    : params.tabGroup === 3
                        ? '3rd'
                        : `${params.tabGroup}th`;
        return new vscode.LanguageModelToolResult([new vscode.LanguageModelTextPart(`There are ${group.tabs.length} tabs open in the ${nth} tab group.`)]);
    } else {
        const group = vscode.window.tabGroups.activeTabGroup;
        return new vscode.LanguageModelToolResult([new vscode.LanguageModelTextPart(`There are ${group.tabs.length} tabs open.`)]);
    }
}

----------------------------------------

TITLE: Compiled JavaScript Output
DESCRIPTION: The JavaScript code generated after compiling the TypeScript Hello World example.

LANGUAGE: javascript
CODE:
var message = "Hello World";
console.log(message);

----------------------------------------

TITLE: Basic Node.js Debug Configuration in launch.json
DESCRIPTION: A simple launch configuration for debugging a Node.js application, specifying the program entry point and skipping Node internal files.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "program": "${workspaceFolder}\\app.js"
        }
    ]
}

----------------------------------------

TITLE: Dev Container Configuration
DESCRIPTION: Configuration file that defines how the development container is built and initialized, including image selection, extensions, and port forwarding settings.

LANGUAGE: json
CODE:
{
    "name": "Node.js",
    "image": "mcr.microsoft.com/devcontainers/javascript-node:0-18",
    "customizations": {
        "vscode": {
            "settings": {},
            "extensions": [
                "streetsidesoftware.code-spell-checker"
            ]
        }
    },
    "portsAttributes": {
        "3000": {
            "label": "Hello Remote World",
            "onAutoForward": "notify"
        }
    },
    "postCreateCommand": "yarn install"
}

----------------------------------------

TITLE: Defining Commands in package.json
DESCRIPTION: Contributes a command to VS Code, specifying its ID, title, category, icon, and when it should be enabled.

LANGUAGE: json
CODE:
{
  "contributes": {
    "commands": [
      {
        "command": "extension.sayHello",
        "title": "Hello World",
        "category": "Hello",
        "icon": {
          "light": "path/to/light/icon.svg",
          "dark": "path/to/dark/icon.svg"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Defining a Language Model Tool in package.json
DESCRIPTION: This JSON snippet shows how to define a language model tool in the package.json file, including its name, tags, description, and input schema.

LANGUAGE: json
CODE:
"contributes": {
    "languageModelTools": [
        {
            "name": "chat-tools-sample_tabCount",
            "tags": [
                "editors",
                "chat-tools-sample"
            ],
            "toolReferenceName": "tabCount",
            "displayName": "Tab Count",
            "modelDescription": "The number of active tabs in a tab group",
            "icon": "$(files)",
            "inputSchema": {
                "type": "object",
                "properties": {
                    "tabGroup": {
                        "type": "number",
                        "description": "The index of the tab group to check. This is optional- if not specified, the active tab group will be checked.",
                        "default": 0
                    }
                }
            }
        }
    ]
}

----------------------------------------

TITLE: Implementing Remove Quantity Route with Redis in Python
DESCRIPTION: Defines a route to remove a specific quantity from an item in the grocery list, updating or deleting data in Redis as needed.

LANGUAGE: python
CODE:
@app.delete("/items/{item_id}/{quantity}")
def remove_quantity(item_id: int, quantity: int) -> dict[str, str]:
    if not redis_client.hexists(f"item_id:{item_id}", "item_id"):
        raise HTTPException(status_code=404, detail="Item not found.")

    item_quantity: str | None = redis_client.hget(f"item_id:{item_id}", "quantity")

    if item_quantity is None:
        existing_quantity: int = 0
    else:
        existing_quantity: int = int(item_quantity)
    if existing_quantity <= quantity:
        item_name: str | None = redis_client.hget(f"item_id:{item_id}", "item_name")
        redis_client.hdel("item_name_to_id", f"{item_name}")
        redis_client.delete(f"item_id:{item_id}")
        return {"result": "Item deleted."}
    else:
        redis_client.hincrby(f"item_id:{item_id}", "quantity", -quantity)
        return {"result": f"{quantity} items removed."}

----------------------------------------

TITLE: Implementing List Items Route with Redis in Python
DESCRIPTION: Defines a route to list all items in the grocery list, retrieving data from Redis and converting it to ItemPayload objects.

LANGUAGE: python
CODE:
@app.get("/items")
def list_items() -> dict[str, list[ItemPayload]]:
    items: list[ItemPayload] = []
    stored_items: dict[str, str] = redis_client.hgetall("item_name_to_id")

    for name, id_str in stored_items.items():
        item_id: int = int(id_str)

        item_name_str: str | None = redis_client.hget(f"item_id:{item_id}", "item_name")
        if item_name_str is not None:
            item_name: str = item_name_str
        else:
            continue  # skip this item if it has no name

        item_quantity_str: str | None = redis_client.hget(
            f"item_id:{item_id}", "quantity"
        )
        if item_quantity_str is not None:
            item_quantity: int = int(item_quantity_str)
        else:
            item_quantity = 0

        items.append(
            ItemPayload(item_id=item_id, item_name=item_name, quantity=item_quantity)
        )

    return {"items": items}

----------------------------------------

TITLE: Code Navigation Keyboard Shortcuts in VS Code
DESCRIPTION: Various keyboard shortcuts for navigating C# code in Visual Studio Code, including Go To Definition, Peek Definition, Peek Implementations, and Smart Selection commands.

LANGUAGE: plaintext
CODE:
kb(editor.action.revealDefinition) - Go To Definition
kbstyle(Ctrl+click) - Go To Definition with mouse
kbstyle(Ctrl+Alt+click) - Open definition on side
kb(editor.action.peekDefinition) - Peek Definition
kb(editor.action.peekImplementation) - Peek Implementations
kb(editor.action.smartSelect.expand) - Expand selection
kb(editor.action.smartSelect.shrink) - Shrink selection

----------------------------------------

TITLE: Platform-Specific Debug Configuration
DESCRIPTION: Example showing how to specify different debugging arguments based on the operating system, particularly handling file paths differently on Windows.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}/node_modules/gulp/bin/gulpfile.js",
            "args": ["myFolder/path/app.js"],
            "windows": {
                "args": ["myFolder\\path\\app.js"]
            }
        }
    ]
}

----------------------------------------

TITLE: Rendering a Template in Flask
DESCRIPTION: Uses Flask's render_template function to render an HTML template with dynamic values.

LANGUAGE: python
CODE:
@app.route("/hello/")
@app.route("/hello/<name>")
def hello_there(name = None):
    return render_template(
        "hello_there.html",
        name=name,
        date=datetime.now()
    )

----------------------------------------

TITLE: Configuring Launch Settings for Java Debugging in VS Code
DESCRIPTION: Example launch configuration in launch.json for debugging a Java application. It specifies the main class, program arguments, and other options.

LANGUAGE: json
CODE:
{
  "mainClass": "com.example.MyApp",
  "args": ["${command:SpecifyProgramArgs}"],
  "sourcePaths": ["/extra/source/path"],
  "classPaths": ["$Auto"],
  "vmArgs": ["-Xms256m", "-Xmx512m"],
  "env": {"MY_VAR": "my_value"},
  "console": "integratedTerminal"
}

----------------------------------------

TITLE: Installing Python Packages Using pip
DESCRIPTION: These commands demonstrate how to install the NumPy package using pip, the Python package installer. Different commands are provided for macOS, Windows, and Linux.

LANGUAGE: bash
CODE:
# macOS
python3 -m pip install numpy

# Windows (may require elevation)
py -m pip install numpy

# Linux (Debian)
apt-get install python3-tk
python3 -m pip install numpy

----------------------------------------

TITLE: Language Server Document Validation
DESCRIPTION: Implementation of text document validation that checks for uppercase words

LANGUAGE: typescript
CODE:
async function validateTextDocument(textDocument: TextDocument): Promise<void> {
  let settings = await getDocumentSettings(textDocument.uri);

  let text = textDocument.getText();
  let pattern = /\b[A-Z]{2,}\b/g;
  let m: RegExpExecArray | null;

  let problems = 0;
  let diagnostics: Diagnostic[] = [];
  while ((m = pattern.exec(text)) && problems < settings.maxNumberOfProblems) {
    problems++;
    let diagnostic: Diagnostic = {
      severity: DiagnosticSeverity.Warning,
      range: {
        start: textDocument.positionAt(m.index),
        end: textDocument.positionAt(m.index + m[0].length)
      },
      message: `${m[0]} is all uppercase.`,
      source: 'ex'
    };
    diagnostics.push(diagnostic);
  }

  connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
}

----------------------------------------

TITLE: Basic @workspace Query Examples
DESCRIPTION: Example queries showing how to use @workspace to find code locations, plan changes, and understand implementations.

LANGUAGE: markdown
CODE:
"@workspace where is database connecting string configured?"
"@workspace how can I validate a date?"
"@workspace where are tests defined?"
"@workspace how can I add a rich tooltip to a button?"
"@workspace add date validation to #selection"
"@workspace add a new API route for the forgot password form"
"@workspace how is authentication implemented?"
"@workspace which API routes depend on this service?"
"How do I build this #codebase?"

----------------------------------------

TITLE: Configuring Custom Instructions for GitHub Copilot in VS Code
DESCRIPTION: Shows how to enable custom instructions for GitHub Copilot using a VS Code setting. This allows tailoring Copilot responses to specific requirements defined in a Markdown file.

LANGUAGE: json
CODE:
"github.copilot.chat.codeGeneration.useInstructionFiles": true

----------------------------------------

TITLE: Initializing Basic Webview Panel in TypeScript
DESCRIPTION: Creates a basic webview panel with HTML content using the VS Code Webview API

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  context.subscriptions.push(
    vscode.commands.registerCommand('catCoding.start', () => {
      const panel = vscode.window.createWebviewPanel(
        'catCoding',
        'Cat Coding',
        vscode.ViewColumn.One,
        {}
      );

      panel.webview.html = getWebviewContent();
    })
  );
}

----------------------------------------

TITLE: Workspace Test Discovery Implementation
DESCRIPTION: Implementation of workspace-wide test discovery with file watching functionality.

LANGUAGE: typescript
CODE:
async function discoverAllFilesInWorkspace() {
  if (!vscode.workspace.workspaceFolders) {
    return [];
  }

  return Promise.all(vscode.workspace.workspaceFolders.map(async workspaceFolder => {
    const pattern = new vscode.RelativePattern(workspaceFolder, '**/*.md');
    const watcher = vscode.workspace.createFileSystemWatcher(pattern);

    watcher.onDidCreate(uri => getOrCreateFile(uri));
    watcher.onDidChange(uri => parseTestsInFileContents(getOrCreateFile(uri)));
    watcher.onDidDelete(uri => controller.items.delete(uri.toString()));

    for (const file of await vscode.workspace.findFiles(pattern)) {
      getOrCreateFile(file);
    }

    return watcher;
  }));
}

----------------------------------------

TITLE: Logging Output with Console.log in TypeScript
DESCRIPTION: This snippet demonstrates how Copilot suggests using console.log for logging when no specific logging framework is imported.

LANGUAGE: typescript
CODE:
console.log(add(2, 3));

----------------------------------------

TITLE: Basic TSConfig Configuration
DESCRIPTION: Initial tsconfig.json setup with ES5 target and CommonJS module system.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ES5",
        "module": "CommonJS"
    }
}

----------------------------------------

TITLE: Docker Compose Volume Configuration
DESCRIPTION: YAML configuration for Docker Compose that sets up named volumes for improved performance, including service volume mounts and volume definitions.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
      - .:/workspace:cached
      - try-node-node_modules:/workspace/node_modules

volumes:
  try-node-node_modules:

----------------------------------------

TITLE: Creating File via Terminal Command
DESCRIPTION: Demonstrates creating a new text file using terminal echo command

LANGUAGE: bash
CODE:
echo "Hello, VS Code" > greetings.txt

----------------------------------------

TITLE: Configuring TypeScript Settings in VS Code
DESCRIPTION: Example settings for configuring TypeScript behavior in VS Code, including inlay hints, auto-imports, and formatting options.

LANGUAGE: json
CODE:
{
  "typescript.inlayHints.parameterNames.enabled": "literals",
  "typescript.inlayHints.variableTypes.enabled": true,
  "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.referencesCodeLens.enabled": true,
  "typescript.implementationsCodeLens.enabled": true,
  "typescript.suggest.autoImports": true,
  "typescript.autoClosingTags": true,
  "typescript.suggest.completeJSDocs": true,
  "typescript.format.enable": true
}

----------------------------------------

TITLE: Configuring Allowed Extensions in VS Code
DESCRIPTION: JSON configuration examples showing different ways to control which extensions are allowed in VS Code. Demonstrates publisher-wide rules, specific extension versions, platform-specific versions, and stable version constraints.

LANGUAGE: json
CODE:
{
    // Allow all extensions from the 'microsoft' publisher. If the key does not have a '.', it means it is a publisher ID.
    "microsoft": true,

    // Allow all extensions from the 'github' publisher
    "github": true,

    // Allow prettier extension
    "esbenp.prettier-vscode": true,

    // Do not allow docker extension
    "ms-azuretools.vscode-docker": false,

    // Allow only version 3.0.0 of the eslint extension
    "dbaeumer.vscode-eslint": ["3.0.0"],

    // Allow multiple versions of the figma extension
    "figma.figma-vscode-extension": ["3.0.0", "4.2.3", "4.1.2"],

    // Allow version 5.0.0 of the rust extension on Windows and macOS
    "rust-lang.rust-analyzer": ["5.0.0@win32-x64", "5.0.0@darwin-x64"],

    // Allow only stable versions of the GitHub Pull Requests extension
    "github.vscode-pull-request-github": "stable",

    // Allow only stable versions from redhat publisher
    "redhat": "stable"
}

----------------------------------------

TITLE: Running Python Code in VS Code
DESCRIPTION: Multiple methods for executing Python code in VS Code, including running full files or selections in the terminal, and using the REPL.

LANGUAGE: plaintext
CODE:
kbstyle(Shift+Enter) - Run Selection/Line in Python Terminal
kb(workbench.action.showCommands) - Open Command Palette

----------------------------------------

TITLE: Basic Dev Container Configuration in JSON
DESCRIPTION: Example devcontainer.json configuration that uses a pre-built TypeScript/Node image and configures port forwarding and extensions.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/devcontainers/typescript-node",
    "forwardPorts": [ 3000 ],
    "customizations": {
        "vscode": {
            "extensions": [
                "streetsidesoftware.code-spell-checker"
            ]
        }
    }
}

----------------------------------------

TITLE: Initializing a Git Repository in VS Code
DESCRIPTION: This code snippet demonstrates how to initialize a new Git repository in Visual Studio Code using the Source Control view.

LANGUAGE: markdown
CODE:
1. Pick an existing or new folder on your computer and open it in VS Code.

1. In the **Source Control** view, select the **Initialize Repository** button.

    This creates a new Git repository in the current folder, allowing you to start tracking code changes.

    This action is equivalent to running `git init` on the command-line.

----------------------------------------

TITLE: Creating a Hover Provider with Command URI and Arguments in TypeScript
DESCRIPTION: This snippet shows how to create a hover provider that displays a command URI link with arguments for staging the current file in Git, implemented in a VS Code extension using TypeScript.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  vscode.languages.registerHoverProvider(
    'javascript',
    new class implements vscode.HoverProvider {
      provideHover(
        document: vscode.TextDocument,
        _position: vscode.Position,
        _token: vscode.CancellationToken
      ): vscode.ProviderResult<vscode.Hover> {
        const args = [{ resourceUri: document.uri }];
        const stageCommandUri = vscode.Uri.parse(
          `command:git.stage?${encodeURIComponent(JSON.stringify(args))}`
        );
        const contents = new vscode.MarkdownString(`[Stage file](${stageCommandUri})`);
        contents.isTrusted = true;
        return new vscode.Hover(contents);
      }
    }()
  );
}

----------------------------------------

TITLE: Configuring GitHub Codespaces with devcontainer.json
DESCRIPTION: Example of a devcontainer.json file used to customize a GitHub Codespace environment. This configuration file allows setting the operating system, installing tools and frameworks, forwarding ports, setting environment variables, and configuring editor settings.

LANGUAGE: json
CODE:
{
  "name": "My Project",
  "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
  "features": {
    "ghcr.io/devcontainers/features/node:1": {}
  },
  "forwardPorts": [3000],
  "postCreateCommand": "npm install",
  "customizations": {
    "vscode": {
      "extensions": [
        "dbaeumer.vscode-eslint"
      ]
    }
  }
}

----------------------------------------

TITLE: Implementing History Component with Pass-through Priority
DESCRIPTION: Creates a History component that wraps history messages and uses passPriority for direct priority inheritance.

LANGUAGE: tsx
CODE:
import { PromptElement, BasePromptElementProps } from '@vscode/prompt-tsx';

interface IHistoryProps extends BasePromptElementProps {
	history: ChatContext['history'];
	newer: number;
	older: number;
	passPriority: true;
}

export class History extends PromptElement<IHistoryProps> {
	render(): PromptPiece {
		return (
			<>
				<HistoryMessages history={this.props.history.slice(0, -2)} priority={this.props.older} />
				<HistoryMessages history={this.props.history.slice(-2)} priority={this.props.newer} />
			</>
		);
	}
}

----------------------------------------

TITLE: Creating Django Form for Message Logging
DESCRIPTION: Defines a Django ModelForm class to handle message input from users, connected to the LogMessage model.

LANGUAGE: python
CODE:
from django import forms
from hello.models import LogMessage

class LogMessageForm(forms.ModelForm):
    class Meta:
        model = LogMessage
        fields = ("message",)   # NOTE: the trailing comma is required

----------------------------------------

TITLE: Configuring Docker Debug Launch for .NET Core in VS Code
DESCRIPTION: This JSON snippet shows a launch configuration for debugging a .NET Core application in a Docker container using a Dockerfile. It specifies the application project file and includes a pre-launch task.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch .NET Core in Docker",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "Run Docker Container",
            "netCore": {
                "appProject": "${workspaceFolder}/project.csproj"
            }
        }
    ]
}

----------------------------------------

TITLE: TSConfig with Source Maps
DESCRIPTION: Configuration for enabling source maps in TypeScript compilation for debugging support.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ES5",
        "module": "CommonJS",
        "outDir": "out",
        "sourceMap": true
    }
}

----------------------------------------

TITLE: Adding Environment Variable to Dockerfile
DESCRIPTION: Dockerfile instruction to add an environment variable for setting the ASP.NET Core URLs in the container image.

LANGUAGE: dockerfile
CODE:
ENV ASPNETCORE_URLS=http://*:5000

----------------------------------------

TITLE: Creating a Simple Express Web Server in TypeScript
DESCRIPTION: This snippet demonstrates using Copilot Inline Chat to generate a basic Express web server in TypeScript. It includes setting up the server and defining a route.

LANGUAGE: typescript
CODE:
import express from 'express';

const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

----------------------------------------

TITLE: Example package.json for Visual Studio Code Extension
DESCRIPTION: A complete example of a package.json file for a Visual Studio Code extension, including fields for name, version, publisher, description, and various extension-specific properties.

LANGUAGE: json
CODE:
{
  "name": "wordcount",
  "displayName": "Word Count",
  "version": "0.1.0",
  "publisher": "ms-vscode",
  "description": "Markdown Word Count Example - reports out the number of words in a Markdown file.",
  "author": {
    "name": "sean"
  },
  "categories": ["Other"],
  "icon": "images/icon.png",
  "galleryBanner": {
    "color": "#C80000",
    "theme": "dark"
  },
  "pricing": "Free",
  "activationEvents": ["onLanguage:markdown"],
  "engines": {
    "vscode": "^1.0.0"
  },
  "main": "./out/extension",
  "scripts": {
    "vscode:prepublish": "node ./node_modules/vscode/bin/compile",
    "compile": "node ./node_modules/vscode/bin/compile -watch -p ./"
  },
  "devDependencies": {
    "@types/vscode": "^0.10.x",
    "typescript": "^1.6.2"
  },
  "license": "SEE LICENSE IN LICENSE.txt",
  "bugs": {
    "url": "https://github.com/microsoft/vscode-wordcount/issues",
    "email": "sean@contoso.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/microsoft/vscode-wordcount.git"
  },
  "homepage": "https://github.com/microsoft/vscode-wordcount/blob/main/README.md"
}

----------------------------------------

TITLE: Running Multiple Commands with a Single Keyboard Shortcut (JSON)
DESCRIPTION: Examples of configuring keyboard shortcuts to run multiple commands sequentially, including commands with and without arguments.

LANGUAGE: JSON
CODE:
{
  "key": "ctrl+alt+c",
  "command": "runCommands",
  "args": {
    "commands": [
      "editor.action.copyLinesDownAction",
      "cursorUp",
      "editor.action.addCommentLine",
      "cursorDown"
    ]
  }
},
{
  "key": "ctrl+n",
  "command": "runCommands",
  "args": {
    "commands": [
      {
        "command": "workbench.action.files.newUntitledFile",
        "args": {
          "languageId": "typescript"
        }
      },
      {
        "command": "editor.action.insertSnippet",
        "args": {
          "langId": "typescript",
          "snippet": "class ${1:ClassName} {\n\tconstructor() {\n\t\t$0\n\t}\n}"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Default Test Task in tasks.json
DESCRIPTION: This JSON configuration defines a default test task using npm to run Node.js tests. It specifies the command 'node --test' to execute tests in the src/tests directory.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "npm",
			"script": "test",
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"problemMatcher": [],
			"label": "npm: test",
			"detail": "node --test src/tests/**.js"
		}
	]
}

----------------------------------------

TITLE: Creating a Simple Python Program
DESCRIPTION: This snippet demonstrates how to create a basic Python program that prints a message. It introduces the use of variables and the print function.

LANGUAGE: python
CODE:
msg = "Roll a dice!"
print(msg)

----------------------------------------

TITLE: Launching VS Code with a Specific Profile
DESCRIPTION: This command shows how to launch VS Code with a specific profile using the --profile command-line option. It opens the 'web-sample' folder using the 'Web Development' profile.

LANGUAGE: bash
CODE:
code ~/projects/web-sample --profile "Web Development"

----------------------------------------

TITLE: Configuring IntelliSense Settings in Visual Studio Code
DESCRIPTION: This code snippet shows the default IntelliSense settings in Visual Studio Code. These settings control various aspects of the IntelliSense behavior, such as quick suggestions, acceptance of suggestions, and parameter hints.

LANGUAGE: javascript
CODE:
{
    // Controls if quick suggestions should show up while typing
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
    },

     // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    "editor.acceptSuggestionOnCommitCharacter": true,

    // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
    "editor.acceptSuggestionOnEnter": "on",

    // Controls the delay in ms after which quick suggestions will show up.
    "editor.quickSuggestionsDelay": 10,

    // Controls if suggestions should automatically show up when typing trigger characters
    "editor.suggestOnTriggerCharacters": true,

    // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
    "editor.tabCompletion": "off",

    // Controls whether sorting favours words that appear close to the cursor
    "editor.suggest.localityBonus": true,

    // Controls how suggestions are pre-selected when showing the suggest list
    "editor.suggestSelection": "first",

    // Enable word based suggestions
    "editor.wordBasedSuggestions": "matchingDocuments",

    // Enable parameter hints
    "editor.parameterHints.enabled": true,
}

----------------------------------------

TITLE: Configuring Debugging in Docker Compose YAML for Python
DESCRIPTION: Example of a docker-compose.debug.yml file configuring debugging for a Python application using debugpy.

LANGUAGE: yaml
CODE:
version: '3.4'

services:
  pythonsamplevscodedjangotutorial:
    image: pythonsamplevscodedjangotutorial
    build:
      context: .
      dockerfile: ./Dockerfile
    command: ["sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 manage.py runserver 0.0.0.0:8000 --nothreading --noreload"]
    ports:
      - 8000:8000
      - 5678:5678

----------------------------------------

TITLE: Creating New React Application
DESCRIPTION: Command to create a new React application using create-react-app generator

LANGUAGE: bash
CODE:
npx create-react-app my-app

----------------------------------------

TITLE: Implementing a VS Code Command with Language Model Integration
DESCRIPTION: This snippet demonstrates how to register a VS Code command that uses the Language Model API to replace variable names in the active editor with cat-themed names. It includes prompt creation, model selection, request sending, and streaming the response back to the editor.

LANGUAGE: typescript
CODE:
vscode.commands.registerTextEditorCommand('cat.namesInEditor', async (textEditor: vscode.TextEditor) => {
    const [model] = await vscode.lm.selectChatModels({ vendor: 'copilot', family: 'gpt-4o' });
    let chatResponse: vscode.LanguageModelChatResponse | undefined;

    const text = textEditor.document.getText();

    const messages = [
        vscode.LanguageModelChatMessage.User(`You are a cat! Think carefully and step by step like a cat would.
        Your job is to replace all variable names in the following code with funny cat variable names. Be creative. IMPORTANT respond just with code. Do not use markdown!`),
        vscode.LanguageModelChatMessage.User(text)
    ];

    try {
        chatResponse = await model.sendRequest(messages, {}, new vscode.CancellationTokenSource().token);
    } catch (err) {
        if (err instanceof vscode.LanguageModelError) {
            console.log(err.message, err.code, err.cause)
        } else {
            throw err;
        }
        return;
    }

    await textEditor.edit(edit => {
        const start = new vscode.Position(0, 0);
        const end = new vscode.Position(textEditor.document.lineCount - 1, textEditor.document.lineAt(textEditor.document.lineCount - 1).text.length);
        edit.delete(new vscode.Range(start, end));
    });

    try {
        for await (const fragment of chatResponse.text) {
            await textEditor.edit(edit => {
                const lastLine = textEditor.document.lineAt(textEditor.document.lineCount - 1);
                const position = new vscode.Position(lastLine.lineNumber, lastLine.text.length);
                edit.insert(position, fragment);
            });
        }
    } catch (err) {
        await textEditor.edit(edit => {
            const lastLine = textEditor.document.lineAt(textEditor.document.lineCount - 1);
            const position = new vscode.Position(lastLine.lineNumber, lastLine.text.length);
            edit.insert(position, (<Error>err).message);
        });
    }
});

----------------------------------------

TITLE: Defining a Command Contribution in package.json for VS Code Extension
DESCRIPTION: This JSON snippet shows how to define a command contribution in the package.json file of a VS Code extension. This makes the command discoverable in the Command Palette.

LANGUAGE: json
CODE:
{
  "contributes": {
    "commands": [
      {
        "command": "myExtension.sayHello",
        "title": "Say Hello"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Flask Debugging in launch.json
DESCRIPTION: Configuration for debugging Flask applications using the Python Debugger extension in VS Code.

LANGUAGE: json
CODE:
{
    "name": "Python Debugger: Flask",
    "type": "debugpy",
    "request": "launch",
    "module": "flask",
    "env": {
        "FLASK_APP": "app.py"
    },
    "args": [
        "run",
        "--no-debugger"
    ],
    "jinja": true
}

----------------------------------------

TITLE: Creating and Training Neural Network for Titanic Survival Prediction with Keras
DESCRIPTION: Builds a sequential neural network using Keras, compiles it with appropriate optimizer and loss function, trains on the Titanic dataset, and evaluates its accuracy on the test set.

LANGUAGE: python
CODE:
from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(5, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))
model.add(Dense(5, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(1, kernel_initializer = 'uniform', activation = 'sigmoid'))

model.compile(optimizer="adam", loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=32, epochs=50)

y_pred = np.rint(model.predict(X_test).flatten())
print(metrics.accuracy_score(y_test, y_pred))

----------------------------------------

TITLE: Defining a Simple Python Function for Testing
DESCRIPTION: This code snippet defines two simple functions, increment and decrement, which will be used as examples for testing throughout the document.

LANGUAGE: python
CODE:
def increment(x):
    return x + 1

def decrement(x):
    return x - 1

----------------------------------------

TITLE: Configuring Emmet Tab Expansion in VS Code
DESCRIPTION: JSON configuration to enable Emmet expansion using the Tab key in Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.triggerExpansionOnTab": true

----------------------------------------

TITLE: Configuring TypeScript Compilation with Source Maps
DESCRIPTION: Basic TypeScript configuration file that enables source map generation for debugging, sets the output directory, and specifies compilation targets.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ES5",
        "module": "CommonJS",
        "outDir": "out",
        "sourceMap": true
    }
}

----------------------------------------

TITLE: Configuring Language-Specific Settings in JSON
DESCRIPTION: Example showing how to customize editor settings specifically for TypeScript and Markdown languages in settings.json

LANGUAGE: json
CODE:
{
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true
  },
  "[markdown]": {
    "editor.formatOnSave": true,
    "editor.wordWrap": "on",
    "editor.renderWhitespace": "all",
    "editor.acceptSuggestionOnEnter": "off"
  }
}

----------------------------------------

TITLE: Checking Node.js Environment in Container
DESCRIPTION: Commands to verify Node.js and npm versions in the development container.

LANGUAGE: bash
CODE:
node --version; npm --version

----------------------------------------

TITLE: Initializing WebAssembly Language Server in VS Code Extension
DESCRIPTION: This TypeScript code demonstrates how to set up a WebAssembly-based language server in a VS Code extension using the @vscode/wasm-wasi-lsp module.

LANGUAGE: typescript
CODE:
import { createStdioOptions, createUriConverters, startServer } from '@vscode/wasm-wasi-lsp';

export async function activate(context: ExtensionContext) {
	const wasm: Wasm = await Wasm.load();

	const channel = window.createOutputChannel('LSP WASM Server');
	const serverOptions: ServerOptions = async () => {
		const options: ProcessOptions = {
			stdio: createStdioOptions(),
			mountPoints: [
				{ kind: 'workspaceFolder' },
			]
		};

		const filename = Uri.joinPath(context.extensionUri, 'server', 'target', 'wasm32-wasip1-threads', 'release', 'server.wasm');
		const bits = await workspace.fs.readFile(filename);
		const module = await WebAssembly.compile(bits);

		const process = await wasm.createProcess('lsp-server', module, { initial: 160, maximum: 160, shared: true }, options);

		const decoder = new TextDecoder('utf-8');
		process.stderr!.onData((data) => {
			channel.append(decoder.decode(data));
		});

		return startServer(process);
	};

	const clientOptions: LanguageClientOptions = {
		documentSelector: [ { language: 'plaintext' } ],
		outputChannel: channel,
		uriConverters: createUriConverters(),
	};

	let client = new LanguageClient('lspClient', 'LSP Client', serverOptions, clientOptions);
	await client.start();
}

----------------------------------------

TITLE: Creating Remote Tunnel via CLI
DESCRIPTION: Command to create a secure tunnel using the VS Code CLI

LANGUAGE: bash
CODE:
code tunnel

----------------------------------------

TITLE: Creating a new Angular application
DESCRIPTION: Command to create a new Angular application using the Angular CLI. This sets up a basic project structure with default configurations.

LANGUAGE: bash
CODE:
ng new my-app

----------------------------------------

TITLE: Configuring pytest for Parallel Testing in pyproject.toml
DESCRIPTION: This code snippet shows how to configure pytest to run tests in parallel using the pytest-xdist package in a pyproject.toml file.

LANGUAGE: toml
CODE:
[tool.pytest.ini_options]
addopts="-n 4"

----------------------------------------

TITLE: Target Application Configuration
DESCRIPTION: Configuration options for modifying the target application's launch behavior, including command line arguments, working directory, and environment variables.

LANGUAGE: json
CODE:
{
   "name": "C++ Launch",
   "type": "cppdbg",
   "request": "launch",
   "program": "${workspaceFolder}/a.out",
   "args": ["arg1", "arg2"],
   "environment": [{"name": "config", "value": "Debug"}],
   "cwd": "${workspaceFolder}"
}

----------------------------------------

TITLE: Customizing Diagnostic Severity in Pylance
DESCRIPTION: Example of how to override the severity levels for individual diagnostics in the Pylance language server, changing the severity of unbound variable reports and implicit string concatenation warnings.

LANGUAGE: json
CODE:
{
    "python.analysis.diagnosticSeverityOverrides": {
        "reportUnboundVariable": "information",
        "reportImplicitStringConcatenation": "warning"
    }
}

----------------------------------------

TITLE: Implementing NotebookController in TypeScript
DESCRIPTION: Creates a NotebookController class to handle code cell execution and output generation

LANGUAGE: typescript
CODE:
class Controller {
    readonly controllerId = 'my-notebook-controller-id'
    readonly notebookType = 'my-notebook';
    readonly label = 'My Notebook';
    readonly supportedLanguages = ['python'];

    private readonly _controller: vscode.NotebookController;
    private _executionOrder = 0;

    constructor() {
        this._controller = vscode.notebooks.createNotebookController(this.controllerId, this.notebookType, this.label);

        this._controller.supportedLanguages = this.supportedLanguages;
        this._controller.supportsExecutionOrder = true;
        this._controller.executeHandler = this._execute.bind(this);
    }

    private _execute(cells: vscode.NotebookCell[], _notebook: vscode.NotebookDocument, _controller: vscode.NotebookController): void {
        for (let cell of cells) {
            this._doExecution(cell);
        }
    }

    private async _doExecution(cell: vscode.NotebookCell): Promise<void> {
        const execution = this._controller.createNotebookCellExecution(cell);
        execution.executionOrder = ++this._executionOrder;
        execution.start(Date.now());
        execution.replaceOutput([new vscode.NotebookCellOutput([vscode.NotebookCellOutputItem.text('Dummy output text!')])])
        execution.end(true, Date.now());
    }
}

----------------------------------------

TITLE: Initializing Python Debugger Configuration in launch.json
DESCRIPTION: Example of a basic launch.json configuration for debugging Python files using the Python Debugger extension in VS Code.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Python Debugger: Current File (Integrated Terminal)",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal"
        },
        {
            "name": "Python Debugger: Current File (External Terminal)",
            "type": "debugpy",
            "request": "launch",
            "program": "${file}",
            "console": "externalTerminal"
        }
    ]
}

----------------------------------------

TITLE: Configuring Semantic Highlighting in Go
DESCRIPTION: JSON configuration to enable semantic token highlighting for improved Go syntax highlighting through gopls.

LANGUAGE: json
CODE:
"gopls": { "ui.semanticTokens": true }

----------------------------------------

TITLE: Configuring Java Runtime Settings in VS Code
DESCRIPTION: JSON configuration for setting up multiple Java runtime environments in VS Code. Allows specifying JDK paths, sources, javadoc locations and setting a default runtime.

LANGUAGE: json
CODE:
"java.configuration.runtimes": [
  {
    "name": "JavaSE-1.8",
    "path": "/usr/local/jdk1.8.0_201"
  },
  {
    "name": "JavaSE-11",
    "path": "/usr/local/jdk-11.0.3",
    "sources" : "/usr/local/jdk-11.0.3/lib/src.zip",
    "javadoc" : "https://docs.oracle.com/en/java/javase/11/docs/api",
    "default":  true
   },
   {
    "name": "JavaSE-12",
    "path": "/usr/local/jdk-12.0.2"
   },
   {
    "name": "JavaSE-13",
    "path": "/usr/local/jdk-13"
   }
]

----------------------------------------

TITLE: Configuring jsconfig.json with Include Property for JavaScript Projects
DESCRIPTION: This example shows how to explicitly set the files in a project using the include attribute, which is useful for specifying a subset of files to be included in the JavaScript project.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6"
    },
    "include": [
        "src/**/*"
    ]
}

----------------------------------------

TITLE: Compound Launch Configuration
DESCRIPTION: Configuration for launching multiple debug sessions simultaneously, such as starting both a server and client application.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Server",
            "program": "${workspaceFolder}/server.js"
        },
        {
            "type": "node",
            "request": "launch",
            "name": "Client",
            "program": "${workspaceFolder}/client.js"
        }
    ],
    "compounds": [
        {
            "name": "Server/Client",
            "configurations": ["Server", "Client"],
            "preLaunchTask": "${defaultBuildTask}",
            "stopAll": true
        }
    ]
}

----------------------------------------

TITLE: Configuring Docker Run Task for Nest.js Application
DESCRIPTION: This snippet shows how to configure the Docker run task for a Nest.js application, specifying the command to start the application in debug mode.

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "type": "docker-run",
            "label": "docker-run: debug",
            "dependsOn": [
                "docker-build"
            ],
            "dockerRun": {
                "command": "nest start --debug 0.0.0.0:9229",
            },
            "node": {
                "enableDebugging": true
            }
        }
    ]
}

----------------------------------------

TITLE: Installing TypeScript Compiler via NPM
DESCRIPTION: Commands to install TypeScript globally using npm and verify the installation.

LANGUAGE: bash
CODE:
npm install -g typescript
tsc --version

----------------------------------------

TITLE: Configuring Python Settings in Profile
DESCRIPTION: JSON configuration for Python-specific settings in a profile, including analysis options and default formatter.

LANGUAGE: json
CODE:
{
    "python.analysis.autoImportCompletions": true,
    "python.analysis.fixAll": ["source.unusedImports"],
    "editor.defaultFormatter": "charliermarsh.ruff"
}

----------------------------------------

TITLE: Configuring Language Grammar in package.json
DESCRIPTION: Contributes a TextMate grammar to a language, specifying the language, scope name, and file path for the grammar.

LANGUAGE: json
CODE:
{
  "contributes": {
    "grammars": [
      {
        "language": "markdown",
        "scopeName": "text.html.markdown",
        "path": "./syntaxes/markdown.tmLanguage.json",
        "embeddedLanguages": {
          "meta.embedded.block.frontmatter": "yaml"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Validating Regular Expression Conditionals in TypeScript
DESCRIPTION: Example showing how TypeScript 5.6 detects common 'always true' programming mistakes when using regular expressions in conditionals.

LANGUAGE: typescript
CODE:
const str = '...'
if (/\d+(\.\d+)?/) {
  ...
} else {
  ...
}

----------------------------------------

TITLE: Modifying Dockerfile to Keep node_modules in App Directory
DESCRIPTION: This Dockerfile snippet demonstrates how to modify the Dockerfile to keep the node_modules folder in the application directory, which is necessary for some Node.js frameworks.

LANGUAGE: docker
CODE:
FROM node:lts-alpine
ENV NODE_ENV=production
WORKDIR /usr/src/app
COPY ["package.json", "package-lock.json*", "npm-shrinkwrap.json*", "./"]
# Remove the `&& mv node_modules ../` from the RUN command:
# RUN npm install --production --silent && mv node_modules ../
RUN npm install --production --silent
COPY . .
EXPOSE 3000
RUN chown -R node /usr/src/app
USER node
CMD ["npm", "start"]

----------------------------------------

TITLE: Installing Command Line Developer Tools on macOS
DESCRIPTION: Command to install the command line developer tools, which include Clang, on macOS.

LANGUAGE: bash
CODE:
xcode-select --install

----------------------------------------

TITLE: Configuring Data Science Settings in Profile
DESCRIPTION: JSON configuration for Data Science-specific settings in a profile, including Python formatting, editor options, and file exclusions.

LANGUAGE: json
CODE:
{
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.formatOnType": true,
        "editor.formatOnSave": true
    },
    "editor.inlineSuggest.enabled": true,
    "editor.lineHeight": 17,
    "breadcrumbs.enabled": false,
    "files.autoSave": "afterDelay",
    "notebook.output.scrolling": true,
    "jupyter.themeMatplotlibPlots": true,
    "jupyter.widgetScriptSources": [
        "unpkg.com",
        "jsdelivr.com"
    ],
    "files.exclude": {
        "**/.csv": true,
        "**/.parquet": true,
        "**/.pkl": true,
        "**/.xls": true
    }
}

----------------------------------------

TITLE: Installing Docker CLI in Ubuntu Development Container
DESCRIPTION: Dockerfile commands to install Docker CLI and related dependencies in an Ubuntu-based development container.

LANGUAGE: sh
CODE:
    && apt-get -y install software-properties-common \
    && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - 2>/dev/null \
    && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" \
    && apt-get update -y \
    && apt-get install -y docker-ce-cli \
    && apt-get install -y python python-pip \
    && pip install docker-compose \

----------------------------------------

TITLE: VS Code Extension Test Runner Script
DESCRIPTION: Create a test runner script that uses the @vscode/test-electron API to launch VS Code and run extension tests.

LANGUAGE: typescript
CODE:
import * as path from 'path';

import { runTests } from '@vscode/test-electron';

async function main() {
  try {
    // The folder containing the Extension Manifest package.json
    // Passed to `--extensionDevelopmentPath`
    const extensionDevelopmentPath = path.resolve(__dirname, '../../');

    // The path to the extension test runner script
    // Passed to --extensionTestsPath
    const extensionTestsPath = path.resolve(__dirname, './suite/index');

    // Download VS Code, unzip it and run the integration test
    await runTests({ extensionDevelopmentPath, extensionTestsPath });
  } catch (err) {
    console.error(err);
    console.error('Failed to run tests');
    process.exit(1);
  }
}

main();

----------------------------------------

TITLE: Configuring Windows C/C++ IntelliSense
DESCRIPTION: Sample configuration file for C/C++ IntelliSense on Windows using MinGW compiler. Defines workspace settings, compiler path, and language standards.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Win32",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [
                "_DEBUG",
                "UNICODE",
                "_UNICODE"
            ],
            "windowsSdkVersion": "10.0.22621.0",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "${default}",
            "compilerPath": "C:/msys64/mingw64/bin/gcc.exe"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Configuring View Containers in package.json
DESCRIPTION: Contributes a view container into which custom views can be contributed, specifying its identifier, title, and icon.

LANGUAGE: json
CODE:
{
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "package-explorer",
          "title": "Package Explorer",
          "icon": "resources/package-explorer.svg"
        }
      ]
    },
    "views": {
      "package-explorer": [
        {
          "id": "package-dependencies",
          "name": "Dependencies"
        },
        {
          "id": "package-outline",
          "name": "Outline"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Configuring Default Python Formatter in VS Code Settings
DESCRIPTION: JSON configuration to set Black Formatter as the default formatter for Python files in VS Code user settings.

LANGUAGE: json
CODE:
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter"
  }

----------------------------------------

TITLE: Installing TypeScript Compiler via npm
DESCRIPTION: This snippet shows how to install the TypeScript compiler globally using npm. It also demonstrates how to check the installed version.

LANGUAGE: bash
CODE:
npm install -g typescript
tsc --version

----------------------------------------

TITLE: Configuring Extract Function Keyboard Shortcut
DESCRIPTION: JSON configuration for setting up a keyboard shortcut to trigger the Extract Function refactoring action in VS Code.

LANGUAGE: json
CODE:
{
  "key": "ctrl+shift+r ctrl+e",
  "command": "editor.action.codeAction",
  "args": {
    "kind": "refactor.extract.function"
  }
}

----------------------------------------

TITLE: Initializing FastAPI Application in Python
DESCRIPTION: Creates a basic FastAPI application with a root endpoint that returns a 'Hello World' message.

LANGUAGE: python
CODE:
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def root():
    return {"message": "Hello World"}

----------------------------------------

TITLE: Registering a Language Model Tool in TypeScript
DESCRIPTION: This snippet shows how to register a language model tool with the VS Code API using vscode.lm.registerTool.

LANGUAGE: typescript
CODE:
export function registerChatTools(context: vscode.ExtensionContext) {
    context.subscriptions.push(vscode.lm.registerTool('chat-tools-sample_tabCount', new TabCountTool()));
}

----------------------------------------

TITLE: Configuring Debugging Port in Docker Compose YAML for Node.js
DESCRIPTION: Example of a docker-compose.debug.yml file configuring the debugging port 9229 for a Node.js application.

LANGUAGE: yaml
CODE:
version: '3.4'

services:
  node-hello:
    image: node-hello
    build: .
    environment:
      NODE_ENV: development
    ports:
      - 3000
      - 9229:9229
    command: node --inspect=0.0.0.0:9229 ./bin/www

----------------------------------------

TITLE: Implementing CustomExecution Task
DESCRIPTION: Example of implementing a CustomExecution task for complex build systems requiring state management and custom output handling.

LANGUAGE: typescript
CODE:
return new vscode.Task(definition, vscode.TaskScope.Workspace, `${flavor} ${flags.join(' ')}`,
  CustomBuildTaskProvider.CustomBuildScriptType, new vscode.CustomExecution(async (): Promise<vscode.Pseudoterminal> => {
    // When the task is executed, this callback will run. Here, we setup for running the task.
    return new CustomBuildTaskTerminal(this.workspaceRoot, flavor, flags, () => this.sharedState, (state: string) => this.sharedState = state);
  }));

----------------------------------------

TITLE: Implementing Hover Provider in TypeScript
DESCRIPTION: Example of registering a hover provider for JavaScript files using the vscode.languages API. Shows how to return hover contents when hovering over code.

LANGUAGE: typescript
CODE:
vscode.languages.registerHoverProvider('javascript', {
  provideHover(document, position, token) {
    return {
      contents: ['Hover Content']
    };
  }
});

----------------------------------------

TITLE: Creating Hello World C++ Program
DESCRIPTION: Basic C++ program demonstrating vectors, strings and console output using standard library features.

LANGUAGE: cpp
CODE:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
   vector<string> msg {"Hello", "C++", "World", "from", "VS Code", "and the C++ extension!"};

   for (const string& word : msg)
   {
      cout << word << " ";
   }
   cout << endl;
}

----------------------------------------

TITLE: Configuring Git Bash History Retention in VS Code
DESCRIPTION: This bash snippet shows how to configure Git Bash to retain history across shell sessions in VS Code. It adds a command to the .bashrc or .bash_profile file to flush the current session's commands to the backing history file.

LANGUAGE: bash
CODE:
export PROMPT_COMMAND='history -a'

----------------------------------------

TITLE: Git Line Ending Configuration in .gitattributes
DESCRIPTION: Configuration for handling line endings in Git repositories to prevent issues between Windows and Linux systems.

LANGUAGE: yaml
CODE:
* text=auto eol=lf
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

----------------------------------------

TITLE: Configuring jsconfig.json with Exclude Property for JavaScript Projects
DESCRIPTION: This snippet demonstrates how to set up a basic jsconfig.json file with compiler options and an exclude property to improve IntelliSense performance by excluding node_modules.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6"
    },
    "exclude": [
        "node_modules"
    ]
}

----------------------------------------

TITLE: Creating a Column Using Custom Python Formula in Data Wrangler
DESCRIPTION: Data Wrangler allows you to create new columns using custom Python formulas. This example demonstrates how to create a new column based on existing data.

LANGUAGE: python
CODE:
# Example of a custom formula in Data Wrangler
new_column = df['existing_column'] * 2 + 5

----------------------------------------

TITLE: Configuring Docker Debug Launch for Node.js in VS Code
DESCRIPTION: This JSON snippet shows a launch configuration for debugging a Node.js application running in a Docker container. It specifies the debug type as 'docker', sets the platform to 'node', and includes a pre-launch task.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Docker Node.js Launch",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "docker-run: debug",
            "platform": "node"
        }
    ]
}

----------------------------------------

TITLE: Configuring Referenced Libraries for Java Projects
DESCRIPTION: JSON configuration for managing external library dependencies in unmanaged Java projects. Includes patterns for including/excluding JAR files and specifying source attachments.

LANGUAGE: json
CODE:
"java.project.referencedLibraries": {
    "include": [
        "library/**/*.jar",
        "/home/username/lib/foo.jar"
    ],
    "exclude": [
        "library/sources/**"
    ],
    "sources": {
        "library/bar.jar": "library/sources/bar-src.jar"
    }
}

----------------------------------------

TITLE: Express.js Server Example
DESCRIPTION: Sample Express.js server application demonstrating a basic HTTP server setup for debugging purposes.

LANGUAGE: javascript
CODE:
var express = require('express');
var app = express();

app.get('/', function (req, res) {
  res.send('Hello World!')
});

app.listen(3000, function () {
  console.log('Example app listening on port 3000!')
});

----------------------------------------

TITLE: Configuring VS Code Extension Manifest in package.json
DESCRIPTION: Demonstrates the essential configuration fields in package.json for a VS Code extension, including metadata, activation events, contribution points, and dependencies.

LANGUAGE: json
CODE:
{
  "name": "helloworld-sample",
  "displayName": "helloworld-sample",
  "description": "HelloWorld example for VS Code",
  "version": "0.0.1",
  "publisher": "vscode-samples",
  "repository": "https://github.com/microsoft/vscode-extension-samples/helloworld-sample",
  "engines": {
    "vscode": "^1.51.0"
  },
  "categories": ["Other"],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "helloworld.helloWorld",
        "title": "Hello World"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./"
  },
  "devDependencies": {
    "@types/node": "^8.10.25",
    "@types/vscode": "^1.51.0",
    "tslint": "^5.16.0",
    "typescript": "^3.4.5"
  }
}

----------------------------------------

TITLE: Installing VS Code .deb Package on Debian/Ubuntu
DESCRIPTION: Commands for installing the Visual Studio Code .deb package on Debian and Ubuntu-based distributions using apt.

LANGUAGE: bash
CODE:
sudo apt install ./<file>.deb

# If you're on an older Linux distribution, you will need to run this instead:
# sudo dpkg -i <file>.deb
# sudo apt-get install -f # Install dependencies

----------------------------------------

TITLE: Configuring Express.js to Write Logs to Debug Console
DESCRIPTION: This JavaScript snippet shows how to configure an Express.js application to write logs to the debug console by binding the log function to the console's debug method.

LANGUAGE: javascript
CODE:
var app = require('../app');
var debug = require('debug')('my-express-app:server');
var http = require('http');

// Force logging to the debug console.
debug.log = console.debug.bind(console);

----------------------------------------

TITLE: Implementing Add Item Route with Redis in Python
DESCRIPTION: Defines a route to add an item to the grocery list, using Redis for data storage and handling both new and existing items.

LANGUAGE: python
CODE:
@app.post("/items/{item_name}/{quantity}")
def add_item(item_name: str, quantity: int) -> dict[str, ItemPayload]:
    if quantity <= 0:
        raise HTTPException(status_code=400, detail="Quantity must be greater than 0.")

    item_id_str: str | None = redis_client.hget("item_name_to_id", item_name)

    if item_id_str is not None:
        item_id = int(item_id_str)
        redis_client.hincrby(f"item_id:{item_id}", "quantity", quantity)
    else:
        item_id: int = redis_client.incr("item_ids")
        redis_client.hset(
            f"item_id:{item_id}",
            mapping={
                "item_id": item_id,
                "item_name": item_name,
                "quantity": quantity,
            },
        )
        redis_client.hset("item_name_to_id", item_name, item_id)

    return {
        "item": ItemPayload(item_id=item_id, item_name=item_name, quantity=quantity)
    }

----------------------------------------

TITLE: TypeScript Method Parameter Naming Example
DESCRIPTION: Example demonstrating how Copilot maintains consistent parameter naming conventions between add and subtract methods.

LANGUAGE: typescript
CODE:
add
subtract

----------------------------------------

TITLE: TypeScript Hello World Example
DESCRIPTION: Basic TypeScript code example demonstrating type declaration and console output.

LANGUAGE: typescript
CODE:
let message : string = "Hello World";
console.log(message);

----------------------------------------

TITLE: Installing VS Code via apt on Debian/Ubuntu
DESCRIPTION: Commands for updating the package cache and installing Visual Studio Code using apt on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
sudo apt install apt-transport-https
sudo apt update
sudo apt install code # or code-insiders

----------------------------------------

TITLE: VS Code Debug Configuration for React
DESCRIPTION: Launch configuration for debugging React applications in VS Code with Edge browser

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "msedge",
            "request": "launch",
            "name": "Launch Edge against localhost",
            "url": "http://localhost:3000",
            "webRoot": "${workspaceFolder}"
        }
    ]
}

----------------------------------------

TITLE: Implementing Diagnostics in TypeScript
DESCRIPTION: Example showing how to create and manage diagnostics collection to report code issues using the vscode.languages API.

LANGUAGE: typescript
CODE:
let diagnosticCollection: vscode.DiagnosticCollection;

export function activate(ctx: vscode.ExtensionContext): void {
  ...
  ctx.subscriptions.push(getDisposable());
  diagnosticCollection = vscode.languages.createDiagnosticCollection('go');
  ctx.subscriptions.push(diagnosticCollection);
  ...
}

function onChange() {
  let uri = document.uri;
  check(uri.fsPath, goConfig).then(errors => {
    diagnosticCollection.clear();
    let diagnosticMap: Map<string, vscode.Diagnostic[]> = new Map();
    errors.forEach(error => {
      let canonicalFile = vscode.Uri.file(error.file).toString();
      let range = new vscode.Range(error.line-1, error.startColumn, error.line-1, error.endColumn);
      let diagnostics = diagnosticMap.get(canonicalFile);
      if (!diagnostics) { diagnostics = []; }
      diagnostics.push(new vscode.Diagnostic(range, error.msg, error.severity));
      diagnosticMap.set(canonicalFile, diagnostics);
    });
    diagnosticMap.forEach((diags, file) => {
      diagnosticCollection.set(vscode.Uri.parse(file), diags);
    });
  })
}

----------------------------------------

TITLE: Configuring macOS C/C++ IntelliSense
DESCRIPTION: Sample configuration file for C/C++ IntelliSense on macOS using Clang compiler. Includes framework paths and compiler settings specific to macOS.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Mac",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "macFrameworkPath": [
                "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks"
            ],
            "compilerPath": "/usr/bin/clang",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "macos-clang-arm64"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Basic VS Code C++ Debug Configuration
DESCRIPTION: Example configuration for launching a C++ application on Windows using the Visual Studio debugger, including symbol search paths and logging options.

LANGUAGE: json
CODE:
{
   "name": "C++ Launch (Windows)",
   "type": "cppvsdbg",
   "request": "launch",
   "program": "C:\\app1\\Debug\\app1.exe",
   "symbolSearchPath": "C:\\Symbols;C:\\SymbolDir2",
   "externalConsole": true,
   "logging": {
       "moduleLoad": false,
       "trace": true
    },
   "visualizerFile": "${workspaceFolder}/my.natvis",
   "showDisplayString": true
}

----------------------------------------

TITLE: Configuring Cygwin Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet shows how to set up a terminal profile for Cygwin in VS Code settings for Windows. It configures the path, arguments, and sets it as the default profile.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "Cygwin": {
      "path": "C:\\cygwin64\\bin\\bash.exe",
      "args": ["--login"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "Cygwin"
}

----------------------------------------

TITLE: Creating pytest Test Functions
DESCRIPTION: This code snippet shows how to create test functions using the pytest framework. It includes two test methods, one of which is intentionally set to fail for demonstration purposes.

LANGUAGE: python
CODE:
import inc_dec    # The code to test

def test_increment():
    assert inc_dec.increment(3) == 4

# This test is designed to fail for demonstration purposes.
def test_decrement():
    assert inc_dec.decrement(3) == 4

----------------------------------------

TITLE: Configuring Docker Debug Launch for Python Django in VS Code
DESCRIPTION: This JSON snippet demonstrates a launch configuration for debugging a Python Django application in a Docker container. It includes path mappings and specifies the project type as 'django'.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "name": "Docker: Python - Django",
      "type": "docker",
      "request": "launch",
      "preLaunchTask": "docker-run: debug",
      "python": {
        "pathMappings": [
          {
            "localRoot": "${workspaceFolder}",
            "remoteRoot": "/app"
          }
        ],
        "projectType": "django"
      }
    }
  ]
}

----------------------------------------

TITLE: Disabling Autoclosing Tags in VS Code Settings
DESCRIPTION: This JSON snippet demonstrates how to turn off the automatic closing of HTML tags in VS Code through user or workspace settings.

LANGUAGE: json
CODE:
"html.autoClosingTags": false

----------------------------------------

TITLE: Creating a Simple Python Code Cell in Jupyter Notebook
DESCRIPTION: This code snippet demonstrates how to create a basic code cell in a Jupyter Notebook using Python to print a 'Hello world' message.

LANGUAGE: python
CODE:
msg = "Hello world"
print(msg)

----------------------------------------

TITLE: Configuring Named Volume Mount in devcontainer.json
DESCRIPTION: JSON configuration for mounting node_modules into a named volume to improve performance. Includes workspace mount configuration and post-creation commands for non-root users.

LANGUAGE: json
CODE:
{
    "mounts": [
        "source=${localWorkspaceFolderBasename}-node_modules,target=${containerWorkspaceFolder}/node_modules,type=volume"
    ],
    "remoteUser": "node",
    "postCreateCommand": "sudo chown node node_modules"
}

----------------------------------------

TITLE: Training Naive Bayes Classifier for Titanic Survival Prediction in Python
DESCRIPTION: Splits data into training and test sets, normalizes features, trains a Gaussian Naive Bayes classifier, and evaluates its accuracy on the test set using scikit-learn.

LANGUAGE: python
CODE:
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn import metrics

x_train, x_test, y_train, y_test = train_test_split(data[['sex','pclass','age','relatives','fare']], data.survived, test_size=0.2, random_state=0)

sc = StandardScaler()
X_train = sc.fit_transform(x_train)
X_test = sc.transform(x_test)

model = GaussianNB()
model.fit(X_train, y_train)

predict_test = model.predict(X_test)
print(metrics.accuracy_score(y_test, predict_test))

----------------------------------------

TITLE: Implementing TreeDataProvider for Node Dependencies
DESCRIPTION: Implements a TreeDataProvider class that provides node dependencies data for the Tree View, including methods for getting children and tree items.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

export class NodeDependenciesProvider implements vscode.TreeDataProvider<Dependency> {

    constructor(private workspaceRoot: string) {}

    getTreeItem(element: Dependency): vscode.TreeItem {
        return element;
    }

    getChildren(element?: Dependency): Thenable<Dependency[]> {
        if (!this.workspaceRoot) {
            vscode.window.showInformationMessage('No dependency in empty workspace');
            return Promise.resolve([]);
        }

        if (element) {
            return Promise.resolve(this.getDepsInPackageJson(path.join(this.workspaceRoot, 'node_modules', element.label, 'package.json')));
        } else {
            const packageJsonPath = path.join(this.workspaceRoot, 'package.json');
            if (this.pathExists(packageJsonPath)) {
                return Promise.resolve(this.getDepsInPackageJson(packageJsonPath));
            } else {
                vscode.window.showInformationMessage('Workspace has no package.json');
                return Promise.resolve([]);
            }
        }

    }

    /**
     * Given the path to package.json, read all its dependencies and devDependencies.
     */
    private getDepsInPackageJson(packageJsonPath: string): Dependency[] {
        if (this.pathExists(packageJsonPath)) {
            const toDep = (moduleName: string, version: string): Dependency => {
                if (this.pathExists(path.join(this.workspaceRoot, 'node_modules', moduleName))) {
                    return new Dependency(moduleName, version, vscode.TreeItemCollapsibleState.Collapsed);
                } else {
                    return new Dependency(moduleName, version, vscode.TreeItemCollapsibleState.None);
                }
            };

            const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));

            const deps = packageJson.dependencies
                ? Object.keys(packageJson.dependencies).map(dep => toDep(dep, packageJson.dependencies[dep]))
                : [];
            const devDeps = packageJson.devDependencies
                ? Object.keys(packageJson.devDependencies).map(dep => toDep(dep, packageJson.devDependencies[dep]))
                : [];
            return deps.concat(devDeps);
        } else {
            return [];
        }
    }

    private pathExists(p: string): boolean {
        try {
            fs.accessSync(p);
        } catch (err) {
            return false;
        }
        return true;
    }
}

class Dependency extends vscode.TreeItem {

    constructor(
        public readonly label: string,
        private version: string,
        public readonly collapsibleState: vscode.TreeItemCollapsibleState,
    ) {
        super(label, collapsibleState);
        this.tooltip = `${this.label}-${this.version}`;
        this.description = this.version;
    }

    iconPath = {
        light: path.join(__filename, '..', '..', 'resources', 'light', 'dependency.svg'),
        dark: path.join(__filename, '..', '..', 'resources', 'dark', 'dependency.svg')
    };

}

----------------------------------------

TITLE: Generating SSH Key Pair using ssh-keygen
DESCRIPTION: Command to generate a new SSH key pair using the Ed25519 algorithm for secure authentication with remote servers.

LANGUAGE: bash
CODE:
ssh-keygen -t ed25519

----------------------------------------

TITLE: Setting Nerd Font for Terminal in VS Code
DESCRIPTION: This code configures the Hack Nerd Font variant for use in the Visual Studio Code terminal using the terminal.integrated.fontFamily setting.

LANGUAGE: json
CODE:
"terminal.integrated.fontFamily": "'Hack NF'"

----------------------------------------

TITLE: Extended Docker Compose devcontainer.json
DESCRIPTION: A devcontainer.json configuration that uses multiple Docker Compose files.

LANGUAGE: json
CODE:
{
    "name": "[Optional] Your project name here",
    "dockerComposeFile": [
        "../docker-compose.yml",
        "docker-compose.extend.yml"
    ],
    "service": "your-service-name-here",
    "workspaceFolder": "/workspace",
    "shutdownAction": "stopCompose"
}

----------------------------------------

TITLE: Adding Message History to Chat Requests
DESCRIPTION: Enhances the chat handler to include previous messages for context in ongoing conversations.

LANGUAGE: typescript
CODE:
const previousMessages = context.history.filter(
    (h) => h instanceof vscode.ChatResponseTurn
);

previousMessages.forEach((m) => {
    let fullMessage = '';
    m.response.forEach((r) => {
        const mdPart = r as vscode.ChatResponseMarkdownPart;
        fullMessage += mdPart.value.value;
    });
    messages.push(vscode.LanguageModelChatMessage.Assistant(fullMessage));
});

----------------------------------------

TITLE: Creating Basic Java Program Structure
DESCRIPTION: Example showing how to create a Hello.java file in VS Code to begin Java development. This demonstrates the basic file creation process that triggers the Java Language Server.

LANGUAGE: java
CODE:
Hello.java

----------------------------------------

TITLE: Configuring Docker Debugging in launch.json
DESCRIPTION: JSON configuration for setting up Docker debugging in Visual Studio Code's launch.json file, specifying the URI format for the containerized ASP.NET Core application.

LANGUAGE: json
CODE:
"dockerServerReadyAction": {
    "uriFormat": "%s://localhost:%s/WeatherForecast"
}

----------------------------------------

TITLE: Setting WSL Default Distribution using wslconfig
DESCRIPTION: Commands to view and set the default WSL distribution using wslconfig.exe

LANGUAGE: bat
CODE:
wslconfig /setdefault Ubuntu
wslconfig /l

----------------------------------------

TITLE: Handling Completion Requests in Language Server
DESCRIPTION: This TypeScript code snippet demonstrates how the language server handles completion requests by determining the appropriate language mode and delegating to the corresponding completion handler.

LANGUAGE: typescript
CODE:
connection.onCompletion(async (textDocumentPosition, token) => {
  const document = documents.get(textDocumentPosition.textDocument.uri);
  if (!document) {
    return null;
  }

  const mode = languageModes.getModeAtPosition(document, textDocumentPosition.position);
  if (!mode || !mode.doComplete) {
    return CompletionList.create();
  }
  const doComplete = mode.doComplete!;

  return doComplete(document, textDocumentPosition.position);
});

----------------------------------------

TITLE: Copying C++ Function Declaration or Definition
DESCRIPTION: Shows how to copy a function declaration or definition to the clipboard using the 'Copy Declaration/Definition' code action in Visual Studio Code's C/C++ extension.

LANGUAGE: text
CODE:
Copy a declaration or definition

----------------------------------------

TITLE: Configuring MSYS2 Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet demonstrates how to set up a terminal profile for MSYS2's bash shell in VS Code settings for Windows. It configures the path, arguments, and environment variables to preserve the working directory.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "bash (MSYS2)": {
      "path": "C:\\msys64\\usr\\bin\\bash.exe",
      "args": [
        "--login",
        "-i"
      ],
      "env": { "CHERE_INVOKING": "1" }
    }
  }
}

----------------------------------------

TITLE: Anonymous to Nested Class Conversion in Java
DESCRIPTION: Example demonstrating conversion of an anonymous inner class to a member class

LANGUAGE: java
CODE:
public class Clazz {
  public Interface method() {
    final boolean isValid = true;
    return new Interface() {
      public boolean isValid() {
        return isValid;
      }
    };
  }
}

LANGUAGE: java
CODE:
public class Clazz {
  private final class MyInterface extends Interface {
    private final boolean isValid;

    private MyInterface(boolean isValid) {
      this.isValid = isValid;
    }

    public boolean isValid() {
      return isValid;
    }
  }

  public Interface method() {
    final boolean isValid = true;
    return new MyInterface(isValid);
  }
}

----------------------------------------

TITLE: Configuring Workspace Launch Settings in VS Code
DESCRIPTION: JSON configuration for defining compound launch configurations in a multi-root workspace.

LANGUAGE: json
CODE:
"compounds": [{
      "name": "Launch Server & Client",
      "configurations": [
        "Launch Server",
        {
          "folder": "Web Client",
          "name": "Launch Client"
        },
        {
          "folder": "Desktop Client",
          "name": "Launch Client"
        }
      ]
  }]

----------------------------------------

TITLE: Variable Assignment Example in Java
DESCRIPTION: Example showing how to assign an expression to a variable using refactoring

LANGUAGE: java
CODE:
Arrays.asList("apple", "lemon", "banana");

LANGUAGE: java
CODE:
List<String> fruits = Arrays.asList("apple", "lemon", "banana");

----------------------------------------

TITLE: Creating Custom Instructions for GitHub Copilot in Markdown
DESCRIPTION: This snippet demonstrates how to create custom instructions for GitHub Copilot in a Markdown file. It includes project context, indentation preferences, coding style guidelines, and testing framework information.

LANGUAGE: markdown
CODE:
# Custom instructions for Copilot

## Project context
This project is a web application built with React and Node.js.

## Indentation
We use tabs, not spaces.

## Coding style
Use camelCase for variable names and prefer arrow functions over traditional function expressions.

## Testing
We use Jest for unit testing and Playwright for end-to-end testing.

----------------------------------------

TITLE: Creating JavaScript For Loop Snippet in VS Code
DESCRIPTION: Example of a JSON configuration for a JavaScript 'for' loop snippet with placeholders and multiple prefix triggers.

LANGUAGE: json
CODE:
{
    "For Loop": {
        "prefix": [
          "for",
          "for-const"
        ],
        "body": [
          "for (const ${2:element} of ${1:array}) {",
          "\t$0",
          "}"
        ],
        "description": "A for loop."
    }
}

----------------------------------------

TITLE: Defining Jupyter Code Cells in Python
DESCRIPTION: Demonstrates how to create Jupyter-like code cells in Python using #%% delimiters. Each cell can be executed independently in the Python Interactive window.

LANGUAGE: python
CODE:
# %%
msg = "Hello World"
print(msg)

# %%
msg = "Hello again"
print(msg)

----------------------------------------

TITLE: Loading Local Resources in Webview
DESCRIPTION: Demonstrates how to load local resources like images and scripts in a webview securely

LANGUAGE: typescript
CODE:
const onDiskPath = vscode.Uri.joinPath(context.extensionUri, 'media', 'cat.gif');
const catGifSrc = panel.webview.asWebviewUri(onDiskPath);

panel.webview.html = getWebviewContent(catGifSrc);

----------------------------------------

TITLE: Setting Custom When Clause Contexts in TypeScript for VS Code Extension
DESCRIPTION: This snippet shows how to set custom when clause contexts in a VS Code extension using TypeScript. These contexts can be used to control the enablement of commands, menus, or views.

LANGUAGE: typescript
CODE:
vscode.commands.executeCommand('setContext', 'myExtension.showMyCommand', true);

vscode.commands.executeCommand('setContext', 'myExtension.numberOfCoolOpenThings', 2);

----------------------------------------

TITLE: Configuring Pipe Transport for Docker in launch.json (JSON)
DESCRIPTION: This snippet demonstrates how to configure pipe transport for debugging a process in a Docker container using the launch.json file.

LANGUAGE: json
CODE:
"pipeTransport": {
    "pipeCwd": "${workspaceFolder}",
    "pipeProgram": "docker",
    "pipeArgs": [
        "exec",
        "-i",
        "hello_gdb",
        "sh",
        "-c"
    ],
    "debuggerPath": "/usr/bin/gdb"
}

----------------------------------------

TITLE: ESLint Configuration for React
DESCRIPTION: Basic ESLint configuration file for React projects including recommended rules and React plugin

LANGUAGE: javascript
CODE:
module.exports = {
    "env": {
        "browser": true,
        "es2020": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended"
    ],
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": [
        "react"
    ],
    "rules": {
    }
};

----------------------------------------

TITLE: Configuring Docker Run Task for Debugging
DESCRIPTION: JSON configuration for the docker-run debug task in Visual Studio Code's tasks.json file, specifying port mapping for the containerized ASP.NET Core application.

LANGUAGE: json
CODE:
{
   "type": "docker-run",
   "label": "docker-run: debug",
   "dependsOn": [
       "docker-build: debug"
   ],
   "dockerRun": {
       "ports": [
           { "hostPort": 5000, "containerPort": 5000 }
       ]
   },
   "netCore": {
       "appProject": "${workspaceFolder}/netcorerest.csproj",
       "enableDebugging": true
   }
}

----------------------------------------

TITLE: Configuring Auto-applied Extract Constant Shortcut
DESCRIPTION: JSON configuration for creating a keyboard shortcut that automatically applies Extract Constant refactoring when only one option is available.

LANGUAGE: json
CODE:
{
  "key": "shift+ctrl+e",
  "command": "editor.action.codeAction",
  "args": {
    "kind": "refactor.extract.constant",
    "preferred": true,
    "apply": "ifSingle"
  }
}

----------------------------------------

TITLE: Attaching to Browser with Launch Configuration in VS Code
DESCRIPTION: This JSON snippet shows a launch configuration for attaching to a running browser instance in debug mode. It specifies the browser type, request type, debug name, and the port to connect to for remote debugging.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "msedge",
      "request": "attach",
      "name": "Attach to browser",
      "port": 9222
    }
  ]
}

----------------------------------------

TITLE: Implementing Formatter Using VS Code API in TypeScript
DESCRIPTION: Demonstrates the correct way to implement a formatter using the VS Code extension API, contrasting it with an incorrect implementation as a separate command. The proper method uses registerDocumentFormattingEditProvider.

LANGUAGE: typescript
CODE:
// 👎 formatter implemented as separate command
vscode.commands.registerCommand('extension.format-foo', () => {
    const {activeTextEditor} = vscode.window;

    if (activeTextEditor && activeTextEditor.document.languageId === 'foo-lang') {
        const {document} = activeTextEditor;
        const firstLine = document.lineAt(0);

        if (firstLine.text !== '42') {
            const edit = new vscode.WorkspaceEdit();
            edit.insert(document.uri, firstLine.range.start, '42\n');

            return vscode.workspace.applyEdit(edit)
        }
    }
});


// 👍 formatter implemented using API
vscode.languages.registerDocumentFormattingEditProvider('foo-lang', {
    provideDocumentFormattingEdits(document: vscode.TextDocument): vscode.TextEdit[] {

        const firstLine = document.lineAt(0);
        if (firstLine.text !== '42') {
            return [vscode.TextEdit.insert(firstLine.range.start, '42\n')];
        }
    }
});

----------------------------------------

TITLE: Configuring Per-Window Zoom Levels in VS Code
DESCRIPTION: This snippet shows how to configure zoom levels per window in VS Code using the 'window.zoomPerWindow' setting. When enabled, zoom commands only apply to the active window.

LANGUAGE: json
CODE:
{
  "window.zoomPerWindow": true
}

----------------------------------------

TITLE: Babel Build Task Configuration
DESCRIPTION: VS Code tasks.json configuration for running Babel transpilation.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "watch",
            "command": "${workspaceFolder}/node_modules/.bin/babel",
            "args": ["src", "--out-dir", "lib", "-w", "--source-maps"],
            "type": "shell",
            "group": { "kind": "build", "isDefault": true },
            "isBackground": true
        }
    ]
}

----------------------------------------

TITLE: Debugging Configuration for Tests
DESCRIPTION: This JSON snippet shows how to configure debugging settings for tests in the launch.json file. It disables the justMyCode setting for debugging tests.

LANGUAGE: json
CODE:
{
    "name": "Python: Debug Tests",
    "type": "debugpy",
    "request": "launch",
    "program": "${file}",
    "purpose": ["debug-test"],
    "console": "integratedTerminal",
    "justMyCode": false
}

----------------------------------------

TITLE: Configuring a Problem Matcher in tasks.json
DESCRIPTION: This snippet shows how to configure a problem matcher for a GCC compiler output in the tasks.json file.

LANGUAGE: JSON
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "command": "gcc",
            "args": ["-Wall", "helloWorld.c", "-o", "helloWorld"],
            "problemMatcher": {
                "owner": "cpp",
                "fileLocation": ["relative", "${workspaceFolder}"],
                "pattern": {
                    "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
                    "file": 1,
                    "line": 2,
                    "column": 3,
                    "severity": 4,
                    "message": 5
                }
            }
        }
    ]
}

----------------------------------------

TITLE: Mapping JSON Schema in Workspace
DESCRIPTION: This snippet demonstrates how to map a schema located in the workspace to JSON files with a specific extension. It uses a relative path to reference the schema file.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "**/*.foo.json"
        ],
        "url": "./myschema.json"
    }
]

----------------------------------------

TITLE: JSConfig with Include Pattern
DESCRIPTION: JSConfig configuration demonstrating how to explicitly include specific source directories.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6"
    },
    "include": [
        "src/**/*"
    ]
}

----------------------------------------

TITLE: Creating Virtual Environment in Terminal
DESCRIPTION: Commands to create a virtual environment using venv module on different operating systems. For Debian-based systems, python3-venv package may need to be installed first.

LANGUAGE: bash
CODE:
# macOS/Linux
# You may need to run `sudo apt-get install python3-venv` first on Debian-based OSs
python3 -m venv .venv

# Windows
# You can also use `py -3 -m venv .venv`
python -m venv .venv

----------------------------------------

TITLE: Development Environment Variables Configuration
DESCRIPTION: Example development environment configuration file showing API endpoint and database connection settings.

LANGUAGE: bash
CODE:
# dev.env - development configuration

# API endpoint
MYPROJECT_APIENDPOINT=https://my.domain.com/api/dev/

# Variables for the database
MYPROJECT_DBURL=https://my.domain.com/db/dev
MYPROJECT_DBUSER=devadmin
MYPROJECT_DBPASSWORD=!dfka**213=

----------------------------------------

TITLE: Implementing Delete Item Route with Redis in Python
DESCRIPTION: Defines a route to delete a specific item from the grocery list by its ID, removing data from Redis.

LANGUAGE: python
CODE:
@app.delete("/items/{item_id}")
def delete_item(item_id: int) -> dict[str, str]:
    if not redis_client.hexists(f"item_id:{item_id}", "item_id"):
        raise HTTPException(status_code=404, detail="Item not found.")
    else:
        item_name: str | None = redis_client.hget(f"item_id:{item_id}", "item_name")
        redis_client.hdel("item_name_to_id", f"{item_name}")
        redis_client.delete(f"item_id:{item_id}")
        return {"result": "Item deleted."}

----------------------------------------

TITLE: Configuring General Linter Settings
DESCRIPTION: Common configuration settings supported by most Python linting extensions in VS Code, including arguments, import strategy, path, interpreter, and notification controls.

LANGUAGE: json
CODE:
{
  "args": [],
  "importStrategy": "useBundled",
  "path": "",
  "interpreter": [],
  "showNotifications": "off"
}

----------------------------------------

TITLE: Message Passing Between Extension and Webview
DESCRIPTION: Shows bidirectional message passing between extension and webview content

LANGUAGE: typescript
CODE:
// Send message to webview
panel.webview.postMessage({ command: 'refactor' });

// Receive message from webview
panel.webview.onDidReceiveMessage(
  message => {
    switch (message.command) {
      case 'alert':
        vscode.window.showErrorMessage(message.text);
        return;
    }
  },
  undefined,
  context.subscriptions
);

----------------------------------------

TITLE: Defining a Custom Task in tasks.json
DESCRIPTION: This snippet demonstrates how to define a custom task in the tasks.json file, including command, arguments, and problem matcher configuration.

LANGUAGE: JSON
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run tests",
            "type": "shell",
            "command": "./scripts/test.sh",
            "windows": {
                "command": ".\\scripts\\test.cmd"
            },
            "group": "test",
            "presentation": {
                "reveal": "always",
                "panel": "new"
            }
        }
    ]
}

----------------------------------------

TITLE: Setting Indentation-Based Folding for HTML in VS Code
DESCRIPTION: This JSON snippet shows how to configure VS Code to use indentation-based folding strategy for HTML files instead of the default tag-based folding.

LANGUAGE: json
CODE:
"[html]": {
    "editor.foldingStrategy": "indentation"
},

----------------------------------------

TITLE: Creating a Node.js Express Project
DESCRIPTION: Commands to create a new Express.js project using npx and install dependencies.

LANGUAGE: bash
CODE:
npx express-generator
npm install

----------------------------------------

TITLE: Creating Hello World C++ Program
DESCRIPTION: A simple C++ program that demonstrates basic functionality including using vectors and strings to print a greeting message.

LANGUAGE: cpp
CODE:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
    vector<string> msg {"Hello", "C++", "World", "from", "VS Code", "and the C++ extension!"};

    for (const string& word : msg)
    {
        cout << word << " ";
    }
    cout << endl;
}

----------------------------------------

TITLE: Configuring VS Code debugger for Angular
DESCRIPTION: JSON configuration for setting up the VS Code debugger to work with an Angular application using the Edge browser.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "msedge",
            "request": "launch",
            "name": "Launch Edge against localhost",
            "url": "http://localhost:4200",
            "webRoot": "${workspaceFolder}"
        }
    ]
}

----------------------------------------

TITLE: Using Webpack Alias in JavaScript Import Statement
DESCRIPTION: This example shows how to use a webpack alias defined in jsconfig.json within a JavaScript import statement.

LANGUAGE: javascript
CODE:
import Something from 'ClientApp/foo'

----------------------------------------

TITLE: Creating a Remote Tunnel in VS Code
DESCRIPTION: This command initiates a remote tunnel in VS Code, allowing secure connection to a remote machine. It's part of the Remote - Tunnels extension functionality.

LANGUAGE: bash
CODE:
code tunnel

----------------------------------------

TITLE: Sample tasks.json Configuration for Clang on macOS
DESCRIPTION: A tasks.json file that configures VS Code to build C++ programs using Clang on macOS.

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: clang++ build active file",
            "command": "/usr/bin/clang++",
            "args": [
                "-fcolor-diagnostics",
                "-fansi-escape-codes",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}/${fileBasenameNoExtension}"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}

----------------------------------------

TITLE: Debug Configuration for TypeScript in VS Code
DESCRIPTION: Launch configuration for debugging TypeScript files in VS Code, including build tasks and output file mapping.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}/helloworld.ts",
            "preLaunchTask": "tsc: build - tsconfig.json",
            "outFiles": [
                "${workspaceFolder}/out/**/*.js"
            ]
        }
    ]
}

----------------------------------------

TITLE: Excluding Files and Folders from Search in VS Code Settings
DESCRIPTION: JSON configuration to exclude specific files and folders from search results.

LANGUAGE: json
CODE:
"search.exclude": {
    "someFolder/": true,
    "somefile": true
}

----------------------------------------

TITLE: Configuring Angular Settings in Profile
DESCRIPTION: JSON configuration for Angular-specific settings in a profile, including formatting options and icon theme.

LANGUAGE: json
CODE:
{
    "editor.formatOnPaste": true,
    "git.autofetch": true,
    "[markdown]":  {
        "editor.wordWrap": "on"
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "workbench.iconTheme": "material-icon-theme"
}

----------------------------------------

TITLE: Verifying Clang Installation on macOS
DESCRIPTION: Command to check the installed version of Clang on macOS using the Terminal.

LANGUAGE: bash
CODE:
clang --version

----------------------------------------

TITLE: Creating C++ Function Declaration and Definition
DESCRIPTION: Demonstrates how to create a function declaration or definition using the C/C++ extension in Visual Studio Code. The extension can generate these items automatically, maintaining code organization and file structure.

LANGUAGE: text
CODE:
Create a definition and a declaration across two files
Create a definition and a declaration in the same file

----------------------------------------

TITLE: Defining JSON Schema in Settings
DESCRIPTION: This example shows how to define a JSON schema directly in the VS Code settings. It creates a schema for files named .myconfig with a simple structure.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "/.myconfig"
        ],
        "schema": {
            "type": "object",
            "properties": {
                "name" : {
                    "type": "string",
                    "description": "The name of the entry"
                }
            }
        }
    }
]

----------------------------------------

TITLE: Customizing Docker Compose Up Command in VS Code
DESCRIPTION: Example of customizing the Docker Compose Up command in VS Code settings to use multiple Compose files.

LANGUAGE: json
CODE:
"docker.commands.composeUp": [
    {
        "label": "override",
        "template": "docker-compose -f docker-compose.yml ${configurationFile}  up -d --build"
    }
]

----------------------------------------

TITLE: Custom Keyboard Shortcuts for Refactorings (JSON)
DESCRIPTION: Example of configuring a keyboard shortcut for a specific refactoring action using the editor.action.codeAction command.

LANGUAGE: JSON
CODE:
{
  "key": "ctrl+shift+r ctrl+e",
  "command": "editor.action.codeAction",
  "args": {
    "kind": "refactor.extract.function"
  }
}

----------------------------------------

TITLE: Complete Language Configuration Example in JSON
DESCRIPTION: A complete language configuration example showing all available options including comments, brackets, autoClosing pairs, folding markers, and indentation rules.

LANGUAGE: json
CODE:
{
  "comments": {
    "lineComment": "//",
    "blockComment": ["/*", "*/"]
  },
  "brackets": [["{", "}"], ["[", "]"], ["(", ")"]],
  "autoClosingPairs": [
    { "open": "{", "close": "}" },
    { "open": "[", "close": "]" },
    { "open": "(", "close": ")" },
    { "open": "'", "close": "'", "notIn": ["string", "comment"] },
    { "open": "\"", "close": "\"", "notIn": ["string"] },
    { "open": "`", "close": "`", "notIn": ["string", "comment"] },
    { "open": "/**", "close": " */", "notIn": ["string"] }
  ],
  "autoCloseBefore": ";:.,=}])>` \n\t",
  "surroundingPairs": [
    ["{", "}"],
    ["[", "]"],
    ["(", ")"],
    ["'", "'"],
    ["\"", "\""],
    ["`", "`"]
  ],
  "folding": {
    "markers": {
      "start": "^\\s*//\\s*#?region\\b",
      "end": "^\\s*//\\s*#?endregion\\b"
    }
  },
  "wordPattern": "(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)",
  "indentationRules": {
    "increaseIndentPattern": "^((?!\\/\\/).)*(\\{[^}\"'`]*|\\([^)\"'`]*|\\[[^\\]\"'`]*)$",
    "decreaseIndentPattern": "^((?!.*?\\/\\*).*\\*/)?\\s*[\\)\\}\\]].*$"
  }
}

----------------------------------------

TITLE: Configuring Symbol Search Paths for Visual Studio Debugger
DESCRIPTION: Specifies additional directories for Visual Studio debugger symbol file lookup using symbolSearchPath property.

LANGUAGE: json
CODE:
    "symbolSearchPath": "C:\\path\\to\\symbols;C:\\another\\path\\to\\symbols"

----------------------------------------

TITLE: Running .NET Application
DESCRIPTION: Command to build and run a .NET application using the .NET CLI.

LANGUAGE: bat
CODE:
dotnet run

----------------------------------------

TITLE: Configuring Python Module Entry Point in Docker Container
DESCRIPTION: JSON configuration for setting up a Docker container entry point when running a Python module. This snippet shows how to configure the docker-run task in tasks.json.

LANGUAGE: json
CODE:
{
  "tasks": [
    {
      "type": "docker-run",
      "label": "docker-run: debug",
      "dependsOn": [
        "docker-build"
      ],
      "python": {
        "module": "myapp"
      }
    }
  ]
}

----------------------------------------

TITLE: Creating Hello World Project Structure
DESCRIPTION: Terminal commands to create and open a new TypeScript project directory in VS Code.

LANGUAGE: bash
CODE:
mkdir HelloWorld
cd HelloWorld
code .

----------------------------------------

TITLE: Debug Configuration for GCC in launch.json
DESCRIPTION: JSON configuration for launch.json to debug C++ programs compiled with GCC in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "C/C++: g++.exe build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "C:\\msys64\\ucrt64\\bin\\gdb.exe",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                {
                    "description": "Set Disassembly Flavor to Intel",
                    "text": "-gdb-set disassembly-flavor intel",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: g++.exe build active file"
        }
    ],
    "version": "2.0.0"
}

----------------------------------------

TITLE: Excluding Files and Folders in VS Code Settings
DESCRIPTION: JSON configuration to exclude specific files and folders from the editor window.

LANGUAGE: json
CODE:
"files.exclude": {
    "somefolder/": true,
    "somefile": true
}

----------------------------------------

TITLE: Configuring Remote Jupyter Server Parameters
DESCRIPTION: Configuration parameters required when starting a remote Jupyter server to allow external access and listen on all IPs

LANGUAGE: python
CODE:
--NotebookApp.allow_origin='*'
--NotebookApp.ip='0.0.0.0'

----------------------------------------

TITLE: Creating a Continuous Test Run Profile in Visual Studio Code Extension
DESCRIPTION: This TypeScript snippet demonstrates how to create a test run profile that supports continuous test runs, allowing tests to be rerun when changes occur.

LANGUAGE: typescript
CODE:
const profile = controller.createRunProfile('Run', TestRunProfileKind.Run, runHandler);
profile.supportsContinuousRun = true;

LANGUAGE: typescript
CODE:
const runHandler = (request: TestRunRequest, token: CancellationToken) => {
   if (request.continuous) {
       return watchForFileChangesThenRunTests(request, token);
   }
}

----------------------------------------

TITLE: Configuring Webpack Aliases in jsconfig.json for JavaScript Projects
DESCRIPTION: This snippet demonstrates how to configure webpack aliases in jsconfig.json to enable IntelliSense support for custom module resolution paths.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "ClientApp/*": ["./ClientApp/*"]
    }
  }
}

----------------------------------------

TITLE: Configuring Debug Settings in launch.json
DESCRIPTION: JSON configuration for debug settings in Visual Studio Code, specifying how to debug the C++ program using GDB.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++ build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}/${fileBasenameNoExtension}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "/usr/bin/gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: g++ build active file",
        }
    ]
}

----------------------------------------

TITLE: Specifying Java Formatter Profile in VS Code
DESCRIPTION: JSON configuration to specify a particular profile name when the formatter XML file contains multiple profiles. This setting is used in conjunction with the formatter URL setting.

LANGUAGE: json
CODE:
"java.format.settings.profile": "GoogleStyle",

----------------------------------------

TITLE: Using 'service' Command in devcontainer.json
DESCRIPTION: This example shows how to use the 'service' command in the 'postStartCommand' property of devcontainer.json. The 'service' command will use either systemctl or /etc/init.d scripts based on what is installed.

LANGUAGE: json
CODE:
"postStartCommand": "service ssh start"

----------------------------------------

TITLE: Creating New C# Console Application
DESCRIPTION: Command to initialize a new C# console application project using the .NET CLI.

LANGUAGE: bat
CODE:
dotnet new console

----------------------------------------

TITLE: Multi-root Workspace Configuration
DESCRIPTION: JSON configuration for a multi-root workspace that defines multiple folders to be included in the workspace.

LANGUAGE: json
CODE:
{
    "folders": [
        {
            "path": "my-folder-a"
        },
        {
            "path": "my-folder-b"
        }
    ]
}

----------------------------------------

TITLE: Initializing ASP.NET Core Web API Project
DESCRIPTION: Command to create a new ASP.NET Core Web API project without HTTPS support using the .NET CLI.

LANGUAGE: bash
CODE:
dotnet new webapi --no-https

----------------------------------------

TITLE: Extracting C++ Code to a New Method
DESCRIPTION: Illustrates the process of extracting a block of C++ code into a separate method using the 'Extract to Function' feature in Visual Studio Code's C/C++ extension.

LANGUAGE: text
CODE:
Extract Method and create declaration

----------------------------------------

TITLE: Launch Settings Profile Configuration
DESCRIPTION: Example of launchSettings.json configuration for different environment profiles in ASP.NET Core.

LANGUAGE: json
CODE:
{
  "profiles": {
    "ProfileNameGoesHere": {
      "commandName": "Project",
      "environmentVariables": {
        "myVariableName":"theValueGoesHere"
      }
    }
  }
}

----------------------------------------

TITLE: Generating Maven Web App Project with Archetype
DESCRIPTION: Command to create a new Maven web application project using the maven-archetype-webapp archetype. This sets up the basic structure for a Java web app.

LANGUAGE: cmd
CODE:
mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4

----------------------------------------

TITLE: Registering TreeDataProvider in Extension Activation
DESCRIPTION: Shows how to register the TreeDataProvider in the extension's activation function using vscode.window.registerTreeDataProvider or vscode.window.createTreeView.

LANGUAGE: typescript
CODE:
const rootPath = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))
		? vscode.workspace.workspaceFolders[0].uri.fsPath : undefined;
vscode.window.registerTreeDataProvider('nodeDependencies', new NodeDependenciesProvider(rootPath));

LANGUAGE: typescript
CODE:
vscode.window.createTreeView('nodeDependencies', { treeDataProvider: new NodeDependenciesProvider(rootPath)});

----------------------------------------

TITLE: Configuring Remote Root in Launch Configuration
DESCRIPTION: This JSON snippet shows how to configure the remoteRoot property in the launch configuration to specify a custom location for the application source files in the Docker container.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Docker Node.js Launch",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "docker-run: debug",
            "platform": "node",
            "node": {
                "remoteRoot": "/usr/my-custom-location"
            }
        }
    ]
}

----------------------------------------

TITLE: Associating File Extensions with Languages in VS Code Settings (JSON)
DESCRIPTION: This snippet demonstrates how to associate custom file extensions with a specific language identifier in VS Code settings. In this example, files with the .myphp extension are associated with the PHP language.

LANGUAGE: json
CODE:
{
    "files.associations": {
        "*.myphp": "php"
    }
}

----------------------------------------

TITLE: Dockerfile Hot Reload Configuration
DESCRIPTION: Dockerfile modification to enable hot reloading by commenting out the ADD command.

LANGUAGE: docker
CODE:
#ADD . /app

----------------------------------------

TITLE: Creating a Hover Provider with Command URI in TypeScript
DESCRIPTION: This snippet demonstrates how to create a hover provider that displays a command URI link in the hover text for JavaScript files in a VS Code extension.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  vscode.languages.registerHoverProvider(
    'javascript',
    new class implements vscode.HoverProvider {
      provideHover(
        _document: vscode.TextDocument,
        _position: vscode.Position,
        _token: vscode.CancellationToken
      ): vscode.ProviderResult<vscode.Hover> {
        const commentCommandUri = vscode.Uri.parse(`command:editor.action.addCommentLine`);
        const contents = new vscode.MarkdownString(`[Add comment](${commentCommandUri})`);

        // To enable command URIs in Markdown content, you must set the `isTrusted` flag.
        // When creating trusted Markdown string, make sure to properly sanitize all the
        // input content so that only expected command URIs can be executed
        contents.isTrusted = true;

        return new vscode.Hover(contents);
      }
    }()
  );
}

----------------------------------------

TITLE: Tasks Configuration for GCC Compilation
DESCRIPTION: JSON configuration for tasks.json to compile C++ files using GCC in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "type": "cppbuild",
            "label": "C/C++: g++.exe build active file",
            "command": "C:\\msys64\\ucrt64\\bin\\g++.exe",
            "args": [
                "-fdiagnostics-color=always",
                "-g",
                "${file}",
                "-o",
                "${fileDirname}\\${fileBasenameNoExtension}.exe"
            ],
            "options": {
                "cwd": "${fileDirname}"
            },
            "problemMatcher": [
                "$gcc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "detail": "Task generated by Debugger."
        }
    ],
    "version": "2.0.0"
}

----------------------------------------

TITLE: Launching Data Wrangler from Jupyter Notebook
DESCRIPTION: There are multiple ways to launch Data Wrangler from a Jupyter Notebook, including using the Variables panel, cell output buttons, or the notebook toolbar. This code snippet shows how to display a dataframe, which will then show the 'Open in Data Wrangler' button.

LANGUAGE: python
CODE:
df.head()

----------------------------------------

TITLE: Throwing a Fallback Error in Visual Studio Code Notebook Renderer
DESCRIPTION: This TypeScript snippet shows how to throw a special error in a notebook renderer to trigger fallback rendering of other data stored in the notebook output item.

LANGUAGE: typescript
CODE:
throw new class extends Error {
    override name = 'vscode.fallbackToNextRenderer';
}();

----------------------------------------

TITLE: Basic vsce Usage Commands
DESCRIPTION: Basic commands for packaging and publishing extensions using vsce CLI tool.

LANGUAGE: bash
CODE:
$ cd myExtension
$ vsce package
# myExtension.vsix generated
$ vsce publish
# <publisher id>.myExtension published to VS Code Marketplace

----------------------------------------

TITLE: Configuring Browser Launch for Django in Docker
DESCRIPTION: Launch configuration for automatically opening the browser to a specific page when the Django application starts in a Docker container.

LANGUAGE: json
CODE:
{
  "configurations": [
    {
      "name": "Docker: Python - Django",
      "type": "docker",
      "request": "launch",
      "preLaunchTask": "docker-run: debug",
      "python": {
        "pathMappings": [
          {
            "localRoot": "${workspaceFolder}",
            "remoteRoot": "/app"
          }
        ],
        "projectType": "django"
      },
      "dockerServerReadyAction": {
        "action": "openExternally",
        "pattern": "Starting development server at (https?://\\S+|[0-9]+)",
        "uriFormat": "%s://localhost:%s/about.html"
      }
    }
  ]
}

----------------------------------------

TITLE: Disabling Command Override in devcontainer.json
DESCRIPTION: This snippet shows how to disable the default behavior of overriding the entrypoint and command when referencing a Dockerfile in devcontainer.json. This is necessary when adding startup commands to the Docker image.

LANGUAGE: json
CODE:
"overrideCommand": false

----------------------------------------

TITLE: Configuring Automation Profile for Tasks/Debug in VS Code (macOS)
DESCRIPTION: This snippet demonstrates how to configure a separate terminal profile for automation tasks and debugging in VS Code settings for macOS. It sets the default profile to 'fish' and uses a POSIX-compatible shell for automation.

LANGUAGE: jsonc
CODE:
{
  "terminal.integrated.defaultProfile.osx": "fish",
  // Use a fully POSIX-compatible shell and avoid running a complex ~/.config/fish/config.fish
  // for tasks and debug
  "terminal.integrated.automationProfile.osx": {
    "path": "/bin/sh"
  }
}

----------------------------------------

TITLE: Installing vsce CLI Tool
DESCRIPTION: Command to install the vsce (Visual Studio Code Extensions) command-line tool globally using npm.

LANGUAGE: bash
CODE:
npm install -g @vscode/vsce

----------------------------------------

TITLE: Connecting to SQL Database in Polyglot Notebook
DESCRIPTION: This snippet demonstrates how to connect to a SQL database using Polyglot Notebooks. It shows the syntax for establishing a connection and executing a query.

LANGUAGE: SQL
CODE:
#!connect mssql --kernel-name mydatabase
"Server=myserver.database.windows.net;Database=mydb;Authentication=Active Directory Default"

#!sql mydatabase
SELECT TOP (10) *
FROM SalesLT.Customer

----------------------------------------

TITLE: Configuring pytest for Parallel Testing
DESCRIPTION: This code snippet shows how to configure pytest to run tests in parallel using the pytest-xdist package. It demonstrates the content to be added to a pytest.ini file.

LANGUAGE: ini
CODE:
[pytest]
addopts=-n4

----------------------------------------

TITLE: Adding JUnit 4 Dependency in Maven POM
DESCRIPTION: Adds the JUnit 4 dependency to a Maven project's pom.xml file. This configuration includes the JUnit library with test scope.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>junit</groupId>
  <artifactId>junit</artifactId>
  <version>(YOUR_JUNIT_VERSION)</version>
  <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Installing Data Wrangler Dependencies with pip
DESCRIPTION: If Data Wrangler is unable to automatically install dependencies, you can manually install them using pip. This command installs pandas, which is required for Data Wrangler to generate Python and Pandas code.

LANGUAGE: bash
CODE:
pip install pandas

----------------------------------------

TITLE: Implementing Refresh Functionality for Tree View
DESCRIPTION: Adds a refresh method to the TreeDataProvider and registers a command to trigger the refresh action.

LANGUAGE: typescript
CODE:
private _onDidChangeTreeData: vscode.EventEmitter<Dependency | undefined | null | void> = new vscode.EventEmitter<Dependency | undefined | null | void>();
readonly onDidChangeTreeData: vscode.Event<Dependency | undefined | null | void> = this._onDidChangeTreeData.event;

refresh(): void {
  this._onDidChangeTreeData.fire();
}

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';
import { NodeDependenciesProvider } from './nodeDependencies';

export function activate(context: vscode.ExtensionContext) {
    const rootPath = (vscode.workspace.workspaceFolders && (vscode.workspace.workspaceFolders.length > 0))
		? vscode.workspace.workspaceFolders[0].uri.fsPath : undefined;
    const nodeDependenciesProvider = new NodeDependenciesProvider(rootPath);
    vscode.window.registerTreeDataProvider('nodeDependencies', nodeDependenciesProvider);
    vscode.commands.registerCommand('nodeDependencies.refreshEntry', () => nodeDependenciesProvider.refresh());
}

----------------------------------------

TITLE: Creating unittest Test Class
DESCRIPTION: This code snippet demonstrates how to create a test class using the unittest framework. It includes two test methods, one of which is intentionally set to fail for demonstration purposes.

LANGUAGE: python
CODE:
import inc_dec    # The code to test
import unittest   # The test framework

class Test_TestIncrementDecrement(unittest.TestCase):
    def test_increment(self):
        self.assertEqual(inc_dec.increment(3), 4)

    # This test is designed to fail for demonstration purposes.
    def test_decrement(self):
        self.assertEqual(inc_dec.decrement(3), 4)

if __name__ == '__main__':
    unittest.main()

----------------------------------------

TITLE: Starting the Angular development server
DESCRIPTION: Commands to navigate to the project directory and start the Angular development server, which compiles and serves the application.

LANGUAGE: bash
CODE:
cd my-app
ng serve

----------------------------------------

TITLE: Configuring Cmder Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet demonstrates how to set up a terminal profile for Cmder in VS Code settings for Windows. It configures the path, arguments, and sets it as the default profile.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "cmder": {
      "path": "C:\\WINDOWS\\System32\\cmd.exe",
      "args": ["/K", "C:\\cmder\\vendor\\bin\\vscode_init.cmd"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "cmder"
}

----------------------------------------

TITLE: Implementing Balanced Binary Tree for Piece Table in TypeScript
DESCRIPTION: This snippet demonstrates the implementation of a balanced binary tree (red-black tree) to boost line lookup performance in the piece table.

LANGUAGE: typescript
CODE:
class PieceTable {
    buffers: string[];
    rootNode: Node;
}

class Node {
    bufferIndex: number;
    start: number;
    length: number;
    lineStarts: number[];

    left_subtree_length: number;
    left_subtree_lfcnt: number;
    left: Node;
    right: Node;
    parent: Node;
}

----------------------------------------

TITLE: Configuring Bracket Pair Colorization in VS Code
DESCRIPTION: JSON configuration for customizing bracket pair colorization colors in VS Code's workbench color settings. Defines custom colors for different bracket levels.

LANGUAGE: json
CODE:
"workbench.colorCustomizations": {
    "editorBracketHighlight.foreground1": "#FFD700",
    "editorBracketHighlight.foreground2": "#DA70D6",
    "editorBracketHighlight.foreground3": "#179fff"
}

----------------------------------------

TITLE: Configuring Format on Save in VS Code Settings
DESCRIPTION: JSON configuration to enable automatic formatting of files on save.

LANGUAGE: json
CODE:
"editor.formatOnSave": true

----------------------------------------

TITLE: Setting VS Code as Default Editor with Debian Alternatives System
DESCRIPTION: Commands to set Visual Studio Code as the default editor using the Debian alternatives system.

LANGUAGE: bash
CODE:
sudo update-alternatives --set editor /usr/bin/code

LANGUAGE: bash
CODE:
sudo update-alternatives --install /usr/bin/editor editor $(which code) 10

----------------------------------------

TITLE: Registering Issue Data Provider in VS Code Extension
DESCRIPTION: This code snippet demonstrates how to register an Issue Data Provider in a VS Code extension. It allows extensions to provide custom data and templates for the Issue Reporter.

LANGUAGE: TypeScript
CODE:
export interface IssueDataProvider {
  // Provide the data to be used in the issue reporter.
  provideIssueData(token: CancellationToken): ProviderResult<string>;

  // Provide the template to be used in the description of issue reporter.
  provideIssueTemplate(token: CancellationToken): ProviderResult<string>;
}

export namespace env {
  export function registerIssueDataProvider(provider: IssueDataProvider): Disposable;
}

----------------------------------------

TITLE: Sideloading Office Add-in for Testing
DESCRIPTION: npm command to build and sideload an Office Add-in project for testing purposes. This is typically used after setting up the project with Yo Office.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Adding TestNG Dependency in Maven POM
DESCRIPTION: Adds the TestNG dependency to a Maven project's pom.xml file. This configuration includes the TestNG library with test scope.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.testng</groupId>
  <artifactId>testng</artifactId>
  <version>(YOUR_TESTNG_VERSION)</version>
  <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Debug Configuration for C++ in VS Code
DESCRIPTION: Launch configuration for debugging C++ programs using GDB debugger with pretty printing enabled.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "C/C++: g++ build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}/${fileBasenameNoExtension}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "/usr/bin/gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: g++ build active file"
        }
    ]
}

----------------------------------------

TITLE: File Organization Example - Basic Trust Groups
DESCRIPTION: Example folder structure showing how to organize repositories into trusted and evaluation groups

LANGUAGE: text
CODE:
├── TrustedRepos - Clone trusted repositories under this parent folder
└── ForEvaluation - Clone experimental or unfamiliar repositories under this parent folder

----------------------------------------

TITLE: Uninstalling VS Code using apt-get on Linux
DESCRIPTION: This command uses the apt-get package manager to remove the Visual Studio Code package on Debian-based Linux distributions. It requires sudo privileges to execute.

LANGUAGE: bash
CODE:
sudo apt-get remove code

----------------------------------------

TITLE: Configuring Browser Launch for ASP.NET Core
DESCRIPTION: JSON configuration for automatically launching a web browser when ASP.NET Core starts using serverReadyAction pattern matching.

LANGUAGE: json
CODE:
{
    "serverReadyAction": {
        "action": "openExternally",
        "pattern": "\\bNow listening on:\\s+(https?://\\S+)"
    }
}

----------------------------------------

TITLE: Registering Hover Provider in TypeScript for VS Code Extension
DESCRIPTION: This code snippet demonstrates how to register a hover provider in a Visual Studio Code extension using TypeScript. It's part of the TypeScript language features extension.

LANGUAGE: typescript
CODE:
vscode.languages.registerHoverProvider

----------------------------------------

TITLE: Excluding VS Code Terminal Files from Antivirus Scanning
DESCRIPTION: These file paths should be excluded from antivirus scanning to prevent interference with the VS Code terminal's winpty/conpty components. This can resolve 'native exception' errors.

LANGUAGE: plaintext
CODE:
{install_path}\resources\app\node_modules.asar.unpacked\node-pty\build\Release\winpty.dll
{install_path}\resources\app\node_modules.asar.unpacked\node-pty\build\Release\winpty-agent.exe
{install_path}\resources\app\node_modules.asar.unpacked\node-pty\build\Release\conpty.node
{install_path}\resources\app\node_modules.asar.unpacked\node-pty\build\Release\conpty_console_list.node

----------------------------------------

TITLE: Opening the Angular project in VS Code
DESCRIPTION: Commands to navigate to the project directory and open it in Visual Studio Code.

LANGUAGE: bash
CODE:
cd my-app
code .

----------------------------------------

TITLE: Implementing NotebookSerializer in TypeScript
DESCRIPTION: Implements a NotebookSerializer class to handle serialization and deserialization of notebook data

LANGUAGE: typescript
CODE:
class SampleSerializer implements vscode.NotebookSerializer {
    async deserializeNotebook(content: Uint8Array, _token: vscode.CancellationToken): Promise<vscode.NotebookData> {
        var contents = new TextDecoder().decode(content);

        let raw: RawNotebookCell[];
        try {
            raw = (<RawNotebook>JSON.parse(contents)).cells;
        } catch {
            raw = [];
        }

        const cells = raw.map(item => new vscode.NotebookCellData(
            item.cell_type === 'code' ? vscode.NotebookCellKind.Code : vscode.NotebookCellKind.Markup,
            item.source.join('\n'),
            item.cell_type === 'code' ? 'python' : 'markdown'
        ));

        return new vscode.NotebookData(cells);
    }

    async serializeNotebook(data: vscode.NotebookData, _token: vscode.CancellationToken): Promise<Uint8Array> {
        let contents: RawNotebookCell[] = [];

        for (const cell of data.cells) {
            contents.push({
                cell_type: cell.kind === vscode.NotebookCellKind.Code ? 'code' : 'markdown',
                source: cell.value.split(/\r?\n/g)
            });
        }

        return new TextEncoder().encode(JSON.stringify(contents));
    }
}

----------------------------------------

TITLE: Opening Multiple Files in VS Code via CLI
DESCRIPTION: This command demonstrates how to open multiple files in VS Code using the command-line interface. It opens three files: index.html, style.css, and a readme.md file in a documentation folder.

LANGUAGE: bash
CODE:
code index.html style.css documentation\readme.md

----------------------------------------

TITLE: Configuring Visual C++ Debugger Logging in launch.json
DESCRIPTION: This JSON snippet demonstrates the default logging configuration for the Visual C++ debugger in the launch.json file. It includes an option for engine logging.

LANGUAGE: json
CODE:
"logging": {
    "engineLogging": false
}

----------------------------------------

TITLE: Setting Default Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet demonstrates how to set a custom profile as the default terminal profile for Windows in VS Code settings. It defines a PowerShell profile with specific arguments and sets it as the default.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "my-pwsh": {
      "source": "PowerShell",
      "args": ["-NoProfile"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "my-pwsh"
}

----------------------------------------

TITLE: Defining the Read File Tool for Copilot Agent Mode in JSON
DESCRIPTION: This JSON snippet defines the 'read_file' tool used by Copilot agent mode. It specifies the tool's name, description, and required parameters for reading file contents within a specified line range.

LANGUAGE: json
CODE:
{
    "name": "read_file",
    "description": "Read the contents of a file. You must specify the line range you're interested in, and if the file is larger, you will be given an outline of the rest of the file. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content.",
    "parameters": {
        "type": "object",
        "properties": {
            "filePath": {
                "description": "The absolute paths of the files to read.",
                "type": "string"
            },
            "startLineNumberBaseZero": {
                "type": "number",
                "description": "The line number to start reading from, 0-based."
            },
            "endLineNumberBaseZero": {
                "type": "number",
                "description": "The inclusive line number to end reading at, 0-based."
            }
        },
        "required": [
            "filePath",
            "startLineNumberBaseZero",
            "endLineNumberBaseZero"
        ]
    }
}

----------------------------------------

TITLE: Registering a Command in TypeScript for VS Code Extension
DESCRIPTION: This snippet demonstrates how to register a new command 'myExtension.sayHello' in a VS Code extension using TypeScript. The command can be executed programmatically or through the VS Code UI.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  const command = 'myExtension.sayHello';

  const commandHandler = (name: string = 'world') => {
    console.log(`Hello ${name}!!!`);
  };

  context.subscriptions.push(vscode.commands.registerCommand(command, commandHandler));
}

----------------------------------------

TITLE: Installing VS Code Repository on openSUSE and SLE
DESCRIPTION: Script for installing the Visual Studio Code yum repository and signing key on openSUSE and SLE-based systems.

LANGUAGE: bash
CODE:
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\nautorefresh=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" |sudo tee /etc/zypp/repos.d/vscode.repo > /dev/null

----------------------------------------

TITLE: Defining Custom Colors in package.json
DESCRIPTION: Contributes new themable colors for use in editor decorators and status bar. Users can customize these colors in settings and themes.

LANGUAGE: json
CODE:
{
  "contributes": {
    "colors": [
      {
        "id": "superstatus.error",
        "description": "Color for error message in the status bar.",
        "defaults": {
          "dark": "errorForeground",
          "light": "errorForeground",
          "highContrast": "#010203",
          "highContrastLight": "#feedc3"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Chromium Network Stack Documentation Quote
DESCRIPTION: Quote from Chromium's documentation explaining how the network stack uses system network settings for proxy, SSL/TLS, certificate revocation, and key stores.

LANGUAGE: text
CODE:
"The Chromium network stack uses the system network settings so that users and administrators can control the network settings of all applications easily. The network settings include:

 - proxy settings
 - SSL/TLS settings
 - certificate revocation check settings
 - certificate and private key stores"

----------------------------------------

TITLE: Disabling Format on Save for Go Files
DESCRIPTION: JSON configuration to disable automatic formatting of Go files when saving.

LANGUAGE: json
CODE:
"[go]": {
        "editor.formatOnSave": false
}

----------------------------------------

TITLE: Defining Code Style Instructions in Markdown
DESCRIPTION: This snippet shows the contents of a code-style.md file that can be referenced in the custom instructions settings. It provides additional styling guidelines for React components and comments.

LANGUAGE: markdown
CODE:
Always use React functional components.

Always add comments.

----------------------------------------

TITLE: Launching Browser with Launch Configuration in VS Code
DESCRIPTION: This JSON snippet shows a launch configuration for debugging a web application in Microsoft Edge. It specifies the browser type, request type, debug name, and the URL to open when launching the debugger.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "msedge",
      "request": "launch",
      "name": "Launch my cool app",
      "url": "http://localhost:8000"
    }
  ]
}

----------------------------------------

TITLE: Adding VS Code to PATH in Bash on macOS
DESCRIPTION: This snippet adds Visual Studio Code to the PATH environment variable in the Bash shell configuration file. This allows users to launch VS Code from the terminal using the 'code' command.

LANGUAGE: bash
CODE:
cat << EOF >> ~/.bash_profile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF

----------------------------------------

TITLE: Specifying JSON Schema in File
DESCRIPTION: This snippet demonstrates how to specify a JSON schema directly within a JSON file using the $schema property. It uses the CoffeeLint schema as an example.

LANGUAGE: json
CODE:
{
   "$schema": "https://json.schemastore.org/coffeelint",
   "line_endings": "unix"
}

----------------------------------------

TITLE: Launching VS Code from WSL Terminal
DESCRIPTION: Commands demonstrating how to launch Visual Studio Code from WSL terminal, including both direct and inline usage.

LANGUAGE: bash
CODE:
code .

LANGUAGE: bash
CODE:
wsl code .

----------------------------------------

TITLE: Template String Example in JavaScript
DESCRIPTION: Example showing ES6 template string usage where single quote autoclosing is disabled within template literals.

LANGUAGE: javascript
CODE:
// ES6's Template String
`ES6's Template String`;

----------------------------------------

TITLE: Running Python File in Terminal (Windows)
DESCRIPTION: Command to run a Python file named 'hello.py' in the terminal on Windows.

LANGUAGE: shell
CODE:
python hello.py

----------------------------------------

TITLE: Implementing Message Logging View in Django
DESCRIPTION: Defines a view function to handle both GET and POST requests for message logging, including form validation and saving.

LANGUAGE: python
CODE:
def log_message(request):
    form = LogMessageForm(request.POST or None)

    if request.method == "POST":
        if form.is_valid():
            message = form.save(commit=False)
            message.log_date = datetime.now()
            message.save()
            return redirect("home")
    else:
        return render(request, "hello/log_message.html", {"form": form})

----------------------------------------

TITLE: C/C++ Project Configuration Settings
DESCRIPTION: Configuration settings for C/C++ extension including compiler path, standards and IntelliSense settings.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Linux",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "intelliSenseMode": "clang-x64"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Escaping Icon Syntax
DESCRIPTION: Shows how to escape the icon syntax to display literal $(eye) text

LANGUAGE: typescript
CODE:
\$(eye)

----------------------------------------

TITLE: Configuring Custom Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet demonstrates how to create a custom terminal profile for Windows in VS Code settings. It sets up a profile named 'Custom Init' using PowerShell with specific arguments and sets it as the default profile.

LANGUAGE: jsonc
CODE:
{
  "terminal.integrated.profiles.windows": {
    "Custom Init": {
      "path": "pwsh.exe",
      "args": [
         "-noexit",
         "-file",
         "${env:APPDATA}\\PowerShell\\custom-init.ps1"
      ]
    }
  },
  "terminal.integrated.defaultProfile.windows": "Custom Init"
}

----------------------------------------

TITLE: Sample JavaScript Function with Copilot
DESCRIPTION: Example JavaScript function header to demonstrate GitHub Copilot suggestions

LANGUAGE: javascript
CODE:
function calculateDaysBetweenDates(begin, end) {

----------------------------------------

TITLE: Configuring Multiple Terminal Profiles in VS Code (Windows and Linux)
DESCRIPTION: This snippet shows how to configure multiple terminal profiles for different platforms (Windows and Linux) in VS Code settings. It includes a PowerShell profile with arguments for Windows and a Zsh login profile for Linux.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "PowerShell -NoProfile": {
      "source": "PowerShell",
      "args": ["-NoProfile"]
    }
  },
  "terminal.integrated.profiles.linux": {
    "zsh (login)": {
      "path": "zsh",
      "args": ["-l"]
    }
  }
}

----------------------------------------

TITLE: Setting Environment Variables with Docker Compose
DESCRIPTION: Configuration for setting environment variables in Docker Compose services using the environment property in docker-compose.yml.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    environment:
      - YOUR_ENV_VAR_NAME=your-value-goes-here
      - ANOTHER_VAR=another-value

----------------------------------------

TITLE: Installing VS Code via Snap
DESCRIPTION: Command for installing Visual Studio Code as a Snap package from the Snap Store.

LANGUAGE: bash
CODE:
sudo snap install --classic code # or code-insiders

----------------------------------------

TITLE: Defining Custom Editor in package.json
DESCRIPTION: Contributes a custom editor to VS Code, specifying its view type, display name, and which file types it supports.

LANGUAGE: json
CODE:
{
  "contributes": {
    "customEditors": [
      {
        "viewType": "catEdit.catScratch",
        "displayName": "Cat Scratch",
        "selector": [
          {
            "filenamePattern": "*.cscratch"
          }
        ],
        "priority": "default"
      }
    ]
  }
}

----------------------------------------

TITLE: Enabling Format on Save for Python Files
DESCRIPTION: JSON configuration to automatically format Python files when saving in VS Code.

LANGUAGE: json
CODE:
  "[python]": {
    "editor.formatOnSave": true
  }

----------------------------------------

TITLE: Animating Icons
DESCRIPTION: Demonstrates adding spin animation to supported icons

LANGUAGE: typescript
CODE:
$(sync~spin)

----------------------------------------

TITLE: File System Scheme Activation
DESCRIPTION: Configures extension activation for specific file system schemes.

LANGUAGE: json
CODE:
"activationEvents": [
    "onFileSystem:sftp"
]

----------------------------------------

TITLE: Building Java Web App with Maven
DESCRIPTION: Maven command to clean the project, compile the source code, run tests, and package the application into a WAR or JAR file.

LANGUAGE: bash
CODE:
mvn clean package

----------------------------------------

TITLE: Creating a GitHub Codespace in VS Code
DESCRIPTION: This code snippet explains how to create a new GitHub Codespace for a repository using Visual Studio Code and the GitHub Codespaces extension.

LANGUAGE: markdown
CODE:
1. Install the [GitHub Codespaces](https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces) extension in VS Code and sign in with your GitHub account.

1. Run the **Codespaces: Create New Codespace** command.

1. Select the repository and branch you want to open.

----------------------------------------

TITLE: Configuring Clang-Format Style in VS Code Settings (JSON)
DESCRIPTION: Default clang-format style settings for Visual Studio-like formatting in VS Code. These settings control indentation, brace placement, and other formatting rules.

LANGUAGE: json
CODE:
{
  "UseTab": "(VS Code current setting)",
  "IndentWidth": "(VS Code current setting)",
  "BreakBeforeBraces": "Allman",
  "AllowShortIfStatementsOnASingleLine": false,
  "IndentCaseLabels": false,
  "ColumnLimit": 0
}

----------------------------------------

TITLE: Sample Sass/SCSS Stylesheet
DESCRIPTION: A simple Sass/SCSS stylesheet demonstrating nested selectors and variable usage.

LANGUAGE: scss
CODE:
$padding: 6px;

nav {
  ul {
    margin: 0;
    padding: $padding;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: $padding 12px;
    text-decoration: none;
  }
}

----------------------------------------

TITLE: Example Hover Content in TypeScript
DESCRIPTION: A concrete example of hover content for a function in TypeScript, represented as a TypeScript object.

LANGUAGE: typescript
CODE:
{
  contents: [
    { language: "typescript", value: "function bar(): void" }
  ]
}

----------------------------------------

TITLE: Configuring Pipe Transport for SSH in launch.json (JSON)
DESCRIPTION: This snippet demonstrates how to set up pipe transport for SSH communication in the launch.json file. It includes settings for the pipe program, arguments, and debugger path.

LANGUAGE: json
CODE:
"pipeTransport": {
    "pipeCwd": "/usr/bin",
    "pipeProgram": "/usr/bin/ssh",
    "pipeArgs": [
        "-pw",
        "<password>",
        "user@10.10.10.10"
    ],
    "debuggerPath": "/usr/bin/gdb"
}

----------------------------------------

TITLE: Configuring C/C++ Properties in c_cpp_properties.json
DESCRIPTION: JSON configuration for C/C++ properties in Visual Studio Code, specifying compiler path, include paths, and C++ standard.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Linux",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "compilerPath": "/usr/bin/gcc",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "intelliSenseMode": "clang-x64"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Configuring Build Tasks in VS Code
DESCRIPTION: Task configuration for building C++ files using g++ compiler with debug symbols enabled.

LANGUAGE: json
CODE:
{
"version": "2.0.0",
"tasks": [
    {
        "type": "shell",
        "label": "C/C++: g++ build active file",
        "command": "/usr/bin/g++",
        "args": [
            "-g",
            "${file}",
            "-o",
            "${fileDirname}/${fileBasenameNoExtension}"
        ],
        "options": {
            "cwd": "/usr/bin"
        },
        "problemMatcher": [
            "$gcc"
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "detail": "Task generated by Debugger."
    }
]
}

----------------------------------------

TITLE: Injection Grammar for TODO Highlighting
DESCRIPTION: A simple injection grammar that highlights 'TODO' keywords in JavaScript comments.

LANGUAGE: json
CODE:
{
  "scopeName": "todo-comment.injection",
  "injectionSelector": "L:comment.line.double-slash",
  "patterns": [
    {
      "include": "#todo-keyword"
    }
  ],
  "repository": {
    "todo-keyword": {
      "match": "TODO",
      "name": "keyword.todo"
    }
  }
}

----------------------------------------

TITLE: Configuring PHP Executable Path in VS Code Settings (Linux and macOS)
DESCRIPTION: JSON configuration to set the PHP executable path in Visual Studio Code settings for Linux and macOS. Two common paths are provided as examples.

LANGUAGE: json
CODE:
{
    "php.validate.executablePath": "/usr/bin/php"
}

or

{
    "php.validate.executablePath": "/usr/local/bin/php"
}

----------------------------------------

TITLE: Installing Shell Integration for Zsh
DESCRIPTION: Code snippet to enable VS Code shell integration in zsh by adding it to the .zshrc file.

LANGUAGE: sh
CODE:
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path zsh)"

----------------------------------------

TITLE: Configuring System Include Paths
DESCRIPTION: Setting to specify system include paths separately from folder include paths. This overrides the system include path detection from the compiler.

LANGUAGE: json
CODE:
C_Cpp.default.systemIncludePath : string[]

----------------------------------------

TITLE: Adding Language Support in VS Code Extension (JSON)
DESCRIPTION: This snippet illustrates how to add language support for Groovy in a VS Code extension. It includes configurations for grammars and snippets using the language identifier.

LANGUAGE: json
CODE:
{
    "grammars": [{
        "language": "groovy",
        "scopeName": "source.groovy",
        "path": "./syntaxes/Groovy.tmLanguage.json"
    }],
    "snippets": [{
        "language": "groovy",
        "path": "./snippets/groovy.json"
    }]
}

----------------------------------------

TITLE: Defining Custom Icons in package.json
DESCRIPTION: Contributes new icons by ID that can be used by the extension or other extensions in various UI elements.

LANGUAGE: json
CODE:
{
  "contributes": {
    "icons": {
      "distro-ubuntu": {
        "description": "Ubuntu icon",
        "default": {
          "fontPath": "./distroicons.woff",
          "fontCharacter": "\\E001"
        }
      },
      "distro-fedora": {
        "description": "Ubuntu icon",
        "default": {
          "fontPath": "./distroicons.woff",
          "fontCharacter": "\\E002"
        }
      }
    }
  }
}

----------------------------------------

TITLE: Configuring Language-Specific Issue Completion Triggers in VS Code
DESCRIPTION: This JSON configuration example shows how to disable the '#' character as an issue completion trigger for specific programming languages in Visual Studio Code. In this case, it's disabled for Python files.

LANGUAGE: jsonc
CODE:
// Languages that the '#' character should not be used to trigger issue completion suggestions.
"githubIssues.ignoreCompletionTrigger": [
  "python"
]

----------------------------------------

TITLE: Basic TextMate Grammar for 'abc' Language
DESCRIPTION: A simple TextMate grammar in JSON format for a fictional 'abc' language, highlighting letters a, b, c as keywords and handling nested parentheses.

LANGUAGE: json
CODE:
{
  "scopeName": "source.abc",
  "patterns": [{ "include": "#expression" }],
  "repository": {
    "expression": {
      "patterns": [{ "include": "#letter" }, { "include": "#paren-expression" }]
    },
    "letter": {
      "match": "a|b|c",
      "name": "keyword.letter"
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "expression.group",
      "patterns": [{ "include": "#expression" }]
    }
  }
}

----------------------------------------

TITLE: Workspace Content-based Activation
DESCRIPTION: Activates extension when workspace contains files matching a specific pattern.

LANGUAGE: json
CODE:
"activationEvents": [
    "workspaceContains:**/.editorconfig"
]

----------------------------------------

TITLE: Creating a Simple Java AWT Application
DESCRIPTION: This code snippet demonstrates how to create a basic Java AWT application with a button. It includes a main window (Frame) with a button and a window closing event handler.

LANGUAGE: java
CODE:
import java.awt.*;
import java.awt.event.*;

public class AwtExample extends Frame {
  public AwtExample() {
    Button btn = new Button("Button");
    btn.setBounds(50, 50, 50, 50);
    add(btn);
    setSize(150, 150);
    setTitle("This is my First AWT example");
    setLayout(new FlowLayout());
    setVisible(true);
    addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent we) {
            dispose();
        }
    });
  }

  public static void main(String args[]){
    new AwtExample();
  }
}

----------------------------------------

TITLE: Configuring Emmet for JavaScript in VS Code Settings
DESCRIPTION: This JSON snippet demonstrates how to associate Emmet HTML abbreviations with JavaScript files in VS Code, allowing the use of HTML Emmet snippets in JavaScript.

LANGUAGE: json
CODE:
{
    "emmet.includeLanguages": {
        "javascript": "html"
     }
}

----------------------------------------

TITLE: Configuring Maven for Java 22 Preview Features
DESCRIPTION: XML configuration for Maven's pom.xml file to enable Java 22 preview features. This snippet modifies the maven-compiler-plugin settings to use Java 22 and enable preview language features.

LANGUAGE: XML
CODE:
<build>
  <pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <release>22</release>
          <compilerArgs>--enable-preview</compilerArgs>
        </configuration>
      </plugin>
    </plugins>
  </pluginManagement>
</build>

----------------------------------------

TITLE: Enabling Emmet in Additional Languages in VS Code
DESCRIPTION: JSON configuration to enable Emmet abbreviation expansion in additional file types in Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.includeLanguages": {
  "javascript": "javascriptreact",
  "razor": "html",
  "plaintext": "pug"
}

----------------------------------------

TITLE: Type Acquisition Configuration in JSConfig
DESCRIPTION: JSConfig configuration showing how to explicitly include type definitions for specific packages.

LANGUAGE: json
CODE:
{
    "typeAcquisition": {
        "include": [
            "jquery"
        ]
    }
}

----------------------------------------

TITLE: Installing Angular CLI with npm
DESCRIPTION: Command to install the Angular CLI globally using npm. This is a prerequisite for creating and managing Angular projects.

LANGUAGE: bash
CODE:
npm install -g @angular/cli

----------------------------------------

TITLE: Configuring Build Tasks in tasks.json
DESCRIPTION: JSON configuration for build tasks in Visual Studio Code, specifying how to compile the C++ program using g++.

LANGUAGE: json
CODE:
{
"version": "2.0.0",
"tasks": [
    {
        "type": "shell",
        "label": "C/C++: g++ build active file",
        "command": "/usr/bin/g++",
        "args": [
            "-g",
            "${file}",
            "-o",
            "${fileDirname}/${fileBasenameNoExtension}"
        ],
        "options": {
            "cwd": "/usr/bin"
        },
        "problemMatcher": [
            "$gcc"
        ],
        "group": {
            "kind": "build",
            "isDefault": true
        },
        "detail": "Task generated by Debugger."
    }
]
}

----------------------------------------

TITLE: Disabling Default CSS Validation (JSON)
DESCRIPTION: JSON configuration to disable the default CSS validation in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "css.validate": false
}

----------------------------------------

TITLE: Registering Definition Provider in TypeScript for VS Code Extension
DESCRIPTION: This code snippet illustrates how to register a definition provider in a Visual Studio Code extension using TypeScript. It enables the 'Jump to Definition' feature.

LANGUAGE: typescript
CODE:
vscode.languages.registerDefinitionProvider

----------------------------------------

TITLE: Configuring PHP Executable Path in VS Code Settings (Windows)
DESCRIPTION: JSON configuration to set the PHP executable path in Visual Studio Code settings for Windows. This is used to enable PHP linting functionality.

LANGUAGE: json
CODE:
{
    "php.validate.executablePath": "c:/php/php.exe"
}

----------------------------------------

TITLE: Installing Shell Integration for PowerShell
DESCRIPTION: PowerShell configuration snippet to enable VS Code shell integration by modifying the PowerShell profile.

LANGUAGE: powershell
CODE:
if ($env:TERM_PROGRAM -eq "vscode") { . "$(code --locate-shell-integration-path pwsh)" }

----------------------------------------

TITLE: Defining Keyboard Shortcut for a Task in VS Code
DESCRIPTION: JSON configuration to bind a keyboard shortcut to a specific task in VS Code.

LANGUAGE: json
CODE:
{
    "key": "ctrl+h",
    "command": "workbench.action.tasks.runTask",
    "args": "Run tests"
}

----------------------------------------

TITLE: Configuring Language-based Activation in VS Code Extensions
DESCRIPTION: Demonstrates how to configure extension activation for specific programming languages using the onLanguage event in package.json.

LANGUAGE: json
CODE:
"activationEvents": [
    "onLanguage:python"
]

----------------------------------------

TITLE: Rendering Whitespace in VS Code Settings
DESCRIPTION: JSON configuration to make all whitespace characters visible in the editor.

LANGUAGE: json
CODE:
"editor.renderWhitespace": "all"

----------------------------------------

TITLE: Configuring File Icon Theme in package.json
DESCRIPTION: Contributes a file icon theme to VS Code, specifying its ID, label, and path to the icon definition file.

LANGUAGE: json
CODE:
{
  "contributes": {
    "iconThemes": [
      {
        "id": "my-cool-file-icons",
        "label": "Cool File Icons",
        "path": "./fileicons/cool-file-icon-theme.json"
      }
    ]
  }
}

----------------------------------------

TITLE: Disabling Color Decorators in CSS Settings (JSON)
DESCRIPTION: JSON configuration to disable color previews in CSS files within Visual Studio Code.

LANGUAGE: json
CODE:
{
    "editor.colorDecorators": false
}

----------------------------------------

TITLE: Configuring Custom Editor Contribution in package.json
DESCRIPTION: Example package.json contribution point configuration for registering a custom editor that handles .cscratch files

LANGUAGE: json
CODE:
{
  "contributes": {
    "customEditors": [
      {
        "viewType": "catEdit.catScratch",
        "displayName": "Cat Scratch",
        "selector": [
          {
            "filenamePattern": "*.cscratch"
          }
        ],
        "priority": "default"
      }
    ]
  }
}

----------------------------------------

TITLE: Importing debugpy for Remote Debugging
DESCRIPTION: Python code snippet to import debugpy and set up remote debugging connection.

LANGUAGE: python
CODE:
import debugpy

# Allow other computers to attach to debugpy at this IP address and port.
debugpy.listen(('1.2.3.4', 5678))

# Pause the program until a remote debugger is attached
debugpy.wait_for_client()

----------------------------------------

TITLE: Python Docker Run Task for Django
DESCRIPTION: Docker run task configuration specific for Django applications with debug settings.

LANGUAGE: json
CODE:
{
    "type": "docker-run",
    "label": "docker-run: debug",
    "dependsOn": [
      "docker-build"
    ],
    "python": {
      "args": [
        "runserver",
        "0.0.0.0:8000",
        "--nothreading",
        "--noreload"
      ],
      "file": "path_to/manage.py"
    }
}

----------------------------------------

TITLE: Using Markdown in JSON Schema Descriptions
DESCRIPTION: This snippet shows how to use Markdown formatting in JSON schema descriptions for richer hover information and autocompletion details.

LANGUAGE: json
CODE:
{
   "$schema": "http://json-schema.org/draft-07/schema#",
   "type": "object",
   "properties": {
       "name" : {
           "type": "string",
           "description": "The name of the entry",
           "markdownDescription": "The name of the entry. [See the documentation](https://example.com)"
       }
   }
}

----------------------------------------

TITLE: Configuring AI-assisted Code Actions in Pylance
DESCRIPTION: Example of how to enable AI-assisted code actions in the Pylance language server, specifically for implementing abstract class methods using GitHub Copilot suggestions.

LANGUAGE: json
CODE:
{
    "python.analysis.aiCodeActions": {
        "implementAbstractClasses": true
    }
}

----------------------------------------

TITLE: Configuring Third-Party Checkstyle Modules in VS Code
DESCRIPTION: JSON configuration to include third-party Checkstyle modules in Visual Studio Code. This example adds a JAR file containing additional checks to be used with Checkstyle.

LANGUAGE: json
CODE:
"java.checkstyle.modules": [ "${workspaceFolder}/src/main/resources/sevntu-checks-1.35.0.jar" ]

----------------------------------------

TITLE: Using the Native Window Handle API in VS Code
DESCRIPTION: Example of the proposed Native Window Handle API to retrieve the native window handle of the focused window in VS Code.

LANGUAGE: typescript
CODE:
declare module 'vscode' {

	export namespace window {
		/**
		 * Retrieves the native window handle of the current active window.
		 * This will be updated when the active window changes.
		 */
		export const nativeHandle: Uint8Array | undefined;
	}
}

----------------------------------------

TITLE: Configuring Symbol Search Paths for GDB/LLDB
DESCRIPTION: Specifies additional directories for debugger symbol file lookup using additionalSOLibSearchPath property.

LANGUAGE: json
CODE:
    "additionalSOLibSearchPath": "/path/to/symbols;/another/path/to/symbols"

----------------------------------------

TITLE: Configuring Non-Root User Access in Dockerfile
DESCRIPTION: Example Dockerfile configuration showing how to set up non-root user access by exposing a non-system port (>1023), creating a working directory, and configuring user permissions.

LANGUAGE: docker
CODE:
# 1024 or higher
EXPOSE 1024

# ... other directives such as installing requirements.txt file

# Creates /app in container if it does not already exist
# Ports code into /app
WORKDIR /app
ADD . /app

# Creates a non-root user and adds permission to access the /app folder
RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser

CMD ["gunicorn", "--bind", "0.0.0.0:1024", "pythonPath.to.wsgi"]

----------------------------------------

TITLE: Starting Local Web Server with Node.js
DESCRIPTION: Command to start a simple web server on port 3000 using the 'serve' package via npx.

LANGUAGE: bash
CODE:
npx serve

----------------------------------------

TITLE: Contributing View Container in package.json
DESCRIPTION: Defines a custom View Container contribution in the extension's package.json file, specifying the container's ID, title, and icon.

LANGUAGE: json
CODE:
"contributes": {
  "viewsContainers": {
    "activitybar": [
      {
        "id": "package-explorer",
        "title": "Package Explorer",
        "icon": "media/dep.svg"
      }
    ]
  }
}

----------------------------------------

TITLE: Mapping JSON Schema in User Settings
DESCRIPTION: This example shows how to map .babelrc files to the babelrc schema in the VS Code User Settings. It uses the json.schemas setting to define the mapping.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "/.babelrc"
        ],
        "url": "https://json.schemastore.org/babelrc"
    }
]

----------------------------------------

TITLE: Installing Shell Integration for Fish
DESCRIPTION: Configuration snippet for enabling VS Code shell integration in the fish shell by modifying the config.fish file.

LANGUAGE: sh
CODE:
string match -q "$TERM_PROGRAM" "vscode"
and . (code --locate-shell-integration-path fish)

----------------------------------------

TITLE: Disabling Minimum Contrast Ratio for VS Code Terminal
DESCRIPTION: JSON configuration to disable the minimum contrast ratio feature for the integrated terminal in Visual Studio Code, which can affect color accuracy.

LANGUAGE: json
CODE:
{
"terminal.integrated.minimumContrastRatio": 1
}

----------------------------------------

TITLE: Configuring Format on Paste in VS Code Settings
DESCRIPTION: JSON configuration to enable automatic formatting of pasted content.

LANGUAGE: json
CODE:
"editor.formatOnPaste": true

----------------------------------------

TITLE: Configuring JSON Schema Validation in package.json
DESCRIPTION: Contributes a validation schema for a specific type of JSON file, using either a local schema file or a remote schema URL.

LANGUAGE: json
CODE:
{
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": ".jshintrc",
        "url": "https://json.schemastore.org/jshintrc"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Gradle for Java 22 Preview Features
DESCRIPTION: Groovy configuration for Gradle to enable Java 22 preview features. This snippet sets the source compatibility to Java 22 and adds the --enable-preview flag to both compilation and test tasks.

LANGUAGE: Groovy
CODE:
sourceCompatibility = 22
tasks.withType(JavaCompile) {
    options.compilerArgs += '--enable-preview'
}
tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

----------------------------------------

TITLE: Sending Chat Participant Request with Tool Definitions in TypeScript
DESCRIPTION: This code shows how to send a chat participant request to the LLM, including tool definitions and response streaming options.

LANGUAGE: typescript
CODE:
const libResult = chatUtils.sendChatParticipantRequest(
    request,
    chatContext,
    {
        prompt: 'You are a cat! Answer as a cat.',
        responseStreamOptions: {
            stream,
            references: true,
            responseText: true
        },
        tools
    },
    token);

----------------------------------------

TITLE: Listing Files in Bash/Zsh
DESCRIPTION: Command to list files in the /usr/bin directory and output to a file using Bash or Zsh.

LANGUAGE: bash
CODE:
ls -l /usr/bin > Command.txt

----------------------------------------

TITLE: Configuring GitHub Issues Queries in VS Code Settings
DESCRIPTION: This JSON snippet demonstrates how to configure custom queries for GitHub Issues in Visual Studio Code settings. It uses the GitHub search syntax to define a query for issues assigned to the current user.

LANGUAGE: json
CODE:
"githubPullRequests.queries": [
    {
        "label": "Assigned To Me",
        "query": "is:open assignee:${user}"
    },

----------------------------------------

TITLE: Adding Keyboard Shortcut for 'Open in Integrated Terminal' in VS Code
DESCRIPTION: JSON configuration to add a custom keyboard shortcut (Ctrl+T) for the 'Open in Integrated Terminal' command in Visual Studio Code's Explorer.

LANGUAGE: json
CODE:
{
  "key": "ctrl+t",
  "command": "openInTerminal",
  "when": "filesExplorerFocus"
}

----------------------------------------

TITLE: Configuring Gofumpt Formatting
DESCRIPTION: JSON configuration to enable gofumpt-style formatting through gopls.

LANGUAGE: json
CODE:
"gopls": {
    "formatting.gofumpt": true
}

----------------------------------------

TITLE: Keyboard Shortcut Reference
DESCRIPTION: Shows the keyboard shortcut notation used in VS Code documentation for invoking the Command Palette

LANGUAGE: plaintext
CODE:
kbstyle(F1)

----------------------------------------

TITLE: Adding HTML Language Participant in Extension package.json
DESCRIPTION: Declare an HTML-like language as an HTML language participant to inherit HTML language server features.

LANGUAGE: JSON
CODE:
"contributes": {
  "htmlLanguageParticipants": [
     {
       "languageId": "handlebars"
      }
    ]
}

----------------------------------------

TITLE: Setting GitHub Issue Creation Triggers in VS Code
DESCRIPTION: This JSON configuration specifies the triggers for creating GitHub issues from code comments in Visual Studio Code. It defines an array of keywords that, when found in comments, will prompt the creation of a new issue.

LANGUAGE: jsonc
CODE:
"githubIssues.createIssueTriggers": [
  "TODO",
  "todo",
  "BUG",
  "FIXME",
  "ISSUE",
  "HACK"
]

----------------------------------------

TITLE: Configuring Restart for Node.js Debugging with Nodemon
DESCRIPTION: This launch configuration snippet shows how to set up automatic restarting of the debug session when using Nodemon for Node.js development.

LANGUAGE: json
CODE:
{
    "name": "Launch server.js via nodemon",
    "type": "node",
    "request": "launch",
    "runtimeExecutable": "nodemon",
    "program": "${workspaceFolder}/server.js",
    "console": "integratedTerminal",
    "internalConsoleOptions": "neverOpen"
}

----------------------------------------

TITLE: Configuring Split Terminal Working Directory in VS Code
DESCRIPTION: JSON configuration to set the working directory behavior for split terminals in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "terminal.integrated.splitCwd": "workspaceRoot"
}

----------------------------------------

TITLE: Implementing Git Stage Command in TypeScript
DESCRIPTION: Demonstrates the method signature for a Git stage command that supports multiple file selection.

LANGUAGE: typescript
CODE:
stage(...resourceStates: SourceControlResourceState[]): Promise<void>;

----------------------------------------

TITLE: Basic VS Code Glob Pattern Examples
DESCRIPTION: Examples of supported glob pattern syntax including path separators, wildcards, range matching, and grouping operators.

LANGUAGE: plaintext
CODE:
/ # to separate path segments
* # to match zero or more characters in a path segment
? # to match on one character in a path segment
** # to match any number of path segments, including none
{} # to group conditions (example: {**/*.html,**/*.txt})
[] # to declare a range of characters to match (example.[0-9])
[!...] # to negate a range of characters to match (example.[!0-9])

----------------------------------------

TITLE: Installing Shell Integration for Bash
DESCRIPTION: Code snippet to enable VS Code shell integration in bash by adding it to the .bashrc file. This allows the terminal to have enhanced capabilities like command detection and working directory tracking.

LANGUAGE: sh
CODE:
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path bash)"

----------------------------------------

TITLE: Configuring Resource Label Formatter in package.json
DESCRIPTION: Contributes resource label formatters that specify how to display URIs throughout the workbench.

LANGUAGE: json
CODE:
{
  "contributes": {
    "resourceLabelFormatters": [
      {
        "scheme": "remotehub",
        "formatting": {
          "label": "${path}",
          "separator": "/",
          "workspaceSuffix": "GitHub"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Searching for Commands in PowerShell
DESCRIPTION: PowerShell command to search for a specific string in text files.

LANGUAGE: powershell
CODE:
Get-ChildItem *.txt | Select-String "dir"

----------------------------------------

TITLE: Setting Auto Save in VS Code Settings
DESCRIPTION: JSON configuration to enable auto-saving of files after a delay.

LANGUAGE: json
CODE:
"files.autoSave": "afterDelay"

----------------------------------------

TITLE: Defining Keybindings in package.json
DESCRIPTION: Contributes a key binding rule to invoke a specific command when a key combination is pressed.

LANGUAGE: json
CODE:
{
  "contributes": {
    "keybindings": [
      {
        "command": "extension.sayHello",
        "key": "ctrl+f1",
        "mac": "cmd+f1",
        "when": "editorTextFocus"
      }
    ]
  }
}

----------------------------------------

TITLE: Creating Source Control Model in TypeScript
DESCRIPTION: Demonstrates how to create a Source Control model for Git, including resource groups and states.

LANGUAGE: typescript
CODE:
function createResourceUri(relativePath: string): vscode.Uri {
  const absolutePath = path.join(vscode.workspace.rootPath, relativePath);
  return vscode.Uri.file(absolutePath);
}

const gitSCM = vscode.scm.createSourceControl('git', 'Git');

const index = gitSCM.createResourceGroup('index', 'Index');
index.resourceStates = [
  { resourceUri: createResourceUri('README.md') },
  { resourceUri: createResourceUri('src/test/api.ts') }
];

const workingTree = gitSCM.createResourceGroup('workingTree', 'Changes');
workingTree.resourceStates = [
  { resourceUri: createResourceUri('.travis.yml') },
  { resourceUri: createResourceUri('README.md') }
];

----------------------------------------

TITLE: Configuring Custom Keyboard Shortcut for Terminal Select All in VS Code
DESCRIPTION: JSON configuration to add a custom keyboard shortcut (Ctrl+A) for the 'Terminal: Select All' command in Visual Studio Code on Windows and Linux.

LANGUAGE: json
CODE:
{
  "key": "ctrl+a",
  "command": "workbench.action.terminal.selectAll",
  "when": "terminalFocus && !isMac"
}

----------------------------------------

TITLE: Views Contribution Point Configuration
DESCRIPTION: Shows how to add new Views to existing View Containers using the contributes.views contribution point.

LANGUAGE: json
CODE:
{
  "contributes": {
    "views": {
      // contribution point implementation
    }
  }
}

----------------------------------------

TITLE: Configuring Gunicorn for Django in Dockerfile
DESCRIPTION: Shows the command used in a Dockerfile to configure Gunicorn as the web server for a Django application.

LANGUAGE: Dockerfile
CODE:
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "{workspace_folder_name}.wsgi"]

----------------------------------------

TITLE: Opening Git Clone Repository Dialog in VS Code
DESCRIPTION: This code snippet shows how to open the Git Clone Repository dialog in Visual Studio Code using the Command Palette.

LANGUAGE: markdown
CODE:
To clone a repository, run the **Git: Clone** command in the Command Palette (`kb(workbench.action.showCommands)`), or select the **Clone Repository** button in the **Source Control** view.

----------------------------------------

TITLE: Redefining macOS Terminal Clear Screen Shortcut
DESCRIPTION: Configuration to restore the Cmd+K clear screen functionality with higher priority than extension shortcuts.

LANGUAGE: json
CODE:
{
    "key": "cmd+k",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
}

----------------------------------------

TITLE: VS Code Extension Management Commands
DESCRIPTION: Common keyboard shortcuts and commands used for managing VS Code extensions

LANGUAGE: markdown
CODE:
kb(workbench.view.extensions) - Open Extensions view
kb(workbench.action.openSettings) - Open Settings editor

----------------------------------------

TITLE: Creating New F# Console Application
DESCRIPTION: Command to initialize a new F# console application project using the .NET CLI with language specification.

LANGUAGE: bat
CODE:
dotnet new console -lang "F#"

----------------------------------------

TITLE: Creating a Pull Request in VS Code
DESCRIPTION: This code snippet explains how to create a GitHub pull request using the GitHub Pull Requests and Issues extension in Visual Studio Code.

LANGUAGE: markdown
CODE:
To create a PR, make sure you are on a separate branch from the main branch, and push your code changes to the remote repository. In the **Source Control** view, select the **Create Pull Request** button. This opens the PR creation form, where you can enter a title and description for the PR, and choose which branch to merge the changes into. Select **Create** to create the PR.

----------------------------------------

TITLE: Hello World C++ Program
DESCRIPTION: A simple C++ program that prints 'Hello World' using a vector of strings and a range-based for loop.

LANGUAGE: cpp
CODE:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
    vector<string> msg {"Hello", "C++", "World", "from", "VS Code", "and the C++ extension!"};

    for (const string& word : msg)
    {
        cout << word << " ";
    }
    cout << endl;
}

----------------------------------------

TITLE: Configuring TestNG in Gradle Build File
DESCRIPTION: Adds TestNG dependency to a Gradle project's build.gradle file. This configuration applies the Java plugin and includes TestNG as a test implementation dependency.

LANGUAGE: groovy
CODE:
plugins {
    java
}

dependencies {
    testImplementation('org.testng:testng:(YOUR_TESTNG_VERSION)')
}

----------------------------------------

TITLE: Disabling VS Code Auto-Updates in Settings JSON
DESCRIPTION: JSON configuration to disable automatic updates for Visual Studio Code by setting the update mode to none.

LANGUAGE: json
CODE:
    "update.mode": "none"

----------------------------------------

TITLE: Dry Run Cache Configuration in Azure Pipelines
DESCRIPTION: YAML configuration showing how to implement dry-run cache checking to optimize build resubmissions. This configuration checks for cache existence without performing actual restoration.

LANGUAGE: yaml
CODE:
- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: commit
    targetfolder: output
    vstsFeed: "$(ArtifactFeed)"
    dryRun: true

- script: |
    npm run compile install
  displayName: Install Dependencies
  condition: ne(variables['CacheExists'], 'true')

----------------------------------------

TITLE: Multiple Language Settings Configuration
DESCRIPTION: Example demonstrating how to configure settings for multiple languages (JavaScript and TypeScript) simultaneously

LANGUAGE: json
CODE:
"[javascript][typescript]": {
  "editor.maxTokenizationLineLength": 2500
}

----------------------------------------

TITLE: Installing Shell Integration for Git Bash
DESCRIPTION: Configuration snippet for enabling VS Code shell integration in Git Bash by modifying the .bashrc file.

LANGUAGE: sh
CODE:
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path bash)"

----------------------------------------

TITLE: Configuring Docker Build Options in devcontainer.json
DESCRIPTION: Demonstrates how to specify custom Docker build options in devcontainer.json when using a Dockerfile. The configuration allows passing additional options to the docker build command, such as network settings.

LANGUAGE: json
CODE:
{
    "name": "My Dev Container",
    "build": {
        "dockerfile": "Dockerfile",
        "options": [
            "--network=host",
        ]
    }
}

----------------------------------------

TITLE: File Organization Example - Organization-based Groups
DESCRIPTION: Example folder structure showing how to organize repositories by organization and trust level

LANGUAGE: text
CODE:
├── github/microsoft - Clone a specific organization's repositories under this parent folder
├── github/{myforks} - Place your forked repositories under this parent folder
└── local - Local un-published repositories

----------------------------------------

TITLE: Configuring Language Support in package.json
DESCRIPTION: Contributes definition of a programming language, including file associations, icons, and configuration.

LANGUAGE: json
CODE:
{
  "contributes": {
    "languages": [
      {
        "id": "python",
        "extensions": [".py"],
        "aliases": ["Python", "py"],
        "filenames": [],
        "firstLine": "^#!/.*\\bpython[0-9.-]*\\b",
        "configuration": "./language-configuration.json",
        "icon": {
          "light": "./icons/python-light.png",
          "dark": "./icons/python-dark.png"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Defining Custom Emmet Snippets in VS Code
DESCRIPTION: JSON configuration for custom Emmet snippets in HTML and CSS in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "html": {
        "snippets": {
            "ull": "ul>li[id=${1} class=${2}]*2{ Will work with html, pug, haml and slim }",
            "oll": "<ol><li id=${1} class=${2}> Will only work in html </ol>",
            "ran": "{ Wrap plain text in curly braces }"
        }
    },
    "css": {
        "snippets": {
            "cb": "color: black",
            "bsd": "border: 1px solid ${1:red}",
            "ls": "list-style: ${1}"
        }
    }
}

----------------------------------------

TITLE: Launching VS Code from WSL Bash Shell
DESCRIPTION: This snippet demonstrates how to launch VS Code from a Bash shell in Windows Subsystem for Linux. It's mentioned as part of the initial approach to WSL support, which was later improved upon.

LANGUAGE: bash
CODE:
code

----------------------------------------

TITLE: Setting DEBUG Environment Variable in Docker Run Task
DESCRIPTION: This JSON snippet demonstrates how to set the DEBUG environment variable in the Docker run task to enable logging for the debug module used by Express.js.

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "type": "docker-run",
            "label": "docker-run: debug",
            "dependsOn": [
                "docker-build"
            ],
            "dockerRun": {
                "env": {
                    "DEBUG": "*"
                }
            },
            "node": {
                "enableDebugging": true
            }
        }
    ]
}

----------------------------------------

TITLE: Opening a Remote GitHub Repository in VS Code
DESCRIPTION: This code snippet shows how to open a remote GitHub repository in Visual Studio Code without cloning it locally, using the GitHub Repositories extension.

LANGUAGE: markdown
CODE:
1. First install the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) extension.

1. Run the command **Remote Repositories: Open Remote Repository...** or use the **Open Remote Repository** button the Explorer view.

1. Search and select the GitHub repository that you want to open.

----------------------------------------

TITLE: Applying BEM Filter to HTML Abbreviations in VS Code
DESCRIPTION: JSON configuration to apply the BEM filter to all HTML abbreviations in Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.syntaxProfiles": {
  "html": {
    "filters": "bem"
  }
}

----------------------------------------

TITLE: Automating Terminal Creation with Tasks in VS Code
DESCRIPTION: JSON configuration for a tasks.json file that automates the creation of Command Prompt and PowerShell terminals in a single terminal group when the VS Code window starts.

LANGUAGE: json
CODE:
{
  "version": "2.0.0",
  "presentation": {
    "echo": false,
    "reveal": "always",
    "focus": false,
    "panel": "dedicated",
    "showReuseMessage": true
  },
  "tasks": [
    {
      "label": "Create terminals",
      "dependsOn": [
        "First",
        "Second"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "runOptions": {
        "runOn": "folderOpen"
      }
    },
    {
      "label": "First",
      "type": "shell",
      "command": "",
      "options": {
        "shell": {
          "executable": "cmd.exe",
          "args": []
        }
      },
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "my-group"
      }
    },
    {
      "label": "Second",
      "type": "shell",
      "command": "",
      "options": {
        "shell": {
          "executable": "pwsh.exe",
          "args": []
        }
      },
      "isBackground": true,
      "problemMatcher": [],
      "presentation": {
        "group": "my-group"
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring Node.js Settings in Profile
DESCRIPTION: JSON configuration for Node.js-specific settings in a profile, including formatting options for different file types.

LANGUAGE: json
CODE:
{
    "editor.formatOnPaste": true,
    "git.autofetch": true,
    "[markdown]":  {
        "editor.wordWrap": "on"
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    }
}

----------------------------------------

TITLE: Tagging Docker Image for Registry Upload
DESCRIPTION: Tag the Docker image with the registry name to prepare it for upload. The format is <registry_name_or_username>/<image_name>:<tag>. Examples are provided for both Azure Container Registry and Docker Hub.

LANGUAGE: shell
CODE:
# Example tag for Azure Container Registry
webapp6.azurecr.io/webapp6:latest

# Example tag for Docker Hub
myusername/webapp6:latest

----------------------------------------

TITLE: Setting up Git Remote Origin Commands
DESCRIPTION: Commands to initialize a Git repository with a remote origin URL for enabling push, pull, and sync operations.

LANGUAGE: bash
CODE:
> git remote add origin https://github.com/<repo owner>/<repo name>.git
> git push -u origin main

----------------------------------------

TITLE: Configuring JUnit 4 in Gradle Build File
DESCRIPTION: Adds JUnit 4 dependency to a Gradle project's build.gradle file. This configuration applies the Java plugin and includes JUnit as a test implementation dependency.

LANGUAGE: groovy
CODE:
plugins {
    java
}

dependencies {
    testImplementation('junit:junit:(YOUR_JUNIT_VERSION)')
}

----------------------------------------

TITLE: Configuring Keyboard Shortcut for Specific Terminal Profile in VS Code
DESCRIPTION: This snippet shows how to bind a keyboard shortcut (Ctrl+Shift+T) to open a new terminal with a specific profile (zsh) in VS Code's keybindings settings.

LANGUAGE: json
CODE:
{
  "key": "ctrl+shift+t",
  "command": "workbench.action.terminal.newWithProfile",
  "args": {
    "profileName": "zsh",
    "location": "editor"
  }
}

----------------------------------------

TITLE: Custom Entrypoint Script for Docker Container
DESCRIPTION: This bash script serves as a custom entrypoint for a Docker container. It executes a greeting message and then runs the command passed to the container. The 'exec "$@"' line is crucial as it executes the CMD specified in the Dockerfile.

LANGUAGE: bash
CODE:
#!/usr/bin/env bash

echo "Hello from our entrypoint!"

exec "$@"

----------------------------------------

TITLE: Configuring Code Actions on Save in VS Code Settings
DESCRIPTION: JSON configuration example showing how to set up multiple Code Actions to run automatically on file save, with different triggers for explicit and auto-save scenarios.

LANGUAGE: json
CODE:
// On explicit save, run sortImports source action. On auto save (window or focus change), run organizeImports source action.
"editor.codeActionsOnSave": {
    "source.organizeImports": "always",
    "source.sortImports": "explicit",
}

----------------------------------------

TITLE: Gulp Task for Less Compilation and Watching (JavaScript)
DESCRIPTION: A Gulp task that compiles Less files to CSS and watches for changes, automatically recompiling when files are modified.

LANGUAGE: javascript
CODE:
var gulp = require('gulp');
var less = require('gulp-less');

gulp.task('less', function(cb) {
    gulp.src('*.less')
        .pipe(less())
        .pipe(gulp.dest(function(f) {
            return f.base;
        }));
    cb();
});

gulp.task('default', gulp.series('less', function(cb) {
    gulp.watch('*.less', gulp.series('less'));
    cb();
}));

----------------------------------------

TITLE: Debian 8 Source List Fix in Dockerfile
DESCRIPTION: Docker configuration to fix build failures for images using Debian 8/Jessie by adding archived sources.

LANGUAGE: docker
CODE:
RUN cat /etc/*-release | grep -q jessie && printf "deb http://archive.debian.org/debian/ jessie main\ndeb-src http://archive.debian.org/debian/ jessie main\ndeb http://security.debian.org jessie/updates main\ndeb-src http://security.debian.org jessie/updates main" > /etc/apt/sources.list

----------------------------------------

TITLE: Adding Project Reference for NUnit Testing
DESCRIPTION: Command to add a project reference to an NUnit test project, linking it to the project being tested.

LANGUAGE: bash
CODE:
dotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]

----------------------------------------

TITLE: Building and Publishing Dev Container Image
DESCRIPTION: Command to build a dev container image and push it to an image registry using the 'build' command.

LANGUAGE: bash
CODE:
devcontainer build --workspace-folder <my_repo> --push true --image-name <my_image_name>:<optional_image_version>

----------------------------------------

TITLE: Configuring Product Icon Theme in package.json
DESCRIPTION: Contributes a product icon theme to VS Code, specifying its ID, label, and path to the icon definition file.

LANGUAGE: json
CODE:
{
  "contributes": {
    "productIconThemes": [
      {
        "id": "elegant",
        "label": "Elegant Icon Theme",
        "path": "./producticons/elegant-product-icon-theme.json"
      }
    ]
  }
}

----------------------------------------

TITLE: Setting Tab Size in VS Code Settings
DESCRIPTION: JSON configuration to set the size of tab characters in the editor.

LANGUAGE: json
CODE:
"editor.tabSize": 4

----------------------------------------

TITLE: Starting SSH Service in devcontainer.json
DESCRIPTION: This snippet demonstrates how to start the SSH service using the 'postStartCommand' property in devcontainer.json. It uses the '/etc/init.d/ssh start' command, which is common in Debian/Ubuntu systems.

LANGUAGE: json
CODE:
"postStartCommand": "/etc/init.d/ssh start"

----------------------------------------

TITLE: Starting React Development Server
DESCRIPTION: Commands to navigate to project directory and start the development server

LANGUAGE: bash
CODE:
cd my-app
npm start

----------------------------------------

TITLE: Starting Debug Session with Copilot for Python in Bash
DESCRIPTION: This command uses the copilot-debug prefix to automatically configure and start a debugging session for a Python application using Django's manage.py script.

LANGUAGE: bash
CODE:
copilot-debug python manage.py

----------------------------------------

TITLE: Customizing Editor Settings for Source Control Input in VS Code
DESCRIPTION: This snippet shows how to customize editor settings specifically for the source control input field in VS Code. It sets custom ruler positions and disables word wrap for the commit message input.

LANGUAGE: json
CODE:
"[scminput]": {
    "editor.rulers": [
      50,
      72
    ],
    "editor.wordWrap": "off"
  }

----------------------------------------

TITLE: Java Main Method Code Snippet
DESCRIPTION: Code snippet example showing main method generation via 'main' or 'psvm' commands

LANGUAGE: java
CODE:
public static void main(String[] args) {}

----------------------------------------

TITLE: Package Dependencies Configuration in JSON
DESCRIPTION: Example package.json configuration showing how to specify dependencies for automatic type acquisition.

LANGUAGE: json
CODE:
{
    "dependencies": {
        "lodash": "^4.17.0"
    }
}

----------------------------------------

TITLE: Controlling Command Palette Visibility in package.json for VS Code Extension
DESCRIPTION: This JSON snippet demonstrates how to control when a command appears in the Command Palette using the menus.commandPalette contribution point in a VS Code extension's package.json.

LANGUAGE: json
CODE:
{
  "contributes": {
    "menus": {
      "commandPalette": [
        {
          "command": "myExtension.sayHello",
          "when": "editorLangId == markdown"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Creating Project Directory and Opening VS Code
DESCRIPTION: Bash commands to create a project directory structure and open VS Code in the new workspace.

LANGUAGE: bash
CODE:
mkdir projects
cd projects
mkdir helloworld
cd helloworld
code .

----------------------------------------

TITLE: YAML Resource Definition - Azure Machine Learning Specification Files
DESCRIPTION: Example of YAML specification file authoring in Azure Machine Learning showing resource definition with autocompletion and language support features.

LANGUAGE: yaml
CODE:
# No explicit code snippets provided in the content, but the documentation references YAML specification files

----------------------------------------

TITLE: Disabling a Command in Virtual Workspaces using When Clause
DESCRIPTION: This JSON snippet demonstrates how to use a when clause to disable a command in the Command Palette when in a virtual workspace.

LANGUAGE: json
CODE:
{
    "menus": {
      "commandPalette": [
        {
          "command": "npm.publish",
          "when": "!virtualWorkspace"
        }
      ]
    }
}

----------------------------------------

TITLE: Running a Background Process on Container Start in devcontainer.json
DESCRIPTION: This example shows how to start a process and leave it running in the background using 'nohup' and '&' in the 'postStartCommand' property of devcontainer.json.

LANGUAGE: json
CODE:
"postStartCommand": "nohup bash -c 'your-command-here &'"

----------------------------------------

TITLE: Configuring Linux C/C++ IntelliSense
DESCRIPTION: Sample configuration file for C/C++ IntelliSense on Linux using GCC compiler. Includes browse configurations and database settings specific to Linux.

LANGUAGE: json
CODE:
{
  "configurations": [
        {
          "name": "Linux-GCC",
          "includePath": [
            "${workspaceFolder}/**"
          ],
          "defines": [],
          "compilerPath": "/usr/bin/g++",
          "cStandard": "c17",
          "cppStandard": "c++17",
          "intelliSenseMode": "gcc-x64",
          "browse": {
            "path": [
              "${workspaceFolder}"
            ],
            "limitSymbolsToIncludedHeaders": true,
            "databaseFilename": ""
          }
        }
  ],
  "version": 4
}

----------------------------------------

TITLE: Sass Compilation Task Configuration (JSON)
DESCRIPTION: JSON configuration for a Visual Studio Code task to compile Sass files to CSS using the sass command-line tool.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Sass Compile",
            "type": "shell",
            "command": "sass styles.scss styles.css",
            "group": "build"
        }
    ]
}

----------------------------------------

TITLE: Configuring VS Code Tasks for esbuild Extension Bundling
DESCRIPTION: JSON configuration for VS Code tasks to run esbuild and TypeScript compiler in watch mode for extension development.

LANGUAGE: json
CODE:
{
	"version": "2.0.0",
	"tasks": [
		{
            "label": "watch",
            "dependsOn": [
                "npm: watch:tsc",
                "npm: watch:esbuild"
            ],
            "presentation": {
                "reveal": "never"
            },
            "group": {
                "kind": "build",
                "isDefault": true
            }
        },
        {
            "type": "npm",
            "script": "watch:esbuild",
            "group": "build",
            "problemMatcher": "$esbuild-watch",
            "isBackground": true,
            "label": "npm: watch:esbuild",
            "presentation": {
                "group": "watch",
                "reveal": "never"
            }
        },
		{
            "type": "npm",
            "script": "watch:tsc",
            "group": "build",
            "problemMatcher": "$tsc-watch",
            "isBackground": true,
            "label": "npm: watch:tsc",
            "presentation": {
                "group": "watch",
                "reveal": "never"
            }
        }
    ]
}

----------------------------------------

TITLE: Starting a Dev Container with CLI
DESCRIPTION: Commands to clone a sample Rust project and start a dev container using the CLI's 'up' command.

LANGUAGE: bash
CODE:
git clone https://github.com/microsoft/vscode-remote-try-rust
devcontainer up --workspace-folder <path-to-vscode-remote-try-rust>

----------------------------------------

TITLE: Defining Semantic Token Types in package.json
DESCRIPTION: Contributes new semantic token types that can be highlighted via theme rules.

LANGUAGE: json
CODE:
{
  "contributes": {
    "semanticTokenTypes": [
      {
        "id": "templateType",
        "superType": "type",
        "description": "A template type."
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Visual Studio Code Settings in JSON
DESCRIPTION: This snippet shows how to configure various Visual Studio Code settings using JSON format in the settings.json file. It includes settings for experimental features, workspace symbols, and Python extensions.

LANGUAGE: JSON
CODE:
{
  "python.experiments.optInto": ["pythonTerminalEnvVarActivation"],
  "typescript.workspaceSymbols.excludeLibrarySymbols": false,
  "workbench.tree.enableStickyScroll": true,
  "workbench.tree.stickyScrollMaxItemCount": 7,
  "multiDiffEditor.experimental.enabled": true,
  "inlineChat.mode": "live3",
  "problems.visibility": false
}

----------------------------------------

TITLE: Environment File Configuration Example
DESCRIPTION: Example of an environment file (.env) format for defining multiple environment variables.

LANGUAGE: plaintext
CODE:
YOUR_ENV_VAR_NAME=your-value-goes-here
ANOTHER_ENV_VAR_NAME=your-value-goes-here

----------------------------------------

TITLE: Displaying Azure Deployment Tutorials Table in Markdown
DESCRIPTION: This snippet shows a Markdown table listing various Azure deployment tutorials, their descriptions, and the associated frameworks or languages.

LANGUAGE: Markdown
CODE:
Tutorial(s) | Description | Framework / Language
--- | --- | ---
[Deploy a static website](https://learn.microsoft.com/azure/static-web-apps/getting-started) | Create, deploy, and update a static website | Angular, Blazor, React, or Vue
[Deploy Node.js apps](/docs/nodejs/nodejs-deployment.md) | Deploy web apps, containerized apps, or serverless code | Node.js
[Deploy Python apps](/docs/python/python-on-azure.md) | Deploy web apps, containerized apps, or serverless code | Python
[Deploy Java apps](/docs/java/java-on-azure.md) | Deploy web apps, Spring Boot apps, or serverless code | Java

----------------------------------------

TITLE: Configuring Workspace Recommended Extensions in VS Code
DESCRIPTION: JSON configuration for specifying recommended extensions in a workspace through the extensions.json file.

LANGUAGE: json
CODE:
{
    "recommendations": [
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode"
    ]
}

----------------------------------------

TITLE: Adding Tooltips to QuickPickItems
DESCRIPTION: Shows how to add tooltips to QuickPickItems using the new proposed API. Tooltips can be plain text or Markdown strings and are displayed on hover or toggled with Ctrl+Space.

LANGUAGE: typescript
CODE:
await vscode.window.showQuickPick([
   {
      label: 'label',
      tooltip: 'tooltip',
   },
   {
      label: 'label2',
      tooltip: new vscode.MarkdownString('tooltip2 [link](https://github.com)'),
   }
], {
   placeHolder: 'placeholder'
});

----------------------------------------

TITLE: Configuring Doc Writer Settings in Profile
DESCRIPTION: JSON configuration for documentation writing settings in a profile, including theme, editor options, and Git settings.

LANGUAGE: json
CODE:
{
    "workbench.colorTheme": "Default Light Modern",
    "editor.minimap.enabled": false,
    "breadcrumbs.enabled": false,
    "editor.glyphMargin": false,
    "explorer.decorations.badges": false,
    "explorer.decorations.colors": false,
    "editor.fontLigatures": true,
    "files.autoSave": "afterDelay",
    "git.enableSmartCommit": true,
    "window.commandCenter": true,
    "editor.renderWhitespace": "none",
    "workbench.editor.untitled.hint": "hidden",
    "markdown.validate.enabled": true,
    "markdown.updateLinksOnFileMove.enabled": "prompt",
    "workbench.startupEditor": "none"
}

----------------------------------------

TITLE: Configuring Accessibility Signals in VS Code
DESCRIPTION: Example of migrating from old audio cues configuration to new accessibility signals format that supports both sounds and announcements.

LANGUAGE: json
CODE:
// Before:
{
    "audioCues.clear": "on | auto | off",
    "accessibility.alert.clear": true | false
}

// After:
{
    "accessibility.signals.clear": {
        "sound": "auto | on | off",
        "announcement" (optional): "auto | off"
    }
}

----------------------------------------

TITLE: Defining Workspace Trust Capabilities in package.json
DESCRIPTION: Configuration object for declaring an extension's Workspace Trust capabilities. Specifies how the extension behaves in trusted vs untrusted workspaces through the untrustedWorkspaces property.

LANGUAGE: typescript
CODE:
capabilities:
  untrustedWorkspaces:
    { supported: true } |
    { supported: false, description: string } |
    { supported: 'limited', description: string, restrictedConfigurations?: string[] }

----------------------------------------

TITLE: Configuring LLDB-MI Debugger Logging in launch.json
DESCRIPTION: This JSON snippet shows the default logging configuration for LLDB-MI debuggers in the launch.json file. It includes options for trace logging, trace response, and engine logging.

LANGUAGE: json
CODE:
"logging": {
    "trace": false,
    "traceResponse": false,
    "engineLogging": false
}

----------------------------------------

TITLE: Configuring Basic JavaScript Project with jsconfig.json
DESCRIPTION: Basic jsconfig.json configuration for a JavaScript project that sets CommonJS modules and ES6 target while excluding node_modules.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6"
    },
    "exclude": [
        "node_modules"
    ]
}

----------------------------------------

TITLE: VS Code Settings for Rust Semantic Tokens
DESCRIPTION: JSON configuration to customize the appearance of mutable variables in Rust code within VS Code.

LANGUAGE: jsonc
CODE:
{
  "editor.semanticTokenColorCustomizations": {
    "rules": {
      "*.mutable": {
        "fontStyle": ""
      }
    }
  }
}

----------------------------------------

TITLE: Configuring remote bind mount in devcontainer.json
DESCRIPTION: Sets up a bind mount to a folder on the remote machine. This requires access to the remote filesystem but allows working with existing source code.

LANGUAGE: json
CODE:
"workspaceMount": "source=/absolute/path/on/remote/machine,target=/workspace,type=bind,consistency=cached"

----------------------------------------

TITLE: Configuring TypeScript Plugin in Extension
DESCRIPTION: Example of how to configure a TypeScript server plugin from a VS Code extension.

LANGUAGE: typescript
CODE:
export async function activate(context: vscode.ExtensionContext) {
  const tsExtension = vscode.extensions.getExtension('vscode.typescript-language-features');
  if (!tsExtension) {
    return;
  }

  await tsExtension.activate();

  if (!tsExtension.exports || !tsExtension.exports.getAPI) {
    return;
  }

  const api = tsExtension.exports.getAPI(0);
  if (!api) {
    return;
  }

  api.configurePlugin('my-typescript-plugin-id', {
    someValue: process.env['SOME_VALUE']
  });
}

----------------------------------------

TITLE: Visualizing Titanic Data Relationships with Seaborn in Python
DESCRIPTION: Uses seaborn and matplotlib to create violin and point plots showing relationships between survival and various passenger characteristics like age, family members, class, and fare.

LANGUAGE: python
CODE:
import seaborn as sns
import matplotlib.pyplot as plt

fig, axs = plt.subplots(ncols=5, figsize=(30,5))
sns.violinplot(x="survived", y="age", hue="sex", data=data, ax=axs[0])
sns.pointplot(x="sibsp", y="survived", hue="sex", data=data, ax=axs[1])
sns.pointplot(x="parch", y="survived", hue="sex", data=data, ax=axs[2])
sns.pointplot(x="pclass", y="survived", hue="sex", data=data, ax=axs[3])
sns.violinplot(x="survived", y="fare", hue="sex", data=data, ax=axs[4])

----------------------------------------

TITLE: Installing webpack for VS Code Extension Bundling
DESCRIPTION: Commands to install webpack and its CLI as development dependencies for bundling VS Code extensions.

LANGUAGE: bash
CODE:
npm i --save-dev webpack webpack-cli

----------------------------------------

TITLE: Configuring Global SSH Proxies in VSCode
DESCRIPTION: Configuration example for setting up global HTTP and HTTPS proxies that apply to all hosts in VSCode Remote SSH extension.

LANGUAGE: json
CODE:
{
    "remote.SSH.httpProxy": "http://proxy.example.com:8080",
    "remote.SSH.httpsProxy": "https://proxy.example.com:8080"
}

----------------------------------------

TITLE: Adding Environment Variable to Dockerfile
DESCRIPTION: Demonstrates how to add an environment variable to a Dockerfile using VS Code's IntelliSense feature.

LANGUAGE: Dockerfile
CODE:
ENV key=value

----------------------------------------

TITLE: Running MongoDB Container in Docker with WSL 2
DESCRIPTION: This snippet demonstrates how to run a MongoDB container using Docker in a WSL 2 environment. It shows the command execution in PowerShell and the resulting container ID.

LANGUAGE: bash
CODE:
docker run mongo…

----------------------------------------

TITLE: Configuring File Nesting Patterns in VS Code Settings
DESCRIPTION: Example configuration for the explorer.fileNesting.patterns setting to control how files are nested in the Explorer view.

LANGUAGE: json
CODE:
"explorer.fileNesting.patterns": {
  "index.ts": "${dirname}.ts",
  "*": "${basename}.*.${extname}"
}

----------------------------------------

TITLE: Basic remote devcontainer.json configuration
DESCRIPTION: Configures a remote dev container using a named volume for the workspace. This setup is useful when you don't have direct access to the remote host's filesystem.

LANGUAGE: json
CODE:
{
    "image": "node",
    "workspaceFolder": "/workspace",
    "workspaceMount": "source=remote-workspace,target=/workspace,type=volume"
}

----------------------------------------

TITLE: Cloning Express Sample Application
DESCRIPTION: Command to clone a sample Express application from GitHub for demonstration purposes.

LANGUAGE: bash
CODE:
git clone https://github.com/microsoft/vscode-express-sample.git

----------------------------------------

TITLE: Configuring GDB Debugger Path in Windows
DESCRIPTION: Sets up the MinGW GDB debugger path in the launch.json configuration file for Windows debugging.

LANGUAGE: json
CODE:
    "miDebuggerPath": "c:\\mingw\\bin\\gdb.exe"

----------------------------------------

TITLE: Configuring Run By Line in Jupyter Notebooks
DESCRIPTION: JSON configuration to enable the experimental Run By Line feature for Jupyter notebooks in Visual Studio Code.

LANGUAGE: JSON
CODE:
"jupyter.experimental.debugging": true

----------------------------------------

TITLE: Configuring launch.json for Debugging with MSVC
DESCRIPTION: JSON configuration for launch.json to set up debugging for C++ programs compiled with Microsoft Visual C++ in Visual Studio Code.

LANGUAGE: json
CODE:
{
"version": "0.2.0",
"configurations": [
    {
        "name": "C/C++: cl.exe build and debug active file",
        "type": "cppvsdbg",
        "request": "launch",
        "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",
        "args": [],
        "stopAtEntry": false,
        "cwd": "${workspaceFolder}",
        "environment": [],
        "externalConsole": false,
        "preLaunchTask": "C/C++: cl.exe build active file"
    }
]
}

----------------------------------------

TITLE: Configuring Skip Files for Node.js Debugging
DESCRIPTION: This configuration snippet demonstrates how to set up file skipping during debugging to avoid stepping through uninteresting code.

LANGUAGE: json
CODE:
"skipFiles": [
    "${workspaceFolder}/node_modules/**/*.js",
    "${workspaceFolder}/lib/**/*.js"
  ]

----------------------------------------

TITLE: Configuring Merge Editor Diffing Algorithm in VS Code
DESCRIPTION: Sets the diffing algorithm for the merge editor to an experimental version. This new algorithm improves the merge editor experience for many edge cases but is not yet optimized for performance.

LANGUAGE: json
CODE:
"mergeEditor.diffAlgorithm": "experimental"

----------------------------------------

TITLE: Building Java Spring Boot Application with Maven
DESCRIPTION: Maven command to clean and package the Spring Boot application, generating a JAR file in the target directory.

LANGUAGE: bash
CODE:
mvn clean package

----------------------------------------

TITLE: Enabling Automatic Reload in Python Debugger Configuration
DESCRIPTION: Configuration to enable automatic reloading of the debugger when code changes are made during a debugging session.

LANGUAGE: json
CODE:
{
   "name": "Python Debugger: Current File",
   "type": "debugpy",
   "request": "launch",
   "program": "${file}",
   "console": "integratedTerminal",
   "autoReload": {
      "enable": true
 }
}

----------------------------------------

TITLE: Configuring Remote Debugging with SSH in launch.json
DESCRIPTION: Configuration for remote debugging of Python code over SSH using the Python Debugger extension in VS Code.

LANGUAGE: json
CODE:
{
    "name": "Python Debugger: Attach",
    "type": "debugpy",
    "request": "attach",
    "port": 5678,
    "host": "localhost",
    "pathMappings": [
        {
            "localRoot": "${workspaceFolder}", // Maps C:\Users\user1\project1
            "remoteRoot": "."                  // To current working directory ~/project1
        }
    ]
}

----------------------------------------

TITLE: Configuring Semantic Token Scopes in package.json
DESCRIPTION: Contributes mapping between semantic token types & modifiers and scopes for language-specific themes or fallback.

LANGUAGE: json
CODE:
{
  "contributes": {
    "semanticTokenScopes": [
      {
        "language": "typescript",
        "scopes": {
          "property.readonly": ["variable.other.constant.property.ts"]
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Custom Keyboard Shortcut for Search Editor
DESCRIPTION: JSON configuration to create a custom keyboard shortcut that opens a new Search Editor with specific search parameters.

LANGUAGE: json
CODE:
{
    "key": "ctrl+o",
    "command": "search.action.openNewEditor",
    "args": { "query": "VS Code", "triggerSearch":true, "focusResults": false }
}

----------------------------------------

TITLE: Extending HTML Notebook Renderer in Extension package.json
DESCRIPTION: Declare an extension of the built-in HTML notebook renderer in the extension's package.json.

LANGUAGE: JSON
CODE:
"contributes": {
  "notebookRenderer": [
    {
      "id": "vscode-samples.my-custom-html-extension",
      "displayName": "My custom html renderer extension",
      "entrypoint": {
        "extends": "vscode.builtin-renderer",
        "path": "./out/main.js"
      }
    }
  ]
}

----------------------------------------

TITLE: Running Node.js Application Locally
DESCRIPTION: Command to start the Node.js application locally using npm.

LANGUAGE: bash
CODE:
npm run start

----------------------------------------

TITLE: Listing Docker Containers in WSL 2
DESCRIPTION: This snippet shows how to list running Docker containers in a WSL 2 environment using the 'docker ps' command. It displays the container ID, which matches the one from the previous 'docker run' command.

LANGUAGE: bash
CODE:
docker ps

----------------------------------------

TITLE: Setting Up Locked Editor Groups in VS Code
DESCRIPTION: JSON configuration to enable experimental auto-locking of editor groups for specific file types in Visual Studio Code.

LANGUAGE: JSON
CODE:
"workbench.editor.experimentalAutoLockGroups": {
  "mainThreadWebview-markdown.preview": true
}

----------------------------------------

TITLE: Configuring Host-Specific SSH Proxies in VSCode
DESCRIPTION: Configuration example for setting up HTTP and HTTPS proxies on a per-host basis in VSCode Remote SSH extension. This allows specific proxy settings for different remote hosts.

LANGUAGE: json
CODE:
{
    "remote.SSH.httpProxy": {
        "myhost": "http://proxy.example.com:8080",
        "myhost2": "http://proxy2.example.com"
    },
    "remote.SSH.httpsProxy": {
        "myhost": "https://proxy.example.com:8080",
        "myhost2": "https://proxy2.example.com"
    }
}

----------------------------------------

TITLE: Configuring HTML Validation Settings in VS Code
DESCRIPTION: This JSON snippet demonstrates how to configure VS Code settings to enable or disable validation of embedded scripts and styles in HTML files.

LANGUAGE: json
CODE:
// Configures if the built-in HTML language support validates embedded scripts.
"html.validate.scripts": true,

// Configures if the built-in HTML language support validates embedded styles.
"html.validate.styles": true

----------------------------------------

TITLE: Example Kubernetes Manifest File
DESCRIPTION: A basic Kubernetes manifest YAML configuration demonstrating deployment structure. The manifest shows the fundamental structure that is autogenerated when typing 'Deployment' in an empty YAML file, requiring manual entry of app name, image, and port details.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: your-app-name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: your-app-name
  template:
    metadata:
      labels:
        app: your-app-name
    spec:
      containers:
      - name: your-app-name
        image: your-image:tag
        ports:
        - containerPort: your-port

----------------------------------------

TITLE: Implementing Terminal Profile Provider in VS Code
DESCRIPTION: TypeScript code showing how to register and implement a terminal profile provider extension.

LANGUAGE: typescript
CODE:
vscode.window.registerTerminalProfileProvider('custom_profile', {
  provideTerminalProfile() {
    return {
      options: {
        name: 'Profile from extension',
        shellPath: 'cmd.exe'
      }
    };
  }
})

----------------------------------------

TITLE: Extended devcontainer.json Configuration
DESCRIPTION: An extended devcontainer.json configuration that installs an extension, forwards a port, and uses a custom Docker image.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/devcontainers/typescript-node",

    "customizations": {
        "vscode": {
            "extensions": [
                "streetsidesoftware.code-spell-checker"
            ]
        }
    },
    "forwardPorts": [ 3000 ]
}

----------------------------------------

TITLE: Configuring VS Code as Default Git Diff Tool
DESCRIPTION: Bash commands to set VS Code as the default diff tool for Git.

LANGUAGE: bash
CODE:
git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'

----------------------------------------

TITLE: JavaScript Function Suggestion Example
DESCRIPTION: Example showing how Copilot suggests an implementation of the calculateDaysBetweenDates function using ghost text.

LANGUAGE: javascript
CODE:
calculateDaysBetweenDates

----------------------------------------

TITLE: Configuring Google Style Formatter for Java in VS Code
DESCRIPTION: JSON configuration to apply Google Style formatting to Java files in Visual Studio Code. This setting specifies the URL of the Eclipse formatter XML file containing the Google Style profile.

LANGUAGE: json
CODE:
"java.format.settings.url": "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml",

----------------------------------------

TITLE: Printing Hello World in Python
DESCRIPTION: A simple Python script that prints 'Hello World' to the console. This is often used as a basic test to ensure Python is correctly installed and running.

LANGUAGE: python
CODE:
print("Hello World")

----------------------------------------

TITLE: Manually Instrumenting Code for CPU Profiling in JavaScript
DESCRIPTION: This snippet demonstrates how to use console.profile() and console.profileEnd() to manually instrument code for CPU profiling. It allows for collecting a CPU profile between specific call sites in the code.

LANGUAGE: javascript
CODE:
console.profile();
doSomeVeryExpensiveWork();
console.profileEnd();

----------------------------------------

TITLE: Setting Configuration for HTTP Local Proxy
DESCRIPTION: New setting that controls whether remote extensions use local proxy configuration. Default behavior varies based on connection type (WSL, Dev Containers, Remote-SSH, Remote-Tunnels).

LANGUAGE: plaintext
CODE:
http.useLocalProxyConfiguration

----------------------------------------

TITLE: Configuring Extension Settings in package.json
DESCRIPTION: Contributes configuration settings that will be exposed to the user in the Settings editor or settings.json file.

LANGUAGE: json
CODE:
{
  "contributes": {
    "configuration": {
      "title": "TypeScript",
      "properties": {
        "typescript.useCodeSnippetsOnMethodSuggest": {
          "type": "boolean",
          "default": false,
          "description": "Complete functions with their parameter signature."
        },
        "typescript.tsdk": {
          "type": ["string", "null"],
          "default": null,
          "description": "Specifies the folder path containing the tsserver and lib*.d.ts files to use."
        }
      }
    }
  }
}

----------------------------------------

TITLE: VS Code Glob Library Implementation Reference
DESCRIPTION: Reference to VS Code's internal glob matching library implementation path, which is optimized for typical pattern matching scenarios.

LANGUAGE: typescript
CODE:
src/vs/base/common/glob.ts

----------------------------------------

TITLE: Authentication Request Activation
DESCRIPTION: Triggers extension activation when authentication is requested for a specific provider.

LANGUAGE: json
CODE:
"activationEvents": [
    "onAuthenticationRequest:github"
]

----------------------------------------

TITLE: Installing VS Code Theme Generator
DESCRIPTION: Command line instructions for installing the Yeoman generator for VS Code extensions.

LANGUAGE: bash
CODE:
npm install -g yo generator-code
yo code

----------------------------------------

TITLE: Building Docker Image in VS Code
DESCRIPTION: Use the Docker Images: Build Image... command in VS Code to build a container image for your application. The image name can be found in the command output or the Docker Explorer.

LANGUAGE: shell
CODE:
# Command to build Docker image in VS Code
Docker Images: Build Image...

----------------------------------------

TITLE: Installing Linux Dependencies for VS Code on Chrome OS
DESCRIPTION: Commands to update package list and install gnome-keyring dependency required for VS Code installation on Chrome OS Linux environment.

LANGUAGE: sh
CODE:
sudo apt-get update
sudo apt-get install -y gnome-keyring

----------------------------------------

TITLE: Configuring Default Search Mode in VS Code
DESCRIPTION: Setting to configure the default search UI behavior.

LANGUAGE: JSON
CODE:
"search.mode": "view"

----------------------------------------

TITLE: Configuring Environment Variables with Default Values in Dev Containers
DESCRIPTION: Demonstrates how to set default values for environment variables in devcontainer.json configuration. Uses the syntax ${localEnv:VAR:default} for local environment variables and ${containerEnv:VAR:default} for container environment variables.

LANGUAGE: json
CODE:
{
    "image": "ubuntu:latest",
    "remoteEnv": {
        "MY_LOCAL_VAR": "${localEnv:MY_VAR:my_local_default}",
        "MY_CONTAINER_VAR": "${containerEnv:MY_VAR:my_container_default}"
    }
}

----------------------------------------

TITLE: Updating Angular component in TypeScript
DESCRIPTION: Example of modifying an Angular component in TypeScript, changing the title property of AppComponent.

LANGUAGE: typescript
CODE:
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Hello World';
}

----------------------------------------

TITLE: Connecting to Local MongoDB Instance in Visual Studio Code
DESCRIPTION: This snippet shows the default connection string for connecting to a local MongoDB instance. It's used when setting up a new connection in the MongoDB extension for VS Code.

LANGUAGE: javascript
CODE:
"mongodb://127.0.0.1:27017"

----------------------------------------

TITLE: Initializing pinned tab sizing setting in Visual Studio Code
DESCRIPTION: Configures how large pinned tabs should appear in the editor using the workbench.editor.pinnedTabSizing setting. Options include normal, shrink, and compact sizes.

LANGUAGE: json
CODE:
"workbench.editor.pinnedTabSizing": "normal"

----------------------------------------

TITLE: File Icon Theme Configuration
DESCRIPTION: JSON setting to specify the file icon theme used in the VS Code workbench.

LANGUAGE: json
CODE:
  "workbench.iconTheme": "vs-seti"

----------------------------------------

TITLE: Configuring Keyboard Shortcuts for Snippets
DESCRIPTION: JSON configuration showing how to assign keyboard shortcuts to insert specific snippets directly.

LANGUAGE: json
CODE:
{
  "key": "cmd+k 1",
  "command": "editor.action.insertSnippet",
  "when": "editorTextFocus",
  "args": {
    "snippet": "console.log($1)$0"
  }
}

----------------------------------------

TITLE: Configuring Debug Terminal Options in VS Code settings
DESCRIPTION: This configuration snippet demonstrates how to set up additional debug terminal options, such as skipping specific files during debugging.

LANGUAGE: json
CODE:
"debug.javascript.terminalOptions": {
  "skipFiles": [
    "<node_internals>/**"
  ]
}

----------------------------------------

TITLE: Creating a Flask Route with Variable in Python
DESCRIPTION: Defines a Flask route that accepts a variable in the URL and returns formatted content.

LANGUAGE: python
CODE:
@app.route("/hello/<name>")
def hello_there(name):
    now = datetime.now()
    formatted_now = now.strftime("%A, %d %B, %Y at %X")

    match_object = re.match("[a-zA-Z]+", name)
    if match_object:
        clean_name = match_object.group(0)
    else:
        clean_name = "Friend"

    content = "Hello there, " + clean_name + "! It's " + formatted_now
    return content

----------------------------------------

TITLE: Enabling Linked Editing for HTML Tags in VS Code
DESCRIPTION: This JSON snippet shows how to enable the linked editing feature in VS Code, which automatically updates matching closing tags when modifying an opening tag.

LANGUAGE: json
CODE:
"editor.linkedEditing": true

----------------------------------------

TITLE: Example Code for Demonstrating Function Call Times in JavaScript
DESCRIPTION: This code snippet illustrates a simple example of function calls with different execution times. It's used to explain the concepts of Self Time and Total Time in the context of CPU profiling.

LANGUAGE: javascript
CODE:
function a() {
  doSomethingFor5Seconds();
  b();
}

function b() {
  doSomethingFor3Seconds();
}

a();

----------------------------------------

TITLE: Building Dev Container Images with Multiple Tags
DESCRIPTION: Demonstrates how to use the dev container CLI to build an image with multiple tags. This is useful for tagging images with multiple registries.

LANGUAGE: sh
CODE:
devcontainer build --workspace-folder ./ --image-name alpine3 --image-name alpine3.0

----------------------------------------

TITLE: Configuring Breakpoint Support in package.json
DESCRIPTION: Specifies language file types for which setting breakpoints will be enabled in a debugger extension.

LANGUAGE: json
CODE:
{
  "contributes": {
    "breakpoints": [
      {
        "language": "javascript"
      },
      {
        "language": "javascriptreact"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuration Settings for VS Code Voice Features
DESCRIPTION: Key settings related to voice features including speech timeout, auto synthesis, and keyword activation

LANGUAGE: plaintext
CODE:
setting(accessibility.voice.speechTimeout)
setting(accessibility.voice.autoSynthesize)
setting(accessibility.voice.keywordActivation)
setting(accessibility.voice.speechLanguage)

----------------------------------------

TITLE: Running VS Code Web Server via CLI
DESCRIPTION: Command to start a standalone VS Code server that serves a web experience on localhost. For non-localhost access, TLS configuration via reverse proxy is required.

LANGUAGE: bash
CODE:
serve-web

----------------------------------------

TITLE: Implementing Custom Message Handler in Rust Language Server
DESCRIPTION: This Rust code snippet shows how to add a custom message handler for counting files in a given workspace folder to a language server.

LANGUAGE: rust
CODE:
#[derive(Debug, Eq, PartialEq, Clone, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct CountFilesParams {
    pub folder: Url,
}

pub enum CountFilesRequest {}
impl Request for CountFilesRequest {
    type Params = CountFilesParams;
    type Result = u32;
    const METHOD: &'static str = "wasm-language-server/countFilesInDirectory";
}

//...

for msg in &connection.receiver {
    match msg {
		//....
		match cast::<CountFilesRequest>(req) {
    		Ok((id, params)) => {
				eprintln!("Received countFiles request #{} {}", id, params.folder);
        		let result = count_files_in_directory(&params.folder.path());
        		let json = serde_json::to_value(&result).unwrap();
        		let resp = Response { id, result: Some(json), error: None };
        		connection.sender.send(Message::Response(resp))?;
        		continue;
    		}
    		Err(err @ ExtractError::JsonError { .. }) => panic!("{err:?}"),
    		Err(ExtractError::MethodMismatch(req)) => req,
		}
	}
	//...
}

fn count_files_in_directory(path: &str) -> usize {
    WalkDir::new(path)
        .into_iter()
        .filter_map(Result::ok)
        .filter(|entry| entry.file_type().is_file())
        .count()
}

----------------------------------------

TITLE: Installing Node.js via NVM on Chrome OS
DESCRIPTION: Command to install the latest version of Node.js using NVM on Chrome OS Linux environment.

LANGUAGE: sh
CODE:
nvm install node

----------------------------------------

TITLE: Java System Output Code Snippet
DESCRIPTION: Code snippet example showing System.out.println() shortcut via 'sout' or 'sysout' commands

LANGUAGE: java
CODE:
System.out.println()

----------------------------------------

TITLE: Deprecated API example in TypeScript
DESCRIPTION: Example showing how to mark an API as deprecated using JSDoc comments in TypeScript

LANGUAGE: typescript
CODE:
/**
 * @deprecated Use `getMode()` instead.
 */
export function mode() { ... }

----------------------------------------

TITLE: Implementing TypeScript Plugin
DESCRIPTION: Basic structure of a TypeScript server plugin that can receive configuration changes from VS Code.

LANGUAGE: typescript
CODE:
import * as ts_module from 'typescript/lib/tsserverlibrary';

export = function init({ typescript }: { typescript: typeof ts_module }) {
  return {
    create(info: ts.server.PluginCreateInfo) {
      // Create new language service
    },
    onConfigurationChanged(config: any) {
      // Receive configuration changes sent from VS Code
    }
  };
};

----------------------------------------

TITLE: Configuring IntelliSense for Custom Package Locations in Windows
DESCRIPTION: This snippet shows how to configure the 'python.analysis.extraPaths' setting in VS Code to enable IntelliSense for packages installed in non-standard locations, such as Google App Engine.

LANGUAGE: json
CODE:
"python.analysis.extraPaths": [
    "C:/Program Files (x86)/Google/google_appengine",
    "C:/Program Files (x86)/Google/google_appengine/lib/flask-0.12"
]

----------------------------------------

TITLE: Terminal Send Sequence Keybinding
DESCRIPTION: Example JSON keybinding definition for sending text sequences to the terminal

LANGUAGE: json
CODE:
{ "key": "ctrl+v",
  "command": "workbench.action.terminal.sendSequence",
  "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
  "args": {"text":"\u0016"} }

----------------------------------------

TITLE: Configuring IntelliSense for Custom Package Locations in macOS/Linux
DESCRIPTION: This snippet demonstrates how to set up the 'python.analysis.extraPaths' configuration in VS Code for macOS and Linux systems to enable IntelliSense for packages in custom locations.

LANGUAGE: json
CODE:
"python.analysis.extraPaths": [
    "~/.local/lib/Google/google_appengine",
    "~/.local/lib/Google/google_appengine/lib/flask-0.12" 
]

----------------------------------------

TITLE: Disabling Terminal Tab Animation in VS Code
DESCRIPTION: This code disables the animation of terminal tab status icons by setting the terminal.integrated.tabs.enableAnimation property to false.

LANGUAGE: json
CODE:
"terminal.integrated.tabs.enableAnimation": false

----------------------------------------

TITLE: Extension Pack Definition in package.json
DESCRIPTION: An example of how to define an Extension Pack in the package.json file, bundling multiple extensions together.

LANGUAGE: json
CODE:
{
  "extensionPack": [
    "xdebug.php-debug",
    "zobo.php-intellisense"
  ]
}

----------------------------------------

TITLE: Configuring Python Remote Attach Launch Configuration in VS Code
DESCRIPTION: Example of a launch configuration in launch.json for attaching to a Python application running in a Docker container.

LANGUAGE: json
CODE:
"configurations": [
    {
        "name": "Python Debugger: Remote Attach",
        "type": "debugpy",
        "request": "attach",
        "port": 5678,
        "host": "localhost",
        "pathMappings": [
            {
                "localRoot": "${workspaceFolder}",
                "remoteRoot": "/app"
            }
        ]
    }
]

----------------------------------------

TITLE: Disabling GPU Acceleration for VS Code Terminal
DESCRIPTION: JSON configuration to disable GPU acceleration for the integrated terminal in Visual Studio Code, which can help resolve rendering issues.

LANGUAGE: json
CODE:
{
    "terminal.integrated.gpuAcceleration": "off"
}

----------------------------------------

TITLE: Basic JSConfig Configuration
DESCRIPTION: Standard jsconfig.json configuration template with common compiler options and exclusions.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6"
    },
    "exclude": [
        "node_modules",
        "**/node_modules/*"
    ]
}

----------------------------------------

TITLE: Configuring IntelliSense Filtering in VS Code
DESCRIPTION: Controls whether IntelliSense suggestions should only match at word starts. When disabled, filtering considers any match, leading to more results but still filtered by match quality.

LANGUAGE: json
CODE:
"editor.suggest.matchOnWordStartOnly": false

----------------------------------------

TITLE: Custom TextMate Scope Mappings in package.json
DESCRIPTION: This JSON snippet shows how to define custom TextMate scope mappings for semantic tokens in an extension's package.json. It provides fallback scopes for custom token types and language-specific mappings.

LANGUAGE: json
CODE:
{
  "contributes": {
    "semanticTokenScopes": [
      {
        "scopes": {
          "templateType": [ "entity.name.type.template" ]
        }
      },
      {
        "language": "typescript",
        "scopes": {
          "property.readonly": ["variable.other.constant.property.ts"]
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Creating a Security API Review Prompt in Markdown
DESCRIPTION: This snippet demonstrates a reusable prompt file for conducting security reviews of REST APIs. It lists key security practices to check during the review process.

LANGUAGE: markdown
CODE:
Secure REST API review:
* Ensure all endpoints are protected by authentication and authorization
* Validate all user inputs and sanitize data
* Implement rate limiting and throttling
* Implement logging and monitoring for security events
…

----------------------------------------

TITLE: Creating Extension Pack using Yeoman Generator
DESCRIPTION: Command to run the Yeoman VS Code extension generator for creating a new Extension Pack.

LANGUAGE: zsh
CODE:
yo code

----------------------------------------

TITLE: Configuring List Focus Selection Keybinding
DESCRIPTION: JSON keybinding configuration to select items in lists while preserving focus using the list.selectAndPreserveFocus command.

LANGUAGE: json
CODE:
{
  "key": "ctrl+o",
  "command": "list.selectAndPreserveFocus"
}

----------------------------------------

TITLE: Implementing Bi-directional Communication with WebAssembly
DESCRIPTION: This example shows how to implement logging from WebAssembly code to the TypeScript host in a VS Code extension.

LANGUAGE: typescript
CODE:
export async function activate(context: vscode.ExtensionContext): Promise<void> {
	const log = vscode.window.createOutputChannel('Calculator - Log', { log: true });
	context.subscriptions.push(log);

	const service: calculator.Imports = {
		log: (msg: string) => {
			log.info(msg);
		}
	};

	const imports = calculator._.imports.create(service, wasmContext);
	const instance = await WebAssembly.instantiate(module, imports);
}

----------------------------------------

TITLE: Configuring Markdown copyFiles destination in VS Code settings
DESCRIPTION: This snippet demonstrates how to configure the destination for copied Markdown files using the markdown.copyFiles.destination setting in VS Code. It shows an example of mapping file paths to specific image directories.

LANGUAGE: jsonc
CODE:
"markdown.copyFiles.destination": {
  "/docs/**/*": "images/${documentBaseName}/"
}

----------------------------------------

TITLE: Configuring Semantic Token Colors in Themes
DESCRIPTION: Setting in color themes to define rules for coloring semantic tokens reported by language extensions. This example colors readonly Java variable declarations green and bold.

LANGUAGE: JSON
CODE:
"semanticHighlighting": true,
"semanticTokenColors": {
    "variable.declaration.readonly:java": { "foreground": "#00ff00" "fontStyle": "bold" }
}

----------------------------------------

TITLE: Configuring Automatic Language Detection in VS Code
DESCRIPTION: JSON configuration to enable automatic language detection for untitled files in Visual Studio Code.

LANGUAGE: JSON
CODE:
"jupyter.experimental.debugging": true

----------------------------------------

TITLE: Defining context keys for editor states in Visual Studio Code
DESCRIPTION: Renames several editor-related context keys used for keybindings, including active editor dirtiness, pinned state, and preview state.

LANGUAGE: typescript
CODE:
groupActiveEditorDirty -> activeEditorIsDirty
editorPinned -> activeEditorIsNotPreview
editorSticky -> activeEditorIsPinned

----------------------------------------

TITLE: Configuring SSL and Environment Variables in VS Code tasks.json
DESCRIPTION: This JSON configuration enables SSL and sets the ASPNETCORE_URLS environment variable for a .NET application running in a Docker container.

LANGUAGE: json
CODE:
dockerRun: {
    "env": {
       "ASPNETCORE_URLS": "https://+:5001;http://+:5000"
   }
 },
netCore: {
     "appProject": "${workspacefolder}/MyProject.csproj",
     "enableDebugging": true,
     "configureSsl": true
 }

----------------------------------------

TITLE: Configuring Editor Associations for Custom Editors
DESCRIPTION: Setting to configure which custom editor is used for specific file types. This example associates .catScratch files with a custom cat scratch editor.

LANGUAGE: JSON
CODE:
"workbench.editorAssociations": [
  {
    "viewType": "catCustoms.catScratch",
    "filenamePattern": "*.catScratch"
  }
]

----------------------------------------

TITLE: Creating Hello World C++ Program
DESCRIPTION: A simple C++ program that demonstrates the use of vectors and strings to print a hello world message.

LANGUAGE: cpp
CODE:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
    vector<string> msg {"Hello", "C++", "World", "from", "VS Code", "and the C++ extension!"};

    for (const string& word : msg)
    {
        cout << word << " ";
    }
    cout << endl;

    return 0;
}

----------------------------------------

TITLE: Sample launch.json Configuration for Debugging C++ on macOS
DESCRIPTION: A launch.json file that configures VS Code for debugging C++ programs using Clang on macOS.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "C/C++: clang++ build and debug active file",
            "type": "cppdbg",
            "request": "launch",
            "program": "${fileDirname}/${fileBasenameNoExtension}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${fileDirname}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "lldb",
            "preLaunchTask": "C/C++: clang++ build active file"
        }
    ],
    "version": "2.0.0"
}

----------------------------------------

TITLE: Setting Color Theme in User Settings
DESCRIPTION: JSON configuration to specify the color theme used in the VS Code workbench.

LANGUAGE: json
CODE:
  "workbench.colorTheme": "Solarized Dark"

----------------------------------------

TITLE: Configuring Auto Attach Smart Pattern in VS Code settings
DESCRIPTION: This configuration snippet shows how to customize the Auto Attach Smart Pattern setting in Visual Studio Code to include or exclude specific scripts from automatic debugging.

LANGUAGE: json
CODE:
[
  "!**/node_modules/**",
  "**/$KNOWN_TOOLS$/**",
  "!**/node_modules/mocha/**",
  "**/node_modules/my-cool-test-runner/**"
]

----------------------------------------

TITLE: Defining Natvis XML Schema for Custom C++ Object Visualization
DESCRIPTION: This XML schema defines the structure and elements for Natvis visualization files. It includes definitions for type visualizers, display strings, expansion rules, and other components used to create custom views of native C++ objects in debuggers.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="utf-8"?>
<xs:schema targetNamespace="http://schemas.microsoft.com/vstudio/debugger/natvis/2010" xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010" attributeFormDefault="unqualified" elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Definition of complex named types-->

  <xs:simpleType name="GuidType">
    <xs:annotation>
      <xs:documentation>Values of this type will look like: "01234567-89AB-CDEF-0123-456789ABCDEF" or "{01234567-89AB-CDEF-0123-456789ABCDEF}".</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[{(]?[0-9A-Fa-f]{8}\-?[0-9A-Fa-f]{4}\-?[0-9A-Fa-f]{4}\-?[0-9A-Fa-f]{4}\-?[0-9A-Fa-f]{12}[})]?"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- ... (truncated for brevity) ... -->

  <xs:element name="AutoVisualizer">
    <xs:annotation>
      <xs:documentation>Root element of the natvis file.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="1" name="Version" type="VersionType">
          <xs:annotation>
            <xs:documentation>Specifies a matching module name and version for all visualizers which do not explicitly specify a module name and version in this file.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="1" name="LocalizedStrings" type="LocalizedStringsType"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" name="UIVisualizer" type="UIVisualizerType"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element minOccurs="0" maxOccurs="unbounded" name="Type" type="VisualizerType" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="HResult" type="HResultType"/>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="Intrinsic" type="IntrinsicType" />
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>

----------------------------------------

TITLE: NPM Path Configuration in VS Code Settings
DESCRIPTION: VS Code settings.json configuration for specifying custom npm executable path.

LANGUAGE: json
CODE:
{
  "typescript.npm": "C:\\Program Files\\nodejs\\npm.cmd"
}

----------------------------------------

TITLE: Configuring Readonly Files in package.json
DESCRIPTION: This JSON snippet shows how to configure the 'engines' field in package.json to target VS Code version 1.57.0 or newer. This is used to enable new behaviors for typed arrays in webviews.

LANGUAGE: JSON
CODE:
"engines": {
  "vscode": "^1.57.0",
}

----------------------------------------

TITLE: Registering a Semantic Token Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create and register a semantic token provider for Java files. It defines token types and modifiers, creates a legend, and implements the provider with a sample token.

LANGUAGE: typescript
CODE:
const tokenTypes = ['class', 'interface', 'enum', 'function', 'variable'];
const tokenModifiers = ['declaration', 'documentation'];
const legend = new vscode.SemanticTokensLegend(tokenTypes, tokenModifiers);

const provider: vscode.DocumentSemanticTokensProvider = {
  provideDocumentSemanticTokens(document: vscode.TextDocument): vscode.ProviderResult<vscode.SemanticTokens> {
    // analyze the document and return semantic tokens

    const tokensBuilder = new vscode.SemanticTokensBuilder(legend);
    // on line 1, characters 1-5 are a class declaration
    tokensBuilder.push(
      new vscode.Range(new vscode.Position(1, 1), new vscode.Position(1, 5)),
      'class',
      ['declaration'],
    );
    return tokensBuilder.build();
  }
};

const selector = { language: 'java', scheme: 'file' }; // register for all Java documents from the local file system

vscode.languages.registerDocumentSemanticTokensProvider(selector, provider, legend);

----------------------------------------

TITLE: Configuring Python File Entry Point in Docker Container
DESCRIPTION: JSON configuration for setting up a Docker container entry point when running a specific Python file. Includes arguments for server configuration.

LANGUAGE: json
CODE:
{
  "tasks": [
    {
      "type": "docker-run",
      "label": "docker-run: debug",
      "dependsOn": [
        "docker-build"
      ],
      "python": {
        "args": [
          "runserver",
          "0.0.0.0:8000",
          "--nothreading",
          "--noreload"
        ],
        "file": "manage.py"
      }
    }
  ]
}

----------------------------------------

TITLE: Inverting if statement in C#
DESCRIPTION: Shows how to invert an if statement without changing the code's meaning using Visual Studio Code's refactoring options.

LANGUAGE: C#
CODE:
// Before
if (condition)
{
    // Do something
}
else
{
    // Do something else
}

// After
if (!condition)
{
    // Do something else
}
else
{
    // Do something
}

----------------------------------------

TITLE: Setting GitHub Copilot Next Edit Suggestions
DESCRIPTION: Configuration setting to enable the Copilot Next Edit Suggestions preview feature

LANGUAGE: json
CODE:
"setting(github.copilot.nextEditSuggestions.enabled)"

----------------------------------------

TITLE: Disabling trailing whitespace trimming for Markdown files in VS Code
DESCRIPTION: This snippet shows how to configure VS Code to keep trailing whitespace in Markdown files, which is necessary for creating hard line breaks. It uses a language-specific setting in settings.json.

LANGUAGE: json
CODE:
{
  "[markdown]": {
    "files.trimTrailingWhitespace": false
  }
}

----------------------------------------

TITLE: Webview Content Security Policy Configuration
DESCRIPTION: Example demonstrating how to set up a content security policy for webviews with local resource restrictions and proper URI handling.

LANGUAGE: typescript
CODE:
const panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {
    // Restrict the webview to only loading local content from our extension's `media` directory.
    localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]
});

const imagePath = vscode.Uri.file(path.join(extensionPath, 'media'));

panel.html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${panel.webview.cspSource} https:;">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cat Coding</title>
</head>
<body>
    <img src="${panel.webview.asWebviewUri(imagePath)}/cat.gif" width="300" />
</body>
</html>`

----------------------------------------

TITLE: Defining a JavaScript Snippet in VS Code
DESCRIPTION: Example of defining a JavaScript snippet that uses new UUID and relative filepath variables.

LANGUAGE: JSON
CODE:
{
  "scope": "javascript",
  "prefix": "newVars",
  "body": "let someId = '${RELATIVE_FILEPATH}/${UUID}'$0"
}

----------------------------------------

TITLE: Configuring format settings in JSON
DESCRIPTION: JSON configuration for controlling format-on-save behavior to only apply to modified lines

LANGUAGE: json
CODE:
"editor.formatOnSaveMode": "modifications"

----------------------------------------

TITLE: Debugging Python Code in VS Code
DESCRIPTION: Instructions for setting breakpoints and starting the debugger for Python applications.

LANGUAGE: plaintext
CODE:
kbstyle(F5) - Start debugging
Select Python File configuration for first-time setup

----------------------------------------

TITLE: Configuring Terminal Shell Settings
DESCRIPTION: Example showing how to configure separate shells for the integrated terminal and automation tasks. Useful when using tmux as your main shell.

LANGUAGE: json
CODE:
{
  "terminal.integrated.shell.osx": "/Users/user/bin/tmux_script",
  "terminal.integrated.automationShell.osx": "bash"
}

----------------------------------------

TITLE: Building and Running Rust Project
DESCRIPTION: Commands to build and execute a Rust project using Cargo.

LANGUAGE: bash
CODE:
cargo build
cargo run

----------------------------------------

TITLE: Git Configuration for VS Code as Diff and Merge Tool
DESCRIPTION: Git configuration settings to use VS Code as the default diff and merge tool for Git operations.

LANGUAGE: ini
CODE:
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
    tool = code
[mergetool "code"]
    cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED

----------------------------------------

TITLE: Configuring Multi-root Workspace in VS Code
DESCRIPTION: JSON configuration for a multi-root workspace file (.code-workspace) defining folder paths, display names, and workspace-level settings.

LANGUAGE: json
CODE:
{
    "folders": [
        {
            "name": "Product",
            "path": "vscode"
        },
        {
            "name": "Documentation",
            "path": "vscode-docs"
        },
        {
            "name": "Extension generator",
            "path": "vscode-generator-code"
        }
    ]
}

----------------------------------------

TITLE: Browser Debug Configuration for TypeScript
DESCRIPTION: Launch configuration for debugging TypeScript web applications in Microsoft Edge browser.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "msedge",
            "request": "launch",
            "name": "Launch Edge against localhost",
            "url": "file:///C:/Users/username/HelloWeb/helloweb.html",
            "webRoot": "${workspaceFolder}"
        }
    ]
}

----------------------------------------

TITLE: Adding VS Code to PATH in Zsh on macOS
DESCRIPTION: This snippet adds Visual Studio Code to the PATH environment variable in the Zsh shell configuration file. This allows users to launch VS Code from the terminal using the 'code' command.

LANGUAGE: zsh
CODE:
cat << EOF >> ~/.zprofile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF

----------------------------------------

TITLE: Adding resource context keys in Visual Studio Code
DESCRIPTION: Introduces new context keys for resources in the explorer, including resourceDirname for the folder path and resourcePath for the full path.

LANGUAGE: typescript
CODE:
resourceDirname: string; // folder path of the resource
resourcePath: string; // full path of the resource

----------------------------------------

TITLE: Implementing HistoryMessages Component in TSX
DESCRIPTION: Defines a HistoryMessages component that handles chat history rendering using PrioritizedList to manage message priorities.

LANGUAGE: tsx
CODE:
import {
	UserMessage,
	AssistantMessage,
	PromptElement,
	BasePromptElementProps,
	PrioritizedList,
} from '@vscode/prompt-tsx';
import { ChatContext, ChatRequestTurn, ChatResponseTurn, ChatResponseMarkdownPart } from 'vscode';

interface IHistoryMessagesProps extends BasePromptElementProps {
	history: ChatContext['history'];
}

export class HistoryMessages extends PromptElement<IHistoryMessagesProps> {
	render(): PromptPiece {
		const history: (UserMessage | AssistantMessage)[] = [];
		for (const turn of this.props.history) {
			if (turn instanceof ChatRequestTurn) {
				history.push(<UserMessage>{turn.prompt}</UserMessage>);
			} else if (turn instanceof ChatResponseTurn) {
				history.push(
					<AssistantMessage name={turn.participant}>
						{chatResponseToMarkdown(turn)}
					</AssistantMessage>
				);
			}
		}
		return (
			<PrioritizedList priority={0} descending={false}>
				{history}
			</PrioritizedList>
		);
	}
}

----------------------------------------

TITLE: Creating Flask Instance in Python
DESCRIPTION: Shows how to create a Flask instance in a Python file, which is typically done in the main module or __init__.py file of a package.

LANGUAGE: python
CODE:
from flask import Flask
app = Flask(__name__) # Flask instance named app

----------------------------------------

TITLE: Implementing a Terminal Link Provider in TypeScript
DESCRIPTION: TypeScript code showing how to register and implement a terminal link provider that creates clickable links in the terminal

LANGUAGE: typescript
CODE:
window.registerTerminalLinkProvider({
    provideTerminalLinks: (context, token) => {
        // Detect the first instance of the word "test" if it exists and linkify it
        const startIndex = (context.line as string).indexOf('test');
        if (startIndex === -1) {
            return [];
        }
        // Return an array of link results, this example only returns a single link
        return [
            {
                startIndex,
                length: 'test'.length,
                tooltip: 'Show a notification',
                // You can return data in this object to access inside handleTerminalLink
                data: 'Example data'
            }
        ];
    },
    handleTerminalLink: (link: any) => {
        vscode.window.showInformationMessage(`Link activated (data = ${link.data})`);
    }
});

----------------------------------------

TITLE: Type Checking Example in JavaScript
DESCRIPTION: JavaScript code example showing type checking with @ts-check comment.

LANGUAGE: javascript
CODE:
// @ts-check
let itsAsEasyAs = 'abc'
itsAsEasyAs = 123 // Error: Type '123' is not assignable to type 'string'

----------------------------------------

TITLE: Implementing Value Selection API for QuickPick in VS Code
DESCRIPTION: Example of using the proposed Value Selection API to programmatically select part of the input in a QuickPick control.

LANGUAGE: typescript
CODE:
const qp = vscode.window.createQuickPick();
qp.value = '12345678';
qp.valueSelection = [4, 6];
qp.items = [
	{ label: '12345678', description: 'desc 1' },
	{ label: '12345678', description: 'desc 2' },
	{ label: '12345678', description: 'desc 3' },
];
qp.show();

----------------------------------------

TITLE: Manually Installing VS Code Repository on Debian/Ubuntu
DESCRIPTION: Script for manually installing the Visual Studio Code apt repository and signing key on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
sudo apt-get install wget gpg
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" |sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null
rm -f packages.microsoft.gpg

----------------------------------------

TITLE: Using vscode.env.shell API in VS Code Extensions
DESCRIPTION: The new vscode.env.shell API should be used to get the default shell for the terminal instead of the terminal.integrated.shell.<platform> setting.

LANGUAGE: typescript
CODE:
const shell = vscode.env.shell;
if (shell.search(/(powershell|pwsh)/i) !== -1) {
  // Do something special that PowerShell needs
}

----------------------------------------

TITLE: Configuring Search Editor Command Arguments
DESCRIPTION: JSON keybinding configuration for Search editor command with custom behavior for triggering search and focusing results.

LANGUAGE: json
CODE:
{
    "key": "ctrl+o",
    "command": "search.action.openNewEditor",
    "args": { "query": "VS Code", "triggerSearch":true, "focusResults": false }
}

----------------------------------------

TITLE: Adding Missing C++ Header Files
DESCRIPTION: Demonstrates how to use the Quick Fix feature in Visual Studio Code's C/C++ extension to automatically add missing header file includes to a C++ file.

LANGUAGE: text
CODE:
Add Missing Include in code using a code action

----------------------------------------

TITLE: Registering Command for Virtual Document Creation in TypeScript
DESCRIPTION: This snippet registers a command that prompts for input, creates a URI with a custom scheme, opens a virtual document, and displays it in an editor. It demonstrates how to create and open virtual documents.

LANGUAGE: typescript
CODE:
vscode.commands.registerCommand('cowsay.say', async () => {
  let what = await vscode.window.showInputBox({ placeHolder: 'cow say?' });
  if (what) {
    let uri = vscode.Uri.parse('cowsay:' + what);
    let doc = await vscode.workspace.openTextDocument(uri); // calls back into the provider
    await vscode.window.showTextDocument(doc, { preview: false });
  }
});

----------------------------------------

TITLE: Adding DiagnosticTag.Deprecated in VS Code Extensions
DESCRIPTION: Diagnostic tags allow enriching diagnostic representations in the editor. The new DiagnosticTag.Deprecated tag renders diagnostics with a strike-through line.

LANGUAGE: typescript
CODE:
let diag = new vscode.Diagnostic(range, message);
diag.tags = [vscode.DiagnosticTag.Deprecated];

----------------------------------------

TITLE: Configuring Source File Mapping in launch.json (JSON)
DESCRIPTION: This snippet shows how to set up source file mapping to correlate remote and local file paths in the launch.json file.

LANGUAGE: json
CODE:
"sourceFileMap": {
    // "remote": "local"
    "/home/user/src": "/src/projectA/src"
}

----------------------------------------

TITLE: Creating Missing sources.list.d Directory and vscode.list File
DESCRIPTION: Commands to manually create the sources.list.d directory and an empty vscode.list file to resolve installation issues.

LANGUAGE: bash
CODE:
sudo mkdir /etc/apt/sources.list.d
sudo touch /etc/apt/sources.list.d/vscode.list

----------------------------------------

TITLE: Configuring tasks.json for MSVC Outside Developer Command Prompt
DESCRIPTION: JSON configuration for tasks.json to enable running MSVC compiler without launching VS Code from the Developer Command Prompt.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "windows": {
        "options": {
            "shell": {
                "executable": "cmd.exe",
                "args": [
                    "/C",
                    "\"C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/VsDevCmd.bat\"",
                    "&&"
                ]
            }
        }
    },
    "tasks": [
        {
            "type": "shell",
            "label": "cl.exe build active file",
            "command": "cl.exe",
            "args": [
                "/Zi",
                "/EHsc",
                "/Fe:",
                "${fileDirname}\\${fileBasenameNoExtension}.exe",
                "${file}"
            ],
            "problemMatcher": [
                "$msCompile"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

----------------------------------------

TITLE: Registering markdown-it Plugin Support
DESCRIPTION: JSON configuration to enable markdown-it plugin support in the extension's package.json.

LANGUAGE: json
CODE:
"contributes": {
    "markdown.markdownItPlugins": true
}

----------------------------------------

TITLE: Verifying Dev Container CLI Installation
DESCRIPTION: Command to verify the installation of the Dev Container CLI by displaying its help text and available commands.

LANGUAGE: bash
CODE:
devcontainer <command>

----------------------------------------

TITLE: Defining View Actions in package.json
DESCRIPTION: Demonstrates how to define view actions, including commands and menu contributions, in the extension's package.json file.

LANGUAGE: json
CODE:
"contributes": {
  "commands": [
    {
      "command": "nodeDependencies.refreshEntry",
      "title": "Refresh",
      "icon": {
        "light": "resources/light/refresh.svg",
        "dark": "resources/dark/refresh.svg"
      }
    },
    {
      "command": "nodeDependencies.addEntry",
      "title": "Add"
    },
    {
      "command": "nodeDependencies.editEntry",
      "title": "Edit",
      "icon": {
        "light": "resources/light/edit.svg",
        "dark": "resources/dark/edit.svg"
      }
    },
    {
      "command": "nodeDependencies.deleteEntry",
      "title": "Delete"
    }
  ],
  "menus": {
    "view/title": [
      {
        "command": "nodeDependencies.refreshEntry",
        "when": "view == nodeDependencies",
        "group": "navigation"
      },
      {
        "command": "nodeDependencies.addEntry",
        "when": "view == nodeDependencies"
      }
    ],
    "view/item/context": [
      {
        "command": "nodeDependencies.editEntry",
        "when": "view == nodeDependencies && viewItem == dependency",
        "group": "inline"
      },
      {
        "command": "nodeDependencies.deleteEntry",
        "when": "view == nodeDependencies && viewItem == dependency"
      }
    ]
  }
}

----------------------------------------

TITLE: Python Problem Matcher Configuration
DESCRIPTION: Example task.json configuration showing how to use the new default Python problem matcher to track issues in Python code.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run Python",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": [
                "${file}"
            ],
            "problemMatcher": "$python"
        }
    ]
}

----------------------------------------

TITLE: Defining LogOptions Interface for Git Extension API
DESCRIPTION: TypeScript interface definition for Git extension API LogOptions with optional maxEntries and path parameters.

LANGUAGE: typescript
CODE:
export interface LogOptions {
  readonly maxEntries?: number;
  readonly path?: string;
}
export interface Repository {
  log(options?: LogOptions): Promise<Commit[]>;
}

----------------------------------------

TITLE: Python Problem Matcher Configuration
DESCRIPTION: Example task.json configuration showing how to use the new default Python problem matcher to track issues in Python code.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run Python",
            "type": "shell",
            "command": "${command:python.interpreterPath}",
            "args": [
                "${file}"
            ],
            "problemMatcher": "$python"
        }
    ]
}

----------------------------------------

TITLE: Configuring Docker Compose for remote development with login access
DESCRIPTION: Updates a Docker Compose file to use a bind mount for the workspace when developing on a remote host with login access.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
      - /absolute/path/on/remote/machine:/workspace:cached
    # ...

----------------------------------------

TITLE: Using Authentication API in VS Code Extension
DESCRIPTION: TypeScript code demonstrating how to use the new authentication API to get sessions for specific scopes.

LANGUAGE: typescript
CODE:
const sessions = await vscode.authentication.getSessions('github', ['repo']);
const newSession = await vscode.authentication.getSession('github', ['repo'], { createIfNone: true, clearSessionPreference: true });

----------------------------------------

TITLE: Executing Terminal Commands with Shell Integration
DESCRIPTION: Example demonstrating how to execute commands in the terminal with shell integration support

LANGUAGE: typescript
CODE:
const commandLine = 'echo "Hello world"';
if (term.shellIntegration) {
    const execution = shellIntegration.executeCommand({ commandLine });
    window.onDidEndTerminalShellExecution(event => {
        if (event.execution === execution) {
            console.log(`Command exited with code ${event.exitCode}`);
        }
    });
} else {
    term.sendText(commandLine);
    // Without shell integration, we can't know when the command has finished or what the
    // exit code was.
}

----------------------------------------

TITLE: Installing VS Code via dnf on Fedora
DESCRIPTION: Commands for updating the package cache and installing Visual Studio Code using dnf on Fedora 22 and above.

LANGUAGE: bash
CODE:
dnf check-update
sudo dnf install code # or code-insiders

----------------------------------------

TITLE: Creating a Background Terminal in Visual Studio Code Extension
DESCRIPTION: This TypeScript code demonstrates how to create a background terminal and then show it in the panel using the proposed runInBackground option.

LANGUAGE: typescript
CODE:
// Create a background terminal
const terminal = window.createTerminal({ runInBackground: true });

// Show the terminal in the panel
terminal.show();

----------------------------------------

TITLE: Configuring Import Module Specifier Ending in JavaScript
DESCRIPTION: Setting to control the style of imports that VS Code's auto imports use in JavaScript. Possible values are 'auto', 'minimal', 'index', and 'js'.

LANGUAGE: JSON
CODE:
"javascript.preferences.importModuleSpecifierEnding": "auto"

----------------------------------------

TITLE: Creating Download Links for Java Coding Pack in HTML
DESCRIPTION: This HTML snippet creates download buttons for the Java Coding Pack for Windows and macOS. It includes onclick events to track downloads and href attributes linking to the installer packages.

LANGUAGE: html
CODE:
<a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'win')" href="https://aka.ms/vscode-java-installer-win">Download - Windows</a>
<a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'mac')" href="https://aka.ms/vscode-java-installer-mac">Download - macOS</a>

----------------------------------------

TITLE: Enabling Proposed APIs in Visual Studio Code Extension
DESCRIPTION: This code snippet shows how to enable proposed APIs in a Visual Studio Code extension's package.json file.

LANGUAGE: json
CODE:
"enableProposedApi": true

----------------------------------------

TITLE: Setting Keyboard Shortcut to Close Editor Group in VS Code
DESCRIPTION: JSON configuration to set a keyboard shortcut for closing an entire editor group in Visual Studio Code (macOS and Windows/Linux versions).

LANGUAGE: json
CODE:
// macOS
{ "key": "cmd+w", "command": "workbench.action.closeEditorsInGroup" }

// Windows/Linux
{ "key": "ctrl+w", "command": "workbench.action.closeEditorsInGroup" }

----------------------------------------

TITLE: Configuring Fallback Ligatures for Terminal in VS Code
DESCRIPTION: This code demonstrates how to specify a custom list of fallback ligatures for the terminal, limiting ligatures to 'ff', 'fi', and 'fl'.

LANGUAGE: json
CODE:
"terminal.integrated.fontLigatures.fallbackLigatures": [
    "ff",
    "fi",
    "fl"
]

----------------------------------------

TITLE: Resolving npm Symlinks on macOS
DESCRIPTION: Bash commands to resolve and remove outdated npm symlinks that may cause conflicts with nvm in VS Code's integrated terminal on macOS.

LANGUAGE: bash
CODE:
ls -la /usr/local/bin | grep "np[mx]"

LANGUAGE: bash
CODE:
rm /usr/local/bin/npm /usr/local/lib/node_modules/npm/bin/npm-cli.js
rm /usr/local/bin/npx /usr/local/lib/node_modules/npm/bin/npx-cli.js

----------------------------------------

TITLE: Debug Configuration JSON Schema
DESCRIPTION: Launch configuration for connecting to a mock debug server running on port 4711

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "mock",
      "request": "launch",
      "name": "mock test",
      "program": "${workspaceFolder}/readme.md",
      "stopOnEntry": true,
      "debugServer": 4711
    }
  ]
}

----------------------------------------

TITLE: Creating Docker Context for Remote Connection
DESCRIPTION: Command to create a new Docker context that points to a remote machine running Docker engine using SSH connection details.

LANGUAGE: shell
CODE:
docker context create my-remote-docker-machine --docker "host=ssh://username@host:port"

----------------------------------------

TITLE: Cross-Group Editor Navigation Configuration
DESCRIPTION: JSON configuration for setting up keyboard shortcuts to navigate between editors across all editor groups in VS Code.

LANGUAGE: json
CODE:
[
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    }
]

----------------------------------------

TITLE: Implementing an Inline Debug Adapter
DESCRIPTION: Example implementation of a minimal inline debug adapter using the VS Code debug adapter protocol

LANGUAGE: typescript
CODE:
class InlineDebugAdapter implements vscode.DebugAdapter {

  private sendMessage = new vscode.EventEmitter<DebugProtocol.ProtocolMessage>();
  private sequence: 1;

  readonly onDidSendMessage: vscode.Event<DebugProtocol.ProtocolMessage> = this.sendMessage.event;

  handleMessage(message: DebugProtocol.ProtocolMessage): void {
    switch (message.type) {
      case 'request':
        const request = <DebugProtocol.Request> message;
        switch (request.command) {
          case 'initialize':
            const response: DebugProtocol.Response = {
              type: 'response',
              seq: this.sequence++,
              success: true,
              request_seq: request.seq,
              command: request.command,
            };
            this.sendMessage.fire(response);
            break;
          // many more requests needs to be handled here...
          default:
            break;
        }
        break;
      case 'response':
        break;
      case 'event':
        break;
    }
  }

  dispose() {
    // clean up resources
  }
}

----------------------------------------

TITLE: Configuring Auto Save for Markdown Files in VS Code
DESCRIPTION: This snippet demonstrates how to configure Auto Save specifically for Markdown files in VS Code. It uses language-specific settings to enable Auto Save after a delay for Markdown files only.

LANGUAGE: json
CODE:
{
  "[markdown]": {
    "files.autoSave": "afterDelay"
  }
}

----------------------------------------

TITLE: Configuring Docker Compose for remote development without login access
DESCRIPTION: Updates a Docker Compose file to use a named volume for the workspace when developing on a remote host without login access.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
        - remote-workspace:/workspace
    # ...

volumes:
  remote-workspace:

----------------------------------------

TITLE: Configuring Auto Test Discovery File Pattern for Python in VS Code
DESCRIPTION: Demonstrates how to configure the file pattern for automatic test discovery in Python using a VS Code setting.

LANGUAGE: json
CODE:
"setting(python.testing.autoTestDiscoverOnSavePattern)": "**/*.py"

----------------------------------------

TITLE: Installing VS Code via zypper on openSUSE and SLE
DESCRIPTION: Command for installing Visual Studio Code using zypper on openSUSE and SLE-based systems.

LANGUAGE: bash
CODE:
sudo zypper install code

----------------------------------------

TITLE: Sending Chat Requests with Copilot Models in VS Code Extensions
DESCRIPTION: Example of how to send a chat request and process the response stream using a selected Copilot chat model.

LANGUAGE: typescript
CODE:
// take the first model and say "Hello"
const [chat] = models;
const messages = [vscode.LanguageModelChatMessage.User('Hello')];
const response = await chat.sendRequest(messages);

// the response is always an async iterable that can be consumed with for-await
for await (const part of response.text) {
	console.log(part)
}

----------------------------------------

TITLE: Installing Chrome Debugger Extension Command
DESCRIPTION: Command to open the Extensions view in VS Code for installing the Chrome Debugger extension

LANGUAGE: plaintext
CODE:
kb(workbench.view.extensions)

----------------------------------------

TITLE: Disabling Inlay Hints for Ruby LSP in VS Code Settings
DESCRIPTION: This JSON configuration disables the inlay hints feature specifically for Ruby LSP in VS Code settings. It can be used if you prefer not to see inlay hints in your Ruby code.

LANGUAGE: json
CODE:
"rubyLsp.enabledFeatures": {
    "inlayHint": false,
}

----------------------------------------

TITLE: Simple Node.js Express Server in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates a simple Node.js Express server that listens on port 3000 and responds with 'Hello World!' to the root URL.

LANGUAGE: JavaScript
CODE:
var express = require('express');
var app = express();

app.get('/', function (req, res) {
  res.send('Hello World!')
});

app.listen(3000, function () {
  console.log('Example app listening on port 3000!')
});

----------------------------------------

TITLE: Configuring Keyboard Shortcut for Terminating All Tasks in VS Code
DESCRIPTION: JSON configuration for creating a keyboard shortcut to terminate all running tasks in Visual Studio Code.

LANGUAGE: json
CODE:
{
  "key": "ctrl+k t",
  "command": "workbench.action.tasks.terminate",
  "args": "terminateAll"
}

----------------------------------------

TITLE: Installing VS Code .rpm Package Manually
DESCRIPTION: Command for manually installing the Visual Studio Code .rpm package using dnf on RHEL/Fedora/CentOS systems.

LANGUAGE: bash
CODE:
sudo dnf install <file>.rpm

----------------------------------------

TITLE: Configuring Editor Layout with JSON
DESCRIPTION: Example JSON configuration for creating a custom grid editor layout using the layoutEditorGroups command

LANGUAGE: json
CODE:
{
    "key": "Ctrl+0",
    "command": "layoutEditorGroups",
    "args": {
        "orientation": 1,
        "groups": [{ "size": 0.2 }, { "size": 0.6 }, { "size": 0.2, "groups": [{}, {}] }]
    }
}

----------------------------------------

TITLE: Sample c_cpp_properties.json Configuration for Clang on macOS
DESCRIPTION: A c_cpp_properties.json file that configures IntelliSense and other C++ settings for Clang on macOS.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Mac",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "macFrameworkPath": [
                "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks"
            ],
            "compilerPath": "/usr/bin/clang",
            "cStandard": "c11",
            "cppStandard": "c++17",
            "intelliSenseMode": "macos-clang-arm64"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Excluding Folders from VS Code File Search
DESCRIPTION: JSON configuration to exclude specific large folders from VS Code's file search to improve performance when opening folders.

LANGUAGE: json
CODE:
    "files.exclude": {
        "**/largeFolder": true
    }

----------------------------------------

TITLE: Docker Context Management
DESCRIPTION: Commands for managing Docker contexts, including listing available contexts and switching to the default context.

LANGUAGE: bash
CODE:
# Displays the list of contexts, '*' denotes the current context
docker context list

# Switches the list to the 'default' context
docker context use default

----------------------------------------

TITLE: Voice Command Keyboard Shortcuts
DESCRIPTION: Keyboard shortcuts for controlling voice dictation and chat features

LANGUAGE: plaintext
CODE:
kb(workbench.action.editorDictation.start)
kb(workbench.action.editorDictation.stop)
kb(workbench.action.chat.startVoiceChat)
kb(workbench.action.speech.stopReadAloud)

----------------------------------------

TITLE: Enabling WSL via PowerShell in Windows
DESCRIPTION: This PowerShell command enables the Windows Subsystem for Linux feature on a Windows machine. It requires administrator privileges and will prompt for a system restart.

LANGUAGE: powershell
CODE:
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux

----------------------------------------

TITLE: Configuring Docker Socket Mapping in devcontainer.json
DESCRIPTION: JSON configuration to map the Docker socket from host to development container, enabling Docker CLI functionality inside the container.

LANGUAGE: json
CODE:
    "runArgs": [ "-v", "/var/run/docker.sock:/var/run/docker.sock"]

----------------------------------------

TITLE: Defining Custom Snippets in Visual Studio Code
DESCRIPTION: JSON configuration for creating a custom snippet that includes the workspace name variable in VS Code.

LANGUAGE: JSON
CODE:
"header": {
  "scope": "javascript,typescript",
  "prefix": "workspace",
  "body": ["// the ${WORKSPACE_NAME}-project"],
  "description": "Log output to console"
}

----------------------------------------

TITLE: Enabling Experimental Edit Sessions in VS Code
DESCRIPTION: Enables the experimental Edit Sessions feature, which allows users to carry their uncommitted changes across different development environments when using the 'Continue Working On' command.

LANGUAGE: json
CODE:
"workbench.experimental.editSessions.enabled": true

----------------------------------------

TITLE: Configuring Docker environment for remote SSH connection
DESCRIPTION: Sets up the Docker extension to connect to a remote Docker host using SSH protocol. Requires a supported SSH client and key-based authentication.

LANGUAGE: json
CODE:
"docker.environment": {
    "DOCKER_HOST": "ssh://your-remote-user@your-remote-machine-fqdn-or-ip-here"
}

----------------------------------------

TITLE: Using the new RelativePattern API for file matching
DESCRIPTION: The new RelativePattern API allows filtering file paths relative to a specific WorkspaceFolder.

LANGUAGE: typescript
CODE:
// Construct a relative pattern for the first root folder
const relativePattern = new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '*.ts');

----------------------------------------

TITLE: TypeScript Add Function Example
DESCRIPTION: Example showing refactoring of an add function to demonstrate the inline variable refactoring feature.

LANGUAGE: typescript
CODE:
function add(a, b) {
  const result = a + b;
  return result
}

----------------------------------------

TITLE: Installing SVG Viewer Extension in VS Code
DESCRIPTION: This snippet shows the specific command to install the SVG Viewer extension using VS Code's Quick Open feature.

LANGUAGE: markdown
CODE:
>**Install:** Quick Open (`kb(workbench.action.quickOpen)`), paste `ext install vscode-svgviewer` and press `kbstyle(Enter)`.

----------------------------------------

TITLE: Configuring Terminal Renderer Type in Visual Studio Code
DESCRIPTION: Setting to use the DOM renderer for the integrated terminal instead of canvas, which can improve performance in certain environments.

LANGUAGE: JSON
CODE:
{
  "terminal.integrated.rendererType": "dom"
}

----------------------------------------

TITLE: Registering Resource Label Formatter in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to use the proposed API for registering a resource label formatter, which allows customizing how URIs are displayed in the workbench.

LANGUAGE: TypeScript
CODE:
export interface ResourceLabelFormatter {
  scheme: string;
  authority?: string;
  formatting: ResourceLabelFormatting;
}

export interface ResourceLabelFormatting {
  label: string; // myLabel:/${path}
  separator: '/' | '\\' | '';
  tildify?: boolean;
  normalizeDriveLetter?: boolean;
  workspaceSuffix?: string;
  authorityPrefix?: string;
}

export namespace workspace {
  export function registerResourceLabelFormatter(formatter: ResourceLabelFormatter): Disposable;
}

----------------------------------------

TITLE: Container Configuration JSON Structure
DESCRIPTION: JSON configuration format for Dev Containers showing workspace folder path, extension references, and port forwarding settings.

LANGUAGE: json
CODE:
{
    "workspaceFolder": "/scripts",
    "extensions": [
        "ms-vscode.azurecli"
    ],
    "forwardPorts": [
        3000
    ]
}

----------------------------------------

TITLE: JavaScript Validation Settings
DESCRIPTION: Configuration options to control JavaScript semantic and syntax validation in VS Code.

LANGUAGE: json
CODE:
{
  "javascript.validate.semanticValidation": true,
  "javascript.validate.syntaxValidation": true
}

----------------------------------------

TITLE: Configuring Node.js Attach Launch Configuration in VS Code
DESCRIPTION: Example of a launch configuration in launch.json for attaching to a Node.js application running in a Docker container.

LANGUAGE: json
CODE:
"configurations": [
    {
        "type": "node",
        "request": "attach",
        "name": "Docker: Attach to Node",
        "remoteRoot": "/usr/src/app",
        "port": 9229
    }
]

----------------------------------------

TITLE: Creating a React Form Generation Prompt in Markdown
DESCRIPTION: This snippet shows a reusable prompt file for generating React form components. It includes instructions on form requirements, design system usage, and state management libraries to use.

LANGUAGE: markdown
CODE:
Your goal is to generate a new React form component.

Ask for the form name and fields if not provided.

Requirements for the form:
* Use form design system components: [design-system/Form.md](../docs/design-system/Form.md)
* Use `react-hook-form` for form state management:
* Always define TypeScript types for your form data
* Prefer *uncontrolled* components using register
* Use `defaultValues` to prevent unnecessary rerenders
* Use `yup` for validation:
* Create reusable validation schemas in separate files
* Use TypeScript types to ensure type safety
* Customize UX-friendly validation rules

----------------------------------------

TITLE: Configuring Auto Replies for Oh My Zsh Updates in VS Code
DESCRIPTION: This snippet demonstrates how to set up an automatic reply for the Oh My Zsh update prompt in VS Code's integrated terminal.

LANGUAGE: json
CODE:
"terminal.integrated.autoReplies": {
  "[Oh My Zsh] Would you like to check for updates? [Y/n]": "Y\r"
}

----------------------------------------

TITLE: Configuring a Background Task for TypeScript Watching
DESCRIPTION: This snippet demonstrates how to configure a background task for the TypeScript compiler in watch mode, including the problem matcher and background patterns.

LANGUAGE: JSON
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "watch",
            "command": "tsc",
            "args": ["--watch"],
            "isBackground": true,
            "problemMatcher": {
                "owner": "typescript",
                "fileLocation": "relative",
                "pattern": {
                    "regexp": "^([^\\s].*)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\):\\s+(error|warning|info)\\s+(TS\\d+)\\s*:\\s*(.*)$",
                    "file": 1,
                    "location": 2,
                    "severity": 3,
                    "code": 4,
                    "message": 5
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": "^\\s*\\d{1,2}:\\d{1,2}:\\d{1,2}(?: AM| PM)? - File change detected\\. Starting incremental compilation\\.\\.\\.",
                    "endsPattern": "^\\s*\\d{1,2}:\\d{1,2}:\\d{1,2}(?: AM| PM)? - Compilation complete\\. Watching for file changes\\."
                }
            }
        }
    ]
}

----------------------------------------

TITLE: Starting Express Application
DESCRIPTION: Command to start the Express application server using npm start script.

LANGUAGE: bash
CODE:
npm start

----------------------------------------

TITLE: Configuring Custom Test Generation Instructions in JSON
DESCRIPTION: This snippet demonstrates how to define custom test generation instructions for GitHub Copilot in the VS Code settings.json file. It specifies which testing frameworks to use for different types of code.

LANGUAGE: json
CODE:
  "github.copilot.chat.testGeneration.instructions": [
    {
      "text": "Always use vitest for testing React components."
    },
    {
      "text": "Use Jest for testing JavaScript code."
    },
    {
      "file": "code-style.md" // import instructions from file `code-style.md`
    }
  ],

----------------------------------------

TITLE: Setting Auto Fix on Save for TSLint in Visual Studio Code
DESCRIPTION: Shows how to configure VS Code to automatically fix TSLint issues on file save using the source.fixAll code action.

LANGUAGE: json
CODE:
{
  "editor.codeActionsOnSave": {
    "source.fixAll": true
  }
}

----------------------------------------

TITLE: Configuring View Size in Extension package.json
DESCRIPTION: Specify size weights for contributed views in the extension's package.json to control their relative sizes.

LANGUAGE: JSON
CODE:
"contributes": {
    "views": {
        "github-pull-request": [
            {
                "id": "github:createPullRequest",
                "type": "webview",
                "name": "Create Pull Request",
                "size": 2
            },
            {
                "id": "github:compareChanges",
                "name": "Compare Changes",
                "size": 1
            }
        ]
    }
}

----------------------------------------

TITLE: Defining Menu Items in package.json
DESCRIPTION: Contributes menu items for commands to various parts of the VS Code UI, such as the editor context menu or command palette.

LANGUAGE: json
CODE:
{
  "contributes": {
    "menus": {
      "editor/title": [
        {
          "when": "resourceLangId == markdown",
          "command": "markdown.showPreview",
          "alt": "markdown.showPreviewToSide",
          "group": "navigation"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Registering an EvaluatableExpressionProvider in VS Code
DESCRIPTION: Shows how to register an EvaluatableExpressionProvider for a language to provide expressions for debug hover evaluation.

LANGUAGE: typescript
CODE:
vscode.languages.registerEvaluatableExpressionProvider('markdown', {
  provideEvaluatableExpression(document: vscode.TextDocument, position: vscode.Position):
                              vscode.ProviderResult<vscode.EvaluatableExpression> {
    const wordRange = document.getWordRangeAtPosition(position);
    if (wordRange) {
      return new vscode.EvaluatableExpression(wordRange);
    }
    return undefined; // nothing evaluatable found under mouse
  }
});

----------------------------------------

TITLE: Configuring Pinned Editor Close Behavior
DESCRIPTION: Example showing different settings for controlling how pinned tabs respond to close actions via keyboard or mouse.

LANGUAGE: json
CODE:
{
  "workbench.editor.preventPinnedEditorClose": "keyboardAndMouse"
}

----------------------------------------

TITLE: Configuring Git Project Manager Settings in VS Code
DESCRIPTION: JSON configuration for specifying base project folders in Git Project Manager extension settings.json file

LANGUAGE: json
CODE:
"gitProjectManager.baseProjectsFolders": [
    "/path/to/your/base/project/folders"
]

----------------------------------------

TITLE: Loading and Executing WebAssembly in VS Code Extension
DESCRIPTION: This snippet shows how to load a WebAssembly module, bind it to a worker, and execute calculations asynchronously in a VS Code extension.

LANGUAGE: typescript
CODE:
const channel = vscode.window.createOutputChannel('Calculator');
context.subscriptions.push(channel);

const log = vscode.window.createOutputChannel('Calculator - Log', { log: true });
context.subscriptions.push(log);

const service: calculator.Imports.Promisified = {
	log: async (msg: string): Promise<void> => {
		await new Promise(resolve => setTimeout(resolve, 100));
		log.info(msg);
	}
};

const filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'calculator.wasm');
const bits = await vscode.workspace.fs.readFile(filename);
const module = await WebAssembly.compile(bits);

const worker = new Worker(vscode.Uri.joinPath(context.extensionUri, './out/worker.js').fsPath);
const api = await calculator._.bind(service, module, worker);

vscode.commands.registerCommand('vscode-samples.wasm-component-model-async.run', async () => {
	channel.show();
	channel.appendLine('Running calculator example');
	const add = Types.Operation.Add({ left: 1, right: 2});
	channel.appendLine(`Add ${await api.calc(add)}`);
	const sub = Types.Operation.Sub({ left: 10, right: 8 });
	channel.appendLine(`Sub ${await api.calc(sub)}`);
	const mul = Types.Operation.Mul({ left: 3, right: 7 });
	channel.appendLine(`Mul ${await api.calc(mul)}`);
	const div = Types.Operation.Div({ left: 10, right: 2 });
	channel.appendLine(`Div ${await api.calc(div)}`);
});

----------------------------------------

TITLE: Configuring Visual Studio Code Keybinding for SCM Input
DESCRIPTION: This JSON snippet shows how to configure a custom keybinding to close the Source Control Management (SCM) panel when the Output panel is active in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "key": "cmd+shift+u",
    "command": "workbench.action.closePanel",
    "when": "activePanel==workbench.panel.output"
}

----------------------------------------

TITLE: Creating Project Directory and Opening VS Code
DESCRIPTION: Terminal commands to create a new project directory named 'helloworld' and open it in Visual Studio Code.

LANGUAGE: bash
CODE:
mkdir helloworld
cd helloworld
code .

----------------------------------------

TITLE: Contributing Tree View in package.json
DESCRIPTION: Defines the Tree View contribution in the extension's package.json file, specifying the view ID, name, and location.

LANGUAGE: json
CODE:
{
    "name": "custom-view-samples",
    "displayName": "Custom view Samples",
    "description": "Samples for VS Code's view API",
    "version": "0.0.1",
    "publisher": "alexr00",
    "engines": {
        "vscode": "^1.74.0"
    },
    "activationEvents": [],
    "main": "./out/extension.js",
    "contributes": {
        "views": {
            "explorer": [
                {
                    "id": "nodeDependencies",
                    "name": "Node Dependencies"
                }
            ]
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./"
    },
    "devDependencies": {
        "@types/node": "^10.12.21",
        "@types/vscode": "^1.42.0",
        "typescript": "^3.5.1",
        "tslint": "^5.12.1"
    }
}

----------------------------------------

TITLE: Defining WebAssembly Interface Types (WIT) for a Calculator
DESCRIPTION: This WIT file defines the interface for a simple calculator component, including operand types and supported operations.

LANGUAGE: wit
CODE:
package vscode:example;

interface types {
	record operands {
		left: u32,
		right: u32
	}

	variant operation {
		add(operands),
		sub(operands),
		mul(operands),
		div(operands)
	}
}
world calculator {
	use types.{ operation };

	export calc: func(o: operation) -> u32;
}

----------------------------------------

TITLE: Configuring Docker Run Task in VS Code
DESCRIPTION: JSON configuration for tasks.json showing how to set up a docker-run task with proper port configuration for a Python Django application.

LANGUAGE: json
CODE:
{
  "type": "docker-run",
  "label": "docker-run: debug",
  "dependsOn": [
    "docker-build"
  ],
  "python": {
    "args": [
      "runserver",
      "0.0.0.0:1024",
      "--nothreading",
      "--noreload"
    ],
    "file": "manage.py"
  }
}

----------------------------------------

TITLE: Generating ECDSA SSH Key for Windows Compatibility
DESCRIPTION: Commands to generate an ECDSA-type SSH key and add it to the SSH agent, working around compatibility issues with older Windows 10 builds.

LANGUAGE: shell
CODE:
ssh-keygen -t ecdsa -b 521
ssh-add id_ecdsa

----------------------------------------

TITLE: Configuring VS Code as Default Git Merge Tool
DESCRIPTION: Bash commands to set VS Code as the default merge tool for Git.

LANGUAGE: bash
CODE:
git config --global merge.tool vscode
git config --global mergetool.vscode.cmd 'code --wait $MERGED'

----------------------------------------

TITLE: Configuring Launch Configuration with Folder Scoping in VS Code
DESCRIPTION: JSON configuration showing how to scope variables to specific folders in a launch configuration.

LANGUAGE: json
CODE:
"launch": {
  "configurations": [{
      "type": "node",
      "request": "launch",
      "name": "Launch test",
      "program": "${workspaceFolder:Program}/test.js",
      "skipFiles": [
        "${workspaceFolder:Library}/out/**/*.js"
      ]
  }]
}

----------------------------------------

TITLE: Keyboard Shortcut Reference in Markdown
DESCRIPTION: Markdown keyboard shortcut references used throughout the documentation using VS Code's kb macro syntax

LANGUAGE: markdown
CODE:
`kb(workbench.view.extensions)`
`kb(workbench.action.output.toggleOutput)`

----------------------------------------

TITLE: Configuring ESLint for ES6 in VS Code
DESCRIPTION: JSON configuration for ESLint to enable ES6 features and set specific linting rules.

LANGUAGE: json
CODE:
{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
        "node": true
    },
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true,
            "classes": true,
            "defaultParams": true
        }
    },
    "rules": {
        "no-const-assign": 1,
        "no-extra-semi": 0,
        "semi": 0,
        "no-fallthrough": 0,
        "no-empty": 0,
        "no-mixed-spaces-and-tabs": 0,
        "no-redeclare": 0,
        "no-this-before-super": 1,
        "no-undef": 1,
        "no-unreachable": 1,
        "no-use-before-define": 0,
        "constructor-super": 1,
        "curly": 0,
        "eqeqeq": 0,
        "func-names": 0,
        "valid-typeof": 1
    }
}

----------------------------------------

TITLE: Implementing Conditional Schema Evaluation in JSON
DESCRIPTION: JSON schema example demonstrating the use of if, then, and else keywords for conditional schema evaluation. This allows for different validation rules based on certain conditions.

LANGUAGE: JSON
CODE:
{
    "type": "integer",
    "minimum": 1,
    "maximum": 1000,
    "if": { "minimum": 100 },
    "then": { "multipleOf": 100 },
    "else": {
        "if": { "minimum": 10 },
        "then": { "multipleOf": 10 }
    }
}

----------------------------------------

TITLE: Opening Settings Editor to the Side in VS Code
DESCRIPTION: JSON configuration for a keybinding to open the Settings editor in a side group in Visual Studio Code.

LANGUAGE: JSON
CODE:
{
    "key": "cmd+,",
    "command": "workbench.action.openSettings",
    "args": {
        "openToSide": true
    }
}

----------------------------------------

TITLE: Configuring Snippets in package.json
DESCRIPTION: Contributes snippets for a specific language, specifying the language identifier and path to the snippet file.

LANGUAGE: json
CODE:
{
  "contributes": {
    "snippets": [
      {
        "language": "go",
        "path": "./snippets/go.json"
      }
    ]
  }
}

----------------------------------------

TITLE: TypeScript Student Class Generation
DESCRIPTION: Example showing how to use code comments to instruct Copilot to generate a Student class with specific properties and methods.

LANGUAGE: typescript
CODE:
// Create a Student class with properties for name, age, and grade
// Include methods for enrolling in courses and calculating GPA

----------------------------------------

TITLE: Configuring Read-only Mode in VS Code Settings
DESCRIPTION: JSON configuration for marking specific files or folders as read-only in VS Code.

LANGUAGE: json
CODE:
{
  "files.readonlyInclude": "path/to/readonly/files",
  "files.readonlyExclude": "path/to/exclude",
  "files.readonlyFromPermissions": true
}

----------------------------------------

TITLE: Optimizing Memory Usage in Piece Tree Implementation
DESCRIPTION: This snippet shows the final optimization of the piece tree implementation, reducing object allocation and improving performance.

LANGUAGE: typescript
CODE:
class Buffer {
    value: string;
    lineStarts: number[];
}

class BufferPosition {
    index: number; // index in Buffer.lineStarts
    remainder: number;
}

class PieceTable {
    buffers: Buffer[];
    rootNode: Node;
}

class Node {
    bufferIndex: number;
    start: BufferPosition;
    end: BufferPosition;
    ...
}

----------------------------------------

TITLE: Adding Dev Containers to existing Laravel Sail project
DESCRIPTION: This Artisan command adds Dev Containers configuration to an existing Laravel project using Sail. It allows developers to integrate containerized development into their workflow seamlessly.

LANGUAGE: bash
CODE:
php artisan sail:install --devcontainer

----------------------------------------

TITLE: Configuring Auto-Import Settings in TypeScript
DESCRIPTION: Example of disabling auto-import suggestions in TypeScript settings

LANGUAGE: json
CODE:
"typescript.autoImportSuggestions.enabled": false

----------------------------------------

TITLE: Installing Node.js and npm on Ubuntu
DESCRIPTION: Commands to update package lists and install Node.js with npm on an Ubuntu system using the NodeSource repository.

LANGUAGE: bash
CODE:
sudo apt-get update
curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs

----------------------------------------

TITLE: Declaring Limited Support for Virtual Workspaces in package.json
DESCRIPTION: This JSON snippet shows how to declare limited support for virtual workspaces with a description of limitations in the package.json file.

LANGUAGE: json
CODE:
{
  "capabilities": {
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "In virtual workspaces, resolving and finding references across files is not supported."
    }
  }
}

----------------------------------------

TITLE: Detailed Python devcontainer.json Configuration
DESCRIPTION: Shows a more elaborate devcontainer.json configuration for a Python project, including Dockerfile reference, extension installation, and container-specific settings.

LANGUAGE: json
CODE:
{
  "name": "Python 3",
  "build": {
    "dockerfile": "Dockerfile",
    "context": "..",
    "args": {
      "VARIANT": "3.7"
    }
  },
  "extensions": [
    "ms-python.python"
  ],
  "settings": {
    "python.linting.enabled": true
  }
}

----------------------------------------

TITLE: Configuring Powerline Font for Terminal in VS Code
DESCRIPTION: This snippet shows how to set up a Powerline font (DejaVu Sans Mono) for the terminal in Visual Studio Code using the editor.fontFamily setting.

LANGUAGE: json
CODE:
"editor.fontFamily": "'DejaVu Sans Mono for Powerline'"

----------------------------------------

TITLE: Custom LLDB-MI Debug Path Configuration
DESCRIPTION: JSON configuration snippet for specifying a custom path to the LLDB-MI debugger executable in launch.json.

LANGUAGE: json
CODE:
"miDebuggerPath": "/Users/default/example/lldb-mi"

----------------------------------------

TITLE: Making HTTP Requests in REST Book
DESCRIPTION: Simple example of making an HTTP GET request using the REST Book notebook extension to query GitHub's website.

LANGUAGE: http
CODE:
GET github.com

----------------------------------------

TITLE: Customizing Warning Colors in VS Code Settings JSON
DESCRIPTION: JSON configuration to customize error and warning squiggle colors in Visual Studio Code. This snippet demonstrates how to override the default colors for error and warning indicators in the editor.

LANGUAGE: json
CODE:
"workbench.colorCustomizations": {
    "editorError.foreground": "#ffef0f",
    "editorWarning.foreground": "#3777ff"
}

----------------------------------------

TITLE: Installing GCC and GDB on Ubuntu
DESCRIPTION: Commands to update package lists and install GNU compiler tools and GDB debugger on Ubuntu.

LANGUAGE: bash
CODE:
sudo apt-get update
sudo apt-get install build-essential gdb

----------------------------------------

TITLE: Installing Required Python Kernel Package
DESCRIPTION: Command to install the IPyKernel package which is required to launch a Python process as a kernel for Jupyter notebooks

LANGUAGE: bash
CODE:
pip install ipykernel

----------------------------------------

TITLE: Configuring Task Key Bindings in VS Code
DESCRIPTION: Example of binding a keyboard shortcut to run a specific task.

LANGUAGE: json
CODE:
{
    "key": "ctrl+h",
    "command": "workbench.action.tasks.runTask",
    "args": "tsc"
}

----------------------------------------

TITLE: Using asExternalUri with Workspace URIs in TypeScript
DESCRIPTION: This snippet shows how to use the vscode.env.asExternalUri API to create system-wide URIs that directly open a given workspace in VS Code.

LANGUAGE: TypeScript
CODE:
const uri = await vscode.env.asExternalUri('file:///Users/john/work/code');

----------------------------------------

TITLE: Correct Implementation of File-Based HoverProvider
DESCRIPTION: Demonstrates the proper way to implement a hover provider that works only with files stored on disk using the 'file' scheme.

LANGUAGE: typescript
CODE:
// 👍 only works with files on disk
vscode.languages.registerHoverProvider(
  { scheme: 'file', language: 'typescript' },
  {
    provideHover(doc: vscode.TextDocument) {
      const { size } = fs.statSync(doc.uri.fsPath);
      return new vscode.Hover(`Size in bytes is ${size}`);
    }
  }
);

----------------------------------------

TITLE: Configuring Display Language in Visual Studio Code
DESCRIPTION: Example JSON configuration for setting the display language in VS Code.

LANGUAGE: JSON
CODE:
{
  "locale": "fr"
}

----------------------------------------

TITLE: Setting up Laravel project with MySQL and Redis using Sail
DESCRIPTION: This command creates a new Laravel project with MySQL and Redis containers using Laravel Sail. It simplifies the setup process by bundling all necessary components in a single command.

LANGUAGE: bash
CODE:
curl -s "https://laravel.build/example-app?with=mysql,redis" | bash

----------------------------------------

TITLE: Configuring manual indentation in VS Code settings
DESCRIPTION: This JSON snippet demonstrates how to configure manual indentation settings in VS Code, including disabling auto-detection, using spaces for indentation, and setting different tab and indent sizes.

LANGUAGE: JSON
CODE:
{
"editor.detectIndentation": false,
"editor.insertSpaces": true,
"editor.tabSize": 8,
"editor.indentSize": 2
}

----------------------------------------

TITLE: Accessing VS Code Configuration JSON in Azure Storage
DESCRIPTION: This code snippet shows the URL structure used to access the VS Code configuration JSON file in Azure Storage. It includes build number and Git commit information in the path.

LANGUAGE: plaintext
CODE:
https://ticino.blob.core.windows.net/configuration/123000832/c1cd4378c5e5dc434ed959e13556d05240a8ca18/configuration.json

----------------------------------------

TITLE: Configuring Custom Data in Visual Studio Code Settings
DESCRIPTION: This JSON snippet shows how to configure the 'html.customData' setting in Visual Studio Code to point to a custom data file for HTML entities.

LANGUAGE: json
CODE:
{
  "html.customData": ["./html.html-data.json"]
}

----------------------------------------

TITLE: Configuring skipped files for Node.js debugging in VS Code
DESCRIPTION: Example of using glob patterns to skip internal Node.js core modules when debugging, except for events.js.

LANGUAGE: json
CODE:
"skipFiles": [
   "<node_internals>/**/*.js",
   "!<node_internals>/events.js"
 ]

----------------------------------------

TITLE: Parsing Chat Response and Applying Decorations in TypeScript
DESCRIPTION: Parse the chat response from the Language Model API and apply decorations to display annotations in the editor.

LANGUAGE: typescript
CODE:
async function parseChatResponse(chatResponse: vscode.LanguageModelChatResponse, textEditor: vscode.TextEditor) {
 let accumulatedResponse = "";

 for await (const fragment of chatResponse.text) {
  accumulatedResponse += fragment;

  if (fragment.includes("}")) {
   try {
    const annotation = JSON.parse(accumulatedResponse);
    applyDecoration(textEditor, annotation.line, annotation.suggestion);
    accumulatedResponse = "";
   }
   catch (e) {
    // do nothing
   }
  }
 }
}

function applyDecoration(editor: vscode.TextEditor, line: number, suggestion: string) {
 const decorationType = vscode.window.createTextEditorDecorationType({
  after: {
   contentText: ` ${suggestion.substring(0, 25) + "..."}`,
   color: "grey",
  },
 });

 const lineLength = editor.document.lineAt(line - 1).text.length;
 const range = new vscode.Range(
  new vscode.Position(line - 1, lineLength),
  new vscode.Position(line - 1, lineLength),
 );

 const decoration = { range: range, hoverMessage: suggestion };

 vscode.window.activeTextEditor?.setDecorations(decorationType, [
  decoration,
 ]);
}

----------------------------------------

TITLE: Detecting Virtual Workspaces Programmatically in TypeScript
DESCRIPTION: This TypeScript snippet shows how to programmatically check if the current workspace is a virtual workspace by examining the URI schemes of workspace folders.

LANGUAGE: typescript
CODE:
const isVirtualWorkspace = workspace.workspaceFolders && workspace.workspaceFolders.every(f => f.uri.scheme !== 'file');

----------------------------------------

TITLE: Configuring break-on-load in launch.json for Chrome debugging
DESCRIPTION: This JSON configuration enables the experimental break-on-load feature in the Chrome debugger for VS Code. It allows setting breakpoints before JavaScript execution, which is useful for debugging code that runs immediately on page load.

LANGUAGE: json
CODE:
{
    "type": "chrome",
    "request": "launch",
    "name": "Chrome",
    "url": "http://localhost:3000",
    "webRoot": "${workspaceRoot}/src",
    "breakOnLoad": true
}

----------------------------------------

TITLE: Configuring Terminal Tab Title in VS Code
DESCRIPTION: This snippet shows how to set the terminal tab title to display the sequence sent by the shell using the terminal.integrated.tabs.title setting.

LANGUAGE: json
CODE:
"terminal.integrated.tabs.title": "${sequence}"

----------------------------------------

TITLE: Configuring Java Spring Settings in Profile
DESCRIPTION: JSON configuration for Java Spring-specific settings in a profile, including default formatter and Spring Boot rewrite reconcile.

LANGUAGE: json
CODE:
{
    "[java]": {
        "editor.defaultFormatter": "redhat.java"
    },
    "boot-java.rewrite.reconcile": true
}

----------------------------------------

TITLE: Hello World C++ Program
DESCRIPTION: A simple C++ program that demonstrates basic syntax and use of the standard library.

LANGUAGE: cpp
CODE:
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int main()
{
    vector<string> msg {"Hello", "C++", "World", "from", "VS Code", "and the C++ extension!"};

    for (const string& word : msg)
    {
        cout << word << " ";
    }
    cout << endl;
}

----------------------------------------

TITLE: Keyboard Layout-Independent Bindings (JSON)
DESCRIPTION: Example of defining a keyboard shortcut using scan codes to create layout-independent bindings.

LANGUAGE: JSON
CODE:
{ "key": "cmd+[Slash]", "command": "editor.action.commentLine",
                         "when": "editorTextFocus" }

----------------------------------------

TITLE: Installing VS Code via yum on Older RHEL/CentOS
DESCRIPTION: Commands for updating the package cache and installing Visual Studio Code using yum on older RHEL/CentOS versions.

LANGUAGE: bash
CODE:
yum check-update
sudo yum install code # or code-insiders

----------------------------------------

TITLE: Configuring Application Ready Pattern in Launch Configuration
DESCRIPTION: This JSON snippet shows how to configure the dockerServerReadyAction pattern in the launch configuration to match a custom application ready message.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Docker Node.js Launch",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "docker-run: debug",
            "platform": "node",
            "dockerServerReadyAction": {
                "pattern": "Application has started on port (\\d+)"
            }
        }
    ]
}

----------------------------------------

TITLE: Configuring Application Ready Pattern in Launch Configuration
DESCRIPTION: This JSON snippet shows how to configure the dockerServerReadyAction pattern in the launch configuration to match a custom application ready message.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Docker Node.js Launch",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "docker-run: debug",
            "platform": "node",
            "dockerServerReadyAction": {
                "pattern": "Application has started on port (\\d+)"
            }
        }
    ]
}

----------------------------------------

TITLE: Configuring Environment Variables for Node.js Debugging
DESCRIPTION: JSON configuration to load environment variables from a file for Node.js debugging in VS Code.

LANGUAGE: json
CODE:
   //...
   "envFile": "${workspaceRoot}/.env",
   "env": { "USER": "john doe" }
   //...

----------------------------------------

TITLE: Implementing Disabled Code Actions in VS Code Extensions
DESCRIPTION: This snippet demonstrates how to use the proposed CodeAction.disabled property in a VS Code extension to provide more information about why a code action is not available.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export class Emojizer implements vscode.CodeActionProvider {

    public provideCodeActions(document: vscode.TextDocument, range: vscode.Range): vscode.CodeAction[] | undefined {
        const action = new vscode.CodeAction(`Convert to ${emoji}`, vscode.CodeActionKind.Refactor.append('emojize'));

        if (!this.isAtStartOfSmiley(document, range)) {
            // Tell the user why our action is not available
            action.disabled = 'Selection is not currently on a :)';
            return [action];
        }

        action.edit = new vscode.WorkspaceEdit();
        action.edit.replace(document.uri, new vscode.Range(range.start, range.start.translate(0, 2)), '😀');
        return action;
    }

    ...
}

----------------------------------------

TITLE: Using Icons in Labels with Markdown
DESCRIPTION: Shows how to use icons in Markdown labels by referencing their identifier with $(iconIdentifier) syntax

LANGUAGE: typescript
CODE:
$(alert);

----------------------------------------

TITLE: Using regular expressions in Markdown copyFiles destination settings
DESCRIPTION: This snippet shows how to use regular expressions to transform variables when configuring the destination for copied Markdown files. It demonstrates using only the first letter of the document filename in the path.

LANGUAGE: jsonc
CODE:
"markdown.copyFiles.destination": {
  "/docs/**/*": "images/${documentBaseName/(.).*/$1/}/"
}

----------------------------------------

TITLE: Using activeWebviewPanelId Context Key in VS Code
DESCRIPTION: Demonstrates how to use the new activeWebviewPanelId context key in when clauses to enable commands or menu items when a specific webview is focused.

LANGUAGE: json
CODE:
"when": "activeWebviewPanelId == 'markdown.preview'"

----------------------------------------

TITLE: TypeScript Configuration Example
DESCRIPTION: Example tsconfig.json configuration for TypeScript 2.0 projects in VSCode extensions

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "CommonJS",
        "target": "ES6",
        "outDir": "out",
        "lib": [
            "ES6"
        ],
        "sourceMap": true,
        "rootDir": "."
    },
    "exclude": [
        "node_modules",
        ".vscode-test"
    ]
}

----------------------------------------

TITLE: Enabling Font Ligatures in VS Code Settings
DESCRIPTION: This snippet shows how to enable font ligatures in Visual Studio Code by setting the 'editor.fontLigatures' option to true in the settings. Font ligatures combine two characters into a single expressive character, enhancing code readability.

LANGUAGE: json
CODE:
"editor.fontLigatures": true

----------------------------------------

TITLE: Configuring Multi-Target Debugging in VS Code
DESCRIPTION: JSON configuration for a compound launch configuration to debug a Node.js server and client simultaneously.

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Server",
            "program": "${workspaceRoot}/server.js",
            "cwd": "${workspaceRoot}"
        },
        {
            "type": "node",
            "request": "launch",
            "name": "Client",
            "program": "${workspaceRoot}/client.js",
            "cwd": "${workspaceRoot}"
        }
    ],
    "compounds": [
        {
            "name": "Server/Client",
            "configurations": ["Server", "Client"]
        }
    ]
}

----------------------------------------

TITLE: Adding Folders via Command Line in VS Code
DESCRIPTION: Command line syntax for adding multiple folders to create a multi-root workspace in VS Code.

LANGUAGE: bash
CODE:
code --add vscode vscode-docs

----------------------------------------

TITLE: Implementing CSS Language Mode in Language Server
DESCRIPTION: This TypeScript code defines a CSS language mode that handles completion requests for CSS regions within an HTML document using the CSS language service.

LANGUAGE: typescript
CODE:
export function getCSSMode(
  cssLanguageService: CSSLanguageService,
  documentRegions: LanguageModelCache<HTMLDocumentRegions>
): LanguageMode {
  return {
    getId() { return 'css' },
    doComplete(document: TextDocument, position: Position) {
      // Get virtual CSS document, with all non-CSS code replaced with whitespace
      const embedded = documentRegions.get(document).getEmbeddedDocument('css')
      // Compute a response with vscode-css-languageservice
      const stylesheet = cssLanguageService.parseStylesheet(embedded)
      return cssLanguageService.doComplete(embedded, position, stylesheet)
    }
  }
}

----------------------------------------

TITLE: Configuring Snippet Suggestions Order in VS Code
DESCRIPTION: JSON configuration to prioritize snippets in VS Code's code completion widget, making it behave more like Sublime Text.

LANGUAGE: json
CODE:
"editor.snippetSuggestions": "top"

----------------------------------------

TITLE: Activating Python REPL in Terminal (macOS/Linux)
DESCRIPTION: Command to activate the Python REPL in a macOS or Linux terminal.

LANGUAGE: shell
CODE:
python3

----------------------------------------

TITLE: Persisting Extension Data using Storage APIs
DESCRIPTION: Example showing how to use VS Code's storage APIs to persist extension data in both workspace and global scopes using storageUri and globalStorageUri.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
    context.subscriptions.push(
        vscode.commands.registerCommand('myAmazingExtension.persistWorkspaceData', async () => {
            if (!context.storageUri) {
                return;
            }

            try {
                await vscode.workspace.fs.stat(context.storageUri);
            } catch {
                await vscode.workspace.fs.createDirectory(context.storageUri)
            }

            const workspaceData = vscode.Uri.joinPath(context.storageUri, 'workspace-data.json');
            const writeData = new TextEncoder().encode(JSON.stringify({ now: Date.now() }));
            vscode.workspace.fs.writeFile(workspaceData, writeData);
        }
    ));
}

----------------------------------------

TITLE: Configuring Docker Run Task for Meteor Application
DESCRIPTION: This snippet demonstrates how to configure the Docker run task for a Meteor application, specifying the command to start the application in debug mode.

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "type": "docker-run",
            "label": "docker-run: debug",
            "dependsOn": [
                "docker-build"
            ],
            "dockerRun": {
                "command": "node --inspect=0.0.0.0:9229 main.js",
            },
            "node": {
                "enableDebugging": true
            }
        }
    ]
}

----------------------------------------

TITLE: Configuring Command Arguments in Keyboard Shortcuts (JSON)
DESCRIPTION: Example of overriding the Enter key to print custom text using command arguments in a keyboard shortcut.

LANGUAGE: JSON
CODE:
{ "key": "enter", "command": "type",
                  "args": { "text": "Hello World" },
                  "when": "editorTextFocus" }

----------------------------------------

TITLE: Configuring TypeNavigationMode for Lists in Visual Studio Code
DESCRIPTION: This snippet shows how to add a custom keybinding to trigger type navigation mode in lists using the 'list.toggleKeyboardNavigation' command.

LANGUAGE: json
CODE:
{
  "key": "/",
  "command": "list.toggleKeyboardNavigation",
  "when": "listFocus"
}

----------------------------------------

TITLE: Building ASP.NET Core Application
DESCRIPTION: Command to build the ASP.NET Core application using the .NET CLI.

LANGUAGE: bash
CODE:
dotnet build

----------------------------------------

TITLE: Configuring TSLint to run only on save in VS Code settings
DESCRIPTION: Setting to configure the TSLint extension to only run when files are saved, not while typing.

LANGUAGE: json
CODE:
{
    "tslint.run": "onSave"
}

----------------------------------------

TITLE: Creating Custom Terminal Extension API in VS Code
DESCRIPTION: Example of using the extension terminal API to create a terminal and print a colored hello world message on startup.

LANGUAGE: typescript
CODE:
const writeEmitter = new vscode.EventEmitter<string>();
const pty: vscode.Pseudoterminal = {
  onDidWrite: writeEmitter.event,
  open: () => writeEmitter.fire('\x1b[31mHello world\x1b[0m'),
  close: () => {}
};
vscode.window.createTerminal({ name: 'My terminal', pty });

----------------------------------------

TITLE: Debugging Configuration for VS Code Extension Tests
DESCRIPTION: Set up a launch.json configuration for debugging VS Code extension tests.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Extension Tests",
      "type": "extensionHost",
      "request": "launch",
      "runtimeExecutable": "${execPath}",
      "args": [
        "--extensionDevelopmentPath=${workspaceFolder}",
        "--extensionTestsPath=${workspaceFolder}/out/test/suite/index"
      ],
      "outFiles": ["${workspaceFolder}/out/test/**/*.js"]
    }
  ]
}

----------------------------------------

TITLE: Using Command Variables in Launch Configuration (JSON)
DESCRIPTION: This example shows how to use a command variable in a launch configuration for attaching to a Node.js process. It uses the extension.pickNodeProcess command to allow interactive selection of a running Node.js process.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "type": "node",
            "request": "attach",
            "name": "Attach by Process ID",
            "processId": "${command:extension.pickNodeProcess}"
        }
    ]
}

----------------------------------------

TITLE: Advanced VS Code Test Configuration
DESCRIPTION: Create a more complex .vscode-test.js configuration with multiple test setups and custom Mocha options.

LANGUAGE: javascript
CODE:
// .vscode-test.js
const { defineConfig } = require('@vscode/test-cli');

module.exports = defineConfig([
  {
    label: 'unitTests',
    files: 'out/test/**/*.test.js',
    version: 'insiders',
    workspaceFolder: './sampleWorkspace',
    mocha: {
      ui: 'tdd',
      timeout: 20000,
    },
  },
  // you can specify additional test configurations, too
]);

----------------------------------------

TITLE: Installing Extensions via CLI
DESCRIPTION: Example showing how to install both pre-release and normal extensions using the VS Code CLI

LANGUAGE: bash
CODE:
code --install-extension GitHub.vscode-pull-request-github@prerelease --install-extension GitHub.remotehub

----------------------------------------

TITLE: Configuring Just My Code Debugging in VS Code
DESCRIPTION: JSON configuration to skip debugging certain files and folders in VS Code.

LANGUAGE: json
CODE:
"skipFiles": [
    "node_modules/**/*.js",
    "lib/**/*.js"
  ]

----------------------------------------

TITLE: Token HTML Rendering with CSS Classes
DESCRIPTION: Example showing how tokens were rendered as HTML spans with CSS classes for styling.

LANGUAGE: html
CODE:
<span class="token keyword js">function</span>
<span class="token">&nbsp;</span>
<span class="token identifier js">f1</span>
<span class="token delimiter paren js">(</span>
<span class="token delimiter paren js">)</span>
<span class="token">&nbsp;</span>
<span class="token delimiter curly js">{</span>

----------------------------------------

TITLE: TypeScript SDK Configuration
DESCRIPTION: VS Code setting to specify custom TypeScript version location for enhanced TypeScript/TSX support.

LANGUAGE: json
CODE:
{
  "typescript.tsdk": "path/to/typescript/lib"
}

----------------------------------------

TITLE: Configuring Notebook Serializer in package.json
DESCRIPTION: Declares a notebook serializer in package.json to handle files with .notebook extension

LANGUAGE: json
CODE:
{
    "contributes": {
        "notebooks": [
            {
                "type": "my-notebook",
                "displayName": "My Notebook",
                "selector": [
                    {
                        "filenamePattern": "*.notebook"
                    }
                ]
            }
        ]
    }
}

----------------------------------------

TITLE: Registering Virtual Document Provider for Request Forwarding
DESCRIPTION: This TypeScript code registers a virtual text document provider for 'embedded-content' documents, which is used in the request forwarding approach to handle embedded languages.

LANGUAGE: typescript
CODE:
const virtualDocumentContents = new Map<string, string>()

workspace.registerTextDocumentContentProvider('embedded-content', {
  provideTextDocumentContent: uri => {
    // Remove leading `/` and ending `.css` to get original URI
    const originalUri = uri.path.slice(1).slice(0, -4);
    const decodedUri = decodeURIComponent(originalUri);
    return virtualDocumentContents.get(decodedUri);
  }
})

----------------------------------------

TITLE: Configuring esbuild for VS Code Extension Bundling
DESCRIPTION: JavaScript configuration file for esbuild to bundle a VS Code extension. It sets up the build context, handles production and watch modes, and includes a problem matcher plugin.

LANGUAGE: javascript
CODE:
const esbuild = require("esbuild");

const production = process.argv.includes('--production');
const watch = process.argv.includes('--watch');

async function main() {
	const ctx = await esbuild.context({
		entryPoints: [
			'src/extension.ts'
		],
		bundle: true,
		format: 'cjs',
		minify: production,
		sourcemap: !production,
		sourcesContent: false,
		platform: 'node',
		outfile: 'dist/extension.js',
		external: ['vscode'],
		logLevel: 'warning',
		plugins: [
			/* add to the end of plugins array */
			esbuildProblemMatcherPlugin,
		],
	});
	if (watch) {
		await ctx.watch();
	} else {
		await ctx.rebuild();
		await ctx.dispose();
	}
}

/**
 * @type {import('esbuild').Plugin}
 */
const esbuildProblemMatcherPlugin = {
	name: 'esbuild-problem-matcher',

	setup(build) {
		build.onStart(() => {
			console.log('[watch] build started');
		});
		build.onEnd((result) => {
			result.errors.forEach(({ text, location }) => {
				console.error(`✘ [ERROR] ${text}`);
                if (location == null) return;
				console.error(`    ${location.file}:${location.line}:${location.column}:`);
			});
			console.log('[watch] build finished');
		});
	}
};

main().catch(e => {
	console.error(e);
	process.exit(1);
});

----------------------------------------

TITLE: Customizing Semantic Token Colors for Specific Theme in VSCode
DESCRIPTION: This JSON snippet shows how to customize colors for semantic tokens for a specific theme in Visual Studio Code settings. It demonstrates changing the color and style of the 'templateType' token for the 'Visual Studio Dark' theme.

LANGUAGE: json
CODE:
"editor.semanticTokenColorCustomizations": {
    "[Visual Studio Dark]": {
        "rules": {
            "templateType": {
                "foreground": "#ff0000",
                "fontStyle": "italic bold underline"
            }
        }
    }
}

----------------------------------------

TITLE: Implementing Chat Request Handler
DESCRIPTION: Defines the chat request handler to process user messages, send requests to the language model, and stream responses.

LANGUAGE: typescript
CODE:
const handler: vscode.ChatRequestHandler = async (request: vscode.ChatRequest, context: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken) => {

    let prompt = BASE_PROMPT;

    const messages = [
        vscode.LanguageModelChatMessage.User(prompt),
    ];

    messages.push(vscode.LanguageModelChatMessage.User(request.prompt));

    const chatResponse = await request.model.sendRequest(messages, {}, token);

    for await (const fragment of chatResponse.text) {
        stream.markdown(fragment);
    }

    return;
};

----------------------------------------

TITLE: Docker Compose devcontainer.json
DESCRIPTION: A devcontainer.json configuration for using with Docker Compose.

LANGUAGE: json
CODE:
{
    "name": "[Optional] Your project name here",
    "dockerComposeFile": "../docker-compose.yml",
    "service": "the-name-of-the-service-you-want-to-work-with-in-vscode",
    "workspaceFolder": "/default/workspace/path/in/container/to/open",
    "shutdownAction": "stopCompose"
}

----------------------------------------

TITLE: Implementing a Calculator in Rust with WebAssembly Bindings
DESCRIPTION: This Rust code implements the calculator functionality defined in the WIT file, using wit-bindgen to generate WebAssembly bindings.

LANGUAGE: rust
CODE:
wit_bindgen::generate!({
	world: "calculator",
});

struct Calculator;

impl Guest for Calculator {
    fn calc(op: Operation) -> u32 {
		match op {
			Operation::Add(operands) => operands.left + operands.right,
			Operation::Sub(operands) => operands.left - operands.right,
			Operation::Mul(operands) => operands.left * operands.right,
			Operation::Div(operands) => operands.left / operands.right,
		}
	}
}

export!(Calculator);

----------------------------------------

TITLE: Setting Webview Context in HTML
DESCRIPTION: Use the 'data-vscode-context' attribute to set context for specific areas in a webview's HTML content.

LANGUAGE: HTML
CODE:
<div class="main" data-vscode-context='{"webviewSection": "main", "mouseCount": 4}'>
  <h1>Cat Coding</h1>

  <textarea data-vscode-context='{"webviewSection": "editor", "preventDefaultContextMenuItems": true}'></textarea>
</div>

----------------------------------------

TITLE: Configuring Markdown Preview Editor Association
DESCRIPTION: Example showing how to configure VS Code to automatically open Markdown files as previews

LANGUAGE: json
CODE:
"workbench.editorAssociations": {
  "*.md": "vscode.markdown.preview.editor"
}

----------------------------------------

TITLE: Configuring NuGet Package Settings
DESCRIPTION: Setting for including prerelease package versions in NuGet package management. This setting can be accessed through VS Code preferences.

LANGUAGE: plaintext
CODE:
nuget.includePrereleasePackageVersions

----------------------------------------

TITLE: Listing WSL Distributions in PowerShell
DESCRIPTION: This PowerShell command lists all available Windows Subsystem for Linux (WSL) distributions on the system, which is useful for troubleshooting WSL-related terminal issues.

LANGUAGE: powershell
CODE:
wslconfig.exe /l

----------------------------------------

TITLE: Implementing resolveTask for Task Providers in VS Code Extensions
DESCRIPTION: Task providers can now implement resolveTask to reduce overhead when proffering tasks. This is called after provideTasks if a user references one of your tasks in tasks.json.

LANGUAGE: typescript
CODE:
resolveTask(task: vscode.Task, token: vscode.CancellationToken): vscode.Task | undefined {
  // Implement resolveTask logic
}

----------------------------------------

TITLE: Reading CSV File with Custom Encoding in Pandas
DESCRIPTION: To work around UnicodeDecodeError when opening files directly in Data Wrangler, you can use Pandas to read the file with a specific encoding. This example shows how to read a CSV file with UTF-8 encoding and handle encoding errors.

LANGUAGE: python
CODE:
import pandas as pd

df = pd.read_csv('filename.csv', encoding='utf-8', encoding_errors='ignore')

----------------------------------------

TITLE: Example JSON Protocol Message
DESCRIPTION: Shows sample protocol messages used in DAP communication including setBreakpoints, continue, stopped, stacktrace and variables requests/events.

LANGUAGE: json
CODE:
{
  "debugprotocol": "example",
  "requests": [
    "setBreakpoints",
    "continue",
    "stacktrace",
    "variables"
  ],
  "events": [
    "stopped"
  ]
}

----------------------------------------

TITLE: Configuring Markdown Preview Editor Association
DESCRIPTION: Example showing how to configure VS Code to automatically open Markdown files as previews

LANGUAGE: json
CODE:
"workbench.editorAssociations": {
  "*.md": "vscode.markdown.preview.editor"
}

----------------------------------------

TITLE: Webview Message Event Handler
DESCRIPTION: JavaScript code showing how to handle postMessage events in a webview to respond to messages from the extension

LANGUAGE: javascript
CODE:
window.addEventListener('message', event => {
  switch (event.data.type) {
    case 'change-cats':
      doChangeCats(event.data.requestedBreed);
      break;
  }
});

----------------------------------------

TITLE: Installing VS Code CLI via Terminal
DESCRIPTION: Commands to download and install the VS Code CLI on a remote machine using curl and tar

LANGUAGE: bash
CODE:
curl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz

tar -xf vscode_cli.tar.gz

----------------------------------------

TITLE: Configuring Zen Mode in VS Code Settings
DESCRIPTION: JSON configuration to disable full screen mode when entering Zen Mode in VS Code.

LANGUAGE: json
CODE:
"window.fullScreenZenMode": false

----------------------------------------

TITLE: Implementing TypeScript HoverProvider with Basic Language Selector
DESCRIPTION: Demonstrates how to register a hover provider specifically for TypeScript files using a simple language identifier as the document selector.

LANGUAGE: typescript
CODE:
vscode.languages.registerHoverProvider('typescript', {
  provideHover(doc: vscode.TextDocument) {
    return new vscode.Hover('For *all* TypeScript documents.');
  }
});

----------------------------------------

TITLE: Opening PowerShell Examples in VS Code
DESCRIPTION: This PowerShell command opens the examples folder of the PowerShell extension in Visual Studio Code. It retrieves the latest version of the extension and launches VS Code with the examples directory.

LANGUAGE: powershell
CODE:
code (Get-ChildItem ~\.vscode\extensions\ms-vscode.PowerShell-*\examples)[-1]

----------------------------------------

TITLE: Implementing TextDocumentContentProvider in TypeScript
DESCRIPTION: This code defines a class that implements the TextDocumentContentProvider interface. It provides content for virtual documents by invoking a 'cowsay' function with the URI path as input.

LANGUAGE: typescript
CODE:
const myProvider = new class implements vscode.TextDocumentContentProvider {
  provideTextDocumentContent(uri: vscode.Uri): string {
    // invoke cowsay, use uri-path as text
    return cowsay.say({ text: uri.path });
  }
};

----------------------------------------

TITLE: VS Code Build Task Configuration
DESCRIPTION: Task configuration for TypeScript compilation in VS Code tasks.json file.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "typescript",
            "tsconfig": "tsconfig.json",
            "problemMatcher": [
                "$tsc"
            ],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

----------------------------------------

TITLE: Demonstrating TypeScript Private Property Access
DESCRIPTION: This snippet shows how TypeScript's private keyword is not enforced at runtime, allowing access to private properties through type assertions.

LANGUAGE: typescript
CODE:
class Foo {
    private bar = 123;
}

const foo: any = new Foo();
console.log(foo.bar);

----------------------------------------

TITLE: Theme Customization for Multiple Themes
DESCRIPTION: Example of customizing colors for specific themes using workbench.colorCustomizations, including wildcard matching and multiple theme selection.

LANGUAGE: json
CODE:
"workbench.colorCustomizations": {
    "[Abyss][Red]": {
        "activityBar.background": "#ff0000"
    },
    "[Monokai*]": {
        "activityBar.background": "#ff0000"
    }
}

----------------------------------------

TITLE: Configuring Tree Indent Guides in Visual Studio Code
DESCRIPTION: Example JSON configuration to control how indent guides are rendered in VS Code tree views.

LANGUAGE: json
CODE:
"workbench.tree.renderIndentGuides": "onHover"

----------------------------------------

TITLE: Defining TOC Entries in YAML for VS Code Documentation
DESCRIPTION: This YAML snippet demonstrates how to structure table of contents entries for the VS Code documentation. It shows examples of creating sections, subsections, and linking to individual topic files.

LANGUAGE: yaml
CODE:
{
  "name": "Getting Started",
  "area": "getstarted",
  "topics": [
    ["VS Code Tutorial", "/docs/getstarted/getting-started"],
    ["Copilot Quickstart", "/docs/getstarted/copilot-quickstart"]
  ]
},

{
  "name": "GitHub Copilot",
  "area": "copilot",
  "topics": [
    ["Overview", "/docs/copilot/overview"],
    ["Setup", "/docs/copilot/setup"],
    ["", "", {
      "name": "Guides",
      "area": "copilot/guides",
      "topics": [
        ["Test with Copilot", "/docs/copilot/guides/test-with-copilot"],
        ["Debug with Copilot", "/docs/copilot/guides/debug-with-copilot"]
      ]
    }
    ],
    ["FAQ", "/docs/copilot/faq"]
  ]
},

----------------------------------------

TITLE: Configuring Remote Link Forwarding in VS Code
DESCRIPTION: Setting to control whether links opened within VS Code should be forwarded in remote contexts. Setting to false prevents automatic link forwarding.

LANGUAGE: json
CODE:
"remote.forwardOnOpen": false

----------------------------------------

TITLE: Implementing ExtensionTerminal Name Changes
DESCRIPTION: TypeScript code demonstrating how to change terminal names using the onDidChangeName event.

LANGUAGE: typescript
CODE:
const writeEmitter = new vscode.EventEmitter<string>();
const nameEmitter = new vscode.EventEmitter<string>();
const pty = {
  onDidWrite: writeEmitter.event,
  onDidChangeName: nameEmitter.event,
  open: () => writeEmitter.fire('Press and key to set the terminal title'),
  close: () => { /* noop*/ },
  handleInput: (data: string) => {
    writeEmitter.fire(`Set title to "${data}"`); 
    nameEmitter.fire(data);
  }
};
const terminal = (<any>vscode.window).createTerminal({ name: `My Extension REPL`, pty });
terminal.show();

----------------------------------------

TITLE: Configuring Auto-Closing Brackets in Visual Studio Code
DESCRIPTION: JSON configuration to customize auto-closing behavior for brackets in Visual Studio Code. This snippet shows how to set the editor.autoClosingBrackets setting.

LANGUAGE: JSON
CODE:
"editor.autoClosingBrackets": true

----------------------------------------

TITLE: Installing Extensions via Command Line in VS Code
DESCRIPTION: Commands for managing VS Code extensions through the command line interface, including listing, installing, and uninstalling extensions.

LANGUAGE: bash
CODE:
code --extensions-dir <dir>
code --list-extensions
code --show-versions
code --install-extension (<extension-id> | <extension-vsix-path>)
code --uninstall-extension (<extension-id> | <extension-vsix-path>)
code --enable-proposed-api (<extension-id>)

----------------------------------------

TITLE: TextMate Snippet Extension Structure
DESCRIPTION: File structure showing the organization of a TextMate snippet extension, including the snippets.json file and package.json manifest.

LANGUAGE: bash
CODE:
.
├── snippets                    // VS Code integration
│   └── snippets.json           // The JSON file w/ the snippets
└── package.json                // extension's manifest

----------------------------------------

TITLE: Implementing HoverProvider for Untitled TypeScript Files
DESCRIPTION: Demonstrates how to register a hover provider for new, unsaved TypeScript files using the 'untitled' scheme filter.

LANGUAGE: typescript
CODE:
vscode.languages.registerHoverProvider(
  { scheme: 'untitled', language: 'typescript' },
  {
    provideHover(doc: vscode.TextDocument) {
      return new vscode.Hover('For new, unsaved TypeScript documents only');
    }
  }
);

----------------------------------------

TITLE: Customizing Workbench Colors in VS Code
DESCRIPTION: Example of customizing the background color of the activity bar using the workbench.colorCustomizations setting in VS Code settings.json.

LANGUAGE: JSON
CODE:
{
  "workbench.colorCustomizations": {
    "activityBar.background": "#00AA00"
  }
}

----------------------------------------

TITLE: Configuring XML Schema Associations for PowerShell Files in VS Code
DESCRIPTION: This JSON configuration associates XML schemas with PowerShell .ps1xml files in VS Code. It enables features like syntax error reporting, schema validation, and IntelliSense for Types.ps1xml and Format.ps1xml files.

LANGUAGE: json
CODE:
"xml.fileAssociations": [
  {
    "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Format.xsd",
    "pattern": "**/*.Format.ps1xml"
  },
  {
    "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Types.xsd",
    "pattern": "**/*.Types.ps1xml"
  }
]

----------------------------------------

TITLE: Lazy Test Discovery Implementation
DESCRIPTION: Shows how to implement lazy test discovery by watching workspace files and parsing tests on demand.

LANGUAGE: typescript
CODE:
controller.resolveHandler = async test => {
  if (!test) {
    await discoverAllFilesInWorkspace();
  } else {
    await parseTestsInFileContents(test);
  }
};

vscode.workspace.onDidOpenTextDocument(parseTestsInDocument);
vscode.workspace.onDidChangeTextDocument(e => parseTestsInDocument(e.document));

function getOrCreateFile(uri: vscode.Uri) {
  const existing = controller.items.get(uri.toString());
  if (existing) {
    return existing;
  }

  const file = controller.createTestItem(uri.toString(), uri.path.split('/').pop()!, uri);
  file.canResolveChildren = true;
  return file;
}

----------------------------------------

TITLE: Disabling macOS Terminal Resize Sound
DESCRIPTION: Bash commands to create a DefaultKeyBinding.dict file that disables the system sound when resizing terminal split panes on macOS.

LANGUAGE: bash
CODE:
mkdir -p ~/Library/KeyBindings
cat > ~/Library/KeyBindings/DefaultKeyBinding.dict <<EOF
{
  "@^\UF700" = "noop:";
  "@^\UF701" = "noop:";
  "@^\UF702" = "noop:";
  "@^\UF703" = "noop:";
  "@~^\UF700" = "noop:";
  "@~^\UF701" = "noop:";
  "@~^\UF702" = "noop:";
  "@~^\UF703" = "noop:";
}
EOF

----------------------------------------

TITLE: Launching Visual Studio Code from Command Prompt
DESCRIPTION: Shows how to launch VS Code from the command prompt using the 'code' command.

LANGUAGE: plaintext
CODE:
code

----------------------------------------

TITLE: TypeScript Method Signature Completion Example
DESCRIPTION: Example showing how to enable/disable method signature completions for TypeScript and JavaScript

LANGUAGE: typescript
CODE:
typescript.suggest.classMemberSnippets.enabled
javascript.suggest.classMemberSnippets.enabled

----------------------------------------

TITLE: Workspace Trust API Implementation
DESCRIPTION: Core API methods for implementing Workspace Trust functionality in VS Code extensions. Provides properties and events to check and respond to workspace trust status changes.

LANGUAGE: typescript
CODE:
export namespace workspace {
  /**
    * When true, the user has explicitly trusted the contents of the workspace.
    */
  export const isTrusted: boolean;

  /**
    * Event that fires when the current workspace has been trusted.
    */
  export const onDidGrantWorkspaceTrust: Event<void>;
}

----------------------------------------

TITLE: Configuring Auto-Save for LaTeX Files in VS Code
DESCRIPTION: JSON configuration to disable auto-save functionality specifically for LaTeX files in VS Code settings.

LANGUAGE: json
CODE:
    "[latex]": {
        "files.autoSave": "off",
    },

----------------------------------------

TITLE: Hiding Status Bar Items in Visual Studio Code
DESCRIPTION: Example JSON configuration to hide the feedback smiley in the VS Code status bar.

LANGUAGE: json
CODE:
"workbench.statusBar.feedback.visible": false

----------------------------------------

TITLE: Python Day of Week Function
DESCRIPTION: Example showing GitHub Copilot integration with Python code

LANGUAGE: python
CODE:
def say_day_of_week(date)

say_day_of_week(date.today())

----------------------------------------

TITLE: Configuring Copilot Edits Settings
DESCRIPTION: Example settings configuration for Copilot Edits in VS Code, showing key configuration options for controlling edit behavior and agent mode functionality.

LANGUAGE: JSON
CODE:
{
  "chat.editing.confirmEditRequestRemoval": true,
  "chat.editing.confirmEditRequestRetry": true,
  "chat.implicitContext.enabled": true,
  "chat.editing.autoAcceptDelay": 0,
  "github.copilot.chat.codesearch.enabled": false,
  "chat.agent.maxRequests": 15,
  "github.copilot.chat.edits.suggestRelatedFilesFromGitHistory": false,
  "github.copilot.chat.agent.runTasks": true
}

----------------------------------------

TITLE: Creating a Pseudoterminal with Dynamic Title in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Pseudoterminal in VS Code with a dynamically changeable title. It uses EventEmitters to handle writing and name changes.

LANGUAGE: TypeScript
CODE:
const writeEmitter = new EventEmitter<string>();
const nameEmitter = new EventEmitter<string>();
const pty = {
    onDidWrite: writeEmitter.event,
    open: () => writeEmitter.fire('Type to change the title of the terminal'),
    close: () => { /* noop*/ },
    handleInput: (data: string) => nameEmitter.fire(data)
};
const terminal = vscode.window.createTerminal({
    name: `My Terminal`,
    pty
});
terminal.show();

----------------------------------------

TITLE: Defining Comment Thread Interface in TypeScript
DESCRIPTION: TypeScript interface definitions for the comment thread and comment features in Visual Studio Code. This is part of the proposed extension API for implementing code review functionality.

LANGUAGE: TypeScript
CODE:
export enum CommentThreadCollapsibleState {
  Collapsed = 0,
  Expanded = 1
}

interface CommentThread {
  threadId: string;
  resource: Uri;
  range: Range;
  comments: Comment[];
  collapsibleState?: CommentThreadCollapsibleState;
}

interface Comment {
  commentId: string;
  body: MarkdownString;
  userName: string;
  gravatar: string;
  command?: Command;
}

----------------------------------------

TITLE: Webview Panel Activation
DESCRIPTION: Configuration for activating extension when restoring a webview with specific viewType.

LANGUAGE: json
CODE:
"activationEvents": [
    "onWebviewPanel:catCoding"
]

----------------------------------------

TITLE: Sample Dev Container Configuration
DESCRIPTION: Example devcontainer.json file showing how to configure a dev container with a Dockerfile and Docker-in-Docker feature.

LANGUAGE: json
CODE:
{
    "build": {
        "dockerfile": "Dockerfile"
    },
    "features": {
        "ghcr.io/devcontainers/features/docker-in-docker:1": {
             "version": "latest"
        }
    }
}

----------------------------------------

TITLE: Extension Trust Override Configuration
DESCRIPTION: JSON configuration example showing how to override an extension's Workspace Trust support level

LANGUAGE: json
CODE:
  "extensions.supportUntrustedWorkspaces": {
    "esbenp.prettier-vscode": {
      "supported": true,
      "version": "6.4.0"
    },
  },

----------------------------------------

TITLE: Setting Custom Context in TypeScript
DESCRIPTION: Example showing how to set custom context values that can be used with 'in' operator in when clauses.

LANGUAGE: typescript
CODE:
vscode.commands.executeCommand('setContext', 'ext.supportedFolders', [ 'test', 'foo', 'bar' ]);

// or

// Note in this case (using an object), the value doesn't matter, it is based on the existence of the key in the object
// The value must be of a simple type
vscode.commands.executeCommand('setContext', 'ext.supportedFolders', { 'test': true, 'foo': 'anything', 'bar': false });

----------------------------------------

TITLE: Configuring TypeScript Server Plugins in package.json
DESCRIPTION: Contributes TypeScript server plugins that augment VS Code's JavaScript and TypeScript support.

LANGUAGE: json
CODE:
{
  "contributes": {
    "typescriptServerPlugins": [
      {
        "name": "typescript-styled-plugin"
      }
    ]
  }
}

----------------------------------------

TITLE: Docker Container List Command
DESCRIPTION: Bash command to list all VS Code development containers with detailed information.

LANGUAGE: bash
CODE:
docker ps -a --filter="label=vsch.quality" --format "table \{{.ID}}\t\{{.Status}}\t\{{.Image}}\tvscode-\{{.Label \"vsch.quality\"}}\t\{{.Label \"vsch.local.folder\"}}"

----------------------------------------

TITLE: Defining File Associations in Icon Theme File
DESCRIPTION: This JSON snippet shows how to define file associations in the icon theme file. It includes examples for default file and folder icons, as well as specific associations for file extensions, names, and language IDs.

LANGUAGE: json
CODE:
{
  "file": "_file_dark",
  "folder": "_folder_dark",
  "folderExpanded": "_folder_open_dark",
  "folderNames": {
    ".vscode": "_vscode_folder"
  },
  "fileExtensions": {
    "ini": "_ini_file"
  },
  "fileNames": {
    "win.ini": "_win_ini_file"
  },
  "languageIds": {
    "ini": "_ini_file"
  },
  "light": {
    "folderExpanded": "_folder_open_light",
    "folder": "_folder_light",
    "file": "_file_light",
    "fileExtensions": {
      "ini": "_ini_file_light"
    }
  },
  "highContrast": {}
}

----------------------------------------

TITLE: Configuring Integrated Terminal Environment Inheritance in Visual Studio Code
DESCRIPTION: JSON configuration to control whether the integrated terminal inherits VS Code's environment in VS Code.

LANGUAGE: json
CODE:
"terminal.integrated.inheritEnv": false

----------------------------------------

TITLE: Defining Custom HTML Entities with JSON in Visual Studio Code
DESCRIPTION: This JSON snippet demonstrates how to define a custom HTML tag 'my-button' using the Custom Data Format. It includes the tag name, description, and references to related documentation.

LANGUAGE: json
CODE:
{
  "version": 1.1,
  "tags": [
    {
      "name": "my-button",
      "description": "My button. You should use it as in `<my-button type='alert'></mybutton>`.",
      "references": [
        {
          "name": "Bootstrap buttons",
          "url": "https://getbootstrap.com/docs/4.0/components/buttons/"
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Configuring Array of String Settings in VS Code Extensions
DESCRIPTION: Extension authors can enable support for editing array-of-string settings in the Settings UI by contributing a configuration with type and items keys.

LANGUAGE: json
CODE:
{
  "type": "array",
  "items": {
    "type": "string"
  }
}

----------------------------------------

TITLE: Installing Python Dependencies on Chrome OS
DESCRIPTION: Command to install Python-related packages and build tools for Python development on Chrome OS Linux environment.

LANGUAGE: sh
CODE:
sudo apt-get install -y python3-pip python3-dev python3-venv build-essential libssl-dev libffi-dev

----------------------------------------

TITLE: Installing C++ Development Tools on Ubuntu
DESCRIPTION: Command to install essential build tools, GCC compiler, and GDB debugger on Ubuntu.

LANGUAGE: bash
CODE:
sudo apt-get install build-essential gdb

----------------------------------------

TITLE: Uninstalling an Extension Programmatically in Visual Studio Code
DESCRIPTION: This TypeScript code shows how to use the new workbench.extensions.uninstallExtension command to programmatically uninstall an extension.

LANGUAGE: typescript
CODE:
vscode.commands.executeCommand('workbench.extensions.uninstallExtension', 'ms-python.python');

----------------------------------------

TITLE: Adding JSON Schema Validation in VS Code Settings
DESCRIPTION: JSON configuration to enable schema validation for specific JSON files.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "bower.json"
        ],
        "url": "https://json.schemastore.org/bower"
    }
]

----------------------------------------

TITLE: Configuring $EDITOR in PowerShell
DESCRIPTION: Sets the $EDITOR environment variable to use VS Code in PowerShell when VSCODE_INJECTION is enabled.

LANGUAGE: powershell
CODE:
if ($env:VSCODE_INJECTION -eq "1") {
    $env:EDITOR = "code --wait"  # or 'code-insiders' for VS Code Insiders
}

----------------------------------------

TITLE: Command Line File Opening in VS Code
DESCRIPTION: Examples of opening files and folders via command line interface in VS Code, including creating new files and opening multiple folders.

LANGUAGE: shell
CODE:
code mynewfile.js
code c:\myfolder1 c:\myfolder2 c:\myapp\program.cs
code -n

----------------------------------------

TITLE: Configuring Terminal Profiles in settings.json
DESCRIPTION: Shows how to set up a custom PowerShell terminal profile with environment variables and an icon in VS Code settings.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "overrideName": true,
      "icon": "terminal-powershell",
      "env": {
        "TEST_VAR": "value"
      }
    }
  },
  "terminal.integrated.defaultProfile.windows": "PowerShell"
}

----------------------------------------

TITLE: Defining SignatureHelpTriggerReason Enum in TypeScript
DESCRIPTION: Definition of the SignatureHelpTriggerReason enum in TypeScript. This enum specifies the different reasons why signature help might be triggered.

LANGUAGE: TypeScript
CODE:
export enum SignatureHelpTriggerReason {
  Invoke = 1,
  TriggerCharacter = 2,
  ContentChange = 3,
}

----------------------------------------

TITLE: Configuring Task Definitions in package.json
DESCRIPTION: Contributes and defines an object literal structure that allows to uniquely identify a contributed task in the system.

LANGUAGE: json
CODE:
{
  "taskDefinitions": [
    {
      "type": "npm",
      "required": ["script"],
      "properties": {
        "script": {
          "type": "string",
          "description": "The script to execute"
        },
        "path": {
          "type": "string",
          "description": "The path to the package.json file. If omitted the package.json in the root of the workspace folder is used."
        }
      }
    }
  ]
}

----------------------------------------

TITLE: Keyboard Shortcuts for IntelliCode in VS Code
DESCRIPTION: Documentation demonstrates the use of Tab key for accepting IntelliCode predictions and navigating suggestions.

LANGUAGE: markdown
CODE:
kbstyle(Tab)

----------------------------------------

TITLE: Logging Output with Log4js in TypeScript
DESCRIPTION: This snippet shows how Copilot adapts its suggestion to use a specific logging framework (Log4js) when it's imported in the file.

LANGUAGE: typescript
CODE:
logger.info(`Result: ${add(2, 3)}`);

----------------------------------------

TITLE: Menu Contribution with When Clause
DESCRIPTION: Example of using a when clause in package.json to conditionally show a context menu item based on folder name.

LANGUAGE: json
CODE:
// Note, this assumes you have already defined a command called ext.doSpecial
"menus": {
  "explorer/context": [
    {
      "command": "ext.doSpecial",
      "when": "explorerResourceIsFolder && resourceFilename in ext.supportedFolders"
    }
  ]
}

----------------------------------------

TITLE: Defining Language Default Icons in package.json
DESCRIPTION: This JSON snippet shows how to define default icons for a specific language in the package.json file of a VS Code extension. It includes light and dark versions of the icon.

LANGUAGE: json
CODE:
{
  "contributes": {
    "languages": [
      {
        "id": "latex",
        "icon": {
          "light": "./icons/latex-light.png",
          "dark": "./icons/latex-dark.png"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: JSON Schema with File Match Patterns
DESCRIPTION: This snippet illustrates how to use file match patterns in JSON schema associations, including wildcards and exclusion patterns.

LANGUAGE: json
CODE:
"json.schemas": [
    {
      "fileMatch": [
        "/receipts/*.json",
        "!/receipts/*.excluded.json"
      ],
      "url": "./receipts.schema.json"
    }
  ]

----------------------------------------

TITLE: Implementing Multiple markdown-it Plugins
DESCRIPTION: TypeScript example showing how to chain multiple markdown-it plugins together.

LANGUAGE: typescript
CODE:
return md.use(require('markdown-it-emoji')).use(require('markdown-it-hashtag'));

----------------------------------------

TITLE: Creating Custom Task Execution in Visual Studio Code
DESCRIPTION: TypeScript code demonstrating how to create a custom task execution in VS Code using the CustomExecution API.

LANGUAGE: TypeScript
CODE:
let execution = new vscode.CustomExecution((terminalRenderer, cancellationToken, args): Thenable<number> => {
        return new Promise<number>(resolve => {
            // This is the custom task callback!
            resolve(0);
        });
    });
const taskName = "First custom task";
let task = new vscode.Task2(kind, vscode.TaskScope.Workspace, taskName, taskType, execution);

----------------------------------------

TITLE: Setting Breakpoint in Express Route Handler
DESCRIPTION: JavaScript code snippet showing where to set a breakpoint in the Express application's index route handler for debugging.

LANGUAGE: javascript
CODE:
res.render('index', { title: 'Express' });

----------------------------------------

TITLE: Configuring OS-specific launch settings in launch.json
DESCRIPTION: You can now specify OS-specific configurations inside a launch.json file for debugging.

LANGUAGE: json
CODE:
{
   "type": "node",
   "request": "launch",
   "runtimeExecutable": "mynode",
   "windows": {
     "runtimeExecutable": "mynode.exe"
   }
}

----------------------------------------

TITLE: Installing NVM (Node Version Manager) on Chrome OS
DESCRIPTION: Commands to download and install NVM for managing Node.js versions on Chrome OS Linux environment.

LANGUAGE: sh
CODE:
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
source .bashrc

----------------------------------------

TITLE: Enabling Enhanced Colorization in VSCode C++ Extension
DESCRIPTION: This JSON snippet shows how to enable enhanced colorization for C++ in Visual Studio Code settings. The setting is enabled by default.

LANGUAGE: json
CODE:
"C_Cpp.enhancedColorization": "enabled"

----------------------------------------

TITLE: Defining SignatureHelpContext Interface in TypeScript
DESCRIPTION: Definition of the SignatureHelpContext interface in TypeScript. This interface provides additional context information when signature help is triggered in the editor.

LANGUAGE: TypeScript
CODE:
export interface SignatureHelpContext {
  readonly triggerReason: SignatureHelpTriggerReason;
  readonly triggerCharacter?: string;
  readonly isRetrigger: boolean;
}

----------------------------------------

TITLE: Color Customization Settings Merge Example
DESCRIPTION: Demonstrates how object-type settings are merged between user and workspace scopes for color customizations

LANGUAGE: json
CODE:
{
  "workbench.colorCustomizations": {
    "editor.background": "#000088",
    "editor.selectionBackground": "#00FF00",
    "editor.foreground": "#880000"
  }
}

----------------------------------------

TITLE: Configuring Authentication Provider in package.json
DESCRIPTION: Contributes an authentication provider to VS Code. This sets up an activation event for the provider and displays it in the extension's features.

LANGUAGE: json
CODE:
{
  "contributes": {
    "authentication": [
      {
        "label": "Azure Dev Ops",
        "id": "azuredevops"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring External URI Openers in VS Code
DESCRIPTION: Setting to configure default openers for external URIs.

LANGUAGE: JSON
CODE:
"workbench.externalUriOpeners": {
  "localhost:8081": "myExtension.opener"
}

----------------------------------------

TITLE: Configuring Code Actions in Visual Studio Code
DESCRIPTION: Shows how to set up a keybinding for a specific preferred Code Action in VS Code.

LANGUAGE: json
CODE:
{
  "key": "ctrl+shift+r ctrl+e",
  "command": "editor.action.codeAction",
  "args": {
    "kind": "refactor.extract.constant",
    "preferred": true
  }
}

----------------------------------------

TITLE: Theme Configuration with TextMate Theme
DESCRIPTION: Example of a VS Code theme configuration file that uses a custom TextMate theme file for token colors.

LANGUAGE: json
CODE:
{
  "type": "dark",
  "colors": {
    "editor.background": "#1e1e1e",
    "editor.foreground": "#d4d4d4",
    "editorIndentGuide.background": "#404040",
    "editorRuler.foreground": "#333333",
    "activityBarBadge.background": "#007acc",
    "sideBarTitle.foreground": "#bbbbbb"
  },
  "tokenColors": "./Diner.tmTheme"
}

----------------------------------------

TITLE: Configuring Views in package.json
DESCRIPTION: Contributes a view to VS Code, specifying its identifier, name, and the container it belongs to.

LANGUAGE: json
CODE:
{
  "contributes": {
    "views": {
      "explorer": [
        {
          "id": "nodeDependencies",
          "name": "Node Dependencies",
          "when": "workspaceHasPackageJSON",
          "icon": "media/dep.svg",
          "contextualTitle": "Package Explorer"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: TypeScript extension API example
DESCRIPTION: Example showing how to use the VS Code extension API to configure TypeScript server plugins

LANGUAGE: typescript
CODE:
export async function activate(context: vscode.ExtensionContext) {
    const tsExtension = vscode.extensions.gettsExtension('vscode.typescript-language-features');
    if (!tsExtension) {
        return;
    }

    await tsExtension.activate();

    if (!tsExtension.exports || !tsExtension.exports.getAPI) {
        return;
    }

    const api = tsExtension.exports.getAPI(0);
    if (!api) {
        return;
    }

    api.configurePlugin('my-typescript-plugin-id', {
        someValue: process.env['SOME_VALUE']
    });
}

----------------------------------------

TITLE: VS Code Engine Compatibility Configuration
DESCRIPTION: JSON configuration showing how to specify VS Code version compatibility in package.json.

LANGUAGE: json
CODE:
{
  "engines": {
    "vscode": "^1.8.0"
  }
}

----------------------------------------

TITLE: Views Container Contribution Point Configuration
DESCRIPTION: Demonstrates the syntax for adding new Views Containers to VS Code's workbench using the contributes.viewsContainers contribution point.

LANGUAGE: json
CODE:
{
  "contributes": {
    "viewsContainers": {
      // contribution point implementation
    }
  }
}

----------------------------------------

TITLE: Defining Language Properties in VS Code Extension (JSON)
DESCRIPTION: This snippet shows how to define language properties in a VS Code extension's package.json file. It specifies the language identifier, file extensions, and aliases for the Java language.

LANGUAGE: json
CODE:
{
    "languages": [{
        "id": "java",
        "extensions": [ ".java", ".jav" ],
        "aliases": [ "Java", "java" ]
    }]
}

----------------------------------------

TITLE: Executing a Command with Arguments and Handling Results in TypeScript
DESCRIPTION: This snippet shows how to execute the 'vscode.executeDefinitionProvider' command with arguments and handle its asynchronous result in a VS Code extension using TypeScript.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

async function printDefinitionsForActiveEditor() {
  const activeEditor = vscode.window.activeTextEditor;
  if (!activeEditor) {
    return;
  }

  const definitions = await vscode.commands.executeCommand<vscode.Location[]>(
    'vscode.executeDefinitionProvider',
    activeEditor.document.uri,
    activeEditor.selection.active
  );

  for (const definition of definitions) {
    console.log(definition);
  }
}

----------------------------------------

TITLE: Starting Debug Session with Copilot for Node.js in Bash
DESCRIPTION: This command uses the copilot-debug prefix to automatically configure and start a debugging session for a Node.js application.

LANGUAGE: bash
CODE:
copilot-debug node app.js

----------------------------------------

TITLE: Generating SSH Key Pair using bash
DESCRIPTION: Command to generate an ED25519 SSH key pair for secure authentication with remote machines.

LANGUAGE: bash
CODE:
ssh-keygen -t ed25519

----------------------------------------

TITLE: Implementing Window Activity API in VS Code Extension
DESCRIPTION: TypeScript code demonstrating how to use the Window Activity API to manage resources based on window state.

LANGUAGE: typescript
CODE:
vscode.window.onDidChangeWindowState(state => {
  if (state.active && !longRunningProcess) {
    longRunningProcess = startLongRunningProcess();
  } else if (!state.active && longRunningProcess) {
    longRunningProcess.end();
    longRunningProcess = undefined;
  }
})

----------------------------------------

TITLE: ProxyCommand Configuration for Jump Box Setup
DESCRIPTION: SSH configuration demonstrating how to set up connection through a jump box using ProxyCommand for secure environments.

LANGUAGE: yaml
CODE:
# Jump box with public IP address
Host jump-box
    HostName 52.179.157.97
    User sana
    IdentityFile ~/.ssh/jumpbox

# Target machine with private IP address
Host target-box
    HostName <IP address of target>
    User sana
    IdentityFile ~/.ssh/target
    ProxyCommand ssh -q -W %h:%p jump-box

----------------------------------------

TITLE: Configuring Terminal Profile in package.json
DESCRIPTION: Contributes a terminal profile to VS Code, allowing extensions to handle the creation of the profiles.

LANGUAGE: json
CODE:
{
  "activationEvents": [
    "onTerminalProfile:my-ext.terminal-profile"
  ],
  "contributes": {
    "terminal": {
      "profiles": [
        {
          "title": "Profile from extension",
          "id": "my-ext.terminal-profile"
        }
      ]
    }
  }
}

----------------------------------------

TITLE: Creating Global Code Snippets
DESCRIPTION: Example of defining a global code snippet that adds a copyright header for JavaScript and TypeScript files. Uses the scope attribute to target specific languages.

LANGUAGE: json
CODE:
{
    "JS & TS Stub": {
        "scope": "javascript,typescript",
        "prefix": "stub",
        "body": [
            "/*--------------------------------------------------------------",
            " *  Copyright (c) Your Corporation. All rights reserved.",
            " *  Licensed under the MIT License.",
            " *-------------------------------------------------------------*/",
            "",
            "'use strict';",
            "",
            "$0"
        ],
        "description": "Insert Copyright Statement"
    }
}

----------------------------------------

TITLE: D-Bus Service Permissions for KWallet
DESCRIPTION: Flatpak command to grant VS Code necessary D-Bus permissions for accessing KWallet5 service.

LANGUAGE: bash
CODE:
flatpak override --user --talk-name=org.kde.kwalletd5 --talk-name=org.freedesktop.secrets com.visualstudio.code

----------------------------------------

TITLE: Implementing a Resource-based Calculator in Rust
DESCRIPTION: This Rust code implements a calculator using the WebAssembly Component Model's resource concept for state management.

LANGUAGE: rust
CODE:
impl EngineImpl {
	fn new() -> Self {
		EngineImpl {
			left: None,
			right: None,
		}
	}

	fn push_operand(&mut self, operand: u32) {
		if self.left == None {
			self.left = Some(operand);
		} else {
			self.right = Some(operand);
		}
	}

	fn push_operation(&mut self, operation: Operation) {
        let left = self.left.unwrap();
        let right = self.right.unwrap();
        self.left = Some(match operation {
			Operation::Add => left + right,
			Operation::Sub => left - right,
			Operation::Mul => left * right,
			Operation::Div => left / right,
		});
	}

	fn execute(&mut self) -> u32 {
		self.left.unwrap()
	}
}

----------------------------------------

TITLE: Configuring font weight in JSON
DESCRIPTION: JSON configuration for setting editor font weight using numeric values

LANGUAGE: json
CODE:
"editor.fontWeight": 350

----------------------------------------

TITLE: Configuring Task Dependencies in Visual Studio Code
DESCRIPTION: JSON configuration for a VS Code task that depends on other tasks executed in sequence.

LANGUAGE: json
CODE:
{
    "label": "One",
    "type": "shell",
    "command": "echo Hello ",
    "dependsOrder": "sequence",
    "dependsOn":[
        "Two",
        "Three"
    ]
}

----------------------------------------

TITLE: Defining Extension Kind in VS Code Extension Manifest
DESCRIPTION: Examples of how to set the 'extensionKind' property in the extension manifest to specify preferred running locations for VS Code extensions. This property determines where an extension runs based on workspace access needs and UI proximity requirements.

LANGUAGE: json
CODE:
"extensionKind": ["workspace"]

LANGUAGE: json
CODE:
"extensionKind": ["ui", "workspace"]

LANGUAGE: json
CODE:
"extensionKind": ["workspace", "ui"]

LANGUAGE: json
CODE:
"extensionKind": ["ui"]

----------------------------------------

TITLE: View-based Extension Activation
DESCRIPTION: Triggers extension activation when a specific view is expanded in VS Code's sidebar.

LANGUAGE: json
CODE:
"activationEvents": [
    "onView:nodeDependencies"
]

----------------------------------------

TITLE: Enabling Format on Save in VS Code Settings
DESCRIPTION: This JSON setting enables automatic formatting of Ruby files on save in VS Code. It ensures that your Ruby code is properly formatted every time you save a file.

LANGUAGE: json
CODE:
"editor.formatOnSave": true

----------------------------------------

TITLE: Installing Test CLI Dependencies for VS Code Extensions
DESCRIPTION: Install the required npm packages for running VS Code extension tests using the test CLI.

LANGUAGE: bash
CODE:
npm install --save-dev @vscode/test-cli @vscode/test-electron

----------------------------------------

TITLE: Configuring File Watcher Exclusions in VS Code
DESCRIPTION: Using the files.watcherExclude setting to exclude large directories from file watching in VS Code.

LANGUAGE: json
CODE:
"files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/node_modules/**": true
}

----------------------------------------

TITLE: Configuring Source File Mapping
DESCRIPTION: Maps source file locations between build and local development environments using sourceFileMap property.

LANGUAGE: json
CODE:
"sourceFileMap": {
    "/build/gcc-4.8-fNUjSI/gcc-4.8-4.8.4/build/i686-linux-gnu/libstdc++-v3/include/i686-linux-gnu": "/usr/include/i686-linux-gnu/c++/4.8",
    "/build/gcc-4.8-fNUjSI/gcc-4.8-4.8.4/build/i686-linux-gnu/libstdc++-v3/include": "/usr/include/c++/4.8"
}

----------------------------------------

TITLE: Generating JSDoc Comment with Copilot in VS Code
DESCRIPTION: This snippet illustrates how to use Copilot's '/doc' command to automatically generate a JSDoc comment for a JavaScript function. The function and generated comment are not fully visible in the image, but it shows Copilot's capability to create documentation.

LANGUAGE: javascript
CODE:
/**
 * Calculates the factorial of a given number.
 * @param {number} n - The number to calculate the factorial for.
 * @returns {number} The factorial of the input number.
 */
function factorial(n) {
  // Function implementation not visible in the image
}

----------------------------------------

TITLE: Using Multiple Icons with Text
DESCRIPTION: Demonstrates combining multiple icons with text in labels

LANGUAGE: typescript
CODE:
$(eye) $(heart) $(mark-github) GitHub

----------------------------------------

TITLE: Enhancing Piece Table with Line Break Information in TypeScript
DESCRIPTION: This snippet demonstrates how the piece table data structure is enhanced to include line break information for faster line lookup.

LANGUAGE: typescript
CODE:
class PieceTable {
    original: string;
    added: string;
    nodes: Node[];
}

class Node {
    type: NodeType;
    start: number;
    length: number;
    lineStarts: number[];
}

enum NodeType {
    Original,
    Added
}

----------------------------------------

TITLE: Configuring TypeScript in VS Code Settings
DESCRIPTION: JSON configuration for enabling TypeScript 5.2 features and linked editing in VS Code.

LANGUAGE: json
CODE:
{
  "typescript.tsdk": "path/to/typescript/lib",
  "editor.linkedEditing": true
}

----------------------------------------

TITLE: Stopping Docker Container
DESCRIPTION: Command to stop and remove the running Docker container, freeing up system resources.

LANGUAGE: bash
CODE:
docker-compose down

----------------------------------------

TITLE: Configuring Task Runner in VS Code
DESCRIPTION: JSON configuration for setting up an npm install task in VS Code's task runner.

LANGUAGE: json
CODE:
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "type": "npm",
            "script": "install",
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}

----------------------------------------

TITLE: Creating Terminal with Environment in VS Code API
DESCRIPTION: Example of using the Extension API to create a terminal with custom environment variables

LANGUAGE: typescript
CODE:
window.createTerminal({
  name: 'My session',
  shell: 'zsh',
  env: {
    JAVA_HOME: '<path>'
  }
});

----------------------------------------

TITLE: Fine-tuning Configuration JSON
DESCRIPTION: Configuration file template for fine-tuning setup including subscription details, resource names and execution commands.

LANGUAGE: json
CODE:
{
  "SUBSCRIPTION_ID": "<your-subscription-id>",
  "RESOURCE_GROUP_NAME": "<your-resource-group-name>",
  "STORAGE_ACCOUNT_NAME": "<your-storage-account-name>",
  "FILE_SHARE_NAME": "<your-file-share-name>",
  "ACA_JOB_NAME": "<your-aca-job-name>",
  "COMMANDS": [
    "cd /mount",
    "pip install huggingface-hub==0.22.2",
    "huggingface-cli download <your-model-name> --local-dir ./model-cache/<your-model-name> --local-dir-use-symlinks False",
    "pip install -r ./setup/requirements.txt",
    "python3 ./finetuning/invoke_olive.py && find models/ -print | grep adapter/adapter"
  ]
}

----------------------------------------

TITLE: Building Multi-Platform Dev Container Images using CLI
DESCRIPTION: Command for building multi-platform container images using the devcontainer CLI. The command supports specifying multiple platform architectures and pushing to a container registry. This is particularly useful when building images that need to run on different CPU architectures.

LANGUAGE: bash
CODE:
devcontainer build --workspace-folder <workspace folder> --platform linux/arm64,linux/amd64 --image-name <your Docker ID>/<name> --push

----------------------------------------

TITLE: Defining BranchQuery Interface for Git Extension API
DESCRIPTION: TypeScript interface definition for Git extension API BranchQuery to get repository branches with optional remote and contains parameters.

LANGUAGE: typescript
CODE:
export interface BranchQuery {
  readonly remote?: boolean;
  readonly contains?: string;
}
export interface Repository {
  getBranches(query: BranchQuery): Promise<Ref[]>;
}

----------------------------------------

TITLE: Disabling UID/GID Update in VS Code Dev Containers
DESCRIPTION: Demonstrates how to disable the automatic update of UID and GID for the container user on Linux systems using the 'updateRemoteUserUID' property in devcontainer.json.

LANGUAGE: json
CODE:
{
  "updateRemoteUserUID": false
}

----------------------------------------

TITLE: Configuring Column Selection Keyboard Shortcuts in VS Code
DESCRIPTION: Example keybindings.json configuration to enable keyboard shortcuts for column selection in VS Code.

LANGUAGE: json
CODE:
[
    { "key": "shift+alt+down",     "command": "cursorColumnSelectDown",
                                    "when": "editorTextFocus" },
    { "key": "shift+alt+left",     "command": "cursorColumnSelectLeft",
                                    "when": "editorTextFocus" },
    { "key": "shift+alt+pagedown", "command": "cursorColumnSelectPageDown",
                                    "when": "editorTextFocus" },
    { "key": "shift+alt+pageup",   "command": "cursorColumnSelectPageUp",
                                    "when": "editorTextFocus" },
    { "key": "shift+alt+right",    "command": "cursorColumnSelectRight",
                                    "when": "editorTextFocus" },
    { "key": "shift+alt+up",       "command": "cursorColumnSelectUp",
                                    "when": "editorTextFocus" }
]

----------------------------------------

TITLE: Using Custom JSON Schema in VS Code Settings
DESCRIPTION: JSON configuration to define a custom schema for JSON validation inline.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "/.myconfig"
        ],
        "schema": {
            "type": "object",
            "properties": {
                "name" : {
                    "type": "string",
                    "description": "The name of the entry"
                }
            }
        }
    }
]

----------------------------------------

TITLE: Creating a Hello World TypeScript Program
DESCRIPTION: This snippet demonstrates a simple Hello World program in TypeScript. It shows the use of the 'let' keyword and string type declaration.

LANGUAGE: typescript
CODE:
let message : string = "Hello World";
console.log(message);

----------------------------------------

TITLE: ControlMaster Configuration for Connection Reuse
DESCRIPTION: SSH configuration for enabling ControlMaster to reuse existing connections and reduce authentication prompts.

LANGUAGE: yaml
CODE:
Host *
    ControlMaster auto
    ControlPath ~/.ssh/sockets/%r@%h-%p
    ControlPersist 600

----------------------------------------

TITLE: Configuring JavaScript Import Behavior in React Native
DESCRIPTION: Adding the 'allowSyntheticDefaultImports' compiler option to jsconfig.json enables IntelliSense for ES6 import statements in React Native projects.

LANGUAGE: json
CODE:
 {
    "compilerOptions": {
        "allowSyntheticDefaultImports": true
    }
}

----------------------------------------

TITLE: Setting Default Go Formatter
DESCRIPTION: JSON configuration to set the Go extension as the default formatter for Go files.

LANGUAGE: json
CODE:
"[go]": {
    "editor.defaultFormatter": "golang.go"
}

----------------------------------------

TITLE: Configuring Volume Mount in devcontainer.json
DESCRIPTION: JSON configuration for mounting a volume to persist bash history in VS Code devcontainer.json.

LANGUAGE: json
CODE:
"mounts": [
    "source=projectname-bashhistory,target=/commandhistory,type=volume"
]

----------------------------------------

TITLE: Configuring Terminal Environment Variables
DESCRIPTION: Example of setting environment variables for the integrated terminal using platform-specific settings

LANGUAGE: json
CODE:
"terminal.integrated.env.linux": {
  "PYTHONPATH": "~/packages"
}

----------------------------------------

TITLE: Defining Piece Table Data Structure in TypeScript
DESCRIPTION: This snippet shows the initial implementation of a piece table data structure, including the PieceTable class, Node class, and NodeType enum.

LANGUAGE: typescript
CODE:
class PieceTable {
    original: string; // original contents
    added: string; // user added contents
    nodes: Node[];
}

class Node {
    type: NodeType;
    start: number;
    length: number;
}

enum NodeType {
    Original,
    Added
}

----------------------------------------

TITLE: Enabling Terminal Image Support in VS Code Settings
DESCRIPTION: JSON configuration for enabling experimental image support in the VS Code integrated terminal.

LANGUAGE: json
CODE:
{
  "terminal.integrated.experimentalImageSupport": true
}

----------------------------------------

TITLE: LSIF Graph Data for Hover Example
DESCRIPTION: TypeScript representation of LSIF graph data for a hover example, showing vertices and edges.

LANGUAGE: typescript
CODE:
// a vertex representing the document
{ id: 1, type: "vertex", label: "document", uri: "file:///Users/username/sample.ts", languageId: "typescript" }
// a vertex representing the range for the identifier bar
{ id: 4, type: "vertex", label: "range", start: { line: 0, character: 9}, end: { line: 0, character: 12 } }
// an edge saying that the document with id 1 contains the range with id 4
{ id: 5, type: "edge", label: "contains", outV: 1, inV: 4}
// a vertex representing the actual hover result
{ id: 6, type: "vertex", label: "hoverResult",
  result: {
    contents: [
      { language: "typescript", value: "function bar(): void" }
    ]
  }
}
// an edge linking the hover result to the range.
{ id: 7, type: "edge", label: "textDocument/hover", outV: 4, inV: 6 }

----------------------------------------

TITLE: Folder Structure Example for Multi-Project Dev Container Setup
DESCRIPTION: Example folder structure showing organization of multiple repositories by programming language, demonstrating how to arrange projects for container configuration.

LANGUAGE: plaintext
CODE:
📁 Repos
   📁 node
   📁 python
      📁 starter-snake-python
      📁 vscode-remote-try-python
      📁 your-python-project-here
   📁 go
   📁 dotnet

----------------------------------------

TITLE: Configuring Keyboard Shortcuts for Quick Window Switching
DESCRIPTION: JSON configuration for adding keyboard shortcuts to quickly switch between VS Code windows using Ctrl+R

LANGUAGE: json
CODE:
[
    {
        "key": "ctrl+r",
        "command": "workbench.action.quickSwitchWindow"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.quickOpenNavigateNext",
        "when": "inWindowsPicker"
    }
]

----------------------------------------

TITLE: Navigating to Project Directory
DESCRIPTION: Command to change the current directory to the newly created project folder after generating the Maven project.

LANGUAGE: cmd
CODE:
cd webapp-project

----------------------------------------

TITLE: Opening a Debug Adapter Protocol Source in VS Code
DESCRIPTION: This snippet shows how to use the debug.asDebugSourceUri API to open a Debug Adapter Protocol Source in a VS Code editor.

LANGUAGE: typescript
CODE:
export async function openDAPSource(session: vscode.DebugSession, source: DebugProtocol.Source) {
  const uri = vscode.debug.asDebugSourceUri(source, session);
  vscode.window.showTextDocument(vscode.workspace.openTextDocument(uri));
}

----------------------------------------

TITLE: Configuring GitLab CI for Automated VS Code Extension Publishing
DESCRIPTION: YAML configuration for adding an automated publishing step to a GitLab CI pipeline. This job is triggered only when a tag is pushed to the repository.

LANGUAGE: yaml
CODE:
deploy:
  only:
    - tags
  script:
    - npm run deploy

----------------------------------------

TITLE: Defining Semantic Token Modifiers in package.json
DESCRIPTION: Contributes new semantic token modifiers that can be highlighted via theme rules.

LANGUAGE: json
CODE:
{
  "contributes": {
    "semanticTokenModifiers": [
      {
        "id": "native",
        "description": "Annotates a symbol that is implemented natively"
      }
    ]
  }
}

----------------------------------------

TITLE: Opening a Debug Adapter Protocol Source in VS Code
DESCRIPTION: This snippet shows how to use the debug.asDebugSourceUri API to open a Debug Adapter Protocol Source in a VS Code editor.

LANGUAGE: typescript
CODE:
export async function openDAPSource(session: vscode.DebugSession, source: DebugProtocol.Source) {
  const uri = vscode.debug.asDebugSourceUri(source, session);
  vscode.window.showTextDocument(vscode.workspace.openTextDocument(uri));
}

----------------------------------------

TITLE: Disabling Automatic Port Forwarding in VS Code Remote
DESCRIPTION: This snippet shows how to disable automatic port forwarding in VS Code Remote using a configuration setting. This can be useful for setups that don't work well with automatic port forwarding.

LANGUAGE: json
CODE:
"remote.autoForwardPorts": false

----------------------------------------

TITLE: Setting Docker Compose Project Name via PowerShell
DESCRIPTION: Command to start VS Code with a specific Docker Compose project name using PowerShell

LANGUAGE: powershell
CODE:
# from PowerShell
$env:COMPOSE_PROJECT_NAME=foo
code .

----------------------------------------

TITLE: Adding Local Lookup Paths for Repository Configurations in VS Code
DESCRIPTION: This setting allows adding local paths for looking up repository configurations. The folder structure should follow the pattern '<host>/<owner>/<repository>'.

LANGUAGE: json
CODE:
"dev.containers.repositoryConfigurationPaths": [
    "<local-path>"
]

----------------------------------------

TITLE: Converting YAML Grammar to JSON
DESCRIPTION: Command-line instructions for installing js-yaml and converting a YAML-based grammar to JSON format for use in VS Code.

LANGUAGE: bash
CODE:
# Install js-yaml as a development only dependency in your extension
$ npm install js-yaml --save-dev

# Use the command-line tool to convert the yaml grammar to json
$ npx js-yaml syntaxes/abc.tmLanguage.yaml > syntaxes/abc.tmLanguage.json

----------------------------------------

TITLE: Exposing Methods from Preload Script in Electron
DESCRIPTION: Illustrates how to expose methods from a preload script to the main script in Electron using the contextBridge API.

LANGUAGE: javascript
CODE:
const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('vscode', {
  updateSettings: (key, value) => ipcRenderer.invoke('update-settings', key, value)
});

----------------------------------------

TITLE: Fix Volume Permissions in devcontainer.json
DESCRIPTION: JSON configuration to fix volume permissions for Linux hosts with different UID/GID.

LANGUAGE: json
CODE:
"postCreateCommand": {
  "Fix Volume Permissions": "sudo chown -R $(whoami): /commandhistory"
}

----------------------------------------

TITLE: Creating New Rust Project
DESCRIPTION: Terminal commands to create and open a new Rust project using Cargo.

LANGUAGE: bash
CODE:
cargo new hello_world
cd hello_world
code .

----------------------------------------

TITLE: Configuring Bash History for Root User in Dockerfile
DESCRIPTION: Dockerfile configuration to persist bash history for root user by exporting PROMPT_COMMAND and setting HISTFILE location.

LANGUAGE: docker
CODE:
RUN SNIPPET="export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
    && echo "$SNIPPET" >> "/root/.bashrc"

----------------------------------------

TITLE: Configuring Remote User and Environment in VS Code Dev Containers
DESCRIPTION: Demonstrates new configuration options in devcontainer.json for setting the remote user and environment variables for the VS Code Server in containers.

LANGUAGE: json
CODE:
{
  "remoteUser": "username",
  "remoteEnv": {
    "ENV_VAR": "value"
  }
}

----------------------------------------

TITLE: CSS Theme Rule Implementation
DESCRIPTION: Example of CSS rules generated for theme styling tokens.

LANGUAGE: css
CODE:
/* Function name */
.entity.name.function { color: #A6E22E; }

/* Class name */
.entity.name.class { color: #A6E22E; text-decoration: underline; }

----------------------------------------

TITLE: Enabling Terminal Mouse Wheel Zoom in VS Code
DESCRIPTION: This snippet shows how to enable zooming in the terminal using the mouse wheel in VS Code. It uses a setting to allow zooming while holding the Ctrl key and scrolling.

LANGUAGE: json
CODE:
"terminal.integrated.mouseWheelZoom": true

----------------------------------------

TITLE: Adding MongoDB Error Handler
DESCRIPTION: Adding an error handler for MongoDB connection failures

LANGUAGE: javascript
CODE:
mongoose.connection.on("error", () => { console.log("DB connection error"); });

----------------------------------------

TITLE: Starting VS Code Server
DESCRIPTION: Command to start the VS Code Server after installation. This initializes the server and prepares it for remote connections.

LANGUAGE: bash
CODE:
code-server

----------------------------------------

TITLE: Adding a key binding for inserting a snippet in VS Code
DESCRIPTION: Example of adding a custom key binding to insert a snippet that encloses the selected text in single quotes.

LANGUAGE: json
CODE:
{
	"key": "cmd+k '",
	"command": "editor.action.insertSnippet",
	"args": { "snippet": "'$TM_SELECTED_TEXT'" }
}

----------------------------------------

TITLE: Configuring Runtime Arguments for ECMAScript Modules
DESCRIPTION: This launch configuration snippet shows how to set up debugging for Node.js applications using ECMAScript modules.

LANGUAGE: json
CODE:
"runtimeArgs": ["--experimental-modules"]

LANGUAGE: json
CODE:
"runtimeArgs": ["-r", "esm"]

----------------------------------------

TITLE: Configuring Volume in Docker Compose
DESCRIPTION: Docker Compose configuration for creating and mounting a volume to persist bash history.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
      - projectname-bashhistory:/commandhistory
     # ...
volumes:
  projectname-bashhistory:

----------------------------------------

TITLE: Configuring ESLint Auto Fix on Save in VS Code
DESCRIPTION: This snippet shows how to configure VS Code to automatically fix ESLint issues on save for all providers or specifically for ESLint.

LANGUAGE: json
CODE:
{
    "editor.codeActionsOnSave": {
        "source.fixAll": true
    }
}

LANGUAGE: json
CODE:
{
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": true
    }
}

LANGUAGE: json
CODE:
{
    "editor.codeActionsOnSave": {
        "source.fixAll": true,
        "source.fixAll.eslint": false
    }
}

----------------------------------------

TITLE: Configuring Default Port Source for Remote SSH
DESCRIPTION: Sets the default value for autoForwardPortsSource to 'output' for Remote SSH connections without modifying machine settings.

LANGUAGE: markdown
CODE:
```
remote.autoForwardPortsSource
```

----------------------------------------

TITLE: Configuring NPM Scripts for esbuild VS Code Extension Bundling
DESCRIPTION: JSON configuration for package.json scripts to run esbuild and TypeScript compiler for VS Code extension development and packaging.

LANGUAGE: json
CODE:
"scripts": {
    "compile": "npm run check-types && node esbuild.js",
    "check-types": "tsc --noEmit",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "vscode:prepublish": "npm run package",
    "package": "npm run check-types && node esbuild.js --production"
}

----------------------------------------

TITLE: Configuring Display Language in VS Code settings.json
DESCRIPTION: Sets the default view mode for the Problems panel in VS Code.

LANGUAGE: JSON
CODE:
"problems.defaultViewMode": "table"

----------------------------------------

TITLE: Implementing WebAssembly-based Language Server in Rust
DESCRIPTION: This code snippet demonstrates a simple Rust-based language server that responds to a 'GotoDefinition' request with a predefined result.

LANGUAGE: rust
CODE:
match cast::<GotoDefinition>(req) {
    Ok((id, params)) => {
        let uri = params.text_document_position_params.text_document.uri;
        eprintln!("Received gotoDefinition request #{} {}", id, uri.to_string());
        let loc = Location::new(
            uri,
            lsp_types::Range::new(lsp_types::Position::new(0, 0), lsp_types::Position::new(0, 0))
        );
        let mut vec = Vec::new();
        vec.push(loc);
        let result = Some(GotoDefinitionResponse::Array(vec));
        let result = serde_json::to_value(&result).unwrap();
        let resp = Response { id, result: Some(result), error: None };
        connection.sender.send(Message::Response(resp))?;
        continue;
    }
    Err(err @ ExtractError::JsonError { .. }) => panic!("{err:?}"),
    Err(ExtractError::MethodMismatch(req)) => req,
};

----------------------------------------

TITLE: Exposing Ports in Dockerfile for .NET Application
DESCRIPTION: This Dockerfile snippet exposes ports 5000 and 5001 for HTTP and HTTPS traffic in a .NET application container.

LANGUAGE: docker
CODE:
FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base
WORKDIR /app
EXPOSE 5000
EXPOSE 5001

----------------------------------------

TITLE: Enabling Custom Display Labels for Tabs in VS Code
DESCRIPTION: JSON configuration to enable custom display labels for tabs and specify naming patterns in Visual Studio Code.

LANGUAGE: json
CODE:
"workbench.editor.customLabels.enabled": true,
"workbench.editor.customLabels.patterns": {
    "**/src/**/index.html": "${dirname}/${filename}"
}

----------------------------------------

TITLE: Configuring GitHub Actions for Automated VS Code Extension Publishing
DESCRIPTION: YAML configuration for adding an automated publishing step to a GitHub Actions workflow. This step is conditionally executed based on build success, tag presence, and operating system.

LANGUAGE: yaml
CODE:
- name: Publish
  if: success() && startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest'
  run: npm run deploy
  env:
    VSCE_PAT: ${{ secrets.VSCE_PAT }}

----------------------------------------

TITLE: Configuring HTML5 Suggestions in VS Code Settings
DESCRIPTION: This JSON snippet shows how to configure VS Code settings to enable or disable HTML5 tag, property, and value suggestions in the built-in HTML language support.

LANGUAGE: json
CODE:
// Configures if the built-in HTML language suggests HTML5 tags, properties and values.
"html.suggest.html5": true

----------------------------------------

TITLE: Configuring Proxy Settings with Command Line Arguments in VS Code
DESCRIPTION: Command line arguments to control proxy settings in Visual Studio Code. Options include disabling proxy, setting manual proxy address, configuring PAC file URL, and setting proxy bypass list.

LANGUAGE: bash
CODE:
# Disable proxy
--no-proxy-server

# Manual proxy address
--proxy-server=<scheme>=<uri>[:<port>][;...] | <uri>[:<port>] | "direct://"

# Manual PAC address
--proxy-pac-url=<pac-file-url>

# Disable proxy per host
--proxy-bypass-list=(<trailing_domain>|<ip-address>)[:<port>][;...]

----------------------------------------

TITLE: Configuring Auto Replies for Windows Batch Scripts in VS Code
DESCRIPTION: This snippet shows how to configure automatic replies to terminal prompts in VS Code, specifically for the 'Terminate batch job (Y/N)?' prompt in Windows batch scripts.

LANGUAGE: json
CODE:
"terminal.integrated.autoReplies": {
  "Terminate batch job (Y/N)?": "Y\r"
}

----------------------------------------

TITLE: CodeLens Roundup Extension Pack Example
DESCRIPTION: Example JSON configuration showing a real Extension Pack manifest with multiple extensions included.

LANGUAGE: json
CODE:
"extensionPack": [
    "eamodio.gitlens",
    "VisualStudioOnlineApplicationInsights.application-insights",
    "kisstkondoros.vscode-codemetrics",
    "chrmarti.regex",
    "pflannery.vscode-versionlens"
]

----------------------------------------

TITLE: Creating a Custom Snippet in VS Code
DESCRIPTION: JSON configuration for a custom snippet that surrounds selected text with single quotes or inserts a placeholder.

LANGUAGE: json
CODE:
"in quotes": {
	"prefix": "inq",
	"body": "'${TM_SELECTED_TEXT:${1:type_here}}'"
}

----------------------------------------

TITLE: Debugging Single HTML File with Launch Configuration in VS Code
DESCRIPTION: This JSON snippet demonstrates a launch configuration for debugging a single HTML file without running a server. It specifies the browser type, request type, debug name, and the file path to open when launching the debugger.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "msedge",
      "request": "launch",
      "name": "Launch hello.html",
      "file": "${workspaceFolder}/hello.html"
    }
  ]
}

----------------------------------------

TITLE: Checking GCC Version in Bash
DESCRIPTION: Command to verify the installed version of GCC on the system.

LANGUAGE: bash
CODE:
gcc -v

----------------------------------------

TITLE: Creating Links in InputBox Prompts and Validation Messages
DESCRIPTION: Demonstrates how to add clickable links in InputBox prompts and validation messages using markdown-style syntax. The link target can be a URL or a command ID.

LANGUAGE: typescript
CODE:
const result = await vscode.window.showInputBox({
   prompt: 'Please enter a valid email address [more info](https://aka.ms/vscode-email-validation)',
   validateInput: text => {
      if (text.indexOf('@') === -1) {
         return 'Please enter a valid email address, [more info](https://aka.ms/vscode-email-validation)';
      }
      return undefined;
   }
});

----------------------------------------

TITLE: Configuring Visual Studio Code to Send Custom Sequences to Terminal
DESCRIPTION: This JSON snippet demonstrates how to configure a custom keybinding in Visual Studio Code to send a specific Unicode sequence to the integrated terminal.

LANGUAGE: json
CODE:
{
  "key": "ctrl+u",
  "command": "workbench.action.terminal.sendSequence",
  "args": { "text": "\u001b[1;5D\u007f" }
}

----------------------------------------

TITLE: Configuring Port Protocol and Auto-Forwarding in VS Code Remote
DESCRIPTION: This snippet demonstrates how to set a protocol and auto-forwarding behavior for a specific port using the remote.portsAttributes setting in VS Code.

LANGUAGE: json
CODE:
  "remote.portsAttributes": {
    "3000": {
      "label": "Application",
    "protocol": "https",
    "onAutoForward": "openPreview"
  }
  }

----------------------------------------

TITLE: Cloning VS Code Docs Repository without Binary Files - PowerShell
DESCRIPTION: Commands for cloning the VS Code documentation repository without large binary files on Windows systems using PowerShell. Sets environment variable for skipping binary downloads.

LANGUAGE: powershell
CODE:
$env:GIT_LFS_SKIP_SMUDGE="1"; git clone git@github.com:microsoft/vscode-docs.git
# or
$env:GIT_LFS_SKIP_SMUDGE="1"; git clone https://github.com/microsoft/vscode-docs.git

----------------------------------------

TITLE: Configuring JavaScript Project with jsconfig.json
DESCRIPTION: Example of using jsconfig.json to configure a JavaScript project in Visual Studio Code. This snippet shows how to set compiler options and exclude certain folders from the project.

LANGUAGE: json
CODE:
{
	"compilerOptions": {
		"target": "ES6"
	},
	"exclude": [
		"node_modules"
	]
}

----------------------------------------

TITLE: Sending Custom Request to WebAssembly Language Server
DESCRIPTION: This TypeScript code demonstrates how to send a custom request to count files in a workspace folder to the WebAssembly-based language server.

LANGUAGE: typescript
CODE:
const folder = workspace.workspaceFolders![0].uri;
const result = await client.sendRequest(CountFilesRequest, { folder: client.code2ProtocolConverter.asUri(folder) });
window.showInformationMessage(`The workspace contains ${result} files.`);

----------------------------------------

TITLE: HTML Snippet for Flask Templates
DESCRIPTION: Defines a VS Code snippet for quickly creating Flask template files that extend a base layout.

LANGUAGE: json
CODE:
"Flask Tutorial: template extending layout.html": {
    "prefix": "flextlayout",
    "body": [
        "{% extends \"layout.html\" %}",
        "{% block title %}",
        "$0",
        "{% endblock %}",
        "{% block content %}",
        "{% endblock %}"
    ],
    "description": "Boilerplate template that extends layout.html"
}

----------------------------------------

TITLE: Production Environment Variables Configuration
DESCRIPTION: Example production environment configuration file showing API endpoint and database connection settings.

LANGUAGE: bash
CODE:
# prod.env - production configuration

# API endpoint
MYPROJECT_APIENDPOINT=https://my.domain.com/api/

# Variables for the database
MYPROJECT_DBURL=https://my.domain.com/db/
MYPROJECT_DBUSER=coreuser
MYPROJECT_DBPASSWORD=kKKfa98*11@

----------------------------------------

TITLE: Configuring Azure Pipelines for Automated VS Code Extension Publishing
DESCRIPTION: YAML configuration for adding an automated publishing step to an Azure Pipelines workflow. This step is conditionally executed based on build success, tag presence, and operating system.

LANGUAGE: yaml
CODE:
- bash: |
    echo ">>> Publish"
    yarn deploy
  displayName: Publish
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Agent.OS'], 'Linux'))
  env:
    VSCE_PAT: $(VSCE_PAT)

----------------------------------------

TITLE: Implementing Single markdown-it Plugin
DESCRIPTION: TypeScript implementation showing how to extend markdown-it with a single plugin in the extension's activation function.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  return {
    extendMarkdownIt(md: any) {
      return md.use(require('markdown-it-emoji'));
    }
  };
}

----------------------------------------

TITLE: Default Extensions Configuration
DESCRIPTION: VS Code settings.json configuration for automatically installing extensions on SSH hosts.

LANGUAGE: json
CODE:
"remote.SSH.defaultExtensions": [
    "eamodio.gitlens",
    "mutantdino.resourcemonitor"
]

----------------------------------------

TITLE: Launch Configuration with NPM Script
DESCRIPTION: Example launch.json configuration for debugging an npm script that sets up Node debugging

LANGUAGE: json
CODE:
{
  "name": "Launch via NPM",
  "type": "node",
  "request": "launch",
  "cwd": "${workspaceRoot}",
  "runtimeExecutable": "npm",
  "windows": {
    "runtimeExecutable": "npm.cmd"
  },
  "runtimeArgs": [
    "run-script", "debug"
  ],
  "port": 5858
}

----------------------------------------

TITLE: Extension Pack Manifest Configuration
DESCRIPTION: JavaScript configuration showing how to include extensions in an Extension Pack's package.json manifest file.

LANGUAGE: javascript
CODE:
"extensionPack": [
        "publisherid.extensionName"
    ]

----------------------------------------

TITLE: Configuring Key Binding with Arguments in VS Code
DESCRIPTION: JSON configuration to override the Enter key to print 'Hello World' when the editor has focus.

LANGUAGE: json
CODE:
{ "key": "enter", "command": "type",
                    "args": { "text": "Hello World" },
                    "when": "editorTextFocus" }

----------------------------------------

TITLE: Setting Automatic Repository Installation for VS Code on Debian/Ubuntu
DESCRIPTION: Command to automatically install the apt repository and signing key for VS Code on Debian/Ubuntu systems.

LANGUAGE: bash
CODE:
echo "code code/add-microsoft-repo boolean true" | sudo debconf-set-selections

----------------------------------------

TITLE: Registering SignatureHelpProvider with Metadata in TypeScript
DESCRIPTION: Example of how to register a SignatureHelpProvider with metadata in TypeScript. This allows specifying trigger and retrigger characters for signature help.

LANGUAGE: TypeScript
CODE:
namespace languages {
  export function registerSignatureHelpProvider(
    selector: DocumentSelector,
    provider: SignatureHelpProvider,
    metadata: SignatureHelpProviderMetadata
  ): Disposable;
}

----------------------------------------

TITLE: Configuring Terminal Letter Spacing in Visual Studio Code
DESCRIPTION: Setting to increase the letter spacing in the integrated terminal by a specified number of pixels.

LANGUAGE: JSON
CODE:
{
  "terminal.integrated.letterSpacing": 2
}

----------------------------------------

TITLE: Customizing SSH Server Installation Path in VS Code settings
DESCRIPTION: Shows how to set custom installation paths for the VS Code server on remote SSH hosts using the remote.ssh.serverInstallPath setting. This allows specifying different paths for different hosts.

LANGUAGE: json
CODE:
"remote.SSH.serverInstallPath": {
    "work-main": "/vscode_clean",
    "work-test": "/vscode_sandbox"
}

----------------------------------------

TITLE: Defining Custom Snippets in JSON
DESCRIPTION: Example of creating a custom snippet with predefined color choices using the new snippet choices feature

LANGUAGE: json
CODE:
"color": {
  "prefix": "color", 
  "body": "> Pick your favorite color ${1|red,green,blue,pink|}.
< He likes $1."
}

----------------------------------------

TITLE: Limiting Emmet Suggestions to Markup and Stylesheet Files in VS Code
DESCRIPTION: JSON configuration to limit Emmet suggestions to only markup and stylesheet files in Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly"

----------------------------------------

TITLE: Azure Extensions Developer Role Matrix
DESCRIPTION: Markdown table detailing various developer roles and their corresponding Azure extension use cases. The table maps different types of developers to specific Azure services and deployment scenarios.

LANGUAGE: markdown
CODE:
|Type of Developer|Description|When to use|
|----------------------|---------------------|-------------|
|Fullstack developer|Developers who work on both frontend and backend aspects of apps.|If you're building a web app with both frontend and backend components, use these extensions to deploy and manage the entire stack on Azure.</br></br> **Azure Container Apps** creates or manages containerized apps that handle different parts of your stack.</br> **Azure Functions** creates serverless functions to handle backend tasks and integrate with frontend apps.</br> **Azure App Service** deploys complete web solutions, including dynamic backend services, APIs, and server-side logic.|
|Backend developer|Developers who build microservices architectures and use containers to encapsulate/manage individual microservices.|When developing microservices, backend logic, or APIs for your application, these tools provide the ability to scale effortlessly without managing infrastructure.</br></br>**Azure Container Apps** handles server-side logic, APIs, and microservices.</br> **Azure Functions** handles server-side logic and APIs.</br> **Azure Container Apps** deploys and manages containerized backend services.</br> **Azure Functions** allows you to build scalable, event-driven backend services without the need to manage any infrastructure.</br> **Azure App Service** allows you to deploy RESTful APIs, microservices, and other backend components.|

----------------------------------------

TITLE: Installing TypeScript Loader for webpack
DESCRIPTION: Command to install ts-loader for webpack to handle TypeScript files in VS Code extension bundling.

LANGUAGE: bash
CODE:
npm i --save-dev ts-loader

----------------------------------------

TITLE: .NET Docker Run Task Configuration
DESCRIPTION: Basic configuration for running a .NET application in a Docker container.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run .NET Core Image",
            "type": "docker-run",
            "netCore": {
                "appProject": "${workspaceFolder}/project.csproj"
            }
        }
    ]
}

----------------------------------------

TITLE: Installing Express Generator Globally
DESCRIPTION: Command to install the Express application generator globally using npm for scaffolding Express applications.

LANGUAGE: bash
CODE:
sudo npm install -g express-generator

----------------------------------------

TITLE: Creating a Webview Panel with Resource Restrictions in Visual Studio Code Extensions
DESCRIPTION: TypeScript code showing how to create a webview panel with restricted local resource loading in a VS Code extension.

LANGUAGE: typescript
CODE:
const panel = vscode.window.createWebviewPanel(CatCodingPanel.viewType, 'Cat Coding', vscode.ViewColumn.One, {
    // Restrict the webview to only loading local content from our extension's `media` directory.
    localResourceRoots: [vscode.Uri.file(path.join(extensionPath, 'media'))]
});

const resourceRoot = await panel.resourceRoot;
panel.html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${resourceRoot} https:;">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cat Coding</title>
</head>
<body>
    <img src="${resourceRoot}/${path.join(extensionPath, 'media')}/cat.gif" width="300" />
</body>
</html>`

----------------------------------------

TITLE: Configuring GitLab CI for VS Code Extension Testing
DESCRIPTION: YAML configuration for setting up a GitLab CI pipeline to test a VS Code extension in a Docker container. Includes steps for installing necessary dependencies and running tests with xvfb.

LANGUAGE: yaml
CODE:
image: node:12-buster

before_script:
  - npm install

test:
  script:
    - |
      apt update
      apt install -y libasound2 libgbm1 libgtk-3-0 libnss3 xvfb
      xvfb-run -a npm run test

----------------------------------------

TITLE: Executing unfold command in VS Code extension
DESCRIPTION: Example of using the new unfold command API to unfold 2 levels of content below the cursor position.

LANGUAGE: javascript
CODE:
commands.executeCommand('editor.unfold', {levels: '2'})

----------------------------------------

TITLE: Installing VS Code Repository on RHEL/Fedora/CentOS
DESCRIPTION: Script for installing the Visual Studio Code yum repository and signing key on RHEL, Fedora, or CentOS based distributions.

LANGUAGE: bash
CODE:
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\nautorefresh=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" | sudo tee /etc/yum.repos.d/vscode.repo > /dev/null

----------------------------------------

TITLE: Using focusedView Context Key in VS Code Keybindings
DESCRIPTION: A new keybinding when clause context key, focusedView, allows enabling commands when a specific view is focused.

LANGUAGE: json
CODE:
"when": "focusedView == nodeDependencies"

----------------------------------------

TITLE: Checking CMake Version in Bash
DESCRIPTION: Command to verify the installed version of CMake on the system.

LANGUAGE: bash
CODE:
cmake --version

----------------------------------------

TITLE: Configuring Font Zoom Keybindings in Visual Studio Code
DESCRIPTION: Custom keybindings for font zooming in the editor, separate from global zoom. Includes bindings for zoom in, zoom out, and reset zoom for both macOS and Windows/Linux.

LANGUAGE: JSON
CODE:
{
  "key": "cmd+numpad_add",      "command": "editor.action.fontZoomIn" },
  { "key": "shift+cmd+=",         "command": "editor.action.fontZoomIn" },
  { "key": "cmd+=",               "command": "editor.action.fontZoomIn" },
  { "key": "cmd+numpad_subtract", "command": "editor.action.fontZoomOut" },
  { "key": "shift+cmd+-",         "command": "editor.action.fontZoomOut" },
  { "key": "cmd+-",               "command": "editor.action.fontZoomOut" },
  { "key": "cmd+numpad0",         "command": "editor.action.fontZoomReset" },
  { "key": "cmd+0",               "command": "editor.action.fontZoomReset" }

----------------------------------------

TITLE: Configuring Keybindings for Modifier Keys in JSON
DESCRIPTION: This snippet shows how to define keybindings for duplicate modifiers in the keybindings.json file. It demonstrates setting up a keybinding for the 'shift shift' key combination.

LANGUAGE: json
CODE:
{ "key": "shift shift", "command": "workbench.action.quickOpen" }

----------------------------------------

TITLE: Example VS Code Launch Configuration
DESCRIPTION: Example JSON configuration for a VS Code keyboard shortcut to add missing imports.

LANGUAGE: json
CODE:
{
    "key": "ctrl+shift+i",
    "command": "editor.action.sourceAction",
    "args": {
        "kind": "source.addMissingImports",
        "apply": "first"
    }
}

----------------------------------------

TITLE: Customizing Comment Filter in Emmet for VS Code
DESCRIPTION: JSON configuration to customize the comment filter in Emmet for Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.preferences": {
  "filter.commentAfter": "\n<!-- /[#ID][.CLASS] -->"
}

----------------------------------------

TITLE: Accepting Repository Origin Change
DESCRIPTION: Command to update apt and accept repository origin changes when prompted.

LANGUAGE: bash
CODE:
sudo apt update

----------------------------------------

TITLE: Installing ESLint and TypeScript Support with Yarn
DESCRIPTION: This command installs ESLint, a TypeScript parser for ESLint, and TypeScript-specific ESLint rules using Yarn package manager.

LANGUAGE: bash
CODE:
yarn add eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --dev

----------------------------------------

TITLE: Creating Docker Environment with Crosstool-ng
DESCRIPTION: Dockerfile configuration for setting up a build environment with Crosstool-ng, used for building sysroot with specific glibc requirements.

LANGUAGE: dockerfile
CODE:
FROM ubuntu:latest

RUN apt-get update
RUN apt-get install -y gcc g++ gperf bison flex texinfo help2man make libncurses5-dev \
python3-dev autoconf automake libtool libtool-bin gawk wget bzip2 xz-utils unzip \
patch rsync meson ninja-build

# Install crosstool-ng
RUN wget http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.26.0.tar.bz2
RUN tar -xjf crosstool-ng-1.26.0.tar.bz2
RUN cd crosstool-ng-1.26.0 && ./configure --prefix=/crosstool-ng-1.26.0/out && make && make install
ENV PATH=$PATH:/crosstool-ng-1.26.0/out/bin

----------------------------------------

TITLE: Configuring Debug Launch with Server Ready Action in JSON
DESCRIPTION: This JSON snippet shows how to configure a debug launch configuration with a 'serverReadyAction' that automatically opens a URI when a server program starts listening on a port.

LANGUAGE: JSON
CODE:
{
  "type": "node",
  "request": "launch",
  "name": "Launch Program",
  "program": "${workspaceFolder}/app.js",

  "serverReadyAction": {
    "pattern": "listening on port ([0-9]+)",
    "uriFormat": "http://localhost:%s",
    "action": "openExternally"
  }
}

----------------------------------------

TITLE: Installing esbuild for VS Code Extension Bundling
DESCRIPTION: Command to install esbuild as a development dependency for bundling VS Code extensions.

LANGUAGE: bash
CODE:
npm i --save-dev esbuild

----------------------------------------

TITLE: Configuring Tab Completion Settings in VS Code JSON
DESCRIPTION: JSON configuration examples for disabling quick suggestions and setting snippet suggestion behavior in VS Code editor

LANGUAGE: json
CODE:
{
  "editor.quickSuggestions": false
}

LANGUAGE: json
CODE:
{
  "editor.snippetSuggestions": "none"
}

----------------------------------------

TITLE: Searching for Commands in Bash/Zsh
DESCRIPTION: Bash/Zsh command to search for a specific string in text files.

LANGUAGE: bash
CODE:
grep -n "dir" *.txt

----------------------------------------

TITLE: Implementing Static Status Bar Items in VS Code Extension
DESCRIPTION: TypeScript code showing how to create and access static Status bar items in a VS Code extension.

LANGUAGE: typescript
CODE:
const statusBarItem = vscode.window.createStatusBarItem('myExtension.myStatusBarItem');

----------------------------------------

TITLE: Configuring Code Actions on Save for TypeScript
DESCRIPTION: Settings to enable organize imports on save for TypeScript files

LANGUAGE: json
CODE:
"[typescript]": {
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    }
},
"[typescriptreact]": {
    "editor.codeActionsOnSave": {
        "source.organizeImports": true
    }
}

----------------------------------------

TITLE: Configuring Terminal Profiles in VS Code Settings
DESCRIPTION: This JSON snippet demonstrates how to configure terminal profiles in VS Code settings. It shows how to add a PowerShell profile without running the profile script, remove the built-in Git Bash profile, and add a Cygwin profile.

LANGUAGE: json
CODE:
"terminal.integrated.profiles.windows": {
  // Add a PowerShell profile that doesn't run the profile
  "PowerShell (No Profile)": {
      // Some sources are available which auto detect complex cases
      "source": "PowerShell",
      "args": ["-NoProfile"],
      // Name the terminal "PowerShell (No Profile)" to differentiate it
      "overrideName": true
  },
  // Remove the builtin Git Bash profile
  "Git Bash": null,
  // Add a Cygwin profile
  "Cygwin": {
    "path": "C:\\cygwin64\\bin\\bash.exe",
    "args": ["--login"]
  }
}

----------------------------------------

TITLE: Configuring a process picker for Node.js debugging
DESCRIPTION: Example launch configuration that uses a variable to let the user select a Node.js process before starting debugging.

LANGUAGE: json
CODE:
{
   "name": "Attach to Process",
   "type": "node",
   "request": "attach",
   "processId": "${command:PickProcess}"
}

----------------------------------------

TITLE: Creating Theme Preview Badge in Markdown
DESCRIPTION: Markdown code for adding a preview badge to theme extensions that links to vscode.dev theme preview.

LANGUAGE: markdown
CODE:
[![Preview in vscode.dev](https://img.shields.io/badge/preview%20in-vscode.dev-blue)](https://vscode.dev/editor/theme/<extensionId>)

----------------------------------------

TITLE: Sharing Variables between SQL and JavaScript in Polyglot Notebook
DESCRIPTION: This snippet shows how to share variables between SQL and JavaScript in a Polyglot Notebook. It demonstrates querying data from SQL and then using that data in JavaScript.

LANGUAGE: SQL
CODE:
#!sql mydatabase
SELECT TOP (10) FirstName, LastName, CompanyName
FROM SalesLT.Customer

#!set --name customers --from-value @result

LANGUAGE: JavaScript
CODE:
customers.forEach(c => console.log(`${c.FirstName} ${c.LastName} works at ${c.CompanyName}`));

----------------------------------------

TITLE: Running TSLint to ESLint Config Migration Tool
DESCRIPTION: This command downloads and executes the tslint-to-eslint-config utility to convert TSLint configuration to the closest ESLint equivalent.

LANGUAGE: bash
CODE:
npx tslint-to-eslint-config

----------------------------------------

TITLE: Opening VS Code Command Palette Shortcut
DESCRIPTION: Keyboard shortcut reference for opening the VS Code Command Palette, represented as a VS Code variable.

LANGUAGE: plaintext
CODE:
kb(workbench.action.showCommands)

----------------------------------------

TITLE: Registering a Search Provider in Visual Studio Code Extensions
DESCRIPTION: API for registering a custom search provider in VS Code extensions, allowing implementation of file and text search for custom file systems.

LANGUAGE: TypeScript
CODE:
export namespace workspace {
  export function registerSearchProvider(scheme: string, provider: SearchProvider): Disposable;
}

export interface SearchProvider {
  provideFileSearchResults?(options: FileSearchOptions, progress: Progress<string>, token: CancellationToken): Thenable<void>;
  provideTextSearchResults?(query: TextSearchQuery, options: TextSearchOptions, progress: Progress<TextSearchResult>, token: CancellationToken): Thenable<void>;
}

----------------------------------------

TITLE: Listing Files in PowerShell
DESCRIPTION: Command to list files in the current directory using PowerShell.

LANGUAGE: powershell
CODE:
Get-Command | Out-File -FilePath .\Command.txt

----------------------------------------

TITLE: Simple TypeScript Web Application
DESCRIPTION: Example TypeScript code demonstrating a basic web application that updates the document body.

LANGUAGE: typescript
CODE:
let message : string = "Hello Web";
document.body.innerHTML = message;

----------------------------------------

TITLE: Specifying GPU Host Requirement in devcontainer.json
DESCRIPTION: This snippet demonstrates how to specify a GPU requirement in the devcontainer.json file. When this configuration is used, the container will be started with GPU enabled if one is detected on the host system.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/devcontainers/base:bullseye",
    "hostRequirements": {
        "gpu": true
    }
}

----------------------------------------

TITLE: Configuring Active Indent Guide Color in VS Code
DESCRIPTION: Example showing how to customize the color of the active indent guide using workbench.colorCustomizations setting

LANGUAGE: json
CODE:
"workbench.colorCustomizations": {
    "editorIndentGuide.activeBackground": "#ff0000"
}

----------------------------------------

TITLE: Configuring Notebook Type in package.json
DESCRIPTION: This JSON snippet shows how to configure the notebook type for '*.echobook' files in the package.json of a VS Code extension. It registers the 'echobook' notebook type and sets up file pattern matching.

LANGUAGE: JSON
CODE:
"contributes": {
  "notebooks": [{
      "type": "echobook",
      "displayName": "Echobook",
      "selector": [{
        "filenamePattern": "*.echobook"
      }]
  }]
}

----------------------------------------

TITLE: Configuring TypeScript References CodeLens in VS Code settings
DESCRIPTION: Enable the TypeScript references CodeLens by setting the typescript.referencesCodeLens.enabled option to true in VS Code settings.

LANGUAGE: json
CODE:
"typescript.referencesCodeLens.enabled": true

----------------------------------------

TITLE: Using WebAssembly Calculator in TypeScript VS Code Extension
DESCRIPTION: This TypeScript code demonstrates how to load and use the WebAssembly calculator module in a VS Code extension.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';
import { WasmContext, Memory } from '@vscode/wasm-component-model';
import { calculator, Types } from './calculator';

export async function activate(context: vscode.ExtensionContext): Promise<void> {
	const channel = vscode.window.createOutputChannel('Calculator');
	context.subscriptions.push(channel);

	const filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'calculator.wasm');
	const bits = await vscode.workspace.fs.readFile(filename);
	const module = await WebAssembly.compile(bits);

	const wasmContext: WasmContext.Default = new WasmContext.Default();

	const instance = await WebAssembly.instantiate(module, {});
	wasmContext.initialize(new Memory.Default(instance.exports));

	const api = calculator._.exports.bind(instance.exports as calculator._.Exports, wasmContext);

	context.subscriptions.push(vscode.commands.registerCommand('vscode-samples.wasm-component-model.run', () => {
		channel.show();
		channel.appendLine('Running calculator example');
		const add = Types.Operation.Add({ left: 1, right: 2});
		channel.appendLine(`Add ${api.calc(add)}`);
		const sub = Types.Operation.Sub({ left: 10, right: 8 });
		channel.appendLine(`Sub ${api.calc(sub)}`);
		const mul = Types.Operation.Mul({ left: 3, right: 7 });
		channel.appendLine(`Mul ${api.calc(mul)}`);
		const div = Types.Operation.Div({ left: 10, right: 2 });
		channel.appendLine(`Div ${api.calc(div)}`);
	}));
}

----------------------------------------

TITLE: Docker File Editing with IntelliSense
DESCRIPTION: Examples showing IntelliSense functionality when editing Dockerfile and docker-compose.yml files, providing completions and syntax help for common Docker commands.

LANGUAGE: yaml
CODE:
# Example docker-compose.yml structure shown in intellisense and tooltips
services:
  webapp:
    image: node:alpine
    ports:
      - "3000:3000"

----------------------------------------

TITLE: Configuring Java Language Server for Corporate Proxy
DESCRIPTION: JSON configuration for VS Code settings to enable the Java Language Server to work behind a corporate proxy. This snippet sets the java.jdt.ls.vmargs setting with proxy host, port, user, and password for both HTTP and HTTPS.

LANGUAGE: JSON
CODE:
{
"java.jdt.ls.vmargs": "-Dhttp.proxyHost=webproxy.corp.net -Dhttp.proxyPort=proxyport -Dhttp.proxyUser=user -Dhttp.proxyPassword=password -Dhttps.proxyHost=webproxy.corp.net -Dhttps.proxyPort=proxyport -Dhttps.proxyUser=user -Dhttps.proxyPassword=password"
}

----------------------------------------

TITLE: Loading and Running WebAssembly in VS Code Extension
DESCRIPTION: TypeScript code demonstrating how to load and run WebAssembly code within a VS Code extension. It uses the @vscode/wasm-wasi package to create a pseudo-terminal and execute the WASM module.

LANGUAGE: typescript
CODE:
import { Wasm } from '@vscode/wasm-wasi';
import { commands, ExtensionContext, Uri, window, workspace } from 'vscode';

export async function activate(context: ExtensionContext) {

    // Load the WASM API
    const wasm: Wasm = await Wasm.load();

    // Register a command that runs the C example
    commands.registerCommand('wasm-wasi-c-example.run', async () => {
        // Create a pseudoterminal to provide stdio to the WASM process.
        const pty = wasm.createPseudoterminal();
        const terminal = window.createTerminal({ name: 'Run C Example', pty, isTransient: true });
        terminal.show(true);

        try {
            // Load the WASM module. It is stored alongside the extension's JS code.
            // So we can use VS Code's file system API to load it. Makes it
            // independent of whether the code runs in the desktop or the web.
            const bits = await workspace.fs.readFile(Uri.joinPath(context.extensionUri, 'hello.wasm'));
            const module = await WebAssembly.compile(bits);
            // Create a WASM process.
            const process = await wasm.createProcess('hello', module, { stdio: pty.stdio });
            // Run the process and wait for its result.
            const result = await process.run();
            if (result !== 0) {
                await window.showErrorMessage(`Process hello ended with error: ${result}`);
            }
        } catch (error) {
            // Show an error message if something goes wrong.
            await window.showErrorMessage(error.message);
        }
    });
}

----------------------------------------

TITLE: Configuring Dev Container Remote Environment in JSON
DESCRIPTION: JSON configuration for passing host directory path into container as environment variable to enable Docker mount commands.

LANGUAGE: json
CODE:
  "remoteEnv": {
    // Pass in the host directory for Docker mount commands from inside the container
    "HOST_PROJECT_PATH": "${localWorkspaceFolder}"
  }

----------------------------------------

TITLE: Configuring VS Code Engine Version for Extensions
DESCRIPTION: Example of how to set the minimum required VS Code version for an extension in the package.json file. This determines which API version the extension will use.

LANGUAGE: json
CODE:
{
    "engines": {
        "vscode": "^0.10.7"
    }
}

----------------------------------------

TITLE: Removing Built-in Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet shows how to remove a built-in terminal profile (Git Bash) from the new terminal dropdown in VS Code settings for Windows by setting its value to null.

LANGUAGE: json
CODE:
{
  "terminal.integrated.profiles.windows": {
    "Git Bash": null
  }
}

----------------------------------------

TITLE: Adding a Factorial Method to Calculator Class in JavaScript
DESCRIPTION: This code snippet shows how to add a factorial method to the Calculator class, illustrating Copilot's capability to provide multiple suggestions for method implementation.

LANGUAGE: javascript
CODE:
factorial(n) {

----------------------------------------

TITLE: Piping Output to VS Code in Bash
DESCRIPTION: Example of piping command output directly into VS Code to open in an editor. The encoding is determined automatically or can be set manually via an environment variable.

LANGUAGE: bash
CODE:
echo Hello World | code -

----------------------------------------

TITLE: Creating a Terminal with Custom Message in TypeScript
DESCRIPTION: This snippet demonstrates how to create a terminal in VS Code with a custom message using the window.createTerminal API. It shows how to set a message that supports ANSI escape sequences for text styling.

LANGUAGE: TypeScript
CODE:
vscode.window.createTerminal({
  name: `My terminal`,
  message: '\x1b[3;1mSome custom message\x1b[0m'
});

----------------------------------------

TITLE: User input variables for tasks configuration
DESCRIPTION: Example showing how to configure user input variables in tasks.json

LANGUAGE: json
CODE:
{
    "tasks": [
        {
            "label": "Echo input",
            "type": "shell",
            "command": "echo ${input:echoPrompt}"
        }
    ],
    "inputs": [
        {
            "id": "echoPrompt",
            "description": "Please enter a value",
            "default": "default echo text",
            "type": "promptString"
        }
    ]
}

----------------------------------------

TITLE: Configuring Gunicorn for Flask in Dockerfile
DESCRIPTION: Illustrates the command used in a Dockerfile to set up Gunicorn as the web server for a Flask application.

LANGUAGE: Dockerfile
CODE:
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "{subfolder}.{module_file}:app"]

----------------------------------------

TITLE: Configuring Custom Entry Page in Launch Configuration
DESCRIPTION: This JSON snippet demonstrates how to configure the dockerServerReadyAction uriFormat in the launch configuration to open a specific page when the application is ready.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "Docker Node.js Launch",
            "type": "docker",
            "request": "launch",
            "preLaunchTask": "docker-run: debug",
            "platform": "node",
            "dockerServerReadyAction": {
                "uriFormat": "http://localhost:%s/about.html"
            }
        }
    ]
}

----------------------------------------

TITLE: Implementing VSBuffer for Cross-Environment Compatibility
DESCRIPTION: Shows the implementation of a VSBuffer utility class that supports both Node.js and web environments, replacing the Node.js Buffer dependency.

LANGUAGE: typescript
CODE:
export class VSBuffer {
	constructor(buffer: Uint8Array) {
		this.buffer = buffer;
		this.byteLength = this.buffer.byteLength;
	}

	static wrap(array: Uint8Array): VSBuffer {
		return new VSBuffer(array);
	}

	static fromString(str: string): VSBuffer {
		const bytes = new TextEncoder().encode(str);
		return new VSBuffer(bytes);
	}

	toString(): string {
		return new TextDecoder().decode(this.buffer);
	}
}

----------------------------------------

TITLE: Setting Docker Compose Project Name via Bash
DESCRIPTION: Command to start VS Code with a specific Docker Compose project name using Bash shell

LANGUAGE: bash
CODE:
# from bash
COMPOSE_PROJECT_NAME=foo code .

----------------------------------------

TITLE: Configuring Terminal Environment Variables in JSON
DESCRIPTION: Example of setting environment variables to null to unset them in the integrated terminal settings

LANGUAGE: json
CODE:
"terminal.integrated.env.linux": {
  "HOME": null
}

----------------------------------------

TITLE: TSConfig with Output Directory
DESCRIPTION: Enhanced tsconfig.json configuration specifying output directory for compiled files.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ES5",
        "module": "CommonJS",
        "outDir": "out"
    }
}

----------------------------------------

TITLE: Configuring WSL Terminal Profile in VS Code (Windows)
DESCRIPTION: This snippet shows how to manually configure a Windows Subsystem for Linux (WSL) shell profile in VS Code settings for Windows. It sets up a profile for Debian WSL distribution.

LANGUAGE: jsonc
CODE:
{
  "terminal.integrated.profiles.windows": {
    "Debian (WSL)": {
      "path": "C:\\WINDOWS\\System32\\wsl.exe",
      "args": [
        "-d",
        "Debian"
      ]
    }
  }
}

----------------------------------------

TITLE: Demonstrating Strict Null Check Bypasses in TypeScript
DESCRIPTION: These TypeScript snippets illustrate cases where strict null checking can be bypassed, highlighting that it's not a complete solution for preventing all null-related errors.

LANGUAGE: typescript
CODE:
// strictNullCheck: true

function double(x: number): number { return x * 2; }

double(undefined as any); // not an error

const arr = [1, 2, 3]

double(arr[5]); // not an error

class Value {
    public x: number;

    public setValue(x: number) { this.x = x; }

    public double(): number {
        return this.x * 2; // not an error even though `x` will be `undefined` if `setValue` has not been called yet
    }
}

----------------------------------------

TITLE: Configuring language-specific settings in VS Code
DESCRIPTION: Example of customizing editor settings for TypeScript and Markdown files using language-specific settings in VS Code's settings.json file.

LANGUAGE: json
CODE:
{
  "[typescript]": {
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true
  },
  "[markdown]": {
    "editor.formatOnSave": true,
    "editor.wrappingColumn": 0,
    "editor.renderWhitespace": "all",
    "editor.acceptSuggestionOnEnter": "off"
  }
}

----------------------------------------

TITLE: Using JSDoc Type Assertions in JavaScript Files
DESCRIPTION: Example of using JSDoc type assertions in JavaScript files with @ts-check enabled to enable type checking.

LANGUAGE: JavaScript
CODE:
// @ts-check

const img = /** @type {HTMLImageElement} */ (document.getElementById('#cat'))
img.src = './cat.gif'

----------------------------------------

TITLE: Implementing Type Hierarchy Provider in VS Code Extensions
DESCRIPTION: JavaScript code snippet demonstrating how to implement a TypeHierarchyProvider in a Visual Studio Code extension.

LANGUAGE: JavaScript
CODE:
import type { ActivationFunction } from 'vscode-notebook-renderer';

export const activate: ActivationFunction<void> = (ctx) => {
  return {
    renderOutputItem: (outputInfo, element) => {
      if (ctx.workspace.isTrusted) {
        // Render normally. Still take precautions to avoid script injection and
        // only enable as much functionality as your renderer needs.
      } else {
        // Only render safe content. Always make sure it has been properly sanitized.
      }
    }
  }
};

----------------------------------------

TITLE: Starting a Debug Session Programmatically in Visual Studio Code Extensions
DESCRIPTION: This JavaScript code demonstrates how to programmatically start a debug session in a Visual Studio Code extension using the vscode.startDebug command.

LANGUAGE: javascript
CODE:
let launchConfig = {
    type: "node",
    request: "launch",
    program: "${workspaceRoot}/test.js",
    cwd: "${workspaceRoot}"
};

vscode.commands.executeCommand('vscode.startDebug', launchConfig).then(() => {
    vscode.window.showInformationMessage('Debug session started successfully');
}, err => {
    vscode.window.showInformationMessage('Error: ' + err.message);
});

----------------------------------------

TITLE: Configuring Existing .NET Path Windows
DESCRIPTION: JSON configuration to specify an existing .NET installation path on Windows systems.

LANGUAGE: json
CODE:
{
    "dotnetAcquisitionExtension.existingDotnetPath": [
        { "extensionId": "msazuretools.azurerm-vscode-tools", "path": "C:\\Program Files\\dotnet\\dotnet.exe" }
    ]
}

----------------------------------------

TITLE: AST Type Definitions
DESCRIPTION: TypeScript type definitions for the Abstract Syntax Tree (AST) used to track bracket pairs with length annotations.

LANGUAGE: typescript
CODE:
type Length = ...;

type AST = BracketAST | BracketPairAST | ListAST | TextAST;

/** Describes a single bracket, such as `{`, `}` or `begin` */
class BracketAST {
    constructor(public length: Length) {}
}

/** Describes a matching bracket pair and the node in between, e.g. `{...}` */
class BracketPairAST {
    constructor(
        public openingBracket: BracketAST;
        public child: BracketPairAST | ListAST | TextAST;
        public closingBracket: BracketAST;
    ) {}

    length = openingBracket.length + child.length + closingBracket.length;
}

/** Describes a list of bracket pairs or text nodes, e.g. `()...()` */
class ListAST {
    constructor(
        public items: Array<BracketPairAST | TextAST>
    ) {}

    length = items.sum(item => item.length);
}

/** Describes text that has no brackets in it. */
class TextAST {
    constructor(public length: Length) {}
}

----------------------------------------

TITLE: Configuring devcontainer.json Build Arguments
DESCRIPTION: Specifies build arguments in devcontainer.json to ensure proper container configuration.

LANGUAGE: json
CODE:
"build": {
      "dockerfile": "Dockerfile",
      "args": {
          // set devcontainer-cli arg for Dockerfile
          "devcontainercli": "true"
      },
    }

----------------------------------------

TITLE: Setting VS Code Log Level via Command Line
DESCRIPTION: Command line argument to set the logging level for VS Code. Allows configuring verbosity of logs for troubleshooting.

LANGUAGE: bash
CODE:
--log <level>
    Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.

----------------------------------------

TITLE: Configuring Cmd+. to Send Ctrl+C in VS Code Terminal on macOS
DESCRIPTION: JSON configuration to add a custom keyboard shortcut (Cmd+.) that sends Ctrl+C to the integrated terminal in Visual Studio Code on macOS.

LANGUAGE: json
CODE:
{
  "key": "cmd+.",
  "command": "workbench.action.terminal.sendSequence",
  "when": "terminalFocus",
  "args": { "text": "\u0003" }
}

----------------------------------------

TITLE: Configuring Code Actions on Save
DESCRIPTION: JSON configuration for organizing imports automatically on file save in VS Code.

LANGUAGE: json
CODE:
"editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.organizeImports": "always"
}

----------------------------------------

TITLE: Keyboard Shortcuts in VS Code
DESCRIPTION: Common keyboard shortcuts for accessing Git and version control features in VS Code

LANGUAGE: markdown
CODE:
kb(workbench.action.files.openFolder)
kb(workbench.view.scm)
kb(workbench.action.showCommands)

----------------------------------------

TITLE: Creating Custom Text Editor Decorations
DESCRIPTION: Example showing how to create text editor decorations that reference theme colors instead of hard-coded values

LANGUAGE: typescript
CODE:
var decorationType = vscode.window.createTextEditorDecorationType({
    before: {
        contentText: "\u26A0",
        color: new vscode.ThemeColor('editorWarning.foreground')
    }
});

----------------------------------------

TITLE: Configuring HTML Attribute Completion in VS Code
DESCRIPTION: JSON configuration showing options for how HTML attribute values are completed in VS Code. The setting controls whether values use double quotes, single quotes, or are left empty.

LANGUAGE: json
CODE:
"[javascript]": {
    "editor.language.brackets": [
        ["[", "]"],
        ["(", ")"]
    ],
    "editor.language.colorizedBracketPairs": [
        ["[", "]"]
    ]
},

----------------------------------------

TITLE: Customizing Semantic Token Colors Globally in VSCode
DESCRIPTION: This JSON snippet demonstrates how to customize colors for semantic tokens globally in Visual Studio Code settings. It shows an example of changing the color and style of the 'templateType' token.

LANGUAGE: json
CODE:
"editor.semanticTokenColorCustomizations": {
    "rules": {
        "templateType": {
            "foreground": "#ff0000",
            "fontStyle": "italic bold underline"
        }
    }
}

----------------------------------------

TITLE: VS Code Settings References in Markdown
DESCRIPTION: Configuration settings referenced in the documentation for controlling Copilot chat behavior

LANGUAGE: markdown
CODE:
setting(chat.implicitContext.enabled)
setting(github.copilot.chat.codesearch.enabled)

----------------------------------------

TITLE: Adding Project Reference for MSTest Testing
DESCRIPTION: Command to add a project reference to an MSTest test project, linking it to the project being tested.

LANGUAGE: bash
CODE:
dotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]

----------------------------------------

TITLE: Initializing and Connecting Git Repositories
DESCRIPTION: Demonstrates the commands for initializing a local Git repository and connecting it to a remote GitHub repository.

LANGUAGE: bash
CODE:
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/username/repo-name.git
git push -u origin main

----------------------------------------

TITLE: Setting Container Environment Variables with devcontainer.json
DESCRIPTION: Configuration for setting container-wide and VS Code-specific environment variables using containerEnv and remoteEnv properties in devcontainer.json. Supports referencing local and container variables.

LANGUAGE: json
CODE:
"containerEnv": {
    "MY_CONTAINER_VAR": "some-value-here",
    "MY_CONTAINER_VAR2": "${localEnv:SOME_LOCAL_VAR}"
},
"remoteEnv": {
    "PATH": "${containerEnv:PATH}:/some/other/path",
    "MY_REMOTE_VARIABLE": "some-other-value-here",
    "MY_REMOTE_VARIABLE2": "${localEnv:SOME_LOCAL_VAR}"
}

----------------------------------------

TITLE: Disabling ConPTY in Visual Studio Code Terminal on Windows
DESCRIPTION: JSON configuration to opt out of using ConPTY for the integrated terminal on Windows in VS Code.

LANGUAGE: JSON
CODE:
{
  "terminal.integrated.windowsEnableConpty": false
}

----------------------------------------

TITLE: Disabling Bracketed Paste Mode in VS Code Terminal
DESCRIPTION: JSON configuration to force the integrated terminal in Visual Studio Code to ignore bracketed paste mode requests from the shell.

LANGUAGE: json
CODE:
{
  "terminal.integrated.ignoreBracketedPasteMode": true
}

----------------------------------------

TITLE: HTML Link and Scroll Button Implementation
DESCRIPTION: HTML elements for a scroll-to-top button and stylesheet link for the release notes page styling.

LANGUAGE: html
CODE:
<a id="scroll-to-top" role="button" title="Scroll to top" aria-label="scroll to top" href="#"><span class="icon"></span></a>
<link rel="stylesheet" type="text/css" href="css/inproduct_releasenotes.css"/>

----------------------------------------

TITLE: Modifying Existing User UID/GID in Dockerfile
DESCRIPTION: Dockerfile commands to change the UID and GID of an existing user in the container.

LANGUAGE: dockerfile
CODE:
ARG USERNAME=user-name-goes-here
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupmod --gid $USER_GID $USERNAME \
    && usermod --uid $USER_UID --gid $USER_GID $USERNAME \
    && chown -R $USER_UID:$USER_GID /home/$USERNAME

LANGUAGE: dockerfile
CODE:
RUN apk add --no-cache shadow

----------------------------------------

TITLE: Configuring Dev Container Commands in devcontainer.json
DESCRIPTION: The devcontainer.json configuration file now supports postStartCommand and postAttachCommand properties for executing commands after container startup or attachment. Commands can be specified as shell strings or command arrays.

LANGUAGE: json
CODE:
{
  "postStartCommand": "string | string[]",
  "postAttachCommand": "string | string[]"
}

----------------------------------------

TITLE: Configuring Tasks Runner in VS Code
DESCRIPTION: JSON configuration for enabling tasks to run in the Integrated Terminal by setting the runner property in tasks.json

LANGUAGE: json
CODE:
{
  "version": "0.1.0",
  "runner": "terminal",
  ...
}

----------------------------------------

TITLE: TypeScript Extension API - Continuous Test Run Support
DESCRIPTION: Example showing how to add support for continuous test runs in VS Code test extensions using the finalized API.

LANGUAGE: typescript
CODE:
const profile = ctrl.createRunProfile(/* ... */);
profile.supportsContinuousRun = true;

function runHandler(request: vscode.TestRunRequest, cancellation: vscode.CancellationToken) {
  if (request.continuous) {
    startWatchingAndRunningTests(request);
  }

  // ...
}

----------------------------------------

TITLE: Running a JavaScript Application in VS Code Terminal
DESCRIPTION: This snippet demonstrates how to run a simple 'Hello world' JavaScript application using Node.js in the Visual Studio Code Integrated Terminal.

LANGUAGE: javascript
CODE:
console.log("Hello world");

LANGUAGE: shell
CODE:
node app.js

----------------------------------------

TITLE: GitHub Copilot User Types Table
DESCRIPTION: Markdown table showing different types of users and their access options for GitHub Copilot

LANGUAGE: markdown
CODE:
| Type of User                   | Description |
|--------------------------------|-------------|
| Individual                     | <ul><li>Set up [GitHub Copilot Free](https://github.com/github-copilot/signup) to get a limited experience of Copilot without a subscription.</li></ul> |
| Organization/Enterprise member | <ul><li>If you are a member of an organization or enterprise that has a subscription to GitHub Copilot, you can request access</li></ul> |

----------------------------------------

TITLE: HTML Canvas Element Reference
DESCRIPTION: Basic HTML canvas element used as the foundation for the new terminal rendering system, which enables high-performance graphics and text rendering.

LANGUAGE: html
CODE:
<canvas></canvas>

----------------------------------------

TITLE: HTML Module Container
DESCRIPTION: HTML structure for displaying the Wonder Woman Python learning module information, including title, description, and linked image.

LANGUAGE: html
CODE:
<div class="module">
    <div class="info">
        <a href="https://learn.microsoft.com/training/paths/python-partnership/?WT.mc_id=python-0000-cxa"><h2 class="title faux-h3">Learn Python with Wonder Woman</h2></a>
    </div>
    <p class="description">Build a message decoder program and a personality quiz in these lessons inspired by the WONDER WOMAN 1984 film.</p>
    <a href="https://learn.microsoft.com/training/paths/python-partnership/?WT.mc_id=python-0000-cxa" title="Wonder Woman module">
        <img src="/assets/learn/students/wonder-woman-python/ww-lesson.png" aria-hidden="true" class="thumb"/>
    </a>
</div>

----------------------------------------

TITLE: Configuring Language Server Trace Settings in Visual Studio Code
DESCRIPTION: JSON configuration for setting up Language Server Protocol (LSP) logging in a machine-readable JSON format. This is useful for extensions using vscode-languageclient.

LANGUAGE: JSON
CODE:
"languageServerExample.trace.server": {
  "format": "json", // or "text"
  "verbosity": "verbose" // or "off" | "messages"
}

----------------------------------------

TITLE: Configuring Custom Working Directory for VS Code Terminal
DESCRIPTION: JSON configuration to set a custom initial working directory for the integrated terminal in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "terminal.integrated.cwd": "/home/user"
}

----------------------------------------

TITLE: Command Line Folder Removal
DESCRIPTION: CLI command to remove a root folder from a multi-root workspace

LANGUAGE: bash
CODE:
code --remove /path/to/rootfolder

----------------------------------------

TITLE: Creating a Webview Panel with Port Mapping in Visual Studio Code
DESCRIPTION: TypeScript code showing how to create a webview panel with port mapping in VS Code, allowing for transparent resolution of localhost ports inside webviews.

LANGUAGE: TypeScript
CODE:
const panel = vscode.window.createWebviewPanel('dog', "Dog Doodling", vscode.ViewColumn.One, {
    portMapping: [
        // Map localhost:3000 in the webview to localhost:4000 externally
        { port: 3000, resolvedPort: 4000 }
    ]
});

panel.webview.html =  `<!DOCTYPE html>
    <html lang="en">
    <head>
        <title>Dog Doodling</title>
    </head>
    <body>
        <!--
            With the above port mapping, this image will actually be resolved
            to localhost:4000 on the local machine
        -->
        <img src="http://localhost:3000/canvas.png">
    </body>
    </html>`;

----------------------------------------

TITLE: Contributing Problem Matchers in Visual Studio Code Extensions
DESCRIPTION: This code snippet demonstrates how to contribute a problem matcher for the gcc compiler in a VS Code extension's package.json file. Problem matchers are used to parse compiler output and highlight errors in the editor.

LANGUAGE: typescript
CODE:
{
  "contributes": {
    "problemMatchers": [
      {
          // the name of the problem matcher
          "name": "gcc",
          // The problem is owned by the cpp language service.
          "owner": "cpp",
          // The file name for reported problems is relative to the opened folder.
          "fileLocation": ["relative", "${workspaceRoot}"],
          // The actual pattern to match problems in the output.
          "pattern": {
              // The regular expression. Example to match: helloWorld.c:5:3: warning: implicit declaration of function 'prinft' [-Wimplicit-function-declaration]
              "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
              // The first match group matches the file name which is relative.
              "file": 1,
              // The second match group matches the line on which the problem occurred.
              "line": 2,
              // The third match group matches the column at which the problem occurred.
              "column": 3,
              // The fourth match group matches the problem's severity. Can be ignored. Then all problems are captured as errors.
              "severity": 4,
              // The fifth match group matches the message.
              "message": 5
          }
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Paste As Options in VS Code Settings
DESCRIPTION: JSON configuration for controlling the 'paste as' functionality in VS Code.

LANGUAGE: json
CODE:
{
  "editor.pasteAs.showPasteSelector": "never"
}

----------------------------------------

TITLE: Configuring Product Icon Theme in package.json
DESCRIPTION: Demonstrates how to define a product icon theme contribution in an extension's package.json file. Specifies the theme's ID, label, and path to the icon definition file.

LANGUAGE: json
CODE:
{
  "contributes": {
    "productIconThemes": [
      {
        "id": "aliensAreBack",
        "label": "Aliens Are Back",
        "path": "./producticons/aliens-product-icon-theme.json"
      }
    ]
  }
}

----------------------------------------

TITLE: Workspace Slash Commands Reference
DESCRIPTION: Table showing available slash commands and their associated contexts for @workspace queries.

LANGUAGE: markdown
CODE:
| Command        | Context |
| -------------- | ------- |
| `/explain`     | <ul><li>Starts with the text selection in the active editor (`#selection`). To optimize the Copilot chat responses, make sure to expand the text selection to include any relevant information to help Copilot provide a useful response.</li><li>Looks up the implementations of referenced symbols such as functions and classes, leading to more accurate and useful explanations.</li></ul> |
| `/tests`       | <ul><li>Current text selection in the active editor. If no text is selected, use the contents of the currently active file.</li><li>Related existing test files, to understand existing tests and best practices.</li></ul> |
| `/fix`         | <ul><li>Current text selection in the active editor. If no text is selected, use the currently visible text in the editor.</li><li>Errors and referenced symbols to understand what needs to be fixed and how.</li></ul> |
| `/new`         | <ul><li>Only the chat prompt is used as context.</li></ul> |
| `/newNotebook` | <ul><li>Only the chat prompt is used as context.</li></ul> |

----------------------------------------

TITLE: Docker Compose Task Configuration
DESCRIPTION: Example of a docker-compose task with detached mode and build settings.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run docker-compose up",
            "type": "docker-compose",
            "dockerCompose": {
                "up": {
                    "detached": true,
                    "build": true,
                    "services": [
                      "myservice"
                    ]
                },
                "files": [
                    "${workspaceFolder}/docker-compose.yml",
                    "${workspaceFolder}/docker-compose.debug.yml"
                ]
            }
        }
    ]
}

----------------------------------------

TITLE: Canvas Text Drawing API Reference
DESCRIPTION: JavaScript Canvas API method used for drawing text in the terminal renderer, referenced in comparison to the texture atlas optimization approach.

LANGUAGE: javascript
CODE:
CanvasRenderingContext2D.fillText

----------------------------------------

TITLE: Launching VS Code in WSL from Linux Command Prompt
DESCRIPTION: Command to open Visual Studio Code in the current directory within a WSL environment. This is typically used after navigating to the desired folder in a Linux command prompt.

LANGUAGE: bash
CODE:
code .

----------------------------------------

TITLE: Loading Custom Data in HTML Language Service
DESCRIPTION: This TypeScript snippet demonstrates how to use the 'getLanguageService' function from 'vscode-html-languageservice' to load custom data providers for HTML language support.

LANGUAGE: typescript
CODE:
import { getLanguageService } from 'vscode-html-languageservice'

getLanguageService({
  customDataProviders: [...]
})

----------------------------------------

TITLE: Setting Minimum Contrast Ratio for Terminal in VS Code
DESCRIPTION: This snippet shows how to set the minimum contrast ratio for terminal text to 1, effectively disabling the automatic contrast adjustment feature.

LANGUAGE: json
CODE:
"terminal.integrated.minimumContrastRatio": 1

----------------------------------------

TITLE: Markdown Link Preview Example
DESCRIPTION: Example Markdown file showing header structure and relative links that can be renamed.

LANGUAGE: markdown
CODE:
# Readme
- [Example 1](#example)
- [Example 2](#example-1)

## Example
...

## Example
...

----------------------------------------

TITLE: Launching VS Code with Verbose Logging
DESCRIPTION: Command line parameters to start VS Code with verbose logging enabled for diagnosing keychain issues.

LANGUAGE: bash
CODE:
code --verbose --vmodule="*/components/os_crypt/*=1"

----------------------------------------

TITLE: Configuring Wrap Tabs Setting in VS Code
DESCRIPTION: Setting to enable wrapped editor tabs instead of showing a scrollbar.

LANGUAGE: JSON
CODE:
"workbench.editor.wrapTabs": true

----------------------------------------

TITLE: Installing TypeScript Type Definitions
DESCRIPTION: Example showing how to install TypeScript type definitions using npm with the @types parameter

LANGUAGE: bash
CODE:
npm install --save-dev @types/lodash

----------------------------------------

TITLE: Running Azure AI Translation for VS Code Extensions
DESCRIPTION: Command to generate translations using Azure AI Translator for VS Code extension localization.

LANGUAGE: bash
CODE:
npx @vscode/l10n-dev generate-azure -o ./l10n/ ./l10n/bundle.l10n.json ./package.nls.json

----------------------------------------

TITLE: Git Line Ending Configuration
DESCRIPTION: Configures Git line ending behavior to handle Windows and Linux line ending differences using .gitattributes.

LANGUAGE: yaml
CODE:
* text=auto eol=lf
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

----------------------------------------

TITLE: Setting VS Code C/C++ IntelliSense Cache Configuration
DESCRIPTION: JSON configuration examples for controlling the IntelliSense cache path and size in VS Code C/C++ extension settings.

LANGUAGE: json
CODE:
"C_Cpp.intelliSenseCachePath": <string>

LANGUAGE: json
CODE:
"C_Cpp.intelliSenseCacheSize": <number>

----------------------------------------

TITLE: Configuring Emmet Suggestion Ordering in VS Code
DESCRIPTION: JSON configuration to ensure Emmet suggestions are always on top in the suggestion list in Visual Studio Code.

LANGUAGE: json
CODE:
"emmet.showSuggestionsAsSnippets": true,
"editor.snippetSuggestions": "top"

----------------------------------------

TITLE: Starting SSH Agent on Windows
DESCRIPTION: PowerShell commands to configure and start the SSH agent service on Windows with administrator privileges.

LANGUAGE: powershell
CODE:
# Make sure you're running as an Administrator
Set-Service ssh-agent -StartupType Automatic
Start-Service ssh-agent
Get-Service ssh-agent

----------------------------------------

TITLE: Configuring package.json for VS Code Extension Tests
DESCRIPTION: Add the test script to the package.json file to enable running tests with npm test.

LANGUAGE: json
CODE:
{
  "name": "my-cool-extension",
  "scripts": {
+   "test": "vscode-test"


----------------------------------------

TITLE: Launching VS Code in WSL Environment
DESCRIPTION: Command to launch Visual Studio Code from Ubuntu terminal in WSL 2, connecting VS Code to the WSL development environment.

LANGUAGE: shell
CODE:
code .

----------------------------------------

TITLE: Viewing Current File Watch Limit
DESCRIPTION: Command to view the current limit of file watches on a Linux system.

LANGUAGE: bash
CODE:
cat /proc/sys/fs/inotify/max_user_watches

----------------------------------------

TITLE: Configuring Git Test Launch Settings
DESCRIPTION: Launch configuration for running tests with Git, showing simplified runtime executable path handling.

LANGUAGE: json
CODE:
{
	"name": "Run Tests",
	"type": "node",
	"request": "launch",
	"runtimeExecutable": "mocha",
}

----------------------------------------

TITLE: Enabling Semantic Highlighting in VS Code Settings
DESCRIPTION: This JSON setting enables semantic highlighting in VS Code, which allows for more accurate and consistent syntax highlighting in Ruby files when using the Ruby LSP extension.

LANGUAGE: json
CODE:
"editor.semanticHighlighting.enabled": true,

----------------------------------------

TITLE: Configuring VS Code Settings for Linting
DESCRIPTION: JSON settings to enable ESLint/JSHint and optionally disable built-in JavaScript validation.

LANGUAGE: json
CODE:
{
  "eslint.enable": true,
  "jshint.enable": true,
  "javascript.validate.enable": false
}

----------------------------------------

TITLE: Configuring Terminal Keyboard Commands
DESCRIPTION: Example showing how to register and handle terminal shell execution events in VS Code extensions

LANGUAGE: typescript
CODE:
window.onDidEndTerminalShellExecution(event => {
    if (event.execution.commandLine.value.startsWith('git')) {
        if (event.exitCode === 0) {
            // React to a successful git command
        } else {
            // React to a failing git command
        }
    }
});

----------------------------------------

TITLE: Configuring $EDITOR in Unix Shell
DESCRIPTION: Sets the $EDITOR environment variable to use VS Code in Unix-like environments when VSCODE_INJECTION is enabled.

LANGUAGE: bash
CODE:
if [ "$VSCODE_INJECTION" = "1" ]; then
    export EDITOR="code --wait" # or 'code-insiders' if you're using VS Code Insiders
fi

----------------------------------------

TITLE: Disabling VS Code C/C++ IntelliSense Cache
DESCRIPTION: JSON configuration to disable the IntelliSense caching feature by setting the cache size to 0.

LANGUAGE: json
CODE:
"C_Cpp.intelliSenseCacheSize": 0

----------------------------------------

TITLE: Configuring locked editor groups in Visual Studio Code
DESCRIPTION: Setting to specify which editor types should automatically lock an editor group when opened.

LANGUAGE: JSON
CODE:
"workbench.editor.autoLockGroups": {
  "default": true,
  "workbench.editor.interactiveWindow": true,
  "jupyter.notebook.interactiveWindow": true
}

----------------------------------------

TITLE: Enforcing VS Code Build Requirements in Dockerfile
DESCRIPTION: Adds a build argument check to ensure the Dockerfile is built with VS Code or the devcontainer CLI.

LANGUAGE: bash
CODE:
ARG vscode
RUN if [[ -z "$devcontainercli" ]] ; then printf "\nERROR: This Dockerfile needs to be built with VS Code !" && exit 1; else printf "VS Code is detected: $devcontainercli"; fi

----------------------------------------

TITLE: Extension Pre-publish Script Configuration
DESCRIPTION: Example package.json configuration showing how to add a pre-publish TypeScript compilation step.

LANGUAGE: json
CODE:
{
  "name": "uuid",
  "version": "0.0.1",
  "publisher": "someone",
  "engines": {
    "vscode": "0.10.x"
  },
  "scripts": {
    "vscode:prepublish": "tsc"
  }
}

----------------------------------------

TITLE: Basic SSH Configuration Setup in YAML
DESCRIPTION: Example configuration for multiple SSH hosts showing basic connection parameters including hostname, user, and identity file paths.

LANGUAGE: yaml
CODE:
# Read more about SSH config files: https://linux.die.net/man/5/ssh_config
Host python-linux-vm
    HostName <vm address>
    User sana
    IdentityFile ~/.ssh/id_python_vm

Host node-vm
    HostName <vm address>
    User sana
    Port 5522
    IdentityFile ~/.ssh/id_node_vm

----------------------------------------

TITLE: Configuring Markdown styles in VS Code settings
DESCRIPTION: This snippet demonstrates how to use custom CSS stylesheets in the Markdown preview by configuring the markdown.styles setting in VS Code's workspace settings.json file.

LANGUAGE: json
CODE:
// Place your settings in this file to overwrite default and user settings.
{
    "markdown.styles": [
        "Style.css"
    ]
}

----------------------------------------

TITLE: Registering Issue URI Request Handler in VS Code Extension
DESCRIPTION: This code snippet shows how to register an Issue URI Request Handler in a VS Code extension. It allows extensions to provide custom URIs for filing issues externally.

LANGUAGE: TypeScript
CODE:
export interface IssueUriRequestHandler {
  // Handle the request by the issue reporter for the Uri you want to direct the user to.
  handleIssueUrlRequest(): ProviderResult<Uri>;
}

export namespace env {
  export function registerIssueUriRequestHandler(handler: IssueUriRequestHandler): Disposable;
}

----------------------------------------

TITLE: Flask Hello World Application
DESCRIPTION: Simple Python Flask web application that returns a hello world message. Demonstrates remote development capabilities including debugging and port forwarding.

LANGUAGE: python
CODE:
from flask import Flask
app = Flask(__name__)

@app.route("/")
def hello():
    return "Hello Remote World! :)"

if __name__ == "__main__":
    app.run()

----------------------------------------

TITLE: Creating a System.out.println() snippet in Java
DESCRIPTION: This code snippet demonstrates how to use the 'sout' or 'sysout' shortcut to create a System.out.println() statement in Java.

LANGUAGE: java
CODE:
System.out.println()

----------------------------------------

TITLE: Installing ESLint/JSHint for JavaScript Linting
DESCRIPTION: Commands to install ESLint or JSHint linters globally or in a workspace for JavaScript validation.

LANGUAGE: bash
CODE:
npm install eslint --save-dev
npm install jshint --save-dev

----------------------------------------

TITLE: Configuring Allowed Extensions for Windows Group Policy
DESCRIPTION: Demonstrates how to configure allowed extensions in Windows group policy using a multi-line string, allowing for more flexible and extensive configuration.

LANGUAGE: json
CODE:
"setting(python.terminal.shellIntegration.environmentReporting)"

----------------------------------------

TITLE: Disabling Extensions in VS Code Test Configuration
DESCRIPTION: Modify the launch.json or @vscode/test-electron configuration to disable other extensions during testing.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Extension Tests",
      "type": "extensionHost",
      "request": "launch",
      "runtimeExecutable": "${execPath}",
      "args": [
        "--disable-extensions",
        "--extensionDevelopmentPath=${workspaceFolder}",
        "--extensionTestsPath=${workspaceFolder}/out/test/suite/index"
      ],
      "outFiles": ["${workspaceFolder}/out/test/**/*.js"]
    }
  ]
}

----------------------------------------

TITLE: Opening Settings in Visual Studio Code
DESCRIPTION: This keyboard shortcut opens the Settings editor in Visual Studio Code, where users can customize formatting options for C# files.

LANGUAGE: plaintext
CODE:
kb(workbench.action.openSettings)

----------------------------------------

TITLE: Debug configuration with user input
DESCRIPTION: Example showing how to configure user input variables in launch.json for debugging

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "program": "${workspaceFolder}/${input:pickProgram}"
        }
    ],
    "inputs": [
        {
            "id": "pickProgram",
            "description": "Select client or server",
            "type": "pickString",
            "options": ["client.js", "server.js"],
            "default": "client.js"
        }
    ]
}

----------------------------------------

TITLE: Configuring Remote User in VS Code Dev Container
DESCRIPTION: JSON configuration for specifying a non-root user for VS Code operations in a dev container.

LANGUAGE: json
CODE:
"remoteUser": "user-name-goes-here"

----------------------------------------

TITLE: Configuring VS Code Launch for Extension Tests
DESCRIPTION: JSON configuration for launch.json to run tests for a VS Code extension.

LANGUAGE: json
CODE:
{
    "name": "Extension Tests",
    "type": "extensionHost",
    "request": "launch",
    "runtimeExecutable": "${execPath}",
    "args": [
        "--extensionDevelopmentPath=${workspaceFolder}",
        "--extensionTestsPath=${workspaceFolder}/out/test"
    ],
    "outFiles": [
        "${workspaceFolder}/out/test/**/*.js"
    ],
    "preLaunchTask": "npm: compile-tests"
}

----------------------------------------

TITLE: Adding Custom Keybindings for VS Code Extensions
DESCRIPTION: JSON schema for contributing custom keyboard shortcuts to VS Code extension keybindings

LANGUAGE: json
CODE:
{
    "mac": "<keyboard shortcut for mac>",
    "linux": "<keyboard shortcut for linux",
    "win": "<keyboard shortcut for windows",
    "key": "<default keyboard shortcut>",
    "command": "<name of the command in VS Code"
}

----------------------------------------

TITLE: Opening Project in VS Code
DESCRIPTION: Command to open the current directory in Visual Studio Code.

LANGUAGE: bat
CODE:
code .

----------------------------------------

TITLE: Refactored TypeScript Add Function
DESCRIPTION: The add function after applying the inline variable refactoring to remove the temporary result variable.

LANGUAGE: typescript
CODE:
function add(a, b) {
  return a + b;
}

----------------------------------------

TITLE: Removing macOS Quarantine Attribute
DESCRIPTION: Command to remove the quarantine attribute from VS Code on macOS, which is necessary for portable mode to function properly after downloading the application.

LANGUAGE: bash
CODE:
xattr -dr com.apple.quarantine Visual\ Studio\ Code.app

----------------------------------------

TITLE: Configuring Visual Studio Style Word Navigation in VS Code
DESCRIPTION: Example keybindings.json configuration to enable Visual Studio style word navigation and deletion behavior in VS Code.

LANGUAGE: json
CODE:
[
    { "key": "ctrl+right",       "command": "cursorWordStartRight",
                                    "when": "editorTextFocus" },
    { "key": "ctrl+shift+right", "command": "cursorWordStartRightSelect",
                                    "when": "editorTextFocus" },
    { "key": "ctrl+backspace",   "command": "deleteWordStartLeft",
                                    "when": "editorTextFocus" },
    { "key": "ctrl+delete",      "command": "deleteWordStartRight",
                                    "when": "editorTextFocus" }
]

----------------------------------------

TITLE: Defining Font Usage in Icon Theme File
DESCRIPTION: This JSON snippet demonstrates how to define and use custom fonts in the icon theme file. It includes an example of declaring a font and using it in an icon definition.

LANGUAGE: json
CODE:
{
  "fonts": [
    {
      "id": "turtles-font",
      "src": [
        {
          "path": "./turtles.woff",
          "format": "woff"
        }
      ],
      "weight": "normal",
      "style": "normal",
      "size": "150%"
    }
  ],
  "iconDefinitions": {
    "_file": {
      "fontCharacter": "\\E002",
      "fontColor": "#5f8b3b",
      "fontId": "turtles-font"
    }
  }
}

----------------------------------------

TITLE: Converting anonymous type to class in C#
DESCRIPTION: Shows how to convert an anonymous type to a full class definition using Visual Studio Code's refactoring options.

LANGUAGE: C#
CODE:
// Before
var person = new { Name = "John", Age = 30 };

// After
public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}

var person = new Person { Name = "John", Age = 30 };

----------------------------------------

TITLE: Creating a public static main method snippet in Java
DESCRIPTION: This code snippet shows how to use the 'main' or 'psvm' shortcut to generate a public static void main method in Java.

LANGUAGE: java
CODE:
public static void main(String[] args) {}

----------------------------------------

TITLE: Configuring Explorer Key Bindings in VS Code
DESCRIPTION: Example of configuring a key binding for opening a file from the File Explorer.

LANGUAGE: json
CODE:
{
    "key": "enter",
    "command": "list.select",
    "when": "filesExplorerFocus"
}

----------------------------------------

TITLE: Configuring Python Shell Integration in VS Code
DESCRIPTION: Shows how to enable shell integration for Python terminals in VS Code, allowing access to the user's active shell environment information.

LANGUAGE: json
CODE:
"setting(terminal.integrated.shellIntegration.enabled)"

----------------------------------------

TITLE: JSX Component Example in JavaScript
DESCRIPTION: Example showing JSX code where autoClosing behavior is relevant before specific characters.

LANGUAGE: javascript
CODE:
const Component = () =>
  <div className={>
  </div>

----------------------------------------

TITLE: Installing npm IntelliSense Extension in VS Code
DESCRIPTION: This snippet shows how to install the npm IntelliSense extension using VS Code's Quick Open command palette.

LANGUAGE: markdown
CODE:
>**Install:** Quick Open (`kb(workbench.action.quickOpen)`), paste `ext install npm-intellisense` and press `kbstyle(Enter)`.

----------------------------------------

TITLE: Symbol Options Configuration
DESCRIPTION: Customization options for how the debugger searches for symbols including search paths and module filtering.

LANGUAGE: json
CODE:
{
    "symbolOptions": {
        "searchPaths": [
            "~/src/MyOtherProject/bin/debug",
            "https://my-companies-symbols-server"
        ],
        "searchMicrosoftSymbolServer": true,
        "searchNuGetOrgSymbolServer": true,
        "cachePath": "/symcache",
        "moduleFilter": {
            "mode": "loadAllButExcluded",
            "excludedModules": [ "DoNotLookForThisOne*.dll" ]
        }
    }
}

----------------------------------------

TITLE: Registering a Quick Diff Provider in Visual Studio Code Extension
DESCRIPTION: This JavaScript/TypeScript snippet shows how to register a quick diff provider for file schemes, providing original resources for comparison.

LANGUAGE: typescript
CODE:
vscode.window.registerQuickDiffProvider({ scheme: 'file' }, {
    provideOriginalResource: (uri: vscode.Uri) => {
        const changeNode = this.reviewModel.localFileChanges.find(changeNode => changeNode.changeModel.filePath.toString() === uri.toString());
        if (changeNode) {
            return changeNode.changeModel.parentFilePath;
        }
    }
}, 'GitHub Pull Request', this.repository.rootUri);

----------------------------------------

TITLE: Defining Terminal Exit Reasons in VS Code Extension API
DESCRIPTION: Enumerates the possible reasons for a terminal exit, providing extension authors with better insight into why a terminal has exited.

LANGUAGE: typescript
CODE:
export enum TerminalExitReason {
  Unknown = 0,
  Shutdown = 1,
  Process = 2,
  User = 3,
  Extension = 4,
}

----------------------------------------

TITLE: Configuring Multi-Select Modifier in VS Code
DESCRIPTION: JSON configuration to change the multi-selection modifier key from Ctrl/Cmd to Alt in Visual Studio Code.

LANGUAGE: json
CODE:
"workbench.list.multiSelectModifier": "alt"

----------------------------------------

TITLE: Configuring Markdown Preview Scripts
DESCRIPTION: JSON configuration for contributing JavaScript files that add advanced functionality to the Markdown preview.

LANGUAGE: json
CODE:
"contributes": {
    "markdown.previewScripts": [
        "./main.js"
    ]
}

----------------------------------------

TITLE: Configuring Tab Sizing in VS Code Settings
DESCRIPTION: JSON setting to control how editor tabs size and display when space is limited. The 'shrink' option allows tabs to shrink to fit available space.

LANGUAGE: json
CODE:
"workbench.editor.tabSizing": "shrink"

----------------------------------------

TITLE: Disabling Color Decorators for CSS, Less, and SCSS (JSON)
DESCRIPTION: JSON configuration to disable color previews specifically for CSS, Less, and SCSS files in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "[css]": {
        "editor.colorDecorators": false
    }
}

----------------------------------------

TITLE: Configuring Authentication Accounts
DESCRIPTION: Code examples showing how to get authentication accounts and sessions in VS Code extensions

LANGUAGE: typescript
CODE:
const accounts = vscode.authentication.getAccounts('microsoft');

LANGUAGE: typescript
CODE:
const session = vscode.authentication.getSession('microsoft', scopes, { account: accounts[0] })

----------------------------------------

TITLE: Terminal Command Execution Event Handling
DESCRIPTION: Example showing how to listen for terminal command execution events and handle git push commands.

LANGUAGE: typescript
CODE:
const disposables = [];
disposables.push(window.onDidExecuteTerminalCommand(command => {
  if (command.commandLine.startsWith('git push') && command.exitCode === 0) {
    refreshState();
  }
}));
function refreshState() { /* ... */ }

----------------------------------------

TITLE: Configuring TypeScript VS Code Extension Project
DESCRIPTION: Example responses to Yeoman prompts for creating a new TypeScript-based VS Code extension project named 'HelloWorld'.

LANGUAGE: bash
CODE:
# ? What type of extension do you want to create? New Extension (TypeScript)
# ? What's the name of your extension? HelloWorld
### Press <Enter> to choose default for all options below ###

# ? What's the identifier of your extension? helloworld
# ? What's the description of your extension? LEAVE BLANK
# ? Initialize a git repository? Y
# ? Which bundler to use? unbundled
# ? Which package manager to use? npm

# ? Do you want to open the new folder with Visual Studio Code? Open with `code`

----------------------------------------

TITLE: Implementing User Status Retrieval in TypeScript
DESCRIPTION: This snippet demonstrates a simple TypeScript function to fetch a user's status from an API. It showcases the potential issues that can arise without strict null checking.

LANGUAGE: typescript
CODE:
export interface User {
    readonly id: string;
}

/**
 * Get the status of a user
 */
export async function getStatus(user: User): Promise<string> {
    const id = user.id;
    const result = await fetch(`/api/v0/${id}/status`);
    const json = await result.json();
    return json.status;
}

----------------------------------------

TITLE: PipeTransport Configuration for Remote Debugging
DESCRIPTION: Configuration for connecting debugger to remote computer using executable to relay standard I/O.

LANGUAGE: json
CODE:
{
    "pipeTransport": {
        "pipeProgram": "ssh",
        "pipeArgs": [ "-T", "ExampleAccount@ExampleTargetComputer" ],
        "debuggerPath": "~/vsdbg/vsdbg",
        "pipeCwd": "${workspaceFolder}",
        "quoteArgs": true
    }
}

----------------------------------------

TITLE: Configuring Title Bar Customization in VS Code Settings
DESCRIPTION: Set the 'window.experimental.useSandbox' option to true in VS Code settings to enable Electron's sandbox mode.

LANGUAGE: JSON
CODE:
"window.experimental.useSandbox": true

----------------------------------------

TITLE: Defining Font Resources for Product Icons
DESCRIPTION: Shows how to declare font resources in the product icon theme definition file. Includes font file reference, format specification, and font properties.

LANGUAGE: json
CODE:
{
  "fonts": [
    {
      "id": "alien-font",
      "src": [
        {
          "path": "./alien.woff",
          "format": "woff"
        }
      ],
      "weight": "normal",
      "style": "normal"
    }
  ]
}

----------------------------------------

TITLE: Disabling Emmet for specific languages in VS Code settings
DESCRIPTION: The emmet.excludeLanguages setting allows disabling Emmet abbreviations for particular languages. This example disables Emmet in PHP files.

LANGUAGE: json
CODE:
{
    "emmet.excludeLanguages": [
        "php"
    ]
}

----------------------------------------

TITLE: Gulp Task for Sass Compilation and Watching (JavaScript)
DESCRIPTION: A Gulp task that compiles Sass files to CSS and watches for changes, automatically recompiling when files are modified.

LANGUAGE: javascript
CODE:
var gulp = require('gulp');
var sass = require('gulp-sass')(require('sass'));

gulp.task('sass', function(cb) {
    gulp.src('*.scss')
        .pipe(sass())
        .pipe(gulp.dest(function(f) {
            return f.base;
        }));
    cb();
});

gulp.task('default', gulp.series('sass', function(cb) {
    gulp.watch('*.scss', gulp.series('sass'));
    cb();
}));

----------------------------------------

TITLE: Configuring Theme Customization Settings
DESCRIPTION: Example showing how to customize colors for multiple themes at once using workbench.colorCustomizations

LANGUAGE: json
CODE:
"workbench.colorCustomizations": {
    "[Abyss][Red]": {
        "activityBar.background": "#ff0000"
    },
    "[Monokai*]": {
        "activityBar.background": "#ff0000"
    }
}

----------------------------------------

TITLE: Creating and collecting a CPU profile in JavaScript
DESCRIPTION: This JavaScript snippet shows how to use console.profile() and console.profileEnd() to create a CPU profile for performance analysis in VS Code.

LANGUAGE: JavaScript
CODE:
console.profile();
doSomeExpensiveWork();
console.profileEnd();

----------------------------------------

TITLE: Web Extension Test Runner
DESCRIPTION: TypeScript implementation of a test runner using Mocha for web extensions.

LANGUAGE: typescript
CODE:
require('mocha/mocha');

export function run(): Promise<void> {

  return new Promise((c, e) => {
    mocha.setup({
      ui: 'tdd',
      reporter: undefined
    });

    const importAll = (r: __WebpackModuleApi.RequireContext) => r.keys().forEach(r);
    importAll(require.context('.', true, /\.test$/));

    try {
      mocha.run(failures => {
        if (failures > 0) {
          e(new Error(`${failures} tests failed.`));
        } else {
          c();
        }
      });
    } catch (err) {
      console.error(err);
      e(err);
    }
  });
}

----------------------------------------

TITLE: Configuring Formatter Settings in JSON
DESCRIPTION: Illustrates how to add settings for enabling or disabling formatters in VS Code. These settings allow users to control which formatters are active for different languages.

LANGUAGE: json
CODE:
"html.format.enable": true,
"javascript.format.enable": true,
"typescript.format.enable": true,
"json.format.enable": true

----------------------------------------

TITLE: Configuring .NET SDK Installation Timeout
DESCRIPTION: JSON configuration to set a custom timeout value for .NET SDK installation through the dotnetAcquisitionExtension.

LANGUAGE: json
CODE:
{
    "dotnetAcquisitionExtension.installTimeoutValue": 180
}

----------------------------------------

TITLE: Activating a Jupyter Notebook renderer script in Visual Studio Code
DESCRIPTION: Example of the activate function exported by a Jupyter Notebook renderer script to receive the VS Code API.

LANGUAGE: JavaScript
CODE:
interface KernelPreloadContext {
    readonly onDidReceiveKernelMessage: Event<unknown>;
    postKernelMessage(data: unknown): void;
}

export function activate(ctx: KernelPreloadContext): Promise<void> | undefined {
    ...
}

----------------------------------------

TITLE: Configuring VS Code extensions for Laravel in Dev Container
DESCRIPTION: This JSON snippet from devcontainer.json shows how to suggest VS Code extensions for Laravel development within a Dev Container. Extensions are commented out to allow user selection.

LANGUAGE: json
CODE:
"extensions": [
    // "mikestead.dotenv",
    // "amiralizadeh9480.laravel-extra-intellisense",
    // "ryannaddy.laravel-artisan",
    // "onecentlin.laravel5-snippets",
    // "onecentlin.laravel-blade"
],

----------------------------------------

TITLE: Implementing FileContext Component with FlexGrow
DESCRIPTION: Defines a FileContext component that handles file contents with flexible sizing using the flexGrow property.

LANGUAGE: tsx
CODE:
import { PromptElement, BasePromptElementProps, PromptSizing, PromptPiece } from '@vscode/prompt-tsx';

class FileContext extends PromptElement<{ files: IFilesToInclude[] } & BasePromptElementProps> {
	async render(_state: void, sizing: PromptSizing): Promise<PromptPiece> {
		const files = await this.getExpandedFiles(sizing);
		return <>{files.map(f => f.toString())}</>;
	}

	private async getExpandedFiles(sizing: PromptSizing) {
		// Implementation details are summarized here.
		// Refer to the repo for the complete implementation.
	}
}

----------------------------------------

TITLE: Configuring Word Based Suggestions in Visual Studio Code
DESCRIPTION: This JSON snippet shows how to disable word based suggestions in Visual Studio Code using the editor.wordBasedSuggestions setting in the user settings file.

LANGUAGE: json
CODE:
{
  "editor.wordBasedSuggestions": false
}

----------------------------------------

TITLE: Code Actions on Save Configuration
DESCRIPTION: JSON configuration for enabling organize imports and fix all actions on file save

LANGUAGE: json
CODE:
{
    "editor.codeActionsOnSave": {
        "source.fixAll": "explicit",
        "source.organizeImports": "always"
    }
}

----------------------------------------

TITLE: Configuring Runtime Arguments in VS Code
DESCRIPTION: Demonstrates how to configure runtime arguments to work around an HDR display issue on Windows by editing the argv.json file.

LANGUAGE: json
CODE:
"disable-color-correct-rendering": false

----------------------------------------

TITLE: Configuring VS Code Starting Log Level
DESCRIPTION: Command line example for starting VS Code with debug log level for Git extension

LANGUAGE: bash
CODE:
code --log vscode.git:debug

----------------------------------------

TITLE: Implementing Task Provider in TypeScript
DESCRIPTION: Core implementation of a VS Code Task Provider that registers and handles Rake tasks, including task resolution and creation.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

let rakePromise: Thenable<vscode.Task[]> | undefined = undefined;
const taskProvider = vscode.tasks.registerTaskProvider('rake', {
  provideTasks: () => {
    if (!rakePromise) {
      rakePromise = getRakeTasks();
    }
    return rakePromise;
  },
  resolveTask(_task: vscode.Task): vscode.Task | undefined {
		const task = _task.definition.task;
		if (task) {
			const definition: RakeTaskDefinition = <any>_task.definition;
			return new vscode.Task(definition, _task.scope ?? vscode.TaskScope.Workspace, definition.task, 'rake', new vscode.ShellExecution(`rake ${definition.task}`));
		}
		return undefined;  }
});

----------------------------------------

TITLE: Demonstrating JavaScript Name Mangling
DESCRIPTION: This snippet shows how name mangling can shorten long variable names in JavaScript, reducing the overall code size.

LANGUAGE: typescript
CODE:
const someLongVariableName = 123;
console.log(someLongVariableName);

LANGUAGE: typescript
CODE:
const x = 123;
console.log(x);

----------------------------------------

TITLE: Adding Dummy SSH Service on Windows
DESCRIPTION: PowerShell command to create a dummy SSH service entry to fix SSH identity access issues after Windows updates on older builds.

LANGUAGE: powershell
CODE:
New-Service sshd -BinaryPathName "C:\Windows\System32\OpenSSH\ssh.exe"

----------------------------------------

TITLE: Empty Brace Formatting in JavaScript
DESCRIPTION: Example showing empty brace formatting with and without spaces based on the javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces setting.

LANGUAGE: java
CODE:
class Foo {
    doFoo() { }
}

LANGUAGE: java
CODE:
class Foo {
    doFoo() {} // Notice that the space has been removed
}

----------------------------------------

TITLE: Configuring PHP Linter Settings in VS Code
DESCRIPTION: Demonstrates how to configure the PHP linter settings in VS Code's settings file. It shows two new settings: one for specifying the PHP executable path and another for controlling when validation is triggered.

LANGUAGE: JSON
CODE:
{
  "php.validate.executablePath": "/path/to/php",
  "php.validate.run": "onSave"
}

----------------------------------------

TITLE: Defining Snippets in JSON Schema
DESCRIPTION: This example demonstrates how to define custom snippets within a JSON schema for enhanced autocompletion. It includes a snippet for a keyboard shortcut configuration.

LANGUAGE: json
CODE:
{
    "type": "array",
    "title": "Keyboard shortcuts configuration",
    "items": {
        "type": "object",
        "required": ["key"],
        "defaultSnippets": [
            {
                "label": "New keyboard shortcut",
                "description": "Binds a key to a command for a given state",
                "body": { "key": "$1", "command": "$2", "when": "$3" }
            }
        ],
        "properties": {
            "key": {
                "type": "string"
            }
            ...
        }
    }
}

----------------------------------------

TITLE: Configuring Auto Fix on Save in JSON
DESCRIPTION: This JSON snippet shows how to configure Code Actions to run automatically on file save, including 'source.fixAll' and 'source.organizeImports'.

LANGUAGE: JSON
CODE:
// On save, run both fixAll and organizeImports source actions
"editor.codeActionsOnSave": {
    "source.fixAll": true,
    "source.organizeImports": true,
}

----------------------------------------

TITLE: JavaScript Code with Unicode Directional Formatting
DESCRIPTION: Example showing how Unicode directional formatting characters can affect code rendering and potential security implications.

LANGUAGE: js
CODE:
//              from, to, amount
transferBalance(5678,‮6776,4321‬,"USD");

----------------------------------------

TITLE: Modifying package.json for Code Tutor Command
DESCRIPTION: Update the package.json file to include the correct command for toggling Code Tutor annotations.

LANGUAGE: json
CODE:
"contributes": {
  "commands": [
      {
      "command": "code-tutor.annotate",
      "title": "Toggle Tutor Annotations"
      }
  ]
}

----------------------------------------

TITLE: Removing Node.js Dependencies in Electron Renderer
DESCRIPTION: Demonstrates how to replace direct Node.js file system access with a sandboxed alternative using a global 'vscode' object for asynchronous operations.

LANGUAGE: javascript
CODE:
vscode.workspace.getConfiguration().update('workbench.colorTheme', 'Default Dark+', true);

----------------------------------------

TITLE: Sample WeatherForecast JSON Response
DESCRIPTION: Example JSON output from the WeatherForecast endpoint of the ASP.NET Core Web API running in a container.

LANGUAGE: json
CODE:
[
    {"date":"2019-11-07T23:31:57.0527092+00:00","temperatureC":4,"temperatureF":39,"summary":"Bracing"},
    {"date":"2019-11-08T23:31:57.0539243+00:00","temperatureC":-19,"temperatureF":-2,"summary":"Freezing"},
    {"date":"2019-11-09T23:31:57.0539269+00:00","temperatureC":2,"temperatureF":35,"summary":"Freezing"},
    {"date":"2019-11-10T23:31:57.0539275+00:00","temperatureC":-4,"temperatureF":25,"summary":"Freezing"},
    {"date":"2019-11-11T23:31:57.053928+00:00","temperatureC":9,"temperatureF":48,"summary":"Bracing"}
]

----------------------------------------

TITLE: Using vscode.workspace.fs API in VS Code Extensions
DESCRIPTION: New API for extensions to read, write, and manage files and folders, including from contributed file systems like SSH or WSL remote file systems.

LANGUAGE: typescript
CODE:
const writeStr = '1€ is 1.12$ is 0.9£';
const writeBytes = Buffer.from(writeStr, 'utf8');

await vscode.workspace.fs.writeFile(someUri, writeBytes);

----------------------------------------

TITLE: Customizing Workbench Colors in VS Code
DESCRIPTION: Example of customizing the title bar background color using workbench.colorCustomizations setting in VS Code.

LANGUAGE: json
CODE:
{
  "workbench.colorCustomizations": {
    "titleBar.activeBackground": "#ff0000"
  }
}

----------------------------------------

TITLE: Updating the Vue template in App.vue
DESCRIPTION: This HTML snippet shows how to update the App.vue file to display 'Hello World!' using the HelloWorld component.

LANGUAGE: html
CODE:
<template>
  <header>
    <img alt="Vue logo" class="logo" src="./assets/logo.svg" width="125" height="125" />

    <div class="wrapper">
      <HelloWorld msg="Hello World!" />
    </div>
  </header>

  <main>
    <TheWelcome />
  </main>
</template>

----------------------------------------

TITLE: Configuring Nodemon for Node.js debugging in VS Code
DESCRIPTION: Example launch configuration for using Nodemon to automatically restart a Node.js debug session when source files change.

LANGUAGE: json
CODE:
{
	"type": "node",
	"request": "launch",
	"name": "nodemon",
	"cwd": "${workspaceRoot}",
	"runtimeExecutable": "nodemon",
	"runtimeArgs": [
		"--debug=5858"
	],
	"program": "${workspaceRoot}/app.js",
	"restart": true,
	"port": 5858
}

----------------------------------------

TITLE: Configuring Tab Decoration Settings in VS Code
DESCRIPTION: Settings to configure color and badge decorations for editor tabs.

LANGUAGE: JSON
CODE:
"workbench.editor.decorations.colors": true,
"workbench.editor.decorations.badges": true

----------------------------------------

TITLE: Configuring Semantic Highlighting in VS Code
DESCRIPTION: Example of enabling semantic highlighting for a specific theme using editor.tokenColorCustomizations setting.

LANGUAGE: json
CODE:
"editor.tokenColorCustomizations": {
    "[Material Theme]": {
        "semanticHighlighting": true
    }
}

----------------------------------------

TITLE: Initializing WebAssembly Worker in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a worker connection for executing WebAssembly code asynchronously in a VS Code extension.

LANGUAGE: typescript
CODE:
import { Connection, RAL } from '@vscode/wasm-component-model';
import { calculator } from './calculator';

async function main(): Promise<void> {
	const connection = await Connection.createWorker(calculator._);
	connection.listen();
}

main().catch(RAL().console.error);

----------------------------------------

TITLE: C/C++ Properties Configuration
DESCRIPTION: JSON configuration for c_cpp_properties.json to set compiler path and IntelliSense settings for GCC in Visual Studio Code.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "GCC",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [
                "_DEBUG",
                "UNICODE",
                "_UNICODE"
            ],
            "windowsSdkVersion": "10.0.22000.0",
            "compilerPath": "C:/msys64/mingw64/bin/g++.exe",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "windows-gcc-x64"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Creating a Webview Text Editor Inset in Visual Studio Code Extensions
DESCRIPTION: TypeScript code demonstrating how to create a webview text editor inset in a VS Code extension.

LANGUAGE: typescript
CODE:
export function createWebviewTextEditorInset(editor: TextEditor, line: number, height: number, options?: WebviewOptions): WebviewEditorInset;

----------------------------------------

TITLE: Configuring C++ Cross-Compilation Settings in c_cpp_properties.json
DESCRIPTION: Example configuration for c_cpp_properties.json that sets up cross-compilation settings for a Linux x64 host machine targeting Linux Arm. Includes compiler path, IntelliSense mode, include paths, and language standards settings.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "name": "myConfigurationName",
            "includePath": [
                "${workspaceFolder}/**"
            ],
            "defines": [],
            "compilerPath": "/usr/bin/arm-none-eabi-g++",
            "cStandard": "c11",
            "cppStandard": "c++14",
            "IntelliSenseMode": "gcc-arm"
        }
    ],
    "version": 4
}

----------------------------------------

TITLE: Defining Task Interface in TypeScript
DESCRIPTION: TypeScript interface definition that extends VS Code's TaskDefinition to specify the structure of Rake tasks.

LANGUAGE: typescript
CODE:
interface RakeTaskDefinition extends vscode.TaskDefinition {
  /**
   * The task name
   */
  task: string;

  /**
   * The rake file containing the task
   */
  file?: string;
}

----------------------------------------

TITLE: Referencing Environment Variables in Launch Configuration (JSON)
DESCRIPTION: This snippet demonstrates how to use environment variables in a launch configuration for a Node.js application. It specifically shows how to reference the USERNAME environment variable in the program arguments.

LANGUAGE: json
CODE:
{
    "type": "node",
    "request": "launch",
    "name": "Launch Program",
    "program": "${workspaceFolder}/app.js",
    "cwd": "${workspaceFolder}",
    "args": [ "${env:USERNAME}" ]
}

----------------------------------------

TITLE: Custom Task Definition Example
DESCRIPTION: JSON configuration showing how to define a custom task that runs test scripts in the terminal with specific presentation options

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "taskName": "Run tests",
            "type": "shell",
            "command": "./scripts/test.sh",
            "windows": {
                "command": ".\\scripts\\test.bat"
            },
            "group": "test",
            "presentation": {
                "reveal": "always",
                "panel": "new"
            }
        }
    ]
}

----------------------------------------

TITLE: Configuring panel maximization in Visual Studio Code
DESCRIPTION: Adds a new setting to control whether the panel opens maximized when toggled, with options for always, never, or preserving the previous state.

LANGUAGE: json
CODE:
"panel.opensMaximized": "preserve"

----------------------------------------

TITLE: Implementing Exercise Command Logic
DESCRIPTION: Adds logic to detect and handle the '/exercise' command, updating the prompt accordingly.

LANGUAGE: typescript
CODE:
const EXERCISES_PROMPT = 'You are a helpful tutor. Your job is to teach the user with fun, simple exercises that they can complete in the editor. Your exercises should start simple and get more complex as the user progresses. Move one concept at a time, and do not move on to the next concept until the user provides the correct answer. Give hints in your exercises to help the user learn. If the user is stuck, you can provide the answer and explain why it is the answer. If the user asks a non-programming question, politely decline to respond.';

// In the request handler
if (request.command === 'exercise') {
    prompt = EXERCISES_PROMPT;
}

----------------------------------------

TITLE: Opening the Vue project in Visual Studio Code
DESCRIPTION: These commands navigate to the project folder and open it in Visual Studio Code.

LANGUAGE: bash
CODE:
cd vue-project
code .

----------------------------------------

TITLE: VS Code Keyboard Shortcuts Documentation
DESCRIPTION: Markdown formatted table documentation of VS Code keyboard shortcuts organized by functional categories including General, Basic Editing, Search and Replace, Multi-cursor and Selection, Rich Languages Editing, Navigation, Editor Management, File Management, Display, Debug, and Integrated Terminal.

LANGUAGE: markdown
CODE:
## General

Key|Command
---|---
`kb(workbench.action.showCommands)`, `kbstyle(F1)`|Show Command Palette
`kb(workbench.action.quickOpen)`|Quick Open
`kb(workbench.action.newWindow)`|New window/instance
`kb(workbench.action.closeWindow)`|Close window/instance

## Basic Editing

Key|Command
---|---
`kb(editor.action.clipboardCutAction)`|Cut line (empty selection)
`kb(editor.action.clipboardCopyAction)`|Copy line (empty selection)
[...additional content truncated for brevity...]

----------------------------------------

TITLE: Configuring Extract Refactoring Keybinding in Visual Studio Code
DESCRIPTION: This code configures a keybinding to extract either constants or type aliases in TypeScript using the 'Extract to type alias' refactoring.

LANGUAGE: json
CODE:
{
    "key": "shift+ctrl+e",
    "command": "editor.action.codeAction",
    "args": {
        "kind": "refactor.extract",
        "preferred": true
    }
}

----------------------------------------

TITLE: Setting Linux Sandbox Permissions
DESCRIPTION: Commands to set the correct permissions for the Electron sandbox helper binary on Linux systems. This configures the setuid sandbox for Chromium's security model.

LANGUAGE: bash
CODE:
sudo chown root <path-to-vscode>/chrome-sandbox
sudo chmod 4755 <path-to-vscode>/chrome-sandbox

----------------------------------------

TITLE: Registering TextDocumentContentProvider in TypeScript
DESCRIPTION: This snippet shows how to register a TextDocumentContentProvider for a custom scheme in VS Code. The provider is responsible for providing content for URIs with the specified scheme.

LANGUAGE: typescript
CODE:
vscode.workspace.registerTextDocumentContentProvider(myScheme, myProvider);

----------------------------------------

TITLE: Increasing File Watch Limit
DESCRIPTION: Commands to increase the file watch limit on a Linux system to resolve ENOSPC errors in VS Code.

LANGUAGE: bash
CODE:
echo "fs.inotify.max_user_watches=524288" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

----------------------------------------

TITLE: Configuring Close Buttons on Tabs in VS Code Settings
DESCRIPTION: JSON configuration to hide close buttons on editor tabs in VS Code.

LANGUAGE: json
CODE:
"workbench.editor.showTabCloseButton": false

----------------------------------------

TITLE: Defining new theme colors in Visual Studio Code
DESCRIPTION: Introduces new color customization options for various UI elements, including pinned tabs, git decorations, and chart colors.

LANGUAGE: typescript
CODE:
tab.lastPinnedBorder: string;
gitDecoration.stageDeletedResourceForeground: string;
gitDecoration.stageModifiedResourceForeground: string;
charts.red: string;
charts.blue: string;
charts.yellow: string;
charts.orange: string;
charts.green: string;
charts.purple: string;
charts.foreground: string;
charts.lines: string;

----------------------------------------

TITLE: Setting up VS Code Extension Project with Yeoman
DESCRIPTION: Uses Yeoman and the VS Code Extension Generator to set up a new extension project named 'Code Tutor'.

LANGUAGE: bash
CODE:
npx --package yo --package generator-code -- yo code

----------------------------------------

TITLE: Starting the Vue development server
DESCRIPTION: This command starts the development server for the Vue application.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Defining Custom Instructions for GitHub Copilot in Markdown
DESCRIPTION: This snippet demonstrates how to create custom instructions for GitHub Copilot using a markdown file. It specifies preferences for React, SvelteKit, and TypeScript coding styles.

LANGUAGE: markdown
CODE:
## React 18
* Use functional components
* Use hooks for state management
* Use TypeScript for type safety

## SvelteKit 4
* Use SSR for dynamic content rendering
* Use static site generation (SSG) for pre-rendered static pages.

## TypeScript
* Use consistent object property shorthand: const obj = { name, age }
* Avoid implicit any

----------------------------------------

TITLE: Configuring Multi-Extension Debugging in VS Code Workspace
DESCRIPTION: JSON configuration for a VS Code workspace file to enable debugging of multiple extensions simultaneously.

LANGUAGE: json
CODE:
{
  "folders": [
    { "path": "hello1" },
    { "path": "hello2" }
  ],
  "launch": {
    "configurations": [
      {
        "type": "extensionHost",
        "request": "launch",
        "name": "Launch Two Extensions",
        "args": [
          "--extensionDevelopmentPath=${workspaceFolder:hello1}",
          "--extensionDevelopmentPath=${workspaceFolder:hello2}",
        ],
        "outFiles": [
          "${workspaceFolder:hello1}/out/**/*.js",
          "${workspaceFolder:hello2}/out/**/*.js"
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Updating VSCode Extension Recommendations
DESCRIPTION: This JSON snippet updates the .vscode/extensions.json file to recommend the ESLint extension instead of TSLint.

LANGUAGE: json
CODE:
"recommendations": [
  "dbaeumer.vscode-eslint"
]

----------------------------------------

TITLE: Custom Editor Activation
DESCRIPTION: Defines activation event for custom editor functionality in VS Code.

LANGUAGE: json
CODE:
"activationEvents": [
    "onCustomEditor:catCustoms.pawDraw"
]

----------------------------------------

TITLE: Configuring Terminal Command Skipping in VS Code
DESCRIPTION: Example configuration to customize which keyboard shortcuts skip the terminal shell and are handled by VS Code directly.

LANGUAGE: jsonc
CODE:
{
  "terminal.integrated.commandsToSkipShell": [
    // Ensure the toggle sidebar visibility keyboard shortcut skips the shell
    "workbench.action.toggleSidebarVisibility",
    // Send quick open's keyboard shortcut to the shell
    "-workbench.action.quickOpen",
  ]
}

----------------------------------------

TITLE: Debug Launch Configuration Provider Example
DESCRIPTION: Example implementation for providing dynamic debug configurations

LANGUAGE: typescript
CODE:
const fileUri = vscode.Uri.joinPath(context.extensionUri, './file.png');
const bytes = await vscode.workspace.fs.readFile(fileUri);

----------------------------------------

TITLE: Configuring Code Actions on Save in VS Code
DESCRIPTION: Setting to specify an array of Code Actions to execute in order when saving a file. This allows controlling the order of operations like organizing imports and fixing all issues.

LANGUAGE: JSON
CODE:
"editor.codeActionsOnSave": [
    "source.organizeImports",
    "source.fixAll"
]

----------------------------------------

TITLE: Installing ESLint and TypeScript Support with npm
DESCRIPTION: This command installs ESLint, a TypeScript parser for ESLint, and TypeScript-specific ESLint rules using npm.

LANGUAGE: bash
CODE:
npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin

----------------------------------------

TITLE: CSS Styles for Flask Application
DESCRIPTION: Defines CSS styles for the Flask application's layout and navigation.

LANGUAGE: css
CODE:
.navbar {
    background-color: lightslategray;
    font-size: 1em;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    color: white;
    padding: 8px 5px 8px 5px;
}

.navbar a {
    text-decoration: none;
    color: inherit;
}

.navbar-brand {
    font-size: 1.2em;
    font-weight: 600;
}

.navbar-item {
    font-variant: small-caps;
    margin-left: 30px;
}

.body-content {
    padding: 5px;
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

----------------------------------------

TITLE: Implementing a VS Code Extension Directly in Rust
DESCRIPTION: This Rust code demonstrates how to implement a VS Code extension directly in Rust, using WebAssembly and the Component Model.

LANGUAGE: rust
CODE:
use std::rc::Rc;

#[export_name = "activate"]
pub fn activate() -> vscode::Disposables {
	let mut disposables: vscode::Disposables = vscode::Disposables::new();

	let channel: Rc<vscode::OutputChannel> = Rc::new(vscode::window::create_output_channel("Rust Extension", Some("plaintext")));

	let channel_clone = channel.clone();
	disposables.push(vscode::commands::register_command("testbed-component-model-vscode.run", move || {
		channel_clone.append_line("Open documents");

		for document in vscode::workspace::text_documents() {
			channel.append_line(&format!("Document: {}", document.uri()));
		}
	}));
	return disposables;
}

#[export_name = "deactivate"]
pub fn deactivate() {
}

----------------------------------------

TITLE: Contributing Debug Toolbar Commands in JSON
DESCRIPTION: This JSON snippet demonstrates how an extension can contribute commands to the debug toolbar in VS Code's package.json file.

LANGUAGE: JSON
CODE:
"contributes": {
  "commands": [
    {
      "command": "dart.hotReload",
      "title": "Hot Reload",
      "icon": {
        "dark": "./media/hot_reload_inverse.svg",
        "light": "./media/hot_reload.svg"
      }
    }
  ],
  "menus": {
    "debug/toolbar": [
      {
        "command": "dart.hotReload",
        "when": "debugType == dart",
        "group": "dart"
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring HTML language suggestions in VS Code settings
DESCRIPTION: New settings to control which built-in code completion providers are active for HTML. These allow disabling suggestions for Angular, Ionic, or HTML5.

LANGUAGE: json
CODE:
{
    "html.suggest.angular1": true,
    "html.suggest.ionic": true,
    "html.suggest.html5": true
}

----------------------------------------

TITLE: Incorrect Implementation of File-Based HoverProvider
DESCRIPTION: Shows an example of a problematic hover provider implementation that assumes all documents are on disk without proper checking.

LANGUAGE: typescript
CODE:
// 👎 too lax
vscode.languages.registerHoverProvider('typescript', {
  provideHover(doc: vscode.TextDocument) {
    const { size } = fs.statSync(doc.uri.fsPath); // ⚠️ what about 'untitled:/Untitled1.ts' or others?
    return new vscode.Hover(`Size in bytes is ${size}`);
  }
});

----------------------------------------

TITLE: Disabling Local Echo in Terminal
DESCRIPTION: Configuration to disable the local echo feature which helps mitigate input latency in remote sessions.

LANGUAGE: json
CODE:
{
  "terminal.integrated.localEchoEnabled": false
}

----------------------------------------

TITLE: Configuring TypeScript Watch Task in tasks.json
DESCRIPTION: Configuration for setting up TypeScript compiler in watch mode using tasks.json. Defines a watching task that uses the standard TSC watch problem matcher.

LANGUAGE: json
CODE:
{
	"version": "0.1.0",
	"command": "tsc",
	"isShellCommand": true,
	// define the task to be a watching task
	"isWatching": true,
	// use the standard tsc in watch mode problem matcher to find compile problems in the output.
	"problemMatcher": "$tsc-watch"
}

----------------------------------------

TITLE: Disabling Alt Key Focus of Custom Menu Bar in Visual Studio Code
DESCRIPTION: JSON configuration to disable focusing the custom menu bar when pressing the Alt key in VS Code.

LANGUAGE: json
CODE:
"window.customMenuBarAltFocus": false

----------------------------------------

TITLE: Configuring Port Auto-Forward Browser Behavior in VS Code
DESCRIPTION: Configuration for the remote.portsAttributes setting that controls browser opening behavior when ports are automatically forwarded. The openBrowserOnce option opens the browser only on first port detection during a session.

LANGUAGE: json
CODE:
{
  "remote.portsAttributes": {
    "4000": {
      "onAutoForward": "openBrowserOnce"
    }
  }
}

----------------------------------------

TITLE: Enabling Developer Tools Security on macOS
DESCRIPTION: Terminal command to permanently enable Developer Tools Access and prevent security prompts during debugging.

LANGUAGE: bash
CODE:
sudo DevToolsSecurity --enable

----------------------------------------

TITLE: Installing VS Code Server on WSL
DESCRIPTION: Command to download and install the VS Code Server on a Windows Subsystem for Linux (WSL) instance. This is the first step in setting up the server for remote development.

LANGUAGE: bash
CODE:
wget -O- https://aka.ms/install-vscode-server/setup.sh | sh

----------------------------------------

TITLE: Configuring Auto Fix on Save in Visual Studio Code
DESCRIPTION: Demonstrates how to set up VS Code to automatically run fixAll and organizeImports actions on file save.

LANGUAGE: json
CODE:
{
  "editor.codeActionsOnSave": {
    "source.fixAll": true,
    "source.organizeImports": true
  }
}

----------------------------------------

TITLE: Adding Exercise Command to Chat Participant
DESCRIPTION: Extends the chat participant with a '/exercise' command for generating practice exercises.

LANGUAGE: json
CODE:
"contributes": {
    "chatParticipants": [
      {
        "id": "chat-tutorial.code-tutor",
        "fullName": "Code Tutor",
        "name": "tutor",
        "description": "What can I teach you?",
        "isSticky": true,
        "commands": [
          {
            "name": "exercise",
            "description": "Provide exercises to practice a concept."
          }
        ]
      }
    ]
  },

----------------------------------------

TITLE: Building Toolchain with Crosstool-ng
DESCRIPTION: Shell commands for generating a sysroot using Crosstool-ng configuration.

LANGUAGE: shell
CODE:
mkdir toolchain-dir
cd toolchain-dir
cp <path-to-config-file> > .config
ct-ng build

----------------------------------------

TITLE: Configuring File Exclusions in Visual Studio Live Share
DESCRIPTION: This JSON snippet shows how to configure file exclusions for Visual Studio Live Share using a .vsls.json configuration file. It demonstrates excluding specific files and directories from being shared during a collaboration session.

LANGUAGE: json
CODE:
{
  "$schema": "http://json.schemastore.org/vsls",
  "gitignore": "none",
  "excludeFiles": [
    "*.p12",
    "*.cer",
    "token",
    ".gitignore"
  ],
  "excludeDirectories": [
    "node_modules",
    ".git"
  ]
}

----------------------------------------

TITLE: Adding ESLint Script to package.json
DESCRIPTION: This JSON snippet shows how to add an ESLint script to the package.json file for linting TypeScript files in a specified source folder.

LANGUAGE: json
CODE:
"lint": "eslint -c .eslintrc.js --ext .ts <mySrcFolder>"

----------------------------------------

TITLE: Writing Debug Adapter Tests with Mocha
DESCRIPTION: Examples of using the new debug adapter test toolkit to write automated tests for a debug adapter using Mocha and Promise-based building blocks.

LANGUAGE: javascript
CODE:
var dc: DebugClient = ...;

test('should run program to the end', () => {
    return Promise.all([
        dc.configurationSequence(),
        dc.launch({ program: "main.js" }),
        dc.waitForEvent('terminated')
    ]);
});

test('should stop on entry', () => {
    return Promise.all([
        dc.configurationSequence(),
        dc.launch({ program: "main.js", stopOnEntry: true }),
        dc.assertStoppedLocation('entry', 1)
    ]);
});

test('should set a breakpoint and stop on it', () => {
    return dc.hitBreakpoint({ program: "main.js" }, "test.js", 15);
});

----------------------------------------

TITLE: Accessing Workspace File Location in VS Code Extension
DESCRIPTION: TypeScript code demonstrating how to access the workspace file location and use it to reopen the workspace.

LANGUAGE: typescript
CODE:
vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);

----------------------------------------

TITLE: Configuring Default Port Detection Behavior in VS Code Remote
DESCRIPTION: Configuration example demonstrating how to set default behavior for auto-forwarded ports that aren't explicitly configured in remote.portsAttributes, using remote.otherPortsAttributes setting.

LANGUAGE: json
CODE:
"remote.otherPortsAttributes": {
    "onAutoForward": "silent"
}

----------------------------------------

TITLE: Basic Node.js Docker Build Task Configuration
DESCRIPTION: Minimal task configuration for building a Node.js Docker image using default settings.

LANGUAGE: json
CODE:
{
  "version": "2.0.0",
  "tasks": [
      {
          "label": "Build Node Image",
          "type": "docker-build",
          "platform": "node"
      }
  ]
}

----------------------------------------

TITLE: Enabling Extensions in Virtual Workspaces with VS Code Settings
DESCRIPTION: This JSON snippet shows how to manually enable an extension to work in a virtual workspace by modifying the user settings.json file in VS Code.

LANGUAGE: json
CODE:
    "extensions.supportVirtualWorkspaces": { "<extensionID>": true }

----------------------------------------

TITLE: Configuring Terminal Environment in Visual Studio Code
DESCRIPTION: Demonstrates how to create a terminal with a strictly controlled environment, containing only specified environment variables.

LANGUAGE: typescript
CODE:
const terminal = createTerminal({
  name: "Test terminal",
  env: {
    "FOO": "BAR"
  },
  strictEnv: true
});

----------------------------------------

TITLE: Configuring Remote Jupyter Server for External Access
DESCRIPTION: These are command-line arguments for configuring a Jupyter server to allow external access and listen on all IP addresses.

LANGUAGE: shell
CODE:
--NotebookApp.allow_origin='*'

LANGUAGE: shell
CODE:
--NotebookApp.ip='0.0.0.0'

----------------------------------------

TITLE: Defining a Simple TypeScript Function
DESCRIPTION: A basic TypeScript function declaration used to demonstrate LSIF concepts.

LANGUAGE: typescript
CODE:
function bar(): void {
}

----------------------------------------

TITLE: Registering Chat Participant in package.json
DESCRIPTION: Defines the chat participant metadata in the package.json file, including ID, name, and description.

LANGUAGE: json
CODE:
"contributes":{
    "chatParticipants": [
    {
        "id": "chat-tutorial.code-tutor",
        "fullName": "Code Tutor",
        "name": "tutor",
        "description": "What can I teach you?",
        "isSticky": true
    }
    ]
}

----------------------------------------

TITLE: Linux SSH Agent Autostart Configuration
DESCRIPTION: Script to automatically start SSH agent on login for Linux systems, to be added to .bash_profile or .zprofile.

LANGUAGE: bash
CODE:
if [ -z "$SSH_AUTH_SOCK" ]; then
   # Check for a currently running instance of the agent
   RUNNING_AGENT="`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`"
   if [ "$RUNNING_AGENT" = "0" ]; then
        # Launch a new instance of the agent
        ssh-agent -s &> $HOME/.ssh/ssh-agent
   fi
   eval `cat $HOME/.ssh/ssh-agent` > /dev/null
   ssh-add 2> /dev/null
fi

----------------------------------------

TITLE: Configuring Task to Automatically Show Problems Panel in VS Code
DESCRIPTION: JSON configuration for a task that automatically shows the Problems panel in Visual Studio Code based on certain conditions.

LANGUAGE: json
CODE:
{
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "watch",
      "problemMatcher": "$tsc-watch",
      "isBackground": true,
      "presentation": {
        "reveal": "always",
        "revealProblems": "onProblem"
      }
    }
  ]
}

----------------------------------------

TITLE: Refreshing SSH_AUTH_SOCK Environment Variable in Bash
DESCRIPTION: Command to refresh the SSH_AUTH_SOCK environment variable after reconnection in a remote SSH session. This updates the variable to the correct value stored in SSH_AUTH_SOCK_LOCATION.

LANGUAGE: bash
CODE:
SSH_AUTH_SOCK=`cat $SSH_AUTH_SOCK_LOCATION`

----------------------------------------

TITLE: Configuring PHP File Extensions in VS Code Settings
DESCRIPTION: JSON configuration for associating additional file extensions with PHP language support in VS Code using the files.associations setting.

LANGUAGE: json
CODE:
"files.associations": {
    "*.php4": "php",
    "*.php5": "php"
}

----------------------------------------

TITLE: Python Dockerfile Configuration
DESCRIPTION: Illustrates a basic Dockerfile configuration for a Python development container, specifying the base image and additional setup steps.

LANGUAGE: dockerfile
CODE:
FROM python:3.7

# Install git, process tools
RUN apt-get update && apt-get -y install git procps

# Clean up
RUN apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Set the default shell to bash instead of sh
ENV SHELL /bin/bash

----------------------------------------

TITLE: Configuring Keyboard Navigation in Visual Studio Code
DESCRIPTION: Demonstrates how to configure a keybinding to toggle between keyboard navigation modes in VS Code's tree views.

LANGUAGE: json
CODE:
{
  "key": "your-preferred-key",
  "command": "list.toggleFilterOnType"
}

----------------------------------------

TITLE: Configuring Welcome Content in package.json
DESCRIPTION: Contributes welcome content to custom views, which is displayed when the view is empty.

LANGUAGE: json
CODE:
{
  "contributes": {
    "viewsWelcome": [
      {
        "view": "scm",
        "contents": "In order to use git features, you can open a folder containing a git repository or clone from a URL.\n[Open Folder](command:vscode.openFolder)\n[Clone Repository](command:git.clone)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",
        "when": "config.git.enabled && git.state == initialized && workbenchState == empty"
      }
    ]
  }
}

----------------------------------------

TITLE: Creating a new Vue project with npm
DESCRIPTION: This command uses npm to create a new Vue project using the latest version of create-vue.

LANGUAGE: bash
CODE:
npm create vue@latest

----------------------------------------

TITLE: Handling Undefined User in TypeScript Status Retrieval
DESCRIPTION: This snippet shows an updated version of the getStatus function that attempts to handle undefined users. It illustrates common defensive programming practices used without strict null checking.

LANGUAGE: typescript
CODE:
/**
 * Get the status of a user
 *
 * Don't call this with undefined or null!
 */
export async function getStatus(user: User): Promise<string> {
    if (!user) {
        return '';
    }
    const id = user.id;
    const result = await fetch(`/api/v0/${id}/status`);
    const json = await result.json();
    return json.status;
}

----------------------------------------

TITLE: Writing File Data Using VS Code Workspace FileSystem API
DESCRIPTION: Example showing how to write data to a file using VS Code's workspace filesystem API, demonstrating text data conversion to UInt8Array

LANGUAGE: typescript
CODE:
const writeData = Buffer.from("my text data", 'utf8');
vscode.workspace.fs.writeFile(fileUri, writeData);

----------------------------------------

TITLE: Configuring Global Git User Settings
DESCRIPTION: Commands to set up global Git user name and email configuration on the local machine.

LANGUAGE: bash
CODE:
git config --global user.name "Your Name"
git config --global user.email "your.email@address"

----------------------------------------

TITLE: Registering a Line Link Definition Provider in TypeScript
DESCRIPTION: This code snippet demonstrates how to register a custom definition provider for markdown files that provides definition links for line numbers enclosed in angle brackets.

LANGUAGE: typescript
CODE:
import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
    vscode.languages.registerDefinitionProvider('markdown', new LineLinkDefinitionProvider());
}

export class LineLinkDefinitionProvider implements vscode.DefinitionProvider {
    async provideDefinition(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken
    ): Promise<vscode.DefinitionLink[]> {
        const wordRange = document.getWordRangeAtPosition(position, /<\d+>/);
        if (wordRange.isEmpty) {
            return [];
        }

        const targetLine = +document.getText(wordRange).slice(1, -1);
        return [{
            // Definition location
            targetRange: new vscode.Range(targetLine - 1, 0, targetLine, 0),
            targetUri: document.uri,

            // Range of the defining symbol
            originSelectionRange: new vscode.Range(
                wordRange.start.translate({ characterDelta: 1 }),
                wordRange.end.translate({ characterDelta: -1 })),
        }];
    }
}

----------------------------------------

TITLE: Inserting Snippets with Whitespace Control in VS Code
DESCRIPTION: Shows how to control whitespace normalization when inserting snippets in VS Code, using the insertSnippet API.

LANGUAGE: javascript
CODE:
const snippet = `This is an indented
    snippet`;

// keepWhitespace: false, undefined
function indentedFunctionWithSnippet() {
    return `This is an indented
        snippet`; // adjusted indentation
}

// keepWhitespace: true
function indentedFunctionWithSnippet() {
    return `This is an indented
    snippet`; // original indentation
}

----------------------------------------

TITLE: Semantic Token Color Customization
DESCRIPTION: Configuration for customizing semantic token colors and styling rules for specific themes.

LANGUAGE: json
CODE:
"editor.semanticTokenColorCustomizations": {
    "[Rouge]": {
        "enabled": true,
        "rules": {
            "*.declaration": { "bold": true }
        }
    }
}

----------------------------------------

TITLE: TypeScript Function with Console Log
DESCRIPTION: A TypeScript function with a console log statement, used to demonstrate folding range in LSIF.

LANGUAGE: typescript
CODE:
function bar(): void {
  console.log('Hello World!');
}

----------------------------------------

TITLE: Webview HTML Content
DESCRIPTION: HTML content for a webview showing an animated GIF image

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
</head>
<body>
    <img src='https://media.giphy.com/media/vFKqnCdLPNOKc/giphy.gif'>
</body>
</html>

----------------------------------------

TITLE: Opening VS Code Projects and Files with URLs
DESCRIPTION: These URL formats demonstrate how to open projects, files, and specific lines in VS Code using the platform's URL handling mechanism. They can be used in browsers or file explorers that can parse and redirect URLs.

LANGUAGE: bash
CODE:
vscode://file/{full path to project}/

vscode://file/c:/myProject/

vscode://file/{full path to file}

vscode://file/c:/myProject/package.json

vscode://file/{full path to file}:line:column

vscode://file/c:/myProject/package.json:5:10

vscode://settings/setting.name

vscode://settings/editor.wordWrap

----------------------------------------

TITLE: Hello World React Component
DESCRIPTION: Example of creating a simple Hello World component in React with necessary imports and configuration

LANGUAGE: javascript
CODE:
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

function HelloWorld() {
  return <h1 className="greeting">Hello, world!</h1>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <HelloWorld />
  </React.StrictMode>
);

reportWebVitals();

----------------------------------------

TITLE: Platform Independent Cache Configuration in Azure Pipelines
DESCRIPTION: YAML configuration showing how to implement platform-independent caching in Azure Pipelines using the RestoreCache task. This enables sharing cache results across different build agents.

LANGUAGE: yaml
CODE:
- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: keyfile
    targetfolder: target
    vstsFeed: $(ArtifactFeed)
    platformIndependent: true

----------------------------------------

TITLE: Program Name Input Command Implementation
DESCRIPTION: TypeScript implementation of a command that prompts user for program name using VS Code input box

LANGUAGE: typescript
CODE:
vscode.commands.registerCommand('extension.mock-debug.getProgramName', config => {
  return vscode.window.showInputBox({
    placeHolder: 'Please enter the name of a markdown file in the workspace folder',
    value: 'readme.md'
  });
});

----------------------------------------

TITLE: Installing GPG in Container Dockerfile
DESCRIPTION: Dockerfile commands to install GPG tools in the container for signing commits.

LANGUAGE: docker
CODE:
RUN apt-get update && apt-get install gnupg2 -y

----------------------------------------

TITLE: Contributing Custom View Container
DESCRIPTION: Example showing how to contribute a custom view container and views to the Activity Bar

LANGUAGE: json
CODE:
"contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "package-explorer",
                    "title": "Package Explorer",
                    "icon": "resources/package-explorer.svg"
                }
            ]
        },
        "views": {
            "package-explorer": [
                {
                    "id": "package-dependencies",
                    "name": "Dependencies"
                },
                {
                    "id": "package-outline",
                    "name": "Outline"
                }
            ]
        }
}

----------------------------------------

TITLE: Configuring Allowed Extensions in VS Code
DESCRIPTION: Example of using the extensions.allowed setting to control which extensions can be installed and enabled in VS Code.

LANGUAGE: json
CODE:
"extensions.allowed": {
    "microsoft": true,
    "github": true,
    "esbenp.prettier-vscode": true,
    "ms-azuretools.vscode-docker": false,
    "dbaeumer.vscode-eslint": ["3.0.0"],
    "figma.figma-vscode-extension": ["3.0.0", "4.2.3", "4.1.2"],
    "rust-lang.rust-analyzer": ["5.0.0@win32-x64", "5.0.0@darwin-x64"],
    "github.vscode-pull-request-github": "stable",
    "redhat": "stable"
}

----------------------------------------

TITLE: Configuring TypeScript Editor Settings
DESCRIPTION: JSON configuration to disable showing unused code in TypeScript and TypeScriptReact files within VS Code.

LANGUAGE: json
CODE:
"[typescript]": {
    "editor.showUnused":  false
},
"[typescriptreact]": {
    "editor.showUnused":  false
}

----------------------------------------

TITLE: Representing LSP Hover Type in TypeScript
DESCRIPTION: TypeScript interface definition for the LSP Hover type, showing the structure of hover information.

LANGUAGE: typescript
CODE:
export interface Hover {
    /**
     * The hover's content
     */
    contents: MarkupContent | MarkedString | MarkedString[];
    /**
     * An optional range
     */
    range?: Range;
}

----------------------------------------

TITLE: Reading Workspace Configuration in TypeScript
DESCRIPTION: Example of reading and writing configuration values for a specific resource in a multi-root workspace

LANGUAGE: typescript
CODE:
const uri = vscode.window.activeTextEditor.document.uri;
const configuration = vscode.workspace.getConfiguration('mylint', uri);
// Let value of `mylint.enable` is `false` in the settings of root folder containing `uri`.
let value = configuration.get('enable'); // value is `false`
await configuration.update('enable', !value, vscode.ConfigurationTarget.WorkspaceFolder)
value = configuration.get('enable'); // value is `true`

----------------------------------------

TITLE: HTML Template for TypeScript Web App
DESCRIPTION: HTML file that includes the compiled TypeScript code for browser execution.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
    <head><title>TypeScript Hello Web</title></head>
    <body>
        <script src="out/helloweb.js"></script>
    </body>
</html>

----------------------------------------

TITLE: Multiple Cache Support with Alias Parameter in Azure Pipelines
DESCRIPTION: YAML configuration demonstrating how to handle multiple caches in a single build job using the alias parameter. This example shows caching of NPM packages with conditional installation based on cache status.

LANGUAGE: yaml
CODE:
- task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
  inputs:
    keyfile: "yarn.lock"
    targetfolder: "node_modules"
    vstsFeed: "$(ArtifactFeed)"
    alias: "Packages"

- script: |
    yarn install
  displayName: Install Dependencies
  condition: ne(variables['CacheRestored-Packages'], 'true')

----------------------------------------

TITLE: Escaping Curly Braces in HTML Template within Markdown
DESCRIPTION: This example shows how to properly escape double opening curly braces in HTML code blocks to prevent issues with generated handlebar files in the documentation build process.

LANGUAGE: markdown
CODE:
```html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Hello, Flask</title>
    </head>
    <body>
        <strong>Hello there, \{{ name }}!</strong> It's \{{ date.strftime("%A, %d %B, %Y at %X") }}.
    </body>
</html>
```

----------------------------------------

TITLE: Full Source Tree Volume Configuration
DESCRIPTION: Configuration for mounting entire source code in a named volume, showing both devcontainer.json and Docker Compose approaches.

LANGUAGE: json
CODE:
{
    "workspaceMount": "source=your-volume-name-here,target=/workspace,type=volume",
    "workspaceFolder": "/workspace"
}

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
      - your-volume-name-here:/workspace

volumes:
  your-volume-name-here:

----------------------------------------

TITLE: Configuring Command Palette Visibility in VS Code Extensions
DESCRIPTION: Example of controlling the visibility of a command in the Command Palette based on a condition.

LANGUAGE: json
CODE:
"commands": [{
    "command": "extension.sayHello",
    "title": "Hello World"
}],
"menus": {
    "commandPalette": [{
        "command": "extension.sayHello",
        "when": "editorHasSelection"
    }]
}

----------------------------------------

TITLE: Creating File System Watcher with Custom Exclude Rules
DESCRIPTION: This code snippet shows a proposed API for creating file system watchers with full control over exclude rules in VS Code extensions.

LANGUAGE: TypeScript
CODE:
export interface FileSystemWatcherOptions {
  /**
   * An optional set of glob patterns to exclude from watching.
   * Glob patterns are always matched relative to the watched folder.
   */
  readonly excludes?: string[];
}

export function createFileSystemWatcher(pattern: RelativePattern, options?: FileSystemWatcherOptions): FileSystemWatcher;

----------------------------------------

TITLE: Configuring Keyboard Shortcuts for Editor Navigation in VS Code
DESCRIPTION: JSON configuration to set up keyboard shortcuts for navigating between editors in Visual Studio Code.

LANGUAGE: json
CODE:
{ "key": "ctrl+tab", "command": "workbench.action.openPreviousEditorFromHistory" },
{ "key": "ctrl+tab", "command": "workbench.action.quickOpenNavigateNext", "when": "inQuickOpen" }

----------------------------------------

TITLE: Optimizing Piece Table for Large Files in TypeScript
DESCRIPTION: This snippet shows how the piece table is further optimized to handle large files by using a list of buffers instead of concatenating strings.

LANGUAGE: typescript
CODE:
class PieceTable {
    buffers: string[];
    nodes: Node[];
}

class Node {
    bufferIndex: number;
    start: number; // start offset in buffers[bufferIndex]
    length: number;
    lineStarts: number[];
}

----------------------------------------

TITLE: Using a Contributed Problem Matcher in tasks.json
DESCRIPTION: This code snippet shows how to use a contributed problem matcher named $gcc in a tasks.json file to parse compiler output from a gcc command.

LANGUAGE: typescript
CODE:
{
    "version": "0.1.0",
    "command": "gcc",
    "args": ["-Wall", "helloWorld.c", "-o", "helloWorld"],
    "problemMatcher": "$gcc"
}

----------------------------------------

TITLE: Configuring Docker environment for TCP protocol
DESCRIPTION: Sets up the Docker extension to connect to a remote Docker host using TCP protocol. Includes optional certificate configuration for secure connections.

LANGUAGE: json
CODE:
"docker.environment": {
    "DOCKER_HOST": "tcp://your-remote-machine-fqdn-or-ip-here:port",
    "DOCKER_CERT_PATH": "/optional/path/to/folder/with/certificate/files",
    "DOCKER_TLS_VERIFY": "1"
}

----------------------------------------

TITLE: Checking Linux and Node.js Environment
DESCRIPTION: Commands to verify the Linux environment through uname and check Node.js version in the dev container.

LANGUAGE: bash
CODE:
uname
node -v

----------------------------------------

TITLE: Cloning VS Code Docs Repository without Binary Files - Bash
DESCRIPTION: Commands for cloning the VS Code documentation repository without large binary files on macOS/Linux systems. Uses GIT_LFS_SKIP_SMUDGE to skip initial binary downloads.

LANGUAGE: bash
CODE:
GIT_LFS_SKIP_SMUDGE=1 git clone git@github.com:microsoft/vscode-docs.git
# or
GIT_LFS_SKIP_SMUDGE=1 git clone https://github.com/microsoft/vscode-docs.git

----------------------------------------

TITLE: Using Environment File in devcontainer.json
DESCRIPTION: Configuration for loading environment variables from a file using runArgs in devcontainer.json.

LANGUAGE: json
CODE:
"runArgs": ["--env-file",".devcontainer/devcontainer.env"]

----------------------------------------

TITLE: Configuring Diff View Settings in VS Code
DESCRIPTION: Demonstrates how to configure diff view preferences in VS Code, including options for side-by-side vs. inline view and whether to ignore whitespace changes.

LANGUAGE: JSON
CODE:
{
  "diffEditor.renderSideBySide": true,
  "diffEditor.ignoreTrimWhitespace": false
}

----------------------------------------

TITLE: TypeScript Extension API - Notebook Save Event Handler
DESCRIPTION: Example showing how to register a handler for the onWillSaveNotebookDocument event to perform actions before a notebook is saved.

LANGUAGE: typescript
CODE:
vscode.workspace.onWillSaveNotebookDocument(e => {
    if (event.reason == vscode.NotebookDocumentSaveReason.Manual) {
      event.waitUntil(new Promise((resolve) => {
        const notebookEdit = new vscode.NotebookEdit(...);
        const edit = new vscode.WorkspaceEdit();
        edit.set(event.document.uri, [notebookEdit]);
        resolve([edit]);
      }));
    }
});

----------------------------------------

TITLE: Enabling Format on Type in VS Code Settings
DESCRIPTION: This JSON setting enables format on type in VS Code, which allows for convenient auto-completions and formatting while typing Ruby code, such as auto-continuing comment lines and auto-closing tokens.

LANGUAGE: json
CODE:
"editor.formatOnType": true

----------------------------------------

TITLE: Configuring Azure Pipelines for VS Code Extension Testing
DESCRIPTION: YAML configuration for setting up an Azure Pipelines CI workflow to test a VS Code extension on multiple operating systems. Includes steps for installing Node.js, setting up xvfb on Linux, and running tests.

LANGUAGE: yaml
CODE:
trigger:
  branches:
    include:
    - main
  tags:
    include:
    - v*

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

steps:

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- bash: |
    /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    echo ">>> Started xvfb"
  displayName: Start xvfb
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

- bash: |
    echo ">>> Compile vscode-test"
    yarn && yarn compile
    echo ">>> Compiled vscode-test"
    cd sample
    echo ">>> Run sample integration test"
    yarn && yarn compile && yarn test
  displayName: Run Tests
  env:
    DISPLAY: ':99.0'

----------------------------------------

TITLE: Configuring Quick Suggestions in Visual Studio Code
DESCRIPTION: This code snippet shows how to configure the editor.quickSuggestions setting to control when IntelliSense suggestions appear in comments, strings, and other parts of source files.

LANGUAGE: json
CODE:
"editor.quickSuggestions": {
    "comments": false, // <- no 24x7 IntelliSense in comments
    "strings": true, // but in strings and the other parts of source files
    "other": true,
}

----------------------------------------

TITLE: Configuring Font Features in JavaScript
DESCRIPTION: Example showing how to configure font features like ligatures and stylistic sets for specific languages.

LANGUAGE: javascript
CODE:
"editor.fontFamily": "Fira Code",
"editor.fontLigatures": true,
"[javascript]": {
  "editor.fontLigatures": "'ss02', 'ss19'",
},

----------------------------------------

TITLE: C++ Bracket Example
DESCRIPTION: Demonstrates how bracket detection needs to handle brackets in comments and strings correctly.

LANGUAGE: cpp
CODE:
{ /* } */ char str[] = "}"; }

----------------------------------------

TITLE: VS Code Command Keyboard Shortcut in Markdown
DESCRIPTION: Markdown syntax for a keyboard shortcut command reference in VS Code documentation

LANGUAGE: markdown
CODE:
`kb(workbench.action.showCommands)`

----------------------------------------

TITLE: Configuring Docker Build Cache in devcontainer.json
DESCRIPTION: Configuration for specifying cache images when building Docker containers in VS Code Dev Containers. Uses the cacheFrom property to define image identifiers for docker build --cache-from parameter.

LANGUAGE: json
CODE:
{
  ...

  "build": {
    "dockerfile": "Dockerfile",
    "cacheFrom": "<image identifier>"
  }
}

----------------------------------------

TITLE: Configuring External Terminal Shell Settings in VS Code
DESCRIPTION: JSON configuration to specify which external shell VS Code launches for 'Open in Terminal' commands. Allows setting different shells for Windows and Linux platforms.

LANGUAGE: json
CODE:
{
    "terminal.external.windowsExec": "powershell",
    "terminal.external.linuxExec": "terminator"
}

----------------------------------------

TITLE: Configuring Tab Focus Mode in VS Code Settings
DESCRIPTION: Sets the default behavior for whether the Tab key moves focus to the workbench or editor/terminal. When set to true, Tab key input is received by the workbench instead of the editor or terminal.

LANGUAGE: json
CODE:
"editor.tabFocusMode": true

----------------------------------------

TITLE: VS Code Extension Default Configuration
DESCRIPTION: JSON configuration to set default extensions for Dev Containers.

LANGUAGE: json
CODE:
"dev.containers.defaultExtensions": [
    "mutantdino.resourcemonitor"
]

----------------------------------------

TITLE: Implementing HoverProvider with Path Pattern Filter
DESCRIPTION: Shows how to register a hover provider that only works for files within test folders using a path glob-pattern document filter.

LANGUAGE: typescript
CODE:
vscode.languages.registerHoverProvider(
  { pattern: '**/test/**' },
  {
    provideHover(doc: vscode.TextDocument) {
      return new vscode.Hover('For documents inside `test`-folders only');
    }
  }
);

----------------------------------------

TITLE: Executing fold command in VS Code extension
DESCRIPTION: Example of using the new fold command API to fold 2 levels of content below the cursor position.

LANGUAGE: javascript
CODE:
commands.executeCommand('editor.fold', {levels: '2', up: false})

----------------------------------------

TITLE: Setting Top Padding for the Editor in VS Code
DESCRIPTION: Shows how to add top padding to the editor using the editor.padding.top setting.

LANGUAGE: json
CODE:
{
  "editor.padding.top": 50
}

----------------------------------------

TITLE: Inference Configuration JSON
DESCRIPTION: Configuration template for inference setup including Azure resource identifiers and endpoints.

LANGUAGE: json
CODE:
{
  "SUBSCRIPTION_ID": "<your-subscription-id>",
  "RESOURCE_GROUP_NAME": "<your-resource-group-name>",
  "STORAGE_ACCOUNT_NAME": "<your-storage-account-name>",
  "FILE_SHARE_NAME": "<your-file-share-name>",
  "ACA_APP_NAME": "<your-aca-name>",
  "ACA_APP_ENDPOINT": "<your-aca-endpoint>"
}

----------------------------------------

TITLE: Starting a Dev Container with Sample Project
DESCRIPTION: Commands to clone a Rust sample project and start a dev container using the CLI's up command. Shows the process of container image building and initialization.

LANGUAGE: bash
CODE:
git clone https://github.com/microsoft/vscode-remote-try-rust
devcontainer up --workspace-folder <path-to-vscode-remote-try-rust>

----------------------------------------

TITLE: Installing VS Code Extension using Quick Open
DESCRIPTION: This snippet demonstrates how to install a VS Code extension using the Quick Open command palette. It shows the general pattern for extension installation commands.

LANGUAGE: markdown
CODE:
>**Install:** From within Visual Studio Code, you can use Quick Open (`kb(workbench.action.quickOpen)`) and paste `ext install debugger-for-edge` then press `kbstyle(Enter)`.

----------------------------------------

TITLE: Configuring Remote SSH Server to Listen on Socket in VS Code
DESCRIPTION: This setting configures the VS Code Remote Server on Linux or macOS hosts to use Unix sockets instead of ports for improved security in multi-user environments.

LANGUAGE: json
CODE:
"remote.SSH.remoteServerListenOnSocket": true

----------------------------------------

TITLE: Wrapping Indent Configuration in VS Code Settings
DESCRIPTION: JSON configuration example for controlling line wrapping behavior in the editor through the editor.wrappingIndent setting.

LANGUAGE: json
CODE:
{
  "editor.wrappingIndent": "none|same|indent"
}

----------------------------------------

TITLE: Registering HTML Rendering Hook in TypeScript
DESCRIPTION: Register a custom HTML rendering hook for the built-in notebook renderer using the extension API.

LANGUAGE: TypeScript
CODE:
import type { RendererContext } from 'vscode-notebook-renderer';

export async function activate(ctx: RendererContext<void>) {
  const htmlRenderer = await ctx.getRenderer('vscode.builtin-renderer');
  if (!htmlRenderer) {
      throw new Error(`Could not load 'vscode.builtin-renderer'`);
  }

  htmlRenderer.experimental_registerHtmlRenderingHook({
    // Invoked after the HTML content for `outputItem` has been rendered to `element`
    postRender(outputItem: OutputItem, element: HTMLElement): HTMLElement | undefined {
      // You can either modify `element` or return a replacement element
    }
  });
}

----------------------------------------

TITLE: Using Environment File in Docker Compose
DESCRIPTION: Configuration for loading environment variables from a file in Docker Compose using the env_file property.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    env_file: devcontainer.env

----------------------------------------

TITLE: Tagging Extension as Snippet Category
DESCRIPTION: Package.json configuration to categorize the extension as a snippet extension in the VS Code marketplace.

LANGUAGE: json
CODE:
{
  "categories": ["Snippets"]
}

----------------------------------------

TITLE: Executing editor scroll command in VS Code extension
DESCRIPTION: Example of using the new editor scroll command API to scroll the editor up by one page.

LANGUAGE: javascript
CODE:
commands.executeCommand('editorScroll', {to: 'up', by: 'page', value: '1'})

----------------------------------------

TITLE: Opening Office Add-in Project in Visual Studio Code
DESCRIPTION: Command to open the current directory in Visual Studio Code, typically used to start working on an Office Add-in project.

LANGUAGE: bash
CODE:
code .

----------------------------------------

TITLE: Configuring Azure Container App Secrets JSON
DESCRIPTION: Example JSON configuration file showing the format for storing secrets and environment variables in Azure Container Apps.

LANGUAGE: json
CODE:
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "acaEnvironmentName": {
        "value": "<your-aca-env-name>"
      },
      "acaEnvironmentStorageName": {
        "value": null
      }
    }
}

----------------------------------------

TITLE: Running Commands in Dev Container
DESCRIPTION: Example of executing a command (cargo run) inside the running dev container using the exec command.

LANGUAGE: bash
CODE:
devcontainer exec --workspace-folder <path-to-vscode-remote-try-rust> cargo run

----------------------------------------

TITLE: Starting Laravel Sail environment
DESCRIPTION: This command starts the Laravel Sail environment, which includes the application, MySQL, and Redis containers. It allows developers to run the entire stack without manual setup.

LANGUAGE: bash
CODE:
./vendor/bin/sail up

----------------------------------------

TITLE: Configuring User-Provided Container Features in devcontainer.json
DESCRIPTION: Demonstrates how to include custom container features from a GitHub repository release in the devcontainer.json file. This new syntax allows for extending container configurations with user-defined features.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/vscode/devcontainers/base:bionic",
    "features": {
        "codspace/myfeatures/helloworld": {
            "greeting": "hey"
        }
    }
}

----------------------------------------

TITLE: Less Compilation Task Configuration (JSON)
DESCRIPTION: JSON configuration for a Visual Studio Code task to compile Less files to CSS using the lessc command-line tool.

LANGUAGE: json
CODE:
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Less Compile",
            "type": "shell",
            "command": "lessc styles.less styles.css",
            "group": "build"
        }
    ]
}

----------------------------------------

TITLE: InputBox Validation Message with Severity
DESCRIPTION: Example showing how to add severity info to input box validation messages using the proposed API

LANGUAGE: typescript
CODE:
{ content: 'this is an info message'; severity: InputBoxValidationSeverity.Info }

----------------------------------------

TITLE: Installing GPG as Non-Root User in Container
DESCRIPTION: Dockerfile commands to install GPG tools in the container when running as a non-root user.

LANGUAGE: docker
CODE:
RUN sudo apt-get update && sudo apt-get install gnupg2 -y

----------------------------------------

TITLE: Defining Task Schema in package.json
DESCRIPTION: JSON schema definition for Rake tasks that specifies required and optional properties for task identification in VS Code.

LANGUAGE: json
CODE:
"taskDefinitions": [
    {
        "type": "rake",
        "required": [
            "task"
        ],
        "properties": {
            "task": {
                "type": "string",
                "description": "The Rake task to customize"
            },
            "file": {
                "type": "string",
                "description": "The Rake file that provides the task. Can be omitted."
            }
        }
    }
]

----------------------------------------

TITLE: Configuring Emmet syntax profiles for languages in VS Code settings
DESCRIPTION: The emmet.syntaxProfiles setting allows associating Emmet syntax profiles with other languages. This example enables HTML abbreviations in JavaScript.

LANGUAGE: json
CODE:
{
    "emmet.syntaxProfiles": {
        "javascript": "html"
     }
}

----------------------------------------

TITLE: Opening Current Folder in VS Code via Command Line
DESCRIPTION: Command to open the current directory as a workspace in Visual Studio Code using the terminal.

LANGUAGE: bash
CODE:
code .

----------------------------------------

TITLE: Controlling Feature Installation Order
DESCRIPTION: This snippet demonstrates how to use the 'overrideFeatureInstallOrder' property in devcontainer.json to control the order of Feature installation.

LANGUAGE: json
CODE:
"features": {
      "ghcr.io/devcontainers/features/java:1",
      "ghcr.io/devcontainers/features/node:1",
  },
  "overrideFeatureInstallOrder": [
    "ghcr.io/devcontainers/features/node"
  ]

----------------------------------------

TITLE: Configuring Language-Specific Editor Settings in VS Code Extensions
DESCRIPTION: Example of contributing default language-specific editor settings for Markdown.

LANGUAGE: json
CODE:
"contributes": {
    "configurationDefaults": {
        "[markdown]": {
            "editor.wordWrap": "on",
            "editor.quickSuggestions": false
        }
    }
}

----------------------------------------

TITLE: Sample JavaScript Code Block in Markdown
DESCRIPTION: This snippet demonstrates how to format a JavaScript code block within Markdown documentation using fenced code blocks with language identifier for syntax highlighting.

LANGUAGE: markdown
CODE:
```javascript
function fancyAlert(arg) {
  if (arg) {
    $.facebox({ div: foo });
  }
}
```

----------------------------------------

TITLE: Setting Host Requirements in devcontainer.json
DESCRIPTION: Configuration for specifying minimum host machine requirements for Dev Containers, including memory, storage, and CPU specifications. Used to validate if the Docker daemon's host meets the required resources.

LANGUAGE: json
CODE:
{
  ...

  "hostRequirements": {
    "memory": "10gb",
    "storage": "20gb",
    "cpus": 3
  }
}

----------------------------------------

TITLE: Configuring TypeScript Separate Syntax Server in Visual Studio Code
DESCRIPTION: JSON configuration to enable using a separate TypeScript server for syntax-based operations in VS Code.

LANGUAGE: json
CODE:
"typescript.experimental.useSeparateSyntaxServer": true

----------------------------------------

TITLE: Docker Volume Mount Command Inside Container
DESCRIPTION: Example of mounting a file from workspace into a Docker container when using Docker-in-Docker configuration.

LANGUAGE: bash
CODE:
docker run -v /workspace/examplefile.txt:/incontainer/path debian

----------------------------------------

TITLE: Setting NODE_OPTIONS Environment Variable
DESCRIPTION: This bash script snippet demonstrates how to properly append to the NODE_OPTIONS environment variable without overwriting it, which is important for debugging to work correctly.

LANGUAGE: bash
CODE:
export NODE_OPTIONS="$NODE_OPTIONS --some-other-option=here"

----------------------------------------

TITLE: Removing a Specific Key Binding in Visual Studio Code
DESCRIPTION: This JSON snippet demonstrates how to remove a specific default key binding in Visual Studio Code by adding a rule with a '-' prefix to the command in the keybindings.json file.

LANGUAGE: json
CODE:
// In Default Keyboard Shortcuts
...
{ "key": "tab", "command": "tab", "when": ... },
{ "key": "tab", "command": "jumpToNextSnippetPlaceholder", "when": ... },
{ "key": "tab", "command": "acceptSelectedSuggestion", "when": ... },
...

// To remove the second rule, for example, add in keybindings.json:
{ "key": "tab", "command": "-jumpToNextSnippetPlaceholder" }

----------------------------------------

TITLE: Implementing Document Paste Edit Provider in TypeScript
DESCRIPTION: Shows an example of implementing a DocumentPasteEditProvider to handle copy and paste in VS Code text editors.

LANGUAGE: TypeScript
CODE:
class CopyCountPasteEditProvider implements vscode.DocumentPasteEditProvider {

  private readonly countMimeTypes = 'application/vnd.code.copydemo-copy-count';

  private count = 0;

  prepareDocumentPaste(
    _document: vscode.TextDocument,
    _range: vscode.Range,
    dataTransfer: vscode.DataTransfer,
    _token: vscode.CancellationToken
  ): void | Thenable<void> {
    dataTransfer.set(this.countMimeTypes, new vscode.DataTransferItem(this.count++));
  }

  async provideDocumentPasteEdits(
    _document: vscode.TextDocument,
    range: vscode.Range,
    dataTransfer: vscode.DataTransfer,
    token: vscode.CancellationToken
  ) {
    const countDataTransferItem = dataTransfer.get(this.countMimeTypes)
    if (!countDataTransferItem) {
      return undefined;
    }

    const textDataTransferItem = dataTransfer.get('text/plain') ?? dataTransfer.get('text');
    if (!textDataTransferItem) {
      return undefined;
    }

    const count = await countDataTransferItem.asString();
    const text = await textDataTransferItem.asString();

    // Build a snippet to insert
    const snippet = new vscode.SnippetString();
    snippet.appendText(`(copy #${count}) ${text}`);

    return new vscode.SnippetTextEdit(range, snippet);
  }
}

vscode.languages.registerDocumentPasteEditProvider({ language: 'markdown' }, new CopyCountPasteEditProvider());

----------------------------------------

TITLE: Adding Go and Docker-in-Docker Features to a Dev Container
DESCRIPTION: This snippet demonstrates how to add the Go and Docker-in-Docker Features to a dev container configuration using the 'features' property in devcontainer.json.

LANGUAGE: json
CODE:
"name": "my-project-devcontainer",
"image": "mcr.microsoft.com/devcontainers/base:ubuntu",
"features": {
    "ghcr.io/devcontainers/features/go:1": {
        "version": "1.18"
    },
    "ghcr.io/devcontainers/features/docker-in-docker:1": {
        "version": "latest",
        "moby": true
    }
}

----------------------------------------

TITLE: Compiling C to WebAssembly with WASI SDK
DESCRIPTION: Example of a simple C 'Hello World' program that can be compiled to WebAssembly using the WASI SDK. The code demonstrates how to use the stdio.h library for console output.

LANGUAGE: c
CODE:
#include <stdio.h>

int main(void)
{
    printf("Hello, World\n");
    return 0;
}

----------------------------------------

TITLE: Configuring Recent Files Quick Navigation
DESCRIPTION: JSON configuration for quickly navigating between recently opened files using Ctrl+J shortcut

LANGUAGE: json
CODE:
[
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenRecent"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenNavigateNext",
        "when": "inRecentFilesPicker"
    }
]

----------------------------------------

TITLE: Cloning VS Code Docs Repository with Git LFS - Bash
DESCRIPTION: Commands for cloning the VS Code documentation repository using Git LFS on macOS/Linux systems. Includes both SSH and HTTPS authentication methods.

LANGUAGE: bash
CODE:
git lfs install
git clone git@github.com:microsoft/vscode-docs.git
# or
git clone https://github.com/microsoft/vscode-docs.git

----------------------------------------

TITLE: Themable Color for Running Process Ports
DESCRIPTION: Defines a new themable color ID for icons representing ports associated with running processes in the Ports view.

LANGUAGE: markdown
CODE:
```
ports.iconRunningProcessforeground
```

----------------------------------------

TITLE: Configuring Machine-Specific Settings in VS Code Extension
DESCRIPTION: JSON configuration for defining a machine-specific setting in a VS Code extension's package.json file.

LANGUAGE: json
CODE:
"configuration": {
  "title": "Git",
  "properties": {
   "git.path": {
      "type": [
        "string",
        "null"
      ],
      "markdownDescription": "Path and filename of the git executable.",
      "default": null,
      "scope": "machine"
    }
  }
}

----------------------------------------

TITLE: Cloud-Init Configuration for Docker Installation on Ubuntu
DESCRIPTION: A cloud-init configuration file for automatically installing Docker on an Ubuntu VM. It sets up Docker repositories, installs Docker CE packages, and configures user groups.

LANGUAGE: yaml
CODE:
#cloud-config

apt:
  sources:
    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

packages:
  - docker-ce
  - docker-ce-cli

groups:
  - docker

system_info:
  default_user:
    groups: [docker]

----------------------------------------

TITLE: Installing dependencies for a Vue project
DESCRIPTION: These commands navigate into the project directory and install the necessary dependencies.

LANGUAGE: bash
CODE:
cd <your-project-name>
npm install

----------------------------------------

TITLE: Setting Configuration for Default Remote SSH Extensions
DESCRIPTION: Setting to specify which extensions should be automatically installed in remote environments if they are already installed locally.

LANGUAGE: plaintext
CODE:
remote.SSH.defaultExtensionsIfInstalledLocally

----------------------------------------

TITLE: Basic Rust Hello World Program
DESCRIPTION: A simple Rust program that prints 'Hello, world!' to the console.

LANGUAGE: rust
CODE:
fn main() {
    println!("Hello, world!");
}

----------------------------------------

TITLE: Creating Laravel project with Dev Containers support
DESCRIPTION: This command creates a new Laravel project with MySQL, Redis, and Dev Containers configuration. It enables easy integration with VS Code's Dev Containers extension for a streamlined development experience.

LANGUAGE: bash
CODE:
curl -s "https://laravel.build/example-app?with=mysql,redis&devcontainer" | bash

----------------------------------------

TITLE: Configuring package.json for WebAssembly Extension
DESCRIPTION: JSON configuration for a VS Code extension that runs WebAssembly code. It includes dependencies on the WASM WASI core extension and the @vscode/wasm-wasi package.

LANGUAGE: json
CODE:
{
    "name": "...",
    ...,
    "extensionDependencies": [
        "ms-vscode.wasm-wasi-core"
    ],
    "contributes": {
        "commands": [
            {
                "command": "wasm-c-example.run",
                "category": "WASM Example",
                "title": "Run C Hello World"
            }
        ]
    },
    "devDependencies": {
        "@types/vscode": "1.77.0",
    },
    "dependencies": {
        "@vscode/wasm-wasi": "0.11.0-next.0"
    }
}

----------------------------------------

TITLE: New VS Code Workspace File Format
DESCRIPTION: Example of the new workspace file format for multi-root workspaces in VS Code. The file uses a .code-workspace extension and contains an array of folder paths.

LANGUAGE: JSON
CODE:
{
  "folders": [
    {
      "path": "monaco"
    },
    {
      "path": "Projects/vscode-distro"
    },
    {
      "path": "vscode-docs"
    },
    {
      "path": "/Users/username/Development/Microsoft/vscode-extension-sdk"
    }
  ]
}

----------------------------------------

TITLE: Installing Dev Container CLI via npm
DESCRIPTION: Command to install the dev container CLI globally using npm package manager. Requires Python, Node.js (v14+), and C/C++ build tools.

LANGUAGE: bash
CODE:
npm install -g @devcontainers/cli

----------------------------------------

TITLE: Dev Container Configuration Variables
DESCRIPTION: New variables available for use in devcontainer.json configuration files. These variables provide access to workspace folder names and paths both locally and within containers.

LANGUAGE: json
CODE:
{
  "${localWorkspaceFolderBasename}": "Name of the local folder that was opened in VS Code",
  "${containerWorkspaceFolder}": "The path where the workspaces files can be found in the container",
  "${containerWorkspaceFolderBasename}": "Name of the folder where the workspace files can be found in the container"
}

----------------------------------------

TITLE: Setting Default Formatter in Visual Studio Code
DESCRIPTION: JSON configuration example for setting a default formatter for JavaScript files in VS Code.

LANGUAGE: JSON
CODE:
"[javascript]": {
  "editor.defaultFormatter": "HookyQR.beautify"
}

----------------------------------------

TITLE: Executing a Command on Container Start in devcontainer.json
DESCRIPTION: This snippet demonstrates how to use the 'postStartCommand' property in devcontainer.json to run a command (in this case, 'yarn install') every time the container starts. This is useful for keeping dependencies up to date.

LANGUAGE: json
CODE:
"postStartCommand": "yarn install"

----------------------------------------

TITLE: Configuring Workspace-Specific JSON Schema in VS Code Settings
DESCRIPTION: JSON configuration to use a local schema file for JSON validation in the workspace.

LANGUAGE: json
CODE:
"json.schemas": [
    {
        "fileMatch": [
            "**/foo.json"
        ],
        "url": "./myschema.json"
    }
]

----------------------------------------

TITLE: Configuring Dev Container Extension Opt-out in JSON
DESCRIPTION: Demonstrates how to opt out of automatically installed extensions in Dev Containers by using a minus sign prefix in the extensions configuration. This example shows how to disable the ESLint extension that might be included in a base image or feature.

LANGUAGE: json
CODE:
{
    "image": "mcr.microsoft.com/devcontainers/typescript-node:1-20-bookworm",
    "customizations": {
        "vscode": {
            "extensions": [
                "-dbaeumer.vscode-eslint"
            ]
        }
    }
}

----------------------------------------

TITLE: Setting Debug Symbol Options in VS Code Settings
DESCRIPTION: Configuration options for symbol server URLs and directories to search for .pdb files, including Microsoft and NuGet.org symbol servers.

LANGUAGE: json
CODE:
{
  "csharp.debug.symbolOptions.searchPaths": ["http://MyExampleSymbolServer", "/build/symbols"],
  "csharp.debug.symbolOptions.searchMicrosoftSymbolServer": false,
  "csharp.debug.symbolOptions.searchNuGetOrgSymbolServer": false,
  "csharp.debug.symbolOptions.cachePath": "%TEMP%\\SymbolCache"
}

----------------------------------------

TITLE: Implementing Binary Token Encoding in JavaScript
DESCRIPTION: Original token format showing how VS Code encoded token types and start indices into binary format using JavaScript numbers.

LANGUAGE: javascript
CODE:
tokens = [
                 //       type                 startIndex
     4294967296, // 0000000000000001 00000000000000000000000000000000
              8, // 0000000000000000 00000000000000000000000000001000
     8589934601, // 0000000000000010 00000000000000000000000000001001
    12884901899, // 0000000000000011 00000000000000000000000000001011
    12884901900, // 0000000000000011 00000000000000000000000000001100
             13, // 0000000000000000 00000000000000000000000000001101
    17179869198, // 0000000000000100 00000000000000000000000000001110
]

----------------------------------------

TITLE: Adding Project Reference for xUnit Testing
DESCRIPTION: Command to add a project reference to an xUnit test project, linking it to the project being tested.

LANGUAGE: bash
CODE:
dotnet add [location of your test csproj file] reference [location of the csproj file for project to be tested]

----------------------------------------

TITLE: Configuring Quick Suggestions in HTML Files
DESCRIPTION: Configuration settings to enable CSS Emmet completions in HTML style attributes by enabling quick suggestions for strings

LANGUAGE: json
CODE:
"[html]": {
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": true
    }
}

----------------------------------------

TITLE: Configuring Workspace Trust Settings in VS Code
DESCRIPTION: Example of VS Code settings to configure Workspace Trust behavior by disabling the startup prompt and never showing trust banners.

LANGUAGE: json
CODE:
"security.workspace.trust.startupPrompt": "never",
"security.workspace.trust.banner": "never"

----------------------------------------

TITLE: Video Embed HTML
DESCRIPTION: HTML iframe element for embedding a YouTube video tutorial about coding with Python and Visual Studio Code.

LANGUAGE: html
CODE:
<iframe src="https://www.youtube-nocookie.com/embed/VH_mU42lQkQ" frameborder="0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen title="Crack the code and reveal a secret with Python and Visual Studio Code"></iframe>

----------------------------------------

TITLE: Configuring IntelliSense Suggestions in Visual Studio Code
DESCRIPTION: JSON configuration examples for customizing IntelliSense suggestions in VS Code, including filtering types, setting max visible suggestions, and toggling icons.

LANGUAGE: JSON
CODE:
{
  "editor.suggest.filteredTypes": { "keyword": false },
  "editor.suggest.maxVisibleSuggestions": 8,
  "editor.suggest.showIcons": false
}

----------------------------------------

TITLE: Configuring Attached Container Settings in JSON
DESCRIPTION: JSON configuration for customizing VS Code behavior when attaching to a Docker container. It includes settings for workspace folder, default settings, extensions, port forwarding, and environment variables.

LANGUAGE: json
CODE:
{
    "workspaceFolder": "/path/to/code/in/container/here",
    "settings": {
        "terminal.integrated.defaultProfile.linux": "bash"
    },
    "extensions": [
        "dbaeumer.vscode-eslint"
    ],
    "forwardPorts": [8000],
    "remoteUser": "vscode",
    "remoteEnv": { "MY_VARIABLE": "some-value" }
}

----------------------------------------

TITLE: Setting VS Code Locale via Command Line
DESCRIPTION: Command to launch VS Code with a specific display language using the --locale parameter. The example shows how to set French as the display language.

LANGUAGE: bash
CODE:
code . --locale=fr

----------------------------------------

TITLE: Dev Container Feature Configuration with Dynamic Volume Mounting
DESCRIPTION: JSON configuration demonstrating how to use the ${devcontainerId} variable in a Dev Container feature to create unique volume mounts. This example shows configuration for a docker-in-docker feature with a container-specific volume mount.

LANGUAGE: json
CODE:
{
    "id": "docker-in-docker",
    "version": "1.0.4",
    // ...
    "mounts": [
        {
            "source": "dind-var-lib-docker-${devcontainerId}",
            "target": "/var/lib/docker",
            "type": "volume"
        }
    ]
}

----------------------------------------

TITLE: Registering an Inline Values Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to register an inline values provider for Markdown files. It uses a regular expression to locate 'variables' and instructs VS Code to find their values via the Variables view.

LANGUAGE: typescript
CODE:
vscode.languages.registerInlineValuesProvider('markdown', {
  provideInlineValues(document: TextDocument, viewport: Range, context: InlineValueContext) : ProviderResult<InlineValue[]> {
    const allValues: InlineValue[] = [];
    for (let l = 0; l <= context.stoppedLocation.end.line; l++) {
      const line = document.lineAt(l);
      var regExp = /local_[ifso]/ig;	// match variables of the form local_i, local_f, Local_i, LOCAL_S...
      do {
        var match = regExp.exec(line.text);
        if (match) {
          const varName = match[0];
          const varRange = new Range(l, match.index, l, match.index + varName.length);
          allValues.push(new InlineValueVariableLookup(varRange, varName));
        }
      } while (match);
    }
    return allValues;
  }
});

----------------------------------------

TITLE: VS Code Launch Configuration for Full-Stack Debugging
DESCRIPTION: Launch configuration file for debugging both Node.js backend and Chrome frontend

LANGUAGE: json
CODE:
{
    "version": "0.2.0",
    "compounds": [
        {
            "name": "Full-Stack",
            "configurations": ["Node", "Chrome"]
        }
    ],
    "configurations": [
        {
            "name": "Chrome",
            "type": "chrome",
            "request": "launch",
            "url": "http://localhost:8080",
            "port": 9222,
            "userDataDir": "${workspaceFolder}/.vscode/chrome",
            "webRoot": "${workspaceFolder}/public"
        },
        {
            "name": "Node",
            "type": "node2",
            "request": "launch",
            "program": "${workspaceFolder}/server.js",
            "cwd": "${workspaceFolder}"
        }
    ]
}

----------------------------------------

TITLE: Note About Authentication for Model Access
DESCRIPTION: Important note about authentication requirements for accessing models, specifically mentioning the need for provider API keys and GitHub personal access tokens (PATs).

LANGUAGE: text
CODE:
To authenticate with the model, you usually need an API key from the provider. To access models hosted by GitHub, generate a personal access token (PAT) in your GitHub settings.

----------------------------------------

TITLE: Snippet Placeholder Transformation Example
DESCRIPTION: Example showing how to use snippet placeholder transformations to convert text between languages

LANGUAGE: json
CODE:
"HelloWorld": {
  "prefix": "say_hello",
  "body": "${1} ${2} -> ${1/Hello/Hallo/} ${2/World/Welt/}"
}

----------------------------------------

TITLE: Dev Container Configuration for Extensions
DESCRIPTION: JSON configuration file that specifies the workspace path and extensions to be installed in the dev container.

LANGUAGE: json
CODE:
{
    "workspace": "/usr/src/app",
    "extensions": [
        "eamodio.gitlens"
    ]
}

----------------------------------------

TITLE: Keyboard Shortcuts for Copilot Edits
DESCRIPTION: Default keyboard shortcuts configuration for common Copilot Edits operations in VS Code.

LANGUAGE: Markdown
CODE:
- workbench.action.chat.openEditSession
- workbench.action.chat.sendToChatEditing
- workbench.action.chat.attachContext
- chatEditing.saveAllFiles
- chatEditing.acceptAllFiles
- chatEditing.discardAllFiles
- chatEditor.action.navigatePrevious
- chatEditor.action.navigateNext

----------------------------------------

TITLE: Handling Extension Changes in Visual Studio Code
DESCRIPTION: Shows how to use the new extensions.onDidChange event to listen for changes in the extensions.all array, which occurs when extensions are installed, uninstalled, enabled, or disabled.

LANGUAGE: typescript
CODE:
/**
 * An event which fires when `extensions.all` changes. This can happen when extensions are
 * installed, uninstalled, enabled or disabled.
 */
export const onDidChange: Event<void>;

----------------------------------------

TITLE: Configuring Color Theme in package.json
DESCRIPTION: Contributes a color theme to VS Code, defining workbench colors and styles for syntax tokens in the editor.

LANGUAGE: json
CODE:
{
  "contributes": {
    "themes": [
      {
        "label": "Monokai",
        "uiTheme": "vs-dark",
        "path": "./themes/monokai-color-theme.json"
      }
    ]
  }
}

----------------------------------------

TITLE: Open in Dev Container Badge Markdown
DESCRIPTION: Markdown code for adding an 'Open in Dev Container' badge to a repository README.

LANGUAGE: markdown
CODE:
[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)

----------------------------------------

TITLE: Opening Remote Workspaces via Protocol Links in VS Code
DESCRIPTION: Demonstrates the syntax for opening remote workspaces using protocol links in VS Code. This feature allows users to directly open remote workspaces through specially formatted URLs.

LANGUAGE: bash
CODE:
vscode://vscode-remote/<remoteName>+<resolverArguments>/<path>
vscode-insiders://vscode-remote/<remoteName>+<resolverArguments>/<path>

----------------------------------------

TITLE: Declaring Custom Semantic Token Types and Modifiers in package.json
DESCRIPTION: This JSON snippet shows how to declare custom semantic token types and modifiers in an extension's package.json. It defines a new 'templateType' and 'native' modifier.

LANGUAGE: json
CODE:
{
  "contributes": {
    "semanticTokenTypes": [{
      "id": "templateType",
      "superType": "type",
      "description": "A template type."
    }],
    "semanticTokenModifiers": [{
      "id": "native",
      "description": "Annotates a symbol that is implemented natively"
    }]
  }
}

----------------------------------------

TITLE: Configuring MongoDB Connection in Node.js
DESCRIPTION: Code showing how to set up MongoDB connection string with environment variable fallback

LANGUAGE: javascript
CODE:
mongoose.connect(process.env.MONGO_URL || database.localUrl);

----------------------------------------

TITLE: Registering Completion Item Provider for PHP (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to register a completion item provider for the PHP language in a VS Code extension. It uses the language identifier 'php' and specifies trigger characters.

LANGUAGE: typescript
CODE:
languages.registerCompletionItemProvider('php', new PHPCompletionItemProvider(), '.', '$')

----------------------------------------

TITLE: Defining an Extension Pack in package.json
DESCRIPTION: This JSON snippet shows how to define an Extension Pack in a package.json file, bundling several debugger extensions together.

LANGUAGE: json
CODE:
"extensionPack": [
    "andreweinand.mock-debug",
    "ms-vscode.mono-debug",
    "ms-vscode.cpptools",
    "ms-dotnettools.csharp",
    "vscjava.vscode-java-debug"
]

----------------------------------------

TITLE: Installing Flask on Ubuntu
DESCRIPTION: Command to install the Flask web framework using apt package manager on Ubuntu Linux.

LANGUAGE: bash
CODE:
sudo apt install python3-flask

----------------------------------------

TITLE: Docker Compose Extension Example
DESCRIPTION: An example of extending a Docker Compose configuration for development purposes.

LANGUAGE: yaml
CODE:
version: '3'
services:
  your-service-name-here:
    volumes:
      - .:/workspace:cached
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    command: /bin/sh -c "while sleep 1000; do :; done"

----------------------------------------

TITLE: Creating snippet with comment variables in JSON
DESCRIPTION: Example showing how to define a snippet that uses the new BLOCK_COMMENT_START and BLOCK_COMMENT_END variables to insert language-appropriate comments

LANGUAGE: json
CODE:
{
    "hello": {
        "scope": "javascript,html",
        "prefix": "hello", 
        "body": "$BLOCK_COMMENT_START Hello World $BLOCK_COMMENT_END"
    }
}

----------------------------------------

TITLE: Contributing Custom Icons
DESCRIPTION: Example of contributing custom icons through extension's package.json

LANGUAGE: json
CODE:
"contributes": {
  "icons": {
        "distro-ubuntu": {
            "description": "Ubuntu icon",
            "default": {
                "fontPath": "./distroicons.woff",
                "fontCharacter": "\\E001"
            }
        },
        "distro-fedora": {
            "description": "Ubuntu icon",
            "default": {
                "fontPath": "./distroicons.woff",
                "fontCharacter": "\\E002"
            }
        }
    }
}

----------------------------------------

TITLE: Basic Dockerfile for Dev Container
DESCRIPTION: A simple Dockerfile that installs Git on top of a Node.js base image.

LANGUAGE: docker
CODE:
FROM mcr.microsoft.com/devcontainers/javascript-node:0-18
RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \
    && apt-get -y install git

----------------------------------------

TITLE: Opening Remote Folders with Options in VS Code
DESCRIPTION: Shows the TypeScript interface and function signature for the 'remote-containers.openFolder' command, which supports URI and options parameters for opening folders in containers.

LANGUAGE: typescript
CODE:
interface IOpenFolderOptions {
	forceNewWindow?: boolean;
	forceReuseWindow?: boolean;
	noRecentEntry?: boolean;
}

async function openFolder(uri?: vscode.Uri, options?: IOpenFolderOptions);

----------------------------------------

TITLE: Configuring c_cpp_properties.json for MSVC
DESCRIPTION: JSON configuration for c_cpp_properties.json to set up IntelliSense and other C++ extension features for Microsoft Visual C++ in Visual Studio Code.

LANGUAGE: json
CODE:
{
"configurations": [
    {
        "name": "Win32",
        "includePath": [
            "${workspaceFolder}/**"
        ],
        "defines": [
            "_DEBUG",
            "UNICODE",
            "_UNICODE"
        ],
        "windowsSdkVersion": "10.0.18362.0",
        "compilerPath": "C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools/VC/Tools/MSVC/14.24.28314/bin/Hostx64/x64/cl.exe",
        "cStandard": "c11",
        "cppStandard": "c++17",
        "intelliSenseMode": "msvc-x64"
    }
],
"version": 4
}

----------------------------------------

TITLE: Configuring launch.json for Ruby Debugging in VS Code
DESCRIPTION: This JSON snippet configures the launch.json file for debugging Ruby code in Visual Studio Code. It sets up a Ruby debug configuration with the program path and debugging options.

LANGUAGE: json
CODE:
{
  "version": "0.2.0",
  "configurations": [
      {
          "name": "Ruby Debug",
          "type": "Ruby",
          "request": "launch",
          "program": "${workspaceFolder}/hello_world.rb",
          "stopOnEntry": false
      }
  ]
}

----------------------------------------

TITLE: Configuring Folder-specific PHP Association in VS Code
DESCRIPTION: JSON configuration that maps all files within a specific folder to PHP language support using glob patterns.

LANGUAGE: json
CODE:
"files.associations": {
    "**/somefolder/*.*": "php"
}

----------------------------------------

TITLE: Configuring TypeScript Plugins in VS Code settings
DESCRIPTION: Example of how to configure TypeScript plugins in VS Code settings.json file. This allows extending TypeScript's functionality within VS Code.

LANGUAGE: JSON
CODE:
{
  "typescript.tsserver.pluginPaths": ["path/to/plugin"],
  "javascript.implicitProjectConfig.experimentalDecorators": true
}

----------------------------------------

TITLE: LSIF Graph Data for Folding Range Example
DESCRIPTION: TypeScript representation of LSIF graph data for a folding range example, showing vertices and edges.

LANGUAGE: typescript
CODE:
// a vertex representing the document
{ id: 1, type: "vertex", label: "document", uri: "file:///Users/username/sample.ts", languageId: "typescript" }
// a vertex representing the folding result
{ id: 2, type: "vertex", label: "foldingRangeResult", result: [ { startLine: 0, startCharacter: 20, endLine: 2, endCharacter: 1 } ] }
// an edge connecting the folding result to the document.
{ id: 3, type: "edge", label: "textDocument/foldingRange", outV: 1, inV: 2 }

----------------------------------------

TITLE: Checking Docker Version with Bash
DESCRIPTION: Command to verify Docker installation and check its version.

LANGUAGE: bash
CODE:
docker --version
# Docker version 18.09.2, build 6247962

----------------------------------------

TITLE: Configuring Indentation-Based Folding in HTML
DESCRIPTION: Configuration example showing how to switch back to indentation-based folding for HTML files instead of the new syntax-aware folding.

LANGUAGE: json
CODE:
"[html]": {
  "editor.foldingStrategy": "indentation"
}

----------------------------------------

TITLE: Combined Extension Contributions in package.json
DESCRIPTION: An example of a package.json file that combines multiple extension contributions, including language support, grammar, and snippets for LaTeX.

LANGUAGE: json
CODE:
{
  "name": "language-latex",
  "description": "LaTex Language Support",
  "version": "0.0.1",
  "publisher": "someone",
  "engines": {
    "vscode": "0.10.x"
  },
  "categories": ["Programming Languages", "Snippets"],
  "contributes": {
    "languages": [
      {
        "id": "latex",
        "aliases": ["LaTeX", "latex"],
        "extensions": [".tex"]
      }
    ],
    "grammars": [
      {
        "language": "latex",
        "scopeName": "text.tex.latex",
        "path": "./syntaxes/latex.tmLanguage.json"
      }
    ],
    "snippets": [
      {
        "language": "latex",
        "path": "./snippets/snippets.json"
      }
    ]
  }
}

----------------------------------------

TITLE: Building and Running Docker Container
DESCRIPTION: Command to build and run the Docker container using docker-compose, which sets up the Node.js application environment.

LANGUAGE: bash
CODE:
docker-compose up

----------------------------------------

TITLE: Configuring NPM Scripts for webpack VS Code Extension Bundling
DESCRIPTION: JSON configuration for package.json scripts to run webpack for VS Code extension development and packaging.

LANGUAGE: json
CODE:
"scripts": {
    "compile": "webpack --mode development",
    "watch": "webpack --mode development --watch",
    "vscode:prepublish": "npm run package",
    "package": "webpack --mode production --devtool hidden-source-map",
}

----------------------------------------

TITLE: Installing R Language Server Package in R
DESCRIPTION: This code snippet demonstrates how to install the 'languageserver' package in R, which is required for the R extension in Visual Studio Code to provide language server functionality.

LANGUAGE: r
CODE:
install.packages("languageserver")

----------------------------------------

TITLE: Implementing SignatureHelpProvider in TypeScript
DESCRIPTION: This TypeScript snippet shows how to implement a SignatureHelpProvider that uses the new activeSignatureHelp field in SignatureHelpContext to track previously active signatures.

LANGUAGE: TypeScript
CODE:
import * as vscode from 'vscode';

class MySignatureHelpProvider implements vscode.SignatureHelpProvider {
    provideSignatureHelp(
        document: vscode.TextDocument,
        position: vscode.Position,
        token: vscode.CancellationToken,
        context: vscode.SignatureHelpContext
    ): vscode.ProviderResult<vscode.SignatureHelp> {
        // The active signature help when this provider was triggered or undefined if
        // no signature help was active.
        console.log(context.activeSignatureHelp);

        ...
    }
}

----------------------------------------

TITLE: Running NPM Debug Script with Auto-Attach in VS Code
DESCRIPTION: This snippet shows how to use auto-attach with npm scripts. If the 'debug' script in package.json includes the --inspect flag, VS Code will automatically attach the debugger when the script is run.

LANGUAGE: shell
CODE:
npm run debug

----------------------------------------

TITLE: Selective Binary File Checkout with Git LFS
DESCRIPTION: Commands for selectively downloading binary files after a lightweight clone using Git LFS pull commands with different path patterns.

LANGUAGE: bash
CODE:
git lfs pull -I "docs/nodejs"
git lfs pull -I "release-notes/images/1_4*/*"
git lfs pull -I "docs,api"

----------------------------------------

TITLE: Configuring Theme-Specific Color Customizations
DESCRIPTION: Example showing how to customize colors for a specific theme in VS Code settings. This allows fine-tuning theme colors without affecting other themes.

LANGUAGE: json
CODE:
{
    "editor.tokenColorCustomizations": {
        "[Monokai]": {
            "comments": "#229977"
        }
    },
    "workbench.colorCustomizations": {
        "[Monokai]": {
            "sideBar.background": "#347890"
        }
    }
}

----------------------------------------

TITLE: Configuring package.json for Web Extensions
DESCRIPTION: Example package.json configuration for a web extension showing required fields like browser entry point and build scripts.

LANGUAGE: json
CODE:
{
  "name": "helloworld-web-sample",
  "displayName": "helloworld-web-sample",
  "description": "HelloWorld example for VS Code in the browser",
  "version": "0.0.1",
  "publisher": "vscode-samples",
  "repository": "https://github.com/microsoft/vscode-extension-samples/helloworld-web-sample",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": ["Other"],
  "activationEvents": [],
  "browser": "./dist/web/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "helloworld-web-sample.helloWorld",
        "title": "Hello World"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package-web",
    "compile-web": "webpack",
    "watch-web": "webpack --watch",
    "package-web": "webpack --mode production --devtool hidden-source-map"
  },
  "devDependencies": {
    "@types/vscode": "^1.59.0",
    "ts-loader": "^9.2.2",
    "webpack": "^5.38.1",
    "webpack-cli": "^4.7.0",
    "@types/webpack-env": "^1.16.0",
    "process": "^0.11.10"
  }
}

----------------------------------------

TITLE: Updating Ubuntu Package Lists in Bash
DESCRIPTION: Command to update the package lists on Ubuntu before installing new packages.

LANGUAGE: bash
CODE:
sudo apt-get update

----------------------------------------

TITLE: Referencing Visual Studio Code build YAML configuration
DESCRIPTION: This snippet shows how to reference the YAML build definition file for Visual Studio Code's product build in Azure Pipelines. It demonstrates the use of YAML for CI configuration, which is kept close to the project's source code.

LANGUAGE: yaml
CODE:
build/tfs/product-build.yml

----------------------------------------

TITLE: Configuring Ruby Version Manager in VS Code Settings
DESCRIPTION: This JSON snippet shows how to set the Ruby version manager configuration in VS Code user settings. It specifies 'rbenv' as the identifier for the Ruby version manager.

LANGUAGE: json
CODE:
{
  "rubyLsp.rubyVersionManager": {
    "identifier": "rbenv"
  }
}

----------------------------------------

TITLE: Creating Terminal with Custom Working Directory in VS Code
DESCRIPTION: Example keyboard shortcut configuration to create a new terminal with a custom working directory using the fileDirname variable.

LANGUAGE: json
CODE:
{
  "key": "cmd+shift+h",
  "command": "workbench.action.terminal.newWithCwd",
  "args": {
    "cwd": "${fileDirname}"
  }
}

----------------------------------------

TITLE: Installing MongoDB Extension for VS Code
DESCRIPTION: Commands to install and package the MongoDB extension for Visual Studio Code. Includes global installation of vsce, packaging the extension, and installing it in VS Code.

LANGUAGE: javascript
CODE:
npm install -g vsce
vsce package
code --install-extension vscode-mongodb-0.0.1.vsix

----------------------------------------

TITLE: Configuring Import Sorting with Ruff in VS Code
DESCRIPTION: JSON configuration to enable Ruff as the import sorter for Python files, applying organization on save.

LANGUAGE: json
CODE:
{
  "[python]": {
    "editor.codeActionsOnSave": {
      "source.organizeImports.ruff": "explicit"
    }
  }
}

----------------------------------------

TITLE: TypeScript JSConfig Example
DESCRIPTION: Example JSConfig.json file enabling JavaScript type checking

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "checkJs": true
    },
    "exclude": [
        "node_modules"
    ]
}

----------------------------------------

TITLE: Configuring GitHub Actions for VS Code Extension Testing
DESCRIPTION: YAML configuration for setting up a GitHub Actions workflow to test a VS Code extension on multiple operating systems. Includes steps for checking out code, installing Node.js, and running tests with xvfb on Linux.

LANGUAGE: yaml
CODE:
on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - run: npm install
    - run: xvfb-run -a npm test
      if: runner.os == 'Linux'
    - run: npm test
      if: runner.os != 'Linux'

----------------------------------------

TITLE: Docker Run Command with KUBECONFIG Mount in Makefile
DESCRIPTION: Makefile command that demonstrates mounting KUBECONFIG file from dev container into a new Docker container with path translation.

LANGUAGE: make
CODE:
docker run -p 8089:8089 -p 9090:9090 -v $(shell echo ${KUBECONFIG} | sed s#/workspace#${HOST_PROJECT_PATH}#):/kubeconfig.json -e KUBECONFIG=/kubeconfig.json ${IMG} -f behaviours/run_submit_locust.py

----------------------------------------

TITLE: ImageBitmap API Reference
DESCRIPTION: JavaScript ImageBitmap interface used for implementing the texture atlas optimization, storing pre-rendered ASCII characters for improved rendering performance.

LANGUAGE: javascript
CODE:
ImageBitmap

----------------------------------------

TITLE: Configuring Problem Matcher in package.json
DESCRIPTION: Contributes problem matcher patterns for use in both the output panel runner and terminal runner.

LANGUAGE: json
CODE:
{
  "contributes": {
    "problemMatchers": [
      {
        "name": "gcc",
        "owner": "cpp",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Compiled JavaScript from TypeScript Hello World
DESCRIPTION: This snippet shows the JavaScript code generated from the TypeScript Hello World program after compilation. Note the removal of type information and the use of 'var' instead of 'let'.

LANGUAGE: javascript
CODE:
var message = "Hello World";
console.log(message);

----------------------------------------

TITLE: Configuring Task Quick Pick Options
DESCRIPTION: JSON configuration for customizing task quick pick behavior including history and details.

LANGUAGE: json
CODE:
{
  "task.quickOpen.skip": true,
  "task.quickOpen.history": 0,
  "task.quickOpen.detail": false
}

----------------------------------------

TITLE: Illustrating Potential Issues with Name Mangling
DESCRIPTION: This example demonstrates how name mangling can potentially break code that relies on dynamic property lookups.

LANGUAGE: typescript
CODE:
const obj = { longPropertyName: 123 };

function lookup(prop) { return obj[prop]; }

console.log(lookup('longPropertyName'));

LANGUAGE: typescript
CODE:
const obj = { x: 123 }; // Here `longPropertyName` gets rewritten to `x`

function lookup(prop) { return obj[prop]; }

console.log(lookup('longPropertyName')); // But this reference doesn't and now the lookup is broken

----------------------------------------

TITLE: Implementing Request Forwarding for Completion in Language Client
DESCRIPTION: This TypeScript code demonstrates how to implement request forwarding for completion requests in the language client, hijacking requests and forwarding them to the appropriate language server.

LANGUAGE: typescript
CODE:
let clientOptions: LanguageClientOptions = {
  documentSelector: [{ scheme: 'file', language: 'html' }],
  middleware: {
    provideCompletionItem: async (document, position, context, token, next) => {
      // If not in `<style>`, do not perform request forwarding
      if (!isInsideStyleRegion(htmlLanguageService, document.getText(), document.offsetAt(position))) {
        return await next(document, position, context, token);
      }

      const originalUri = document.uri.toString(true);
      virtualDocumentContents.set(originalUri, getCSSVirtualContent(htmlLanguageService, document.getText()));

      const vdocUriString = `embedded-content://css/${encodeURIComponent(
        originalUri
      )}.css`;
      const vdocUri = Uri.parse(vdocUriString);
      return await commands.executeCommand<CompletionList>(
        'vscode.executeCompletionItemProvider',
        vdocUri,
        position,
        context.triggerCharacter
      );
    }
  }
}

----------------------------------------

TITLE: Executing reveal line command in VS Code extension
DESCRIPTION: Example of using the new reveal line command API to reveal line 10 at the top of the editor.

LANGUAGE: javascript
CODE:
commands.executeCommand('revealLine', {lineNumber: '10', at: 'top'})

----------------------------------------

TITLE: Implementing Git Stage Change Command in TypeScript
DESCRIPTION: Shows the method signature for a Git stage change command used in the Quick Diff inline editor.

LANGUAGE: typescript
CODE:
async stageChange(uri: Uri, changes: LineChange[], index: number): Promise<void>;

----------------------------------------

TITLE: Suppressing apt-key Warnings Using Environment Variables
DESCRIPTION: Sets an environment variable to suppress apt-key warnings about dangerous usage in Dockerfile.

LANGUAGE: docker
CODE:
# Suppress an apt-key warning about standard out not being a terminal. Use in this script is safe.
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn

----------------------------------------

TITLE: Configuring CodeMetrics Extension with Emoji Descriptions in JSON
DESCRIPTION: This JSON snippet shows custom configuration for the CodeMetrics extension, using emoji to represent different complexity levels. It demonstrates how to customize the appearance of complexity metrics in VS Code.

LANGUAGE: json
CODE:
{
"codemetrics.basics.ComplexityLevelExtremeDescription": "😱",
"codemetrics.basics.ComplexityLevelHighDescription": "😳",
"codemetrics.basics.ComplexityLevelLowDescription": "🤓",
"codemetrics.basics.ComplexityLevelNormalDescription": "🤔",
"codemetrics.basics.ComplexityTemplate": "Complexity is {0} {1}"
}

----------------------------------------

TITLE: Using ThemeColor API in TypeScript
DESCRIPTION: Example of how extensions can consume new and existing theme colors using the ThemeColor API.

LANGUAGE: typescript
CODE:
const errorColor = new vscode.ThemeColor("superstatus.error");

----------------------------------------

TITLE: Activating Python REPL in Terminal (Windows)
DESCRIPTION: Command to activate the Python REPL in a Windows terminal.

LANGUAGE: shell
CODE:
python

----------------------------------------

TITLE: Custom Editor WebView Provider Registration
DESCRIPTION: TypeScript code showing how to register a custom editor webview provider with options.

LANGUAGE: typescript
CODE:
export function registerWebviewEditorProvider(
  viewType: string,
  provider: WebviewEditorProvider,
  options?: WebviewPanelOptions
): Disposable;

----------------------------------------

TITLE: Implementing Change Events for Virtual Documents in TypeScript
DESCRIPTION: This code shows how to implement the onDidChange event for a TextDocumentContentProvider. It uses vscode.EventEmitter to notify VS Code when a virtual document's content has changed.

LANGUAGE: typescript
CODE:
const myProvider = new class implements vscode.TextDocumentContentProvider {
  // emitter and its event
  onDidChangeEmitter = new vscode.EventEmitter<vscode.Uri>();
  onDidChange = this.onDidChangeEmitter.event;

  //...
};

----------------------------------------

TITLE: Registering Terminal Profile Provider in TypeScript
DESCRIPTION: Example of how to register a terminal profile provider to handle the creation of a custom terminal profile.

LANGUAGE: typescript
CODE:
vscode.window.registerTerminalProfileProvider('my-ext.terminal-profile', {
  provideTerminalProfile(token: vscode.CancellationToken): vscode.ProviderResult<vscode.TerminalOptions | vscode.ExtensionTerminalOptions> {
    return { name: 'Profile from extension', shellPath: 'bash' };
  }
});

----------------------------------------

TITLE: Defining Custom Snippets in Visual Studio Code
DESCRIPTION: Example of creating a custom Node.js require statement snippet using the user-defined snippets feature.

LANGUAGE: json
CODE:
{
	"Node Require" : {
		"prefix": "require",
		"body": [
			"var ${module} = require('${module}');",
			"$0"
		],
		"description": "Node require statement"
	}
}

----------------------------------------

TITLE: Updating Dev Container Configuration Structure in VSCode (JSONC)
DESCRIPTION: This snippet demonstrates the new structure for VS Code-specific properties in devcontainer.json. Settings and extensions are now nested under a 'vscode' property within 'customizations', preparing for an open specification.

LANGUAGE: jsonc
CODE:
{
    "customizations": {
        "vscode": {
            "settings": { /*...*/ },
            "extensions": [ /*...*/ ]
        }
    }
}

----------------------------------------

TITLE: Handling apt-key Output Warnings in Docker
DESCRIPTION: Demonstrates how to suppress or handle apt-key output warnings when adding package keys in a Dockerfile.

LANGUAGE: docker
CODE:
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | (OUT=$(apt-key add - 2>&1) || echo $OUT)

----------------------------------------

TITLE: Debug Session Activation Configuration
DESCRIPTION: Configuration for activating an extension before a debug session starts.

LANGUAGE: json
CODE:
"activationEvents": [
    "onDebug"
]

----------------------------------------

TITLE: Using Command Input Variables in Debug Configuration (JSON)
DESCRIPTION: This example illustrates how to use a command input variable in a debug configuration. It allows the user to pick a test case from a list generated by an extension command.

LANGUAGE: json
CODE:
{
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Run specific test",
            "program": "${workspaceFolder}/${input:pickTest}"
        }
    ],
    "inputs": [
        {
            "id": "pickTest",
            "type": "command",
            "command": "extension.mochaSupport.testPicker",
            "args": {
                "testFolder": "/out/tests",
            }
        }
    ]
}

----------------------------------------

TITLE: Configuring Custom Rulers with Colors in VS Code
DESCRIPTION: Demonstrates how to configure multiple rulers with custom colors using the editor.rulers setting.

LANGUAGE: json
CODE:
{
  "editor.rulers": [
    { "column": 80, "color": "#ff00ff" },
    { "column": 90, "color": "#ff0000" }
  ]
}

----------------------------------------

TITLE: Registering Command for Virtual Document Manipulation in TypeScript
DESCRIPTION: This snippet registers a command that reverses the text in a virtual document. It checks if the active document is of the correct scheme, reverses its content, and opens a new document with the reversed text.

LANGUAGE: typescript
CODE:
// register a command that updates the current cowsay
subscriptions.push(
  vscode.commands.registerCommand('cowsay.backwards', async () => {
    if (!vscode.window.activeTextEditor) {
      return; // no editor
    }
    let { document } = vscode.window.activeTextEditor;
    if (document.uri.scheme !== myScheme) {
      return; // not my scheme
    }
    // get path-components, reverse it, and create a new uri
    let say = document.uri.path;
    let newSay = say
      .split('')
      .reverse()
      .join('');
    let newUri = document.uri.with({ path: newSay });
    await vscode.window.showTextDocument(newUri, { preview: false });
  })
);

----------------------------------------

TITLE: Basic When Clause Example in JSON
DESCRIPTION: Example of a when clause used in a keybinding definition to control when the Start Debugging command is enabled.

LANGUAGE: json
CODE:
{ "key": "f5",  "command": "workbench.action.debug.start", 
                   "when": "debuggersAvailable && !inDebugMode" }

----------------------------------------

TITLE: Configuring File Associations for PHP in VS Code
DESCRIPTION: Using the files.associations setting to associate additional file extensions with the PHP language in VS Code.

LANGUAGE: json
CODE:
"files.associations": {
    "*.php4": "php",
    "*.php5": "php"
}

----------------------------------------

TITLE: Installing Built-in Extension in VS Code Server
DESCRIPTION: This command line argument allows installation of an extension as a built-in extension on the VS Code server. Built-in extensions are shown in a dedicated view, cannot be uninstalled, and can only be enabled or disabled.

LANGUAGE: shellscript
CODE:
--install-builtin-extension

----------------------------------------

TITLE: Setting Remote SSH Connect Timeout
DESCRIPTION: Configures the connection timeout for Remote SSH connections. The ConnectTimeout option is preferred per host, followed by the remote.SSH.connectTimeout setting. A value of 0 indicates a maximum timeout interval.

LANGUAGE: plaintext
CODE:
ConnectTimeout 0

----------------------------------------

TITLE: Embedded Language Injection Grammar Configuration
DESCRIPTION: Configuration for an injection grammar that embeds SQL in JavaScript strings, including language mapping and token type overrides.

LANGUAGE: json
CODE:
{
  "contributes": {
    "grammars": [
      {
        "path": "./syntaxes/injection.json",
        "scopeName": "sql-string.injection",
        "injectTo": ["source.js"],
        "embeddedLanguages": {
          "my.sql.template.string": "sql"
        },
        "tokenTypes": {
          "my.sql.template.string": "other"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Command-based Extension Activation
DESCRIPTION: Example of activating an extension when a specific command is invoked in VS Code.

LANGUAGE: json
CODE:
"activationEvents": [
    "onCommand:extension.sayHello"
]

----------------------------------------

TITLE: Configuring TypeScript Semantic Token Colors
DESCRIPTION: Example showing how to customize semantic token colors and styles in VS Code user settings

LANGUAGE: typescript
CODE:
"editor.semanticTokenColorCustomizations": {
    "enabled": true,
    "rules": {
        "property.readonly": "#35166d",
        "*.declaration": { "bold": true }
    }
}

----------------------------------------

TITLE: Contributing Views to Custom View Container
DESCRIPTION: Shows how to contribute a view to a custom View Container in the extension's package.json file.

LANGUAGE: json
CODE:
"contributes": {
  "views": {
    "package-explorer": [
      {
        "id": "nodeDependencies",
        "name": "Node Dependencies",
        "icon": "media/dep.svg",
        "contextualTitle": "Package Explorer"
      }
    ]
  }
}

----------------------------------------

TITLE: Conditionally Showing a Command based on Resource Scheme
DESCRIPTION: This JSON snippet shows how to use a when clause to only display a command in the editor context menu for local file resources.

LANGUAGE: json
CODE:
{
    "menus": {
      "editor/context": [
        {
          "command": "npm.runSelectedScript",
          "when": "resourceFilename == 'package.json' && resourceScheme == file"
        }
      ]
    }
}

----------------------------------------

TITLE: Configuring TextMate Grammar Injections in Visual Studio Code Extensions
DESCRIPTION: This JSON snippet shows how to configure TextMate grammar injections in a Visual Studio Code extension's package.json file to add new syntax highlighting rules to existing grammars.

LANGUAGE: json
CODE:
"grammars": [
  {
    "scopeName": "source.todo",
    "path": "./syntaxes/todo.tmLanguage.json",
    "injectTo": [  "source.js", "source.ts" ]
  }
]

----------------------------------------

TITLE: Configuring Environment Variable Probing in devcontainer.json
DESCRIPTION: Demonstrates the new 'userEnvProbe' property in devcontainer.json for specifying how environment variables should be extracted from container user's startup scripts. It supports three options: 'none', 'loginInteractiveShell', and 'interactiveShell'.

LANGUAGE: json
CODE:
{
  "userEnvProbe": "loginInteractiveShell"
}

----------------------------------------

TITLE: Disabling SSH Exec Server Mode in VS Code Settings
DESCRIPTION: This setting disables the new exec server mode for the Remote - SSH extension in VS Code. It can be used if users experience issues with the new default mode.

LANGUAGE: json
CODE:
"remote.ssh.useExecServer": false

----------------------------------------

TITLE: Installing Mock Debug Dependencies
DESCRIPTION: Git clone and package installation commands for setting up the Mock Debug development environment.

LANGUAGE: bash
CODE:
git clone https://github.com/microsoft/vscode-mock-debug.git
cd vscode-mock-debug
yarn

----------------------------------------

TITLE: Starting SSH Agent on Linux
DESCRIPTION: Command to start the SSH agent in the background on Linux systems.

LANGUAGE: bash
CODE:
eval "$(ssh-agent -s)"

----------------------------------------

TITLE: Verifying Node.js and npm Installation
DESCRIPTION: Commands to verify the successful installation of Node.js and npm by checking their versions.

LANGUAGE: bash
CODE:
node --version
npm --version

----------------------------------------

TITLE: Format modified lines in JSON
DESCRIPTION: JSON settings for configuring whitespace rendering to only show trailing whitespace

LANGUAGE: json
CODE:
"editor.renderWhitespace": "trailing"

----------------------------------------

TITLE: Webpack Configuration for Web Extensions
DESCRIPTION: Webpack configuration file that bundles extension source code into a single JavaScript file for the web extension host.

LANGUAGE: javascript
CODE:
const path = require('path');
const webpack = require('webpack');

/** @typedef {import('webpack').Configuration} WebpackConfig **/
/** @type WebpackConfig */
const webExtensionConfig = {
  mode: 'none',
  target: 'webworker',
  entry: {
    'extension': './src/web/extension.ts',
    'test/suite/index': './src/web/test/suite/index.ts'
  },
  output: {
    filename: '[name].js',
    path: path.join(__dirname, './dist/web'),
    libraryTarget: 'commonjs',
    devtoolModuleFilenameTemplate: '../../[resource-path]'
  },
  resolve: {
    mainFields: ['browser', 'module', 'main'],
    extensions: ['.ts', '.js'],
    alias: {},
    fallback: {
      'assert': require.resolve('assert')
    }
  },
  module: {
    rules: [{
      test: /\.ts$/,
      exclude: /node_modules/,
      use: [{
          loader: 'ts-loader'
      }]
    }]
  },
  plugins: [
    new webpack.ProvidePlugin({
      process: 'process/browser',
    }),
  ],
  externals: {
    'vscode': 'commonjs vscode',
  },
  performance: {
    hints: false
  },
  devtool: 'nosources-source-map'
};
module.exports = [webExtensionConfig];

----------------------------------------

TITLE: Enabling Format on Paste in VS Code Settings
DESCRIPTION: JSON configuration to enable automatic formatting of pasted code in VS Code, replicating a useful Sublime Text feature.

LANGUAGE: json
CODE:
"editor.formatOnPaste": true

----------------------------------------

TITLE: Setting Default Language for New Files in VS Code
DESCRIPTION: JSON configuration to set the default language mode for new files in VS Code using the files.defaultLanguage setting.

LANGUAGE: json
CODE:
"files.defaultLanguage": "html"

----------------------------------------

TITLE: Configuring Docker Build Options in devContainer.json
DESCRIPTION: Illustrates how to use the 'build' property in devContainer.json to specify Docker build options. This includes setting the build target, arguments, dockerfile location, and context.

LANGUAGE: json
CODE:
{
    "build": {
        "dockerfile": "../Dockerfile",
        "context": "..",
        "target": "development",
        "args": {
            "ARG1": "FOO",
            "ARG2": "BAR"
        }
    }
}

----------------------------------------

TITLE: Configuring Explorer autoreveal exclusions in VS Code settings
DESCRIPTION: This JSON snippet shows how to configure the explorer.autoRevealExclude setting to prevent certain folders from being automatically revealed in the Explorer view.

LANGUAGE: JSON
CODE:
{
  "explorer.autoRevealExclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },
}

----------------------------------------

TITLE: Redirecting Error Output in Docker Commands
DESCRIPTION: Shows how to redirect standard error to standard output to prevent red text in VS Code terminal.

LANGUAGE: docker
CODE:
RUN apt-get -y install --no-install-recommends apt-utils dialog 2>&1

----------------------------------------

TITLE: Configuring Bash History for Non-Root User in Dockerfile
DESCRIPTION: Dockerfile configuration to persist bash history for a non-root user, including creating necessary directories and setting permissions.

LANGUAGE: docker
CODE:
ARG USERNAME=user-name-goes-here

RUN SNIPPET="export PROMPT_COMMAND='history -a' && export HISTFILE=/commandhistory/.bash_history" \
    && mkdir /commandhistory \
    && touch /commandhistory/.bash_history \
    && chown -R $USERNAME /commandhistory \
    && echo "$SNIPPET" >> "/home/$USERNAME/.bashrc"

----------------------------------------

TITLE: Creating New Express Application
DESCRIPTION: Commands to create and set up a new Express application using the Express generator with Pug template engine.

LANGUAGE: bash
CODE:
express myExpressApp --view pug
cd myExpressApp
npm install

----------------------------------------

TITLE: Configuring Language-Specific Settings in VS Code
DESCRIPTION: Example of setting a language-specific configuration for Markdown in VS Code's settings.json file.

LANGUAGE: json
CODE:
"[markdown]": {
    "editor.wordBasedSuggestions": "off"
}

----------------------------------------

TITLE: Declaring No Support for Virtual Workspaces in package.json
DESCRIPTION: This JSON snippet shows how to declare that an extension does not support virtual workspaces in its package.json file.

LANGUAGE: json
CODE:
{
  "capabilities": {
    "virtualWorkspaces": {
      "supported": false,
      "description": "Debugging is not possible in virtual workspaces."
    }
  }
}

----------------------------------------

TITLE: Keyboard Shortcuts in VS Code Markdown
DESCRIPTION: Code blocks showing keyboard shortcut syntax used in VS Code documentation for various productivity commands like copy/paste, focusing side bar, and adding multiple cursors.

LANGUAGE: markdown
CODE:
kb(workbench.action.focusSideBar)

LANGUAGE: markdown
CODE:
kb(workbench.action.focusFirstEditorGroup)

LANGUAGE: markdown
CODE:
kb(editor.action.clipboardCopyAction)

LANGUAGE: markdown
CODE:
kb(editor.action.clipboardPasteAction)

LANGUAGE: markdown
CODE:
kb(editor.action.insertCursorAtEndOfEachLineSelected)

LANGUAGE: markdown
CODE:
kb(workbench.action.quickOpen)

LANGUAGE: markdown
CODE:
kbstyle(Shift)

----------------------------------------

TITLE: Adding Event Listener in TypeScript
DESCRIPTION: This snippet demonstrates how to add a 'load' event listener to the window object in TypeScript. It logs 'hello world!' to the console when the page loads.

LANGUAGE: typescript
CODE:
window.addEventListener('load', function() {
    console.log(`hello world!`);
})

----------------------------------------

TITLE: Basic TypeScript Configuration File
DESCRIPTION: Simple tsconfig.json configuration for ES5 targeting with CommonJS modules and source maps enabled.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "target": "ES5",
        "module": "CommonJS",
        "sourceMap": true
    }
}

----------------------------------------

TITLE: Setting Docker Compose Project Name via .env File
DESCRIPTION: Environment variable configuration in .env file to set Docker Compose project name

LANGUAGE: plaintext
CODE:
COMPOSE_PROJECT_NAME=foo

----------------------------------------

TITLE: Creating Non-Root User in Dockerfile
DESCRIPTION: Dockerfile commands to create a new non-root user with sudo privileges in Debian/Ubuntu containers.

LANGUAGE: dockerfile
CODE:
ARG USERNAME=user-name-goes-here
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# ********************************************************
# * Anything else you want to do like clean up goes here *
# ********************************************************

# [Optional] Set the default user. Omit if you want to keep the default as root.
USER $USERNAME

----------------------------------------

TITLE: Simple Python Hello World Script
DESCRIPTION: This is a basic Python script that prints a hello message, demonstrating Python execution in the WSL environment.

LANGUAGE: python
CODE:
print("hello from python on ubuntu on windows!")

----------------------------------------

TITLE: Configuring Extension Sponsorship in package.json
DESCRIPTION: Demonstrates how to add sponsorship information to a VS Code extension's package.json file.

LANGUAGE: JSON
CODE:
"sponsor": {
    "url": "https://github.com/sponsors/nvaccess"
}

----------------------------------------

TITLE: Configuring webpack for VS Code Extension Bundling
DESCRIPTION: JavaScript configuration file for webpack to bundle a VS Code extension. It sets up entry points, output, TypeScript handling, and external dependencies.

LANGUAGE: javascript
CODE:
//@ts-check

'use strict';

const path = require('path');
const webpack = require('webpack');

/**@type {import('webpack').Configuration}*/
const config = {
    target: 'webworker', // vscode extensions run in webworker context for VS Code web 📖 -> https://webpack.js.org/configuration/target/#target

    entry: './src/extension.ts', // the entry point of this extension, 📖 -> https://webpack.js.org/configuration/entry-context/
    output: { // the bundle is stored in the 'dist' folder (check package.json), 📖 -> https://webpack.js.org/configuration/output/
        path: path.resolve(__dirname, 'dist'),
        filename: 'extension.js',
        libraryTarget: "commonjs2",
        devtoolModuleFilenameTemplate: "../[resource-path]",
    },
    devtool: 'source-map',
    externals: {
        vscode: "commonjs vscode" // the vscode-module is created on-the-fly and must be excluded. Add other modules that cannot be webpack'ed, 📖 -> https://webpack.js.org/configuration/externals/
    },
    resolve: { // support reading TypeScript and JavaScript files, 📖 -> https://github.com/TypeStrong/ts-loader
        mainFields: ['browser', 'module', 'main'], // look for `browser` entry point in imported node modules
        extensions: ['.ts', '.js'],
        alias: {
            // provides alternate implementation for node module and source files
        },
        fallback: {
            // Webpack 5 no longer polyfills Node.js core modules automatically.
            // see https://webpack.js.org/configuration/resolve/#resolvefallback
            // for the list of Node.js core module polyfills.
        }
    },
    module: {
        rules: [{
            test: /\.ts$/,
            exclude: /node_modules/,
            use: [{
                loader: 'ts-loader',
            }]
        }]
    },
}
module.exports = config;

----------------------------------------

TITLE: Extension Location Force Configuration
DESCRIPTION: VS Code settings.json configuration to force extensions to run locally or remotely.

LANGUAGE: json
CODE:
"remote.extensionKind": {
    "ms-azuretools.vscode-docker": [ "ui" ],
    "ms-vscode-remote.remote-ssh-edit": [ "workspace" ]
}

----------------------------------------

TITLE: Configuring Proxy URL
DESCRIPTION: JSON configuration to set a proxy URL for the .NET SDK acquisition extension.

LANGUAGE: json
CODE:
{
    "dotnetAcquisitionExtension.proxyUrl": "https://your_proxy_url:port"
}

----------------------------------------

TITLE: Configuring User in Docker Compose
DESCRIPTION: YAML configuration for setting the default user in a Docker Compose service.

LANGUAGE: yaml
CODE:
user: user-name-or-UID-goes-here

----------------------------------------

TITLE: Installing TypeScript Compiler via NPM
DESCRIPTION: Commands to install the TypeScript compiler globally using npm and verify the installation.

LANGUAGE: bash
CODE:
npm install -g typescript
tsc --version
tsc --help

----------------------------------------

TITLE: Enabling Smooth Scrolling in VS Code Terminal
DESCRIPTION: Enables smooth scrolling in the integrated terminal, which animates scrolling for a short period to help users see their location after scrolling, similar to the editor and lists.

LANGUAGE: json
CODE:
"terminal.integrated.smoothScrolling": true

----------------------------------------

TITLE: Configuring package.json for Automated VS Code Extension Publishing
DESCRIPTION: JSON configuration in package.json for setting up a deploy script to publish a VS Code extension using vsce. This script is used in CI/CD pipelines for automated publishing.

LANGUAGE: json
CODE:
"scripts": {
  "deploy": "vsce publish --yarn"
}

----------------------------------------

TITLE: Configuring Font Ligatures in VS Code Settings
DESCRIPTION: JSON configuration to enable font ligatures in the editor using the Fira Code font.

LANGUAGE: json
CODE:
"editor.fontFamily": "Fira Code",
"editor.fontLigatures": true

----------------------------------------

TITLE: Creating a Remote Tunnel with VS Code CLI
DESCRIPTION: This command creates a secure tunnel to a remote machine using the VS Code CLI, allowing access to the VS Code Server through a web browser.

LANGUAGE: shell
CODE:
code tunnel

----------------------------------------

TITLE: Configuring UNC Host Allowlist in VS Code Settings
DESCRIPTION: JSON configuration for allowing specific UNC hosts in VS Code.

LANGUAGE: json
CODE:
{
  "security.allowedUNCHosts": ["host1", "host2"],
  "security.restrictUNCAccess": false
}

----------------------------------------

TITLE: Downloading Proposed API Type Definitions using VS Code DTS CLI
DESCRIPTION: Demonstrates how to use the @vscode/dts CLI utility to download the latest proposed API type definitions for extension development.

LANGUAGE: bash
CODE:
> npx @vscode/dts dev
Downloading vscode.proposed.languageStatus.d.ts
To:   /Users/Me/Code/MyExtension/vscode.proposed.languageStatus.d.ts
From: https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageStatus.d.ts
Read more about proposed API at: https://code.visualstudio.com/api/advanced-topics/using-proposed-api

----------------------------------------

TITLE: Initializing a Calculator Class in JavaScript
DESCRIPTION: This snippet demonstrates how to start a Calculator class in JavaScript, showcasing Copilot's ability to suggest methods like 'add' and 'subtract'.

LANGUAGE: javascript
CODE:
class Calculator

----------------------------------------

TITLE: Configuring GPU Availability in Dev Containers
DESCRIPTION: Sets the user setting for GPU availability in Dev Containers when automatic detection fails. This ensures expected behavior when a devcontainer.json configures GPU as an optional resource.

LANGUAGE: json
CODE:
"hostRequirements": { "gpu": "optional" }

----------------------------------------

TITLE: Contributing Issue Reporter Command and Menu in package.json
DESCRIPTION: This JSON snippet demonstrates how to contribute a custom command and menu for integrating with VS Code's issue reporter flow. It defines a command and adds it to the 'issue/reporter' menu.

LANGUAGE: json
CODE:
"commands": [
    {
        "command": "extension.myCommand",
        "title": "Report Issue"
    }
],
    "menus": {
        "issue/reporter": [
            {
                "command": "extension.myCommand"
            }
        ]
    }

----------------------------------------

TITLE: Creating a Task in TypeScript
DESCRIPTION: Example of how to create a Task that conforms to the task definition contributed in the package.json file.

LANGUAGE: typescript
CODE:
let task = new vscode.Task({ type: 'npm', script: 'test' }, ....);