TITLE: Accessing a Dubbo Service via HTTP in Shell
DESCRIPTION: This snippet shows how to access a Dubbo service using an HTTP/1.1 POST request with cURL.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50051/org.apache.dubbo.demo.DemoService/sayHello

----------------------------------------

TITLE: Configuring Dubbo Provider using Bootstrap API
DESCRIPTION: Example showing how to configure and start a Dubbo service provider using DubboBootstrap API, including protocol configuration, service registration and application startup.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoProvider {
    public static void main(String[] args) {

        ConfigCenterConfig configCenter = new ConfigCenterConfig();
        configCenter.setAddress("zookeeper://127.0.0.1:2181");

        // 服务提供者协议配置
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName("dubbo");
        protocol.setPort(12345);
        protocol.setThreads(200);

        // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口
        // 服务提供者暴露服务配置
        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();
        demoServiceConfig.setInterface(DemoService.class);
        demoServiceConfig.setRef(new DemoServiceImpl());
        demoServiceConfig.setVersion("1.0.0");

        // 第二个服务配置
        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();
        fooServiceConfig.setInterface(FooService.class);
        fooServiceConfig.setRef(new FooServiceImpl());
        fooServiceConfig.setVersion("1.0.0");

        ...

        // 通过DubboBootstrap简化配置组装，控制启动过程
        DubboBootstrap.getInstance()
                .application("demo-provider") // 应用配置
                .registry(new RegistryConfig("zookeeper://127.0.0.1:2181")) // 注册中心配置
                .protocol(protocol) // 全局默认协议配置
                .service(demoServiceConfig) // 添加ServiceConfig
                .service(fooServiceConfig)
                .start()    // 启动Dubbo
                .await();   // 挂起等待(防止进程退出）
    }
}

----------------------------------------

TITLE: Implementing Dubbo Consumer
DESCRIPTION: Java class demonstrating how to consume a Dubbo service using @DubboReference annotation.

LANGUAGE: java
CODE:
@Component
public class Consumer implements CommandLineRunner {
    @DubboReference
    private DemoService demoService;

    @Override
    public void run(String... args) throws Exception {
        String result = demoService.sayHello("world");
        System.out.println("Receive result ======> " + result);
    }
}

----------------------------------------

TITLE: Configuring Dubbo Application in YAML
DESCRIPTION: YAML configuration for Dubbo application, protocol, and registry settings.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-demo
  protocol:
    name: tri
    port: 50051
  registry:
    address: zookeeper://${zookeeper.address:127.0.0.1}:2181

----------------------------------------

TITLE: Configuring Dubbo Provider using Bootstrap API
DESCRIPTION: Example showing how to configure and start a Dubbo provider using DubboBootstrap API with service configurations, protocol settings and registry connection.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoProvider {
    public static void main(String[] args) {

        ConfigCenterConfig configCenter = new ConfigCenterConfig();
        configCenter.setAddress("zookeeper://127.0.0.1:2181");

        // Provider protocol configuration
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName("dubbo");
        protocol.setPort(12345);
        protocol.setThreads(200);

        // Note: ServiceConfig is a heavy object, encapsulating the connection with the registry and opening the service port
        // Provider service exposure configuration
        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();
        demoServiceConfig.setInterface(DemoService.class);
        demoServiceConfig.setRef(new DemoServiceImpl());
        demoServiceConfig.setVersion("1.0.0");

        // Second service configuration
        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();
        fooServiceConfig.setInterface(FooService.class);
        fooServiceConfig.setRef(new FooServiceImpl());
        fooServiceConfig.setVersion("1.0.0");

        ...

        // Simplifying configuration assembly and controlling the startup process through DubboBootstrap
        DubboBootstrap.getInstance()
                .application("demo-provider") // Application configuration
                .registry(new RegistryConfig("zookeeper://127.0.0.1:2181")) // Registry configuration
                .protocol(protocol) // Global default protocol configuration
                .service(demoServiceConfig) // Add ServiceConfig
                .service(fooServiceConfig)
                .start()    // Start Dubbo
                .await();   // Suspend wait (prevent process exit)
    }
}

----------------------------------------

TITLE: Starting Dubbo Application Locally
DESCRIPTION: Maven command to start the Dubbo application locally using the Maven wrapper.

LANGUAGE: shell
CODE:
./mvnw

----------------------------------------

TITLE: Configuring Maven Dependencies for Dubbo
DESCRIPTION: Maven dependency configuration for adding Dubbo to a Java project. Includes both standard and shaded versions to avoid Netty conflicts.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo</artifactId>
    <version>3.3.0</version>
</dependency>

<!-- To avoid Netty dependency conflicts, you can also choose to use the dubbo-shaded version! -->
<!--
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-shaded</artifactId>
    <version>3.3.0</version>
</dependency>
-->

----------------------------------------

TITLE: Implementing Dubbo Service
DESCRIPTION: Java class implementing the Dubbo service interface with @DubboService annotation.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {
    @Override
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

----------------------------------------

TITLE: Using @Activate Annotation for Conditional Activation
DESCRIPTION: Examples of using @Activate annotation to control when SPI extensions are loaded.

LANGUAGE: Java
CODE:
@Activate(group="provider")
public class MetricsProviderFilter implements Filter{}

@Activate(value="cache")
public class MetricsProviderFilter implements Filter{}

@Activate(value="cache:test")
public class MetricsProviderFilter implements Filter{}

----------------------------------------

TITLE: Basic Dubbo API Configuration
DESCRIPTION: Example showing how to configure and export a Dubbo service using the Java API

LANGUAGE: java
CODE:
public static void main(String[] args) throws IOException {
        ServiceConfig<GreetingsService> service = new ServiceConfig<>();
        service.setApplication(new ApplicationConfig("first-dubbo-provider"));
        service.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
        service.setInterface(GreetingsService.class);
        service.setRef(new GreetingsServiceImpl());
        service.export();
        System.out.println("first-dubbo-provider is running.");
        System.in.read();
}

----------------------------------------

TITLE: Configuring Dubbo Service Provider in Spring XML
DESCRIPTION: XML configuration for exposing a Dubbo service, including application name, registry settings, and service declaration.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder/>

    <dubbo:application name="demo-provider"/>

    <dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

    <dubbo:provider token="true"/>

    <bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>

    <dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>

</beans>

----------------------------------------

TITLE: Configuring Client-Side Connection Limits in Dubbo XML
DESCRIPTION: Configuration to limit the number of connections made by the client. Can be set via reference or service configuration, with a maximum limit of 10 connections.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" connections="10" />

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" connections="10" />

----------------------------------------

TITLE: Starting a Dubbo RPC Server in Java
DESCRIPTION: This snippet demonstrates how to start a Dubbo RPC Server using DubboBootstrap. It sets up the protocol, service, and starts the server.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        DubboBootstrap.getInstance()
            .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))
            .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
            .start()
            .await();
    }
}

----------------------------------------

TITLE: Defining Validation Parameters in Java for Dubbo
DESCRIPTION: This Java class demonstrates how to use JSR303 annotations to define validation constraints on a parameter object. It includes various validation annotations such as @NotNull, @Size, @Pattern, @Min, @Max, @Past, and @Future.

LANGUAGE: java
CODE:
public class ValidationParameter implements Serializable {
    private static final long serialVersionUID = 7158911668568000392L;
 
    @NotNull // Cannot be null
    @Size(min = 1, max = 20) // Length or size range
    private String name;
 
    @NotNull(groups = ValidationService.Save.class) // Cannot be null when saving, can be null when updating, indicating no update to this field
    @Pattern(regexp = "^\\s*\\w+(?:\\.{0,1}[\\w-]+)*@[a-zA-Z0-9]+(?:[-.][a-zA-Z0-9]+)*\\.[a-zA-Z]+\\s*$")
    private String email;
 
    @Min(18) // Minimum value
    @Max(100) // Maximum value
    private int age;
 
    @Past // Must be a past date
    private Date loginDate;
 
    @Future // Must be a future date
    private Date expiryDate;
 
    // Getters and setters omitted for brevity
}

----------------------------------------

TITLE: Publishing Multiple Dubbo Services in Java
DESCRIPTION: This snippet shows how to register and publish multiple services using DubboBootstrap with shared configurations.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    ProviderConfig providerConfig = new ProviderConfig();
    providerConfig.setTimeout(5000);

    ProtocolConfig protocolConfig = new ProtocolConfig(CommonConstants.TRIPLE, 50051);

    DubboBootstrap.getInstance()
        .protocol(protocolConfig)
        .provider(providerConfig)
        .service(ServiceBuilder.newBuilder().interfaceClass(FooService.class).ref(new FooServiceImpl()).build())
        .service(ServiceBuilder.newBuilder().interfaceClass(BarService.class).ref(new BarServiceImpl()).build())
        .start()
        .await();
}

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Definition of a simple Java interface that serves as the Dubbo service contract.

LANGUAGE: java
CODE:
public interface DemoService {
   String sayHello(String name);
}

----------------------------------------

TITLE: Defining Dubbo Service Contract Interface in Java
DESCRIPTION: Defines a simple service contract interface with a single method for a Dubbo application.

LANGUAGE: java
CODE:
public interface GreetingsService {
    String sayHi(String name);
}

----------------------------------------

TITLE: Configuring Global Load Balancing in YAML
DESCRIPTION: Demonstrates how to set a global load balancing strategy for all service calls using YAML configuration.

LANGUAGE: yaml
CODE:
dubbo:
  consumer:
    loadbalance: roundrobin

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Defines a basic Dubbo service interface with a hello method that accepts a string argument.

LANGUAGE: java
CODE:
public interface DemoService {
    String hello(String arg);
}

----------------------------------------

TITLE: Configuring Server-Side Connection Limits in Dubbo XML
DESCRIPTION: Configuration to limit the number of connections accepted by the server. Can be set via provider or protocol configuration, with a maximum limit of 10 connections.

LANGUAGE: xml
CODE:
<dubbo:provider protocol="dubbo" accepts="10" />

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" accepts="10" />

----------------------------------------

TITLE: Adding Maven Dependencies for Dubbo Nacos Registry
DESCRIPTION: Add the necessary Maven dependencies to integrate Nacos as a registry in a Dubbo project. This includes dubbo-registry-nacos, nacos-client, dubbo, and spring-context-support.

LANGUAGE: XML
CODE:
<dependencies>

    ...
        
    <!-- Dubbo Nacos registry dependency -->
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>dubbo-registry-nacos</artifactId>
        <version>0.0.2</version>
    </dependency>   
    
    <!-- Keep latest Nacos client version -->
    <dependency>
        <groupId>com.alibaba.nacos</groupId>
        <artifactId>nacos-client</artifactId>
        <version>[0.6.1,)</version>
    </dependency>
    
    <!-- Dubbo dependency -->
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>dubbo</artifactId>
        <version>2.6.5</version>
    </dependency>
    
    <!-- Alibaba Spring Context extension -->
    <dependency>
        <groupId>com.alibaba.spring</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>1.0.2</version>
    </dependency>

    ...
    
</dependencies>

----------------------------------------

TITLE: Configuring Dubbo Properties
DESCRIPTION: Properties file configuration for extending Dubbo service and reference configurations.

LANGUAGE: properties
CODE:
dubbo.service.org.apache.dubbo.springboot.demo.DemoService.timeout=5000
dubbo.service.org.apache.dubbo.springboot.demo.DemoService.parameters=[{myKey:myValue},{anotherKey:anotherValue}]
dubbo.reference.org.apache.dubbo.springboot.demo.DemoService.timeout=6000

----------------------------------------

TITLE: Configuring Sticky Connections in Dubbo XML
DESCRIPTION: Configuration for enabling sticky connections at service or method level to ensure clients always invoke the same provider for stateful services.

LANGUAGE: xml
CODE:
<dubbo:reference id="xxxService" interface="com.xxx.XxxService" sticky="true" />

LANGUAGE: xml
CODE:
<dubbo:reference id="xxxService" interface="com.xxx.XxxService">
    <dubbo:method name="sayHello" sticky="true" />
</dubbo:reference>

----------------------------------------

TITLE: Configuring and Exporting Dubbo Service Provider using ServiceConfig
DESCRIPTION: Demonstrates how to configure and export a Dubbo service provider using ServiceConfig. It includes setting up application, registry, protocol, and service configurations.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoProvider {
    public static void main(String[] args) {
        // 服务实现
        DemoService demoService = new DemoServiceImpl();

        // 当前应用配置
        ApplicationConfig application = new ApplicationConfig();
        application.setName("demo-provider");

        // 连接注册中心配置
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress("zookeeper://10.20.130.230:2181");

        // 服务提供者协议配置
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName("dubbo");
        protocol.setPort(12345);
        protocol.setThreads(200);

        // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口
        // 服务提供者暴露服务配置
        ServiceConfig<DemoService> service = new ServiceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏
        service.setApplication(application);
        service.setRegistry(registry); // 多个注册中心可以用setRegistries()
        service.setProtocol(protocol); // 多个协议可以用setProtocols()
        service.setInterface(DemoService.class);
        service.setRef(demoService);
        service.setVersion("1.0.0");

        // 暴露及注册服务
        service.export();
        
        // 挂起等待(防止进程退出）
        System.in.read();
    }
}

----------------------------------------

TITLE: Configuring Maven Dependencies for Dubbo Spring Boot
DESCRIPTION: Maven dependency management configuration for including Dubbo BOM and required starter dependencies.

LANGUAGE: xml
CODE:
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-bom</artifactId>
                <version>3.3.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

LANGUAGE: xml
CODE:
    <dependencies>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>
        </dependency>
    </dependencies>

----------------------------------------

TITLE: Basic Nacos Configuration in YAML
DESCRIPTION: YAML configuration for setting up Nacos registry with Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848
   register-mode: instance

----------------------------------------

TITLE: Method-level Configuration in Dubbo
DESCRIPTION: Example demonstrating how to configure method-level settings for Dubbo services including timeout and retries.

LANGUAGE: java
CODE:
...

// Method-level configuration
List<MethodConfig> methods = new ArrayList<MethodConfig>();
MethodConfig method = new MethodConfig();
method.setName("sayHello");
method.setTimeout(10000);
method.setRetries(0);
methods.add(method);

// Referencing remote service
ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // This instance is heavy, encapsulating the connection to the registry and the connection to the provider, please cache it, otherwise it may cause memory and connection leaks
...
reference.setMethods(methods); // Set method-level configuration

...

----------------------------------------

TITLE: Configuring Global Settings using DubboBootstrap API
DESCRIPTION: Demonstrates how to set global basic configurations using DubboBootstrap API, including application, protocol, registry, config center, metadata center, module, monitoring, SSL, provider, and consumer configurations.

LANGUAGE: java
CODE:
// 注册中心
RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://192.168.10.1:2181");
...
  
// 服务提供者协议配置
ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("dubbo");
protocol.setPort(12345);
protocol.setThreads(200);
...
  
// 配置中心
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://192.168.10.2:2181");
...
  
// 元数据中心
MetadataReportConfig metadataReport = new MetadataReportConfig();
metadataReport.setAddress("zookeeper://192.168.10.3:2181");
...
  
// Metrics
MetricsConfig metrics = new MetricsConfig();
metrics.setProtocol("dubbo");
...
  
// SSL
SslConfig ssl = new SslConfig();
ssl.setServerKeyCertChainPath("/path/ssl/server-key-cert-chain");
ssl.setServerPrivateKeyPath("/path/ssl/server-private-key");
...
  
// Provider配置（ServiceConfig默认配置）
ProviderConfig provider = new ProviderConfig();
provider.setGroup("demo");
provider.setVersion("1.0.0");
...
  
// Consumer配置（ReferenceConfig默认配置）
ConsumerConfig consumer = new ConsumerConfig();
consumer.setGroup("demo");
consumer.setVersion("1.0.0");
consumer.setTimeout(2000);
...
  
DubboBootstrap.getInstance()
    .application("demo-app")
    .registry(registry)
    .protocol(protocol)
    .configCenter(configCenter)
    .metadataReport(metadataReport)
    .module(new ModuleConfig("module"))
    .metrics(metrics)
  	.ssl(ssl)
  	.provider(provider)
  	.consumer(consumer)
  	...
  	.start();

----------------------------------------

TITLE: Implementing Dubbo Provider Bootstrap with Annotations
DESCRIPTION: This Java class demonstrates how to bootstrap a Dubbo provider using annotations, enabling Dubbo and specifying the configuration properties source.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.provider;

import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
import org.apache.dubbo.demo.service.DemoService;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.PropertySource;

import java.io.IOException;

/**
 * {@link DemoService} provider demo
 */
@EnableDubbo(scanBasePackages = "org.apache.dubbo.demo.service")
@PropertySource(value = "classpath:/provider-config.properties")
public class DemoServiceProviderBootstrap {

    public static void main(String[] args) throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(DemoServiceProviderBootstrap.class);
        context.refresh();
        System.out.println("DemoService provider is starting...");
        System.in.read();
    }
}

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Java interface definition for a Dubbo service.

LANGUAGE: java
CODE:
public interface DemoService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Configuring and Referencing Dubbo Service Consumer using ReferenceConfig
DESCRIPTION: Shows how to configure and reference a Dubbo service consumer using ReferenceConfig. It includes setting up application and registry configurations, and obtaining a proxy for the remote service.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ConsumerConfig;
import org.apache.dubbo.config.ReferenceConfig;
import com.xxx.DemoService;

public class DemoConsumer {
    public static void main(String[] args) {
        // 当前应用配置
        ApplicationConfig application = new ApplicationConfig();
        application.setName("demo-consumer");

        // 连接注册中心配置
        RegistryConfig registry = new RegistryConfig();
        registry.setAddress("zookeeper://10.20.130.230:2181");

        // 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接
        // 引用远程服务
        ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏
        reference.setApplication(application);
        reference.setRegistry(registry); // 多个注册中心可以用setRegistries()
        reference.setInterface(DemoService.class);
        reference.setVersion("1.0.0");

        // 和本地bean一样使用demoService
        // 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用
        DemoService demoService = reference.get();
        demoService.sayHello("Dubbo");
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service Contract in Java
DESCRIPTION: Provides an implementation of the GreetingsService interface for a Dubbo service provider.

LANGUAGE: java
CODE:
public class GreetingsServiceImpl implements GreetingsService {
    @Override
    public String sayHi(String name) {
        return "hi, " + name;
    }
}

----------------------------------------

TITLE: Defining Basic Dubbo Service Interface
DESCRIPTION: Basic interface definition for a Dubbo service that will be implemented with different versions and groups.

LANGUAGE: java
CODE:
public interface DevelopService {
    String invoke(String param);
}

----------------------------------------

TITLE: Configuring Dubbo Maven Dependencies
DESCRIPTION: XML configuration for adding Dubbo dependencies in the Maven pom.xml file.

LANGUAGE: xml
CODE:
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo-bom</artifactId>
                <version>3.3.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <dependencies>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>
        </dependency>
    </dependencies>

----------------------------------------

TITLE: Defining Basic Dubbo Service Interface
DESCRIPTION: Basic interface definition for a Dubbo service that will be implemented with different versions and groups.

LANGUAGE: java
CODE:
public interface DevelopService {
    String invoke(String param);
}

----------------------------------------

TITLE: Configuring Dubbo Service Provider with Spring XML
DESCRIPTION: Spring XML configuration for exposing Dubbo service with ZooKeeper registry integration and security token.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder/>

    <dubbo:application name="demo-provider"/>

    <dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

    <dubbo:provider token="true"/>

    <bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>

    <dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>

</beans>

----------------------------------------

TITLE: Configuring Dubbo Microservices with Registry Center in Java
DESCRIPTION: This snippet demonstrates how to configure a Dubbo microservice application with a registry center and application name.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    DubboBootstrap.getInstance()
        .application()
        .registry(new RegistryConfig("nacos://127.0.0.1:8848"))
        .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))
        .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
        .service(ServiceBuilder.newBuilder().interfaceClass(FooService.class).ref(new FooServiceImpl()).build())
        .start()
        .await();
}

----------------------------------------

TITLE: Executing HTTP Request with cURL
DESCRIPTION: Example of calling the Dubbo Triple service using cURL command.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50052/org.apache.dubbo.samples.api.GreetingsService/sayHi/

----------------------------------------

TITLE: Defining a Dubbo Service Interface in Java
DESCRIPTION: This snippet shows how to define a standard Java interface as a Dubbo service.

LANGUAGE: java
CODE:
public interface DemoService {
   String sayHello(String name);
}

----------------------------------------

TITLE: Adding Dubbo Zookeeper Dependencies in Maven
DESCRIPTION: Maven configuration for adding Dubbo and Zookeeper dependencies in a Spring Boot application. Includes options for different Zookeeper server versions.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>
<!-- Use this dependency only when Zookeeper Server version is 3.4.x and below -->
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Multi-Protocol Publishing in Dubbo
DESCRIPTION: YAML configuration for publishing a Dubbo service using multiple protocols (triple and dubbo) simultaneously on different ports.

LANGUAGE: yaml
CODE:
dubbo:
 protocols:
   tri:
     name: tri
     port: 50051
   dubbo:
     name: dubbo
	 port: 20880

----------------------------------------

TITLE: Configuring Dubbo Service Consumer in Spring XML
DESCRIPTION: XML configuration for consuming a Dubbo service, including application name, registry settings, and service reference.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder/>

    <dubbo:application name="demo-consumer"/>

    <dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

    <dubbo:reference id="demoService" check="true" interface="org.apache.dubbo.samples.basic.api.DemoService"/>

</beans>

----------------------------------------

TITLE: Implementing a Dubbo Service in Java
DESCRIPTION: This snippet demonstrates the implementation of the DemoService interface with business logic.

LANGUAGE: java
CODE:
public class DemoServiceImpl implements DemoService {
    @Override
    public String sayHello(String name) {
        return "Hello " + name + ", response from provider.";
    }
}

----------------------------------------

TITLE: Configuring Dubbo Application with XML
DESCRIPTION: Example of configuring a Dubbo application using XML format, demonstrating how to set up a reference with method-specific configuration.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.xxx.XxxService">
   <dubbo:method name="findXxx" timeout="3000" retries="2" />
</dubbo:reference>

----------------------------------------

TITLE: Implementing EtcdServiceDiscoveryFactory
DESCRIPTION: This code snippet shows the implementation of the ServiceDiscoveryFactory interface by extending AbstractServiceDiscoveryFactory for etcd registry.

LANGUAGE: java
CODE:
public class EtcdServiceDiscoveryFactory extends AbstractServiceDiscoveryFactory {

    @Override
    protected ServiceDiscovery createDiscovery(URL registryURL) {
        return new EtcdServiceDiscovery(applicationModel, registryURL);
    }

}

----------------------------------------

TITLE: Configuring Filter Disable Rules in YAML
DESCRIPTION: YAML configuration to globally disable specific filters for all RPC calls

LANGUAGE: yaml
CODE:
dubbo:
  consumer:
    filter: "-accesslog,-tps"

----------------------------------------

TITLE: Configuring Dubbo Service Consumer in Spring XML
DESCRIPTION: XML configuration for consuming a Dubbo service, including application name, registry settings, and service reference.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder/>

    <dubbo:application name="demo-consumer"/>

    <dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

    <dubbo:reference id="demoService" check="true" interface="org.apache.dubbo.samples.basic.api.DemoService"/>

</beans>

----------------------------------------

TITLE: Implementing Dubbo Service
DESCRIPTION: Java class implementing the Dubbo service interface.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {
    @Override
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

----------------------------------------

TITLE: Implementing Custom Liveness Probe in Java for Dubbo QOS
DESCRIPTION: Example implementation of a custom Liveness Probe for Dubbo QOS. This class extends the LivenessProbe interface and implements the check() method to define custom liveness criteria.

LANGUAGE: java
CODE:
package com.xxx;

public class XxxLivenessProbe implements LivenessProbe {
    
    public boolean check() {
        // ...
    }
}

----------------------------------------

TITLE: Accessing a Dubbo Service using ReferenceBuilder in Java
DESCRIPTION: This snippet demonstrates how to use a standard Dubbo client to request a service by specifying the server address.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        DemoService demoService =
            ReferenceBuilder.newBuilder()
            .interfaceClass(DemoService.class)
            .url("tri://localhost:50051")
            .build()
            .get();

        String message = demoService.sayHello("dubbo");
        System.out.println(message);
    }
}

----------------------------------------

TITLE: Configuring Dubbo Application with XML
DESCRIPTION: Example of configuring a Dubbo application using XML format, demonstrating how to set up a reference with method-specific configuration.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.xxx.XxxService">
   <dubbo:method name="findXxx" timeout="3000" retries="2" />
</dubbo:reference>

----------------------------------------

TITLE: Dubbo Spring Boot Configuration
DESCRIPTION: Example of configuring Dubbo in a Spring Boot application using application.properties

LANGUAGE: properties
CODE:
spring.application.name=dubbo-externalized-configuration-provider-sample

dubbo.scan.base-packages=com.alibaba.boot.dubbo.demo.provider.service

dubbo.protocol.name=dubbo
dubbo.protocol.port=12345

dubbo.registry.address=N/A

demo.service.version=1.0.0

----------------------------------------

TITLE: Configuring Dubbo Service in YAML
DESCRIPTION: YAML configuration for Dubbo service including application name, protocol settings, and registry address.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-demo
  protocol:
    name: dubbo
    port: -1
  registry:
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Configuring Basic Dubbo Provider with XML
DESCRIPTION: Basic XML configuration example showing how to expose a Dubbo service with application, registry, protocol and service definitions.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">  
    <dubbo:application name="hello-world-app" />  
    <dubbo:registry address="multicast://224.5.6.7:1234" />  
    <dubbo:protocol name="dubbo" port="20880" />  
    <dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoServiceLocal" />  
    <dubbo:reference id="demoServiceRemote" interface="com.alibaba.dubbo.demo.DemoService" />  
</beans>

----------------------------------------

TITLE: Manual Registration Configuration in YAML
DESCRIPTION: Configuration for manual service registration control, preventing automatic service publication.

LANGUAGE: yaml
CODE:
dubbo:
  provider:
    delay: -1
  application:
    manual-register: true

----------------------------------------

TITLE: Specifying Timeout for DubboReference in Java
DESCRIPTION: Sets a 5-second timeout for DemoService calls on the consumer side using the @DubboReference annotation.

LANGUAGE: java
CODE:
@DubboReference(timeout=5000)
private DemoService demoService;

----------------------------------------

TITLE: Defining Spring Cloud REST Controller
DESCRIPTION: Java code defining a simple REST controller in Spring Cloud, exposing a /users/list endpoint.

LANGUAGE: java
CODE:
@RestController
@RequestMapping("/users")
public class UserController {
    @GetMapping("/list")
    public List<User> getUser() {
        return Collections.singletonList(new User(1L, "spring cloud server"));
    }
}

----------------------------------------

TITLE: Consumer-side Async Call Implementation
DESCRIPTION: Example of consumer-side async call implementation using CompletableFuture with multiple parallel requests

LANGUAGE: java
CODE:
@DubboReference
private AsyncService asyncService;

@Override
public void run(String... args) throws Exception {
    CompletableFuture<String> future1 = asyncService.asyncInvoke("async call request1");
    future1.whenComplete((v, t) -> {
        if (t != null) {
            t.printStackTrace();
        } else {
            System.out.println("AsyncTask Response-1: " + v);
        }
    });
    CompletableFuture<String> future2 = asyncService.asyncInvoke("async call request2");
    future2.whenComplete((v, t) -> {
        if (t != null) {
            t.printStackTrace();
        } else {
            System.out.println("AsyncTask Response-2: " + v);
        }
    });
    CompletableFuture<String> future3 = CompletableFuture.supplyAsync(() -> {
        return asyncService.invoke("invoke call request3");
    });
    future3.whenComplete((v, t) -> {
        if (t != null) {
            t.printStackTrace();
        } else {
            System.out.println("AsyncTask Response-3: " + v);
        }
    });
    System.out.println("AsyncTask Executed before response return.");
}

----------------------------------------

TITLE: Checking Dubbo Registry Configuration
DESCRIPTION: Example of using Dubbo QoS to check the registry configuration of a Dubbo application.

LANGUAGE: bash
CODE:
➜ telnet 127.0.0.1 22222
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
   ___   __  __ ___   ___   ____     
  / _ \ / / / // _ ) / _ ) / __ \  
 / // // /_/ // _  |/ _  |/ /_/ /    
/____/ \____//____//____/ \____/   
dubbo>getConfig RegistryConfig
ApplicationModel: Dubbo Application[1.1](first-dubbo-provider)
RegistryConfig: null
<dubbo:registry address="nacos://127.0.0.1:8848" protocol="nacos" port="8848" />

----------------------------------------

TITLE: Configuring Client-Side Interface Caching in Dubbo XML
DESCRIPTION: XML configuration for enabling LRU caching at the interface level for a Dubbo service reference.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.DemoService" cache="lru" />

----------------------------------------

TITLE: Publishing Dubbo Service with Triple Protocol
DESCRIPTION: Server-side code to publish the Dubbo service using Triple protocol on port 50052.

LANGUAGE: java
CODE:
public static void main(String[] args) {
	DubboBootstrap.getInstance()
			.protocol(ProtocolBuilder.newBuilder().name("tri").port(50052).build())
			.service(ServiceBuilder.newBuilder().interfaceClass(GreetingsService.class).ref(new GreetingsServiceImpl()).build())
			.start()
			.await();
}

----------------------------------------

TITLE: Defining Protobuf Service for Triple Protocol
DESCRIPTION: Example of defining a service using Protobuf (IDL), suitable for teams with cross-language requirements. The IDL can be used for Java/Go/Node.js implementations.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
option java_multiple_files = true;
package org.apache.dubbo.springboot.demo.idl;

message GreeterRequest {
  string name = 1;
}
message GreeterReply {
  string message = 1;
}

service Greeter{
  rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Configuring Service Reference in Java for Apache Dubbo
DESCRIPTION: Java code for configuring service reference in Apache Dubbo. It sets up a ReferenceConfig object for the GreetingService interface and configures the protocol and listener.

LANGUAGE: java
CODE:
ReferenceConfig<GreetingService> reference = new ReferenceConfig<>();
reference.setInterface(GreetingService.class);
reference.setListener("consumer");
reference.setProtocol(this.protocol);
// reference.setProtocol(CommonConstants.DUBBO);
// reference.setProtocol(CommonConstants.TRIPLE);

----------------------------------------

TITLE: Generic Call via Spring XML Configuration
DESCRIPTION: Shows how to configure generic calls using Spring XML configuration and invoke services using GenericService.

LANGUAGE: xml
CODE:
<dubbo:reference id="helloService" generic = "true" interface="org.apache.dubbo.samples.generic.call.api.HelloService"/>

LANGUAGE: java
CODE:
private static GenericService genericService;

public static void main(String[] args) throws Exception {
    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring/generic-impl-consumer.xml");
    context.start();
    // The name of the service corresponding bean is determined by the id of the xml tag.
    genericService = context.getBean("helloService");
    // Obtain the result.
    Object result = genericService.$invoke("sayHello", new String[]{"java.lang.String"}, new Object[]{"world"});
}

----------------------------------------

TITLE: Multi-instance Deployment Configuration
DESCRIPTION: Example demonstrating how to configure multiple Dubbo instances with isolated applications and modules.

LANGUAGE: java
CODE:
ServiceConfig<DemoService> service = new ServiceConfig<>();
service.setInterface(DemoService.class);
service.setRef(new DemoServiceImpl());

ReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();
reference1.setInterface(DemoService.class);

ReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();
reference2.setInterface(DemoService.class);

// Create a launcher (automatically create a new ApplicationModel)
DubboBootstrap bootstrap1 = DubboBootstrap.newInstance();
// Specify application name
bootstrap1.application(new ApplicationConfig("dubbo-demo-app-1"))
	.registry(new RegistryConfig("nacos://localhost:8848"))
	// Create a module
	.newModule()
		// Publish service within the module
		.service(service)
	.endModule()
	// Create another module
	.newModule()
		// Subscribe to service within the module
		.reference(reference1)
	.endModule()
	.start();

// Create another launcher (automatically create a new ApplicationModel)
DubboBootstrap bootstrap2 = DubboBootstrap.newInstance();
// Specify application name
bootstrap2.application(new ApplicationConfig("dubbo-demo-app-2"))
	.registry(new RegistryConfig("nacos://localhost:8848"))
	// Create a module
	.newModule()
		// Subscribe to service within the module
		.reference(reference2)
	.endModule()
	.start();

// stub1 and stub2 are two independent subscriptions, completely isolated

// Subscribed stub
DemoService stub1 = reference1.get();
System.out.println(stub1.sayHello("Hello World!"));

// Subscribed stub
DemoService stub2 = reference2.get();
System.out.println(stub2.sayHello("Hello World!"));

bootstrap1.stop();
bootstrap2.stop();

----------------------------------------

TITLE: Implementing Dubbo Service Consumer in Java
DESCRIPTION: Configures and uses a Dubbo service consumer to invoke a remote service method.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        ReferenceConfig<GreetingsService> reference = new ReferenceConfig<>();
        reference.setApplication(new ApplicationConfig("first-dubbo-client"));
        reference.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
        reference.setInterface(GreetingsService.class);
        GreetingsService greetingsService = reference.get();
        String message = greetingsService.sayHi("dubbo");
        System.out.println(message);
    }
}

----------------------------------------

TITLE: Implementing Router Interface in Dubbo
DESCRIPTION: Legacy interface for implementing routing logic in Dubbo, including methods for routing, notification, and cleanup.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster;

public interface Router extends Comparable<Router> {

    @Deprecated
    List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;
    
    <T> RouterResult<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation,
                                                     boolean needToPrintMessage) throws RpcException;

    <T> void notify(List<Invoker<T>> invokers);

    void stop();
}

----------------------------------------

TITLE: Implementing Async Service with CompletableFuture
DESCRIPTION: Service implementation showing both sync and async methods using CompletableFuture.supplyAsync() for non-blocking execution

LANGUAGE: java
CODE:
@DubboService
public class AsyncServiceImpl implements AsyncService {
    @Override
    public String invoke(String param) {
        try {
            long time = ThreadLocalRandom.current().nextLong(1000);
            Thread.sleep(time);
            StringBuilder s = new StringBuilder();
            s.append("AsyncService invoke param:").append(param).append(",sleep:").append(time);
            return s.toString();
        }
        catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return null;
    }

    @Override
    public CompletableFuture<String> asyncInvoke(String param) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                long time = ThreadLocalRandom.current().nextLong(1000);
                Thread.sleep(time);
                StringBuilder s = new StringBuilder();
                s.append("AsyncService asyncInvoke param:").append(param).append(",sleep:").append(time);
                return s.toString();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            return null;
        });
    }
}

----------------------------------------

TITLE: Enabling Kryo Serialization in Dubbo Configuration
DESCRIPTION: These snippets demonstrate different ways to enable Kryo serialization in Dubbo, including YAML, properties, and XML configurations. They show how to set the serialization type for protocols, consumers, and specific references.

LANGUAGE: yaml
CODE:
# application.yml (Spring Boot)
dubbo:
 protocol:
   serialization: kryo

LANGUAGE: properties
CODE:
# dubbo.properties
dubbo.protocol.serialization=kryo

# or
dubbo.consumer.serialization=kryo

# or
dubbo.reference.com.demo.DemoService.serialization=kryo

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="kryo" />

        <!-- or -->
<dubbo:consumer serialization="kryo" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="kryo" />

----------------------------------------

TITLE: Configuring Lazy Connections in Dubbo XML
DESCRIPTION: Configuration to enable lazy connection establishment, where connections are only created when the service is actually called.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" lazy="true" />

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Basic Java interface definition for a Dubbo service that provides a greeting functionality.

LANGUAGE: java
CODE:
public interface GreetingsService {
    String sayHi(String name);
}

----------------------------------------

TITLE: Implementing MonitorFactory Interface in Java
DESCRIPTION: Custom implementation of the MonitorFactory interface that creates monitor instances based on URL parameters.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.monitor.MonitorFactory;
import org.apache.dubbo.monitor.Monitor;
import org.apache.dubbo.common.URL;
 
public class XxxMonitorFactory implements MonitorFactory {
    public Monitor getMonitor(URL url) {
        return new XxxMonitor(url);
    }
}

----------------------------------------

TITLE: Advanced Protocol Options Configuration
DESCRIPTION: Comprehensive XML configuration showing all available protocol options including server, client, codec, serialization, and threading parameters.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" port="9090" server="netty" client="netty" codec="dubbo" serialization="hessian2" charset="UTF-8" threadpool="fixed" threads="100" queues="0" iothreads="9" buffer="8192" accepts="1000" payload="8388608" />

----------------------------------------

TITLE: Defining Protobuf IDL for Dubbo Service
DESCRIPTION: Example of defining a Dubbo service using Protobuf IDL. This method is suitable for teams with cross-language requirements and supports multi-language microservice development.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
option java_multiple_files = true;
package org.apache.dubbo.springboot.demo.idl;

message GreeterRequest {
  string name = 1;
}
message GreeterReply {
  string message = 1;
}

service Greeter{
  rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Configuring Dubbo Consumer with XML
DESCRIPTION: Configure a Dubbo service consumer using XML configuration. This file sets up the application, registry, and references the remote service.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- Provider application info for dependency calculation -->
    <dubbo:application name="dubbo-consumer-xml-demo"/>

    <!-- Use Nacos registry -->
    <dubbo:registry address="nacos://127.0.0.1:8848"/>

    <!-- Reference service interface -->
    <dubbo:reference id="demoService" interface="com.alibaba.dubbo.demo.service.DemoService" version="2.0.0"/>

</beans>

----------------------------------------

TITLE: Configuring Trusted Classes via Properties File
DESCRIPTION: Defines a list of trusted classes or packages for serialization. This configuration is typically placed in a file named 'security/serialize.allowlist' in the resources directory.

LANGUAGE: properties
CODE:
io.dubbo.test

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Define a simple Dubbo service interface in Java. This interface will be implemented by the service provider and called by the consumer.

LANGUAGE: Java
CODE:
package com.alibaba.dubbo.demo.service;

/**
 * DemoService
 *
 * @since 2.6.5
 */
public interface DemoService {

    String sayName(String name);

}

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Implementation class for the DemoService interface using @DubboService annotation for service registration.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {
    public String hello(String arg) {
        // put your microservice logic here
    }
}

----------------------------------------

TITLE: List Enabled Router Snapshots
DESCRIPTION: Command to get a list of services that have router snapshot collection enabled.

LANGUAGE: shell
CODE:
dubbo>getEnabledRouterSnapshot
com.dubbo.dubbointegration.BackendService

----------------------------------------

TITLE: Base Filter Interface Definition in Java
DESCRIPTION: Complete interface definition showing Filter structure with invoke method and listener interface for handling responses

LANGUAGE: java
CODE:
public interface BaseFilter {
    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;

    interface Listener {
        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);
        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);
    }
}

----------------------------------------

TITLE: Enabling Custom Protocol in YAML Configuration for Dubbo
DESCRIPTION: Demonstrates how to modify the protocol configuration in a YAML file (e.g., application.yml) to use the custom protocol in a Spring Boot application.

LANGUAGE: yaml
CODE:
# For Spring Boot, you can modify application.yml or application.properties
dubbo
  protocol
    name: customized

----------------------------------------

TITLE: Implementing RegistryService Interface in Java
DESCRIPTION: Java interface definition for RegistryService, which defines methods for registering, unregistering, subscribing, and unsubscribing services, as well as looking up registered information.

LANGUAGE: java
CODE:
public interface RegistryService {
    void register(URL url);
    void unregister(URL url);
    void subscribe(URL url, NotifyListener listener);
    void unsubscribe(URL url, NotifyListener listener);
    List<URL> lookup(URL url);
}

----------------------------------------

TITLE: Implementing IOC in Dubbo
DESCRIPTION: Dependency injection implementation in Dubbo using setter methods.

LANGUAGE: Java
CODE:
private T injectExtension(T instance) {
    if (objectFactory == null) {
        return instance;
    }
    try {
        for (Method method : instance.getClass().getMethods()) {
            if (!isSetter(method)) {
                continue;
            }
            if (method.getAnnotation(DisableInject.class) != null) {
                continue;
            }
            Class<?> pt = method.getParameterTypes()[0];
            if (ReflectUtils.isPrimitives(pt)) {
                continue;
            }
            try {
                String property = getSetterProperty(method);
                Object object = objectFactory.getExtension(pt, property);
                if (object != null) {
                    method.invoke(instance, object);
                }
            } catch (Exception e) {
                logger.error("Failed to inject via method " + method.getName()
                        + " of interface " + type.getName() + ": " + e.getMessage(), e);
            }
        }
    } catch (Exception e) {
        logger.error(e.getMessage(), e);
    }
    return instance;
}

----------------------------------------

TITLE: Configuring OpenTelemetry Tracing for Dubbo API
DESCRIPTION: This Java snippet demonstrates how to configure OpenTelemetry tracing programmatically for Dubbo API, including enabling tracing, setting sampling rate, propagation type, and OTLP exporter settings.

LANGUAGE: java
CODE:
TracingConfig tracingConfig = new TracingConfig();
// Enable dubbo tracing
tracingConfig.setEnabled(true);
// Set the sampling
tracingConfig.setSampling(new SamplingConfig(1.0f));
// Set Propagation, default is W3C, optional W3C/B3
tracingConfig.setPropagation(new PropagationConfig("W3C"));
// Set trace reporting
ExporterConfig exporterConfig = new ExporterConfig();
// Set up trace reporting to Zipkin
exporterConfig.setZipkin(new ExporterConfig.OtlpConfig("http://localhost:4317", Duration.ofSeconds(10), "none"));
tracingConfig.setExporter(exporterConfig);

----------------------------------------

TITLE: Configuring Native Image Maven Plugin
DESCRIPTION: XML configuration for the GraalVM native-image-maven-plugin, including execution goals, image name, main class, and build arguments.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.graalvm.nativeimage</groupId>
    <artifactId>native-image-maven-plugin</artifactId>
    <version>21.0.0.2</version>
    <executions>
        <execution>
            <goals>
                <goal>native-image</goal>
            </goals>
            <phase>package</phase>
        </execution>
    </executions>
    <configuration>
        <skip>false</skip>
        <imageName>demo-native-provider</imageName>
        <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
        <buildArgs>
            --no-fallback
            --initialize-at-build-time=org.slf4j.MDC
            --initialize-at-build-time=org.slf4j.LoggerFactory
            --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder
            --initialize-at-build-time=org.apache.log4j.helpers.Loader
            --initialize-at-build-time=org.apache.log4j.Logger
            --initialize-at-build-time=org.apache.log4j.helpers.LogLog
            --initialize-at-build-time=org.apache.log4j.LogManager
            --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent
            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory
            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter
            --initialize-at-build-time=org.eclipse.collections.api.factory.Sets
            --initialize-at-run-time=io.netty.channel.epoll.Epoll
            --initialize-at-run-time=io.netty.channel.epoll.Native
            --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop
            --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray
            --initialize-at-run-time=io.netty.channel.DefaultFileRegion
            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray
            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop
            --initialize-at-run-time=io.netty.channel.kqueue.Native
            --initialize-at-run-time=io.netty.channel.unix.Errors
            --initialize-at-run-time=io.netty.channel.unix.IovArray
            --initialize-at-run-time=io.netty.channel.unix.Limits
            --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger
            --initialize-at-run-time=io.netty.channel.unix.Socket
            --initialize-at-run-time=io.netty.channel.ChannelHandlerMask

            --report-unsupported-elements-at-runtime
            --allow-incomplete-classpath
            --enable-url-protocols=http
            -H:+ReportExceptionStackTraces
        </buildArgs>
    </configuration>
</plugin>

----------------------------------------

TITLE: Implementing Custom Filter in Java for Dubbo Provider
DESCRIPTION: This code snippet shows the implementation of a custom Filter called AppendedFilter. It intercepts the RPC invocation, modifies the result by appending a string, and returns the modified result.

LANGUAGE: java
CODE:
package org.apache.dubbo.samples.extensibility.filter.provider;

import org.apache.dubbo.rpc.Filter;
import org.apache.dubbo.rpc.Result;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.RpcException;
import org.apache.dubbo.rpc.AsyncRpcResult;

public class AppendedFilter implements Filter {

    @Override
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        Result result= invoker.invoke(invocation);
        // Obtain the returned value
        Result appResponse = ((AsyncRpcResult) result).getAppResponse();
        // Appended value
        appResponse.setValue(appResponse.getValue()+"'s customized AppendedFilter");
        return result;
    }
}

----------------------------------------

TITLE: Configuring Multi-Protocol Export in YAML for Apache Dubbo
DESCRIPTION: YAML configuration for setting up multi-protocol export in Apache Dubbo. It configures the Triple protocol as the main protocol and extends it with the Dubbo protocol.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-springboot-demo-provider
  protocol:
    name: tri
    port: -1
    ext-protocol: dubbo,

----------------------------------------

TITLE: Subscribing to Dubbo Services using ReferenceConfig in Java
DESCRIPTION: This snippet shows how to subscribe to services using ReferenceConfig and SimpleReferenceCache.

LANGUAGE: java
CODE:
private DemoService referService() {
    ReferenceConfig<DemoService> reference = new ReferenceConfig<>();
    reference.setInterfaceClass(DemoService.class);

    ReferenceCache cache = SimpleReferenceCache.getCache();
    try {
        return cache.get(reference);
    } catch (Exception e) {
        throw new RuntimeException(e.getMessage());
    }
}

----------------------------------------

TITLE: Configuring Dubbo Provider Serialization Settings in YAML
DESCRIPTION: YAML configuration example showing how to set up prefer-serialization and serialization protocols for Dubbo provider. This configuration enables a smooth transition from hessian2 to fastjson2 serialization while maintaining backward compatibility.

LANGUAGE: yaml
CODE:
dubbo.provider.prefer-serialization=fastjson2,hessian2
dubbo.provider.serialization=hessian2

----------------------------------------

TITLE: Adding OpenTelemetry Tracer Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the OpenTelemetry tracer dependency to a Maven project. It includes the micrometer-tracing-bridge-otel artifact from the io.micrometer group.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-otel</artifactId>
    <optional>true</optional>
</dependency>

----------------------------------------

TITLE: Implementing StickFirstStateRouter in Java
DESCRIPTION: Custom router implementation that maintains the first provider selection. It extends AbstractStateRouter and implements ConfigurationListener to handle provider selection logic and configuration changes.

LANGUAGE: java
CODE:
package org.apache.dubbo.samples.extensibility.router.consumer.router;

import org.apache.dubbo.common.URL;
import org.apache.dubbo.common.config.configcenter.ConfigChangeType;
import org.apache.dubbo.common.config.configcenter.ConfigChangedEvent;
import org.apache.dubbo.common.config.configcenter.ConfigurationListener;
import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
import org.apache.dubbo.common.logger.LoggerFactory;
import org.apache.dubbo.common.utils.CollectionUtils;
import org.apache.dubbo.common.utils.Holder;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.RpcException;
import org.apache.dubbo.rpc.cluster.router.RouterSnapshotNode;
import org.apache.dubbo.rpc.cluster.router.state.AbstractStateRouter;
import org.apache.dubbo.rpc.cluster.router.state.BitList;

public class StickFirstStateRouter<T> extends AbstractStateRouter<T> implements ConfigurationListener {
    public StickFirstStateRouter(URL url) {
        super(url);
    }

    public static final String NAME = "STICK_FIRST_ROUTER";
    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(StickFirstStateRouter.class);
    private volatile BitList<Invoker<T>> firstInvokers;

    @Override
    protected BitList<Invoker<T>> doRoute(BitList<Invoker<T>> invokers, URL url, Invocation invocation, boolean needToPrintMessage, Holder<RouterSnapshotNode<T>> routerSnapshotNodeHolder, Holder<String> messageHolder) throws RpcException {
        if (CollectionUtils.isEmpty(invokers)) {
            if (needToPrintMessage) {
                messageHolder.set("Directly Return. Reason: Invokers from previous router is empty.");
            }
            return invokers;
        }
        BitList<Invoker<T>> copy = invokers.clone();
        if (CollectionUtils.isEmpty(copy)) {
            this.firstInvokers = new BitList<>(BitList.emptyList());
            this.firstInvokers.add(copy.get(0));
        } else {
            this.firstInvokers = copy.and(invokers);
            if(CollectionUtils.isEmpty(this.firstInvokers)){
                this.firstInvokers.add(copy.get(0));
            }
        }
        return this.firstInvokers;
    }

    @Override
    public void process(ConfigChangedEvent event) {
        if (logger.isDebugEnabled()) {
            logger.debug("Notification of tag rule, change type is: " + event.getChangeType() + ", raw rule is:\n " +
                    event.getContent());
        }
        // Reset
        if (event.getChangeType().equals(ConfigChangeType.DELETED)) {
            this.firstInvokers = null;
        }
    }

    @Override
    public void stop() {
        super.stop();
        this.firstInvokers = null;
    }
}

----------------------------------------

TITLE: Method-Level Load Balance Configuration - Provider
DESCRIPTION: Shows how to configure method-level load balancing for a service provider using JavaConfig.

LANGUAGE: java
CODE:
@Configuration
public class DubboConfiguration {
    @Bean
    public ServiceBean demoService() {
        MethodConfig method = new MethodConfig();
        method.setName("sayHello");
        method.setLoadbalance("roundrobin");

        ServiceBean service = new ServiceBean();
        service.setInterface(DemoService.class);
        service.setRef(new DemoServiceImpl());
        service.addMethod(method);
        return service;
    }
}

----------------------------------------

TITLE: Defining Protocol Interface in Java
DESCRIPTION: The core Protocol interface that must be implemented by custom protocol extensions. It defines methods for exporting and referencing remote services.

LANGUAGE: java
CODE:
public interface Protocol {
    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;
    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;
}

----------------------------------------

TITLE: Dubbo Application Properties Configuration
DESCRIPTION: Properties configuration for Dubbo application using Kubernetes registry

LANGUAGE: properties
CODE:
dubbo.application.name=dubbo-samples-apiserver-provider
dubbo.application.metadataServicePort=20885
dubbo.registry.address=kubernetes://DEFAULT_MASTER_HOST?registry-type=service&duplicate=false&namespace=dubbo-demo&trustCerts=true
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880
dubbo.application.qosEnable=true
dubbo.application.qosAcceptForeignIp=true
dubbo.provider.token=true

----------------------------------------

TITLE: Configuring Zookeeper Registry in Dubbo-Go
DESCRIPTION: This snippet shows how to create a Dubbo instance with Zookeeper as the registry. It specifies the registry address and sets up the protocol for communication.

LANGUAGE: go
CODE:
ins, _ := dubbo.NewInstance(
	dubbo.WithName("dubbo_registry_nacos_server"),
	dubbo.WithRegistry(
		registry.WithZookeeper(),
		registry.WithAddress("127.0.0.1:2181"),
	),
	dubbo.WithProtocol(
		protocol.WithTriple(),
		protocol.WithPort(20000),
	),
)

srv, err := ins.NewServer()

----------------------------------------

TITLE: Consuming Dubbo Service in Java
DESCRIPTION: Example of consuming a Dubbo service using @DubboReference annotation in a Spring Bean.

LANGUAGE: java
CODE:
@Bean
public class Consumer {
    @DubboReference
    private DemoService demoService;
}

----------------------------------------

TITLE: Configuring Auto-Scanning in Dubbo Serialization
DESCRIPTION: Demonstrates how to configure auto-scanning and trust level for classes in Dubbo serialization.

LANGUAGE: java
CODE:
ApplicationConfig applicationConfig = new ApplicationConfig();
applicationConfig.setAutoTrustSerializeClass(true);
applicationConfig.setTrustSerializeClassLevel(3);

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" auto-trust-serialize-class="true" trust-serialize-class-level="3"/>

LANGUAGE: properties
CODE:
dubbo.application.auto-trust-serialize-class=true
dubbo.application.trust-serialize-class-level=3

LANGUAGE: properties
CODE:
-Ddubbo.application.auto-trust-serialize-class=true
-Ddubbo.application.trust-serialize-class-level=3

----------------------------------------

TITLE: Configuring SPI for EtcdServiceDiscoveryFactory
DESCRIPTION: This snippet shows the SPI configuration for the EtcdServiceDiscoveryFactory in the resources/META-INF/dubbo/org.apache.dubbo.registry.client.ServiceDiscoveryFactory file.

LANGUAGE: properties
CODE:
etcd=org.apache.dubbo.registry.etcd.EtcdServiceDiscoveryFactory

----------------------------------------

TITLE: Client Configuration for Java Interoperability
DESCRIPTION: Go code showing client setup for calling Java services using Triple protocol with Hessian2 serialization.

LANGUAGE: go
CODE:
cliDubbo, _ := client.NewClient(
	client.WithClientProtocolTriple(),
	client.WithClientSerialization(constant.Hessian2Serialization),
)

connDubbo, _ := cliDubbo.Dial("GreetProvider")
ipanic(err)
}
var respDubbo string
if err = connDubbo.CallUnary(context.Background(), []interface{}{"hello", "new", "dubbo"}, &respDubbo, "SayHello"); err != nil {
	logger.Errorf("GreetProvider.Greet err: %s", err)
	return
}

----------------------------------------

TITLE: Configuring Zookeeper Registry in Dubbo-Go
DESCRIPTION: This snippet shows how to create a Dubbo instance with Zookeeper as the registry. It specifies the registry address and sets up the protocol for communication.

LANGUAGE: go
CODE:
ins, _ := dubbo.NewInstance(
	dubbo.WithName("dubbo_registry_nacos_server"),
	dubbo.WithRegistry(
		registry.WithZookeeper(),
		registry.WithAddress("127.0.0.1:2181"),
	),
	dubbo.WithProtocol(
		protocol.WithTriple(),
		protocol.WithPort(20000),
	),
)

srv, err := ins.NewServer()

----------------------------------------

TITLE: Configuring Dubbo Consumer using API
DESCRIPTION: This snippet shows how to configure a Dubbo consumer programmatically using the API. It includes setting up application, registry, and reference configurations.

LANGUAGE: Java
CODE:
import com.alibaba.dubbo.rpc.config.ApplicationConfig;
import com.alibaba.dubbo.rpc.config.RegistryConfig;
import com.alibaba.dubbo.rpc.config.ConsumerConfig;
import com.alibaba.dubbo.rpc.config.ReferenceConfig;
import com.xxx.XxxService;

ApplicationConfig application = new ApplicationConfig();
application.setName("yyy");

RegistryConfig registry = new RegistryConfig();
registry.setAddress("10.20.130.230:9090");
registry.setUsername("aaa");
registry.setPassword("bbb");

ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
reference.setApplication(application);
reference.setRegistry(registry);
reference.setInterface(XxxService.class);
reference.setVersion("1.0.0");

XxxService xxxService = reference.get();

----------------------------------------

TITLE: Implementing Custom Protocol in Java
DESCRIPTION: Example implementation of a custom Protocol extension, including the main Protocol class, Exporter, and Invoker

LANGUAGE: java
CODE:
public class XxxProtocol implements Protocol {
    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
        return new XxxExporter(invoker);
    }
    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
        return new XxxInvoker(type, url);
    }
}

LANGUAGE: java
CODE:
public class XxxExporter<T> extends AbstractExporter<T> {
    public XxxExporter(Invoker<T> invoker) throws RemotingException{
        super(invoker);
        // ...
    }
    public void unexport() {
        super.unexport();
        // ...
    }
}

LANGUAGE: java
CODE:
public class XxxInvoker<T> extends AbstractInvoker<T> {
    public XxxInvoker(Class<T> type, URL url) throws RemotingException{
        super(type, url);
    }
    
    @Override
    protected Result doInvoke(Invocation invocation) throws Throwable {
        // ...
    }
}

----------------------------------------

TITLE: Implementing Callback Service in Java
DESCRIPTION: Implements the CallbackService interface with a map to store listeners and a daemon thread to trigger changes.

LANGUAGE: java
CODE:
package com.callback.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.callback.CallbackListener;
import com.callback.CallbackService;

public class CallbackServiceImpl implements CallbackService {
     
    private final Map<String, CallbackListener> listeners = new ConcurrentHashMap<String, CallbackListener>();
  
    public CallbackServiceImpl() {
        Thread t = new Thread(new Runnable() {
            public void run() {
                while(true) {
                    try {
                        for(Map.Entry<String, CallbackListener> entry : listeners.entrySet()){
                           try {
                               entry.getValue().changed(getChanged(entry.getKey()));
                           } catch (Throwable t) {
                               listeners.remove(entry.getKey());
                           }
                        }
                        Thread.sleep(5000); // Regularly trigger change notification
                    } catch (Throwable t) { // Fault tolerance
                        t.printStackTrace();
                    }
                }
            }
        });
        t.setDaemon(true);
        t.start();
    }
  
    public void addListener(String key, CallbackListener listener) {
        listeners.put(key, listener);
        listener.changed(getChanged(key)); // Send change notification
    }
     
    private String getChanged(String key) {
        return "Changed: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    }
}

----------------------------------------

TITLE: Configuring Aggregated Multi-Registry with Attachments in XML
DESCRIPTION: This XML snippet demonstrates how to configure an aggregated multi-registry with attachments in Dubbo. It adds zone and tag identifiers to registry URLs for traffic management.

LANGUAGE: xml
CODE:
<dubbo:registry address="multiple://127.0.0.1:2181?separator=;&reference-registry=zookeeper://address11?attachments=zone=hangzhou,tag=middleware;zookeeper://address21" />

----------------------------------------

TITLE: Testing Callback Implementation
DESCRIPTION: Test code that demonstrates the usage of async callbacks and result verification.

LANGUAGE: java
CODE:
IDemoService demoService = (IDemoService) context.getBean("demoService");
NotifyImpl notify = (NotifyImpl) context.getBean("demoCallback");
int requestId = 2;
Person ret = demoService.get(requestId);
Assert.assertEquals(null, ret);
//for Test：used to indicate that callback is called normally, the specific implementation is left to the business.
for (int i = 0; i < 10; i++) {
    if (!notify.ret.containsKey(requestId)) {
        Thread.sleep(200);
    } else {
        break;
    }
}
Assert.assertEquals(requestId, notify.ret.get(requestId).getId());

----------------------------------------

TITLE: Publishing Individual Dubbo Services using ServiceConfig in Java
DESCRIPTION: This snippet demonstrates how to directly call ServiceConfig.export() to publish individual services.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();
    demoServiceConfig.setInterface(DemoService.class);
    demoServiceConfig.setRef(new DemoServiceImpl());
    demoServiceConfig.setVersion("1.0.0");

    demoServiceConfig.export(); // this service will be registered to the default instance of DubboBootstrap.getInstance()
}

----------------------------------------

TITLE: Testing Dubbo Service with cURL
DESCRIPTION: cURL command to test the running Dubbo service using the Triple protocol.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50051/com.example.demo.dubbo.api.DemoService/sayHello/

----------------------------------------

TITLE: Basic Configuration Settings in Dubbo
DESCRIPTION: Example showing various basic configurations including registry, protocol, config center, metadata center, metrics and SSL settings using DubboBootstrap API.

LANGUAGE: java
CODE:
// Registry
RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://192.168.10.1:2181");
...

// Provider protocol configuration
ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("dubbo");
protocol.setPort(12345);
protocol.setThreads(200);
...

// Configuration Center
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://192.168.10.2:2181");
...

// Metadata Center
MetadataReportConfig metadataReport = new MetadataReportConfig();
metadataReport.setAddress("zookeeper://192.168.10.3:2181");
...

// Metrics
MetricsConfig metrics = new MetricsConfig();
metrics.setProtocol("dubbo");
...

// SSL
SslConfig ssl = new SslConfig();
ssl.setServerKeyCertChainPath("/path/ssl/server-key-cert-chain");
ssl.setServerPrivateKeyPath("/path/ssl/server-private-key");
...

// Provider configuration (default configuration for ServiceConfig)
ProviderConfig provider = new ProviderConfig();
provider.setGroup("demo");
provider.setVersion("1.0.0");
...

// Consumer configuration (default configuration for ReferenceConfig)
ConsumerConfig consumer = new ConsumerConfig();
consumer.setGroup("demo");
consumer.setVersion("1.0.0");
consumer.setTimeout(2000);
...

DubboBootstrap.getInstance()
    .application("demo-app")
    .registry(registry)
    .protocol(protocol)
    .configCenter(configCenter)
    .metadataReport(metadataReport)
    .module(new ModuleConfig("module"))
    .metrics(metrics)
  	.ssl(ssl)
  	.provider(provider)
  	.consumer(consumer)
  	...
  	.start();

----------------------------------------

TITLE: Implementing Dubbo Service with Annotations
DESCRIPTION: Example showing how to expose a Dubbo service using annotations with timeout configuration.

LANGUAGE: Java
CODE:
import com.alibaba.dubbo.config.annotation.Service;

@Service(timeout = 5000)
public class AnnotateServiceImpl implements AnnotateService { 
    // ...
}

----------------------------------------

TITLE: Implementing Base Filter Interface in Dubbo
DESCRIPTION: Core interface definition for implementing interceptors in Dubbo's invocation chain. Includes methods for request interception and response/error handling through the Listener interface.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

public interface BaseFilter {
    
    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;

    interface Listener {

        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);

        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);
    }
}

----------------------------------------

TITLE: Setting Custom Protocol in Java Configuration for Dubbo
DESCRIPTION: Shows how to programmatically set the custom protocol using Java code by creating a ProtocolConfig object and setting its name.

LANGUAGE: java
CODE:
ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("cutomized");

----------------------------------------

TITLE: Creating and Using ReferenceConfigCache in Java
DESCRIPTION: Demonstrates how to create a ReferenceConfig instance and cache it using ReferenceConfigCache. Shows the basic pattern for retrieving and using cached service references.

LANGUAGE: java
CODE:
ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
reference.setInterface(XxxService.class);
reference.setVersion("1.0.0");
......
ReferenceConfigCache cache = ReferenceConfigCache.getCache();
// cache.get方法中会缓存 Reference对象，并且调用ReferenceConfig.get方法启动ReferenceConfig
XxxService xxxService = cache.get(reference);
// 注意！ Cache会持有ReferenceConfig，不要在外部再调用ReferenceConfig的destroy方法，导致Cache内的ReferenceConfig失效！
// 使用xxxService对象
xxxService.sayHello();

----------------------------------------

TITLE: Implementing Base Filter Interface in Dubbo
DESCRIPTION: Core interface definition for implementing interceptors in Dubbo's invocation chain. Includes methods for request interception and response/error handling through the Listener interface.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

public interface BaseFilter {
    
    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;

    interface Listener {

        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);

        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service
DESCRIPTION: Implementation of the DemoService interface with business logic.

LANGUAGE: java
CODE:
public class DemoServiceImpl implements DemoService {
    @Override
    public String sayHello(String name) {
        return "Hello " + name + ", response from provider.";
    }
}

----------------------------------------

TITLE: Basic Configuration Settings in Dubbo
DESCRIPTION: Example showing various basic configurations including registry, protocol, config center, metadata center, metrics and SSL settings using DubboBootstrap API.

LANGUAGE: java
CODE:
// Registry
RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://192.168.10.1:2181");
...

// Provider protocol configuration
ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("dubbo");
protocol.setPort(12345);
protocol.setThreads(200);
...

// Configuration Center
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://192.168.10.2:2181");
...

// Metadata Center
MetadataReportConfig metadataReport = new MetadataReportConfig();
metadataReport.setAddress("zookeeper://192.168.10.3:2181");
...

// Metrics
MetricsConfig metrics = new MetricsConfig();
metrics.setProtocol("dubbo");
...

// SSL
SslConfig ssl = new SslConfig();
ssl.setServerKeyCertChainPath("/path/ssl/server-key-cert-chain");
ssl.setServerPrivateKeyPath("/path/ssl/server-private-key");
...

// Provider configuration (default configuration for ServiceConfig)
ProviderConfig provider = new ProviderConfig();
provider.setGroup("demo");
provider.setVersion("1.0.0");
...

// Consumer configuration (default configuration for ReferenceConfig)
ConsumerConfig consumer = new ConsumerConfig();
consumer.setGroup("demo");
consumer.setVersion("1.0.0");
consumer.setTimeout(2000);
...

DubboBootstrap.getInstance()
    .application("demo-app")
    .registry(registry)
    .protocol(protocol)
    .configCenter(configCenter)
    .metadataReport(metadataReport)
    .module(new ModuleConfig("module"))
    .metrics(metrics)
  	.ssl(ssl)
  	.provider(provider)
  	.consumer(consumer)
  	...
  	.start();

----------------------------------------

TITLE: Configuring Dubbo with Java Config
DESCRIPTION: Example of using Java Config to configure Dubbo services as an alternative to annotations.

LANGUAGE: java
CODE:
@Configuration
public class ProviderConfiguration {
    @Bean
    public ServiceBean demoService() {
        ServiceBean service = new ServiceBean();
        service.setInterface(DemoService.class);
        service.setRef(new DemoServiceImpl());
        service.setGroup("dev");
        service.setVersion("1.0.0");
        Map<String, String> parameters = new HashMap<>();
        service.setParameters(parameters);
        return service;
    }
}

----------------------------------------

TITLE: Disabling Filters for Specific Service Reference in Java
DESCRIPTION: Java annotation to disable specific filters for individual service references

LANGUAGE: java
CODE:
@DubboReference(filter="-accesslog,-tps")
private DemoService demoService;

----------------------------------------

TITLE: Configuring Delayed Service Registration in Java
DESCRIPTION: Demonstrates how to configure delayed service registration using the @DubboService annotation with a delay parameter to allow service warm-up time.

LANGUAGE: java
CODE:
@DubboService(delay = 5000)
public class DemoServiceImpl implements DemoService {
}

----------------------------------------

TITLE: Configuring Class Check Mode via ApplicationConfig in Java
DESCRIPTION: Sets the serialization check status to STRICT using ApplicationConfig in Java. This configuration ensures strict checks for allowed serialization classes.

LANGUAGE: java
CODE:
ApplicationConfig applicationConfig = new ApplicationConfig();
applicationConfig.setSerializeCheckStatus("STRICT");

----------------------------------------

TITLE: Implementing Async Service with AsyncContext
DESCRIPTION: Service implementation using Dubbo's AsyncContext for asynchronous execution without requiring CompletableFuture interface

LANGUAGE: java
CODE:
public class AsyncServiceImpl implements AsyncService {
    public String sayHello(String name) {
        final AsyncContext asyncContext = RpcContext.startAsync();
        new Thread(() -> {
            asyncContext.signalContextSwitch();
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            asyncContext.write("Hello " + name + ", response from provider.");
        }).start();
        return null;
    }
}

----------------------------------------

TITLE: Defining Basic Filter SPI Interface in Java
DESCRIPTION: Core SPI interface definition for Dubbo Filters with module-level scope

LANGUAGE: java
CODE:
@SPI(scope = ExtensionScope.MODULE)
public interface Filter extends BaseFilter {}

----------------------------------------

TITLE: Configuring Dubbo with Spring Boot YAML
DESCRIPTION: Example YAML configuration for setting up a Dubbo application with Spring Boot, including application name, protocol settings, and registry configuration using Nacos.

LANGUAGE: yaml
CODE:
dubbo:
  application:
      name: dubbo-springboot-demo-provider
      logger: slf4j
  protocol:
    name: dubbo
    port: 50052
  registry:
    address: nacos://${nacos.address:127.0.0.1}:8848?username=nacos&password=nacos

----------------------------------------

TITLE: Exception Handling in Triple Protocol
DESCRIPTION: Example of how to handle exceptions in the consumer side when using the Triple protocol.

LANGUAGE: java
CODE:
try {
	greeterProxy.echo(REQUEST_MSG);
} catch (YourCustomizedException e) {
	 e.printStackTrace();
 } catch (RpcException e) {
	e.printStackTrace();
}

----------------------------------------

TITLE: Using CompletableFuture Callback in Dubbo 2.7
DESCRIPTION: Java code example showing how to handle async responses using CompletableFuture's whenComplete callback in Dubbo 2.7.

LANGUAGE: Java
CODE:
CompletableFuture<String> future = asyncService.sayHiAsync("Han MeiMei");
future.whenComplete((retValue, exception) -> {
    if (exception == null) {
        System.out.println(retValue);
    } else {
        exception.printStackTrace();
    }
});

----------------------------------------

TITLE: Listing Dubbo Services with ls Command
DESCRIPTION: Lists all Provider and Consumer services registered in Dubbo, showing their registration status and address counts. The output includes service names, publication status for providers, and subscription details for consumers.

LANGUAGE: shell
CODE:
dubbo>ls
As Provider side:
+------------------------------------------------------------------------+---------------------+
|                          Provider Service Name                         |         PUB         |
+------------------------------------------------------------------------+---------------------+
|DubboInternal - UserRead/org.apache.dubbo.metadata.MetadataService:1.0.0|                     |
+------------------------------------------------------------------------+---------------------+
|               com.dubbo.dubbointegration.UserReadService               |nacos-A(Y)/nacos-I(Y)|
+------------------------------------------------------------------------+---------------------+
As Consumer side:
+-----------------------------------------+-----------------+
|          Consumer Service Name          |       NUM       |
+-----------------------------------------+-----------------+
|com.dubbo.dubbointegration.BackendService|nacos-AF(I-2,A-2)|
+-----------------------------------------+-----------------+

----------------------------------------

TITLE: Configuring Hystrix on Dubbo Provider
DESCRIPTION: Implementation of a Dubbo service with Hystrix command configuration for circuit breaker and timeout settings.

LANGUAGE: java
CODE:
@Service(version = "1.0.0")
public class HelloServiceImpl implements HelloService {
    @HystrixCommand(commandProperties = {
                    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),
                    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "2000") })
    @Override
    public String sayHello(String name) {
        // System.out.println("async provider received: " + name);
        // return "annotation: hello, " + name;
        throw new RuntimeException("Exception to show hystrix enabled.");
    }
}

----------------------------------------

TITLE: Adding Thrift Dependencies in Maven
DESCRIPTION: Maven dependency configuration required to use Thrift protocol in Dubbo projects. Specifies the libthrift library version 0.8.0.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.thrift</groupId>
    <artifactId>libthrift</artifactId>
    <version>0.8.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Multiple Protocols in Spring XML
DESCRIPTION: XML configuration for setting up multiple Dubbo protocols with different ports

LANGUAGE: xml
CODE:
<dubbo:protocol id="dubbo-id" name="dubbo" port="20880"/>
<dubbo:protocol id="triple-id" name="tri" port="50051"/>

----------------------------------------

TITLE: Generic Call Implementation via API
DESCRIPTION: Demonstrates how to configure and invoke generic calls using Dubbo's API approach with ReferenceConfig and GenericService.

LANGUAGE: java
CODE:
private GenericService genericService;

public static void main(String[] args) throws Exception {
	ApplicationConfig applicationConfig = new ApplicationConfig();
	applicationConfig.setName("generic-call-consumer");
	RegistryConfig registryConfig = new RegistryConfig();
	registryConfig.setAddress("zookeeper://127.0.0.1:2181");

	ReferenceConfig<GenericService> referenceConfig = new ReferenceConfig<>();
	referenceConfig.setInterface("org.apache.dubbo.samples.generic.call.api.HelloService");
	applicationConfig.setRegistry(registryConfig);
	referenceConfig.setApplication(applicationConfig);
	referenceConfig.setGeneric("true");
	// do not wait for result, 'false' by default
	referenceConfig.setAsync(true);
	referenceConfig.setTimeout(7000);

	genericService = referenceConfig.get();
}

----------------------------------------

TITLE: Configuring Nacos Registry in YAML
DESCRIPTION: YAML configuration to set up Nacos as the registry for Dubbo in a Spring Boot application.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848

----------------------------------------

TITLE: Implementing Dubbo Provider Bootstrap with XML Configuration
DESCRIPTION: This Java class demonstrates how to bootstrap a Dubbo provider using XML configuration, loading the Spring context from an XML file.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.provider;

import org.apache.dubbo.demo.service.DemoService;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.IOException;

/**
 * {@link DemoService} provider demo XML bootstrap
 */
public class DemoServiceProviderXmlBootstrap {

    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();
        context.setConfigLocation("/META-INF/spring/dubbo-provider-context.xml");
        context.refresh();
        System.out.println("DemoService provider (XML) is starting...");
        System.in.read();
    }
}

----------------------------------------

TITLE: Configuring Class Check Mode via Properties File
DESCRIPTION: Sets the serialization check status to STRICT using a properties file. This configuration can be used in Spring Properties or dubbo.properties.

LANGUAGE: properties
CODE:
dubbo.application.serialize-check-status=STRICT

----------------------------------------

TITLE: Configuring Class Check Mode via Spring XML
DESCRIPTION: Sets the serialization check status to STRICT using Spring XML configuration. This ensures strict checks for allowed serialization classes in a Spring context.

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" serialize-check-status="STRICT"/>

----------------------------------------

TITLE: Implementing Server-Side Streaming in Java
DESCRIPTION: Java implementation of a server-side streaming method in Dubbo.

LANGUAGE: java
CODE:
@Override
public void serverStream(GreeterRequest request, StreamObserver<GreeterReply> responseObserver) {
	LOGGER.info("receive request: {}", request.getName());
	for (int i = 0; i < 10; i++) {
		GreeterReply reply = GreeterReply.newBuilder().setMessage("reply from serverStream. " + i).build();
		responseObserver.onNext(reply);
	}
	responseObserver.onCompleted();
}

----------------------------------------

TITLE: Configuring Multiple Protocols in Spring Boot YAML
DESCRIPTION: Spring Boot configuration for setting up multiple protocols with different ports using application.yml

LANGUAGE: yaml
CODE:
dubbo:
  protocols:
    dubbo-id:
      name: dubbo
      port: 20880
    tri-id:
      name: tri
      port: 50051

----------------------------------------

TITLE: Configuring Dubbo Cluster Extensions in XML
DESCRIPTION: XML configuration examples showing how to specify cluster implementations at protocol and provider levels in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:protocol cluster="xxx" />
<!-- Default configuration; if <dubbo:protocol> does not configure cluster, this configuration will be used -->
<dubbo:provider cluster="xxx" />

----------------------------------------

TITLE: Defining Dubbo Services in Java
DESCRIPTION: This code snippet shows how to define Dubbo services using Java annotations. It demonstrates the @DubboService annotation for two service implementations.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {}

@DubboService
public class HelloServiceImpl implements HelloService {}

----------------------------------------

TITLE: Dubbo XML Configuration
DESCRIPTION: Example of configuring Dubbo components using XML format including application, registry and service definitions

LANGUAGE: xml
CODE:
  <dubbo:application name="demo-provider"/>
  <dubbo:config-center address="zookeeper://127.0.0.1:2181"/>

  <dubbo:registry address="zookeeper://127.0.0.1:2181" simplified="true"/>
  <dubbo:metadata-report address="redis://127.0.0.1:6379"/>
  <dubbo:protocol name="dubbo" port="20880"/>

  <bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>
  <dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>

----------------------------------------

TITLE: Testing Deployed Application
DESCRIPTION: Commands to verify the deployment and test the Dubbo service using port forwarding and curl

LANGUAGE: shell
CODE:
dubboctl dashboard admin
kubectl port-forward <pod-name> 50051:50051
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50051/com.example.demo.dubbo.api.DemoService/sayHello/

----------------------------------------

TITLE: Configuring Dubbo Provider
DESCRIPTION: Java configuration class for setting up the Dubbo provider with Spring.

LANGUAGE: java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.impl")
@PropertySource("classpath:/spring/dubbo-provider.properties")
static class ProviderConfiguration {}

----------------------------------------

TITLE: Creating Ephemeral Nodes in Zookeeper with Curator
DESCRIPTION: Implementation of ephemeral node creation in Zookeeper using Curator client, showing the handling of NodeExistsException.

LANGUAGE: java
CODE:
    public void createEphemeral(String path) {
        try {
            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);
        } catch (NodeExistsException e) {
        } catch (Exception e) {
            throw new IllegalStateException(e.getMessage(), e);
        }
    }

----------------------------------------

TITLE: Service Implementation with DubboService Annotation
DESCRIPTION: Implements the HelloService interface with concrete implementations of the defined methods.

LANGUAGE: java
CODE:
@DubboService
public class HelloServiceImpl implements HelloService {
    @Override
    public String sayHello(String name) {
        return "sayHello: " + name;
    }

    @Override
    public CompletableFuture<String> sayHelloAsync(String name) {
        // ...
    }

    @Override
    public CompletableFuture<Person> sayHelloAsyncComplex(String name) {
         // ...
    }

    @Override
    public CompletableFuture<GenericType<Person>> sayHelloAsyncGenericComplex(String name) {
         // ...
    }
}

----------------------------------------

TITLE: Generating jstack Log for Dubbo Triple Stream Error Analysis
DESCRIPTION: This command captures the stack trace of a Java process to diagnose the 'Failed to create Triple stream' error in Dubbo. It writes the output to a file named jstack.log for further analysis.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: UserSpecifiedAddressUtil Class for Setting Address
DESCRIPTION: Java utility class for setting the Address object before making a Dubbo RPC call.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.specifyaddress;

public class UserSpecifiedAddressUtil {
    
    public static void setAddress(Address address) { ... }
    
}

----------------------------------------

TITLE: Implementing Custom ExtensionFactory in Java
DESCRIPTION: Example of implementing a custom ExtensionFactory in Java. This class should implement the ExtensionFactory interface and provide logic for getting extensions based on type and name.

LANGUAGE: java
CODE:
package com.xxx;

import org.apache.dubbo.common.extension.ExtensionFactory;

public class XxxExtensionFactory implements ExtensionFactory {
    public Object getExtension(Class<?> type, String name) {
        // ...
    }
}

----------------------------------------

TITLE: UserSpecifiedAddressUtil Class for Setting Address
DESCRIPTION: Java utility class for setting the Address object before making a Dubbo RPC call.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.specifyaddress;

public class UserSpecifiedAddressUtil {
    
    public static void setAddress(Address address) { ... }
    
}

----------------------------------------

TITLE: Configuring Method-Level Timeout for DubboReference in Java
DESCRIPTION: Specifies a 5-second timeout for the sayHello method of DemoService on the consumer side.

LANGUAGE: java
CODE:
@DubboReference(methods = {@Method(name = "sayHello", timeout = 5000)})
private DemoService demoService;

----------------------------------------

TITLE: Maven Project Structure for Load Balance Extension
DESCRIPTION: Directory structure for implementing a custom load balance extension in Dubbo

LANGUAGE: text
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxLoadBalance.java (implements LoadBalance interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.rpc.cluster.LoadBalance (plain text file, content: xxx=com.xxx.XxxLoadBalance)

----------------------------------------

TITLE: Implementing Custom Protocol in Java for Dubbo SPI
DESCRIPTION: Provides a Java class that implements the org.apache.dubbo.rpc.Protocol interface for a custom Dubbo protocol. The @Activate annotation is used to automatically activate the extension.

LANGUAGE: java
CODE:
package com.spi.demo;
import org.apache.dubbo.rpc.Protocol;

@Activate
public class CustomizedProtocol implements Protocol {
	// ...
}

----------------------------------------

TITLE: Customizing Externalized Configuration in YAML
DESCRIPTION: YAML configuration to enable externalized configuration and specify custom configuration file key in Zookeeper

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: zookeeper://127.0.0.1:2181
    config-file: dubbo.properties

----------------------------------------

TITLE: Configuring Dubbo Server
DESCRIPTION: Server configuration code to register and start the Greeter service using Triple protocol.

LANGUAGE: java
CODE:
public class TriUnaryServer {
    public static void main(String[] args) throws IOException {
        ServiceConfig<Greeter> service = new ServiceConfig<>();
        service.setInterface(Greeter.class);
        service.setRef(new GreeterImpl());

        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        bootstrap.protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50052))
                .service(service)
                .start().await();
    }
}

----------------------------------------

TITLE: Configuring Call Interceptors in Dubbo XML
DESCRIPTION: Demonstrates how to configure call interceptors for consumers and providers using Dubbo XML configuration. This includes setting filters for individual references/services and default filters for all consumers/providers.

LANGUAGE: xml
CODE:
<dubbo:reference filter="xxx,yyy" />
<dubbo:consumer filter="xxx,yyy"/>
<dubbo:service filter="xxx,yyy" />
<dubbo:provider filter="xxx,yyy"/>

----------------------------------------

TITLE: Accessing Dubbo-go Service with cURL
DESCRIPTION: cURL command to access the Dubbo-go service using HTTP/1.1 POST request with JSON payload.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:20000/greet.GreetService/Greet

----------------------------------------

TITLE: Consumer Service Operation Metadata in JSON Format
DESCRIPTION: Shows the structure of service operation metadata reported by Dubbo consumers. This metadata includes configuration details used when subscribing to services.

LANGUAGE: json
CODE:
{
 "valid": "true",
 "side": "consumer",
 "application": "metadatareport-configcenter-consumer",
 "methods": "sayHello",
 "default.timeout": "6666",
 "dubbo": "2.0.2",
 "interface": "org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService",
 "version": "1.1.1",
 "revision": "1.1.1",
 "group": "d-test"
}

----------------------------------------

TITLE: Configuring Fastjson Serialization in YAML
DESCRIPTION: YAML configuration for enabling Fastjson serialization in Spring Boot applications using Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   serialization: fastjson

----------------------------------------

TITLE: Implementing Custom Compiler in Java for Dubbo
DESCRIPTION: Example of implementing a custom Compiler extension in Java for Dubbo. The class must implement the org.apache.dubbo.common.compiler.Compiler interface.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.compiler.Compiler;
 
public class XxxCompiler implements Compiler {
    public Object getExtension(Class<?> type, String name) {
        // ...
    }
}

----------------------------------------

TITLE: Maven Native Image Compilation Command
DESCRIPTION: Maven command to compile the Dubbo demo project to a native image using the native profile.

LANGUAGE: bash
CODE:
mvn clean package -P native -Dmaven.test.skip=true

----------------------------------------

TITLE: Bringing Dubbo Services Online
DESCRIPTION: Commands for bringing Dubbo services online. Supports bringing all services online or selective services using regex patterns. Used with delayed publishing configuration.

LANGUAGE: shell
CODE:
// Bring all services online
dubbo>online
OK

// Bring some services online based on regex
dubbo>online com.*
OK

----------------------------------------

TITLE: Configuring Weight Distribution Rules in Dubbo YAML
DESCRIPTION: YAML configuration for setting weight-based traffic distribution between service versions. This rule sets a weight of 25 for instances tagged with orderVersion=v2, creating an 80/20 traffic split with v1 instances.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: service
key: org.apache.dubbo.samples.OrderService
configs:
  - side: provider
    match:
      param:
        - key: orderVersion
          value:
            exact: v2
    parameters:
      weight: 25

----------------------------------------

TITLE: Adding Dubbo Native Dependency in Maven
DESCRIPTION: XML snippet to add the dubbo-native dependency to the Maven project file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-native</artifactId>
    <version>${project.version}</version>
</dependency>

----------------------------------------

TITLE: Implementing Custom Dubbo Transporter
DESCRIPTION: Example implementation of a custom Transporter interface that creates server and client instances for network communication.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.Transporter;
 
public class XxxTransporter implements Transporter {
    public Server bind(URL url, ChannelHandler handler) throws RemotingException {
        return new XxxServer(url, handler);
    }
    public Client connect(URL url, ChannelHandler handler) throws RemotingException {
        return new XxxClient(url, handler);
    }
}

----------------------------------------

TITLE: Adding Dubbo Native Dependency in Maven
DESCRIPTION: XML snippet to add the dubbo-native dependency to the Maven project file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-native</artifactId>
    <version>${project.version}</version>
</dependency>

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Provides a Java implementation of the DemoProvider interface, including logic for each method defined in the interface.

LANGUAGE: java
CODE:
public class DemoProviderImpl implements DemoProvider {
    public String sayHello(String name) {
        System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return "Hello " + name + ", response from provider: " + RpcContext.getContext().getLocalAddress();
    }
    @Override
    public String echo()  {
        System.out.println("receive....");
        return "pang";
    }
    @Override
    public void test() {
        System.out.println("test");
    }
    @Override
    public UserResponse getUserInfo(UserRequest request) {
        System.out.println(request);
        UserResponse response = new UserResponse();
        response.setStatus("ok");
        Map<String, String> map = new HashMap<String, String>();
        map.put("id", "1");
        map.put("name", "test");
        response.setInfo(map);
        return response;
    }
}

----------------------------------------

TITLE: Deploying Mall System on Kubernetes
DESCRIPTION: This command applies a Kubernetes configuration to deploy the entire mall project. The source code for this example can be found in the dubbo-samples repository.

LANGUAGE: sh
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/10-task/dubbo-samples-shop/deploy/All.yml

----------------------------------------

TITLE: Configuring Dubbo Consumer using Bootstrap API
DESCRIPTION: Example demonstrating how to configure and start a Dubbo consumer using DubboBootstrap API with reference configurations and service invocation.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoConsumer {
    public static void main(String[] args) {

        // Referencing remote service
        ReferenceConfig<DemoService> demoServiceReference = new ReferenceConfig<DemoService>();
        demoServiceReference.setInterface(DemoService.class);
        demoServiceReference.setVersion("1.0.0");

        ReferenceConfig<FooService> fooServiceReference = new ReferenceConfig<FooService>();
        fooServiceReference.setInterface(FooService.class);
        fooServiceReference.setVersion("1.0.0");

        // Simplifying configuration assembly and controlling the startup process through DubboBootstrap
        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        bootstrap.application("demo-consumer") // Application configuration
                .registry(new RegistryConfig("zookeeper://127.0.0.1:2181")) // Registry configuration
                .reference(demoServiceReference) // Add ReferenceConfig
                .reference(fooServiceReference)
                .start();    // Start Dubbo

        ...

        // Use demoService just like local bean
        // Get remote service interface proxy through Interface, no need to rely on ReferenceConfig object
        DemoService demoService = DubboBootstrap.getInstance().getCache().get(DemoService.class);
        demoService.sayHello("Dubbo");

        FooService fooService = fooServiceReference.get();
        fooService.greeting("Dubbo");
    }
}

----------------------------------------

TITLE: Configuring Hystrix on Dubbo Consumer
DESCRIPTION: Consumer-side configuration with Hystrix command and fallback method implementation for handling failures.

LANGUAGE: java
CODE:
    @Reference(version = "1.0.0")
    private HelloService demoService;

    @HystrixCommand(fallbackMethod = "reliable")
    public String doSayHello(String name) {
        return demoService.sayHello(name);
    }
    public String reliable(String name) {
        return "hystrix fallback value";
    }

----------------------------------------

TITLE: Configuring Multi-Protocol Export in Java for Apache Dubbo
DESCRIPTION: Java API configuration for setting up multi-protocol export in Apache Dubbo. It creates a ProtocolConfig object for the Triple protocol and extends it with the Dubbo protocol.

LANGUAGE: java
CODE:
ProtocolConfig config = new ProtocolConfig(CommonConstants.TRIPLE, -1);

config.setExtProtocol(CommonConstants.DUBBO+",");

----------------------------------------

TITLE: Using @Reference Annotation for Dubbo Service Consumption in Java
DESCRIPTION: Example of using the @Reference annotation to configure a Dubbo service consumer.

LANGUAGE: Java
CODE:
@Component
public class GreetingServiceConsumer {
    @Reference
    private GreetingService greetingService;

    public String doSayHello(String name) {
        return greetingService.sayHello(name);
    }
}

----------------------------------------

TITLE: Configuring Spring Cloud Server in YAML
DESCRIPTION: YAML configuration for a Spring Cloud application, specifying the server port, application name, and Nacos registry address.

LANGUAGE: yaml
CODE:
server:
  port: 8099
spring:
  application:
    name: spring-cloud-provider-for-dubbo
  cloud:
    nacos:
      serverAddr: 127.0.0.1:8848 #Registry Center

----------------------------------------

TITLE: Initializing Dubbo Consumer Application in Java
DESCRIPTION: Example code showing how to configure and start a Dubbo consumer application, including setting up ReferenceConfig and DubboBootstrap.

LANGUAGE: Java
CODE:
public class ConsumerApplication {
    public static void main(String[] args) {
            runWithBootstrap();
    }
    private static void runWithBootstrap() {
        ReferenceConfig<DemoService> reference = new ReferenceConfig<>();
        reference.setInterface(DemoService.class);
        reference.setGeneric("true");
        reference.setProtocol("");

        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        ApplicationConfig applicationConfig = new ApplicationConfig("dubbo-demo-api-consumer");
        applicationConfig.setQosEnable(false);
        applicationConfig.setQosPort(-1);
        bootstrap.application(applicationConfig)
            .registry(new RegistryConfig("zookeeper://8.131.79.126:2181"))
            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
            .reference(reference)
            .start();

        DemoService demoService = bootstrap.getCache().get(reference);
        String message = demoService.sayHello("dubbo");
        System.out.println(message);

        // generic invoke
        GenericService genericService = (GenericService) demoService;
        Object genericInvokeResult = genericService.$invoke("sayHello", new String[]{String.class.getName()},
            new Object[]{"dubbo generic invoke"});
        System.out.println(genericInvokeResult);
    }
}

----------------------------------------

TITLE: Defining Dubbo Spring Boot Application
DESCRIPTION: Java class with main method to start the Dubbo Spring Boot application using @EnableDubbo annotation.

LANGUAGE: java
CODE:
@SpringBootApplication
@EnableDubbo
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

----------------------------------------

TITLE: Configuring Retry Count in Dubbo-go Client
DESCRIPTION: This snippet demonstrates how to set the retry count when creating a new Dubbo-go client. It uses the client.WithClientRetries() method to specify the number of retries.

LANGUAGE: go
CODE:
cli, err := client.NewClient(
	client.WithClientURL("tri://127.0.0.1:20000"),
	client.WithClientRetries(3),
)

----------------------------------------

TITLE: Configuring SPI Implementation in Properties File for Dubbo
DESCRIPTION: Shows the content of the org.apache.dubbo.rpc.Protocol file that should be placed in the resources/META-INF/services/ directory. It maps the custom protocol name to the implementation class.

LANGUAGE: properties
CODE:
customized=com.spi.demo.CustomizedProtocol

----------------------------------------

TITLE: Configuring SPI Implementation in Properties File for Dubbo
DESCRIPTION: Shows the content of the org.apache.dubbo.rpc.Protocol file that should be placed in the resources/META-INF/services/ directory. It maps the custom protocol name to the implementation class.

LANGUAGE: properties
CODE:
customized=com.spi.demo.CustomizedProtocol

----------------------------------------

TITLE: Referencing Redis Service on Client Side in XML
DESCRIPTION: This snippet shows how to reference a Redis service on the client side using Dubbo's XML configuration. It includes examples of referencing a Map interface with a group, direct point-to-point connection, and using a custom interface.

LANGUAGE: xml
CODE:
<dubbo:reference id="store" interface="java.util.Map" group="member" />

LANGUAGE: xml
CODE:
<dubbo:reference id="store" interface="java.util.Map" url="redis://10.20.153.10:6379" />

LANGUAGE: xml
CODE:
<dubbo:reference id="store" interface="com.foo.StoreService" url="redis://10.20.153.10:6379" />

----------------------------------------

TITLE: Configuring Dubbo Consumer with Spring Annotations
DESCRIPTION: Configure a Dubbo service consumer using Spring annotations. This class enables Dubbo, sets up property sources, injects the remote service, and makes RPC calls.

LANGUAGE: Java
CODE:
package com.alibaba.dubbo.demo.consumer;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;
import com.alibaba.dubbo.demo.service.DemoService;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.PropertySource;

import javax.annotation.PostConstruct;
import java.io.IOException;

/**
 * {@link DemoService} consumer demo
 */
@EnableDubbo
@PropertySource(value = "classpath:/consumer-config.properties")
public class DemoServiceConsumerBootstrap {

    @Reference(version = "${demo.service.version}")
    private DemoService demoService;

    @PostConstruct
    public void init() {
        for (int i = 0; i < 10; i++) {
            System.out.println(demoService.sayName("Little Horse Brother (mercyblitz)"));
        }
    }

    public static void main(String[] args) throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(DemoServiceConsumerBootstrap.class);
        context.refresh();
        context.close();
    }
}

----------------------------------------

TITLE: Configuring Dubbo Maven Plugin for Native Image
DESCRIPTION: Maven plugin configuration for generating Native Image metadata using AOT processing

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-maven-plugin</artifactId>
    <version>${dubbo.version}</version>
    <configuration>
        <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>
    </configuration>
    <executions>
        <execution>
            <phase>process-sources</phase>
            <goals>
                <goal>dubbo-process-aot</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Adding Dubbo and Nacos Dependencies
DESCRIPTION: Maven dependencies required for integrating Dubbo with Nacos registration center.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.dubbo</groupId>
        <artifactId>dubbo</artifactId>
        <version>3.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.alibaba.nacos</groupId>
      <artifactId>nacos-client</artifactId>
      <version>2.1.0</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Loading Tags from Environment Variables
DESCRIPTION: Configuration to load tag values from specified environment variables using dubbo.env.keys

LANGUAGE: properties
CODE:
-Ddubbo.env.keys = "DUBBO_TAG1, DUBBO_TAG2"

DUBBO_ENV_KEYS = "DUBBO_TAG1, DUBBO_TAG2"

----------------------------------------

TITLE: Implementing Go Generic Client
DESCRIPTION: Go implementation of a generic client that makes remote calls to the Java server using Triple protocol and hessian2 serialization. Includes configuration setup and service invocation.

LANGUAGE: go
CODE:
// Initialize Reference Configuration
refConf := config.NewReferenceConfigBuilder().
  SetInterface("org.apache.dubbo.UserProvider").
  SetRegistryIDs("zk").
  SetProtocol(tripleConst.TRIPLE).
  SetGeneric(true).
  SetSerialization("hessian2").
  Build()

// Construct Root Configuration, importing registry module
rootConfig := config.NewRootConfigBuilder().
  AddRegistry("zk", config.NewRegistryConfigWithProtocolDefaultPort("zookeeper")).
  Build()

// Reference Configuration initialization, as service discovery needs to pass in the configured rootConfig
if err := refConf.Init(rootConfig); err != nil{
  panic(err)
}

// Generic call loading, service discovery
refConf.GenericLoad(appName)

time.Sleep(time.Second)

// Initiating a generic call
resp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(
  context.TODO(),
  "getUser1",
  []string{"java.lang.String"},
  []hessian.Object{"A003"},
)

if err != nil {
  panic(err)
}
logger.Infof("GetUser1(userId string) res: %+v", resp)

----------------------------------------

TITLE: Installing Dubbo Admin on VM
DESCRIPTION: Instructions for downloading and running Dubbo Admin on a virtual machine.

LANGUAGE: shell
CODE:
curl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -

ln -s dubbo-admin-0.1.0/bin/dubbo-admin /usr/local/bin/dubbo-admin

dubbo-admin run -f override-configuration.yml

----------------------------------------

TITLE: Adding Hessian Protocol Dependencies in Maven XML
DESCRIPTION: XML configuration for adding Hessian protocol dependencies to a Maven project. Includes both the Dubbo RPC Hessian module and the Hessian library itself.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-rpc-hessian</artifactId>
    <version>3.3.0</version>
</dependency>

LANGUAGE: XML
CODE:
<dependency>
    <groupId>com.caucho</groupId>
    <artifactId>hessian</artifactId>
    <version>4.0.7</version>
</dependency>

----------------------------------------

TITLE: Querying Warned Classes via Telnet in Dubbo
DESCRIPTION: This snippet demonstrates how to use the 'serializeWarnedClasses' command through a telnet connection to view the list of warned classes in Dubbo's serialization security audit.

LANGUAGE: bash
CODE:
> telnet 127.0.0.1 22222                          
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
   ___   __  __ ___   ___   ____     
  / _ \ / / / // _ ) / _ ) / __ \  
 / // // /_/ // _  |/ _  |/ /_/ /    
/____/ \____//____//____/ \____/   
dubbo>serializeWarnedClasses
WarnedClasses: 
io.dubbo.test.NotSerializable
io.dubbo.test2.NotSerializable
io.dubbo.test2.OthersSerializable
org.apache.dubbo.samples.NotSerializable


dubbo>

----------------------------------------

TITLE: Configuring Nacos Registry with Custom Group
DESCRIPTION: YAML configuration to set up Nacos registry with a custom group.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848
   group: dubbo

----------------------------------------

TITLE: Defining Java Interface Service for Triple Protocol
DESCRIPTION: Example of defining a service using Java Interface, suitable for Dubbo veteran users and teams without cross-language requirements.

LANGUAGE: java
CODE:
public interface DemoService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Configuring Dubbo Metadata Reporting in Properties File
DESCRIPTION: Demonstrates how to configure Dubbo metadata reporting settings in a properties file. This includes settings for the metadata report address, authentication, retry mechanisms, and reporting behavior.

LANGUAGE: properties
CODE:
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181
dubbo.metadata-report.username=xxx         ## optional
dubbo.metadata-report.password=xxx         ## optional
dubbo.metadata-report.retry-times=30       ## optional, default is 100
dubbo.metadata-report.retry-period=5000    ## optional, default is 3000
dubbo.metadata-report.cycle-report=false   ## optional, default is true
dubbo.metadata-report.sync.report=false    ## optional, default is false

----------------------------------------

TITLE: Configuring ExporterListener Extension Properties
DESCRIPTION: Properties file configuration for registering the ExporterListener implementation with Dubbo's extension system.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxExporterListener

----------------------------------------

TITLE: Implementing Custom Exchanger in Java
DESCRIPTION: Example implementation of the Exchanger interface showing how to create custom exchange server and client bindings.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.exchange.Exchanger;
 
 
public class XxxExchanger implements Exchanger {
    public ExchangeServer bind(URL url, ExchangeHandler handler) throws RemotingException {
        return new XxxExchangeServer(url, handler);
    }
    public ExchangeClient connect(URL url, ExchangeHandler handler) throws RemotingException {
        return new XxxExchangeClient(url, handler);
    }
}

----------------------------------------

TITLE: Configuring Dubbo Protocol with Shorthand Notation
DESCRIPTION: Example of configuring a Dubbo protocol using shorthand notation in XML format.

LANGUAGE: xml
CODE:
<dubbo:protocol name="jms" p:queue="xxx" />

----------------------------------------

TITLE: Configuring Business-Based Service Calls in XML
DESCRIPTION: This XML configuration shows how to set up business-based service calls in Dubbo. It defines separate registries for Chinese and international sites and references services from both.

LANGUAGE: xml
CODE:
<!-- Multi-registry configuration -->
<dubbo:registry id="chinaRegistry" address="10.20.141.150:9090" />
<dubbo:registry id="intlRegistry" address="10.20.154.177:9010" default="false" />
<!-- Reference the Chinese site's service -->
<dubbo:reference id="chinaHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="chinaRegistry" />
<!-- Reference the international site's service -->
<dubbo:reference id="intlHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="intlRegistry" />

----------------------------------------

TITLE: Starting Dubbo-go Server
DESCRIPTION: Go code to create and start a Dubbo-go server, registering the implemented GreetService.

LANGUAGE: go
CODE:
func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
			protocol.WithTriple(),
		),
	)
	if err != nil {
		panic(err)
	}

	if err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
		panic(err)
	}

	if err := srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Configuring Tags via JVM Arguments and Environment Variables
DESCRIPTION: Methods to specify tags using dubbo.labels or DUBBO_LABELS for adding key-value pairs to URLs

LANGUAGE: properties
CODE:
-Ddubbo.labels = "tag1=value1; tag2=value2"

DUBBO_LABELS = "tag1=value1; tag2=value2"

----------------------------------------

TITLE: Disable Router Snapshot Collection
DESCRIPTION: Command to disable router result collection mode for specified services. Supports pattern matching for service names.

LANGUAGE: shell
CODE:
dubbo>disableRouterSnapshot com.dubbo.*
OK. Found service count: 1

----------------------------------------

TITLE: Configuring and Exporting Dubbo Service Provider in Java
DESCRIPTION: Sets up and exports a Dubbo service provider using ServiceConfig and various configuration objects.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) throws IOException {
        ServiceConfig<GreetingsService> service = new ServiceConfig<>();
        service.setApplication(new ApplicationConfig("first-dubbo-provider"));
        service.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
        service.setInterface(GreetingsService.class);
        service.setRef(new GreetingsServiceImpl());
        service.export();
        System.in.read();
    }
}

----------------------------------------

TITLE: Configuring Service-Level Token Verification in Dubbo XML
DESCRIPTION: Enable token verification for a specific service interface. This can use either a random UUID-generated token or a fixed token string.

LANGUAGE: xml
CODE:
<!-- Random token, generated using UUID -->
<dubbo:service interface="com.foo.BarService" token="true" />

LANGUAGE: xml
CODE:
<!-- Fixed token, equivalent to a password -->
<dubbo:service interface="com.foo.BarService" token="123456" />

----------------------------------------

TITLE: Configuring Service-Level Token Verification in Dubbo XML
DESCRIPTION: Enable token verification for a specific service interface. This can use either a random UUID-generated token or a fixed token string.

LANGUAGE: xml
CODE:
<!-- Random token, generated using UUID -->
<dubbo:service interface="com.foo.BarService" token="true" />

LANGUAGE: xml
CODE:
<!-- Fixed token, equivalent to a password -->
<dubbo:service interface="com.foo.BarService" token="123456" />

----------------------------------------

TITLE: Multiple Registry Centers Configuration in YAML
DESCRIPTION: Example of configuring multiple registry centers with different addresses and modes.

LANGUAGE: yaml
CODE:
dubbo:
 registries:
  beijingRegistry:
   register-mode: instance
   address: zookeeper://localhost:2181
  shanghaiRegistry:
   register-mode: instance
   address: zookeeper://localhost:2182

----------------------------------------

TITLE: Configuring Multi-Protocol Export in XML for Apache Dubbo
DESCRIPTION: XML configuration for exporting multiple protocols in Apache Dubbo. It sets up the dubbo protocol with port -1 and extends it with the Triple protocol.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" port="-1" ext-protocol="tri,"/>

<bean id="greetingService" class="org.apache.dubbo.demo.provider.GreetingServiceImpl"/>

<dubbo:service delay="5000" version="1.0.0" group="greeting" timeout="5000" interface="org.apache.dubbo.demo.GreetingService" ref="greetingService" protocol="dubbo"/>

----------------------------------------

TITLE: Configuring Dubbo Service Consumer with Java Config in Java
DESCRIPTION: Example of using Java Config and @EnableDubbo to configure and assemble Dubbo service consumers.

LANGUAGE: Java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.action")
@ComponentScan(value = {"com.alibaba.dubbo.samples.action"})
static class ConsumerConfiguration {
    @Bean
    public ApplicationConfig applicationConfig() {
        ApplicationConfig applicationConfig = new ApplicationConfig();
        applicationConfig.setName("dubbo-annotation-consumer");
        return applicationConfig;
    }

    @Bean
    public ConsumerConfig consumerConfig() {
        ConsumerConfig consumerConfig = new ConsumerConfig();
        consumerConfig.setTimeout(3000);
        return consumerConfig;
    }

    @Bean
    public RegistryConfig registryConfig() {
        RegistryConfig registryConfig = new RegistryConfig();
        registryConfig.setProtocol("zookeeper");
        registryConfig.setAddress("localhost");
        registryConfig.setPort(2181);
        return registryConfig;
    }
}

----------------------------------------

TITLE: Spring Web Migration to Triple X
DESCRIPTION: Example demonstrating how to migrate existing Spring Web controllers to Triple X with minimal code changes. Shows the zero-intrusive migration approach using @DubboService and @RestController annotations.

LANGUAGE: java
CODE:
@DubboService // Only need to add service publishing configuration
@RestController
public class DemoController {
   @GetMapping("/spring-test")
   public String sayHello(@RequestParam("name") String name) {
       return "Hello " + name;
   }
}

----------------------------------------

TITLE: Configuring Weighted Registries in XML
DESCRIPTION: This XML configuration demonstrates how to set up weighted registries in Dubbo. It assigns different weights to registries for load balancing purposes.

LANGUAGE: xml
CODE:
<dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" weight="100"/>
<dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" weight="10" />

----------------------------------------

TITLE: Configuring Service-Level Token Verification in Dubbo XML
DESCRIPTION: Enable token verification for a specific service interface. This can use either a random UUID-generated token or a fixed token string.

LANGUAGE: xml
CODE:
<!-- Random token, generated using UUID -->
<dubbo:service interface="com.foo.BarService" token="true" />

LANGUAGE: xml
CODE:
<!-- Fixed token, equivalent to a password -->
<dubbo:service interface="com.foo.BarService" token="123456" />

----------------------------------------

TITLE: Setting Default Protocol to injvm in Dubbo XML Configuration
DESCRIPTION: This code sets the default protocol for providers to injvm in Dubbo's XML configuration, ensuring that services are exposed locally by default.

LANGUAGE: xml
CODE:
<dubbo:provider protocol="injvm" />

----------------------------------------

TITLE: Implementing HTTP2DubboService
DESCRIPTION: This Java code implements the HTTP2DubboService interface, using reflection to invoke the target Dubbo method based on the HTTP request.

LANGUAGE: java
CODE:
@DubboService
public class HTTP2DubboServiceImpl implements HTTP2DubboService {

    @Autowired
    private ApplicationContext appContext;

    @Override
    public Map<String, Object> invoke(Map<String, Object> context) throws Exception {
        DubboInvocation invocation = JSONObject.parseObject((byte[]) context.get("body"), DubboInvocation.class);
        Object[] args = new Object[invocation.getParameters().size()];
        for (int i = 0; i < args.length; i++) {
            DubboInvocationParameter parameter = invocation.getParameters().get(i);
            args[i] = JSONObject.parseObject(parameter.getValue(), Class.forName(parameter.getType()));
        }

        Object svc = appContext.getBean(Class.forName(invocation.getService()));
        Object result = svc.getClass().getMethod(invocation.getMethod()).invoke(args);
        Map<String, Object> httpResponse = new HashMap<>();
        httpResponse.put("status", 200);
        httpResponse.put("body", JSONObject.toJSONString(result));
        return httpResponse;
    }

}

----------------------------------------

TITLE: Configuring Dubbo Application Properties
DESCRIPTION: YAML configuration for setting up Dubbo application properties including application name, protocol, and registry settings.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-springboot-demo-provider
    logger: slf4j
  protocol:
    name: tri
    port: -1
  registry:
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Configuring Dubbo Application Properties
DESCRIPTION: YAML configuration for setting up Dubbo application properties including application name, protocol, and registry settings.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-springboot-demo-provider
    logger: slf4j
  protocol:
    name: tri
    port: -1
  registry:
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Enable Router Snapshot Collection
DESCRIPTION: Command to enable router result collection mode for specified services. Supports pattern matching for service names.

LANGUAGE: shell
CODE:
dubbo>enableRouterSnapshot com.dubbo.*
OK. Found service count: 1. This will cause performance degradation, please be careful!

----------------------------------------

TITLE: Configuring Serialization Protocols in Dubbo
DESCRIPTION: Shows how to configure serialization protocols in Dubbo using Spring Boot properties and XML configuration.

LANGUAGE: properties
CODE:
dubbo.provider.prefer-serialization=fastjson2,hessian2
dubbo.provider.serialization=hessian2

LANGUAGE: xml
CODE:
<dubbo:provider serialization="hessian2" prefer-serialization="fastjson2,hessian2" />

----------------------------------------

TITLE: Configuring TLS for Dubbo Consumer in Java
DESCRIPTION: This snippet shows how to configure TLS for a Dubbo consumer. It includes setting up the SSL configuration with client certificates and optionally enabling mutual TLS authentication.

LANGUAGE: java
CODE:
if (!mutualTls) {}
    sslConfig.setClientTrustCertCollectionPath(args[0]);
} else {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
    sslConfig.setClientKeyCertChainPath(args[1]);
    sslConfig.setClientPrivateKeyPath(args[2]);
}

----------------------------------------

TITLE: Implementing RouterFactory in Java for Dubbo
DESCRIPTION: Example of implementing the RouterFactory interface to create a custom Router extension in Dubbo. This class should be placed in the appropriate package structure and registered in the META-INF/dubbo directory.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.cluster.RouterFactory;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.RpcException;
 
public class XxxRouterFactory implements RouterFactory {
    public Router getRouter(URL url) {
        // ...
    }
}

----------------------------------------

TITLE: Defining Callback Listener Interface in Java
DESCRIPTION: Defines the CallbackListener interface with a method to handle changes.

LANGUAGE: java
CODE:
package com.callback;

public interface CallbackListener {
    void changed(String msg);
}

----------------------------------------

TITLE: Configuring Validation Extension in Dubbo XML
DESCRIPTION: XML configuration for enabling validation on Dubbo services and providers. It demonstrates how to specify validation implementations for specific services or as a default for all providers.

LANGUAGE: xml
CODE:
<dubbo:service validation="xxx,yyy" />
<!-- Default value setting, when <dubbo:service> does not configure the validation attribute, use this configuration -->
<dubbo:provider validation="xxx,yyy" />

----------------------------------------

TITLE: Basic Access Log Configuration YAML
DESCRIPTION: YAML configuration for enabling basic access logging across all providers

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
configs:
  - side: provider
    parameters:
      accesslog: true

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Implement the Dubbo service interface with a class annotated with @Service. This class provides the actual implementation of the service method.

LANGUAGE: Java
CODE:
package com.alibaba.dubbo.demo.service;

import com.alibaba.dubbo.config.annotation.Service;
import com.alibaba.dubbo.rpc.RpcContext;

import org.springframework.beans.factory.annotation.Value;

/**
 * Default {@link DemoService}
 *
 * @since 2.6.5
 */
@Service(version = "${demo.service.version}")
public class DefaultService implements DemoService {

    @Value("${demo.service.name}")
    private String serviceName;

    public String sayName(String name) {
        RpcContext rpcContext = RpcContext.getContext();
        return String.format("Service [name :%s , port : %d] %s(\"%s\") : Hello,%s",
                serviceName,
                rpcContext.getLocalPort(),
                rpcContext.getMethodName(),
                name,
                name);
    }
}

----------------------------------------

TITLE: Defining HTTP2DubboService Interface
DESCRIPTION: This Java code defines the HTTP2DubboService interface for handling more complex HTTP to Dubbo transformations.

LANGUAGE: java
CODE:
public class DubboInvocationParameter {
    private String type;
    private String value;
}

public class DubboInvocation {
    private String service;
    private String method;
    private DubboInvocationParameter[] parameters;
}

public interface HTTP2DubboService {
    Map<String, Object> invoke(Map<String, Object> context)  throws Exception;
}

----------------------------------------

TITLE: Configuring TLS for Dubbo Consumer in Java
DESCRIPTION: This snippet shows how to configure TLS for a Dubbo consumer. It includes setting up the SSL configuration with client certificates and optionally enabling mutual TLS authentication.

LANGUAGE: java
CODE:
if (!mutualTls) {}
    sslConfig.setClientTrustCertCollectionPath(args[0]);
} else {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
    sslConfig.setClientKeyCertChainPath(args[1]);
    sslConfig.setClientPrivateKeyPath(args[2]);
}

----------------------------------------

TITLE: Implementing Custom QoS Permission Checker in Java
DESCRIPTION: Example of implementing a custom PermissionChecker interface for Dubbo QoS anonymous access permission verification. This class should be placed in the appropriate package structure and implement the access method.

LANGUAGE: java
CODE:
package com.xxx.qos.permission;

import org.apache.dubbo.qos.permission.PermissionChecker;

public class XxxAnonymousAccessPermissionChecker implements PermissionChecker {

    @Override
    public boolean access(CommandContext commandContext, PermissionLevel defaultCmdRequiredPermissionLevel) {
      // ...
    }
}

----------------------------------------

TITLE: Configuring ExtensionFactory in Dubbo XML
DESCRIPTION: Example of how to configure the ExtensionFactory in Dubbo's XML configuration. This snippet sets the compiler to use the JDK.

LANGUAGE: xml
CODE:
<dubbo:application compiler="jdk" />

----------------------------------------

TITLE: Configuring gRPC Version in Dubbo Dependencies
DESCRIPTION: Updates the gRPC version in the dubbo-dependencies-bom file to ensure compatibility.

LANGUAGE: xml
CODE:
<grpc.version>1.41.0</grpc.version>

----------------------------------------

TITLE: Basic ReferenceConfig Cache Usage in Java
DESCRIPTION: Demonstrates how to create and use ReferenceConfigCache to cache ReferenceConfig instances. Shows the basic setup of a service reference and retrieval from cache.

LANGUAGE: java
CODE:
ReferenceConfig<XxxService> reference = new ReferenceConfig<XxxService>();
reference.setInterface(XxxService.class);
reference.setVersion("1.0.0");
......
ReferenceConfigCache cache = ReferenceConfigCache.getCache();
// The cache.get method will cache the Reference object and invoke ReferenceConfig.get to start ReferenceConfig
XxxService xxxService = cache.get(reference);
// Note! The cache will hold the ReferenceConfig, do not call the destroy method of ReferenceConfig externally, as this will invalidate the ReferenceConfig in the cache!
// Use xxxService object
xxxService.sayHello();

----------------------------------------

TITLE: Configuring Dubbo Registry in Spring Boot YAML
DESCRIPTION: Demonstrates how to configure the Dubbo registry address in a Spring Boot application's YAML configuration file. It shows the basic syntax and examples for single and cluster addresses.

LANGUAGE: yaml
CODE:
dubbo
 registry
  address: {protocol}://{cluster-address}

----------------------------------------

TITLE: Multi-Connection Service Configuration
DESCRIPTION: XML configuration for setting up multiple connections for services and references.

LANGUAGE: xml
CODE:
<dubbo:service interface="..." connections="1"/>
<dubbo:reference interface="..." connections="1"/>

----------------------------------------

TITLE: Setting Load Balance on Consumer Interface
DESCRIPTION: Demonstrates configuring load balancing strategy at the service consumer level using @DubboReference annotation.

LANGUAGE: java
CODE:
@DubboReference(loadbalance = "roundrobin")
private DemoService demoService;

----------------------------------------

TITLE: Implementing Dubbo Service with Version and Group - V2
DESCRIPTION: Second implementation of the DevelopService interface using group2 and version 2.0 annotations.

LANGUAGE: java
CODE:
@DubboService(group = "group2", version = "2.0")
public class DevelopProviderServiceV2 implements DevelopService{
    @Override
    public String invoke(String param) {
        StringBuilder s = new StringBuilder();
        s.append("ServiceV2 param:").append(param);
        return s.toString();
    }
}

----------------------------------------

TITLE: Implementing Custom Registry in Java
DESCRIPTION: Example implementation of a custom Registry in Java, providing stubs for the required methods defined in the Registry interface.

LANGUAGE: java
CODE:
package com.xxx;

import org.apache.dubbo.registry.Registry;
import org.apache.dubbo.registry.NotifyListener;
import org.apache.dubbo.common.URL;

public class XxxRegistry implements Registry {
    public void register(URL url) {
        // ...
    }
    public void unregister(URL url) {
        // ...
    }
    public void subscribe(URL url, NotifyListener listener) {
        // ...
    }
    public void unsubscribe(URL url, NotifyListener listener) {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Client-Side Method Caching in Dubbo Annotations
DESCRIPTION: Java annotation configuration for enabling LRU caching at the method level using @DubboReference and @Method.

LANGUAGE: java
CODE:
@DubboReference(methods = {@Method(name="sayHello",cache = "lru")})
private DemoService demoService;

----------------------------------------

TITLE: Advanced Mock Configuration Examples in XML
DESCRIPTION: Demonstrates various mock configurations including return values, exceptions, and force/fail behaviors.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="return null" />

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="throw"/>

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="force:return fake"/>

LANGUAGE: xml
CODE:
<dubbo:reference id="demoService" check="false" interface="com.foo.BarService">
    <dubbo:parameter key="sayHello.mock" value="force:return fake"/>
</dubbo:reference>

----------------------------------------

TITLE: Configuring Dubbo Protocol
DESCRIPTION: YAML configuration for the Dubbo protocol on the provider side.

LANGUAGE: yaml
CODE:
dubbo:
  protocol:
    name: dubbo
    port: 20880

----------------------------------------

TITLE: Initializing Config Center in Dubbo
DESCRIPTION: Core method for starting and initializing configuration center functionality in Dubbo, including loading configurations, validating settings, and setting up dynamic configuration.

LANGUAGE: java
CODE:
private void startConfigCenter() {
    configManager.loadConfigsOfTypeFromProps(ApplicationConfig.class);
    if (StringUtils.isBlank(applicationModel.getModelName())) {
        applicationModel.setModelName(applicationModel.tryGetApplicationName());
    }
    configManager.loadConfigsOfTypeFromProps(ConfigCenterConfig.class);
    useRegistryAsConfigCenterIfNecessary();
    Collection<ConfigCenterConfig> configCenters = configManager.getConfigCenters();
    if (CollectionUtils.isEmpty(configCenters)) {
        ConfigCenterConfig configCenterConfig = new ConfigCenterConfig();
        configCenterConfig.setScopeModel(applicationModel);
        configCenterConfig.refresh();
        ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);
        if (configCenterConfig.isValid()) {
            configManager.addConfigCenter(configCenterConfig);
            configCenters = configManager.getConfigCenters();
        }
    } else {
        for (ConfigCenterConfig configCenterConfig : configCenters) {
            configCenterConfig.refresh();
            ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);
        }
    }
    if (CollectionUtils.isNotEmpty(configCenters)) {
        CompositeDynamicConfiguration compositeDynamicConfiguration = new CompositeDynamicConfiguration();
        for (ConfigCenterConfig configCenter : configCenters) {
            environment.updateExternalConfigMap(configCenter.getExternalConfiguration());
            environment.updateAppExternalConfigMap(configCenter.getAppExternalConfiguration());
            compositeDynamicConfiguration.addConfiguration(prepareEnvironment(configCenter));
        }
        environment.setDynamicConfiguration(compositeDynamicConfiguration);
    }
}

----------------------------------------

TITLE: Configuring Nacos Registry for Client Using Full API
DESCRIPTION: Comprehensive example of setting up a Nacos registry for a client using the full configuration API with detailed settings.

LANGUAGE: go
CODE:
rc := config.NewRootConfigBuilder().
    SetConsumer(config.NewConsumerConfigBuilder().
        SetRegistryIDs("nacosRegistryID"). // use defined registryID
        AddReference("GreeterClientImpl", /*...*/).
        Build()
    AddRegistry("nacosRegistryID", config.NewRegistryConfigBuilder().
        SetProtocol("nacos").
        SetAddress("127.0.0.1:8848").
        SetGroup("dubbo-go").
        SetNamespace("dubbo").
        SetUsername("admin").
        SetPassword("admin").
        SetTimeout("3s").
        Build()).
    Build()

----------------------------------------

TITLE: Group and Namespace Configuration in YAML
DESCRIPTION: Configuration for setting group and namespace in Nacos config center to manage different environments and clusters.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: zookeeper://127.0.0.1:2181
    group: dubbo-cluster1
    namespace: dev1

----------------------------------------

TITLE: Adding Consul Configuration Center Dependency
DESCRIPTION: Maven dependency configuration for integrating Consul configuration center with Dubbo framework.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-configcenter-consul</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Dubbo Server Properties
DESCRIPTION: Server-side configuration properties including Istio integration settings

LANGUAGE: properties
CODE:
dubbo.application.name=dubbo-samples-xds-provider
dubbo.application.metadataServicePort=20885
dubbo.registry.address=xds://istiod.istio-system.svc:15012
dubbo.protocol.name=tri
dubbo.protocol.port=50052
dubbo.application.qosAcceptForeignIp=true

----------------------------------------

TITLE: Configuring Logger Adapter via System Property
DESCRIPTION: Command line configuration for specifying the logger adapter using system properties

LANGUAGE: shell
CODE:
-Ddubbo:application.logger=xxx

----------------------------------------

TITLE: Configuring Gson Serialization in Dubbo using Properties
DESCRIPTION: This snippet shows multiple ways to configure Gson serialization in Dubbo using properties files. It includes options for global, consumer, and service-specific configurations.

LANGUAGE: properties
CODE:
# dubbo.properties
dubbo.protocol.serialization=gson

# or
dubbo.consumer.serialization=gson

# or
dubbo.reference.com.demo.DemoService.serialization=gson

----------------------------------------

TITLE: Implementing Dubbo Service with Version and Group - V2
DESCRIPTION: Second implementation of the DevelopService interface using group2 and version 2.0 annotations.

LANGUAGE: java
CODE:
@DubboService(group = "group2", version = "2.0")
public class DevelopProviderServiceV2 implements DevelopService{
    @Override
    public String invoke(String param) {
        StringBuilder s = new StringBuilder();
        s.append("ServiceV2 param:").append(param);
        return s.toString();
    }
}

----------------------------------------

TITLE: Implementing Custom Dubbo Protocol
DESCRIPTION: This Java class implements a custom 'edubbo' protocol by wrapping the existing 'dubbo' protocol. It extends the Protocol interface and delegates most operations to the underlying DubboProtocol instance.

LANGUAGE: java
CODE:
package org.apache.dubbo.samples.extensibility.protocol.common;

import org.apache.dubbo.common.URL;
import org.apache.dubbo.rpc.Protocol;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Exporter;
import org.apache.dubbo.rpc.ProtocolServer;
import org.apache.dubbo.rpc.RpcException;
import org.apache.dubbo.rpc.model.FrameworkModel;
import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;

import java.util.List;

public class EnhancedProtocol implements Protocol {

    public EnhancedProtocol(FrameworkModel frameworkModel) {
        this.protocol = new DubboProtocol(frameworkModel);
    }

    private final Protocol protocol;

    @Override
    public int getDefaultPort() {
        return this.protocol.getDefaultPort();
    }

    @Override
    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
        // do something
        return this.protocol.export(invoker);
    }

    @Override
    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
        // do something
        return this.protocol.refer(type, url);
    }

    @Override
    public void destroy() {
        this.protocol.destroy();
    }

    @Override
    public List<ProtocolServer> getServers() {
        return protocol.getServers();
    }
}

----------------------------------------

TITLE: Pixiu Core Configuration
DESCRIPTION: Main YAML configuration showing listener setup, HTTP connection management, and Dubbo proxy configuration with Zookeeper registry

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8883
      filter_chains:
          filters:
            - name: dgp.filter.httpconnectionmanager
              config:
                route_config:
                  routes:
                    - match:
                        prefix: "*"
                http_filters:
                  - name: dgp.filter.http.dubboproxy
                    config:
                      dubboProxyConfig:
                        auto_resolve: true
                        registries:
                          "zookeeper":
                            protocol: "zookeeper"
                            timeout: "3s"
                            address: "127.0.0.1:2181"
                            username: ""
                            password: ""

----------------------------------------

TITLE: Registering RouterFactory Extension in Dubbo Properties File
DESCRIPTION: Example of registering a custom RouterFactory implementation in the Dubbo extension configuration file. This file should be placed in the META-INF/dubbo directory with the name org.apache.dubbo.rpc.cluster.RouterFactory.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxRouterFactory

----------------------------------------

TITLE: Implementing a Custom Container in Java for Dubbo
DESCRIPTION: Example of creating a custom container class that implements the Container interface. This class should define start() and stop() methods for managing the container lifecycle.

LANGUAGE: java
CODE:
package com.xxx;

org.apache.dubbo.container.Container;

public class XxxContainer implements Container {
    public Status start() {
        // ...
    }
    public Status stop() {
        // ...
    }
}

----------------------------------------

TITLE: Implementing Custom Monitoring in Dubbo (Java)
DESCRIPTION: To implement custom monitoring in Dubbo, users can create a class that implements the MonitorFactory interface. This allows for custom monitoring statistics strategies. However, runtime exceptions in this implementation can cause monitoring issues.

LANGUAGE: java
CODE:
org.apache.dubbo.monitor.MonitorFactory

----------------------------------------

TITLE: Configuring Consul Metadata Center in YAML
DESCRIPTION: YAML configuration to set up Consul as the metadata center for Dubbo, specifying the address and port.

LANGUAGE: yaml
CODE:
dubbo
  metadata-report
    address: consul://127.0.0.1:1111

----------------------------------------

TITLE: Configuring Dubbo Provider with XML
DESCRIPTION: Configure a Dubbo service provider using XML configuration. This file sets up the application, registry, protocol, and service to be exposed.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- Provider application info for dependency calculation -->
    <dubbo:application name="dubbo-provider-xml-demo"/>

    <!-- Use Nacos registry -->
    <dubbo:registry address="nacos://127.0.0.1:8848"/>

    <!-- Expose services with dubbo protocol on random ports -->
    <dubbo:protocol name="dubbo" port="-1"/>

    <!-- Declare services that need to be exposed -->
    <dubbo:service interface="com.alibaba.dubbo.demo.service.DemoService" ref="demoService" version="2.0.0"/>

    <!-- Implement service like local bean -->
    <bean id="demoService" class="com.alibaba.dubbo.demo.service.DefaultService"/>
</beans>

----------------------------------------

TITLE: Defining Protobuf Service for Dubbo Triple Protocol
DESCRIPTION: This Protobuf definition shows how to define a service for use with Dubbo's Triple protocol. It includes message types for request and response, and a service definition with an RPC method.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
option java_multiple_files = true;
package org.apache.dubbo.samples.tri.unary;

message GreeterRequest {
  string name = 1;
}
message GreeterReply {
  string message = 1;
}

service Greeter{
  rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Enabling Dubbo Thread Pool Isolation
DESCRIPTION: Configuration property to enable thread pool isolation mode in Dubbo applications. This setting is required when using isolation thread pool configurations in ServiceConfig.

LANGUAGE: properties
CODE:
dubbo.application.executor-management-mode=isolation

----------------------------------------

TITLE: Implementing Custom Logger Adapter
DESCRIPTION: Example implementation of a custom LoggerAdapter interface in Java

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.logger.LoggerAdapter;
 
public class XxxLoggerAdapter implements LoggerAdapter {
    public Logger getLogger(URL url) {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Gson Serialization in Dubbo using XML
DESCRIPTION: This snippet illustrates how to enable Gson serialization in Dubbo using XML configuration. It provides options for protocol-level, consumer-level, and reference-level configurations.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="gson" />

        <!-- or -->
<dubbo:consumer serialization="gson" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="gson" />

----------------------------------------

TITLE: Service Closure Method References in Dubbo Java
DESCRIPTION: References to critical service lifecycle methods in Dubbo that can trigger service closure when called multiple times. These methods are typically used in unit testing scenarios and should be called with caution.

LANGUAGE: java
CODE:
org.apache.dubbo.rpc.protocol.tri.service.TriHealthImpl#enterTerminalState

LANGUAGE: java
CODE:
org.apache.dubbo.rpc.protocol.ReferenceCountInvokerWrapper#invoke

----------------------------------------

TITLE: Implementing SerializationOptimizer for Kryo in Dubbo
DESCRIPTION: This Java code snippet shows how to implement the SerializationOptimizer interface to register serializable classes for Kryo in Dubbo. It improves serialization performance by pre-registering classes that need to be serialized.

LANGUAGE: java
CODE:
public class SerializationOptimizerImpl implements SerializationOptimizer {

    public Collection<Class> getSerializableClasses() {
        List<Class> classes = new LinkedList<Class>();
        classes.add(BidRequest.class);
        classes.add(BidResponse.class);
        classes.add(Device.class);
        classes.add(Geo.class);
        classes.add(Impression.class);
        classes.add(SeatBid.class);
        return classes;
    }
}

----------------------------------------

TITLE: Testing Basic REST Service with cURL
DESCRIPTION: Shell command to test the basic REST service endpoint with query parameters

LANGUAGE: shell
CODE:
curl -v "http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hello?name=world"

----------------------------------------

TITLE: Configuring Server-Side Parameter Validation in Dubbo
DESCRIPTION: This XML configuration snippet demonstrates how to enable parameter validation on the server side in Dubbo. It sets the 'validation' attribute to 'true' for the service declaration.

LANGUAGE: xml
CODE:
<dubbo:service interface="org.apache.dubbo.examples.validation.api.ValidationService" ref="validationService" validation="true" />

----------------------------------------

TITLE: Implementing ExporterListener Interface in Java for Dubbo
DESCRIPTION: This snippet refers to the implementation of the org.apache.dubbo.rpc.ExporterListener interface in Java for Dubbo. It's mentioned as a potential source of logical errors causing notification event failures.

LANGUAGE: Java
CODE:
org.apache.dubbo.rpc.ExporterListener

----------------------------------------

TITLE: Configuring TPS Limiter in Dubbo-go Server
DESCRIPTION: Demonstrates how to set up a simple rate limiting strategy on the server side using Dubbo-go's built-in TPS limiter. It shows method selection and configuration of rate limiting parameters.

LANGUAGE: go
CODE:
server.WithTpsLimiter("method-service") // Currently supports implementations like method-service, polaris, etc.
server.WithTpsLimiterXxx() // Set rate limiting related thresholds, please fill in according to the specific method
//tps.limit.strategy: "slidingWindow"
//tps.limit.rejected.handler: "default"
//tps.limit.interval: 1000
//tps.limit.rate: 3

----------------------------------------

TITLE: Setting Load Balance on Provider Interface
DESCRIPTION: Shows how to configure load balancing strategy at the service provider level using @DubboService annotation.

LANGUAGE: java
CODE:
@DubboService(loadbalance = "roundrobin")
public class DemoServiceImpl implements DemoService {}

----------------------------------------

TITLE: Registering Protocol Extension in Properties File
DESCRIPTION: Example of registering a custom Protocol extension in the Dubbo SPI configuration file

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxProtocol

----------------------------------------

TITLE: Configuring Server-Side Method Caching in Dubbo XML
DESCRIPTION: XML configuration for enabling LRU caching at the method level for a specific service method implementation.

LANGUAGE: xml
CODE:
<bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>
<dubbo:service interface="com.foo.DemoService" ref="demoService" cache="lru" />
    <dubbo:method name="sayHello" cache="lru" />
</dubbo:service>

----------------------------------------

TITLE: Configuring Networker in Dubbo XML
DESCRIPTION: XML configuration for setting the networker in Dubbo protocol and provider. The networker attribute specifies which implementation to use.

LANGUAGE: xml
CODE:
<dubbo:protocol networker="xxx" />
<!-- Default setting. When <dubbo:protocol> does not configure the networker attribute, use this configuration -->
<dubbo:provider networker="xxx" />

----------------------------------------

TITLE: Using Shared Log Component in Application Code in Go
DESCRIPTION: This example demonstrates how to use the Dubbo-Go framework's shared log component in application code. It imports the logger package and uses its Info method to log a message.

LANGUAGE: go
CODE:
import app_logger "github.com/dubbogo/gost/log/logger"

app_logger.Info("hello")

----------------------------------------

TITLE: Load Balance Configuration in Properties File
DESCRIPTION: Shows how to configure method-level load balancing using dubbo.properties file.

LANGUAGE: properties
CODE:
dubbo.reference.org.apache.dubbo.samples.api.DemoService.sayHello.loadbalance=roundrobin

----------------------------------------

TITLE: Generating Java Stack Trace for Dubbo Server Diagnosis
DESCRIPTION: Command to generate a stack trace log file for a Java process, useful for diagnosing Dubbo server performance issues.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Reading Implicit Parameters on Provider Side in Java
DESCRIPTION: Shows how to read implicit parameters on the provider side that were passed from the client. This is useful for framework integration.

LANGUAGE: java
CODE:
public class XxxServiceImpl implements XxxService {

    public void xxx() {
        // Get the parameters implicitly passed from the client, e.g., for framework integration
        String index = RpcContext.getServerAttachment().getAttachment("index");
    }
}

----------------------------------------

TITLE: Adding FST Dependencies in Maven POM
DESCRIPTION: This snippet shows how to add the necessary dependencies for FST serialization in a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
      <groupId>org.apache.dubbo.extensions</groupId>
      <artifactId>dubbo-serialization-fst</artifactId>
      <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>de.ruedigermoeller</groupId>
        <artifactId>fst</artifactId>
        <version>3.0.3</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Implementing Provider-Side Filter with Activation in Java
DESCRIPTION: Example of implementing a Filter that automatically activates on the provider side

LANGUAGE: java
CODE:
@Activate(group = PROVIDER)
public class AccessLogFilter implements Filter {}

----------------------------------------

TITLE: Implementing Monitor Interface in Java
DESCRIPTION: Custom implementation of the Monitor interface that handles statistics collection.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.monitor.Monitor;
 
public class XxxMonitor implements Monitor {
    public void count(URL statistics) {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Redis Metadata Center in YAML
DESCRIPTION: YAML configuration to set up Redis as the metadata center for Dubbo, specifying the address and port.

LANGUAGE: yaml
CODE:
dubbo
  metadata-report
    address: redis://127.0.0.1:1111

----------------------------------------

TITLE: Implementing Custom CacheFactory in Java
DESCRIPTION: Example implementation of a custom CacheFactory that creates and returns custom cache instances.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.cache.CacheFactory;
 
public class XxxCacheFactory implements CacheFactory {
    public Cache getCache(URL url, String name) {
        return new XxxCache(url, name);
    }
}

----------------------------------------

TITLE: Specifying Retry Count for Individual Calls in Dubbo-go
DESCRIPTION: This snippet illustrates how to set the retry count for a specific service call using the client.WithCallRetries() method, which has the highest priority among retry configurations.

LANGUAGE: go
CODE:
resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"}, client.WithCallRetries(6))

----------------------------------------

TITLE: Registering Custom PageHandler in Dubbo SPI
DESCRIPTION: Configuration for registering a custom PageHandler implementation with Dubbo's Service Provider Interface (SPI) mechanism. This allows Dubbo to discover and use the custom page handler.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxPageHandler

----------------------------------------

TITLE: Implementing Custom Logger
DESCRIPTION: Example implementation of a custom Logger interface in Java

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.logger.Logger;
 
public class XxxLogger implements Logger {
    public XxxLogger(URL url) {
        // ...
    }
    public void info(String msg) {
        // ...
    }
    // ...
}

----------------------------------------

TITLE: Network Connectivity Check using Ping Command
DESCRIPTION: Use the ping command to verify network connectivity between the client and server.

LANGUAGE: shell
CODE:
ping

----------------------------------------

TITLE: Defining YAML Frontmatter for Dubbo Documentation
DESCRIPTION: YAML frontmatter configuration for the Dubbo documentation homepage, including metadata, navigation structure, and content organization.

LANGUAGE: yaml
CODE:
aliases:
    - /en/overview/home/
content:
    - Quick Start:
        - description: ""
          links:
            - '[Why Dubbo](../what/)'
            - '[Concepts and Architecture](../what/overview/)'
            - '[Comparison with gRPC, Spring Cloud, Istio](../what/xyz-difference/)'
            - '[Core Features](../what/advantages/)'
          name: Learn about Dubbo
description: "Apache Dubbo is a multilingual, easy-to-use web and RPC framework that provides tools and best practices for building enterprise-level microservices with service discovery, traffic governance, observability, authentication, and authorization capabilities."
hide_feedback: true
hide_summary: true
linkTitle: Home
main_menu: true
toc_hide: true
menu:
    main:
        name: DOCUMENTATION
        weight: 1
no_list: true
noedit: true
title: Dubbo Documentation
type: docs
weight: 1

----------------------------------------

TITLE: Configuring FST Serialization in Dubbo XML
DESCRIPTION: This snippet illustrates how to configure FST serialization using Dubbo's XML configuration.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="fst" />

        <!-- or -->
<dubbo:consumer serialization="fst" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="fst" />

----------------------------------------

TITLE: Configuring Dubbo Service Provider Properties
DESCRIPTION: Sets up the application.properties file for the Dubbo service provider, including service version, Dubbo configuration, and registry settings.

LANGUAGE: Properties
CODE:
# Spring boot application
spring.application.name = dubbo-provider-demo
server.port = 9090
management.port = 9091

# Service version
demo.service.version = 1.0.0

# Base packages to scan Dubbo Components (e.g @Service, @Reference)
dubbo.scan.basePackages  = com.example.demoprovider

# Dubbo Config properties
## ApplicationConfig Bean
dubbo.application.id = dubbo-provider-demo
dubbo.application.name = dubbo-provider-demo

## ProtocolConfig Bean
dubbo.protocol.id = dubbo
dubbo.protocol.name = dubbo
dubbo.protocol.port = 12345

## RegistryConfig Bean
dubbo.registry.id = my-registry
dubbo.registry.address = N/A

----------------------------------------

TITLE: Verifying Prometheus Deployment in Kubernetes
DESCRIPTION: This command checks if the Prometheus server service is running correctly in the dubbo-system namespace of Kubernetes.

LANGUAGE: yaml
CODE:
kubectl -n dubbo-system get svc prometheus-server

----------------------------------------

TITLE: Configuring Nacos Metadata Center in YAML
DESCRIPTION: YAML configuration to enable Nacos as the metadata center for Dubbo. Specifies the Nacos server address.

LANGUAGE: yaml
CODE:
dubbo:
  metadata-report:
    address: nacos://127.0.0.1:8848

----------------------------------------

TITLE: Setting Retry Parameters in Dubbo
DESCRIPTION: Simple YAML configuration showing the retry parameter setting for Dubbo services. Specifies the number of retry attempts for failed service calls.

LANGUAGE: yaml
CODE:
parameters:
  retries: 5

----------------------------------------

TITLE: Setting Retry Parameters in Dubbo
DESCRIPTION: Simple YAML configuration showing the retry parameter setting for Dubbo services. Specifies the number of retry attempts for failed service calls.

LANGUAGE: yaml
CODE:
parameters:
  retries: 5

----------------------------------------

TITLE: Adding Maven Dependencies for Dubbo-Nacos Integration
DESCRIPTION: This XML snippet shows the required Maven dependencies for integrating Dubbo with Nacos, including dubbo-registry-nacos, nacos-client, dubbo, and spring-context-support.

LANGUAGE: xml
CODE:
<dependencies>

    ...
        
    <!-- Dubbo Nacos registry dependency -->
    <dependency>
        <groupId>org.apache</groupId>
        <artifactId>dubbo-registry-nacos</artifactId>
        <version>0.0.2</version>
    </dependency>   
    
    <!-- Keep latest Nacos client version -->
    <dependency>
        <groupId>org.apache.nacos</groupId>
        <artifactId>nacos-client</artifactId>
        <version>[0.6.1,)</version>
    </dependency>
    
    <!-- Dubbo dependency -->
    <dependency>
        <groupId>org.apache</groupId>
        <artifactId>dubbo</artifactId>
        <version>2.6.5</version>
    </dependency>
    
    <!-- Alibaba Spring Context extension -->
    <dependency>
        <groupId>org.apache.spring</groupId>
        <artifactId>spring-context-support</artifactId>
        <version>1.0.2</version>
    </dependency>

    ...
    
</dependencies>

----------------------------------------

TITLE: Adding Fastjson2 Dependency for Dubbo Serialization
DESCRIPTION: Demonstrates how to add the Fastjson2 dependency to a Maven project for use with Dubbo serialization.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>com.alibaba.fastjson2</groupId>
  <artifactId>fastjson2</artifactId>
  <version>${fastjson2.version}</version>
</dependency>

----------------------------------------

TITLE: Maven Install Command for Dubbo Project
DESCRIPTION: Maven command to clean, package and install the Dubbo project, skipping tests.

LANGUAGE: bash
CODE:
mvn clean package install -Dmaven.test.skip=true

----------------------------------------

TITLE: Maven Install Command for Dubbo Project
DESCRIPTION: Maven command to clean, package and install the Dubbo project, skipping tests.

LANGUAGE: bash
CODE:
mvn clean package install -Dmaven.test.skip=true

----------------------------------------

TITLE: Deploying Canary Environment with Kubernetes
DESCRIPTION: Command to deploy canary environment instances for the mall applications with env=gray tag

LANGUAGE: sh
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/10-task/dubbo-samples-shop/deploy/Gray.yml

----------------------------------------

TITLE: Single-Port Multi-Protocol Configuration
DESCRIPTION: YAML configuration for implementing multiple protocols on a single port

LANGUAGE: yaml
CODE:
dubbo:
  protocol:
    name: dubbo
    ext-protocol: tri

----------------------------------------

TITLE: Checking Prometheus Service Status in Kubernetes
DESCRIPTION: This command checks the status of the Prometheus service in the dubbo-system namespace of a Kubernetes cluster.

LANGUAGE: sh
CODE:
$ kubectl -n dubbo-system get svc prometheus

----------------------------------------

TITLE: Configuring Triple Protocol in Dubbo
DESCRIPTION: Basic YAML configuration to enable the triple protocol in Dubbo. The default port is 50051, and setting port to -1 will select a random port starting from 50051.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   name: tri
   port: 50051

----------------------------------------

TITLE: Implementing Greeter Service in Java
DESCRIPTION: Java implementation of the Greeter service extending the generated base class with business logic.

LANGUAGE: java
CODE:
public class GreeterImpl extends DubboGreeterTriple.GreeterImplBase {
    @Override
    public GreeterReply greet(GreeterRequest request) {
        LOGGER.info("Server {} received greet request {}", serverName, request);
        return GreeterReply.newBuilder()
                .setMessage("hello," + request.getName())
                .build();
    }
}

----------------------------------------

TITLE: Configuring and Invoking Generic Service in Go for Dubbo Client
DESCRIPTION: Go code snippet demonstrating how to configure a generic service reference, initialize it with root configuration, and invoke a remote method. It uses the Triple protocol and hessian2 serialization.

LANGUAGE: go
CODE:
// Initialize Reference configuration
refConf := config.NewReferenceConfigBuilder().
  SetInterface("org.apache.dubbo.UserProvider").
  SetRegistryIDs("zk").
  SetProtocol(tripleConst.TRIPLE).
  SetGeneric(true).
  SetSerialization("hessian2").
  Build()

// Construct Root configuration, introducing the registry module
rootConfig := config.NewRootConfigBuilder().
  AddRegistry("zk", config.NewRegistryConfigWithProtocolDefaultPort("zookeeper")).
  Build()

// Reference configuration initialization, as service discovery requires the configured rootConfig
if err := refConf.Init(rootConfig); err != nil{
  panic(err)
}

// Generic invocation loading, service discovery
refConf.GenericLoad(appName)

time.Sleep(time.Second)

// Initiate generic invocation
resp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(
  context.TODO(),
  "getUser1",
  []string{"java.lang.String"},
  []hessian.Object{"A003"},
)

if err != nil {
  panic(err)
}
logger.Infof("GetUser1(userId string) res: %+v", resp)

----------------------------------------

TITLE: Deploying Dubbo Sample Application in Kubernetes
DESCRIPTION: This command applies a Kubernetes deployment configuration for a Dubbo sample application that enables metrics collection.

LANGUAGE: yaml
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml

----------------------------------------

TITLE: Graceful Offline Configuration
DESCRIPTION: YAML configuration for graceful offline removal of instances using preStop hook

LANGUAGE: yaml
CODE:
preStop:
	exec:
	  command: ["/bin/sh","-c","curl /offline; sleep 10"]

----------------------------------------

TITLE: Registering Exchanger Extension in Properties
DESCRIPTION: Properties file configuration for registering the custom exchanger implementation with Dubbo's SPI mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxExchanger

----------------------------------------

TITLE: Configuring Multiple Registries in Spring Boot YAML
DESCRIPTION: This snippet demonstrates how to configure multiple registries in a Spring Boot application using YAML. It sets up two registries: beijingRegistry and shanghaiRegistry.

LANGUAGE: yaml
CODE:
dubbo:
 registries:
  beijingRegistry:
   address: zookeeper://localhost:2181
  shanghaiRegistry:
   address: zookeeper://localhost:2182

----------------------------------------

TITLE: Creating Dubbo Client Reference in Java
DESCRIPTION: Example demonstrating how to declare and use a Dubbo service reference in a client application using annotations.

LANGUAGE: java
CODE:
// Client reference implementation shown in image 14-reference.jpg

----------------------------------------

TITLE: Adding Dubbo3 BOM Dependency Management
DESCRIPTION: Configure Dubbo3 BOM dependency management in Maven to handle version compatibility.

LANGUAGE: xml
CODE:
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-dependencies-bom</artifactId>
            <version>3.3.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: Custom Filter Implementation Example
DESCRIPTION: Demonstrates how to implement a custom Dubbo filter with the required project structure and configuration.

LANGUAGE: java
CODE:
public class XxxFilter implements Filter {
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        // before filter ...
        Result result = invoker.invoke(invocation);
        // after filter ...
        return result;
    }
}

----------------------------------------

TITLE: Maven Dependencies Configuration for Brave and Zipkin
DESCRIPTION: XML configuration for adding Brave tracing and Zipkin reporter dependencies to the project

LANGUAGE: xml
CODE:
<properties>
    <brave.version>5.4.2</brave.version>
    <zipkin-reporter.version>2.7.9</zipkin-reporter.version>
</properties>

<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.zipkin.brave</groupId>
            <artifactId>brave-bom</artifactId>
            <version>${brave.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        
        <dependency>
            <groupId>io.zipkin.reporter2</groupId>
            <artifactId>zipkin-reporter-bom</artifactId>
            <version>${zipkin-reporter.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: Enabling Hystrix in Spring Boot Application
DESCRIPTION: Application class configuration to enable Hystrix functionality in a Spring Boot application using @EnableHystrix annotation.

LANGUAGE: java
CODE:
@SpringBootApplication
@EnableHystrix
public class ProviderApplication {

----------------------------------------

TITLE: Configuring Pixiu Gateway for Dubbo HTTP Proxy
DESCRIPTION: YAML configuration for setting up Pixiu gateway with HTTP listener and Dubbo proxy filter. Defines listener ports, routes, and connection settings for Dubbo service integration.

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "http-listener"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8888
      filter_chains:
        filters:
          - name: dgp.filter.httpconnectionmanager
            config:
              route_config:
                routes:
                  - match:
                      prefix: "*"
              http_filters:
                - name: dgp.filter.http.dubboproxy
                  config:
                    dubboProxyConfig:
                      auto_resolve: true
                      registries:
                        "zookeeper":
                          protocol: "zookeeper"
                          timeout: "3s"
                          address: "127.0.0.1:2181"
                          username: ""
                          password: ""
                      timeout_config:
                        connect_timeout: 5s
                        request_timeout: 5s
  clusters:
    - name: "dubbo-server"
      lb_policy: "lb"
      endpoints:
        - id: 1
          socket_address:
            address: 127.0.0.1
            port: 20000
  shutdown_config:
    timeout: "60s"
    step_timeout: "10s"
    reject_policy: "immediacy"

----------------------------------------

TITLE: Defining Filter Interface in Go
DESCRIPTION: Core interface definition for Dubbo Filter showing the main Invoke and OnResponse methods that handle request/response interception.

LANGUAGE: go
CODE:
// Filter interface defines the functions of a filter
// Extension - Filter
type Filter interface {
	// Invoke is the core function of a filter, it determines the process of the filter
	Invoke(context.Context, protocol.Invoker, protocol.Invocation) protocol.Result
	// OnResponse updates the results from Invoke and then returns the modified results.
	OnResponse(context.Context, protocol.Result, protocol.Invoker, protocol.Invocation) protocol.Result
}

----------------------------------------

TITLE: Implementing Client-Side Streaming in Dubbo-go
DESCRIPTION: Client implementation demonstrating how to create and use streaming clients for unary and streaming RPC calls, including connection setup and error handling.

LANGUAGE: go
CODE:
func main() {
	cli, err := client.NewClient(
		client.WithClientURL("tri://127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}
	TestClient(svc)
}

func TestClient(cli greet.GreetService) {
	if err := testUnary(cli); err != nil {
		logger.Error(err)
	}

	if err := testBidiStream(cli); err != nil {
		logger.Error(err)
	}

	if err := testClientStream(cli); err != nil {
		logger.Error(err)
	}

	if err := testServerStream(cli); err != nil {
		logger.Error(err)
	}
}

func testUnary(cli greet.GreetService) error {
	logger.Info("start to test TRIPLE unary call")
	resp, err := cli.Greet(context.Background(), &greet.GreetRequest{Name: "triple"})
	if err != nil {
		return err
	}
	logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
	return nil
}

func testBidiStream(cli greet.GreetService) error {
	logger.Info("start to test TRIPLE bidi stream")
	stream, err := cli.GreetStream(context.Background())
	if err != nil {
		return err
	}
	if sendErr := stream.Send(&greet.GreetStreamRequest{Name: "triple"}); sendErr != nil {
		return err
	}
	resp, err := stream.Recv()
	if err != nil {
		return err
	}
	logger.Infof("TRIPLE bidi stream resp: %s", resp.Greeting)
	if err := stream.CloseRequest(); err != nil {
		return err
	}
	if err := stream.CloseResponse(); err != nil {
		return err
	}
	return nil
}

func testClientStream(cli greet.GreetService) error {
	logger.Info("start to test TRIPLE client stream")
	stream, err := cli.GreetClientStream(context.Background())
	if err != nil {
		return err
	}
	for i := 0; i < 5; i++ {
		if sendErr := stream.Send(&greet.GreetClientStreamRequest{Name: "triple"}); sendErr != nil {
			return err
		}
	}
	resp, err := stream.CloseAndRecv()
	if err != nil {
		return err
	}
	logger.Infof("TRIPLE client stream resp: %s", resp.Greeting)
	return nil
}

func testServerStream(cli greet.GreetService) error {
	logger.Info("start to test TRIPLE server stream")
	stream, err := cli.GreetServerStream(context.Background(), &greet.GreetServerStreamRequest{Name: "triple"})
	if err != nil {
		return err
	}
	for stream.Recv() {
		logger.Infof("TRIPLE server stream resp: %s", stream.Msg().Greeting)
	}
	if stream.Err() != nil {
		return err
	}
	if err := stream.Close(); err != nil {
		return err
	}
	return nil
}

----------------------------------------

TITLE: Capturing Java Stack Trace for Deserialization Issues
DESCRIPTION: Command to capture JVM stack trace for analyzing deserialization failures. This helps identify the problematic object causing serialization errors.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Apollo Configuration Center
DESCRIPTION: Multiple ways to enable and configure Apollo as the configuration center for Dubbo, including XML, YAML, Properties, and Java configurations.

LANGUAGE: xml
CODE:
<dubbo:config-center address="apollo://localhost:8080"/>

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: apollo://localhost:8080

LANGUAGE: properties
CODE:
dubbo.config-center.address=apollo://localhost:8080

LANGUAGE: java
CODE:
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("apollo://localhost:8080");

----------------------------------------

TITLE: Configuring Apollo Configuration Center
DESCRIPTION: Multiple ways to enable and configure Apollo as the configuration center for Dubbo, including XML, YAML, Properties, and Java configurations.

LANGUAGE: xml
CODE:
<dubbo:config-center address="apollo://localhost:8080"/>

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: apollo://localhost:8080

LANGUAGE: properties
CODE:
dubbo.config-center.address=apollo://localhost:8080

LANGUAGE: java
CODE:
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("apollo://localhost:8080");

----------------------------------------

TITLE: Configuring Serialization Check Status in Java
DESCRIPTION: Shows how to configure the serialization check status using ApplicationConfig in Java.

LANGUAGE: java
CODE:
ApplicationConfig applicationConfig = new ApplicationConfig();
applicationConfig.setSerializeCheckStatus("STRICT");

----------------------------------------

TITLE: Configuring Dubbo Consumer
DESCRIPTION: Java configuration class for setting up the Dubbo consumer with Spring.

LANGUAGE: java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.action")
@PropertySource("classpath:/spring/dubbo-consumer.properties")
@ComponentScan(value = {"com.alibaba.dubbo.samples.action"})
static class ConsumerConfiguration {}

----------------------------------------

TITLE: Registry-Specific Interface-Level Configuration in XML
DESCRIPTION: XML configuration to set interface-level service discovery for a specific registry in Dubbo 3.

LANGUAGE: xml
CODE:
<dubbo:registry address="nacos://localhost:8848" register-mode="interface">

----------------------------------------

TITLE: Dubbo Provider Properties Configuration
DESCRIPTION: Properties configuration for Dubbo provider including application name, protocols and ports

LANGUAGE: properties
CODE:
dubbo.application.name=dubbo-samples-mesh-provider
dubbo.application.metadataServicePort=20885
dubbo.registry.address=N/A
dubbo.protocol.name=tri
dubbo.protocol.port=50052
dubbo.application.qosEnable=true
dubbo.application.qosAcceptForeignIp=true

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Concrete implementation of the GreetingsService interface that provides the service logic.

LANGUAGE: java
CODE:
public class GreetingsServiceImpl implements GreetingsService {
    @Override
    public String sayHi(String name) {
        return "hi, " + name;
    }
}

----------------------------------------

TITLE: Kubernetes Deployment Configuration for Dubbo Provider
DESCRIPTION: Kubernetes deployment manifest for the Dubbo provider service with Nacos integration.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
    name: gateway-higress-triple-provider
    namespace: default
    labels:
        app: gateway-higress-triple-provider
spec:
    replicas: 1
    selector:
        matchLabels:
            app: gateway-higress-triple-provider
    template:
        metadata:
            labels:
                app: gateway-higress-triple-provider
        spec:
            containers:
                -   name: gateway-higress-triple-provider
                    image: docker.io/allenyi/higress-triple:2.0.0
                    imagePullPolicy: IfNotPresent
                    ports:
                        - containerPort: 50052
                    env:
                        - name: NACOS_ADDRESS
                          value: nacos-server.default.svc.cluster.local

----------------------------------------

TITLE: Service Implementation with Multiple Protocols
DESCRIPTION: Java service implementation using @DubboService annotation to specify multiple protocols

LANGUAGE: java
CODE:
@DubboService(protocol="dubbo-id,triple-id")
private DemoServiceImpl implements DemoService {}

----------------------------------------

TITLE: Configuring Avro in Properties File
DESCRIPTION: Properties file configuration options for enabling Avro serialization in Dubbo at different levels including protocol, consumer, and reference.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=avro

# or
dubbo.consumer.serialization=avro

# or
dubbo.reference.com.demo.DemoService.serialization=avro

----------------------------------------

TITLE: Create Business Tables and Sample Data
DESCRIPTION: SQL scripts to create and initialize business tables (stock, order, account) with sample data

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS `stock_tbl`;
CREATE TABLE `stock_tbl`
(
    `id`             int(11) NOT NULL AUTO_INCREMENT,
    `commodity_code` varchar(255) DEFAULT NULL,
    `count`          int(11) DEFAULT 0,
    PRIMARY KEY (`id`),
    UNIQUE KEY (`commodity_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `order_tbl`;
CREATE TABLE `order_tbl`
(
    `id`             int(11) NOT NULL AUTO_INCREMENT,
    `user_id`        varchar(255) DEFAULT NULL,
    `commodity_code` varchar(255) DEFAULT NULL,
    `count`          int(11) DEFAULT 0,
    `money`          int(11) DEFAULT 0,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `account_tbl`;
CREATE TABLE `account_tbl`
(
    `id`      int(11) NOT NULL AUTO_INCREMENT,
    `user_id` varchar(255) DEFAULT NULL,
    `money`   int(11) DEFAULT 0,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO account_tbl(`user_id`,`money`) VALUES('ACC_001','1000');
INSERT INTO stock_tbl(`commodity_code`,`count`) VALUES('STOCK_001','100');

----------------------------------------

TITLE: Adding Redis Registry Dependency in Maven
DESCRIPTION: XML configuration to add the Redis registry dependency to a Maven project. This is required for Dubbo 3 and later versions as Redis support is no longer embedded.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-registry-redis</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Implementing Dubbo Service Provider in Java
DESCRIPTION: Implementation of the DemoService interface that provides the service functionality.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.provider;
import org.apache.dubbo.demo.DemoService;

public class DemoServiceImpl implements DemoService {
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

----------------------------------------

TITLE: Implementing Dubbo-Go Server Handler
DESCRIPTION: Go code implementing the GreetTripleServer handler for the Dubbo-Go server, including the Greet method and main function setup.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"errors"
	"fmt"

	"dubbo.apache.org/dubbo-go/v3"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/config_yaml/proto"
)

type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	name := req.Name
	if name != "ConfigTest" {
		errInfo := fmt.Sprintf("name is not right: %s", name)
		return nil, errors.New(errInfo)
	}

	resp := &greet.GreetResponse{Greeting: req.Name + "-Success"}
	return resp, nil
}

func main() {
	greet.SetProviderService(&GreetTripleServer{})
	if err := dubbo.Load(); err != nil {
		panic(err)
	}
	select {}
}

----------------------------------------

TITLE: Configuring Cross-Region Registered Services in XML
DESCRIPTION: This XML configuration shows how to set up cross-region registered services in Dubbo. It defines multiple registries and registers a service to both registries.

LANGUAGE: xml
CODE:
<dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" />
<dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" default="false" />
<!-- Register to multiple registries -->
<dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="hangzhouRegistry,qingdaoRegistry" />

----------------------------------------

TITLE: Creating Dubbo-go Client in Go
DESCRIPTION: Go code to create a Dubbo-go client, obtain a service proxy, and make an RPC call to the GreetService.

LANGUAGE: go
CODE:
func main() {
	cli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}

	resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Configuring Apollo Namespace for Traffic Governance
DESCRIPTION: Example of configuring namespace parameter for traffic governance rules in Apollo.

LANGUAGE: xml
CODE:
<dubbo:config-center namespace="governance" address="apollo://localhost:8080"/>

----------------------------------------

TITLE: Configuring Serializable Interface Check via System Property
DESCRIPTION: Demonstrates how to configure the Serializable interface check using a system property.

LANGUAGE: properties
CODE:
-Ddubbo.application.check-serializable=true

----------------------------------------

TITLE: Configuring Conditional Routing Rule in Dubbo
DESCRIPTION: This YAML configuration sets up a conditional routing rule for the UserService, redirecting all calls to the getInfo method to a specified host IP address.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
force: false
conditions:
  - 'method=getInfo => host = {your ip address}'

----------------------------------------

TITLE: Configuring Redis Registry Address in Dubbo
DESCRIPTION: XML configurations showing different ways to specify the Redis registry address in Dubbo. These include single server, multiple servers, and specifying the protocol explicitly.

LANGUAGE: xml
CODE:
<dubbo:registry address="redis://10.20.153.10:6379" />

LANGUAGE: xml
CODE:
<dubbo:registry address="redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379" />

LANGUAGE: xml
CODE:
<dubbo:registry protocol="redis" address="10.20.153.10:6379" />

LANGUAGE: xml
CODE:
<dubbo:registry protocol="redis" address="10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379" />

----------------------------------------

TITLE: Configuring Apollo-Specific Parameters
DESCRIPTION: Examples of configuring Apollo-specific parameters using properties format.

LANGUAGE: properties
CODE:
dubbo.config-center.address=apollo://localhost:8080

LANGUAGE: properties
CODE:
dubbo.config-center.parameters.apollo.meta=xxx
dubbo.config-center.parameters.env=xxx

----------------------------------------

TITLE: Configuring Zookeeper Registry in Dubbo Python
DESCRIPTION: Code snippet showing how to configure Zookeeper registry, create a client, and start a server in Dubbo-python. Requires Zookeeper to be running and accessible.

LANGUAGE: python
CODE:
# Configure the Zookeeper registry
registry_config = RegistryConfig.from_url("zookeeper://127.0.0.1:2181")
bootstrap = Dubbo(registry_config=registry_config)

# Create the client
client = bootstrap.create_client(reference_config)

# Create and start the server
bootstrap.create_server(service_config).start()

----------------------------------------

TITLE: Configuring Gson Serialization in Dubbo using YAML
DESCRIPTION: This snippet demonstrates how to enable Gson serialization for Dubbo in a Spring Boot application.yml file. It sets the serialization protocol to 'gson'.

LANGUAGE: yaml
CODE:
# application.yml (Spring Boot)
dubbo:
 protocol:
   serialization: gson

----------------------------------------

TITLE: Generic Service Implementation
DESCRIPTION: Implementation of GenericService interface for handling generic service requests on the server side.

LANGUAGE: java
CODE:
public class GenericServiceImpl implements GenericService {
    @Override
    public Object $invoke(String method, String[] parameterTypes, Object[] args) throws GenericException {
        if (method.equals("hi")) {
            return "hi, " + args[0];
        } else if (method.equals("hello")) {
            return "hello, " + args[0];
        }

        return "welcome";
    }
}

----------------------------------------

TITLE: Generic Service Invocation in Dubbo-Go
DESCRIPTION: Demonstrates how to perform a generic invocation of a service method using the configured reference.

LANGUAGE: go
CODE:
resp, err := refConf.
	GetRPCService().(*generic.GenericService).
	Invoke(
		context.TODO(),
		"GetUser",
		[]string{"java.lang.String"},
		[]hessian.Object{"A003"},
    )

----------------------------------------

TITLE: Installing dubboctl CLI Tool
DESCRIPTION: Commands to download and install the dubboctl command line tool for managing Dubbo deployments on Kubernetes

LANGUAGE: shell
CODE:
curl -L https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/release/downloadDubbo.sh | sh -

cd dubbo-$version
export PATH=$PWD/bin:$PATH

----------------------------------------

TITLE: Implementing Custom Filter in Go for Dubbo-Go
DESCRIPTION: This code demonstrates how to implement a custom filter in Go for Dubbo-Go. It includes the initialization function to register the filter, a constructor, and the implementation of the Filter interface methods.

LANGUAGE: go
CODE:
func init() {
	extension.SetFilter("myCustomFilter", NewMyClientFilter)
}

func NewMyClientFilter() filter.Filter {
	return &MyClientFilter{}
}

type MyClientFilter struct {
}

func (f *MyClientFilter) Invoke(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter Invoke is called, method Name = ", invocation.MethodName())
	return invoker.Invoke(ctx, invocation)
}
func (f *MyClientFilter) OnResponse(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter OnResponse is called")
	return result
}

----------------------------------------

TITLE: Initializing Dubbo Application in Java
DESCRIPTION: Methods used to start a Dubbo application, including initializing configuration and starting internal and other modules.

LANGUAGE: java
CODE:
DubboBootstrap.start()
ApplicationModel.getDeployer().start()

----------------------------------------

TITLE: Implementing Custom Filter in Go for Dubbo-Go
DESCRIPTION: This code demonstrates how to implement a custom filter in Go for Dubbo-Go. It includes the initialization function to register the filter, a constructor, and the implementation of the Filter interface methods.

LANGUAGE: go
CODE:
func init() {
	extension.SetFilter("myCustomFilter", NewMyClientFilter)
}

func NewMyClientFilter() filter.Filter {
	return &MyClientFilter{}
}

type MyClientFilter struct {
}

func (f *MyClientFilter) Invoke(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter Invoke is called, method Name = ", invocation.MethodName())
	return invoker.Invoke(ctx, invocation)
}
func (f *MyClientFilter) OnResponse(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter OnResponse is called")
	return result
}

----------------------------------------

TITLE: Installing Nacos with dubboctl
DESCRIPTION: Command to install Nacos and other components like dubbo-control-plane and prometheus using dubboctl

LANGUAGE: yaml
CODE:
$ dubboctl install --profile=demo

----------------------------------------

TITLE: Configuring Maven Plugin for Protobuf Generation
DESCRIPTION: Maven plugin configuration for generating Java code from Protobuf definitions using the Dubbo Maven plugin. Supports version 3.3.0 and above.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-maven-plugin</artifactId>
    <version>${dubbo.version}</version>
    <configuration>
        <outputDir>build/generated/source/proto/main/java</outputDir>
    </configuration>
</plugin>

----------------------------------------

TITLE: Provider Service Operation Metadata in JSON Format
DESCRIPTION: Illustrates the structure of service operation metadata reported by Dubbo providers. This metadata includes service parameters, methods, and type definitions.

LANGUAGE: json
CODE:
{
 "parameters": {
  "side": "provider",
  "methods": "sayHello",
  "dubbo": "2.0.2",
  "threads": "100",
  "interface": "org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService",
  "threadpool": "fixed",
  "version": "1.1.1",
  "generic": "false",
  "revision": "1.1.1",
  "valid": "true",
  "application": "metadatareport-configcenter-provider",
  "default.timeout": "5000",
  "group": "d-test",
  "anyhost": "true"
 },
 "canonicalName": "org.apache.dubbo.samples.metadatareport.configcenter.api.AnnotationService",
 "codeSource": "file:/Users/cvictory/workspace/work-mw/dubbo-samples/dubbo-samples-metadata-report/dubbo-samples-metadata-report-configcenter/target/classes/",
 "methods": [{
  "name": "sayHello",
  "parameterTypes": ["java.lang.String"],
  "returnType": "java.lang.String"
 }],
 "types": [{
  "type": "java.lang.String",
  "properties": {
   "value": {
    "type": "char[]"
   },
   "hash": {
    "type": "int"
   }
  }
 }, {
  "type": "int"
 }, {
  "type": "char"
 }]
}

----------------------------------------

TITLE: Using Bidirectional Streaming in Dubbo Client
DESCRIPTION: Java code demonstrating how to use bidirectional streaming in a Dubbo client.

LANGUAGE: java
CODE:
StreamObserver<GreeterRequest> requestStreamObserver = greeter.biStream(new SampleStreamObserver());
for (int i = 0; i < 10; i++) {
	GreeterRequest request = GreeterRequest.newBuilder().setName("name-" + i).build();
	requestStreamObserver.onNext(request);
}
requestStreamObserver.onCompleted();

----------------------------------------

TITLE: Configuring Nacos Registry with Authentication
DESCRIPTION: YAML configuration to set up Nacos registry with username and password authentication.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848?username=nacos&password=nacos

----------------------------------------

TITLE: Defining Allowed Classes for Serialization
DESCRIPTION: Shows how to define allowed classes for serialization in a resource file.

LANGUAGE: properties
CODE:
# security/serialize.allowlist
io.dubbo.test

----------------------------------------

TITLE: Implementing BusinessService in Java with Seata
DESCRIPTION: Implements the BusinessService with a purchase method annotated with @GlobalTransactional for distributed transaction management using Seata.

LANGUAGE: java
CODE:
public class BusinessServiceImpl implements BusinessService {

    private StorageService storageService;

    private OrderService orderService;

    /**
     * purchase
     */
    @GlobalTransactional
    public void purchase(String userId, String commodityCode, int orderCount) {

        storageService.deduct(commodityCode, orderCount);

        orderService.create(userId, commodityCode, orderCount);
    }
}

----------------------------------------

TITLE: Implementing TimeWindowQuantile for Metric Aggregation
DESCRIPTION: Java implementation of TimeWindowQuantile class, which uses the TDigest algorithm to calculate quantile metrics over a sliding time window.

LANGUAGE: Java
CODE:
public class TimeWindowQuantile {
    private final double compression;
    private final TDigest[] ringBuffer;
    private int currentBucket;
    private long lastRotateTimestampMillis;
    private final long durationBetweenRotatesMillis;

    public TimeWindowQuantile(double compression, int bucketNum, int timeWindowSeconds) {
        this.compression = compression;
        this.ringBuffer = new TDigest[bucketNum];
        for (int i = 0; i < bucketNum; i++) {
            this.ringBuffer[i] = TDigest.createDigest(compression);
        }

        this.currentBucket = 0;
        this.lastRotateTimestampMillis = System.currentTimeMillis();
        this.durationBetweenRotatesMillis = TimeUnit.SECONDS.toMillis(timeWindowSeconds) / bucketNum;
    }

    public synchronized double quantile(double q) {
        TDigest currentBucket = rotate();
        return currentBucket.quantile(q);
    }

    public synchronized void add(double value) {
        rotate();
        for (TDigest bucket : ringBuffer) {
            bucket.add(value);
        }
    }

    private TDigest rotate() {
        long timeSinceLastRotateMillis = System.currentTimeMillis() - lastRotateTimestampMillis;
        while (timeSinceLastRotateMillis > durationBetweenRotatesMillis) {
            ringBuffer[currentBucket] = TDigest.createDigest(compression);
            if (++currentBucket >= ringBuffer.length) {
                currentBucket = 0;
            }
            timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
            lastRotateTimestampMillis += durationBetweenRotatesMillis;
        }
        return ringBuffer[currentBucket];
    }
}

----------------------------------------

TITLE: Implementing Custom ProxyFactory in Java
DESCRIPTION: Example of implementing a custom ProxyFactory in Java for Dubbo. It shows the basic structure of a proxy factory class with methods for creating proxies and invokers.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.ProxyFactory;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.RpcException;
 
 
public class XxxProxyFactory implements ProxyFactory {
    public <T> T getProxy(Invoker<T> invoker) throws RpcException {
        // ...
    }
    public <T> Invoker<T> getInvoker(T proxy, Class<T> type, URL url) throws RpcException {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Event Notification in Dubbo XML
DESCRIPTION: XML configuration for setting up event notifications (onreturn and onthrow) for a Dubbo reference.

LANGUAGE: xml
CODE:
<bean id="demoCallback" class="com.alibaba.dubbo.samples.notify.impl.NotifyImpl" />

<dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.samples.notify.api.DemoService" version="1.0.0" group="cn">
    <dubbo:method name="sayHello" onreturn="demoCallback.onreturn" onthrow="demoCallback.onthrow"/>
</dubbo:reference>

----------------------------------------

TITLE: Implementing GenericService Interface in Java
DESCRIPTION: Example of implementing the GenericService interface to handle generic service requests. The implementation includes a sample sayHello method that returns a welcome message.

LANGUAGE: java
CODE:
package com.foo;
public class MyGenericService implements GenericService {

    public Object $invoke(String methodName, String[] parameterTypes, Object[] args) throws GenericException {
        if ("sayHello".equals(methodName)) {
            return "Welcome " + args[0];
        }
    }
}

----------------------------------------

TITLE: Configuring Graceful Shutdown in Dubbo-go YAML
DESCRIPTION: YAML configuration for customizing graceful shutdown behavior in Dubbo-go. It includes settings for timeout, step timeout, consumer update wait time, internal signal, and offline request window timeout.

LANGUAGE: yaml
CODE:
dubbo:
  shutdown:
    timeout:60
    step-timeout:3
    consumer-update-wait-time:3
    internal-signal:true
    offline-request-window-timeout:0

----------------------------------------

TITLE: Non-Spring Boot Maven Dependencies for Dubbo-Zookeeper
DESCRIPTION: Maven dependencies for integrating Dubbo with Zookeeper in a non-Spring Boot application, including core Dubbo and Zookeeper transitive dependencies.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.dubbo</groupId>
        <artifactId>dubbo</artifactId>
        <version>${dubbo.version}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.dubbo</groupId>
        <artifactId>dubbo-dependencies-zookeeper</artifactId>
        <version>${dubbo.version}</version>
        <type>pom</type>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Custom Protocol SPI for Dubbo Provider and Consumer
DESCRIPTION: These properties files define the SPI configuration for the custom 'edubbo' protocol, linking it to the EnhancedProtocol implementation class.

LANGUAGE: properties
CODE:
edubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol

----------------------------------------

TITLE: Non-Spring Boot Maven Dependencies for Dubbo-Zookeeper
DESCRIPTION: Maven dependencies for integrating Dubbo with Zookeeper in a non-Spring Boot application, including core Dubbo and Zookeeper transitive dependencies.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.dubbo</groupId>
        <artifactId>dubbo</artifactId>
        <version>${dubbo.version}</version>
    </dependency>
    <dependency>
        <groupId>org.apache.dubbo</groupId>
        <artifactId>dubbo-dependencies-zookeeper</artifactId>
        <version>${dubbo.version}</version>
        <type>pom</type>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Exposing Generic Service via Spring XML Configuration
DESCRIPTION: Spring XML configuration for declaring and exposing a generic service implementation through Dubbo.

LANGUAGE: xml
CODE:
<bean id="genericService" class="com.foo.MyGenericService" />
<dubbo:service interface="com.foo.BarService" ref="genericService" />

----------------------------------------

TITLE: Configuring Custom Protocol SPI for Dubbo Provider and Consumer
DESCRIPTION: These properties files define the SPI configuration for the custom 'edubbo' protocol, linking it to the EnhancedProtocol implementation class.

LANGUAGE: properties
CODE:
edubbo=org.apache.dubbo.samples.extensibility.protocol.common.EnhancedProtocol

----------------------------------------

TITLE: Configuring Filter Enable Rules in YAML
DESCRIPTION: YAML configuration to globally enable specific filters for all RPC calls

LANGUAGE: yaml
CODE:
dubbo:
  consumer:
    filter: "accesslog,tps"

----------------------------------------

TITLE: Configuring Hessian2 Serialization in XML
DESCRIPTION: XML configuration options for enabling Hessian2 serialization in Dubbo at protocol, consumer, or reference level.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="hessian2" />

        <!-- or -->
<dubbo:consumer serialization="hessian2" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="hessian2" />

----------------------------------------

TITLE: Implementing Dubbo MetricsFilter for Request Tracking
DESCRIPTION: Java implementation of the MetricsFilter, which provides request metrics tracking for the provider side in Dubbo.

LANGUAGE: Java
CODE:
@Activate(group = PROVIDER, order = -1)
public class MetricsFilter implements Filter, ScopeModelAware {
    @Override
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        collector.increaseTotalRequests(interfaceName, methodName, group, version);
        collector.increaseProcessingRequests(interfaceName, methodName, group, version);
        Long startTime = System.currentTimeMillis();
        try {
            Result invoke = invoker.invoke(invocation);
            collector.increaseSucceedRequests(interfaceName, methodName, group, version);
            return invoke;
        } catch (RpcException e) {
            collector.increaseFailedRequests(interfaceName, methodName, group, version);
            throw e;
        } finally {
            Long endTime = System.currentTimeMillis();
            Long rt = endTime - startTime;
            collector.addRT(interfaceName, methodName, group, version, rt);
            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);
        }
    }
}

----------------------------------------

TITLE: Defining User Service Interface in Java
DESCRIPTION: Java interface definition for UserService with a getUser method that takes a String and UserInfoDO as parameters.

LANGUAGE: java
CODE:
//org.apache.dubbo.demo.api.UserService
Result getUser(String name, UserInfoDO userInfoDO);

----------------------------------------

TITLE: Implementing Dubbo Registration with Failback
DESCRIPTION: Implementation of Dubbo's registration mechanism with failback support for handling registration failures. The code includes error handling and retry logic for failed registrations.

LANGUAGE: java
CODE:
    public void register(URL url) {
        super.register(url);
        failedRegistered.remove(url);
        failedUnregistered.remove(url);
        try {
            // Sending a registration request to the server side
            doRegister(url);
        } catch (Exception e) {
            Throwable t = e;

            // If the startup detection is opened, the Exception is thrown directly.
            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)
                    && url.getParameter(Constants.CHECK_KEY, true)
                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());
            boolean skipFailback = t instanceof SkipFailbackWrapperException;
            if (check || skipFailback) {
                if (skipFailback) {
                    t = t.getCause();
                }
                throw new IllegalStateException("Failed to register " + url + " to registry " + getUrl().getAddress() + ", cause: " + t.getMessage(), t);
            } else {
                logger.error("Failed to register " + url + ", waiting for retry, cause: " + t.getMessage(), t);
            }

            // Record a failed registration request to a failed list, retry regularly
            failedRegistered.add(url);
        }
    }

----------------------------------------

TITLE: Configuring Basic Dubbo Protocol
DESCRIPTION: Basic XML configuration for setting up the Dubbo protocol with port specification.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" port="20880" />

----------------------------------------

TITLE: Implementing a Custom Filter in Java for Dubbo
DESCRIPTION: Shows how to create a custom Filter implementation in Java for Dubbo. The XxxFilter class implements the Filter interface and defines the invoke method to intercept and process method invocations.

LANGUAGE: java
CODE:
package com.xxx;

import org.apache.dubbo.rpc.Filter;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.Result;
import org.apache.dubbo.rpc.RpcException;

public class XxxFilter implements Filter {
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        // before filter ...
        Result result = invoker.invoke(invocation);
        // after filter ...
        return result;
    }
}

----------------------------------------

TITLE: Defining Callback Interface
DESCRIPTION: Interface for handling return values and exceptions in service callbacks.

LANGUAGE: java
CODE:
interface Notify {
    public void onreturn(Person msg, Integer id);
    public void onthrow(Throwable ex, Integer id);
}

----------------------------------------

TITLE: Starting Dubbo Module in Java
DESCRIPTION: Method used to manually start a Dubbo module, which initializes configuration and starts internal components.

LANGUAGE: java
CODE:
ModuleModel.getDeployer().start()

----------------------------------------

TITLE: Configuring MessagePack Serialization in Properties File
DESCRIPTION: This snippet shows different ways to configure MessagePack serialization for Dubbo using a properties file. It includes options for global configuration, consumer-specific configuration, and service-specific configuration.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=msgpack

# or
dubbo.consumer.serialization=msgpack

# or
dubbo.reference.com.demo.DemoService.serialization=msgpack

----------------------------------------

TITLE: Configuring Dubbo Cache File Size Limit in Java
DESCRIPTION: Java System Properties to configure the maximum cache file size for Dubbo. These properties control the file-based caching mechanism used by various Dubbo modules.

LANGUAGE: java
CODE:
-Ddubbo.mapping.cache.maxFileSize=<size_in_bytes>\n-Ddubbo.meta.cache.maxFileSize=<size_in_bytes>

----------------------------------------

TITLE: Configuring MessagePack Serialization in Spring Boot YAML
DESCRIPTION: This snippet demonstrates how to enable MessagePack serialization for Dubbo in a Spring Boot application using YAML configuration. It sets the serialization protocol to 'msgpack'.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   serialization: msgpack

----------------------------------------

TITLE: Configuring heuristicSmoothingFlowControl in Dubbo Properties
DESCRIPTION: Sets up the heuristicSmoothingFlowControl adaptive flow control algorithm using Dubbo properties. This algorithm checks CPU usage and adjusts request processing based on current load.

LANGUAGE: properties
CODE:
dubbo.provider.flowcontrol=heuristicSmoothingFlowControl

----------------------------------------

TITLE: Generating Java Stack Trace for Dubbo Caller Shutdown Issues
DESCRIPTION: Command to generate a stack trace log file for analyzing caller shutdown errors in Dubbo applications using jstack utility.

LANGUAGE: shell
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Nacos Metadata Center in XML
DESCRIPTION: XML configuration to enable Nacos as the metadata center for Dubbo. Specifies the Nacos server address.

LANGUAGE: xml
CODE:
<dubbo:metadata-report address="nacos://127.0.0.1:8848"/>

----------------------------------------

TITLE: Creating Dubbo-go Project Template
DESCRIPTION: Use dubbogo-cli to create a new Dubbo-go application project template with necessary directory structure and files.

LANGUAGE: bash
CODE:
$ mkdir mesh-app-server
$ cd mesh-app-server
$ dubbogo-cli newApp .
$  tree .

----------------------------------------

TITLE: Implementing Custom Merger in Java
DESCRIPTION: Example implementation of a custom Merger interface in Java showing the basic structure and required method implementation.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.cluster.Merger;
 
public class XxxMerger<T> implements Merger<T> {
    public T merge(T... results) {
        // ...
    }
}

----------------------------------------

TITLE: Setting Implicit Parameters on Provider Side in Java
DESCRIPTION: Illustrates how to set implicit parameters on the provider side that can be returned to the client along with the response.

LANGUAGE: java
CODE:
public class XxxServiceImpl implements XxxService {

    public void xxx() {
        String index = xxx;
        RpcContext.getServerContext().setAttachment("result", index);
    }
}

----------------------------------------

TITLE: Forcing Remote Reference in Dubbo XML Configuration
DESCRIPTION: This XML configuration forces a remote reference to a service in Dubbo, overriding the default behavior of prioritizing local services.

LANGUAGE: xml
CODE:
<dubbo:reference ... scope="remote" />

----------------------------------------

TITLE: Configuring Provider Thread Model in YAML
DESCRIPTION: Example of configuring the All Dispatcher thread model for a Dubbo provider in application.yaml.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-springboot-demo-provider
  protocol:
    name: dubbo
    port: -1
    dispatcher: all
  registry:
    id: zk-registry
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Adding Native Dependencies for Dubbo
DESCRIPTION: Maven dependencies required for Dubbo native image support, including dubbo-config-spring6 and dubbo-native.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-config-spring6</artifactId>
    <version>${dubbo.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-native</artifactId>
    <version>${dubbo.version}</version>
</dependency>

----------------------------------------

TITLE: Inspecting Custom ExecutorRepository Implementation in Java
DESCRIPTION: Check for a custom implementation of ExecutorRepository interface and examine its shutdown method for potential exceptions.

LANGUAGE: Java
CODE:
org.apache.dubbo.common.threadpool.manager.ExecutorRepository

----------------------------------------

TITLE: Connection Limit Configuration
DESCRIPTION: XML configuration to set the maximum number of accepted connections for the protocol.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" accepts="1000" />

----------------------------------------

TITLE: Configuring Remote Call Behavior in Dubbo Java Code
DESCRIPTION: This Java code snippet shows how to dynamically configure a single call as a remote call in Dubbo, overriding the default local call behavior.

LANGUAGE: java
CODE:
RpcContext.getServiceContext().setLocalInvoke(false);

----------------------------------------

TITLE: Configuring Dubbo Rust Client with Dynamic Registry Selection
DESCRIPTION: Shows how to set up a Dubbo Rust client with dynamic registry selection based on environment variables. It supports both Zookeeper and Nacos registries, falling back to a default host if no registry is specified.

LANGUAGE: rust
CODE:
let mut builder = ClientBuilder::new();

// Get registry address via env
if let Ok(zk_servers) = env::var("ZOOKEEPER_SERVERS") {
    // Create registry
    let zkr = ZookeeperRegistry::new(&zk_servers);
    // Bind registry
    let directory = RegistryDirectory::new(Box::new(zkr));
    builder = builder.with_directory(Box::new(directory));
} else if let Ok(nacos_url_str) = env::var("NACOS_URL") {
    // NACOS_URL=nacos://mse-96efa264-p.nacos-ans.mse.aliyuncs.com
    // Create registry
    let nacos_url = Url::from_url(&nacos_url_str).unwrap();
    let registry = NacosRegistry::new(nacos_url);
    // Bind registry
    let directory = RegistryDirectory::new(Box::new(registry));
    builder = builder.with_directory(Box::new(directory));
} else {
    builder = builder.with_host("http://127.0.0.1:8888");
}

let mut cli = GreeterClient::new(builder);

----------------------------------------

TITLE: Calling Streaming Methods in Java Client
DESCRIPTION: Java code demonstrating how to call streaming methods in a Dubbo client without using Protobuf.

LANGUAGE: java
CODE:
delegate.sayHelloServerStream("server stream", new StreamObserver<String>() {
    @Override
    public void onNext(String data) {
        System.out.println(data);
    }

    @Override
    public void onError(Throwable throwable) {
        throwable.printStackTrace();
    }

    @Override
    public void onCompleted() {
        System.out.println("onCompleted");
    }
});


StreamObserver<String> request = delegate.sayHelloStream(new StreamObserver<String>() {
    @Override
    public void onNext(String data) {
        System.out.println(data);
    }

    @Override
    public void onError(Throwable throwable) {
        throwable.printStackTrace();
    }

    @Override
    public void onCompleted() {
        System.out.println("onCompleted");
    }
});
for (int i = 0; i < n; i++) {
    request.onNext("stream request" + i);
}
request.onCompleted();

----------------------------------------

TITLE: Configuring Multi-Protocol Export in Properties for Apache Dubbo
DESCRIPTION: Properties configuration for setting up multi-protocol export in Apache Dubbo. It sets the Triple protocol as the main protocol, extends it with the Dubbo protocol, and specifies the port.

LANGUAGE: properties
CODE:
dubbo.protocol.name=tri
dubbo.protocol.ext-protocol=dubbo,
dubbo.protocol.port=20880

----------------------------------------

TITLE: Initializing ExtensionLoader for Different Scopes in Java
DESCRIPTION: Demonstrates how to initialize ExtensionLoader for different scopes (Module, Application, Framework) in Dubbo. It also shows how to define a Protocol interface with a specific scope using the @SPI annotation.

LANGUAGE: java
CODE:
ModuleModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  
ApplicationModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  
FrameworkModel.getExtensionFactory().getAdaptiveExtension(Protocol.class)  

@SPI(scope = FRAMEWORK)  
public interface Protocol {  
}

----------------------------------------

TITLE: Configuring MessagePack Serialization in Dubbo XML
DESCRIPTION: This snippet illustrates how to configure MessagePack serialization for Dubbo using XML configuration. It provides options for protocol-level, consumer-level, and reference-level configurations.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="msgpack" />

        <!-- or -->
<dubbo:consumer serialization="msgpack" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="msgpack" />

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Java interface definition for a simple greeting service in Dubbo.

LANGUAGE: java
CODE:
public interface GreetingService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Implementation of the GreetingService interface with DubboService annotation

LANGUAGE: java
CODE:
@DubboService(version = "1.0.0")
public class AnnotatedGreetingService implements GreetingService {
    @Override
    public String sayHello(String name) {
        System.out.println("greeting service received: " + name);
        return "hello, " + name + "! from host: " + NetUtils.getLocalHost();
    }
}

----------------------------------------

TITLE: Configuring Dispatcher in Dubbo XML
DESCRIPTION: XML configuration examples showing how to specify a dispatcher at protocol and provider levels in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:protocol dispatcher="xxx" />
<!-- Default value setting. When <dubbo:protocol> does not configure the dispatcher attribute, this configuration is used -->
<dubbo:provider dispatcher="xxx" />

----------------------------------------

TITLE: Implementing SerializationOptimizer for Class Registration
DESCRIPTION: This Java code snippet shows how to implement the SerializationOptimizer interface to register serializable classes for improved performance.

LANGUAGE: java
CODE:
public class SerializationOptimizerImpl implements SerializationOptimizer {

    public Collection<Class> getSerializableClasses() {
        List<Class> classes = new LinkedList<Class>();
        classes.add(BidRequest.class);
        classes.add(BidResponse.class);
        classes.add(Device.class);
        classes.add(Geo.class);
        classes.add(Impression.class);
        classes.add(SeatBid.class);
        return classes;
    }
}

----------------------------------------

TITLE: Configuring Local Call Behavior in Dubbo Java Code
DESCRIPTION: This Java code snippet demonstrates how to dynamically configure a single call as a local call in Dubbo, enforcing the use of local services.

LANGUAGE: java
CODE:
RpcContext.getServiceContext().setLocalInvoke(true);

----------------------------------------

TITLE: Limiting Specific Method Concurrency in Dubbo XML Configuration
DESCRIPTION: Limits the sayHello method of com.foo.BarService to no more than 10 concurrent executions on the server side. This allows for fine-grained control over method-level concurrency.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService">
    <dubbo:method name="sayHello" executes="10" />
</dubbo:service>

----------------------------------------

TITLE: Setting Group and Namespace in YAML
DESCRIPTION: YAML configuration to set custom group and namespace for Zookeeper configuration center

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: zookeeper://127.0.0.1:2181
    group: dubbo-cluster1
    namespace: dev1

----------------------------------------

TITLE: Configuring Nacos Registry in Properties
DESCRIPTION: Properties file configuration to set up Nacos as the registry for Dubbo.

LANGUAGE: properties
CODE:
dubbo.registry.address=nacos://localhost:8848

----------------------------------------

TITLE: Default Maximum Cache File Size in Dubbo
DESCRIPTION: The default maximum file size for Dubbo cache files, as defined in the FileCacheStore.LimitedLengthBufferedWriter class.

LANGUAGE: java
CODE:
Long.MAX_VALUE // 2^63 - 1

----------------------------------------

TITLE: Configuring Zookeeper Metadata Center in YAML
DESCRIPTION: Enables Zookeeper as metadata center using YAML configuration format.

LANGUAGE: yaml
CODE:
dubbo
  metadata-report
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Defining Dubbo Interface for APISIX
DESCRIPTION: This Java code defines the ApisixService interface for Dubbo, which will be used to handle HTTP requests through APISIX.

LANGUAGE: java
CODE:
public interface ApisixService {
    Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext);
}

----------------------------------------

TITLE: Configuring Service-Level Random Token Authorization in Dubbo XML
DESCRIPTION: Sets up token authorization using a randomly generated UUID token for a specific service interface.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" token="true" />

----------------------------------------

TITLE: Setting Method-Level Timeout for DubboService in Java
DESCRIPTION: Configures a 5-second timeout for the sayHello method of DemoService on the provider side.

LANGUAGE: java
CODE:
@DubboService(methods = {@Method(name = "sayHello", timeout = 5000)})
public class DemoServiceImpl implements DemoService{}

----------------------------------------

TITLE: Implementing Streaming Server in Rust
DESCRIPTION: Implements a Dubbo Rust server that handles unary, client streaming, server streaming, and bidirectional streaming requests for the Greeter service.

LANGUAGE: rust
CODE:
pub mod protos {
    include!(concat!(env!("OUT_DIR"), "/org.apache.dubbo.sample.tri.rs"));
}

use futures_util::StreamExt;
use protos::{
    greeter_server::{register_server, Greeter},
    GreeterReply, GreeterRequest,
};

use std::{io::ErrorKind, pin::Pin};

use async_trait::async_trait;
use futures_util::Stream;
use tokio::sync::mpsc;
use tokio_stream::wrappers::ReceiverStream;

use dubbo_config::RootConfig;
use dubbo::{codegen::*, Dubbo};

type ResponseStream =
    Pin<Box<dyn Stream<Item = Result<GreeterReply, dubbo::status::Status>> + Send>>;

#[tokio::main]
async fn main() {
    register_server(GreeterServerImpl {
        name: "greeter".to_string(),
    });

    // Dubbo::new().start().await;
    Dubbo::new()
        .with_config({
            let r = RootConfig::new();
            match r.load() {
                Ok(config) => config,
                Err(_err) => panic!("err: {:?}", _err), // response was dropped
            }
        })
        .start()
        .await;
}

#[allow(dead_code)]
#[derive(Default, Clone)]
struct GreeterServerImpl {
    name: String,
}

// #[async_trait]
#[async_trait]
impl Greeter for GreeterServerImpl {
    async fn greet(
        &self,
        request: Request<GreeterRequest>,
    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {
        println!("GreeterServer::greet {:?}", request.metadata);

        Ok(Response::new(GreeterReply {
            message: "hello, dubbo-rust".to_string(),
        }))
    }

    async fn greet_client_stream(
        &self,
        request: Request<Decoding<GreeterRequest>>,
    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {
        let mut s = request.into_inner();
        loop {
            let result = s.next().await;
            match result {
                Some(Ok(val)) => println!("result: {:?}", val),
                Some(Err(val)) => println!("err: {:?}", val),
                None => break,
            }
        }
        Ok(Response::new(GreeterReply {
            message: "hello client streaming".to_string(),
        }))
    }

    type greetServerStreamStream = ResponseStream;
    async fn greet_server_stream(
        &self,
        request: Request<GreeterRequest>,
    ) -> Result<Response<Self::greetServerStreamStream>, dubbo::status::Status> {
        println!("greet_server_stream: {:?}", request.into_inner());

        let data = vec![
            Result::<_, dubbo::status::Status>::Ok(GreeterReply {
                message: "msg1 from server".to_string(),
            }),
            Result::<_, dubbo::status::Status>::Ok(GreeterReply {
                message: "msg2 from server".to_string(),
            }),
            Result::<_, dubbo::status::Status>::Ok(GreeterReply {
                message: "msg3 from server".to_string(),
            }),
        ];
        let resp = futures_util::stream::iter(data);

        Ok(Response::new(Box::pin(resp)))
    }

    type greetStreamStream = ResponseStream;
    async fn greet_stream(
        &self,
        request: Request<Decoding<GreeterRequest>>,
    ) -> Result<Response<Self::greetStreamStream>, dubbo::status::Status> {
        println!(
            "GreeterServer::greet_stream, grpc header: {:?}",
            request.metadata
        );

        let mut in_stream = request.into_inner();
        let (tx, rx) = mpsc::channel(128);

        tokio::spawn(async move {
            while let Some(result) = in_stream.next().await {
                match result {
                    Ok(v) => {
                        tx.send(Ok(GreeterReply {
                            message: format!("server reply: {:?}", v.name),
                        }))
                        .await
                        .expect("working rx")
                    }
                    Err(err) => {
                        if let Some(io_err) = match_for_io_error(&err) {
                            if io_err.kind() == ErrorKind::BrokenPipe {
                                eprintln!("\tclient disconnected: broken pipe");
                                break;
                            }
                        }

                        match tx.send(Err(err)).await {
                            Ok(_) => (),
                            Err(_err) => break,
                        }
                    }
                }
            }
            println!("\tstream ended");
        });

        let out_stream = ReceiverStream::new(rx);

        Ok(Response::new(
            Box::pin(out_stream) as Self::greetStreamStream
        ))
    }
}

fn match_for_io_error(err_status: &dubbo::status::Status) -> Option<&std::io::Error> {
    let mut err: &(dyn std::error::Error + 'static) = err_status;

    loop {
        if let Some(io_err) = err.downcast_ref::<std::io::Error>() {
            return Some(io_err);
        }

        err = match err.source() {
            Some(err) => err,
            None => return None,
        };
    }
}

----------------------------------------

TITLE: Configuring QOS via Properties File
DESCRIPTION: Basic QoS configuration settings in dubbo.properties file including port, access control, and security settings.

LANGUAGE: properties
CODE:
dubbo.application.qos-enable=true
dubbo.application.qos-port=33333
dubbo.application.qos-accept-foreign-ip=false
dubbo.application.qos-accept-foreign-ip-whitelist=123.12.10.13, 132.12.10.13/24
dubbo.application.qos-anonymous-access-permission-level=PUBLIC

----------------------------------------

TITLE: Kubernetes Port Forwarding
DESCRIPTION: Command to set up port forwarding in Kubernetes for accessing the service deployment status

LANGUAGE: shell
CODE:
$ kubectl port-forward

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Basic interface definition for a Dubbo service that retrieves Person objects.

LANGUAGE: java
CODE:
interface IDemoService {
    public Person get(int id);
}

----------------------------------------

TITLE: Adding Etcd Registry Dependency in Maven
DESCRIPTION: Maven dependency configuration required to include the Etcd registry adapter for Dubbo 3.x applications.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-registry-etcd</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Installing GraalVM Native Image Tool
DESCRIPTION: Command to install the native-image tool for GraalVM using the gu package manager.

LANGUAGE: bash
CODE:
gu install native-image

----------------------------------------

TITLE: Configuring Dubbo Logger Framework
DESCRIPTION: Property configuration to specify which logging framework Dubbo should use for output.

LANGUAGE: properties
CODE:
dubbo.application.logger=slf4j

----------------------------------------

TITLE: Implementing Custom Dubbo Cluster in Java
DESCRIPTION: Example implementation of a custom Cluster interface in Dubbo, showing the required class structure and method implementation including directory merging and invocation handling.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.cluster.Cluster;
import org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker;
import org.apache.dubbo.rpc.cluster.Directory;
import org.apache.dubbo.rpc.cluster.LoadBalance;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.Result;
import org.apache.dubbo.rpc.RpcException;
 
public class XxxCluster implements Cluster {
    public <T> Invoker<T> merge(Directory<T> directory) throws RpcException {
        return new AbstractClusterInvoker<T>(directory) {
            public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
                // ...
            }
        };
    }
}

----------------------------------------

TITLE: Configuring Dockerfile for Remote Debugging
DESCRIPTION: Modifies the Dockerfile of the Dubbo consumer to enable remote debugging by setting the JVM debug options.

LANGUAGE: dockerfile
CODE:
FROM openjdk:8-jdk
ADD ./target/dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar
EXPOSE 31000
CMD java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=31000 /dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Configuring Dockerfile for Remote Debugging
DESCRIPTION: Modifies the Dockerfile of the Dubbo consumer to enable remote debugging by setting the JVM debug options.

LANGUAGE: dockerfile
CODE:
FROM openjdk:8-jdk
ADD ./target/dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar
EXPOSE 31000
CMD java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=31000 /dubbo-samples-xds-consumer-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Configuring Dubbo Registry with Multiple Components
DESCRIPTION: Shows how to configure Dubbo with a registry that also serves as a configuration center and metadata center. This is the default behavior for certain registry types like Zookeeper and Nacos.

LANGUAGE: yaml
CODE:
dubbo
 registry
  address: nacos://localhost:8848
 config-center
  address: nacos://localhost:8848
 metadata-report
  address: nacos://localhost:8848

----------------------------------------

TITLE: Configuring Minimum Concurrent Load Balancing (XML)
DESCRIPTION: Sets the loadbalance attribute of the service's client to leastactive, which will call the provider with the least number of concurrent requests.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" loadbalance="leastactive" />

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" loadbalance="leastactive" />

----------------------------------------

TITLE: Configuring Zookeeper Registry in Properties
DESCRIPTION: Properties file configuration for setting up Zookeeper as a registry center in Dubbo.

LANGUAGE: properties
CODE:
dubbo.registry.address=zookeeper://localhost:2181
dubbo.registry.register-mode=instance

----------------------------------------

TITLE: Configuring Zookeeper Registry in Properties
DESCRIPTION: Properties file configuration for setting up Zookeeper as a registry center in Dubbo.

LANGUAGE: properties
CODE:
dubbo.registry.address=zookeeper://localhost:2181
dubbo.registry.register-mode=instance

----------------------------------------

TITLE: Disabling Simple Profiler in Dubbo
DESCRIPTION: Command to disable the simple profiler mode, which also disables the detail profiler mode.

LANGUAGE: bash
CODE:
dubbo>disableSimpleProfiler
OK

dubbo>

----------------------------------------

TITLE: Configuring Minimum Concurrent Load Balancing (XML)
DESCRIPTION: Sets the loadbalance attribute of the service's client to leastactive, which will call the provider with the least number of concurrent requests.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" loadbalance="leastactive" />

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" loadbalance="leastactive" />

----------------------------------------

TITLE: Enabling Nacos Configuration Center in Dubbo
DESCRIPTION: Different ways to configure Nacos as the configuration center for Dubbo, including XML, YAML, Properties, and Java configuration methods.

LANGUAGE: xml
CODE:
<dubbo:config-center address="nacos://127.0.0.1:8848"/>

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: nacos://127.0.0.1:8848

LANGUAGE: properties
CODE:
dubbo.config-center.address=nacos://127.0.0.1:8848

LANGUAGE: java
CODE:
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("nacos://127.0.0.1:8848");

----------------------------------------

TITLE: Configuring DispatcherServlet for Webservice in XML
DESCRIPTION: XML configuration for setting up the DispatcherServlet when using the Servlet Bridge Server for the Webservice protocol in Dubbo.

LANGUAGE: xml
CODE:
<servlet>
         <servlet-name>dubbo</servlet-name>
         <servlet-class>org.apache.dubbo.remoting.http.servlet.DispatcherServlet</servlet-class>
         <load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
         <servlet-name>dubbo</servlet-name>
         <url-pattern>/*</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Configuring dubbo-build for IDL Compilation
DESCRIPTION: Sets up the build script to compile Protocol Buffers IDL files into Rust code using dubbo-build. This generates the necessary Dubbo stub code for the project.

LANGUAGE: rust
CODE:
fn main() {
    dubbo_build::prost::configure()
        .compile(&["proto/greeter.proto"], &["proto/"])
        .unwrap();
}

----------------------------------------

TITLE: Configuring Zookeeper Registry in XML
DESCRIPTION: XML configuration for setting up Zookeeper as a registry center in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" register-mode="instance" />

----------------------------------------

TITLE: Registering Cache Factory Extension
DESCRIPTION: Properties file configuration to register the custom cache factory implementation with Dubbo's extension mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxCacheFactory

----------------------------------------

TITLE: Configuring Zookeeper Registry in XML
DESCRIPTION: XML configuration for setting up Zookeeper as a registry center in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" register-mode="instance" />

----------------------------------------

TITLE: Configuring Server-Side Method Caching in Dubbo Annotations
DESCRIPTION: Java annotation configuration for enabling LRU caching at the method level using @DubboService and @Method.

LANGUAGE: java
CODE:
@DubboService(methods = {@Method(name="sayHello",cache = "lru")})
public class DemoServiceImpl implements DemoService {

    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);
    @Override
    public String sayHello(String name) {
        logger.info("Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return "Hello " + name;

    }

}

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Basic interface definition for a Dubbo service that provides a sayHello method.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo;

public interface DemoService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Setting Service-Level Retry Count in Dubbo-go
DESCRIPTION: This code shows how to set the retry count at the service level using the client.WithClientRetries() method when creating a new service instance.

LANGUAGE: go
CODE:
svc, err := greet.NewGreetService(cli, client.WithClientRetries(5))

----------------------------------------

TITLE: Global Externalized Configuration in YAML
DESCRIPTION: Configuration for enabling global externalized configuration with Nacos config center, including address and config file settings.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: nacos://127.0.0.1:2181
    config-file: dubbo.properties # optional

----------------------------------------

TITLE: Registering Redis Service Address in Java
DESCRIPTION: This snippet demonstrates how to register a Redis service address using Dubbo's RegistryFactory and Registry classes. It includes setting up a Zookeeper registry and registering a Redis URL with various parameters.

LANGUAGE: java
CODE:
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
Registry registry = registryFactory.getRegistry(URL.valueOf("zookeeper://10.20.153.10:2181"));
registry.register(URL.valueOf("redis://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash"));

----------------------------------------

TITLE: Custom Prometheus Configuration for Dubbo Admin Integration
DESCRIPTION: Prometheus configuration snippet for setting up HTTP service discovery through Dubbo Admin's metrics API endpoint.

LANGUAGE: yaml
CODE:
- job_name: 'dubbo'
  http_sd_configs:
    - url: http://{admin-address}/api/dev/metrics/prometheus

----------------------------------------

TITLE: Configuring Multiple Registration Centers with Dubbo Go API
DESCRIPTION: Demonstrates how to configure multiple registration centers (Nacos and Zookeeper) using the Dubbo Go API. It shows the initialization of a Dubbo instance with two registry configurations.

LANGUAGE: go
CODE:
ins, _ := dubbo.NewInstance(
	dubbo.WithRegistry(
	    registryWithID("nacos"),
		registry.WithNacos(),
		registry.WithAddress("127.0.0.1:8848"),
	),
	dubbo.WithRegistry(
	    registryWithID("zookeeper"),
		registry.WithZookeeper(),
		registry.WithAddress("127.0.0.1:2181"),
	),
)

----------------------------------------

TITLE: Custom Load Balance Implementation
DESCRIPTION: Example of implementing a custom load balancing strategy by implementing the LoadBalance interface

LANGUAGE: java
CODE:
package com.demo.dubbo;
public class DemoLoadBalance implements LoadBalance {
    @Override
    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {
        System.out.println("[DemoLoadBalance]Select the first invoker...");
        return invokers.get(0);
    }
}

----------------------------------------

TITLE: Single Read in Dubbo Python Streaming
DESCRIPTION: Shows how to perform a single read operation in client streaming mode.

LANGUAGE: python
CODE:
result = stream.read()
print(f"Received response: {result.message}")

----------------------------------------

TITLE: Configuring Non-Aggregated Multi-Registry in XML
DESCRIPTION: This XML configuration demonstrates how to set up multiple non-aggregated registries in Dubbo. It defines two separate registry components with different addresses.

LANGUAGE: xml
CODE:
<dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" />
<dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" />

----------------------------------------

TITLE: Defining Streaming Interface in Java
DESCRIPTION: Java interface definition for streaming methods without using Protobuf.

LANGUAGE: java
CODE:
public interface WrapperGreeter {
    // Bidirectional stream
    StreamObserver<String> sayHelloStream(StreamObserver<String> response);
    // Server stream
    void sayHelloServerStream(String request, StreamObserver<String> response);
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Dubbo Documentation
DESCRIPTION: YAML configuration block defining metadata for a documentation page about Dubbo's registry center, service discovery, and load balancing features. Includes page aliases, description, title, and weight settings.

LANGUAGE: yaml
CODE:
aliases:
    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/
    - /en/docs3-v2/java-sdk/advanced-features-and-usage/others/
description: Registry Center
linkTitle: Registry Center and Service Discovery
title: Registry Center, Service Discovery, and Load Balancing
type: docs
weight: 5

----------------------------------------

TITLE: Referencing Services from Multiple Registries in Dubbo XML Configuration
DESCRIPTION: Shows how to configure a Dubbo application to reference services from multiple registries. This example references the same service interface from both Chinese and international registries.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="world"  />
    <!-- 多注册中心配置 -->
    <dubbo:registry id="chinaRegistry" address="10.20.141.150:9090" />
    <dubbo:registry id="intlRegistry" address="10.20.154.177:9010" default="false" />
    <!-- 引用中文站服务 -->
    <dubbo:reference id="chinaHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="chinaRegistry" />
    <!-- 引用国际站站服务 -->
    <dubbo:reference id="intlHelloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" registry="intlRegistry" />
</beans>

----------------------------------------

TITLE: Initializing Reference Configuration in Dubbo-Go
DESCRIPTION: Creates a new reference configuration for generic invocation with registry and protocol settings.

LANGUAGE: go
CODE:
func newRefConf(appName, iface, protocol string) config.ReferenceConfig {
	registryConfig := &config.RegistryConfig{
		Protocol: "zookeeper",
		Address:  "127.0.0.1:2181",
	}

	refConf := config.ReferenceConfig{
		InterfaceName: iface,
		Cluster:       "failover",
		Registry:      []string{"zk"},
		Protocol:      protocol,
		Generic:       "true",
	}

	rootConfig := config.NewRootConfig(config.WithRootRegistryConfig("zk", registryConfig))
	_ = rootConfig.Init()
	_ = refConf.Init(rootConfig)
	refConf.GenericLoad(appName)

	return refConf
}

----------------------------------------

TITLE: Defining Async Service Interface with CompletableFuture
DESCRIPTION: Interface definition for an async service showing both synchronous and asynchronous method signatures using CompletableFuture

LANGUAGE: java
CODE:
public interface AsyncService {
    /**
     * Synchronous call method
     */
    String invoke(String param);
    /**
     * Asynchronous call method
     */
    CompletableFuture<String> asyncInvoke(String param);
}

----------------------------------------

TITLE: Implementing Dubbo Server in Python
DESCRIPTION: Complete server implementation including service definition, handler configuration, and server startup

LANGUAGE: python
CODE:
import dubbo
from dubbo.configs import ServiceConfig
from dubbo.proxy.handlers import RpcMethodHandler, RpcServiceHandler

class UnaryServiceServicer:
    def say_hello(self, message: bytes) -> bytes:
        print(f"Received message from client: {message}")
        return b"Hello from server"

def build_service_handler():
    # build a method handler
    method_handler = RpcMethodHandler.unary(
        method=UnaryServiceServicer().say_hello, method_name="unary"
    )
    # build a service handler
    service_handler = RpcServiceHandler(
        service_name="org.apache.dubbo.samples.HelloWorld",
        method_handlers=[method_handler],
    )
    return service_handler

if __name__ == "__main__":
    # build service config
    service_handler = build_service_handler()
    service_config = ServiceConfig(
        service_handler=service_handler, host="127.0.0.1", port=50051
    )
    # start the server
    server = dubbo.Server(service_config).start()

    input("Press Enter to stop the server...\n")

----------------------------------------

TITLE: Loading Fixed Extension Classes Example
DESCRIPTION: Example of loading fixed extension classes in Dubbo SPI.

LANGUAGE: Java
CODE:
public class DubboSPITest {
    @Test
    public void sayHello() throws Exception {
        ExtensionLoader<DemoSpi> extensionLoader = 
            ExtensionLoader.getExtensionLoader(DemoSpi.class);
        DemoSpi demoSpi = extensionLoader.getExtension("demoSpiImpl");
        demoSpi.sayHello();
    }
}

----------------------------------------

TITLE: Configuring Method-Level Server-Side Concurrent Execution Limit (XML)
DESCRIPTION: Limits the sayHello method of com.foo.BarService to a maximum of 10 concurrent executions using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService">
    <dubbo:method name="sayHello" executes="10" />
</dubbo:service>

----------------------------------------

TITLE: Getting Router Snapshot Command
DESCRIPTION: Command to retrieve the grouping status of each router layer for a specified service. Shows all invokers and their validity status along with the router chain.

LANGUAGE: shell
CODE:
dubbo>getRouterSnapshot com.dubbo.dubbointegration.BackendService
com.dubbo.dubbointegration.BackendService@2c2e824a
[ All Invokers:2 ] [ Valid Invokers: 2 ]

MockInvokersSelector  Total: 2
[ Mocked -> Empty (Total: 0) ]
[ Normal -> 172.18.111.187:20880,172.18.111.183:20880 (Total: 2) ]
            ↓ 
StandardMeshRuleRouter not support
            ↓ 
TagStateRouter not support
            ↓ 
ServiceStateRouter not support
            ↓ 
AppStateRouter not support
            ↓ 
TailStateRouter End

----------------------------------------

TITLE: Exception Handling Example in Java
DESCRIPTION: Shows a typical service consumer implementation with try-catch exception handling that can be replaced with mock configuration.

LANGUAGE: java
CODE:
public class DemoService {
    public Offer findOffer(String offerId) {
        Offer offer = null;
        try {
            offer = offerService.findOffer(offerId);
        } catch (RpcException e) {
            logger.error(e);
        }
        return offer;
    }
}

----------------------------------------

TITLE: Configuring Thread Pool Status Export
DESCRIPTION: Examples of configuring thread pool status export settings using properties, XML, and YAML.

LANGUAGE: properties
CODE:
# dubbo.properties
dubbo.application.dump.enable=true
dubbo.application.dump.directory=/tmp

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" dump-enable="false" dump-directory="/tmp"/>

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: dubbo-springboot-demo-provider
    dump-enable: false
    dump-directory: /tmp

----------------------------------------

TITLE: Packaging Dubbo Project
DESCRIPTION: Maven command to package the Dubbo project, skipping tests for faster build.

LANGUAGE: bash
CODE:
mvn clean package -DskipTests

----------------------------------------

TITLE: Application-Specific Configuration in YAML
DESCRIPTION: Configuration for application-specific externalized configuration with Nacos, including address and app-config-file settings.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: nacos://127.0.0.1:2181
    app-config-file: dubbo.properties # optional

----------------------------------------

TITLE: HTTP Request Body Structure
DESCRIPTION: JSON structure for the HTTP request body containing method parameters as a list in the same order as the method signature.

LANGUAGE: json
CODE:
{
  "param": []
}

----------------------------------------

TITLE: Application-Specific Configuration in YAML
DESCRIPTION: Configuration for application-specific externalized configuration with Nacos, including address and app-config-file settings.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: nacos://127.0.0.1:2181
    app-config-file: dubbo.properties # optional

----------------------------------------

TITLE: Implementing Custom RegistryFactory in Java
DESCRIPTION: Example implementation of a custom RegistryFactory in Java, showing how to create a new registry instance based on a given URL.

LANGUAGE: java
CODE:
package com.xxx;

import org.apache.dubbo.registry.RegistryFactory;
import org.apache.dubbo.registry.Registry;
import org.apache.dubbo.common.URL;

public class XxxRegistryFactory implements RegistryFactory {
    public Registry getRegistry(URL url) {
        return new XxxRegistry(url);
    }
}

----------------------------------------

TITLE: Configuring Method-Level Server-Side Concurrent Execution Limit (XML)
DESCRIPTION: Limits the sayHello method of com.foo.BarService to a maximum of 10 concurrent executions using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService">
    <dubbo:method name="sayHello" executes="10" />
</dubbo:service>

----------------------------------------

TITLE: Configuring Pixiu HTTP Listener
DESCRIPTION: YAML configuration for Pixiu HTTP listener and Dubbo proxy settings with auto-resolve enabled

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8883
      filter_chains:
          filters:
            - name: dgp.filter.httpconnectionmanager
              config:
                route_config:
                  routes:
                    - match:
                        prefix: "*"
                http_filters:
                  - name: dgp.filter.http.dubboproxy
                    config:
                      dubboProxyConfig:
                        auto_resolve: true
                        registries:
                          "zookeeper":
                            protocol: "zookeeper"
                            timeout: "3s"
                            address: "127.0.0.1:2181"
                            username: ""
                            password: ""

----------------------------------------

TITLE: Implementing Protobuf Client in Dubbo Python
DESCRIPTION: Client-side implementation using protobuf serialization in Dubbo. Shows how to create a service stub with custom serialization methods.

LANGUAGE: python
CODE:
class GreeterServiceStub:
    def __init__(self, client: dubbo.Client):
        self.unary = client.unary(
            method_name="sayHello",
            request_serializer=greeter_pb2.GreeterRequest.SerializeToString,
            response_deserializer=greeter_pb2.GreeterReply.FromString,
        )

    def say_hello(self, request):
        return self.unary(request)


if __name__ == "__main__":
    reference_config = ReferenceConfig.from_url(
        "tri://127.0.0.1:50051/org.apache.dubbo.samples.proto.Greeter"
    )
    dubbo_client = dubbo.Client(reference_config)

    stub = GreeterServiceStub(dubbo_client)
    result = stub.say_hello(greeter_pb2.GreeterRequest(name="hello"))
    print(result.message)

----------------------------------------

TITLE: Maven Dependencies for Spring Boot Dubbo-Zookeeper Integration
DESCRIPTION: Basic Maven dependencies required to integrate Dubbo with Zookeeper in a Spring Boot application. Includes the core Dubbo starter and Zookeeper integration components.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>${dubbo.version}</version>
</dependency>
<!-- Recommended Zookeeper Server version 3.8.0+ -->
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>
    <version>${dubbo.version}</version>
</dependency>

----------------------------------------

TITLE: Configuring Zookeeper Metadata Center in Java
DESCRIPTION: Enables Zookeeper as metadata center using Java configuration format.

LANGUAGE: java
CODE:
MetadataReportConfig metadataConfig = new MetadataReportConfig();
metadataConfig.setAddress("zookeeper://127.0.0.1:2181");

----------------------------------------

TITLE: Maven Dependencies for Spring Boot Dubbo-Zookeeper Integration
DESCRIPTION: Basic Maven dependencies required to integrate Dubbo with Zookeeper in a Spring Boot application. Includes the core Dubbo starter and Zookeeper integration components.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>${dubbo.version}</version>
</dependency>
<!-- Recommended Zookeeper Server version 3.8.0+ -->
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>
    <version>${dubbo.version}</version>
</dependency>

----------------------------------------

TITLE: Configuring Parameter Routing Rule in YAML
DESCRIPTION: YAML configuration for parameter-based routing rule that directs traffic for VIP user 'dubbo' to v2 version of the service

LANGUAGE: yaml
CODE:
configVersion: v3.0
key: org.apache.dubbo.samples.DetailService
scope: service
force: false
enabled: true
priority: 1
conditions:
  - method=getItem & arguments[1]=dubbo => detailVersion=v2

----------------------------------------

TITLE: Checking Kubernetes Pods and Port Forwarding
DESCRIPTION: Commands to list running pods and set up port forwarding for remote debugging.

LANGUAGE: bash
CODE:
kubectl get pods
kubectl port-forward dubbo-samples-xds-consumer-64c6c6f444-kk2vr 31000:31000

----------------------------------------

TITLE: Configuring Fastjson Serialization in Properties
DESCRIPTION: Properties file configuration options for enabling Fastjson serialization at different levels including protocol, consumer, and reference levels.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=fastjson

# or
dubbo.consumer.serialization=fastjson

# or
dubbo.reference.com.demo.DemoService.serialization=fastjson

----------------------------------------

TITLE: Configuring Zookeeper Config Center in YAML
DESCRIPTION: YAML configuration to enable Zookeeper as a configuration center in Dubbo

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Registering Memcached Service with Zookeeper Registry
DESCRIPTION: Code demonstrating how to register a Memcached service address with Zookeeper registry in Dubbo. Uses RegistryFactory to create registry instance and register Memcached service URL.

LANGUAGE: java
CODE:
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
Registry registry = registryFactory.getRegistry(URL.valueOf("zookeeper://10.20.153.10:2181"));
registry.register(URL.valueOf("memcached://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo&group=member&loadbalance=consistenthash"));

----------------------------------------

TITLE: Enabling Apollo Configuration Center in Dubbo (Properties)
DESCRIPTION: Properties configuration for enabling Apollo as the configuration center in Dubbo.

LANGUAGE: properties
CODE:
dubbo.config-center.address=apollo://localhost:8080

----------------------------------------

TITLE: Configuring Polaris Registration Center in Dubbo Go
DESCRIPTION: Demonstrates how to configure Polaris as a registration center in Dubbo Go using YAML. It includes settings for protocol, address, namespace, and token.

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    polarisMesh:
      protocol: polaris
      address: ${Polaris Server IP}:8091
      namespace: ${Polaris Namespace Info}
      token: ${Polaris Resource Authorization Token}   # If Polaris server enables client authorization, this parameter needs to be configured

----------------------------------------

TITLE: Configuring Hessian2 Serialization in Spring Boot YAML
DESCRIPTION: Configure Hessian2 as the serialization protocol in Dubbo using Spring Boot YAML configuration.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   serialization: hessian2

----------------------------------------

TITLE: Implementing RegistryFactory Interface in Java
DESCRIPTION: Java interface definition for RegistryFactory, which is responsible for connecting to the registry and handling various connection-related contracts.

LANGUAGE: java
CODE:
public interface RegistryFactory {
    Registry getRegistry(URL url); 
}

----------------------------------------

TITLE: Configuring Dubbo Service Provider
DESCRIPTION: XML configuration for the Dubbo service provider including registry and service definitions.

LANGUAGE: xml
CODE:
<dubbo:application name="rpc-callback-demo" />
<dubbo:registry address="zookeeper://127.0.0.1:2181"/>
<bean id="demoService" class="org.apache.dubbo.callback.implicit.NormalDemoService" />
<dubbo:service interface="org.apache.dubbo.callback.implicit.IDemoService" ref="demoService" version="1.0.0" group="cn"/>

----------------------------------------

TITLE: Configuring Multiple Hessian Ports in Dubbo XML Configuration
DESCRIPTION: XML configuration for defining multiple Hessian protocol instances with different ports in Dubbo.

LANGUAGE: XML
CODE:
<dubbo:protocol id="hessian1" name="hessian" port="8080" />
<dubbo:protocol id="hessian2" name="hessian" port="8081" />

----------------------------------------

TITLE: Zookeeper CLI Output
DESCRIPTION: Expected output when successfully connecting to Zookeeper CLI.

LANGUAGE: shell
CODE:
Connecting to localhost:2181
...
Welcome to ZooKeeper!
JLine support is enabled
[zkshell: 0]

----------------------------------------

TITLE: Configuring Multiple Hessian Ports in Dubbo XML Configuration
DESCRIPTION: XML configuration for defining multiple Hessian protocol instances with different ports in Dubbo.

LANGUAGE: XML
CODE:
<dubbo:protocol id="hessian1" name="hessian" port="8080" />
<dubbo:protocol id="hessian2" name="hessian" port="8081" />

----------------------------------------

TITLE: Configuring Zookeeper Registry in Properties
DESCRIPTION: Demonstrates the configuration of the Zookeeper registry address using a properties file in a Dubbo application.

LANGUAGE: properties
CODE:
dubbo.registry.address=zookeeper://localhost:2181

----------------------------------------

TITLE: Dubbo Annotation Configuration
DESCRIPTION: Example of using annotations to configure and expose Dubbo services with corresponding properties configuration

LANGUAGE: java
CODE:
  @DubboService
  public class AnnotationServiceImpl implements AnnotationService {
      @Override
      public String sayHello(String name) {
          System.out.println("async provider received: " + name);
          return "annotation: hello, " + name;
      }
  }

LANGUAGE: properties
CODE:
dubbo.application.name=annotation-provider
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880

----------------------------------------

TITLE: Implementing Validator Interface in Java
DESCRIPTION: Example of implementing the Validator interface in Java. This class, XxxValidator, provides the validate method to perform actual validation on method invocations.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.validation.Validator;
 
public class XxxValidator implements Validator {
    public XxxValidator(URL url) {
        // ...
    }
    public void validate(Invocation invocation) throws Exception {
        // ...
    }
}

----------------------------------------

TITLE: Installing Dubbo Admin via Helm
DESCRIPTION: Instructions for installing Dubbo Admin and its components using Helm package manager. Includes repository setup and different installation methods.

LANGUAGE: shell
CODE:
helm repo add dubbo https://dubbo.apache.org/charts
helm repo update

LANGUAGE: shell
CODE:
helm install dubbo-admin dubbo/dubbo-stack -n dubbo-system

LANGUAGE: shell
CODE:
helm install dubbo-admin-all dubbo/dubbo-stack -n dubbo-system

----------------------------------------

TITLE: Implementing StateRouter Interface in Dubbo
DESCRIPTION: Interface for implementing high-performance routing in Dubbo 3, with methods for routing, notification, and cleanup.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.router.state;

public interface StateRouter<T> {

    BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, URL url, Invocation invocation,
                     boolean needToPrintMessage, Holder<RouterSnapshotNode<T>> nodeHolder) throws RpcException;

    void notify(BitList<Invoker<T>> invokers);

    void stop();
}

----------------------------------------

TITLE: Implementing StateRouter Interface in Dubbo
DESCRIPTION: Interface for implementing high-performance routing in Dubbo 3, with methods for routing, notification, and cleanup.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.router.state;

public interface StateRouter<T> {

    BitList<Invoker<T>> route(BitList<Invoker<T>> invokers, URL url, Invocation invocation,
                     boolean needToPrintMessage, Holder<RouterSnapshotNode<T>> nodeHolder) throws RpcException;

    void notify(BitList<Invoker<T>> invokers);

    void stop();
}

----------------------------------------

TITLE: Basic Zookeeper Configuration
DESCRIPTION: Essential configuration parameters for zoo.cfg file including tickTime, clientPort, and admin server settings.

LANGUAGE: plaintext
CODE:
tickTime=2000
clientPort=2181
admin.enableServer=false

----------------------------------------

TITLE: Starting Kubernetes Cluster Commands
DESCRIPTION: Commands to start and verify local Kubernetes cluster using minikube

LANGUAGE: shell
CODE:
minikube start
kubectl cluster-info

----------------------------------------

TITLE: Generating Java Stack Trace for Dubbo Client Diagnostics
DESCRIPTION: Command to generate a stack trace log file for a Java process, useful for diagnosing Dubbo client request timeout issues. The PID should be replaced with the actual process ID of the Dubbo client application.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Avro in XML
DESCRIPTION: XML configuration options for enabling Avro serialization in Dubbo at different levels including protocol, consumer, and reference.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="avro" />

<!-- or -->
<dubbo:consumer serialization="avro" />

<!-- or -->
<dubbo:reference interface="xxx" serialization="avro" />

----------------------------------------

TITLE: Setting RMI Response Timeout
DESCRIPTION: Java command line configuration for setting RMI response timeout.

LANGUAGE: sh
CODE:
java -Dsun.rmi.transport.tcp.responseTimeout=3000

----------------------------------------

TITLE: Extracting Zookeeper Archive
DESCRIPTION: Commands to extract the downloaded Zookeeper archive and navigate to its directory.

LANGUAGE: shell
CODE:
tar -zxvf apache-zookeeper-3.8.3.tar.gz
cd apache-zookeeper-3.8.3

----------------------------------------

TITLE: Implementing AggregateMetricsCollector in Java
DESCRIPTION: Implementation of the AggregateMetricsCollector class, which handles metrics aggregation using time windows.

LANGUAGE: java
CODE:
public class AggregateMetricsCollector implements MetricsCollector, MetricsListener {
    private int bucketNum;
    private int timeWindowSeconds;

    private final Map<MethodMetric, TimeWindowCounter> totalRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, TimeWindowCounter> succeedRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, TimeWindowCounter> failedRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, TimeWindowCounter> qps = new ConcurrentHashMap<>();
    private final Map<MethodMetric, TimeWindowQuantile> rt = new ConcurrentHashMap<>();

    private final ApplicationModel applicationModel;

    private static final Integer DEFAULT_COMPRESSION = 100;
    private static final Integer DEFAULT_BUCKET_NUM = 10;
    private static final Integer DEFAULT_TIME_WINDOW_SECONDS = 120;

    public AggregateMetricsCollector(ApplicationModel applicationModel) {
        this.applicationModel = applicationModel;
        ConfigManager configManager = applicationModel.getApplicationConfigManager();
        MetricsConfig config = configManager.getMetrics().orElse(null);
        if (config != null && config.getAggregation() != null && Boolean.TRUE.equals(config.getAggregation().getEnabled())) {
            registerListener();

            AggregationConfig aggregation = config.getAggregation();
            this.bucketNum = aggregation.getBucketNum() == null ? DEFAULT_BUCKET_NUM : aggregation.getBucketNum();
            this.timeWindowSeconds = aggregation.getTimeWindowSeconds() == null ? DEFAULT_TIME_WINDOW_SECONDS : aggregation.getTimeWindowSeconds();
        }
    }
}

----------------------------------------

TITLE: Adding Dubbo and Nacos Dependencies for Spring Boot
DESCRIPTION: XML configuration to add necessary dependencies for using Dubbo with Nacos in a Spring Boot application.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-nacos-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Dubbo Protocol in Dubbo
DESCRIPTION: Basic YAML configuration to enable the dubbo protocol. The default port is 20880, and setting port to -1 will select a random port starting from 20880.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   name: dubbo
   port: 20880

----------------------------------------

TITLE: Configuring Serializable Interface Check in Properties
DESCRIPTION: Shows how to configure the Serializable interface check using properties file.

LANGUAGE: properties
CODE:
dubbo.application.check-serializable=true

----------------------------------------

TITLE: Defining Dubbo Service with REST Annotations
DESCRIPTION: Java interface for a Dubbo service with Spring MVC annotations to enable REST support.

LANGUAGE: java
CODE:
@RestController
@RequestMapping("/users")
public interface UserService {
    @GetMapping(value = "/list")
    List<User> getUsers();
}

----------------------------------------

TITLE: Configuring Global Token Verification in Dubbo XML
DESCRIPTION: Enable token verification globally for all providers. This can use either a random UUID-generated token or a fixed token string.

LANGUAGE: xml
CODE:
<!-- Random token, generated using UUID -->
<dubbo:provider token="true" />

LANGUAGE: xml
CODE:
<!-- Fixed token, equivalent to a password -->
<dubbo:provider token="123456" />

----------------------------------------

TITLE: Nacos Authentication Configuration
DESCRIPTION: YAML configuration for Nacos with authentication credentials.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848?username=nacos&password=nacos
   register-mode: instance

----------------------------------------

TITLE: ExtensionLoader.getExtension Method Implementation
DESCRIPTION: Core method in Dubbo SPI for getting extension instances, including caching and creation logic.

LANGUAGE: java
CODE:
public T getExtension(String name) {
    if (name == null || name.length() == 0)
        throw new IllegalArgumentException("Extension name == null");
    if ("true".equals(name)) {
        return getDefaultExtension();
    }
    Holder<Object> holder = cachedInstances.get(name);
    if (holder == null) {
        cachedInstances.putIfAbsent(name, new Holder<Object>());
        holder = cachedInstances.get(name);
    }
    Object instance = holder.get();
    if (instance == null) {
        synchronized (holder) {
            instance = holder.get();
            if (instance == null) {
                instance = createExtension(name);
                holder.set(instance);
            }
        }
    }
    return (T) instance;
}

----------------------------------------

TITLE: Access Log Output Format Example
DESCRIPTION: Example showing the format of Dubbo access logs including timestamp, IP addresses, service calls and parameters

LANGUAGE: text
CODE:
[2022-12-30 12:36:31.15900] -> [2022-12-30 12:36:31.16000] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService login(java.lang.String,java.lang.String) ["test",""], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103
[2022-12-30 12:36:33.95900] -> [2022-12-30 12:36:33.95900] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) ["test"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103
[2022-12-30 12:36:31.93500] -> [2022-12-30 12:36:34.93600] 192.168.0.103:60943 -> 192.168.0.103:20884 - org.apache.dubbo.samples.UserService getInfo(java.lang.String) ["test"], dubbo version: 3.2.0-beta.4-SNAPSHOT, current host: 192.168.0.103

----------------------------------------

TITLE: Default Dubbo Operator Configuration
DESCRIPTION: YAML configuration for the default Dubbo Operator profile, specifying enabled components and their versions.

LANGUAGE: yaml
CODE:
apiVersion: dubbo.apache.org/v1alpha1
kind: DubboOperator
metadata:
  namespace: dubbo-system
spec:
  profile: default
  namespace: dubbo-system
  componentsMeta:
    admin:
      enabled: true
    grafana:
      enabled: true
      repoURL: https://grafana.github.io/helm-charts
      version: 6.52.4
    nacos:
      enabled: true
    zookeeper:
      enabled: true
      repoURL: https://charts.bitnami.com/bitnami
      version: 11.1.6
    prometheus:
      enabled: true
      repoURL: https://prometheus-community.github.io/helm-charts
      version: 20.0.2
    skywalking:
      enabled: true
      repoURL: https://apache.jfrog.io/artifactory/skywalking-helm
      version: 4.3.0
    zipkin:
      enabled: true
      repoURL: https://openzipkin.github.io/zipkin
      version: 0.3.0

----------------------------------------

TITLE: Referencing Dubbo Config Bean Initializer Class
DESCRIPTION: Shows the fully qualified class name that may be involved in initialization errors within Dubbo's configuration system.

LANGUAGE: java
CODE:
org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer

----------------------------------------

TITLE: Configuring Multiple Registries with Vertical Bar Separator in XML
DESCRIPTION: This XML snippet demonstrates how to configure multiple registries using a vertical bar separator in Dubbo. It's useful for connecting to different registries in a test environment.

LANGUAGE: xml
CODE:
<!-- Multi-registry configuration, using vertical bars to connect to multiple registries, and comma for multiple addresses in the same registry -->
<dubbo:registry address="10.20.141.150:9090|10.20.154.177:9010" />
<!-- Reference the service -->
<dubbo:reference id="helloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" />

----------------------------------------

TITLE: Starting Minikube Cluster
DESCRIPTION: Commands to start and verify a local Kubernetes cluster using Minikube

LANGUAGE: shell
CODE:
minikube start
kubectl cluster-info

----------------------------------------

TITLE: Logging Error for Inaccessible Cache Path in Java
DESCRIPTION: This snippet shows a Java stack trace for a FileAlreadyExistsException, indicating that the Dubbo cache store path cannot be created or accessed. It includes details about the error, Dubbo version, and host information.

LANGUAGE: java
CODE:
2022-08-29 00:35:00,189 ERROR [org.apache.dubbo.common.cache.FileCacheStoreFactory:?] -  [DUBBO] Cache store path can't be created: , dubbo version: , current host: 10.0.1.1, error code: 0-3. This may be caused by inaccessible of cache path, go to https://dubbo.apache.org/faq/0/3 to find instructions. 
java.nio.file.FileAlreadyExistsException: [Path]
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:87)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.createDirectory(WindowsFileSystemProvider.java:521)
	at java.base/java.nio.file.Files.createDirectory(Files.java:700)
	at java.base/java.nio.file.Files.createAndCheckIsDirectory(Files.java:807)
	at java.base/java.nio.file.Files.createDirectories(Files.java:753)
	at org.apache.dubbo.common.cache.FileCacheStoreFactory.getInstance(FileCacheStoreFactory.java:90)
	...

----------------------------------------

TITLE: Configuring Server-Side Interface Caching in Dubbo XML
DESCRIPTION: XML configuration for enabling LRU caching at the interface level for a Dubbo service implementation.

LANGUAGE: xml
CODE:
<bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>
<dubbo:service interface="com.foo.DemoService" ref="demoService" cache="lru" />

----------------------------------------

TITLE: Specifying Custom Host for Dubbo Protocol
DESCRIPTION: Example of configuring the Dubbo protocol with both a port number and a custom host, which can be an IP address or a domain name.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" port="20890" host="www.example.com"/>

----------------------------------------

TITLE: Importing RMI Protocol Dependencies in Maven
DESCRIPTION: Maven dependency configuration required to use RMI protocol in Dubbo 3.x projects.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-rpc-rmi</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Default Dubbo Operator Configuration
DESCRIPTION: YAML configuration for the default Dubbo Operator profile, specifying enabled components and their versions.

LANGUAGE: yaml
CODE:
apiVersion: dubbo.apache.org/v1alpha1
kind: DubboOperator
metadata:
  namespace: dubbo-system
spec:
  profile: default
  namespace: dubbo-system
  componentsMeta:
    admin:
      enabled: true
    grafana:
      enabled: true
      repoURL: https://grafana.github.io/helm-charts
      version: 6.52.4
    nacos:
      enabled: true
    zookeeper:
      enabled: true
      repoURL: https://charts.bitnami.com/bitnami
      version: 11.1.6
    prometheus:
      enabled: true
      repoURL: https://prometheus-community.github.io/helm-charts
      version: 20.0.2
    skywalking:
      enabled: true
      repoURL: https://apache.jfrog.io/artifactory/skywalking-helm
      version: 4.3.0
    zipkin:
      enabled: true
      repoURL: https://openzipkin.github.io/zipkin
      version: 0.3.0

----------------------------------------

TITLE: Setting Group and Namespace for Nacos Configuration Center
DESCRIPTION: YAML configuration for setting group and namespace for Nacos configuration center in Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
  config-center:
    address: zookeeper://127.0.0.1:2181
    group: dubbo-cluster1
    namespace: dev1

----------------------------------------

TITLE: Installing Higress with Docker
DESCRIPTION: Command to install Higress using Docker with Nacos configuration. Requires Docker installation and running Nacos server. The command supports custom Nacos credentials and server address configuration.

LANGUAGE: shell
CODE:
curl -fsSL https://higress.io/standalone/get-higress.sh | bash -s -- -a -c nacos://192.168.0.1:8848 --nacos-username=nacos --nacos-password=nacos

----------------------------------------

TITLE: Defining MetricsService Interface in Java
DESCRIPTION: Definition of the MetricsService interface, which provides methods for querying metrics data at different levels of granularity.

LANGUAGE: java
CODE:
public interface MetricsService {

    String DEFAULT_EXTENSION_NAME = "default";

    String VERSION = "1.0.0";

    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(List<MetricsCategory> categories);

    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, List<MetricsCategory> categories);

    Map<MetricsCategory, List<MetricsEntity>> getMetricsByCategories(String serviceUniqueName, String methodName, Class<?>[] parameterTypes, List<MetricsCategory> categories);
}

----------------------------------------

TITLE: Address Class Definition for Specifying IP Calls
DESCRIPTION: Java class definition for the Address object used to specify IP call parameters in Dubbo.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.specifyaddress;

public class Address implements Serializable {
    // ip - priority: 3
    private String ip;

    // ip+port - priority: 2
    private int port;

    // address - priority: 1
    private URL urlAddress;
    
    private boolean needToCreate = false;

    // ignore setter and getter
}

----------------------------------------

TITLE: Configuring Server-Side Concurrent Execution Limit (Annotation)
DESCRIPTION: Limits the concurrent execution for each method of a service to a maximum of 10 using Java annotation.

LANGUAGE: java
CODE:
@DubboService(executes=10)
private DemoServiceImpl implements DemoService{}

----------------------------------------

TITLE: Installing Protoc via Linux Package Manager
DESCRIPTION: Commands to install protoc compiler using apt package manager on Linux and verify the installed version.

LANGUAGE: sh
CODE:
$ apt install -y protobuf-compiler
$ protoc --version  # Ensure compiler version is 3+

----------------------------------------

TITLE: Graceful Offline Procedure for Dubbo Services
DESCRIPTION: Commands to gracefully remove a Dubbo service instance from the registration center before stopping the process.

LANGUAGE: shell
CODE:
$ curl http://offline
$ sleep 10
$ kill dubbo-pid

----------------------------------------

TITLE: Handling Thread Interruption in Java
DESCRIPTION: Explains how thread interruption works in Java and its impact on thread execution. It mentions that calling interrupt() on a running thread sets the interrupt status to true without affecting execution, allowing for custom handling in the business logic.

LANGUAGE: java
CODE:
thread.interrupt();

----------------------------------------

TITLE: Implementing Dubbo-go Server with Retry Simulation
DESCRIPTION: This Go code implements the GreetService server, including a GreetRetry method that simulates retries. It demonstrates how to set up a Dubbo-go server and register the service handler.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"github.com/pkg/errors"

	_ "dubbo.apache.org/dubbo-go/v3/imports"
	"dubbo.apache.org/dubbo-go/v3/protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
	greet "github.com/apache/dubbo-go-samples/retry/proto"
	"github.com/dubbogo/gost/log/logger"
)

type GreetTripleServer struct {
	requestTime int
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	resp := &greet.GreetResponse{Greeting: req.Name}
	logger.Info("Not need retry, request success")
	return resp, nil
}

func (srv *GreetTripleServer) GreetRetry(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	if srv.requestTime < 3 {
		srv.requestTime++
		logger.Infof("retry %d times", srv.requestTime)
		return nil, errors.New("retry")
	}
	resp := &greet.GreetResponse{Greeting: req.Name}
	logger.Infof("retry success, current request time is %d", srv.requestTime)
	srv.requestTime = 0
	return resp, nil
}

func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
		),
	)
	if err != nil {
		panic(err)
	}
	if err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{
		requestTime: 0,
	}); err != nil {
		panic(err)
	}
	if err := srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Address Class Definition for Specifying IP Calls
DESCRIPTION: Java class definition for the Address object used to specify IP call parameters in Dubbo.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.specifyaddress;

public class Address implements Serializable {
    // ip - priority: 3
    private String ip;

    // ip+port - priority: 2
    private int port;

    // address - priority: 1
    private URL urlAddress;
    
    private boolean needToCreate = false;

    // ignore setter and getter
}

----------------------------------------

TITLE: Running Zookeeper in Docker
DESCRIPTION: Docker command to start a Zookeeper container with port mapping and JVM flags.

LANGUAGE: shell
CODE:
docker run --name some-zookeeper -p 2181:2181 -e JVMFLAGS="-Dzookeeper.admin.enableServer=false" --restart always -d zookeeper:3.8.3

----------------------------------------

TITLE: Run Standard gRPC Client
DESCRIPTION: Execute the standard gRPC client to call the Dubbo Triple service.

LANGUAGE: shell
CODE:
mvn compile exec:java -Dexec.mainClass="org.apache.dubbo.samples.tri.grpc.interop.server.GrpcClient"

----------------------------------------

TITLE: Configuring Dubbo Maven Plugin for Protobuf
DESCRIPTION: Maven plugin configuration for generating Protobuf stub code

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-maven-plugin</artifactId>
    <version>${dubbo.version}</version>
    <executions>
        <execution>
            <goals>
                <goal>compile</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Single-Port Multi-Protocol Configuration
DESCRIPTION: YAML configuration for enabling multiple protocols on a single port

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
    name: dubbo
    ext-protocol: tri

----------------------------------------

TITLE: Configuring Retry Count for Failover Cluster in Dubbo XML
DESCRIPTION: Demonstrates how to set the retry count for the Failover Cluster strategy using XML configuration. This can be applied at the service, reference, or method level.

LANGUAGE: xml
CODE:
<dubbo:service retries="2" />

LANGUAGE: xml
CODE:
<dubbo:reference retries="2" />

LANGUAGE: xml
CODE:
<dubbo:reference>
    <dubbo:method name="findFoo" retries="2" />
</dubbo:reference>

----------------------------------------

TITLE: Adding Consul Registry Dependency in Maven
DESCRIPTION: Adding the required Maven dependency for Consul registry support in Dubbo 3.x applications.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-registry-consul</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Helm-based Dubbo Admin Authentication
DESCRIPTION: YAML configuration for setting up authentication credentials in Helm deployments of Dubbo Admin.

LANGUAGE: yaml
CODE:
properties:
  admin.root.user.name: root
  admin.root.user.password: root
  admin.check.signSecret: 86295dd0c4ef69a1036b0b0c15158d77

----------------------------------------

TITLE: Generating Java Thread Dump Using jstack
DESCRIPTION: Command to generate a thread dump of a Java process for diagnosing xDS file read issues

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring RMI Protocol in Dubbo XML
DESCRIPTION: Various XML configurations for setting up RMI protocol in Dubbo, including protocol definition, default protocol setting, and service-specific protocol configuration.

LANGUAGE: xml
CODE:
<dubbo:protocol name="rmi" port="1099" />

LANGUAGE: xml
CODE:
<dubbo:provider protocol="rmi" />

LANGUAGE: xml
CODE:
<dubbo:service interface="..." protocol="rmi" />

LANGUAGE: xml
CODE:
<dubbo:protocol id="rmi1" name="rmi" port="1099" />
<dubbo:protocol id="rmi2" name="rmi" port="2099" />

<dubbo:service interface="..." protocol="rmi1" />

LANGUAGE: xml
CODE:
<dubbo:protocol name="rmi" codec="spring" />

----------------------------------------

TITLE: Configuring Thrift Protocol Port in Dubbo
DESCRIPTION: XML configuration for setting up the Thrift protocol port in Dubbo. Defines a shared port (3030) for all services using the Thrift protocol.

LANGUAGE: xml
CODE:
<dubbo:protocol name="thrift" port="3030" />

----------------------------------------

TITLE: Implementing Callback Service in Java
DESCRIPTION: Provides an implementation of the CallbackService interface, demonstrating how to manage listeners and trigger callbacks.

LANGUAGE: java
CODE:
public class CallbackServiceImpl implements CallbackService {

    private final Map<String, CallbackListener> listeners = new ConcurrentHashMap<String, CallbackListener>();

    public CallbackServiceImpl() {
        Thread t = new Thread(new Runnable() {
            public void run() {
                while (true) {
                    try {
                        for (Map.Entry<String, CallbackListener> entry : listeners.entrySet()) {
                            try {
                                entry.getValue().changed(getChanged(entry.getKey()));
                            } catch (Throwable t) {
                                listeners.remove(entry.getKey());
                            }
                        }
                        Thread.sleep(5000); // timely trigger change event
                    } catch (Throwable t) {
                        t.printStackTrace();
                    }
                }
            }
        });
        t.setDaemon(true);
        t.start();
    }

    public void addListener(String key, CallbackListener listener) {
        listeners.put(key, listener);
        listener.changed(getChanged(key)); // send notification for change
    }

    private String getChanged(String key) {
        return "Changed: " + new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    }
}

----------------------------------------

TITLE: Reading Implicit Parameters on Consumer Side in Java
DESCRIPTION: Demonstrates how to read implicit parameters on the consumer side that were set by the provider and returned with the response.

LANGUAGE: java
CODE:
xxxService.xxx(); // Remote call
String result = RpcContext.getServerContext().getAttachment("result");

----------------------------------------

TITLE: Configuring Java-based Dubbo Admin Authentication
DESCRIPTION: Configuration properties for setting up authentication credentials in application.properties file for Java-based deployments of Dubbo Admin.

LANGUAGE: properties
CODE:
admin.root.user.name=root
admin.root.user.password=root
admin.check.signSecret=86295dd0c4ef69a1036b0b0c15158d77

----------------------------------------

TITLE: Upgrading Dubbo Dependencies in Maven POM
DESCRIPTION: XML snippet showing how to upgrade Dubbo dependencies to version 3.1.3 in a Maven POM file. It includes both the core Dubbo dependency and the Spring Boot starter.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo</groupId>
  <artifactId>dubbo</artifactId>
  <version>3.1.3</version>
</dependency>

<dependency>
  <groupId>org.apache.dubbo</groupId>
  <artifactId>dubbo-spring-boot-starter</artifactId>
  <version>3.1.3</version>
</dependency>

----------------------------------------

TITLE: Configuring Zookeeper Metadata Center in XML
DESCRIPTION: Enables Zookeeper as metadata center using XML configuration format.

LANGUAGE: xml
CODE:
<dubbo:metadata-report address="zookeeper://127.0.0.1:2181"/>

----------------------------------------

TITLE: Service Implementation with Single Protocol
DESCRIPTION: Java service implementations using different protocols for different services

LANGUAGE: java
CODE:
@DubboService(protocol="dubbo-id")
private DemoServiceImpl implements DemoService {}

LANGUAGE: java
CODE:
@DubboService(protocol="triple-id")
private GreetingServiceImpl implements GreetingService {}

----------------------------------------

TITLE: Configuring Debug Logging
DESCRIPTION: YAML configuration to enable debug logging for Triple protocol and remoting

LANGUAGE: yaml
CODE:
logging:
  level:
    "org.apache.dubbo.rpc.protocol.tri": debug
    "org.apache.dubbo.remoting": debug

----------------------------------------

TITLE: JVM Configuration Parameter for Stack Storage
DESCRIPTION: The JVM parameter that can cause stack storage failures when enabled. This setting prevents the attachment mechanism used for stack information storage.

LANGUAGE: java
CODE:
-XX:+DisableAttachMechanism

----------------------------------------

TITLE: Defining AccountService Interface in Java
DESCRIPTION: This code defines the AccountService interface with a method to debit from a user's account.

LANGUAGE: java
CODE:
public interface AccountService {

    /**
     * Debit from user account
     */
    void debit(String userId, int money);
}

----------------------------------------

TITLE: Inspecting Log4j Dependencies in dubbo-spring-boot-actuator
DESCRIPTION: This Maven dependency tree shows that dubbo-spring-boot-actuator also indirectly depends on log4j-api through Spring Boot. While log4j-api is not vulnerable, users should ensure compatibility when upgrading log4j-core.

LANGUAGE: xml
CODE:
[INFO] org.apache.dubbo:dubbo-spring-boot-actuator:jar:2.7.14-SNAPSHOT
[INFO] \- org.springframework.boot:spring-boot-starter-web:jar:2.3.1.RELEASE:compile (optional) 
[INFO]    \- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile
[INFO]       \- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile
[INFO]          \- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile
[INFO]             \- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile

----------------------------------------

TITLE: Configuring Single-Port Multi-Protocol in Dubbo
DESCRIPTION: YAML configuration for publishing both dubbo and triple protocols on a single port in Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
  protocol:
    name: dubbo
    ext-protocol: tri

----------------------------------------

TITLE: Zookeeper Configuration in XML
DESCRIPTION: XML configuration for setting up Zookeeper as the registry center in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" />

----------------------------------------

TITLE: API-based Generic Service Configuration
DESCRIPTION: Programmatic configuration of generic service reference using Dubbo API, demonstrating dynamic ReferenceConfig construction.

LANGUAGE: java
CODE:
ApplicationConfig application = new ApplicationConfig()ApplicationConfig application = new ApplicationConfig();
application.setName("api-generic-consumer");

RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://127.0.0.1:2181");

application.setRegistry(registry);

ReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();
// weak type interface name
reference.setInterface("com.alibaba.dubbo.samples.generic.api.IUserService");
// declared as a generalized interface
reference.setGeneric(true);

reference.setApplication(application);

// replace all interface references with com.alibaba.dubbo.rpc.service.GenericService
GenericService genericService = reference.get();

String name = (String) genericService.$invoke("delete", new String[]{int.class.getName()}, new Object[]{1});
System.out.println(name);

----------------------------------------

TITLE: Zookeeper Configuration in XML
DESCRIPTION: XML configuration for setting up Zookeeper as the registry center in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" />

----------------------------------------

TITLE: Configuring Dubbo Multi-Protocol Publishing in YAML
DESCRIPTION: YAML configuration for enabling both Dubbo and Triple (HTTP) protocols on the same port. This allows the service to handle both Dubbo RPC and HTTP requests.

LANGUAGE: yaml
CODE:
dubbo:
  protocol:
    dubbo: dubbo
    port: 20880
    ext-protocol: tri

----------------------------------------

TITLE: Configuring Hessian2 Serialization in Properties File
DESCRIPTION: Multiple approaches to configure Hessian2 serialization in Dubbo using properties file format, including global, consumer, and service-specific settings.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=hessian2

# or
dubbo.consumer.serialization=hessian2

# or
dubbo.reference.com.demo.DemoService.serialization=hessian2

----------------------------------------

TITLE: Configuring Hessian2 Serialization in Properties File
DESCRIPTION: Multiple approaches to configure Hessian2 serialization in Dubbo using properties file format, including global, consumer, and service-specific settings.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=hessian2

# or
dubbo.consumer.serialization=hessian2

# or
dubbo.reference.com.demo.DemoService.serialization=hessian2

----------------------------------------

TITLE: Configuring Webservice Protocol in Dubbo XML
DESCRIPTION: Various XML configurations for setting up the Webservice protocol in Dubbo, including protocol definition, default protocol, service protocol, and multiple ports.

LANGUAGE: xml
CODE:
<dubbo:protocol name="webservice" port="8080" server="jetty" />

LANGUAGE: xml
CODE:
<dubbo:provider protocol="webservice" />

LANGUAGE: xml
CODE:
<dubbo:service protocol="webservice" />

LANGUAGE: xml
CODE:
<dubbo:protocol id="webservice1" name="webservice" port="8080" />
<dubbo:protocol id="webservice2" name="webservice" port="8081" />

----------------------------------------

TITLE: Defining gRPC Service with Protocol Buffers
DESCRIPTION: Protobuf definition for a basic greeting service that includes request/response messages and service interface.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
package greet;
option go_package = "github.com/apache/dubbo-go-samples/helloworld/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Dynamically Specifying IP for Dubbo RPC Calls
DESCRIPTION: Java code example demonstrating how to dynamically specify an IP address for a Dubbo RPC call using UserSpecifiedAddressUtil.

LANGUAGE: java
CODE:
ReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>();
// ... init
DemoService demoService = referenceConfig.get();

// for invoke
// 1. find 10.10.10.10:20880 exist
// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)
UserSpecifiedAddressUtil.setAddress(new Address("10.10.10.10", 20880, true));
demoService.sayHello("world");


// for invoke
// 1. find 10.10.10.10:any exist
// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)
UserSpecifiedAddressUtil.setAddress(new Address("10.10.10.10", 0, true));
demoService.sayHello("world");

----------------------------------------

TITLE: Generating Java Thread Dump for Dubbo Service Troubleshooting
DESCRIPTION: This command generates a thread dump of a Java process, which can be used to analyze stack information and diagnose issues with Dubbo services in Kubernetes.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Custom Filter Implementation
DESCRIPTION: Example of implementing a custom Servlet filter with REST extension

LANGUAGE: java
CODE:
public class DemoFilter implements Filter, RestExtension {
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {
        chain.doFilter(request, response);
    }

    @Override
    public String[] getPatterns() {
        return new String[]{"/demo/**", "!/demo/one"};
    }

    @Override
    public int getPriority() {
        return -200;
    }
}

----------------------------------------

TITLE: Updating Dubbo Dependency Version in Maven POM
DESCRIPTION: Updates the Dubbo core dependency version to 3.2.0 in a Maven project's pom.xml file.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo</artifactId>
    <version>3.2.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Nacos Metadata Center in Java
DESCRIPTION: Java code to programmatically configure Nacos as the metadata center for Dubbo. Creates a MetadataReportConfig object and sets the Nacos server address.

LANGUAGE: java
CODE:
MetadataReportConfig metadataConfig = new MetadataReportConfig();
metadataConfig.setAddress("nacos://127.0.0.1:8848");

----------------------------------------

TITLE: Checking Dubbo Framework Liveness Status
DESCRIPTION: The live command checks if the framework is running normally without permanent abnormalities. Returns true if the framework is operating correctly.

LANGUAGE: shell
CODE:
dubbo>live
true

dubbo>

----------------------------------------

TITLE: Building Dubbo Sample Project
DESCRIPTION: Maven command to build the Dubbo sample project.

LANGUAGE: shell
CODE:
mvn clean install -DskipTests

----------------------------------------

TITLE: Loading Dubbo Provider Configuration in Java
DESCRIPTION: Java code to load Spring XML configuration and start the Dubbo service provider.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) throws InterruptedException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring/dubbo-demo-provider.xml");
        context.start();

        System.out.println("dubbo service started");
        // to hang up main thread
        new CountDownLatch(1).await();
    }
}

----------------------------------------

TITLE: Generating Java Stack Trace for Dubbo Error Analysis
DESCRIPTION: This command generates a stack trace log file for a Java process, which can be used to diagnose Dubbo errors related to unsupported messages.

LANGUAGE: shell
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Examining Log4j Dependencies in dubbo-spring-boot-starter
DESCRIPTION: This Maven dependency tree reveals that dubbo-spring-boot-starter indirectly depends on log4j-api through Spring Boot. The log4j-api itself is not vulnerable, but users should ensure compatibility when upgrading log4j-core.

LANGUAGE: xml
CODE:
[INFO] --- maven-dependency-plugin:3.1.2:tree (default-cli) @ dubbo-spring-boot-starter ---
[INFO] org.apache.dubbo:dubbo-spring-boot-starter:jar:2.7.14-SNAPSHOT
[INFO] \- org.springframework.boot:spring-boot-starter:jar:2.3.1.RELEASE:compile (optional) 
[INFO]    \- org.springframework.boot:spring-boot-starter-logging:jar:2.3.1.RELEASE:compile (optional) 
[INFO]       \- org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile (optional) 
[INFO]          \- org.apache.logging.log4j:log4j-api:jar:2.13.3:compile (optional) 

----------------------------------------

TITLE: Calling Asynchronous Dubbo Service on Consumer Side in Java
DESCRIPTION: Illustrates how to call an asynchronous Dubbo service from the consumer side and handle the CompletableFuture result.

LANGUAGE: Java
CODE:
CompletableFuture<String> future = asyncService.sayHello("async call request");
future.whenComplete((v, t) -> {
    if (t != null) {
        t.printStackTrace();
    } else {
        System.out.println("Response: " + v);
    }
});
System.out.println("Executed before response return.");

----------------------------------------

TITLE: Implementing Mock Service Class in Java
DESCRIPTION: Demonstrates how to create a Mock implementation class that implements the service interface. The mock class must have a no-argument constructor and follow the naming convention.

LANGUAGE: java
CODE:
package com.foo;
public class BarServiceMock implements BarService {
    public String sayHello(String name) {
        // You can fabricate fault tolerance data; this method is only executed if RpcException occurs
        return "Fault Tolerance Data";
    }
}

----------------------------------------

TITLE: Dubbo Admin Configuration YAML
DESCRIPTION: Comprehensive YAML configuration for Dubbo Admin, including environment settings, store configuration, and external service integrations.

LANGUAGE: yaml
CODE:
environment: universal
mode: standalone

store:
  type: memory
  kubernetes:
    systemNamespace: dubbo-system
  mysql:
    host: 127.0.0.1
    port: 15432
    user: dubbo
    password: dubbo
    dbName: dubbo
    connectionTimeout: 5
    maxOpenConnections: 50
    maxIdleConnections: 50
    tls:
      mode: disable
    minReconnectInterval: "10s"
    maxReconnectInterval: "60s"
server:
	port: 38080
registry:
  address: xxx
metadata-center:
  address: xxx
config-center:
	address: xxx
external-services:
  prometheus:
      url: "http://metrics.telemetry:9090/"
  tracing:
    enabled: true
    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'
    use_grpc: true
    url: 'http://my-jaeger-host/jaeger'
	grafana:
      enabled: true
      in_cluster_url: 'http://grafana.telemetry:3000/'
      url: 'http://my-ingress-host/grafana'

----------------------------------------

TITLE: Configuring Dubbo Tracing
DESCRIPTION: YAML configuration for enabling and configuring Dubbo tracing with Zipkin, including sampling rate and propagation settings

LANGUAGE: yaml
CODE:
dubbo:
  tracing:
    enabled: true # Default is false
    sampling:
      probability: 0.5 # Sampling rate, default is 0.1
    propagation:
      type: W3C # Propagator type: W3C/B3, default is W3C
    tracing-exporter:
      zipkin-config:
        endpoint: http://localhost:9411/api/v2/spans
        connect-timeout: 1s # Connection timeout, default is 1s
        read-timeout: 10s # Data transmission timeout, default is 10s

logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

----------------------------------------

TITLE: HTML Layout for Tracing Documentation
DESCRIPTION: HTML structure defining a documentation page layout with cards for different tracing implementations in Dubbo. Includes sections for Zipkin, Skywalking, and OTLP tracing options.

LANGUAGE: html
CODE:
{{< blocks/section color="white" height="auto">}}
<div class="td-content list-page">
<div class="lead"></div>
<header class="article-meta"></header>
<div class="row">
        <div class="col-sm col-md-6 mb-4">
          <div class="h-100 card shadow">
                <div class="card-body">
                    <h4 class="card-title">
                        <a href='{{< relref "./zipkin/" >}}'>Zipkin End-to-End Tracing</a>
                    </h4>
                    <p>Demonstrates how to implement end-to-end tracing of Dubbo services using Zipkin.
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm col-md-6 mb-4">
            <div class="h-100 card shadow">
                <div class="card-body">
                    <h4 class="card-title">
                        <a href='{{< relref "./skywalking/" >}}'>Skywalking End-to-End Tracing</a>
                    </h4>
                    <p>Demonstrates how to implement end-to-end tracing of Dubbo services using Skywalking.
                    </p>
                </div>
            </div>
        </div>
        <div class="col-sm col-md-6 mb-4">
            <div class="h-100 card shadow">
                <div class="card-body">
                    <h4 class="card-title">
                        <a href='{{< relref "./otlp/" >}}'>OTlp End-to-End Tracing</a>
                    </h4>
                    <p>Demonstrates how to implement end-to-end tracing of Dubbo services using the OpenTelemetry Otlp Collector.
                    </p>
                </div>
            </div>
        </div>
</div>
<hr>
</div>
{{< /blocks/section >}}

----------------------------------------

TITLE: Configuring Skywalking Observation Registry
DESCRIPTION: Java configuration class that sets up the ObservationRegistry with Skywalking handlers for tracing.

LANGUAGE: java
CODE:
@Configuration
public class ObservationConfiguration {
    @Bean
    ApplicationModel applicationModel(ObservationRegistry observationRegistry) {
        ApplicationModel applicationModel = ApplicationModel.defaultModel();
        observationRegistry.observationConfig()
                .observationHandler(new ObservationHandler.FirstMatchingCompositeObservationHandler(
                        new SkywalkingSenderTracingHandler(), new SkywalkingReceiverTracingHandler(),
                        new SkywalkingDefaultTracingHandler()
                ));
        applicationModel.getBeanFactory().registerBean(observationRegistry);
        return applicationModel;
    }
}

----------------------------------------

TITLE: Defining User Structure in Go
DESCRIPTION: Defines a User structure with ID, Name, and Age fields, implementing the JavaClassName method for Java compatibility.

LANGUAGE: go
CODE:
type User struct {
	ID   string
	Name string
	Age  int32
}

func (u *User) JavaClassName() string {
	return "org.apache.dubbo.sample.User"
}

----------------------------------------

TITLE: Deploying Pixiu Demo to Kubernetes
DESCRIPTION: Kubernetes deployment command to set up the complete demo environment including triple-servers, Pixiu gateway, and Nacos server.

LANGUAGE: bash
CODE:
$ kubectl apply -f https://raw.githubusercontent.com/dubbogo/triple-pixiu-demo/master/deploy/pixiu-triple-demo.yml

----------------------------------------

TITLE: Defining REST-style Service with Spring MVC Annotations
DESCRIPTION: Example of defining a REST-style Dubbo service using Spring MVC annotations. This is used with the triple protocol to publish standard HTTP services.

LANGUAGE: java
CODE:
@RestController
@RequestMapping("/demo")
public interface DemoService {
    @GetMapping(value = "/hello")
    String sayHello();
}

----------------------------------------

TITLE: Configuring Class Check Mode via System Property
DESCRIPTION: Sets the serialization check status to STRICT using a Java system property. This configuration can be set at JVM startup.

LANGUAGE: properties
CODE:
-Ddubbo.application.serialize-check-status=STRICT

----------------------------------------

TITLE: Configuring autoConcurrencyLimiter in Dubbo Properties
DESCRIPTION: Sets up the autoConcurrencyLimiter adaptive flow control algorithm using Dubbo properties. This algorithm uses window-based sampling to update maxConcurrency and explore remaining capacity.

LANGUAGE: properties
CODE:
dubbo.provider.flowcontrol=autoConcurrencyLimiter

----------------------------------------

TITLE: Accessing Dubbo Service via HTTP
DESCRIPTION: Example of accessing the Dubbo service using a curl HTTP POST request with JSON payload.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50051/org.apache.dubbo.demo.DemoService/sayHello

----------------------------------------

TITLE: Configuring Dubbo-Go with Nacos Registry
DESCRIPTION: Initializes a Dubbo-Go instance with Nacos registry configuration. Sets up the registry address and triple protocol on port 20000.

LANGUAGE: go
CODE:
ins, _ := dubbo.NewInstance(
	dubbo.WithName("dubbo_registry_nacos_server"),
	dubbo.WithRegistry(
		registry.WithNacos(),
		registry.WithAddress("127.0.0.1:8848"),
	),
	dubbo.WithProtocol(
		protocol.WithTriple(),
		protocol.WithPort(20000),
	),
)

srv, err := ins.NewServer()

----------------------------------------

TITLE: Configuring Business-Based Service Isolation in XML
DESCRIPTION: This XML snippet demonstrates how to configure business-based service isolation in Dubbo. It sets up separate registries for Chinese and international sites and registers different services to each.

LANGUAGE: xml
CODE:
<!-- Multi-registry configuration -->
<dubbo:registry id="chinaRegistry" address="10.20.141.150:9090" />
<dubbo:registry id="intlRegistry" address="10.20.154.177:9010" default="false" />
<!-- Register to the Chinese site registry -->
<dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="chinaRegistry" />
<!-- Register to the international site registry -->
<dubbo:service interface="com.alibaba.hello.api.DemoService" version="1.0.0" ref="demoService" registry="intlRegistry" />

----------------------------------------

TITLE: Adding Skywalking Micrometer API Dependency
DESCRIPTION: Maven dependency configuration for integrating Skywalking's Micrometer 1.10 API support.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.skywalking</groupId>
    <artifactId>apm-toolkit-micrometer-1.10</artifactId>
</dependency>

----------------------------------------

TITLE: Installing Istio with First-Party JWT Support
DESCRIPTION: Commands to download and install Istio with first-party JWT support enabled, which is necessary to prevent client authentication failures.

LANGUAGE: bash
CODE:
curl -L https://istio.io/downloadIstio | sh -
cd istio-1.xx.x
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo --set values.global.jwtPolicy=first-party-jwt -y

----------------------------------------

TITLE: Defining Dubbo Service Protocol
DESCRIPTION: Protocol Buffer definition for a simple Example service with Say RPC method including request and response message types.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package apache.dubbo.demo.example.v1;

message SayRequest {
  string sentence = 1;
}

message SayResponse {
  string sentence = 1;
}

service ExampleService {
  rpc Say(SayRequest) returns (SayResponse) {}
}

----------------------------------------

TITLE: Configuring Dubbo-go Client Application
DESCRIPTION: Modify the main function in cmd/app.go to implement client-side logic for calling the server every second.

LANGUAGE: go
CODE:
func main() {
	client := &api.GreeterClientImpl{}
	config.SetConsumerService(client)
	if err := config.Load(); err != nil {
		panic(err)
	}
	request := &api.HelloRequest{
		Name: "laurence",
	}

	for{
		if rsp, err := client.SayHello(context.Background(), request); err != nil{
			logger.Errorf("call server error = %s", err)
		}else{
			logger.Infof("call server response = %+v", rsp)
		}
		time.Sleep(time.Second)
	}
}

----------------------------------------

TITLE: Implementing Dubbo Client
DESCRIPTION: Client implementation code to connect to and invoke the Greeter service.

LANGUAGE: java
CODE:
public class TriUnaryClient {
    public static void main(String[] args) throws IOException {
        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        ReferenceConfig<Greeter> ref = new ReferenceConfig<>();
        ref.setInterface(Greeter.class);
        ref.setUrl("tri://localhost:50052");

        bootstrap.reference(ref).start();
        Greeter greeter = ref.get();
		final GreeterReply reply = greeter.greet(GreeterRequest.newBuilder().setName("name").build());
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service
DESCRIPTION: TypeScript implementation of the ExampleService with router configuration including service group and version.

LANGUAGE: typescript
CODE:
import { DubboRouter } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";

export default (router: DubboRouter) =>
  router.service(ExampleService, {
    async say(req) {
      return {
        sentence: `You said: ${req.sentence}`,
      };
    },
  }, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });

----------------------------------------

TITLE: Configuring Dubbo-go Client Application
DESCRIPTION: Modify the main function in cmd/app.go to implement client-side logic for calling the server every second.

LANGUAGE: go
CODE:
func main() {
	client := &api.GreeterClientImpl{}
	config.SetConsumerService(client)
	if err := config.Load(); err != nil {
		panic(err)
	}
	request := &api.HelloRequest{
		Name: "laurence",
	}

	for{
		if rsp, err := client.SayHello(context.Background(), request); err != nil{
			logger.Errorf("call server error = %s", err)
		}else{
			logger.Infof("call server response = %+v", rsp)
		}
		time.Sleep(time.Second)
	}
}

----------------------------------------

TITLE: Adding OpenTelemetry Dependencies for Dubbo API
DESCRIPTION: This XML snippet shows the dependencies required for using OpenTelemetry tracing with Dubbo API, including core tracing, OpenTelemetry bridge, and OTLP exporter.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-tracing</artifactId>
</dependency>
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-otel</artifactId>
</dependency>
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-otlp</artifactId>
</dependency>

----------------------------------------

TITLE: Configuring Dubbo-Go Framework Logs in Go
DESCRIPTION: This snippet shows how to configure the Dubbo-Go framework's logging behavior using the WithLogger option. It sets the log level to 'warn' and uses the Zap logger implementation.

LANGUAGE: go
CODE:
ins, err := dubbo.NewInstance(
	dubbo.WithLogger(
		log.WithLevel("warn"),
		log.WithZap(),
	),
)

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Basic Dubbo service interface definition showing the sayHello method signature.

LANGUAGE: java
CODE:
public interface DemoService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Defining Streaming Service in Protocol Buffers
DESCRIPTION: Defines a Greeter service with unary, client streaming, server streaming, and bidirectional streaming methods using Protocol Buffers IDL.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

option java_multiple_files = true;

package org.apache.dubbo.sample.tri;


// The request message containing the user's name.
message GreeterRequest {
  string name = 1;
}

// The response message containing the greetings
message GreeterReply {
  string message = 1;
}

service Greeter{

  // unary
  rpc greet(GreeterRequest) returns (GreeterReply);

  // clientStream
  rpc greetClientStream(stream GreeterRequest) returns (GreeterReply);

  // serverStream
  rpc greetServerStream(GreeterRequest) returns (stream GreeterReply);

  // bi streaming
  rpc greetStream(stream GreeterRequest) returns (stream GreeterReply);

}

----------------------------------------

TITLE: Implementing Dubbo Service Provider
DESCRIPTION: Service implementation with Dubbo annotations specifying version, application, protocol and registry configurations. Includes a simulated delay using LockSupport.

LANGUAGE: java
CODE:
@Service(version = "${demo.service.version}",
	application = "${dubbo.application.id}",
	protocol = "${dubbo.protocol.id}",
	registry = "${dubbo.registry.id}", timeout = 60000)
public class HelloServiceImpl implements HelloService {

	public String sayHello(String name) {
		LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1));
		return "Hello, " + name;
	}

}

----------------------------------------

TITLE: Accessing Triple Protocol Service via HTTP
DESCRIPTION: Example of using cURL to access a Dubbo service published with the triple protocol. This demonstrates the HTTP-friendly nature of the triple protocol.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:50052/org.apache.dubbo.springboot.demo.idl.Greeter/greet/

----------------------------------------

TITLE: Running Dubbo-Go Server
DESCRIPTION: This command runs the Dubbo-Go server application.

LANGUAGE: shell
CODE:
$ go run ./go-server/cmd/server.go

----------------------------------------

TITLE: Implementing Dubbo Service Provider
DESCRIPTION: Implementation of the HelloService interface with service configuration annotations. Includes a simulated delay using LockSupport.

LANGUAGE: java
CODE:
package org.apache.skywalking.demo.provider;

@Service(version = "${demo.service.version}",
	application = "${dubbo.application.id}",
	protocol = "${dubbo.protocol.id}",
	registry = "${dubbo.registry.id}", timeout = 60000)
public class HelloServiceImpl implements HelloService {

	public String sayHello(String name) {
		LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(1));
		return "Hello, " + name;
	}

}

----------------------------------------

TITLE: Configuring Serializable Interface Check via Spring XML
DESCRIPTION: Enables Serializable interface checks using Spring XML configuration. This ensures that only classes implementing Serializable can be deserialized in a Spring context.

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" check-serializable="true"/>

----------------------------------------

TITLE: Installing Dubbo Control Plane Console in Linux
DESCRIPTION: Steps to download, extract, and install the Dubbo control plane console in a Linux environment. Includes downloading the script, setting up the PATH, and running the console with configuration.

LANGUAGE: shell
CODE:
curl -L https://dubbo.apache.org/releases/downloadDubbo.sh | sh -

cd dubbo-$version
export PATH=$PWD/bin:$PATH

LANGUAGE: shell
CODE:
dubbo-cp run --mode universal --config conf/dubbo.yml

----------------------------------------

TITLE: Zookeeper Configuration in YAML
DESCRIPTION: YAML configuration for setting up Zookeeper as the registry center in Dubbo, including basic connection settings.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181

----------------------------------------

TITLE: Enabling Filters for Specific Service Reference in Java
DESCRIPTION: Java annotation to enable specific filters for individual service references

LANGUAGE: java
CODE:
@DubboReference(filter="accesslog,tps")
private DemoService demoService;

----------------------------------------

TITLE: Configuring Consumer-Side Concurrent Calls Limit (Annotation)
DESCRIPTION: Limits the concurrent execution for each method of a service to a maximum of 10 per client using Java annotation.

LANGUAGE: java
CODE:
@DubboReference(actives=10)
private DemoService demoService;

----------------------------------------

TITLE: Defining Request Body in JSON for Dubbo-go CLI Tool
DESCRIPTION: Defines the request body as a JSON file for the CallUserStruct parameter. Uses a specific format where values are defined as 'type@value' strings.

LANGUAGE: json
CODE:
{
  "ID": "string@A000",
  "Male": "bool@true",
  "SubInfo": {
    "SubID": "string@A001",
    "SubMale": "bool@false",
    "SubAge": "int@18",
    "JavaClassName":"string@com.ikurento.user.SubInfo"
  },
  "JavaClassName": "string@com.ikurento.user.CallUserStruct"
}

----------------------------------------

TITLE: Enabling Consumer Registration in Nacos
DESCRIPTION: YAML configuration to enable registration of consumers in the Nacos registry.

LANGUAGE: yaml
CODE:
dubbo:
  registry:
    address: nacos://localhost:8848?register-consumer-url=true

----------------------------------------

TITLE: Server-side Triple Protocol Implementation
DESCRIPTION: Go code for creating and configuring a Dubbo server using the Triple protocol.

LANGUAGE: go
CODE:
srv, err := server.NewServer(
	server.WithServerProtocol(
		protocol.WithPort(20000),
		protocol.WithTriple(),
	),
)

greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{})

----------------------------------------

TITLE: Defining Hessian Protocol in Dubbo XML Configuration
DESCRIPTION: XML configuration for defining the Hessian protocol in Dubbo, specifying the port and server implementation.

LANGUAGE: XML
CODE:
<dubbo:protocol name="hessian" port="8080" server="jetty" />

----------------------------------------

TITLE: Configuring SerializationOptimizer in Dubbo XML
DESCRIPTION: This XML snippet shows how to configure the SerializationOptimizer implementation in Dubbo's XML configuration.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" serialization="kryo" optimizer="org.apache.dubbo.demo.SerializationOptimizerImpl"/>

----------------------------------------

TITLE: Implementing Dubbo-go Client with Retry Configuration
DESCRIPTION: This Go code demonstrates how to create a Dubbo-go client with retry configuration, and make requests to both normal and retry-simulating methods of the GreetService.

LANGUAGE: go
CODE:
package main

import (
	"context"

	"dubbo.apache.org/dubbo-go/v3/client"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/retry/proto"
	"github.com/dubbogo/gost/log/logger"
)

func main() {
	cli, err := client.NewClient(
		client.WithClientURL("tri://127.0.0.1:20000"),
		client.WithClientRetries(3),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}

	// request normal
	resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)

	// request need retry
	resp, err = svc.GreetRetry(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Defining Hessian Protocol in Dubbo XML Configuration
DESCRIPTION: XML configuration for defining the Hessian protocol in Dubbo, specifying the port and server implementation.

LANGUAGE: XML
CODE:
<dubbo:protocol name="hessian" port="8080" server="jetty" />

----------------------------------------

TITLE: Configuring Network Protocol for Client
DESCRIPTION: Example of setting up the Triple network protocol for a client using the configuration API.

LANGUAGE: go
CODE:
rc := config.NewRootConfigBuilder().
    SetConsumer(config.NewConsumerConfigBuilder().
        AddReference("GreeterClientImpl", config.NewReferenceConfigBuilder().
            SetInterface("org.apache.dubbo.UserProvider").
            SetProtocol("tri"). // set reference protocol to triple
            Build()).
        Build()).
    Build()

----------------------------------------

TITLE: Installing Dubbo Control Plane Console in Linux
DESCRIPTION: Steps to download, extract, and install the Dubbo control plane console in a Linux environment. Includes downloading the script, setting up the PATH, and running the console with configuration.

LANGUAGE: shell
CODE:
curl -L https://dubbo.apache.org/releases/downloadDubbo.sh | sh -

cd dubbo-$version
export PATH=$PWD/bin:$PATH

LANGUAGE: shell
CODE:
dubbo-cp run --mode universal --config conf/dubbo.yml

----------------------------------------

TITLE: Initializing Vite Project with React TypeScript
DESCRIPTION: Commands to create a new Vite project template with React and TypeScript support, and install required dependencies for Dubbo integration.

LANGUAGE: shell
CODE:
npm create vite@latest -- dubbo-web-example --template react-ts
cd dubbo-web-example
npm install

----------------------------------------

TITLE: Running Dubbo-Go Server
DESCRIPTION: This command runs the Dubbo-Go server application.

LANGUAGE: shell
CODE:
$ go run ./go-server/cmd/server.go

----------------------------------------

TITLE: Configuring Etcd Connection Settings
DESCRIPTION: YAML configuration for setting up Etcd connection address in Dubbo.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: etcd://127.0.0.1:1111

----------------------------------------

TITLE: Creating Upstream for Dubbo Service in APISIX
DESCRIPTION: This curl command creates an upstream in APISIX pointing to the Dubbo service using Nacos for service discovery.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:9180/apisix/admin/upstreams/1  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "service_name": "gateway-apisix-dubbo",
	"type": "roundrobin",
	"discovery_type": "nacos"
}'

----------------------------------------

TITLE: Displaying Dubbo No Provider Exception
DESCRIPTION: Example of a Dubbo exception indicating no provider available for a service.

LANGUAGE: java
CODE:
java.lang.IllegalStateException: Failed to check the status of the service org.apache.dubbo.samples.api.GreetingsService. No provider available for the service org.apache.dubbo.samples.api.GreetingsService from the url consumer://*** to the consumer 30.221.146.226 use dubbo version 3.2.0-beta.4

----------------------------------------

TITLE: Maven Release Build Commands
DESCRIPTION: Shell commands for building and deploying Maven release artifacts

LANGUAGE: shell
CODE:
$ mvn clean install -Prelease
$ mvn deploy

----------------------------------------

TITLE: Configuring Apollo as Configuration Center in YAML
DESCRIPTION: This YAML snippet demonstrates how to configure Apollo as the configuration center in dubbo-go, including protocol, address, app ID, and cluster information.

LANGUAGE: YAML
CODE:
config_center:
  protocol: "apollo"
  address: "127.0.0.1:8070"
  app_id: test_app
  cluster: dev

----------------------------------------

TITLE: Configuring JMS Protocol Parameters in Dubbo XML
DESCRIPTION: This snippet shows an alternative syntax for setting protocol parameters in Dubbo XML configuration. It uses the p:queue attribute to set the queue parameter for the JMS protocol.

LANGUAGE: XML
CODE:
<dubbo:protocol name="jms" p:queue="xxx" />

----------------------------------------

TITLE: Referencing Dubbo Service in Consumer
DESCRIPTION: Java class demonstrating how to reference and use a Dubbo service in the consumer.

LANGUAGE: java
CODE:
@Component("annotatedConsumer")
public class GreetingServiceConsumer {
    @Reference
    private GreetingService greetingService;

    public String doSayHello(String name) {
        return greetingService.sayHello(name);
    }
}

----------------------------------------

TITLE: Testing HTTP Gateway Access
DESCRIPTION: Curl command to test the deployed service through HTTP gateway with JSON payload.

LANGUAGE: bash
CODE:
curl -X POST -d '{"name":"laurence"}' http://30.XXX.XXX.XX:8881/dubbogoDemoServer/org.apache.dubbo.laurence.samples.UserProvider/SayHello

----------------------------------------

TITLE: McpBridge Configuration for Nacos Integration
DESCRIPTION: Higress McpBridge resource configuration for Nacos service discovery integration.

LANGUAGE: yaml
CODE:
apiVersion: networking.higress.io/v1
kind: McpBridge
metadata:
  name: nacos-service-resource
  namespace: higress-system
spec:
  registries:
  - domain: nacos-server.default.svc.cluster.local
    nacosGroups:
    - DEFAULT_GROUP
    name: nacos-service-resource
    port: 8848
    type: nacos2

----------------------------------------

TITLE: Native Image Agent Configuration
DESCRIPTION: JVM argument to mount the native-image agent for generating configuration files needed for native image compilation.

LANGUAGE: bash
CODE:
-agentlib:native-image-agent=config-output-dir=/tmp/config/,config-write-period-secs=300,config-write-initial-delay-secs=5

----------------------------------------

TITLE: Setting Service-Level Timeout in Dubbo-go
DESCRIPTION: This code shows how to set a timeout for a specific service proxy. It uses the client.WithRequestTimeout() method when creating a new service.

LANGUAGE: go
CODE:
   svc, err := greet.NewGreetService(cli, client.WithRequestTimeout(5 * time.Second))

----------------------------------------

TITLE: Generating Protocol Buffer Files for Grpc in Shell
DESCRIPTION: This shell command generates the necessary Protocol Buffer files for the Grpc server using the protoc compiler. It specifies the output directories and options for Go and Go-gRPC.

LANGUAGE: shell
CODE:
protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative hello_grpc.proto

----------------------------------------

TITLE: Checking Deployment Status in Kubernetes
DESCRIPTION: This command checks the status of deployments in the dubbo-demo namespace of a Kubernetes cluster.

LANGUAGE: yaml
CODE:
kubectl -n dubbo-demo get deployments

----------------------------------------

TITLE: Configuring Zookeeper Metadata Center in Properties
DESCRIPTION: Enables Zookeeper as metadata center using Properties configuration format.

LANGUAGE: properties
CODE:
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: 配置Dubbo注册中心只订阅不注册 (XML)
DESCRIPTION: 通过dubbo:registry标签的register属性设置为false，实现服务只订阅不注册。这允许开发中的服务依赖其他服务，但不会影响其他消费者。

LANGUAGE: xml
CODE:
<dubbo:registry address="10.20.153.10:9090" register="false" />

----------------------------------------

TITLE: Configuring Conditional Routing Rule for Same Region Priority in YAML
DESCRIPTION: This YAML configuration defines a conditional routing rule for the CommentService to prioritize same-region service calls. It uses the 'region' identifier to match service instances and allows cross-region calls when no same-region instances are available.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
force: false
key: org.apache.dubbo.samples.CommentService
conditions:
  - '=> region = $region'

----------------------------------------

TITLE: Creating Zookeeper Registry for Dubbo Rust
DESCRIPTION: Shows two methods of creating a Zookeeper registry for Dubbo Rust: one using a specific address and another using the default method which relies on environment variables.

LANGUAGE: rust
CODE:
// Directly create Zookeeper registry
let zkr = ZookeeperRegistry::new("127.0.0.1:1221");

// Using the default method to create Zookeeper registry will use the value of ZOOKEEPER_SERVERS in the environment variables by default
let zkr = ZookeeperRegistry::default();

----------------------------------------

TITLE: Configuring Dubbo Provider Properties
DESCRIPTION: This properties file configures the Dubbo provider, including application name, Nacos registry address, and service details.

LANGUAGE: properties
CODE:
## application
dubbo.application.name = dubbo-provider-demo

## Nacos registry address
dubbo.registry.address = nacos://127.0.0.1:8848

## Dubbo Protocol
dubbo.protocol.name = dubbo
dubbo.protocol.port = -1

# Provider @Service version
demo.service.version=1.0.0
demo.service.name = demoService

----------------------------------------

TITLE: HTTP Health Check Request for Dubbo-go Service
DESCRIPTION: HTTP POST request example for checking service health status through the gRPC health check endpoint.

LANGUAGE: http
CODE:
POST /grpc.health.v1.Health/Check
Host: 127.0.0.1:20000
Content-Type: application/json

{"service":"greet.GreetService"}

----------------------------------------

TITLE: Java Registry Configuration Bean
DESCRIPTION: Java configuration for setting up simplified registry with custom parameters using @Bean annotation.

LANGUAGE: java
CODE:
@Bean
public RegistryConfig registryConfig() {
    RegistryConfig registryConfig = new RegistryConfig();
    registryConfig.setAddress("zookeeper://127.0.0.1:2181");
    registryConfig.setSimplified(true);
    registryConfig.setExtraKeys("retries,owner");
    return registryConfig;
}

----------------------------------------

TITLE: Implementing Health Check Client in Go with Dubbo-go
DESCRIPTION: Client implementation for checking service health status using Dubbo-go. Demonstrates both Check and Watch methods for monitoring the health of a GreetService.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"dubbo.apache.org/dubbo-go/v3/client"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	health "dubbo.apache.org/dubbo-go/v3/protocol/triple/health/triple_health"
	"github.com/dubbogo/gost/log/logger"
)

func main() {
	cli, err := client.NewClient(
		client.WithClientURL("tri://127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}
	svc, err := health.NewHealth(cli)
	if err != nil {
		panic(err)
	}
	check, err := svc.Check(context.Background(), &health.HealthCheckRequest{Service: "greet.GreetService"})
	if err != nil {
		logger.Error(err)
	} else {
		logger.Info("greet.GreetService's health", check.String())
	}
	watch, err := svc.Watch(context.Background(), &health.HealthCheckRequest{Service: "greet.GreetService"})
	if err != nil {
		logger.Error(err)
	} else {
		if watch.Recv() {
			logger.Info("greet.GreetService's health", watch.Msg().String())
		}
	}
}

----------------------------------------

TITLE: Configuring Consul Connection Settings
DESCRIPTION: YAML configuration for setting up Consul connection address in Dubbo.

LANGUAGE: yaml
CODE:
dubbo
  config-center
    address: consul://127.0.0.1:1111

----------------------------------------

TITLE: Defining DynamicConfigurationFactory Interface in Go
DESCRIPTION: This code defines the DynamicConfigurationFactory interface in dubbo-go, which is responsible for creating DynamicConfiguration instances based on provided URLs.

LANGUAGE: Go
CODE:
package config_center

import (
	"github.com/apache/dubbo-go/common"
)

// DynamicConfigurationFactory gets the DynamicConfiguration
type DynamicConfigurationFactory interface {
	GetDynamicConfiguration(*common.URL) (DynamicConfiguration, error)
}

----------------------------------------

TITLE: Defining Codec Interface in Java for Dubbo Protocol
DESCRIPTION: This code snippet defines the Codec2 interface in Java, which is used for encoding and decoding operations in the Dubbo protocol. It includes methods for encoding messages to a ChannelBuffer and decoding from a ChannelBuffer to Objects.

LANGUAGE: java
CODE:
@SPI
public interface Codec2 {

    @Adaptive({Constants.CODEC_KEY})
    void encode(Channel channel, ChannelBuffer buffer, Object message) throws IOException;

    @Adaptive({Constants.CODEC_KEY})
    Object decode(Channel channel, ChannelBuffer buffer) throws IOException;


    enum DecodeResult {
        NEED_MORE_INPUT, SKIP_SOME_INPUT
    }

}

----------------------------------------

TITLE: Configuring Dubbo Provider with Java Config
DESCRIPTION: Configuration class for setting up Dubbo provider using Java configuration and @EnableDubbo annotation.

LANGUAGE: java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.impl")
static class ProviderConfiguration {
    @Bean
    public ProviderConfig providerConfig() {
        ProviderConfig providerConfig = new ProviderConfig();
        providerConfig.setTimeout(1000);
        return providerConfig;
    }

    @Bean
    public ApplicationConfig applicationConfig() {
        ApplicationConfig applicationConfig = new ApplicationConfig();
        applicationConfig.setName("dubbo-annotation-provider");
        return applicationConfig;
    }

    @Bean
    public RegistryConfig registryConfig() {
        RegistryConfig registryConfig = new RegistryConfig();
        registryConfig.setProtocol("zookeeper");
        registryConfig.setAddress("localhost");
        registryConfig.setPort(2181);
        return registryConfig;
    }

    @Bean
    public ProtocolConfig protocolConfig() {
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName("dubbo");
        protocolConfig.setPort(20880);
        return protocolConfig;
    }
}

----------------------------------------

TITLE: Implementing gRPC Server
DESCRIPTION: Traditional gRPC server implementation that handles requests on port 20001.

LANGUAGE: go
CODE:
type server struct {
	pb.UnimplementedGreetServiceServer
}

func (s *server) Greet(ctx context.Context, req *pb.GreetRequest) (*pb.GreetResponse, error) {
	resp := &pb.GreetResponse{Greeting: "grpc:" + req.Name}
	return resp, nil
}

func main() {
	lis, err := net.Listen("tcp", "127.0.0.1:20001")
	if err != nil {
		logger.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterGreetServiceServer(s, &server{})
	logger.Infof("server listening at %v", lis.Addr())
	if err := s.Serve(lis); err != nil {
		logger.Fatalf("failed to serve: %v", err)
	}
}

----------------------------------------

TITLE: HTTP Request Example for Triple Protocol
DESCRIPTION: Shell command demonstrating how to make an HTTP request to a Dubbo service exposed via Triple protocol.

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '["Dubbo"]' \
    http://localhost:20880/org.apache.dubbo.protocol.multiple.demo.DemoService/sayHello

----------------------------------------

TITLE: Implementing Dubbo-Go Server
DESCRIPTION: Server implementation using Dubbo-Go that handles gRPC requests using the Triple protocol on port 20000.

LANGUAGE: go
CODE:
type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	resp := &greet.GreetResponse{Greeting: "dubbo:" + req.Name}
	return resp, nil
}

func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
			protocol.WithTriple(),
		),
	)
	if err != nil {
		panic(err)
	}

	if err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
		panic(err)
	}

	if err := srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Configuring Protocol Extension in XML
DESCRIPTION: XML configuration examples for declaring and referencing custom protocol extensions in Dubbo

LANGUAGE: xml
CODE:
<dubbo:protocol id="xxx1" name="xxx" />
<dubbo:service protocol="xxx1" />
<dubbo:provider protocol="xxx1" />

----------------------------------------

TITLE: Implementing gRPC Server
DESCRIPTION: Traditional gRPC server implementation that handles requests on port 20001.

LANGUAGE: go
CODE:
type server struct {
	pb.UnimplementedGreetServiceServer
}

func (s *server) Greet(ctx context.Context, req *pb.GreetRequest) (*pb.GreetResponse, error) {
	resp := &pb.GreetResponse{Greeting: "grpc:" + req.Name}
	return resp, nil
}

func main() {
	lis, err := net.Listen("tcp", "127.0.0.1:20001")
	if err != nil {
		logger.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterGreetServiceServer(s, &server{})
	logger.Infof("server listening at %v", lis.Addr())
	if err := s.Serve(lis); err != nil {
		logger.Fatalf("failed to serve: %v", err)
	}
}

----------------------------------------

TITLE: Implementing Dubbo-Go Server
DESCRIPTION: Server implementation using Dubbo-Go that handles gRPC requests using the Triple protocol on port 20000.

LANGUAGE: go
CODE:
type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	resp := &greet.GreetResponse{Greeting: "dubbo:" + req.Name}
	return resp, nil
}

func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
			protocol.WithTriple(),
		),
	)
	if err != nil {
		panic(err)
	}

	if err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
		panic(err)
	}

	if err := srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Defining Java Service Interface
DESCRIPTION: Java interface definition for a basic greeting service in Dubbo Java

LANGUAGE: java
CODE:
package org.apache.dubbo.samples.api;

public interface GreetingsService {
    String sayHi(String name);
}

----------------------------------------

TITLE: Checking Dubbo Sample Application Deployment Status
DESCRIPTION: This command retrieves the status of deployments in the dubbo-demo namespace to confirm if the sample application is running normally.

LANGUAGE: yaml
CODE:
kubectl -n dubbo-demo get deployments

----------------------------------------

TITLE: Implementing dubbo-go Client in Go
DESCRIPTION: Go code to configure and start a dubbo-go client, calling the remote DemoProvider methods.

LANGUAGE: go
CODE:
func main() {
	config.Load()
	gxlog.CInfo("\n\n\nstart to test dubbo")

	res, err := demoProvider.SayHello(context.TODO(), "tc")
	if err != nil {
		panic(err)
	}

	gxlog.CInfo("response result: %v\n", res)

	user := User{
		Name: "tc",
		Age:  18,
	}

	res, err = demoProvider.SayHello2(context.TODO(), user)
	if err != nil {
		panic(err)
	}

	gxlog.CInfo("response result: %v\n", res)

	res, err = demoProvider.SayHello3(context.TODO(), user, "tc")
	if err != nil {
		panic(err)
	}

	gxlog.CInfo("response result: %v\n", res)

	initSignal()
}

----------------------------------------

TITLE: Registering MonitorFactory Extension
DESCRIPTION: Properties file configuration to register the custom MonitorFactory implementation with Dubbo's extension system.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxMonitorFactory

----------------------------------------

TITLE: Configuring Direct Connection via JVM Parameter
DESCRIPTION: Demonstrates how to specify service URL mapping through JVM -D parameter at startup.

LANGUAGE: sh
CODE:
java -Dcom.alibaba.xxx.XxxService=dubbo://localhost:20890

----------------------------------------

TITLE: Configuring Callback Service Provider in XML
DESCRIPTION: XML configuration for the callback service provider, specifying the service interface, implementation, and callback method.

LANGUAGE: xml
CODE:
<bean id="callbackService" class="com.callback.impl.CallbackServiceImpl" />
<dubbo:service interface="com.callback.CallbackService" ref="callbackService" connections="1" callbacks="1000">
    <dubbo:method name="addListener">
        <dubbo:argument index="1" callback="true" />
        <!-- You can also specify by type -->
        <!--<dubbo:argument type="com.demo.CallbackListener" callback="true" />-->
    </dubbo:method>
</dubbo:service>

----------------------------------------

TITLE: Loading Adaptive Extension Classes Example
DESCRIPTION: Example of loading adaptive extension classes in Dubbo SPI.

LANGUAGE: Java
CODE:
public class DubboAdaptiveTest {
    @Test
    public void sayHello() throws Exception {
        URL url = URL.valueOf("dubbo://localhost/test");
        Protocol adaptiveProtocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
        adaptiveProtocol.refer(type, url);
    }
}

----------------------------------------

TITLE: Enabling Remote Metadata Registration in Properties
DESCRIPTION: Properties configuration to enable remote interface configuration metadata registration in Dubbo 3. Sets the metadata type to 'remote'.

LANGUAGE: properties
CODE:
dubbo.application.metadata-type=remote

----------------------------------------

TITLE: Cluster Filter SPI Interface Definition in Java
DESCRIPTION: SPI interface definition for cluster-level filters with module scope

LANGUAGE: java
CODE:
@SPI(scope = ExtensionScope.MODULE)
public interface ClusterFilter extends BaseFilter {}

----------------------------------------

TITLE: Configuring Callback Service in Dubbo XML
DESCRIPTION: XML configuration for exposing a callback service in Dubbo, specifying connection and callback limits.

LANGUAGE: xml
CODE:
<bean id="callbackService" class="com.alibaba.dubbo.samples.callback.impl.CallbackServiceImpl"/>

<dubbo:service interface="com.alibaba.dubbo.samples.callback.api.CallbackService" ref="callbackService" connections="1" callbacks="1000">
    <dubbo:method name="addListener">
        <dubbo:argument index="1" callback="true"/>
        <!--<dubbo:argument type="com.demo.CallbackListener" callback="true" />-->
    </dubbo:method>
</dubbo:service>

----------------------------------------

TITLE: Configuring Export Listener in Dubbo XML
DESCRIPTION: XML configuration examples showing how to configure service and provider-level export listeners in Dubbo.

LANGUAGE: xml
CODE:
<!-- Service export listener -->
<dubbo:service listener="xxx,yyy" />
<!-- Default listener for service export -->
<dubbo:provider listener="xxx,yyy" />

----------------------------------------

TITLE: Logger Interface Definition in Go
DESCRIPTION: This code block defines the Logger interface used by the Dubbo-Go framework. It includes methods for different log levels (Info, Warn, Error, Debug, Fatal) and their formatted variants.

LANGUAGE: go
CODE:
type Logger interface {
	Info(args ...interface{})
	Warn(args ...interface{})
	Error(args ...interface{})
	Debug(args ...interface{})
	Fatal(args ...interface{})

	Infof(fmt string, args ...interface{})
	Warnf(fmt string, args ...interface{})
	Errorf(fmt string, args ...interface{})
	Debugf(fmt string, args ...interface{})
	Fatalf(fmt string, args ...interface{})
}

----------------------------------------

TITLE: Testing Advanced REST Service with cURL
DESCRIPTION: Shell command demonstrating advanced REST features with headers and form data

LANGUAGE: shell
CODE:
curl -v -H "c: 3" -d 'name=Yang' "http://127.0.0.1:8081/org.apache.dubbo.rest.demo.DemoService/hi.txt?title=Mr"

----------------------------------------

TITLE: Implementing Exchange Client in Java
DESCRIPTION: Basic structure for implementing a custom ExchangeClient interface in Dubbo.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.exchange.ExchangeClient;
 
public class XxxExchangeClient impelments ExchangeClient {
    // ...
}

----------------------------------------

TITLE: Checking Kubernetes Service Status
DESCRIPTION: PostgreSQL-formatted command output showing the status of deployed services in the Kubernetes cluster.

LANGUAGE: pgsql
CODE:
NAME             TYPE           CLUSTER-IP        EXTERNAL-IP     PORT(S)          AGE
dubbo-go-nacos   ClusterIP      192.168.123.204   <none>          8848/TCP         32s
pixiu            LoadBalancer   192.168.156.175   30.XXX.XXX.XX   8881:30173/TCP   32s

----------------------------------------

TITLE: Configuring Zookeeper Config Center in XML
DESCRIPTION: Basic XML configuration to enable Zookeeper as a configuration center in Dubbo

LANGUAGE: xml
CODE:
<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>

----------------------------------------

TITLE: Compiling and Packaging Dubbo Release
DESCRIPTION: Maven commands to compile, package, and deploy Dubbo release artifacts.

LANGUAGE: shell
CODE:
$ mvn clean install -Prelease
$ mvn deploy

----------------------------------------

TITLE: Setting Custom Protocol in Application Properties
DESCRIPTION: These snippets demonstrate how to set the custom 'edubbo' protocol in the application.properties files for both the provider and consumer.

LANGUAGE: properties
CODE:
# 自定义协议
dubbo.provider.protocol=edubbo

LANGUAGE: properties
CODE:
# 自定义协议
dubbo.consumer.protocol=edubbo

----------------------------------------

TITLE: Implementing Dubbo Service with Annotations
DESCRIPTION: Example of implementing a Dubbo service provider using the @Service annotation.

LANGUAGE: java
CODE:
@Service
public class AnnotatedGreetingService implements GreetingService {
    public String sayHello(String name) {
        return "hello, " + name;
    }
}

----------------------------------------

TITLE: Configuring Dubbo-go with XDS Protocol
DESCRIPTION: Modify the dubbogo.yaml configuration file to use xds protocol as the registry for service discovery in Istio.

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    xds:
      protocol: xds
      address: istiod.istio-system.svc.cluster.local:15010
  protocols:
    triple:
      name: tri
      port: 20000
  provider:
    services:
      GreeterServerImpl:
        interface: "" # read from stub

----------------------------------------

TITLE: Testing Server with cURL
DESCRIPTION: Command to test the Dubbo server endpoint using cURL with JSON payload

LANGUAGE: shell
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:20000/greet.GreetService/Greet

----------------------------------------

TITLE: Configuring Dubbo Service Reference
DESCRIPTION: Java code to configure the Dubbo service reference on the consumer side.

LANGUAGE: java
CODE:
@Component
public class Task implements CommandLineRunner {
    @DubboReference(url = "dubbo://127.0.0.1:20880/org.apache.dubbo.protocol.dubbo.demo.DemoService")
    private DemoService demoService;
}

----------------------------------------

TITLE: Generating JStack Dump for Debugging
DESCRIPTION: Command to generate a thread dump for analyzing stack information using jstack utility

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Dubbo-go with XDS Protocol
DESCRIPTION: Modify the dubbogo.yaml configuration file to use xds protocol as the registry for service discovery in Istio.

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    xds:
      protocol: xds
      address: istiod.istio-system.svc.cluster.local:15010
  protocols:
    triple:
      name: tri
      port: 20000
  provider:
    services:
      GreeterServerImpl:
        interface: "" # read from stub

----------------------------------------

TITLE: Generating Dubbo Code from Proto File
DESCRIPTION: Uses protoc to generate TypeScript code from the Protocol Buffers definition.

LANGUAGE: Shell
CODE:
PATH=$PATH:$(pwd)/node_modules/.bin \
  protoc -I proto \
  --es_out gen \
  --es_opt target=ts \
  --apache-dubbo-es_out gen \
  --apache-dubbo-es_opt target=ts \
  example.proto

----------------------------------------

TITLE: Defining Dubbo Service Interface with Protobuf
DESCRIPTION: Protocol buffer definition for a basic greeter service that includes request/response message types and a unary RPC method.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

option java_multiple_files = true;

package org.apache.dubbo.sample.tri;


// The request message containing the user's name.
message GreeterRequest {
string name = 1;
}

// The response message containing the greetings
message GreeterReply {
string message = 1;
}

service Greeter{
// unary
rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Configuring Thread Pool Isolation via XML
DESCRIPTION: Example of configuring thread pool isolation for Dubbo services using XML configuration, including custom executors and application-level settings.

LANGUAGE: xml
CODE:
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

  <!-- NOTE: we need config executor-management-mode="isolation" -->
  <dubbo:application name="demo-provider" executor-management-mode="isolation">
  </dubbo:application>

  <dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
  <dubbo:metadata-report address="zookeeper://127.0.0.1:2181"/>
  <dubbo:registry id="registry1" address="zookeeper://127.0.0.1:2181?registry-type=service"/>

  <dubbo:protocol name="dubbo" port="-1"/>
  <dubbo:protocol name="tri" port="-1"/>

  <!-- expose three service with dubbo and tri protocol-->
  <bean id="demoServiceV1" class="org.apache.dubbo.config.spring.impl.DemoServiceImpl"/>
  <bean id="helloServiceV2" class="org.apache.dubbo.config.spring.impl.HelloServiceImpl"/>
  <bean id="helloServiceV3" class="org.apache.dubbo.config.spring.impl.HelloServiceImpl"/>

  <!-- customized thread pool -->
  <bean id="executor-demo-service"
        class="org.apache.dubbo.config.spring.isolation.spring.support.DemoServiceExecutor"/>
  <bean id="executor-hello-service"
        class="org.apache.dubbo.config.spring.isolation.spring.support.HelloServiceExecutor"/>

  <!-- this service use [executor="executor-demo-service"] as isolated thread pool-->
  <dubbo:service executor="executor-demo-service"
                 interface="org.apache.dubbo.config.spring.api.DemoService" version="1.0.0" group="Group1"
                 timeout="3000" ref="demoServiceV1" registry="registry1" protocol="dubbo,tri"/>

  <!-- this service use [executor="executor-hello-service"] as isolated thread pool-->
  <dubbo:service executor="executor-hello-service"
                 interface="org.apache.dubbo.config.spring.api.HelloService" version="2.0.0" group="Group2"
                 timeout="5000" ref="helloServiceV2" registry="registry1" protocol="dubbo,tri"/>

  <!-- not set executor for this service, the default executor built using threadpool parameter of the protocolConfig -->
  <dubbo:service interface="org.apache.dubbo.config.spring.api.HelloService" version="3.0.0" group="Group3"
                 timeout="5000" ref="helloServiceV3" registry="registry1" protocol="dubbo,tri"/>

</beans>

----------------------------------------

TITLE: Implementing Redis MetadataReportFactory in Java
DESCRIPTION: Extends AbstractMetadataReportFactory to create a factory for Redis-based metadata reports.

LANGUAGE: java
CODE:
public class RedisMetadataReportFactory extends AbstractMetadataReportFactory {
    @Override
    public MetadataReport createMetadataReport(URL url) {
        return new RedisMetadataReport(url);
    }
}

----------------------------------------

TITLE: Implementing Dubbo-Go Client
DESCRIPTION: Client implementation using Dubbo-Go that can communicate with both Dubbo-Go and gRPC servers.

LANGUAGE: go
CODE:
func main() {
	// test connect with dubbo
	dubboCli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(dubboCli)
	if err != nil {
		panic(err)
	}

	resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)

	// test connect with grpc
	grpcCli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20001"),
	)
	if err != nil {
		panic(err)
	}
	svc, err = greet.NewGreetService(grpcCli)
	if err != nil {
		panic(err)
	}
	resp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Installing Dubbo Admin using Dubboctl
DESCRIPTION: Shell commands for installing Dubbo Admin using Dubboctl, including options for customization.

LANGUAGE: shell
CODE:
dubboctl manifest install

# or

dubboctl manifest generate | kubectl apply -f -

dubboctl install --set spec.components.admin.replicas=2

dubboctl install --set spec.componentsMeta.admin.enabled=true, spec.componentsMeta.grafana.enabled=false

dubboctl install --set spec.componentsMeta.grafana.repoURL=https://grafana.github.io/helm-charts, spec.componentsMeta.grafana.version=6.31.0

kubectl get pod -n dubbo-system

kubectl port-forward svc/dubbo-admin -n dubbo-system 38080:38080

----------------------------------------

TITLE: Local Process Deployment of Dubbo Application
DESCRIPTION: Steps to package and run a Dubbo application locally using Maven and Java.

LANGUAGE: shell
CODE:
$ mvn clean package
$ java -jar ./quickstart-service/target/quickstart-service-0.0.1-SNAPSHOT.jar

----------------------------------------

TITLE: Activating Custom Dubbo Filter in Application Properties
DESCRIPTION: This configuration activates the custom Filter implementation for the Dubbo provider. It should be added to the application.properties file.

LANGUAGE: properties
CODE:
# Apply AppendedFilter
dubbo.provider.filter=appended

----------------------------------------

TITLE: Implementing Dubbo-Go Client
DESCRIPTION: Client implementation using Dubbo-Go that can communicate with both Dubbo-Go and gRPC servers.

LANGUAGE: go
CODE:
func main() {
	// test connect with dubbo
	dubboCli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(dubboCli)
	if err != nil {
		panic(err)
	}

	resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)

	// test connect with grpc
	grpcCli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20001"),
	)
	if err != nil {
		panic(err)
	}
	svc, err = greet.NewGreetService(grpcCli)
	if err != nil {
		panic(err)
	}
	resp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Generating Java Thread Dump for Serialization Analysis
DESCRIPTION: Command to generate a thread dump for analyzing serialization issues by capturing the stack trace information to a log file.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Demonstrating JSON Serialization in Dubbo Protocol
DESCRIPTION: This snippet illustrates the format for JSON serialization in the Dubbo protocol's variable part. It shows how newline characters are used as separators between content parts.

LANGUAGE: plaintext
CODE:
Dubbo version bytes (newline)
Service name bytes  (newline)
...


----------------------------------------

TITLE: Configuring Zookeeper Config Center in Java
DESCRIPTION: Java code configuration to enable Zookeeper as a configuration center in Dubbo

LANGUAGE: java
CODE:
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://127.0.0.1:2181");

----------------------------------------

TITLE: Implementing Custom Protocol in Java
DESCRIPTION: This code snippet shows the implementation of a custom 'EnhancedProtocol' that wraps the existing DubboProtocol. It implements the Protocol interface and delegates most operations to the wrapped protocol instance.

LANGUAGE: java
CODE:
package org.apache.dubbo.samples.extensibility.protocol.common;

import org.apache.dubbo.common.URL;
import org.apache.dubbo.rpc.Protocol;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Exporter;
import org.apache.dubbo.rpc.ProtocolServer;
import org.apache.dubbo.rpc.RpcException;
import org.apache.dubbo.rpc.model.FrameworkModel;
import org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol;

import java.util.List;

public class EnhancedProtocol implements Protocol {

    public EnhancedProtocol(FrameworkModel frameworkModel) {
        this.protocol = new DubboProtocol(frameworkModel);
    }

    private final Protocol protocol;

    @Override
    public int getDefaultPort() {
        return this.protocol.getDefaultPort();
    }

    @Override
    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
        // do something
        return this.protocol.export(invoker);
    }

    @Override
    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
        // do something
        return this.protocol.refer(type, url);
    }

    @Override
    public void destroy() {
        this.protocol.destroy();
    }

    @Override
    public List<ProtocolServer> getServers() {
        return protocol.getServers();
    }
}

----------------------------------------

TITLE: Configuring Dubbo Server with YAML
DESCRIPTION: Defines the server-side configuration for Dubbo using YAML. Specifies the service details, protocol settings, and listening configuration for the Greeter service.

LANGUAGE: yaml
CODE:
name: dubbo
service:
  org.apache.dubbo.sample.tri.Greeter:
    version: 1.0.0
    group: test
    protocol: triple
    registry: ''
    serializer: json
    protocol_configs:
      triple:
        ip: 0.0.0.0
        port: '8888'
        name: triple
protocols:
  triple:
    ip: 0.0.0.0
    port: '8888'
    name: triple

----------------------------------------

TITLE: Generating Go Code from Protocol Buffer
DESCRIPTION: Command to generate Go code from the Protocol Buffer definition using protoc with go and go-triple plugins.

LANGUAGE: shell
CODE:
protoc --go_out=. --go_opt=paths=source_relative \
    --go-triple_out=. --go-triple_opt=paths=source_relative \
    ./greet.proto

----------------------------------------

TITLE: Configuring Callback Service Consumer in XML
DESCRIPTION: XML configuration for the callback service consumer, referencing the callback service interface.

LANGUAGE: xml
CODE:
<dubbo:reference id="callbackService" interface="com.callback.CallbackService" />

----------------------------------------

TITLE: Starting Pixiu Docker Container (Foreground)
DESCRIPTION: Docker command to start Pixiu in foreground mode with configuration file mounts. Useful for monitoring startup and logs.

LANGUAGE: shell
CODE:
docker run --name dubbo-go-pixiu -p 8883:8883 \
    -v /yourpath/conf.yaml:/etc/pixiu/conf.yaml \
    -v /yourpath/log.yml:/etc/pixiu/log.yml \
    apache/dubbo-go-pixiu:latest

----------------------------------------

TITLE: Defining REST API with Spring MVC Annotations in Java
DESCRIPTION: This code snippet demonstrates how to define a REST API interface using Spring MVC annotations in Java. It includes methods for GET and POST requests with different parameter types.

LANGUAGE: Java
CODE:
@RestController()
@RequestMapping("/demoService")
public interface DemoService {
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    Integer hello(@RequestParam Integer a, @RequestParam Integer b);

    @RequestMapping(value = "/error", method = RequestMethod.GET)
    String error();

    @RequestMapping(value = "/say", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)
    String sayHello(@RequestBody String name);
}

----------------------------------------

TITLE: Viewing Dubbo-go Registration Info on Zookeeper
DESCRIPTION: Command to view the registered interfaces and methods for a Dubbo-go application on Zookeeper.

LANGUAGE: shell
CODE:
dubbogo-cli show --r zookeeper --h 127.0.0.1:2181

----------------------------------------

TITLE: Implementing Dubbo Registration with Failback in Java
DESCRIPTION: Implementation of the register method in Dubbo that handles registration requests with failback mechanism for failed registrations.

LANGUAGE: java
CODE:
    public void register(URL url) {
        super.register(url);
        failedRegistered.remove(url);
        failedUnregistered.remove(url);
        try {
            // Sending a registration request to the server side
            doRegister(url);
        } catch (Exception e) {
            Throwable t = e;

            // If the startup detection is opened, the Exception is thrown directly.
            boolean check = getUrl().getParameter(Constants.CHECK_KEY, true)
                    && url.getParameter(Constants.CHECK_KEY, true)
                    && !Constants.CONSUMER_PROTOCOL.equals(url.getProtocol());
            boolean skipFailback = t instanceof SkipFailbackWrapperException;
            if (check || skipFailback) {
                if (skipFailback) {
                    t = t.getCause();
                }
                throw new IllegalStateException("Failed to register " + url + " to registry " + getUrl().getAddress() + ", cause: " + t.getMessage(), t);
            } else {
                logger.error("Failed to register " + url + ", waiting for retry, cause: " + t.getMessage(), t);
            }

            // Record a failed registration request to a failed list, retry regularly
            failedRegistered.add(url);
        }
    }

----------------------------------------

TITLE: Tag Routing Rule Configuration
DESCRIPTION: YAML configuration for tag routing rules defining traffic isolation conditions and matching criteria

LANGUAGE: yaml
CODE:
configVersion: v3.0
force: true
enabled: true
key: shop-detail
tags:
  - name: gray
    match:
      - key: env
        value:
          exact: gray

----------------------------------------

TITLE: Implementing Versioned Dubbo Service - Version 1
DESCRIPTION: Implementation of DevelopService with group1 and version 1.0 configuration using @DubboService annotation

LANGUAGE: java
CODE:
@DubboService(group = "group1", version = "1.0")
public class DevelopProviderServiceV1 implements DevelopService{
    @Override
    public String invoke(String param) {
        StringBuilder s = new StringBuilder();
        s.append("ServiceV1 param:").append(param);
        return s.toString();
    }
}

----------------------------------------

TITLE: Registering Logger Adapter Extension
DESCRIPTION: Properties file configuration for registering the custom logger adapter with Dubbo's extension system

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxLoggerAdapter

----------------------------------------

TITLE: Implementing REST Service with Triple Protocol in Java
DESCRIPTION: Demonstrates how to create a REST service using Triple protocol with custom annotations for path mapping and parameter handling. Includes service interface definition, implementation class, and data model.

LANGUAGE: java
CODE:
package org.apache.dubbo.rest.demo;

import org.apache.dubbo.remoting.http12.rest.Mapping;
import org.apache.dubbo.remoting.http12.rest.Param;

// Service Interface
public interface DemoService {
    String hello(String name);

    @Mapping(path = "/hi", method = HttpMethods.POST)
    String hello(User user, @Param(value = "c", type = ParamType.Header) int count);
}

// Service Implementation
@DubboService
public class DemoServiceImpl implements DemoService {
    @Override
    public String hello(String name) {
        return "Hello " + name;
    }

    @Override
    public String hello(User user, int count) {
        return "Hello " + user.getTitle() + ". " + user.getName() + ", " + count;
    }
}

// Model
@Data
public class User {
    private String title;
    private String name;
}

----------------------------------------

TITLE: Disabling Startup Check in Go Client
DESCRIPTION: Creates a new Dubbo client with startup checks disabled using WithClientCheck option set to false.

LANGUAGE: go
CODE:
cli, err := client.NewClient(
	client.WithClientCheck(false),
)

----------------------------------------

TITLE: Docker Container Deployment of Dubbo Application
DESCRIPTION: Commands to build and run a Dubbo application in a Docker container.

LANGUAGE: shell
CODE:
$ docker build -f ./Dockerfile -t quickstart
$ docker run quickstart -p port1:port2

----------------------------------------

TITLE: Implementing Dubbo Service with Version and Group - V1
DESCRIPTION: First implementation of the DevelopService interface using group1 and version 1.0 annotations.

LANGUAGE: java
CODE:
@DubboService(group = "group1", version = "1.0")
public class DevelopProviderServiceV1 implements DevelopService{
    @Override
    public String invoke(String param) {
        StringBuilder s = new StringBuilder();
        s.append("ServiceV1 param:").append(param);
        return s.toString();
    }
}

----------------------------------------

TITLE: Setting Zone in RpcContext for Registry Selection
DESCRIPTION: This Java code demonstrates how to set the zone in RpcContext for selecting a specific registry based on the zone.

LANGUAGE: java
CODE:
RpcContext.getContext().setAttachment("registry_zone", "qingdao");

----------------------------------------

TITLE: Implementing Custom Networker in Java
DESCRIPTION: Example of implementing a custom Networker extension in Java. The XxxNetworker class implements the Networker interface and provides the lookup method.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.p2p.Networker;
 
public class XxxNetworker implements Networker {
    public Group lookup(URL url) {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Fastjson Serialization in XML
DESCRIPTION: XML configuration options for enabling Fastjson serialization in Dubbo at protocol, consumer, and reference levels.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="fastjson" />

<!-- or -->
<dubbo:consumer serialization="fastjson" />

<!-- or -->
<dubbo:reference interface="xxx" serialization="fastjson" />

----------------------------------------

TITLE: Adding Dubbo 3 Plugin Dependency in Maven
DESCRIPTION: XML snippet for adding the Dubbo 3 cluster specify address plugin dependency to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-cluster-specify-address-dubbo3</artifactId>
  <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Deploying Dubbo-go Application with Helm
DESCRIPTION: Use Helm to deploy the Dubbo-go application to the Kubernetes cluster running Istio.

LANGUAGE: bash
CODE:
$ make deploy 
helm install dubbo-go-server-v1 ./chart/app
NAME: dubbo-go-server-v1
LAST DEPLOYED: Thu Apr  7 11:19:42 2022
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None

----------------------------------------

TITLE: Querying Warned Classes via HTTP in Dubbo
DESCRIPTION: This snippet shows how to use an HTTP request to retrieve the list of warned classes in JSON format from Dubbo's serialization security audit.

LANGUAGE: bash
CODE:
> curl http://127.0.0.1:22222/serializeWarnedClasses
{"warnedClasses":["io.dubbo.test2.NotSerializable","org.apache.dubbo.samples.NotSerializable","io.dubbo.test.NotSerializable","io.dubbo.test2.OthersSerializable"]}

----------------------------------------

TITLE: Running Dubbo Service
DESCRIPTION: Commands for navigating to the example directory and running the server and client

LANGUAGE: bash
CODE:
cd samples/helloworld
python server.py
python client.py

----------------------------------------

TITLE: Adding Dubbo 3 Plugin Dependency in Maven
DESCRIPTION: XML snippet for adding the Dubbo 3 cluster specify address plugin dependency to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-cluster-specify-address-dubbo3</artifactId>
  <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Implementing Custom Serialization in Java
DESCRIPTION: Example implementation of a custom serialization class that implements Dubbo's Serialization interface with methods for serialization and deserialization.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.serialize.Serialization;
import org.apache.dubbo.common.serialize.ObjectInput;
import org.apache.dubbo.common.serialize.ObjectOutput;
 
 
public class XxxSerialization implements Serialization {
    public ObjectOutput serialize(Parameters parameters, OutputStream output) throws IOException {
        return new XxxObjectOutput(output);
    }
    public ObjectInput deserialize(Parameters parameters, InputStream input) throws IOException {
        return new XxxObjectInput(input);
    }
}

----------------------------------------

TITLE: Starting the Grpc Server in Shell
DESCRIPTION: This shell command starts the Grpc server by running the server.go file using the Go runtime.

LANGUAGE: shell
CODE:
go run server.go

----------------------------------------

TITLE: Implementing EtcdServiceDiscovery
DESCRIPTION: This code snippet shows key methods and implementations of the EtcdServiceDiscovery class, including registration, unregistration, and instance retrieval.

LANGUAGE: java
CODE:
public class EtcdServiceDiscovery extends AbstractServiceDiscovery {
    
    private final Set<String> services = new ConcurrentHashSet<>();
    private final Map<String, InstanceChildListener> childListenerMap = new ConcurrentHashMap<>();

    EtcdClient etcdClient;

    public EtcdServiceDiscovery(ApplicationModel applicationModel, URL registryURL) {
        super(applicationModel, registryURL);
        EtcdTransporter etcdTransporter = applicationModel.getExtensionLoader(EtcdTransporter.class).getAdaptiveExtension();

        etcdClient = etcdTransporter.connect(registryURL);

        etcdClient.addStateListener(state -> {
            if (state == StateListener.CONNECTED) {
                try {
                    recover();
                } catch (Exception e) {
                    logger.error(e.getMessage(), e);
                }
            }
        });

        this.registryURL = registryURL;
    }

    @Override
    public void doRegister(ServiceInstance serviceInstance) {
        try {
            String path = toPath(serviceInstance);
            etcdClient.putEphemeral(path, new Gson().toJson(serviceInstance));
            services.add(serviceInstance.getServiceName());
        } catch (Throwable e) {
            throw new RpcException("Failed to register " + serviceInstance + " to etcd " + etcdClient.getUrl()
                + ", cause: " + (OptionUtil.isProtocolError(e)
                ? "etcd3 registry may not be supported yet or etcd3 registry is not available."
                : e.getMessage()), e);
        }
    }

    @Override
    protected void doUnregister(ServiceInstance serviceInstance) {
        try {
            String path = toPath(serviceInstance);
            etcdClient.delete(path);
            services.remove(serviceInstance.getServiceName());
        } catch (Throwable e) {
            throw new RpcException("Failed to unregister " + serviceInstance + " to etcd " + etcdClient.getUrl() + ", cause: " + e.getMessage(), e);
        }
    }

    @Override
    public void addServiceInstancesChangedListener(ServiceInstancesChangedListener listener) throws NullPointerException, IllegalArgumentException {
        for (String serviceName : listener.getServiceNames()) {
            registerServiceWatcher(serviceName, listener);
        }
    }

    @Override
    public List<ServiceInstance> getInstances(String serviceName) {
        List<String> children = etcdClient.getChildren(toParentPath(serviceName));
        if (CollectionUtils.isEmpty(children)) {
            return Collections.emptyList();
        }
        List<ServiceInstance> list = new ArrayList<>(children.size());
        for (String child : children) {
            ServiceInstance serviceInstance = new Gson().fromJson(etcdClient.getKVValue(child), DefaultServiceInstance.class);
            list.add(serviceInstance);
        }
        return list;
    }
}

----------------------------------------

TITLE: Changing Log Level in Dubbo using Telnet
DESCRIPTION: This snippet shows how to use the 'switchLogLevel' command to change the log level in Dubbo. It demonstrates changing the log level to WARN and verifying the change using the 'loggerInfo' command.

LANGUAGE: bash
CODE:
> telnet 127.0.0.1 22222
> switchLogLevel WARN

----------------------------------------

TITLE: Testing Pixiu Filter with cURL
DESCRIPTION: Shell commands for testing the implemented filter functionality and viewing the results.

LANGUAGE: shell
CODE:
curl localhost:8888/demo -d "eiv al tse'c"

c'est la vie%

----------------------------------------

TITLE: Implementing OrderService in Java
DESCRIPTION: This code implements the OrderService interface, providing the logic to create an order and debit the account.

LANGUAGE: java
CODE:
public class OrderServiceImpl implements OrderService {

    private OrderDAO orderDAO;

    private AccountService accountService;

    public Order create(String userId, String commodityCode, int orderCount) {

        int orderMoney = calculate(commodityCode, orderCount);

        accountService.debit(userId, orderMoney);

        Order order = new Order();
        order.userId = userId;
        order.commodityCode = commodityCode;
        order.count = orderCount;
        order.money = orderMoney;

        return orderDAO.insert(order);
    }
}

----------------------------------------

TITLE: Adding Dubbo 2 IP Specification Plugin Dependency in Maven
DESCRIPTION: XML snippet showing how to add the dubbo-cluster-specify-address-dubbo2 plugin dependency to a Maven project for Dubbo 2.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-cluster-specify-address-dubbo2</artifactId>
  <version>1.0.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Zookeeper Registry in YAML
DESCRIPTION: YAML configuration for setting up Zookeeper as a registry center in Dubbo, including address and register mode settings.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   register-mode: instance

----------------------------------------

TITLE: Configuring Zookeeper Registry in YAML
DESCRIPTION: YAML configuration for setting up Zookeeper as a registry center in Dubbo, including address and register mode settings.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   register-mode: instance

----------------------------------------

TITLE: Configuring Serializable Interface Check in XML
DESCRIPTION: Demonstrates how to configure the Serializable interface check using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" check-serializable="true"/>

----------------------------------------

TITLE: Configuring Dubbo Rust Server with Zookeeper Registry
DESCRIPTION: Demonstrates how to register a service, create a Zookeeper registry, and start the Dubbo framework on the server side. This snippet shows the process of binding the created registry to the Dubbo framework.

LANGUAGE: rust
CODE:
// Register service
register_server(GreeterServerImpl {
    name: "greeter".to_string(),
});

// Create registry
let zkr = ZookeeperRegistry::default();

let r = RootConfig::new();
let r = match r.load() {
    Ok(config) => config,
    Err(_err) => panic!("err: {:?}", _err), // response was dropped
};

// Start Dubbo framework
let mut f = Dubbo::new()
    .with_config(r)
    // Bind the created registry to the Dubbo framework
    .add_registry("zookeeper", Box::new(zkr));
f.start().await;

----------------------------------------

TITLE: Configuring Zookeeper Registry in YAML
DESCRIPTION: YAML configuration for setting up Zookeeper as a registry center in Dubbo, including address and register mode settings.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   register-mode: instance

----------------------------------------

TITLE: Configuring Local Stub in Dubbo using Spring XML
DESCRIPTION: This snippet shows how to configure a local stub for a Dubbo consumer using Spring XML configuration. It demonstrates two ways to enable the stub: using a boolean flag or specifying the stub class name.

LANGUAGE: xml
CODE:
<dubbo:consumer interface="com.foo.BarService" stub="true" />

LANGUAGE: xml
CODE:
<dubbo:consumer interface="com.foo.BarService" stub="com.foo.BarServiceStub" />

----------------------------------------

TITLE: Docker with Custom Configuration
DESCRIPTION: Docker command to run Zookeeper with a mounted custom configuration file.

LANGUAGE: shell
CODE:
$ docker run --name some-zookeeper --restart always -e JVMFLAGS="-Dzookeeper.admin.enableServer=false" -d -v $(pwd)/zoo.cfg:/conf/zoo.cfg

----------------------------------------

TITLE: Starting Zookeeper Server
DESCRIPTION: Command to start Zookeeper in standalone mode using the server script.

LANGUAGE: shell
CODE:
bin/zkServer.sh start

----------------------------------------

TITLE: Adding Kryo Dependencies in Maven for Dubbo
DESCRIPTION: This XML snippet shows how to add the necessary dependencies for using Kryo serialization with Dubbo in a Maven project. It includes dubbo-serialization-kryo, kryo, and kryo-serializers.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
      <groupId>org.apache.dubbo.extensions</groupId>
      <artifactId>dubbo-serialization-kryo</artifactId>
      <version>1.0.1</version>
    </dependency>
    <dependency>
        <groupId>com.esotericsoftware</groupId>
        <artifactId>kryo</artifactId>
        <version>5.4.0</version>
    </dependency>
    <dependency>
        <groupId>de.javakaffee</groupId>
        <artifactId>kryo-serializers</artifactId>
        <version>0.45</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Load Balance in Dubbo XML
DESCRIPTION: XML configuration for setting load balance strategy at protocol and provider levels

LANGUAGE: xml
CODE:
<dubbo:protocol loadbalance="xxx" />
<!-- Default value settings, when <dubbo:protocol> does not configure loadbalance, this configuration is used -->
<dubbo:provider loadbalance="xxx" />

----------------------------------------

TITLE: Implementing PenetrateAttachmentSelector SPI in Java
DESCRIPTION: Shows how to implement the PenetrateAttachmentSelector SPI to support parameter transparency in Dubbo3. This allows specifying which parameters should be passed through to the next hop in the call chain.

LANGUAGE: java
CODE:
@SPI
public interface PenetrateAttachmentSelector {

    /**
     * Select some attachments to pass to the next hop.
     * These attachments can be fetched from {@link RpcContext#getServerAttachment()} or user-defined.
     *
     * @return attachments to pass to the next hop
     */
    Map<String, Object> select();

}

----------------------------------------

TITLE: Defining Dubbo Registry Implementations
DESCRIPTION: This snippet shows common registry implementations supported by Dubbo, including Nacos and Zookeeper.

LANGUAGE: properties
CODE:
# Common registry implementations supported by Dubbo
nacos=org.apache.dubbo.registry.nacos.NacosServiceDiscoveryFactory
zookeeper=org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryFactory

----------------------------------------

TITLE: Configuring Dubbo Consumer to Use Custom Protocol
DESCRIPTION: This application.properties file configures the Dubbo consumer to use the custom 'edubbo' protocol.

LANGUAGE: properties
CODE:
# Custom protocol
dubbo.consumer.protocol=edubbo

----------------------------------------

TITLE: Configuring Apache Dubbo Blog Section in YAML
DESCRIPTION: This YAML snippet defines the configuration for the Apache Dubbo blog section. It sets the title, link, and menu position for the blog in the website navigation.

LANGUAGE: yaml
CODE:
---
title: "Apache Dubbo Blog"
linkTitle: "Blog"
menu:
  main:
    weight: 3
---

----------------------------------------

TITLE: Defining UserProvider Interface in Java for Dubbo Server
DESCRIPTION: Java interface definition for the UserProvider service. It declares a single method GetUser1 that takes a userId as input and returns a User object.

LANGUAGE: java
CODE:
package org.apache.dubbo;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
//import org.apache.dubbo.rpc.filter.GenericFilter;

public interface UserProvider {
	User GetUser1(String userId);
}

----------------------------------------

TITLE: Registering Cluster Extension in Dubbo SPI
DESCRIPTION: Properties file configuration for registering a custom cluster implementation with Dubbo's SPI mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxCluster

----------------------------------------

TITLE: Importing Dubbo Erlang Dependency with Rebar
DESCRIPTION: Add the dubboerl dependency to your project's rebar.config file. This imports the Dubbo Erlang SDK from the Apache GitHub repository.

LANGUAGE: erlang
CODE:
{deps, [
    {dubboerl, {git, "https://github.com/apache/dubbo-erlang.git", {branch, "master"}}}
]}.

----------------------------------------

TITLE: Configuring Dubbo Serialization
DESCRIPTION: YAML configuration for specifying the serialization protocol in Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
  protocol:
    name: dubbo
    port: 20880
    serialization: fastjson2

----------------------------------------

TITLE: Defining AbstractClusterInvoker in Java
DESCRIPTION: Defines the AbstractClusterInvoker abstract class which implements ClusterInvoker. It provides clustering capabilities for multiple service providers.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.support;

public abstract class AbstractClusterInvoker<T> implements ClusterInvoker<T> {
    
    protected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,
                                       LoadBalance loadbalance) throws RpcException;
}

----------------------------------------

TITLE: Configuring Custom Method Mappings for Memcached
DESCRIPTION: XML configuration showing how to map custom interface methods to standard Memcached operations (get, set, delete) using Spring p namespace.

LANGUAGE: xml
CODE:
<dubbo:reference id="cache" interface="com.foo.CacheService" url="memcached://10.20.153.10:11211" p:set="putFoo" p:get="getFoo" p:delete="removeFoo" />

----------------------------------------

TITLE: Receiving application/xml request in Java
DESCRIPTION: Java method demonstrating how to receive and process an application/xml request in a Triple service.

LANGUAGE: java
CODE:
@Override
public ServerResponse greetXml(User user) {
    System.out.println(user.getUsername());
    System.out.println(user.getLocation());
    return new ServerResponse("Server Received xml.");
}

----------------------------------------

TITLE: Configuring HTTPS Listener in Dubbo-go-pixiu YAML
DESCRIPTION: This YAML configuration snippet shows how to set up an HTTPS listener in Dubbo-go-pixiu. It includes the listener name, protocol type, domains, and certificate directory for HTTPS support.

LANGUAGE: yaml
CODE:
  listeners:
    - name: "net/http"
      protocol_type: "HTTPS"
      address:
        socket_address:
          domains:
            - "sample.domain.com"
            - "sample.domain-1.com"
            - "sample.domain-2.com"
          certs_dir: $PROJECT_DIR/cert

----------------------------------------

TITLE: Configuring Maven Profile for GraalVM Native Image
DESCRIPTION: Maven profile configuration that includes required plugins for GraalVM native image compilation including maven-compiler-plugin, spring-boot-maven-plugin, native-maven-plugin, and dubbo-maven-plugin.

LANGUAGE: xml
CODE:
    <profiles>
        <profile>
            <id>native</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <release>17</release>
                            <fork>true</fork>
                            <verbose>true</verbose>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>process-aot</id>
                                <goals>
                                    <goal>process-aot</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.graalvm.buildtools</groupId>
                        <artifactId>native-maven-plugin</artifactId>
                        <version>0.9.25</version>
                        <configuration>
                            <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                            <metadataRepository>
                                <enabled>true</enabled>
                            </metadataRepository>
                            <requiredVersion>22.3</requiredVersion>
                        </configuration>
                        <executions>
                            <execution>
                                <id>add-reachability-metadata</id>
                                <goals>
                                    <goal>add-reachability-metadata</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.dubbo</groupId>
                        <artifactId>dubbo-maven-plugin</artifactId>
                        <version>${dubbo.version}</version>
                        <configuration>
                            <mainClass>com.example.nativedemo.NativeDemoApplication</mainClass>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>process-sources</phase>
                                <goals>
                                    <goal>dubbo-process-aot</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

----------------------------------------

TITLE: Configuring Preferred Registry in XML
DESCRIPTION: This XML snippet shows how to configure a preferred registry in Dubbo. It sets the 'preferred' attribute to true for one registry, which will receive all traffic.

LANGUAGE: xml
CODE:
<dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" preferred="true"/>
<dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" />

----------------------------------------

TITLE: Configuring Hugo Demo Page Front Matter
DESCRIPTION: Front matter configuration for a Hugo demo page template that sets the title, layout using a custom shortcode block, and table of contents visibility.

LANGUAGE: markdown
CODE:
---
title: "Demo"
layout: "shortcodes/blocks/demo-en"
toc_hide: true
---

LANGUAGE: hugo
CODE:
{{< blocks/demo-en >}}

----------------------------------------

TITLE: Extracting Nacos Binary Package in Shell
DESCRIPTION: Commands to unzip the downloaded Nacos binary package and navigate to the bin directory.

LANGUAGE: shell
CODE:
unzip nacos-server-$version.zip
cd nacos/bin
#tar -xvf nacos-server-$version.tar.gz

----------------------------------------

TITLE: Kubernetes Deployment
DESCRIPTION: Command to deploy Zookeeper in a Kubernetes cluster using Dubbo community configuration.

LANGUAGE: shell
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/zookeeper.yaml

----------------------------------------

TITLE: Configuring TLS for Dubbo Consumer in Java
DESCRIPTION: This code snippet shows how to configure TLS for a Dubbo consumer. It sets up the necessary trust certificates and, in case of mutual TLS, the client's own certificates.

LANGUAGE: java
CODE:
if (!mutualTls) {}
    sslConfig.setClientTrustCertCollectionPath(args[0]);
} else {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
    sslConfig.setClientKeyCertChainPath(args[1]);
    sslConfig.setClientPrivateKeyPath(args[2]);
}

----------------------------------------

TITLE: Adding Etcd Dependency for Dubbo Metadata Center
DESCRIPTION: XML configuration to add the Etcd dependency required for Etcd implementation of Dubbo's metadata center.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-metadata-report-etcd</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Defining LoadBalance Interface in Java
DESCRIPTION: Defines the LoadBalance interface for selecting a single target provider from multiple service providers for invocation.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster;

public interface LoadBalance {
    
    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;
}

----------------------------------------

TITLE: Deploying Dubbo Containers to Kubernetes
DESCRIPTION: Commands to deploy Dubbo provider and consumer containers to the Kubernetes cluster using kubectl.

LANGUAGE: bash
CODE:
cd ./dubbo-samples-xds-provider/src/main/resources/k8s
kubectl apply -f Deployment.yml
kubectl apply -f Service.yml
cd ../../../../../dubbo-samples-xds-consumer/src/main/resources/k8s
kubectl apply -f Deployment.yml
cd ../../../../../

----------------------------------------

TITLE: Referencing Simple Registry in Dubbo XML Configuration
DESCRIPTION: XML configurations to reference the Simple Registry in Dubbo services. It shows three different ways to specify the registry address, including using group and version.

LANGUAGE: XML
CODE:
<dubbo:registry address="127.0.0.1:9090" />

LANGUAGE: XML
CODE:
<dubbo:service interface="org.apache.dubbo.registry.RegistryService" group="simple" version="1.0.0" ... >

LANGUAGE: XML
CODE:
<dubbo:registry address="127.0.0.1:9090" group="simple" version="1.0.0" />

----------------------------------------

TITLE: OpenTelemetry OTLP Collector Integration
DESCRIPTION: Maven dependency configuration for integrating Dubbo tracing with OpenTelemetry OTLP collector

LANGUAGE: yml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>
    <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Navigating to Example Directory
DESCRIPTION: Command to change directory to the streaming example source code.

LANGUAGE: shell
CODE:
cd dubbo-samples/2-advanced/dubbo-samples-triple-streaming

----------------------------------------

TITLE: Loading Extension Classes in Dubbo SPI
DESCRIPTION: Code snippet showing how Dubbo loads extension classes from configuration files.

LANGUAGE: Java
CODE:
private Map<String, Class<?>> loadExtensionClasses() {
    cacheDefaultExtensionName();
    Map<String, Class<?>> extensionClasses = new HashMap<>();
    for (LoadingStrategy strategy : strategies) {
        loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
        loadDirectory(extensionClasses, strategy.directory(), type.getName().replace("org.apache", "com.alibaba"), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
    }
    return extensionClasses;
}

----------------------------------------

TITLE: Querying All Monitoring Metrics in Dubbo using Telnet
DESCRIPTION: This snippet demonstrates how to query all monitoring metrics in Dubbo using the 'metrics_default' command via telnet. It shows the command usage and example output.

LANGUAGE: bash
CODE:
> telnet 127.0.0.1 22222
> metrics_default

----------------------------------------

TITLE: Defining Configuration Center Extension Points in Java
DESCRIPTION: Core interfaces that define Dubbo's configuration center extension mechanism. These interfaces must be implemented by configuration center providers.

LANGUAGE: java
CODE:
org.apache.dubbo.configcenter.DynamicConfigurationFactory
org.apache.dubbo.configcenter.DynamicConfiguration

----------------------------------------

TITLE: Setting Default Protocol to Hessian in Dubbo XML Configuration
DESCRIPTION: XML configuration for setting Hessian as the default protocol for all providers in Dubbo.

LANGUAGE: XML
CODE:
<dubbo:provider protocol="hessian" />

----------------------------------------

TITLE: VM-based Dubbo Admin Installation
DESCRIPTION: Steps for installing and running Dubbo Admin on a virtual machine environment.

LANGUAGE: shell
CODE:
curl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -

LANGUAGE: shell
CODE:
ln -s dubbo-admin-0.1.0/bin/dubbo-admin /usr/local/bin/dubbo-admin

LANGUAGE: shell
CODE:
dubbo-admin run -f override-configuration.yml

----------------------------------------

TITLE: Maven Project Structure for Merger Extension
DESCRIPTION: Directory structure showing the required file organization for implementing a custom Merger extension.

LANGUAGE: text
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxMerger.java (implements Merger interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.rpc.cluster.Merger (plain text file, content: xxx=com.xxx.XxxMerger)

----------------------------------------

TITLE: Testing Grpc Service with Curl Commands in Shell
DESCRIPTION: These curl commands test the Grpc service through the Dubbo-go-pixiu gateway. The first command performs a GET request, while the second command sends a POST request with JSON data.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser

LANGUAGE: shell
CODE:
curl http://127.0.0.1:8881/api/v1/provider.UserProvider/GetUser -X POST -d '{"userId":1}'

----------------------------------------

TITLE: Loading Extension Classes in Dubbo SPI
DESCRIPTION: Code snippet showing how Dubbo loads extension classes from configuration files.

LANGUAGE: Java
CODE:
private Map<String, Class<?>> loadExtensionClasses() {
    cacheDefaultExtensionName();
    Map<String, Class<?>> extensionClasses = new HashMap<>();
    for (LoadingStrategy strategy : strategies) {
        loadDirectory(extensionClasses, strategy.directory(), type.getName(), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
        loadDirectory(extensionClasses, strategy.directory(), type.getName().replace("org.apache", "com.alibaba"), strategy.preferExtensionClassLoader(), strategy.overridden(), strategy.excludedPackages());
    }
    return extensionClasses;
}

----------------------------------------

TITLE: Generating Stack Trace for Dubbo Stream Closure Exception
DESCRIPTION: Command to generate a stack trace log file for diagnosing stream closure exceptions in Dubbo applications. This helps in analyzing the cause of the exception.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring YAML Front Matter for Dubbo Java Documentation
DESCRIPTION: This YAML-like front matter defines metadata and rendering instructions for a documentation page about using Dubbo with Java. It specifies the build rendering method, description, manual link reference, title, content type, and weight for ordering.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Java
manualLinkRelref: ./#java
title: Java
type: docs
weight: 10

----------------------------------------

TITLE: Cloning Dubbo Samples Repository
DESCRIPTION: Command to clone the Dubbo samples repository containing the streaming example code.

LANGUAGE: shell
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git

----------------------------------------

TITLE: Configuring Memcached Client Reference
DESCRIPTION: XML configurations showing different ways to reference Memcached service in Dubbo client, including group-based reference, direct point-to-point connection, and custom interface usage.

LANGUAGE: xml
CODE:
<dubbo:reference id="cache" interface="java.util.Map" group="member" />

LANGUAGE: xml
CODE:
<dubbo:reference id="cache" interface="java.util.Map" url="memcached://10.20.153.10:11211" />

LANGUAGE: xml
CODE:
<dubbo:reference id="cache" interface="com.foo.CacheService" url="memcached://10.20.153.10:11211" />

----------------------------------------

TITLE: Configuring Authentication for Zookeeper Registry in YAML
DESCRIPTION: Demonstrates how to configure authentication credentials for a Zookeeper registry in a YAML configuration file.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   register-mode: instance # Set this value for new users
   username: hello
   password: 1234

----------------------------------------

TITLE: Enabling Centralized Metadata Registration in Properties
DESCRIPTION: Properties configuration to enable centralized metadata registration in Dubbo 3, even in introspection mode. Sets metadata type to 'local' and enables metadata reporting.

LANGUAGE: properties
CODE:
dubbo.application.metadata-type=local
dubbo.metadata-report.report-metadata=true

----------------------------------------

TITLE: Configuring Zookeeper Registry in XML
DESCRIPTION: Illustrates how to configure Zookeeper as a registry center in an XML configuration file for a Dubbo application.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" register-mode="instance" />

----------------------------------------

TITLE: Listing Root Node Contents
DESCRIPTION: Command and output for viewing the root node contents in Zookeeper.

LANGUAGE: shell
CODE:
[zkshell: 8] ls /
[zookeeper]

----------------------------------------

TITLE: Installing Dubbo Protocol Buffer Dependencies
DESCRIPTION: Installing required Protocol Buffer and Dubbo ES code generation tools and dependencies.

LANGUAGE: shell
CODE:
npm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo

----------------------------------------

TITLE: Generating Thread Dump using jstack in Bash
DESCRIPTION: This command generates a thread dump for a specific process ID and saves it to a file named jstack.log. It's useful for analyzing thread-related issues in Java applications.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Syncing Cloned Repository with Remote for Pull Requests in Git
DESCRIPTION: A series of Git commands to sync a cloned repository with the remote Apache Dubbo repository before submitting a pull request. This ensures the pull request is clean and up-to-date.

LANGUAGE: bash
CODE:
git remote add upstream git@github.com:apache/dubbo.git
git fetch upstream
git rebase upstream/master
git checkout -b your_awesome_patch
... add some work
git push origin your_awesome_patch

----------------------------------------

TITLE: Configuring Method Name Mappings for Redis in XML
DESCRIPTION: This snippet demonstrates how to configure method name mappings when the interface methods don't match standard Redis method names. It uses Dubbo's XML configuration with Spring's p namespace for property injection.

LANGUAGE: xml
CODE:
<dubbo:reference id="cache" interface="com.foo.CacheService" url="redis://10.20.153.10:6379" p:set="putFoo" p:get="getFoo" p:delete="removeFoo" />

----------------------------------------

TITLE: Configuring Dubbo ProtocolConfig for Timeout Interruption
DESCRIPTION: This snippet demonstrates how to configure the Dubbo ProtocolConfig to use the 'all2' thread dispatch strategy, which enables timeout interruption.

LANGUAGE: java
CODE:
@Bean
public ProtocolConfig protocolConfig() {
    ProtocolConfig protocolConfig = new ProtocolConfig();
    protocolConfig.setName("dubbo");
    protocolConfig.setPort(-1);
    protocolConfig.setTransporter("netty4");
    protocolConfig.setThreadpool("fixed");
    // 设置线程分发策略
    protocolConfig.setDispatcher("all2");
    protocolConfig.setThreads(200);
    return protocolConfig;
}

----------------------------------------

TITLE: Generating Stack Trace for Dubbo Service Debugging
DESCRIPTION: This command uses the 'jstack' tool to capture a stack trace of a specific process ID and save it to a log file. It's useful for diagnosing issues within the Dubbo service, particularly related to filter validation errors.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Using Help Command in Dubbo CLI
DESCRIPTION: Demonstrates how to use the help command to list all available commands or get detailed usage information for a specific command.

LANGUAGE: text
CODE:
// List all commands
dubbo>help

// List specific usage of a single command
dubbo>help online
+--------------+----------------------------------------------------------------------------------+
| COMMAND NAME | online                                                                           |
+--------------+----------------------------------------------------------------------------------+
|      EXAMPLE | online dubbo                                                                     |
|              | online xx.xx.xxx.service                                                         |
+--------------+----------------------------------------------------------------------------------+

dubbo>

----------------------------------------

TITLE: Using Help Command in Dubbo CLI
DESCRIPTION: Demonstrates how to use the help command to list all available commands or get detailed usage information for a specific command.

LANGUAGE: text
CODE:
// List all commands
dubbo>help

// List specific usage of a single command
dubbo>help online
+--------------+----------------------------------------------------------------------------------+
| COMMAND NAME | online                                                                           |
+--------------+----------------------------------------------------------------------------------+
|      EXAMPLE | online dubbo                                                                     |
|              | online xx.xx.xxx.service                                                         |
+--------------+----------------------------------------------------------------------------------+

dubbo>

----------------------------------------

TITLE: Defining Protobuf Service for Dubbo
DESCRIPTION: Define a Protobuf service for use with Dubbo, including service methods and message types.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.dubbo.demo";
option java_outer_classname = "DemoServiceProto";
option objc_class_prefix = "DEMOSRV";

package demoservice;

// The demo service definition.
service DemoService {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

----------------------------------------

TITLE: Custom OpenTelemetry Tracer Configuration
DESCRIPTION: Custom dependency configuration for using OpenTelemetry as tracer with Zipkin exporter

LANGUAGE: yml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-observability-starter</artifactId>
    <version>${version}</version>
</dependency>
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-otel</artifactId>
    <version>${version}</version>
</dependency>
<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-zipkin</artifactId>
    <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Setting Global Default Timeout in YAML Configuration
DESCRIPTION: Configures the global default timeout to 5 seconds for all Dubbo services using YAML configuration.

LANGUAGE: yaml
CODE:
dubbo:
  provider:
    timeout: 5000

----------------------------------------

TITLE: UserSpecifiedAddressUtil Class for Setting Dubbo Service Address
DESCRIPTION: Java utility class used to set the specified address for Dubbo service invocations, with a static method to set the Address object.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.specifyaddress;

public class UserSpecifiedAddressUtil {
    
    public static void setAddress(Address address) { ... }
    
}

----------------------------------------

TITLE: Defining Pixiu Configuration for Grpc NetWorkFilter in YAML
DESCRIPTION: This YAML configuration defines the static resources for Dubbo-go-pixiu, including listeners, filters, and clusters. It sets up an HTTP listener that uses a Grpc proxy filter to route requests to a Grpc server.

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8881
      filter_chains:
        filters:
          - name: dgp.filter.httpconnectionmanager
            config:
              route_config:
                routes:
                  - match:
                      prefix: "/api/v1"
                    route:
                      cluster: "test-grpc"
                      cluster_not_found_response_code: 505
              http_filters:
                - name: dgp.filter.http.grpcproxy
                  config:
                    path: /mnt/d/WorkSpace/GoLandProjects/dubbo-go-pixiu/samples/http/grpc/proto
                - name: dgp.filter.http.response
                  config:
              server_name: "test-http-grpc"
              generate_request_id: false
      config:
        idle_timeout: 5s
        read_timeout: 5s
        write_timeout: 5s
  clusters:
    - name: "test-grpc"
      lb_policy: "RoundRobin"
      endpoints:
        - socket_address:
            address: 127.0.0.1
            port: 50001
            protocol_type: "GRPC"
  timeout_config:
    connect_timeout: "5s"
    request_timeout: "10s"
  shutdown_config:
    timeout: "60s"
    step_timeout: "10s"
    reject_policy: "immediacy"

----------------------------------------

TITLE: Using Telnet Commands in Dubbo
DESCRIPTION: Shell commands for connecting to a Dubbo server via telnet and executing a custom telnet command. This demonstrates how to interact with the telnet interface.

LANGUAGE: sh
CODE:
telnet 127.0.0.1 20880
dubbo> xxx args

----------------------------------------

TITLE: Handling Plain Text in Triple Protocol
DESCRIPTION: Demonstrates processing of text/plain requests with charset support including ASCII, UTF-8, and UTF-16.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetString HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: text/plain; charset=UTF-8
Content-Length: 6
Accept: application/json
World!

LANGUAGE: java
CODE:
    public ServerResponse greetString(String world){
        System.out.println("Hello:" + world);
        return new ServerResponse("Server Received url form.");
    }

----------------------------------------

TITLE: Navigate to Example Directory
DESCRIPTION: Change directory to the Triple-gRPC example location.

LANGUAGE: shell
CODE:
cd dubbo-samples/2-advanced/dubbo-samples-triple-grpc

----------------------------------------

TITLE: GraalVM Native Image Maven Plugin Configuration
DESCRIPTION: Maven plugin configuration for GraalVM native-image compilation, including build arguments and initialization settings

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.graalvm.nativeimage</groupId>
    <artifactId>native-image-maven-plugin</artifactId>
    <version>21.0.0.2</version>
    <executions>
        <execution>
            <goals>
                <goal>native-image</goal>
            </goals>
            <phase>package</phase>
        </execution>
    </executions>
    <configuration>
        <skip>false</skip>
        <imageName>demo-native-provider</imageName>
        <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
        <buildArgs>
            --no-fallback
            --initialize-at-build-time=org.slf4j.MDC
            --initialize-at-build-time=org.slf4j.LoggerFactory
            --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder
            --initialize-at-build-time=org.apache.log4j.helpers.Loader
            --initialize-at-build-time=org.apache.log4j.Logger
            --initialize-at-build-time=org.apache.log4j.helpers.LogLog
            --initialize-at-build-time=org.apache.log4j.LogManager
            --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent
            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory
            --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter
            --initialize-at-build-time=org.eclipse.collections.api.factory.Sets
            --initialize-at-run-time=io.netty.channel.epoll.Epoll
            --initialize-at-run-time=io.netty.channel.epoll.Native
            --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop
            --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray
            --initialize-at-run-time=io.netty.channel.DefaultFileRegion
            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray
            --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop
            --initialize-at-run-time=io.netty.channel.kqueue.Native
            --initialize-at-run-time=io.netty.channel.unix.Errors
            --initialize-at-run-time=io.netty.channel.unix.IovArray
            --initialize-at-run-time=io.netty.channel.unix.Limits
            --initialize-at-run-time=io.netty.channel.unix.Socket
            --initialize-at-run-time=io.netty.channel.ChannelHandlerMask
            --report-unsupported-elements-at-runtime
            --allow-incomplete-classpath
            --enable-url-protocols=http
            -H:+ReportExceptionStackTraces
        </buildArgs>
    </configuration>
</plugin>

----------------------------------------

TITLE: Configuring Kubernetes Annotations for Prometheus Scraping
DESCRIPTION: Kubernetes deployment annotations that enable Prometheus to automatically discover and scrape metrics from Dubbo pods. Specifies the scrape path, port, and enablement flag.

LANGUAGE: yaml
CODE:
annotations:
   prometheus.io/scrape: "true"
   prometheus.io/path: /management/prometheus
   prometheus.io/port: "22222"

----------------------------------------

TITLE: Configuring Conditional Service Routing in YAML
DESCRIPTION: Example of conditional routing rules that forward calls to the greet method to addresses with port 8888.

LANGUAGE: yaml
CODE:
configVersion: v1.0
scope: "service"
force: false
enabled: true
key: "org.apache.dubbo.sample.tri.Greeter"
conditions:
  - method=greet => port=8888

----------------------------------------

TITLE: Adding Dubbo Metrics Dependency in Maven
DESCRIPTION: XML dependency configuration to enable metric collection in a Spring Boot project using Dubbo.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-observability-starter</artifactId>
    <version>3.2.0</version>
</dependency>

----------------------------------------

TITLE: Using DubboBootstrap API for Dubbo Configuration
DESCRIPTION: Java code example showing how to use the new DubboBootstrap API introduced in Dubbo 2.7.5 for configuring and starting Dubbo services, including protocol, SSL, and registry settings.

LANGUAGE: java
CODE:
ProtocolConfig protocolConfig = new ProtocolConfig("grpc");
protocolConfig.setSslEnabled(true);

SslConfig sslConfig = new SslConfig();
sslConfig.setXxxCert(...);

DubboBootstrap bootstrap = DubboBootstrap.getInstance();
bootstrap.application(new ApplicationConfig("ssl-provider"))
  .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
  .protocol(protocolConfig)
  .ssl(sslConfig);

ServiceConfig<GreetingsService> service1 = new ServiceConfig<>();
ServiceConfig<GreetingsService> service2 = new ServiceConfig<>();

bootstrap.service(service1).service(service2);
bootstrap.start();

----------------------------------------

TITLE: Configuring Dubbo Service Properties
DESCRIPTION: YAML configuration for Dubbo service including application name, registry settings, and protocol configuration

LANGUAGE: yaml
CODE:
dubbo:
    application:
        name: gateway-apisix-triple
    registry:
        address: nacos://${nacos.address:127.0.0.1}:8848
        username: nacos
        password: nacos
    protocol:
        name: tri
        port: 50052

----------------------------------------

TITLE: Configuring Auto Trust Serialize Class in Properties
DESCRIPTION: Shows how to configure auto trust serialize class settings using properties file.

LANGUAGE: properties
CODE:
dubbo.application.auto-trust-serialize-class=true
dubbo.application.trust-serialize-class-level=3

----------------------------------------

TITLE: Creating a Dubbo-go Application Template
DESCRIPTION: Command to create a new Dubbo-go application template in the current directory using dubbogo-cli.

LANGUAGE: shell
CODE:
dubbogo-cli newApp .

----------------------------------------

TITLE: Extended Logger Interface Methods - Java
DESCRIPTION: New warn-level methods added to ErrorTypeAwareLogger interface for error code support in Dubbo 3.1

LANGUAGE: java
CODE:
void warn(String code, String cause, String extendedInformation, String msg);
void warn(String code, String cause, String extendedInformation, String msg, Throwable e);

----------------------------------------

TITLE: Creating and Switching Kubernetes Namespace
DESCRIPTION: Commands to create a Kubernetes namespace for the Dubbo demo and switch to it using kubens.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/dubbo-samples-xds/deploy/Namespace.yml
kubens dubbo-demo

----------------------------------------

TITLE: Defining Filter SPI Interface in Dubbo
DESCRIPTION: SPI interface extending BaseFilter for post-location interception, scoped at module level.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

@SPI(scope = ExtensionScope.MODULE)
public interface Filter extends BaseFilter {
}

----------------------------------------

TITLE: Registering Dispatcher Extension in Properties File
DESCRIPTION: Properties file configuration for registering the custom dispatcher implementation with Dubbo's extension system.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxDispatcher

----------------------------------------

TITLE: Starting Skywalking OAP Server
DESCRIPTION: Shell command to start the Skywalking OAP server backend.

LANGUAGE: shell
CODE:
bash startup.sh

----------------------------------------

TITLE: Navigating to Dubbo Sample Directory
DESCRIPTION: Command to change directory to the specific Dubbo sample project.

LANGUAGE: shell
CODE:
cd dubbo-samples/2-advanced/dubbo-samples-dubbo

----------------------------------------

TITLE: Configuring Dynamic Proxy in Dubbo XML
DESCRIPTION: XML configuration for specifying the proxy factory to use in Dubbo. It shows how to set the proxy at the protocol level and the provider level.

LANGUAGE: xml
CODE:
<dubbo:protocol proxy="xxx" />
<!-- Default configuration, used when the <dubbo:protocol> does not configure the proxy attribute -->
<dubbo:provider proxy="xxx" />

----------------------------------------

TITLE: Defining Filter SPI Interface in Dubbo
DESCRIPTION: SPI interface extending BaseFilter for post-location interception, scoped at module level.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

@SPI(scope = ExtensionScope.MODULE)
public interface Filter extends BaseFilter {
}

----------------------------------------

TITLE: Configuring HTTP Listener in Dubbo-go-pixiu YAML
DESCRIPTION: This YAML configuration snippet demonstrates how to set up an HTTP listener in Dubbo-go-pixiu. It specifies the listener name, protocol type, address, and port for HTTP listening.

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP" # Indicates the HTTP Listener is being introduced
      address:
        socket_address:
          address: "0.0.0.0" # Address
          port: 8883 # Port

----------------------------------------

TITLE: Registering Pixiu Filter Plugin in Go
DESCRIPTION: Plugin registration code that enables the filter to be recognized by the Pixiu system. Includes plugin type definition and factory creation.

LANGUAGE: go
CODE:
func init() {
   filter.RegisterHttpFilter(&Plugin{})
}

type Plugin struct {
}

func (p *Plugin) Kind() string {
   return "dgp.filters.demo"
}

func (p *Plugin) CreateFilterFactory() (filter.HttpFilterFactory, error) {
	return &DemoFilterFactory{conf: &Config{}}, nil
}

----------------------------------------

TITLE: Referencing Dubbo Configuration Bean Class
DESCRIPTION: Example of the core Dubbo configuration class that should not be modified and needs to be properly loaded.

LANGUAGE: java
CODE:
org.apache.dubbo.config.spring.context.DubboConfigBeanInitializer

----------------------------------------

TITLE: Applying Virtual Service Definitions in Istio
DESCRIPTION: YAML configuration defining virtual services that route traffic to v1 versions of each microservice in the Bookinfo application.

LANGUAGE: yaml
CODE:
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - details
    http:
    - route:
      - destination:
          host: details
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - productpage
    http:
    - route:
      - destination:
          host: productpage
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - ratings
    http:
    - route:
      - destination:
          host: ratings
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - reviews
    http:
    - route:
      - destination:
          host: reviews
          subset: v1

----------------------------------------

TITLE: Implementing Dubbo Server in Rust
DESCRIPTION: Creates a Dubbo server implementation in Rust, including the main function to start the server and the implementation of the Greeter service defined in the IDL.

LANGUAGE: rust
CODE:
#[tokio::main]
async fn main() {
    register_server(GreeterServerImpl {
        name: "greeter".to_string(),
    });

    Dubbo::new()
        .with_config({
            let r = RootConfig::new();
            match r.load() {
                Ok(config) => config,
                Err(_err) => panic!("err: {:?}", _err),
            }
        })
        .start()
        .await;
}

#[allow(dead_code)]
#[derive(Default, Clone)]
struct GreeterServerImpl {
    name: String,
}

#[async_trait]
impl Greeter for GreeterServerImpl {
    async fn greet(
        &self,
        request: Request<GreeterRequest>,
    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {
        println!("GreeterServer::greet {:?}", request.metadata);

        Ok(Response::new(GreeterReply {
            message: "hello, dubbo-rust".to_string(),
        }))
    }
}

----------------------------------------

TITLE: Starting Seata-Server via Shell Command
DESCRIPTION: Shell command to start the Seata-Server with options for host, port, and store mode.

LANGUAGE: shell
CODE:
sh seata-server.sh -p 8091 -h 127.0.0.1 -m file

----------------------------------------

TITLE: Configuring Apache Maven Settings
DESCRIPTION: XML configuration for Maven settings.xml to enable Apache repository publishing and GPG signing

LANGUAGE: xml
CODE:
<settings>
...
 <servers>
   <!-- To publish a snapshot of some part of Maven -->
   <server>
     <id>apache.snapshots.https</id>
     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>
     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>
   </server>
   <!-- To stage a release of some part of Maven -->
   <server>
     <id>apache.releases.https</id>
     <username> <!-- YOUR APACHE LDAP USERNAME --> </username>
     <password> <!-- YOUR APACHE LDAP PASSWORD (encrypted) --> </password>
   </server>
  ...
     <!-- gpg passphrase used when generating key -->
    <server>
     <id>gpg.passphrase</id>
     <passphrase><!-- yourKeyPassword --></passphrase>
   </server>
 </servers>
</settings>

----------------------------------------

TITLE: Weight Parameter Configuration in Dubbo YAML
DESCRIPTION: YAML configuration showing the weight parameter setting for traffic distribution.

LANGUAGE: yaml
CODE:
parameters:
  weight: 25

----------------------------------------

TITLE: Verifying Dubbo-go Application Deployment
DESCRIPTION: Check the deployment status and logs of the Dubbo-go application in the Kubernetes cluster.

LANGUAGE: bash
CODE:
$ kubectl get deployment 
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
dubbo-go-server-v1   1/1     1            1           26s

$ kubectl get svc 
NAME              TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)     AGE
dubbo-go-server   ClusterIP   192.168.216.253   <none>        20000/TCP   70s

----------------------------------------

TITLE: Adding Etcd Registry Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the Etcd registry dependency to a Maven project. It specifies the group ID, artifact ID, and version of the Dubbo Etcd registry module.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-registry-etcd</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Installing Dubbo Stack and Admin Components
DESCRIPTION: Command to install the Dubbo Stack and Admin components using the dubboctl CLI tool. This is a prerequisite step for setting up the Dubbo governance system.

LANGUAGE: shell
CODE:
dubboctl install dubbo-stack

----------------------------------------

TITLE: Implementing Dubbo Service Consumer Application
DESCRIPTION: Java application that loads Spring XML configuration and consumes the Dubbo service.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring/dubbo-demo-consumer.xml");
        context.start();
        GreetingsService greetingsService = (GreetingsService) context.getBean("greetingsService");

        String message = greetingsService.sayHi("dubbo");
        System.out.println("Receive result ======> " + message);
        System.in.read();
        System.exit(0);
    }
}

----------------------------------------

TITLE: Installing Dubbo Python with Zookeeper Support
DESCRIPTION: Commands to clone the Dubbo-python repository and install it with Zookeeper support

LANGUAGE: shell
CODE:
git clone https://github.com/apache/dubbo-python.git
cd dubbo-python && pip install .[zookeeper]

----------------------------------------

TITLE: Defining OrderService Interface in Java
DESCRIPTION: Defines the OrderService interface with a method to create an order for a user and commodity.

LANGUAGE: java
CODE:
public interface OrderService {

    /**
     * create order
     */
    Order create(String userId, String commodityCode, int orderCount);
}

----------------------------------------

TITLE: Custom LoadBalance Implementation
DESCRIPTION: Example implementation of a custom LoadBalance for Dubbo

LANGUAGE: java
CODE:
package com.dubbo.spi.demo.consumer;
public class DemoLoadBalance implements LoadBalance {
    @Override
    public <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {
        System.out.println("DemoLoadBalance: Select the first invoker...");
        return invokers.get(0);
    }
}

----------------------------------------

TITLE: Configuring Dubbo Server for REST Protocol
DESCRIPTION: YAML configuration for a Dubbo server, setting up REST protocol and instance-based registry mode.

LANGUAGE: yaml
CODE:
dubbo:
  registry:
    address: nacos://127.0.0.1:8848
    register-mode: instance
  protocol:
    name: rest
    port: 8090

----------------------------------------

TITLE: Running Dubbo-Go Client
DESCRIPTION: This command runs the Dubbo-Go client application to test the connection with the server.

LANGUAGE: shell
CODE:
$ go run ./go-client/cmd/client.go
hello world

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Implements the DemoService interface with logging and RPC context information.

LANGUAGE: java
CODE:
import org.apache.dubbo.rpc.RpcContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.concurrent.CompletableFuture;

public class DemoServiceImpl implements DemoService {
    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);

    @Override
    public String sayHello(String name) {
        logger.info("Hello " + name + ", request from consumer: " + RpcContext.getServiceContext().getRemoteAddress());
        return "Hello " + name + ", response from provider: " + RpcContext.getServiceContext().getLocalAddress();
    }

    @Override
    public CompletableFuture<String> sayHelloAsync(String name) {
        return null;
    }

}

----------------------------------------

TITLE: Checking Grafana Service Status in Kubernetes
DESCRIPTION: This command checks the status of the Grafana service in the dubbo-system namespace of a Kubernetes cluster.

LANGUAGE: sh
CODE:
$ kubectl -n dubbo-system get svc grafana

----------------------------------------

TITLE: Querying Dubbo Service Information via QoS
DESCRIPTION: Example of using Dubbo QoS to query service information on a local machine.

LANGUAGE: bash
CODE:
➜ telnet 127.0.0.1 22222
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
   ___   __  __ ___   ___   ____     
  / _ \ / / / // _ ) / _ ) / __ \  
 / // // /_/ // _  |/ _  |/ /_/ /    
/____/ \____//____//____/ \____/   
dubbo>ls
As Provider side:
+------------------------------------------------------------------------------------+---------------------+
|                                Provider Service Name                               |         PUB         |
+------------------------------------------------------------------------------------+---------------------+
|                    org.apache.dubbo.samples.api.GreetingsService                   |nacos-A(Y)/nacos-I(Y)|
+------------------------------------------------------------------------------------+---------------------+
|DubboInternal - first-dubbo-provider/org.apache.dubbo.metadata.MetadataService:1.0.0|                     |
+------------------------------------------------------------------------------------+---------------------+
As Consumer side:
+---------------------+---+
|Consumer Service Name|NUM|
+---------------------+---+

dubbo>

----------------------------------------

TITLE: Configuring Dubbo Method Arguments in XML
DESCRIPTION: Example of configuring method arguments for a Dubbo service using XML. This allows specifying characteristics of method parameters, such as marking a parameter as a callback interface.

LANGUAGE: xml
CODE:
<dubbo:method name="findXxx" timeout="3000" retries="2">
   <dubbo:argument index="0" callback="true" />
</dubbo:method>

----------------------------------------

TITLE: Importing Dubbo Dashboards into Existing Grafana Installation
DESCRIPTION: This shell script automates the process of importing Dubbo dashboards into an existing Grafana installation. It fetches dashboard JSON files from Grafana.com and imports them using the Grafana API.

LANGUAGE: sh
CODE:
# Address of Grafana
GRAFANA_HOST="http://localhost:3000"
# Login credentials, if authentication is used
GRAFANA_CRED="USER:PASSWORD"
# The name of the Prometheus data source to use
GRAFANA_DATASOURCE="Prometheus"
# The version of Dubbo to deploy
VERSION=3.2.0
# Import all Dubbo dashboards
for DASHBOARD in 18469 4701; do
    #REVISION="$(curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions -s | jq ".items[] | select(.description | contains(\"${VERSION}\")) | .revision")"
    REVISION=1
    curl -s https://grafana.com/api/dashboards/${DASHBOARD}/revisions/${REVISION}/download > /tmp/dashboard.json
    echo "Importing $(cat /tmp/dashboard.json | jq -r '.title') (revision ${REVISION}, id ${DASHBOARD})..."
    curl -s -k -u "$GRAFANA_CRED" -XPOST \
        -H "Accept: application/json" \
        -H "Content-Type: application/json" \
        -d "{\"dashboard\":$(cat /tmp/dashboard.json),\"overwrite\":true, \
            \"inputs\":[{\"name\":\"DS_PROMETHEUS\",\"type\":\"datasource\", \
            \"pluginId\":\"prometheus\",\"value\":\"$GRAFANA_DATASOURCE\"}]}" \
        $GRAFANA_HOST/api/dashboards/import
    echo -e "\nDone\n"
done

----------------------------------------

TITLE: Registering Custom ExtensionFactory in Dubbo
DESCRIPTION: Example of registering a custom ExtensionFactory implementation in Dubbo's SPI configuration file. This properties file maps the extension name to the full class name.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxExtensionFactory

----------------------------------------

TITLE: Accessing QoS via HTTP
DESCRIPTION: Example of using curl to interact with Dubbo QoS HTTP interface for service management.

LANGUAGE: shell
CODE:
$ curl -i http://localhost:22222/online?service=org.apache.dubbo.demo.provider.DemoService

----------------------------------------

TITLE: Database Configuration in Spring Boot
DESCRIPTION: YAML configuration for database connection settings in Spring Boot application

LANGUAGE: yaml
CODE:
url: jdbc:mysql://127.0.0.1:3306/seata?serverTimezone=Asia/Shanghai&useSSL=false&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useOldAliasMetadataBehavior=true
username: root
password: 123456

----------------------------------------

TITLE: Installing Dubbo Admin Components with Helm (Shell)
DESCRIPTION: Helm commands for adding repositories and installing individual components of Dubbo Admin.

LANGUAGE: shell
CODE:
helm repo add https://charts.bitnami.com/bitnami
helm repo add https://prometheus-community.github.io/helm-charts
helm repo add https://grafana.github.io/helm-charts
helm repo add https://apache.jfrog.io/artifactory/skywalking-helm
helm repo add https://openzipkin.github.io/zipkin

helm install zookeeper bitnami/zookeeper -n dubbo-system

helm install prometheus prometheus-community/prometheus -n dubbo-system

helm install grafana grafana/grafana -n dubbo-system

helm install skywalking skywalking/skywalking -n dubbo-system

helm install zipkin openzipkin/zipkin -n dubbo-system

helm ls -n dubbo-system ；kubectl get pods -n dubbo-system --output wide

----------------------------------------

TITLE: User-Based Routing Configuration
DESCRIPTION: YAML configuration for routing traffic based on user identity, specifically routing user 'jason' to v2 of the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Configuring HTTP Proxy in Dubbo-go-pixiu YAML
DESCRIPTION: This YAML configuration sets up Pixiu to listen for HTTP requests on port 8888 and forward them to a cluster named 'user' at 127.0.0.1:1314. It uses the httpconnectionmanager filter and httpproxy for request handling.

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - name: "net/http"
      protocol_type: "HTTP"
      address:
        socket_address:
          address: "0.0.0.0"
          port: 8888
      filter_chains:
          filters:
            - name: dgp.filter.httpconnectionmanager
              config:
                route_config:
                  routes:
                    - match:
                        prefix: "/user"
                      route:
                        cluster: "user"
                        cluster_not_found_response_code: 505
                http_filters:
                  - name: dgp.filter.http.httpproxy
                    config:

  clusters:
    - name: "user"
      lb_policy: "random" 
      endpoints:
        - id: 1
          socket_address:
            address: 127.0.0.1
            port: 1314

----------------------------------------

TITLE: Configuring Method-level Settings for Dubbo Service
DESCRIPTION: Shows how to configure method-level settings for a Dubbo service, including timeout and retry attempts for specific methods.

LANGUAGE: java
CODE:
...
 
// 方法级配置
List<MethodConfig> methods = new ArrayList<MethodConfig>();
MethodConfig method = new MethodConfig();
method.setName("sayHello");
method.setTimeout(10000);
method.setRetries(0);
methods.add(method);
 
// 引用远程服务
ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏
...
reference.setMethods(methods); // 设置方法级配置
 
...

----------------------------------------

TITLE: User-Based Routing Configuration
DESCRIPTION: YAML configuration for routing traffic based on user identity, specifically routing user 'jason' to v2 of the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Service-Level Health Check in Go
DESCRIPTION: Performs a health check for a specific service with checks disabled using the Health service client.

LANGUAGE: go
CODE:
svc, err := health.NewHealth(cli)
svc.Check(context.Background(), &health.HealthCheckRequest{Service: "greet.GreetService"}, client.WithCheck(false))

----------------------------------------

TITLE: Registering Random Load Balance in Dubbo-go
DESCRIPTION: This snippet shows how a specific load balancing implementation (random) is registered in Dubbo-go's extension system. It uses the init function to call the SetLoadbalance method, registering the factory function for the random load balancer.

LANGUAGE: go
CODE:
package random

import (
	"math/rand"
)

import (
	"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/common/extension"
	"dubbo.apache.org/dubbo-go/v3/protocol"
)

func init() {
	extension.SetLoadbalance(constant.LoadBalanceKeyRandom, NewRandomLoadBalance)
}

----------------------------------------

TITLE: Implementing Asynchronous Provider with AsyncContext in Java
DESCRIPTION: Shows how to implement an asynchronous Dubbo provider using AsyncContext for thread switching and result writing.

LANGUAGE: Java
CODE:
public class AsyncServiceImpl implements AsyncService {
    public String sayHello(String name) {
        final AsyncContext asyncContext = RpcContext.startAsync();
        new Thread(() -> {
            asyncContext.signalContextSwitch();
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            asyncContext.write("Hello " + name + ", response from provider.");
        }).start();
        return null;
    }
}

----------------------------------------

TITLE: Configuring Dubbo-go Application Settings
DESCRIPTION: YAML configuration for setting up the Dubbo-go application name in dubbogo.yml file.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: my-dubbogo-app

----------------------------------------

TITLE: Registering Shutdown Hook in Spring's AbstractApplicationContext
DESCRIPTION: This Java method from Spring's AbstractApplicationContext class registers a shutdown hook with the JVM to perform cleanup operations when the application is terminating.

LANGUAGE: java
CODE:
@Override
public void registerShutdownHook() {
    if (this.shutdownHook == null) {
        // No shutdown hook registered yet.
        this.shutdownHook = new Thread() {
            @Override
            public void run() {
                synchronized (startupShutdownMonitor) {
                    doClose();
                }
            }
        };
        Runtime.getRuntime().addShutdownHook(this.shutdownHook);
    }
}

----------------------------------------

TITLE: 配置非动态管理模式的 Dubbo 注册中心 (XML)
DESCRIPTION: 通过 XML 配置将 Dubbo 注册中心标识为非动态管理模式。这可以通过设置 dynamic 属性为 false 来实现，有两种等效的写法。

LANGUAGE: xml
CODE:
<dubbo:registry address="10.20.141.150:9090" dynamic="false" />

LANGUAGE: xml
CODE:
<dubbo:registry address="10.20.141.150:9090?dynamic=false" />

----------------------------------------

TITLE: Configuring YAML Frontmatter for Dubbo Admin Documentation
DESCRIPTION: YAML frontmatter configuration that specifies how the Admin documentation page should be rendered and organized within the documentation structure. It sets the page type, weight, title and rendering options.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Admin
manualLinkRelref: ./#admin
title: Admin
type: docs
weight: 60

----------------------------------------

TITLE: Publishing Dubbo Service Definitions
DESCRIPTION: Maven command to publish Dubbo service definitions to a remote repository.

LANGUAGE: shell
CODE:
mvn clean deploy

----------------------------------------

TITLE: Defining Blocked Classes for Serialization
DESCRIPTION: Demonstrates how to define blocked classes for serialization in a resource file.

LANGUAGE: properties
CODE:
# security/serialize.blockedlist
io.dubbo.block

----------------------------------------

TITLE: Java Logger Factory Implementation
DESCRIPTION: Core Java implementation showing how Dubbo's LoggerFactory initializes and selects logging implementations.

LANGUAGE: java
CODE:
public class ChannelHandlerDispatcher implements ChannelHandler {
    private static final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(ChannelHandlerDispatcher.class);

----------------------------------------

TITLE: Dubbo Consumer Properties Configuration
DESCRIPTION: Properties configuration for Dubbo consumer including mesh enablement and timeouts

LANGUAGE: properties
CODE:
dubbo.application.name=dubbo-samples-mesh-consumer
dubbo.application.metadataServicePort=20885
dubbo.registry.address=N/A
dubbo.protocol.name=tri
dubbo.protocol.port=20880
dubbo.consumer.timeout=30000
dubbo.application.qosEnable=true
dubbo.application.qosAcceptForeignIp=true
dubbo.consumer.meshEnable=true

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Example of defining a simple Dubbo service using Java interface

LANGUAGE: java
CODE:
public interface GreetingsService {
    String sayHi(String name);
}

----------------------------------------

TITLE: Pixiu Route Configuration
DESCRIPTION: Example of configuring HTTP request routing to specific clusters based on URL path prefix

LANGUAGE: yaml
CODE:
            - name: dgp.filter.httpconnectionmanager
              config:
                route_config:
                  routes:
                    - match:
                        prefix: "/user"
                      route:
                        cluster: "user"

----------------------------------------

TITLE: Implementing DefaultMetricsCollector in Java
DESCRIPTION: Implementation of the DefaultMetricsCollector class, which stores and manages various metrics.

LANGUAGE: java
CODE:
public class DefaultMetricsCollector implements MetricsCollector {
    private Boolean collectEnabled = false;
    private final List<MetricsListener> listeners = new ArrayList<>();
    private final ApplicationModel applicationModel;
    private final String applicationName;

    private final Map<MethodMetric, AtomicLong> totalRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> succeedRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> failedRequests = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> processingRequests = new ConcurrentHashMap<>();

    private final Map<MethodMetric, AtomicLong> lastRT = new ConcurrentHashMap<>();
    private final Map<MethodMetric, LongAccumulator> minRT = new ConcurrentHashMap<>();
    private final Map<MethodMetric, LongAccumulator> maxRT = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> avgRT = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> totalRT = new ConcurrentHashMap<>();
    private final Map<MethodMetric, AtomicLong> rtCount = new ConcurrentHashMap<>();
 }

----------------------------------------

TITLE: Setting Tags in Dubbo Consumer
DESCRIPTION: Shows how to set traffic tags in the Dubbo consumer before making requests to ensure traffic routing to providers with matching tags.

LANGUAGE: java
CODE:
RpcContext.getContext().setAttachment(Constants.TAG_KEY, "gray");

----------------------------------------

TITLE: Registering Custom Transporter Implementation
DESCRIPTION: Properties file configuration for registering the custom transport implementation with Dubbo's SPI mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxTransporter

----------------------------------------

TITLE: Kubernetes VirtualService Definition for Version-based Routing
DESCRIPTION: YAML configuration showing virtual service definitions that route traffic to v1 versions of Bookinfo microservices. The configuration specifies routing rules for details, productpage, ratings, and reviews services.

LANGUAGE: yaml
CODE:
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - details
    http:
    - route:
      - destination:
          host: details
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - productpage
    http:
    - route:
      - destination:
          host: productpage
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - ratings
    http:
    - route:
      - destination:
          host: ratings
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - reviews
    http:
    - route:
      - destination:
          host: reviews
          subset: v1

----------------------------------------

TITLE: Kubernetes VirtualService Definition for Version-based Routing
DESCRIPTION: YAML configuration showing virtual service definitions that route traffic to v1 versions of Bookinfo microservices. The configuration specifies routing rules for details, productpage, ratings, and reviews services.

LANGUAGE: yaml
CODE:
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - details
    http:
    - route:
      - destination:
          host: details
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - productpage
    http:
    - route:
      - destination:
          host: productpage
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - ratings
    http:
    - route:
      - destination:
          host: ratings
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - reviews
    http:
    - route:
      - destination:
          host: reviews
          subset: v1

----------------------------------------

TITLE: Registering Invoker Listener Implementation
DESCRIPTION: Properties file configuration for registering the custom InvokerListener implementation with Dubbo's SPI mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxInvokerListener

----------------------------------------

TITLE: Implementing Resource Cache Map in Dubbo xDS
DESCRIPTION: Defines a concurrent hash map to store resource cache where key represents a single resource and T is the return result of different DS protocols.

LANGUAGE: java
CODE:
protected Map<String, T> resourcesMap = new ConcurrentHashMap<>();

----------------------------------------

TITLE: Machine-Specific Access Log Configuration YAML
DESCRIPTION: YAML configuration for enabling access logging on specific machine addresses

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
configs:
  - match
     address:
       oneof:
        - wildcard: "{ip}:*"
    side: provider
    parameters:
      accesslog: true

----------------------------------------

TITLE: Adding Hystrix Dependency in Maven
DESCRIPTION: Maven dependency configuration to include spring-cloud-starter-netflix-hystrix in the project.

LANGUAGE: xml
CODE:
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
            <version>1.4.4.RELEASE</version>
        </dependency>

----------------------------------------

TITLE: Configuring Lazy Connection for Dubbo Protocol in XML
DESCRIPTION: This XML snippet demonstrates how to enable lazy connection for the Dubbo protocol. It sets the 'lazy' attribute to 'true' in the dubbo:protocol element.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" lazy="true" />

----------------------------------------

TITLE: Configuring Timeout Rule in YAML
DESCRIPTION: YAML configuration for adjusting the timeout setting of UserService to 2000ms on the provider side. This configuration is applied through Dubbo Admin's Dynamic Configuration interface.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
configs:
  - side: provider
    parameters:
      timeout: 2000

----------------------------------------

TITLE: Configuring YAML Frontmatter for Java Documentation
DESCRIPTION: YAML configuration block that defines documentation linking parameters for Java content. Specifies render type as link, sets description and title to 'Java', includes manual link reference, and assigns a weight of 10.

LANGUAGE: yaml
CODE:
_build:\n    render: link\ndescription: Java\nmanualLinkRelref: ./#java\ntitle: Java\ntype: docs\nweight: 10

----------------------------------------

TITLE: Adding Avro Dependencies in Maven
DESCRIPTION: Maven dependencies required for implementing Avro serialization in Dubbo, including both the Dubbo Avro serialization extension and the core Avro library.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
      <groupId>org.apache.dubbo.extensions</groupId>
      <artifactId>dubbo-serialization-avro</artifactId>
      <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro</artifactId>
        <version>1.11.1</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Registering Services to Multiple Registries in Dubbo XML Configuration
DESCRIPTION: Configures a Dubbo application to register the same service to multiple registries (Hangzhou and Qingdao) using XML configuration. This allows services deployed in one location to be accessed from another location.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="world"  />
    <!-- 多注册中心配置 -->
    <dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" />
    <dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" default="false" />
    <!-- 向多个注册中心注册 -->
    <dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="hangzhouRegistry,qingdaoRegistry" />
</beans>

----------------------------------------

TITLE: Adding Sentinel Dubbo Adapter Dependency in Maven
DESCRIPTION: Maven dependency configuration to include Sentinel Dubbo Adapter in the project for enabling service protection features.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>com.alibaba.csp</groupId>
    <artifactId>sentinel-dubbo-adapter</artifactId>
    <version>x.y.z</version>
</dependency>

----------------------------------------

TITLE: Defining Dubbo Service Interface with Protocol Buffers
DESCRIPTION: Protocol buffer definition for a simple UserProvider service with a SayHello RPC method that accepts HelloRequest and returns User.

LANGUAGE: protobuf
CODE:
package org.apache.dubbo.quickstart.samples;

service UserProvider {
  rpc SayHello (HelloRequest) returns (User) {}
}

message HelloRequest {
  string name = 1;
}

----------------------------------------

TITLE: Importing Dubbo-go Built-in Modules
DESCRIPTION: This code snippet demonstrates how to import all built-in modules in Dubbo-go. It uses a blank import of the imports package, which triggers the initialization of all included modules.

LANGUAGE: go
CODE:
import (
	_ "dubbo.apache.org/dubbo-go/v3/imports"
)

----------------------------------------

TITLE: Configuring Timeout Rule in YAML
DESCRIPTION: YAML configuration for adjusting the timeout setting of UserService to 2000ms on the provider side. This configuration is applied through Dubbo Admin's Dynamic Configuration interface.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
configs:
  - side: provider
    parameters:
      timeout: 2000

----------------------------------------

TITLE: Tomcat Server Await Method Implementation in Java
DESCRIPTION: This snippet shows the await method from Tomcat's Server class, which keeps the server thread alive by continuously checking a flag in a loop.

LANGUAGE: java
CODE:
public void await() {
    // ...
    if( port==-1 ) {
        try {
            awaitThread = Thread.currentThread();
            while(!stopAwait) {
                try {
                    Thread.sleep( 10000 );
                } catch( InterruptedException ex ) {
                    // continue and check the flag
                }
            }
        } finally {
            awaitThread = null;
        }
        return;
    }
    // ...
}

----------------------------------------

TITLE: Running Dubbo-Go Client
DESCRIPTION: Shell command to start the Dubbo-Go client application that connects to the server.

LANGUAGE: shell
CODE:
$ go run ./go-client/cmd/client.go
hello world

----------------------------------------

TITLE: Configuring Direct Connection via XML
DESCRIPTION: XML configuration method to specify a direct connection URL for a Dubbo service reference.

LANGUAGE: xml
CODE:
<dubbo:reference id="xxxService" interface="com.alibaba.xxx.XxxService" url="dubbo://localhost:20890" />

----------------------------------------

TITLE: Multiple Reads Using read Method in Dubbo Python
DESCRIPTION: Shows how to perform multiple reads using the read method, handling timeout and EOF scenarios in server streaming or bidirectional streaming modes.

LANGUAGE: python
CODE:
while True:
    i = stream.read(timeout=0.5)
    if i is dubbo.classes.EOF:
        break
    elif i is None:
        print("No message received")
        continue
    print(f"Received response: {i.message}")

----------------------------------------

TITLE: Maven Dependencies for SLF4J with Log4j2
DESCRIPTION: Required Maven dependencies for using SLF4J with Log4j2 logging implementation.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.30</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-slf4j-impl</artifactId>
    <version>2.14.1</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-core</artifactId>
    <version>2.14.1</version>
</dependency>
<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-api</artifactId>
    <version>2.14.1</version>
</dependency>

----------------------------------------

TITLE: Receiving text/plain request in Java
DESCRIPTION: Java method demonstrating how to receive and process a text/plain request in a Triple service.

LANGUAGE: java
CODE:
public ServerResponse greetUrlForm(String world){
    System.out.println("Hello:"+ world);
    return new ServerResponse("Server Received url form.");
}

----------------------------------------

TITLE: Dubbo URL Constructor
DESCRIPTION: Java code snippet showing the constructor for Dubbo's URL class, demonstrating how it parses and stores different components of a URL.

LANGUAGE: java
CODE:
public URL(String protocol, String username, String password, String host, int port, String path, Map<String, String> parameters) {
   if ((username == null || username.length() == 0) 
         && password != null && password.length() > 0) {
      throw new IllegalArgumentException("Invalid url, password without username!");
   }
   this.protocol = protocol;
   this.username = username;
   this.password = password;
   this.host = host;
   this.port = (port < 0 ? 0 : port);
   this.path = path;
   // trim the beginning "/"
   while(path != null && path.startsWith("/")) {
       path = path.substring(1);
   }
   if (parameters == null) {
       parameters = new HashMap<String, String>();
   } else {
       parameters = new HashMap<String, String>(parameters);
   }
   this.parameters = Collections.unmodifiableMap(parameters);
}

----------------------------------------

TITLE: Exception Processor Implementation in Dubbo Gateway
DESCRIPTION: Implementation of exception handling and retry logic in the Dubbo gateway for handling request decoding and processing errors.

LANGUAGE: java
CODE:
void handleRequest(final ExchangeChannel channel, Request req) throws RemotingException {
    if (req.error != null) {
        String exPs = System.getProperty(EXCEPTION_PROCESSOR_KEY);
        if (StringUtils.isNotBlank(exPs)) {
            ExtensionLoader<ExceptionProcessor> extensionLoader = channel.getUrl().getOrDefaultFrameworkModel().getExtensionLoader(ExceptionProcessor.class);
            ExceptionProcessor expProcessor = extensionLoader.getOrDefaultExtension(exPs);
            boolean handleError = expProcessor.shouldHandleError(error);
            if (handleError) {
                msg = Optional.ofNullable(expProcessor.wrapAndHandleException(channel, req)).orElse(msg);
            }
        }
    }
    res.setErrorMessage("Fail to decode request due to: " + msg);
    res.setStatus(Response.BAD_REQUEST);
    channel.send(res);
}

----------------------------------------

TITLE: Adding Etcd Configuration Center Dependency
DESCRIPTION: Maven dependency configuration for integrating Etcd configuration center with Dubbo framework.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-configcenter-etcd</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Service Authentication in Dubbo Provider
DESCRIPTION: Example of configuring service authentication on the provider side using annotations. Sets service.auth and param.sign parameters to enable authentication and parameter validation.

LANGUAGE: java
CODE:
@Service(parameters = {"service.auth","true","param.sign","true"})
public class AuthDemoServiceImpl implements AuthService {
}

----------------------------------------

TITLE: Loading Application Configs in ConfigManager
DESCRIPTION: The loadConfigs method in ConfigManager that loads various types of configurations, including application, monitor, metrics, protocol, registry, and metadata report configs.

LANGUAGE: Java
CODE:
@Override
    public void loadConfigs() {
        loadConfigsOfTypeFromProps(ApplicationConfig.class);
        loadConfigsOfTypeFromProps(MonitorConfig.class);
        loadConfigsOfTypeFromProps(MetricsConfig.class);
        loadConfigsOfTypeFromProps(ProtocolConfig.class);
        loadConfigsOfTypeFromProps(RegistryConfig.class);
        loadConfigsOfTypeFromProps(MetadataReportConfig.class);
        refreshAll();
        checkConfigs();
        if (StringUtils.isBlank(applicationModel.getModelName())) {
            applicationModel.setModelName(applicationModel.getApplicationName());
        }
    }

----------------------------------------

TITLE: Configuring Dubbo Service Definition
DESCRIPTION: XML configuration for defining Dubbo service including application name, registry address, protocol and service interface declaration.

LANGUAGE: xml
CODE:
<beans /* ...... * />

    <dubbo:application name="test-dubbo-service"/>
    <dubbo:registry address="${dubbo.registry.address}"/>
    <dubbo:protocol name="dubbo" port="20888"/>

    <dubbo:service timeout="10000" interface="org.apache.shenyu.examples.dubbo.api.service.DubboTestService" ref="dubboTestService"/>

</beans>

----------------------------------------

TITLE: Unconventional URL Examples
DESCRIPTION: Shows examples of URLs that don't follow the typical format but are still considered valid URLs in certain contexts.

LANGUAGE: plaintext
CODE:
192.168.1.3:20880
file:///home/user1/router.js?type=script
file://home/user1/router.js?type=script<br>
file:///D:/1/router.js?type=script
file:/D:/1/router.js?type=script
/home/user1/router.js?type=script
home/user1/router.js?type=script

----------------------------------------

TITLE: Configuring Dubbo Async Notifications in XML
DESCRIPTION: XML configuration example showing how to set up event notifications (onreturn, onthrow) for a Dubbo consumer reference. Demonstrates configuration of callback methods for successful returns and exceptions.

LANGUAGE: xml
CODE:
<bean id="demoCallback" class="com.alibaba.dubbo.samples.notify.impl.NotifyImpl" />

<dubbo:reference id="demoService" check="false" interface="com.alibaba.dubbo.samples.notify.api.DemoService" version="1.0.0" group="cn">
    <dubbo:method name="sayHello" onreturn="demoCallback.onreturn" onthrow="demoCallback.onthrow"/>
</dubbo:reference>

----------------------------------------

TITLE: Deploying Pixiu Gateway and Demo Services
DESCRIPTION: Kubernetes command to deploy the Pixiu gateway demo including triple-servers, gateway, and Nacos server.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/dubbogo/triple-pixiu-demo/master/deploy/pixiu-triple-demo.yml

----------------------------------------

TITLE: Implementing Dubbo Service with ShenYu Annotations
DESCRIPTION: Java implementation of Dubbo service interface with ShenYu annotation for service registration.

LANGUAGE: java
CODE:
/**
 * DubboTestServiceImpl.
 */
@Service("dubboTestService")
public class DubboTestServiceImpl implements DubboTestService {
    
    @Override
    @ShenyuDubboClient(path = "/findById", desc = "Query by Id")
    public DubboTest findById(final String id) {
        return new DubboTest(id, "hello world shenyu Apache, findById");
    }

    //......
}

----------------------------------------

TITLE: Implementing Dubbo Async Callback Handler in Java
DESCRIPTION: Java implementation of a notification handler class that processes asynchronous callbacks from Dubbo service calls. Includes methods for handling successful returns and exceptions.

LANGUAGE: java
CODE:
public class NotifyImpl implements Notify{

    public Map<Integer, String> ret = new HashMap<Integer, String>();
    
    public void onreturn(String name, int id) {
        ret.put(id, name);
        System.out.println("onreturn: " + name);
    }

    public void onthrow(Throwable ex, String name, int id) {
        System.out.println("onthrow: " + name);
    }
}

----------------------------------------

TITLE: Caching Activate Annotations in Java
DESCRIPTION: Code snippet showing how @Activate annotations are cached during extension class loading in the loadClass() method of ExtensionLoader.

LANGUAGE: Java
CODE:
if (clazz.isAnnotationPresent(Adaptive.class)) {
    cacheAdaptiveClass(clazz, overridden);
} else if (isWrapperClass(clazz)) {
    cacheWrapperClass(clazz);
} else {
    if (StringUtils.isEmpty(name)) {
        name = findAnnotationName(clazz);
        if (name.length() == 0) {
            throw new IllegalStateException("No such extension name for the class " + clazz.getName() + " in the config " + resourceURL);
        }
    }

    String[] names = NAME_SEPARATOR.split(name);
    if (ArrayUtils.isNotEmpty(names)) {
        cacheActivateClass(clazz, names[0]);
        for (String n : names) {
            cacheName(clazz, n);
            saveInExtensionClass(extensionClasses, clazz, n, overridden);
        }
    }
}

----------------------------------------

TITLE: Configuring ApplicationConfig Bean in Java
DESCRIPTION: Example of creating an ApplicationConfig bean in Java code, which can be replaced by external configuration.

LANGUAGE: Java
CODE:
@Bean
public ApplicationConfig applicationConfig() {
    ApplicationConfig applicationConfig = new ApplicationConfig();
    applicationConfig.setName("dubbo-annotation-consumer");
    return applicationConfig;
}

----------------------------------------

TITLE: Configuring Direct Connection via Java Annotation
DESCRIPTION: Uses @DubboReference annotation to specify a direct connection URL for a service reference, bypassing the registry.

LANGUAGE: java
CODE:
@DubboReference(url="tri://localhost:50051")
private XxxService xxxService

----------------------------------------

TITLE: 使用静态变量示例（Java）
DESCRIPTION: 展示了如何在Java中使用静态变量来存储和访问全局对象。这种方法在Dubbo早期版本中被广泛使用，但在多实例设计中需要改进。

LANGUAGE: java
CODE:
public class Test {
    public static Object obj;
}
Test.obj = xxx;

----------------------------------------

TITLE: Running Go Client
DESCRIPTION: Shell command to start the Go client implementation for testing communication with Java server.

LANGUAGE: shell
CODE:
go run go/go-client/cmd/client.go

----------------------------------------

TITLE: Implementing Custom StartupProbe in Java
DESCRIPTION: Example of implementing the StartupProbe interface to create a custom startup detection mechanism in Dubbo.

LANGUAGE: java
CODE:
package com.xxx;

public class XxxStartupProbe implements StartupProbe {
    
    public boolean check() {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Dubbo Maven Plugin for Native Image
DESCRIPTION: Maven plugin configuration for Dubbo native image processing with AOT compilation

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-maven-plugin</artifactId>
    <version>${dubbo.version}</version>
    <configuration>
        <mainClass>org.apache.dubbo.registry.consumer.NativeDemoConsumerRegistryApplication</mainClass>
    </configuration>
    <executions>
        <execution>
            <phase>process-sources</phase>
            <goals>
                <goal>dubbo-process-aot</goal>
            </goals>
        </execution>
    </executions>
</plugin>

----------------------------------------

TITLE: Configuring Registry in Dubbo XML
DESCRIPTION: XML configuration for defining and referencing a registry in Dubbo. Shows how to set up a registry and associate it with services or providers.

LANGUAGE: xml
CODE:
<dubbo:registry id="xxx1" address="xxx://ip:port" />
<dubbo:service registry="xxx1" />
<dubbo:provider registry="xxx1" />

----------------------------------------

TITLE: Pixiu Cluster Configuration
DESCRIPTION: Configuration for defining service clusters with load balancing and endpoint specifications

LANGUAGE: yaml
CODE:
  clusters:
    - name: "user"
      lb_policy: "RoundRobin"
      endpoints:
        - id: 1
          socket_address:
            address: 127.0.0.1
            port: 1314

----------------------------------------

TITLE: Configuring Dubbo Reference with Environment Parameters
DESCRIPTION: Example of using @DubboReference annotation to specify routing targets for cross-network communication at the method level.

LANGUAGE: java
CODE:
@DubboReference(check = false, parameters = {"ENV_SHANGHAI", "ALL"}) //all means all methods, which can be specified separately
private DemoService demoService;

----------------------------------------

TITLE: Implementing Custom Dubbo Client
DESCRIPTION: Example implementation of a custom Client interface extending AbstractClient to handle client-side network communications.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.transport.transporter.AbstractClient;
 
public class XxxClient extends AbstractClient {
    public XxxServer(URL url, ChannelHandler handler) throws RemotingException{
        super(url, handler);
    }
    protected void doOpen() throws Throwable {
        // ...
    }
    protected void doClose() throws Throwable {
        // ...
    }
    protected void doConnect() throws Throwable {
        // ...
    }
    public Channel getChannel() {
        // ...
    }
}

----------------------------------------

TITLE: Starting Dubbo Service Provider with Skywalking Agent
DESCRIPTION: Command to start the Dubbo service provider with Skywalking agent configuration.

LANGUAGE: bash
CODE:
java -jar -javaagent:$AGENT_PATH/skywalking-agent.jar -Dskywalking.agent.application_code=dubbo-provider -Dskywalking.collector.servers=localhost:10800 dubbo-provider/target/dubbo-provider.jar

----------------------------------------

TITLE: Installing Istio Components via Helm
DESCRIPTION: Commands to install Istio base CRD and istiod components using Helm package manager. This includes adding the Istio Helm repository, creating the istio-system namespace, and installing required Istio components.

LANGUAGE: bash
CODE:
$ helm repo add istio https://istio-release.storage.googleapis.com/charts
$ kubectl create namespace istio-system
$ helm install istio-base istio/base -n istio-system
$ helm install istiod istio/istiod --namespace istio-system

----------------------------------------

TITLE: Handling XML Data in Triple Protocol
DESCRIPTION: Shows XML request processing using application/xml content type with standard XML encoding.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetXml HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/xml
Content-Length: 86
Accept: application/xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User>
    <username>JohnDoe</username>
    <location>New York</location>
</User>

LANGUAGE: java
CODE:
    @Override
public ServerResponse greetXml(User user) {
        System.out.println(user.getUsername());
        System.out.println(user.getLocation());
        return new ServerResponse("Server Received xml.");
        }

----------------------------------------

TITLE: Adding Sentinel Dependencies in Maven
DESCRIPTION: Maven dependency configuration required to integrate Sentinel with Dubbo applications. Includes both the core adapter and optional HTTP transport module.

LANGUAGE: xml
CODE:
<dependency>
	<groupId>com.alibaba.csp</groupId>
	<artifactId>sentinel-apache-dubbo3-adapter</artifactId>
	<version>1.8.6</version>
</dependency>
<!-- optional -->
<dependency>
	<groupId>com.alibaba.csp</groupId>
	<artifactId>sentinel-transport-simple-http</artifactId>
	<version>1.8.6</version>
</dependency>

----------------------------------------

TITLE: Configuring Native Image Maven Plugin
DESCRIPTION: Maven plugin configuration for GraalVM native-image with build arguments including initialization settings and runtime options

LANGUAGE: xml
CODE:
<plugin>
  <groupId>org.graalvm.nativeimage</groupId>
  <artifactId>native-image-maven-plugin</artifactId>
  <version>21.0.0.2</version>
  <executions>
    <execution>
      <goals>
        <goal>native-image</goal>
      </goals>
      <phase>package</phase>
    </execution>
  </executions>
  <configuration>
    <skip>false</skip>
    <imageName>demo-native-provider</imageName>
    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
    <buildArgs>
      --no-fallback
      --initialize-at-build-time=org.slf4j.MDC
      --initialize-at-run-time=io.netty.channel.unix.Socket
      --report-unsupported-elements-at-runtime
      --allow-incomplete-classpath
      --enable-url-protocols=http
      -H:+ReportExceptionStackTraces
    </buildArgs>
  </configuration>
</plugin>

----------------------------------------

TITLE: 使用静态变量示例（Java）
DESCRIPTION: 展示了如何在Java中使用静态变量来存储和访问全局对象。这种方法在Dubbo早期版本中被广泛使用，但在多实例设计中需要改进。

LANGUAGE: java
CODE:
public class Test {
    public static Object obj;
}
Test.obj = xxx;

----------------------------------------

TITLE: Creating Adaptive Extension Lifecycle
DESCRIPTION: Method handling the complete lifecycle of creating an adaptive extension including initialization and injection

LANGUAGE: java
CODE:
private T createAdaptiveExtension() {
    try {
        T instance = (T) getAdaptiveExtensionClass().newInstance();
        instance = postProcessBeforeInitialization(instance, null);
        instance = injectExtension(instance);
        instance = postProcessAfterInitialization(instance, null);
        initExtension(instance);
        return instance;
    } catch (Exception e) {
        throw new IllegalStateException("Can't create adaptive extension " + type + ", cause: " + e.getMessage(), e);
    }
}

----------------------------------------

TITLE: Creating UNDO_LOG Table for Seata in SQL
DESCRIPTION: This SQL script creates the UNDO_LOG table required for Seata's AT mode.

LANGUAGE: sql
CODE:
CREATE TABLE `undo_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `branch_id` bigint(20) NOT NULL,
  `xid` varchar(100) NOT NULL,
  `context` varchar(128) NOT NULL,
  `rollback_info` longblob NOT NULL,
  `log_status` int(11) NOT NULL,
  `log_created` datetime NOT NULL,
  `log_modified` datetime NOT NULL,
  `ext` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Creating ServiceConfig Instance
DESCRIPTION: Basic instantiation of a ServiceConfig object for Dubbo service configuration.

LANGUAGE: java
CODE:
ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();

----------------------------------------

TITLE: Traditional Spring Configuration with Hystrix
DESCRIPTION: Configuration class for traditional Spring applications showing AOP and Hystrix command aspect setup.

LANGUAGE: java
CODE:
    @Configuration
    @EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.annotation.action")
    @PropertySource("classpath:/spring/dubbo-consumer.properties")
    @ComponentScan(value = {"com.alibaba.dubbo.samples.annotation.action"})
    @EnableAspectJAutoProxy
    static public class ConsumerConfiguration {

        @Bean
        public HystrixCommandAspect hystrixCommandAspect() {
            return new HystrixCommandAspect();
        }
    }

----------------------------------------

TITLE: Loading Dubbo-Go Configuration in Go
DESCRIPTION: Go code snippet demonstrating how to load the Dubbo-Go configuration using dubbo.Load().

LANGUAGE: go
CODE:
func main() {
	//...
	if err := dubbo.Load(); err != nil {
		//...
	}
	//...
}

----------------------------------------

TITLE: Handling Multipart Form Data in Triple Protocol
DESCRIPTION: Demonstrates how to handle multipart/form-data requests with multiple content types including plain text, JSON, and binary data. Shows both request format and server-side handling.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetPojo HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: multipart/form-data; boundary=example-part-boundary
Accept: application/json
--example-part-boundary
Content-Disposition: form-data; name="username"
Content-Type: text/plain
LuYue
--example-part-boundary
Content-Disposition: form-data; name="userdetail"
Content-Type: application/json
{
    "location":"beijing",
    "username":"LuYue"
}
--example-part-boundary
Content-Disposition: form-data; name="userimg";filename="user.jpeg"
Content-Type: image/jpeg
<binary image data>
--example-part-boundary--

LANGUAGE: java
CODE:
    @Override
    public ServerResponse greetPojo(String username, User user, byte[] attachment) {
        //LuYue
        System.out.println(username); 
        //user.name=Luyue;user.location=beijing
        System.out.println(user); 
        //<binary image data>
        System.out.println(new String(attachment, StandardCharsets.UTF_8)); 
        return new ServerResponse("Server Received:" + username);
    }

----------------------------------------

TITLE: YAML Frontmatter Definition
DESCRIPTION: YAML frontmatter block defining metadata for a documentation page about core concepts

LANGUAGE: yaml
CODE:
type: docs
title: "Core Concepts"
linkTitle: "Core Concepts"
weight: 2
description: ""

----------------------------------------

TITLE: Initializing Spring Boot Dubbo Consumer Application in Java
DESCRIPTION: This snippet shows the main class of a Dubbo consumer application using Spring Boot. It demonstrates the minimal setup required to start the application.

LANGUAGE: java
CODE:
@SpringBootApplication(scanBasePackages = "com.alibaba.boot.dubbo.demo.consumer.controller")
public class DubboConsumerDemo {

    public static void main(String[] args) {
        SpringApplication.run(DubboConsumerDemo.class,args);
    }

}

----------------------------------------

TITLE: Using Callback Service in Java Consumer
DESCRIPTION: Example of how to use the callback service in a Java consumer, adding a listener to receive callbacks.

LANGUAGE: java
CODE:
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:consumer.xml");
context.start();

CallbackService callbackService = (CallbackService) context.getBean("callbackService");

callbackService.addListener("foo.bar", new CallbackListener(){
    public void changed(String msg) {
        System.out.println("callback1:" + msg);
    }
});

----------------------------------------

TITLE: Using Callback Service in Java Consumer
DESCRIPTION: Example of how to use the callback service in a Java consumer, adding a listener to receive callbacks.

LANGUAGE: java
CODE:
ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("classpath:consumer.xml");
context.start();

CallbackService callbackService = (CallbackService) context.getBean("callbackService");

callbackService.addListener("foo.bar", new CallbackListener(){
    public void changed(String msg) {
        System.out.println("callback1:" + msg);
    }
});

----------------------------------------

TITLE: Setting Redis Key Prefix in Dubbo Registry
DESCRIPTION: XML configuration to set the prefix for Redis keys in Dubbo registry. The default prefix is 'dubbo'.

LANGUAGE: XML
CODE:
<dubbo:registry group="dubbo" />

----------------------------------------

TITLE: Configuring Serialization in Dubbo XML
DESCRIPTION: XML configuration for specifying serialization methods in Dubbo protocols and providers.

LANGUAGE: xml
CODE:
<!-- Serialization method for the protocol -->
<dubbo:protocol serialization="xxx" />
<!-- Default value setting, when <dubbo:protocol> does not configure serialization, use this configuration -->
<dubbo:provider serialization="xxx" />

----------------------------------------

TITLE: Configuring Zookeeper Registry in Properties File
DESCRIPTION: Shows how to configure Zookeeper as a registry center in a properties file for a Dubbo application.

LANGUAGE: properties
CODE:
dubbo.registry.address=zookeeper://localhost:2181
# Set this value for new users, indicates using application-level service discovery
dubbo.registry.register-mode=instance

----------------------------------------

TITLE: Implementing TimeWindowQuantile in Java
DESCRIPTION: Implementation of the TimeWindowQuantile class, which uses the TDigest algorithm for calculating quantile metrics over a sliding time window.

LANGUAGE: java
CODE:
public class TimeWindowQuantile {
    private final double compression;
    private final TDigest[] ringBuffer;
    private int currentBucket;
    private long lastRotateTimestampMillis;
    private final long durationBetweenRotatesMillis;

    public TimeWindowQuantile(double compression, int bucketNum, int timeWindowSeconds) {
        this.compression = compression;
        this.ringBuffer = new TDigest[bucketNum];
        for (int i = 0; i < bucketNum; i++) {
            this.ringBuffer[i] = TDigest.createDigest(compression);
        }

        this.currentBucket = 0;
        this.lastRotateTimestampMillis = System.currentTimeMillis();
        this.durationBetweenRotatesMillis = TimeUnit.SECONDS.toMillis(timeWindowSeconds) / bucketNum;
    }

    public synchronized double quantile(double q) {
        TDigest currentBucket = rotate();
        return currentBucket.quantile(q);
    }

    public synchronized void add(double value) {
        rotate();
        for (TDigest bucket : ringBuffer) {
            bucket.add(value);
        }
    }

    private TDigest rotate() {
        long timeSinceLastRotateMillis = System.currentTimeMillis() - lastRotateTimestampMillis;
        while (timeSinceLastRotateMillis > durationBetweenRotatesMillis) {
            ringBuffer[currentBucket] = TDigest.createDigest(compression);
            if (++currentBucket >= ringBuffer.length) {
                currentBucket = 0;
            }
            timeSinceLastRotateMillis -= durationBetweenRotatesMillis;
            lastRotateTimestampMillis += durationBetweenRotatesMillis;
        }
        return ringBuffer[currentBucket];
    }
}

----------------------------------------

TITLE: Implementing MongoDB Repository
DESCRIPTION: MongoDB implementation of the IRepository interface

LANGUAGE: java
CODE:
public class MongoRepository implements IRepository {
    public void save(String data) {
        System.out.println("Save " + data + " to Mongo");
    }
}

----------------------------------------

TITLE: Configuring Connection Queue Warning Size in Dubbo
DESCRIPTION: Property configuration to adjust the connection queue warning threshold in Dubbo. The default value is 1000, and can be modified to suit specific requirements.

LANGUAGE: properties
CODE:
connect.queue.warning.size=1000

----------------------------------------

TITLE: Retrieving Pixiu Gateway External IP from Kubernetes
DESCRIPTION: Bash command to get the services in the dubbogo-triple-nacos namespace, used to retrieve the external IP of the Pixiu gateway for making HTTP requests.

LANGUAGE: bash
CODE:
kubectl get svc -n dubbogo-triple-nacos

----------------------------------------

TITLE: Configuring Kafka Sender for Zipkin
DESCRIPTION: Java configuration class for setting up a Kafka sender to export tracing data to Zipkin

LANGUAGE: java
CODE:
@Configuration
public class KafkaSenderConfiguration {

    @Bean
    KafkaSender kafkaSender(){
        KafkaSender.Builder builder = KafkaSender.newBuilder();
        builder.bootstrapServers("127.0.0.0.1:9092");
        builder.topic("zipkin");
        builder.encoding(Encoding.JSON);
        return builder.build();
    }

}

----------------------------------------

TITLE: Configuring Application-Level Routing in YAML
DESCRIPTION: Example of application-level routing configuration affecting all services with IP and port conditions.

LANGUAGE: yaml
CODE:
configVersion: v1.0
scope: "application"
force: false
enabled: true
key: application
conditions:
  - ip=127.0.0.1 => port=8000~8888

----------------------------------------

TITLE: Creating Business Tables in SQL
DESCRIPTION: This SQL script creates the necessary business tables for the storage, order, and account services.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS `storage_tbl`;
CREATE TABLE `storage_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `commodity_code` varchar(255) DEFAULT NULL,
  `count` int(11) DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY (`commodity_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `order_tbl`;
CREATE TABLE `order_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) DEFAULT NULL,
  `commodity_code` varchar(255) DEFAULT NULL,
  `count` int(11) DEFAULT 0,
  `money` int(11) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `account_tbl`;
CREATE TABLE `account_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) DEFAULT NULL,
  `money` int(11) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Creating a Dubbo-go Demo Application
DESCRIPTION: Command to create a new Dubbo-go demo application with client and server in the current directory.

LANGUAGE: shell
CODE:
dubbogo-cli newDemo .

----------------------------------------

TITLE: Maven Project Structure for Dispatcher Extension
DESCRIPTION: Directory structure showing the required files and their locations for implementing a custom Dubbo dispatcher.

LANGUAGE: text
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxDispatcher.java (implements Dispatcher interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.remoting.Dispatcher (plain text file, content: xxx=com.xxx.XxxDispatcher)

----------------------------------------

TITLE: Configuring Dubbo-go Server for xDS Protocol
DESCRIPTION: Modifies the dubbogo.yaml configuration file to use the xDS protocol for service registry and configure the Triple protocol.

LANGUAGE: YAML
CODE:
dubbo:
  registries:
    xds:
      protocol: xds
      address: istiod.istio-system.svc.cluster.local:15010
  protocols:
    triple:
      name: tri
      port: 20000
  provider:
    services:
      GreeterServerImpl:
        interface: "" # read from stub

----------------------------------------

TITLE: Implementing Random Load Balance in Java
DESCRIPTION: Source code for Dubbo's random load balancing strategy that distributes requests based on provider weights

LANGUAGE: java
CODE:
public class RandomLoadBalance extends AbstractLoadBalance {
    private final Random random = new Random();

    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {
        int length = invokers.size();      // total invoker
        int totalWeight = 0;               // Sum of invokers' weights

        boolean sameWeight = true;
        for (int i = 0; i < length; i++) {
            int weight = getWeight(invokers.get(i), invocation);
            totalWeight += weight; // Sum
            if (sameWeight && i > 0 && weight != getWeight(invokers.get(i - 1), invocation)) {
                sameWeight = false;
            }
        }

        if (totalWeight > 0 && !sameWeight) {
            int offset = random.nextInt(totalWeight);
            for (int i = 0; i < length; i++) {
                offset -= getWeight(invokers.get(i), invocation);
                if (offset < 0) {
                    return invokers.get(i);
                }
            }
        }
        return invokers.get(random.nextInt(length));
    }
}

----------------------------------------

TITLE: Creating Proto Directory Structure
DESCRIPTION: Sets up the directory structure for Protocol Buffer definitions.

LANGUAGE: shell
CODE:
mkdir -p src/util/proto && touch src/util/proto/example.proto

----------------------------------------

TITLE: Configuring Dubbo Client in Java
DESCRIPTION: Java code to configure a Dubbo client for streaming communication.

LANGUAGE: java
CODE:
public static void main(String[] args) throws IOException {
	ReferenceConfig<Greeter> ref = new ReferenceConfig<>();
	ref.setInterface(Greeter.class);
	ref.setProtocol(CommonConstants.TRIPLE);

	DubboBootstrap.getInstance().reference(ref).start();
	Greeter greeter = ref.get();
}

----------------------------------------

TITLE: Using Server Streaming in Dubbo Client
DESCRIPTION: Java code demonstrating how to use server streaming in a Dubbo client.

LANGUAGE: java
CODE:
GreeterRequest request = GreeterRequest.newBuilder().setName("server stream request.").build();
greeter.serverStream(request, new SampleStreamObserver());

----------------------------------------

TITLE: Starting Dubbo Server
DESCRIPTION: Server initialization code that configures the Triple protocol, registers the service, and starts listening on port 50051.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        DubboBootstrap.getInstance()
            .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))
            .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
            .start()
            .await();
    }
}

----------------------------------------

TITLE: Starting Dubbo Server
DESCRIPTION: Server initialization code that configures the Triple protocol, registers the service, and starts listening on port 50051.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        DubboBootstrap.getInstance()
            .protocol(new ProtocolConfig(CommonConstants.TRIPLE, 50051))
            .service(ServiceBuilder.newBuilder().interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
            .start()
            .await();
    }
}

----------------------------------------

TITLE: Implementing Cluster Logic in Dubbo
DESCRIPTION: Abstract class for implementing cluster invocation logic with fault tolerance and result aggregation capabilities.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.support;

public abstract class AbstractClusterInvoker<T> implements ClusterInvoker<T> {
    
    protected abstract Result doInvoke(Invocation invocation, List<Invoker<T>> invokers,
                                       LoadBalance loadbalance) throws RpcException;
}

----------------------------------------

TITLE: Implementing Dubbo Consumer
DESCRIPTION: Consumer implementation using @Reference annotation to reference the remote Dubbo service.

LANGUAGE: java
CODE:
@Component("annotatedConsumer")
public class GreetingServiceConsumer {
    @Reference
    private GreetingService greetingService;
    
    public String doSayHello(String name) {
        return greetingService.sayHello(name);
    }
}

----------------------------------------

TITLE: Configuring Dubbo Transport Protocol in XML
DESCRIPTION: XML configuration examples for setting up transport implementations in Dubbo, showing how to configure server and client transport separately or together.

LANGUAGE: xml
CODE:
<!-- Server and client use the same transport implementation -->
<dubbo:protocol transporter="xxx" /> 
<!-- Server and client use different transport implementations -->
<dubbo:protocol server="xxx" client="xxx" /> 
<!-- Default settings, used when <dubbo:protocol> does not configure transporter/server/client attributes -->
<dubbo:provider transporter="xxx" server="xxx" client="xxx" />

----------------------------------------

TITLE: Generating Protocol Code with Protoc
DESCRIPTION: Shell command to generate Go code from protobuf definition using protoc compiler with triple plugin.

LANGUAGE: shell
CODE:
protoc --go_out=. --go_opt=paths=source_relative \
    --go-triple_out=. --go-triple_opt=paths=source_relative \
    proto/greet.proto

----------------------------------------

TITLE: Configuring Custom RegistryFactory in Dubbo Properties
DESCRIPTION: Properties file configuration for registering a custom RegistryFactory implementation with Dubbo's extension mechanism.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxRegistryFactory

----------------------------------------

TITLE: Configuring Retry Count for Dubbo Service Consumer
DESCRIPTION: YAML configuration for setting retry count on the consumer side of UserService. This configuration increases the number of retry attempts to 5 after initial service call failures.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
configs:
  - side: consumer
    parameters:
      retries: 5

----------------------------------------

TITLE: Structured HTML Layout for Dubbo Community Projects
DESCRIPTION: HTML markup using Bootstrap cards to display various Dubbo projects in a grid layout. Each card contains project title, category, description and GitHub link.

LANGUAGE: HTML
CODE:
<div class="row container-fluid pb-5">
<div class="col-3">
    <div class="card" >
        <div class="card-body" >
            <h5 class="card-title">dubbo-go</h5>
            <h6 class="card-subtitle mb-2 text-muted">languages</h6>
            <p class="card-text">golang implementation</p> 
            <a href="https://github.com/apache/dubbo-go" class="card-link text-primary">GitHub > </a>
        </div>
    </div>
</div>
[...additional cards...]</div>

----------------------------------------

TITLE: Configuring Dubbo Provider with XML
DESCRIPTION: This XML configuration file sets up a Dubbo provider using Spring XML, specifying the Nacos registry and exposing the DemoService.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- 

Provider application information for dependency calculation
 -->
    <dubbo:application name="dubbo-provider-xml-demo"/>

    <!-- Using the Nacos registry -->
    <dubbo:registry address="nacos://127.0.0.1:8848"/>

    <!-- Using Dubbo protocol to expose services on random ports -->
    <dubbo:protocol name="dubbo" port="-1"/>

    <!-- Declare the service interface to be exposed -->
    <dubbo:service interface="org.apache.dubbo.demo.service.DemoService" ref="demoService" version="2.0.0"/>

    <!-- Implement services like local beans -->
    <bean id="demoService" class="org.apache.dubbo.demo.service.DefaultService"/>
</beans>

----------------------------------------

TITLE: Deploying Nacos Server in Kubernetes
DESCRIPTION: YAML configuration for deploying a Nacos server in a Kubernetes cluster, including a Deployment and a Service resource.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nacos-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nacos-server
  template:
    metadata:
      labels:
        app: nacos-server
    spec:
      containers:
      - env:
        - name: MODE
          value: standalone
        image: nacos/nacos-server:v2.2.0
        imagePullPolicy: Always
        name: nacos-server
        ports:
          - containerPort: 8848
            name: server
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: nacos-server
spec:
  ports:
  - port: 8848
    name: server
    protocol: TCP
    targetPort: 8848
  selector:
    app: nacos-server
  type: ClusterIP

----------------------------------------

TITLE: Configuring Dubbo Consumer in Erlang sys.config
DESCRIPTION: This snippet demonstrates how to add consumer configurations to the sys.config file for a Dubbo Erlang application. It shows the structure for specifying interface fullnames and their associated options.

LANGUAGE: erlang
CODE:
{dubboerl,[
	%% other config ...
	{consumer,[
		{<<"interface fullname">>,[Option]},
		%% eg:
		{<<"org.apache.dubbo.erlang.sample.service.facade.UserOperator">>,[]},
	]}
]}

----------------------------------------

TITLE: Configuring Asynchronous Method in Dubbo XML
DESCRIPTION: XML configuration for a Dubbo reference, specifying an asynchronous method using the async attribute.

LANGUAGE: xml
CODE:
<dubbo:reference id="asyncService" interface="com.alibaba.dubbo.samples.async.api.AsyncService">
    <dubbo:method name="goodbye" async="true"/>
</dubbo:reference>

----------------------------------------

TITLE: Configuring Redis Registry Address in Dubbo
DESCRIPTION: XML configurations for specifying the Redis registry address in Dubbo. Includes examples for single server and multiple server configurations.

LANGUAGE: XML
CODE:
<dubbo:registry address="redis://10.20.153.10:6379" />

LANGUAGE: XML
CODE:
<dubbo:registry address="redis://10.20.153.10:6379?backup=10.20.153.11:6379,10.20.153.12:6379" />

LANGUAGE: XML
CODE:
<dubbo:registry protocol="redis" address="10.20.153.10:6379" />

LANGUAGE: XML
CODE:
<dubbo:registry protocol="redis" address="10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379" />

----------------------------------------

TITLE: Adding Zipkin Tracing Dependencies in Maven
DESCRIPTION: Maven dependency configuration for enabling Dubbo tracing with OpenTelemetry and Zipkin integration

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>
    <version>3.2.1-SNAPSHOT</version>
</dependency>

----------------------------------------

TITLE: Configuring Dubbo Provider via Direct API
DESCRIPTION: Example demonstrating how to configure and expose Dubbo services programmatically using the API directly.

LANGUAGE: Java
CODE:
import com.alibaba.dubbo.rpc.config.ApplicationConfig;
import com.alibaba.dubbo.rpc.config.RegistryConfig;
import com.alibaba.dubbo.rpc.config.ProviderConfig;
import com.alibaba.dubbo.rpc.config.ServiceConfig;
import com.xxx.XxxService;
import com.xxx.XxxServiceImpl;

XxxService xxxService = new XxxServiceImpl();

ApplicationConfig application = new ApplicationConfig();
application.setName("xxx");

RegistryConfig registry = new RegistryConfig();
registry.setAddress("10.20.130.230:9090");
registry.setUsername("aaa");
registry.setPassword("bbb");

ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("dubbo");
protocol.setPort(12345);
protocol.setThreads(200);

ServiceConfig<XxxService> service = new ServiceConfig<XxxService>();
service.setApplication(application);
service.setRegistry(registry);
service.setProtocol(protocol);
service.setInterface(XxxService.class);
service.setRef(xxxService);
service.setVersion("1.0.0");

service.export();

----------------------------------------

TITLE: Vote Email Template for Apache Dubbo Release
DESCRIPTION: Template for sending a release vote email to the Apache Dubbo community, including required components like release candidate links, staging repo, git tag, and hash information.

LANGUAGE: text
CODE:
Project: [VOTE] Release Apache Dubbo 3.0.10 RC1

Hello Community,

This is a call for vote to release Apache Dubbo version 3.0.10

The release candidates:
https://dist.apache.org/repos/dist/dev/dubbo/dubbo/3.0.10/

The staging repo:
https://repository.apache.org/content/repositories/orgapachedubbo-1216/

Git tag for the release:
https://github.com/apache/dubbo/tree/dubbo-3.0.10

Hash for the release tag:
e7894ca374e966a1d807e34b2744f276b843f39f

Release Notes:
https://github.com/apache/dubbo/releases/tag/dubbo-3.0.10

The artifacts have been signed with Key 2B249EDD, which can be
found in the keys file:
https://dist.apache.org/repos/dist/dev/dubbo/KEYS

The vote will be open for at least 72 hours or until the necessary number of
votes are reached.

Please vote accordingly:

[ ] +1 approve
[ ] +0 no opinion
[ ] -1 disapprove with the reason

Thanks,
The Apache Dubbo Team

----------------------------------------

TITLE: RestMethodMetadata Class Definition in Java
DESCRIPTION: Core class that stores REST method metadata including method definition, request metadata, parameters and other configuration information.

LANGUAGE: java
CODE:
public class RestMethodMetadata implements Serializable {
    private MethodDefinition method;
    private RequestMetadata request;
    private Integer urlIndex;
    private Integer bodyIndex;
    private Integer headerMapIndex;
    private String bodyType;
    private Map<Integer, Collection<String>> indexToName;
    private List<String> formParams;
    private Map<Integer, Boolean> indexToEncoded;
    private ServiceRestMetadata serviceRestMetadata;
    private List<ArgInfo> argInfos;
    private Method reflectMethod;
    private Class codeStyle;
}

----------------------------------------

TITLE: Deploying Dubbo Service in Kubernetes
DESCRIPTION: YAML configuration for deploying a Dubbo service in a Kubernetes cluster, which will be registered with the Nacos server.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nacos-provider
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nacos-provider
  template:
    metadata:
      labels:
        app: nacos-provider
    spec:
      containers:
        - name: server
          image: higress-registry.cn-hangzhou.cr.aliyuncs.com/samples/nacos-dubbo-provider:v1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 20880
          env:
            - name: DUBBO_REGISTRY_ADDRESS
              value: nacos-server.default.svc.cluster.local

----------------------------------------

TITLE: Building Docker Images with docker-builder
DESCRIPTION: Command-line usage for docker-builder tool to compile and build Istio docker images with various configuration options.

LANGUAGE: bash
CODE:
docker-builder -h

----------------------------------------

TITLE: Zookeeper Configuration in Properties
DESCRIPTION: Properties file configuration for setting up Zookeeper as the registry center in Dubbo.

LANGUAGE: properties
CODE:
dubbo.registry.address=zookeeper://localhost:2181

----------------------------------------

TITLE: Adding Redis Registry Dependency in Maven
DESCRIPTION: XML configuration to add the Redis registry dependency to a Maven project. This is required for Dubbo 3 and later versions as Redis support is no longer embedded.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-registry-redis</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Handling URL Encoded Form Data in Triple Protocol
DESCRIPTION: Shows how to process application/x-www-form-urlencoded requests with both individual parameters and Map-based handling approaches.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetUrlForm HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/x-www-form-urlencoded
Content-Length: 33
Accept: application/json
Hello=World&Apache=Dubbo&id=10086

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(String hello, String apache, long id){
        System.out.println("Hello:" + hello);
        System.out.println("Apache:" + apache);
        System.out.println("Id:" + id);
        return new ServerResponse("Server Received url form");
    }

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(Map<String, Object> params){
        System.out.println("Hello:" + params.get("Hello"));
        System.out.println("Apache:" + params.get("Apache"));
        System.out.println("Id:" + params.get("Id"));
        return new ServerResponse("Server Received url form");
    }

----------------------------------------

TITLE: Starting Dubbo Server in Java
DESCRIPTION: Java code to configure and start a Dubbo server with streaming service.

LANGUAGE: java
CODE:
public static void main(String[] args) throws IOException {
	ServiceConfig<Greeter> service = new ServiceConfig<>();
	service.setInterface(Greeter.class);
	service.setRef(new GreeterImpl("tri-stub"));

	ApplicationConfig applicationConfig = new ApplicationConfig("tri-stub-server");
	applicationConfig.setQosEnable(false);

	DubboBootstrap bootstrap = DubboBootstrap.getInstance();
	bootstrap.application(applicationConfig)
			.registry(new RegistryConfig(TriSampleConstants.ZK_ADDRESS))
			.protocol(new ProtocolConfig(CommonConstants.TRIPLE, TriSampleConstants.SERVER_PORT))
			.service(service)
			.start();
}

----------------------------------------

TITLE: Configuring Thread Pool Isolation via Java API
DESCRIPTION: Example of configuring thread pool isolation for Dubbo services using the Java API, including custom executors and application-level settings.

LANGUAGE: java
CODE:
public void test() {
    // provider app
    DubboBootstrap providerBootstrap = DubboBootstrap.newInstance();

    ServiceConfig serviceConfig1 = new ServiceConfig();
    serviceConfig1.setInterface(DemoService.class);
    serviceConfig1.setRef(new DemoServiceImpl());
    serviceConfig1.setVersion(version1);
    // Set executor1 for serviceConfig1, max threads is 10
    NamedThreadFactory threadFactory1 = new NamedThreadFactory("DemoService-executor");
    ExecutorService executor1 = Executors.newFixedThreadPool(10, threadFactory1);
    serviceConfig1.setExecutor(executor1);

    ServiceConfig serviceConfig2 = new ServiceConfig();
    serviceConfig2.setInterface(HelloService.class);
    serviceConfig2.setRef(new HelloServiceImpl());
    serviceConfig2.setVersion(version2);
    // Set executor2 for serviceConfig2, max threads is 100
    NamedThreadFactory threadFactory2 = new NamedThreadFactory("HelloService-executor");
    ExecutorService executor2 = Executors.newFixedThreadPool(100, threadFactory2);
    serviceConfig2.setExecutor(executor2);

    ServiceConfig serviceConfig3 = new ServiceConfig();
    serviceConfig3.setInterface(HelloService.class);
    serviceConfig3.setRef(new HelloServiceImpl());
    serviceConfig3.setVersion(version3);
    // Because executor is not set for serviceConfig3, the default executor of serviceConfig3 is built using
    // the threadpool parameter of the protocolConfig ( FixedThreadpool , max threads is 200)
    serviceConfig3.setExecutor(null);

    // It takes effect only if [executor-management-mode=isolation] is configured
    ApplicationConfig applicationConfig = new ApplicationConfig("provider-app");
    applicationConfig.setExecutorManagementMode("isolation");

    providerBootstrap
    .application(applicationConfig)
    .registry(registryConfig)
    // export with tri and dubbo protocol
    .protocol(new ProtocolConfig("tri", 20001))
    .protocol(new ProtocolConfig("dubbo", 20002))
    .service(serviceConfig1)
    .service(serviceConfig2)
    .service(serviceConfig3);

    providerBootstrap.start();
}

----------------------------------------

TITLE: Configuring Thread Pool Isolation via Java API
DESCRIPTION: Example of configuring thread pool isolation for Dubbo services using the Java API, including custom executors and application-level settings.

LANGUAGE: java
CODE:
public void test() {
    // provider app
    DubboBootstrap providerBootstrap = DubboBootstrap.newInstance();

    ServiceConfig serviceConfig1 = new ServiceConfig();
    serviceConfig1.setInterface(DemoService.class);
    serviceConfig1.setRef(new DemoServiceImpl());
    serviceConfig1.setVersion(version1);
    // Set executor1 for serviceConfig1, max threads is 10
    NamedThreadFactory threadFactory1 = new NamedThreadFactory("DemoService-executor");
    ExecutorService executor1 = Executors.newFixedThreadPool(10, threadFactory1);
    serviceConfig1.setExecutor(executor1);

    ServiceConfig serviceConfig2 = new ServiceConfig();
    serviceConfig2.setInterface(HelloService.class);
    serviceConfig2.setRef(new HelloServiceImpl());
    serviceConfig2.setVersion(version2);
    // Set executor2 for serviceConfig2, max threads is 100
    NamedThreadFactory threadFactory2 = new NamedThreadFactory("HelloService-executor");
    ExecutorService executor2 = Executors.newFixedThreadPool(100, threadFactory2);
    serviceConfig2.setExecutor(executor2);

    ServiceConfig serviceConfig3 = new ServiceConfig();
    serviceConfig3.setInterface(HelloService.class);
    serviceConfig3.setRef(new HelloServiceImpl());
    serviceConfig3.setVersion(version3);
    // Because executor is not set for serviceConfig3, the default executor of serviceConfig3 is built using
    // the threadpool parameter of the protocolConfig ( FixedThreadpool , max threads is 200)
    serviceConfig3.setExecutor(null);

    // It takes effect only if [executor-management-mode=isolation] is configured
    ApplicationConfig applicationConfig = new ApplicationConfig("provider-app");
    applicationConfig.setExecutorManagementMode("isolation");

    providerBootstrap
    .application(applicationConfig)
    .registry(registryConfig)
    // export with tri and dubbo protocol
    .protocol(new ProtocolConfig("tri", 20001))
    .protocol(new ProtocolConfig("dubbo", 20002))
    .service(serviceConfig1)
    .service(serviceConfig2)
    .service(serviceConfig3);

    providerBootstrap.start();
}

----------------------------------------

TITLE: Configuring dubbo2.js Client in TypeScript
DESCRIPTION: This TypeScript code configures the dubbo2.js client, setting up the Dubbo connection and proxying the service interface for use in Node.js.

LANGUAGE: TypeScript
CODE:
import { Dubbo, java, TDubboCallResult } from 'dubbo2.js'

const dubbo = new Dubbo({
  application: {name: 'demo-provider'},
  register: 'localhost:2181',
  dubboVersion: '2.0.0',
  interfaces: [
    'com.alibaba.dubbo.demo.DemoProvider',
  ],
});

interface IDemoService {
  sayHello(name: string): TDubboCallResult<string>;
}

export const demoService = dubbo.proxyService<IDemoService>({
  dubboInterface: 'com.alibaba.dubbo.demo.DemoProvider',
  version: '1.0.0',
  methods: {
    sayHello(name: string) {
      return [java.String(name)];
    },

    echo() {},

    test() {},

    getUserInfo() {
      return [
        java.combine('com.alibaba.dubbo.demo.UserRequest', {
          id: 1,
          name: 'nodejs',
          email: 'node@qianmi.com',
        }),
      ];
    },
  },
});

----------------------------------------

TITLE: Implementing Custom Dubbo Server
DESCRIPTION: Example implementation of a custom Server interface extending AbstractServer to handle server-side network communications.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.transport.transporter.AbstractServer;
 
public class XxxServer extends AbstractServer {
    public XxxServer(URL url, ChannelHandler handler) throws RemotingException{
        super(url, handler);
    }
    protected void doOpen() throws Throwable {
        // ...
    }
    protected void doClose() throws Throwable {
        // ...
    }
    public Collection<Channel> getChannels() {
        // ...
    }
    public Channel getChannel(InetSocketAddress remoteAddress) {
        // ...
    }
}

----------------------------------------

TITLE: Importing Webservice Protocol Dependencies in XML
DESCRIPTION: XML configuration for importing the Webservice protocol module and its CXF dependencies in a Dubbo 3.x project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo.extensions</groupId>
    <artifactId>dubbo-rpc-webservice</artifactId>
    <version>3.3.0</version>
</dependency>

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-rt-frontend-simple</artifactId>
    <version>2.6.1</version>
</dependency>
<dependency>
    <groupId>org.apache.cxf</groupId>
    <artifactId>cxf-rt-transports-http</artifactId>
    <version>2.6.1</version>
</dependency>

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: This Java class implements the DemoService interface and uses Dubbo's @Service annotation to expose it as a Dubbo service.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.service;

import org.apache.dubbo.config.annotation.Service;
import org.apache.dubbo.rpc.RpcContext;

import org.springframework.beans.factory.annotation.Value;

/**
 * Default {@link DemoService}
 *
 * @since 2.7.4
 */
@Service(version = "${demo.service.version}")
public class DefaultService implements DemoService {

    @Value("${demo.service.name}")
    private String serviceName;

    public String sayName(String name) {
        RpcContext rpcContext = RpcContext.getContext();
        return String.format("Service [name :%s , port : %d] %s(\"%s\") : Hello,%s",
                serviceName,
                rpcContext.getLocalPort(),
                rpcContext.getMethodName(),
                name,
                name);
    }
}

----------------------------------------

TITLE: Configuring Zookeeper Config Center in Properties
DESCRIPTION: Properties file configuration to enable Zookeeper as a configuration center in Dubbo

LANGUAGE: properties
CODE:
dubbo.config-center.address=zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Configuring Direct Connection in Dubbo
DESCRIPTION: XML configuration for establishing a direct connection to a Hessian service using specific URL in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:reference id="helloService" interface="HelloWorld" url="hessian://10.20.153.10:8080/helloWorld" />

----------------------------------------

TITLE: Configuring OpenTelemetry Tracing with Dubbo API
DESCRIPTION: This Java code snippet demonstrates how to programmatically configure OpenTelemetry tracing for Dubbo using the API approach, including enabling tracing, setting sampling rate, propagation type, and OTLP exporter settings.

LANGUAGE: java
CODE:
TracingConfig tracingConfig = new TracingConfig();
// Enable dubbo tracing
tracingConfig.setEnabled(true);
// Set sampling rate
tracingConfig.setSampling(new SamplingConfig(1.0f));
// Set Propagation, default is W3C, optional W3C/B3
tracingConfig.setPropagation(new PropagationConfig("W3C"));
// Set trace reporting
ExporterConfig exporterConfig = new ExporterConfig();
// Set to report trace to Zipkin
exporterConfig.setZipkin(new ExporterConfig.OtlpConfig("http://localhost:4317", Duration.ofSeconds(10), "none"));
tracingConfig.setExporter(exporterConfig);

----------------------------------------

TITLE: YAML Configuration for Rust Documentation
DESCRIPTION: YAML front matter configuration that specifies documentation rendering settings for the Rust section, including render type, description, manual link reference, title and weight parameters.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Rust
manualLinkRelref: ./#rust
title: Rust
type: docs
weight: 30

----------------------------------------

TITLE: Adding Dubbo Application Configuration
DESCRIPTION: Adds a configuration to specify the metadata service protocol for the Dubbo application.

LANGUAGE: properties
CODE:
dubbo.application.metadataServiceProtocol=dubbo

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Java implementation of the Dubbo service interface, with the 'sayHello' method implementation.

LANGUAGE: java
CODE:
@Service(version = "${demo.service.version}", group = "${demo.service.group}")
public class DemoServiceImpl implements DemoService {
    @Override
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

----------------------------------------

TITLE: Dockerfile Modification for Debug Support
DESCRIPTION: Modification to Dockerfile.pilot to include dlv debugger for remote debugging capabilities

LANGUAGE: dockerfile
CODE:
COPY ${TARGETARCH:-amd64}/dlv /usr/local/bin/dlv

----------------------------------------

TITLE: Configuring StartupProbe Extension in Dubbo
DESCRIPTION: Configuration file for registering a custom StartupProbe implementation with Dubbo's extension mechanism.

LANGUAGE: plaintext
CODE:
xxx=com.xxx.XxxStartupProbe

----------------------------------------

TITLE: Implementing Dubbo Service Provider
DESCRIPTION: Implements the DemoService interface with basic greeting functionality.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.provider;
import org.apache.dubbo.demo.DemoService;

public class DemoServiceImpl implements DemoService {
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

----------------------------------------

TITLE: Configuring Generic Service in XML
DESCRIPTION: XML configuration for declaring a generic service reference with the generic=true attribute.

LANGUAGE: xml
CODE:
"userService" interface="com.alibaba.dubbo.samples.generic.api.IUserService" generic="true"/>

----------------------------------------

TITLE: Service Definition in Protocol Buffers
DESCRIPTION: Proto file defining the gRPC service interface for the greeting service

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package greet;

option go_package = "github.com/apache/dubbo-go-samples/context/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Starting Dubbo Consumer
DESCRIPTION: Command to start the Dubbo consumer service.

LANGUAGE: shell
CODE:
java -jar ./dubbo-samples-dubbo-consumer/target/dubbo-samples-dubbo-consumer-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Implementing Dubbo Service with Annotations
DESCRIPTION: Example of implementing and exposing a Dubbo service using @DubboService annotation with various configuration parameters.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {}

LANGUAGE: java
CODE:
@DubboService(version = "1.0.0", group = "dev", timeout = 5000)
public class DemoServiceImpl implements DemoService {}

----------------------------------------

TITLE: Implementing Dubbo Service with Annotations
DESCRIPTION: Example of implementing and exposing a Dubbo service using @DubboService annotation with various configuration parameters.

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {}

LANGUAGE: java
CODE:
@DubboService(version = "1.0.0", group = "dev", timeout = 5000)
public class DemoServiceImpl implements DemoService {}

----------------------------------------

TITLE: Implementing Custom Telnet Handler in Java
DESCRIPTION: Example of a custom telnet handler implementation in Java. The class must implement the TelnetHandler interface and can include a @Help annotation for command documentation.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.telnet.TelnetHandler;
 
@Help(parameter="...", summary="...", detail="...")
 
public class XxxTelnetHandler implements TelnetHandler {
    public String telnet(Channel channel, String message) throws RemotingException {
        // ...
    }
}

----------------------------------------

TITLE: Load Balance SPI Configuration
DESCRIPTION: Properties file configuration for registering custom load balance implementation with Dubbo's SPI mechanism

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxLoadBalance

----------------------------------------

TITLE: Multiple Port Configuration
DESCRIPTION: XML configuration for setting up multiple Dubbo protocol instances with different ports.

LANGUAGE: xml
CODE:
<dubbo:protocol id="dubbo1" name="dubbo" port="20880" />
<dubbo:protocol id="dubbo2" name="dubbo" port="20881" />

----------------------------------------

TITLE: Adding Dubbo Spring Boot Starter
DESCRIPTION: Configure Dubbo Spring Boot starter dependency for Spring Boot applications.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo</groupId>
  <artifactId>dubbo-spring-boot-starter</artifactId>
</dependency>

----------------------------------------

TITLE: Dynamic Configuration for Timeout Settings
DESCRIPTION: YAML configuration showing how to dynamically modify service timeout parameters without restart.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: service
key: org.apache.dubbo.samples.UserService
enabled: true
configs:
  - side: provider
    parameters:
      timeout: 2000

----------------------------------------

TITLE: Implementing Asynchronous Filter Chain in Java
DESCRIPTION: Demonstrates how to implement a filter that supports asynchronous processing in the Dubbo filter chain.

LANGUAGE: Java
CODE:
@Activate(group = {Constants.PROVIDER, Constants.CONSUMER})
public class AsyncPostprocessFilter extends AbstractPostProcessFilter {

    @Override
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        return postProcessResult(invoker.invoke(invocation), invoker, invocation);
    }

    @Override
    protected Result doPostProcess(Result result, Invoker<?> invoker, Invocation invocation) {
        System.out.println("Filter get the return value: " + result.getValue());
        return result;
    }
}

----------------------------------------

TITLE: Implementing Dubbo-go Client with Timeout Configuration
DESCRIPTION: This Go code demonstrates a Dubbo-go client implementation with timeout configuration. It creates a client with a global timeout, then makes calls to both Greet and GreetTimeout methods to showcase the timeout behavior.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"time"

	"dubbo.apache.org/dubbo-go/v3/client"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/timeout/proto"
	"github.com/dubbogo/gost/log/logger"
)

func main() {
	cli, err := client.NewClient(
		client.WithClientURL("tri://127.0.0.1:20000"),
		client.WithClientRequestTimeout(3*time.Second),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}

	// test timeout
	resp, err := svc.GreetTimeout(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error("call [greet.GreetService.GreetTimeout] service timeout")
		logger.Error(err)
	} else {
		logger.Infof("Greet response: %s", resp.Greeting)
	}

	// test normal
	resp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Configuring EnvoyFilter for HTTP to Dubbo Protocol Conversion
DESCRIPTION: YAML configuration for EnvoyFilter to set up HTTP to Dubbo protocol conversion rules.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: http-dubbo-transcoder-test
  namespace: higress-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter:
              name: envoy.filters.http.router
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.http_dubbo_transcoder
        typed_config:
          '@type': type.googleapis.com/udpa.type.v1.TypedStruct
          type_url: type.googleapis.com/envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder
  - applyTo: HTTP_ROUTE
    match:
      context: GATEWAY
      routeConfiguration:
        vhost:
          route:
            name: demo
    patch:
      operation: MERGE
      value:
        route:
          upgrade_configs:
          - connect_config:
              allow_post: true
            upgrade_type: CONNECT
        typed_per_filter_config:
          envoy.filters.http.http_dubbo_transcoder:
            '@type': type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder
            value:
              request_validation_options:
                reject_unknown_method: true
                reject_unknown_query_parameters: true
              services_mapping:
              - group: dev
                method_mapping:
                - name: sayName
                  parameter_mapping:
                  - extract_key: p
                    extract_key_spec: ALL_QUERY_PARAMETER
                    mapping_type: java.lang.String
                  passthrough_setting:
                    passthrough_all_headers: true
                  path_matcher:
                    match_http_method_spec: ALL_GET
                    match_pattern: /dubbo/hello
                name: org.apache.dubbo.samples.gateway.api.DemoService
                version: 1.0.0
              url_unescape_spec: ALL_CHARACTERS_EXCEPT_RESERVED
  - applyTo: CLUSTER
    match:
      cluster:
        service: gateway-higress-dubbo.DEFAULT-GROUP.public.nacos
      context: GATEWAY
    patch:
      operation: MERGE
      value:
        upstream_config:
          name: envoy.upstreams.http.dubbo_tcp
          typed_config:
            '@type': type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.upstreams.http.dubbo_tcp.v3.DubboTcpConnectionPoolProto

----------------------------------------

TITLE: JAX-RS Service Implementation
DESCRIPTION: Implementation of Dubbo HTTP service using JAX-RS annotations and coding style.

LANGUAGE: java
CODE:
@Path("/jaxrs/demo/service")\npublic interface JaxRsRestDemoService {\n    @GET\n    @Path("/hello")\n    Integer hello(@QueryParam("a") Integer a, @QueryParam("b") Integer b);\n    // ... additional methods\n}

----------------------------------------

TITLE: Adding Brave Tracer Dependency in Maven
DESCRIPTION: This XML snippet demonstrates how to add the Brave tracer dependency to a Maven project. It includes the micrometer-tracing-bridge-brave artifact from the io.micrometer group.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-brave</artifactId>
    <optional>true</optional>
</dependency>

----------------------------------------

TITLE: 使用注解配置Dubbo服务
DESCRIPTION: 展示了如何使用Java注解来配置Dubbo服务提供者。

LANGUAGE: Java
CODE:
@DubboService
public class AnnotationServiceImpl implements AnnotationService {
    @Override
    public String sayHello(String name) {
        System.out.println("async provider received: " + name);
        return "annotation: hello, " + name;
    }
}

----------------------------------------

TITLE: Virtual Service Configuration for All v1 Services
DESCRIPTION: YAML configuration showing virtual service definitions that route all traffic to v1 versions of the Bookinfo microservices.

LANGUAGE: yaml
CODE:
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - details
    http:
    - route:
      - destination:
          host: details
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - productpage
    http:
    - route:
      - destination:
          host: productpage
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - ratings
    http:
    - route:
      - destination:
          host: ratings
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  spec:
    hosts:
    - reviews
    http:
    - route:
      - destination:
          host: reviews
          subset: v1

----------------------------------------

TITLE: Hugo Template for Responsive Card Grid
DESCRIPTION: Creates a responsive Bootstrap-style grid layout of cards from page parameters. Each card contains a title and an unordered list of links, with content rendered through Hugo's template functions. The layout is responsive with cards arranged in two columns on medium screens.

LANGUAGE: html
CODE:
{{ with .Page.Params.content -}}
<div class="row">
{{ range $list_entry := . }}
{{ range $heading, $items := $list_entry }}

{{ range $items }}
<div class="col-sm col-md-6 mb-4">
  <div class="h-100 card shadow" href="#">
    <div class="card-body">
  {{ $item := . }}
  {{ $name := $item.name }}
  {{ $links := $item.links }}
  <h4 class="card-title">
    {{ $item.name | $.Page.RenderString }}
  </h4>
    <ul>{{ range $links }}{{ $link := . }}<li>{{ $link | $.Page.RenderString }}</li>{{ end }}</ul>
    </div>
  </div>
</div>
{{ end }}
{{ end }}
{{ end }}
</div>
{{ end -}}

----------------------------------------

TITLE: Defining YAML Frontmatter for Dubbo Security Documentation
DESCRIPTION: YAML frontmatter defining metadata for the Dubbo security documentation page, including aliases, description, feature details, and page properties.

LANGUAGE: yaml
CODE:
aliases:
    - /zh/overview/core-features/security/
    - /zh-cn/overview/core-features/security/
description: 认证鉴权
feature:
    description: |
        支持基于 TLS 的传输链路认证与加密通信以及基于请求身份的权限校验，帮助构建零信任分布式微服务体系。
    title: 认证鉴权
linkTitle: 认证鉴权
title: 认证鉴权
type: docs
weight: 8

----------------------------------------

TITLE: Implementing MetricManager Interface in Dubbo Go
DESCRIPTION: Defines the MetricManager interface, which is responsible for managing all Metric instances.

LANGUAGE: Go
CODE:
type MetricManager interface {
	GetFastCompass(group string, name string) FastCompass
}

----------------------------------------

TITLE: Verifying Release Candidate Signatures
DESCRIPTION: Commands to verify SHA512 hash and GPG signatures of release artifacts.

LANGUAGE: shell
CODE:
$ shasum -c apache-dubbo-${release_version}-src.zip.sha512
$ shasum -c apache-dubbo-${release_version}-bin.zip.sha512
$  gpg --verify apache-dubbo-${release_version}-src.zip.asc
$ curl https://dist.apache.org/repos/dist/dev/dubbo/KEYS >> KEYS # download public keys to local directory
$ gpg --import KEYS # import keys
$ gpg --edit-key liujun
   > trust # type trust command
gpg --verify apache-dubbo-3.0.4-src.zip.asc apache-dubbo-3.0.4-src.zip
gpg --verify apache-dubbo-3.0.4-bin.zip.asc apache-dubbo-3.0.4-bin.zip

----------------------------------------

TITLE: Listing Non-Daemon Threads Using jstack in Shell
DESCRIPTION: This shell command uses jstack to list all non-daemon threads in a Java process, helping to identify threads that keep the JVM running.

LANGUAGE: sh
CODE:
jstack 57785 | grep tid | grep -v "daemon"

----------------------------------------

TITLE: Method Level Configuration Example
DESCRIPTION: Example showing how to configure method level settings for Dubbo services.

LANGUAGE: java
CODE:
...

// 方法级配置
List<MethodConfig> methods = new ArrayList<MethodConfig>();
MethodConfig method = new MethodConfig();
method.setName("sayHello");
method.setTimeout(10000);
method.setRetries(0);
methods.add(method);

// 引用远程服务
ReferenceConfig<DemoService> reference = new ReferenceConfig<DemoService>(); // 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏
...
reference.setMethods(methods); // 设置方法级配置

...

----------------------------------------

TITLE: Deploying Dubbo Release to Maven Repository
DESCRIPTION: Maven commands to deploy Dubbo release artifacts to the Maven staging repository.

LANGUAGE: shell
CODE:
$ mvn clean install -Prelease
$ mvn deploy -Prelease -DskipTests

----------------------------------------

TITLE: Cloning Dubbo Samples Repository
DESCRIPTION: Command to clone the Dubbo samples repository from GitHub.

LANGUAGE: shell
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git

----------------------------------------

TITLE: Creating Route for Dubbo Service in APISIX
DESCRIPTION: This curl command creates a route in APISIX to expose the Dubbo service as an HTTP endpoint using the dubbo-proxy plugin.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:9180/apisix/admin/routes/1  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
{
    "uris": [
        "/demo"
    ],
    "plugins": {
        "dubbo-proxy": {
            "service_name": "org.apache.dubbo.samples.gateway.apisix.dubbo.api.ApisixService",
            "method": "apisixDubbo"
        }
    },
    "upstream_id": 1
}'

----------------------------------------

TITLE: Creating Maven Project Structure for Dubbo Compiler Extension
DESCRIPTION: Demonstrates the recommended Maven project structure for implementing a custom Compiler extension in Dubbo.

LANGUAGE: plaintext
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxCompiler.java (implements Compiler interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.common.compiler.Compiler (text file containing: xxx=com.xxx.XxxCompiler)

----------------------------------------

TITLE: Configuring Dubbo for Multi-Protocol Publishing
DESCRIPTION: YAML configuration for Dubbo to publish services using both REST and Dubbo protocols.

LANGUAGE: yaml
CODE:
dubbo:
  protocols:
    rest:
      name: rest
      port: 8090
    dubbo:
      name: dubbo
      port: 20880

----------------------------------------

TITLE: Complete Client Implementation in Go
DESCRIPTION: Full client implementation showing connection setup and context parameter passing

LANGUAGE: go
CODE:
package main

import (
	"context"

	"dubbo.apache.org/dubbo-go/v3/client"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/context/proto"
	"github.com/dubbogo/gost/log/logger"
)

func main() {
	cli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}

	ctx := context.Background()
	ctx = context.WithValue(ctx, constant.AttachmentKey, map[string]interface{}{
		"key1": "user defined value 1",
		"key2": "user defined value 2",
	})

	resp, err := svc.Greet(ctx, &greet.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Implementing Dubbo IOC
DESCRIPTION: Code snippet showing Dubbo's implementation of Inversion of Control

LANGUAGE: java
CODE:
private T injectExtension(T instance) {
    if (objectFactory == null) {
        return instance;
    }
    try {
        for (Method method : instance.getClass().getMethods()) {
            if (!isSetter(method)) {
                continue;
            }
            if (method.getAnnotation(DisableInject.class) != null) {
                continue;
            }
            Class<?> pt = method.getParameterTypes()[0];
            if (ReflectUtils.isPrimitives(pt)) {
                continue;
            }
            try {
                String property = getSetterProperty(method);
                Object object = objectFactory.getExtension(pt, property);
                if (object != null) {
                    method.invoke(instance, object);
                }
            } catch (Exception e) {
                logger.error("Failed to inject via method " + method.getName()
                        + " of interface " + type.getName() + ": " + e.getMessage(), e);
            }
        }
    } catch (Exception e) {
        logger.error(e.getMessage(), e);
    }
    return instance;
}

----------------------------------------

TITLE: Starting Dubbo Service Provider with Bootstrap in Java
DESCRIPTION: Configures and starts a Dubbo service provider using DubboBootstrap, including application, registry, and protocol settings.

LANGUAGE: java
CODE:
import org.apache.dubbo.common.constants.CommonConstants;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.MetadataReportConfig;
import org.apache.dubbo.config.ProtocolConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ServiceConfig;
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.demo.DemoService;

public class Application {
    public static void main(String[] args) throws Exception {
            startWithBootstrap();
    }
    private static void startWithBootstrap() {
        ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();
        service.setInterface(DemoService.class);
        service.setRef(new DemoServiceImpl());
        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        bootstrap.application(new ApplicationConfig("dubbo-demo-api-provider"))
            .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
            .service(service)
            .start()
            .await();
    }
}

----------------------------------------

TITLE: Registering Configuration Center Factory in Go
DESCRIPTION: This code snippet shows how to register and retrieve configuration center factories in dubbo-go. It allows dynamically adding support for different configuration centers.

LANGUAGE: Go
CODE:
package extension

import (
	"github.com/apache/dubbo-go/config_center"
)

var (
	configCenterFactories = make(map[string]func() config_center.DynamicConfigurationFactory)
)

// SetConfigCenterFactory sets the DynamicConfigurationFactory with @name
func SetConfigCenterFactory(name string, v func() config_center.DynamicConfigurationFactory) {
	configCenterFactories[name] = v
}

// GetConfigCenterFactory finds the DynamicConfigurationFactory with @name
func GetConfigCenterFactory(name string) config_center.DynamicConfigurationFactory {
	if configCenterFactories[name] == nil {
		panic("config center for " + name + " is not existing, make sure you have import the package.")
	}
	return configCenterFactories[name]()
}

----------------------------------------

TITLE: Calculating Maximum Concurrency in HeuristicSmoothingFlowControl
DESCRIPTION: Formula for calculating the maximum concurrency value in the HeuristicSmoothingFlowControl rate limiting algorithm. It uses metrics like QPS, average latency, and no-load latency.

LANGUAGE: plaintext
CODE:
maxConcurrency = maxQPS * (avgLatency - noLoadLatency) / (1 + alpha)

----------------------------------------

TITLE: Dubbo Provider Properties
DESCRIPTION: Properties file for configuring the Dubbo provider, including Zookeeper registry address.

LANGUAGE: properties
CODE:
dubbo.application.name=demo-provider
dubbo.registry.address=zookeeper://$DOCKER_HOST:2181
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880

----------------------------------------

TITLE: Implementing Dubbo Provider Service in Java
DESCRIPTION: This snippet demonstrates a simple Dubbo service provider implementation. It includes a health check method that can be modified to simulate failures.

LANGUAGE: java
CODE:
@Service
public class DubboHealthServiceImpl implements DubboHealthService {

    @Override
    public String health() {
//        int i = 1/0;
        return "i am provider2";
    }
}

----------------------------------------

TITLE: Creating Long-Running Thread in Java Unit Test
DESCRIPTION: This Java unit test creates a non-daemon thread that sleeps for a long time. It's used to demonstrate JVM behavior with long-running threads in test environments.

LANGUAGE: java
CODE:
@Test
public void test() {
    new Thread(new Runnable() {
        @Override
        public void run() {
            try {
                Thread.sleep(1000000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }).start();
}

----------------------------------------

TITLE: Configuring Load Balance in Dubbo XML Configuration
DESCRIPTION: Configures the loadbalance attribute to 'leastactive' for the service's client or server. This ensures calls are made to the Provider with the smallest number of concurrent requests.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" loadbalance="leastactive" />

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" loadbalance="leastactive" />

----------------------------------------

TITLE: Configuring Method-Level Consumer-Side Concurrent Calls Limit (XML)
DESCRIPTION: Limits the sayHello method of com.foo.BarService to a maximum of 10 concurrent executions per client using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService">
    <dubbo:method name="sayHello" actives="10" />
</dubbo:service>

----------------------------------------

TITLE: Configuring Multicast Registry Address in Dubbo XML
DESCRIPTION: Demonstrates how to configure the Multicast registry address in Dubbo's XML configuration. The address format includes the multicast IP and port.

LANGUAGE: xml
CODE:
<dubbo:registry address="multicast://224.5.6.7:1234" />

LANGUAGE: xml
CODE:
<dubbo:registry protocol="multicast" address="224.5.6.7:1234" />

----------------------------------------

TITLE: Telnet QOS Connection Example
DESCRIPTION: Example showing how to connect to Dubbo QOS via telnet and the expected output including the Dubbo ASCII art banner.

LANGUAGE: shell
CODE:
➜  ~ telnet localhost 22222
Trying ::1...
telnet: connect to address ::1: Connection refused
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
  ████████▄  ███    █▄  ▀█████████▄  ▀█████████▄   ▄██████▄
  ███   ▀███ ███    ███   ███    ███   ███    ███ ███    ███
  ███    ███ ███    ███   ███    ███   ███    ███ ███    ███
  ███    ███ ███    ███  ▄███▄▄▄██▀   ▄███▄▄▄██▀  ███    ███
  ███    ███ ███    ███ ▀▀███▀▀▀██▄  ▀▀███▀▀▀██▄  ███    ███
  ███    ███ ███    ███   ███    ██▄   ███    ██▄ ███    ███
  ███   ▄███ ███    ███   ███    ███   ███    ███ ███    ███
  ████████▀  ████████▀  ▄█████████▀  ▄█████████▀   ▀██████▀


dubbo>ls
As Provider side:
+----------------------------------+---+
|       Provider Service Name      |PUB|
+----------------------------------+---+
|org.apache.dubbo.demo.DemoService| N |
+----------------------------------+---+
As Consumer side:
+---------------------+---+
|Consumer Service Name|NUM|
+---------------------+---+

dubbo>

----------------------------------------

TITLE: Adding Dubbo Mock Admin Dependency in XML
DESCRIPTION: XML configuration to add the dubbo-mock-admin dependency to a consumer application. This is required before enabling the mock functionality.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-mock-admin</artifactId>
  <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Configuring Nacos Spring Boot Starter
DESCRIPTION: Add Nacos registry support through Spring Boot starter.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo</groupId>
  <artifactId>dubbo-nacos-spring-boot-starter</artifactId>
</dependency>

----------------------------------------

TITLE: Defining User Class in Java
DESCRIPTION: Java class definition for the User object, implementing Serializable.

LANGUAGE: java
CODE:
public class User implements Serializable {

    private String name;

    private int age;

    ......
}

----------------------------------------

TITLE: Retrieving Activated Filter Extensions in Java
DESCRIPTION: Example of calling getActivateExtension() method to retrieve activated Filter extensions based on URL, key and group.

LANGUAGE: Java
CODE:
List<Filter> filters;
filters = ScopeModelUtil.getExtensionLoader(Filter.class, moduleModels.get(0)).getActivateExtension(url, key, group);

----------------------------------------

TITLE: Implementing BusinessService in Java with Seata
DESCRIPTION: This code implements the BusinessService interface, demonstrating the use of the @GlobalTransactional annotation for distributed transactions with Seata.

LANGUAGE: java
CODE:
public class BusinessServiceImpl implements BusinessService {

    private StorageService storageService;

    private OrderService orderService;

    /**
     * Purchase
     */
    @GlobalTransactional
    public void purchase(String userId, String commodityCode, int orderCount) {

        storageService.deduct(commodityCode, orderCount);

        orderService.create(userId, commodityCode, orderCount);
    }
}

----------------------------------------

TITLE: Defining Server Configuration in YAML
DESCRIPTION: YAML configuration for the Dubbo-Go server, specifying registry, protocols, and provider services.

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    demoZK:
      protocol: zookeeper
      timeout: 10s
      address: 127.0.0.1:2181
  protocols:
    tripleProtocol:
      name: tri
      port: 20000
  provider:
    services:
      GreetTripleServer:
        interface: com.apache.dubbo.sample.Greeter

----------------------------------------

TITLE: Defining External Configuration Properties for Dubbo
DESCRIPTION: Example of external configuration properties for Dubbo in a properties file.

LANGUAGE: Properties
CODE:
dubbo.application.name=foo
dubbo.application.owner=bar
dubbo.registry.address=10.20.153.10:9090

----------------------------------------

TITLE: Disabling Sentinel Consumer Filter Configuration
DESCRIPTION: Java configuration to disable the default Sentinel consumer filter if needed using ConsumerConfig bean.

LANGUAGE: java
CODE:
@Bean
public ConsumerConfig consumerConfig() {
    ConsumerConfig consumerConfig = new ConsumerConfig();
    consumerConfig.setFilter("-sentinel.dubbo.consumer.filter");
    return consumerConfig;
}

----------------------------------------

TITLE: Configuring Nacos Discovery in APISIX
DESCRIPTION: This snippet demonstrates how to add Nacos registry configuration to the config.yaml file for APISIX.

LANGUAGE: yaml
CODE:
discovery:
  nacos:
    host:
      - "http://192.168.33.1:8848"

----------------------------------------

TITLE: ExtensionLoader.injectExtension Method Implementation
DESCRIPTION: Method for performing dependency injection on extension instances in Dubbo SPI.

LANGUAGE: java
CODE:
private T injectExtension(T instance) {
    try {
        if (objectFactory != null) {
            for (Method method : instance.getClass().getMethods()) {
                if (method.getName().startsWith("set")
                    && method.getParameterTypes().length == 1
                    && Modifier.isPublic(method.getModifiers())) {
                    Class<?> pt = method.getParameterTypes()[0];
                    try {
                        String property = method.getName().length() > 3 ? 
                            method.getName().substring(3, 4).toLowerCase() + 
                            	method.getName().substring(4) : "";
                        Object object = objectFactory.getExtension(pt, property);
                        if (object != null) {
                            method.invoke(instance, object);
                        }
                    } catch (Exception e) {
                        logger.error("fail to inject via method...");
                    }
                }
            }
        }
    } catch (Exception e) {
        logger.error(e.getMessage(), e);
    }
    return instance;
}

----------------------------------------

TITLE: User-Based Routing VirtualService Configuration
DESCRIPTION: YAML configuration for user-identity based routing that directs traffic from user 'jason' to v2 of the reviews service while all other users are routed to v1.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Compiling Dubbo-go Interface
DESCRIPTION: Generate pb.go files from the proto file using the protoc compiler.

LANGUAGE: bash
CODE:
$ make proto-gen
protoc --go_out=./api --go-triple_out=./api ./api/api.proto

----------------------------------------

TITLE: Setting ApplicationConfig in ConfigManager
DESCRIPTION: The setApplication method in ConfigManager that adds the ApplicationConfig to the configuration cache.

LANGUAGE: java
CODE:
@DisableInject
public void setApplication(ApplicationConfig application) {
    addConfig(application);
}

----------------------------------------

TITLE: Implementing Dubbo Service Consumer Bootstrap in Java
DESCRIPTION: Example of bootstrapping a Dubbo service consumer and making a remote call.

LANGUAGE: Java
CODE:
public class ConsumerBootstrap {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);
        context.start();
        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);
        String hello = greetingServiceConsumer.doSayHello("annotation");
        System.out.println("result: " + hello);
    }
}

----------------------------------------

TITLE: Installing GPG on Mac OS
DESCRIPTION: Shell commands to install GPG signing tools using brew package manager

LANGUAGE: shell
CODE:
$ brew install gpg
$ gpg --version # check version, should be 2.x

----------------------------------------

TITLE: Defining Clock Interface in Dubbo Go
DESCRIPTION: Defines the Clock interface, which provides abstractions for getting timestamps and time periods.

LANGUAGE: Go
CODE:
type Clock interface {
	GetTimestamp() int64
	GetCycleTime(duration time.Duration, fixed int64) int64
}

----------------------------------------

TITLE: Istio DestinationRule Configuration
DESCRIPTION: Istio DestinationRule defining subsets for v1 and v2 versions of the Dubbo-go server

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: dubbo-go-server
spec:
  host: dubbo-go-server
  subsets:
    - name: v1
      labels:
        dubbogoAppVersion: v1
    - name: v2
      labels:
        dubbogoAppVersion: v2

----------------------------------------

TITLE: Building and Deploying Dubbo Application
DESCRIPTION: Commands to build Docker image, generate Kubernetes manifests and deploy the application

LANGUAGE: shell
CODE:
dubboctl build --dockerfile=./Dockerfile
dubboctl deploy
kubectl apply -f ./kube.yaml

----------------------------------------

TITLE: Running Triple REST Example with Maven
DESCRIPTION: Commands to download, build and run the Dubbo Triple REST example application

LANGUAGE: bash
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git
cd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic
mvn spring-boot:run
# Or package and run
mvn clean package -DskipTests
java -jar target/dubbo-samples-triple-rest-basic-1.0.0-SNAPSHOT.jar

----------------------------------------

TITLE: View Recent Router Snapshots
DESCRIPTION: Command to obtain historical router status records. The system stores up to 32 recent results showing detailed router chain information.

LANGUAGE: shell
CODE:
dubbo>getRecentRouterSnapshot
1658224330156 - Router snapshot service com.dubbo.dubbointegration.BackendService from registry 172.18.111.184 on the consumer 172.18.111.184 using the dubbo version 3.0.9 is below: 
[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) ] Input: 172.18.111.187:20880,172.18.111.183:20880 -> Chain Node Output: 172.18.111.187:20880,172.18.111.183:20880
  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 2) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 172.18.111.187:20880,172.18.111.183:20880

----------------------------------------

TITLE: Configuring Interface-Level Load Balancing in Dubbo
DESCRIPTION: Shows how to configure load balancing for specific service interfaces. Includes examples of both generic configuration method and strategy-specific helper method.

LANGUAGE: go
CODE:
cli, err := client.NewClient(
	//...
)

svc, err := greet.NewGreetService(cli, client.WithLoadBalance("roundrobin"))

LANGUAGE: go
CODE:
cli, err := client.NewClient(
	//...
)

svc, err := greet.NewGreetService(cli, client.WithLoadBalanceRoundRobin())

----------------------------------------

TITLE: Configuring Dubbo Service in XML
DESCRIPTION: This XML configuration exposes the Dubbo service, setting up the application, registry, protocol, and service interface.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- Provider application information, used for dependency calculation -->
    <dubbo:application name="demo-provider"/>

    <dubbo:registry protocol="zookeeper" address="localhost:2181"/>

    <!-- Expose the service on port 20880 using the dubbo protocol -->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!-- Implement the service like a local bean -->
    <bean id="demoProvider" class="com.alibaba.dubbo.demo.provider.DemoProviderImpl"/>

    <!-- Declare the service interface that needs to be exposed -->
    <dubbo:service interface="com.alibaba.dubbo.demo.DemoProvider" ref="demoProvider" version="1.0.0"/>

</beans>

----------------------------------------

TITLE: Defining Dubbo Protocol Request Body in JSON
DESCRIPTION: Example JSON file defining the request body structure for debugging a Dubbo protocol interface.

LANGUAGE: json
CODE:
{
  "ID": "string@A000",
  "Male": "bool@true",
  "SubInfo": {
    "SubID": "string@A001",
    "SubMale": "bool@false",
    "SubAge": "int@18",
    "JavaClassName":"string@com.ikurento.user.SubInfo"
  },
  "JavaClassName": "string@com.ikurento.user.CallUserStruct"
}

----------------------------------------

TITLE: MetadataService Response Format
DESCRIPTION: Example of the data format returned by MetadataService.

LANGUAGE: JSON
CODE:
[
  "dubbo://192.168.0.102:20880/org.apache.dubbo.demo.DemoService?anyhost=true&application=demo-provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.demo.DemoService&methods=sayHello&pid=9585&release=2.7.5&side=provider&timestamp=1583469714314", 
 "dubbo://192.168.0.102:20880/org.apache.dubbo.demo.HelloService?anyhost=true&application=demo-provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.demo.DemoService&methods=sayHello&pid=9585&release=2.7.5&side=provider&timestamp=1583469714314",
  "dubbo://192.168.0.102:20880/org.apache.dubbo.demo.WorldService?anyhost=true&application=demo-provider&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=org.apache.dubbo.demo.DemoService&methods=sayHello&pid=9585&release=2.7.5&side=provider&timestamp=1583469714314"
]

----------------------------------------

TITLE: Enabling Deadline Mechanism for Specific Service in Java
DESCRIPTION: Activates the deadline mechanism for a specific service call using the @DubboReference annotation.

LANGUAGE: java
CODE:
@DubboReference(timeout=5000, parameters={"enable-timeout-countdown", "true"})
private DemoService demoService;

----------------------------------------

TITLE: Configuring ZooKeeper as Configuration Center in YAML
DESCRIPTION: This YAML snippet shows how to configure ZooKeeper as the configuration center in dubbo-go, specifying the protocol and address.

LANGUAGE: YAML
CODE:
config_center:
  protocol: "zookeeper"
  address: "127.0.0.1:2181"

----------------------------------------

TITLE: Defining and Implementing a Hello World Component in Go
DESCRIPTION: Example of defining a Hello component interface and implementing it using the proposed programming model. The component is initialized and its Greet method is called.

LANGUAGE: Go
CODE:
type Hello interface {
  Greet(ctx context.Context, name string) (string, error)
}

type hello struct {
  Implements[Hello]
}

func (h *hello) Greet(ctx context.Context, name string) (string, error) {
  return fmt.Sprintf("Hello, %s!", name), nil
}

func main() {
  Init()
  hello := Get[Hello]()
  greeting, _ := hello.Greet(context.Background(), "World")
  fmt.Println(greeting)
}

----------------------------------------

TITLE: AdaptiveExtensionFactory Class in Java
DESCRIPTION: Implements the ExtensionFactory interface and uses the @Adaptive annotation. It iterates through available ExtensionFactory implementations to load extensions.

LANGUAGE: Java
CODE:
@Adaptive
public class AdaptiveExtensionFactory implements ExtensionFactory {

    private final List<ExtensionFactory> factories;

    public AdaptiveExtensionFactory() {
        ExtensionLoader<ExtensionFactory> loader = ExtensionLoader.getExtensionLoader(ExtensionFactory.class);
        List<ExtensionFactory> list = new ArrayList<ExtensionFactory>();
        for (String name : loader.getSupportedExtensions()) {
            list.add(loader.getExtension(name));
        }
        factories = Collections.unmodifiableList(list);
    }

    public <T> T getExtension(Class<T> type, String name) {
        for (ExtensionFactory factory : factories) {
            T extension = factory.getExtension(type, name);
            if (extension != null) {
                return extension;
            }
        }
        return null;
    }
}

----------------------------------------

TITLE: Router Status Log Example
DESCRIPTION: Shows a real-world example of router status logging including mock invoker selection, mesh rule routing, and tag state routing

LANGUAGE: log
CODE:
[19/07/22 07:42:46:046 CST] main  WARN cluster.RouterChain:  [DUBBO] No provider available after route for the service org.apache.dubbo.samples.governance.api.DemoService from registry 30.227.64.173 on the consumer 30.227.64.173 using the dubbo version 3.0.7. Router snapshot is below: 
[ Parent (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) ] Input: 30.227.64.173:20881,30.227.64.173:20880 -> Chain Node Output: Empty
  [ MockInvokersSelector (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) Router message: invocation.need.mock not set. Return normal Invokers. ] Current Node Output: 30.227.64.173:20881,30.227.64.173:20880
    [ StandardMeshRuleRouter (Input: 2) (Current Node Output: 2) (Chain Node Output: 0) Router message: MeshRuleCache has not been built. Skip route. ] Current Node Output: 30.227.64.173:20881,30.227.64.173:20880
      [ TagStateRouter (Input: 2) (Current Node Output: 0) (Chain Node Output: 0) Router message: FAILOVER: return all Providers without any tags ] Current Node Output: Empty, dubbo version: 3.0.7, current host: 30.227.64.173

----------------------------------------

TITLE: Configuring Config Center
DESCRIPTION: XML configuration example for setting up zookeeper as configuration center in Dubbo 2.7.

LANGUAGE: XML
CODE:
<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>

----------------------------------------

TITLE: Configuring ReadinessProbe Extension in Dubbo
DESCRIPTION: Configuration file for registering a custom ReadinessProbe implementation with Dubbo. This file should be placed in the META-INF/dubbo directory of the project.

LANGUAGE: plaintext
CODE:
xxx=com.xxx.XxxReadinessProbe

----------------------------------------

TITLE: Defining REST-style Service with JAX-RS Annotations
DESCRIPTION: Example of defining a REST-style Dubbo service using JAX-RS annotations. This is an alternative to Spring MVC annotations for publishing HTTP services.

LANGUAGE: java
CODE:
@Path("/demo")
public interface DemoService {
    @GET
	@Path("/hello")
    String sayHello();
}

----------------------------------------

TITLE: Defining Dubbo Protocol SPI Extensions
DESCRIPTION: This snippet shows the SPI configuration for common Dubbo protocols, including the default 'dubbo' and 'tri' protocols.

LANGUAGE: properties
CODE:
# Common protocols supported by Dubbo
dubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol
tri=org.apache.dubbo.rpc.protocol.tri.TripleProtocol

----------------------------------------

TITLE: Configuring Apollo-specific Parameters in Dubbo
DESCRIPTION: Properties configuration for setting Apollo-specific parameters in Dubbo's config center.

LANGUAGE: properties
CODE:
dubbo.config-center.address=apollo://localhost:8080

dubbo.config-center.prameters.apollo.meta=xxx
dubbo.config-center.prameters.env=xxx

----------------------------------------

TITLE: Querying Logging Configuration in Dubbo using Telnet
DESCRIPTION: This snippet demonstrates how to use the 'loggerInfo' command to query the current logging configuration in Dubbo. It shows the available logger adapters, the current adapter in use, and the current log level.

LANGUAGE: bash
CODE:
> telnet 127.0.0.1 22222
> loggerInfo

----------------------------------------

TITLE: Configuring FST Serialization in Properties File
DESCRIPTION: This snippet shows various ways to configure FST serialization in a dubbo.properties file.

LANGUAGE: properties
CODE:
dubbo.protocol.serialization=fst

# or
dubbo.consumer.serialization=fst

# or
dubbo.reference.com.demo.DemoService.serialization=fst

----------------------------------------

TITLE: Specifying Triple Protocol for Consumer in Dubbo XML
DESCRIPTION: XML configuration snippet showing how to explicitly specify the Triple protocol for a consumer reference in Dubbo. This is an alternative to the Java annotation method.

LANGUAGE: xml
CODE:
<dubbo:reference protocol="tri" />

----------------------------------------

TITLE: Implementing Routing Logic in JavaScript for Dubbo
DESCRIPTION: Defines the routing logic in JavaScript. This function filters invokers based on their host address, returning only those matching a specific IP.

LANGUAGE: javascript
CODE:
(function route(invokers,invocation,context) {
      var result = new java.util.ArrayList(invokers.size());
      for (i = 0; i < invokers.size(); i ++) {
          if ("10.20.3.3".equals(invokers.get(i).getUrl().getHost())) {
              result.add(invokers.get(i));
          }
      }
      return result;
  } (invokers, invocation, context));

----------------------------------------

TITLE: Service-Level Registration Example in JSON
DESCRIPTION: Example JSON structure showing service-level registration model used in Dubbo-go prior to v1.5.0. It demonstrates how services and their instances were registered.

LANGUAGE: json
CODE:
{
"com.xxx.User":[
  {"name":"instance1", "ip":"127.0.0.1", "metadata":{"timeout":1000}},
  {"name":"instance2", "ip":"127.0.0.2", "metadata":{"timeout":2000}},
  {"name":"instance3", "ip":"127.0.0.3", "metadata":{"timeout":3000}}
]
}

----------------------------------------

TITLE: Main Program Implementation
DESCRIPTION: Implements the main client program that loads configuration and makes service calls.

LANGUAGE: go
CODE:
func main() {
	config.Load()
	time.Sleep(3 * time.Second)

	gxlog.CInfo("\n\n\nstart to test dubbo")
	user := &pkg.User{}
	err := userProvider.GetUser(context.TODO(), []interface{}{"A001"}, user)
	if err != nil {
		gxlog.CError("error: %v\n", err)
		os.Exit(1)
		return
	}
	gxlog.CInfo("response result: %v\n", user)
}

----------------------------------------

TITLE: Installing Dubbo-go Debug Tools
DESCRIPTION: Command to install all Dubbo-go debug tools to $GOPATH/bin using dubbogo-cli.

LANGUAGE: shell
CODE:
dubbogo-cli install all

----------------------------------------

TITLE: Importing Dubbo-go Components in Go
DESCRIPTION: This snippet demonstrates how to import all built-in modules of Dubbo-go using a single import statement. This is typically done in the main application to ensure all necessary components are loaded.

LANGUAGE: Go
CODE:
import (
	_ "dubbo.apache.org/dubbo-go/v3/imports"
)

----------------------------------------

TITLE: APISIX Plugin Configuration in YAML
DESCRIPTION: Configuration to enable the dubbo-proxy plugin in APISIX config.yaml.

LANGUAGE: yaml
CODE:
plugins:
  - ... # plugin you need
  - dubbo-proxy

----------------------------------------

TITLE: Defining Dubbo Protocol SPI Extensions
DESCRIPTION: This snippet shows the SPI configuration for common Dubbo protocols, including the default 'dubbo' and 'tri' protocols.

LANGUAGE: properties
CODE:
# Common protocols supported by Dubbo
dubbo=org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol
tri=org.apache.dubbo.rpc.protocol.tri.TripleProtocol

----------------------------------------

TITLE: Cloning Sample Project
DESCRIPTION: Commands to clone and navigate to the Dubbo sample project directory

LANGUAGE: shell
CODE:
$ git clone -b master --depth 1 https://github.com/apache/dubbo-samples
$ cd dubbo-samples/11-quickstart

----------------------------------------

TITLE: Configuring Dubbo Provider with Spring Annotations
DESCRIPTION: Configure a Dubbo service provider using Spring annotations. This class enables Dubbo, sets up property sources, and bootstraps the application context.

LANGUAGE: Java
CODE:
package com.alibaba.dubbo.demo.provider;

import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;
import com.alibaba.dubbo.demo.service.DemoService;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.PropertySource;

import java.io.IOException;

/**
 * {@link DemoService} provider demo
 */
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.demo.service")
@PropertySource(value = "classpath:/provider-config.properties")
public class DemoServiceProviderBootstrap {

    public static void main(String[] args) throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
        context.register(DemoServiceProviderBootstrap.class);
        context.refresh();
        System.out.println("DemoService provider is starting...");
        System.in.read();
    }
}

----------------------------------------

TITLE: Configuring Dynamic Migration Rules for Dubbo3
DESCRIPTION: Configure dynamic migration rules using a configuration center like Nacos. The key is the application name + '.migration', and the group is DUBBO_SERVICEDISCOVERY_MIGRATION.

LANGUAGE: yaml
CODE:
step: FORCE_INTERFACE

LANGUAGE: yaml
CODE:
key: demo-consumer
step: APPLICATION_FIRST
applications:
 - name: demo-provider
   step: FORCE_APPLICATION
services:
 - serviceKey: org.apache.dubbo.config.api.DemoService:1.0.0
   step: FORCE_INTERFACE

----------------------------------------

TITLE: Implementing OrderService in Java
DESCRIPTION: Implements the OrderService interface with a method to create an order, debit the account, and insert the order using a DAO.

LANGUAGE: java
CODE:
public class OrderServiceImpl implements OrderService {

    private OrderDAO orderDAO;

    private AccountService accountService;

    public Order create(String userId, String commodityCode, int orderCount) {

        int orderMoney = calculate(commodityCode, orderCount);

        accountService.debit(userId, orderMoney);

        Order order = new Order();
        order.userId = userId;
        order.commodityCode = commodityCode;
        order.count = orderCount;
        order.money = orderMoney;

        return orderDAO.insert(order);
    }
}

----------------------------------------

TITLE: Generating SHA512 and ASC Signatures
DESCRIPTION: Commands to generate SHA512 and ASC signatures for release artifacts.

LANGUAGE: shell
CODE:
$ shasum -a 512 apache-dubbo-${release_version}-src.zip >> apache-dubbo-${release_version}-src.zip.sha512
$ shasum -b -a 512 apache-dubbo-${release_version}-bin.zip >> apache-dubbo-${release_version}-bin.zip.sha512
$ gpg --armor --output apache-dubbo-${release_version}-src.zip.asc --detach-sig apache-dubbo-${release_version}-src.zip

----------------------------------------

TITLE: Dubbo多实例使用示例（Java）
DESCRIPTION: 演示了如何使用Dubbo的新多实例功能。包括创建多个DubboBootstrap实例，配置不同的应用和模块，以及发布和订阅服务。这个例子展示了如何在同一JVM中运行多个隔离的Dubbo实例。

LANGUAGE: java
CODE:
    ServiceConfig<DemoService> service = new ServiceConfig<>();
    service.setInterface(DemoService.class);
    service.setRef(new DemoServiceImpl());

    ReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();
    reference1.setInterface(DemoService.class);

    ReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();
    reference2.setInterface(DemoService.class);

	// 创建一个启动器（自动创建新 ApplicationModel）
    DubboBootstrap bootstrap1 = DubboBootstrap.newInstance();
	// 指定应用名
    bootstrap1.application(new ApplicationConfig("dubbo-demo-app-1"))
        .registry(new RegistryConfig("nacos://localhost:8848"))
        // 创建一个模块
        .newModule()
        	// 在模块内发布服务
    		.service(service)
        .endModule()
        // 创建一个模块
        .newModule()
        	// 在模块内订阅服务
    		.reference(reference1)
        .endModule()
        .start();

	// 创建一个启动器（自动创建新 ApplicationModel）
    DubboBootstrap bootstrap2 = DubboBootstrap.newInstance();
	// 指定应用名
    bootstrap2.application(new ApplicationConfig("dubbo-demo-app-2"))
        .registry(new RegistryConfig("nacos://localhost:8848"))
        // 创建一个模块
        .newModule()
        	// 在模块内订阅服务
    		.reference(reference2)
        .endModule()
        .start();

	// stub1 与 stub2 是两个独立的订阅，互相隔离

	// 订阅的 stub
    DemoService stub1 = reference1.get();
    System.out.println(stub1.sayHello("Hello World!"));

	// 订阅的 stub
    DemoService stub2 = reference2.get();
    System.out.println(stub2.sayHello("Hello World!"));

    bootstrap1.stop();
    bootstrap2.stop();

----------------------------------------

TITLE: Installing Dubbo-Python Package
DESCRIPTION: Commands for installing Dubbo-Python either directly via pip or from source code

LANGUAGE: sh
CODE:
pip install apache-dubbo

LANGUAGE: sh
CODE:
git clone https://github.com/apache/dubbo-python.git
cd dubbo-python && pip install .

----------------------------------------

TITLE: Custom Brave Tracer Configuration
DESCRIPTION: Custom dependency configuration for using Brave as tracer with Zipkin reporter

LANGUAGE: yml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-observability-starter</artifactId>
    <version>${version}</version>
</dependency>
<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-brave</artifactId>
    <version>${version}</version>
</dependency>
<dependency>
    <groupId>io.zipkin.reporter2</groupId>
    <artifactId>zipkin-reporter-brave</artifactId>
    <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Cloning Dubbo Website Repository
DESCRIPTION: Command to clone the Apache Dubbo website repository from GitHub.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/dubbo-website.git

----------------------------------------

TITLE: Running Triple HTTP/3 Example
DESCRIPTION: Commands for downloading and running the Triple HTTP/3 protocol support example

LANGUAGE: bash
CODE:
# Get example code
git clone --depth=1 https://github.com/apache/dubbo-samples.git
cd dubbo-samples/2-advanced/dubbo-samples-triple-http3
# Run directly
mvn spring-boot:run

----------------------------------------

TITLE: Using DubboBootstrap API for Simplified Configuration of Dubbo Provider
DESCRIPTION: Demonstrates the use of DubboBootstrap API for simplified configuration and better control over the startup process of a Dubbo service provider. It supports batch publishing of service interfaces and better supports Dubbo 3's application-level service discovery.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoProvider {
    public static void main(String[] args) {

        ConfigCenterConfig configCenter = new ConfigCenterConfig();
        configCenter.setAddress("zookeeper://127.0.0.1:2181");

        // 服务提供者协议配置
        ProtocolConfig protocol = new ProtocolConfig();
        protocol.setName("dubbo");
        protocol.setPort(12345);
        protocol.setThreads(200);

        // 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口
        // 服务提供者暴露服务配置
        ServiceConfig<DemoService> demoServiceConfig = new ServiceConfig<>();
        demoServiceConfig.setInterface(DemoService.class);
        demoServiceConfig.setRef(new DemoServiceImpl());
        demoServiceConfig.setVersion("1.0.0");
        
        // 第二个服务配置
        ServiceConfig<FooService> fooServiceConfig = new ServiceConfig<>();
        fooServiceConfig.setInterface(FooService.class);
        fooServiceConfig.setRef(new FooServiceImpl());
        fooServiceConfig.setVersion("1.0.0");
        
        ...

        // 通过DubboBootstrap简化配置组装，控制启动过程
        DubboBootstrap.getInstance()
                .application("demo-provider") // 应用配置
                .registry(new RegistryConfig("zookeeper://127.0.0.1:2181")) // 注册中心配置
                .protocol(protocol) // 全局默认协议配置
                .service(demoServiceConfig) // 添加ServiceConfig
                .service(fooServiceConfig)
                .start()    // 启动Dubbo
                .await();   // 挂起等待(防止进程退出）
    }
}

----------------------------------------

TITLE: Implementing JSON Client in Dubbo Python
DESCRIPTION: Client-side implementation using JSON serialization with ORJSON in Dubbo. Shows custom serialization functions and service stub creation.

LANGUAGE: python
CODE:
def request_serializer(data: Dict) -> bytes:
    return orjson.dumps(data)


def response_deserializer(data: bytes) -> Dict:
    return orjson.loads(data)


class GreeterServiceStub:
    def __init__(self, client: dubbo.Client):
        self.unary = client.unary(
            method_name="unary",
            request_serializer=request_serializer,
            response_deserializer=response_deserializer,
        )

    def say_hello(self, request):
        return self.unary(request)


if __name__ == "__main__":
    reference_config = ReferenceConfig.from_url(
        "tri://127.0.0.1:50051/org.apache.dubbo.samples.serialization.json"
    )
    dubbo_client = dubbo.Client(reference_config)

    stub = GreeterServiceStub(dubbo_client)
    result = stub.say_hello({"name": "world"})
    print(result)

----------------------------------------

TITLE: Application-Level Service Discovery Data
DESCRIPTION: Example of data registered in Zookeeper for application-level service discovery.

LANGUAGE: JSON
CODE:
{
	"name": "demo-provider",
	"id": "192.168.0.103:20880",
	"address": "192.168.0.103",
	"port": 20880,
  "metadata": {
    "dubbo.endpoints": "[{\"port\":20880,\"protocol\":\"dubbo\"}]",
    "dubbo.metadata.storage-type": "local",
    "dubbo.revision": "6785535733750099598"
  },
	"time": 1583461240877
}

----------------------------------------

TITLE: Configuring TLS for Dubbo Provider in Java
DESCRIPTION: This snippet demonstrates how to configure TLS for a Dubbo provider. It includes setting up the SSL configuration with server certificates and optionally enabling mutual TLS authentication.

LANGUAGE: java
CODE:
SslConfig sslConfig = new SslConfig();
sslConfig.setServerKeyCertChainPath("path to cert");
sslConfig.setServerPrivateKeyPath(args[1]);
// If mutual cert authentication is enabled
if (mutualTls) {
  sslConfig.setServerTrustCertCollectionPath(args[2]);
}

ProtocolConfig protocolConfig = new ProtocolConfig("dubbo/grpc");
protocolConfig.setSslEnabled(true);

----------------------------------------

TITLE: Enabling Sticky Connections in Dubbo XML
DESCRIPTION: Configures sticky connections for stateful services, ensuring clients always call the same provider unless it fails. This automatically enables lazy connections to reduce long-lived connections.

LANGUAGE: xml
CODE:
<dubbo:reference id="xxxService" interface="com.xxx.XxxService" sticky="true" />

LANGUAGE: xml
CODE:
<dubbo:reference id="xxxService" interface="com.xxx.XxxService">
    <dubbo:method name="sayHello" sticky="true" />
</dubbo:reference>

----------------------------------------

TITLE: Creating Business Tables in SQL
DESCRIPTION: SQL scripts to create tables for storage, order, and account services in the example business scenario.

LANGUAGE: sql
CODE:
DROP TABLE IF EXISTS `storage_tbl`;
CREATE TABLE `storage_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `commodity_code` varchar(255) DEFAULT NULL,
  `count` int(11) DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY (`commodity_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `order_tbl`;
CREATE TABLE `order_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) DEFAULT NULL,
  `commodity_code` varchar(255) DEFAULT NULL,
  `count` int(11) DEFAULT 0,
  `money` int(11) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `account_tbl`;
CREATE TABLE `account_tbl` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) DEFAULT NULL,
  `money` int(11) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Configuring TLS for Dubbo Provider in Java
DESCRIPTION: This snippet demonstrates how to configure TLS for a Dubbo provider. It includes setting up the SSL configuration with server certificates and optionally enabling mutual TLS authentication.

LANGUAGE: java
CODE:
SslConfig sslConfig = new SslConfig();
sslConfig.setServerKeyCertChainPath("path to cert");
sslConfig.setServerPrivateKeyPath(args[1]);
// If mutual cert authentication is enabled
if (mutualTls) {
  sslConfig.setServerTrustCertCollectionPath(args[2]);
}

ProtocolConfig protocolConfig = new ProtocolConfig("dubbo/grpc");
protocolConfig.setSslEnabled(true);

----------------------------------------

TITLE: Specifying IP Address for Dubbo Service Invocation in Java
DESCRIPTION: Java code demonstrating how to use UserSpecifiedAddressUtil to set a specific IP address for a Dubbo service invocation, including creating a new invoker if necessary.

LANGUAGE: java
CODE:
ReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>();
// ... init
DemoService demoService = referenceConfig.get();

// for invoke
// 1. find 10.10.10.10:20880 exist
// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)
UserSpecifiedAddressUtil.setAddress(new Address("10.10.10.10", 20880, true));
demoService.sayHello("world");


// for invoke
// 1. find 10.10.10.10:any exist
// 2. if not exist, create a invoker to 10.10.10.10:20880 if `needToCreate` is true (only support in Dubbo 3.x's implementation)
UserSpecifiedAddressUtil.setAddress(new Address("10.10.10.10", 0, true));
demoService.sayHello("world");

----------------------------------------

TITLE: Installing Dubbo Node.js Dependencies
DESCRIPTION: Installs the necessary Dubbo and Protocol Buffers related packages for Node.js development.

LANGUAGE: Shell
CODE:
npm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo

----------------------------------------

TITLE: Port Forwarding Grafana Service in Kubernetes
DESCRIPTION: This command sets up port forwarding for the Grafana service, allowing access to the Grafana console from localhost:3000.

LANGUAGE: sh
CODE:
$ kubectl port-forward service/grafana 3000:3000

----------------------------------------

TITLE: Verifying Dubbo-go Deployments in Istio
DESCRIPTION: Uses kubectl commands to check the status of deployed applications and view client logs.

LANGUAGE: Bash
CODE:
$ kubectl get deployment
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
dubbo-go-client-v1   1/1     1            1           22m
dubbo-go-server-v1   1/1     1            1           49m

$ kubectl get pods  | grep client | awk '{print $1}' | xargs kubectl logs
...
2022-04-07T04:13:55.777Z        INFO    cmd/app.go:29   call server response = name:"Hello laurence" id:"v1.0.0"
2022-04-07T04:13:56.778Z        INFO    cmd/app.go:29   call server response = name:"Hello laurence" id:"v1.0.0"

----------------------------------------

TITLE: Running Triple REST Example
DESCRIPTION: Commands for downloading and running the Triple REST example from the Dubbo samples repository

LANGUAGE: bash
CODE:
# Get the example code
git clone --depth=1 https://github.com/apache/dubbo-samples.git
cd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic
# Run
mvn spring-boot:run

----------------------------------------

TITLE: Testing Dubbo-Go RPC Server with cURL
DESCRIPTION: This cURL command tests the RPC server by sending a POST request to the Greet service.

LANGUAGE: shell
CODE:
$ curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:20000/greet.GreetService/Greet

----------------------------------------

TITLE: Defining Callback Service Interface in Java
DESCRIPTION: Defines the CallbackService interface with a method to add a listener.

LANGUAGE: java
CODE:
package com.callback;

public interface CallbackService {
    void addListener(String key, CallbackListener listener);
}

----------------------------------------

TITLE: Implementing Server-Side Streaming Handlers in Dubbo-go
DESCRIPTION: Server implementation showing handlers for unary and streaming RPC methods, including bidirectional streaming, client streaming, and server streaming.

LANGUAGE: go
CODE:
type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	resp := &greet.GreetResponse{Greeting: req.Name}
	return resp, nil
}

func (srv *GreetTripleServer) GreetStream(ctx context.Context, stream greet.GreetService_GreetStreamServer) error {
	for {
		req, err := stream.Recv()
		if err != nil {
			if triple.IsEnded(err) {
				break
			}
			return fmt.Errorf("triple BidiStream recv error: %s", err)
		}
		if err := stream.Send(&greet.GreetStreamResponse{Greeting: req.Name}); err != nil {
			return fmt.Errorf("triple BidiStream send error: %s", err)
		}
	}
	return nil
}

func (srv *GreetTripleServer) GreetClientStream(ctx context.Context, stream greet.GreetService_GreetClientStreamServer) (*greet.GreetClientStreamResponse, error) {
	var reqs []string
	for stream.Recv() {
		reqs = append(reqs, stream.Msg().Name)
	}
	if stream.Err() != nil && !triple.IsEnded(stream.Err()) {
		return nil, fmt.Errorf("triple ClientStream recv err: %s", stream.Err())
	}
	resp := &greet.GreetClientStreamResponse{
		Greeting: strings.Join(reqs, ","),
	}

	return resp, nil
}

func (srv *GreetTripleServer) GreetServerStream(ctx context.Context, req *greet.GreetServerStreamRequest, stream greet.GreetService_GreetServerStreamServer) error {
	for i := 0; i < 5; i++ {
		if err := stream.Send(&greet.GreetServerStreamResponse{Greeting: req.Name}); err != nil {
			return fmt.Errorf("triple ServerStream send err: %s", err)
		}
	}
	return nil
}

----------------------------------------

TITLE: Old Consumer Configuration
DESCRIPTION: Example of the old Dubbo consumer configuration using interface-level discovery.

LANGUAGE: XML
CODE:
<!-- 框架直接通过 RPC Service 1/2/N 去注册中心查询或订阅地址列表 -->
<dubbo:registry address="zookeeper://127.0.0.1:2181"/>
<dubbo:reference interface="RPC Service 1" />
<dubbo:reference interface="RPC Service 2" />
<dubbo:reference interface="RPC Service N" />

----------------------------------------

TITLE: Implementing Input Validation
DESCRIPTION: Shows how to implement input validation using Java Bean Validation annotations in Dubbo REST services.

LANGUAGE: Java
CODE:
public interface UserService {
   
    User getUser(@Min(value=1L, message="User ID must be greater than 1") Long id);
}

----------------------------------------

TITLE: Implementing JSON Server in Dubbo Python
DESCRIPTION: Server-side implementation using JSON serialization with ORJSON in Dubbo. Shows custom serialization functions and handler setup.

LANGUAGE: python
CODE:
def request_deserializer(data: bytes) -> Dict:
    return orjson.loads(data)


def response_serializer(data: Dict) -> bytes:
    return orjson.dumps(data)


def handle_unary(request):
    print(f"Received request: {request}")
    return {"message": f"Hello, {request['name']}"}


if __name__ == "__main__":
    method_handler = RpcMethodHandler.unary(
        handle_unary,
        request_deserializer=request_deserializer,
        response_serializer=response_serializer,
    )
    service_handler = RpcServiceHandler(
        service_name="org.apache.dubbo.samples.HelloWorld",
        method_handlers={"unary": method_handler},
    )

    service_config = ServiceConfig(service_handler)
    server = dubbo.Server(service_config).start()

    input("Press Enter to stop the server...\n")

----------------------------------------

TITLE: Configuring Client-side Concurrency Limit (Method Level) with Annotation
DESCRIPTION: Limits the concurrent calls to the sayHello method in DemoService to 10 per client using Java annotation.

LANGUAGE: Java
CODE:
@DubboReference(actives=10, methods = {@Method(name="sayHello",executes=10)})
private DemoService demoService;

----------------------------------------

TITLE: Implementing Dubbo Client
DESCRIPTION: TypeScript client implementation showing how to create and use a Dubbo promise client with transport configuration.

LANGUAGE: typescript
CODE:
import { createPromiseClient } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-node";

const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
  httpVersion: "1.1",
});

async function main() {
  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });
  const res = await client.say({ sentence: "Hello World" });
  console.log(res);
}
void main();

----------------------------------------

TITLE: Testing Dubbo-Go RPC Server with cURL
DESCRIPTION: This cURL command tests the RPC server by sending a POST request to the Greet service.

LANGUAGE: shell
CODE:
$ curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:20000/greet.GreetService/Greet

----------------------------------------

TITLE: Configuring Method-Level Mocking in Dubbo XML
DESCRIPTION: Demonstrates how to configure mocking for specific methods of a service interface using Dubbo's XML configuration.

LANGUAGE: xml
CODE:
<dubbo:reference id="demoService" check="false" interface="com.foo.BarService">
    <dubbo:parameter key="sayHello.mock" value="force:return fake"/>
</dubbo:reference>

----------------------------------------

TITLE: Configuring Dubbo Provider Defaults in XML
DESCRIPTION: Example of using the dubbo:provider element to set default configurations for Dubbo service providers. This element allows setting default values for service and protocol configurations.

LANGUAGE: XML
CODE:
<dubbo:provider
  protocol="dubbo"
  threads="200"
  payload="8388608"
  server="netty"
  client="netty"
  codec="dubbo"
  serialization="hessian2"
  threadpool="fixed"
  accepts="0"
  timeout="1000"
  retries="2"
  loadbalance="random"
  async="false"
  token="false"
  registry=""
  dynamic="true"
  accesslog="false"
/>

----------------------------------------

TITLE: Sending application/xml request in HTTP
DESCRIPTION: Example of an application/xml HTTP request containing user data.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetXml HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/xml
Content-Length: 86
Accept: application/xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User>
    <username>JohnDoe</username>
    <location>New York</location>
</User>

----------------------------------------

TITLE: Building Dubbo Application
DESCRIPTION: Maven command to compile and package the Dubbo application.

LANGUAGE: bash
CODE:
./mvnw clean package

----------------------------------------

TITLE: Configuring YAML Frontmatter for Go Documentation in Dubbo
DESCRIPTION: This YAML frontmatter defines metadata for a Go documentation page in the Dubbo project. It specifies rendering options, description, manual link reference, title, document type, and weight for ordering.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Go
manualLinkRelref: ./#go
title: Go
type: docs
weight: 20

----------------------------------------

TITLE: Testing Java SPI Implementation
DESCRIPTION: Demonstrates how to use Java's ServiceLoader to load and test SPI implementations.

LANGUAGE: java
CODE:
public class JavaSPITest {

    @Test
    public void sayHello() throws Exception {
        ServiceLoader<Robot> serviceLoader = ServiceLoader.load(Robot.class);
        System.out.println("Java SPI");
        serviceLoader.forEach(Robot::sayHello);
    }
}

----------------------------------------

TITLE: Configuring Service-Level QPS Limiting
DESCRIPTION: Java code to configure QPS-based flow control rules at the service level, limiting the DemoService to 10 QPS.

LANGUAGE: java
CODE:
FlowRule flowRule = new FlowRule();
flowRule.setResource(DemoService.class.getName());
flowRule.setCount(10);
flowRule.setLimitApp("default");
flowRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
FlowRuleManager.loadRules(Collections.singletonList(flowRule));

----------------------------------------

TITLE: Deploying Dubbo Sample Application in Kubernetes
DESCRIPTION: This command applies a YAML configuration to deploy a sample Dubbo application for metrics collection in Kubernetes.

LANGUAGE: yaml
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/4-governance/dubbo-samples-metrics-spring-boot/Deployment.yml

----------------------------------------

TITLE: Virtual Service Configuration for Istio Routing
DESCRIPTION: This YAML snippet shows the configuration of virtual services for routing traffic to v1 of each microservice in the Bookinfo application.

LANGUAGE: yaml
CODE:
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  ...
  spec:
    hosts:
    - details
    http:
    - route:
      - destination:
          host: details
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  ...
  spec:
    hosts:
    - productpage
    http:
    - route:
      - destination:
          host: productpage
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  ...
  spec:
    hosts:
    - ratings
    http:
    - route:
      - destination:
          host: ratings
          subset: v1
- apiVersion: networking.istio.io/v1beta1
  kind: VirtualService
  ...
  spec:
    hosts:
    - reviews
    http:
    - route:
      - destination:
          host: reviews
          subset: v1

----------------------------------------

TITLE: Generated Java Interface from Protobuf
DESCRIPTION: Example of the Java interface generated by the Dubbo protoc plugin from the Protobuf IDL definition.

LANGUAGE: java
CODE:
// Generated by dubbo protoc plugin
public interface Greeter extends org.apache.dubbo.rpc.model.DubboStub {
    String JAVA_SERVICE_NAME = "org.apache.dubbo.springboot.demo.idl.Greeter";
    String SERVICE_NAME = "org.apache.dubbo.springboot.demo.idl.Greeter";

    org.apache.dubbo.springboot.demo.idl.GreeterReply greet(org.apache.dubbo.springboot.demo.idl.GreeterRequest request);
    // more generated codes here...
}

----------------------------------------

TITLE: Configuring Fastjson2 Serialization in Properties
DESCRIPTION: This Properties snippet shows multiple ways to configure Fastjson2 as the serialization method in a dubbo.properties file, including global, consumer, and service-specific settings.

LANGUAGE: Properties
CODE:
dubbo.protocol.serialization=fastjson2

# or
dubbo.consumer.serialization=fastjson2

# or
dubbo.reference.com.demo.DemoService.serialization=fastjson2

----------------------------------------

TITLE: Configuring TLS for Dubbo Provider in Java
DESCRIPTION: This snippet demonstrates how to set up TLS configuration for a Dubbo provider. It includes setting the server key certificate chain path, private key path, and optionally the trust certificate collection path for mutual TLS.

LANGUAGE: java
CODE:
SslConfig sslConfig = new SslConfig();
sslConfig.setServerKeyCertChainPath("path to cert");
sslConfig.setServerPrivateKeyPath(args[1]);
// 如果开启双向 cert 认证
if (mutualTls) {
  sslConfig.setServerTrustCertCollectionPath(args[2]);
}

ProtocolConfig protocolConfig = new ProtocolConfig("dubbo/grpc");
protocolConfig.setSslEnabled(true);

----------------------------------------

TITLE: Implementing Dubbo Client in Python
DESCRIPTION: Complete client implementation including stub creation and method invocation

LANGUAGE: python
CODE:
import dubbo
from dubbo.configs import ReferenceConfig

class UnaryServiceStub:
    def __init__(self, client: dubbo.Client):
        self.unary = client.unary(method_name="unary")

    def say_hello(self, message: bytes) -> bytes:
        return self.unary(message)

if __name__ == "__main__":
    # Create a client
    reference_config = ReferenceConfig.from_url(
        "tri://127.0.0.1:50051/org.apache.dubbo.samples.HelloWorld"
    )
    dubbo_client = dubbo.Client(reference_config)
    unary_service_stub = UnaryServiceStub(dubbo_client)

    # Call the remote method
    result = unary_service_stub.say_hello(b"Hello from client")
    print(result)

----------------------------------------

TITLE: Server Initialization and Service Registration
DESCRIPTION: Creates a new Dubbo server instance and registers the GreetService handler for handling incoming requests.

LANGUAGE: go
CODE:
srv, err := ins.NewServer()
if err != nil {
    panic(err)
}

if err := greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
    panic(err)
}

if err := srv.Serve(); err != nil {
    logger.Error(err)
}

----------------------------------------

TITLE: Implementing GET Method with Path Parameters
DESCRIPTION: Demonstrates how to implement a GET method with path parameters using JAX-RS annotations in Dubbo REST service.

LANGUAGE: Java
CODE:
@GET
@Path("/{id : \\d+}")
@Produces({MediaType.APPLICATION_JSON})
public User getUser(@PathParam("id") Long id) {
    // ...
}

----------------------------------------

TITLE: Configuring Redis Cluster Strategy in Dubbo
DESCRIPTION: XML configuration to set the Redis cluster strategy in Dubbo registry. The default strategy is 'failover'.

LANGUAGE: XML
CODE:
<dubbo:registry cluster="replicate" />

----------------------------------------

TITLE: Implementing DefaultMetricManager in Dubbo Go
DESCRIPTION: Shows the implementation of DefaultMetricManager, which uses MetricRegistry to manage Metric instances.

LANGUAGE: Go
CODE:
type DefaultMetricManager struct {
	registry MetricRegistry
}

----------------------------------------

TITLE: Configuring Dubbo-rust Dependencies in Cargo.toml
DESCRIPTION: Adds necessary dependencies for a Dubbo Rust project, including the dubbo and dubbo-config crates, as well as other required libraries for HTTP, async programming, and protocol buffers.

LANGUAGE: toml
CODE:
[package]
name = "example-greeter"
version = "0.1.0"
edition = "2021"

[[bin]]
name = "greeter-server"
path = "src/greeter/server.rs"

[[bin]]
name = "greeter-client"
path = "src/greeter/client.rs"

[dependencies]
http = "0.2"
http-body = "0.4.4"
futures-util = {version = "0.3", default-features = false}
tokio = { version = "1.0", features = [ "rt-multi-thread", "time", "fs", "macros", "net", "signal"] }
prost-derive = {version = "0.10", optional = true}
prost = "0.10.4"
async-trait = "0.1.56"
tokio-stream = "0.1"

dubbo = "0.1.0"
dubbo-config = "0.1.0"

[build-dependencies]
dubbo-build = "0.1.0"

----------------------------------------

TITLE: New Consumer Configuration
DESCRIPTION: Example of the new Dubbo consumer configuration using application-level discovery.

LANGUAGE: XML
CODE:
<!-- 框架需要通过额外的 provided-by="provider-app-x" 才能在注册中心查询或订阅到地址列表 -->
<dubbo:registry address="zookeeper://127.0.0.1:2181?registry-type=service"/>
<dubbo:reference interface="RPC Service 1" provided-by="provider-app-x"/>
<dubbo:reference interface="RPC Service 2" provided-by="provider-app-x" />
<dubbo:reference interface="RPC Service N" provided-by="provider-app-y" />

----------------------------------------

TITLE: Consuming Dubbo Service with Triple Protocol
DESCRIPTION: Client-side code to consume the Dubbo service using Triple protocol.

LANGUAGE: java
CODE:
public static void main(String[] args) throws IOException {
	ReferenceConfig<GreetingsService> reference =
			ReferenceBuilder.<GreetingsService>newBuilder()
			.interfaceClass(GreetingsService.class)
			.url("tri://localhost:50052")
			.build();
	DubboBootstrap.getInstance().reference(reference).start();
	GreetingsService service = reference.get();

	String message = service.sayHi("dubbo");
}

----------------------------------------

TITLE: Implementing HTTP Client in Go
DESCRIPTION: Go code example showing HTTP client implementation with Dubbo headers

LANGUAGE: go
CODE:
	url := "http://localhost:8883/UserService/com.dubbogo.pixiu.UserService/GetUserByName"
	data := "{\"types\":\"string\",\"values\":\"tc\"}"
	client := &http.Client{Timeout: 5 * time.Second}
	req, err := http.NewRequest("POST", url, strings.NewReader(data))
	req.Header.Set("x-dubbo-http1.1-dubbo-version", "1.0.0")
	req.Header.Set("x-dubbo-service-protocol", "dubbo")
	req.Header.Set("x-dubbo-service-version", "1.0.0")
	req.Header.Set("x-dubbo-service-group", "test")

	assert.NoError(t, err)
	req.Header.Add("Content-Type", "application/json")
	resp, err := client.Do(req)

----------------------------------------

TITLE: User-Based Routing Configuration for Istio
DESCRIPTION: This YAML snippet shows the configuration of a virtual service for routing traffic based on user identity, specifically routing user 'jason' to v2 of the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
...
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Setting Default Protocol Provider
DESCRIPTION: XML configuration to set Dubbo as the default protocol for providers.

LANGUAGE: xml
CODE:
<dubbo:provider protocol="dubbo" />

----------------------------------------

TITLE: Configuring Nacos Registry with Custom Namespace
DESCRIPTION: YAML configuration to set up Nacos registry with a custom namespace.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848?namespace=5cbb70a5-xxx-xxx-xxx-d43479ae0932

----------------------------------------

TITLE: Casting Dubbo Service to EchoService in Java
DESCRIPTION: This snippet demonstrates how to cast a Dubbo service reference to EchoService and perform an echo test. It uses the $echo method to send a test string and expects the same string as a response, verifying the service's availability and proper functioning.

LANGUAGE: java
CODE:
@DubboReference
private DemoService demoService;

LANGUAGE: java
CODE:
EchoService echoService = (EchoService) demoService;

String status = (String) echoService.$echo("OK");

----------------------------------------

TITLE: Configuring Tag Routing in YAML
DESCRIPTION: Example of tag routing configuration that tags services with specific IP addresses.

LANGUAGE: yaml
CODE:
configVersion: v1.0
force: false
enabled: true
key: application
tags:
  - name: local
    match:
      - key: ip
        value: 127.0.0.1

----------------------------------------

TITLE: Initializing Dubbo Rust Client with Unix Socket Connector
DESCRIPTION: Creates a ClientBuilder instance configured to use the Unix socket connector and specifies the host address.

LANGUAGE: rust
CODE:
let builder = ClientBuilder::new().with_connector("unix").with_host("unix://127.0.0.1:8888");
let mut cli = EchoClient::build(builder);

----------------------------------------

TITLE: Using Different Registries for Different Services in Dubbo XML Configuration
DESCRIPTION: Demonstrates how to configure different Dubbo services to use different registries. This example shows services for the Chinese site and international site using separate registries.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="world"  />
    <!-- 多注册中心配置 -->
    <dubbo:registry id="chinaRegistry" address="10.20.141.150:9090" />
    <dubbo:registry id="intlRegistry" address="10.20.154.177:9010" default="false" />
    <!-- 向中文站注册中心注册 -->
    <dubbo:service interface="com.alibaba.hello.api.HelloService" version="1.0.0" ref="helloService" registry="chinaRegistry" />
    <!-- 向国际站注册中心注册 -->
    <dubbo:service interface="com.alibaba.hello.api.DemoService" version="1.0.0" ref="demoService" registry="intlRegistry" />
</beans>

----------------------------------------

TITLE: Importing Interface Library with Rebar
DESCRIPTION: Add the dubbo_service interface library to your project's rebar.config file. Replace ${INTERFACE_LIB_URL} with the actual Git repository URL of your interface library.

LANGUAGE: erlang
CODE:
{deps, [
    {dubboerl, {git, "https://github.com/apache/dubbo-erlang.git", {branch, "master"}}},
    {dubbo_service,{git,"${INTERFACE_LIB_URL}",{branch,"master"}}}
]}.

----------------------------------------

TITLE: Protocol-Specific Service References
DESCRIPTION: Consumer-side protocol specification using @DubboReference annotations

LANGUAGE: java
CODE:
@DubboReference(protocol="dubbo")
private DemoService demoService;

LANGUAGE: java
CODE:
@DubboReference(protocol="tri")
private GreetingService greetingService;

----------------------------------------

TITLE: Implementing Goroutine Pool in Getty
DESCRIPTION: Code snippet showing the implementation of a fixed-size goroutine pool in the Getty library for improved performance.

LANGUAGE: Go
CODE:
type GrPool struct {
  taskQueues []chan Task
  workers    []*Worker
}

func (p *GrPool) Submit(task Task) {
  // Round-robin task distribution
  queueIndex := atomic.AddUint64(&p.nextQueue, 1) % uint64(len(p.taskQueues))
  p.taskQueues[queueIndex] <- task
}

----------------------------------------

TITLE: Installing dubbogo-cli with Go
DESCRIPTION: Command to install the dubbogo-cli tool to $GOPATH/bin using go install.

LANGUAGE: shell
CODE:
go install github.com/dubbogo/dubbogo-cli@latest

----------------------------------------

TITLE: Implementing Dubbo-Go Client
DESCRIPTION: Go code for the Dubbo-Go client, setting up the consumer service, loading configuration, and making a gRPC call.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"dubbo.apache.org/dubbo-go/v3"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/config_yaml/proto"
	"github.com/dubbogo/gost/log/logger"
)

var svc = new(greet.GreetServiceImpl)

func main() {
	greet.SetConsumerService(svc)
	if err := dubbo.Load(); err != nil {
		panic(err)
	}
	req, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "ConfigTest"})
	if err != nil || req.Greeting != "ConfigTest-Success" {
		panic(err)
	}
	logger.Info("ConfigTest successfully")
}

----------------------------------------

TITLE: Dubbo Consumer Properties
DESCRIPTION: Properties file for configuring the Dubbo consumer, including Zookeeper registry address.

LANGUAGE: properties
CODE:
dubbo.application.name=demo-consumer
dubbo.registry.address=zookeeper://$DOCKER_HOST:2181
dubbo.consumer.timeout=3000

----------------------------------------

TITLE: Installing ORJSON Package
DESCRIPTION: Command to install the ORJSON package for JSON serialization implementation.

LANGUAGE: shell
CODE:
pip install orjson

----------------------------------------

TITLE: Configuring Service Discovery Migration for Dubbo3 Consumer
DESCRIPTION: Configure the consumer to use application-level service discovery using the dubbo.application.service-discovery.migration property.

LANGUAGE: text
CODE:
dubbo.application.service-discovery.migration=APPLICATION_FIRST
# Possible values
# FORCE_INTERFACE, only consume interface-level addresses, error if none available, single subscription to 2.x addresses
# APPLICATION_FIRST, smart decision between interface-level/application-level addresses, dual subscription
# FORCE_APPLICATION, only consume application-level addresses, error if none available, single subscription to 3.x addresses

LANGUAGE: java
CODE:
System.setProperty("dubbo.application.service-discovery.migration", "APPLICATION_FIRST");

LANGUAGE: java
CODE:
ReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>(applicationModel.newModule());
referenceConfig.setInterface(DemoService.class);
referenceConfig.setParameters(new HashMap<>());
referenceConfig.getParameters().put("migration.step", mode);
return referenceConfig.get();

----------------------------------------

TITLE: Installing Zipkin for Dubbo using Kubernetes
DESCRIPTION: This command creates Zipkin resources in a Kubernetes cluster using a configuration file provided by the Dubbo community. It's a quick way to set up Zipkin for testing or demonstration purposes with Dubbo.

LANGUAGE: bash
CODE:
kubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/zipkin.yaml

----------------------------------------

TITLE: Configuring Thrift Protocol in Dubbo
DESCRIPTION: XML configuration to set up the Thrift protocol in Dubbo. This example shows how to configure all services to use a single port (3030) for the Thrift protocol.

LANGUAGE: xml
CODE:
<dubbo:protocol name="thrift" port="3030" />

----------------------------------------

TITLE: Implementing Dubbo Client
DESCRIPTION: Client-side code that creates a reference to the remote service and makes an RPC call.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) {
        DemoService demoService =
            ReferenceBuilder.newBuilder()
            .interfaceClass(DemoService.class)
            .url("tri://localhost:50051")
            .build()
            .get();

        String message = demoService.sayHello("dubbo");
        System.out.println(message);
    }
}

----------------------------------------

TITLE: Apache Software Foundation License Agreement Template
DESCRIPTION: Example template of the Software Grant Agreement required for donating code to Apache Dubbo. Includes all required fields, signature requirements, and licensing terms.

LANGUAGE: text
CODE:
License Agreement


    This License Agreement is entered into as of the _12th_ day of
___April____, __2018__ by ___ABC Software Co., Ltd.____ ("Licensor"),
in favor of The Apache Software Foundation, a Delaware nonstock
membership corporation (the "Foundation").

    WHEREAS, Licensor owns or has sufficient rights to contribute the
software source code and other related intellectual property as
itemized on Exhibit A ("Software") under the terms of this agreement
to the Foundation for use within Foundation software development
projects ("Projects").

    NOW, THEREFORE, FOR GOOD AND VALUABLE CONSIDERATION, the receipt
and legal sufficiency of which are hereby acknowledged, the parties
hereto, intending to be legally bound, agree as follows:

1. Subject to the terms and conditions of this License, Licensor
hereby grants to the Foundation:

  a) a non-exclusive, worldwide, royalty-free, irrevocable
     copyright license to reproduce, prepare derivative works of,
     publicly display, publicly perform, distribute and sublicense,
     internally and externally, the Software and such derivative
     works, in source code and object code form; and,

  b) a non-exclusive, worldwide, royalty-free, irrevocable
     patent license under Licensed Patents to make, use, sell,
     offer to sell, import and otherwise transfer the Software
     in source code and object code form. "Licensed Patents" mean
     patent claims owned by Licensor which are necessarily
     infringed by the use or sale of the Software alone.

2. Licensor represents that, to Licensor's knowledge, Licensor is
legally entitled to grant the above license. Licensor agrees to notify
the Foundation of any facts or circumstances of which Licensor becomes
aware and which makes or would make Licensor's representations in this
License Agreement inaccurate in any respect.

3. This Software is provided AS-IS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,
ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY
OR FITNESS FOR A PARTICULAR PURPOSE.  NEITHER THE LICENSOR NOR ITS
SUPPLIERS WILL BE LIABLE TO THE FOUNDATION OR ITS LICENSEES FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
THE USE OR DISTRIBUTION OF THE WORK OR THE EXERCISE OF ANY RIGHTS
GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

This License Agreement is the entire agreement of the parties
with respect to its subject matter, and may only be amended by a
writing signed by each party. This License Agreement may be
executed in one or more counterparts, each of which shall be
considered an original.

    IN WITNESS WHEREOF, Licensor has executed this License Agreement
as of the date first written above.


    LICENSOR:


    Signed By: _____________________________________   <--- Your boss's sign here

    Print Name: _____Lei Li_________________________   <--- Your boss's name here

    Title: ____Director_____________________________   <--- Your boss's title here

    Representing: ____ABC Software Co., Ltd. _______ 

    ________________________________________________

    Contact Name: ____Lei Li________________________   <--- Your boss's name here

    Contact Email: ____lilei@abc.com________________   <--- Your boss's email here

Exhibit A

List of software and other intellectual property covered by this agreement:

* Github address where your code is hosted
* Pull request link

----------------------------------------

TITLE: Configuring Group Isolation for Zookeeper Registry
DESCRIPTION: Shows how to configure group isolation for a Zookeeper registry in a YAML configuration file to logically separate microservices.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   group: daily1

----------------------------------------

TITLE: Configuring Nacos Dynamic Configuration in YAML
DESCRIPTION: Configuration for setting up Nacos as a dynamic configuration center with authentication.

LANGUAGE: yaml
CODE:
nacos:
    addr: "127.0.0.1:8848"
    namespace: "namespace-name"
    app: "app-name"
    enable_auth: 
      auth_username: username
      auth_password: password

----------------------------------------

TITLE: AbstractClusterInvoker invoke() Implementation
DESCRIPTION: Core invocation logic in AbstractClusterInvoker that handles invocation attachments and lists invokers

LANGUAGE: Java
CODE:
public Result invoke(final Invocation invocation) throws RpcException {
    checkWhetherDestroyed();
    LoadBalance loadbalance = null;

    Map<String, String> contextAttachments = RpcContext.getContext().getAttachments();
    if (contextAttachments != null && contextAttachments.size() != 0) {
        ((RpcInvocation) invocation).addAttachments(contextAttachments);
    }

    List<Invoker<T>> invokers = list(invocation);
    if (invokers != null && !invokers.isEmpty()) {
        loadbalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(invokers.get(0).getUrl()
                .getMethodParameter(RpcUtils.getMethodName(invocation), Constants.LOADBALANCE_KEY, Constants.DEFAULT_LOADBALANCE));
    }
    RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);
    
    return doInvoke(invocation, invokers, loadbalance);
}

----------------------------------------

TITLE: Downloading Protoc Binary Package
DESCRIPTION: Commands to download the protoc binary package from GitHub releases using curl.

LANGUAGE: sh
CODE:
$ PB_REL="https://github.com/protocolbuffers/protobuf/releases"
$ curl -LO $PB_REL/download/v{{< param protoc-version >}}/protoc-{{< param protoc-version >}}-linux-x86_64.zip

----------------------------------------

TITLE: Debugging Dubbo Protocol Interface with dubbogo-cli
DESCRIPTION: Command to debug a Dubbo protocol interface using dubbogo-cli, specifying host, port, interface, method, and request/response objects.

LANGUAGE: shell
CODE:
./dubbo-go-cli -h=localhost -p=20001 -proto=dubbo -i=com.ikurento.user.UserProvider -method=GetUser -sendObj="./userCall.json" -recvObj="./user.json"

----------------------------------------

TITLE: Kubernetes Deployment and Debug Setup
DESCRIPTION: Commands for deploying to Kubernetes and setting up remote debugging with dlv

LANGUAGE: bash
CODE:
out/linux_amd64/istioctl --set .values.pilot.image=bobtthp/pilot:debug install

dlv --listen=:8015 --headless=true --api-version=2 --log attach `ps -ef |grep pilot-discovery| awk '{print $2}'`

kubectl port-forward -n istio-system istiod-fd5d9f77-2ncjq 8015:8015

----------------------------------------

TITLE: Exposing Simple Registry as Dubbo Service in XML
DESCRIPTION: XML configuration to expose the Simple Registry as a Dubbo service. It sets up the application, protocol, and service details including callbacks and method configurations.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <!-- 当前应用信息配置 -->
    <dubbo:application name="simple-registry" />
    <!-- 暴露服务协议配置 -->
    <dubbo:protocol port="9090" />
    <!-- 暴露服务配置 -->
    <dubbo:service interface="org.apache.dubbo.registry.RegistryService" ref="registryService" registry="N/A" ondisconnect="disconnect" callbacks="1000">
        <dubbo:method name="subscribe"><dubbo:argument index="1" callback="true" /></dubbo:method>
        <dubbo:method name="unsubscribe"><dubbo:argument index="1" callback="false" /></dubbo:method>
    </dubbo:service>
    <!-- 简单注册中心实现，可自行扩展实现集群和状态同步 -->
    <bean id="registryService" class="org.apache.dubbo.registry.simple.SimpleRegistryService" />
</beans>

----------------------------------------

TITLE: Specifying Registration Center for Individual Services in Dubbo Go
DESCRIPTION: Demonstrates how to specify which registration center a particular service should register to, using the example of registering a GreetService to Zookeeper.

LANGUAGE: go
CODE:
srv, _ := ins.NewServer()

greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}, server.WithRegistryIDs([]string{"zookeeper"}))

----------------------------------------

TITLE: Referencing Dubbo gRPC Service
DESCRIPTION: Configure and reference the Dubbo gRPC service on the consumer side using Spring XML configuration.

LANGUAGE: XML
CODE:
<dubbo:application name="demo-consumer"/>

<dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

<!-- 指定 protoc-gen-dubbo-java 生成的接口 -->
<dubbo:reference id="greeter" interface="io.grpc.examples.helloworld.GreeterGrpc$IGreeter" protocol="grpc"/>

----------------------------------------

TITLE: Configuring Zone-Based Registries in XML
DESCRIPTION: This XML snippet shows how to configure zone-based registries in Dubbo. It assigns zone attributes to different registries for traffic routing based on zones.

LANGUAGE: xml
CODE:
<dubbo:registry id="hangzhouRegistry" address="10.20.141.150:9090" zone="hangzhou" />
<dubbo:registry id="qingdaoRegistry" address="10.20.141.151:9010" zone="qingdao" />

----------------------------------------

TITLE: Demonstrating Unary Request in Triple Protocol
DESCRIPTION: Example of a unary request using the Triple protocol over HTTP/1, showing both the request and response format with JSON payload.

LANGUAGE: text
CODE:
> POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1
> Host: 127.0.0.1:30551
> Content-Type: application/json
>
> ["Dubbo"]

< HTTP/1.1 200 OK
< Content-Type: application/json
<
< {"greeting": "Hello, Dubbo!"}

----------------------------------------

TITLE: Create Seata Undo Log Table
DESCRIPTION: SQL script to create the UNDO_LOG table required for Seata AT mode transaction management

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS `undo_log`
(
    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',
    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',
    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',
    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',
    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',
    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',
    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',
    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';
ALTER TABLE `undo_log` ADD INDEX `ix_log_created` (`log_created`);

----------------------------------------

TITLE: Configuring Dubbo Server in YAML
DESCRIPTION: YAML configuration for Dubbo server defining registry, protocol, and service provider settings

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    zk:
      protocol: zookeeper
      timeout: 3s
      address: 127.0.0.1:2181
  protocols:
    dubbo:
      name: dubbo
      port: 20000
  provider:
    registry-ids: zk
    services:
      UserProvider:
        group: test
        version: 1.0.0
        cluster: test_dubbo
        serialization: hessian2
        interface: com.dubbogo.pixiu.UserService

----------------------------------------

TITLE: Enabling Apollo Configuration Center in Dubbo (YAML)
DESCRIPTION: YAML configuration for enabling Apollo as the configuration center in Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
  config-center:
    address: apollo://localhost:8080

----------------------------------------

TITLE: Implementing Dubbo Service Provider
DESCRIPTION: Service provider implementation that returns Person objects based on ID.

LANGUAGE: java
CODE:
class NormalDemoService implements IDemoService {
    public Person get(int id) {
        return new Person(id, "charles`son", 4);
    }
}

----------------------------------------

TITLE: Configuring Startup Check in YAML
DESCRIPTION: YAML configuration to disable global consumer checks while enabling checks for specific services. Sets check=false at consumer level and check=true for individual service reference.

LANGUAGE: yaml
CODE:
dubbo:
  consumer:
    check : false
    reference: 
      myservice:
       check: true 

----------------------------------------

TITLE: Demonstrating Unary Request in Triple Protocol
DESCRIPTION: Example of a unary request using the Triple protocol over HTTP/1, showing both the request and response format with JSON payload.

LANGUAGE: text
CODE:
> POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1
> Host: 127.0.0.1:30551
> Content-Type: application/json
>
> ["Dubbo"]

< HTTP/1.1 200 OK
< Content-Type: application/json
<
< {"greeting": "Hello, Dubbo!"}

----------------------------------------

TITLE: Configuring Dubbo Service Shutdown Wait Time
DESCRIPTION: This snippet shows how to configure the wait time for Dubbo service graceful shutdown using a properties file or command line argument. It sets the shutdown wait time to 20 seconds.

LANGUAGE: shell
CODE:
dubbo.service.shutdown.wait=20000

----------------------------------------

TITLE: Customizing Dubbo Admin Installation
DESCRIPTION: Shows different ways to customize the Dubbo Admin installation using profiles and override parameters.

LANGUAGE: shell
CODE:
dubboctl install --set profile=minimal

LANGUAGE: shell
CODE:
dubboctl install --set admin.nacos.enabled=true, admin.nacos.namespace=test

----------------------------------------

TITLE: 定义 Go 与 Java 互通的 Protocol Buffers 结构
DESCRIPTION: 定义用于 Go 和 Java 互通的 Protocol Buffers 消息结构。包括 HelloRequest 和 User 两个消息类型。

LANGUAGE: Protocol Buffers
CODE:
syntax = "proto3";

option java_package = "org.apache.dubbo.sample.hello";

package helloworld;

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message User {
  string name = 1;
  string id = 2;
  int32 age = 3;
}

----------------------------------------

TITLE: Making Asynchronous Dubbo Call in Erlang
DESCRIPTION: Example of making an asynchronous call to a Dubbo service using the Erlang SDK. It creates a request, sends it asynchronously, and shows how to handle the response later.

LANGUAGE: erlang
CODE:
Request = #userInfoRequest{requestId = 123, username = "testname"},
{ok,RequestRef} = userOperator:queryUserInfo(Request).

%% you can receive the message after.
handle_cast({msg_back,RequestRef,Response,RpcContent}, State).

----------------------------------------

TITLE: Implementing Extension Module for Load Balancing in Dubbo-go
DESCRIPTION: This code snippet demonstrates the structure of the extension module in Dubbo-go, specifically for load balancing. It includes methods to set and get load balance implementations, using a map to cache factory functions.

LANGUAGE: go
CODE:
package extension

import (
	"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance"
)

var loadbalances = make(map[string]func() loadbalance.LoadBalance)

// SetLoadbalance sets the loadbalance extension with @name
// For example: random/round_robin/consistent_hash/least_active/...
func SetLoadbalance(name string, fcn func() loadbalance.LoadBalance) {
	loadbalances[name] = fcn
}

// GetLoadbalance finds the loadbalance extension with @name
func GetLoadbalance(name string) loadbalance.LoadBalance {
	if loadbalances[name] == nil {
		panic("loadbalance for " + name + " is not existing, make sure you have import the package.")
	}

	return loadbalances[name]()
}

----------------------------------------

TITLE: Initializing ApplicationModel in Dubbo
DESCRIPTION: Creates and initializes the ApplicationModel object, which represents an application using Dubbo.

LANGUAGE: Java
CODE:
public ApplicationModel(FrameworkModel frameworkModel, boolean isInternal) {
    super(frameworkModel, ExtensionScope.APPLICATION, isInternal);
    Assert.notNull(frameworkModel, "FrameworkModel can not be null");
    this.frameworkModel = frameworkModel;
    frameworkModel.addApplication(this);
    if (LOGGER.isInfoEnabled()) {
        LOGGER.info(getDesc() + " is created");
    }
    initialize();
}

----------------------------------------

TITLE: Defining Dubbo-go Service Interface with Protocol Buffers
DESCRIPTION: This protobuf definition outlines the GreetService interface with two RPC methods: Greet and GreetTimeout. It defines the request and response message structures for the service.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package greet;

option go_package = "github.com/apache/dubbo-go-samples/retry/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
  rpc GreetTimeout(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Connecting to Multiple Registries Using a Single Address in Dubbo XML Configuration
DESCRIPTION: Demonstrates how to connect to multiple Dubbo registries using a single address string for testing purposes. The registries are separated by a vertical bar (|) in the address attribute.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="world"  />
    <!-- 多注册中心配置，竖号分隔表示同时连接多个不同注册中心，同一注册中心的多个集群地址用逗号分隔 -->
    <dubbo:registry address="10.20.141.150:9090|10.20.154.177:9010" />
    <!-- 引用服务 -->
    <dubbo:reference id="helloService" interface="com.alibaba.hello.api.HelloService" version="1.0.0" />
</beans>

----------------------------------------

TITLE: Configuring Global Random Token Authorization in Dubbo XML
DESCRIPTION: Sets up global token authorization using a randomly generated UUID token for all providers.

LANGUAGE: xml
CODE:
<dubbo:provider token="true" />

----------------------------------------

TITLE: Configuring Global Random Token Authorization in Dubbo XML
DESCRIPTION: Sets up global token authorization using a randomly generated UUID token for all providers.

LANGUAGE: xml
CODE:
<dubbo:provider token="true" />

----------------------------------------

TITLE: Installing Dubbo Admin Components with Helm
DESCRIPTION: Helm commands for adding repositories and installing individual components of the Dubbo Admin ecosystem.

LANGUAGE: shell
CODE:
helm repo add https://charts.bitnami.com/bitnami
helm repo add https://prometheus-community.github.io/helm-charts
helm repo add https://grafana.github.io/helm-charts
helm repo add https://apache.jfrog.io/artifactory/skywalking-helm
helm repo add https://openzipkin.github.io/zipkin

helm install zookeeper bitnami/zookeeper -n dubbo-system
helm install prometheus prometheus-community/prometheus -n dubbo-system
helm install grafana grafana/grafana -n dubbo-system
helm install skywalking skywalking/skywalking -n dubbo-system
helm install zipkin openzipkin/zipkin -n dubbo-system

helm ls -n dubbo-system ; kubectl get pods -n dubbo-system --output wide

----------------------------------------

TITLE: Querying Serialization Check Status via Telnet in Dubbo
DESCRIPTION: This snippet demonstrates how to use the 'serializeCheckStatus' command through a telnet connection to view the current serialization security configuration in Dubbo.

LANGUAGE: bash
CODE:
> telnet 127.0.0.1 22222
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
   ___   __  __ ___   ___   ____     
  / _ \ / / / // _ ) / _ ) / __ \  
 / // // /_/ // _  |/ _  |/ /_/ /    
/____/ \____//____//____/ \____/   
dubbo>serializeCheckStatus
CheckStatus: WARN

CheckSerializable: true

AllowedPrefix:
...

DisAllowedPrefix:
...


dubbo>

----------------------------------------

TITLE: Clone Dubbo Samples Repository
DESCRIPTION: Commands to download and navigate to the Seata example code directory

LANGUAGE: shell
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git
cd dubbo-samples/2-advanced/dubbo-samples-seata

----------------------------------------

TITLE: Configuring TLS for Dubbo Consumer
DESCRIPTION: Java code snippet demonstrating how to configure TLS (Transport Layer Security) for a Dubbo consumer, including setting up SSL configuration for client-side authentication.

LANGUAGE: java
CODE:
if (!mutualTls) {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
} else {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
    sslConfig.setClientKeyCertChainPath(args[1]);
    sslConfig.setClientPrivateKeyPath(args[2]);
}

----------------------------------------

TITLE: Enabling Nacos Configuration Center in YAML
DESCRIPTION: YAML configuration to enable Nacos as the configuration center for Dubbo.

LANGUAGE: yaml
CODE:
dubbo:
  config-center:
    address: nacos://127.0.0.1:8848

----------------------------------------

TITLE: Zookeeper Remote Configuration Structure
DESCRIPTION: YAML configuration stored in Zookeeper that defines registry and protocol settings for Dubbo-Go application.

LANGUAGE: yaml
CODE:
dubbo:
  registries:
    demoZK:
      protocol: zookeeper
      timeout: 3s
      address: '127.0.0.1:2181'
  protocols:
    triple:
      name: tri
      port: 20000

----------------------------------------

TITLE: Defining Dubbo Services
DESCRIPTION: Example of defining Dubbo services in XML configuration.

LANGUAGE: XML
CODE:
<dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>
<dubbo:service interface="org.apache.dubbo.samples.basic.api.GreetingService" ref="greetingService"/>

----------------------------------------

TITLE: Installing Grafana with Default Dubbo Dashboards in Kubernetes
DESCRIPTION: This snippet shows how to quickly install Grafana in a Kubernetes cluster with pre-configured Dubbo community metrics dashboards. It uses a sample configuration provided by the Dubbo community.

LANGUAGE: bash
CODE:
kubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/grafana.yaml

----------------------------------------

TITLE: Creating Mock Log Table in SQL
DESCRIPTION: SQL script to create the mock_log table for storing mock request records in MySQL database. This table logs request data, response, and associated rule ID.

LANGUAGE: sql
CODE:
CREATE TABLE `mock_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'Primary Key ID',
  `method_id` int(11) DEFAULT NULL COMMENT 'Rule ID',
  `request` text COMMENT 'Request Data',
  `response` text COMMENT 'Return Value',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT 'Creation Time',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Update Time',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Mock Request Record Table';

----------------------------------------

TITLE: Testing Dubbo-go Server with cURL
DESCRIPTION: cURL command to verify that the dubbo-go server is running correctly by sending a test request.

LANGUAGE: shell
CODE:
$ curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.v1.GreetService/Greet

----------------------------------------

TITLE: Configuring Load Balancing at Method Level for Service Consumer in Dubbo (XML)
DESCRIPTION: This snippet illustrates how to set the load balancing strategy for a specific method of a service consumer using XML configuration in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:reference interface="...">
    <dubbo:method name="..." loadbalance="roundrobin"/>
</dubbo:reference>

----------------------------------------

TITLE: Implementing a Dubbo Consumer with Timeout Handling
DESCRIPTION: This snippet shows a Dubbo consumer implementation that sets a timeout greater than the provider's execution time and handles potential timeout exceptions.

LANGUAGE: java
CODE:
@Reference(check = false,interfaceClass = TestService.class,timeout = 3000)
private TestService testService;

@GetMapping("/sum")
public String consumeSum(){
    Integer ret = 0;
    try{
         ret = testService.sum(1,1);
    }catch (Exception e){
       return e.getMessage();
    }
    return String.valueOf(ret);
}

----------------------------------------

TITLE: Configuring Serialization Check Status in Dubbo
DESCRIPTION: Shows various methods to configure the serialization check status in Dubbo applications.

LANGUAGE: java
CODE:
ApplicationConfig applicationConfig = new ApplicationConfig();
applicationConfig.setSerializeCheckStatus("STRICT");

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" serialize-check-status="STRICT"/>

LANGUAGE: properties
CODE:
dubbo.application.serialize-check-status=STRICT

LANGUAGE: properties
CODE:
-Ddubbo.application.serialize-check-status=STRICT

----------------------------------------

TITLE: Defining REST-style Triple Service with JAX-RS Annotations
DESCRIPTION: Example of defining a REST-style triple service using JAX-RS annotations on a Java interface.

LANGUAGE: java
CODE:
@Path("/demo")
public interface DemoService {
    @GET
	@Path("/hello")
    String sayHello();
}

----------------------------------------

TITLE: Specifying Registration Center for Server Services in Dubbo Go
DESCRIPTION: Shows how to specify which registration center a service under a specific server should register to. It includes examples for registering to Zookeeper and Nacos.

LANGUAGE: go
CODE:
// Specify that the service under the server registers to the zookeeper registration center
srv, _ := ins.NewServer(server.WithServerRegistryIDs([]string{"zookeeper"}))

// Specify that the service under the server registers to the nacos registration center
srv2, _ := ins.NewServer(server.WithServerRegistryIDs([]string{"nacos"}))

----------------------------------------

TITLE: Extracting Protoc Binary Package
DESCRIPTION: Command to extract the downloaded protoc binary package to a local directory.

LANGUAGE: sh
CODE:
$ unzip protoc-{{< param protoc-version >}}-linux-x86_64.zip -d $HOME/.local

----------------------------------------

TITLE: Configuring Zookeeper Curator5 Spring Boot Starter
DESCRIPTION: Add Zookeeper registry support for version 3.8.0+ through Spring Boot starter.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo</groupId>
  <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>
</dependency>

----------------------------------------

TITLE: Adding Redis Dependency for Dubbo Metadata Center
DESCRIPTION: XML configuration to add the Jedis dependency required for Redis implementation of Dubbo's metadata center.

LANGUAGE: xml
CODE:
<dependency>
	<dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>3.10.0</version>
    </dependency>
</dependency>

----------------------------------------

TITLE: Setting Redis Key Prefix in Dubbo
DESCRIPTION: XML configuration to set the prefix for keys in Redis. This allows customization of the key namespace used by Dubbo in Redis.

LANGUAGE: xml
CODE:
<dubbo:registry group="dubbo" />

----------------------------------------

TITLE: Defining injvm Protocol in Dubbo XML Configuration
DESCRIPTION: This snippet shows how to define the injvm protocol in Dubbo's XML configuration. The injvm protocol is a pseudo-protocol that allows for local calls within the JVM.

LANGUAGE: xml
CODE:
<dubbo:protocol name="injvm" />

----------------------------------------

TITLE: Configuring YAML Front Matter for Dubbo Admin Documentation
DESCRIPTION: This YAML configuration sets up the metadata for a Dubbo Admin documentation page. It specifies the rendering method, description, title, content type, and weight for ordering within the documentation structure.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Admin
manualLinkRelref: ./#admin
title: Admin
type: docs
weight: 60

----------------------------------------

TITLE: Accessing Extension Loaders Example
DESCRIPTION: Shows how to access extension loaders through model objects in Dubbo's domain model architecture

LANGUAGE: java
CODE:
Set<TypeBuilder> tbs = model.getExtensionLoader(TypeBuilder.class).getSupportedExtensionInstances();

----------------------------------------

TITLE: Handling Plain Text in Triple Protocol
DESCRIPTION: Example of handling text/plain content type with charset support. Shows simple string processing.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetString HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: text/plain; charset=UTF-8
Content-Length: 6
Accept: application/json
World!

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(String world){
        System.out.println("Hello:"+ world);
        return new ServerResponse("Server Received url form.");
    }

----------------------------------------

TITLE: Implementing Dubbo Consumer with Specified IP Routing in Java
DESCRIPTION: A consumer implementation that uses @DubboReference to import the provider service and demonstrates how to specify a particular provider instance using RpcContext and Address objects. It includes necessary imports and a REST endpoint for invoking the service.

LANGUAGE: java
CODE:
// 需要依赖的class
import org.apache.dubbo.rpc.RpcContext;
import org.apache.dubbo.rpc.cluster.router.address.Address;
    
@RestController
public class TestServiceConsumer {
    @DubboReference(interfaceClass = TestService.class,group = "dev",parameters = {"router","address"})
    private TestService testService;

   @GetMapping("/invokeByIpPortSpecified")
       public String invokeByIp(){
           try {
               // 根据provider的ip,port创建Address实例
               Address address = new Address("10.220.47.253", 20880);
               RpcContext.getContext().setObjectAttachment("address", address);
               return testService.sayHello("Tom");
           }catch (Throwable ex){
               return ex.getMessage();
           }
       }
}

----------------------------------------

TITLE: Configuring Service Provider in Dubbo XML
DESCRIPTION: Example of using the dubbo:service element to configure a service provider in Dubbo's XML configuration. This snippet demonstrates the basic structure and common attributes used for service exposure.

LANGUAGE: XML
CODE:
<dubbo:service
    interface="com.example.DemoService"
    ref="demoServiceImpl"
    version="1.0.0"
    group="demo"
    timeout="5000"
    retries="2"
    loadbalance="random"
/>

----------------------------------------

TITLE: Adding OpenTelemetry Dependencies for Spring Boot
DESCRIPTION: This XML snippet shows how to add the necessary dependency for using OpenTelemetry as a Tracer with OTLP exporter in a Spring Boot Dubbo project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>
</dependency>

----------------------------------------

TITLE: Compiling Istio Components
DESCRIPTION: Commands for compiling istioctl and dubbo-pilot components using docker-builder

LANGUAGE: bash
CODE:
docker-builder --targets istioctl

tools/docker-builder/docker-builder --targets pilot --hub docker.io/bobtthp --push

----------------------------------------

TITLE: Clone Dubbo Samples Repository
DESCRIPTION: Command to download the example source code repository containing the Triple-gRPC integration samples.

LANGUAGE: shell
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git

----------------------------------------

TITLE: ExtensionLoader.createExtension Method Implementation
DESCRIPTION: Method for creating extension instances in Dubbo SPI, including class loading, instantiation, and dependency injection.

LANGUAGE: java
CODE:
private T createExtension(String name) {
    Class<?> clazz = getExtensionClasses().get(name);
    if (clazz == null) {
        throw findException(name);
    }
    try {
        T instance = (T) EXTENSION_INSTANCES.get(clazz);
        if (instance == null) {
            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());
            instance = (T) EXTENSION_INSTANCES.get(clazz);
        }
        injectExtension(instance);
        Set<Class<?>> wrapperClasses = cachedWrapperClasses;
        if (wrapperClasses != null && !wrapperClasses.isEmpty()) {
            for (Class<?> wrapperClass : wrapperClasses) {
                instance = injectExtension(
                    (T) wrapperClass.getConstructor(type).newInstance(instance));
            }
        }
        return instance;
    } catch (Throwable t) {
        throw new IllegalStateException("...");
    }
}

----------------------------------------

TITLE: Implementing a Basic REST Service in Dubbo
DESCRIPTION: Demonstrates how to create a simple user registration REST service using Dubbo and JAX-RS annotations.

LANGUAGE: Java
CODE:
@Path("/users")
public class UserServiceImpl implements UserService {
       
    @POST
    @Path("/register")
    @Consumes({MediaType.APPLICATION_JSON})
    public void registerUser(User user) {
        // save the user...
    }
}

----------------------------------------

TITLE: Service-Level Configuration Rule in Dubbo
DESCRIPTION: Example of a service-level configuration that sets retry attempts for UserService consumers. The rule specifically targets consumers from the shop-frontend application, setting 4 retries after call failures.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: service
key: org.apache.dubbo.samples.UserService
configs:
  - match:
      application:
        oneof:
          - exact: shop-frontend
    side: consumer
    parameters:
      retries: '4'

----------------------------------------

TITLE: Configuring Dubbo Application Properties
DESCRIPTION: YAML configuration for Dubbo application including protocol settings, registry configuration, and serialization options.

LANGUAGE: yaml
CODE:
dubbo:
  application:
    name: ${spring.application.name}
    logger: slf4j
  protocol:
    name: dubbo
    port: -1
    serialization: fastjson2
  registry:
    id: zk-registry
    address: zookeeper://127.0.0.1:2181
  config-center:
    address: zookeeper://127.0.0.1:2181
  metadata-report:
    address: zookeeper://127.0.0.1:2181
  provider:
    serialization: fastjson2
  consumer:
    serialization: fastjson2

----------------------------------------

TITLE: Server Configuration for Java Interoperability
DESCRIPTION: Go code demonstrating server setup for Java interoperability using Triple protocol.

LANGUAGE: go
CODE:
ins, err := dubbo.NewInstance(
	dubbo.WithName("dubbo_server"),
	dubbo.WithProtocol(
		protocol.WithTriple(),
		protocol.WithPort(20001)),
)

srvDubbo, err := ins.NewServer()
if err != nil {
	panic(err)
}
if err = srvDubbo.Register(&GreetProvider{}, nil, server.WithInterface("GreetProvider")); err != nil {
	panic(err)
}
if err = srvDubbo.Serve(); err != nil {
	logger.Error(err)
}

----------------------------------------

TITLE: Configuring Multiple Registry Centers for Dubbo Microservices in Java
DESCRIPTION: This snippet shows how to configure multiple registry centers for different services in a Dubbo microservice application.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    RegistryConfig bjRegistry = new RegistryConfig();
    bjRegistry.setId("bj");
    bjRegistry.setAddress("nacos://127.0.0.1:8848");

    RegistryConfig hzRegistry = new RegistryConfig();
    hzRegistry.setId("hz");
    hzRegistry.setAddress("nacos://127.0.0.2:8848");

    DubboBootstrap.getInstance()
            .registry(bjRegistry)
            .registry(hzRegistry)
            .service(ServiceBuilder.newBuilder().registryIds("bj").interfaceClass(GreetingsService.class).ref(new GreetingsServiceImpl()).build())
            .service(ServiceBuilder.newBuilder().registryIds("hz").interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
            .start()
            .await();
}

----------------------------------------

TITLE: Configuring Multiple Registry Centers for Dubbo Microservices in Java
DESCRIPTION: This snippet shows how to configure multiple registry centers for different services in a Dubbo microservice application.

LANGUAGE: java
CODE:
public static void main(String[] args) {
    RegistryConfig bjRegistry = new RegistryConfig();
    bjRegistry.setId("bj");
    bjRegistry.setAddress("nacos://127.0.0.1:8848");

    RegistryConfig hzRegistry = new RegistryConfig();
    hzRegistry.setId("hz");
    hzRegistry.setAddress("nacos://127.0.0.2:8848");

    DubboBootstrap.getInstance()
            .registry(bjRegistry)
            .registry(hzRegistry)
            .service(ServiceBuilder.newBuilder().registryIds("bj").interfaceClass(GreetingsService.class).ref(new GreetingsServiceImpl()).build())
            .service(ServiceBuilder.newBuilder().registryIds("hz").interfaceClass(DemoService.class).ref(new DemoServiceImpl()).build())
            .start()
            .await();
}

----------------------------------------

TITLE: Client-side Triple Protocol Implementation
DESCRIPTION: Go code for creating a Dubbo client and making service calls using the Triple protocol.

LANGUAGE: go
CODE:
cli, err := client.NewClient(
	client.WithClientURL("127.0.0.1:20000"),
)

svc, err := greet.NewGreetService(cli)
resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "hello world"})

----------------------------------------

TITLE: Specifying Triple Protocol for Consumer in Dubbo Java
DESCRIPTION: Java code snippet showing how to explicitly specify the Triple protocol for a consumer reference in Dubbo. This is useful for consumers that cannot upgrade to version 3.3.0+.

LANGUAGE: java
CODE:
@DubboReference(protocol="tri")
private DemoService demoService;

----------------------------------------

TITLE: Initializing Environment Properties in Dubbo
DESCRIPTION: The initialize() method in the Environment class that sets up various configuration sources, including system properties, environment variables, and external configurations.

LANGUAGE: Java
CODE:
@Override
    public void initialize() throws IllegalStateException {
        if (initialized.compareAndSet(false, true)) {
            this.propertiesConfiguration = new PropertiesConfiguration(scopeModel);
            this.systemConfiguration = new SystemConfiguration();
            this.environmentConfiguration = new EnvironmentConfiguration();
            this.externalConfiguration = new InmemoryConfiguration("ExternalConfig");
            this.appExternalConfiguration = new InmemoryConfiguration("AppExternalConfig");
            this.appConfiguration = new InmemoryConfiguration("AppConfig");
            loadMigrationRule();
        }
    }

----------------------------------------

TITLE: Configuring Tag Routing Rule in Dubbo YAML
DESCRIPTION: Example configuration for tag routing that creates an isolated 'gray' environment in the 'shop-detail' application. The rule matches instances with 'env=gray' label.

LANGUAGE: yaml
CODE:
configVersion: v3.0
force: true
enabled: true
key: shop-detail
tags:
  - name: gray
    match:
      - key: env
        value:
          exact: gray

----------------------------------------

TITLE: Configuring URL Routing in Pixiu
DESCRIPTION: This JSON snippet demonstrates how to configure URL routing rules in Pixiu's API configuration file. It includes path matching, HTTP verb handling, and integration with Dubbo services.

LANGUAGE: json
CODE:
{
  "name": "server",
  "description": "server sample",
  "resources": [
    {
      "path": "/api/v1/test-dubbo/user/name/:name",
      "type": "restful",
      "description": "user",
      "methods": [
        {
          "httpVerb": "GET",
          "enable": true,
          "timeout": "1000ms",
          "inboundRequest": {
            "requestType": "http",
            "uri": [
              {
                "name": "name",
                "required": true
              }
            ]
          },
          "integrationRequest": {
            "requestType": "dubbo",
            "mappingParams": [
              {
                "name": "uri.name",
                "mapTo": 0,
                "mapType": "string"
              }
            ],
            "applicationName": "UserProvider",
            "interface": "com.dubbogo.server.UserService",
            "method": "GetUserByName",
            "group": "test",
            "version": "1.0.0",
            "clusterName": "test_dubbo"
          }
        }
      ]
    }
  ]
}

----------------------------------------

TITLE: Launching Zipkin Docker Container
DESCRIPTION: Docker command to start a Zipkin server instance on port 9411

LANGUAGE: bash
CODE:
docker run -d -p 9411:9411 --name zipkin openzipkin/zipkin

----------------------------------------

TITLE: Generating Demo Service Provider Application with Dubbo Maven Plugin
DESCRIPTION: This command generates a service provider application with specified interface and version using the Dubbo Maven plugin. It sets the application name, package, services, and version.

LANGUAGE: sh
CODE:
mvn dubbo:create -Dapplication=xxx -Dpackage=com.alibaba.xxx -Dservice=XxxService,YyyService -Dversion=1.0.0

----------------------------------------

TITLE: Testing Dubbo SPI Implementation
DESCRIPTION: Shows how to use Dubbo's ExtensionLoader to load and test SPI implementations.

LANGUAGE: java
CODE:
public class DubboSPITest {

    @Test
    public void sayHello() throws Exception {
        ExtensionLoader<Robot> extensionLoader = 
            ExtensionLoader.getExtensionLoader(Robot.class);
        Robot optimusPrime = extensionLoader.getExtension("optimusPrime");
        optimusPrime.sayHello();
        Robot bumblebee = extensionLoader.getExtension("bumblebee");
        bumblebee.sayHello();
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service Consumer
DESCRIPTION: REST controller that consumes the Dubbo service with reference configuration. Includes artificial delay and error injection for testing.

LANGUAGE: java
CODE:
package org.apache.skywalking.demo.consumer;

@RestController
public class ConsumerController {

	private static int COUNT = 0;

	@Reference(version = "${demo.service.version}",
		application = "${dubbo.application.id}",
		url = "dubbo://localhost:20880", timeout = 60000)
	private HelloService helloService;

	@GetMapping("/sayHello/{name}")
	public String sayHello(@PathVariable(name = "name") String name) {
		if ((COUNT++) % 3 == 0){
			throw new RuntimeException();
		}
		LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(2));
		return helloService.sayHello(name);
	}
}

----------------------------------------

TITLE: Defining ClusterFilter SPI Interface in Dubbo
DESCRIPTION: SPI interface extending BaseFilter for pre-location interception, scoped at module level.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc.cluster.filter;

@SPI(scope = ExtensionScope.MODULE)
public interface ClusterFilter extends BaseFilter {
}

----------------------------------------

TITLE: Server Context Parameter Retrieval in Go
DESCRIPTION: Demonstrates how to retrieve attachment values from context on the server side

LANGUAGE: go
CODE:
    attachments := ctx.Value(constant.AttachmentKey).(map[string]interface{})
    logger.Infof("Dubbo attachment key1 = %s", value1.([]string)[0])
    logger.Infof("Dubbo attachment key2 = %s", value2.([]string)[0])

----------------------------------------

TITLE: Installing Higress on Kubernetes using Helm
DESCRIPTION: Commands to install Higress on Kubernetes using Helm charts. Includes adding the Higress Helm repository and installing Higress with specific configuration options.

LANGUAGE: shell
CODE:
helm repo add higress.io https://higress.io/helm-charts
helm install higress -n higress-system higress.io/higress --create-namespace --render-subchart-notes --set global.local=true --set higress-console.o11y.enabled=false

----------------------------------------

TITLE: Setting Global Client Timeout in Dubbo-go
DESCRIPTION: This snippet demonstrates how to set a global timeout for all service proxies using a client. It uses the client.WithClientRequestTimeout() method when creating a new client.

LANGUAGE: go
CODE:
    cli, err := client.NewClient(
        client.WithClientURL("tri://127.0.0.1:20000"),
        client.WithClientRequestTimeout(3 * time.Second),
    )

----------------------------------------

TITLE: Implementing Dubbo Client with Error Handling in Go
DESCRIPTION: Implements a Dubbo Go client that makes RPC calls to the GreetService, demonstrating how to handle both successful and error responses.

LANGUAGE: go
CODE:
package main

import (
	"context"

	"dubbo.apache.org/dubbo-go/v3/client"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	greet "github.com/apache/dubbo-go-samples/helloworld/proto"
	"github.com/dubbogo/gost/log/logger"
)

func main() {
	cli, err := client.NewClient(
		client.WithClientURL("127.0.0.1:20000"),
	)
	if err != nil {
		panic(err)
	}

	svc, err := greet.NewGreetService(cli)
	if err != nil {
		panic(err)
	}

	resp, err := svc.Greet(context.Background(), &greet.GreetRequest{Name: "right name"})
	if err != nil {
		logger.Error(err)
	}
	logger.Infof("call Greet success: %s", resp.Greeting)

	resp, err = svc.Greet(context.Background(), &greet.GreetRequest{Name: "wrong name"})
	if err != nil {
		logger.Errorf("call Greet failed, err: %s", err.Error())
	}
}

----------------------------------------

TITLE: Configuring Dubbo Compiler Extension in Properties File
DESCRIPTION: Example of the properties file content for registering a custom Compiler extension in Dubbo. The file should be named org.apache.dubbo.common.compiler.Compiler and placed in the META-INF/dubbo directory.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxCompiler

----------------------------------------

TITLE: Configuring Basic Mock Reference in Dubbo XML
DESCRIPTION: Shows how to enable mock configuration in Dubbo's XML configuration file. Supports both simple boolean enablement and specific mock class implementation.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="true" />

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="com.foo.BarServiceMock" />

----------------------------------------

TITLE: Implementing Dubbo-go Server Handler
DESCRIPTION: This Go code implements the GreetTripleServer, which handles the Greet and GreetTimeout methods. The GreetTimeout method simulates a 5-second delay to demonstrate timeout behavior.

LANGUAGE: go
CODE:
package main

import (
   "context"
   "time"

   greet "github.com/apache/dubbo-go-samples/timeout/proto"
)

type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
   resp := &greet.GreetResponse{Greeting: req.Name}
   return resp, nil
}

func (srv *GreetTripleServer) GreetTimeout(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
   time.Sleep(5 * time.Second)
   resp := &greet.GreetResponse{Greeting: req.Name}
   return resp, nil
}

----------------------------------------

TITLE: Loading Configurations from Properties
DESCRIPTION: Method for loading configuration types from properties, supporting multiple configurations with IDs and single configuration scenarios.

LANGUAGE: java
CODE:
public <T extends AbstractConfig> List<T> loadConfigsOfTypeFromProps(Class<T> cls) {
    List<T> tmpConfigs = new ArrayList<>();
    PropertiesConfiguration properties = environment.getPropertiesConfiguration();
    Set<String> configIds = this.getConfigIdsFromProps(cls);
    configIds.forEach(id -> {
        if (!this.getConfig(cls, id).isPresent()) {
            T config;
            try {
                config = createConfig(cls, scopeModel);
                config.setId(id);
            } catch (Exception e) {
                throw new IllegalStateException("create config instance failed, id: " + id + ", type:" + cls.getSimpleName());
            }
            String key = null;
            boolean addDefaultNameConfig = false;
            try {
                key = DUBBO + "." + AbstractConfig.getPluralTagName(cls) + "." + id + ".name";
                if (properties.getProperty(key) == null) {
                    properties.setProperty(key, id);
                    addDefaultNameConfig = true;
                }
                config.refresh();
                this.addConfig(config);
                tmpConfigs.add(config);
            } catch (Exception e) {
                logger.error("load config failed, id: " + id + ", type:" + cls.getSimpleName(), e);
                throw new IllegalStateException("load config failed, id: " + id + ", type:" + cls.getSimpleName());
            } finally {
                if (addDefaultNameConfig && key != null) {
                    properties.remove(key);
                }
            }
        }
    });
    return tmpConfigs;
}

----------------------------------------

TITLE: ExtensionLoader getExtensionLoader Method in Java
DESCRIPTION: Static factory method that returns an ExtensionLoader instance for a given extensible interface. It checks if the type is an interface with @SPI annotation and caches loaders.

LANGUAGE: Java
CODE:
public static <T> ExtensionLoader<T> getExtensionLoader(Class<T> type) {
        if (!type.isInterface()) {
            throw new IllegalArgumentException("Extension type(" + type + ") is not interface!");
        }
        if (!withExtensionAnnotation(type)) {
            throw new IllegalArgumentException("Extension type without @SPI Annotation!");
        }
        ExtensionLoader<T> loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);
        if (loader == null) {
            EXTENSION_LOADERS.putIfAbsent(type, new ExtensionLoader<T>(type));
            loader = (ExtensionLoader<T>) EXTENSION_LOADERS.get(type);
        }
        return loader;
}

----------------------------------------

TITLE: Listing Stylesheet Files for Dubbo Project Website
DESCRIPTION: This snippet lists the stylesheet files used in the Dubbo project website, specifically for the API reference section. It includes Bootstrap, Font Awesome, and a custom style sheet.

LANGUAGE: Markdown
CODE:
- bootstrap-4.3.1.min.css
- fontawesome-4.7.0.min.css
- style_apiref.css

----------------------------------------

TITLE: Configuring Dubbo Serialization Protocol in Erlang
DESCRIPTION: Configuration example showing how to set the serialization protocol in the dubboerl application settings. The protocol can be set to either 'hessian' or 'json' through the sys.config file. Hessian is the default serialization protocol.

LANGUAGE: erlang
CODE:
{dubboerl,[
	%% other config ...
	{protocol,hessian}
]}

----------------------------------------

TITLE: HTTP Request Headers for Dubbo Integration
DESCRIPTION: Required and optional HTTP headers for Dubbo service integration, including protocol specification and service versioning.

LANGUAGE: http
CODE:
x-dubbo-service-protocol: triple
x-dubbo-service-protocol: dubbo
x-dubbo-service-version: {version}
x-dubbo-service-group: {group}

----------------------------------------

TITLE: User-Based Routing Configuration in Istio
DESCRIPTION: YAML configuration for routing traffic based on user identity, specifically routing user 'jason' to v2 of the reviews service.

LANGUAGE: yaml
CODE:
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1

----------------------------------------

TITLE: Generating Stack Trace for Dubbo Routing Analysis
DESCRIPTION: This command generates a stack trace log file for a Dubbo application process, which can be used to analyze routing-related issues.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Interface definition for a simple Hello service that accepts a name parameter and returns a greeting.

LANGUAGE: java
CODE:
public interface HelloService {
	String sayHello(String name);
}

----------------------------------------

TITLE: Implementing Multi-instance Dubbo Applications
DESCRIPTION: Shows how to create and use multiple Dubbo instances using DubboBootstrap. This example demonstrates creating two separate applications, each with its own service configurations, registries, and modules.

LANGUAGE: java
CODE:
    ServiceConfig<DemoService> service = new ServiceConfig<>();
    service.setInterface(DemoService.class);
    service.setRef(new DemoServiceImpl());

    ReferenceConfig<DemoService> reference1 = new ReferenceConfig<>();
    reference1.setInterface(DemoService.class);

    ReferenceConfig<DemoService> reference2 = new ReferenceConfig<>();
    reference2.setInterface(DemoService.class);

	// Create a launcher (automatically create a new ApplicationModel)
    DubboBootstrap bootstrap1 = DubboBootstrap.newInstance();
	// Specify application name
    bootstrap1.application(new ApplicationConfig("dubbo-demo-app-1"))
        .registry(new RegistryConfig("nacos://localhost:8848"))
        // Create a module
        .newModule()
        	// Publish service within the module
    		.service(service)
        .endModule()
        // Create a module
        .newModule()
        	// Subscribe to service within the module
    		.reference(reference1)
        .endModule()
        .start();

	// Create a launcher (automatically create a new ApplicationModel)
    DubboBootstrap bootstrap2 = DubboBootstrap.newInstance();
	// Specify application name
    bootstrap2.application(new ApplicationConfig("dubbo-demo-app-2"))
        .registry(new RegistryConfig("nacos://localhost:8848"))
        // Create a module
        .newModule()
        	// Subscribe to service within the module
    		.reference(reference2)
        .endModule()
        .start();

	// stub1 and stub2 are two independent subscriptions, isolated from each other.

	// Subscribed stub
    DemoService stub1 = reference1.get();
    System.out.println(stub1.sayHello("Hello World!"));

	// Subscribed stub
    DemoService stub2 = reference2.get();
    System.out.println(stub2.sayHello("Hello World!"));

    bootstrap1.stop();
    bootstrap2.stop();

----------------------------------------

TITLE: Running Dubbo Client
DESCRIPTION: Command to start the Dubbo client application

LANGUAGE: shell
CODE:
go run ./go-client/cmd/main.go

----------------------------------------

TITLE: Handling URL Encoded Form Data in Triple Protocol
DESCRIPTION: Example of processing application/x-www-form-urlencoded requests. Shows two different approaches: individual parameters and Map-based handling.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetUrlForm HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/x-www-form-urlencoded
Content-Length: 33
Accept: application/json
Hello=World&Apache=Dubbo&id=10086

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(String hello,String apache,long id){
        System.out.println("Hello:"+hello);
        System.out.println("Apache:"+apache);
        System.out.println("Id:"+id);
        return new ServerResponse("Server Received url form");
    }

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(Map<String,Object> params){
        System.out.println("Hello:"+params.get("Hello"));
        System.out.println("Apache"+params.get("Apache"));
        System.out.println("Id"+params.get("Id"));
        return new ServerResponse("Server Received url form");
    }

----------------------------------------

TITLE: Configuring Interface-Level Service Discovery in XML
DESCRIPTION: XML configuration to continue using interface-level service discovery when upgrading to Dubbo 3. This setting needs to be applied to provider applications and is optional for consumer applications.

LANGUAGE: xml
CODE:
<dubbo:application name="xxx" register-mode="interface">

----------------------------------------

TITLE: Defining Dubbo Service Interface with Protocol Buffers
DESCRIPTION: Defines the GreetService interface using Protocol Buffers, specifying the request and response message structures.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package greet;

option go_package = "github.com/apache/dubbo-go-samples/error/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Registering Custom Telnet Handler in Dubbo SPI
DESCRIPTION: Properties file content for registering a custom telnet handler with Dubbo's SPI mechanism. This maps the command name to the handler class.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxTelnetHandler

----------------------------------------

TITLE: Implementing UDP Connection in Go
DESCRIPTION: Code snippet showing how to implement a UDP connection in Go, handling both connected and unconnected UDP sockets.

LANGUAGE: Go
CODE:
func dialUDP(network string, localAddr, remoteAddr *net.UDPAddr) (*net.UDPConn, error) {
  conn, err := net.DialUDP(network, localAddr, remoteAddr)
  if err != nil {
    return nil, err
  }
  
  // Check if self-connected
  // Send test packet
  // Check for "connection refused" error
  
  return conn, nil
}

----------------------------------------

TITLE: Resource Observation Implementation
DESCRIPTION: Implementation of resource observation logic including LDS updates and RDS listening trigger mechanism.

LANGUAGE: java
CODE:
void observeResource(Set<String> resourceNames, Consumer<Map<String, T>> consumer, boolean isReConnect);

ldsProtocol.observeResource(ldsResourcesName, (newListener) -> {
    if (!newListener.equals(listenerResult)) {
        this.listenerResult = newListener;
        if (isRdsObserve.get()) {
            createRouteObserve();
        }
    }
}, false);

----------------------------------------

TITLE: Handling URL Encoded Form Data in Triple Protocol
DESCRIPTION: Example of processing application/x-www-form-urlencoded requests. Shows two different approaches: individual parameters and Map-based handling.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetUrlForm HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/x-www-form-urlencoded
Content-Length: 33
Accept: application/json
Hello=World&Apache=Dubbo&id=10086

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(String hello,String apache,long id){
        System.out.println("Hello:"+hello);
        System.out.println("Apache:"+apache);
        System.out.println("Id:"+id);
        return new ServerResponse("Server Received url form");
    }

LANGUAGE: java
CODE:
    public ServerResponse greetUrlForm(Map<String,Object> params){
        System.out.println("Hello:"+params.get("Hello"));
        System.out.println("Apache"+params.get("Apache"));
        System.out.println("Id"+params.get("Id"));
        return new ServerResponse("Server Received url form");
    }

----------------------------------------

TITLE: Configuring Network Protocol for Server
DESCRIPTION: Example of setting up the Triple network protocol for a server using the configuration API.

LANGUAGE: go
CODE:
rc := config.NewRootConfigBuilder().
    SetProvider(config.NewProviderConfigBuilder().
        AddService("GreeterProvider", config.NewServiceConfigBuilder().
            SetInterface("org.apache.dubbo.UserProvider").
            SetProtocolIDs("tripleProtocolKey"). // use protocolID 'tripleProtocolKey'
            Build()).
        Build()).
    AddProtocol("tripleProtocolKey", config.NewProtocolConfigBuilder(). // define protocol config with protocolID 'tripleProtocolKey'
        SetName("tri"). // set service protocol to triple
        Build()).
    Build()

----------------------------------------

TITLE: Generating Java Thread Dump for ZK Analysis
DESCRIPTION: Command to generate a thread dump for analyzing ZooKeeper connection issues using jstack utility. This helps in diagnosing connection and startup problems.

LANGUAGE: shell
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Analyzing Log4j Dependencies in dubbo-common with Maven
DESCRIPTION: This Maven dependency tree shows that dubbo-common has optional dependencies on log4j-core and log4j-api. Users should check if their project has enabled these dependencies and upgrade if necessary.

LANGUAGE: xml
CODE:
[INFO] --- maven-dependency-plugin:3.1.2:tree (default-cli) @ dubbo-common ---
[INFO] org.apache.dubbo:dubbo-common:jar:2.7.14-SNAPSHOT
[INFO] +- org.apache.logging.log4j:log4j-api:jar:2.11.1:provided
[INFO] \- org.apache.logging.log4j:log4j-core:jar:2.11.1:provided

----------------------------------------

TITLE: Modern Application Model Access Methods in Java
DESCRIPTION: Shows the new instance-based methods for accessing application data in Dubbo 3, including various ways to obtain ApplicationModel instances and handle multiple applications.

LANGUAGE: java
CODE:
// Get default instance, compatible with the original single application instance
ApplicationModel.defaultModel().getApplicationEnvironment();

// Get ApplicationModel by Module
moduleModel.getApplicationModel();

// Get ApplicationModel through URL
ScopeModelUtil.getApplicationModel(url.getScopeModel());

// Obtain through Config configuration class
ScopeModelUtil.getApplicationModel(serviceConfig.getScopeModel());

// SPI/Bean can use constructor injection
public ConfigManager(ApplicationModel applicationModel) {
    this.applicationModel = applicationModel;
}

// SPI/Bean can inject by implementing ScopeModelAware interface
public class DefaultGovernanceRuleRepositoryImpl implements GovernanceRuleRepository, ScopeModelAware {

    private ApplicationModel applicationModel;

    @Override
    public void setApplicationModel(ApplicationModel applicationModel) {
        this.applicationModel = applicationModel;
    }
    // ...
}

// Enumerate all Applications in FrameworkModel
for (ApplicationModel applicationModel : frameworkModel.getApplicationModels()) {
    List<RegistryProtocolListener> listeners = applicationModel.getExtensionLoader(RegistryProtocolListener.class)
        .getLoadedExtensionInstances();
    if (CollectionUtils.isNotEmpty(listeners)) {
        for (RegistryProtocolListener listener : listeners) {
            listener.onDestroy();
        }
    }
}

// Enumerate all FrameworkModels
for (FrameworkModel frameworkModel : FrameworkModel.getAllInstances()) {
    destroyProtocols(frameworkModel);
}

----------------------------------------

TITLE: Enabling Configuration Center in Dubbo-Go
DESCRIPTION: Initializes a Dubbo instance with Zookeeper configuration center settings. Configures the data ID, address, and group for remote configuration access.

LANGUAGE: go
CODE:
ins, err := dubbo.NewInstance(
    dubbo.WithConfigCenter(
    	config_center.WithZookeeper(),
    	config_center.WithDataID("dubbo-go-samples-configcenter-zookeeper-server"),
    	config_center.WithAddress("127.0.0.1:2181"),
    	config_center.WithGroup("dubbogo"),
	),
)
if err != nil {
    panic(err)
}

----------------------------------------

TITLE: Configuring Dubbo Service in XML
DESCRIPTION: XML configuration for exposing the DemoService implementation as a Dubbo service.

LANGUAGE: xml
CODE:
<!-- service implementation, as same as regular local bean -->
<bean id="demoService" class="org.apache.dubbo.samples.provider.DemoServiceImpl"/>

<!-- declare the service interface to be exported -->
<dubbo:service interface="org.apache.dubbo.samples.apisix.DemoService" ref="demoService"/>

----------------------------------------

TITLE: Setting Provider Fallback Handler
DESCRIPTION: Implementing a fallback handler for providers when rate limiting occurs, allowing custom error handling and responses.

LANGUAGE: java
CODE:
DubboAdapterGlobalConfig.setProviderFallback((invoker, invocation, ex) -> {
	System.out.println("Blocked by Sentinel: " + ex.getClass().getSimpleName() + ", " + invocation);
	return AsyncRpcResult.newDefaultAsyncResult(ex.toRuntimeException(), invocation);
});

----------------------------------------

TITLE: Kubernetes PodMonitor Configuration
DESCRIPTION: YAML configuration for setting up PodMonitor and RBAC in Kubernetes to monitor Dubbo services

LANGUAGE: yaml
CODE:
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: podmonitor
  labels:
    app: podmonitor
  namespace: monitoring
spec:
  namespaceSelector:
    matchNames:
      - dubbo-system
  selector:
    matchLabels:
      app-type: dubbo
  podMetricsEndpoints:
    - port: metrics
      path: /prometheus
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: dubbo-system
  name: pod-reader
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: dubbo-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pod-reader
subjects:
  - kind: ServiceAccount
    name: prometheus-k8s
    namespace: monitoring

----------------------------------------

TITLE: 使用API方式配置Dubbo服务
DESCRIPTION: 展示了如何使用Java API编程方式配置和启动Dubbo服务提供者。

LANGUAGE: Java
CODE:
public static void main(String[] args) throws IOException {
        ServiceConfig<GreetingsService> service = new ServiceConfig<>();
        service.setApplication(new ApplicationConfig("first-dubbo-provider"));
        service.setRegistry(new RegistryConfig("multicast://224.5.6.7:1234"));
        service.setInterface(GreetingsService.class);
        service.setRef(new GreetingsServiceImpl());
        service.export();
        System.out.println("first-dubbo-provider is running.");
        System.in.read();
}

----------------------------------------

TITLE: Implementing a Local Stub in Dubbo using Java
DESCRIPTION: This snippet demonstrates how to implement a local stub for a Dubbo service. The stub class implements the service interface, handles the remote proxy, and can provide client-side logic such as caching, parameter validation, and fault tolerance.

LANGUAGE: java
CODE:
package com.foo;
public class BarServiceStub implements BarService {
    private final BarService barService;
    
    // Constructor takes in the real remote proxy object
    public BarServiceStub(BarService barService){
        this.barService = barService;
    }
 
    public String sayHello(String name) {
        // This code runs on the client; you can create ThreadLocal local caches or validate parameters
        try {
            return barService.sayHello(name);
        } catch (Exception e) {
            // You can provide fault tolerance; perform any AOP interception here
            return "Fault tolerance data";
        }
    }
}

----------------------------------------

TITLE: Specifying Filters in Dubbo-Go YAML Configuration
DESCRIPTION: YAML configuration snippets showing how to specify multiple filters for both consumer and provider sides in Dubbo-Go.

LANGUAGE: yaml
CODE:
dubbo:
  consumer:
    filter: echo,token,tps,myCustomFilter # Custom filters can be specified

LANGUAGE: yaml
CODE:
dubbo:
  provider:
    services:
      GreeterProvider:
        filter: myCustomFilter,echo,tps

----------------------------------------

TITLE: Configuring Dubbo-go Application Settings
DESCRIPTION: YAML configuration for Dubbo-go application settings, specifying the application name used for service routing.

LANGUAGE: yaml
CODE:
dubbo:
	application:
  	name: my-dubbogo-app

----------------------------------------

TITLE: Installing PostCSS Dependencies
DESCRIPTION: Commands to install required PostCSS dependencies including autoprefixer, postcss, and postcss-cli for the Docsy theme.

LANGUAGE: shell
CODE:
$ npm install --save-dev autoprefixer
$ npm install -D postcss
$ npm install --save-dev postcss-cli

----------------------------------------

TITLE: Configuring OpenTelemetry Tracing in application.yml
DESCRIPTION: This YAML snippet demonstrates how to configure OpenTelemetry tracing in the application.yml file, including enabling tracing, setting sampling rate, propagation type, and OTLP exporter settings.

LANGUAGE: yaml
CODE:
dubbo:
  tracing:
    enabled: true # default is false
    sampling:
      probability: 0.5 # sampling rate, default is 0.1
    propagation:
      type: W3C # W3C/B3 default is W3C
    tracing-exporter:
      otlp-config:
        endpoint: http://localhost:4317
        timeout: 10s # default is 10s
        compression-method: none # none/gzip The method used to compress payloads, default is "none"
        headers: # customized added headers, default is empty
          auth: admin

# tracing info output to logging
logging:
  level:
    root: info
  pattern:
    console: '[%d{dd/MM/yy HH:mm:ss:SSS z}] %t %5p %c{2} [%X{traceId:-}, %X{spanId:-}]: %m%n'

----------------------------------------

TITLE: Generating Stack Trace for Diagnosis in Bash
DESCRIPTION: This command uses jstack to generate a stack trace log file for a specific process ID, which can be used to diagnose input and output stream exceptions.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Dubbo Service in XML
DESCRIPTION: XML configuration for defining a Dubbo service, including application name, registry address, protocol, and service interface.

LANGUAGE: XML
CODE:
<beans /* ...... * />

    <dubbo:application name="test-dubbo-service"/>
    <dubbo:registry address="${dubbo.registry.address}"/>
    <dubbo:protocol name="dubbo" port="20888"/>

    <dubbo:service timeout="10000" interface="org.apache.shenyu.examples.dubbo.api.service.DubboTestService" ref="dubboTestService"/>

</beans>

----------------------------------------

TITLE: Running Nacos in Docker
DESCRIPTION: Docker command to start Nacos in standalone mode, exposing port 8848 and using a specific version.

LANGUAGE: shell
CODE:
docker run --name nacos-quick -e MODE=standalone -p 8849:8848 -d nacos/nacos-server:2.3.1

----------------------------------------

TITLE: Initializing Dubbo-go Application with Tracing Configuration
DESCRIPTION: This snippet demonstrates how to create a new Dubbo-go instance with tracing enabled. It shows various tracing options including exporter selection, propagator type, and sampling mode.

LANGUAGE: go
CODE:
package main

import (
  "dubbo.apache.org/dubbo-go/v3"
  _ "dubbo.apache.org/dubbo-go/v3/imports"
  "dubbo.apache.org/dubbo-go/v3/otel/trace"
)

func main() {
    instance, err := dubbo.NewInstance(
        dubbo.WithTracing(
          // add tracing options here
          trace.WithEnabled(), // enable tracing feature
          trace.WithStdoutExporter(),
          trace.WithW3cPropagator(),
          trace.WithAlwaysMode(),
          trace.WithRatioMode(), // use ratio mode
          trace.WithRatio(0.5), // sample ratio, only active when using ratio mode
        ),
    )
}

----------------------------------------

TITLE: Running Basic Triple REST Sample
DESCRIPTION: Commands to download and run the Triple REST basic sample application using Maven

LANGUAGE: bash
CODE:
git clone --depth=1 https://github.com/apache/dubbo-samples.git
cd dubbo-samples/2-advanced/dubbo-samples-triple-rest/dubbo-samples-triple-rest-basic
mvn spring-boot:run

----------------------------------------

TITLE: Configuring TLS for Dubbo Provider in Java
DESCRIPTION: This code snippet demonstrates how to set up TLS configuration for a Dubbo provider. It includes setting up SSL certificates, enabling mutual TLS if required, and configuring the protocol to use SSL.

LANGUAGE: java
CODE:
SslConfig sslConfig = new SslConfig();
sslConfig.setServerKeyCertChainPath("path to cert");
sslConfig.setServerPrivateKeyPath(args[1]);
// 如果开启双向 cert 认证
if (mutualTls) {
  sslConfig.setServerTrustCertCollectionPath(args[2]);
}

ProtocolConfig protocolConfig = new ProtocolConfig("dubbo/grpc");
protocolConfig.setSslEnabled(true);

----------------------------------------

TITLE: Implementing REST Service with Dubbo Annotation in Java
DESCRIPTION: This code snippet demonstrates the implementation of a REST service using the Dubbo @DubboService annotation. It includes method implementations and context handling.

LANGUAGE: Java
CODE:
@DubboService()
public class RestDemoServiceImpl implements RestDemoService {
    private static Map<String, Object> context;
    private boolean called;

    @Override
    public String sayHello(String name) {
        called = true;
        return "Hello, " + name;
    }

    public boolean isCalled() {
        return called;
    }

    @Override
    public Integer hello(Integer a, Integer b) {
        context = RpcContext.getServerAttachment().getObjectAttachments();
        return a + b;
    }

    @Override
    public String error() {
        throw new RuntimeException();
    }

    public static Map<String, Object> getAttachments() {
        return context;
    }
}

----------------------------------------

TITLE: Running Dubbo-go Client
DESCRIPTION: Command to start the dubbo-go client example.

LANGUAGE: shell
CODE:
$ go run client.go

----------------------------------------

TITLE: Configuring Scan Package in Dubbo using @EnableDubbo Annotation
DESCRIPTION: To resolve the 'Scan package not configured' error in Dubbo, you need to properly set the scanBasePackages parameter of the @EnableDubbo annotation. This tells Dubbo which packages to scan for components.

LANGUAGE: Java
CODE:
@EnableDubbo(scanBasePackages = {"com.your.package"})

----------------------------------------

TITLE: Running Java Client and Server
DESCRIPTION: Shell commands to start the Java client and server implementations.

LANGUAGE: shell
CODE:
./java/java-client/run.sh
./java/java-server/run.sh

----------------------------------------

TITLE: Configuring Sentinel Dashboard Startup Parameters
DESCRIPTION: This Bash snippet demonstrates the startup parameters required to connect a Dubbo service provider to the Sentinel dashboard. It includes settings for the API port, dashboard server address, and project name.

LANGUAGE: Bash
CODE:
-Djava.net.preferIPv4Stack=true -Dcsp.sentinel.api.port=8720 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=dubbo-provider-demo

----------------------------------------

TITLE: Defining Callback Service and Listener Interfaces in Java
DESCRIPTION: Defines interfaces for a callback service and a callback listener, used for implementing parameter callbacks in Dubbo.

LANGUAGE: java
CODE:
public interface CallbackService {
    void addListener(String key, CallbackListener listener);
}

public interface CallbackListener {
    void changed(String msg);
}

----------------------------------------

TITLE: Configuring Script Routing Rule in YAML for Dubbo
DESCRIPTION: Defines a script routing rule in YAML format for Dubbo. It specifies the configuration version, target application, script language, enabled status, and the actual JavaScript routing logic.

LANGUAGE: yaml
CODE:
configVersion: v3.0
key: demo-provider
type: javascript
enabled: true
script: |
  (function route(invokers,invocation,context) {
      var result = new java.util.ArrayList(invokers.size());
      for (i = 0; i < invokers.size(); i ++) {
          if ("10.20.3.3".equals(invokers.get(i).getUrl().getHost())) {
              result.add(invokers.get(i));
          }
      }
      return result;
  } (invokers, invocation, context));

----------------------------------------

TITLE: Implementing Dubbo Service Interface in Java
DESCRIPTION: Defines the basic DemoService interface with a method that handles HTTP request context conversion for APISIX integration.

LANGUAGE: java
CODE:
public interface DemoService {
    /**
     * standard samples dubbo infterace demo
     * @param context pass http infos
     * @return Map<String, Object></> pass to response http
     **/
    Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext);
}

----------------------------------------

TITLE: REST Service Implementation
DESCRIPTION: Implementation class for the REST service interface

LANGUAGE: java
CODE:
@DubboService
public class DemoServiceImpl implements DemoService {
    @Override
    public String hello(String name) {
        return "Hello " + name;
    }

    @Override
    public String hello(User user, int count) {
        return "Hello " + user.getTitle() + ". " + user.getName() + ", " + count;
    }
}

----------------------------------------

TITLE: Configuring Traffic Governance Rules Namespace in Dubbo
DESCRIPTION: XML configuration for specifying the namespace for traffic governance rules in Apollo.

LANGUAGE: xml
CODE:
<dubbo:config-center namespace="governance" address="apollo://localhost:8080"/>

----------------------------------------

TITLE: Implementing MetricsFilter in Java
DESCRIPTION: Implementation of the MetricsFilter class, which intercepts invocations to collect metrics data.

LANGUAGE: java
CODE:
@Activate(group = PROVIDER, order = -1)
public class MetricsFilter implements Filter, ScopeModelAware {
    @Override
    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
        collector.increaseTotalRequests(interfaceName, methodName, group, version);
        collector.increaseProcessingRequests(interfaceName, methodName, group, version);
        Long startTime = System.currentTimeMillis();
        try {
            Result invoke = invoker.invoke(invocation);
            collector.increaseSucceedRequests(interfaceName, methodName, group, version);
            return invoke;
        } catch (RpcException e) {
            collector.increaseFailedRequests(interfaceName, methodName, group, version);
            throw e;
        } finally {
            Long endTime = System.currentTimeMillis();
            Long rt = endTime - startTime;
            collector.addRT(interfaceName, methodName, group, version, rt);
            collector.decreaseProcessingRequests(interfaceName, methodName, group, version);
        }
    }
}

----------------------------------------

TITLE: Implementing Dubbo Client in Rust
DESCRIPTION: Creates a Dubbo client implementation in Rust to interact with the Greeter service. Demonstrates how to make a unary call to the greet method of the service.

LANGUAGE: rust
CODE:
#[tokio::main]
async fn main() {
    let mut cli = GreeterClient::new().with_uri("http://127.0.0.1:8888".to_string());

    println!("# unary call");
    let resp = cli
        .greet(Request::new(GreeterRequest {
            name: "message from client".to_string(),
        }))
        .await;
    let resp = match resp {
        Ok(resp) => resp,
        Err(err) => return println!("{:?}", err),
    };
    let (_parts, body) = resp.into_parts();
    println!("Response: {:?}", body);
}

----------------------------------------

TITLE: Starting Dubbo Provider
DESCRIPTION: Java main method to start the Dubbo provider using Spring context.

LANGUAGE: java
CODE:
public class ProviderBootstrap {
    public static void main(String[] args) throws Exception {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ProviderConfiguration.class);
        context.start();
        System.in.read();
    }
}

----------------------------------------

TITLE: Testing RPC Server with cURL
DESCRIPTION: cURL command to test the RPC server endpoint with a JSON payload.

LANGUAGE: shell
CODE:
$ curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:20000/greet.GreetService/Greet

----------------------------------------

TITLE: Starting Go Server and Testing
DESCRIPTION: Shell commands to start the Go server implementation and test it using curl HTTP request.

LANGUAGE: shell
CODE:
go run go/go-server/cmd/server.go

curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50052/org.apache.dubbo.sample.Greeter/sayHello

----------------------------------------

TITLE: Enabling Dubbo Injection
DESCRIPTION: Command to enable automatic injection mode for the Kubernetes namespace to connect to Zookeeper registry

LANGUAGE: shell
CODE:
kubectl label namespace dubbo-demo dubbo-injection=enabled --overwrite

----------------------------------------

TITLE: Adding Maven Dependencies for JSR303 Validation in Dubbo
DESCRIPTION: This snippet shows the Maven dependencies required for implementing JSR303 validation in Dubbo. It includes the validation API and Hibernate validator.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>1.0.0.GA</version>
</dependency>
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>4.2.0.Final</version>
</dependency>

----------------------------------------

TITLE: Implementing Dubbo Service with REST Support
DESCRIPTION: Java class implementing the Dubbo service interface with REST support, using DubboService annotation.

LANGUAGE: java
CODE:
@DubboService
public class UserServiceImpl implements UserService {
    @Override
    public List<User> getUsers() {
        return Collections.singletonList(new User(1L, "Dubbo provider!"));
    }
}

----------------------------------------

TITLE: Modified Dubbo Compiler Implementation
DESCRIPTION: Modified JavassistCompiler and JdkCompiler implementations to support native image compilation by checking for pre-compiled classes

LANGUAGE: java
CODE:
@Override
public Class<?> doCompile(String name, String source) throws Throwable {
  try {
    Class<?> res = Class.forName(name);
    return res;
  } catch (Throwable ex) {
    //ignore
  }
  //... original compilation logic
}

----------------------------------------

TITLE: Implementing Fixed Window Rate Limiting in Dubbo
DESCRIPTION: Demonstrates the implementation of fixed window rate limiting algorithm in Java Dubbo, using a private final class.

LANGUAGE: Java
CODE:
private final class DefaultRateLimiter implements RateLimiter {
    //...
}

----------------------------------------

TITLE: REST API Interface Definition Example
DESCRIPTION: Example showing REST API interface definition using Spring MVC annotations.

LANGUAGE: java
CODE:
@RestController()
@RequestMapping("/demoService")
public interface DemoService {
    @RequestMapping(value = "/hello", method = RequestMethod.GET)
    Integer hello(@RequestParam Integer a, @RequestParam Integer b);

    @RequestMapping(value = "/error", method = RequestMethod.GET)
    String error();

    @RequestMapping(value = "/say", method = RequestMethod.POST, consumes = MediaType.TEXT_PLAIN_VALUE)
    String sayHello(@RequestBody String name);
}

----------------------------------------

TITLE: Defining DynamicConfiguration Interface in Go
DESCRIPTION: This code defines the DynamicConfiguration interface in dubbo-go, which specifies the methods that need to be implemented by each configuration center, including parsing, listening, and retrieving configurations.

LANGUAGE: Go
CODE:
// DynamicConfiguration for modify listener and get properties file
type DynamicConfiguration interface {
	Parser() parser.ConfigurationParser
	SetParser(parser.ConfigurationParser)
	AddListener(string, ConfigurationListener, ...Option)
	RemoveListener(string, ConfigurationListener, ...Option)
	// GetProperties get properties file
	GetProperties(string, ...Option) (string, error)

	// GetRule get Router rule properties file
	GetRule(string, ...Option) (string, error)

	// GetInternalProperty get value by key in Default properties file(dubbo.properties)
	GetInternalProperty(string, ...Option) (string, error)

	// PublishConfig will publish the config with the (key, group, value) pair
	PublishConfig(string, string, string) error

	// RemoveConfig will remove the config white the (key, group) pair
	RemoveConfig(string, string) error

	// GetConfigKeysByGroup will return all keys with the group
	GetConfigKeysByGroup(group string) (*gxset.HashSet, error)
}

----------------------------------------

TITLE: Installing Dubbo SPI Extensions via Maven
DESCRIPTION: Maven dependency configuration for including Dubbo SPI Extensions components. Requires replacing component_name and component_version placeholders with specific values from the components list.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>${component_name}</artifactId>
  <version>${component_version}</version>
</dependency>

----------------------------------------

TITLE: Adding Fastjson2 Dependency
DESCRIPTION: Demonstrates how to add the Fastjson2 dependency to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>com.alibaba.fastjson2</groupId>
  <artifactId>fastjson2</artifactId>
  <version>${fastjson2.version}</version>
</dependency>

----------------------------------------

TITLE: Retrieving Interface Configuration Metadata from Zookeeper
DESCRIPTION: Shows how to fetch the interface configuration metadata for a specific application and revision from Zookeeper. The metadata includes service details and parameters.

LANGUAGE: bash
CODE:
[zk: localhost:2181(CONNECTED) 33] get /dubbo/metadata/demo-provider/da3be833baa2088c5f6776fb7ab1a436

LANGUAGE: json
CODE:
{
    "app":"demo-provider",
    "revision":"da3be833baa2088c5f6776fb7ab1a436",
    "services":{
        "org.apache.dubbo.demo.DemoService:dubbo":{
            "name":"org.apache.dubbo.demo.DemoService",
            "protocol":"dubbo",
            "path":"org.apache.dubbo.demo.DemoService",
            "params":{
                "side":"provider",
                "release":"",
                "methods":"sayHello,sayHelloAsync",
                "deprecated":"false",
                "dubbo":"2.0.2",
                "pid":"38298",
                "interface":"org.apache.dubbo.demo.DemoService",
                "service-name-mapping":"true",
                "timeout":"3000",
                "generic":"false",
                "metadata-type":"remote",
                "delay":"5000",
                "application":"demo-provider",
                "dynamic":"true",
                "REGISTRY_CLUSTER":"registry1",
                "anyhost":"true",
                "timestamp":"1626887121829"
            }
        },
        "org.apache.dubbo.demo.RestDemoService:1.0.0:rest":{
            "name":"org.apache.dubbo.demo.RestDemoService",
            "version":"1.0.0",
            "protocol":"rest",
            "path":"org.apache.dubbo.demo.RestDemoService",
            "params":{
                "side":"provider",
                "release":"",
                "methods":"getRemoteApplicationName,sayHello,hello,error",
                "deprecated":"false",
                "dubbo":"2.0.2",
                "pid":"38298",
                "interface":"org.apache.dubbo.demo.RestDemoService",
                "service-name-mapping":"true",
                "version":"1.0.0",
                "timeout":"5000",
                "generic":"false",
                "revision":"1.0.0",
                "metadata-type":"remote",
                "delay":"5000",
                "application":"demo-provider",
                "dynamic":"true",
                "REGISTRY_CLUSTER":"registry1",
                "anyhost":"true",
                "timestamp":"1626887120943"
            }
        }
    }
}

----------------------------------------

TITLE: Initializing Apollo Configuration in Go
DESCRIPTION: This code snippet demonstrates how to initialize an Apollo configuration client in dubbo-go, including parsing URL parameters and setting up the Apollo client.

LANGUAGE: Go
CODE:
func newApolloConfiguration(url *common.URL) (*apolloConfiguration, error) {
	c := &apolloConfiguration{
		url: url,
	}
	configAddr := c.getAddressWithProtocolPrefix(url)
	configCluster := url.GetParam(constant.CONFIG_CLUSTER_KEY, "")

	appId := url.GetParam(constant.CONFIG_APP_ID_KEY, "")
	namespaces := getProperties(url.GetParam(constant.CONFIG_NAMESPACE_KEY, cc.DEFAULT_GROUP))
	c.appConf = &config.AppConfig{
		AppID:         appId,
		Cluster:       configCluster,
		NamespaceName: namespaces,
		IP:            configAddr,
	}

	agollo.InitCustomConfig(func() (*config.AppConfig, error) {
		return c.appConf, nil
	})

	return c, agollo.Start()
}

----------------------------------------

TITLE: Creating Ephemeral Nodes in ZooKeeper
DESCRIPTION: Implementation of ephemeral node creation in ZooKeeper using Curator client. Handles node existence checks and exception handling for node creation operations.

LANGUAGE: java
CODE:
    public void createEphemeral(String path) {
        try {
            client.create().withMode(CreateMode.EPHEMERAL).forPath(path);
        } catch (NodeExistsException e) {
        } catch (Exception e) {
            throw new IllegalStateException(e.getMessage(), e);
        }
    }

----------------------------------------

TITLE: Multiple Writes Using writeStream in Dubbo Python
DESCRIPTION: Demonstrates multiple writes using the writeStream method in bidirectional streaming mode, including how to end the write-stream.

LANGUAGE: python
CODE:
stream = stub.bi_stream()
# Use the write method to send messages
stream.write(greeter_pb2.GreeterRequest(name="jock"))
stream.write(greeter_pb2.GreeterRequest(name="jane"))
stream.write(greeter_pb2.GreeterRequest(name="alice"))
stream.write(greeter_pb2.GreeterRequest(name="dave"))
# Call done_writing to notify the server that the client has finished writing
stream.done_writing()

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: This code snippet shows the definition of a Dubbo service interface in Java, including methods for saying hello, echo, test, and getting user information.

LANGUAGE: Java
CODE:
public interface DemoProvider {
    String sayHello(String name);
    String echo() ;
    void test();
    UserResponse getUserInfo(UserRequest request);
}

----------------------------------------

TITLE: Adding Custom Shutdown Callback in Dubbo-go
DESCRIPTION: Go code snippet demonstrating how to add a custom shutdown callback function in Dubbo-go. This allows users to define operations to be executed after the offline logic is completed.

LANGUAGE: go
CODE:
extension.AddCustomShutdownCallback(func() {
	// User defined operations
})

----------------------------------------

TITLE: Checking Dubbo Version
DESCRIPTION: Shows how to display the version number of the currently running Dubbo instance.

LANGUAGE: text
CODE:
dubbo>version
dubbo version "3.0.10-SNAPSHOT"

dubbo>

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: This code snippet shows how to define a Dubbo service interface in Java, including method signatures for various RPC operations.

LANGUAGE: java
CODE:
public interface DemoProvider {
    String sayHello(String name);
    String echo() ;
    void test();
    UserResponse getUserInfo(UserRequest request);
}

----------------------------------------

TITLE: Installing GPG on Mac OS
DESCRIPTION: Commands to install GPG on Mac OS using Homebrew and verify the installation.

LANGUAGE: shell
CODE:
$ brew install gpg
$ gpg --version # Check version, should be 2.x

----------------------------------------

TITLE: Configuring Custom Parameters in Dubbo Protocol
DESCRIPTION: Example of setting custom parameters for a Dubbo protocol using XML format.

LANGUAGE: xml
CODE:
<dubbo:protocol name="napoli">
   <dubbo:parameter key="http://10.20.160.198/wiki/display/dubbo/napoli.queue.name" value="xxx" />
</dubbo:protocol>

----------------------------------------

TITLE: Configuring Serialization Check Status in Properties
DESCRIPTION: Shows how to configure the serialization check status using properties file.

LANGUAGE: properties
CODE:
dubbo.application.serialize-check-status=STRICT

----------------------------------------

TITLE: Configuring Custom Parameters in Dubbo Protocol
DESCRIPTION: Example of setting custom parameters for a Dubbo protocol using XML format.

LANGUAGE: xml
CODE:
<dubbo:protocol name="napoli">
   <dubbo:parameter key="http://10.20.160.198/wiki/display/dubbo/napoli.queue.name" value="xxx" />
</dubbo:protocol>

----------------------------------------

TITLE: Configuring Zookeeper Registry in XML
DESCRIPTION: Shows how to configure the Zookeeper registry address using XML configuration in a Dubbo application.

LANGUAGE: xml
CODE:
<dubbo:registry address="zookeeper://localhost:2181" />

----------------------------------------

TITLE: Defining HelloService Interface in Java
DESCRIPTION: Java interface definition for the HelloService, which will be implemented by the Dubbo provider and called by the consumer.

LANGUAGE: java
CODE:
package com.example.demoapi;

public interface HelloService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Implementing Protobuf Server in Dubbo Python
DESCRIPTION: Server-side implementation using protobuf serialization in Dubbo. Demonstrates how to create method handlers and service handlers with custom serialization.

LANGUAGE: python
CODE:
def say_hello(request):
    print(f"Received request: {request}")
    return greeter_pb2.GreeterReply(message=f"{request.name} Dubbo!")


if __name__ == "__main__":
    method_handler = RpcMethodHandler.unary(
        say_hello,
        request_deserializer=greeter_pb2.GreeterRequest.FromString,
        response_serializer=greeter_pb2.GreeterReply.SerializeToString,
    )
    service_handler = RpcServiceHandler(
        service_name="org.apache.dubbo.samples.proto.Greeter",
        method_handlers={"sayHello": method_handler},
    )

    service_config = ServiceConfig(service_handler)
    server = dubbo.Server(service_config).start()

    input("Press Enter to stop the server...\n")

----------------------------------------

TITLE: Configuring Dubbo Consumer XML for Service Call
DESCRIPTION: This XML configuration sets up the Dubbo consumer for calling a remote service. It includes application, registry, protocol, and reference settings.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="hello-world-app" />
    <dubbo:registry address="multicast://224.5.6.7:1234" />
    <dubbo:protocol name="dubbo" port="20880" />
    <dubbo:reference id="userReadService" interface="com.package.UserReadService" check="false" />
</beans>

----------------------------------------

TITLE: Registering Custom Validation Implementation
DESCRIPTION: Example of registering a custom Validation implementation in the META-INF/dubbo/org.apache.dubbo.validation.Validation file. This allows Dubbo to discover and use the custom implementation.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxValidation

----------------------------------------

TITLE: Implementing Dubbo-go Service Logic
DESCRIPTION: Modify the SayHello function in pkg/service/service.go to implement the business logic for the Dubbo-go server.

LANGUAGE: go
CODE:
func (s *GreeterServerImpl) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {
	return &api.User{Name: "Hello " + in.Name, Id: "v1.0.0"}, nil
}

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: Implementation of the Dubbo service interface with business logic and service publication using annotations.

LANGUAGE: java
CODE:
// Service implementation shown in image 13-impl.jpg

----------------------------------------

TITLE: Configuring Dubbo Protocol with Port
DESCRIPTION: Example of configuring the Dubbo protocol with only a port number, demonstrating the default behavior when a host is not specified.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" port="20890" />

----------------------------------------

TITLE: Configuring QOS via XML
DESCRIPTION: XML configuration for Dubbo QoS showing how to set QoS parameters within a Dubbo application context.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
  <dubbo:application name="demo-provider">
    <dubbo:parameter key="qos-enable" value="true"/>
    <dubbo:parameter key="qos-accept-foreign-ip" value="false"/>
    <dubbo:parameter key="qos-accept-foreign-ip-whitelist" value="123.12.10.13,132.12.10.13/24"/>
    <dubbo:parameter key="qos-anonymous-access-permission-level" value="NONE"/>
    <dubbo:parameter key="qos-port" value="33333"/>
  </dubbo:application>
  <dubbo:registry address="multicast://224.5.6.7:1234"/>
  <dubbo:protocol name="dubbo" port="20880"/>
  <dubbo:service interface="org.apache.dubbo.demo.provider.DemoService" ref="demoService"/>
  <bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>
</beans>

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: This code demonstrates the implementation of the DemoProvider interface in Java, providing concrete implementations for each method.

LANGUAGE: java
CODE:
public class DemoProviderImpl implements DemoProvider {
    public String sayHello(String name) {
        System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return "Hello " + name + ", response form provider: " + RpcContext.getContext().getLocalAddress();
    }
    @Override
    public String echo()  {
        System.out.println("receive....");
        return "pang";
    }
    @Override
    public void test() {
        System.out.println("test");
    }
    @Override
    public UserResponse getUserInfo(UserRequest request) {
        System.out.println(request);
        UserResponse response = new UserResponse();
        response.setStatus("ok");
        Map<String, String> map = new HashMap<String, String>();
        map.put("id", "1");
        map.put("name", "test");
        response.setInfo(map);
        return response;
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: This code demonstrates the implementation of the DemoProvider interface in Java, providing concrete implementations for each method.

LANGUAGE: java
CODE:
public class DemoProviderImpl implements DemoProvider {
    public String sayHello(String name) {
        System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return "Hello " + name + ", response form provider: " + RpcContext.getContext().getLocalAddress();
    }
    @Override
    public String echo()  {
        System.out.println("receive....");
        return "pang";
    }
    @Override
    public void test() {
        System.out.println("test");
    }
    @Override
    public UserResponse getUserInfo(UserRequest request) {
        System.out.println(request);
        UserResponse response = new UserResponse();
        response.setStatus("ok");
        Map<String, String> map = new HashMap<String, String>();
        map.put("id", "1");
        map.put("name", "test");
        response.setInfo(map);
        return response;
    }
}

----------------------------------------

TITLE: Conditional Routing Rules Configuration
DESCRIPTION: Example of conditional routing rules that forward service calls based on region matching.

LANGUAGE: yaml
CODE:
configVersion: v3.0
enabled: true
force: false
key: org.apache.dubbo.samples.CommentService
conditions:
  - '=> region = $region'

----------------------------------------

TITLE: Referring Services in DefaultModuleDeployer in Java
DESCRIPTION: Method in DefaultModuleDeployer that handles the service reference process, including refreshing and initializing ReferenceConfig objects.

LANGUAGE: Java
CODE:
private void referServices() {
    configManager.getReferences().forEach(rc -> {
        try {
            ReferenceConfig<?> referenceConfig = (ReferenceConfig<?>) rc;
            if (!referenceConfig.isRefreshed()) {
                referenceConfig.refresh();
            }

            if (rc.shouldInit()) {
                if (referAsync || rc.shouldReferAsync()) {
                    ExecutorService executor = executorRepository.getServiceReferExecutor();
                    CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
                        try {
                            referenceCache.get(rc);
                        } catch (Throwable t) {
                            logger.error(getIdentifier() + " refer async catch error : " + t.getMessage(), t);
                        }
                    }, executor);

                    asyncReferringFutures.add(future);
                } else {
                    referenceCache.get(rc);
                }
            }
        } catch (Throwable t) {
            logger.error(getIdentifier() + " refer catch error.");
            referenceCache.destroy(rc);
            throw t;
        }
    });
}

----------------------------------------

TITLE: Implementing Dubbo Services with Triple X Support
DESCRIPTION: Example showing how to implement Dubbo services that handle both east-west and north-south traffic using Triple X protocol. Demonstrates the use of @DubboService annotation for service implementation and REST-style endpoints.

LANGUAGE: java
CODE:
package org.apache.test;

@DubboService
public class UserServiceImpl implements UserService {
   // Handles east-west requests
}

// Triple X also supports north-south traffic
@DubboService
public class OrderService {
   @GetMapping("/order/{orderId}")
   public Order getOrderById(@PathVariable("orderId") String orderId) {}
}

----------------------------------------

TITLE: Checking Compliance of Third-party Dependencies
DESCRIPTION: Maven command to check for GPL/LGPL dependencies in the project.

LANGUAGE: shell
CODE:
mvn license:add-third-party -Dlicense.useMissingFile
find . -name THIRD-PARTY.txt | xargs grep -E 'GPL|General Public License' | grep -v Apache | grep -v MIT | grep -v CDDL

----------------------------------------

TITLE: Typical URL Examples
DESCRIPTION: Provides examples of typical URLs for various protocols including HTTP, HTTPS, and FTP.

LANGUAGE: plaintext
CODE:
http://www.facebook.com/friends?param1=value1&amp;param2=value2
https://username:password@10.20.130.230:8080/list?version=1.0.0
ftp://username:password@192.168.1.7:21/1/read.txt

----------------------------------------

TITLE: Defining Dubbo API Module POM in XML
DESCRIPTION: XML configuration for the Dubbo API module's Maven POM file. Defines the project structure and dependencies.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>demo-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
</project>

----------------------------------------

TITLE: Accessing Dubbo Service via HTTP
DESCRIPTION: Demonstrates how to access the Dubbo service using a simple HTTP POST request with cURL.

LANGUAGE: Shell
CODE:
curl \
 --header 'Content-Type: application/json' \
 --header 'TRI-Service-Version: 1.0.0' \
 --header 'TRI-Service-group: dubbo' \
 --data '{"sentence": "Hello World"}' \
 http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say

----------------------------------------

TITLE: Port Forwarding for Local Access
DESCRIPTION: These commands map cluster ports to local ports, allowing access to the mall frontend, Dubbo Admin Console, and Skywalking Console from a local machine.

LANGUAGE: sh
CODE:
kubectl port-forward -n dubbo-demo deployment/shop-frontend 8080:8080

kubectl port-forward -n dubbo-system service/dubbo-admin 38080:38080

kubectl port-forward -n dubbo-system service/skywalking-oap-dashboard 8082:8082

----------------------------------------

TITLE: Setting DUBBO_GO_CONFIG_PATH Environment Variable
DESCRIPTION: Sets the path to the dubbogo.yml configuration file using an environment variable.

LANGUAGE: shell
CODE:
export DUBBO_GO_CONFIG_PATH="../conf/dubbogo.yml"

----------------------------------------

TITLE: Configuring Dubbo for Native Image Compatibility
DESCRIPTION: This YAML snippet shows the configuration for Dubbo to use compatible components for Native Image, including setting the serialization method to Fastjson2 and the logger to slf4j.

LANGUAGE: YAML
CODE:
dubbo:
  application:
    name: ${spring.application.name}
    logger: slf4j
  protocol:
    name: dubbo
    port: -1
    serialization: fastjson2
  registry:
    id: zk-registry
    address: zookeeper://127.0.0.1:2181
  config-center:
    address: zookeeper://127.0.0.1:2181
  metadata-report:
    address: zookeeper://127.0.0.1:2181
  provider:
    serialization: fastjson2
  consumer:
    serialization: fastjson2

----------------------------------------

TITLE: Configuring Nacos Registry Address in Dubbo Properties
DESCRIPTION: Configure the Nacos registry address in Dubbo externalized configuration properties file. This example shows how to switch from Zookeeper to Nacos registry.

LANGUAGE: Properties
CODE:
## Other properties remain unchanged

## Nacos registry address
dubbo.registry.address = nacos://10.20.153.10:8848
...

----------------------------------------

TITLE: Defining 'Inheritance' and Ignoring Fields in Go Structs for Hessian Serialization
DESCRIPTION: Demonstrates how to use anonymous structs to mimic Java inheritance and ignore specific fields during Hessian serialization in Go. The Dog struct 'inherits' from Animal and ignores the DogName field.

LANGUAGE: go
CODE:
type Dog struct {
    Animal
    Gender  string
    DogName string `hessian:"-"`
}

----------------------------------------

TITLE: Project Structure for Dubbo Liveness Probe Extension
DESCRIPTION: Maven project structure for implementing a custom Liveness Probe in Dubbo. Shows the file organization including the Java implementation and the configuration file location.

LANGUAGE: plaintext
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxLivenessProbe.java (Implements LivenessProbe interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.qos.probe.LivenessProbe (Plain text file, content: xxx=com.xxx.XxxLivenessProbe)

----------------------------------------

TITLE: Configuring Netty4 for Dubbo Consumer
DESCRIPTION: XML configuration to enable Netty4 client on the consumer side.

LANGUAGE: xml
CODE:
<dubbo:consumer client="netty4" />

----------------------------------------

TITLE: Implementing MySQL Repository
DESCRIPTION: MySQL implementation of the IRepository interface

LANGUAGE: java
CODE:
public class MysqlRepository implements IRepository {
    public void save(String data) {
        System.out.println("Save " + data + " to Mysql");
    }
}

----------------------------------------

TITLE: Starting Dubbo Server with Fastify
DESCRIPTION: Creates a Fastify server, registers the Dubbo service, and starts listening on a specified port.

LANGUAGE: TypeScript
CODE:
import { fastify } from "fastify";
import { fastifyDubboPlugin } from "@apachedubbo/dubbo-fastify";
import routes from "./dubbo";

async function main() {
  const server = fastify();
  await server.register(fastifyDubboPlugin, {
    routes,
  });
  server.get("/", (_, reply) => {
    reply.type("text/plain");
    reply.send("Hello World!");
  });
  await server.listen({ host: "localhost", port: 8080 });
  console.log("server is listening at", server.addresses());
}

void main();

----------------------------------------

TITLE: Referencing Remote Service using Dubbo Annotation
DESCRIPTION: This snippet demonstrates how to reference a remote service using the @Reference annotation in Dubbo. It's an alternative to XML configuration.

LANGUAGE: Java
CODE:
public class AnnotationConsumeService {

    @com.alibaba.dubbo.config.annotation.Reference
    public AnnotateService annotateService;

    // ...

}

----------------------------------------

TITLE: Configuring Hessian2 Serialization in Dubbo using YAML
DESCRIPTION: This snippet shows how to enable Hessian2 serialization for Dubbo protocol in a Spring Boot application.yml file.

LANGUAGE: yaml
CODE:
dubbo:
 protocol:
   serialization: hessian2

----------------------------------------

TITLE: Adding Dubbo 2 Plugin Dependency in Maven
DESCRIPTION: XML snippet for adding the Dubbo 2 cluster specify address plugin dependency to a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-cluster-specify-address-dubbo2</artifactId>
  <version>1.0.0</version>
</dependency>

----------------------------------------

TITLE: Creating Proxy for Remote Service in ReferenceConfig in Java
DESCRIPTION: Method in ReferenceConfig that handles the creation of a proxy object for remote service invocation, including URL parsing and invoker creation.

LANGUAGE: Java
CODE:
private T createProxy(Map<String, String> referenceParameters) {
    if (shouldJvmRefer(referenceParameters)) {
        createInvokerForLocal(referenceParameters);
    } else {
        urls.clear();
        if (StringUtils.isNotEmpty(url)) {
            parseUrl(referenceParameters);
        } else {
            if (!LOCAL_PROTOCOL.equalsIgnoreCase(getProtocol())) {
                aggregateUrlFromRegistry(referenceParameters);
            }
        }
        createInvokerForRemote();
    }

    if (logger.isInfoEnabled()) {
        logger.info("Referred dubbo service: [" + referenceParameters.get(INTERFACE_KEY) + "]."
            + (Boolean.parseBoolean(referenceParameters.get(GENERIC_KEY)) ?
                " it's GenericService reference" : " it's not GenericService reference"));
    }

    URL consumerUrl = new ServiceConfigURL(CONSUMER_PROTOCOL, referenceParameters.get(REGISTER_IP_KEY), 0,
        referenceParameters.get(INTERFACE_KEY), referenceParameters);
    consumerUrl = consumerUrl.setScopeModel(getScopeModel());
    consumerUrl = consumerUrl.setServiceModel(consumerModel);
    MetadataUtils.publishServiceDefinition(consumerUrl, consumerModel.getServiceModel(), getApplicationModel());

    return (T) proxyFactory.getProxy(invoker, ProtocolUtils.isGeneric(generic));
}

----------------------------------------

TITLE: Dubbo Configuration Center Properties
DESCRIPTION: Configuration settings stored in the config center under /dubbo/config/dubbo/dubbo.properties path

LANGUAGE: properties
CODE:
# /dubbo/config/dubbo/dubbo.properties
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.metadata-report.address=zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: 实现 Go 服务端 Dubbo 方法
DESCRIPTION: 实现 Go 服务端的 Dubbo 方法，包括 SayHello 方法的具体逻辑。

LANGUAGE: Go
CODE:
type GreeterProvider struct {
	api.GreeterProviderBase
}

func (s *GreeterProvider) SayHello(ctx context.Context, in *api.HelloRequest) (*api.User, error) {
	logger.Infof("Dubbo3 GreeterProvider get user name = %s\n", in.Name)
	return &api.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}

----------------------------------------

TITLE: Accessing Dubbo QoS via Telnet
DESCRIPTION: Demonstrates how to connect to Dubbo QoS using telnet on the default port 22222 and interact with basic commands.

LANGUAGE: shell
CODE:
$ telnet localhost 22222

----------------------------------------

TITLE: 配置 Java 服务端 Dubbo 服务暴露
DESCRIPTION: 使用 Spring XML 配置文件定义 Java 服务端的 Dubbo 服务暴露，包括应用名、注册中心、协议和服务接口信息。

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<dubbo:application name="user-info-server"/>
	<dubbo:registry id="dubbogo"  address="zookeeper://127.0.0.1:2181" />
	<dubbo:protocol id="dubbo" name="dubbo" host="127.0.0.1" port="20010" />
	<dubbo:service id="aaa" registry="dubbogo" timeout="3000" interface="org.apache.dubbo.UserProvider" ref="demoService"/>

	<bean id="demoService" class="org.apache.dubbo.UserProviderImpl" />
</beans>

----------------------------------------

TITLE: Building Dubbo Filter Chain Implementation
DESCRIPTION: Shows how the Dubbo filter chain is constructed in ProtocolFilterWrapper, including reference creation and invoker chain building logic.

LANGUAGE: java
CODE:
public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
        if (Constants.REGISTRY_PROTOCOL.equals(url.getProtocol())) {
            return protocol.refer(type, url);
        }
        return buildInvokerChain(protocol.refer(type, url), Constants.REFERENCE_FILTER_KEY, Constants.CONSUMER);
    }
    
    private static <T> Invoker<T> buildInvokerChain(final Invoker<T> invoker, String key, String group) {
        Invoker<T> last = invoker;
        List<Filter> filters = ExtensionLoader.getExtensionLoader(Filter.class).getActivateExtension(invoker.getUrl(), key, group);
        if (filters.size() > 0) {
            for (int i = filters.size() - 1; i >= 0; i --) {
                final Filter filter = filters.get(i);
                final Invoker<T> next = last;
                last = new Invoker<T>() {

                    public Class<T> getInterface() {
                        return invoker.getInterface();
                    }

                    public URL getUrl() {
                        return invoker.getUrl();
                    }

                    public boolean isAvailable() {
                        return invoker.isAvailable();
                    }

                    public Result invoke(Invocation invocation) throws RpcException {
                        return filter.invoke(next, invocation);
                    }

                    public void destroy() {
                        invoker.destroy();
                    }

                    @Override
                    public String toString() {
                        return invoker.toString();
                    }
                };
            }
        }
        return last;
    }

----------------------------------------

TITLE: Installing Dubbo Admin using dubboctl
DESCRIPTION: Downloads and installs Dubbo Admin using the dubboctl command line tool. Includes downloading the installer, setting up the executable, and basic installation commands.

LANGUAGE: shell
CODE:
curl -L https://dubbo.apache.org/installer.sh | VERSION=0.1.0 sh -

LANGUAGE: shell
CODE:
ln -s dubbo-admin-0.1.0/bin/dubboctl /usr/local/bin/dubboctl

LANGUAGE: shell
CODE:
dubboctl install

----------------------------------------

TITLE: Adding Dubbo Metrics API Dependency
DESCRIPTION: Maven dependency configuration for adding Dubbo metrics API support required for Micrometer integration.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-metrics-api</artifactId>
</dependency>

----------------------------------------

TITLE: Configuring Protobuf Maven Plugin for Reactive Dubbo
DESCRIPTION: Maven plugin configuration for generating reactive stub code using ReactorDubbo3TripleGenerator.

LANGUAGE: xml
CODE:
<build>
    <plugins>
        <plugin>
            <groupId>org.xolstice.maven.plugins</groupId>
            <artifactId>protobuf-maven-plugin</artifactId>
            <version>0.6.1</version>
            <configuration>
                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}
                </protocArtifact>
                <pluginId>grpc-java</pluginId>
                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}
                </pluginArtifact>
                <protocPlugins>
                    <protocPlugin>
                        <id>dubbo</id>
                        <groupId>org.apache.dubbo</groupId>
                        <artifactId>dubbo-compiler</artifactId>
                        <version>${compiler.version}</version>
                        <mainClass>org.apache.dubbo.gen.tri.reactive.ReactorDubbo3TripleGenerator</mainClass>
                    </protocPlugin>
                </protocPlugins>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>compile</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>

----------------------------------------

TITLE: Setting Thread-Specific Address Zone
DESCRIPTION: Demonstrates how to programmatically specify the routing environment for Dubbo calls using thread-local storage.

LANGUAGE: java
CODE:
AddressZoneSpecify.setAddress(Environment.SHANGHAI);
demoService.play();

----------------------------------------

TITLE: Implementing EnableDubbo Annotation in Java
DESCRIPTION: Definition of @EnableDubbo annotation that combines @EnableDubboConfig and @DubboComponentScan for scanning Dubbo service providers and consumers.

LANGUAGE: java
CODE:
@EnableDubboConfig
@DubboComponentScan
public @interface EnableDubbo {
    @AliasFor(annotation = DubboComponentScan.class, attribute = "basePackages")
    String[] scanBasePackages() default {};

    @AliasFor(annotation = DubboComponentScan.class, attribute = "basePackageClasses")
    Class<?>[] scanBasePackageClasses() default {};    
}

----------------------------------------

TITLE: Configuring Method Timeout and Retries in Dubbo XML
DESCRIPTION: Example of using dubbo:method to set a custom timeout and retry count for a specific method within a Dubbo service reference.

LANGUAGE: XML
CODE:
<dubbo:reference interface="com.xxx.XxxService">
    <dubbo:method name="findXxx" timeout="3000" retries="2" />
</dubbo:reference>

----------------------------------------

TITLE: Server-side Generic Service Configuration
DESCRIPTION: Configuration code for exposing generic services on the server side using Dubbo API.

LANGUAGE: java
CODE:
ApplicationConfig application = new ApplicationConfig();
application.setName("api-generic-provider");

RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://127.0.0.1:2181");

application.setRegistry(registry);

GenericService genericService = new GenericServiceImpl();

ServiceConfig<GenericService> service = new ServiceConfig<GenericService>();
service.setApplication(application);
service.setInterface("com.alibaba.dubbo.samples.generic.api.HelloService");
service.setRef(genericService);
service.export();

ServiceConfig<GenericService> service2 = new ServiceConfig<GenericService>();
service2.setApplication(application);
service2.setInterface("com.alibaba.dubbo.samples.generic.api.HiService");
service2.setRef(genericService);
service2.export();

----------------------------------------

TITLE: HTTP Request Format for Dubbo Service Calls
DESCRIPTION: Specification for HTTP request URL format when calling Dubbo services. The URL must include service and method names that match the backend Dubbo service declarations.

LANGUAGE: http
CODE:
http://host/{service}/{method}

----------------------------------------

TITLE: Initializing Dubbo Spring Boot Application with Embedded ZooKeeper
DESCRIPTION: Main class for a Dubbo Spring Boot application that starts an embedded ZooKeeper instance and launches the Spring context.

LANGUAGE: java
CODE:
@SpringBootApplication
public class DemoApplication {
	public static void main(String[] args) {
		new EmbeddedZooKeeper(2181, false).start();
		SpringApplication.run(DemoApplication.class, args);
	}
}

----------------------------------------

TITLE: Defining Greeter Service with Protobuf
DESCRIPTION: Protocol Buffers definition of a simple Greeter service with request and response message types.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
option java_multiple_files = true;
package org.apache.dubbo.samples.tri.unary;

message GreeterRequest {
  string name = 1;
}
message GreeterReply {
  string message = 1;
}

service Greeter{
  rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Defining Greeter Service with Protobuf
DESCRIPTION: Protocol Buffers definition of a simple Greeter service with request and response message types.

LANGUAGE: protobuf
CODE:
syntax = "proto3";
option java_multiple_files = true;
package org.apache.dubbo.samples.tri.unary;

message GreeterRequest {
  string name = 1;
}
message GreeterReply {
  string message = 1;
}

service Greeter{
  rpc greet(GreeterRequest) returns (GreeterReply);
}

----------------------------------------

TITLE: Implementing gRPC Service in Go
DESCRIPTION: Go code implementing the GreetService interface generated from the Protocol Buffer definition.

LANGUAGE: go
CODE:
type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	resp := &greet.GreetResponse{Greeting: req.Name}
	return resp, nil
}

----------------------------------------

TITLE: 配置Dubbo应用的基本属性
DESCRIPTION: 使用Properties文件配置Dubbo应用的基本属性,包括应用名称、注册中心地址、协议等。

LANGUAGE: Properties
CODE:
dubbo.application.name=annotation-provider
dubbo.registry.address=zookeeper://127.0.0.1:2181
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880

----------------------------------------

TITLE: Configuring Dubbo Client Consumer
DESCRIPTION: Client-side configuration for service consumption with providedBy parameter

LANGUAGE: java
CODE:
@Component("annotatedConsumer")
public class GreetingServiceConsumer {
    @DubboReference(version = "1.0.0", providedBy = "dubbo-samples-xds-provider")
    private GreetingService greetingService;
    public String doSayHello(String name) {
        return greetingService.sayHello(name);
    }
}

----------------------------------------

TITLE: Implementing Dubbo Service Consumer Controller in Java
DESCRIPTION: Creates a Spring RestController that injects and uses the Dubbo service, exposing it via a web endpoint.

LANGUAGE: Java
CODE:
package com.example.democonsumer.controller;

import com.alibaba.dubbo.config.annotation.Reference;
import com.example.demoapi.HelloService;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class DemoConsumerController {
    @Reference(version = "${demo.service.version}",
            application = "${dubbo.application.id}",
            url = "dubbo://<Please fill in the specific IP>:12345")
    private HelloService helloService;

    @RequestMapping("/sayHello")
    public String sayHello(@RequestParam String name) {
        return helloService.sayHello(name);
    }
}

----------------------------------------

TITLE: Extension Interface Definition
DESCRIPTION: Example of defining an extension interface with SPI annotation and scope specification

LANGUAGE: java
CODE:
@SPI(scope = ExtensionScope.FRAMEWORK)
public interface TypeBuilder extends Prioritized {
    boolean accept(Class<?> clazz);
    TypeDefinition build(Type type, Class<?> clazz, Map<String, TypeDefinition> typeCache);
}

----------------------------------------

TITLE: Calling Dubbo Service from Node.js using dubbo2.js
DESCRIPTION: This TypeScript code demonstrates how to call a Dubbo service method from Node.js using the configured dubbo2.js client.

LANGUAGE: TypeScript
CODE:
import {demoService} from './dubboConfig'

demoService.sayHello('kirito').then(({res,err})=>{
    console.log(res)
});

----------------------------------------

TITLE: Configuring Load Balancing at Method Level for Service Provider in Dubbo (XML)
DESCRIPTION: This example shows how to configure the load balancing strategy for a specific method of a service provider using XML configuration in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:service interface="...">
    <dubbo:method name="..." loadbalance="roundrobin"/>
</dubbo:service>

----------------------------------------

TITLE: Implementing Dubbo Consumer with Annotations
DESCRIPTION: Example of implementing a Dubbo service consumer using the @Reference annotation.

LANGUAGE: java
CODE:
@Component
public class GreetingServiceConsumer {
    @Reference
    private GreetingService greetingService;

    public String doSayHello(String name) {
        return greetingService.sayHello(name);
    }
}

----------------------------------------

TITLE: Trie Implementation in Dubbo-go-pixiu
DESCRIPTION: This Go code snippet shows the package declaration for the Trie implementation in Dubbo-go-pixiu. It indicates the location of the Trie data structure within the project's file structure.

LANGUAGE: go
CODE:
pkg/common/router/trie/trie.go:26

----------------------------------------

TITLE: Implementing Dubbo Client in TypeScript
DESCRIPTION: Creates a Dubbo client using the generated code and makes an RPC call to the ExampleService.

LANGUAGE: TypeScript
CODE:
import { createPromiseClient } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-node";

const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
  httpVersion: "1.1",
});

async function main() {
  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });
  const res = await client.say({ sentence: "Hello World" });
  console.log(res);
}
void main();

----------------------------------------

TITLE: Running Dubbo-go Server
DESCRIPTION: Command to start the dubbo-go server example from the go-server/cmd directory.

LANGUAGE: shell
CODE:
$ go run server.go

----------------------------------------

TITLE: Starting Seata-Server in Shell
DESCRIPTION: This shell command demonstrates how to start the Seata-Server with specific configuration options.

LANGUAGE: shell
CODE:
sh seata-server.sh -p 8091 -h 127.0.0.1 -m file

----------------------------------------

TITLE: Initializing Dubbo Service with Bootstrap
DESCRIPTION: Example code showing how to initialize and start a Dubbo service using DubboBootstrap with basic configuration.

LANGUAGE: java
CODE:
public class Application {
    public static void main(String[] args) throws Exception {
            startWithBootstrap();
    }
    private static void startWithBootstrap() {
        ServiceConfig<DemoServiceImpl> service = new ServiceConfig<>();
        service.setInterface(DemoService.class);
        service.setRef(new DemoServiceImpl());
        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        bootstrap.application(new ApplicationConfig("dubbo-demo-api-provider"))
            .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
            .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
            .service(service)
            .start()
            .await();
    }
}

----------------------------------------

TITLE: 配置Dubbo注册中心地址参数实现只订阅 (XML)
DESCRIPTION: 通过在dubbo:registry标签的address属性中添加register=false参数，实现服务只订阅不注册。这是另一种配置方式，效果与第一种方法相同。

LANGUAGE: xml
CODE:
<dubbo:registry address="10.20.153.10:9090?register=false" />

----------------------------------------

TITLE: Configuring Dubbo Service in XML
DESCRIPTION: XML configuration for exposing the Dubbo service, including application name, registry, protocol, and service interface details.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- dubbo provider info, used to compute dependency -->
    <dubbo:application name="demo-provider"/>

    <dubbo:registry protocol="zookeeper" address="localhost:2181"/>

    <!-- dubbo protocol, used to expose service at port 20880 -->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!-- realize a service as a local bean -->
    <bean id="demoProvider" class="com.alibaba.dubbo.demo.provider.DemoProviderImpl"/>

    <!-- claim for service interfaces to expose -->
    <dubbo:service interface="com.alibaba.dubbo.demo.DemoProvider" ref="demoProvider" version="1.0.0"/>

</beans>

----------------------------------------

TITLE: Configuring Kubernetes Port Forwarding for Higress
DESCRIPTION: Command to set up port forwarding in Kubernetes for local access to Higress services. Maps local ports 80, 443, and 8080 to the Higress gateway service.

LANGUAGE: shell
CODE:
kubectl port-forward service/higress-gateway -n higress-system 80:80 443:443 8080:8080

----------------------------------------

TITLE: Demonstrating Triple Protocol Request Message Example
DESCRIPTION: Detailed example of a Triple protocol request message, including request line, headers, and body in JSON format.

LANGUAGE: text
CODE:
POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1
Host: 127.0.0.1:30551
Content-Type: application/json
Accept: application/json
Content-Length: 11
Accept-Encoding: compress, gzip
tri-protocol-version: 1.0.0
tri-service-version: 1.0.0
tri-service-group: dubbo
tri-service-timeout: 3000

[{"world"}]

----------------------------------------

TITLE: Adding Dubbo Mock Admin Dependency in Maven
DESCRIPTION: XML snippet for adding the Dubbo Mock Admin dependency to a Maven project. This is required for enabling service mock functionality in consumer applications.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-mock-admin</artifactId>
  <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Adding Dubbo Mock Admin Dependency in Maven
DESCRIPTION: XML snippet for adding the Dubbo Mock Admin dependency to a Maven project. This is required for enabling service mock functionality in consumer applications.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.dubbo.extensions</groupId>
  <artifactId>dubbo-mock-admin</artifactId>
  <version>${version}</version>
</dependency>

----------------------------------------

TITLE: Instance Metadata Example
DESCRIPTION: Example of instance metadata in application-level service discovery.

LANGUAGE: JSON
CODE:
{
	"name": "provider-app-name",
	"id": "192.168.0.102:20880",
	"address": "192.168.0.102",
	"port": 20880,
	"sslPort": null,
	"payload": {
		"id": null,
		"name": "provider-app-name",
		"metadata": {
			"metadataService": "{\"dubbo\":{\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"2.7.5\",\"port\":\"20881\"}}",
			"endpoints": "[{\"port\":20880,\"protocol\":\"dubbo\"}]",
			"storage-type": "local",
			"revision": "6785535733750099598",
		}
	},
	"registrationTimeUTC": 1583461240877,
	"serviceType": "DYNAMIC",
	"uriSpec": null
}

----------------------------------------

TITLE: Configuring Single Etcd Server
DESCRIPTION: Basic configuration for connecting to a single Etcd server using the dubbo:registry element.

LANGUAGE: xml
CODE:
<dubbo:registry address="etcd://10.20.153.10:6379" />

----------------------------------------

TITLE: Implementing Dubbo Service Provider in Java
DESCRIPTION: Implements the HelloService interface as a Dubbo service, including logic to occasionally throw exceptions for testing purposes.

LANGUAGE: Java
CODE:
package com.example.demoprovider.provider;

import com.alibaba.dubbo.config.annotation.Service;
import com.example.demoapi.HelloService;

@Service(version = "${demo.service.version}",
        application = "${dubbo.application.id}",
        protocol = "${dubbo.protocol.id}",
        registry = "${dubbo.registry.id}")
public class HelloServiceImpl implements HelloService {
    static int i = 0;
    @Override
    public String sayHello(String name) {
        i++;
        if (i % 3 == 0) {
            throw new RuntimeException("ex");
        }
        return "Hello " + name + "!";
    }
}

----------------------------------------

TITLE: Configuring Dubbo Provider
DESCRIPTION: Provider configuration properties including Zookeeper registry settings for Dubbo service.

LANGUAGE: properties
CODE:
dubbo.application.name=demo-provider
dubbo.registry.address=zookeeper://$DOCKER_HOST:2181
dubbo.protocol.name=dubbo
dubbo.protocol.port=20880

----------------------------------------

TITLE: Building Dubboctl from Source
DESCRIPTION: Instructions for cloning the Dubbo Admin repository, compiling Dubboctl, and placing it in the executable path.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/dubbo-admin.git
cd dubbo-admin/cmd/dubboctl
go build -o dubboctl .

ln -s dubbo-admin/cmd/dubboctl/dubboctl /usr/local/bin/dubboctl

----------------------------------------

TITLE: Cross-Language HTTP Client Examples
DESCRIPTION: Examples of calling Dubbo HTTP services from different programming languages.

LANGUAGE: python
CODE:
import requests\nurl = 'http://localhost:8888/services/curl'\nheaders = {\n'rest-service-group': 'test',\n'rest-service-version': '1.0.0'\n}\nresponse = requests.get(url, headers=headers)

LANGUAGE: go
CODE:
import (\n"fmt"\n"net/http"\n)\n\nfunc main() {\n    url := "http://localhost:8888/services/curl"\n    req, err := http.NewRequest("GET", url, nil)\n    // ... implementation\n}

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Interface definition for a simple Dubbo service that accepts a name parameter and returns a greeting

LANGUAGE: java
CODE:
public interface DemoService {
	String sayHello(String name);
}

----------------------------------------

TITLE: Configuring Single Dubbo Bean with @EnableDubboConfig
DESCRIPTION: Example of using @EnableDubboConfig for single Dubbo configuration bean binding.

LANGUAGE: Java
CODE:
@EnableDubboConfig
@PropertySource("META-INF/config.properties")
@Configuration
public class DubboConfiguration {

}

----------------------------------------

TITLE: Implementing Service Interfaces with Tracing
DESCRIPTION: Java implementation of HelloService and GreetingService with simulated processing delays for tracing demonstration

LANGUAGE: java
CODE:
public class HelloServiceImpl implements HelloService {
    @Override
    public String hello(String message) {
        try {
            Thread.sleep(new Random(System.currentTimeMillis()).nextInt(1000));
        } catch (InterruptedException e) {
            // no op
        }
        return "hello, " + message;
    }
}

----------------------------------------

TITLE: Starting Zookeeper Docker Container
DESCRIPTION: Command to start a Zookeeper instance in a Docker container, exposing port 2181 for client connections.

LANGUAGE: shell
CODE:
docker run --rm --name zookeeper -p 2181:2181 zookeeper

----------------------------------------

TITLE: Configuring MSE Microservices Traffic Governance in Java
DESCRIPTION: Java configuration for enabling MSE microservices traffic governance capability. This snippet shows how to set the JVM parameter to enable MSE.

LANGUAGE: Java
CODE:
SERVICE_OPTS="${SERVICE_OPTS} -Dmse.enable=true"

----------------------------------------

TITLE: Adding Sentinel Dubbo Adapter Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the Sentinel Dubbo Adapter dependency to a Maven project. This adapter includes filters for service providers and consumers.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>com.alibaba.csp</groupId>
    <artifactId>sentinel-dubbo-adapter</artifactId>
    <version>x.y.z</version>
</dependency>

----------------------------------------

TITLE: Configuring SerializationOptimizer in Dubbo XML
DESCRIPTION: This XML configuration snippet shows how to specify the SerializationOptimizer implementation class in Dubbo's protocol configuration. It enables the use of the custom optimizer for Kryo serialization.

LANGUAGE: xml
CODE:
<dubbo:protocol name="dubbo" serialization="kryo" optimizer="org.apache.dubbo.demo.SerializationOptimizerImpl"/>

----------------------------------------

TITLE: Installing Protoc via Homebrew on macOS
DESCRIPTION: Commands to install protoc compiler using Homebrew package manager on macOS and verify the installed version.

LANGUAGE: sh
CODE:
$ brew install protobuf
$ protoc --version  # Ensure compiler version is 3+

----------------------------------------

TITLE: Application-Level Registration Example in JSON
DESCRIPTION: Example JSON structure showing the new application-level registration model introduced in Dubbo-go v1.5.0. It demonstrates how applications and their instances are registered.

LANGUAGE: json
CODE:
{
"application1": [
  {"name":"instance1", "ip":"127.0.0.1", "metadata":{}},
  {"name":"instance2", "ip":"127.0.0.2", "metadata":{}},
  {"name":"instanceN", "ip":"127.0.0.3", "metadata":{}}
]
}

----------------------------------------

TITLE: Invoking Dubbo Service
DESCRIPTION: Java code to invoke the remote Dubbo service.

LANGUAGE: java
CODE:
demoService.sayHello("world");

----------------------------------------

TITLE: Accessing Dubbo Triple Service using cURL
DESCRIPTION: Example showing how to make an HTTP request to a Dubbo Triple protocol service using cURL. The request includes a JSON payload and specifies the content type header.

LANGUAGE: sh
CODE:
curl \
    --header "Content-Type: application/json" \
    --data '{"sentence": "Hello Dubbo."}' \
    https://host:port/org.apache.dubbo.sample.GreetService/sayHello

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: This code snippet demonstrates the implementation of the Dubbo service interface in Java, providing concrete implementations for the defined methods.

LANGUAGE: Java
CODE:
public class DemoProviderImpl implements DemoProvider {
    public String sayHello(String name) {
        System.out.println("[" + new SimpleDateFormat("HH:mm:ss").format(new Date()) + "] Hello " + name + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return "Hello " + name + ", response form provider: " + RpcContext.getContext().getLocalAddress();
    }
    @Override
    public String echo()  {
        System.out.println("receive....");
        return "pang";
    }
    @Override
    public void test() {
        System.out.println("test");
    }
    @Override
    public UserResponse getUserInfo(UserRequest request) {
        System.out.println(request);
        UserResponse response = new UserResponse();
        response.setStatus("ok");
        Map<String, String> map = new HashMap<String, String>();
        map.put("id", "1");
        map.put("name", "test");
        response.setInfo(map);
        return response;
    }
}

----------------------------------------

TITLE: Curator Dependency Configuration in Maven
DESCRIPTION: Maven dependency configuration for Curator Framework and Recipes, specifying version 4.2.0 for compatibility with Dubbo 2.7.3.

LANGUAGE: xml
CODE:
    <dependency>
        <groupId>org.apache.curator</groupId>
        <artifactId>curator-framework</artifactId>
        <version>4.2.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.curator</groupId>
        <artifactId>curator-recipes</artifactId>
        <version>4.2.0</version>
    </dependency>

----------------------------------------

TITLE: Defining Dubbo Client Interface for Spring Cloud Service
DESCRIPTION: Java interface definition for a Dubbo client to call a Spring Cloud service, using FeignClient annotation.

LANGUAGE: java
CODE:
@FeignClient(name = "spring-cloud-provider-for-dubbo")
public interface UserServiceFeign {
    @RequestMapping(value="/users/list", method = RequestMethod.GET, produces = "application/json")
    List<User> users();
}

----------------------------------------

TITLE: Calculating Load in Adaptive Load Balancing Algorithm
DESCRIPTION: Formula for calculating the load value of a provider in the adaptive load balancing algorithm. It considers factors such as CPU load, response time, and inflight requests.

LANGUAGE: plaintext
CODE:
load = (cpuLoad * multiple * ewma) / ((timeout - rt) * weight) + 1 + inflight

----------------------------------------

TITLE: Configuring Custom QoS Permission Checker in Dubbo
DESCRIPTION: Configuration file for registering the custom PermissionChecker implementation with Dubbo. This properties file should be placed in the META-INF/dubbo directory of the project resources.

LANGUAGE: properties
CODE:
qosPermissionChecker=com.xxx.XxxPermissionChecker

----------------------------------------

TITLE: Creating Pixiu Filter Factory in Go
DESCRIPTION: Implementation of a filter factory that handles filter configuration and chain preparation. Includes configuration structure definition and chain assembly logic.

LANGUAGE: go
CODE:
type (
	DemoFilterFactory struct {
		conf *Config
	}
	Config struct {
		LogPrefix string `yaml:"logPrefix,omitempty"`
	}
)

func (f *DemoFilterFactory) PrepareFilterChain(ctx *contexthttp.HttpContext, chain filter.FilterChain) error {
   demo := &DemoFilter{logPrefix: f.conf.LogPrefix}

   chain.AppendDecodeFilters(demo)
   chain.AppendEncodeFilters(demo)
   return nil
}

func (f *DemoFilterFactory) Config() interface{} {
   return f.conf
}

func (f *DemoFilterFactory) Apply() error {
   return nil
}

----------------------------------------

TITLE: Metadata Service Export Configuration
DESCRIPTION: Configures and exports the metadata service including protocol and method settings

LANGUAGE: java
CODE:
 private ServiceConfig<MetadataService> buildServiceConfig() {
        ApplicationConfig applicationConfig = getApplicationConfig();
        ServiceConfig<MetadataService> serviceConfig = new ServiceConfig<>();
        serviceConfig.setScopeModel(applicationModel.getInternalModule());
        serviceConfig.setApplication(applicationConfig);
       
        RegistryConfig registryConfig = new RegistryConfig("N/A");
        registryConfig.setId("internal-metadata-registry");

        serviceConfig.setRegistry(registryConfig);
        serviceConfig.setRegister(false);
        serviceConfig.setProtocol(generateMetadataProtocol());
        serviceConfig.setInterface(MetadataService.class);
        serviceConfig.setDelay(0);
        serviceConfig.setRef(metadataService);
        serviceConfig.setGroup(applicationConfig.getName());
        serviceConfig.setVersion(MetadataService.VERSION);
        serviceConfig.setMethods(generateMethodConfig());
        serviceConfig.setConnections(1);
        serviceConfig.setExecutes(100);

        return serviceConfig;
    }

----------------------------------------

TITLE: Configuring Force and Fail Mocking in Dubbo XML
DESCRIPTION: Shows advanced mocking configurations using 'force:' and 'fail:' prefixes in Dubbo 2.6.6+. These allow for forced mocking or mocking only on failure.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="force:return fake" />

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="force:throw com.foo.MockException" />

----------------------------------------

TITLE: Implementing Dubbo Client Controller in Java
DESCRIPTION: REST controller implementation showing the client-side integration of Dubbo service reference

LANGUAGE: java
CODE:
@RestController
public class UserController {
	@Reference(version = "1.0.0")
	private UserService userService;

	@GetMapping("/user/{id}")
	public User findUserById(@PathVariable Integer id) {
		return userService.findUser(id);
	}

----------------------------------------

TITLE: Installing and Starting Arthas
DESCRIPTION: Commands to download and launch the Arthas diagnostic tool for Java applications

LANGUAGE: bash
CODE:
$ wget https://arthas.aliyun.com/arthas-boot.jar
$ java -jar arthas-boot.jar

----------------------------------------

TITLE: Configuring Apache Dubbo Plugin Dependencies
DESCRIPTION: Maven dependencies required for integrating Apache Dubbo plugin with Apache ShenYu gateway, including necessary Dubbo and Zookeeper registry dependencies.

LANGUAGE: xml
CODE:
        <!-- apache shenyu  apache dubbo plugin start-->
        <dependency>
            <groupId>org.apache.shenyu</groupId>
            <artifactId>shenyu-spring-boot-starter-plugin-apache-dubbo</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.7.5</version>
        </dependency>
        <!-- Dubbo zookeeper registry dependency start -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-client</artifactId>
            <version>4.0.1</version>
            <exclusions>
                <exclusion>
                    <artifactId>log4j</artifactId>
                    <groupId>log4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>4.0.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <version>4.0.1</version>
        </dependency>

----------------------------------------

TITLE: Defining Dubbo-go Service Interface using Protocol Buffers
DESCRIPTION: This protobuf definition outlines the GreetService interface with two methods: Greet and GreetTimeout. It also defines the request and response message structures.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package greet;

option go_package = "github.com/apache/dubbo-go-samples/timeout/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
  rpc GreetTimeout(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Configuring DubboBootstrap for Multi-Instance Support in Java
DESCRIPTION: Illustrates various ways to configure DubboBootstrap for multi-instance support in Dubbo. It shows how to create new application instances, add modules, references, and services, and how to use the default application instance.

LANGUAGE: java
CODE:
// Create new application instance, share FrameworkModel
DubboBootstrap.newInstance(FrameworkModel)  // SharedFrameworkModel -> NewApplicationModel
    .addModule()  // New ModuleModel
    	.addReference(ReferenceConfig)  // Attach service configuration to the module
    	.addReference(ReferenceConfig)
    	.addService(ServiceConfig)
    .endModule()
    .addModule()
    	.addReference(ReferenceConfig)
    	.addService(ServiceConfig)
    .endModule()
    .addRegistry()
    .addConfigCenter()
    .start()

// Compatible with old Bootstrap API, using default application instance
DubboBootstrap.getInstance()      // DefaultFrameworkModel -> DefaultApplicationModel
    .addReference(ReferenceConfig) // DefaultApplicationModel -> DefaultModuleModel
    .addService(ServiceConfig)  // DefaultApplicationModel -> DefaultModuleModel
    .setRegistry()              // DefaultApplicationModel
    .start()

// Create new application instance
DubboBootstrap.newInstance()      // DefaultFrameworkModel -> NewApplicationModel
    .addReference(ReferenceConfig) // NewApplicationModel -> DefaultModuleModel
    .addService(ServiceConfig)  // NewApplicationModel -> DefaultModuleModel
    .setRegistry()              // NewApplicationModel
    .start()

----------------------------------------

TITLE: Detailed Profiler Output in Dubbo Java
DESCRIPTION: Example log output for Dubbo's detail profiler mode on both consumer and provider sides. Shows a more granular timing breakdown including filter invocations.

LANGUAGE: plaintext
CODE:
[19/07/22 07:10:59:059 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 990.828336 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms
invocation context:
path=org.apache.dubbo.samples.api.GreetingsService;
remote.application=first-dubbo-consumer;
interface=org.apache.dubbo.samples.api.GreetingsService;
version=0.0.0;
timeout=1000;
thread info: 
Start time: 285965458479241
+-[ Offset: 0.000000ms; Usage: 990.828336ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi
  +-[ Offset: 0.852044ms; Usage: 989.899439ms, 99% ] Filter org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter invoke.
     +-[ Offset: 1.814858ms; Usage: 988.924876ms, 99% ] Filter org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter invoke.
        +-[ Offset: 1.853211ms; Usage: 988.877928ms, 99% ] Filter org.apache.dubbo.monitor.support.MonitorClusterFilter invoke.
           +-[ Offset: 1.873243ms; Usage: 988.661708ms, 99% ] Filter org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter invoke.
              +-[ Offset: 2.159140ms; Usage: 0.504939ms, 0% ] Router route.
              +-[ Offset: 8.125823ms; Usage: 981.748366ms, 99% ] Cluster org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker invoke.
                 +-[ Offset: 8.258359ms; Usage: 981.612033ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx

----------------------------------------

TITLE: Configuring Serializable Interface Check via ApplicationConfig in Java
DESCRIPTION: Enables Serializable interface checks using ApplicationConfig in Java. This ensures that only classes implementing Serializable can be deserialized.

LANGUAGE: java
CODE:
ApplicationConfig applicationConfig = new ApplicationConfig();
applicationConfig.setCheckSerializable(true);

----------------------------------------

TITLE: Configuring Different Communication Frameworks for Dubbo Consumer
DESCRIPTION: XML configuration examples showing how to set different communication frameworks (Netty and Netty4) for different references on the consumer side.

LANGUAGE: xml
CODE:
<dubbo:consumer client="netty">
  <dubbo:reference />
</dubbo:consumer>

LANGUAGE: xml
CODE:
<dubbo:consumer client="netty4">
  <dubbo:reference />
</dubbo:consumer>

----------------------------------------

TITLE: Configuring Database Connection in XML
DESCRIPTION: This XML snippet shows how to configure the database connection for the Dubbo services.

LANGUAGE: xml
CODE:
<property name="url" value="jdbc:mysql://x.x.x.x:3306/xxx" />
<property name="username" value="xxx" />
<property name="password" value="xxx" />

----------------------------------------

TITLE: Adding Native Dependencies for Dubbo
DESCRIPTION: This XML snippet shows the additional dependencies required for Dubbo's Native Image support, including dubbo-config-spring6 and dubbo-native components.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-config-spring6</artifactId>
    <version>${dubbo.version}</version>
</dependency>
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-native</artifactId>
    <version>${dubbo.version}</version>
</dependency>

----------------------------------------

TITLE: Dubbo LoadBalance Interface
DESCRIPTION: Definition of Dubbo's LoadBalance interface with SPI annotations

LANGUAGE: java
CODE:
@SPI(RandomLoadBalance.NAME)
public interface LoadBalance {
    @Adaptive("loadbalance")
    <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException;
}

----------------------------------------

TITLE: Configuring autoConcurrencyLimiter in Dubbo XML
DESCRIPTION: Sets up the autoConcurrencyLimiter adaptive flow control algorithm using Dubbo XML configuration. This algorithm uses window-based sampling to update maxConcurrency and explore remaining capacity.

LANGUAGE: xml
CODE:
<dubbo:provider flowcontrol="autoConcurrencyLimiter" />

----------------------------------------

TITLE: Defining REST Service Interface and Implementation
DESCRIPTION: Java code showing the service interface definition with REST annotations and its implementation

LANGUAGE: java
CODE:
// Service Interface
package org.apache.dubbo.rest.demo;

import org.apache.dubbo.remoting.http12.rest.Mapping;
import org.apache.dubbo.remoting.http12.rest.Param;

public interface DemoService {
    String hello(String name);

    @Mapping(path = "/hi", method = HttpMethods.POST)
    String hello(User user, @Param(value = "c", type = ParamType.Header) int count);
}

// Service Implementation
@DubboService
public class DemoServiceImpl implements DemoService {
    @Override
    public String hello(String name) {
        return "Hello " + name;
    }

    @Override
    public String hello(User user, int count) {
        return "Hello " + user.getTitle() + ". " + user.getName() + ", " + count;
    }
}

// Model
@Data
public class User {
    private String title;
    private String name;
}

----------------------------------------

TITLE: Implementing User Structure with Hessian2 Encoding
DESCRIPTION: Defines a User struct that implements JavaClassName method for Hessian2 protocol compatibility with Dubbo.

LANGUAGE: go
CODE:
type User struct {
	Id   string
	Name string
	Age  int32
	Time time.Time
}

func (u User) JavaClassName() string {
	return "org.apache.dubbo.User"
}

----------------------------------------

TITLE: Configuring Multiple Protocols in Spring XML
DESCRIPTION: XML configuration for defining multiple protocols in Dubbo

LANGUAGE: xml
CODE:
<dubbo:protocol id="dubbo-id" name="dubbo" port="20880"/>
<dubbo:protocol id="triple-id" name="tri" port="50051"/>

----------------------------------------

TITLE: Sending multipart/formdata request in HTTP
DESCRIPTION: Example of a multipart/formdata HTTP request containing text, JSON, and binary image data.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetPojo HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: multipart/form-data; boundary=example-part-boundary
Accept: application/json
 
--example-part-boundary
Content-Disposition: form-data; name="username"
Content-Type: text/plain
    
LuYue
--example-part-boundary
Content-Disposition: form-data; name="userdetail"
Content-Type: application/json
 
{
    "location":"beijing",
    "username":"LuYue"
}
--example-part-boundary
Content-Disposition: form-data; name="userimg";filename="user.jpeg"
Content-Type: image/jpeg
<binary-image data>
--example-part-boundary--

----------------------------------------

TITLE: Customizing Cache Key Generation in Java
DESCRIPTION: Demonstrates how to customize the cache key generation strategy by providing a custom KeyGenerator implementation.

LANGUAGE: java
CODE:
KeyGenerator keyGenerator = new ...
ReferenceConfigCache cache = ReferenceConfigCache.getCache(keyGenerator);

----------------------------------------

TITLE: Configuring QoS in Dubbo XML
DESCRIPTION: Shows how to configure QoS parameters in Dubbo's XML configuration including enable/disable, port, and IP access settings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
  <dubbo:application name="demo-provider">
    <dubbo:parameter key="qos.enable" value="true"/>
    <dubbo:parameter key="qos.accept.foreign.ip" value="false"/>
    <dubbo:parameter key="qos.port" value="33333"/>
  </dubbo:application>
  <dubbo:registry address="multicast://224.5.6.7:1234"/>
  <dubbo:protocol name="dubbo" port="20880"/>
  <dubbo:service interface="org.apache.dubbo.demo.provider.DemoService" ref="demoService"/>
  <bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>
</beans>

----------------------------------------

TITLE: Implementing Dubbo Service for APISIX
DESCRIPTION: This Java code implements the ApisixService interface, handling the HTTP request context and returning a response map.

LANGUAGE: java
CODE:
public class ApisixServiceImpl implements ApisixService {
    @Override
    public Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext) {
        for (Map.Entry<String, Object> entry : httpRequestContext.entrySet()) {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        Map<String, Object> ret = new HashMap<String, Object>();
        ret.put("body", "dubbo success\n");
        ret.put("status", "200");
        ret.put("test", "123");

        return ret;
    }
}

----------------------------------------

TITLE: Configuring Dubbo Service Provider in XML
DESCRIPTION: XML configuration for Dubbo service provider with group specifications.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo
       http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo"/>
    <dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo2"/>
</beans>

----------------------------------------

TITLE: Configuring Dubbo Service Provider in XML
DESCRIPTION: XML configuration for Dubbo service provider with group specifications.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo
       http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo"/>
    <dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo2"/>
</beans>

----------------------------------------

TITLE: Configuring TLS for Dubbo Consumer in Java
DESCRIPTION: This snippet shows how to configure TLS for a Dubbo consumer. It sets up the client trust certificate collection path, and for mutual TLS, it also sets the client key certificate chain path and private key path.

LANGUAGE: java
CODE:
if (!mutualTls) {}
    sslConfig.setClientTrustCertCollectionPath(args[0]);
} else {
    sslConfig.setClientTrustCertCollectionPath(args[0]);
    sslConfig.setClientKeyCertChainPath(args[1]);
    sslConfig.setClientPrivateKeyPath(args[2]);
}

----------------------------------------

TITLE: Application-Level Configuration Rule in Dubbo
DESCRIPTION: Example of an application-level configuration that enables accesslog for all services under the shop-detail application. The configuration applies to all provider instances within the specified application.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: application
key: shop-detail
configs:
  - side: provider
    parameters:
      accesslog: 'true'

----------------------------------------

TITLE: Checking Service and Pod Status
DESCRIPTION: These commands are used to verify that all services and pods are running correctly in the dubbo-demo and dubbo-system namespaces.

LANGUAGE: sh
CODE:
kubectl get services -n dubbo-demo

kubectl get pods -n dubbo-demo

kubectl get services -n dubbo-system

kubbell get pods -n dubbo-system

----------------------------------------

TITLE: Using Dubbo Service Annotations
DESCRIPTION: Illustrates the change in Dubbo service annotations across versions. Before version 2.7.7, Dubbo used @Service annotation, while versions 2.7.7 and later use @DubboService annotation for marking services.

LANGUAGE: java
CODE:
@DubboService  // For Dubbo version 2.7.7+\n@Service       // For Dubbo versions before 2.7.7

----------------------------------------

TITLE: 使用XML配置Dubbo服务
DESCRIPTION: 展示了如何使用XML文件配置Dubbo的服务提供者,包括应用、注册中心、协议等配置。

LANGUAGE: XML
CODE:
<dubbo:application name="demo-provider"/>
<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>

<dubbo:registry address="zookeeper://127.0.0.1:2181" simplified="true"/>
<dubbo:metadata-report address="redis://127.0.0.1:6379"/>
<dubbo:protocol name="dubbo" port="20880"/>

<bean id="demoService" class="org.apache.dubbo.samples.basic.impl.DemoServiceImpl"/>
<dubbo:service interface="org.apache.dubbo.samples.basic.api.DemoService" ref="demoService"/>

----------------------------------------

TITLE: Updating Dubbo Dependency to 3.2.0 in Maven POM
DESCRIPTION: XML snippet showing how to update the Dubbo dependency version to 3.2.0 in a Maven project's pom.xml file. This is the primary step for most users to upgrade to Dubbo 3.2.0.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo</artifactId>
    <version>3.2.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Serialization Check Status in XML
DESCRIPTION: Demonstrates how to configure the serialization check status using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:application name="demo-provider" serialize-check-status="STRICT"/>

----------------------------------------

TITLE: Kubernetes Error Response Example
DESCRIPTION: Example of a Kubernetes pod deployment error response showing the structure of error information returned when pod synchronization fails.

LANGUAGE: json
CODE:
{
  "kind": "Pod",
  "namespace": "lzumwsrddf831iwarhehd14zh2-default",
  "name": "dubbo-k8s-demo-610694273-jq238",
  "uid": "12892e67-8bc8-11e8-b96a-00163e02c37b",
  "apiVersion": "v1",
  "resourceVersion": "850282769"
}, "reason": "FailedSync", "message": "Error syncing pod"

----------------------------------------

TITLE: Configuring Dubbo Provider in Erlang sys.config
DESCRIPTION: Example configuration for setting up a Dubbo service provider in Erlang. The configuration needs to be added to the sys.config file under the dubboerl application settings. It shows how to define service implementations, interface modules, and their corresponding Java class names.

LANGUAGE: erlang
CODE:
{dubboerl,[
	%% other config ...
	{provider,[
		{module_implements,interface_module,interface_fullname,[Options]},
		%% eg:
		{userOperator_impl,userOperator,<<"org.apache.dubbo.erlang.sample.service.facade.UserOperator">>,[Option]}
	]}
]}

----------------------------------------

TITLE: Loading Fixed Extension Classes in Dubbo SPI
DESCRIPTION: This snippet demonstrates how to load fixed extension classes using Dubbo SPI. It includes defining an SPI interface, implementing the interface, and using the extension.

LANGUAGE: java
CODE:
@SPI
public interface DemoSpi {
    void say();
}

public class DemoSpiImpl implements DemoSpi {
    public void say() {
    }
}

LANGUAGE: java
CODE:
public class DubboSPITest {

    @Test
    public void sayHello() throws Exception {
        ExtensionLoader<DemoSpi> extensionLoader = 
            ExtensionLoader.getExtensionLoader(DemoSpi.class);
        DemoSpi dmeoSpi = extensionLoader.getExtension("demoSpiImpl");
        optimusPrime.sayHello();
    }
}

----------------------------------------

TITLE: Custom Dubbo Operator Configuration (YAML)
DESCRIPTION: Example of a custom YAML configuration for the Dubbo Operator, overriding default settings.

LANGUAGE: yaml
CODE:
apiVersion: dubbo.apache.org/v1alpha1
kind: DubboOperator
metadata:
  namespace: dubbo-system
spec:
  profile: default
  namespace: dubbo-system
  componentsMeta:
    admin:
      enabled: true
    grafana:
      enabled: true
      version: 6.31.0
    prometheus:
      enabled: false
  components:
    admin:
      replicas: 3
    grafana:
      testFramework:
        enabled: false

----------------------------------------

TITLE: Implementing Go Generic Client
DESCRIPTION: Go code demonstrating how to configure and make generic RPC calls to Java server using Triple protocol and hessian2 serialization.

LANGUAGE: go
CODE:
// 初始化 Reference 配置
refConf := config.NewReferenceConfigBuilder().
  SetInterface("org.apache.dubbo.UserProvider").
  SetRegistryIDs("zk").
  SetProtocol(tripleConst.TRIPLE).
  SetGeneric(true).
  SetSerialization("hessian2").
  Build()

// 构造 Root 配置，引入注册中心模块
rootConfig := config.NewRootConfigBuilder().
  AddRegistry("zk", config.NewRegistryConfigWithProtocolDefaultPort("zookeeper")).
  Build()

// Reference 配置初始化，因为需要使用注册中心进行服务发现，需要传入经过配置的 rootConfig
if err := refConf.Init(rootConfig); err != nil{
  panic(err)
}

// 泛化调用加载、服务发现
refConf.GenericLoad(appName)

time.Sleep(time.Second)

// 发起泛化调用
resp, err := refConf.GetRPCService().(*generic.GenericService).Invoke(
  context.TODO(),
  "getUser1",
  []string{"java.lang.String"},
  []hessian.Object{"A003"},
)

if err != nil {
  panic(err)
}
logger.Infof("GetUser1(userId string) res: %+v", resp)

----------------------------------------

TITLE: Configuring Custom Parameters for Dubbo Protocol
DESCRIPTION: Example of setting custom parameters for a Dubbo protocol using XML. This allows passing additional configuration options to protocol implementations.

LANGUAGE: xml
CODE:
<dubbo:protocol name="napoli">
   <dubbo:parameter key="http://10.20.160.198/wiki/display/dubbo/napoli.queue.name" value="xxx" />
</dubbo:protocol>

----------------------------------------

TITLE: Adding Thrift Dependency in Maven
DESCRIPTION: XML configuration to add the Apache Thrift library dependency to a Maven project. This is required for using the Thrift protocol with Dubbo.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.thrift</groupId>
    <artifactId>libthrift</artifactId>
    <version>0.8.0</version>
</dependency>

----------------------------------------

TITLE: Defining Asynchronous Service Interface in Java
DESCRIPTION: Defines a simple asynchronous service interface with a goodbye method that takes a name parameter and returns a String.

LANGUAGE: java
CODE:
public interface AsyncService {
    String goodbye(String name);
}

----------------------------------------

TITLE: Configuring dubbo2.js Client in TypeScript
DESCRIPTION: This TypeScript code configures the dubbo2.js client, setting up the Dubbo connection and proxying the service interface.

LANGUAGE: typescript
CODE:
import { Dubbo, java, TDubboCallResult } from 'dubbo2.js'

const dubbo = new Dubbo({
  application: {name: 'demo-provider'},
  register: 'localhost:2181',
  dubboVersion: '2.0.0',
  interfaces: [
    'com.alibaba.dubbo.demo.DemoProvider',
  ],
});

interface IDemoService {
  sayHello(name: string): TDubboCallResult<string>;
}

export const demoService = dubbo.proxyService<IDemoService>({
  dubboInterface: 'com.alibaba.dubbo.demo.DemoProvider',
  version: '1.0.0',
  methods: {
    sayHello(name: string) {
      return [java.String(name)];
    },

    echo() {},

    test() {},

    getUserInfo() {
      return [
        java.combine('com.alibaba.dubbo.demo.UserRequest', {
          id: 1,
          name: 'nodejs',
          email: 'node@qianmi.com',
        }),
      ];
    },
  },
});

----------------------------------------

TITLE: Configuring Dubbo Consumer Properties
DESCRIPTION: This properties file configures the Dubbo consumer, including application name, Nacos registry address, and service version.

LANGUAGE: properties
CODE:
## Dubbo Application info
dubbo.application.name = dubbo-consumer-demo

## Nacos registry address
dubbo.registry.address = nacos://127.0.0.1:8848

# @Reference version
demo.service.version= 1.0.0

----------------------------------------

TITLE: Pushing Changes to Forked Repository
DESCRIPTION: Command to push the completed development branch to your forked repository.

LANGUAGE: shell
CODE:
git push origin up-dev-issue#${issue-number}

----------------------------------------

TITLE: Installing Prometheus in Kubernetes for Dubbo
DESCRIPTION: Command to deploy Prometheus using the Dubbo community's configuration yaml. This setup is intended for testing and development purposes.

LANGUAGE: bash
CODE:
kubectl create -f https://raw.githubusercontent.com/apache/dubbo-kubernetes/master/deploy/kubernetes/prometheus.yaml

----------------------------------------

TITLE: Logging Request Timing in Dubbo Java
DESCRIPTION: Example log output for Dubbo's simple profiler mode on both consumer and provider sides. Shows timing breakdown for service invocation.

LANGUAGE: plaintext
CODE:
[19/07/22 07:08:35:035 CST] main  WARN proxy.InvokerInvocationHandler:  [DUBBO] [Dubbo-Consumer] execute service org.apache.dubbo.samples.api.GreetingsService#sayHi cost 1003.015746 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms
invocation context:
path=org.apache.dubbo.samples.api.GreetingsService;
remote.application=first-dubbo-consumer;
interface=org.apache.dubbo.samples.api.GreetingsService;
version=0.0.0;
timeout=1000;
thread info: 
Start time: 285821581299853
+-[ Offset: 0.000000ms; Usage: 1003.015746ms, 100% ] Receive request. Client invoke begin. ServiceKey: org.apache.dubbo.samples.api.GreetingsService MethodName:sayHi
  +-[ Offset: 7.987015ms; Usage: 994.207928ms, 99% ] Invoker invoke. Target Address: xx.xx.xx.xx:20880, dubbo version: 3.0.10-SNAPSHOT, current host: xx.xx.xx.xx

----------------------------------------

TITLE: Running Dubbo-Go Server and Client
DESCRIPTION: Commands to start the Dubbo-Go server and client applications.

LANGUAGE: shell
CODE:
# Run server
go run ./go-server/cmd/server.go

# Run client
go run ./go-client/cmd/client.go

----------------------------------------

TITLE: Configuring Dubbo Application via Environment Variables
DESCRIPTION: Example of setting Dubbo application configuration using environment variables. This allows specifying configuration options like application name, registry address, and protocol port through the system environment.

LANGUAGE: text
CODE:
DUBBO_APPLICATION_NAME="dubbo-demo"
DUBBO_REGISTRY_ADDRESS="nacos://host:port"
DUBBO_PROTOCOL_PORT="20880"

----------------------------------------

TITLE: Configuring Service-Level Protocol in Dubbo
DESCRIPTION: XML configuration for specifying Hessian protocol at the individual service level in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:service protocol="hessian" />

----------------------------------------

TITLE: Generic Service Invocation in Java
DESCRIPTION: Example of using GenericService to make service calls without interface dependencies. Shows basic type parameter handling.

LANGUAGE: java
CODE:
GenericService userService = (GenericService) context.getBean("userService");
// primary param and return value
String name = (String) userService.$invoke("delete", new String[]{int.class.getName()}, new Object[]{1});
System.out.println(name);

----------------------------------------

TITLE: Configuring Consumer-Side Concurrent Calls Limit (XML)
DESCRIPTION: Limits the concurrent execution for each method of com.foo.BarService to a maximum of 10 per client using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" actives="10" />

----------------------------------------

TITLE: Preparing Apache SVN for Release
DESCRIPTION: Commands to check out Dubbo SVN repository and prepare release directory.

LANGUAGE: shell
CODE:
$ svn checkout https://dist.apache.org/repos/dist/dev/dubbo
$ cd ~/apache/dubbo # dubbo svn root directory
$ mkdir ${release_version}

----------------------------------------

TITLE: Implementing Dubbo Service with Protobuf
DESCRIPTION: Implement the Dubbo service logic using the generated Protobuf stubs.

LANGUAGE: Java
CODE:
public class DemoServiceImpl implements DemoServiceDubbo.IDemoService {
    private static final Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);

    @Override
    public HelloReply sayHello(HelloRequest request) {
        logger.info("Hello " + request.getName() + ", request from consumer: " + RpcContext.getContext().getRemoteAddress());
        return HelloReply.newBuilder()
                .setMessage("Hello " + request.getName() + ", response from provider: "
                        + RpcContext.getContext().getLocalAddress())
                .build();
    }

    @Override
    public CompletableFuture<HelloReply> sayHelloAsync(HelloRequest request) {
        return CompletableFuture.completedFuture(sayHello(request));
    }
}

----------------------------------------

TITLE: Defining Dubbo Service Interface in Protocol Buffers
DESCRIPTION: Example of defining a Dubbo service interface using Protocol Buffers. It includes a UserProvider service with a SayHello method.

LANGUAGE: protobuf
CODE:
package org.apache.dubbo.quickstart.samples;

service UserProvider {
  rpc SayHello (HelloRequest) returns (User) {}
}

message HelloRequest {
  string name = 1;
}

----------------------------------------

TITLE: Implementing Loadbalance Extension in Go
DESCRIPTION: This snippet demonstrates how the loadbalance extension is implemented in Dubbo-go. It shows the SetLoadbalance and GetLoadbalance functions used for registering and retrieving loadbalance implementations.

LANGUAGE: Go
CODE:
package extension

import (
	"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance"
)

var loadbalances = make(map[string]func() loadbalance.LoadBalance)

// SetLoadbalance sets the loadbalance extension with @name
// For example: random/round_robin/consistent_hash/least_active/...
func SetLoadbalance(name string, fcn func() loadbalance.LoadBalance) {
	loadbalances[name] = fcn
}

// GetLoadbalance finds the loadbalance extension with @name
func GetLoadbalance(name string) loadbalance.LoadBalance {
	if loadbalances[name] == nil {
		panic("loadbalance for " + name + " is not existing, make sure you have import the package.")
	}

	return loadbalances[name]()
}

----------------------------------------

TITLE: Protocol-Specific Service Implementations
DESCRIPTION: Separate service implementations for different protocols using @DubboService annotations

LANGUAGE: java
CODE:
@DubboService(protocol="dubbo-id")
private DemoServiceImpl implements DemoService {}

LANGUAGE: java
CODE:
@DubboService(protocol="triple-id")
private GreetingServiceImpl implements GreetingService {}

----------------------------------------

TITLE: Defining AccountService Interface in Java
DESCRIPTION: Defines the AccountService interface with a method to debit the balance of a user's account.

LANGUAGE: java
CODE:
public interface AccountService {

    /**
     * debit balance of user's account
     */
    void debit(String userId, int money);
}

----------------------------------------

TITLE: Repository Location
DESCRIPTION: GitHub repository URL for the Dubbo Admin project

LANGUAGE: text
CODE:
github: https://github.com/apache/dubbo-ops

----------------------------------------

TITLE: Implementing Exchange Server in Java
DESCRIPTION: Basic structure for implementing a custom ExchangeServer interface in Dubbo.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.remoting.exchange.ExchangeServer;
 
public class XxxExchangeServer impelements ExchangeServer {
    // ...
}

----------------------------------------

TITLE: Defining Repository Interface in Java
DESCRIPTION: Definition of IRepository interface with a save method for data storage demonstration

LANGUAGE: java
CODE:
public interface IRepository {
    void save(String data);
}

----------------------------------------

TITLE: Using DubboBootstrap API for Simplified Configuration of Dubbo Consumer
DESCRIPTION: Shows how to use DubboBootstrap API for simplified configuration and better control over the startup process of a Dubbo service consumer. It supports batch referencing of service interfaces and better supports Dubbo 3's application-level service discovery.

LANGUAGE: java
CODE:
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ProviderConfig;
import org.apache.dubbo.config.ServiceConfig;
import com.xxx.DemoService;
import com.xxx.DemoServiceImpl;

public class DemoConsumer {
    public static void main(String[] args) {

        // 引用远程服务
        ReferenceConfig<DemoService> demoServiceReference = new ReferenceConfig<DemoService>(); 
        demoServiceReference.setInterface(DemoService.class);
        demoServiceReference.setVersion("1.0.0");
        
        ReferenceConfig<FooService> fooServiceReference = new ReferenceConfig<FooService>(); 
        fooServiceReference.setInterface(FooService.class);
        fooServiceReference.setVersion("1.0.0");

        // 通过DubboBootstrap简化配置组装，控制启动过程
        DubboBootstrap bootstrap = DubboBootstrap.getInstance();
        bootstrap.application("demo-consumer") // 应用配置
                .registry(new RegistryConfig("zookeeper://127.0.0.1:2181")) // 注册中心配置
                .reference(demoServiceReference) // 添加ReferenceConfig
                .service(fooServiceReference)
                .start();    // 启动Dubbo

        ...
        
        // 和本地bean一样使用demoService
        // 通过Interface获取远程服务接口代理，不需要依赖ReferenceConfig对象
        DemoService demoService = DubboBootstrap.getInstance().getCache().get(DemoService.class);
        demoService.sayHello("Dubbo");

        FooService fooService = DubboBootstrap.getInstance().getCache().get(FooService.class);
        fooService.greeting("Dubbo");
    }
    
}

----------------------------------------

TITLE: Implementing Basic Pixiu Filter in Go
DESCRIPTION: Implementation of a demo filter that logs request bodies and returns reversed strings. The filter handles both Decode and Encode phases of request processing.

LANGUAGE: go
CODE:
type DemoFilter struct {
   logPrefix string
}

func (f *DemoFilter) Decode(ctx *contexthttp.HttpContext) filter.FilterStatus {
   body, _ := ioutil.ReadAll(ctx.Request.Body)
   logger.Infof("request body: %s", body)

   runes := []rune(string(body))
   for i := 0; i < len(runes)/2; i += 1 {
      runes[i], runes[len(runes)-1-i] = runes[len(runes)-1-i], runes[i]
   }
   reverse := string(runes)

   ctx.SendLocalReply(200, []byte(reverse))
   return filter.Stop
}

func (f *DemoFilter) Encode(ctx *contexthttp.HttpContext) filter.FilterStatus {
   res := ctx.SourceResp.(string)
   logger.Infof("%s: %s", f.logPrefix, res)
   return filter.Continue
}

----------------------------------------

TITLE: Supported Registry Configuration Table
DESCRIPTION: Table showing supported service registry types and their configuration names in Dubbo-go

LANGUAGE: markdown
CODE:
| Registry      | Registry Name (for configuration) |
| ------------- | ---------------------------------- |
| Zookeeper     | zookeeper                          |
| Nacos         | nacos                              |
| Etcd          | etcd                               |
| Polaris       | polaris                            |

----------------------------------------

TITLE: Dubbo Admin Configuration (YAML)
DESCRIPTION: Comprehensive YAML configuration for Dubbo Admin, including environment settings, store configuration, and external services.

LANGUAGE: yaml
CODE:
environment: universal
mode: standalone

store:
  type: memory

  kubernetes:
    systemNamespace: dubbo-system

  mysql:
    host: 127.0.0.1
    port: 15432
    user: dubbo
    password: dubbo
    dbName: dubbo
    connectionTimeout: 5
    maxOpenConnections: 50
    maxIdleConnections: 50
    tls:
      mode: disable
      certPath:
      keyPath:
      caPath:
    minReconnectInterval: "10s"
    maxReconnectInterval: "60s"
server:
	port: 38080
registry:
  address: xxx
metadata-center:
  address: xxx
config-center:
	address: xxx
external-services:
  prometheus:
      url: "http://metrics.telemetry:9090/"
  tracing:
    enabled: true
    in_cluster_url: 'http://tracing.telemetry:16685/jaeger'
    use_grpc: true
    url: 'http://my-jaeger-host/jaeger'
	grafana:
      enabled: true
      in_cluster_url: 'http://grafana.telemetry:3000/'
      url: 'http://my-ingress-host/grafana'

----------------------------------------

TITLE: Loading Adaptive Extension Classes in Dubbo SPI
DESCRIPTION: This snippet shows how to load adaptive extension classes using Dubbo SPI. It uses the Protocol interface as an example and demonstrates how to use the adaptive extension.

LANGUAGE: java
CODE:
@SPI("dubbo")
public interface Protocol {
    @Adaptive
    <T> Exporter<T> export(Invoker<T> invoker) throws RpcException;

    @Adaptive
    <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException;
}

public class DubboProtocol extends AbstractProtocol {
    ......
    @Override
    public <T> Invoker<T> refer(Class<T> type, URL url) throws RpcException {
        return protocolBindingRefer(type, url);
    }
    
    @Override
    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {
        ......
        return exporter;
    }
}

LANGUAGE: java
CODE:
public class DubboAdaptiveTest {

    @Test
    public void sayHello() throws Exception {
        URL url = URL.valueOf("dubbo://localhost/test");
        Protocol adaptiveProtocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
        adaptiveProtocol.refer(type, url);
    }
}

----------------------------------------

TITLE: Registering Services and Objects
DESCRIPTION: Initializes the consumer service and registers POJO objects for Hessian serialization.

LANGUAGE: go
CODE:
func init() {
	config.SetConsumerService(userProvider)
	hessian.RegisterPOJO(&User{})
}

----------------------------------------

TITLE: Defining StorageService Interface in Java
DESCRIPTION: Defines the StorageService interface with a method to deduct storage count for a given commodity.

LANGUAGE: java
CODE:
public interface StorageService {

    /**
     * deduct storage count
     */
    void deduct(String commodityCode, int count);
}

----------------------------------------

TITLE: Basic REST Service Interface Definition
DESCRIPTION: Example interface showing basic REST service definition with path mapping annotations

LANGUAGE: java
CODE:
public interface DemoService {
    String hello(String name);

    @Mapping(path = "/hi", method = HttpMethods.POST)
    String hello(User user, @Param(value = "c", type = ParamType.Header) int count);
}

----------------------------------------

TITLE: Defining Asynchronous Service Interface in Java
DESCRIPTION: Demonstrates how to define a Dubbo service interface that returns a CompletableFuture for asynchronous calls.

LANGUAGE: Java
CODE:
public interface AsyncService {
    CompletableFuture<String> sayHello(String name);
}

----------------------------------------

TITLE: Registering Dubbo Shutdown Hook in Java
DESCRIPTION: This Java code snippet demonstrates how Dubbo registers a shutdown hook with the JVM. It uses a compare-and-set operation to ensure the hook is only registered once.

LANGUAGE: java
CODE:
/**
 * Register the ShutdownHook
 */
public void register() {
    if (!registered.get() && registered.compareAndSet(false, true)) {
        Runtime.getRuntime().addShutdownHook(getDubboShutdownHook());
    }
}

----------------------------------------

TITLE: Configuring YAML Metadata for Python Dubbo Documentation
DESCRIPTION: This YAML snippet defines metadata and configuration options for a Python-related Dubbo documentation page. It specifies rendering as a link, sets the description and title, and configures the document type and weight for navigation purposes.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Python
manualLinkRelref: ./#python
title: Python
type: docs
weight: 50

----------------------------------------

TITLE: Configuring Global Fixed Token Authorization in Dubbo XML
DESCRIPTION: Sets up global token authorization using a fixed token string for all providers.

LANGUAGE: xml
CODE:
<dubbo:provider token="123456" />

----------------------------------------

TITLE: Handling TCP Compression in Getty
DESCRIPTION: Code snippet showing how to handle TCP compression in the Getty library, addressing CPU usage issues.

LANGUAGE: Go
CODE:
func (c *gettyTCPConn) read(p []byte) (int, error) {
  // Remove timeout setting when compression is enabled
  if !c.compress {
    c.conn.SetReadDeadline(time.Now().Add(c.readTimeout))
  }
  return c.conn.Read(p)
}

----------------------------------------

TITLE: Configuring Dubbo Consumer using XML
DESCRIPTION: This snippet shows the simplest XML configuration for a Dubbo consumer. It includes application, registry, protocol, and service reference settings.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:application name="hello-world-app" />
    <dubbo:registry address="multicast://224.5.6.7:1234" />
    <dubbo:protocol name="dubbo" port="20880" />
    <dubbo:reference id="demoServiceRemote" interface="com.alibaba.dubbo.demo.DemoService" />
</beans>

----------------------------------------

TITLE: Disabling Detail Profiler in Dubbo
DESCRIPTION: Command to disable the detail profiler mode without affecting the simple profiler.

LANGUAGE: bash
CODE:
dubbo>disableDetailProfiler
OK

dubbo>

----------------------------------------

TITLE: POJO Parameter Handling in Generic Invocation
DESCRIPTION: Example of handling POJO parameters in generic invocation by converting them to Maps.

LANGUAGE: java
CODE:
String[] parameterTypes = new String[]{"com.alibaba.dubbo.samples.generic.api.Params"};
Map<String, Object> params = new HashMap<String, Object>();
param.put("class", "com.alibaba.dubbo.samples.generic.api.Params");
param.put("query", "a=b");
Object user = userService.$invoke("get", parameterTypes, new Object[]{param});
System.out.println("sample one result: " + user);

----------------------------------------

TITLE: Preferring injvm for Consumers and Providers in Dubbo XML Configuration
DESCRIPTION: These XML configurations show how to set the preference for injvm protocol for both consumers and providers in Dubbo, encouraging local calls when possible.

LANGUAGE: xml
CODE:
<dubbo:consumer injvm="true" .../>
<dubbo:provider injvm="true" .../>

LANGUAGE: xml
CODE:
<dubbo:reference injvm="true" .../>
<dubbo:service injvm="true" .../>

----------------------------------------

TITLE: Defining URL Path in Pixiu Configuration
DESCRIPTION: This JSON snippet shows how to define a URL path with variables in Pixiu's configuration. It demonstrates the use of path variables and their significance in routing.

LANGUAGE: json
CODE:
{
  "path": "/api/v1/test-dubbo/user/name/:name"
}

----------------------------------------

TITLE: Configuring Dubbo Provider to Use Custom Protocol
DESCRIPTION: This application.properties file configures the Dubbo provider to use the custom 'edubbo' protocol.

LANGUAGE: properties
CODE:
# Custom protocol
dubbo.provider.protocol=edubbo

----------------------------------------

TITLE: Configuring Pixiu Documentation YAML Frontmatter
DESCRIPTION: YAML configuration block that defines metadata and rendering properties for the Pixiu documentation page. Specifies manual link reference, title, document type and weight for page ordering.

LANGUAGE: yaml
CODE:
_build:
    render: link
description: Pixiu
manualLinkRelref: ./#pixiu
title: Pixiu
type: docs
weight: 80

----------------------------------------

TITLE: 使用 Java 代码向注册中心注册静态服务
DESCRIPTION: 通过 Java 代码直接向注册中心写入提供者地址信息，适用于第三方服务提供者（如 memcached）。使用 RegistryFactory 和 Registry 接口来实现注册。

LANGUAGE: java
CODE:
RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
Registry registry = registryFactory.getRegistry(URL.valueOf("zookeeper://10.20.153.10:2181"));
registry.register(URL.valueOf("memcached://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo"));

----------------------------------------

TITLE: Starting Dubbo Service Consumer with Pinpoint Agent
DESCRIPTION: Command to start the Dubbo service consumer with the Pinpoint agent for distributed tracing.

LANGUAGE: Shell
CODE:
java -jar -javaagent:$AGENT_PATH/pinpoint-bootstrap-$VERSION.jar -Dpinpoint.agentId=demo-consumer -Dpinpoint.applicationName=DC target/demo-consumer-0.0.1-SNAPSHOT-exec.jar

----------------------------------------

TITLE: Configuring Redis Metadata Center in Properties
DESCRIPTION: Properties configuration to set up Redis as the metadata center for Dubbo, specifying the address and port.

LANGUAGE: properties
CODE:
dubbo.metadata-report.address=redis://127.0.0.1:1111

----------------------------------------

TITLE: Initializing Dubbo Service Provider in Java
DESCRIPTION: Java code to initialize and start the Dubbo service provider using the XML configuration.

LANGUAGE: java
CODE:
public class Provider {
    public static void main(String[] args) throws Exception {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[]{"META-INF/spring/dubbo-demo-provider.xml"});
        context.start();
        System.in.read();
    }
}

----------------------------------------

TITLE: Hugo Template Card Grid Generation
DESCRIPTION: Creates a responsive Bootstrap card grid by iterating through page parameters. Each card contains a title and description rendered from structured data. Uses nested range operations to process multi-level data structures.

LANGUAGE: gotemplate
CODE:
{{ with .Page.Params.content -}}
<div class="row">
{{ range $list_entry := . }}
{{ range $heading, $items := $list_entry }}

{{ range $items }}
<div class="col-sm col-md-6 mb-4">
  <div class="h-100 card shadow" href="#">
    <div class="card-body">
  {{ $item :=. }}
  <h4 class="card-title">
    {{ $item.name | $.Page.RenderString }}
  </h4>
  <p>{{ $item.description }}</p>
    </div>
  </div>
</div>
{{ end }}
{{ end }}
{{ end }}
</div>
{{ end -}}

----------------------------------------

TITLE: Implementing a Dubbo Provider Service with Timeout Handling
DESCRIPTION: This example shows a Dubbo provider service implementation with a timeout of 1000ms. It demonstrates how to handle interruptions caused by timeout.

LANGUAGE: java
CODE:
@Service(interfaceClass = TestService.class,timeout = 1000)
public class TestServiceImpl implements TestService {
    @Override
    public Integer sum(int a, int b) {
        CountDownLatch latch = new CountDownLatch(2);
        AtomicInteger i = new AtomicInteger();

        new Thread(()->{
            i.incrementAndGet();
            latch.countDown();
        }).start();

        new Thread(()->{
            try {
                TimeUnit.MILLISECONDS.sleep(2000); 
            }catch (InterruptedException e){
                e.printStackTrace();
            }
            i.incrementAndGet();
            latch.countDown();
        }).start();

        try {
            latch.await();
            return i.get();
        }catch (InterruptedException e){
            // 业务执行超时，并且被打断，走入此逻辑
            throw new RuntimeException("call sum timeout");
        }
    }
}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Erlang SDK Documentation
DESCRIPTION: YAML configuration block that defines metadata for the Erlang SDK documentation page, including aliases for URL routing, description, title and weight for navigation ordering.

LANGUAGE: yaml
CODE:
aliases:
    - /en/docs3-v2/erlang-sdk/
    - /en/overview/reference/erlang-sdk/
    - /en/overview/manual/erlang-sdk/
description: Erlang Support
linkTitle: Erlang SDK
title: Erlang SDK Manual
type: docs
weight: 8

----------------------------------------

TITLE: Configuring Dubbo Service Consumer Properties
DESCRIPTION: Sets up the application.properties file for the Dubbo service consumer, including service version and Dubbo configuration settings.

LANGUAGE: Properties
CODE:
# Spring boot application
spring.application.name=dubbo-consumer-demo
server.port=8080
management.port=8081

# Service Version
demo.service.version=1.0.0

# Dubbo Config properties
## ApplicationConfig Bean
dubbo.application.id=dubbo-consumer-demo
dubbo.application.name=dubbo-consumer-demo

## ProtocolConfig Bean
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
dubbo.protocol.port=12345

----------------------------------------

TITLE: Configuring Preferred Serialization in Spring Boot
DESCRIPTION: Demonstrates how to configure preferred serialization protocols in a Spring Boot application.properties file.

LANGUAGE: properties
CODE:
dubbo.provider.prefer-serialization=fastjson2,hessian2
dubbo.provider.serialization=hessian2

----------------------------------------

TITLE: Redis Registry with Protocol Specification
DESCRIPTION: Alternative configuration specifying Redis protocol separately from the address.

LANGUAGE: xml
CODE:
<dubbo:registry protocol="redis" address="10.20.153.10:6379" />

----------------------------------------

TITLE: Installing Zipkin Server Using Bash
DESCRIPTION: Commands to download and start the Zipkin server locally

LANGUAGE: bash
CODE:
$ curl -sSL https://zipkin.io/quickstart.sh | bash -s
$ java -jar zipkin.jar

----------------------------------------

TITLE: Docker Pull Pixiu Image
DESCRIPTION: Command to pull the latest Dubbo-Go-Pixiu Docker image from Docker Hub.

LANGUAGE: shell
CODE:
docker pull phial3/dubbo-go-pixiu:latest

----------------------------------------

TITLE: Implementing Streaming Methods in Java
DESCRIPTION: Java implementation of streaming methods without using Protobuf.

LANGUAGE: java
CODE:
public class WrapGreeterImpl implements WrapGreeter {

    @Override
    public StreamObserver<String> sayHelloStream(StreamObserver<String> response) {
        return new StreamObserver<String>() {
            @Override
            public void onNext(String data) {
                System.out.println(data);
                response.onNext("hello,"+data);
            }

            @Override
            public void onError(Throwable throwable) {
                throwable.printStackTrace();
            }

            @Override
            public void onCompleted() {
                System.out.println("onCompleted");
                response.onCompleted();
            }
        };
    }

    @Override
    public void sayHelloServerStream(String request, StreamObserver<String> response) {
        for (int i = 0; i < 10; i++) {
            response.onNext("hello," + request);
        }
        response.onCompleted();
    }
}

----------------------------------------

TITLE: Implementing Dubbo Provider Services in Java
DESCRIPTION: Two provider implementations of TestService interface, each running on a different port. These providers return different messages to differentiate between them.

LANGUAGE: java
CODE:
// 10.220.47.253:20880
@Service(interfaceClass = TestService.class)
public class TestServiceImpl implements TestService {
    @Override
    public String sayHello(String name) {
        return "Hello "+name+" i am provider1";
    }
}

// 10.220.47.253:20881
@Service(interfaceClass = TestService.class)
public class TestServiceImpl implements TestService {
    @Override
    public String sayHello(String name) {
        return "Hello "+name+" i am provider2";
    }
}

----------------------------------------

TITLE: Configuring Git Remotes for Dubbo
DESCRIPTION: Commands to set up and verify remote repositories for both the fork and upstream Dubbo repository.

LANGUAGE: shell
CODE:
git remote add upstream https://github.com/apache/dubbo.git

git remote -v

    origin    ${your fork dubbo repo address} (fetch)
    origin    ${your fork dubbo repo address} (push)
    upstream    https://github.com/apache/dubbo.git (fetch)
    upstream    https://github.com/apache/dubbo.git (push)

git fetch origin
git fetch upstream

----------------------------------------

TITLE: Defining Dubbo Service API Interface in Java
DESCRIPTION: Creates a simple HelloService interface that will be implemented by the Dubbo service provider.

LANGUAGE: Java
CODE:
package com.example.demoapi;

public interface HelloService {
    String sayHello(String name);
}

----------------------------------------

TITLE: REST Service Implementation
DESCRIPTION: Example implementation of the REST service interface using Dubbo service annotations.

LANGUAGE: java
CODE:
@DubboService()
public class RestDemoServiceImpl implements RestDemoService {
    private static Map<String, Object> context;
    private boolean called;

    @Override
    public String sayHello(String name) {
        called = true;
        return "Hello, " + name;
    }

    @Override
    public Integer hello(Integer a, Integer b) {
        context = RpcContext.getServerAttachment().getObjectAttachments();
        return a + b;
    }

    @Override
    public String error() {
        throw new RuntimeException();
    }
}

----------------------------------------

TITLE: Dubbo Admin Local Configuration Properties
DESCRIPTION: Configuration settings for registry, config center and metadata report addresses in application.properties file

LANGUAGE: properties
CODE:
admin.registry.address=zookeeper://127.0.0.1:2181
admin.config-center=zookeeper://127.0.0.1:2181
admin.metadata-report.address=zookeeper://127.0.0.1:2181

----------------------------------------

TITLE: Initializing Git Repository for Dubbo Contribution
DESCRIPTION: Commands for cloning the forked Dubbo repository and setting up the upstream remote for contribution workflow.

LANGUAGE: shell
CODE:
git clone ${your fork dubbo repo address，for example：https://github.com/${your github id}/dubbo.git}
cd dubbo

----------------------------------------

TITLE: Defining Robot Interface for SPI Example
DESCRIPTION: Defines a simple Robot interface with a sayHello method to demonstrate SPI usage.

LANGUAGE: java
CODE:
public interface Robot {
    void sayHello();
}

----------------------------------------

TITLE: Defining gRPC Service with Protocol Buffers IDL
DESCRIPTION: Example of defining a gRPC service using Protocol Buffers IDL, showing how to define service interfaces and message types in a language-neutral format.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.apache.dubbo.demo";
option java_outer_classname = "DemoServiceProto";
option objc_class_prefix = "DEMOSRV";

package demoservice;

// The demo service definition.
service DemoService {
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

----------------------------------------

TITLE: Implementing Dubbo Service
DESCRIPTION: Service implementation class annotated with @Service to expose it as a Dubbo service.

LANGUAGE: java
CODE:
@Service
public class AnnotatedGreetingService implements GreetingService {
    public String sayHello(String name) {
        return "hello, " + name;
    }
}

----------------------------------------

TITLE: Configuring Dubbo Application via JVM Parameters
DESCRIPTION: Example of setting Dubbo application configuration using JVM parameters. This allows specifying configuration options like application name, registry address, and protocol port at runtime.

LANGUAGE: text
CODE:
-Ddubbo.application.name="dubbo-demo"
-Ddubbo.registry.address="nacos://host:port"
-Ddubbo.protocol.port="20880"

----------------------------------------

TITLE: Weighted Round Robin Load Balancing Algorithm Example
DESCRIPTION: Example demonstrating the weight calculation process in Dubbo's smooth weighted round-robin algorithm, showing how weights are adjusted across multiple rounds to achieve balanced distribution.

LANGUAGE: text
CODE:
A(3), B(2), C(1)  | A        | 6        | A(-3), B(2), C(1)
A(0), B(4), C(2)  | B        | 6        | A(0), B(-2), C(2)
A(3), B(0), C(3)  | A        | 6        | A(-3), B(0), C(3)
A(0), B(2), C(4)  | C        | 6        | A(0), B(2), C(-2)
A(3), B(4), C(-1) | B        | 6        | A(3), B(-2), C(-1)
A(6), B(0), C(0)  | A        | 6        | A(0), B(0), C(0)

----------------------------------------

TITLE: Implementing Dubbo Shutdown Hook Destruction Logic
DESCRIPTION: This Java code snippet shows the implementation of the doDestroy method in Dubbo's shutdown hook. It handles the destruction of registries and protocols when the JVM is shutting down.

LANGUAGE: java
CODE:
/**
 * Destroy all the resources, including registries and protocols.
 */
public void doDestroy() {
    if (!destroyed.compareAndSet(false, true)) {
        return;
    }
    // destroy all the registries
    AbstractRegistryFactory.destroyAll();
    // destroy all the protocols
    destroyProtocols();
}

----------------------------------------

TITLE: YAML Frontmatter for Dubbo Documentation
DESCRIPTION: YAML metadata block defining the page type, title, and weight for a Dubbo documentation page.

LANGUAGE: yaml
CODE:
type: advanced-docs
title: "Introduction"
linkTitle: "Introduction"
weight: 1

----------------------------------------

TITLE: Running Example with Shell Scripts
DESCRIPTION: Shell commands for preparing environment, starting services and running tests

LANGUAGE: shell
CODE:
# cd to the main example directory
cd samples/dubbogo/simple/

# Prepare the environment, start zk, and prepare the corresponding configuration files
./start.sh prepare resolve

# Start the dubbo server
./start.sh startServer resolve

# Start Pixiu 
./start.sh startPixiu resolve

# Start Client test case
./start.sh startTest resolve

----------------------------------------

TITLE: Service Instance Matching Condition in Dubbo YAML
DESCRIPTION: YAML configuration snippet showing the matching condition for selecting service instances by version tag.

LANGUAGE: yaml
CODE:
match:
  param:
    - key: orderVersion
      value:
        exact: v2

----------------------------------------

TITLE: Loading Dubbo Properties File in ConfigUtils
DESCRIPTION: The getProperties method in ConfigUtils that loads the Dubbo properties file from various sources, including JVM arguments, environment variables, and classpath.

LANGUAGE: Java
CODE:
public static Properties getProperties(Set<ClassLoader> classLoaders) {
        String path = System.getProperty(CommonConstants.DUBBO_PROPERTIES_KEY);
        
        if (StringUtils.isEmpty(path)) {
            path = System.getenv(CommonConstants.DUBBO_PROPERTIES_KEY);
            if (StringUtils.isEmpty(path)) {
                path = CommonConstants.DEFAULT_DUBBO_PROPERTIES;
            }
        }
        return ConfigUtils.loadProperties(classLoaders, path, false, true);
    }

----------------------------------------

TITLE: Implementing Dubbo Consumer Bootstrap with XML Configuration
DESCRIPTION: This Java class demonstrates how to bootstrap a Dubbo consumer using XML configuration, loading the Spring context from an XML file and invoking the remote service.

LANGUAGE: java
CODE:
package org.apache.dubbo.demo.consumer;

import org.apache.dubbo.demo.service.DemoService;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.io.IOException;

/**
 * {@link DemoService} consumer demo XML bootstrap
 */
public class DemoServiceConsumerXmlBootstrap {

    public static void main(String[] args) throws IOException {
        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext();
        context.setConfigLocation("/META-INF/spring/dubbo-consumer-context.xml");
        context.refresh();
        System.out.println("DemoService consumer (XML) is starting...");
        DemoService demoService = context.getBean("demoService", DemoService.class);
        for (int i = 0; i < 10; i++) {
            System.out.println(demoService.sayName("mercyblitz"));
        }
        context.close();
    }
}

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Interface definition for a simple greeting service in Dubbo.

LANGUAGE: java
CODE:
public interface GreetingService {
    String sayHello(String name);
}

----------------------------------------

TITLE: Dubbo Service Execution Timeout Warning
DESCRIPTION: Log example showing when a Dubbo service execution time approaches or exceeds the configured timeout threshold, including detailed timing and context information.

LANGUAGE: text
CODE:
[27/02/23 05:30:04:004 CST] DubboServerHandler-30.221.144.195:20880-thread-5  WARN filter.ProfilerServerFilter:  [DUBBO] [Dubbo-Provider] execute service org.apache.dubbo.samples.api.GreetingsService:0.0.0#sayHi cost 3001.533827 ms, this invocation almost (maybe already) timeout. Timeout: 1000ms
client: fd00:1:5:5200:a0a1:52b:e079:8582:58731
invocation context:
input=284;
path=org.apache.dubbo.samples.api.GreetingsService;
remote.application=first-dubbo-consumer;
dubbo=2.0.2;
interface=org.apache.dubbo.samples.api.GreetingsService;
version=0.0.0;
timeout=1000;

----------------------------------------

TITLE: Defining @Reference Annotation Properties in Java
DESCRIPTION: Definition of the @Reference annotation with various properties for customizing Dubbo service consumers.

LANGUAGE: Java
CODE:
package org.apache.dubbo.config.annotation;

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE})
public @interface Reference {
    Class<?> interfaceClass() default void.class;
    String interfaceName() default "";
    String version() default "";
    String group() default "";
    String url() default "";
    
    String application() default "";
    String module() default "";
    String consumer() default "";
    String protocol() default "";
    String monitor() default "";
    String[] registry() default {};
}

----------------------------------------

TITLE: ExtensionLoader.loadResource Method Implementation
DESCRIPTION: Method for loading and parsing SPI configuration files in Dubbo SPI.

LANGUAGE: java
CODE:
private void loadResource(Map<String, Class<?>> extensionClasses, 
	ClassLoader classLoader, java.net.URL resourceURL) {
    try {
        BufferedReader reader = new BufferedReader(
            new InputStreamReader(resourceURL.openStream(), "utf-8"));
        try {
            String line;
            while ((line = reader.readLine()) != null) {
                final int ci = line.indexOf('#');
                if (ci >= 0) {
                    line = line.substring(0, ci);
                }
                line = line.trim();
                if (line.length() > 0) {
                    try {
                        String name = null;
                        int i = line.indexOf('=');
                        if (i > 0) {
                            name = line.substring(0, i).trim();
                            line = line.substring(i + 1).trim();
                        }
                        if (line.length() > 0) {
                            loadClass(extensionClasses, resourceURL, 
                                      Class.forName(line, true, classLoader), name);
                        }
                    } catch (Throwable t) {
                        IllegalStateException e = new IllegalStateException("Failed to load extension class...");
                    }
                }
            }
        } finally {
            reader.close();
        }
    } catch (Throwable t) {
        logger.error("Exception when load extension class...");
    }
}

----------------------------------------

TITLE: Caching Activate Class in Java
DESCRIPTION: Implementation of cacheActivateClass() method that caches @Activate annotations for extension classes.

LANGUAGE: Java
CODE:
private void cacheActivateClass(Class<?> clazz, String name) {
    Activate activate = clazz.getAnnotation(Activate.class);
    if (activate != null) {
        cachedActivates.put(name, activate);
    } else {
        com.alibaba.dubbo.common.extension.Activate oldActivate = clazz.getAnnotation(com.alibaba.dubbo.common.extension.Activate.class);
        if (oldActivate != null) {
            cachedActivates.put(name, oldActivate);
        }
    }
}

----------------------------------------

TITLE: Configuring Native Image and Dubbo Maven Plugins for Dubbo 3.2
DESCRIPTION: Updated Maven plugin configuration for building Native Image with Dubbo 3.2, using the native-maven-plugin and dubbo-maven-plugin for simplified setup and automated configuration generation.

LANGUAGE: XML
CODE:
<plugin>
	<groupId>org.graalvm.buildtools</groupId>
	<artifactId>native-maven-plugin</artifactId>
	<version>0.9.20</version>
	<configuration>
	    <classesDirectory>${project.build.outputDirectory}</classesDirectory>
	    <metadataRepository>
	        <enabled>true</enabled>
	    </metadataRepository>
	    <requiredVersion>22.3</requiredVersion>
	    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
	</configuration>
</plugin>
<plugin>
	<groupId>org.apache.dubbo</groupId>
	<artifactId>dubbo-maven-plugin</artifactId>
	<version>${project.version}</version>
	<configuration>
	    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
	</configuration>
	<executions>
	    <execution>
	        <phase>process-sources</phase>
	        <goals>
	            <goal>dubbo-process-aot</goal>
	        </goals>
	    </execution>
	</executions>
</plugin>

----------------------------------------

TITLE: Defining Filter Interface in Java
DESCRIPTION: Defines the Filter interface which extends BaseFilter. It is used for post-selection interception on the consumer side.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

@SPI(scope = ExtensionScope.MODULE)
public interface Filter extends BaseFilter {
}

----------------------------------------

TITLE: Defining Dubbo Mesh Routing Rules with VirtualService and DestinationRule
DESCRIPTION: Example YAML configuration defining routing rules for a Dubbo service using VirtualService and DestinationRule custom resources. It demonstrates how to set up method-level routing with fallback options.

LANGUAGE: yaml
CODE:
apiVersion: service.dubbo.apache.org/v1alpha1
kind: VirtualService
metadata:
  name: demo-route
spec:
  hosts:
  - demo  // 统一定义为应用名
  dubbo:
  - service:
    - exact: com.taobao.hsf.demoService:1.0.0
    - exact: com.taobao.hsf.demoService:2.0.0
    routedetail:
    - name: sayHello-String-method-route
      match:
      - method:
          name_match:
            exact: "sayHello"
            .....
          argp:
          - string
      route:
      - destination:
          host: demo
          subset: v1
        fallback:
          destination:
            host: demo
            subset: v2
          fallback:
            destination:
              host: demo
              subset: v3

      - name: sayHello-method-route
        match:
        - method:
            name_match:
              exact: "s-method"
        route:
        - destination:
            host: demo
            subset: v2
          fallback:
            destination:
              host: demo
              subset: v3

      - name: interface-route
        route:
        - destination:
          host: demo
          subset: v3

  - service:

      ....
---
apiVersion: service.dubbo.apache.org/v1alpha1
kind: DestinationRule
metadata:
  name: demo-route
spec:
  host: demo
  subsets:
  - name: v1
    labels:
      sigma.ali/mg: v1-host

  - name: v2
    labels:
      sigma.ali/mg: v2-host

  - name: v3
    labels:
      sigma.ali/mg: v3-host

----------------------------------------

TITLE: ExtensionLoader Constructor Implementation
DESCRIPTION: Shows how ExtensionLoader objects are constructed with required dependencies

LANGUAGE: java
CODE:
ExtensionLoader(Class<?> type, ExtensionDirector extensionDirector, ScopeModel scopeModel) {
    this.type = type;
    this.extensionDirector = extensionDirector;
    this.extensionPostProcessors = extensionDirector.getExtensionPostProcessors();
    initInstantiationStrategy();
    this.injector = (type == ExtensionInjector.class ? null : extensionDirector.getExtensionLoader(ExtensionInjector.class)
        .getAdaptiveExtension());
    this.activateComparator = new ActivateComparator(extensionDirector);
    this.scopeModel = scopeModel;
}

----------------------------------------

TITLE: Exposing Dubbo gRPC Service
DESCRIPTION: Configure and expose the Dubbo gRPC service using Spring XML configuration.

LANGUAGE: XML
CODE:
<dubbo:application name="demo-provider"/>

<!-- 指定服务暴露协议为 gRPC -->
<dubbo:protocol id="grpc" name="grpc"/>

<dubbo:registry address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

<bean id="greeter" class="org.apache.dubbo.samples.basic.impl.GrpcGreeterImpl"/>

<!-- 指定 protoc-gen-dubbo-java 生成的接口 -->
<dubbo:service interface="io.grpc.examples.helloworld.GreeterGrpc$IGreeter" ref="greeter" protocol="grpc"/>

----------------------------------------

TITLE: Spring Web Service Implementation
DESCRIPTION: Implementation of Dubbo HTTP service using Spring Web annotations and coding style.

LANGUAGE: java
CODE:
@DubboService(interfaceClass = SpringRestDemoService.class ,protocol = "rest")\npublic class SpringRestDemoServiceImpl implements SpringRestDemoService {\n    @Override\n    public String sayHello(String name) {\n        return "Hello, " + name;\n    }\n    // ... additional methods\n}

----------------------------------------

TITLE: Adding Maven Dependencies for Fastjson in Dubbo
DESCRIPTION: Maven dependencies required to enable Fastjson serialization support in Dubbo applications. Includes both the Dubbo Fastjson serialization extension and the core Fastjson library.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
      <groupId>org.apache.dubbo.extensions</groupId>
      <artifactId>dubbo-serialization-fastjson</artifactId>
      <version>3.3.0</version>
    </dependency>
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>1.2.83</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Deploying Dubbo-go-pixiu Demo Resources to Kubernetes
DESCRIPTION: Bash command to apply the Kubernetes configuration for deploying the Dubbo-go-pixiu demo, including Triple servers, Pixiu gateway, and Nacos server.

LANGUAGE: bash
CODE:
kubectl apply -f https://raw.githubusercontent.com/dubbogo/triple-pixiu-demo/master/deploy/pixiu-triple-demo.yml

----------------------------------------

TITLE: Configuring Thread Pool in Dubbo XML
DESCRIPTION: Demonstrates how to configure the thread pool implementation in Dubbo's XML configuration. It shows setting the thread pool for a specific protocol or as a default for all providers.

LANGUAGE: xml
CODE:
<dubbo:protocol threadpool="xxx" />
<!-- Default value configuration, used when <dubbo:protocol> does not configure threadpool -->
<dubbo:provider threadpool="xxx" />

----------------------------------------

TITLE: Reporting Metrics in Dubbo Go
DESCRIPTION: Demonstrates how metrics are reported to the MetricManager using FastCompass.

LANGUAGE: Go
CODE:
func (mf *metricsFilter) report(invocation protocol.Invocation, result protocol.Result, duration time.Duration) {
	fc := metrics.GetFastCompass(DUBBO, invocation.MethodName())
	fc.Record(duration.Nanoseconds()/1e6, result.Error() == nil)
}

----------------------------------------

TITLE: Removing Application Route Rules in Istio
DESCRIPTION: This command removes the application route rules previously applied for the Bookinfo application.

LANGUAGE: bash
CODE:
$ kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@

----------------------------------------

TITLE: Defining BaseFilter Interface in Java
DESCRIPTION: Defines the BaseFilter interface which is the base for Filter and ClusterFilter. It includes methods for invocation and response/error handling.

LANGUAGE: java
CODE:
package org.apache.dubbo.rpc;

public interface BaseFilter {
    
    Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException;

    interface Listener {

        void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation);

        void onError(Throwable t, Invoker<?> invoker, Invocation invocation);
    }
}

----------------------------------------

TITLE: Starting Java and Go Services for Application-Level Discovery
DESCRIPTION: Commands to start Java server and Go client components for testing application-level service discovery interoperability using Nacos registry.

LANGUAGE: shell
CODE:
cd service

LANGUAGE: shell
CODE:
cd java-server
sh run.sh

LANGUAGE: shell
CODE:
cd go-client
go run client.go

----------------------------------------

TITLE: Implementing StorageService in Java
DESCRIPTION: Implements the StorageService interface with a method to update storage count using a DAO.

LANGUAGE: java
CODE:
public class StorageServiceImpl implements StorageService {

  private StorageDAO storageDAO;
  
    @Override
    public void deduct(String commodityCode, int count) {
        Storage storage = new Storage();
        storage.setCount(count);
        storage.setCommodityCode(commodityCode);
        storageDAO.update(storage);
    }
}

----------------------------------------

TITLE: Streaming HTTP/2 Request and Response Example for Triple Protocol
DESCRIPTION: Illustrates the format of a streaming RPC call using the Triple protocol over HTTP/2, showing headers and data frames for both request and response.

LANGUAGE: text
CODE:
HEADERS (flags = END_HEADERS)
:method = POST
:scheme = http
:path = /google.pubsub.v2.PublisherService/CreateTopic
:authority = pubsub.googleapis.com
grpc-timeout = 1S
content-type = application/grpc+proto
grpc-encoding = gzip
authorization = Bearer y235.wef315yfh138vh31hv93hv8h3v

DATA (flags = END_STREAM)
<Length-Prefixed Message>

HEADERS (flags = END_HEADERS)
:status = 200
grpc-encoding = gzip
content-type = application/grpc+proto

DATA
<Length-Prefixed Message>

HEADERS (flags = END_STREAM, END_HEADERS)
grpc-status = 0 # OK
trace-proto-bin = jher831yy13JHy3hc

----------------------------------------

TITLE: Dynamic Tag Routing Configuration
DESCRIPTION: YAML configuration for dynamic tag routing rules that group provider instances based on matching conditions.

LANGUAGE: yaml
CODE:
configVersion: v3.0
force: true
enabled: true
key: shop-detail
tags:
  - name: gray
    match:
      - key: env
        value:
          exact: gray

----------------------------------------

TITLE: Basic Nacos Configuration in Properties
DESCRIPTION: Properties file configuration for setting up Nacos registry.

LANGUAGE: properties
CODE:
dubbo.registry.address=nacos://localhost:8848
dubbo.registry.register-mode=instance

----------------------------------------

TITLE: Configuring REST Server Implementation
DESCRIPTION: Shows how to configure different REST server implementations in Dubbo.

LANGUAGE: XML
CODE:
<dubbo:protocol name="rest" server="jetty"/>

<dubbo:protocol name="rest" server="tomcat"/>

<dubbo:protocol name="rest" server="netty"/>

<dubbo:protocol name="rest" server="servlet"/>

----------------------------------------

TITLE: Creating Development Branch for Dubbo
DESCRIPTION: Command to create a new feature branch from upstream master for development work.

LANGUAGE: shell
CODE:
git checkout -b up-dev-issue#${issue-number} upstream/master

----------------------------------------

TITLE: Configuring Dubbo2.js Client in TypeScript
DESCRIPTION: TypeScript configuration for the Dubbo2.js client, including Dubbo settings and service proxy definition.

LANGUAGE: typescript
CODE:
import { Dubbo, java, TDubboCallResult } from 'dubbo2.js'

const dubbo = new Dubbo({
  application: {name: 'demo-provider'},
  register: 'localhost:2181',
  dubboVersion: '2.0.0',
  interfaces: [
    'com.alibaba.dubbo.demo.DemoProvider',
  ],
});

interface IDemoService {
  sayHello(name: string): TDubboCallResult<string>;
}

export const demoService = dubbo.proxyService<IDemoService>({
  dubboInterface: 'com.alibaba.dubbo.demo.DemoProvider',
  version: '1.0.0',
  methods: {
    sayHello(name: string) {
      return [java.String(name)];
    },

    echo() {},

    test() {},

    getUserInfo() {
      return [
        java.combine('com.alibaba.dubbo.demo.UserRequest', {
          id: 1,
          name: 'nodejs',
          email: 'node@qianmi.com',
        }),
      ];
    },
  },
});

----------------------------------------

TITLE: Implementing Dubbo Service in Java
DESCRIPTION: DemoServiceImpl class that processes HTTP request context and returns formatted HTTP response.

LANGUAGE: java
CODE:
public class DemoServiceImpl implements DemoService {
    @Override
    public Map<String, Object> apisixDubbo(Map<String, Object> httpRequestContext) {
        for (Map.Entry<String, Object> entry : httpRequestContext.entrySet()) {
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());
        }

        Map<String, Object> ret = new HashMap<String, Object>();
        ret.put("body", "dubbo success\n"); // http response body
        ret.put("status", "200"); // http response status
        ret.put("test", "123"); // http response header

        return ret;
    }
}

----------------------------------------

TITLE: Defining Protocol Interface in Go for Dubbogo Framework
DESCRIPTION: This code snippet defines the Protocol interface for the Dubbogo framework. It includes three methods: Export for exposing services, Refer for referencing remote services, and Destroy for cleaning up resources.

LANGUAGE: go
CODE:
type Protocol interface {
	// Export service for remote invocation
	Export(invoker Invoker) Exporter
	// Refer a remote service
	Refer(url *common.URL) Invoker
	// Destroy will destroy all invoker and exporter, so it only is called once.
	Destroy()
}

----------------------------------------

TITLE: Annotating Dubbo Service for Multi-Protocol Publishing
DESCRIPTION: Java annotation to publish a Dubbo service using both REST and Dubbo protocols.

LANGUAGE: java
CODE:
@DubboService(protocol="rest,dubbo")
public class UserServiceImpl implements UserService {}

----------------------------------------

TITLE: Custom Dubbo Operator Configuration
DESCRIPTION: Example of a customized Dubbo Operator configuration, overriding specific component settings.

LANGUAGE: yaml
CODE:
apiVersion: dubbo.apache.org/v1alpha1
kind: DubboOperator
metadata:
  namespace: dubbo-system
spec:
  profile: default
  namespace: dubbo-system
  componentsMeta:
    admin:
      enabled: true
    grafana:
      enabled: true
      version: 6.31.0
    prometheus:
      enabled: false
  components:
    admin:
      replicas: 3
    grafana:
      testFramework:
        enabled: false

----------------------------------------

TITLE: Handling XML Content in Triple Protocol
DESCRIPTION: Example of processing application/xml content type. Shows XML request handling and object mapping.

LANGUAGE: http
CODE:
POST /org.apache.dubbo.samples.tri.noidl.api.PojoGreeter/greetXml HTTP/1.1
Host: 192.168.202.1:50052
Content-Type: application/xml
Content-Length: 86
Accept: application/xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<User>
    <username>JohnDoe</username>
    <location>New York</location>
</User>

LANGUAGE: java
CODE:
    @Override
    public ServerResponse greetXml(User user) {
        System.out.println(user.getUsername());
        System.out.println(user.getLocation());
        return new ServerResponse("Server Received xml.");
    }

----------------------------------------

TITLE: Dynamic Configuration for Timeout Settings
DESCRIPTION: YAML configuration showing how to dynamically modify service timeout parameters.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: service
key: org.apache.dubbo.samples.UserService
enabled: true
configs:
  - side: provider
    parameters:
      timeout: 2000

----------------------------------------

TITLE: Basic Dubbo Startup Error Messages
DESCRIPTION: Common error messages shown when a Dubbo application fails to start, indicating stopping or startup failures.

LANGUAGE: bash
CODE:
Caused by: java.lang.IllegalStateException: Dubbo Module[1.1.1] is stopping or stopped, can not start again

LANGUAGE: bash
CODE:
[DUBBO] Dubbo Application[1.1](first-dubbo-consumer) start failure

----------------------------------------

TITLE: Registering Random Loadbalance in Go
DESCRIPTION: This snippet shows how the random loadbalance implementation is registered using the init function. It demonstrates the use of the SetLoadbalance function from the extension package.

LANGUAGE: Go
CODE:
package random

import (
	"math/rand"
)

import (
	"dubbo.apache.org/dubbo-go/v3/cluster/loadbalance"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/common/extension"
	"dubbo.apache.org/dubbo-go/v3/protocol"
)

func init() {
	extension.SetLoadbalance(constant.LoadBalanceKeyRandom, NewRandomLoadBalance)
}

----------------------------------------

TITLE: Updating Dubbo Dependency Version to 3.3.0
DESCRIPTION: Maven dependency configuration to upgrade Dubbo core or Spring Boot starter to version 3.3.0.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo</artifactId>
    <version>3.3.0</version>
</dependency>

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: HTTP/1 Request Example with Full Headers for Triple Protocol
DESCRIPTION: Shows a complete HTTP/1 request for a Triple protocol call, including all required and optional headers such as service version, group, and timeout.

LANGUAGE: text
CODE:
POST /org.apache.dubbo.demo.GreetService/Greet HTTP/1.1
Host: 127.0.0.1:30551
Content-Type: application/json
Accept: application/json
Content-Length: 11
Accept-Encoding: compress, gzip
tri-protocol-version: 1.0.0
tri-service-version: 1.0.0
tri-service-group: dubbo
tri-service-timeout: 3000

[{"world"}]

----------------------------------------

TITLE: Configuring Hessian2 Serialization in Dubbo using XML
DESCRIPTION: This snippet shows how to enable Hessian2 serialization for Dubbo protocol, consumer, or specific service reference using XML configuration.

LANGUAGE: xml
CODE:
<dubbo:protocol serialization="hessian2" />

        <!-- or -->
<dubbo:consumer serialization="hessian2" />

        <!-- or -->
<dubbo:reference interface="xxx" serialization="hessian2" />

----------------------------------------

TITLE: Destroying Cached ReferenceConfig in Java
DESCRIPTION: Shows how to properly destroy a cached ReferenceConfig instance and release its resources.

LANGUAGE: java
CODE:
ReferenceConfigCache cache = ReferenceConfigCache.getCache();
cache.destroy(reference);

----------------------------------------

TITLE: Starting Nacos in Standalone Mode
DESCRIPTION: Startup commands for running Nacos in standalone mode on different operating systems.

LANGUAGE: shell
CODE:
# Linux/Unix/Mac
sh startup.sh -m standalone

# Ubuntu
bash startup.sh -m standalone

# Windows
startup.cmd -m standalone

----------------------------------------

TITLE: Destroying Cached ReferenceConfig in Java
DESCRIPTION: Shows how to properly evict and destroy a ReferenceConfig from the cache, ensuring proper resource cleanup.

LANGUAGE: java
CODE:
ReferenceConfigCache cache = ReferenceConfigCache.getCache();
cache.destroy(reference);

----------------------------------------

TITLE: Subscription Confirmation Email Example
DESCRIPTION: Example of the initial confirmation email received when subscribing to the Dubbo mailing list. Shows the format and content of the automated response from the ezmlm program.

LANGUAGE: plaintext
CODE:
from: dev-help@dubbo.apache.org
reply-to: dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org
to: hello@example.com
date: Sat, Feb 24, 2018 at 3:12 PM
subject: confirm subscribe to dev@dubbo.apache.org
mailed-by: apache.org

Hi! This is the ezmlm program. I'm managing the
dev@dubbo.apache.org mailing list.

I'm working for my owner, who can be reached
at dev-owner@dubbo.apache.org.

To confirm that you would like

   hello@example.com

added to the dev mailing list, please send
a short reply to this address:

   dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org

Usually, this happens when you just hit the "reply" button.
If this does not work, simply copy the address and paste it into
the "To:" field of a new message.

or click here:
        mailto:dev-sc.xxxxxxx.xxxxxxxx-hello=example.com@dubbo.apache.org

...

----------------------------------------

TITLE: Configuring Headless Mode in YAML for Dubbo
DESCRIPTION: This snippet sets the 'headless' property to true, which is commonly used in documentation or static site generation to indicate that the page should be rendered without a full HTML header.

LANGUAGE: yaml
CODE:
---
headless: true
---

----------------------------------------

TITLE: SLF4J Logger Configuration in Properties
DESCRIPTION: Properties file configuration to enable SLF4J logging in Dubbo application.

LANGUAGE: properties
CODE:
dubbo.application.logger=slf4j

----------------------------------------

TITLE: Native Image Agent JVM Arguments
DESCRIPTION: JVM arguments for running the application with native-image-agent to generate configuration files

LANGUAGE: bash
CODE:
-agentlib:native-image-agent=config-output-dir=/tmp/config/,config-write-period-secs=300,config-write-initial-delay-secs=5

----------------------------------------

TITLE: Defining Condition Routing Rule in YAML for Dubbo Service
DESCRIPTION: This YAML snippet defines a condition routing rule for the CommentService in Dubbo. It specifies that all calls to the getComment method should be forwarded to instances in the Hangzhou region.

LANGUAGE: yaml
CODE:
configVersion: v3.0
scope: service
force: true
runtime: true
enabled: true
key: org.apache.dubbo.samples.CommentService
conditions:
  - method=getComment => region=Hangzhou

----------------------------------------

TITLE: Configuring File-Based Service Mapping
DESCRIPTION: Shows how to specify a properties file for service URL mapping and the format of the mapping file.

LANGUAGE: sh
CODE:
java -Ddubbo.resolve.file=xxx.properties

LANGUAGE: properties
CODE:
com.alibaba.xxx.XxxService=dubbo://localhost:20890

----------------------------------------

TITLE: Running Example with Docker
DESCRIPTION: Docker commands for running Pixiu and associated services

LANGUAGE: shell
CODE:
docker pull phial3/dubbo-go-pixiu:latest

docker run --name pixiuname -p 8883:8883 \
    -v /yourpath/conf.yaml:/etc/pixiu/conf.yaml \
    -v /yourpath/log.yml:/etc/pixiu/log.yml \
    apache/dubbo-go-pixiu:latest

# Start provider that uses zookeeper as the registration center first
cd samples/dubbogo/simple/resolve/server

# Add required environment variables, specifying the location of the provider's configuration file
export DUBBO_GO_CONFIG_PATH="../profiles/dev/server.yml"
export APP_LOG_CONF_FILE="../profiles/dev/log.yml"

# Start provider
go run server.go user.go

# Go to the test directory and start the test example
cd samples/dubbogo/simple/resolve/test

go test  pixiu_test.go

----------------------------------------

TITLE: Implementing Invoker Listener in Java
DESCRIPTION: Example implementation of an InvokerListener interface showing the required methods for handling service reference events.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.InvokerListener;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.RpcException;
 
public class XxxInvokerListener implements InvokerListener {
    public void referred(Invoker<?> invoker) throws RpcException {
        // ...
    }
    public void destroyed(Invoker<?> invoker) throws RpcException {
        // ...
    }
}

----------------------------------------

TITLE: Implementing Callback Handler
DESCRIPTION: Implementation of the callback interface that stores results and errors in maps.

LANGUAGE: java
CODE:
class NotifyImpl implements Notify {
    public Map<Integer, Person>    ret    = new HashMap<Integer, Person>();
    public Map<Integer, Throwable> errors = new HashMap<Integer, Throwable>();
    
    public void onreturn(Person msg, Integer id) {
        System.out.println("onreturn:" + msg);
        ret.put(id, msg);
    }
    
    public void onthrow(Throwable ex, Integer id) {
        errors.put(id, ex);
    }
}

----------------------------------------

TITLE: Connecting to Zookeeper CLI
DESCRIPTION: Command to connect to the Zookeeper server using the CLI client.

LANGUAGE: shell
CODE:
$ bin/zkCli.sh -server 127.0.0.1:2181

----------------------------------------

TITLE: Initializing DefaultApplicationDeployer in Dubbo
DESCRIPTION: The initialize() method in DefaultApplicationDeployer that handles the initialization process, including starting the config center and loading application configs.

LANGUAGE: Java
CODE:
@Override
    public void initialize() {
        if (initialized) {
            return;
        }
        // Ensure that the initialization is completed when concurrent calls
        synchronized (startLock) {
            if (initialized) {
                return;
            }
            // register shutdown hook
            registerShutdownHook();

            startConfigCenter();

            loadApplicationConfigs();

            initModuleDeployers();

            // @since 2.7.8
            startMetadataCenter();

            initialized = true;

            if (logger.isInfoEnabled()) {
                logger.info(getIdentifier() + " has been initialized!");
            }
        }
    }

----------------------------------------

TITLE: Running Dubbo Applications with Skywalking Agent
DESCRIPTION: Shell commands to start Dubbo provider and consumer applications with Skywalking agent configuration.

LANGUAGE: shell
CODE:
java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar dubbo-samples-spring-boot-tracing-skwalking-provider-1.0-SNAPSHOT.jar

java -javaagent:/path/to/skywalking-agent/skywalking-agent.jar -jar dubbo-samples-spring-boot-tracing-skwalking-consumer-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Basic Configuration with DubboBootstrap
DESCRIPTION: Example showing how to configure basic Dubbo settings using DubboBootstrap including registry, protocol, config center, metadata and other core components.

LANGUAGE: java
CODE:
// 注册中心
RegistryConfig registry = new RegistryConfig();
registry.setAddress("zookeeper://192.168.10.1:2181");
...

// 服务提供者协议配置
ProtocolConfig protocol = new ProtocolConfig();
protocol.setName("dubbo");
protocol.setPort(12345);
protocol.setThreads(200);
...

// 配置中心
ConfigCenterConfig configCenter = new ConfigCenterConfig();
configCenter.setAddress("zookeeper://192.168.10.2:2181");
...

// 元数据中心
MetadataReportConfig metadataReport = new MetadataReportConfig();
metadataReport.setAddress("zookeeper://192.168.10.3:2181");
...

// Metrics
MetricsConfig metrics = new MetricsConfig();
metrics.setProtocol("dubbo");
...

// SSL
SslConfig ssl = new SslConfig();
ssl.setServerKeyCertChainPath("/path/ssl/server-key-cert-chain");
ssl.setServerPrivateKeyPath("/path/ssl/server-private-key");
...

// Provider配置（ServiceConfig默认配置）
ProviderConfig provider = new ProviderConfig();
provider.setGroup("demo");
provider.setVersion("1.0.0");
...

// Consumer配置（ReferenceConfig默认配置）
ConsumerConfig consumer = new ConsumerConfig();
consumer.setGroup("demo");
consumer.setVersion("1.0.0");
consumer.setTimeout(2000);
...

DubboBootstrap.getInstance()
    .application("demo-app")
    .registry(registry)
    .protocol(protocol)
    .configCenter(configCenter)
    .metadataReport(metadataReport)
    .module(new ModuleConfig("module"))
    .metrics(metrics)
  	.ssl(ssl)
  	.provider(provider)
  	.consumer(consumer)
  	...
  	.start();


----------------------------------------

TITLE: Adding Dubbo Service Dependency in Maven
DESCRIPTION: Maven dependency configuration for including the Dubbo service interface definition.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-demo-interface</artifactId>
    <version>3.2.0</version>
</dependency>

----------------------------------------

TITLE: Implementing Custom ThreadPool in Java
DESCRIPTION: Shows how to create a custom ThreadPool implementation in Java. The class must implement the ThreadPool interface and provide an implementation for the getExecutor() method.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.threadpool.ThreadPool;
import java.util.concurrent.Executor;
 
public class XxxThreadPool implements ThreadPool {
    public Executor getExecutor() {
        // ...
    }
}

----------------------------------------

TITLE: Implementing Robot Interface for SPI Example
DESCRIPTION: Provides two implementations of the Robot interface: OptimusPrime and Bumblebee.

LANGUAGE: java
CODE:
public class OptimusPrime implements Robot {
    
    @Override
    public void sayHello() {
        System.out.println("Hello, I am Optimus Prime.");
    }
}

public class Bumblebee implements Robot {

    @Override
    public void sayHello() {
        System.out.println("Hello, I am Bumblebee.");
    }
}

----------------------------------------

TITLE: 配置 Go 客户端 Dubbo 服务引用
DESCRIPTION: 使用 YAML 配置文件定义 Go 客户端的 Dubbo 服务引用，包括注册中心和服务接口信息。

LANGUAGE: YAML
CODE:
dubbo:
  registries:
    demoZK:
      protocol: zookeeper
      address: 127.0.0.1:2181
  consumer:
    references:
      GreeterClientImpl:
        protocol: tri
        interface: com.apache.dubbo.sample.basic.IGreeter # must be compatible with grpc or dubbo-java

----------------------------------------

TITLE: Generating Adaptive Extension Class Code
DESCRIPTION: Method for generating the code of adaptive extension classes in Dubbo.

LANGUAGE: Java
CODE:
public String generate() {
    if (!hasAdaptiveMethod()) {
        throw new IllegalStateException("No adaptive method exist on extension " + type.getName() + ", refuse to create the adaptive class!");
    }
    StringBuilder code = new StringBuilder();
    code.append(generatePackageInfo());
    code.append(generateImports());
    code.append(generateClassDeclaration());
    Method[] methods = type.getMethods();
    for (Method method : methods) {
        code.append(generateMethod(method));
    }
    code.append("}");
    return code.toString();
}

----------------------------------------

TITLE: Cross-Namespace Service Reference
DESCRIPTION: Configuration examples for referencing Dubbo services across different namespaces

LANGUAGE: java
CODE:
@DubboReference(providedBy = "istio-demo-dubbo-producer", providerPort = 20885, providerNamespace = "istio-demo")

----------------------------------------

TITLE: Displaying User-Based Routing Configuration in Istio
DESCRIPTION: This command displays the virtual service configuration for the reviews service, showing the user-based routing rule.

LANGUAGE: bash
CODE:
$ kubectl get virtualservice reviews -o yaml

----------------------------------------

TITLE: Generating Adaptive Extension Class Code
DESCRIPTION: Method for generating the code of adaptive extension classes in Dubbo.

LANGUAGE: Java
CODE:
public String generate() {
    if (!hasAdaptiveMethod()) {
        throw new IllegalStateException("No adaptive method exist on extension " + type.getName() + ", refuse to create the adaptive class!");
    }
    StringBuilder code = new StringBuilder();
    code.append(generatePackageInfo());
    code.append(generateImports());
    code.append(generateClassDeclaration());
    Method[] methods = type.getMethods();
    for (Method method : methods) {
        code.append(generateMethod(method));
    }
    code.append("}");
    return code.toString();
}

----------------------------------------

TITLE: Initializing Metadata Center
DESCRIPTION: Starting the metadata center in DefaultApplicationDeployer's initialize method

LANGUAGE: Java
CODE:
@Override
public void initialize() {
    if (initialized) {
        return;
    }
    synchronized (startLock) {
        if (initialized) {
            return;
        }
        registerShutdownHook();
        startConfigCenter();
        loadApplicationConfigs();
        initModuleDeployers();
        startMetadataCenter();
        initialized = true;
        if (logger.isInfoEnabled()) {
            logger.info(getIdentifier() + " has been initialized!");
        }
    }
}

----------------------------------------

TITLE: Configuring Thread Pool Isolation via Annotation
DESCRIPTION: Example of configuring thread pool isolation for Dubbo services using annotations, including custom executors and application-level settings.

LANGUAGE: java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "org.apache.dubbo.config.spring.isolation.spring.annotation.provider")
public class ProviderConfiguration {
    @Bean
    public RegistryConfig registryConfig() {
        RegistryConfig registryConfig = new RegistryConfig();
        registryConfig.setAddress("zookeeper://127.0.0.1:2181");
        return registryConfig;
    }

    // NOTE: we need config executor-management-mode="isolation"
    @Bean
    public ApplicationConfig applicationConfig() {
        ApplicationConfig applicationConfig = new ApplicationConfig("provider-app");

        applicationConfig.setExecutorManagementMode("isolation");
        return applicationConfig;
    }

    // expose services with dubbo protocol
    @Bean
    public ProtocolConfig dubbo() {
        ProtocolConfig protocolConfig = new ProtocolConfig("dubbo");
        return protocolConfig;
    }

    // expose services with tri protocol
    @Bean
    public ProtocolConfig tri() {
        ProtocolConfig protocolConfig = new ProtocolConfig("tri");
        return protocolConfig;
    }

    // customized thread pool
    @Bean("executor-demo-service")
    public Executor demoServiceExecutor() {
        return new DemoServiceExecutor();
    }

    // customized thread pool
    @Bean("executor-hello-service")
    public Executor helloServiceExecutor() {
        return new HelloServiceExecutor();
    }
}

// custom thread pool
public class DemoServiceExecutor extends ThreadPoolExecutor {
    public DemoServiceExecutor() {
        super(10, 10, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),
            new NamedThreadFactory("DemoServiceExecutor"));
    }
}

// custom thread pool
public class HelloServiceExecutor extends ThreadPoolExecutor {
    public HelloServiceExecutor() {
        super(100, 100, 60, TimeUnit.SECONDS, new LinkedBlockingDeque<>(),
            new NamedThreadFactory("HelloServiceExecutor"));
    }
}

// "executor-hello-service" is beanName
@DubboService(executor = "executor-demo-service", version = "1.0.0", group = "Group1")
public class DemoServiceImplV1 implements DemoService {

  @Override
  public String sayName(String name) {
    return "server name";
  }

  @Override
  public Box getBox() {
    return null;
  }
}

// not set executor for this service, the default executor built using threadpool parameter of the protocolConfig
@DubboService(version = "3.0.0", group = "Group3")
public class HelloServiceImplV2 implements HelloService {
    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV2.class);

    @Override
    public String sayHello(String name) {
        return "server hello";
    }
}

@DubboService(executor = "executor-hello-service", version = "2.0.0", group = "Group2")
public class HelloServiceImplV3 implements HelloService {
    private static final Logger logger = LoggerFactory.getLogger(HelloServiceImplV3.class);

    @Override
    public String sayHello(String name) {
        return "server hello";
    }
}

----------------------------------------

TITLE: Starting Simple Registry with Dubbo Maven Plugin
DESCRIPTION: This command starts a simple registry on the specified port 9099 using the Dubbo Maven plugin. If no port is specified, the default port is 9090.

LANGUAGE: sh
CODE:
mvn dubbo:registry -Dport=9099

----------------------------------------

TITLE: Defining Hugo Front Matter Template for Dubbo Content
DESCRIPTION: This snippet defines the front matter template for new Hugo content pages in the Dubbo project. It automatically generates a title by replacing hyphens with spaces and capitalizing words, sets the current date, and marks the content as a draft.

LANGUAGE: hugo
CODE:
---
title: "{{ replace .Name "-" " " | title }}"
date: {{ .Date }}
draft: true
---

----------------------------------------

TITLE: Applying User-Based Routing in Istio
DESCRIPTION: This command applies a virtual service to enable user-based routing, specifically routing traffic from user 'jason' to v2 of the reviews service.

LANGUAGE: bash
CODE:
$ kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@

----------------------------------------

TITLE: Adding Config to ConfigManager Cache in Java
DESCRIPTION: The addConfig method in ConfigManager that adds a configuration object to the internal cache.

LANGUAGE: java
CODE:
public final <T extends AbstractConfig> T addConfig(AbstractConfig config) {
    if (config == null) {
        return null;
    }
    if (!isSupportConfigType(config.getClass())) {
        throw new IllegalArgumentException("Unsupported config type: " + config);
    }
    if (config.getScopeModel() != scopeModel) {
        config.setScopeModel(scopeModel);
    }
    Map<String, AbstractConfig> configsMap = configsCache.computeIfAbsent(getTagName(config.getClass()), type -> new ConcurrentHashMap<>());
    if (!(config instanceof ReferenceConfigBase || config instanceof ServiceConfigBase)) {
        for (AbstractConfig value : configsMap.values()) {
            if (value.equals(config)) {
                return (T) value;
            }
        }
    }
    synchronized (configsMap) {
        return (T) addIfAbsent(config, configsMap);
    }
}

----------------------------------------

TITLE: Configuring Application-Level Service Discovery for Dubbo3 Registry
DESCRIPTION: Specify a registry as application-level service discovery by adding the registry-type=service parameter to the registry address.

LANGUAGE: xml
CODE:
<dubbo:registry address="nacos://${nacos.address:127.0.0.1}:8848?registry-type=service"/>

----------------------------------------

TITLE: Building and Deploying Dubbo-go Applications with Helm
DESCRIPTION: Uses make commands to build Docker images and deploy the applications using Helm charts.

LANGUAGE: Bash
CODE:
$ make build  # or make buildx-publish for arm64
$ make deploy
helm install dubbo-go-server-v1 ./chart/app
NAME: dubbo-go-server-v1
LAST DEPLOYED: Thu Apr  7 11:19:42 2022
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None

----------------------------------------

TITLE: Initializing Dubbo Erlang Library
DESCRIPTION: Initialize the Dubbo Erlang library in your project. This should be called before making any Dubbo calls.

LANGUAGE: erlang
CODE:
dubboerl:init().

----------------------------------------

TITLE: Running Dubbo-Go Server
DESCRIPTION: Shell command to start the Dubbo-Go server application.

LANGUAGE: shell
CODE:
$ go run ./go-server/cmd/server.go

----------------------------------------

TITLE: Implementing gRPC Client
DESCRIPTION: Traditional gRPC client implementation that can communicate with both Dubbo-Go and gRPC servers.

LANGUAGE: go
CODE:
func main() {
	// test connect with grpc
	grpcConn, err := grpc.Dial("127.0.0.1:20001", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		logger.Fatalf("did not connect: %v", err)
	}
	defer grpcConn.Close()
	c := pb.NewGreetServiceClient(grpcConn)
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	resp, err := c.Greet(ctx, &pb.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Fatalf("could not greet: %v", err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)

	// test connect with dubbo
	dubboConn, err := grpc.Dial("127.0.0.1:20000", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		logger.Fatalf("did not connect: %v", err)
	}
	defer dubboConn.Close()
	c = pb.NewGreetServiceClient(dubboConn)
	ctx, cancel = context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	resp, err = c.Greet(ctx, &pb.GreetRequest{Name: "hello world"})
	if err != nil {
		logger.Fatalf("could not greet: %v", err)
	}
	logger.Infof("Greet response: %s", resp.Greeting)
}

----------------------------------------

TITLE: Getting Adaptive Extension
DESCRIPTION: Method to get cached adaptive extension instance with double-checked locking pattern

LANGUAGE: java
CODE:
public T getAdaptiveExtension() {
    checkDestroyed();
    Object instance = cachedAdaptiveInstance.get();
    if (instance == null) {
        if (createAdaptiveInstanceError != null) {
            throw new IllegalStateException("Failed to create adaptive instance: " + createAdaptiveInstanceError.toString(), createAdaptiveInstanceError);
        }
        synchronized (cachedAdaptiveInstance) {
            instance = cachedAdaptiveInstance.get();
            if (instance == null) {
                try {
                    instance = createAdaptiveExtension();
                    cachedAdaptiveInstance.set(instance);
                } catch (Throwable t) {
                    createAdaptiveInstanceError = t;
                    throw new IllegalStateException("Failed to create adaptive instance: " + t.toString(), t);
                }
            }
        }
    }
    return (T) instance;
}

----------------------------------------

TITLE: Modern SPI Extension Access in Java
DESCRIPTION: Demonstrates the new instance-based approach for obtaining SPI extension instances through ScopeModel or ExtensionDirector.

LANGUAGE: java
CODE:
applicationModel.getExtensionLoader(Cluster.class).getExtension(name, wrap);

----------------------------------------

TITLE: Configuring Dual Registration for Dubbo3 Provider
DESCRIPTION: Configure the provider to register both interface-level and application-level addresses using the dubbo.application.register-mode property.

LANGUAGE: properties
CODE:
# Dual registration
dubbo.application.register-mode=all

LANGUAGE: properties
CODE:
# Application-level registration only
dubbo.application.register-mode=instance

LANGUAGE: text
CODE:
-Ddubbo.application.register-mode=all
# Possible values: interface, instance, all. Default is all, meaning both interface-level and application-level addresses are registered

----------------------------------------

TITLE: Implementing Asynchronous Dubbo Service in Java
DESCRIPTION: This code snippet demonstrates how to implement an asynchronous Dubbo service using Java. It uses RpcContext to start an asynchronous context and creates a new thread to handle the asynchronous processing.

LANGUAGE: Java
CODE:
public class AsyncServiceImpl implements AsyncService {

    @Override
    public String sayHello(String name) {
        System.out.println("Main sayHello() method start.");
        final AsyncContext asyncContext = RpcContext.startAsync();
        new Thread(() -> {
            asyncContext.signalContextSwitch();
            System.out.println("Attachment from consumer: " + RpcContext.getContext().getAttachment("consumer-key1"));
            System.out.println("    -- Async start.");
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            asyncContext.write("Hello " + name + ", response from provider.");
            System.out.println("    -- Async end.");
        }).start();
        System.out.println("Main sayHello() method end.");
        return "hello, " + name;
    }

----------------------------------------

TITLE: Typical Dubbo URL Examples
DESCRIPTION: Provides examples of URLs used in Dubbo for describing services, registries, and consumers.

LANGUAGE: plaintext
CODE:
dubbo://192.168.1.6:20880/moe.cnkirito.sample.HelloService?timeout=3000

zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=demo-consumer&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=1214&qos.port=33333&timestamp=1545721981946

consumer://30.5.120.217/org.apache.dubbo.demo.DemoService?application=demo-consumer&category=consumers&check=false&dubbo=2.0.2&interface=org.apache.dubbo.demo.DemoService&methods=sayHello&pid=1209&qos.port=33333&side=consumer&timestamp=1545721827784

----------------------------------------

TITLE: Building Dubboctl from Source (Shell)
DESCRIPTION: Instructions for cloning the Dubbo Admin repository, building Dubboctl, and adding it to the system path.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/dubbo-admin.git
cd dubbo-admin/cmd/dubboctl
go build -o dubboctl .

ln -s dubbo-admin/cmd/dubboctl/dubboctl /usr/local/bin/dubboctl

----------------------------------------

TITLE: Defining Dubbo Service Interface in Java
DESCRIPTION: Example showing how to define a Java interface as a Dubbo service. This is the first step in creating a Dubbo service definition.

LANGUAGE: java
CODE:
// Interface definition shown in image 12-interface.jpg

----------------------------------------

TITLE: Initializing DubboBootstrap with ApplicationConfig in Java
DESCRIPTION: Example of how to create a DubboBootstrap instance and configure it with an ApplicationConfig object.

LANGUAGE: java
CODE:
DubboBootstrap bootstrap = DubboBootstrap.getInstance();
bootstrap.application(new ApplicationConfig("dubbo-demo-api-provider"))
         .registry(new RegistryConfig("zookeeper://127.0.0.1:2181"))
         .protocol(new ProtocolConfig(CommonConstants.DUBBO, -1))
         .service(service)
         .start()
         .await();

----------------------------------------

TITLE: Legacy SPI Extension Access in Java
DESCRIPTION: Shows the original static method approach for obtaining SPI extension instances in Dubbo.

LANGUAGE: java
CODE:
ExtensionLoader.getExtensionLoader(Cluster.class).getExtension(name, wrap);

----------------------------------------

TITLE: Adding ApplicationConfig to DubboBootstrap in Java
DESCRIPTION: Implementation of the application() method in DubboBootstrap class that adds the ApplicationConfig to the configuration manager.

LANGUAGE: java
CODE:
public DubboBootstrap application(ApplicationConfig applicationConfig) {
    applicationConfig.setScopeModel(applicationModel);
    configManager.setApplication(applicationConfig);
    return this;
}

----------------------------------------

TITLE: Consuming Versioned Dubbo Services
DESCRIPTION: Client implementation showing how to consume different versions of the Dubbo service using @DubboReference annotation

LANGUAGE: java
CODE:
@DubboReference(group = "group1", version = "1.0")
private DevelopService developService;

@DubboReference(group = "group2", version = "2.0")
private DevelopService developServiceV2;

@Override
public void run(String... args) throws Exception {
    System.out.println("Dubbo Remote Return ======> " + developService.invoke("1"));
    System.out.println("Dubbo Remote Return ======> " + developServiceV2.invoke("2"));
}

----------------------------------------

TITLE: Creating ModuleModel Object in Dubbo
DESCRIPTION: Initializes the ModuleModel object, which represents a service module in Dubbo.

LANGUAGE: Java
CODE:
public ModuleModel(ApplicationModel applicationModel, boolean isInternal) {
    super(applicationModel, ExtensionScope.MODULE, isInternal);
    Assert.notNull(applicationModel, "ApplicationModel can not be null");
    this.applicationModel = applicationModel;
    applicationModel.addModule(this, isInternal);
    if (LOGGER.isInfoEnabled()) {
        LOGGER.info(getDesc() + " is created");
    }
    initialize();
    Assert.notNull(serviceRepository, "ModuleServiceRepository can not be null");
    Assert.notNull(moduleConfigManager, "ModuleConfigManager can not be null");
    Assert.assertTrue(moduleConfigManager.isInitialized(), "ModuleConfigManager can not be initialized");
    ApplicationDeployer applicationDeployer = applicationModel.getDeployer();
    if (applicationDeployer != null) {
        applicationDeployer.notifyModuleChanged(this, DeployState.PENDING);
    }
}

----------------------------------------

TITLE: Configuring Hugo Frontmatter for Dubbo Demo Page
DESCRIPTION: This snippet defines the Hugo frontmatter for a demo page in the Dubbo project. It specifies the title, layout, and hides the table of contents.

LANGUAGE: markdown
CODE:
---
title: "Demo"
layout: "shortcodes/blocks/demo-zh"
toc_hide: true
---

----------------------------------------

TITLE: Configuring Dubbo Service Provider with Java Config in Java
DESCRIPTION: Example of using Java Config and @EnableDubbo to configure and assemble Dubbo service providers.

LANGUAGE: Java
CODE:
@Configuration
@EnableDubbo(scanBasePackages = "com.alibaba.dubbo.samples.impl")
static class ProviderConfiguration {
    @Bean
    public ProviderConfig providerConfig() {
        ProviderConfig providerConfig = new ProviderConfig();
        providerConfig.setTimeout(1000);
        return providerConfig;
    }

    @Bean
    public ApplicationConfig applicationConfig() {
        ApplicationConfig applicationConfig = new ApplicationConfig();
        applicationConfig.setName("dubbo-annotation-provider");
        return applicationConfig;
    }

    @Bean
    public RegistryConfig registryConfig() {
        RegistryConfig registryConfig = new RegistryConfig();
        registryConfig.setProtocol("zookeeper");
        registryConfig.setAddress("localhost");
        registryConfig.setPort(2181);
        return registryConfig;
    }

    @Bean
    public ProtocolConfig protocolConfig() {
        ProtocolConfig protocolConfig = new ProtocolConfig();
        protocolConfig.setName("dubbo");
        protocolConfig.setPort(20880);
        return protocolConfig;
    }
}

----------------------------------------

TITLE: Configuring Direct Connection and Server Types in Dubbo XML
DESCRIPTION: XML configurations for direct connection to a Webservice, and specifying different server types (Jetty and Servlet Bridge) for the Webservice protocol in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:reference id="helloService" interface="HelloWorld" url="webservice://10.20.153.10:8080/com.foo.HelloWorld" />

LANGUAGE: xml
CODE:
<dubbo:protocol ... server="jetty" />

LANGUAGE: xml
CODE:
<dubbo:protocol ... server="servlet" />

----------------------------------------

TITLE: Creating FrameworkModel Object in Dubbo
DESCRIPTION: Initializes the FrameworkModel object, which represents the top-level domain model in Dubbo.

LANGUAGE: Java
CODE:
public FrameworkModel() {
    super(null, ExtensionScope.FRAMEWORK, false);
    this.setInternalId(String.valueOf(index.getAndIncrement()));
    synchronized (globalLock) {
        allInstances.add(this);
        resetDefaultFrameworkModel();
    }
    if (LOGGER.isInfoEnabled()) {
        LOGGER.info(getDesc() + " is created");
    }
    initialize();
}

----------------------------------------

TITLE: Configuring Dubbo Service in XML
DESCRIPTION: This XML configuration exposes the Dubbo service, setting up the application name, registry, protocol, and service interface.

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
   http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="demo-provider"/>

    <dubbo:registry protocol="zookeeper" address="localhost:2181"/>

    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="20880"/>

    <!-- 和本地bean一样实现服务 -->
    <bean id="demoProvider" class="com.alibaba.dubbo.demo.provider.DemoProviderImpl"/>

    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="com.alibaba.dubbo.demo.DemoProvider" ref="demoProvider" version="1.0.0"/>

</beans>

----------------------------------------

TITLE: Rendering Page Links with Hugo Templates
DESCRIPTION: A Hugo template that retrieves the advanced-features-and-usage page and iterates through its recursive regular pages to generate HTML links. Each link is wrapped in a div with heading styling.

LANGUAGE: gotemplate
CODE:
{{ $page := .Site.GetPage "advanced-features-and-usage" }}

{{ range $page.RegularPagesRecursive }}
<div>
    <h5 class="mt-3"><a href="{{ .RelPermalink }}">{{ .Title }}</a></h5>
</div>
{{ end }}

----------------------------------------

TITLE: Configuring Simplified Registry
DESCRIPTION: XML configuration for enabling simplified registry data format in Dubbo 2.7.

LANGUAGE: XML
CODE:
<dubbo:registry address="zookeeper://127.0.0.1:2181" simplified="true"/>

----------------------------------------

TITLE: Documentation of Website Script Dependencies
DESCRIPTION: Lists essential JavaScript files required for website functionality, including Bootstrap 4.3.1, jQuery 3.3.1 (as a Bootstrap dependency), and jQuery ScrollTo 2.1.2. These files are specifically referenced in the API documentation section.

LANGUAGE: markdown
CODE:
# NOTE

This directory contains scripts files referenced by different sections of
the website. Please use caution when moving/renaming them.

## Scripts used by API reference

- bootstrap-4.3.1.min.js
- jquery-3.3.1.min.js (indirect dependency from bootstrap-4.3.1.min.js)
- jquery.scrollTo-2.1.2.min.js

----------------------------------------

TITLE: Configuring Netty4 for Dubbo Provider
DESCRIPTION: XML configuration to enable Netty4 server on the provider side. This can be done either at the protocol level or the provider level.

LANGUAGE: xml
CODE:
<dubbo:protocol server="netty4" />

LANGUAGE: xml
CODE:
<dubbo:provider server="netty4" />

----------------------------------------

TITLE: Using @EnableDubboConfigBindings for Custom Property Prefixes
DESCRIPTION: Example of using @EnableDubboConfigBindings to bind custom property prefixes to Dubbo configuration beans.

LANGUAGE: Java
CODE:
@EnableDubboConfigBindings({
    @EnableDubboConfigBinding(prefix = "${applications.prefix}",
            type = ApplicationConfig.class, multiple = true),
    @EnableDubboConfigBinding(prefix = "dubbo.module",
            type = ModuleConfig.class),
    @EnableDubboConfigBinding(prefix = "dubbo.registry.",
            type = RegistryConfig.class)
})
@PropertySource("META-INF/bindings.properties")
@Configuration
public class DubboConfiguration {
  
}

----------------------------------------

TITLE: Configuring Metadata Report Center
DESCRIPTION: XML configuration example for setting up zookeeper as metadata center in Dubbo 2.7.

LANGUAGE: XML
CODE:
<dubbo:metadata-report address="zookeeper://127.0.0.1:2181"/>

----------------------------------------

TITLE: Defining Codec Interface in Java for Dubbo Protocol
DESCRIPTION: This code snippet defines the Codec2 interface in Dubbo, which is used for encoding and decoding data in the I/O process. It includes methods for encoding messages to a ChannelBuffer and decoding messages from a ChannelBuffer.

LANGUAGE: Java
CODE:
@SPI
public interface Codec2 {

    @Adaptive({Constants.CODEC_KEY})
    void encode(Channel channel, ChannelBuffer buffer, Object message) throws IOException;

    @Adaptive({Constants.CODEC_KEY})
    Object decode(Channel channel, ChannelBuffer buffer) throws IOException;


    enum DecodeResult {
        NEED_MORE_INPUT, SKIP_SOME_INPUT
    }

}

----------------------------------------

TITLE: Exiting Dubbo CLI
DESCRIPTION: Demonstrates how to exit the Dubbo command-line interface using the quit command.

LANGUAGE: text
CODE:
dubbo>quit
BYE!
Connection closed by foreign host.


----------------------------------------

TITLE: Configuring Dubbo Provider with Protobuf
DESCRIPTION: Configure and expose the Dubbo service using Protobuf serialization.

LANGUAGE: XML
CODE:
<dubbo:application name="demo-provider"/>

<dubbo:registry address="zookeeper://127.0.0.1:2181"/>

<dubbo:protocol name="dubbo"/>

<bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>

<dubbo:service interface="org.apache.dubbo.demo.DemoServiceDubbo$IDemoService" ref="demoService"/>

----------------------------------------

TITLE: Configuring Local Mocking in Dubbo XML
DESCRIPTION: Demonstrates how to configure local mocking in Dubbo's Spring XML configuration file. It shows two ways to enable mocking for a service reference.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="true" />

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="com.foo.BarServiceMock" />

----------------------------------------

TITLE: Caching and Retrieving References in SimpleReferenceCache in Java
DESCRIPTION: Method in SimpleReferenceCache that handles caching and retrieval of service references, including logic for singleton and non-singleton references.

LANGUAGE: Java
CODE:
@Override
@SuppressWarnings("unchecked")
public <T> T get(ReferenceConfigBase<T> rc) {
    String key = generator.generateKey(rc);
    Class<?> type = rc.getInterfaceClass();

    boolean singleton = rc.getSingleton() == null || rc.getSingleton();
    T proxy = null;
    if (singleton) {
        proxy = get(key, (Class<T>) type);
    } else {
        logger.warn("Using non-singleton ReferenceConfig and ReferenceCache at the same time may cause memory leak. " +
            "Call ReferenceConfig#get() directly for non-singleton ReferenceConfig instead of using ReferenceCache#get(ReferenceConfig)");
    }
    if (proxy == null) {
        List<ReferenceConfigBase<?>> referencesOfType = referenceTypeMap.computeIfAbsent(type, _t -> Collections.synchronizedList(new ArrayList<>()));
        referencesOfType.add(rc);

        List<ReferenceConfigBase<?>> referenceConfigList = referenceKeyMap.computeIfAbsent(key, _k -> Collections.synchronizedList(new ArrayList<>()));
        referenceConfigList.add(rc);
        proxy = rc.get();
    }

    return proxy;
}

----------------------------------------

TITLE: Configuring Simple Exception Handling in Dubbo XML
DESCRIPTION: Demonstrates how to configure Dubbo to simply return null when an exception occurs, avoiding the need for try-catch blocks in the consumer code.

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" mock="return null" />

----------------------------------------

TITLE: Configuring Router in Application Properties
DESCRIPTION: Application configuration that enables the custom router implementation for Dubbo consumers.

LANGUAGE: properties
CODE:
# Configure custom routing
dubbo.consumer.router=stickfirst

----------------------------------------

TITLE: Script Routing Rules Example
DESCRIPTION: JavaScript-based routing script that filters service invocations based on host address.

LANGUAGE: yaml
CODE:
configVersion: v3.0
key: demo-provider
type: javascript
enabled: true
script: |
  (function route(invokers,invocation,context) {
      var result = new java.util.ArrayList(invokers.size());
      for (i = 0; i < invokers.size(); i ++) {
          if ("10.20.3.3".equals(invokers.get(i).getUrl().getHost())) {
              result.add(invokers.get(i));
          }
      }
      return result;
  } (invokers, invocation, context));

----------------------------------------

TITLE: Defining UserProvider Service Interface
DESCRIPTION: Creates a UserProvider struct that defines the service interface for the client with a reference function.

LANGUAGE: go
CODE:
type UserProvider struct {
	GetUser func(ctx context.Context, req []interface{}, rsp *User) error
}

func (u *UserProvider) Reference() string {
	return "UserProvider"
}

----------------------------------------

TITLE: Configuring Service-Level Fixed Token Authorization in Dubbo XML
DESCRIPTION: Sets up token authorization using a fixed token string for a specific service interface.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" token="123456" />

----------------------------------------

TITLE: Setting Consumer Tags in Java
DESCRIPTION: Example of setting tags on the consumer side to route traffic to specific provider instances.

LANGUAGE: java
CODE:
RpcContext.getContext().setAttachment(Constants.TAG_KEY, "gray");

----------------------------------------

TITLE: Dubbo Client Configuration
DESCRIPTION: YAML configuration for Dubbo client including application settings, registry configuration, and protocol settings.

LANGUAGE: yaml
CODE:
check: true
request_timeout: "3s"
connect_timeout: "3s"

application:
  organization: "dubbo.io"
  name: "UserInfoClient"
  module: "dubbo-go user-info client"
  version: "0.0.1"
  environment: "dev"

registries:
  "demoZk":
    protocol: "zookeeper"
    timeout: "3s"
    address: "127.0.0.1:2181"
    username: ""
    password: ""

references:
  "UserProvider":
    registry: "demoZk"
    protocol: "dubbo"
    interface: "org.apache.dubbo.UserProvider"
    cluster: "failover"
    methods:
      - name: "GetUser"
        retries: 3

----------------------------------------

TITLE: Spring XML Configuration for Zipkin Tracing
DESCRIPTION: Spring XML configuration to set up Zipkin tracing for Dubbo services

LANGUAGE: xml
CODE:
<dubbo:service interface="com.alibaba.dubbo.samples.api.HelloService" ref="helloService" filter="tracing"/>

<bean id="sender" class="zipkin2.reporter.beans.OkHttpSenderFactoryBean">
    <property name="endpoint" value="http://localhost:9411/api/v2/spans"/>
</bean>

<bean id="tracing" class="brave.spring.beans.TracingFactoryBean">
    <property name="localServiceName" value="hello-service"/>
    <property name="spanReporter">
        <bean class="zipkin2.reporter.beans.AsyncReporterFactoryBean">
            <property name="sender" ref="sender"/>
            <property name="closeTimeout" value="500"/>
        </bean>
    </property>
</bean>

----------------------------------------

TITLE: Defining DetailService Interface in Java
DESCRIPTION: Interface definition for the DetailService showing the getItem method signature that takes SKU and username parameters

LANGUAGE: java
CODE:
public interface DetailService {
    Item getItem(long sku, String username);
}

----------------------------------------

TITLE: Configuring Method Arguments with dubbo:argument in Dubbo XML
DESCRIPTION: This snippet demonstrates how to use the dubbo:argument element within a dubbo:method configuration to describe method parameter characteristics. It shows setting a callback parameter for a method named 'findXxx'.

LANGUAGE: XML
CODE:
<dubbo:method name="findXxx" timeout="3000" retries="2">
    <dubbo:argument index="0" callback="true" />
</dubbo:method>

----------------------------------------

TITLE: ExtensionLoader getExtension Method in Java
DESCRIPTION: Retrieves or creates an extension instance based on the given name. It uses caching and synchronization for thread-safety.

LANGUAGE: Java
CODE:
public T getExtension(String name) {
        Holder<Object> holder = cachedInstances.get(name);
        if (holder == null) {
            cachedInstances.putIfAbsent(name, new Holder<Object>());
            holder = cachedInstances.get(name);
        }
        Object instance = holder.get();
        if (instance == null) {
            synchronized (holder) {
                instance = holder.get();
                if (instance == null) {
                    instance = createExtension(name);
                    holder.set(instance);
                }
            }
        }
        return (T) instance;
}

----------------------------------------

TITLE: Starting Dubbo Provider
DESCRIPTION: Command to start the Dubbo provider service.

LANGUAGE: shell
CODE:
java -jar ./dubbo-samples-dubbo-provider/target/dubbo-samples-dubbo-provider-1.0-SNAPSHOT.jar

----------------------------------------

TITLE: Configuring Load Balancing at Service Provider Level in Dubbo (XML)
DESCRIPTION: This snippet shows how to configure the load balancing strategy for a service provider at the service level using XML configuration in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:service interface="..." loadbalance="roundrobin" />

----------------------------------------

TITLE: Implementing Dubbo Server in Rust
DESCRIPTION: Server-side implementation of the Greeter service using Dubbo Rust, including server initialization and request handling.

LANGUAGE: rust
CODE:
#[tokio::main]
async fn main() {
    register_server(GreeterServerImpl {
        name: "greeter".to_string(),
    });

    // Dubbo::new().start().await;
    Dubbo::new()
        .with_config({
            let r = RootConfig::new();
            match r.load() {
                Ok(config) => config,
                Err(_err) => panic!("err: {:?}", _err), // response was dropped
            }
        })
        .start()
        .await;
}

struct GreeterServerImpl {
    name: String,
}

impl Greeter for GreeterServerImpl {
    async fn greet(
        &self,
        request: Request<GreeterRequest>,
    ) -> Result<Response<GreeterReply>, dubbo::status::Status> {
        println!("GreeterServer::greet {:?}", request.metadata);

        Ok(Response::new(GreeterReply {
            message: "hello, dubbo-rust".to_string(),
        }))
    }
}

----------------------------------------

TITLE: Kubernetes Service and Deployment Configuration
DESCRIPTION: YAML configurations for Dubbo provider and consumer services and deployments

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: dubbo-samples-apiserver-provider
  namespace: dubbo-demo
spec:
  clusterIP: None
  selector:
    app: dubbo-samples-apiserver-provider
  ports:
    - protocol: TCP
      port: 20880
      targetPort: 20880
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dubbo-samples-apiserver-provider
  namespace: dubbo-demo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dubbo-samples-apiserver-provider
  template:
    metadata:
      labels:
        app: dubbo-samples-apiserver-provider
    spec:
      serviceAccountName: dubbo-sa
      containers:
        - name: server
          image: apache/dubbo-deemo:dubbo-samples-apiserver-provider_0.0.1
          ports:
            - containerPort: 20880
          livenessProbe:
            httpGet:
              path: /live
              port: 22222
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 22222
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /startup
              port: 22222
            failureThreshold: 30
            periodSeconds: 10

----------------------------------------

TITLE: Implementing Timeout Handling in AllChannelHandler2 for Dubbo Provider
DESCRIPTION: This snippet shows the core logic for handling timeouts in the AllChannelHandler2 class. It sets up a timer to cancel the execution if it exceeds the specified timeout.

LANGUAGE: java
CODE:
public class AllChannelHandler2 extends AllChannelHandler {

    public static final Timer TIME_OUT_TIMER = new HashedWheelTimer(
            new NamedThreadFactory("dubbo-server-future-timeout", true),
            30,
            TimeUnit.MILLISECONDS);

    public AllChannelHandler2(ChannelHandler handler, URL url) {
        super(handler, url);
    }


    @Override
    public void received(Channel channel, Object message) throws RemotingException {
        ExecutorService executor = getPreferredExecutorService(message);
        try {
            Future<?> future = executor.submit(new ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));
            long timeout = this.url.getParameter("timeout", 1000) + 90;
            TIME_OUT_TIMER.newTimeout(t -> {
                if (!future.isDone() && (!future.isCancelled())) {
                    try {
                        future.cancel(true);
                    } catch (Throwable ex) {
                        //ignore
                    }
                }
            }, timeout, TimeUnit.MILLISECONDS);

        } catch (Throwable t) {
            if (message instanceof Request && t instanceof RejectedExecutionException) {
                sendFeedback(channel, (Request) message, t);
                return;
            }
            throw new ExecutionException(message, channel, getClass() + " error when process received event .", t);
        }
    }

}

----------------------------------------

TITLE: Configuring Dubbo Consumer POM in XML
DESCRIPTION: XML configuration for the Dubbo consumer's Maven POM file. Defines project structure, dependencies, and build settings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>demo-consumer</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>demo-consumer</name>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<repositories>
		<repository>
			<id>sonatype-nexus-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba.boot</groupId>
			<artifactId>dubbo-spring-boot-starter</artifactId>
			<version>0.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.example</groupId>
			<artifactId>demo-api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<classifier>exec</classifier>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

----------------------------------------

TITLE: Kubernetes ServiceAccount Setup
DESCRIPTION: Commands to create namespace and setup ServiceAccount for Dubbo deployments

LANGUAGE: shell
CODE:
kubectl apply -f https://raw.githubusercontent.com/apache/dubbo-samples/master/dubbo-samples-kubernetes/dubbo-samples-apiserver-provider/src/main/resources/k8s/ServiceAccount.yml

kubens dubbo-demo

----------------------------------------

TITLE: Defining a Dubbo SPI Interface
DESCRIPTION: Example of defining a Dubbo SPI interface using the @SPI annotation

LANGUAGE: java
CODE:
@SPI(value = "dubbo", scope = ExtensionScope.FRAMEWORK)
public interface Protocol {
    // ...
}

----------------------------------------

TITLE: Testing Dubbo Service
DESCRIPTION: cURL command to test the deployed Dubbo service through the consumer endpoint.

LANGUAGE: bash
CODE:
curl http://localhost:8080/sayHello/test

----------------------------------------

TITLE: Enabling Nacos Configuration Center in XML
DESCRIPTION: XML configuration to enable Nacos as the configuration center for Dubbo.

LANGUAGE: xml
CODE:
<dubbo:config-center address="nacos://127.0.0.1:8848"/>

----------------------------------------

TITLE: Defining Dubbo Service Interface
DESCRIPTION: Defines the HelloService interface that declares the sayHello method which will be implemented by the service provider.

LANGUAGE: java
CODE:
package org.apache.skywalking.demo.interfaces;

public interface HelloService {
	String sayHello(String name);
}

----------------------------------------

TITLE: Istio Routing Commands
DESCRIPTION: Command-line instructions for applying and managing Istio routing rules.

LANGUAGE: bash
CODE:
kubectl apply -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@
kubectl get virtualservices -o yaml
kubectl get destinationrules -o yaml
kubectl apply -f @samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml@
kubectl delete -f @samples/bookinfo/networking/virtual-service-all-v1.yaml@

----------------------------------------

TITLE: Setting Default Protocol in Dubbo Provider
DESCRIPTION: XML configuration for setting Hessian as the default protocol for all providers in Dubbo.

LANGUAGE: xml
CODE:
<dubbo:provider protocol="hessian" />

----------------------------------------

TITLE: Configuring Dubbo Consumer
DESCRIPTION: Consumer configuration properties including Zookeeper registry settings and timeout configuration.

LANGUAGE: properties
CODE:
dubbo.application.name=demo-consumer
dubbo.registry.address=zookeeper://$DOCKER_HOST:2181
dubbo.consumer.timeout=3000

----------------------------------------

TITLE: Defining REST-style Dubbo Interface with Spring Annotations
DESCRIPTION: Java interface definition showing how to add REST-style HTTP endpoints to a Dubbo service using Spring Web annotations.

LANGUAGE: java
CODE:
@RestController
@RequestMapping("/triple")
public interface DemoService {
    @GetMapping(value = "/demo")
    String sayHello();
}

----------------------------------------

TITLE: Configuring Connection and Session Timeouts for Zookeeper
DESCRIPTION: Demonstrates how to set connection and session timeout values for a Zookeeper registry in a YAML configuration file.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: zookeeper://localhost:2181
   timeout: 30 * 1000 # Connection timeout in milliseconds, default 30s
   session: 60 * 1000 # Session timeout in milliseconds, default 60s

----------------------------------------

TITLE: Configuring Weight-Based Routing and Destination Rules in Dubbo
DESCRIPTION: This YAML configuration defines a VirtualService and a DestinationRule for implementing weight-based routing in Dubbo. The VirtualService splits traffic between two versions of a service (v1 and v2) with 60% and 40% weights respectively. The DestinationRule defines the subsets for these versions.

LANGUAGE: yaml
CODE:
apiVersion: service.dubbo.apache.org/v1alpha1
kind: VirtualService
metadata:
  name: reviews-route
spec:
  hosts:
  - reviews.prod.svc.cluster.local
  dubbo:
    - name: weightRoute
      routedetail:
       - name: weght
         route:
          - destination:
             host: reviews.prod.svc.cluster.local
             subset: v1
             weight: 60

          - destination:
             host: reviews.prod.svc.cluster.local
             subset: v2
             weight: 40


---
apiVersion: service.dubbo.apache.org/v1alpha1
kind: DestinationRule
metadata:
  name: reviews-route
spec:
  host: reviews.prod.svc.cluster.local
  subsets:
    - name: v1
      labels:
        version: v1
    - name: v2
      labels:
        version: v2

----------------------------------------

TITLE: Displaying Defined Routes in Istio
DESCRIPTION: This command displays the defined routes in YAML format, showing the virtual services configuration for routing traffic to v1 of each microservice.

LANGUAGE: bash
CODE:
$ kubectl get virtualservices -o yaml

----------------------------------------

TITLE: Configuring Custom Filters and Interceptors
DESCRIPTION: Demonstrates how to add custom filters and interceptors to Dubbo REST services.

LANGUAGE: XML
CODE:
<dubbo:protocol name="rest" port="8888" extension="xxx.TraceInterceptor, xxx.TraceFilter"/>

----------------------------------------

TITLE: Setting Timeout for DubboService in Java
DESCRIPTION: Configures a 5-second timeout for DemoService calls on the provider side using the @DubboService annotation.

LANGUAGE: java
CODE:
@DubboService(timeout=5000)
public class DemoServiceImpl implements DemoService{}

----------------------------------------

TITLE: FailbackCluster Base Implementation
DESCRIPTION: Base implementation class for failback clustering strategy that joins a Directory into a cluster

LANGUAGE: Java
CODE:
public class FailbackCluster implements Cluster {
    public final static String NAME = "failback";

    @Override
    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
        return new FailbackClusterInvoker<T>(directory);
    }
}

----------------------------------------

TITLE: Limiting Specific Method Client Concurrency in Dubbo XML Configuration
DESCRIPTION: Limits the sayHello method of com.foo.BarService to no more than 10 concurrent executions per client. This can be configured on either the service or reference side.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService">
    <dubbo:method name="sayHello" actives="10" />
</dubbo:service>

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService">
    <dubbo:method name="sayHello" actives="10" />
</dubbo:service>

----------------------------------------

TITLE: FailoverCluster Base Implementation
DESCRIPTION: Base implementation class for failover clustering strategy that joins a Directory into a cluster

LANGUAGE: Java
CODE:
public class FailoverCluster implements Cluster {
    public final static String NAME = "failover";

    @Override
    public <T> Invoker<T> join(Directory<T> directory) throws RpcException {
        return new FailoverClusterInvoker<T>(directory);
    }
}

----------------------------------------

TITLE: Limiting Client Concurrency in Dubbo XML Configuration
DESCRIPTION: Limits each method of com.foo.BarService to no more than 10 concurrent executions per client. This can be configured on either the service or reference side.

LANGUAGE: xml
CODE:
<dubbo:service interface="com.foo.BarService" actives="10" />

LANGUAGE: xml
CODE:
<dubbo:reference interface="com.foo.BarService" actives="10" />

----------------------------------------

TITLE: Module Start Process in DefaultModuleDeployer
DESCRIPTION: Shows the module startup lifecycle method that handles service export and reference

LANGUAGE: java
CODE:
 @Override
    public synchronized Future start() throws IllegalStateException {
       ...

        try {
           ...
            onModuleStarting();

            // initialize
            applicationDeployer.initialize();
            initialize();

            // export services
            exportServices();

            // prepare application instance
            // exclude internal module to avoid wait itself
            if (moduleModel != moduleModel.getApplicationModel().getInternalModule()) {
                applicationDeployer.prepareInternalModule();
            }

            // refer services
            referServices();

            // if no async export/refer services, just set started
            if (asyncExportingFutures.isEmpty() && asyncReferringFutures.isEmpty()) {
                onModuleStarted();
            } else {
       ....
        return startFuture;
    }

----------------------------------------

TITLE: Configuring Etcd Registry in Dubbo
DESCRIPTION: This snippet shows how to enable etcd as the registry by modifying the registry configuration in the resources/application.properties file.

LANGUAGE: properties
CODE:
dubbo.registry.address=etcd://host:port

----------------------------------------

TITLE: Setting Call-Specific Timeout in Dubbo-go
DESCRIPTION: This snippet illustrates how to set a timeout for a specific method call. It uses the client.WithCallRequestTimeout() method when making the service call.

LANGUAGE: go
CODE:
resp, err := svc.GreetTimeout(context.Background(), &greet.GreetRequest{Name: "hello world"}, client.WithCallRequestTimeout(10 * time.Second))

----------------------------------------

TITLE: Updating Dubbo Spring Boot Starter in Maven
DESCRIPTION: Maven configuration to update the Dubbo Spring Boot starter dependency to version 3.3.0

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.dubbo</groupId>
    <artifactId>dubbo-spring-boot-starter</artifactId>
    <version>3.3.0</version>
</dependency>

----------------------------------------

TITLE: Defining Protocol Interface in Go for Dubbogo Framework
DESCRIPTION: This snippet defines the Protocol interface for the Dubbogo framework. It includes three methods: Export for exposing services, Refer for referencing remote services, and Destroy for cleaning up resources.

LANGUAGE: go
CODE:
type Protocol interface {
	// Export service for remote invocation
	Export(invoker Invoker) Exporter
	// Refer a remote service
	Refer(url *common.URL) Invoker
	// Destroy will destroy all invoker and exporter, so it only is called once.
	Destroy()
}

----------------------------------------

TITLE: Registry-Specific Interface-Level Configuration in YAML
DESCRIPTION: YAML configuration to set interface-level service discovery for a specific registry in Dubbo 3.

LANGUAGE: yaml
CODE:
dubbo:
 registry:
   address: nacos://localhost:8848
   register-mode: interface #indicates continuing to use the old version service discovery model, optional values are interface, instance, all

----------------------------------------

TITLE: Starting Seata Server with Docker Compose
DESCRIPTION: This snippet demonstrates how to start the Seata server using Docker Compose. It involves changing to the dockercompose directory and running the docker-compose command with the specified YAML file.

LANGUAGE: shell
CODE:
cd ../dockercompose
docker-compose -f docker-compose.yml up -d seata-server

----------------------------------------

TITLE: Configuring Interface-Level Service Discovery in YAML
DESCRIPTION: YAML configuration to continue using interface-level service discovery in Dubbo 3. Sets the register-mode to interface at the application level.

LANGUAGE: yaml
CODE:
dubbo:
 application:
   name: xxx
   register-mode: interface #indicates continuing to use the old version service discovery model, optional values are interface, instance, all

----------------------------------------

TITLE: No code snippets found
DESCRIPTION: This document contains only descriptive text about Dubbo SPI extensions without actual code examples



----------------------------------------

TITLE: Implementing Custom Status Checker in Java
DESCRIPTION: Example of implementing a custom StatusChecker interface in Java for Dubbo.

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.common.status.StatusChecker;
 
public class XxxStatusChecker implements StatusChecker {
    public Status check() {
        // ...
    }
}

----------------------------------------

TITLE: Configuring Status Checkers in Dubbo XML
DESCRIPTION: XML configuration for specifying status checkers in Dubbo protocol and provider settings.

LANGUAGE: xml
CODE:
<dubbo:protocol status="xxx,yyy" />
<!-- Default value setting. When the <dubbo:protocol> does not have a status attribute configured, this configuration is used -->
<dubbo:provider status="xxx,yyy" />

----------------------------------------

TITLE: Implementing Custom Load Balance in Java
DESCRIPTION: Example implementation of a custom load balance strategy by implementing the LoadBalance interface

LANGUAGE: java
CODE:
package com.xxx;
 
import org.apache.dubbo.rpc.cluster.LoadBalance;
import org.apache.dubbo.rpc.Invoker;
import org.apache.dubbo.rpc.Invocation;
import org.apache.dubbo.rpc.RpcException; 
 
public class XxxLoadBalance implements LoadBalance {
    public <T> Invoker<T> select(List<Invoker<T>> invokers, Invocation invocation) throws RpcException {
        // ...
    }
}

----------------------------------------

TITLE: Implementing Custom ReadinessProbe in Java
DESCRIPTION: Example of implementing a custom ReadinessProbe for Dubbo. The XxxReadinessProbe class implements the ReadinessProbe interface and provides a check() method for readiness detection.

LANGUAGE: java
CODE:
package com.xxx;

public class XxxReadinessProbe implements ReadinessProbe {
    
    public boolean check() {
        // ...
    }
}

----------------------------------------

TITLE: Retrieving Grafana Login Credentials in Kubernetes
DESCRIPTION: This command retrieves the admin username and password for the installed Grafana instance from Kubernetes secrets. It decodes the base64-encoded credentials.

LANGUAGE: bash
CODE:
kubectl get secrets grafana -o jsonpath="{.data.admin-user}" | base64 --decode ; echo && kubectl get secrets grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

----------------------------------------

TITLE: Registering Custom ProxyFactory in Dubbo SPI
DESCRIPTION: Configuration for registering a custom ProxyFactory implementation with Dubbo's SPI mechanism. This properties file maps the extension name to the implementing class.

LANGUAGE: properties
CODE:
xxx=com.xxx.XxxProxyFactory

----------------------------------------

TITLE: Starting Dubbo-go-pixiu Gateway in Shell
DESCRIPTION: This shell command starts the Dubbo-go-pixiu gateway using the specified configuration file. It uses the 'gateway start' command with the --config flag to specify the path to the configuration file.

LANGUAGE: shell
CODE:
./dubbo-go-pixiu gateway start --config {CURRENT_PATH}/samples/http/grpc/pixiu/conf.yaml

----------------------------------------

TITLE: Configuring Cache Extensions in Dubbo XML
DESCRIPTION: XML configuration examples showing how to enable and configure caching at service, method and provider levels.

LANGUAGE: xml
CODE:
<dubbo:service cache="lru" />
<!-- Method-level caching -->
<dubbo:service><dubbo:method cache="lru" /></dubbo:service> 
<!-- Default value setting, used when <dubbo:service> does not configure the cache property -->
<dubbo:provider cache="xxx,yyy" />

----------------------------------------

TITLE: Configuring Proportional Traffic Routing in Dubbo Mesh
DESCRIPTION: YAML configuration example for proportional traffic routing in Dubbo Mesh. It shows how to split traffic between different service versions using VirtualService and DestinationRule.

LANGUAGE: yaml
CODE:
apiVersion: service.dubbo.apache.org/v1alpha1
kind: VirtualService
metadata:
  name: details
spec:
  dubbo:
   - name: detail-service-traffic-split
     match:
      - name:
        services:
         - exact: "org.apache.dubbo.demo.DetailService"
        method:
         name_match:
          exact: "getDetail"
     route:
      - destination:
         subset: details-v1
        weight: 60
      - destination:
         subset: details-v2
        weight: 40
---
apiVersion: service.dubbo.apache.org/v1alpha1
kind: DestinationRule
metadata:
  name: reviews-route
spec:
  subsets:
    - name: details-v1
      labels:
        detail_version: v1 # 'version' is a reserved key in Dubbo, so must not be used.
    - name: details-v2
      labels:
        detail_version: v2 # 'version' is a reserved key in Dubbo, so must not be used.

----------------------------------------

TITLE: Configuring Proportional Traffic Routing in Dubbo Mesh
DESCRIPTION: YAML configuration example for proportional traffic routing in Dubbo Mesh. It shows how to split traffic between different service versions using VirtualService and DestinationRule.

LANGUAGE: yaml
CODE:
apiVersion: service.dubbo.apache.org/v1alpha1
kind: VirtualService
metadata:
  name: details
spec:
  dubbo:
   - name: detail-service-traffic-split
     match:
      - name:
        services:
         - exact: "org.apache.dubbo.demo.DetailService"
        method:
         name_match:
          exact: "getDetail"
     route:
      - destination:
         subset: details-v1
        weight: 60
      - destination:
         subset: details-v2
        weight: 40
---
apiVersion: service.dubbo.apache.org/v1alpha1
kind: DestinationRule
metadata:
  name: reviews-route
spec:
  subsets:
    - name: details-v1
      labels:
        detail_version: v1 # 'version' is a reserved key in Dubbo, so must not be used.
    - name: details-v2
      labels:
        detail_version: v2 # 'version' is a reserved key in Dubbo, so must not be used.

----------------------------------------

TITLE: Configuring Triple Protocol in Dubbo
DESCRIPTION: These snippets show different ways to configure the Triple protocol in Dubbo. Options include using YAML for Spring Boot, properties file, or XML configuration.

LANGUAGE: yaml
CODE:
# application.yml (Spring Boot)
dubbo:
 protocol:
   name: tri

LANGUAGE: properties
CODE:
# dubbo.properties
dubbo.protocol.name=tri

LANGUAGE: xml
CODE:
<dubbo:protocol name="tri" />

----------------------------------------

TITLE: Defining gRPC Service Protocol
DESCRIPTION: Protocol buffer definition for the GreetService that defines the service interface with a simple Greet RPC method.

LANGUAGE: protobuf
CODE:
syntax = "proto3";

package greet;

option go_package = "github.com/apache/dubbo-go-samples/rpc/grpc/proto;greet";

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}

----------------------------------------

TITLE: Configuring Multiple Etcd Servers
DESCRIPTION: Configuration for multiple Etcd servers using protocol attribute and comma-separated addresses.

LANGUAGE: xml
CODE:
<dubbo:registry protocol="etcd" address="10.20.153.10:6379,10.20.153.11:6379,10.20.153.12:6379" />

----------------------------------------

TITLE: Configuring YAML Frontmatter for Dubbo Documentation
DESCRIPTION: YAML frontmatter configuration that defines metadata for the Dubbo documentation landing page. Includes alias redirects, page title, link title, and page type settings.

LANGUAGE: yaml
CODE:
aliases:
    - /en/overview/
description: Dubbo Documentation
linkTitle: Documentation
title: Dubbo Documentation
type: docs

----------------------------------------

TITLE: Basic Redis Registry Configuration
DESCRIPTION: Basic configuration for Redis registry using simple address format.

LANGUAGE: xml
CODE:
<dubbo:registry address="redis://10.20.153.10:6379" />

----------------------------------------

TITLE: Configuring Native Image Maven Plugin for Dubbo 3.1
DESCRIPTION: Maven plugin configuration for building Native Image with Dubbo 3.1, including GraalVM native image settings and various initialization and runtime configurations.

LANGUAGE: XML
CODE:
<plugin>
	<groupId>org.graalvm.nativeimage</groupId>
	<artifactId>native-image-maven-plugin</artifactId>
	<version>21.0.0.2</version>
	<executions>
	    <execution>
	        <goals>
	            <goal>native-image</goal>
	        </goals>
	        <phase>package</phase>
	    </execution>
	</executions>
	<configuration>
	    <skip>false</skip>
	    <imageName>demo-native-provider</imageName>
	    <mainClass>org.apache.dubbo.demo.graalvm.provider.Application</mainClass>
	    <buildArgs>
	        --no-fallback
	        --initialize-at-build-time=org.slf4j.MDC
	        --initialize-at-build-time=org.slf4j.LoggerFactory
	        --initialize-at-build-time=org.slf4j.impl.StaticLoggerBinder
	        --initialize-at-build-time=org.apache.log4j.helpers.Loader
	        --initialize-at-build-time=org.apache.log4j.Logger
	        --initialize-at-build-time=org.apache.log4j.helpers.LogLog
	        --initialize-at-build-time=org.apache.log4j.LogManager
	        --initialize-at-build-time=org.apache.log4j.spi.LoggingEvent
	        --initialize-at-build-time=org.slf4j.impl.Log4jLoggerFactory
	        --initialize-at-build-time=org.slf4j.impl.Log4jLoggerAdapter
	        --initialize-at-build-time=org.eclipse.collections.api.factory.Sets
	        --initialize-at-run-time=io.netty.channel.epoll.Epoll
	        --initialize-at-run-time=io.netty.channel.epoll.Native
	        --initialize-at-run-time=io.netty.channel.epoll.EpollEventLoop
	        --initialize-at-run-time=io.netty.channel.epoll.EpollEventArray
	        --initialize-at-run-time=io.netty.channel.DefaultFileRegion
	        --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventArray
	        --initialize-at-run-time=io.netty.channel.kqueue.KQueueEventLoop
	        --initialize-at-run-time=io.netty.channel.kqueue.Native
	        --initialize-at-run-time=io.netty.channel.unix.Errors
	        --initialize-at-run-time=io.netty.channel.unix.IovArray
	        --initialize-at-run-time=io.netty.channel.unix.Limits
	        --initialize-at-run-time=io.netty.util.internal.logging.Log4JLogger
	        --initialize-at-run-time=io.netty.channel.unix.Socket
	        --initialize-at-run-time=io.netty.channel.ChannelHandlerMask
	        --report-unsupported-elements-at-runtime
	        --allow-incomplete-classpath
	        --enable-url-protocols=http
	        -H:+ReportExceptionStackTraces
	    </buildArgs>
	</configuration>
</plugin>

----------------------------------------

TITLE: Explicitly Associating Services with Registries in Java
DESCRIPTION: This Java code snippet shows how to explicitly associate Dubbo services with specific registries using the @DubboService annotation's registry attribute.

LANGUAGE: java
CODE:
@DubboService(registry = {"beijingRegistry"})
public class DemoServiceImpl implements DemoService {}

@DubboService(registry = {"shanghaiRegistry"})
public class HelloServiceImpl implements HelloService {}

----------------------------------------

TITLE: Configuring YAML Frontmatter for Community Updates Page
DESCRIPTION: YAML frontmatter configuration for a documentation page, setting the title, link title and navigation weight for the community updates section.

LANGUAGE: yaml
CODE:
---
title: "Community Updates"
linkTitle: "Community Updates"
weight: 10
---

----------------------------------------

TITLE: Taking Dubbo Services Offline
DESCRIPTION: Commands for taking Dubbo services offline. Allows taking all services offline or selective services using regex patterns. Useful for maintenance or handling service failures.

LANGUAGE: shell
CODE:
// Take all services offline
dubbo>offline
OK

// Take some services offline based on regex
dubbo>offline com.*
OK

----------------------------------------

TITLE: Logging Configuration
DESCRIPTION: YAML configuration for logging settings including encoding, output paths, and log levels.

LANGUAGE: yaml
CODE:
level: "debug"
development: true
disableCaller: false
disableStacktrace: false
sampling:
encoding: "console"

encoderConfig:
  messageKey: "message"
  levelKey: "level"
  timeKey: "time"
  nameKey: "logger"
  callerKey: "caller"
  stacktraceKey: "stacktrace"
  lineEnding: ""
  levelEncoder: "capital"
  timeEncoder: "iso8601"
  durationEncoder: "seconds"
  callerEncoder: "short"
  nameEncoder: ""

outputPaths:
  - "stderr"
errorOutputPaths:
  - "stderr"
initialFields:

----------------------------------------

TITLE: Generating Stack Trace for Dubbo Server Shutdown Error
DESCRIPTION: This command generates a stack trace log file for a specific process ID to help diagnose server shutdown errors in Dubbo.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: Configuring Proportional Traffic Routing in Dubbo Mesh
DESCRIPTION: Example YAML configuration for routing traffic proportionally between different service versions using VirtualService and DestinationRule. This demonstrates how to set up A/B testing or canary releases in Dubbo Mesh.

LANGUAGE: yaml
CODE:
apiVersion: service.dubbo.apache.org/v1alpha1
kind: VirtualService
metadata:
  name: details
spec:
  dubbo:
   - name: detail-service-traffic-split
     match:
      - name:
        services:
         - exact: "org.apache.dubbo.demo.DetailService"
        method:
         name_match:
          exact: "getDetail"
     route:
      - destination:
         subset: details-v1
        weight: 60
      - destination:
         subset: details-v2
        weight: 40
---
apiVersion: service.dubbo.apache.org/v1alpha1
kind: DestinationRule
metadata:
  name: reviews-route
spec:
  subsets:
    - name: details-v1
      labels:
        detail_version: v1 # 'version' is a reserved key in Dubbo, so must not be used.
    - name: details-v2
      labels:
        detail_version: v2 # 'version' is a reserved key in Dubbo, so must not be used.

----------------------------------------

TITLE: Generating Stack Trace for Client Closing Errors in Java
DESCRIPTION: This command generates a stack trace log file for diagnosing errors that occur when closing or destroying Connect Clients in Dubbo. It uses the jstack utility to capture the stack trace of a specific process ID.

LANGUAGE: bash
CODE:
jstack [PID] > jstack.log

----------------------------------------

TITLE: XML Configuration for Dubbo Service Groups
DESCRIPTION: XML-based configuration for defining service groups in Dubbo

LANGUAGE: xml
CODE:
<dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo"/>
<dubbo:service interface="org.apache.dubbo.example.service.DemoService" group="demo2"/>

----------------------------------------

TITLE: Implementing Custom Filter in Go
DESCRIPTION: Example of implementing a custom filter including initialization, registration, and method implementations for both Invoke and OnResponse handlers.

LANGUAGE: go
CODE:
func init() {
	extension.SetFilter("myCustomFilter", NewMyClientFilter)
}

func NewMyClientFilter() filter.Filter {
	return &MyClientFilter{}
}

type MyClientFilter struct {
}

func (f *MyClientFilter) Invoke(ctx context.Context, invoker protocol.Invoker, invocation protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter Invoke is called, method Name = ", invocation.MethodName())
	return invoker.Invoke(ctx, invocation)
}
func (f *MyClientFilter) OnResponse(ctx context.Context, result protocol.Result, invoker protocol.Invoker, protocol protocol.Invocation) protocol.Result {
	fmt.Println("MyClientFilter OnResponse is called")
	return result
}

----------------------------------------

TITLE: Configuring Zookeeper Registry for Server Using Simple API
DESCRIPTION: Example of setting up a Zookeeper registry for a server using the simplified configuration API with default port settings.

LANGUAGE: go
CODE:
rc := config.NewRootConfigBuilder().
    SetProvider(config.NewProviderConfigBuilder().
        AddService("GreeterProvider", /*...*/).
        SetRegistryIDs("registryKey").  // use defined registryID
        Build()).
    AddRegistry("registryKey", config.NewRegistryConfigWithProtocolDefaultPort("zookeeper")).
    Build()

----------------------------------------

TITLE: Client Context Parameter Setting in Go
DESCRIPTION: Shows how to set additional parameters in the client context using constant.AttachmentKey

LANGUAGE: go
CODE:
	ctx := context.Background()
	ctx = context.WithValue(ctx, constant.AttachmentKey, map[string]interface{}{
        "key1": "user defined value 1",
        "key2": "user defined value 2"
	})

----------------------------------------

TITLE: Configuring Dubbo Service Consumer in XML
DESCRIPTION: XML configuration for Dubbo service consumer with group specifications and wildcards.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo
       http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
    <dubbo:reference id="demoService" interface="org.apache.dubbo.example.service.DemoService" group="demo"/>
    <dubbo:reference id="demoService2" interface="org.apache.dubbo.example.service.DemoService" group="demo2"/>
    <dubbo:reference id="demoService3" interface="org.apache.dubbo.example.service.DemoService" group="*"/>
</beans>

----------------------------------------

TITLE: Implementing React Frontend with Dubbo Client
DESCRIPTION: React component implementation showing how to create a Dubbo client and make RPC calls to the backend service.

LANGUAGE: typescript
CODE:
import { useState } from "react";
import "./App.css";

import { createPromiseClient } from "@apachedubbo/dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-web";

import { ExampleService } from "./util/gen/example_dubbo";

const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
});

const client = createPromiseClient(ExampleService, transport, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });

function App() {
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState<
    {
      fromMe: boolean;
      message: string;
    }[]
  >([]);
  return (
    <>
      <ol>
        {messages.map((msg, index) => (
          <li key={index}>{`${msg.fromMe ? "ME:" : "Dubbo Server:"} ${msg.message}`}</li>
        ))}
      </ol>
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          setInputValue("");
          setMessages((prev) => [
            ...prev,
            {
              fromMe: true,
              message: inputValue,
            },
          ]);
          const response = await client.say({
            sentence: inputValue,
          });
          setMessages((prev) => [
            ...prev,
            {
              fromMe: false,
              message: response.sentence,
            },
          ]);
        }}
      >
        <input value={inputValue} onChange={(e) => setInputValue(e.target.value)} />
        <button type="submit">Send</button>
      </form>
    </>
  );
}

----------------------------------------

TITLE: Removing Istio HPA Configuration
DESCRIPTION: Command to delete the Istio horizontal pod autoscaler (HPA) resources, which is necessary because Dubbo-go requires a single istiod instance for service discovery.

LANGUAGE: bash
CODE:
$ kubectl delete hpa istiod -n istio-system

----------------------------------------

TITLE: HTML Template for Dubbo Documentation Navigation
DESCRIPTION: A structured HTML template that creates a grid of cards containing links to different Dubbo documentation sections. Uses Bootstrap classes for responsive layout and styling.

LANGUAGE: html
CODE:
<div class="td-content list-page">
    <div class="lead"></div><header class="article-meta">
    </header><div class="row">
    <div class="col-sm col-md-6 mb-4 mb-md-0">
        <div class="h-100 card shadow">
            <div class="card-body">
                <h4 class="card-title">
                    <a href='{{< relref "./Metrics" >}}'>Dubbo Metrics</a>
                </h4>
                <p>Monitoring metrics for Dubbo</p>
            </div>
        </div>
    </div>
    <div class="col-sm col-md-6 mb-4 mb-md-0">
        <div class="h-100 card shadow">
            <div class="card-body">
                <h4 class="card-title">
                    <a href='{{< relref "./integrations" >}}'>Dubbo Integrations</a>
                </h4>
                <p>User guide for Dubbo Integrations</p>
            </div>
        </div>
    </div>
    <div class="col-sm col-md-6 mb-4 mb-md-0">
        <div class="h-100 card shadow">
            <div class="card-body">
                <h4 class="card-title">
                    <a href='{{< relref "./proposals" >}}'>Dubbo Proposals</a>
                </h4>
                <p>Dubbo proposals</p>
            </div>
        </div>
    </div>
</div>
<hr>

----------------------------------------

TITLE: Supported Protocol Configuration Table
DESCRIPTION: Table showing supported RPC protocols and their associated serialization methods in Dubbo-go

LANGUAGE: markdown
CODE:
| Protocol        | Protocol Name (for configuration) | Serialization Method           | Default Serialization Method |
| --------------- | ------------------------------- | ------------------------------- | ---------------------------- |
| Triple (Recommended) | tri                          | pb/json/custom                | pb                           |
| Dubbo           | dubbo                           | hessian2                       | hessian2                     |
| jsonRPC         | jsonrpc                        | json                           | json                         |
| REST            | rest                           | json                           | json                         |

----------------------------------------

TITLE: Running Local Development Server
DESCRIPTION: Commands to clear Hugo module cache and start the local development server. Includes a note about GOPROXY configuration if module downloading gets stuck.

LANGUAGE: shell
CODE:
hugo mod clean
hugo server --disableFastRender

----------------------------------------

TITLE: Configuring Telnet Handlers in Dubbo XML
DESCRIPTION: XML configuration for specifying telnet handlers in Dubbo protocol and provider settings. This allows custom telnet commands to be added to the Dubbo server.

LANGUAGE: xml
CODE:
<dubbo:protocol telnet="xxx,yyy" />
<!-- Default value setting, when <dubbo:protocol> does not configure the telnet attribute, use this configuration -->
<dubbo:provider telnet="xxx,yyy" />

----------------------------------------

TITLE: Initiating Dubbo Remote Call
DESCRIPTION: Java main method to start the Dubbo consumer and make a remote call to the provider service.

LANGUAGE: java
CODE:
public class ConsumerBootstrap {
    public static void main(String[] args) throws IOException {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ConsumerConfiguration.class);
        context.start();
        GreetingServiceConsumer greetingServiceConsumer = context.getBean(GreetingServiceConsumer.class);
        String hello = greetingServiceConsumer.doSayHello("zookeeper");
        System.out.println("result: " + hello);
        System.in.read();
    }
}

----------------------------------------

TITLE: Implementing Dubbo Server with Error Handling in Go
DESCRIPTION: Implements the GreetService server in Go, demonstrating how to return errors for invalid requests. It uses the Dubbo Go framework for RPC communication.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"
	"github.com/pkg/errors"

	_ "dubbo.apache.org/dubbo-go/v3/imports"
	"dubbo.apache.org/dubbo-go/v3/protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
	greet "github.com/apache/dubbo-go-samples/helloworld/proto"
	"github.com/dubbogo/gost/log/logger"
)

type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	name := req.Name
	if name != "right name" {
		errInfo := fmt.Sprintf("name is not right: %s", name)
		logger.Error(errInfo)
		return nil, errors.New(errInfo)
	}

	resp := &greet.GreetResponse{Greeting: req.Name}
	return resp, nil
}

func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
			protocol.WithTriple(),
		),
	)
	if err != nil {
		panic(err)
	}

	if err = greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
		panic(err)
	}

	if err = srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Implementing Dubbo Server with Error Handling in Go
DESCRIPTION: Implements the GreetService server in Go, demonstrating how to return errors for invalid requests. It uses the Dubbo Go framework for RPC communication.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"
	"github.com/pkg/errors"

	_ "dubbo.apache.org/dubbo-go/v3/imports"
	"dubbo.apache.org/dubbo-go/v3/protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
	greet "github.com/apache/dubbo-go-samples/helloworld/proto"
	"github.com/dubbogo/gost/log/logger"
)

type GreetTripleServer struct {
}

func (srv *GreetTripleServer) Greet(ctx context.Context, req *greet.GreetRequest) (*greet.GreetResponse, error) {
	name := req.Name
	if name != "right name" {
		errInfo := fmt.Sprintf("name is not right: %s", name)
		logger.Error(errInfo)
		return nil, errors.New(errInfo)
	}

	resp := &greet.GreetResponse{Greeting: req.Name}
	return resp, nil
}

func main() {
	srv, err := server.NewServer(
		server.WithServerProtocol(
			protocol.WithPort(20000),
			protocol.WithTriple(),
		),
	)
	if err != nil {
		panic(err)
	}

	if err = greet.RegisterGreetServiceHandler(srv, &GreetTripleServer{}); err != nil {
		panic(err)
	}

	if err = srv.Serve(); err != nil {
		logger.Error(err)
	}
}

----------------------------------------

TITLE: Configuring Dubbo XML for Nacos Registry
DESCRIPTION: This XML snippet demonstrates how to configure Dubbo to use Nacos as the registry in a Spring XML configuration file by setting the address attribute of the dubbo:registry element.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
 
    <!-- Provider application information for dependency calculation-->
    <dubbo:application name="dubbo-provider-xml-demo"  />
 
    <!-- Using the Nacos registry  -->
    <dubbo:registry address="nacos://10.20.153.10:8848" />
 	...
</beans>

----------------------------------------

TITLE: Adding Protobuf Dependencies in Maven
DESCRIPTION: Required Maven dependencies for using protobuf and protobuf-json serialization with Triple protocol

LANGUAGE: xml
CODE:
<dependencies>
	<dependency>
		<groupId>com.google.protobuf</groupId>
		<artifactId>protobuf-java</artifactId>
		<version>3.19.6</version>
	</dependency>
	<!-- Providing support for protobuf-json formatted requests -->
	<dependency>
		<groupId>com.google.protobuf</groupId>
		<artifactId>protobuf-java-util</artifactId>
		<version>3.19.6</version>
	</dependency>
</dependencies>

----------------------------------------

TITLE: Implementing Asynchronous Service on Provider Side in Java
DESCRIPTION: Shows how to implement an asynchronous Dubbo service on the provider side using CompletableFuture.

LANGUAGE: Java
CODE:
public class AsyncServiceImpl implements AsyncService {
    public CompletableFuture<String> sayHello(String name) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return "async response from provider.";
        });
    }
}

----------------------------------------

TITLE: Simplified Registry Properties Configuration
DESCRIPTION: Properties configuration for enabling URL simplification and specifying extra parameters to include.

LANGUAGE: properties
CODE:
dubbo.registry.simplified=true
dubbo.registry.extra-keys=retries,owner

----------------------------------------

TITLE: Executing Maven Package Command for Native Image
DESCRIPTION: Maven command to clean and package the project while skipping tests for native image compilation

LANGUAGE: bash
CODE:
mvn -U clean package -Dmaven.test.skip=true

----------------------------------------

TITLE: Receiving application/x-www-form-urlencoded request in Java (Method 1)
DESCRIPTION: Java method demonstrating how to receive and process an application/x-www-form-urlencoded request using individual parameters.

LANGUAGE: java
CODE:
public ServerResponse greetUrlForm(String hello,String apache,long id){
    System.out.println("Hello:"+hello);
    System.out.println("Apache:"+apache);
    System.out.println("Id:"+id);
    return new ServerResponse("Server Received url form");
}

----------------------------------------

TITLE: Calling Dubbo Service with dubbo2.js in TypeScript
DESCRIPTION: This TypeScript code demonstrates how to call a Dubbo service using the configured dubbo2.js client.

LANGUAGE: typescript
CODE:
import {demoService} from './dubboConfig'

demoService.sayHello('kirito').then(({res,err})=>{
    console.log(res)
});

----------------------------------------

TITLE: Calling Dubbo Service with dubbo2.js in TypeScript
DESCRIPTION: This TypeScript code demonstrates how to call a Dubbo service using the configured dubbo2.js client.

LANGUAGE: typescript
CODE:
import {demoService} from './dubboConfig'

demoService.sayHello('kirito').then(({res,err})=>{
    console.log(res)
});

----------------------------------------

TITLE: Structuring Maven Project for Dubbo Extension
DESCRIPTION: Directory structure for a Maven project implementing a custom Dubbo StartupProbe extension.

LANGUAGE: plaintext
CODE:
src
 |-main
    |-java
        |-com
            |-xxx
                |-XxxStartupProbe.java (implements StartupProbe interface)
    |-resources
        |-META-INF
            |-dubbo
                |-org.apache.dubbo.qos.probe.StartupProbe (plain text file, content: xxx=com.xxx.XxxStartupProbe)

----------------------------------------

TITLE: Defining StorageService Interface in Java
DESCRIPTION: This code defines the StorageService interface with a method to deduct storage quantity.

LANGUAGE: java
CODE:
public interface StorageService {

    /**
     * Deduct storage quantity
     */
    void deduct(String commodityCode, int count);
}