TITLE: Basic Prometheus Configuration
DESCRIPTION: Basic YAML configuration for Prometheus showing global scrape interval and scrape config for Prometheus's own metrics endpoint.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets: ["localhost:9090"]

----------------------------------------

TITLE: Complete Go HTTP Server with Prometheus Instrumentation
DESCRIPTION: This snippet provides the complete Go code for the HTTP server with Prometheus instrumentation, including necessary imports and the full implementation.

LANGUAGE: go
CODE:
package main

import (
   "fmt"
   "net/http"

   "github.com/prometheus/client_golang/prometheus"
   "github.com/prometheus/client_golang/prometheus/promhttp"
)

var pingCounter = prometheus.NewCounter(
   prometheus.CounterOpts{
       Name: "ping_request_count",
       Help: "No of request handled by Ping handler",
   },
)

func ping(w http.ResponseWriter, req *http.Request) {
   pingCounter.Inc()
   fmt.Fprintf(w, "pong")
}

func main() {
   prometheus.MustRegister(pingCounter)

   http.HandleFunc("/ping", ping)
   http.Handle("/metrics", promhttp.Handler())
   http.ListenAndServe(":8090", nil)
}

----------------------------------------

TITLE: Basic Prometheus Configuration
DESCRIPTION: Sample YAML configuration file for Prometheus showing global settings, rule files, and scrape configurations for self-monitoring

LANGUAGE: yaml
CODE:
global:
  scrape_interval:     15s
  evaluation_interval: 15s

rule_files:
  # - "first.rules"
  # - "second.rules"

scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets: ['localhost:9090']

----------------------------------------

TITLE: Basic Go Metrics Exposition
DESCRIPTION: Minimal Go application that exposes default Prometheus metrics via HTTP endpoint at localhost:2112/metrics

LANGUAGE: go
CODE:
package main

import (
        "net/http"

        "github.com/prometheus/client_golang/prometheus/promhttp"
)

func main() {
        http.Handle("/metrics", promhttp.Handler())
        http.ListenAndServe(":2112", nil)
}

----------------------------------------

TITLE: Custom Metrics Implementation in Go
DESCRIPTION: Extended Go application that implements a custom counter metric (myapp_processed_ops_total) and increments it every 2 seconds

LANGUAGE: go
CODE:
package main

import (
        "net/http"
        "time"

        "github.com/prometheus/client_golang/prometheus"
        "github.com/prometheus/client_golang/prometheus/promauto"
        "github.com/prometheus/client_golang/prometheus/promhttp"
)

func recordMetrics() {
        go func() {
                for {
                        opsProcessed.Inc()
                        time.Sleep(2 * time.Second)
                }
        }()
}

var (
        opsProcessed = promauto.NewCounter(prometheus.CounterOpts{
                Name: "myapp_processed_ops_total",
                Help: "The total number of processed events",
        })
)

func main() {
        recordMetrics()

        http.Handle("/metrics", promhttp.Handler())
        http.ListenAndServe(":2112", nil)
}

----------------------------------------

TITLE: Implementing Counter Metric in Java
DESCRIPTION: Example showing how to create and register a Counter metric using the Java client library's builder pattern. The counter is registered with the default CollectorRegistry and includes a name and help text.

LANGUAGE: java
CODE:
class YourClass {
  static final Counter requests = Counter.build()
      .name("requests_total")
      .help("Requests.").register();
}

----------------------------------------

TITLE: Creating Prometheus Counter in Go
DESCRIPTION: This snippet shows how to create a Prometheus counter metric to track the number of requests to the ping endpoint.

LANGUAGE: go
CODE:
var pingCounter = prometheus.NewCounter(
   prometheus.CounterOpts{
       Name: "ping_request_count",
       Help: "No of request handled by Ping handler",
   },
)

----------------------------------------

TITLE: Extended Prometheus Configuration with Node Exporter
DESCRIPTION: Extended YAML configuration that includes both Prometheus self-monitoring and node exporter targets for machine metrics collection.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets: ["localhost:9090"]
  - job_name: node_exporter
    static_configs:
      - targets: ["localhost:9100"]

----------------------------------------

TITLE: Generating Bcrypt Hash for Password in Python
DESCRIPTION: This Python script prompts for a password and generates a bcrypt hash. It requires the bcrypt library to be installed.

LANGUAGE: python
CODE:
import getpass
import bcrypt

password = getpass.getpass("password: ")
hashed_password = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt())
print(hashed_password.decode())

----------------------------------------

TITLE: Configuring TLS in Prometheus web-config.yml
DESCRIPTION: YAML configuration for enabling TLS in Prometheus, specifying the paths to the certificate and key files.

LANGUAGE: yaml
CODE:
tls_server_config:
  cert_file: /home/prometheus/certs/example.com/example.com.crt
  key_file: /home/prometheus/certs/example.com/example.com.key

----------------------------------------

TITLE: Configuring OpenTelemetry Environment Variables
DESCRIPTION: Essential environment variable configurations for sending OpenTelemetry metrics to Prometheus, including protocol settings and endpoints

LANGUAGE: shell
CODE:
export OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
export OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:9090/api/v1/otlp/v1/metrics

LANGUAGE: shell
CODE:
export OTEL_TRACES_EXPORTER=none
export OTEL_LOGS_EXPORTER=none

LANGUAGE: shell
CODE:
export OTEL_METRIC_EXPORT_INTERVAL=15000

LANGUAGE: shell
CODE:
export OTEL_SERVICE_NAME="my-example-service"
export OTEL_RESOURCE_ATTRIBUTES="service.instance.id=$(uuidgen)"

----------------------------------------

TITLE: Configuring Prometheus with Alert Rules
DESCRIPTION: Prometheus configuration that includes alert manager settings, scrape configs, and rule file references. Sets evaluation intervals and defines monitoring targets.

LANGUAGE: yaml
CODE:
global:
 scrape_interval: 15s
 evaluation_interval: 10s
rule_files:
  - rules.yml
alerting:
  alertmanagers:
  - static_configs:
    - targets:
       - localhost:9093
scrape_configs:
 - job_name: prometheus
   static_configs:
       - targets: ["localhost:9090"]
 - job_name: simple_server
   static_configs:
       - targets: ["localhost:8090"]

----------------------------------------

TITLE: Prometheus Configuration for Node Exporter
DESCRIPTION: YAML configuration to set up Prometheus scraping from Node Exporter. Defines global scrape interval and target endpoint.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 15s

scrape_configs:
- job_name: node
  static_configs:
  - targets: ['localhost:9100']

----------------------------------------

TITLE: Remote Write Protocol Message Definitions in Protocol Buffers
DESCRIPTION: Defines the core protocol messages including WriteRequest, TimeSeries, Label and Sample structures. Specifies required fields and data types for remote write communication.

LANGUAGE: protobuf
CODE:
func Send(WriteRequest)

message WriteRequest {
  repeated TimeSeries timeseries = 1;
  // Cortex uses this field to determine the source of the write request.
  // We reserve it to avoid any compatibility issues.
  reserved  2;

  // Prometheus uses this field to send metadata, but this is
  // omitted from v1 of the spec as it is experimental.
  reserved  3;
}

message TimeSeries {
  repeated Label labels   = 1;
  repeated Sample samples = 2;
}

message Label {
  string name  = 1;
  string value = 2;
}

message Sample {
  double value    = 1;
  int64 timestamp = 2;
}

----------------------------------------

TITLE: Calculating Average Request Duration with PromQL
DESCRIPTION: PromQL expression to calculate the average request duration over a 5-minute window using histogram or summary metrics.

LANGUAGE: promql
CODE:
rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])

----------------------------------------

TITLE: Average Query Rate Calculation in Prometheus
DESCRIPTION: Shows how to calculate average query rates across instances and paths using the avg() function.

LANGUAGE: yaml
CODE:
- record: job:request_latency_seconds_count:avg_rate5m
  expr: avg without (instance, path)(instance:request_latency_seconds_count:rate5m{job="myjob"})

----------------------------------------

TITLE: Querying Histogram Metrics in Prometheus
DESCRIPTION: Examples of querying histogram metrics for HTTP request duration, including basic bucket query and quantile calculations with and without rate.

LANGUAGE: promql
CODE:
prometheus_http_request_duration_seconds_bucket{handler="/graph"}

LANGUAGE: promql
CODE:
histogram_quantile(0.9,prometheus_http_request_duration_seconds_bucket{handler="/graph"})

LANGUAGE: promql
CODE:
histogram_quantile(0.9, rate(prometheus_http_request_duration_seconds_bucket{handler="/graph"}[5m]))

----------------------------------------

TITLE: Request Failure Ratio Calculation in Prometheus
DESCRIPTION: Shows how to calculate and aggregate request failure ratios from instance level up to job level, properly handling ratio calculations.

LANGUAGE: yaml
CODE:
- record: instance_path:request_failures:rate5m
  expr: rate(request_failures_total{job="myjob"}[5m])

- record: instance_path:request_failures_per_requests:ratio_rate5m
  expr: |2
      instance_path:request_failures:rate5m{job="myjob"}
    /
      instance_path:requests:rate5m{job="myjob"}

- record: path:request_failures_per_requests:ratio_rate5m
  expr: |2
      sum without (instance)(instance_path:request_failures:rate5m{job="myjob"})
    /
      sum without (instance)(instance_path:requests:rate5m{job="myjob"})

- record: job:request_failures_per_requests:ratio_rate5m
  expr: |2
      sum without (instance, path)(instance_path:request_failures:rate5m{job="myjob"})
    /
      sum without (instance, path)(instance_path:requests:rate5m{job="myjob"})

----------------------------------------

TITLE: Configuring Prometheus for File-based Service Discovery in YAML
DESCRIPTION: YAML configuration for Prometheus to use file-based service discovery, specifying a job named 'node' that retrieves target information from a 'targets.json' file.

LANGUAGE: yaml
CODE:
scrape_configs:
- job_name: 'node'
  file_sd_configs:
  - files:
    - 'targets.json'

----------------------------------------

TITLE: Creating Prometheus Web Configuration File in YAML
DESCRIPTION: This YAML configuration file defines basic authentication users for Prometheus. It includes a username 'admin' with a bcrypt-hashed password.

LANGUAGE: yaml
CODE:
basic_auth_users:
    admin: $2b$12$hNf2lSsxfm0.i4a.1kVpSOVyBCfIB51VRjgBUyv6kdnyTlgWj81Ay

----------------------------------------

TITLE: Prometheus Configuration for Container Monitoring
DESCRIPTION: YAML configuration for Prometheus to discover and monitor containers in Docker Swarm using the tasks role with relabeling rules for filtering and labeling.

LANGUAGE: yaml
CODE:
scrape_configs:
  # Make Prometheus scrape itself for metrics.
  - job_name: 'prometheus'
    static_configs:
    - targets: ['localhost:9090']

  # Create a job for Docker Swarm containers.
  - job_name: 'dockerswarm'
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: tasks
    relabel_configs:
      # Only keep containers that should be running.
      - source_labels: [__meta_dockerswarm_task_desired_state]
        regex: running
        action: keep
      # Only keep containers that have a `prometheus-job` label.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        regex: .+
        action: keep
      # Use the prometheus-job Swarm label as Prometheus job label.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        target_label: job

----------------------------------------

TITLE: Enabling OTLP Receiver in Prometheus
DESCRIPTION: Command to start Prometheus with OTLP receiver enabled for accepting OpenTelemetry metrics

LANGUAGE: shell
CODE:
$ prometheus --web.enable-otlp-receiver

----------------------------------------

TITLE: Configuring Prometheus YAML for cAdvisor Scraping
DESCRIPTION: Basic Prometheus configuration that sets up scraping from cAdvisor endpoints at 5-second intervals.

LANGUAGE: yaml
CODE:
scrape_configs:
- job_name: cadvisor
  scrape_interval: 5s
  static_configs:
  - targets:
    - cadvisor:8080

----------------------------------------

TITLE: Enabling UTF-8 Validation in Go Prometheus Client
DESCRIPTION: This snippet shows how to enable UTF-8 validation for metric names in the Prometheus client_golang library. It sets the NameValidationScheme to UTF8Validation in the init function.

LANGUAGE: golang
CODE:
import "github.com/prometheus/common/model"

func init() {
	model.NameValidationScheme = model.UTF8Validation
}

----------------------------------------

TITLE: Example Prometheus Metrics Exposition
DESCRIPTION: Comprehensive example showing various metric types including counters, histograms, summaries, and examples of character escaping in the Prometheus text format.

LANGUAGE: text
CODE:
# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{method="post",code="200"} 1027 1395066363000
http_requests_total{method="post",code="400"}    3 1395066363000

# Escaping in label values:
msdos_file_access_time_seconds{path="C:\\DIR\\FILE.TXT",error="Cannot find file:\n\"FILE.TXT\""} 1.458255915e9

# Minimalistic line:
metric_without_timestamp_and_labels 12.47

# A weird metric from before the epoch:
something_weird{problem="division by zero"} +Inf -3982045

# A histogram, which has a pretty complex representation in the text format:
# HELP http_request_duration_seconds A histogram of the request duration.
# TYPE http_request_duration_seconds histogram
http_request_duration_seconds_bucket{le="0.05"} 24054
http_request_duration_seconds_bucket{le="0.1"} 33444
http_request_duration_seconds_bucket{le="0.2"} 100392
http_request_duration_seconds_bucket{le="0.5"} 129389
http_request_duration_seconds_bucket{le="1"} 133988
http_request_duration_seconds_bucket{le="+Inf"} 144320
http_request_duration_seconds_sum 53423
http_request_duration_seconds_count 144320

# Finally a summary, which has a complex representation, too:
# HELP rpc_duration_seconds A summary of the RPC duration in seconds.
# TYPE rpc_duration_seconds summary
rpc_duration_seconds{quantile="0.01"} 3102
rpc_duration_seconds{quantile="0.05"} 3272
rpc_duration_seconds{quantile="0.5"} 4773
rpc_duration_seconds{quantile="0.9"} 9001
rpc_duration_seconds{quantile="0.99"} 76656
rpc_duration_seconds_sum 1.7560473e+07
rpc_duration_seconds_count 2693

----------------------------------------

TITLE: Querying Native Histogram Quantiles in PromQL
DESCRIPTION: Example of how to query the 90th percentile of a native histogram using the histogram_quantile function in PromQL, compared to the equivalent query for classic histograms.

LANGUAGE: PromQL
CODE:
# Classic histogram query
histogram_quantile(0.9, sum by (job, le) (rate(http_request_duration_seconds_bucket[10m])))

# Native histogram query
histogram_quantile(0.9, sum by (job) (rate(http_request_duration_seconds[10m])))

----------------------------------------

TITLE: Metric Name Format Regex
DESCRIPTION: Regular expression pattern defining valid metric names in Prometheus. Names must start with letters, underscore, or colon, followed by letters, numbers, underscores, or colons.

LANGUAGE: regex
CODE:
[a-zA-Z_:][a-zA-Z0-9_:]*

----------------------------------------

TITLE: Label Name Format Regex
DESCRIPTION: Regular expression pattern defining valid label names in Prometheus. Names must start with letters or underscore, followed by letters, numbers, or underscores.

LANGUAGE: regex
CODE:
[a-zA-Z_][a-zA-Z0-9_]*

----------------------------------------

TITLE: Prometheus Query Examples
DESCRIPTION: Example PromQL queries demonstrating how to query metrics and use rate functions

LANGUAGE: promql
CODE:
promhttp_metric_handler_requests_total

LANGUAGE: promql
CODE:
promhttp_metric_handler_requests_total{code="200"}

LANGUAGE: promql
CODE:
count(promhttp_metric_handler_requests_total)

LANGUAGE: promql
CODE:
rate(promhttp_metric_handler_requests_total{code="200"}[1m])

----------------------------------------

TITLE: Configuring Query Logging in Prometheus YAML
DESCRIPTION: Example Prometheus configuration that enables query logging by specifying the query_log_file parameter in the global section.

LANGUAGE: yaml
CODE:
global:
  scrape_interval:     15s
  evaluation_interval: 15s
  query_log_file: /prometheus/query.log
scrape_configs:
- job_name: 'prometheus'
  static_configs:
  - targets: ['localhost:9090']

----------------------------------------

TITLE: Prometheus configuration with blackbox HTTP probing
DESCRIPTION: Prometheus configuration to scrape metrics from targets using the blackbox exporter.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 5s

scrape_configs:
- job_name: blackbox # To get metrics about the exporter itself
  metrics_path: /metrics
  static_configs:
    - targets:
      - localhost:9115

- job_name: blackbox-http # To get metrics about the exporter's targets
  metrics_path: /probe
  params:
    module: [http_2xx]
  static_configs:
    - targets:
      - http://prometheus.io    # Target to probe with http
      - https://prometheus.io   # Target to probe with https
      - http://example.com:8080 # Target to probe with http on port 8080
  relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - target_label: __address__
      replacement: localhost:9115  # The blackbox exporter's real hostname:port

----------------------------------------

TITLE: Querying Counter Metrics in Prometheus
DESCRIPTION: Example of querying a counter metric that tracks Go garbage collection duration counts. Includes both raw counter query and rate calculation over time.

LANGUAGE: promql
CODE:
go_gc_duration_seconds_count

LANGUAGE: promql
CODE:
rate(go_gc_duration_seconds_count[5m])

----------------------------------------

TITLE: Testing Prometheus Basic Auth with cURL
DESCRIPTION: These cURL commands demonstrate how to test the Prometheus basic authentication setup, including an unauthenticated request and an authenticated request to the metrics endpoint.

LANGUAGE: bash
CODE:
curl --head http://localhost:9090/graph

LANGUAGE: bash
CODE:
curl -u admin http://localhost:9090/metrics
Enter host password for user 'admin':

----------------------------------------

TITLE: Computing Request Success Ratio with PromQL
DESCRIPTION: Expression to calculate the ratio of requests served within 300ms using histogram buckets, grouped by job.

LANGUAGE: promql
CODE:
sum(rate(http_request_duration_seconds_bucket{le="0.3"}[5m])) by (job) / sum(rate(http_request_duration_seconds_count[5m])) by (job)

----------------------------------------

TITLE: Basic Slack Alert Configuration in YAML
DESCRIPTION: Simple Alertmanager configuration that routes all alerts to a Slack channel using webhook integration. Includes global webhook URL setup and basic routing configuration.

LANGUAGE: yaml
CODE:
global:
  slack_api_url: '<slack_webhook_url>'

route:
  receiver: 'slack-notifications'
  # All alerts in a notification have the same value for these labels.
  group_by: [alertname, datacenter, app]

receivers:
- name: 'slack-notifications'
  slack_configs:
  - channel: '#alerts'

----------------------------------------

TITLE: Advanced PromQL TopK Query with @ Modifier
DESCRIPTION: Shows how to use the '@' modifier with topk() to plot 1-minute rates for only the top 5 series based on their last hour's rate, ensuring exactly k results in range queries.

LANGUAGE: promql
CODE:
rate(http_requests_total[1m]) # This acts like the actual selector.
  and
topk(5, rate(http_requests_total[1h] @ end())) # This acts like a ranking function which filters the selector.

----------------------------------------

TITLE: Installing Node Exporter via Tarball
DESCRIPTION: Commands to download, extract and run the Node Exporter binary. The exporter will expose metrics on port 9100.

LANGUAGE: bash
CODE:
wget https://github.com/prometheus/node_exporter/releases/download/v<VERSION>/node_exporter-<VERSION>.<OS>-<ARCH>.tar.gz
tar xvfz node_exporter-*.*-amd64.tar.gz
cd node_exporter-*.*-amd64
./node_exporter

----------------------------------------

TITLE: Example OpenMetrics Text Format Exposition
DESCRIPTION: Example showing the structure of a complete OpenMetrics text format exposition, including multiple metric families with different types.

LANGUAGE: text
CODE:
# TYPE acme_http_router_request_seconds summary
# UNIT acme_http_router_request_seconds seconds
# HELP acme_http_router_request_seconds Latency though all of ACME's HTTP request router.
acme_http_router_request_seconds_sum{path="/api/v1",method="GET"} 9036.32
acme_http_router_request_seconds_count{path="/api/v1",method="GET"} 807283.0
acme_http_router_request_seconds_created{path="/api/v1",method="GET"} 1605281325.0
acme_http_router_request_seconds_sum{path="/api/v2",method="POST"} 479.3
acme_http_router_request_seconds_count{path="/api/v2",method="POST"} 34.0
acme_http_router_request_seconds_created{path="/api/v2",method="POST"} 1605281325.0
# TYPE go_goroutines gauge
# HELP go_goroutines Number of goroutines that currently exist.
go_goroutines 69
# TYPE process_cpu_seconds counter
# UNIT process_cpu_seconds seconds
# HELP process_cpu_seconds Total user and system CPU time spent in seconds.
process_cpu_seconds_total 4.20072246e+06
# EOF

----------------------------------------

TITLE: Configuring Out-of-Order Ingestion in Prometheus
DESCRIPTION: YAML configuration for enabling out-of-order sample ingestion with a 30-minute time window

LANGUAGE: shell
CODE:
storage:
  tsdb:
    out_of_order_time_window: 30m

----------------------------------------

TITLE: Generating Self-Signed SSL Certificate using OpenSSL
DESCRIPTION: Command to generate a self-signed certificate and private key for TLS encryption. Creates certificate and key files in the specified directory.

LANGUAGE: bash
CODE:
mkdir -p /home/prometheus/certs/example.com && cd /home/prometheus/certs/certs/example.com
openssl req \
  -x509 \
  -newkey rsa:4096 \
  -nodes \
  -keyout example.com.key \
  -out example.com.crt

----------------------------------------

TITLE: Implementing Basic HTTP Server in Go
DESCRIPTION: This snippet shows the implementation of a simple HTTP server in Go with a '/ping' endpoint that returns 'pong' as a response.

LANGUAGE: go
CODE:
package main

import (
   "fmt"
   "net/http"
)

func ping(w http.ResponseWriter, req *http.Request){
   fmt.Fprintf(w,"pong")
}

func main() {
   http.HandleFunc("/ping",ping)

   http.ListenAndServe(":8090", nil)
}

----------------------------------------

TITLE: Fetching Node Exporter Metrics
DESCRIPTION: Commands to verify metric exposure by querying the /metrics endpoint using curl

LANGUAGE: bash
CODE:
curl http://localhost:9100/metrics

----------------------------------------

TITLE: Docker Compose Configuration for Prometheus, cAdvisor, and Redis
DESCRIPTION: Docker Compose configuration that sets up three containers: Prometheus for metrics collection, cAdvisor for container monitoring, and Redis as a monitored service.

LANGUAGE: yaml
CODE:
version: '3.2'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - cadvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
    - redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
    - 6379:6379

----------------------------------------

TITLE: Defining Scrape Targets in JSON for Prometheus
DESCRIPTION: JSON configuration specifying scrape targets for Prometheus, including labels and target addresses.

LANGUAGE: json
CODE:
[
  {
    "labels": {
      "job": "node"
    },
    "targets": [
      "localhost:9100"
    ]
  }
]

----------------------------------------

TITLE: Configuring Docker Daemon Metrics
DESCRIPTION: JSON configuration for enabling metrics exposure on the Docker daemon through the daemon.json file. Sets the metrics address and enables experimental features.

LANGUAGE: json
CODE:
{
  "metrics-addr" : "0.0.0.0:9323",
  "experimental" : true
}

----------------------------------------

TITLE: Running Prometheus with Docker
DESCRIPTION: Docker command to run Prometheus with a custom configuration file.

LANGUAGE: bash
CODE:
docker \
  run --network="host"\
  --mount type=bind,source="$(pwd)"/prometheus.yml,target=/prometheus.yml,readonly \
  prom/prometheus \
  --config.file="/prometheus.yml"

----------------------------------------

TITLE: Average Latency Calculation from Summary in Prometheus
DESCRIPTION: Demonstrates calculating and aggregating average latency metrics using Summary metrics, properly handling count and sum components.

LANGUAGE: yaml
CODE:
- record: instance_path:request_latency_seconds_count:rate5m
  expr: rate(request_latency_seconds_count{job="myjob"}[5m])

- record: instance_path:request_latency_seconds_sum:rate5m
  expr: rate(request_latency_seconds_sum{job="myjob"}[5m])

- record: instance_path:request_latency_seconds:mean5m
  expr: |2
      instance_path:request_latency_seconds_sum:rate5m{job="myjob"}
    /
      instance_path:request_latency_seconds_count:rate5m{job="myjob"}

- record: path:request_latency_seconds:mean5m
  expr: |2
      sum without (instance)(instance_path:request_latency_seconds_sum:rate5m{job="myjob"})
    /
      sum without (instance)(instance_path:request_latency_seconds_count:rate5m{job="myjob"})

----------------------------------------

TITLE: Running blackbox exporter with Docker
DESCRIPTION: Command to run the blackbox exporter in a Docker container, exposing port 9115.

LANGUAGE: bash
CODE:
docker run -p 9115:9115 prom/blackbox-exporter

----------------------------------------

TITLE: Illustrating Prometheus Remote Write Data Flow Architecture
DESCRIPTION: ASCII diagram showing how data flows from the Write-Ahead Log (WAL) through multiple queue shards to remote endpoints. Demonstrates the parallel processing nature of remote write implementation.

LANGUAGE: plaintext
CODE:
      |-->  queue (shard_1)   --> remote endpoint
WAL --|-->  queue (shard_...) --> remote endpoint
      |-->  queue (shard_n)   --> remote endpoint

----------------------------------------

TITLE: Subquery Basic Syntax in PromQL
DESCRIPTION: Demonstrates the fundamental syntax structure for subqueries in Prometheus. Shows the components including instant query, range, resolution, and offset duration.

LANGUAGE: promql
CODE:
<instant_query> '[' <range> ':' [ <resolution> ] ']' [ offset <duration> ]

----------------------------------------

TITLE: Downloading and Extracting Prometheus in Bash
DESCRIPTION: Commands to download the latest Prometheus release and extract it to a local directory.

LANGUAGE: bash
CODE:
wget https://github.com/prometheus/prometheus/releases/download/v*/prometheus-*.*-amd64.tar.gz
tar xvf prometheus-*.*-amd64.tar.gz
cd prometheus-*.*

----------------------------------------

TITLE: Query Log JSON Format Example
DESCRIPTION: Example of the JSON structure used in Prometheus query logs showing timing statistics and query parameters.

LANGUAGE: json
CODE:
{
    "params": {
        "end": "2020-02-08T14:59:50.368Z",
        "query": "up == 0",
        "start": "2020-02-08T13:59:50.368Z",
        "step": 5
    },
    "stats": {
        "timings": {
            "evalTotalTime": 0.000447452,
            "execQueueTime": 7.599e-06,
            "execTotalTime": 0.000461232,
            "innerEvalTime": 0.000427033,
            "queryPreparationTime": 1.4177e-05,
            "resultSortTime": 6.48e-07
        }
    },
    "ts": "2020-02-08T14:59:50.387Z"
}

----------------------------------------

TITLE: Creating Basic Prometheus Console Template
DESCRIPTION: Example of a basic console template showing tasks, CPU usage, and memory usage with a queries-per-second graph. Demonstrates usage of template functions and table layout.

LANGUAGE: html
CODE:
{{template "head" .}}

{{template "prom_right_table_head"}}
<tr>
  <th>MyJob</th>
  <th>{{ template "prom_query_drilldown" (args "sum(up{job='myjob'})")}}
      / {{ template "prom_query_drilldown" (args "count(up{job='myjob'})")}}
  </th>
</tr>
<tr>
  <td>CPU</td>
  <td>{{ template "prom_query_drilldown" (args
      "avg by(job)(rate(process_cpu_seconds_total{job='myjob'}[5m]))"
      "s/s" "humanizeNoSmallPrefix")}}
  </td>
</tr>
<tr>
  <td>Memory</td>
  <td>{{ template "prom_query_drilldown" (args
       "avg by(job)(process_resident_memory_bytes{job='myjob'})"
       "B" "humanize1024")}}
  </td>
</tr>
{{template "prom_right_table_tail"}}


{{template "prom_content_head" .}}
<h1>MyJob</h1>

<h3>Queries</h3>
<div id="queryGraph"></div>
<script>
new PromConsole.Graph({
  node: document.querySelector("#queryGraph"),
  expr: "sum(rate(http_query_count{job='myjob'}[5m]))",
  name: "Queries",
  yAxisFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,
  yHoverFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,
  yUnits: "/s",
  yTitle: "Queries"
})
</script>

{{template "prom_content_tail" .}}

{{template "tail"}}

----------------------------------------

TITLE: HTTP Request Log JSON Format
DESCRIPTION: Example of HTTP request logging format in Prometheus query logs.

LANGUAGE: json
CODE:
{
    "httpRequest": {
        "clientIP": "127.0.0.1",
        "method": "GET",
        "path": "/api/v1/query_range"
    }
}

----------------------------------------

TITLE: Rule Group Log JSON Format
DESCRIPTION: Example of rule group logging format in Prometheus query logs.

LANGUAGE: json
CODE:
{
    "ruleGroup": {
        "file": "rules.yml",
        "name": "partners"
    }
}

----------------------------------------

TITLE: Prometheus Scrape Configuration
DESCRIPTION: YAML configuration for Prometheus to scrape metrics from the instrumented Go application

LANGUAGE: yaml
CODE:
scrape_configs:
- job_name: myapp
  scrape_interval: 10s
  static_configs:
  - targets:
    - localhost:2112

----------------------------------------

TITLE: Logrotate Configuration for Query Logs
DESCRIPTION: Configuration for automatic rotation of Prometheus query logs using logrotate.

LANGUAGE: text
CODE:
/prometheus/query.log {
    daily
    rotate 7
    compress
    delaycompress
    postrotate
        killall -HUP prometheus
    endscript
}

----------------------------------------

TITLE: Configuring Per-Scrape Legacy Metric Name Validation in Prometheus YAML
DESCRIPTION: This YAML configuration sets the metric_name_validation_scheme to 'legacy' for a specific scrape job in Prometheus, overriding the global setting.

LANGUAGE: yaml
CODE:
scrape_configs:
  - job_name: prometheus
    metric_name_validation_scheme: legacy

----------------------------------------

TITLE: Minimal Prometheus configuration
DESCRIPTION: Basic Prometheus configuration to scrape the blackbox exporter's own metrics.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 5s

scrape_configs:
- job_name: blackbox # To get metrics about the exporter itself
  metrics_path: /metrics
  static_configs:
    - targets:
      - localhost:9115

----------------------------------------

TITLE: Configuring OTLP Receiver for UTF-8 Metric Names in Prometheus YAML
DESCRIPTION: This YAML configuration sets the translation_strategy for the OTLP receiver to 'NoUTF8EscapingWithSuffixes', allowing ingestion of OTLP data with UTF-8 characters in metric/label names.

LANGUAGE: yaml
CODE:
otlp:
  # Ingest OTLP data keeping UTF-8 characters in metric/label names.
  translation_strategy: NoUTF8EscapingWithSuffixes

----------------------------------------

TITLE: Invalid Metric Example - Total as Label
DESCRIPTION: Example showing incorrect way of using 'total' as a label value, which breaks aggregation. This pattern should be avoided.

LANGUAGE: prometheus
CODE:
my_metric{label="a"} 1
my_metric{label="b"} 6
my_metric{label="total"} 7

----------------------------------------

TITLE: Simple Subquery with Rate and Min Over Time
DESCRIPTION: Example showing how to use subqueries with rate calculations and min_over_time function. Returns 5-minute rate of http_requests_total for past 30 minutes at 1-minute resolution.

LANGUAGE: promql
CODE:
min_over_time( rate(http_requests_total[5m])[30m:1m] )

----------------------------------------

TITLE: Invalid Metric Example - Empty Labels
DESCRIPTION: Example showing incorrect way of using empty labels for totals, which breaks aggregation and is hard to work with.

LANGUAGE: prometheus
CODE:
my_metric{label="a"} 1
my_metric{label="b"} 6
my_metric{} 7

----------------------------------------

TITLE: Defining Frontmatter Metadata for Prometheus Documentation Page
DESCRIPTION: This snippet defines the frontmatter metadata for a documentation page about Prometheus. It specifies the title, sort rank, and navigation icon for the page.

LANGUAGE: markdown
CODE:
---
title: Introduction
sort_rank: 1
nav_icon: hand-finger-right
---

----------------------------------------

TITLE: Extracting Prometheus Package
DESCRIPTION: Commands to extract the downloaded Prometheus package and navigate to its directory

LANGUAGE: bash
CODE:
tar xvfz prometheus-*.tar.gz
cd prometheus-*

----------------------------------------

TITLE: Displaying Prometheus LTS Release Table in HTML
DESCRIPTION: HTML table structure showing Prometheus LTS releases with their release dates and end of support dates. The table uses color-coded classes to indicate current and expired support status.

LANGUAGE: html
CODE:
<table class="table table-bordered downloads">
    <thead>
        <tr>
            <th>Release</th>
            <th>Date</th>
            <th>End of support</th>
        </tr>
    </thead>
    <tbody>
        <tr class="danger">
            <td>Prometheus 2.37</td><td>2022-07-14</td><td>2023-07-31</td>
        </tr>
        <tr class="danger">
            <td>Prometheus 2.45</td><td>2023-06-23</td><td>2024-07-31</td>
        </tr>
        <tr class="success">
            <td>Prometheus 2.53</td><td>2024-06-16</td><td>2025-07-31</td>
        </tr>
    </tbody>
</table>

----------------------------------------

TITLE: Calculating Apdex Score with PromQL
DESCRIPTION: Expression to compute the Apdex score using histogram buckets with target duration of 300ms and tolerable duration of 1.2s.

LANGUAGE: promql
CODE:
(sum(rate(http_request_duration_seconds_bucket{le="0.3"}[5m])) by (job) + sum(rate(http_request_duration_seconds_bucket{le="1.2"}[5m])) by (job)) / 2 / sum(rate(http_request_duration_seconds_count[5m])) by (job)

----------------------------------------

TITLE: Querying Gauge Metrics in Prometheus
DESCRIPTION: Example of querying a gauge metric that monitors Go heap memory allocation in bytes. Gauge values can increase or decrease over time.

LANGUAGE: promql
CODE:
go_memstats_heap_alloc_bytes

----------------------------------------

TITLE: Computing Quantiles with PromQL
DESCRIPTION: Expressions showing correct and incorrect ways to calculate quantiles using histograms and summaries.

LANGUAGE: promql
CODE:
avg(http_request_duration_seconds{quantile="0.95"}) // BAD!
histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le)) // GOOD.

----------------------------------------

TITLE: Basic Request Rate Aggregation in Prometheus
DESCRIPTION: Demonstrates how to aggregate requests per second with path labels from instance level to path level using recording rules.

LANGUAGE: yaml
CODE:
- record: instance_path:requests:rate5m
  expr: rate(requests_total{job="myjob"}[5m])

- record: path:requests:rate5m
  expr: sum without (instance)(instance_path:requests:rate5m{job="myjob"})

----------------------------------------

TITLE: Remote Write 2.0 Protobuf Message Schema
DESCRIPTION: Core protobuf message definitions for Remote Write 2.0 protocol including Request, TimeSeries, Sample, Metadata and related message types

LANGUAGE: protobuf
CODE:
// Request represents a request to write the given timeseries to a remote destination.
message Request {
  reserved 1 to 3;

  repeated string symbols = 4;
  repeated TimeSeries timeseries = 5;
}

message TimeSeries {
  repeated uint32 labels_refs = 1;
  repeated Sample samples = 2;
  repeated Histogram histograms = 3;
  repeated Exemplar exemplars = 4;
  Metadata metadata = 5;
  int64 created_timestamp = 6;
}

message Exemplar {
  repeated uint32 labels_refs = 1;
  double value = 2;
  int64 timestamp = 3;
}

message Sample {
  double value = 1;
  int64 timestamp = 2;
}

message Metadata {
  enum MetricType {
    METRIC_TYPE_UNSPECIFIED    = 0;
    METRIC_TYPE_COUNTER        = 1;
    METRIC_TYPE_GAUGE          = 2;
    METRIC_TYPE_HISTOGRAM      = 3;
    METRIC_TYPE_GAUGEHISTOGRAM = 4;
    METRIC_TYPE_SUMMARY        = 5;
    METRIC_TYPE_INFO          = 6;
    METRIC_TYPE_STATESET       = 7;
  }
  MetricType type = 1;
  uint32 help_ref = 3;
  uint32 unit_ref = 4;
}

message Histogram { ... }

----------------------------------------

TITLE: Defining OpenMetrics ABNF Grammar
DESCRIPTION: ABNF grammar defining the syntax for the OpenMetrics text format, including rules for metric names, labels, samples, and overall structure.

LANGUAGE: ABNF
CODE:
exposition = metricset HASH SP eof [ LF ]

metricset = *metricfamily

metricfamily = *metric-descriptor *metric

metric-descriptor = HASH SP type SP metricname SP metric-type LF
metric-descriptor =/ HASH SP help SP metricname SP escaped-string LF
metric-descriptor =/ HASH SP unit SP metricname SP *metricname-char LF

metric = *sample

metric-type = counter / gauge / histogram / gaugehistogram / stateset
metric-type =/ info / summary / unknown

sample = metricname [labels] SP number [SP timestamp] [exemplar] LF

exemplar = SP HASH SP labels SP number [SP timestamp]

labels = "{" [label *(COMMA label)] "}"

label = label-name EQ DQUOTE escaped-string DQUOTE

number = realnumber
; Case insensitive
number =/ [SIGN] ("inf" / "infinity")
number =/ "nan"

timestamp = realnumber

; Not 100% sure this captures all float corner cases.
; Leading 0s explicitly okay
realnumber = [SIGN] 1*DIGIT
realnumber =/ [SIGN] 1*DIGIT ["." *DIGIT] [ "e" [SIGN] 1*DIGIT ]
realnumber =/ [SIGN] *DIGIT "." 1*DIGIT [ "e" [SIGN] 1*DIGIT ]


; RFC 5234 is case insensitive.
; Uppercase
eof = %d69.79.70
type = %d84.89.80.69
help = %d72.69.76.80
unit = %d85.78.73.84
; Lowercase
counter = %d99.111.117.110.116.101.114
gauge = %d103.97.117.103.101
histogram = %d104.105.115.116.111.103.114.97.109
gaugehistogram = gauge histogram
stateset = %d115.116.97.116.101.115.101.116
info = %d105.110.102.111
summary = %d115.117.109.109.97.114.121
unknown = %d117.110.107.110.111.119.110

BS = "\"
EQ = "="
COMMA = ","
HASH = "#"
SIGN = "-" / "+"

metricname = metricname-initial-char 0*metricname-char

metricname-char = metricname-initial-char / DIGIT
metricname-initial-char = ALPHA / "_" / ":"

label-name = label-name-initial-char *label-name-char

label-name-char = label-name-initial-char / DIGIT
label-name-initial-char = ALPHA / "_"

escaped-string = *escaped-char

escaped-char = normal-char
escaped-char =/ BS ("n" / DQUOTE / BS)
escaped-char =/ BS normal-char

; Any unicode character, except newline, double quote, and backslash
normal-char = %x00-09 / %x0B-21 / %x23-5B / %x5D-D7FF / %xE000-10FFFF

----------------------------------------

TITLE: Defining OpenMetrics Page Metadata in YAML
DESCRIPTION: YAML frontmatter block defining metadata for an OpenMetrics documentation page, specifying the title and sort ranking.

LANGUAGE: yaml
CODE:
---
title: "OpenMetrics"
sort_rank: 3
---

----------------------------------------

TITLE: Configuring Prometheus Alert for Nearly Full DHCP Scope
DESCRIPTION: Prometheus alert configuration to detect when a DHCP scope is more than 90% full.

LANGUAGE: yaml
CODE:
ALERT DhcpScopeAlmostFull
  IF ceil((dhcp_leases_current_count / dhcp_leases_max_count)*100) > 90 FOR 2m
  SUMMARY "DHCP scope {{$labels.network}} is almost full"
  DESCRIPTION "DHCP scope {{$labels.network}} is {{$value}}% full"

----------------------------------------

TITLE: Checking Container Status
DESCRIPTION: Command to verify the status of all containers in the Docker Compose stack.

LANGUAGE: bash
CODE:
docker-compose ps

----------------------------------------

TITLE: Basic Prometheus Configuration for Docker Daemon Monitoring
DESCRIPTION: YAML configuration for Prometheus to scrape itself and Docker daemon metrics. Includes dockerswarm_sd_configs for node discovery and relabeling rules.

LANGUAGE: yaml
CODE:
scrape_configs:
  # Make Prometheus scrape itself for metrics.
  - job_name: 'prometheus'
    static_configs:
    - targets: ['localhost:9090']

  # Create a job for Docker daemons.
  - job_name: 'docker'
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: nodes
    relabel_configs:
      # Fetch metrics on port 9323.
      - source_labels: [__meta_dockerswarm_node_address]
        target_label: __address__
        replacement: $1:9323
      # Set hostname as instance label
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance

----------------------------------------

TITLE: Chunked Read Response Protocol Definition
DESCRIPTION: Protobuf message definitions for the new streamed chunks response format, which enables more efficient data transfer.

LANGUAGE: protobuf
CODE:
// ChunkedReadResponse is a response when response_type equals STREAMED_XOR_CHUNKS.
message ChunkedReadResponse {
  repeated prometheus.ChunkedSeries chunked_series = 1;
}

// ChunkedSeries represents single, encoded time series.
message ChunkedSeries {
  // Labels should be sorted.
  repeated Label labels = 1 [(gogoproto.nullable) = false];
  // Chunks will be in start time order and may overlap.
  repeated Chunk chunks = 2 [(gogoproto.nullable) = false];
}

----------------------------------------

TITLE: Deploying cAdvisor as Docker Service
DESCRIPTION: Shell command to deploy cAdvisor as a global service in Docker Swarm with necessary mounts and labels for Prometheus monitoring.

LANGUAGE: shell
CODE:
docker service create --name cadvisor -l prometheus-job=cadvisor \
    --mode=global --publish target=8080,mode=host \
    --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock,ro \
    --mount type=bind,src=/,dst=/rootfs,ro \
    --mount type=bind,src=/var/run,dst=/var/run \
    --mount type=bind,src=/sys,dst=/sys,ro \
    --mount type=bind,src=/var/lib/docker,dst=/var/lib/docker,ro \
    google/cadvisor -docker_only

----------------------------------------

TITLE: Starting Prometheus Server in Bash
DESCRIPTION: Command to start the Prometheus server using the local binary.

LANGUAGE: bash
CODE:
./prometheus

----------------------------------------

TITLE: Defining Prometheus Recording Rule for Link Utilization
DESCRIPTION: Prometheus recording rule to precompute link utilization percentage for non-access layer interfaces.

LANGUAGE: promql
CODE:
precomputed_link_utilization_percent = rate(ifHCOutOctets{layer!='access'}[10m])*8/1000/1000
                                             / on (device,interface,alias)
                                           ifHighSpeed{layer!='access'}

----------------------------------------

TITLE: Running Additional Node Exporter Instance in Bash
DESCRIPTION: Command to start a second Node Exporter instance on a different port (9200) for demonstration purposes.

LANGUAGE: bash
CODE:
./node_exporter --web.listen-address=":9200"

----------------------------------------

TITLE: Configuring blackbox exporter module
DESCRIPTION: YAML configuration for the http_2xx module in blackbox.yml, setting preferred IP protocol to IPv4.

LANGUAGE: yaml
CODE:
modules:
  http_2xx:
    prober: http
    http:
      preferred_ip_protocol: "ip4"
  http_post_2xx:
    prober: http
    http:
      method: POST

----------------------------------------

TITLE: Launching Prometheus with Web Configuration
DESCRIPTION: This command launches Prometheus with a specified web configuration file that includes basic authentication settings.

LANGUAGE: bash
CODE:
$ prometheus --web.config.file=web.yml

----------------------------------------

TITLE: Running blackbox exporter with custom config
DESCRIPTION: Docker command to run the blackbox exporter with a custom configuration file.

LANGUAGE: bash
CODE:
docker \
  run -p 9115:9115 \
  --mount type=bind,source="$(pwd)"/blackbox.yml,target=/blackbox.yml,readonly \
  prom/blackbox-exporter \
  --config.file="/blackbox.yml"

----------------------------------------

TITLE: Promoting Resource Attributes Configuration
DESCRIPTION: YAML configuration for promoting specific OpenTelemetry resource attributes to Prometheus labels

LANGUAGE: yaml
CODE:
otlp:
  promote_resource_attributes:
    - service.instance.id
    - service.name
    - service.namespace
    - service.version
    - cloud.availability_zone
    - cloud.region
    - container.name
    - deployment.environment
    - deployment.environment.name
    - k8s.cluster.name
    - k8s.container.name
    - k8s.cronjob.name
    - k8s.daemonset.name
    - k8s.deployment.name
    - k8s.job.name
    - k8s.namespace.name
    - k8s.pod.name
    - k8s.replicaset.name
    - k8s.statefulset.name

----------------------------------------

TITLE: Updating Scrape Targets in JSON for Prometheus
DESCRIPTION: Modified JSON configuration adding a new scrape target for the additional Node Exporter instance.

LANGUAGE: json
CODE:
[
  {
    "targets": [
      "localhost:9100"
    ],
    "labels": {
      "job": "node"
    }
  },
  {
    "targets": [
      "localhost:9200"
    ],
    "labels": {
      "job": "node"
    }
  }
]

----------------------------------------

TITLE: PromQL Query for Including Resource Attributes
DESCRIPTION: Example PromQL query demonstrating how to join metrics with target_info to include resource attributes

LANGUAGE: promql
CODE:
rate(http_server_request_duration_seconds_count[2m])
* on (job, instance) group_left (k8s_cluster_name)
target_info

----------------------------------------

TITLE: UTF-8 Translation Strategy Configuration
DESCRIPTION: YAML configuration for enabling UTF-8 support in OTLP metric names and labels

LANGUAGE: yaml
CODE:
otlp:
  translation_strategy: NoUTF8EscapingWithSuffixes

----------------------------------------

TITLE: Querying Node Exporter Metrics with cURL in Bash
DESCRIPTION: Command to verify that the Node Exporter is exposing metrics on the default port 9100.

LANGUAGE: bash
CODE:
curl http://localhost:9100/metrics

----------------------------------------

TITLE: Reloading Prometheus Configuration via Shell Command
DESCRIPTION: Command to trigger configuration reload in Prometheus using the management API.

LANGUAGE: shell
CODE:
$ curl -X POST http://127.0.0.1:9090/-/reload

----------------------------------------

TITLE: Starting Prometheus with TLS Configuration
DESCRIPTION: Command to start Prometheus with TLS configuration enabled, including the web config file and external URL.

LANGUAGE: bash
CODE:
prometheus \
  --config.file=/path/to/prometheus.yml \
  --web.config.file=/path/to/web-config.yml \
  --web.external-url=https://example.com/

----------------------------------------

TITLE: External Template File Definition
DESCRIPTION: Example of a template file that defines a named template for Slack notifications, stored separately from the main configuration.

LANGUAGE: text
CODE:
{{ define "slack.myorg.text" }}https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}{{ end}}

----------------------------------------

TITLE: Testing TLS Connection with cURL
DESCRIPTION: Commands to test the TLS-secured Prometheus endpoint using cURL, both with certificate verification and insecure mode.

LANGUAGE: bash
CODE:
curl --cacert /home/prometheus/certs/example.com/example.com.crt \
  https://example.com/api/v1/label/job/values

LANGUAGE: bash
CODE:
curl -k https://example.com/api/v1/label/job/values

----------------------------------------

TITLE: Configuring Global Legacy Metric Name Validation in Prometheus YAML
DESCRIPTION: This YAML configuration sets the global metric_name_validation_scheme to 'legacy' in Prometheus, enforcing the legacy character set for metric names.

LANGUAGE: yaml
CODE:
global:
  metric_name_validation_scheme: legacy

----------------------------------------

TITLE: Querying blackbox exporter metrics
DESCRIPTION: Curl command to query the blackbox exporter's own metrics endpoint.

LANGUAGE: bash
CODE:
curl 'localhost:9115/metrics'

----------------------------------------

TITLE: Starting Prometheus Server
DESCRIPTION: Command to start the Prometheus server with a specified configuration file

LANGUAGE: bash
CODE:
./prometheus --config.file=prometheus.yml

----------------------------------------

TITLE: Defining YAML Frontmatter for Prometheus Documentation
DESCRIPTION: YAML frontmatter block that configures the page metadata including title, sort ranking, and navigation icon for a Prometheus documentation page.

LANGUAGE: yaml
CODE:
---
title: Best practices
sort_rank: 8
nav_icon: thumb-up
---

----------------------------------------

TITLE: Probing a target with blackbox exporter
DESCRIPTION: Curl command to probe prometheus.io using the blackbox exporter's http_2xx module.

LANGUAGE: bash
CODE:
curl 'localhost:9115/probe?target=prometheus.io&module=http_2xx'

----------------------------------------

TITLE: Configuring Alertmanager with Webhook Receiver
DESCRIPTION: Basic Alertmanager configuration that sets up a webhook receiver for alerts. Includes global timeout settings and routing configuration.

LANGUAGE: yaml
CODE:
global:
  resolve_timeout: 5m
route:
  receiver: webhook_receiver
receivers:
    - name: webhook_receiver
      webhook_configs:
        - url: '<INSERT-YOUR-WEBHOOK>'
          send_resolved: false

----------------------------------------

TITLE: Defining Prometheus Alert Rules
DESCRIPTION: Alert rule configuration that triggers when ping_request_count exceeds 5. Includes group name, alert condition, and evaluation duration.

LANGUAGE: yaml
CODE:
groups:
 - name: Count greater than 5
   rules:
   - alert: CountGreaterThan5
     expr: ping_request_count > 5
     for: 10s

----------------------------------------

TITLE: Configuring Alertmanager for Webhook Notifications in YAML
DESCRIPTION: This YAML configuration sets up Alertmanager to send alert notifications to a webhook endpoint, which can be used for automated remediation actions.

LANGUAGE: yaml
CODE:
receivers:
- name: restart_webhook
  webhook_configs:
    url: "http://example.org/my/hook"

route:
  receiver: restart_webhook

----------------------------------------

TITLE: Compiling and Running Go HTTP Server
DESCRIPTION: This bash snippet demonstrates how to compile and run the Go HTTP server.

LANGUAGE: bash
CODE:
go build server.go
./server

----------------------------------------

TITLE: Updating Ping Handler with Prometheus Counter in Go
DESCRIPTION: This snippet demonstrates how to update the ping handler to increment the Prometheus counter on each request.

LANGUAGE: go
CODE:
func ping(w http.ResponseWriter, req *http.Request) {
   pingCounter.Inc()
   fmt.Fprintf(w, "pong")
}

----------------------------------------

TITLE: Initializing Prometheus Graph Component
DESCRIPTION: Example of initializing the Prometheus console graph library to create a visualization. Shows basic setup with required parameters for rendering a metric graph.

LANGUAGE: html
CODE:
<div id="queryGraph"></div>
<script>
new PromConsole.Graph({
  node: document.querySelector("#queryGraph"),
  expr: "sum(rate(http_query_count{job='myjob'}[5m]))"
})
</script>

----------------------------------------

TITLE: Configuring Prometheus to Scrape Metrics
DESCRIPTION: This YAML snippet provides the Prometheus configuration to scrape metrics from the instrumented Go HTTP server.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets: ["localhost:9090"]
  - job_name: simple_server
    static_configs:
      - targets: ["localhost:8090"]

----------------------------------------

TITLE: Querying Instance Latency Outliers in PromQL
DESCRIPTION: This PromQL query identifies instances with latency more than two standard deviations above the mean and 20% above the average, with a minimum traffic requirement.

LANGUAGE: promql
CODE:
(
    (
        instance:latency_seconds:mean5m
      > on (job) group_left()
        (
            avg by (job)(instance:latency_seconds:mean5m)
          + on (job)
            2 * stddev by (job)(instance:latency_seconds:mean5m)
        )
    )
  > on (job) group_left()
    1.2 * avg by (job)(instance:latency_seconds:mean5m)
)

----------------------------------------

TITLE: Remote Read Request Protocol Definition
DESCRIPTION: Protobuf message definitions for the remote read request format, showing the structure for querying time series data with matchers and time range parameters.

LANGUAGE: protobuf
CODE:
message ReadRequest {
  repeated Query queries = 1;
}

message Query {
  int64 start_timestamp_ms = 1;
  int64 end_timestamp_ms = 2;
  repeated prometheus.LabelMatcher matchers = 3;
  prometheus.ReadHints hints = 4;
}

----------------------------------------

TITLE: Defining Latency Outlier Alert in Prometheus YAML
DESCRIPTION: This YAML configuration defines an alert rule for detecting instance latency outliers, incorporating the PromQL query with additional conditions and a duration threshold.

LANGUAGE: yaml
CODE:
groups:
- name: Practical Anomaly Detection
  rules:
  - alert: InstanceLatencyOutlier
    expr: >
      (
            (
                instance:latency_seconds:mean5m
              > on (job) group_left()
                (
                    avg by (job)(instance:latency_seconds:mean5m)
                  + on (job)
                    2 * stddev by (job)(instance:latency_seconds:mean5m)
                )
            )
          > on (job) group_left()
            1.2 * avg by (job)(instance:latency_seconds:mean5m)
        and on (job)
            avg by (job)(instance:latency_seconds_count:rate5m)
          >
            1
      )
    for: 30m

----------------------------------------

TITLE: Configuring Apache Reverse Proxy for Prometheus Components
DESCRIPTION: Apache configuration to set up reverse proxying for Prometheus, Alertmanager, and PromDash.

LANGUAGE: apache
CODE:
ProxyPass /prometheus http://localhost:9090/prometheus
ProxyPass /alertmanager http://localhost:9093/alertmanager
ProxyPass /dash http://localhost:3000/dash

----------------------------------------

TITLE: Demonstrating Rule Dependencies in Prometheus
DESCRIPTION: Example showing how rule dependencies can lead to outdated data in concurrent execution, using network traffic monitoring as an example.

LANGUAGE: promql
CODE:
instance:network_bytes:rate1m = sum by(instance) (rate(network_bytes_total[1m]))

ALERT HighNetworkTraffic
  IF instance:network_bytes:rate1m > 10e6
  FOR 5m

----------------------------------------

TITLE: Configuring Prometheus Alert for Bad Uplink on Access Switch
DESCRIPTION: Prometheus alert configuration to detect access switches with uplink speeds below 1000 Mbps.

LANGUAGE: yaml
CODE:
ALERT BadUplinkOnAccessSwitch
  IF ifHighSpeed{layer='access', interface='GigabitEthernet0/2'} < 1000 FOR 2m
  SUMMARY "Interface linking at {{$value}} Mbps"
  DESCRIPTION "Interface {{$labels.interface}} on {{$labels.device}} linking at {{$value}} Mbps"

----------------------------------------

TITLE: Custom Slack Template with Runbook Links
DESCRIPTION: Enhanced Alertmanager configuration that includes custom templating for Slack messages, adding links to runbook documentation based on alert labels.

LANGUAGE: yaml
CODE:
global:
  slack_api_url: '<slack_webhook_url>'

route:
- receiver: 'slack-notifications'
  group_by: [alertname, datacenter, app]

receivers:
- name: 'slack-notifications'
  slack_configs:
  - channel: '#alerts'
    # Template for the text field in Slack messages.
    text: 'https://internal.myorg.net/wiki/alerts/{{ .GroupLabels.app }}/{{ .GroupLabels.alertname }}'

----------------------------------------

TITLE: Displaying Prometheus Help Output with Agent Mode
DESCRIPTION: This snippet shows the help output of Prometheus including the new flags for Agent mode. It demonstrates how to enable the Agent feature and highlights the differences between server and agent mode flags.

LANGUAGE: bash
CODE:
usage: prometheus [<flags>]

The Prometheus monitoring server

Flags:
  -h, --help                     Show context-sensitive help (also try --help-long and --help-man).
      (... other flags)
      --storage.tsdb.path="data/"
                                 Base path for metrics storage. Use with server mode only.
      --storage.agent.path="data-agent/"
                                 Base path for metrics storage. Use with agent mode only.
      (... other flags)
      --enable-feature= ...      Comma separated feature names to enable. Valid options: agent, exemplar-storage, expand-external-labels, memory-snapshot-on-shutdown, promql-at-modifier, promql-negative-offset, remote-write-receiver,
                                 extra-scrape-metrics, new-service-discovery-manager. See https://prometheus.io/docs/prometheus/latest/feature_flags/ for more details.

----------------------------------------

TITLE: Configuration with External Template File
DESCRIPTION: Alertmanager configuration that loads and uses an external template file for Slack notifications, demonstrating template file integration.

LANGUAGE: yaml
CODE:
global:
  slack_api_url: '<slack_webhook_url>'

route:
- receiver: 'slack-notifications'
  group_by: [alertname, datacenter, app]

receivers:
- name: 'slack-notifications'
  slack_configs:
  - channel: '#alerts'
    text: '{{ template "slack.myorg.text" . }}'

templates:
- '/etc/alertmanager/templates/myorg.tmpl'

----------------------------------------

TITLE: Setting Prometheus Chunk Encoding Version
DESCRIPTION: Command line flag to enable varbit encoding (version 2) in Prometheus server. This configuration affects how new chunks are encoded in the time series database.

LANGUAGE: shell
CODE:
-storage.local.chunk-encoding-version=2

----------------------------------------

TITLE: Running the Instrumented Go HTTP Server
DESCRIPTION: This bash snippet shows how to initialize the Go module, download dependencies, and run the instrumented server.

LANGUAGE: bash
CODE:
go mod init prom_example
go mod tidy
go run server.go

----------------------------------------

TITLE: Running Prometheus 1.x with Storage Configuration
DESCRIPTION: Example command for running Prometheus 1.x with various storage-related flags set.

LANGUAGE: bash
CODE:
./prometheus -storage.local.retention=200h -storage.local.memory-chunks=1000000 -storage.local.max-chunks-to-persist=500000 -storage.local.chunk-encoding=2 -config.file=/etc/prometheus.yaml

----------------------------------------

TITLE: Fetching Prometheus Data with Python
DESCRIPTION: A Python script is mentioned that fetches data from Prometheus and stores it in a MySQL database. This data is then used to create a live floor map accessible via a web application.

LANGUAGE: python
CODE:
# Python script to fetch data from Prometheus and store in MySQL
# (Actual code not provided in the interview text)

----------------------------------------

TITLE: Running Docker Compose Stack
DESCRIPTION: Command to start the Docker Compose stack containing Prometheus, cAdvisor, and Redis containers.

LANGUAGE: bash
CODE:
docker-compose up

----------------------------------------

TITLE: New YAML-Based Rule Format in Prometheus 2.0
DESCRIPTION: Demonstrates the new YAML format for defining recording and alerting rules, including group configuration, intervals, and sequential execution.

LANGUAGE: yaml
CODE:
groups:
- name: my-group-name
  interval: 30s   # defaults to global interval
  rules:
  - record: instance:errors:rate5m
    expr: rate(errors_total[5m])
  - record: instance:requests:rate5m
    expr: rate(requests_total[5m])
  - alert: HighErrors
    # Expressions remain PromQL as before and can be spread over
    # multiple lines via YAML's multi-line strings.
    expr: |
      sum without(instance) (instance:errors:rate5m)
      / 
      sum without(instance) (instance:requests:rate5m)
    for: 5m
    labels:
      severity: critical
    annotations:
      description: "stuff's happening with {{ $labels.service }}"

----------------------------------------

TITLE: HTML Embedded YouTube Video
DESCRIPTION: HTML iframe element embedding the PromCon 2017 recap video from YouTube.

LANGUAGE: html
CODE:
<iframe width="560" height="315" src="https://www.youtube.com/embed/4Pr-z8-r1eo" frameborder="0" allowfullscreen></iframe>

----------------------------------------

TITLE: Defining Custom Service Discovery Data Structure
DESCRIPTION: Structure definition for storing service discovery target information in a format compatible with Prometheus file_sd JSON output format.

LANGUAGE: go
CODE:
type customSD struct {
    Targets []string          `json:"targets"`
    Labels  map[string]string `json:"labels"`
}

----------------------------------------

TITLE: HTML Twitter Widget Script
DESCRIPTION: HTML script tag for loading the Twitter widget functionality.

LANGUAGE: html
CODE:
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

----------------------------------------

TITLE: Defining Prometheus Service Discovery Adapter Structure
DESCRIPTION: Core adapter structure that handles conversion between custom service discovery implementations and Prometheus file_sd format. Includes main adapter type definition and run method.

LANGUAGE: go
CODE:
type Adapter struct {
    ctx     context.Context
    disc    discovery.Discoverer
    groups  map[string]*customSD
    manager *discovery.Manager
    output  string
    name    string
    logger  log.Logger
}

func (a *Adapter) Run() {
    go a.manager.Run()
    a.manager.StartCustomProvider(a.ctx, a.name, a.disc)
    go a.runCustomSD(a.ctx)
}

----------------------------------------

TITLE: Remote Write 2.0 Content-Type Header Examples
DESCRIPTION: Example Content-Type headers showing supported values for both v1 and v2 protobuf messages

LANGUAGE: text
CODE:
Content-Type: application/x-protobuf
Content-Type: application/x-protobuf;proto=prometheus.WriteRequest
Content-Type: application/x-protobuf;proto=io.prometheus.write.v2.Request

----------------------------------------

TITLE: Docker Compose Configuration for Example Setup
DESCRIPTION: Docker Compose configuration for running Prometheus and Consul containers to test custom service discovery implementation.

LANGUAGE: yaml
CODE:
version: '2'
services:
  consul:
    image: consul:latest
    container_name: consul
    ports:
    - 8300:8300
    - 8500:8500
    volumes:
    - ${PWD}/consul.json:/consul/config/consul.json
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
    - 9090:9090

----------------------------------------

TITLE: Consul Service Configuration
DESCRIPTION: JSON configuration for Consul service defining Prometheus metrics endpoint and health check settings.

LANGUAGE: json
CODE:
{
"service": {
    "name": "prometheus",
    "port": 9090,
    "checks": [
    {
        "id": "metrics",
        "name": "Prometheus Server Metrics",
        "http": "http://prometheus:9090/metrics",
        "interval": "10s"
    }
    ]
}
}

----------------------------------------

TITLE: Installing Dependencies for Prometheus Documentation Build
DESCRIPTION: This command installs the necessary Ruby gems for building the Prometheus documentation site. It requires a working Ruby environment with bundler installed.

LANGUAGE: bash
CODE:
make bundle

----------------------------------------

TITLE: Prometheus File SD Configuration
DESCRIPTION: Prometheus scrape configuration using file_sd to read custom service discovery target information.

LANGUAGE: yaml
CODE:
scrape_configs:
  - job_name: "custom-sd"
    scrape_interval: "15s"
    file_sd_configs:
    - files:
      - /path/to/custom_sd.json

----------------------------------------

TITLE: Complex Nested Subquery Example
DESCRIPTION: Demonstrates a nested subquery implementation combining rate, deriv, and max_over_time functions. Shows how to calculate derivatives of rates over multiple time ranges.

LANGUAGE: promql
CODE:
max_over_time( deriv( rate(distance_covered_meters_total[1m])[5m:1m] )[10m:] )

----------------------------------------

TITLE: Running Prometheus with Custom Configuration
DESCRIPTION: This bash snippet demonstrates how to run Prometheus with a custom configuration file.

LANGUAGE: bash
CODE:
prometheus --config.file=prometheus.yml

----------------------------------------

TITLE: Remote Read Response Protocol Definition
DESCRIPTION: Protobuf message definitions for the original remote read response format, showing how time series data and samples are structured.

LANGUAGE: protobuf
CODE:
message ReadResponse {
  // In same order as the request's queries.
  repeated QueryResult results = 1;
}

message Sample {
  double value    = 1;
  int64 timestamp = 2;
}

message TimeSeries {
  repeated Label labels   = 1;
  repeated Sample samples = 2;
}

message QueryResult {
  repeated prometheus.TimeSeries timeseries = 1;
}

----------------------------------------

TITLE: Series Interface Definitions in Go
DESCRIPTION: Go interface definitions for SeriesSet, Series, and SeriesIterator that enable streaming iteration over time series data.

LANGUAGE: go
CODE:
// SeriesSet contains a set of series.
type SeriesSet interface {
	Next() bool
	At() Series
	Err() error
}

// Series represents a single time series.
type Series interface {
	// Labels returns the complete set of labels identifying the series.
	Labels() labels.Labels
	// Iterator returns a new iterator of the data of the series.
	Iterator() SeriesIterator
}

// SeriesIterator iterates over the data of a time series.
type SeriesIterator interface {
	// At returns the current timestamp/value pair.
	At() (t int64, v float64)
	// Next advances the iterator by one.
	Next() bool
	Err() error
}

----------------------------------------

TITLE: Configuring Markdown Frontmatter for Prometheus Tutorials Page
DESCRIPTION: YAML frontmatter block that configures the title, sorting rank, and navigation icon for the Prometheus tutorials documentation page.

LANGUAGE: markdown
CODE:
---
title: Tutorials
sort_rank: 10
nav_icon: book
---

----------------------------------------

TITLE: Basic PromQL @ Modifier Syntax
DESCRIPTION: Shows the three basic syntax patterns for using the '@' modifier with different selector types. The timestamp parameter accepts unix timestamp as a float literal.

LANGUAGE: promql
CODE:
<vector-selector> @ <timestamp>
<range-vector-selector> @ <timestamp>
<subquery> @ <timestamp>

----------------------------------------

TITLE: PromQL @ Modifier Usage with HTTP Requests Example
DESCRIPTION: Demonstrates using the '@' modifier to get HTTP request metrics at a specific timestamp (2021-01-04T07:40:00+00:00) and calculating its 5-minute rate.

LANGUAGE: promql
CODE:
http_requests_total @ 1609746000
rate(http_requests_total[5m] @ 1609746000)

----------------------------------------

TITLE: Running Prometheus 2.0 Alpha with Simplified Configuration
DESCRIPTION: Example command for running Prometheus 2.0 alpha with simplified storage configuration, retaining only the retention period and config file flags.

LANGUAGE: bash
CODE:
./prometheus -storage.local.retention=200h -config.file=/etc/prometheus.yaml

----------------------------------------

TITLE: Time Series Notation Example
DESCRIPTION: Example showing the standard notation for identifying a time series with a metric name and set of labels in Prometheus.

LANGUAGE: plaintext
CODE:
api_http_requests_total{method="POST", handler="/messages"}

----------------------------------------

TITLE: Installing Prometheus Go Client Libraries
DESCRIPTION: Commands to install the required Prometheus Go client libraries using go get

LANGUAGE: bash
CODE:
go get github.com/prometheus/client_golang/prometheus
go get github.com/prometheus/client_golang/prometheus/promauto
go get github.com/prometheus/client_golang/prometheus/promhttp

----------------------------------------

TITLE: Generating Git Commit with DCO Signature
DESCRIPTION: Commands to amend a Git commit with a Developer Certificate of Origin (DCO) signature and force push the changes.

LANGUAGE: bash
CODE:
git commit --amend --signoff
git push -f $remote $remote_branch_for_pr

----------------------------------------

TITLE: Installing and Starting Prometheus
DESCRIPTION: Commands to download, extract and start Prometheus with a specific configuration file

LANGUAGE: bash
CODE:
wget https://github.com/prometheus/prometheus/releases/download/v*/prometheus-*.*-amd64.tar.gz
tar xvf prometheus-*.*-amd64.tar.gz
cd prometheus-*.*
./prometheus --config.file=./prometheus.yml

----------------------------------------

TITLE: EBNF Syntax Definition for Prometheus Metrics
DESCRIPTION: Formal EBNF syntax definition for Prometheus metric samples, defining the structure for metric_name, labels, values, and timestamps.

LANGUAGE: ebnf
CODE:
metric_name [
  "{" label_name "=" `"` label_value `"` { "," label_name "=" `"` label_value `"` } [ "," ] "}"
] value [ timestamp ]

----------------------------------------

TITLE: Querying Ping Request Count in Grafana with PromQL
DESCRIPTION: This PromQL query retrieves the 'ping_request_count' metric from Prometheus to be displayed in a Grafana dashboard panel. It is used to visualize the number of ping requests over time.

LANGUAGE: promql
CODE:
ping_request_count

----------------------------------------

TITLE: Building Prometheus Documentation Static Site
DESCRIPTION: This command generates the static site for Prometheus documentation. The resulting files are stored in the 'output' directory.

LANGUAGE: bash
CODE:
make build

----------------------------------------

TITLE: Setting GitHub API Token for Prometheus Documentation Build
DESCRIPTION: This command sets an environment variable with a GitHub API token to avoid rate limits during the build process. The token can be obtained from GitHub settings.

LANGUAGE: bash
CODE:
export GITHUB_AUTHENTICATION='-u user:token'

----------------------------------------

TITLE: Running Prometheus Documentation Development Server
DESCRIPTION: These commands start a local development server for the Prometheus documentation. It rebuilds the site when relevant files change and serves the content at http://localhost:3000/.

LANGUAGE: bash
CODE:
# Rebuild the site whenever relevant files change:
make guard
# Start the local development server in a separate shell:
make serve