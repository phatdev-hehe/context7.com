TITLE: Initializing and Using ECharts Option Player
DESCRIPTION: Demonstrates how to initialize and use the ECharts Simple Option Player. The code shows configuration setup including chart instance management, series indexing, merge strategies, data meta information for transitions, and option list setup. Also includes examples of player control methods.

LANGUAGE: javascript
CODE:
const myChart = echarts.init(dom);

// Firstly, Initialize with an array of echarts option info:

const player = ecSimpleOptionPlayer.create({

    /**
     * Mandatory.
     *
     * `chart` can be the echarts instance
     * or chart instance getter function.
     */
    chart: function () {
        return myChart;
    },

    /**
     * Optional.
     *
     * By default `0`.
     */
    seriesIndex: 0,

    /**
     * Optional.
     *
     * If some component type are declared here,
     * when changing option, those types of components will be updated
     * follow the REPLACE_MERGE rule.
     * That is, all of the old components will be replaced by the new one
     * (except those mapped by the same id).
     * If not specified, when option changed, component will follow the
     * NORMAL_MERGE rule, where none of the existing components will be removed
     * but only merged by new ones.
     *
     * See https://echarts.apache.org/en/api.html#echartsInstance.setOption
     * for more details of REPLACE_MERGE and NORMAL_MERGE rule.
     */
    replaceMerge: ['xAxis', 'yAxis']

    /**
     * Mandatory.
     *
     * The data meta info used to determine how to make transition parameter when
     * calling `myChart.setOption` internally.
     *
     * See the example below:
     * `'aaa'`, `'bbb'` are "dataMetaKey", named by user,
     * and can be referenced in `optionList` for each `option`.
     *
     * The rule is:
     *     The field `dimensions` defines a list of dimension names.
     *     The field `uniqueDimension` uniqueDimension a single dimension name.
     *     If the `option_A` is about to switch to the `option_B`,
     *     suppose `option_A` reference `dataMeta` `aaa` and `option_B` reference `dataMeta` `bbb`,
     *     if `aaa.uniqueDimension` in `bbb.dimensions` or `bbb.uniqueDimension` in `aaa.dimensions`,
     *     we can make transition animation (combine and separate effect).
     */
    dataMeta: {
        aaa: {
            dimensions: ['qqq', 'www', 'eee', 'rrr']
        },
        bbb: {
            dimensions: ['ccc', 'www', 'eee'],
            uniqueDimension: 'www',
            // Can be 'duplicate' or 'split'
            dividingMethod: 'duplicate'
        },
        ...
    },

    /**
     * echarts option collection:
     */
    optionList: [
        // dataMetaKey is the key of 'dataMeta'.
        { key: 'Time_Income_Bar', option: option0, dataMetaKey: 'aaa' },
        { key: 'Population_Income_Scatter', option: option1, dataMetaKey: 'bbb' },
        { key: 'Time_Income_Pie', option: option2, dataMetaKey: 'aaa' },
        ...
    ]
});


// Then start to play:

// Display next option (from the first option).
player.next();
// Display previous option.
player.previous();
// Display the specified option.
player.go('Time_Income_Pie');
// return `['Time_Income_Bar', 'Population_Income_Scatter', 'Time_Income_Pie']`
player.getOptionKeys();

----------------------------------------

TITLE: Configuring Scatter Nutrients Matrix Chart in ECharts
DESCRIPTION: This code snippet sets up the configuration for a scatter nutrients matrix chart using ECharts. It defines the chart dimensions, data source, visual mappings, and axis settings for displaying nutrient information across multiple categories.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      ['nutrient', 'calcium', 'iron', 'vitamin_a'],
      ['cabbage', 4, 0.49, 45],
      ['celery', 4, 0.44, 29],
      ['chives', 7, 1.6, 138],
      ['eggplant', 2, 0.39, 6],
      ['endive', 10, 0.86, 371],
      ['lettuce', 4, 0.41, 66],
      ['mushrooms', 0, 0.32, 0],
      ['okra', 8, 0.77, 53],
      ['onions', 2, 0.21, 0],
      ['parsley', 13, 3.3, 674],
      ['peppers_sweet', 1, 0.34, 370],
      ['potatoes', 1, 0.44, 0],
      ['radishes', 3, 0.34, 7],
      ['spinach', 9, 2.7, 469],
      ['squash_summer', 2, 0.37, 39],
      ['sweet_potatoes', 3, 0.61, 709],
      ['tomatoes', 1, 0.27, 255],
      ['turnip_greens', 19, 0.64, 680],
      ['turnips', 3, 0.3, 0],
      ['watercress', 12, 0.2, 450]
    ]
  },
  title: {
    text: 'Scatter Nutrients Matrix'
  },
  tooltip: {
    formatter: function (params) {
      return [
        params.seriesName + ':',
        'calcium: ' + params.data[1],
        'iron: ' + params.data[2],
        'vitamin_a: ' + params.data[3]
      ].join('<br>');
    }
  },
  grid: {
    top: 60,
    bottom: 50,
    left: 80,
    right: 30
  },
  xAxis: {
    type: 'value',
    name: 'calcium',
    nameTextStyle: {
      fontWeight: 'bold'
    },
    nameLocation: 'end',
    splitLine: {
      show: false
    }
  },
  yAxis: {
    type: 'value',
    name: 'iron',
    nameTextStyle: {
      fontWeight: 'bold'
    },
    nameLocation: 'end',
    splitLine: {
      show: false
    }
  },
  visualMap: [
    {
      type: 'piecewise',
      dimension: 3,
      orient: 'horizontal',
      left: 'center',
      bottom: 10,
      itemSymbol: 'circle',
      itemWidth: 10,
      itemHeight: 10,
      min: 0,
      max: 800,
      splitNumber: 4,
      pieces: [
        { min: 500, label: '≥500', color: '#ff5050' },
        { min: 100, max: 500, label: '100-500', color: '#ffad5b' },
        { min: 10, max: 100, label: '10-100', color: '#bae7ff' },
        { max: 10, label: '≤10', color: '#e0ebf6' }
      ],
      textStyle: {
        fontSize: 9
      }
    }
  ],
  series: [
    {
      name: 'nutrients',
      type: 'scatter',
      encode: {
        x: 'calcium',
        y: 'iron',
        tooltip: [1, 2, 3]
      },
      symbolSize: 15,
      itemStyle: {
        opacity: 0.8
      },
      emphasis: {
        focus: 'self'
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring ECharts Line Chart for Temperature Change Visualization in JavaScript
DESCRIPTION: This snippet defines the complete configuration for an ECharts line chart. It sets up the chart title, tooltip, legend, x-axis (days of the week), y-axis (temperature), and two data series for maximum and minimum temperatures. The chart includes custom styling and formatting options.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Temperature Change in the Coming Week'
  },
  tooltip: {
    trigger: 'axis'
  },
  legend: {},
  toolbox: {
    show: true,
    feature: {
      dataZoom: {
        yAxisIndex: 'none'
      },
      dataView: { readOnly: false },
      magicType: { type: ['line', 'bar'] },
      restore: {},
      saveAsImage: {}
    }
  },
  xAxis: {
    type: 'category',
    boundaryGap: false,
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value',
    axisLabel: {
      formatter: '{value} °C'
    }
  },
  series: [
    {
      name: 'Highest',
      type: 'line',
      data: [10, 11, 13, 11, 12, 12, 9],
      markPoint: {
        data: [
          { type: 'max', name: 'Max' },
          { type: 'min', name: 'Min' }
        ]
      },
      markLine: {
        data: [{ type: 'average', name: 'Avg' }]
      }
    },
    {
      name: 'Lowest',
      type: 'line',
      data: [1, -2, 2, 5, 3, 2, 0],
      markPoint: {
        data: [{ name: 'Week Lowest', value: -2, xAxis: 1, yAxis: -1.5 }]
      },
      markLine: {
        data: [
          { type: 'average', name: 'Avg' },
          [
            {
              symbol: 'none',
              x: '90%',
              yAxis: 'max'
            },
            {
              symbol: 'circle',
              label: {
                position: 'start',
                formatter: 'Max'
              },
              type: 'max',
              name: 'Highest point'
            }
          ]
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring ECharts Global Wind Visualization Project
DESCRIPTION: This YAML configuration specifies the title, category, and required scripts for a global wind visualization project using ECharts and Baidu Maps. It includes the Baidu Maps API, ECharts-GL library, and a Baidu Maps extension for ECharts.

LANGUAGE: yaml
CODE:
---
title: Global Wind Visualization 2
category: flowGL
titleCN: Global Wind Visualization 2
scripts: https://api.map.baidu.com/api?v=2.0&ak=KOmVjPVUAey1G2E8zNhPiuQ6QiEmAwZu,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js&__ec_v__=20190126,/dep/echarts/latest/extension/bmap.min.js
---

----------------------------------------

TITLE: Configuring ECharts Pie Chart for Website Referrer Sources in JavaScript
DESCRIPTION: This code snippet sets up an ECharts pie chart configuration to visualize website referrer sources. It defines the chart's title, tooltip, legend, and series data with custom styling and layout options.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Referer of a Website',
    subtext: 'Fake Data',
    left: 'center'
  },
  tooltip: {
    trigger: 'item'
  },
  legend: {
    orient: 'vertical',
    left: 'left'
  },
  series: [
    {
      name: 'Access From',
      type: 'pie',
      radius: '50%',
      data: [
        { value: 1048, name: 'Search Engine' },
        { value: 735, name: 'Direct' },
        { value: 580, name: 'Email' },
        { value: 484, name: 'Union Ads' },
        { value: 300, name: 'Video Ads' }
      ],
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowOffsetX: 0,
          shadowColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }
  ]
};

----------------------------------------

TITLE: Initializing and Configuring Graph Visualization for WebKit Dependencies in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a complex graph visualization using ECharts. It includes configuration for node categories, edge bundling, and interactive features like zooming and dragging. The graph represents WebKit dependencies with different node types and relationships.

LANGUAGE: javascript
CODE:
option = {
  legend: {
    data: ['HTMLElement', 'WebGL', 'SVG', 'CSS', 'Other']
  },
  series: [
    {
      type: 'graph',
      layout: 'force',
      animation: false,
      label: {
        position: 'right',
        formatter: '{b}'
      },
      draggable: true,
      data: webkitDepData.nodes.map(function (node, idx) {
        node.id = idx;
        return node;
      }),
      categories: webkitDepData.categories,
      force: {
        edgeLength: 5,
        repulsion: 20,
        gravity: 0.2
      },
      edges: webkitDepData.links
    }
  ]
};

----------------------------------------

TITLE: Configuring Custom Cartesian Polygon Chart with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up a custom cartesian polygon chart using ECharts. It includes options for the chart's grid, x-axis, y-axis, and series data. The chart displays multiple polygons with different colors and shapes.

LANGUAGE: javascript
CODE:
option = {
  grid: {
    left: 20,
    right: 20,
    bottom: 20,
    top: 20,
    containLabel: true
  },
  xAxis: {
    type: 'category',
    data: ['A', 'B', 'C', 'D', 'E']
  },
  yAxis: {
    type: 'category',
    data: [1, 2, 3, 4, 5]
  },
  series: [
    {
      type: 'custom',
      renderItem: function (params, api) {
        var coordDims = ['x', 'y'];
        var points = [];
        for (var i = 0; i < coordDims.length; i++) {
          var dim = coordDims[i];
          var val = api.value(dim);
          var p1 = api.coord([val, i]);
          var p2 = api.coord([val + 1, i]);
          var p3 = api.coord([val + 1, i + 1]);
          var p4 = api.coord([val, i + 1]);
          points.push([p1, p2, p3, p4]);
        }
        return {
          type: 'polygon',
          transition: ['shape'],
          shape: {
            points: points[0]
          },
          style: api.style()
        };
      },
      data: [
        [0, 0, 1, '#313695'],
        [0, 1, 2, '#4575b4'],
        [0, 2, 3, '#74add1'],
        [0, 3, 4, '#abd9e9'],
        [1, 0, 5, '#e0f3f8'],
        [1, 1, 6, '#ffffbf'],
        [1, 2, 7, '#fee090'],
        [1, 3, 8, '#fdae61'],
        [2, 0, 9, '#f46d43'],
        [2, 1, 10, '#d73027'],
        [2, 2, 11, '#a50026']
      ],
      encode: {
        x: 0,
        y: 1,
        tooltip: 2
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring ECharts Candlestick Chart for Shanghai Stock Exchange Index 2015
DESCRIPTION: This snippet sets up an ECharts configuration for a candlestick chart. It processes raw data, configures the x and y axes, and customizes the visual appearance of the chart to display the Shanghai Stock Exchange Index for 2015.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: rawData
  },
  title: {
    text: 'ShangHai Index, 2015'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'line'
    }
  },
  toolbox: {
    feature: {
      dataZoom: {
        yAxisIndex: false
      }
    }
  },
  grid: [
    {
      left: '10%',
      right: '10%',
      bottom: 200
    },
    {
      left: '10%',
      right: '10%',
      height: 80,
      bottom: 80
    }
  ],
  xAxis: [
    {
      type: 'category',
      scale: true,
      boundaryGap: false,
      axisLine: { onZero: false },
      splitLine: { show: false },
      min: 'dataMin',
      max: 'dataMax'
    },
    {
      type: 'category',
      gridIndex: 1,
      scale: true,
      boundaryGap: false,
      axisLine: { onZero: false },
      axisTick: { show: false },
      splitLine: { show: false },
      axisLabel: { show: false },
      min: 'dataMin',
      max: 'dataMax'
    }
  ],
  yAxis: [
    {
      scale: true,
      splitArea: {
        show: true
      }
    },
    {
      scale: true,
      gridIndex: 1,
      splitNumber: 2,
      axisLabel: { show: false },
      axisLine: { show: false },
      axisTick: { show: false },
      splitLine: { show: false }
    }
  ],
  dataZoom: [
    {
      type: 'inside',
      xAxisIndex: [0, 1],
      start: 10,
      end: 100
    },
    {
      show: true,
      xAxisIndex: [0, 1],
      type: 'slider',
      bottom: 10,
      start: 10,
      end: 100
    }
  ],
  visualMap: {
    show: false,
    seriesIndex: 1,
    dimension: 6,
    pieces: [
      {
        value: 1,
        color: '#00da3c'
      },
      {
        value: -1,
        color: '#ec0000'
      }
    ]
  },
  series: [
    {
      type: 'candlestick',
      itemStyle: {
        color: '#ec0000',
        color0: '#00da3c',
        borderColor: undefined,
        borderColor0: undefined
      }
    },
    {
      name: 'Volume',
      type: 'bar',
      xAxisIndex: 1,
      yAxisIndex: 1,
      itemStyle: {
        color: '#7fbe9e'
      }
    }
  ]
};

----------------------------------------

TITLE: Initializing and Using ECharts Simple Option Player in JavaScript
DESCRIPTION: This snippet demonstrates how to initialize and use the ECharts Simple Option Player. It covers creating the player instance, configuring options, and controlling playback. The code showcases the structure of the configuration object, including chart initialization, series index, replace merge settings, data meta information, and option list.

LANGUAGE: javascript
CODE:
const myChart = echarts.init(dom);

// Firstly, Initialize with an array of echarts option info:

const player = ecSimpleOptionPlayer.create({

    /**
     * Mandatory.
     *
     * `chart` can be the echarts instance
     * or chart instance getter function.
     */
    chart: function () {
        return myChart;
    },

    /**
     * Optional.
     *
     * By default `0`.
     */
    seriesIndex: 0,

    /**
     * Optional.
     *
     * If some component type are declared here,
     * when changing option, those types of components will be updated
     * follow the REPLACE_MERGE rule.
     * That is, all of the old components will be replaced by the new one
     * (except those mapped by the same id).
     * If not specified, when option changed, component will follow the
     * NORMAL_MERGE rule, where none of the existing components will be removed
     * but only merged by new ones.
     *
     * See https://echarts.apache.org/en/api.html#echartsInstance.setOption
     * for more details of REPLACE_MERGE and NORMAL_MERGE rule.
     */
    replaceMerge: ['xAxis', 'yAxis']

    /**
     * Mandatory.
     *
     * The data meta info used to determine how to make transition parameter when
     * calling `myChart.setOption` internally.
     *
     * See the example below:
     * `'aaa'`, `'bbb'` are "dataMetaKey", named by user,
     * and can be referenced in `optionList` for each `option`.
     *
     * The rule is:
     *     The field `dimensions` defines a list of dimension names.
     *     The field `uniqueDimension` uniqueDimension a single dimension name.
     *     If the `option_A` is about to switch to the `option_B`,
     *     suppose `option_A` reference `dataMeta` `aaa` and `option_B` reference `dataMeta` `bbb`,
     *     if `aaa.uniqueDimension` in `bbb.dimensions` or `bbb.uniqueDimension` in `aaa.dimensions`,
     *     we can make transition animation (combine and separate effect).
     */
    dataMeta: {
        aaa: {
            dimensions: ['qqq', 'www', 'eee', 'rrr']
        },
        bbb: {
            dimensions: ['ccc', 'www', 'eee'],
            uniqueDimension: 'www',
            // Can be 'duplicate' or 'split'
            dividingMethod: 'duplicate'
        },
        ...
    },

    /**
     * echarts option collection:
     */
    optionList: [
        // dataMetaKey is the key of 'dataMeta'.
        { key: 'Time_Income_Bar', option: option0, dataMetaKey: 'aaa' },
        { key: 'Population_Income_Scatter', option: option1, dataMetaKey: 'bbb' },
        { key: 'Time_Income_Pie', option: option2, dataMetaKey: 'aaa' },
        ...
    ]
});


// Then start to play:

// Display next option (from the first option).
player.next();
// Display previous option.
player.previous();
// Display the specified option.
player.go('Time_Income_Pie');
// return `['Time_Income_Bar', 'Population_Income_Scatter', 'Time_Income_Pie']`
player.getOptionKeys();

----------------------------------------

TITLE: Configuring 3D Metal Surface Visualization with ECharts GL
DESCRIPTION: This code snippet sets up an ECharts option for rendering a 3D parametric surface with metal material. It defines the surface equation, material properties, lighting, and camera positioning for the visualization.

LANGUAGE: javascript
CODE:
option = {
    tooltip: {},
    visualMap: {
        show: false,
        dimension: 2,
        min: -1,
        max: 1,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        }
    },
    xAxis3D: {},
    yAxis3D: {},
    zAxis3D: {},
    grid3D: {
        show: false,
        postEffect: {
            enable: true,
            SSAO: {
                enable: true,
                radius: 4
            }
        },
        temporalSuperSampling: {
            enable: true
        },
        light: {
            main: {
                intensity: 2,
                shadow: true
            },
            ambient: {
                intensity: 0
            },
            ambientCubemap: {
                texture: 'data-gl/asset/canyon.hdr',
                exposure: 2,
                diffuseIntensity: 0.2,
                specularIntensity: 1
            }
        },
        viewControl: {
            distance: 80
        }
    },
    series: [{
        type: 'surface',
        parametric: true,
        parametricEquation: {
            u: {
                min: -Math.PI,
                max: Math.PI,
                step: Math.PI / 20
            },
            v: {
                min: 0,
                max: Math.PI,
                step: Math.PI / 20
            },
            x: function (u, v) {
                return (3 + Math.cos(v)) * Math.cos(u);
            },
            y: function (u, v) {
                return (3 + Math.cos(v)) * Math.sin(u);
            },
            z: function (u, v) {
                return Math.sin(v);
            }
        },
        shading: 'realistic',
        realisticMaterial: {
            roughness: 0.2,
            metalness: 1
        }
    }]
}

----------------------------------------

TITLE: Creating Error Scatter Chart with Data Zoom using ECharts in JavaScript
DESCRIPTION: This code snippet initializes an ECharts instance and configures it to display an error scatter chart with data zoom functionality. It sets up the chart options including axis settings, series data, and custom error bar styling.

LANGUAGE: JavaScript
CODE:
var data = [];
var data2 = [];

for (var i = 0; i < 100; i++) {
  data.push([
    (Math.random() * 100).toFixed(2) - 0,
    (Math.random() * 100).toFixed(2) - 0,
    (Math.random() * 30).toFixed(2) - 0
  ]);
  data2.push([+data[i][0], +data[i][1]]);
}

var option = {
  title: {
    text: 'Error Scatter on Catesian',
    left: 'center'
  },
  legend: {
    data: ['scatter'],
    left: 'left'
  },
  tooltip: {
    trigger: 'item',
    axisPointer: {
      type: 'cross'
    }
  },
  xAxis: {},
  yAxis: {},
  dataZoom: [
    {
      type: 'inside',
      xAxisIndex: [0],
      start: 10,
      end: 90
    },
    {
      type: 'inside',
      yAxisIndex: [0],
      start: 10,
      end: 90
    },
    {
      type: 'slider',
      xAxisIndex: [0],
      start: 10,
      end: 90
    },
    {
      type: 'slider',
      yAxisIndex: [0],
      start: 10,
      end: 90
    }
  ],
  series: [
    {
      name: 'scatter',
      type: 'scatter',
      data: data2,
      dimensions: ['x', 'y'],
      encode: {
        x: 0,
        y: 1,
        tooltip: [0, 1]
      }
    },
    {
      name: 'error',
      type: 'custom',
      data: data,
      renderItem: function (params, api) {
        var xValue = api.value(0);
        var yValue = api.value(1);
        var zValue = api.value(2);
        var coordsV = api.coord([xValue, yValue]);
        var coordsH = api.coord([xValue - zValue, yValue]);

        return {
          type: 'group',
          children: [
            {
              type: 'line',
              shape: {
                x1: coordsV[0],
                y1: coordsV[1] - zValue,
                x2: coordsV[0],
                y2: coordsV[1] + zValue
              },
              style: api.style({
                stroke: 'red',
                fill: null
              })
            },
            {
              type: 'line',
              shape: {
                x1: coordsH[0],
                y1: coordsV[1],
                x2: coordsH[0] + zValue * 2,
                y2: coordsV[1]
              },
              style: api.style({
                stroke: 'red',
                fill: null
              })
            }
          ]
        };
      },
      dimensions: ['x', 'y', 'z'],
      encode: {
        x: 0,
        y: 1,
        z: 2,
        tooltip: [0, 1, 2]
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Calendar Effectscatter Chart in ECharts
DESCRIPTION: This code snippet sets up a complete configuration for an ECharts calendar effect scatter plot. It includes data generation, calendar setup, visual mapping, and series configuration for a heat map-style visualization.

LANGUAGE: javascript
CODE:
option = {
  visualMap: {
    show: false,
    min: 0,
    max: 1000
  },
  calendar: {
    range: '2017'
  },
  series: {
    type: 'effectScatter',
    coordinateSystem: 'calendar',
    data: getVirtulData(2017),
    symbolSize: function (val) {
      return val[1] / 40;
    },
    itemStyle: {
      color: '#f4e925'
    }
  }
};

function getVirtulData(year) {
  year = year || '2017';
  var date = +echarts.number.parseDate(year + '-01-01');
  var end = +echarts.number.parseDate(+year + 1 + '-01-01');
  var dayTime = 3600 * 24 * 1000;
  var data = [];
  for (var time = date; time < end; time += dayTime) {
    data.push([
      echarts.format.formatTime('yyyy-MM-dd', time),
      Math.floor(Math.random() * 1000)
    ]);
  }
  return data;
}

----------------------------------------

TITLE: Creating a Basic Candlestick Chart with ECharts in JavaScript
DESCRIPTION: This code snippet initializes data for a candlestick chart, configures the chart options including axes, series, and visual map, and then renders the chart using ECharts. It demonstrates how to set up a basic financial chart with opening, closing, highest, and lowest price data points.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    data: ['2017-10-24', '2017-10-25', '2017-10-26', '2017-10-27']
  },
  yAxis: {},
  series: [
    {
      type: 'candlestick',
      data: [
        [20, 34, 10, 38],
        [40, 35, 30, 50],
        [31, 38, 33, 44],
        [38, 15, 5, 42]
      ]
    }
  ]
};

----------------------------------------

TITLE: Creating Line Chart with Gradient Colors in ECharts
DESCRIPTION: This code snippet demonstrates how to create a line chart with gradient colors for both the line and the area below it using ECharts. It sets up the chart options, including axis configuration, series data, and gradient color definitions.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [820, 932, 901, 934, 1290, 1330, 1320],
      type: 'line',
      smooth: true,
      lineStyle: {
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          {
            offset: 0,
            color: 'rgb(255, 0, 0)'
          },
          {
            offset: 1,
            color: 'rgb(0, 0, 255)'
          }
        ])
      },
      areaStyle: {
        opacity: 0.8,
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          {
            offset: 0,
            color: 'rgb(255, 0, 0)'
          },
          {
            offset: 1,
            color: 'rgb(0, 0, 255)'
          }
        ])
      }
    }
  ]
};

----------------------------------------

TITLE: Initializing Dynamic Graph Visualization with ECharts in JavaScript
DESCRIPTION: This snippet sets up the initial graph structure and configuration for an ECharts graph visualization. It defines the chart options, including layout type, force simulation parameters, and node/edge styles.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Dynamic Graph'
  },
  tooltip: {},
  animationDurationUpdate: 1500,
  animationEasingUpdate: 'quinticInOut',
  series: [
    {
      type: 'graph',
      layout: 'force',
      symbolSize: 50,
      roam: true,
      label: {
        show: true
      },
      edgeSymbol: ['circle', 'arrow'],
      edgeSymbolSize: [4, 10],
      edgeLabel: {
        fontSize: 20
      },
      data: [{
        name: 'Node 1',
        x: 300,
        y: 300
      }, {
        name: 'Node 2',
        x: 800,
        y: 300
      }, {
        name: 'Node 3',
        x: 550,
        y: 100
      }, {
        name: 'Node 4',
        x: 550,
        y: 500
      }],
      // links: [],
      links: [{
        source: 0,
        target: 1,
        symbolSize: [5, 20],
        label: {
          show: true
        },
        lineStyle: {
          width: 5,
          curveness: 0.2
        }
      }, {
        source: 'Node 2',
        target: 'Node 1',
        label: {
          show: true
        },
        lineStyle: {
          curveness: 0.2
        }
      }, {
        source: 'Node 1',
        target: 'Node 3'
      }, {
        source: 'Node 2',
        target: 'Node 3'
      }, {
        source: 'Node 2',
        target: 'Node 4'
      }, {
        source: 'Node 1',
        target: 'Node 4'
      }],
      lineStyle: {
        opacity: 0.9,
        width: 2,
        curveness: 0
      }
    }
  ]
};

----------------------------------------

TITLE: Creating a Bar Chart with Dataset in ECharts
DESCRIPTION: This snippet shows how to use the dataset feature in ECharts to create a simple bar chart. It defines the data structure and configures chart options including x-axis, y-axis, and series.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      ['product', '2015', '2016', '2017'],
      ['Matcha Latte', 43.3, 85.8, 93.7],
      ['Milk Tea', 83.1, 73.4, 55.1],
      ['Cheese Cocoa', 86.4, 65.2, 82.5],
      ['Walnut Brownie', 72.4, 53.9, 39.1]
    ]
  },
  xAxis: { type: 'category' },
  yAxis: {},
  // Declare several bar series, each will be mapped
  // to a column of dataset.source by default.
  series: [{ type: 'bar' }, { type: 'bar' }, { type: 'bar' }]
};

----------------------------------------

TITLE: Configuring Confidence Band Chart with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to configure a confidence band chart using ECharts. It sets up the chart options, including axis settings, series data, and visual styles for the confidence band.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Confidence Band'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross',
      animation: false,
      label: {
        backgroundColor: '#ccc',
        borderColor: '#aaa',
        borderWidth: 1,
        shadowBlur: 0,
        shadowOffsetX: 0,
        shadowOffsetY: 0,
        color: '#222'
      }
    },
    formatter: function (params) {
      return params[2].name + '<br />' + params[2].value;
    }
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  xAxis: {
    type: 'category',
    data: [
      'Mon',
      'Tue',
      'Wed',
      'Thu',
      'Fri',
      'Sat',
      'Sun'
    ],
    axisLabel: {
      formatter: '{value}'
    },
    splitLine: {
      show: false
    },
    boundaryGap: false
  },
  yAxis: {
    type: 'value',
    axisLabel: {
      formatter: '{value}'
    },
    splitLine: {
      show: false
    }
  },
  series: [
    {
      name: 'L',
      type: 'line',
      data: [96, 100, 85, 110, 80, 100, 90],
      showSymbol: false,
      lineStyle: {
        width: 0
      },
      stack: 'confidence-band',
      symbol: 'none'
    },
    {
      name: 'U',
      type: 'line',
      data: [105, 125, 90, 120, 90, 110, 100],
      showSymbol: false,
      lineStyle: {
        width: 0
      },
      areaStyle: {
        color: '#ccc'
      },
      stack: 'confidence-band',
      symbol: 'none'
    },
    {
      type: 'line',
      data: [100, 120, 85, 115, 87, 105, 95],
      hoverAnimation: false,
      symbolSize: 6,
      itemStyle: {
        color: '#c23531'
      },
      showSymbol: false
    }
  ]
};

----------------------------------------

TITLE: Creating Basic Calendar Chart with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a basic calendar chart using ECharts. It sets up the chart options including the calendar component, visual map for data styling, and series data. The calendar displays data for the year 2017 with color-coded values.

LANGUAGE: javascript
CODE:
option = {
  visualMap: {
    show: false,
    min: 0,
    max: 1000
  },
  calendar: {
    range: '2017'
  },
  series: {
    type: 'heatmap',
    coordinateSystem: 'calendar',
    data: getVirtulData(2017)
  }
};

----------------------------------------

TITLE: Configuring Shared Dataset for Line and Pie Charts in ECharts
DESCRIPTION: This code snippet sets up a shared dataset and configures multiple charts (line and pie) to use it. It demonstrates how to structure data for multiple chart types and link them together using a common dataset in ECharts.

LANGUAGE: javascript
CODE:
option = {
  legend: {},
  tooltip: {
    trigger: 'axis',
    showContent: false
  },
  dataset: {
    source: [
      ['product', '2012', '2013', '2014', '2015', '2016', '2017'],
      ['Milk Tea', 56.5, 82.1, 88.7, 70.1, 53.4, 85.1],
      ['Matcha Latte', 51.1, 51.4, 55.1, 53.3, 73.8, 68.7],
      ['Cheese Cocoa', 40.1, 62.2, 69.5, 36.4, 45.2, 32.5],
      ['Walnut Brownie', 25.2, 37.1, 41.2, 18, 33.9, 49.1]
    ]
  },
  xAxis: { type: 'category' },
  yAxis: { gridIndex: 0 },
  grid: { top: '55%' },
  series: [
    {
      type: 'line',
      smooth: true,
      seriesLayoutBy: 'row',
      emphasis: { focus: 'series' }
    },
    {
      type: 'line',
      smooth: true,
      seriesLayoutBy: 'row',
      emphasis: { focus: 'series' }
    },
    {
      type: 'line',
      smooth: true,
      seriesLayoutBy: 'row',
      emphasis: { focus: 'series' }
    },
    {
      type: 'line',
      smooth: true,
      seriesLayoutBy: 'row',
      emphasis: { focus: 'series' }
    },
    {
      type: 'pie',
      id: 'pie',
      radius: '30%',
      center: ['50%', '25%'],
      emphasis: {
        focus: 'self'
      },
      label: {
        formatter: '{b}: {@2012} ({d}%)'
      },
      encode: {
        itemName: 'product',
        value: '2012',
        tooltip: '2012'
      }
    }
  ]
};

myChart.on('updateAxisPointer', function (event) {
  const xAxisInfo = event.axesInfo[0];
  if (xAxisInfo) {
    const dimension = xAxisInfo.value + 1;
    myChart.setOption({
      series: {
        id: 'pie',
        label: {
          formatter: '{b}: {@[' + dimension + ']} ({d}%)'
        },
        encode: {
          value: dimension,
          tooltip: dimension
        }
      }
    });
  }
});

myChart.setOption(option);

----------------------------------------

TITLE: Building Apache ECharts from Source
DESCRIPTION: Instructions for building ECharts source code using npm commands. Includes steps for installing dependencies, running development mode with watch capabilities, type checking, and creating production builds.

LANGUAGE: shell
CODE:
# Install the dependencies from NPM:
npm install

# Rebuild source code immediately in watch mode when changing the source code.
# It opens the `./test` directory, and you may open `-cases.html` to get the list
# of all test cases.
# If you wish to create a test case, run `npm run mktest:help` to learn more.
npm run dev

# Check the correctness of TypeScript code.
npm run checktype

# If intending to build and get all types of the "production" files:
npm run release

----------------------------------------

TITLE: Creating a Simple Bar Chart with ECharts in JavaScript
DESCRIPTION: This code snippet initializes an ECharts instance and configures a simple bar chart. It sets up the x-axis with categorical data, the y-axis, and the series data for the bars. The chart is then rendered using the specified options.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [120, 200, 150, 80, 70, 110, 130],
      type: 'bar'
    }
  ]
};

----------------------------------------

TITLE: Configuring Moon Visualization with ECharts Globe in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up a moon visualization using ECharts Globe. It includes configuration for the globe, atmosphere, moon texture, and light settings to create a realistic rendering of the moon's surface.

LANGUAGE: javascript
CODE:
option = {
    backgroundColor: '#000',
    globe: {
        baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',
        heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',
        displacementScale: 0.1,
        shading: 'realistic',
        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',
        realisticMaterial: {
            roughness: 0.2,
            metalness: 0
        },
        postEffect: {
            enable: true,
            depthOfField: {
                focalRange: 15
            }
        },
        light: {
            ambient: {
                intensity: 0
            },
            main: {
                intensity: 0.1,
                shadow: false
            },
            ambientCubemap: {
                texture: ROOT_PATH + '/data-gl/asset/pisa.hdr',
                exposure: 1,
                diffuseIntensity: 0.2,
                specularIntensity: 1
            }
        },
        viewControl: {
            autoRotate: false
        }
    },
    series: []
}

----------------------------------------

TITLE: Importing Full ECharts-GL in JavaScript
DESCRIPTION: Example of importing the full ECharts library and ECharts-GL extension in a JavaScript module.

LANGUAGE: javascript
CODE:
import * as echarts from 'echarts';
import 'echarts-gl';

----------------------------------------

TITLE: Configuring ThemeRiver Chart with LastFM Data in ECharts
DESCRIPTION: This snippet demonstrates how to set up a ThemeRiver chart in ECharts using LastFM music listening data. It includes configuration for the x-axis (time), y-axis, series data, and tooltip. The chart visualizes listening trends for different artists over time.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'line',
      lineStyle: {
        color: 'rgba(0,0,0,0.2)',
        width: 1,
        type: 'solid'
      }
    }
  },
  legend: {
    data: ['The Sea', 'Pastoral', 'Vagary', 'Helen', 'Tangent', 'Parallel']
  },
  singleAxis: {
    top: 50,
    bottom: 50,
    axisTick: {},
    axisLabel: {},
    type: 'time',
    axisPointer: {
      animation: true,
      label: {
        show: true
      }
    },
    splitLine: {
      show: true,
      lineStyle: {
        type: 'dashed',
        opacity: 0.2
      }
    }
  },
  series: [
    {
      type: 'themeRiver',
      emphasis: {
        itemStyle: {
          shadowBlur: 20,
          shadowColor: 'rgba(0, 0, 0, 0.8)'
        }
      },
      data: [
        ['2015/11/08', 10, 'Pastoral'],
        ['2015/11/09', 15, 'Pastoral'],
        ['2015/11/10', 35, 'Pastoral'],
        // ... more data ...
        ['2015/11/14', 7, 'The Sea'],
        ['2015/11/15', 2, 'The Sea'],
        ['2015/11/16', 17, 'The Sea']
      ]
    }
  ]
};

----------------------------------------

TITLE: Creating Custom Bar Trend Chart with ECharts in JavaScript
DESCRIPTION: This snippet demonstrates how to create a custom bar trend chart using ECharts. It includes data preparation, chart options configuration, and styling for visualizing trends. The chart features gradient-colored bars, custom tooltips, and a responsive layout.

LANGUAGE: javascript
CODE:
option = {
  backgroundColor: '#0f375f',
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'shadow'
    }
  },
  legend: {
    data: ['line', 'bar'],
    textStyle: {
      color: '#ccc'
    }
  },
  xAxis: {
    data: [
      '2012-12-31',
      '2013-01-31',
      '2013-02-28',
      '2013-03-31',
      '2013-04-30',
      '2013-05-31',
      '2013-06-30',
      '2013-07-31',
      '2013-08-31',
      '2013-09-30',
      '2013-10-31',
      '2013-11-30',
      '2013-12-31'
    ],
    axisLine: {
      lineStyle: {
        color: '#ccc'
      }
    }
  },
  yAxis: {
    splitLine: { show: false },
    axisLine: {
      lineStyle: {
        color: '#ccc'
      }
    }
  },
  series: [
    {
      name: 'line',
      type: 'line',
      smooth: true,
      showAllSymbol: true,
      symbol: 'emptyCircle',
      symbolSize: 15,
      data: [
        '-1.50',
        '-2.34',
        '3.72',
        '-1.18',
        '0.78',
        '-2.95',
        '3.80',
        '3.69',
        '-3.52',
        '2.60',
        '1.13',
        '3.49',
        '1.49'
      ]
    },
    {
      name: 'bar',
      type: 'bar',
      barWidth: 10,
      itemStyle: {
        borderRadius: 5,
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          { offset: 0, color: '#14c8d4' },
          { offset: 1, color: '#43eec6' }
        ])
      },
      data: [
        '-1.50',
        '-2.34',
        '3.72',
        '-1.18',
        '0.78',
        '-2.95',
        '3.80',
        '3.69',
        '-3.52',
        '2.60',
        '1.13',
        '3.49',
        '1.49'
      ]
    }
  ]
};

----------------------------------------

TITLE: Creating Disk Usage Treemap with ECharts in JavaScript
DESCRIPTION: This snippet initializes data for a disk usage treemap, configures chart options including series type, label formatting, and color ranges, and renders the chart using ECharts. It visualizes disk space usage across different directories and files.

LANGUAGE: javascript
CODE:
var chartDom = document.getElementById('main');
var myChart = echarts.init(chartDom);
var option;

function formatUtil(value) {
  if (value === 0) {
    return '0 B';
  }
  var k = 1024;
  var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  var i = Math.floor(Math.log(value) / Math.log(k));
  return (value / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
}

option = {
  title: {
    text: 'Disk Usage',
    left: 'center'
  },
  tooltip: {
    formatter: function (info) {
      var value = info.value;
      var treePathInfo = info.treePathInfo;
      var treePath = [];
      for (var i = 1; i < treePathInfo.length; i++) {
        treePath.push(treePathInfo[i].name);
      }
      return [
        '<div class="tooltip-title">' +
          formatUtil(value) +
          '</div>',
        treePath.join('/')]
        .join('');
    }
  },
  series: [
    {
      name: 'Disk Usage',
      type: 'treemap',
      visibleMin: 300,
      label: {
        show: true,
        formatter: '{b}'
      },
      upperLabel: {
        show: true,
        height: 30
      },
      itemStyle: {
        borderColor: '#fff'
      },
      levels: [
        {
          itemStyle: {
            borderColor: '#777',
            borderWidth: 0,
            gapWidth: 1
          },
          upperLabel: {
            show: false
          }
        },
        {
          itemStyle: {
            borderColor: '#555',
            borderWidth: 5,
            gapWidth: 1
          },
          emphasis: {
            itemStyle: {
              borderColor: '#ddd'
            }
          }
        },
        {
          colorSaturation: [0.35, 0.5],
          itemStyle: {
            borderWidth: 5,
            gapWidth: 1,
            borderColorSaturation: 0.6
          }
        }
      ],
      data: [
        {
          name: 'nodeA',
          value: 10,
          children: [
            {
              name: 'nodeAa',
              value: 4
            },
            {
              name: 'nodeAb',
              value: 6
            }
          ]
        },
        {
          name: 'nodeB',
          value: 20,
          children: [
            {
              name: 'nodeBa',
              value: 20,
              children: [
                {
                  name: 'nodeBa1',
                  value: 20
                }
              ]
            }
          ]
        }
      ]
    }
  ]
};

option && myChart.setOption(option);

----------------------------------------

TITLE: Creating Basic Treemap Chart with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a basic treemap chart using ECharts. It sets up the chart options including series type, data, and visual properties like leaf depth and color saturation range.

LANGUAGE: javascript
CODE:
option = {
  series: [
    {
      type: 'treemap',
      data: [
        {
          name: 'nodeA',
          value: 10,
          children: [
            {
              name: 'nodeAa',
              value: 4
            },
            {
              name: 'nodeAb',
              value: 6
            }
          ]
        },
        {
          name: 'nodeB',
          value: 20,
          children: [
            {
              name: 'nodeBa',
              value: 20,
              children: [
                {
                  name: 'nodeBa1',
                  value: 20
                }
              ]
            }
          ]
        }
      ],
      leafDepth: 2,
      colorSaturation: [0.3, 0.6]
    }
  ]
};

----------------------------------------

TITLE: Initializing Large Scale Scatter Plot with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a large scale scatter plot using ECharts. It sets up the chart options, generates random data points, and renders the chart.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {},
  toolbox: {
    left: 'center',
    feature: {
      dataZoom: {}
    }
  },
  grid: {
    right: '3%'
  },
  xAxis: {},
  yAxis: {},
  series: [{
    symbolSize: 3,
    type: 'scatter',
    data: (() => {
      const d = [];
      for (let i = 0; i < 30000; i++) {
        d.push([Math.random() * 5, Math.random() * 4, Math.random() * 20]);
      }
      return d;
    })()
  }]
};

----------------------------------------

TITLE: Configuring ECharts Scatter Plot for Height and Weight Distribution in JavaScript
DESCRIPTION: This code snippet sets up an ECharts scatter plot to display the distribution of height and weight for male and female populations. It includes data generation, axis configuration, and series definition for both genders.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Height and weight',
    subtext: 'Data from: Heinz  2003'
  },
  grid: {
    left: '3%',
    right: '7%',
    bottom: '3%',
    containLabel: true
  },
  tooltip: {
    // trigger: 'axis',
    showDelay: 0,
    formatter: function (params) {
      if (params.value.length > 1) {
        return (
          params.seriesName +
          ' :<br/>' +
          params.value[0] +
          'cm ' +
          params.value[1] +
          'kg '
        );
      } else {
        return (
          params.seriesName +
          ' :<br/>' +
          params.name +
          ' : ' +
          params.value +
          'kg '
        );
      }
    },
    axisPointer: {
      show: true,
      type: 'cross',
      lineStyle: {
        type: 'dashed',
        width: 1
      }
    }
  },
  toolbox: {
    feature: {
      dataZoom: {},
      brush: {
        type: ['rect', 'polygon', 'clear']
      }
    }
  },
  brush: {},
  legend: {
    data: ['Female', 'Male'],
    left: 'center',
    bottom: 10
  },
  xAxis: [
    {
      type: 'value',
      scale: true,
      axisLabel: {
        formatter: '{value} cm'
      },
      splitLine: {
        show: false
      }
    }
  ],
  yAxis: [
    {
      type: 'value',
      scale: true,
      axisLabel: {
        formatter: '{value} kg'
      },
      splitLine: {
        show: false
      }
    }
  ],
  series: [
    {
      name: 'Female',
      type: 'scatter',
      emphasis: {
        focus: 'series'
      },
      data: [
        [161.2, 51.6],
        [167.5, 59.0],
        [159.5, 49.2],
        [157.0, 63.0],
        [155.8, 53.6],
        [170.0, 59.0],
        [159.1, 47.6],
        [166.0, 69.8],
        [176.2, 66.8],
        [160.2, 75.2],
        [172.5, 55.2],
        [170.9, 54.2],
        [172.9, 62.5],
        [153.4, 42.0],
        [160.0, 50.0],
        [147.2, 49.8],
        [168.2, 49.2],
        [175.0, 73.2],
        [157.0, 47.8],
        [167.6, 68.8]
      ],
      markArea: {
        silent: true,
        itemStyle: {
          color: 'transparent',
          borderWidth: 1,
          borderType: 'dashed'
        },
        data: [
          [
            {
              name: 'Female Data Range',
              xAxis: 'min',
              yAxis: 'min'
            },
            {
              xAxis: 'max',
              yAxis: 'max'
            }
          ]
        ]
      }
    },
    {
      name: 'Male',
      type: 'scatter',
      emphasis: {
        focus: 'series'
      },
      data: [
        [174.0, 65.6],
        [175.3, 71.8],
        [193.5, 80.7],
        [186.5, 72.6],
        [187.2, 78.8],
        [181.5, 74.8],
        [184.0, 86.4],
        [184.5, 78.4],
        [175.0, 62.0],
        [184.0, 81.6],
        [180.0, 76.6],
        [177.8, 83.6],
        [192.0, 90.0],
        [176.0, 74.6],
        [174.0, 71.0],
        [184.0, 79.6],
        [192.7, 93.8],
        [171.5, 70.0],
        [173.0, 72.4],
        [176.0, 85.9]
      ],
      markArea: {
        silent: true,
        itemStyle: {
          color: 'transparent',
          borderWidth: 1,
          borderType: 'dashed'
        },
        data: [
          [
            {
              name: 'Male Data Range',
              xAxis: 'min',
              yAxis: 'min'
            },
            {
              xAxis: 'max',
              yAxis: 'max'
            }
          ]
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Initializing Globe with ECharts Surface in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a globe visualization with an interactive ECharts surface using echarts-gl. It sets up the chart options, including the globe component and series data for the surface.

LANGUAGE: javascript
CODE:
var option = {
    backgroundColor: '#000',
    globe: {
        baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',
        heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',
        displacementScale: 0.1,
        shading: 'lambert',
        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',
        light: {
            ambient: {
                intensity: 0.1
            },
            main: {
                intensity: 1.5
            }
        },
        layers: [{
            type: 'blend',
            blendTo: 'emission',
            texture: echarts.graphicUtil.createLinearGradient({
                x: 0, y: 0, x2: 1, y2: 0,
                colorStops: [{
                    offset: 0, color: '#00aaff'
                }, {
                    offset: 0.7, color: '#00aaff'
                }, {
                    offset: 0.9, color: '#00aaff'
                }, {
                    offset: 1, color: '#00aaff'
                }]
            })
        }]
    },
    series: [{
        type: 'surface',
        silent: true,
        wireframe: {
            show: false
        },
        itemStyle: {
            color: 'rgb(0, 100, 226)'
        },
        data: data,
        parametric: true,
        parametricEquation: {
            u: {
                min: -Math.PI,
                max: Math.PI,
                step: Math.PI / 20
            },
            v: {
                min: 0,
                max: Math.PI,
                step: Math.PI / 20
            },
            x: function (u, v) {
                return Math.sin(v) * Math.cos(u);
            },
            y: function (u, v) {
                return Math.sin(v) * Math.sin(u);
            },
            z: function (u, v) {
                return Math.cos(v);
            }
        }
    }]
};

----------------------------------------

TITLE: Configuring Calendar Heatmap in ECharts
DESCRIPTION: This snippet shows the complete configuration for creating a calendar heatmap in ECharts. It sets up the calendar layout, defines a visualMap for color mapping, and configures the heatmap series with sample data.

LANGUAGE: javascript
CODE:
option = {
  title: {
    top: 30,
    left: 'center',
    text: 'Daily Step Count'
  },
  tooltip: {},
  visualMap: {
    min: 0,
    max: 10000,
    type: 'continuous',
    orient: 'horizontal',
    left: 'center',
    bottom: 65
  },
  calendar: {
    top: 120,
    left: 30,
    right: 30,
    cellSize: ['auto', 13],
    range: '2016',
    itemStyle: {
      borderWidth: 0.5
    },
    yearLabel: { show: false }
  },
  series: {
    type: 'heatmap',
    coordinateSystem: 'calendar',
    data: getVirtulData(2016)
  }
};

----------------------------------------

TITLE: Regression Analysis Example
DESCRIPTION: Shows how to perform regression analysis with different regression types

LANGUAGE: javascript
CODE:
var myRegression = ecStat.regression(regressionType, data, opt);
// or
var myRegression = ecStat.regression('polynomial', data, order);

----------------------------------------

TITLE: Generating Wind Barb Path in ECharts
DESCRIPTION: This code snippet defines the getWindBarbPath function, which generates the SVG path for a wind barb based on wind speed. It calculates the number of flags, full barbs, and half barbs to represent the wind speed accurately.

LANGUAGE: javascript
CODE:
function getWindBarbPath(speed, height) {
  const sanityHeight = Math.max(height, 0);
  const flagLength = sanityHeight * 0.4;
  const fullBarLength = sanityHeight * 0.3;
  const halfBarLength = sanityHeight * 0.2;
  const emptyBarLength = sanityHeight * 0.1;
  const flagSpacing = sanityHeight * 0.1;
  const barSpacing = sanityHeight * 0.1;
  const fullBar = 10;
  const halfBar = 5;

  const flags = Math.floor(speed / 50);
  let fullBarbs = Math.floor((speed % 50) / fullBar);
  const halfBarb = Math.floor((speed % 10) / halfBar) > 0 ? 1 : 0;

  let path = `M0,0 V${-sanityHeight}`;

  // Flags
  for (let i = 0; i < flags; i++) {
    path += `M0,${-sanityHeight + i * flagSpacing} l${flagLength},${flagLength / 2} V${-sanityHeight + (i + 1) * flagSpacing}`;
  }

  // Full barbs
  const fullBarbStart = -sanityHeight + flags * flagSpacing;
  for (let i = 0; i < fullBarbs; i++) {
    path += `M0,${fullBarbStart + i * barSpacing} l${fullBarLength},0`;
  }

  // Half barb
  if (halfBarb === 1) {
    path += `M0,${fullBarbStart + fullBarbs * barSpacing} l${halfBarLength},0`;
  }

  // Empty bar for calm winds
  if (flags === 0 && fullBarbs === 0 && halfBarb === 0) {
    path += `M0,${-sanityHeight} l${emptyBarLength},0`;
  }

  return path;
}

----------------------------------------

TITLE: Configuring ECharts Scatter Plot for Weibo Sign-in Data Visualization
DESCRIPTION: This code snippet sets up an ECharts scatter plot configuration to visualize Weibo sign-in data across China. It includes map styling, data point representation, and custom tooltip formatting.

LANGUAGE: javascript
CODE:
option = {
  backgroundColor: '#404a59',
  title: {
    text: '微博签到数据点亮中国',
    subtext: 'From ThinkGeo',
    sublink: 'http://www.thinkgeo.cn',
    left: 'center',
    top: 'top',
    textStyle: {
      color: '#fff'
    }
  },
  tooltip: {},
  legend: {
    left: 'left',
    data: ['强', '中', '弱'],
    textStyle: {
      color: '#ccc'
    }
  },
  geo: {
    map: 'china',
    label: {
      emphasis: {
        show: false
      }
    },
    itemStyle: {
      normal: {
        areaColor: '#323c48',
        borderColor: '#111'
      },
      emphasis: {
        areaColor: '#2a333d'
      }
    }
  },
  series: [
    {
      name: '弱',
      type: 'scatter',
      coordinateSystem: 'geo',
      symbolSize: 1,
      large: true,
      itemStyle: {
        normal: {
          shadowBlur: 2,
          shadowColor: 'rgba(37, 140, 249, 0.8)',
          color: 'rgba(37, 140, 249, 0.8)'
        }
      },
      data: weibo_data[0]
    },
    {
      name: '中',
      type: 'scatter',
      coordinateSystem: 'geo',
      symbolSize: 1,
      large: true,
      itemStyle: {
        normal: {
          shadowBlur: 2,
          shadowColor: 'rgba(14, 241, 242, 0.8)',
          color: 'rgba(14, 241, 242, 0.8)'
        }
      },
      data: weibo_data[1]
    },
    {
      name: '强',
      type: 'scatter',
      coordinateSystem: 'geo',
      symbolSize: 1,
      large: true,
      itemStyle: {
        normal: {
          shadowBlur: 2,
          shadowColor: 'rgba(255, 255, 255, 0.8)',
          color: 'rgba(255, 255, 255, 0.8)'
        }
      },
      data: weibo_data[2]
    }
  ]
};

----------------------------------------

TITLE: Creating Smoothed Line Chart with ECharts in JavaScript
DESCRIPTION: This code snippet sets up a smoothed line chart using ECharts. It defines the chart options including axis labels, legend, and series data with smooth line rendering enabled.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [820, 932, 901, 934, 1290, 1330, 1320],
      type: 'line',
      smooth: true
    }
  ]
};

----------------------------------------

TITLE: Creating 3D Mollusc Shell Visualization with Parametric Surface in ECharts-GL
DESCRIPTION: This code snippet demonstrates how to use ECharts-GL to create a 3D visualization of a mollusc shell using parametric equations. It sets up the chart options, defines the parametric equations for the shell's surface, and configures the 3D scene with lighting and camera controls.

LANGUAGE: javascript
CODE:
option = {
    tooltip: {},
    visualMap: {
        show: false,
        dimension: 2,
        min: -1,
        max: 1,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        }
    },
    xAxis3D: {},
    yAxis3D: {},
    zAxis3D: {},
    grid3D: {
        show: false,
        postEffect: {
            enable: true,
            SSAO: {
                enable: true,
                radius: 4
            }
        },
        temporalSuperSampling: {
            enable: true
        },
        light: {
            main: {
                intensity: 1,
                shadow: true
            },
            ambient: {
                intensity: 0
            },
            ambientCubemap: {
                texture: 'data-gl/asset/canyon.hdr',
                exposure: 2,
                diffuseIntensity: 0.2,
                specularIntensity: 1
            }
        },
        viewControl: {
            autoRotate: true
        }
    },
    series: [{
        type: 'surface',
        parametric: true,
        wireframe: {
            show: false
        },
        shading: 'realistic',
        realisticMaterial: {
            roughness: 0.4,
            metalness: 0
        },
        parametricEquation: {
            u: {
                min: -Math.PI,
                max: Math.PI * 3,
                step: Math.PI / 20
            },
            v: {
                min: -13.2,
                max: 5,
                step: 0.2
            },
            x: function (u, v) {
                var x = (1 - 0.1 * Math.cos(u)) * (Math.cos(u) * (1.2 + Math.sin(v)
                    + 2 * (1 - Math.sin(v)))) + 0.1 * Math.cos(u);
                return x;
            },
            y: function (u, v) {
                var y = (1 - 0.1 * Math.cos(u)) * (Math.sin(u) * (1.2 + Math.sin(v)
                    + 2 * (1 - Math.sin(v)))) + 0.1 * Math.sin(u);
                return y;
            },
            z: function (u, v) {
                var z = (v + Math.cos(u / 2) * Math.sin(v) - 1)
                    * (1 + 0.1 * Math.cos(u)) + 0.4 * v;
                return z;
            }
        }
    }]
};

----------------------------------------

TITLE: Configuring Parallel AQI Chart in ECharts
DESCRIPTION: This code snippet defines the configuration for a parallel coordinates chart in ECharts, focusing on AQI data visualization. It sets up parallel axes for different pollutants, configures visual mappings for color and opacity, and includes a data series with sample AQI values.

LANGUAGE: javascript
CODE:
option = {
  backgroundColor: '#333',
  legend: {
    bottom: 30,
    data: ['Beijing', 'Shanghai', 'Guangzhou'],
    itemGap: 20,
    textStyle: {
      color: '#fff',
      fontSize: 14
    }
  },
  tooltip: {
    padding: 10,
    backgroundColor: '#222',
    borderColor: '#777',
    borderWidth: 1
  },
  parallelAxis: [
    {
      dim: 0,
      name: 'Price'
    },
    {
      dim: 1,
      name: 'Net Weight'
    },
    {
      dim: 2,
      name: 'Amount'
    },
    {
      dim: 3,
      name: 'Score',
      type: 'category',
      data: ['Excellent', 'Good', 'OK', 'Bad']
    }
  ],
  visualMap: {
    show: true,
    min: 0,
    max: 150,
    dimension: 2,
    inRange: {
      color: ['#d94e5d', '#eac736', '#50a3ba'].reverse()
      // colorAlpha: [0, 1]
    }
  },
  parallel: {
    left: '5%',
    right: '18%',
    bottom: 100,
    parallelAxisDefault: {
      type: 'value',
      name: 'AQI指数',
      nameLocation: 'end',
      nameGap: 20,
      nameTextStyle: {
        color: '#fff',
        fontSize: 12
      },
      axisLine: {
        lineStyle: {
          color: '#aaa'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#777'
        }
      },
      splitLine: {
        show: false
      },
      axisLabel: {
        color: '#fff'
      }
    }
  },
  series: [
    {
      name: 'Beijing',
      type: 'parallel',
      lineStyle: {
        width: 1,
        opacity: 0.5
      },
      data: [
        [1, 55, 9, 56, 0.46, 18, 6, 'Good'],
        [2, 25, 11, 21, 0.65, 34, 9, 'Excellent'],
        [3, 56, 7, 63, 0.3, 14, 5, 'Good'],
        [4, 33, 7, 29, 0.33, 16, 6, 'Excellent'],
        [5, 42, 24, 44, 0.76, 40, 16, 'OK'],
        [6, 82, 58, 90, 1.77, 68, 33, 'Bad']
      ]
    },
    {
      name: 'Shanghai',
      type: 'parallel',
      lineStyle: {
        width: 1,
        opacity: 0.5
      },
      data: [
        [1, 26, 37, 27, 1.163, 27, 13, 'Excellent'],
        [2, 85, 62, 71, 1.195, 60, 8, 'Bad'],
        [3, 78, 38, 74, 1.363, 37, 7, 'Bad'],
        [4, 21, 21, 36, 0.634, 40, 9, 'Excellent'],
        [5, 41, 42, 46, 0.915, 81, 13, 'OK'],
        [6, 56, 52, 69, 1.067, 92, 16, 'Bad']
      ]
    },
    {
      name: 'Guangzhou',
      type: 'parallel',
      lineStyle: {
        width: 1,
        opacity: 0.5
      },
      data: [
        [1, 54, 60, 49, 1.6, 37, 13, 'Good'],
        [2, 60, 50, 88, 1.417, 51, 15, 'Bad'],
        [3, 65, 82, 65, 1.945, 82, 25, 'Bad'],
        [4, 55, 36, 62, 1.644, 68, 23, 'Good'],
        [5, 78, 82, 81, 1.832, 108, 45, 'Bad'],
        [6, 86, 92, 77, 1.802, 68, 27, 'Bad']
      ]
    }
  ]
};

----------------------------------------

TITLE: Implementing Wind Barb Rendering Function in ECharts
DESCRIPTION: This code snippet defines the renderWindBarb function used to render individual wind barbs in the chart. It calculates the barb's position, rotation, and size based on wind speed and direction data.

LANGUAGE: javascript
CODE:
function renderWindBarb(param, api) {
  const point = api.coord([api.value(0), api.value(1)]);
  const windSpeed = api.value(1);
  const windDirection = api.value(2);
  const windBarHeight = api.size([0, 1])[1] * 1.1;

  return {
    type: 'group',
    children: [
      {
        type: 'circle',
        shape: {
          cx: 0,
          cy: 0,
          r: 2
        },
        style: {
          stroke: '#000',
          fill: '#000'
        }
      },
      {
        type: 'path',
        shape: {
          pathData: getWindBarbPath(windSpeed, windBarHeight),
          x: 0,
          y: 0
        },
        style: {
          fill: api.visual('color')
        }
      }
    ],
    position: point,
    rotation: (windDirection * Math.PI) / 180,
    silent: true
  };
}

----------------------------------------

TITLE: Initializing and Configuring ECharts Map of China
DESCRIPTION: This code snippet sets up an ECharts instance to render a map of China. It configures the map's appearance, adds a tooltip, and visualizes data points on the map. The script also demonstrates how to handle map zooming and roaming.

LANGUAGE: javascript
CODE:
$.get(ROOT_PATH + '/data/asset/geo/china.json', function (chinaJson) {
  echarts.registerMap('china', chinaJson);
  var chart = echarts.init(document.getElementById('main'));
  chart.setOption({
    title: {
      text: '中国地图'
    },
    tooltip: {
      trigger: 'item',
      formatter: '{b}'
    },
    toolbox: {
      show: true,
      orient: 'vertical',
      left: 'right',
      top: 'center',
      feature: {
        dataView: { readOnly: false },
        restore: {},
        saveAsImage: {}
      }
    },
    visualMap: {
      min: 0,
      max: 2500,
      calculable: true,
      inRange: {
        color: ['lightskyblue', 'yellow', 'orangered']
      }
    },
    series: [
      {
        name: '中国地图',
        type: 'map',
        mapType: 'china',
        itemStyle: {
          normal: {
            areaColor: '#323c48',
            borderColor: '#111'
          },
          emphasis: {
            areaColor: '#2a333d'
          }
        },
        label: {
          normal: {
            show: true
          },
          emphasis: {
            show: true
          }
        },
        data: [
          { name: '北京', value: Math.round(Math.random() * 2000) },
          { name: '天津', value: Math.round(Math.random() * 2000) },
          { name: '上海', value: Math.round(Math.random() * 2000) },
          { name: '重庆', value: Math.round(Math.random() * 2000) },
          { name: '河北', value: Math.round(Math.random() * 2000) },
          { name: '河南', value: Math.round(Math.random() * 2000) },
          { name: '云南', value: Math.round(Math.random() * 2000) },
          { name: '辽宁', value: Math.round(Math.random() * 2000) },
          { name: '黑龙江', value: Math.round(Math.random() * 2000) },
          { name: '湖南', value: Math.round(Math.random() * 2000) },
          { name: '安徽', value: Math.round(Math.random() * 2000) },
          { name: '山东', value: Math.round(Math.random() * 2000) },
          { name: '新疆', value: Math.round(Math.random() * 2000) },
          { name: '江苏', value: Math.round(Math.random() * 2000) },
          { name: '浙江', value: Math.round(Math.random() * 2000) },
          { name: '江西', value: Math.round(Math.random() * 2000) },
          { name: '湖北', value: Math.round(Math.random() * 2000) },
          { name: '广西', value: Math.round(Math.random() * 2000) },
          { name: '甘肃', value: Math.round(Math.random() * 2000) },
          { name: '山西', value: Math.round(Math.random() * 2000) },
          { name: '内蒙古', value: Math.round(Math.random() * 2000) },
          { name: '陕西', value: Math.round(Math.random() * 2000) },
          { name: '吉林', value: Math.round(Math.random() * 2000) },
          { name: '福建', value: Math.round(Math.random() * 2000) },
          { name: '贵州', value: Math.round(Math.random() * 2000) },
          { name: '广东', value: Math.round(Math.random() * 2000) },
          { name: '青海', value: Math.round(Math.random() * 2000) },
          { name: '西藏', value: Math.round(Math.random() * 2000) },
          { name: '四川', value: Math.round(Math.random() * 2000) },
          { name: '宁夏', value: Math.round(Math.random() * 2000) },
          { name: '海南', value: Math.round(Math.random() * 2000) },
          { name: '台湾', value: Math.round(Math.random() * 2000) },
          { name: '香港', value: Math.round(Math.random() * 2000) },
          { name: '澳门', value: Math.round(Math.random() * 2000) }
        ]
      }
    ]
  });
});

----------------------------------------

TITLE: Generating Virtual Data for Calendar Heatmap in ECharts
DESCRIPTION: This function generates virtual data for the calendar heatmap. It creates a dataset for the entire year with random step counts for each day.

LANGUAGE: javascript
CODE:
function getVirtulData(year) {
  year = year || '2017';
  var date = +echarts.number.parseDate(year + '-01-01');
  var end = +echarts.number.parseDate(+year + 1 + '-01-01');
  var dayTime = 3600 * 24 * 1000;
  var data = [];
  for (var time = date; time < end; time += dayTime) {
    data.push([
      echarts.format.formatTime('yyyy-MM-dd', time),
      Math.floor(Math.random() * 10000)
    ]);
  }
  return data;
}

----------------------------------------

TITLE: Initializing Echarts Scatter Plot with Clustering in JavaScript
DESCRIPTION: This code snippet initializes an Echarts scatter plot with clustering functionality. It sets up the chart options, including axis configuration, series data, and custom rendering for cluster points and lines.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {},
  xAxis: {
    type: 'value'
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      type: 'custom',
      renderItem: function (params, api) {
        const point = api.coord([api.value(0), api.value(1)]);
        const clusterId = api.value(2);
        const pointSize = api.value(3);
        return {
          type: 'circle',
          shape: {
            cx: point[0],
            cy: point[1],
            r: pointSize
          },
          style: {
            fill: clusterId >= 0 ? api.visual('color') : 'gray'
          }
        };
      },
      encode: {
        tooltip: [0, 1]
      },
      data: data
    },
    {
      type: 'custom',
      renderItem: function (params, api) {
        const children = api.value(4) || [];
        const points = [];
        for (let i = 0; i < children.length; i++) {
          points.push(api.coord(children[i]));
        }
        return {
          type: 'polyline',
          shape: {
            points: points
          },
          style: api.style({
            fill: 'none',
            stroke: api.visual('color'),
            lineWidth: 0.5,
            opacity: 0.3
          })
        };
      },
      encode: {
        tooltip: [0, 1]
      },
      data: lines
    }
  ]
};

----------------------------------------

TITLE: Creating Textured Pie Chart with ECharts in JavaScript
DESCRIPTION: This snippet demonstrates how to create a pie chart with textured segments using ECharts. It sets up the chart options, defines data series, and applies custom textures to each segment.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Pie Chart with Texture',
    left: 'center',
    top: 20
  },
  tooltip: {},
  series: [
    {
      name: 'pie',
      type: 'pie',
      data: [
        {
          value: 335,
          name: 'A',
          itemStyle: {
            decal: {
              symbol: 'rect',
              dashArrayX: [1, 0],
              dashArrayY: [2, 5],
              rotation: -Math.PI / 4,
              color: 'rgba(0, 0, 0, 0.2)'
            }
          }
        },
        {
          value: 234,
          name: 'B',
          itemStyle: {
            decal: {
              symbol: 'rect',
              dashArrayX: [[8, 8], [0, 8, 8, 0]],
              dashArrayY: [6, 0],
              rotation: -Math.PI / 4,
              color: 'rgba(0, 0, 0, 0.2)'
            }
          }
        },
        {
          value: 234,
          name: 'C',
          itemStyle: {
            decal: {
              symbol: 'triangle',
              dashArrayX: [
                [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5],
                [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5]
              ],
              dashArrayY: [
                [0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0],
                [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5]
              ],
              symbolSize: 0.7,
              rotation: Math.PI / 4,
              color: 'rgba(0, 0, 0, 0.2)'
            }
          }
        },
        {
          value: 135,
          name: 'D',
          itemStyle: {
            decal: {
              symbol: 'diamond',
              symbolSize: 0.7,
              dashArrayX: [
                [0.5, 0, 0.5, 0, 0.5, 0, 0.5, 0],
                [0, 0.5, 0, 0.5, 0, 0.5, 0, 0.5]
              ],
              dashArrayY: [[5, 5], [0, 5, 5, 0]],
              rotation: -Math.PI / 4,
              color: 'rgba(0, 0, 0, 0.2)'
            }
          }
        },
        {
          value: 1048,
          name: 'E',
          itemStyle: {
            decal: {
              symbol: 'rect',
              dashArrayX: [
                [0, 1, 0, 1, 0, 1, 0, 1],
                [1, 0, 1, 0, 1, 0, 1, 0]
              ],
              dashArrayY: [
                [1, 0, 1, 0, 1, 0, 1, 0],
                [0, 1, 0, 1, 0, 1, 0, 1]
              ],
              symbolSize: 0.8,
              rotation: Math.PI / 4,
              color: 'rgba(0, 0, 0, 0.2)'
            }
          }
        }
      ],
      radius: '60%',
      label: {
        show: false
      },
      emphasis: {
        label: {
          formatter: '{c}',
          show: true
        }
      }
    }
  ]
};

----------------------------------------

TITLE: Configuring Heatmap Chart with 20,000 Data Points in ECharts
DESCRIPTION: This code snippet sets up a heatmap chart configuration for ECharts, including axis settings, visual map, and series data. It demonstrates how to handle and visualize 20,000 data points efficiently in a heatmap format.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    position: 'top'
  },
  grid: {
    top: 40,
    bottom: 20,
    right: 80
  },
  xAxis: {
    type: 'category',
    data: [],
    splitArea: {
      show: true
    }
  },
  yAxis: {
    type: 'category',
    data: [],
    splitArea: {
      show: true
    }
  },
  visualMap: {
    min: 0,
    max: 1000,
    calculable: true,
    orient: 'vertical',
    right: 0,
    top: 'center'
  },
  series: [
    {
      name: 'Punch Card',
      type: 'heatmap',
      data: [],
      label: {
        show: true
      },
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }
  ]
};

var xData = [];
var yData = [];
var data = [];
for (var i = 0; i < 50; i++) {
  xData.push(i);
}
for (var i = 0; i < 400; i++) {
  yData.push(i);
}
for (var i = 0; i < 50; i++) {
  for (var j = 0; j < 400; j++) {
    data.push([i, j, Math.round(Math.random() * 1000)]);
  }
}
option.xAxis.data = xData;
option.yAxis.data = yData;
option.series[0].data = data;

----------------------------------------

TITLE: Creating Wind Barb Chart with ECharts
DESCRIPTION: This code snippet demonstrates how to create a wind barb chart using ECharts. It sets up the chart options, defines custom series for wind barbs, and configures the axes and visual map for wind speed representation.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Wind Barb Chart'
  },
  tooltip: {
    trigger: 'axis'
  },
  grid: {
    top: 60,
    bottom: 30,
    left: 60,
    right: 20
  },
  xAxis: {
    type: 'time',
    splitLine: {
      show: false
    },
    axisLine: {
      show: true
    },
    axisTick: {
      show: true
    }
  },
  yAxis: {
    type: 'value',
    axisLabel: {
      formatter: '{value} m/s'
    },
    splitLine: {
      show: true
    }
  },
  series: [
    {
      type: 'custom',
      renderItem: renderWindBarb,
      encode: {
        x: 0,
        y: 1
      },
      data: data,
      clip: true,
      itemStyle: {
        color: '#5470c6'
      },
      z: 10
    }
  ],
  dataZoom: [
    {
      type: 'inside',
      xAxisIndex: 0,
      minSpan: 5
    },
    {
      type: 'slider',
      xAxisIndex: 0,
      minSpan: 5,
      bottom: 5
    }
  ],
  visualMap: {
    show: false,
    dimension: 1,
    min: 0,
    max: 15,
    inRange: {
      color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
    }
  }
};

----------------------------------------

TITLE: Configuring Left-Aligned Nodes in Sankey Chart with ECharts
DESCRIPTION: This code snippet demonstrates how to create a Sankey chart with nodes aligned to the left using ECharts. It includes the chart options configuration, data structure, and node alignment setting.

LANGUAGE: javascript
CODE:
option = {
  series: {
    type: 'sankey',
    layout: 'none',
    emphasis: {
      focus: 'adjacency'
    },
    nodeAlign: 'left',
    data: [
      { name: 'a' },
      { name: 'b' },
      { name: 'a1' },
      { name: 'a2' },
      { name: 'b1' },
      { name: 'c' }
    ],
    links: [
      { source: 'a', target: 'a1', value: 5 },
      { source: 'a', target: 'a2', value: 3 },
      { source: 'b', target: 'b1', value: 8 },
      { source: 'a', target: 'b1', value: 3 },
      { source: 'b1', target: 'a1', value: 1 },
      { source: 'b1', target: 'c', value: 2 }
    ]
  }
};

----------------------------------------

TITLE: Configuring Rotated Bar Labels with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a bar chart with rotated labels using ECharts. It includes data formatting, label rotation, and custom styling for the chart and its elements.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'shadow'
    }
  },
  toolbox: {
    feature: {
      dataView: { show: true, readOnly: false },
      magicType: { show: true, type: ['line', 'bar'] },
      restore: { show: true },
      saveAsImage: { show: true }
    }
  },
  xAxis: [
    {
      type: 'category',
      data: [
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
        'Sun'
      ],
      axisLabel: {
        interval: 0,
        rotate: 45,
        margin: 30
      }
    }
  ],
  yAxis: [
    {
      type: 'value',
      name: 'Precipitation',
      min: 0,
      max: 250,
      interval: 50,
      axisLabel: {
        formatter: '{value} ml'
      }
    },
    {
      type: 'value',
      name: 'Temperature',
      min: 0,
      max: 25,
      interval: 5,
      axisLabel: {
        formatter: '{value} °C'
      }
    }
  ],
  series: [
    {
      name: 'Precipitation',
      type: 'bar',
      data: [6, 32, 70, 86, 68.7, 100.7, 125.6]
    },
    {
      name: 'Temperature',
      type: 'line',
      yAxisIndex: 1,
      data: [2, 10, 13, 13, 11, 6, 11]
    }
  ]
};

----------------------------------------

TITLE: Encoding Multiple Dimensions to X and Y Axes in ECharts
DESCRIPTION: This example shows how to map multiple dimensions of data to both x and y axes using the encode property in ECharts. It demonstrates a scatter plot configuration with explicit dimension mapping for both axes.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      [12, 23, 45, 56],
      [34, 45, 56, 67],
      [56, 67, 78, 89],
      [78, 89, 90, 12],
      [90, 12, 23, 34]
    ]
  },
  xAxis: {},
  yAxis: {},
  series: {
    type: 'scatter',
    encode: {
      x: 1,
      y: 0
    },
    symbolSize: 20
  }
};

----------------------------------------

TITLE: Configuring Graph Modularity in ECharts
DESCRIPTION: Example configuration showing how to enable and customize the graph modularity feature in an ECharts graph series. Includes options for resolution and community sorting.

LANGUAGE: javascript
CODE:
setOption({

    ...

    series: [{
        type: 'graph',
        layout: 'force',
        // Set modularity property true and extension will automatically detect different communities
        // and assign each different color.
        modularity: true

        // Specify resolution. Higher resolution will produce less communities
        modularity: {
            resolution: 5,
            // If sort the communities
            sort: false
        }

        ...
    }]
})

----------------------------------------

TITLE: Configuring Doughnut Chart Options in ECharts
DESCRIPTION: This snippet shows the configuration options for creating a doughnut chart in ECharts. It sets up the chart title, legend, series data, and specifies the chart type as 'pie' with a radius to create the doughnut shape.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Referer of a Website',
    subtext: 'Fake Data',
    left: 'center'
  },
  tooltip: {
    trigger: 'item'
  },
  legend: {
    orient: 'vertical',
    left: 'left'
  },
  series: [
    {
      name: 'Access From',
      type: 'pie',
      radius: ['40%', '70%'],
      avoidLabelOverlap: false,
      itemStyle: {
        borderRadius: 10,
        borderColor: '#fff',
        borderWidth: 2
      },
      label: {
        show: false,
        position: 'center'
      },
      emphasis: {
        label: {
          show: true,
          fontSize: '40',
          fontWeight: 'bold'
        }
      },
      labelLine: {
        show: false
      },
      data: [
        { value: 1048, name: 'Search Engine' },
        { value: 735, name: 'Direct' },
        { value: 580, name: 'Email' },
        { value: 484, name: 'Union Ads' },
        { value: 300, name: 'Video Ads' }
      ]
    }
  ]
};

----------------------------------------

TITLE: Creating Sunburst Chart with VisualMap in ECharts
DESCRIPTION: This code snippet demonstrates how to create a Sunburst chart with VisualMap in ECharts. It defines the chart data, configures various options including series type, data, label, itemStyle, and visualMap, and finally initializes the chart.

LANGUAGE: JavaScript
CODE:
option = {
  visualMap: {
    type: 'continuous',
    min: 0,
    max: 10,
    inRange: {
      color: ['#2F93C8', '#AEC48F', '#FFDB5C', '#F98862']
    }
  },
  series: {
    type: 'sunburst',
    data: [
      {
        name: 'Grandpa',
        children: [
          {
            name: 'Uncle Leo',
            value: 15,
            children: [
              {
                name: 'Cousin Jack',
                value: 2
              },
              {
                name: 'Cousin Mary',
                value: 5,
                children: [
                  {
                    name: 'Jackson',
                    value: 2
                  }
                ]
              },
              {
                name: 'Cousin Ben',
                value: 4
              }
            ]
          },
          {
            name: 'Father',
            value: 10,
            children: [
              {
                name: 'Me',
                value: 5
              },
              {
                name: 'Brother Peter',
                value: 1
              }
            ]
          }
        ]
      },
      {
        name: 'Nancy',
        children: [
          {
            name: 'Uncle Nike',
            children: [
              {
                name: 'Cousin Betty',
                value: 1
              },
              {
                name: 'Cousin Jenny',
                value: 2
              }
            ]
          }
        ]
      }
    ],
    radius: [0, '90%'],
    label: {
      rotate: 'radial'
    }
  }
};

----------------------------------------

TITLE: Creating Custom Calendar Icon with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a custom calendar icon using ECharts. It defines an option object that configures various aspects of the chart, including the calendar component, series data, and visual mapping. The custom icon is created using SVG paths.

LANGUAGE: javascript
CODE:
option = {
  calendar: [
    {
      left: 'center',
      top: 'middle',
      cellSize: [70, 70],
      yearLabel: { show: false },
      orient: 'vertical',
      dayLabel: {
        firstDay: 1,
        nameMap: 'cn'
      },
      monthLabel: {
        show: false
      },
      range: '2017-03'
    }
  ],
  series: [
    {
      type: 'graph',
      edgeSymbol: ['none', 'arrow'],
      coordinateSystem: 'calendar',
      links: [],
      symbolSize: 15,
      calendarIndex: 0,
      itemStyle: {
        color: '#F06C00'
      },
      data: [
        {
          name: '11',
          value: ['2017-03-11', 1]
        }
      ]
    },
    {
      type: 'custom',
      coordinateSystem: 'calendar',
      renderItem: function (params, api) {
        var cellPoint = api.coord(api.value(0));
        var cellWidth = params.coordSys.cellWidth;
        var cellHeight = params.coordSys.cellHeight;
        var value = api.value(1);
        var circle = null;
        if (isNaN(value)) {
          // if not drawing
          return;
        }
        var paths = [];
        paths.push({
          type: 'rect',
          shape: {
            x: -cellWidth / 2,
            y: -cellHeight / 2,
            width: cellWidth,
            height: cellHeight
          },
          style: {
            fill: '#F00',
            stroke: '#555'
          }
        });
        paths.push({
          type: 'rect',
          shape: {
            x: -cellWidth / 2 + 1,
            y: -cellHeight / 2 + 1,
            width: cellWidth - 2,
            height: 16
          },
          style: {
            fill: '#555'
          }
        });
        paths.push({
          type: 'rect',
          shape: {
            x: -cellWidth / 2 + 20,
            y: -cellHeight / 2 + 20,
            width: cellWidth - 40,
            height: cellHeight - 50
          },
          style: {
            fill: '#eee'
          }
        });
        var textPosition = 'left';
        var textAlign = 'left';
        paths.push({
          type: 'text',
          style: {
            x: cellWidth / 2 - 40,
            y: -cellHeight / 2 + 2,
            text: api.value(0).toString(),
            verticalAlign: 'top',
            fill: '#eee',
            stroke: 'none',
            font: 'bold 14px sans-serif'
          }
        });
        return {
          type: 'group',
          position: cellPoint,
          children: paths
        };
      },
      dimensions: [null, { type: 'ordinal' }],
      encode: {
        tooltip: 1
      },
      data: [
        ['2017-03-01', 20],
        ['2017-03-02', 30],
        ['2017-03-03', 40],
        ['2017-03-04', 50],
        ['2017-03-05', 60],
        ['2017-03-06', 70],
        ['2017-03-07', 80],
        ['2017-03-08', 90],
        ['2017-03-09', 100],
        ['2017-03-10', 110],
        ['2017-03-11', 120],
        ['2017-03-12', 130],
        ['2017-03-13', 140],
        ['2017-03-14', 150],
        ['2017-03-15', 160],
        ['2017-03-16', 170],
        ['2017-03-17', 180],
        ['2017-03-18', 190],
        ['2017-03-19', 200],
        ['2017-03-20', 210],
        ['2017-03-21', 220],
        ['2017-03-22', 230],
        ['2017-03-23', 240],
        ['2017-03-24', 250],
        ['2017-03-25', 260],
        ['2017-03-26', 270],
        ['2017-03-27', 280],
        ['2017-03-28', 290],
        ['2017-03-29', 300],
        ['2017-03-30', 310],
        ['2017-03-31', 320]
      ]
    }
  ]
};

----------------------------------------

TITLE: Using Matrix Property for Data Arrangement in ECharts
DESCRIPTION: This snippet illustrates the use of the matrix property in ECharts to arrange data in a specific format. It shows how to create a heatmap chart with data organized in a matrix structure.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      [12, 23, 45, 56],
      [34, 45, 56, 67],
      [56, 67, 78, 89],
      [78, 89, 90, 12],
      [90, 12, 23, 34]
    ]
  },
  xAxis: {},
  yAxis: {},
  series: {
    type: 'heatmap',
    encode: {
      x: 0,
      y: 1
    }
  },
  visualMap: {
    min: 0,
    max: 100
  }
};

----------------------------------------

TITLE: Configuring ECharts World Population Map (JavaScript)
DESCRIPTION: This snippet sets up an ECharts configuration object for visualizing world population data from 2010. It defines the map type, tooltip, and visual mapping of population data to color intensity on a global scale.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'World Population (2010)',
    subtext: 'Data from United Nations, Total population, both sexes combined, as of 1 July (thousands)',
    sublink: 'http://esa.un.org/wpp/Excel-Data/population.htm',
    left: 'center',
    top: 'top'
  },
  tooltip: {
    trigger: 'item',
    formatter: function (params) {
      var value = (params.value + '').split('.');
      value = value[0].replace(/(?=(\B(\d{3})+$))/g, ',') +
        '.' + value[1];
      return params.seriesName + '<br/>' + params.name + ' : ' + value;
    }
  },
  visualMap: {
    min: 0,
    max: 1000000,
    text: ['High', 'Low'],
    realtime: false,
    calculable: true,
    color: ['orangered', 'yellow', 'lightskyblue']
  },
  series: [
    {
      name: 'World Population (2010)',
      type: 'map',
      mapType: 'world',
      roam: true,
      mapLocation: {
        y: 60
      },
      itemStyle: {
        emphasis: { label: { show: true } }
      },
      data: [
        { name: 'Afghanistan', value: 28397.812 },
        { name: 'Angola', value: 19549.124 },
        { name: 'Albania', value: 3150.143 },
        { name: 'United Arab Emirates', value: 8441.537 },
        { name: 'Argentina', value: 40374.224 },
        { name: 'Armenia', value: 2963.496 },
        { name: 'French Southern and Antarctic Lands', value: 268.065 },
        { name: 'Australia', value: 22404.488 },
        { name: 'Austria', value: 8401.924 },
        { name: 'Azerbaijan', value: 9094.718 },
        { name: 'Burundi', value: 9232.753 },
        { name: 'Belgium', value: 10941.288 },
        { name: 'Benin', value: 9509.798 },
        { name: 'Burkina Faso', value: 15540.284 },
        { name: 'Bangladesh', value: 151125.475 },
        { name: 'Bulgaria', value: 7389.175 },
        { name: 'The Bahamas', value: 66402.316 },
        { name: 'Bosnia and Herzegovina', value: 3845.929 },
        { name: 'Belarus', value: 9491.07 },
        { name: 'Belize', value: 308.595 },
        { name: 'Bermuda', value: 64.951 },
        { name: 'Bolivia', value: 716.939 },
        { name: 'Brazil', value: 195210.154 },
        { name: 'Brunei', value: 27.223 },
        { name: 'Bhutan', value: 716.939 },
        { name: 'Botswana', value: 1969.341 },
        { name: 'Central African Republic', value: 4349.921 },
        { name: 'Canada', value: 34126.24 },
        { name: 'Switzerland', value: 7830.534 },
        { name: 'Chile', value: 17150.76 },
        { name: 'China', value: 1359821.465 },
        { name: 'Ivory Coast', value: 60508.978 },
        { name: 'Cameroon', value: 20624.343 },
        { name: 'Democratic Republic of the Congo', value: 62191.161 },
        { name: 'Republic of the Congo', value: 3573.024 },
        { name: 'Colombia', value: 46444.798 },
        { name: 'Costa Rica', value: 4669.685 },
        { name: 'Cuba', value: 11281.768 },
        { name: 'Northern Cyprus', value: 1.468 },
        { name: 'Cyprus', value: 1103.685 },
        { name: 'Czech Republic', value: 10553.701 },
        { name: 'Germany', value: 83017.404 },
        { name: 'Djibouti', value: 834.036 },
        { name: 'Denmark', value: 5550.959 },
        { name: 'Dominican Republic', value: 10016.797 },
        { name: 'Algeria', value: 37062.82 },
        { name: 'Ecuador', value: 15001.072 },
        { name: 'Egypt', value: 78075.705 },
        { name: 'Eritrea', value: 5741.159 },
        { name: 'Spain', value: 46182.038 },
        { name: 'Estonia', value: 1298.533 },
        { name: 'Ethiopia', value: 87095.281 },
        { name: 'Finland', value: 5367.693 },
        { name: 'Fiji', value: 860.559 },
        { name: 'Falkland Islands', value: 49.581 },
        { name: 'France', value: 63230.866 },
        { name: 'Gabon', value: 1556.222 },
        { name: 'United Kingdom', value: 62066.35 },
        { name: 'Georgia', value: 4388.674 },
        { name: 'Ghana', value: 24262.901 },
        { name: 'Guinea', value: 10876.033 },
        { name: 'Gambia', value: 1680.64 },
        { name: 'Guinea Bissau', value: 10876.033 },
        { name: 'Equatorial Guinea', value: 696.167 },
        { name: 'Greece', value: 11109.999 },
        { name: 'Greenland', value: 56.546 },
        { name: 'Guatemala', value: 14341.576 },
        { name: 'French Guiana', value: 231.169 },
        { name: 'Guyana', value: 786.126 },
        { name: 'Honduras', value: 7621.204 },
        { name: 'Croatia', value: 4338.027 },
        { name: 'Haiti', value: 9896.4 },
        { name: 'Hungary', value: 10014.633 },
        { name: 'Indonesia', value: 240676.485 },
        { name: 'India', value: 1205624.648 },
        { name: 'Ireland', value: 4467.561 },
        { name: 'Iran', value: 240676.485 },
        { name: 'Iraq', value: 30962.38 },
        { name: 'Iceland', value: 318.042 },
        { name: 'Israel', value: 7420.368 },
        { name: 'Italy', value: 60508.978 },
        { name: 'Jamaica', value: 2741.485 },
        { name: 'Jordan', value: 6454.554 },
        { name: 'Japan', value: 127352.833 },
        { name: 'Kazakhstan', value: 16206.707 },
        { name: 'Kenya', value: 40909.194 },
        { name: 'Kyrgyzstan', value: 5334.223 },
        { name: 'Cambodia', value: 14364.931 },
        { name: 'South Korea', value: 51452.352 },
        { name: 'Kosovo', value: 97.743 },
        { name: 'Kuwait', value: 2991.58 },
        { name: 'Laos', value: 6395.713 },
        { name: 'Lebanon', value: 4341.092 },
        { name: 'Liberia', value: 3957.99 },
        { name: 'Libya', value: 6040.612 },
        { name: 'Sri Lanka', value: 20758.779 },
        { name: 'Lesotho', value: 2008.921 },
        { name: 'Lithuania', value: 3068.457 },
        { name: 'Luxembourg', value: 507.885 },
        { name: 'Latvia', value: 2090.519 },
        { name: 'Morocco', value: 31642.36 },
        { name: 'Moldova', value: 103.619 },
        { name: 'Madagascar', value: 21079.532 },
        { name: 'Mexico', value: 117886.404 },
        { name: 'Macedonia', value: 507.885 },
        { name: 'Mali', value: 13985.961 },
        { name: 'Myanmar', value: 51931.231 },
        { name: 'Montenegro', value: 620.078 },
        { name: 'Mongolia', value: 2712.738 },
        { name: 'Mozambique', value: 23967.265 },
        { name: 'Mauritania', value: 3609.42 },
        { name: 'Malawi', value: 15013.694 },
        { name: 'Malaysia', value: 28275.835 },
        { name: 'Namibia', value: 2178.967 },
        { name: 'New Caledonia', value: 246.379 },
        { name: 'Niger', value: 15893.746 },
        { name: 'Nigeria', value: 159707.78 },
        { name: 'Nicaragua', value: 5822.209 },
        { name: 'Netherlands', value: 16615.243 },
        { name: 'Norway', value: 4891.251 },
        { name: 'Nepal', value: 26846.016 },
        { name: 'New Zealand', value: 4368.136 },
        { name: 'Oman', value: 2802.768 },
        { name: 'Pakistan', value: 173149.306 },
        { name: 'Panama', value: 3678.128 },
        { name: 'Peru', value: 29262.83 },
        { name: 'Philippines', value: 93444.322 },
        { name: 'Papua New Guinea', value: 6858.945 },
        { name: 'Poland', value: 38198.754 },
        { name: 'Puerto Rico', value: 3709.671 },
        { name: 'North Korea', value: 1.468 },
        { name: 'Portugal', value: 10589.792 },
        { name: 'Paraguay', value: 6459.721 },
        { name: 'Qatar', value: 1749.713 },
        { name: 'Romania', value: 21861.476 },
        { name: 'Russia', value: 21861.476 },
        { name: 'Rwanda', value: 10836.732 },
        { name: 'Western Sahara', value: 514.648 },
        { name: 'Saudi Arabia', value: 27258.387 },
        { name: 'Sudan', value: 35652.002 },
        { name: 'South Sudan', value: 9940.929 },
        { name: 'Senegal', value: 12950.564 },
        { name: 'Solomon Islands', value: 526.447 },
        { name: 'Sierra Leone', value: 5751.976 },
        { name: 'El Salvador', value: 6218.195 },
        { name: 'Somaliland', value: 9636.173 },
        { name: 'Somalia', value: 9636.173 },
        { name: 'Republic of Serbia', value: 3573.024 },
        { name: 'Suriname', value: 524.96 },
        { name: 'Slovakia', value: 5433.437 },
        { name: 'Slovenia', value: 2054.232 },
        { name: 'Sweden', value: 9382.297 },
        { name: 'Swaziland', value: 1193.148 },
        { name: 'Syria', value: 7830.534 },
        { name: 'Chad', value: 11720.781 },
        { name: 'Togo', value: 6306.014 },
        { name: 'Thailand', value: 66402.316 },
        { name: 'Tajikistan', value: 7627.326 },
        { name: 'Turkmenistan', value: 5041.995 },
        { name: 'East Timor', value: 10016.797 },
        { name: 'Trinidad and Tobago', value: 1328.095 },
        { name: 'Tunisia', value: 10631.83 },
        { name: 'Turkey', value: 72137.546 },
        { name: 'United Republic of Tanzania', value: 44973.33 },
        { name: 'Uganda', value: 33987.213 },
        { name: 'Ukraine', value: 46050.22 },
        { name: 'Uruguay', value: 3371.982 },
        { name: 'United States of America', value: 312247.116 },
        { name: 'Uzbekistan', value: 27769.27 },
        { name: 'Venezuela', value: 236.299 },
        { name: 'Vietnam', value: 89047.397 },
        { name: 'Vanuatu', value: 236.299 },
        { name: 'West Bank', value: 13.565 },
        { name: 'Yemen', value: 22763.008 },
        { name: 'South Africa', value: 51452.352 },
        { name: 'Zambia', value: 13216.985 },
        { name: 'Zimbabwe', value: 13076.978 }
      ]
    }
  ]
};

----------------------------------------

TITLE: Encoding Single Dimension Data to X-Axis in ECharts
DESCRIPTION: This snippet demonstrates how to map a single dimension of data to the x-axis using the encode property in ECharts. It shows a basic line chart configuration with explicit dimension mapping.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      [12, 23, 45, 56],
      [34, 45, 56, 67],
      [56, 67, 78, 89],
      [78, 89, 90, 12],
      [90, 12, 23, 34]
    ]
  },
  xAxis: {},
  yAxis: {},
  series: {
    type: 'line',
    encode: {
      x: 0
    }
  }
};

----------------------------------------

TITLE: Configuring ECharts Bar Chart for 2002 Financial Indices
DESCRIPTION: This code snippet sets up an ECharts option object for a bar chart. It defines the chart title, tooltip, legend, x-axis (regions), y-axis (percentage), and multiple data series for different economic indicators.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: '2002全国宏观经济指标',
    subtext: '数据来自国家统计局'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'shadow'
    }
  },
  legend: {
    data: [
      'GDP',
      '金融、保险业',
      '房地产业',
      '第一产业',
      '第二产业',
      '第三产业'
    ]
  },
  xAxis: [
    {
      type: 'category',
      data: [
        '北京',
        '天津',
        '河北',
        '山西',
        '内蒙古',
        '辽宁',
        '吉林',
        '黑龙江',
        '上海',
        '江苏',
        '浙江',
        '安徽',
        '福建',
        '江西',
        '山东',
        '河南',
        '湖北',
        '湖南',
        '广东',
        '广西',
        '海南',
        '重庆',
        '四川',
        '贵州',
        '云南',
        '西藏',
        '陕西',
        '甘肃',
        '青海',
        '宁夏',
        '新疆'
      ],
      axisPointer: {
        type: 'shadow'
      }
    }
  ],
  yAxis: [
    {
      type: 'value',
      name: '亿元',
      min: 0,
      max: 53500,
      interval: 10700,
      axisLabel: {
        formatter: '{value} '
      }
    },
    {
      type: 'value',
      name: '比重',
      min: 0,
      max: 100,
      interval: 20,
      axisLabel: {
        formatter: '{value} %'
      }
    }
  ],
  series: [
    {
      name: 'GDP',
      type: 'bar',
      data: [
        2460, 1357, 5317, 1611, 1542, 4776, 3005, 3546, 4349, 10606, 8003,
        2900, 4454, 1984, 10052, 5670, 3520, 3553, 11089, 2432, 649, 1844,
        4056, 908, 1825, 189, 1546, 965, 340, 377, 1396
      ]
    },
    {
      name: '金融、保险业',
      type: 'bar',
      yAxisIndex: 1,
      data: [
        338, 97, 155, 49, 42, 129, 56, 67, 330, 298, 208, 87, 120, 65, 207,
        139, 116, 95, 412, 57, 21, 68, 100, 29, 42, 4, 43, 29, 10, 11, 33
      ]
    },
    {
      name: '房地产业',
      type: 'bar',
      yAxisIndex: 1,
      data: [
        123, 62, 76, 29, 60, 103, 30, 34, 190, 128, 225, 47, 69, 27, 105, 70,
        51, 35, 223, 24, 11, 40, 46, 17, 25, 2, 27, 13, 3, 5, 14
      ]
    },
    {
      name: '第一产业',
      type: 'bar',
      yAxisIndex: 1,
      data: [
        27, 31, 742, 188, 251, 433, 366, 387, 34, 904, 393, 627, 391, 424,
        1197, 1076, 630, 836, 680, 474, 204, 241, 891, 215, 369, 40, 271, 212,
        48, 62, 379
      ]
    },
    {
      name: '第二产业',
      type: 'bar',
      yAxisIndex: 1,
      data: [
        1001, 751, 2728, 860, 673, 2406, 1311, 1419, 2164, 5715, 4357, 1219,
        2348, 778, 5271, 2662, 1605, 1432, 5913, 993, 202, 815, 1651, 364, 753,
        50, 623, 386, 169, 170, 553
      ]
    },
    {
      name: '第三产业',
      type: 'bar',
      yAxisIndex: 1,
      data: [
        1432, 575, 1847, 563, 618, 1937, 1328, 1740, 2151, 3987, 3253, 1054,
        1715, 782, 3584, 1932, 1285, 1285, 4496, 965, 243, 788, 1514, 329, 703,
        99, 652, 367, 123, 145, 464
      ]
    }
  ]
};

----------------------------------------

TITLE: Configuring Nested Pie Chart with ECharts in JavaScript
DESCRIPTION: This snippet defines the configuration for a nested pie chart using ECharts. It sets up two series of data for the inner and outer rings, configures colors, labels, and emphasizes specific sectors.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'item',
    formatter: '{a} <br/>{b}: {c} ({d}%)'
  },
  legend: {
    data: [
      'Direct',
      'Marketing',
      'Search Engine',
      'Email',
      'Union Ads',
      'Video Ads',
      'Baidu',
      'Google',
      'Bing',
      'Others'
    ]
  },
  series: [
    {
      name: 'Access From',
      type: 'pie',
      selectedMode: 'single',
      radius: [0, '30%'],
      label: {
        position: 'inner',
        fontSize: 14
      },
      labelLine: {
        show: false
      },
      data: [
        { value: 1548, name: 'Search Engine' },
        { value: 775, name: 'Direct' },
        { value: 679, name: 'Marketing', selected: true }
      ]
    },
    {
      name: 'Access From',
      type: 'pie',
      radius: ['45%', '60%'],
      labelLine: {
        length: 30
      },
      label: {
        formatter: '{a|{a}}{abg|}\n{hr|}\n  {b|{b}: }{c}  {per|{d}%}  ',
        backgroundColor: '#F6F8FC',
        borderColor: '#8C8D8E',
        borderWidth: 1,
        borderRadius: 4,
        rich: {
          a: {
            color: '#6E7079',
            lineHeight: 22,
            align: 'center'
          },
          hr: {
            borderColor: '#8C8D8E',
            width: '100%',
            borderWidth: 1,
            height: 0
          },
          b: {
            color: '#4C5058',
            fontSize: 14,
            fontWeight: 'bold',
            lineHeight: 33
          },
          per: {
            color: '#fff',
            backgroundColor: '#4C5058',
            padding: [3, 4],
            borderRadius: 4
          }
        }
      },
      data: [
        { value: 1048, name: 'Baidu' },
        { value: 335, name: 'Direct' },
        { value: 310, name: 'Email' },
        { value: 251, name: 'Google' },
        { value: 234, name: 'Union Ads' },
        { value: 147, name: 'Bing' },
        { value: 135, name: 'Video Ads' },
        { value: 102, name: 'Others' }
      ]
    }
  ]
};

----------------------------------------

TITLE: Creating a Dark-themed Car Speedometer Gauge Chart with echarts
DESCRIPTION: This code snippet sets up an echarts gauge chart configured to resemble a car's speedometer with a dark theme. It includes custom styling for the gauge's axis, pointer, and detail, as well as animation effects.

LANGUAGE: javascript
CODE:
option = {
  backgroundColor: '#000',
  tooltip: {
    formatter: '{a} <br/>{b} : {c}%'
  },
  toolbox: {
    feature: {
      restore: {},
      saveAsImage: {}
    }
  },
  series: [
    {
      name: 'Pressure',
      type: 'gauge',
      splitNumber: 10,
      radius: '80%',
      axisLine: {
        lineStyle: {
          color: [
            [0.3, '#91c7ae'],
            [0.7, '#63869e'],
            [1, '#c23531']
          ],
          width: 30,
          opacity: 0.8
        }
      },
      progress: {
        show: true,
        itemStyle: {
          color: '#91c7ae'
        }
      },
      pointer: {
        icon: 'path://M12.8,0.7l12,40.1H0.7L12.8,0.7z',
        length: '60%',
        width: 12,
        offsetCenter: [0, '-60%'],
        itemStyle: {
          color: 'inherit'
        }
      },
      axisTick: {
        length: 12,
        lineStyle: {
          color: 'inherit',
          width: 2
        }
      },
      splitLine: {
        length: 20,
        lineStyle: {
          color: 'inherit',
          width: 5
        }
      },
      axisLabel: {
        color: '#fff',
        fontSize: 20,
        distance: 25,
        formatter: function (value) {
          if (value === 0.9) {
            return '180';
          } else if (value === 0.5) {
            return '100';
          } else if (value === 0.1) {
            return '20';
          }
          return '';
        }
      },
      title: {
        offsetCenter: [0, '-20%'],
        fontSize: 30
      },
      detail: {
        fontSize: 50,
        offsetCenter: [0, '0%'],
        valueAnimation: true,
        formatter: function (value) {
          return Math.round(value * 180) + '';
        },
        color: 'inherit'
      },
      data: [
        {
          value: 0.7,
          name: 'km/h'
        }
      ]
    }
  ]
};

setInterval(function () {
  const random = +(Math.random() * 60).toFixed(2);
  myChart.setOption({
    series: [
      {
        data: [
          {
            value: random / 100
          }
        ]
      }
    ]
  });
}, 2000);

----------------------------------------

TITLE: Initializing Globe Visualization with Contour Painting in ECharts
DESCRIPTION: This code snippet sets up an ECharts Globe visualization with custom shading to create a contour-like painting effect. It uses D3 libraries for data processing and ECharts GL for rendering the globe.

LANGUAGE: javascript
CODE:
var contourChart = echarts.init(document.createElement('canvas'), null, {
    width: 4096,
    height: 2048
});

var img = new Image();
img.onload = function() {
    var canvas = document.createElement('canvas');
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0, img.width, img.height);
    var imgData = ctx.getImageData(0, 0, img.width, img.height);
    var data = new Uint8Array(imgData.width * imgData.height);
    for (var i = 0; i < imgData.width * imgData.height * 4; i += 4) {
        var r = imgData.data[i];
        var g = imgData.data[i + 1];
        var b = imgData.data[i + 2];
        data[i / 4] = (r + g + b) / 3;
    }

    var contours = d3.contours()
        .size([imgData.width, imgData.height])
        .thresholds(d3.range(0, 256, 4))
        (data);

    contourChart.setOption({
        backgroundColor: '#000',
        globe: {
            baseTexture: img,
            displacementScale: 0.1,
            shading: 'color',
            environment: '#000',
            light: {
                ambient: {
                    intensity: 0
                },
                main: {
                    intensity: 0.1
                }
            },
            viewControl: {
                autoRotate: true
            }
        },
        series: [{
            type: 'lines3D',
            coordinateSystem: 'globe',
            effect: {
                show: true
            },
            blendMode: 'lighter',
            lineStyle: {
                width: 1,
                color: 'rgb(50, 50, 150)',
                opacity: 0.1
            },
            data: contours.map(function (contour) {
                var coordinates = contour.coordinates;
                var lines = [];
                for (var i = 0; i < coordinates.length; i++) {
                    var coordinate = coordinates[i];
                    lines.push({
                        coords: coordinate.map(function (coord) {
                            return [coord[0] / imgData.width * 360 - 180,
                                90 - coord[1] / imgData.height * 180]
                        })
                    });
                }
                return lines;
            })
        }]
    });

    chart.setOption({
        globe: {
            environment: contourChart
        }
    });
};

img.src = 'data-gl/asset/bathymetry_bw_composite_4k.jpg';

----------------------------------------

TITLE: Configuring Scatter Matrix Header in ECharts
DESCRIPTION: YAML frontmatter configuration block defining metadata for the Scatter Matrix chart documentation, including title, category, and Chinese title.

LANGUAGE: yaml
CODE:
---
title: Scatter Matrix
category: parallel, scatter
titleCN: Scatter Matrix
---

----------------------------------------

TITLE: Configuring Sunburst Chart for Drink Flavors using ECharts
DESCRIPTION: This code snippet sets up a sunburst chart configuration for visualizing drink flavors. It defines the chart's data structure, visual encoding, and styling options using ECharts options API.

LANGUAGE: javascript
CODE:
option = {
  series: {
    type: 'sunburst',
    data: [
      {
        name: 'Grandpa',
        children: [
          {
            name: 'Uncle Leo',
            value: 15,
            children: [
              {
                name: 'Cousin Jack',
                value: 2
              },
              {
                name: 'Cousin Mary',
                value: 5,
                children: [
                  {
                    name: 'Jackson',
                    value: 2
                  }
                ]
              },
              {
                name: 'Cousin Ben',
                value: 4
              }
            ]
          },
          {
            name: 'Father',
            value: 10,
            children: [
              {
                name: 'Me',
                value: 5
              },
              {
                name: 'Brother Peter',
                value: 1
              }
            ]
          }
        ]
      },
      {
        name: 'Nancy',
        children: [
          {
            name: 'Uncle Nike',
            children: [
              {
                name: 'Cousin Betty',
                value: 1
              },
              {
                name: 'Cousin Jenny',
                value: 2
              }
            ]
          }
        ]
      }
    ],
    radius: [0, '90%'],
    label: {
      rotate: 'radial'
    }
  }
};

----------------------------------------

TITLE: Initializing Lunar Calendar Visualization with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a lunar calendar visualization using ECharts. It sets up the chart options, including the calendar configuration, series data, and visual mapping.

LANGUAGE: javascript
CODE:
var cellSize = [80, 80];
var pieRadius = 30;

var getVirtulData = function () {
    var date = +echarts.number.parseDate('2017-02-01');
    var end = +echarts.number.parseDate('2017-03-01');
    var dayTime = 3600 * 24 * 1000;
    var data = [];
    for (var time = date; time < end; time += dayTime) {
        data.push([
            echarts.format.formatTime('yyyy-MM-dd', time),
            Math.floor(Math.random() * 10000)
        ]);
    }
    return data;
};

option = {
    tooltip : {},
    legend: {
        data:['Work','Entertainment','Sleep'],
        bottom: 20
    },
    calendar: {
        top: 'middle',
        left: 'center',
        orient: 'vertical',
        cellSize: cellSize,
        yearLabel: {
            show: false,
            textStyle: {
                fontSize: 30
            }
        },
        dayLabel: {
            margin: 20,
            firstDay: 1,
            nameMap: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        },
        monthLabel: {
            show: false
        },
        range: ['2017-02']
    },
    series: [{
        id: 'label',
        type: 'scatter',
        coordinateSystem: 'calendar',
        symbolSize: 1,
        label: {
            normal: {
                show: true,
                formatter: function (params) {
                    return echarts.format.formatTime('dd', params.value[0]);
                },
                offset: [-cellSize[0] / 2 + 10, -cellSize[1] / 2 + 10],
                textStyle: {
                    color: '#000',
                    fontSize: 14
                }
            }
        },
        data: getVirtulData()
    }, {
        id: 'pies',
        type: 'custom',
        coordinateSystem: 'calendar',
        renderItem: function(params, api) {
            var cellPoint = api.coord(api.value(0));
            var cellWidth = params.coordSys.cellWidth;
            var cellHeight = params.coordSys.cellHeight;

            var value = api.value(1);
            var angles = [
                {// Work
                    startAngle: 0,
                    endAngle: (value[0] * 3.6 + 0.01) * Math.PI / 180
                },
                {// Entertainment
                    startAngle: (value[0] * 3.6 + 0.01) * Math.PI / 180,
                    endAngle: (value[1] * 3.6 + value[0] * 3.6 + 0.01) * Math.PI / 180
                },
                {// Sleep
                    startAngle: (value[1] * 3.6 + value[0] * 3.6 + 0.01) * Math.PI / 180,
                    endAngle: Math.PI * 2
                }
            ];
            var colors = ['#FF6B6B', '#4ECDC4', '#45B7D1'];

            return {
                type: 'sector',
                shape: {
                    cx: cellPoint[0],
                    cy: cellPoint[1],
                    r: pieRadius
                },
                colors: colors,
                angles: angles
            };
        },
        data: getVirtulData().map(function (item, index) {
            var date = item[0].split('-');
            var dayTime = (new Date(date[0], date[1] - 1, date[2])).getTime();
            return [item[0], [Math.random() * 24, Math.random() * 24, Math.random() * 24]];
        })
    }]
};

----------------------------------------

TITLE: Configuring Graph Life Expectancy Visualization in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a graph visualization in ECharts to display life expectancy data. It includes configuration for the chart title, tooltip, legend, and series data.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Life Expectancy and GDP by Country'
  },
  tooltip: {},
  legend: [
    {
      data: categories.map(function(a) {
        return a.name;
      })
    }
  ],
  series: [
    {
      name: 'Life Expectancy and GDP',
      type: 'graph',
      layout: 'force',
      draggable: true,
      data: nodes,
      edges: edges,
      categories: categories,
      roam: true,
      label: {
        show: true,
        position: 'right',
        formatter: '{b}'
      },
      force: {
        repulsion: 100
      }
    }
  ]
};

----------------------------------------

TITLE: Implementing Multiple X Axes in ECharts
DESCRIPTION: Example demonstrating how to create a line chart with two X axes in ECharts. Shows basic chart setup with xAxis and series configurations.

LANGUAGE: yaml
CODE:
---
title: Multiple X Axes
category: line
titleCN: Multiple X Axes
---

----------------------------------------

TITLE: Configuring Line Chart with Categorical Y-Axis in ECharts
DESCRIPTION: This code snippet sets up an ECharts configuration for a line chart with a categorical Y-axis. It defines the chart type, axes, series data, and visual styles. The chart displays product categories on the Y-axis and time progression on the X-axis.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Line Y Category'
  },
  tooltip: {
    trigger: 'axis'
  },
  legend: {
    data: ['Altitude (km) vs. temperature (°C)']
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  xAxis: {
    type: 'value',
    axisLabel: {
      formatter: '{value} °C'
    }
  },
  yAxis: {
    type: 'category',
    axisLine: { onZero: false },
    axisLabel: {
      formatter: '{value} km'
    },
    boundaryGap: false,
    data: ['0', '10', '20', '30', '40', '50', '60', '70', '80']
  },
  series: [
    {
      name: 'Altitude (km) vs. temperature (°C)',
      type: 'line',
      symbolSize: 8,
      symbol: 'circle',
      smooth: true,
      lineStyle: {
        width: 3,
        shadowColor: 'rgba(0,0,0,0.3)',
        shadowBlur: 10,
        shadowOffsetY: 8
      },
      data: [15, -50, -56.5, -46.5, -22.1, -2.5, -27.7, -55.7, -76.5]
    }
  ]
};

----------------------------------------

TITLE: Creating Line Chart with Logarithmic Axes in ECharts
DESCRIPTION: This code snippet demonstrates how to create a line chart with logarithmic axes using ECharts. It sets up the chart options, configures log axes for both x and y, and defines the data series to be plotted.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Log Axis',
    left: 'center'
  },
  tooltip: {
    trigger: 'item',
    formatter: '{a} <br/>{b} : {c}'
  },
  legend: {
    left: 'left'
  },
  xAxis: {
    type: 'log',
    name: 'x',
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    }
  },
  yAxis: {
    type: 'log',
    name: 'y',
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    }
  },
  series: [
    {
      name: 'Log2',
      type: 'line',
      data: [
        [1, 2],
        [3, 4],
        [9, 10],
        [27, 30],
        [81, 90],
        [247, 270],
        [741, 810],
        [2223, 2430],
        [6669, 7290]
      ]
    },
    {
      name: 'Log3',
      type: 'line',
      data: [
        [1, 3],
        [3, 9],
        [9, 27],
        [27, 81],
        [81, 243],
        [243, 729],
        [729, 2187],
        [2187, 6561]
      ]
    }
  ],
  grid: {
    left: '5%',
    right: '5%',
    bottom: '5%',
    containLabel: true
  }
};

----------------------------------------

TITLE: Generating Random Data for Calendar Heatmap in JavaScript
DESCRIPTION: This snippet creates a function to generate random data for the calendar heatmap. It produces an array of data points with dates and random values for the year 2016.

LANGUAGE: javascript
CODE:
function getVirtulData(year) {
  year = year || '2016';
  var date = +echarts.number.parseDate(year + '-01-01');
  var end = +echarts.number.parseDate((+year + 1) + '-01-01');
  var dayTime = 3600 * 24 * 1000;
  var data = [];
  for (var time = date; time < end; time += dayTime) {
    data.push([
      echarts.format.formatTime('yyyy-MM-dd', time),
      Math.floor(Math.random() * 10000)
    ]);
  }
  return data;
}

----------------------------------------

TITLE: Configuring Rainfall and Evaporation Bar Chart with ECharts
DESCRIPTION: This code snippet sets up an ECharts bar chart configuration to display rainfall and evaporation data for different months. It defines the chart's appearance, data series, axes, and legend.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'shadow'
    }
  },
  legend: {},
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  xAxis: [
    {
      type: 'category',
      data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    }
  ],
  yAxis: [
    {
      type: 'value'
    }
  ],
  series: [
    {
      name: 'Evaporation',
      type: 'bar',
      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]
    },
    {
      name: 'Rainfall',
      type: 'bar',
      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]
    }
  ]
};

----------------------------------------

TITLE: Using ecStat Histogram Function Standalone
DESCRIPTION: Example of using the ecStat histogram function independently of ECharts.

LANGUAGE: javascript
CODE:
var bins = ecStat.histogram(data, config);

----------------------------------------

TITLE: Configuring Candlestick Chart with Brush Selection in ECharts
DESCRIPTION: This code snippet demonstrates how to create a candlestick chart with brush selection functionality using ECharts. It includes data preparation, axis setup, and brush tool configuration. The chart displays stock price data with open, close, low, and high values.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  legend: {
    data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']
  },
  grid: {
    left: '10%',
    right: '10%',
    bottom: '15%'
  },
  xAxis: {
    type: 'category',
    data: data.categoryData,
    scale: true,
    boundaryGap: false,
    axisLine: { onZero: false },
    splitLine: { show: false },
    min: 'dataMin',
    max: 'dataMax'
  },
  yAxis: {
    scale: true,
    splitArea: {
      show: true
    }
  },
  dataZoom: [
    {
      type: 'inside',
      start: 50,
      end: 100
    },
    {
      show: true,
      type: 'slider',
      top: '90%',
      start: 50,
      end: 100
    }
  ],
  series: [
    {
      name: '日K',
      type: 'candlestick',
      data: data.values,
      itemStyle: {
        color: upColor,
        color0: downColor,
        borderColor: upBorderColor,
        borderColor0: downBorderColor
      },
      markPoint: {
        label: {
          formatter: function (param) {
            return param != null ? Math.round(param.value) + '' : '';
          }
        },
        data: [
          {
            name: 'XX标点',
            coord: ['2013/5/31', 2300],
            value: 2300,
            itemStyle: {
              color: 'rgb(41,60,85)'
            }
          },
          {
            name: 'highest value',
            type: 'max',
            valueDim: 'highest'
          },
          {
            name: 'lowest value',
            type: 'min',
            valueDim: 'lowest'
          },
          {
            name: 'average value on close',
            type: 'average',
            valueDim: 'close'
          }
        ],
        tooltip: {
          formatter: function (param) {
            return param.name + '<br>' + (param.data.coord || '');
          }
        }
      },
      markLine: {
        symbol: ['none', 'none'],
        data: [
          [
            {
              name: 'from lowest to highest',
              type: 'min',
              valueDim: 'lowest',
              symbol: 'circle',
              symbolSize: 10,
              label: {
                show: false
              },
              emphasis: {
                label: {
                  show: false
                }
              }
            },
            {
              type: 'max',
              valueDim: 'highest',
              symbol: 'circle',
              symbolSize: 10,
              label: {
                show: false
              },
              emphasis: {
                label: {
                  show: false
                }
              }
            }
          ],
          {
            name: 'min line on close',
            type: 'min',
            valueDim: 'close'
          },
          {
            name: 'max line on close',
            type: 'max',
            valueDim: 'close'
          }
        ]
      }
    },
    {
      name: 'MA5',
      type: 'line',
      data: calculateMA(5),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA10',
      type: 'line',
      data: calculateMA(10),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA20',
      type: 'line',
      data: calculateMA(20),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA30',
      type: 'line',
      data: calculateMA(30),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    }
  ]
};

----------------------------------------

TITLE: Installing ecStat via npm
DESCRIPTION: Command to install ecStat using npm package manager.

LANGUAGE: Shell
CODE:
npm install echarts-stat

----------------------------------------

TITLE: Dynamically Adding Nodes to ECharts Graph in JavaScript
DESCRIPTION: This snippet demonstrates how to add new nodes and edges to an existing ECharts graph visualization. It uses the setOption method to update the chart with new data points and connections.

LANGUAGE: javascript
CODE:
myChart.setOption({
  series: [
    {
      roam: true,
      data: [
        {
          name: 'Node 5',
          x: myChart.getWidth() / 2,
          y: myChart.getHeight() / 2,
          symbolSize: 50
        }
      ],
      links: [
        {
          source: 'Node 5',
          target: 'Node 1'
        },
        {
          source: 'Node 5',
          target: 'Node 2'
        },
        {
          source: 'Node 5',
          target: 'Node 3'
        },
        {
          source: 'Node 5',
          target: 'Node 4'
        }
      ]
    }
  ]
});

----------------------------------------

TITLE: Configuring ECharts Pictorial Bar Chart for Vehicle Visualization
DESCRIPTION: This snippet sets up an ECharts pictorial bar chart to display data about different types of vehicles. It uses custom SVG paths to represent each vehicle, sets up the chart layout, and defines the data series.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'shadow'
    }
  },
  legend: {
    data: ['2015', '2016', '2017']
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  xAxis: {
    type: 'value',
    boundaryGap: [0, 0.01]
  },
  yAxis: {
    type: 'category',
    data: ['bicycle', 'motorcycle', 'car', 'van', 'truck']
  },
  series: [
    {
      name: '2015',
      type: 'pictorialBar',
      symbol: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z',
      symbolRepeat: true,
      symbolSize: 25,
      symbolMargin: '20%',
      data: [14, 23, 60, 22, 17],
      label: {
        show: true,
        position: 'right',
        formatter: '{c}'
      }
    },
    {
      name: '2016',
      type: 'pictorialBar',
      barGap: '-100%',
      symbol: 'path://M15.6,3.3c-0.4,0.1-0.8,0.4-1.1,0.7c-0.3,0.3-0.6,0.7-0.7,1.1c-0.1,0.4-0.1,0.8,0,1.2c0.1,0.4,0.3,0.8,0.5,1.1 c0.3,0.3,0.6,0.6,1,0.8C15.6,8.3,16,8.4,16.4,8.4c0.4,0,0.8-0.1,1.2-0.2c0.4-0.2,0.7-0.4,1-0.7c0.3-0.3,0.5-0.7,0.6-1.1 c0.1-0.4,0.1-0.8,0-1.2c-0.1-0.4-0.3-0.8-0.5-1.1c-0.3-0.3-0.6-0.6-1-0.8C17.3,3.1,16.9,3,16.5,3C16.2,3,15.9,3.1,15.6,3.3z M16.5,4.4c0.2,0,0.4,0,0.6,0.1c0.2,0.1,0.4,0.2,0.5,0.4c0.1,0.2,0.2,0.3,0.3,0.5c0.1,0.2,0.1,0.4,0.1,0.6c0,0.2,0,0.4-0.1,0.6 c-0.1,0.2-0.2,0.4-0.3,0.5c-0.1,0.2-0.3,0.3-0.5,0.4c-0.2,0.1-0.4,0.1-0.6,0.1c-0.2,0-0.4,0-0.6-0.1c-0.2-0.1-0.4-0.2-0.5-0.4 c-0.1-0.2-0.2-0.3-0.3-0.5c-0.1-0.2-0.1-0.4-0.1-0.6c0-0.2,0-0.4,0.1-0.6c0.1-0.2,0.2-0.4,0.3-0.5c0.1-0.2,0.3-0.3,0.5-0.4 C16.1,4.4,16.3,4.4,16.5,4.4z',
      symbolRepeat: true,
      symbolSize: 30,
      symbolMargin: '20%',
      data: [18, 25, 70, 26, 20],
      label: {
        show: true,
        position: 'right',
        formatter: '{c}'
      }
    },
    {
      name: '2017',
      type: 'pictorialBar',
      barGap: '-100%',
      symbol: 'path://M22.9,10.5c0-0.2-0.1-0.4-0.2-0.6l-2-3.1c-0.1-0.1-0.2-0.2-0.3-0.3c-0.1-0.1-0.3-0.1-0.4-0.1H9.5 c-0.2,0-0.3,0-0.4,0.1C9,6.6,8.9,6.7,8.8,6.8l-2,3.1C6.7,10,6.7,10.2,6.7,10.4c0,0.2,0.1,0.4,0.2,0.6c0.1,0.2,0.3,0.3,0.4,0.3 c0.2,0.1,0.4,0.1,0.6,0.1c0.1,0,0.3,0,0.4-0.1c0.1-0.1,0.3-0.1,0.4-0.2c0.1-0.1,0.2-0.2,0.3-0.4c0.1-0.1,0.1-0.3,0.1-0.5 c0-0.2-0.1-0.4-0.2-0.6L8.5,9.2h7.8l-0.7,1.1c-0.1,0.2-0.2,0.4-0.2,0.6c0,0.2,0,0.3,0.1,0.5c0.1,0.1,0.2,0.3,0.3,0.4 c0.1,0.1,0.2,0.2,0.4,0.2c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.4,0,0.6-0.1c0.2-0.1,0.3-0.2,0.4-0.3C22.8,11,22.9,10.7,22.9,10.5z M26.8,15.4c0-0.3-0.1-0.5-0.3-0.7c-0.2-0.2-0.4-0.3-0.7-0.3H4.7c-0.3,0-0.5,0.1-0.7,0.3C3.8,14.9,3.7,15.1,3.7,15.4 c0,0.3,0.1,0.5,0.3,0.7c0.2,0.2,0.4,0.3,0.7,0.3h21.1c0.3,0,0.5-0.1,0.7-0.3C26.7,15.9,26.8,15.7,26.8,15.4z',
      symbolRepeat: true,
      symbolSize: 30,
      symbolMargin: '20%',
      data: [30, 42, 80, 34, 25],
      label: {
        show: true,
        position: 'right',
        formatter: '{c}'
      }
    }
  ]
};

----------------------------------------

TITLE: Using ecStat Histogram Transform in ECharts
DESCRIPTION: Example of using the ecStat histogram transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:histogram',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: Configuring Sunburst Chart with Rotated Labels in ECharts
DESCRIPTION: This code snippet demonstrates how to create a sunburst chart with rotated labels using ECharts. It sets up the chart options, including data, label rotation, and custom styling for different levels of the sunburst.

LANGUAGE: javascript
CODE:
option = {
  series: {
    type: 'sunburst',
    data: [
      {
        name: 'Grandpa',
        children: [
          {
            name: 'Uncle Leo',
            value: 15,
            children: [
              {
                name: 'Cousin Jack',
                value: 2
              },
              {
                name: 'Cousin Mary',
                value: 5,
                children: [
                  {
                    name: 'Jackson',
                    value: 2
                  }
                ]
              },
              {
                name: 'Cousin Ben',
                value: 4
              }
            ]
          },
          {
            name: 'Father',
            value: 10,
            children: [
              {
                name: 'Me',
                value: 5
              },
              {
                name: 'Brother Peter',
                value: 1
              }
            ]
          }
        ]
      },
      {
        name: 'Nancy',
        children: [
          {
            name: 'Uncle Nike',
            children: [
              {
                name: 'Cousin Betty',
                value: 1
              },
              {
                name: 'Cousin Jenny',
                value: 2
              }
            ]
          }
        ]
      }
    ],
    radius: ['15%', '80%'],
    itemStyle: {
      borderRadius: 7,
      borderWidth: 2
    },
    label: {
      rotate: 'tangential'
    },
    levels: [
      {},
      {
        r0: '15%',
        r: '35%',
        itemStyle: {
          borderWidth: 2
        },
        label: {
          rotate: 'tangential'
        }
      },
      {
        r0: '35%',
        r: '70%',
        label: {
          align: 'right'
        }
      },
      {
        r0: '70%',
        r: '72%',
        label: {
          position: 'outside',
          padding: 3,
          silent: false
        },
        itemStyle: {
          borderWidth: 3
        }
      }
    ]
  }
};

----------------------------------------

TITLE: Configuring Rich Text Labels on Map in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a map visualization in ECharts with rich text labels. It includes configuration for the map, series data, and label styling using the rich text feature.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'item',
    formatter: '{b}'
  },
  toolbox: {
    show: true,
    orient: 'vertical',
    left: 'right',
    top: 'center',
    feature: {
      dataView: { readOnly: false },
      restore: {},
      saveAsImage: {}
    }
  },
  series: [
    {
      name: 'USA PopEstimates',
      type: 'map',
      roam: true,
      map: 'USA',
      emphasis: {
        label: {
          show: true
        }
      },
      textFixed: {
        Alaska: [20, -20]
      },
      data: [
        { name: 'Alabama', value: 4822023 },
        { name: 'Alaska', value: 731449 },
        { name: 'Arizona', value: 6553255 },
        { name: 'Arkansas', value: 2949131 },
        { name: 'California', value: 38041430 },
        { name: 'Colorado', value: 5187582 },
        { name: 'Connecticut', value: 3590347 },
        { name: 'Delaware', value: 917092 },
        { name: 'District of Columbia', value: 632323 },
        { name: 'Florida', value: 19317568 },
        { name: 'Georgia', value: 9919945 },
        { name: 'Hawaii', value: 1392313 },
        { name: 'Idaho', value: 1595728 },
        { name: 'Illinois', value: 12875255 },
        { name: 'Indiana', value: 6537334 },
        { name: 'Iowa', value: 3074186 },
        { name: 'Kansas', value: 2885905 },
        { name: 'Kentucky', value: 4380415 },
        { name: 'Louisiana', value: 4601893 },
        { name: 'Maine', value: 1329192 },
        { name: 'Maryland', value: 5884563 },
        { name: 'Massachusetts', value: 6646144 },
        { name: 'Michigan', value: 9883360 },
        { name: 'Minnesota', value: 5379139 },
        { name: 'Mississippi', value: 2984926 },
        { name: 'Missouri', value: 6021988 },
        { name: 'Montana', value: 1005141 },
        { name: 'Nebraska', value: 1855525 },
        { name: 'Nevada', value: 2758931 },
        { name: 'New Hampshire', value: 1320718 },
        { name: 'New Jersey', value: 8864590 },
        { name: 'New Mexico', value: 2085538 },
        { name: 'New York', value: 19570261 },
        { name: 'North Carolina', value: 9752073 },
        { name: 'North Dakota', value: 699628 },
        { name: 'Ohio', value: 11544225 },
        { name: 'Oklahoma', value: 3814820 },
        { name: 'Oregon', value: 3899353 },
        { name: 'Pennsylvania', value: 12763536 },
        { name: 'Rhode Island', value: 1050292 },
        { name: 'South Carolina', value: 4723723 },
        { name: 'South Dakota', value: 833354 },
        { name: 'Tennessee', value: 6456243 },
        { name: 'Texas', value: 26059203 },
        { name: 'Utah', value: 2855287 },
        { name: 'Vermont', value: 626011 },
        { name: 'Virginia', value: 8185867 },
        { name: 'Washington', value: 6897012 },
        { name: 'West Virginia', value: 1855413 },
        { name: 'Wisconsin', value: 5726398 },
        { name: 'Wyoming', value: 576412 },
        { name: 'Puerto Rico', value: 3667084 }
      ],
      label: {
        // Using rich to set multiple styles on a single label
        formatter: [
          '{a|{b}}',
          '{b|{c}}',
          '{c|Population in 2020}'
        ].join('\n'),
        rich: {
          a: {
            color: 'blue',
            fontSize: 10,
            lineHeight: 20
          },
          b: {
            color: 'red',
            fontSize: 15,
            fontWeight: 'bold',
            lineHeight: 20
          },
          c: {
            fontSize: 8,
            lineHeight: 20
          }
        }
      }
    }
  ]
};

----------------------------------------

TITLE: Importing ECharts-GL (Minimal Import)
DESCRIPTION: JavaScript code for minimal import of ECharts core and specific ECharts-GL components.

LANGUAGE: javascript
CODE:
import * as echarts from 'echarts/core';
import { Scatter3DChart } from 'echarts-gl/charts';
import { Grid3DComponent } from 'echarts-gl/components';

echarts.use([Scatter3DChart, Grid3DComponent]);

----------------------------------------

TITLE: Configuring Tree Chart with Polyline Edges in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a tree chart with polyline edges using ECharts. It includes options for chart layout, series type, data structure, and visual styling of nodes and edges.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'item',
    triggerOn: 'mousemove'
  },
  series: [
    {
      type: 'tree',
      data: [
        {
          name: 'flare',
          children: [
            {
              name: 'data',
              children: [
                {
                  name: 'converters',
                  children: [
                    { name: 'Converters', value: 721 },
                    { name: 'DelimitedTextConverter', value: 4294 }
                  ]
                },
                {
                  name: 'DataUtil',
                  value: 3322
                }
              ]
            },
            {
              name: 'display',
              children: [
                { name: 'DirtySprite', value: 8833 },
                { name: 'LineSprite', value: 1732 },
                { name: 'RectSprite', value: 3623 }
              ]
            },
            {
              name: 'flex',
              children: [{ name: 'FlareVis', value: 4116 }]
            },
            {
              name: 'query',
              children: [
                { name: 'AggregateExpression', value: 1616 },
                { name: 'And', value: 1027 },
                { name: 'Arithmetic', value: 3891 },
                { name: 'Average', value: 891 },
                { name: 'BinaryExpression', value: 2893 },
                { name: 'Comparison', value: 5103 },
                { name: 'CompositeExpression', value: 3677 },
                { name: 'Count', value: 781 },
                { name: 'DateUtil', value: 4141 },
                { name: 'Distinct', value: 933 },
                { name: 'Expression', value: 5130 },
                { name: 'ExpressionIterator', value: 3617 },
                { name: 'Fn', value: 3240 },
                { name: 'If', value: 2732 },
                { name: 'IsA', value: 2039 },
                { name: 'Literal', value: 1214 },
                { name: 'Match', value: 3748 },
                { name: 'Maximum', value: 843 },
                {
                  name: 'methods',
                  children: [
                    { name: 'add', value: 593 },
                    { name: 'and', value: 330 },
                    { name: 'average', value: 287 },
                    { name: 'count', value: 277 },
                    { name: 'distinct', value: 292 },
                    { name: 'div', value: 595 },
                    { name: 'eq', value: 594 },
                    { name: 'fn', value: 460 },
                    { name: 'gt', value: 603 },
                    { name: 'gte', value: 625 },
                    { name: 'iff', value: 748 },
                    { name: 'isa', value: 461 },
                    { name: 'lt', value: 597 },
                    { name: 'lte', value: 619 },
                    { name: 'max', value: 283 },
                    { name: 'min', value: 283 },
                    { name: 'mod', value: 591 },
                    { name: 'mul', value: 603 },
                    { name: 'neq', value: 599 },
                    { name: 'not', value: 386 },
                    { name: 'or', value: 323 },
                    { name: 'orderby', value: 307 },
                    { name: 'range', value: 772 },
                    { name: 'select', value: 296 },
                    { name: 'stddev', value: 363 },
                    { name: 'sub', value: 600 },
                    { name: 'sum', value: 280 },
                    { name: 'update', value: 307 },
                    { name: 'variance', value: 335 },
                    { name: 'where', value: 299 },
                    { name: 'xor', value: 354 },
                    { name: '_', value: 264 }
                  ]
                },
                { name: 'Minimum', value: 843 },
                { name: 'Not', value: 1554 },
                { name: 'Or', value: 970 },
                { name: 'Query', value: 13896 },
                { name: 'Range', value: 1594 },
                { name: 'StringUtil', value: 4130 },
                { name: 'Sum', value: 791 },
                { name: 'Variable', value: 1124 },
                { name: 'Variance', value: 1876 },
                { name: 'Xor', value: 1101 }
              ]
            },
            {
              name: 'scale',
              children: [
                { name: 'IScaleMap', value: 2105 },
                { name: 'LinearScale', value: 1316 },
                { name: 'LogScale', value: 3151 },
                { name: 'OrdinalScale', value: 3770 },
                { name: 'QuantileScale', value: 2435 },
                { name: 'QuantitativeScale', value: 4839 },
                { name: 'RootScale', value: 1756 },
                { name: 'Scale', value: 4268 },
                { name: 'ScaleType', value: 1821 },
                { name: 'TimeScale', value: 5833 }
              ]
            }
          ]
        }
      ],
      top: '5%',
      left: '7%',
      bottom: '2%',
      right: '60%',
      symbolSize: 7,
      label: {
        position: 'left',
        verticalAlign: 'middle',
        align: 'right'
      },
      leaves: {
        label: {
          position: 'right',
          verticalAlign: 'middle',
          align: 'left'
        }
      },
      emphasis: {
        focus: 'descendant'
      },
      expandAndCollapse: true,
      animationDuration: 550,
      animationDurationUpdate: 750
    }
  ]
};

----------------------------------------

TITLE: Initializing Hexagonal Binning with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to set up a basic hexagonal binning chart using ECharts. It includes data generation, chart options configuration, and rendering.

LANGUAGE: javascript
CODE:
const data = [];\nfor (let i = 0; i < 5000; i++) {\n  data.push([\n    Math.random() * 5,\n    Math.random() * 4,\n    Math.random() * 20\n  ]);\n}\n\nconst option = {\n  tooltip: {},\n  grid: {\n    top: 10,\n    bottom: 10,\n    left: 10,\n    right: 0\n  },\n  xAxis: {\n    type: 'value',\n    min: 0,\n    max: 5,\n    axisLabel: { show: false },\n    axisLine: { show: false }\n  },\n  yAxis: {\n    type: 'value',\n    min: 0,\n    max: 4,\n    axisLabel: { show: false },\n    axisLine: { show: false }\n  },\n  series: [\n    {\n      type: 'custom',\n      renderItem: renderItem,\n      data: data,\n      dimensions: ['x', 'y', 'extra'],\n      encode: {\n        tooltip: [0, 1, 2]\n      }\n    }\n  ]\n};\n\noption && myChart.setOption(option);

----------------------------------------

TITLE: Basic 3D Scatter Plot with ECharts-GL
DESCRIPTION: JavaScript code demonstrating how to create a basic 3D scatter plot using ECharts-GL, including chart initialization and option configuration.

LANGUAGE: javascript
CODE:
var chart = echarts.init(document.getElementById('main'));
chart.setOption({
    grid3D: {},
    xAxis3D: {},
    yAxis3D: {},
    zAxis3D: {},
    series: [{
        type: 'scatter3D',
        symbolSize: 50,
        data: [[-1, -1, -1], [0, 0, 0], [1, 1, 1]],
        itemStyle: {
            opacity: 1
        }
    }]
})

----------------------------------------

TITLE: Initializing ECharts for Large-Scale GPS Data Visualization
DESCRIPTION: This code snippet sets up an ECharts instance and configures it to display 10 million GPS points using scatterGL. It defines the chart options including axis settings, series data, and visual mapping.

LANGUAGE: javascript
CODE:
$.getJSON(ROOT_PATH + '/data/asset/data/gps/gps_1m.json', function (data) {
  var option = {
    title: {
      text: '10 million GPS points'
    },
    tooltip: {},
    grid: {
      top: 10,
      bottom: 0,
      left: 10,
      right: 0
    },
    xAxis: {
      show: false,
      min: -180,
      max: 180
    },
    yAxis: {
      show: false,
      min: -90,
      max: 90
    },
    series: [{
      type: 'scatterGL',
      progressive: 1e6,
      coordinateSystem: 'cartesian2d',
      symbolSize: 1,
      zoomScale: 0.001,
      blendMode: 'lighter',
      large: true,
      itemStyle: {
        opacity: 0.05
      },
      data: data
    }]
  };

  myChart.setOption(option);
});

----------------------------------------

TITLE: Minimal Import of ECharts-GL Components
DESCRIPTION: Demonstrates how to selectively import specific components from ECharts and ECharts-GL for optimized bundle size.

LANGUAGE: javascript
CODE:
import * as echarts from 'echarts/core';
import { Scatter3DChart } from 'echarts-gl/charts';
import { Grid3DComponent } from 'echarts-gl/components';

echarts.use([Scatter3DChart, Grid3DComponent]);

----------------------------------------

TITLE: Initializing ECharts and Creating Voxelized Image Representation
DESCRIPTION: This code snippet initializes an ECharts instance, loads an image, and creates a voxelized representation using Bar3D. It sets up the chart options, including axes, series, and lighting effects.

LANGUAGE: javascript
CODE:
$.get(ROOT_PATH + 'data/asset/data/hangzhou-tracks.json', function (data) {
    var chart = echarts.init(document.getElementById('main'));

    chart.setOption({
        tooltip: {},
        backgroundColor: '#fff',
        visualMap: {
            show: false,
            dimension: 2,
            min: 0,
            max: 30,
            inRange: {
                color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
            }
        },
        xAxis3D: {
            type: 'value'
        },
        yAxis3D: {
            type: 'value'
        },
        zAxis3D: {
            type: 'value'
        },
        grid3D: {
            viewControl: {
                // projection: 'orthographic'
            }
        },
        series: [{
            type: 'bar3D',
            data: data.map(function (item) {
                return {
                    value: [item[0], item[1], item[2]],
                }
            }),
            shading: 'lambert',
            label: {
                textStyle: {
                    fontSize: 16,
                    borderWidth: 1
                }
            },

            emphasis: {
                label: {
                    textStyle: {
                        fontSize: 20,
                        color: '#900'
                    }
                },
                itemStyle: {
                    color: '#900'
                }
            }
        }]
    });
    window.addEventListener('resize', function () {
        chart.resize();
    });
});

----------------------------------------

TITLE: Importing ECharts-GL (Full Import)
DESCRIPTION: JavaScript code to import the full ECharts library and ECharts-GL extension.

LANGUAGE: javascript
CODE:
import * as echarts from 'echarts';
import 'echarts-gl';

----------------------------------------

TITLE: Creating GitHub Punch Card Visualization with ECharts in JavaScript
DESCRIPTION: This code snippet initializes an ECharts instance and configures it to display a scatter plot that mimics GitHub's punch card visualization. It sets up the x and y axes to represent hours and days of the week, respectively, and uses bubble size to indicate commit frequency.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Punch Card of Github',
    link: 'https://github.com/pissang/echarts-next/graphs/punch-card'
  },
  legend: {
    data: ['Punch Card'],
    left: 'right'
  },
  tooltip: {
    position: 'top',
    formatter: function (params) {
      return (
        params.value[2] +
        ' commits in ' +
        hours[params.value[0]] +
        ' of ' +
        days[params.value[1]]
      );
    }
  },
  grid: {
    left: 2,
    bottom: 10,
    right: 10,
    containLabel: true
  },
  xAxis: {
    type: 'category',
    data: hours,
    boundaryGap: false,
    splitLine: {
      show: true,
      lineStyle: {
        type: 'dashed'
      }
    },
    axisLine: {
      show: false
    }
  },
  yAxis: {
    type: 'category',
    data: days,
    axisLine: {
      show: false
    }
  },
  series: [
    {
      name: 'Punch Card',
      type: 'scatter',
      symbolSize: function (val) {
        return val[2] * 2;
      },
      data: data.map(function (item) {
        return [item[1], item[0], item[2]];
      }),
      animationDelay: function (idx) {
        return idx * 5;
      }
    }
  ]
};

const hours = [
  '12a',
  '1a',
  '2a',
  '3a',
  '4a',
  '5a',
  '6a',
  '7a',
  '8a',
  '9a',
  '10a',
  '11a',
  '12p',
  '1p',
  '2p',
  '3p',
  '4p',
  '5p',
  '6p',
  '7p',
  '8p',
  '9p',
  '10p',
  '11p'
];
const days = [
  'Saturday',
  'Friday',
  'Thursday',
  'Wednesday',
  'Tuesday',
  'Monday',
  'Sunday'
];
const data = [
  [0, 0, 5],
  [0, 1, 1],
  [0, 2, 0],
  [0, 3, 0],
  [0, 4, 0],
  [0, 5, 0],
  [0, 6, 0],
  [0, 7, 0],
  [0, 8, 0],
  [0, 9, 0],
  [0, 10, 0],
  [0, 11, 2],
  [0, 12, 4],
  [0, 13, 1],
  [0, 14, 1],
  [0, 15, 3],
  [0, 16, 4],
  [0, 17, 6],
  [0, 18, 4],
  [0, 19, 4],
  [0, 20, 3],
  [0, 21, 3],
  [0, 22, 2],
  [0, 23, 5],
  [1, 0, 7],
  [1, 1, 0],
  [1, 2, 0],
  [1, 3, 0],
  [1, 4, 0],
  [1, 5, 0],
  [1, 6, 0],
  [1, 7, 0],
  [1, 8, 0],
  [1, 9, 0],
  [1, 10, 5],
  [1, 11, 2],
  [1, 12, 2],
  [1, 13, 6],
  [1, 14, 9],
  [1, 15, 11],
  [1, 16, 6],
  [1, 17, 7],
  [1, 18, 8],
  [1, 19, 12],
  [1, 20, 5],
  [1, 21, 5],
  [1, 22, 7],
  [1, 23, 2],
  [2, 0, 1],
  [2, 1, 1],
  [2, 2, 0],
  [2, 3, 0],
  [2, 4, 0],
  [2, 5, 0],
  [2, 6, 0],
  [2, 7, 0],
  [2, 8, 0],
  [2, 9, 0],
  [2, 10, 3],
  [2, 11, 2],
  [2, 12, 1],
  [2, 13, 9],
  [2, 14, 8],
  [2, 15, 10],
  [2, 16, 6],
  [2, 17, 5],
  [2, 18, 5],
  [2, 19, 5],
  [2, 20, 7],
  [2, 21, 4],
  [2, 22, 2],
  [2, 23, 4],
  [3, 0, 7],
  [3, 1, 3],
  [3, 2, 0],
  [3, 3, 0],
  [3, 4, 0],
  [3, 5, 0],
  [3, 6, 0],
  [3, 7, 0],
  [3, 8, 1],
  [3, 9, 0],
  [3, 10, 5],
  [3, 11, 4],
  [3, 12, 7],
  [3, 13, 14],
  [3, 14, 13],
  [3, 15, 12],
  [3, 16, 9],
  [3, 17, 5],
  [3, 18, 5],
  [3, 19, 10],
  [3, 20, 6],
  [3, 21, 4],
  [3, 22, 4],
  [3, 23, 1],
  [4, 0, 1],
  [4, 1, 3],
  [4, 2, 0],
  [4, 3, 0],
  [4, 4, 0],
  [4, 5, 1],
  [4, 6, 0],
  [4, 7, 0],
  [4, 8, 0],
  [4, 9, 2],
  [4, 10, 4],
  [4, 11, 4],
  [4, 12, 2],
  [4, 13, 4],
  [4, 14, 4],
  [4, 15, 14],
  [4, 16, 12],
  [4, 17, 1],
  [4, 18, 8],
  [4, 19, 5],
  [4, 20, 3],
  [4, 21, 7],
  [4, 22, 3],
  [4, 23, 0],
  [5, 0, 2],
  [5, 1, 1],
  [5, 2, 0],
  [5, 3, 3],
  [5, 4, 0],
  [5, 5, 0],
  [5, 6, 0],
  [5, 7, 0],
  [5, 8, 2],
  [5, 9, 0],
  [5, 10, 4],
  [5, 11, 1],
  [5, 12, 5],
  [5, 13, 10],
  [5, 14, 5],
  [5, 15, 7],
  [5, 16, 11],
  [5, 17, 6],
  [5, 18, 0],
  [5, 19, 5],
  [5, 20, 3],
  [5, 21, 4],
  [5, 22, 2],
  [5, 23, 0],
  [6, 0, 1],
  [6, 1, 0],
  [6, 2, 0],
  [6, 3, 0],
  [6, 4, 0],
  [6, 5, 0],
  [6, 6, 0],
  [6, 7, 0],
  [6, 8, 0],
  [6, 9, 0],
  [6, 10, 1],
  [6, 11, 0],
  [6, 12, 2],
  [6, 13, 1],
  [6, 14, 3],
  [6, 15, 4],
  [6, 16, 0],
  [6, 17, 0],
  [6, 18, 0],
  [6, 19, 0],
  [6, 20, 1],
  [6, 21, 2],
  [6, 22, 2],
  [6, 23, 6]
];

----------------------------------------

TITLE: Configuring Stacked Bar3D Chart in ECharts
DESCRIPTION: This code snippet sets up the options for a stacked 3D bar chart using ECharts. It defines the chart dimensions, axes, series data, and visual properties.

LANGUAGE: javascript
CODE:
option = {
    tooltip: {},
    backgroundColor: '#fff',
    visualMap: {
        max: 1,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        }
    },
    xAxis3D: {
        type: 'category',
        data: ['12a', '1a', '2a', '3a', '4a', '5a', '6a',
        '7a', '8a', '9a','10a','11a',
        '12p', '1p', '2p', '3p', '4p', '5p',
        '6p', '7p', '8p', '9p', '10p', '11p']
    },
    yAxis3D: {
        type: 'category',
        data: ['Saturday', 'Friday', 'Thursday',
        'Wednesday', 'Tuesday', 'Monday', 'Sunday']
    },
    zAxis3D: {
        type: 'value'
    },
    grid3D: {
        boxWidth: 200,
        boxDepth: 80,
        viewControl: {
            // projection: 'orthographic'
        },
        light: {
            main: {
                intensity: 1.2,
                shadow: true
            },
            ambient: {
                intensity: 0.3
            }
        }
    },
    series: [{
        type: 'bar3D',
        data: data.map(function (item) {
            return {
                value: [item[1], item[0], item[2]],
            }
        }),
        shading: 'lambert',
        label: {
            textStyle: {
                fontSize: 16,
                borderWidth: 1
            }
        },
        emphasis: {
            label: {
                textStyle: {
                    fontSize: 20,
                    color: '#900'
                }
            },
            itemStyle: {
                color: '#900'
            }
        }
    }]
}

----------------------------------------

TITLE: Installing ECharts-GL via npm
DESCRIPTION: Commands to install ECharts and ECharts-GL using npm package manager.

LANGUAGE: bash
CODE:
npm install echarts
npm install echarts-gl

----------------------------------------

TITLE: Configuring Geo3D Chart with Region Heights in ECharts (JavaScript)
DESCRIPTION: This code snippet sets up a Geo3D chart using ECharts, configuring the map type, region heights based on population data, and visual styles. It demonstrates how to create a 3D world map visualization with countries of varying heights representing their respective populations.

LANGUAGE: javascript
CODE:
option = {
    backgroundColor: '#cdcfd5',
    geo3D: {
        map: 'world',
        shading: 'lambert',
        light: {
            main: {
                intensity: 5,
                shadow: true,
                shadowQuality: 'high',
                alpha: 30
            },
            ambient: {
                intensity: 0
            },
            ambientCubemap: {
                texture: 'data-gl/asset/canyon.hdr',
                exposure: 1,
                diffuseIntensity: 0.5
            }
        },
        viewControl: {
            distance: 50,
            panMouseButton: 'left',
            rotateMouseButton: 'right'
        },
        groundPlane: {
            show: true,
            color: '#999'
        },
        postEffect: {
            enable: true,
            SSAO: {
                enable: true,
                radius: 2,
                intensity: 1,
                quality: 'high'
            }
        },
        temporalSuperSampling: {
            enable: true
        },
        itemStyle: {
            color: '#fff',
            borderWidth: 0.5,
            borderColor: '#222'
        },
        regionHeight: 0.5
    },
    visualMap: {
        max: 1000000000,
        calculable: true,
        realtime: false,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        },
        outOfRange: {
            colorAlpha: 0
        }
    },
    series: [{
        type: 'bar3D',
        coordinateSystem: 'geo3D',
        shading: 'lambert',
        data: [{
            name: 'China',
            value: 1344130000
        }, {
            name: 'India',
            value: 1247446011
        }, {
            name: 'United States',
            value: 314623000
        }, {
            name: 'Indonesia',
            value: 248645008
        }, {
            name: 'Brazil',
            value: 201032714
        }, {
            name: 'Pakistan',
            value: 196174380
        }, {
            name: 'Nigeria',
            value: 170901000
        }, {
            name: 'Bangladesh',
            value: 152518015
        }, {
            name: 'Russia',
            value: 143228300
        }, {
            name: 'Japan',
            value: 127253075
        }, {
            name: 'Mexico',
            value: 112336538
        }, {
            name: 'Philippines',
            value: 99275100
        }, {
            name: 'Vietnam',
            value: 89316200
        }, {
            name: 'Germany',
            value: 81946000
        }, {
            name: 'Egypt',
            value: 82798000
        }, {
            name: 'Turkey',
            value: 74724269
        }, {
            name: 'Thailand',
            value: 64337000
        }, {
            name: 'United Kingdom',
            value: 62435709
        }, {
            name: 'South Africa',
            value: 51452352
        }, {
            name: 'South Korea',
            value: 49779000
        }, {
            name: 'Myanmar',
            value: 48137741
        }, {
            name: 'Spain',
            value: 47042984
        }, {
            name: 'Colombia',
            value: 46413791
        }, {
            name: 'Ukraine',
            value: 45706100
        }, {
            name: 'Tanzania',
            value: 45040000
        }, {
            name: 'Argentina',
            value: 40134425
        }, {
            name: 'Kenya',
            value: 40046566
        }, {
            name: 'Poland',
            value: 38186860
        }, {
            name: 'Sudan',
            value: 34206710
        }, {
            name: 'Canada',
            value: 34108752
        }, {
            name: 'Uganda',
            value: 33640833
        }, {
            name: 'Morocco',
            value: 32521143
        }, {
            name: 'Peru',
            value: 29549517
        }, {
            name: 'Malaysia',
            value: 28728607
        }, {
            name: 'Venezuela',
            value: 28047938
        }, {
            name: 'Nepal',
            value: 26494504
        }, {
            name: 'Madagascar',
            value: 21315135
        }, {
            name: 'Cameroon',
            value: 20129878
        }, {
            name: 'Chile',
            value: 17423214
        }, {
            name: 'Netherlands',
            value: 16704000
        }, {
            name: 'Burkina Faso',
            value: 16241811
        }, {
            name: 'Niger',
            value: 16068994
        }, {
            name: 'Kazakhstan',
            value: 16009600
        }, {
            name: 'Guatemala',
            value: 15137569
        }, {
            name: 'Ecuador',
            value: 15007343
        }, {
            name: 'Cambodia',
            value: 14952665
        }, {
            name: 'Senegal',
            value: 13703000
        }, {
            name: 'Zimbabwe',
            value: 13061239
        }, {
            name: 'Greece',
            value: 11304000
        }, {
            name: 'Cuba',
            value: 11241161
        }, {
            name: 'Portugal',
            value: 10561614
        }, {
            name: 'Hungary',
            value: 9958453
        }, {
            name: 'Tunisia',
            value: 10673800
        }, {
            name: 'Rwanda',
            value: 10718379
        }, {
            name: 'Chad',
            value: 11274106
        }, {
            name: 'Belgium',
            value: 10839905
        }, {
            name: 'Guinea',
            value: 10824200
        }, {
            name: 'Dominican Republic',
            value: 10378267
        }, {
            name: 'Czechia',
            value: 10177300
        }, {
            name: 'Benin',
            value: 9099922
        }, {
            name: 'Burundi',
            value: 8575172
        }, {
            name: 'Bolivia',
            value: 10027254
        }, {
            name: 'Haiti',
            value: 9896400
        }, {
            name: 'Sweden',
            value: 9415570
        }, {
            name: 'Austria',
            value: 8372930
        }, {
            name: 'Azerbaijan',
            value: 9165000
        }, {
            name: 'Honduras',
            value: 8385072
        }, {
            name: 'Switzerland',
            value: 7870134
        }, {
            name: 'Tajikistan',
            value: 7616000
        }, {
            name: 'Israel',
            value: 7653600
        }, {
            name: 'Bulgaria',
            value: 7364570
        }, {
            name: 'Serbia',
            value: 7276604
        }, {
            name: 'Hong Kong',
            value: 7071600
        }, {
            name: 'Paraguay',
            value: 6672631
        }, {
            name: 'Laos',
            value: 6645827
        }, {
            name: 'Libya',
            value: 6469000
        }, {
            name: 'Jordan',
            value: 6318000
        }, {
            name: 'El Salvador',
            value: 6227491
        }, {
            name: 'Nicaragua',
            value: 6071045
        }, {
            name: 'Kyrgyzstan',
            value: 5550239
        }, {
            name: 'Denmark',
            value: 5543453
        }, {
            name: 'Singapore',
            value: 5183700
        }, {
            name: 'Finland',
            value: 5401267
        }, {
            name: 'Slovakia',
            value: 5440078
        }, {
            name: 'Norway',
            value: 4953088
        }, {
            name: 'Costa Rica',
            value: 4667096
        }, {
            name: 'Ireland',
            value: 4588252
        }, {
            name: 'Turkmenistan',
            value: 5125693
        }, {
            name: 'Georgia',
            value: 4497600
        }, {
            name: 'Croatia',
            value: 4290612
        }, {
            name: 'New Zealand',
            value: 4405200
        }, {
            name: 'Lebanon',
            value: 4224000
        }, {
            name: 'Bosnia and Herzegovina',
            value: 3839737
        }, {
            name: 'Panama',
            value: 3405813
        }, {
            name: 'Moldova',
            value: 3559500
        }, {
            name: 'Puerto Rico',
            value: 3706690
        }, {
            name: 'Mauritania',
            value: 3359185
        }, {
            name: 'Uruguay',
            value: 3286314
        }, {
            name: 'Albania',
            value: 2821977
        }, {
            name: 'Lithuania',
            value: 3053800
        }, {
            name: 'Armenia',
            value: 3262200
        }, {
            name: 'Mongolia',
            value: 2754685
        }, {
            name: 'Jamaica',
            value: 2709300
        }, {
            name: 'Namibia',
            value: 2280700
        }, {
            name: 'Botswana',
            value: 2029307
        }, {
            name: 'Slovenia',
            value: 2050189
        }, {
            name: 'Latvia',
            value: 2070371
        }, {
            name: 'Lesotho',
            value: 2193843
        }, {
            name: 'The Bahamas',
            value: 353658
        }, {
            name: 'Estonia',
            value: 1294455
        }, {
            name: 'Trinidad and Tobago',
            value: 1346350
        }, {
            name: 'Mauritius',
            value: 1284264
        }, {
            name: 'Swaziland',
            value: 1193148
        }, {
            name: 'Timor-Leste',
            value: 1172390
        }, {
            name: 'Cyprus',
            value: 1116564
        }, {
            name: 'Fiji',
            value: 876000
        }, {
            name: 'Guyana',
            value: 784894
        }, {
            name: 'Bhutan',
            value: 738267
        }, {
            name: 'Comoros',
            value: 724300
        }, {
            name: 'Montenegro',
            value: 625266
        }, {
            name: 'Equatorial Guinea',
            value: 720213
        }, {
            name: 'Solomon Islands',
            value: 552267
        }, {
            name: 'Luxembourg',
            value: 511840
        }, {
            name: 'Suriname',
            value: 529419
        }, {
            name: 'Cape Verde',
            value: 491875
        }, {
            name: 'Malta',
            value: 452515
        }, {
            name: 'Brunei',
            value: 393162
        }, {
            name: 'Maldives',
            value: 317280
        }, {
            name: 'Iceland',
            value: 318452
        }, {
            name: 'Barbados',
            value: 285000
        }, {
            name: 'Vanuatu',
            value: 224564
        }, {
            name: 'Samoa',
            value: 187820
        }, {
            name: 'Saint Lucia',
            value: 176000
        }, {
            name: 'Sao Tome and Principe',
            value: 168526
        }, {
            name: 'Saint Vincent and the Grenadines',
            value: 109000
        }, {
            name: 'Tonga',
            value: 103036
        }, {
            name: 'Grenada',
            value: 103328
        }, {
            name: 'Antigua and Barbuda',
            value: 86295
        }, {
            name: 'Seychelles',
            value: 90945
        }, {
            name: 'Andorra',
            value: 78115
        }, {
            name: 'Dominica',
            value: 71293
        }, {
            name: 'Saint Kitts and Nevis',
            value: 52402
        }, {
            name: 'Marshall Islands',
            value: 52634
        }, {
            name: 'Monaco',
            value: 35427
        }, {
            name: 'Liechtenstein',
            value: 36304
        }, {
            name: 'San Marino',
            value: 31735
        }, {
            name: 'Palau',
            value: 20609
        }, {
            name: 'Tuvalu',
            value: 11323
        }, {
            name: 'Nauru',
            value: 10084
        }],
        barSize: 0.5,
        minHeight: 0.2,
        silent: true,
        itemStyle: {
            color: 'rgb(64,141,215)'
        }
    }]
};

----------------------------------------

TITLE: Building ECharts Website
DESCRIPTION: Command to build the main ECharts website in development mode using Gulp

LANGUAGE: shell
CODE:
gulp release --dev

----------------------------------------

TITLE: Configuring tsconfig.json for Bower Users with tslib
DESCRIPTION: JSON configuration in tsconfig.json for Bower users to set up paths mapping for tslib.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "amd",
        "importHelpers": true,
        "baseUrl": "./",
        "paths": {
            "tslib" : ["bower_components/tslib/tslib.d.ts"]
        }
    }
}


----------------------------------------

TITLE: Installing ECharts-GL via npm
DESCRIPTION: Commands to install ECharts and ECharts-GL using npm package manager.

LANGUAGE: bash
CODE:
npm install echarts
npm install echarts-gl

----------------------------------------

TITLE: Configuring Mixed Bar Chart with Value Axis Zoom in ECharts
DESCRIPTION: This code snippet demonstrates how to create a mixed bar chart with zooming functionality on the value axis using ECharts. It includes configuration for multiple data series, axis settings, and zoom controls.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross',
      crossStyle: {
        color: '#999'
      }
    }
  },
  toolbox: {
    feature: {
      dataView: { show: true, readOnly: false },
      magicType: { show: true, type: ['line', 'bar'] },
      restore: { show: true },
      saveAsImage: { show: true }
    }
  },
  legend: {
    data: ['Evaporation', 'Precipitation', 'Temperature']
  },
  xAxis: [
    {
      type: 'category',
      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
      axisPointer: {
        type: 'shadow'
      }
    }
  ],
  yAxis: [
    {
      type: 'value',
      name: 'Precipitation',
      min: 0,
      max: 250,
      interval: 50,
      axisLabel: {
        formatter: '{value} ml'
      }
    },
    {
      type: 'value',
      name: 'Temperature',
      min: 0,
      max: 25,
      interval: 5,
      axisLabel: {
        formatter: '{value} °C'
      }
    }
  ],
  series: [
    {
      name: 'Evaporation',
      type: 'bar',
      data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]
    },
    {
      name: 'Precipitation',
      type: 'bar',
      data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]
    },
    {
      name: 'Temperature',
      type: 'line',
      yAxisIndex: 1,
      data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]
    }
  ],
  dataZoom: [
    {
      type: 'inside',
      start: 0,
      end: 20
    },
    {
      show: true,
      type: 'slider',
      top: '90%',
      start: 0,
      end: 20
    }
  ]
};

----------------------------------------

TITLE: Configuring tsconfig.json for tslib Usage
DESCRIPTION: JSON configuration in tsconfig.json to enable the importHelpers compiler option for using tslib.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "importHelpers": true
    }
}


----------------------------------------

TITLE: Building ECharts Documentation
DESCRIPTION: Shell command to build the ECharts documentation

LANGUAGE: shell
CODE:
sh release.sh

----------------------------------------

TITLE: Installing tslib via JSPM
DESCRIPTION: Shell commands for installing tslib using JSPM, with different versions for various TypeScript releases.

LANGUAGE: shell
CODE:
# TypeScript 3.9.2 or later
jspm install tslib

# TypeScript 3.8.4 or earlier
jspm install tslib@^1

# TypeScript 2.3.2 or earlier
jspm install tslib@1.6.1


----------------------------------------

TITLE: Running ECharts Examples Debug Build
DESCRIPTION: Command to build ECharts examples in development mode using Gulp

LANGUAGE: shell
CODE:
gulp release --dev

----------------------------------------

TITLE: Including ECharts-GL via Script Tags
DESCRIPTION: HTML snippet showing how to include ECharts and ECharts-GL libraries using CDN script tags.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts-gl/dist/echarts-gl.min.js"></script>

----------------------------------------

TITLE: Implementing a Merge Function for ETPL
DESCRIPTION: Provides a compatibility function for older versions of ETPL, allowing rendering of templates directly into HTML elements.

LANGUAGE: javascript
CODE:
/**
 * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。
 * 兼容老版本的模板引擎api
 * 
 * @param {HTMLElement} element 渲染字符串填充的HTML元素
 * @param {string} name target名称
 * @param {Object=} data 模板数据
 */
etpl.merge = function ( element, name, data ) {
    if ( element ) {
        element.innerHTML = this.render( name, data );
    }
};

----------------------------------------

TITLE: Configuring Two Value-Axes Polar Chart in ECharts
DESCRIPTION: This code snippet sets up the configuration for a polar chart with two value axes using ECharts. It defines the data, polar coordinate system, radiusAxis, angleAxis, and series options.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Two Value-Axes in Polar'
  },
  polar: {
    center: ['50%', '54%']
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  angleAxis: {
    type: 'value',
    startAngle: 0
  },
  radiusAxis: {
    min: 0
  },
  series: [
    {
      coordinateSystem: 'polar',
      name: 'line',
      type: 'line',
      showSymbol: false,
      data: data
    }
  ],
  animationDuration: 2000
};

const data = [];

for (let i = 0; i <= 360; i++) {
  let t = (i / 180) * Math.PI;
  let r = Math.sin(2 * t) * Math.cos(2 * t);
  data.push([r, i]);
}

----------------------------------------

TITLE: Clustering Transform Example
DESCRIPTION: Demonstrates how to use the clustering transform functionality with configuration options

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:clustering',
        config: {
            clusterCount: 6,
            outputClusterIndexDimension: 5,
            outputCentroidDimensions: [6, 7]
        }
    }],
    ...
});

----------------------------------------

TITLE: Importing Handsontable in CommonJS
DESCRIPTION: Shows how to import Handsontable in a CommonJS environment and provides a Browserify bundling command.

LANGUAGE: javascript
CODE:
var handsontable = require('handsontable');

LANGUAGE: bash
CODE:
browserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro

----------------------------------------

TITLE: Histogram Transform Registration
DESCRIPTION: Shows how to register and use the histogram transform with ECharts 5.0+

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.histogram);

chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:histogram',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: Loading Handsontable with AMD
DESCRIPTION: Demonstrates how to load Handsontable using AMD (Asynchronous Module Definition) and create a basic instance.

LANGUAGE: javascript
CODE:
require(['handsontable'], function(Handsontable) {
    var hot = new Handsontable(document.getElementById('example'), {
      data: [[1, 2, 3, 4], [1, 2, 3, 4]]
    });
});

----------------------------------------

TITLE: Basic ecStat Usage with Script Tag
DESCRIPTION: Example showing how to include and use ecStat in browser via script tag

LANGUAGE: html
CODE:
<script src='./dist/ecStat.js'></script>
<script>

var result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);

</script>

----------------------------------------

TITLE: Compiling and Rendering a Template with ETPL
DESCRIPTION: Illustrates the basic usage of ETPL by compiling a template and rendering it with data.

LANGUAGE: javascript
CODE:
var render = etpl.compile('Hello ${name}!');
var text = render({ name: 'etpl' });

----------------------------------------

TITLE: Initializing Simple Graph with ECharts in JavaScript
DESCRIPTION: This code snippet demonstrates how to create a basic graph visualization using ECharts. It sets up the chart options including nodes, edges, and layout settings for a simple network graph.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Basic Graph'
  },
  tooltip: {},
  animationDurationUpdate: 1500,
  animationEasingUpdate: 'quinticInOut',
  series: [
    {
      type: 'graph',
      layout: 'none',
      symbolSize: 50,
      roam: true,
      label: {
        show: true
      },
      edgeSymbol: ['circle', 'arrow'],
      edgeSymbolSize: [4, 10],
      edgeLabel: {
        fontSize: 20
      },
      data: [
        {
          name: 'Node 1',
          x: 300,
          y: 300
        },
        {
          name: 'Node 2',
          x: 800,
          y: 300
        },
        {
          name: 'Node 3',
          x: 550,
          y: 100
        },
        {
          name: 'Node 4',
          x: 550,
          y: 500
        }
      ],
      links: [
        {
          source: 0,
          target: 1,
          symbolSize: [5, 20],
          label: {
            show: true
          },
          lineStyle: {
            width: 5,
            curveness: 0.2
          }
        },
        {
          source: 'Node 2',
          target: 'Node 1',
          label: {
            show: true
          },
          lineStyle: {
            curveness: 0.2
          }
        },
        {
          source: 'Node 1',
          target: 'Node 3'
        },
        {
          source: 'Node 2',
          target: 'Node 3'
        },
        {
          source: 'Node 2',
          target: 'Node 4'
        },
        {
          source: 'Node 1',
          target: 'Node 4'
        }
      ],
      lineStyle: {
        opacity: 0.9,
        width: 2,
        curveness: 0
      }
    }
  ]
};

----------------------------------------

TITLE: Installing ecStat via NPM
DESCRIPTION: Command to install the ecStat library using npm package manager

LANGUAGE: sh
CODE:
npm install echarts-stat

----------------------------------------

TITLE: Installing Handsontable via npm or Bower
DESCRIPTION: Shows how to install Handsontable using npm or Bower package managers.

LANGUAGE: bash
CODE:
npm install handsontable --save

LANGUAGE: bash
CODE:
bower install handsontable --save

----------------------------------------

TITLE: Registering ecStat Regression Transform
DESCRIPTION: Code to register the ecStat regression transform for use with ECharts.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.regression);

----------------------------------------

TITLE: Using ecStat Clustering Transform in ECharts
DESCRIPTION: Example of using the ecStat clustering transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:clustering',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: Using ecStat Clustering Transform in ECharts
DESCRIPTION: Example of using the ecStat clustering transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:clustering',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: Implementing Easing Functions in JavaScript for ECharts
DESCRIPTION: This snippet defines various easing functions that can be used to generate data points for the line chart. It includes linear, quadratic, cubic, quartic, quintic, sinusoidal, exponential, circular, elastic, back, and bounce easing functions.

LANGUAGE: javascript
CODE:
var easingFuncs = {
  linear: function(k) {
    return k;
  },
  quadraticIn: function(k) {
    return k * k;
  },
  quadraticOut: function(k) {
    return k * (2 - k);
  },
  quadraticInOut: function(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k;
    }
    return -0.5 * (--k * (k - 2) - 1);
  },
  cubicIn: function(k) {
    return k * k * k;
  },
  cubicOut: function(k) {
    return --k * k * k + 1;
  },
  cubicInOut: function(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k;
    }
    return 0.5 * ((k -= 2) * k * k + 2);
  },
  quarticIn: function(k) {
    return k * k * k * k;
  },
  quarticOut: function(k) {
    return 1 - --k * k * k * k;
  },
  quarticInOut: function(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k * k;
    }
    return -0.5 * ((k -= 2) * k * k * k - 2);
  },
  quinticIn: function(k) {
    return k * k * k * k * k;
  },
  quinticOut: function(k) {
    return --k * k * k * k * k + 1;
  },
  quinticInOut: function(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k * k * k;
    }
    return 0.5 * ((k -= 2) * k * k * k * k + 2);
  },
  sinusoidalIn: function(k) {
    return 1 - Math.cos((k * Math.PI) / 2);
  },
  sinusoidalOut: function(k) {
    return Math.sin((k * Math.PI) / 2);
  },
  sinusoidalInOut: function(k) {
    return 0.5 * (1 - Math.cos(Math.PI * k));
  },
  exponentialIn: function(k) {
    return k === 0 ? 0 : Math.pow(1024, k - 1);
  },
  exponentialOut: function(k) {
    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
  },
  exponentialInOut: function(k) {
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if ((k *= 2) < 1) {
      return 0.5 * Math.pow(1024, k - 1);
    }
    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
  },
  circularIn: function(k) {
    return 1 - Math.sqrt(1 - k * k);
  },
  circularOut: function(k) {
    return Math.sqrt(1 - --k * k);
  },
  circularInOut: function(k) {
    if ((k *= 2) < 1) {
      return -0.5 * (Math.sqrt(1 - k * k) - 1);
    }
    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
  },
  elasticIn: function(k) {
    var s;
    var a = 0.1;
    var p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = (p * Math.asin(1 / a)) / (2 * Math.PI);
    }
    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin(((k - s) * (2 * Math.PI)) / p));
  },
  elasticOut: function(k) {
    var s;
    var a = 0.1;
    var p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = (p * Math.asin(1 / a)) / (2 * Math.PI);
    }
    return a * Math.pow(2, -10 * k) * Math.sin(((k - s) * (2 * Math.PI)) / p) + 1;
  },
  elasticInOut: function(k) {
    var s;
    var a = 0.1;
    var p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = (p * Math.asin(1 / a)) / (2 * Math.PI);
    }
    if ((k *= 2) < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin(((k - s) * (2 * Math.PI)) / p));
    }
    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin(((k - s) * (2 * Math.PI)) / p) * 0.5 + 1;
  },
  backIn: function(k) {
    var s = 1.70158;
    return k * k * ((s + 1) * k - s);
  },
  backOut: function(k) {
    var s = 1.70158;
    return --k * k * ((s + 1) * k + s) + 1;
  },
  backInOut: function(k) {
    var s = 1.70158 * 1.525;
    if ((k *= 2) < 1) {
      return 0.5 * (k * k * ((s + 1) * k - s));
    }
    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
  },
  bounceIn: function(k) {
    return 1 - easingFuncs.bounceOut(1 - k);
  },
  bounceOut: function(k) {
    if (k < 1 / 2.75) {
      return 7.5625 * k * k;
    } else if (k < 2 / 2.75) {
      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
    } else if (k < 2.5 / 2.75) {
      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
    } else {
      return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
    }
  },
  bounceInOut: function(k) {
    if (k < 0.5) {
      return easingFuncs.bounceIn(k * 2) * 0.5;
    }
    return easingFuncs.bounceOut(k * 2 - 1) * 0.5 + 0.5;
  }
};

----------------------------------------

TITLE: Registering ecStat Clustering Transform
DESCRIPTION: Code to register the ecStat clustering transform for use with ECharts.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.clustering);

----------------------------------------

TITLE: Basic ETPL Template Compilation
DESCRIPTION: Demonstrates how to compile a simple template string using ETPL.

LANGUAGE: javascript
CODE:
var render = etpl.compile('Hello ${name}!');

----------------------------------------

TITLE: Installing ecStat via npm
DESCRIPTION: Command to install ecStat using npm package manager.

LANGUAGE: sh
CODE:
npm install echarts-stat

----------------------------------------

TITLE: Requiring ETPL in AMD Environment (Asynchronous)
DESCRIPTION: Demonstrates asynchronous loading of the ETPL module in an AMD environment using the require function.

LANGUAGE: javascript
CODE:
require([ 'etpl' ], function (etpl) {
});

----------------------------------------

TITLE: Configuring ECharts Line Chart for Easing Function Visualization
DESCRIPTION: This snippet sets up the basic configuration for an ECharts line chart to visualize easing functions. It defines the chart options, including the x-axis, y-axis, and initial series data.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Line Easing Visualizing'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  xAxis: {
    type: 'value',
    min: 0,
    max: 1,
    precision: 2
  },
  yAxis: {
    type: 'value',
    min: 0,
    max: 1,
    precision: 2
  },
  series: [
    {
      name: 'Line',
      type: 'line',
      data: [],
      showSymbol: false,
      clip: true
    }
  ]
};

----------------------------------------

TITLE: Importing ECharts Graph Modularity in ES6
DESCRIPTION: ES6 import statements for including ECharts core and the graph modularity extension in a JavaScript module.

LANGUAGE: javascript
CODE:
import * as echarts from 'echarts';
import 'echarts-graph-modularity';

----------------------------------------

TITLE: Installing ETPL via NPM
DESCRIPTION: Command to install ETPL package using npm package manager.

LANGUAGE: bash
CODE:
$ npm install etpl

----------------------------------------

TITLE: Installing ECharts Graph Modularity via Script Tags
DESCRIPTION: Installation method using HTML script tags to include both ECharts core and the graph modularity extension.

LANGUAGE: html
CODE:
<script src="echarts.min.js"></script>
<script src="echarts-graph-modularity.min.js"></script>

----------------------------------------

TITLE: Creating a 3D Scatter Plot with ECharts-GL
DESCRIPTION: JavaScript code demonstrating basic usage of ECharts-GL to create a 3D scatter plot with custom options.

LANGUAGE: javascript
CODE:
var chart = echarts.init(document.getElementById('main'));
chart.setOption({
    grid3D: {},
    xAxis3D: {},
    yAxis3D: {},
    zAxis3D: {},
    series: [{
        type: 'scatter3D',
        symbolSize: 50,
        data: [[-1, -1, -1], [0, 0, 0], [1, 1, 1]],
        itemStyle: {
            opacity: 1
        }
    }]
})

----------------------------------------

TITLE: Requiring ETPL in AMD Environment (Synchronous)
DESCRIPTION: Shows how to require the ETPL module synchronously in an AMD (Asynchronous Module Definition) environment.

LANGUAGE: javascript
CODE:
define(function (require) {
    var etpl = require('etpl');
});

----------------------------------------

TITLE: Implementing Id Transform in ECharts
DESCRIPTION: This snippet shows how to use the Id Transform to add a unique identifier to each data point in ECharts. It demonstrates the registration of the transform and its configuration in the chart option, specifying the dimension index and name for the new ID column.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecSimpleTransform.aggregate);

const option = {
    dataset: [{
        source: [
            ['aa', 'bb', 'cc', 'tag'],
            [12, 0.33, 5200, 'AA'],
            [21, 0.65, 8100, 'AA'],
            ...
        ]
    }, {
        transform: {
            type: 'ecSimpleTransform:id',
            config: {
                dimensionIndex: 4,
                dimensionName: 'ID'
            }
        }
        // Then the result data will be:
        // [
        //     ['aa', 'bb', 'cc', 'tag', 'ID'],
        //     [12, 0.33, 5200, 'AA', 0],
        //     [21, 0.65, 8100, 'BB', 1],
        //     ...
        // ]
    }],
    // ...
};

const myChart = echarts.init(dom);
myChart.setOption(option);

----------------------------------------

TITLE: Basic Handsontable Usage in HTML and JavaScript
DESCRIPTION: Demonstrates how to create a basic Handsontable instance with sample data, row headers, and column headers.

LANGUAGE: html
CODE:
<div id="example"></div>

LANGUAGE: javascript
CODE:
var data = [
  ["", "Ford", "Volvo", "Toyota", "Honda"],
  ["2016", 10, 11, 12, 13],
  ["2017", 20, 11, 14, 13],
  ["2018", 30, 15, 12, 13]
];

var container = document.getElementById('example');
var hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true
});

----------------------------------------

TITLE: Customizing Latinize.js Character Mapping
DESCRIPTION: Examples of how to modify the character mapping used by Latinize.js. It shows how to add a new mapping and how to extend the mapping object with multiple entries, specifically for German umlauts.

LANGUAGE: javascript
CODE:
latinize.characters['Ω'] = 'O';

// modify the behavior for German umlauts
_.extend(latinize.characters,
  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});

----------------------------------------

TITLE: Basic Handsontable JavaScript Implementation
DESCRIPTION: Example of initializing Handsontable with sample data and basic configuration options including row and column headers

LANGUAGE: javascript
CODE:
var data = [
  ["", "Ford", "Volvo", "Toyota", "Honda"],
  ["2016", 10, 11, 12, 13],
  ["2017", 20, 11, 14, 13],
  ["2018", 30, 15, 12, 13]
];

var container = document.getElementById('example');
var hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true
});

----------------------------------------

TITLE: Using ecStat Regression Transform in ECharts
DESCRIPTION: Example of using the ecStat regression transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:regression',
        config: {
            method: regressionType,
            ...opt
        }
    }],
    ...
});

----------------------------------------

TITLE: Basic Immutable Map Usage Example
DESCRIPTION: Demonstrates creating and modifying an immutable Map

LANGUAGE: javascript
CODE:
var Immutable = require('immutable');
var map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: Basic Immutable Map Usage Example
DESCRIPTION: Demonstrates creating and modifying an immutable Map

LANGUAGE: javascript
CODE:
var Immutable = require('immutable');
var map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: Installing Latinize.js via npm
DESCRIPTION: Command to install Latinize.js using npm package manager.

LANGUAGE: bash
CODE:
npm install latinize

----------------------------------------

TITLE: Installing Immutable.js via NPM
DESCRIPTION: Shows how to install the immutable package using npm package manager

LANGUAGE: shell
CODE:
npm install immutable

----------------------------------------

TITLE: Batching Mutations in Immutable.js
DESCRIPTION: Shows how to use withMutations for efficient batch updates to immutable collections.

LANGUAGE: JavaScript
CODE:
var list1 = Immutable.List.of(1,2,3);
var list2 = list1.withMutations(function (list) {
  list.push(4).push(5).push(6);
});
assert(list1.size === 3);
assert(list2.size === 6);

----------------------------------------

TITLE: Customizing Latinize.js Character Mappings
DESCRIPTION: Examples of modifying the character translation table to customize how specific characters are converted.

LANGUAGE: javascript
CODE:
latinize.characters['Ω'] = 'O';

// modify the behavior for German umlauts
_.extend(latinize.characters,
  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});

----------------------------------------

TITLE: Basic Handsontable HTML Setup
DESCRIPTION: HTML markup required for basic Handsontable initialization

LANGUAGE: html
CODE:
<div id="example"></div>

----------------------------------------

TITLE: Using Latinize.js in Browser
DESCRIPTION: Example of using Latinize.js directly in a browser environment with HTML script tags.

LANGUAGE: html
CODE:
<script src="../latinize.js"></script>
<script>
    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));
</script>

----------------------------------------

TITLE: Nested Structures in Immutable.js
DESCRIPTION: Shows how to create and manipulate nested immutable structures using fromJS, mergeDeep, getIn, and updateIn methods.

LANGUAGE: JavaScript
CODE:
var nested = Immutable.fromJS({a:{b:{c:[3,4,5]}}});
// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }

var nested2 = nested.mergeDeep({a:{b:{d:6}}});
// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }

nested2.getIn(['a', 'b', 'd']); // 6

var nested3 = nested2.updateIn(['a', 'b', 'd'], value => value + 1);
// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }

var nested4 = nested3.updateIn(['a', 'b', 'c'], list => list.push(6));
// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }

----------------------------------------

TITLE: Loading ETPL in Node.js
DESCRIPTION: Shows how to require and use ETPL module in a Node.js environment.

LANGUAGE: javascript
CODE:
var etpl = require('etpl');

----------------------------------------

TITLE: Loading ETPL in Node.js
DESCRIPTION: Shows how to require and use ETPL module in a Node.js environment.

LANGUAGE: javascript
CODE:
var etpl = require('etpl');

----------------------------------------

TITLE: Including Immutable.js in Browser via Script Tag
DESCRIPTION: Shows how to include Immutable.js in a web page using a script tag and provides a basic usage example.

LANGUAGE: HTML
CODE:
<script src="immutable.min.js"></script>
<script>
    var map1 = Immutable.Map({a:1, b:2, c:3});
    var map2 = map1.set('b', 50);
    map1.get('b'); // 2
    map2.get('b'); // 50
</script>

----------------------------------------

TITLE: Using ETPL in AMD Environment (Async)
DESCRIPTION: Shows how to load ETPL module asynchronously in an AMD environment using require.

LANGUAGE: javascript
CODE:
require([ 'etpl' ], function (etpl) {
});

----------------------------------------

TITLE: Importing Handsontable as CommonJS Module
DESCRIPTION: Example of importing Handsontable in a CommonJS environment and instructions for Browserify bundling

LANGUAGE: javascript
CODE:
var handsontable = require('handsontable');

----------------------------------------

TITLE: Using ETPL in AMD Environment (Sync)
DESCRIPTION: Demonstrates how to load ETPL module synchronously in an AMD environment using require.

LANGUAGE: javascript
CODE:
define(function (require) {
    var etpl = require('etpl');
});

----------------------------------------

TITLE: Using ETPL in AMD Environment (Sync)
DESCRIPTION: Demonstrates how to load ETPL module synchronously in an AMD environment using require.

LANGUAGE: javascript
CODE:
define(function (require) {
    var etpl = require('etpl');
});

----------------------------------------

TITLE: Installing Immutable.js via npm
DESCRIPTION: Command to install the Immutable.js library using npm package manager.

LANGUAGE: Shell
CODE:
npm install immutable

----------------------------------------

TITLE: Loading ETPL via Browser Script Tag
DESCRIPTION: Shows how to include ETPL directly in a browser environment using a script tag to get a global etpl variable.

LANGUAGE: html
CODE:
<script src="etpl.js"></script>

----------------------------------------

TITLE: tslib Configuration for Bower
DESCRIPTION: TypeScript compiler configuration example for using tslib with Bower package manager

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "amd",
        "importHelpers": true,
        "baseUrl": "./",
        "paths": {
            "tslib" : ["bower_components/tslib/tslib.d.ts"]
        }
    }
}

----------------------------------------

TITLE: Configuring Tree Chart Title Metadata in Markdown
DESCRIPTION: Markdown frontmatter configuration for defining a tree chart visualization with both English and Chinese titles, specifying the category as 'tree'.

LANGUAGE: markdown
CODE:
---
title: From Bottom to Top Tree
category: tree
titleCN: 从下到上树状图
---

----------------------------------------

TITLE: TypeScript Integration
DESCRIPTION: Demonstrates using Immutable.js with TypeScript including type definitions

LANGUAGE: javascript
CODE:
///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>
import Immutable = require('immutable');
var map1: Immutable.Map<string, number>;
map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: YAML Frontmatter Configuration for Basic Sunburst Chart
DESCRIPTION: Basic YAML frontmatter configuration that defines metadata for a sunburst chart example documentation page, including title, category, and Chinese title variant.

LANGUAGE: yaml
CODE:
---
title: Basic Sunburst
category: sunburst
titleCN: Basic Sunburst
---

----------------------------------------

TITLE: TypeScript Helper Function Example - Original Code
DESCRIPTION: Example showing how TypeScript helper functions like __assign are normally emitted without tslib

LANGUAGE: typescript
CODE:
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.x = {};
exports.y = __assign({}, exports.x);

----------------------------------------

TITLE: Defining ECharts Scatter Chart Metadata
DESCRIPTION: YAML frontmatter configuration block that specifies properties for an ECharts scatter chart including title, category, Chinese title translation, and difficulty level.

LANGUAGE: markdown
CODE:
---
title: Basic Scatter Chart
category: scatter
titleCN: Basic Scatter Chart,
difficulty: 0
---

----------------------------------------

TITLE: Initializing Map World Configuration in ECharts
DESCRIPTION: Basic YAML frontmatter configuration for an ECharts world map documentation page. Defines the title in both English and Chinese along with the category specification.

LANGUAGE: markdown
CODE:
---
title: Map World
category: map
titleCN: Map World
---

----------------------------------------

TITLE: Browser Usage with Script Tag
DESCRIPTION: Example of including and using Immutable.js directly in the browser via script tag

LANGUAGE: html
CODE:
<script src="immutable.min.js"></script>
<script>
    var map1 = Immutable.Map({a:1, b:2, c:3});
    var map2 = map1.set('b', 50);
    map1.get('b'); // 2
    map2.get('b'); // 50
</script>

----------------------------------------

TITLE: Generating Data Points for ECharts Line Chart using Easing Functions
DESCRIPTION: This snippet creates a function to generate data points for the line chart based on a selected easing function. It calculates 100 points for the chosen easing function and updates the chart series data.

LANGUAGE: javascript
CODE:
function createPoints(easing) {
  var points = [];
  for (var i = 0; i <= 100; i++) {
    var x = i / 100;
    var y = easingFuncs[easing](x);
    points.push([x, y]);
  }
  return points;
}

function updateChart(easing) {
  var points = createPoints(easing);
  myChart.setOption({
    series: [
      {
        data: points
      }
    ]
  });
}

----------------------------------------

TITLE: Using ecStat Histogram Transform in ECharts
DESCRIPTION: Example of using the ecStat histogram transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:histogram',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: YAML Frontmatter Configuration for ECharts Gauge Demo
DESCRIPTION: YAML frontmatter defining metadata for an ECharts gauge chart demonstration page. Specifies the title, category and Chinese title.

LANGUAGE: yaml
CODE:
---
title: Gauge Car
category: gauge
titleCN: Gauge Car
---

----------------------------------------

TITLE: Including ECharts-GL via CDN Scripts
DESCRIPTION: HTML script tags to include ECharts and ECharts-GL libraries from CDN sources.

LANGUAGE: html
CODE:
<script src="https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/echarts-gl/dist/echarts-gl.min.js"></script>

----------------------------------------

TITLE: Configuring Row-wise Series Layout in ECharts
DESCRIPTION: This snippet demonstrates how to create a row-wise series layout in ECharts using dataset and encode properties. It creates a bar chart with multiple series arranged by rows.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      ['product', '2012', '2013', '2014', '2015'],
      ['Matcha Latte', 41.1, 30.4, 65.1, 53.3],
      ['Milk Tea', 86.5, 92.1, 85.7, 83.1],
      ['Cheese Cocoa', 24.1, 67.2, 79.5, 86.4]
    ]
  },
  xAxis: { type: 'category' },
  yAxis: {},
  series: [
    {
      type: 'bar',
      seriesLayoutBy: 'row'
    },
    {
      type: 'bar',
      seriesLayoutBy: 'row'
    },
    {
      type: 'bar',
      seriesLayoutBy: 'row'
    }
  ]
};

----------------------------------------

TITLE: Using Latinize.js in the Browser
DESCRIPTION: Example of how to use Latinize.js directly in a browser environment. It shows how to include the script and use it to convert a string.

LANGUAGE: html
CODE:
<script src="../latinize.js"></script>
<script>
    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));
</script>

----------------------------------------

TITLE: Initializing ECharts Instance and Rendering Calendar Heatmap
DESCRIPTION: This snippet creates an ECharts instance, sets the previously defined options, and renders the chart. It's typically executed after the DOM is ready.

LANGUAGE: javascript
CODE:
var chart = echarts.init(document.getElementById('main'));
chart.setOption(option);

----------------------------------------

TITLE: Browserify Integration for jQuery Mouse Wheel Plugin
DESCRIPTION: Shows how to integrate the jQuery Mouse Wheel plugin with Browserify. Includes server-side Node.js code for setting up Browserify and client-side JavaScript for requiring the necessary modules.

LANGUAGE: javascript
CODE:
var express = require('express');
var app = express.createServer();

app.use(require('browserify')({
    require : [ 'jquery-browserify', 'jquery-mousewheel' ]
}));

LANGUAGE: javascript
CODE:
var $ = require('jquery-browserify');
require('jquery-mousewheel')($);

----------------------------------------

TITLE: Customizing Latinize.js character mapping
DESCRIPTION: Examples of how to modify the character mapping used by Latinize.js, including adding a new mapping and modifying existing ones for German umlauts.

LANGUAGE: javascript
CODE:
latinize.characters['Ω'] = 'O';

// modify the behavior for German umlauts
_.extend(latinize.characters,
  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});

----------------------------------------

TITLE: Binding Mouse Wheel Event in jQuery
DESCRIPTION: Demonstrates two methods of binding the mousewheel event to an element using jQuery. The first uses the 'on' method, while the second uses a helper method.

LANGUAGE: javascript
CODE:
// using on
$('#my_elem').on('mousewheel', function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

// using the event helper
$('#my_elem').mousewheel(function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

----------------------------------------

TITLE: Using Latinize.js in a browser environment
DESCRIPTION: Example of how to use Latinize.js directly in a browser environment using a script tag and writing the result to the document.

LANGUAGE: html
CODE:
<script src="../latinize.js"></script>
<script>
    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));
</script>

----------------------------------------

TITLE: Using Latinize.js in Node.js
DESCRIPTION: Example of how to use Latinize.js in a Node.js environment. It shows how to require the module and use it to convert a string with accented characters.

LANGUAGE: javascript
CODE:
var latinize = require('latinize');
latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'

----------------------------------------

TITLE: Basic Handsontable Usage in HTML and JavaScript
DESCRIPTION: Example of how to create a basic Handsontable instance with sample data, including the necessary HTML and JavaScript code.

LANGUAGE: html
CODE:
<div id="example"></div>

LANGUAGE: javascript
CODE:
var data = [
  ["", "Ford", "Volvo", "Toyota", "Honda"],
  ["2016", 10, 11, 12, 13],
  ["2017", 20, 11, 14, 13],
  ["2018", 30, 15, 12, 13]
];

var container = document.getElementById('example');
var hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true
});

----------------------------------------

TITLE: Using Latinize.js with AMD
DESCRIPTION: Example of how to use Latinize.js in an AMD (Asynchronous Module Definition) environment.

LANGUAGE: javascript
CODE:
require(['latinize'], function(latinize){
  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');
});

----------------------------------------

TITLE: TypeScript Implementation Example
DESCRIPTION: Demonstrates using Immutable.js with TypeScript including type definitions

LANGUAGE: javascript
CODE:
///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>
import Immutable = require('immutable');
var map1: Immutable.Map<string, number>;
map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: Using Latinize.js in Node.js
DESCRIPTION: Example of how to use Latinize.js in a Node.js environment to convert accented characters to Latin equivalents.

LANGUAGE: javascript
CODE:
var latinize = require('latinize');
latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'

----------------------------------------

TITLE: Browser Usage with Script Tag
DESCRIPTION: Shows how to include and use Immutable.js in a browser via script tag

LANGUAGE: html
CODE:
<script src="immutable.min.js"></script>
<script>
    var map1 = Immutable.Map({a:1, b:2, c:3});
    var map2 = map1.set('b', 50);
    map1.get('b'); // 2
    map2.get('b'); // 50
</script>

----------------------------------------

TITLE: Installing Latinize.js using npm
DESCRIPTION: Command to install Latinize.js using npm package manager.

LANGUAGE: shell
CODE:
npm install latinize

----------------------------------------

TITLE: Installing Latinize.js via npm
DESCRIPTION: Command to install Latinize.js using npm package manager.

LANGUAGE: shell
CODE:
npm install latinize

----------------------------------------

TITLE: Using jQuery Mouse Wheel Plugin with 'on' Method
DESCRIPTION: Demonstrates how to bind the mousewheel event to an element using jQuery's 'on' method. The event object provides normalized deltaX, deltaY, and deltaFactor properties.

LANGUAGE: javascript
CODE:
// using on
$('#my_elem').on('mousewheel', function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

----------------------------------------

TITLE: Markdown Frontmatter for Radial Tree
DESCRIPTION: YAML frontmatter block defining metadata for a radial tree visualization documentation page, including title, category and Chinese title.

LANGUAGE: markdown
CODE:
---
title: Radial Tree
category: tree
titleCN: 径向树状图
---

----------------------------------------

TITLE: Importing ETPL in AMD Environment (Synchronous)
DESCRIPTION: Shows how to import ETPL in an AMD environment using synchronous require.

LANGUAGE: javascript
CODE:
define(function (require) {
    var etpl = require('etpl');
});

----------------------------------------

TITLE: tslib Configuration for JSPM
DESCRIPTION: TypeScript compiler configuration example for using tslib with JSPM package manager

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "system",
        "importHelpers": true,
        "baseUrl": "./",
        "paths": {
            "tslib" : ["jspm_packages/npm/tslib@2.x.y/tslib.d.ts"]
        }
    }
}

----------------------------------------

TITLE: Configuring Left-to-Right Tree Diagram in ECharts
DESCRIPTION: This code snippet sets up the configuration for a left-to-right tree diagram in ECharts. It defines the chart type, layout orientation, data structure, and visual properties for nodes and edges.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'item',
    triggerOn: 'mousemove'
  },
  series: [
    {
      type: 'tree',
      data: [
        {
          name: 'flare',
          children: [
            {
              name: 'data',
              children: [
                {
                  name: 'converters',
                  children: [
                    { name: 'Converters', value: 721 },
                    { name: 'DelimitedTextConverter', value: 4294 }
                  ]
                },
                {
                  name: 'DataUtil',
                  value: 3322
                }
              ]
            },
            {
              name: 'display',
              children: [
                { name: 'DirtySprite', value: 8833 },
                { name: 'LineSprite', value: 1732 },
                { name: 'RectSprite', value: 3623 }
              ]
            },
            {
              name: 'flex',
              children: [{ name: 'FlareVis', value: 4116 }]
            },
            {
              name: 'query',
              children: [
                { name: 'AggregateExpression', value: 1616 },
                { name: 'And', value: 1027 },
                { name: 'Arithmetic', value: 3891 },
                { name: 'Average', value: 891 },
                { name: 'BinaryExpression', value: 2893 },
                { name: 'Comparison', value: 5103 },
                { name: 'CompositeExpression', value: 3677 },
                { name: 'Count', value: 781 },
                { name: 'DateUtil', value: 4141 },
                { name: 'Distinct', value: 933 },
                { name: 'Expression', value: 5130 },
                { name: 'ExpressionIterator', value: 3617 },
                { name: 'Fn', value: 3240 },
                { name: 'If', value: 2732 },
                { name: 'IsA', value: 2039 },
                { name: 'Literal', value: 1214 },
                { name: 'Match', value: 3748 },
                { name: 'Maximum', value: 843 },
                {
                  name: 'methods',
                  children: [
                    { name: 'add', value: 593 },
                    { name: 'and', value: 330 },
                    { name: 'average', value: 287 },
                    { name: 'count', value: 277 },
                    { name: 'distinct', value: 292 },
                    { name: 'div', value: 595 },
                    { name: 'eq', value: 594 },
                    { name: 'fn', value: 460 },
                    { name: 'gt', value: 603 },
                    { name: 'gte', value: 625 },
                    { name: 'iff', value: 748 },
                    { name: 'isa', value: 461 },
                    { name: 'lt', value: 597 },
                    { name: 'lte', value: 619 },
                    { name: 'max', value: 283 },
                    { name: 'min', value: 283 },
                    { name: 'mod', value: 591 },
                    { name: 'mul', value: 603 },
                    { name: 'neq', value: 599 },
                    { name: 'not', value: 386 },
                    { name: 'or', value: 323 },
                    { name: 'orderby', value: 307 },
                    { name: 'range', value: 772 },
                    { name: 'select', value: 296 },
                    { name: 'stddev', value: 363 },
                    { name: 'sub', value: 600 },
                    { name: 'sum', value: 280 },
                    { name: 'update', value: 307 },
                    { name: 'variance', value: 335 },
                    { name: 'where', value: 299 },
                    { name: 'xor', value: 354 },
                    { name: '_', value: 264 }
                  ]
                },
                { name: 'Minimum', value: 843 },
                { name: 'Not', value: 1554 },
                { name: 'Or', value: 970 },
                { name: 'Query', value: 13896 },
                { name: 'Range', value: 1594 },
                { name: 'StringUtil', value: 4130 },
                { name: 'Sum', value: 791 },
                { name: 'Variable', value: 1124 },
                { name: 'Variance', value: 1876 },
                { name: 'Xor', value: 1101 }
              ]
            },
            {
              name: 'scale',
              children: [
                { name: 'IScaleMap', value: 2105 },
                { name: 'LinearScale', value: 1316 },
                { name: 'LogScale', value: 3151 },
                { name: 'OrdinalScale', value: 3770 },
                { name: 'QuantileScale', value: 2435 },
                { name: 'QuantitativeScale', value: 4839 },
                { name: 'RootScale', value: 1756 },
                { name: 'Scale', value: 4268 },
                { name: 'ScaleType', value: 1821 },
                { name: 'TimeScale', value: 5833 }
              ]
            }
          ]
        }
      ],
      top: '10%',
      left: '8%',
      bottom: '22%',
      right: '20%',
      symbolSize: 7,
      label: {
        position: 'left',
        verticalAlign: 'middle',
        align: 'right'
      },
      leaves: {
        label: {
          position: 'right',
          verticalAlign: 'middle',
          align: 'left'
        }
      },
      emphasis: {
        focus: 'descendant'
      },
      expandAndCollapse: true,
      animationDuration: 550,
      animationDurationUpdate: 750
    }
  ]
};

----------------------------------------

TITLE: Using Latinize.js with AMD
DESCRIPTION: Example of how to use Latinize.js in an AMD (Asynchronous Module Definition) environment. It shows how to require the module and use it within a callback function.

LANGUAGE: javascript
CODE:
require(['latinize'], function(latinize){
  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');
});

----------------------------------------

TITLE: Using Latinize.js with AMD
DESCRIPTION: Example of how to use Latinize.js in an AMD (Asynchronous Module Definition) environment. It shows how to require the module and use it within a callback function.

LANGUAGE: javascript
CODE:
require(['latinize'], function(latinize){
  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');
});

----------------------------------------

TITLE: Configuring Single-Axis Scatter Plot in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a scatter plot on a single axis using ECharts. It includes the configuration for the chart options, data series, and axis settings.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Scatter on Single Axis',
    left: 'center'
  },
  tooltip: {
    formatter: function (params) {
      return params.marker + params.data[3] + ': ' + params.data[1];
    }
  },
  toolbox: {
    feature: {
      dataZoom: {}
    }
  },
  single: [
    {
      bottom: 50,
      left: 150,
      right: 50,
      height: 200,
      min: 0,
      max: 50,
      axisLabel: {
        rotate: 50
      }
    }
  ],
  series: [
    {
      singleAxisIndex: 0,
      coordinateSystem: 'single',
      type: 'scatter',
      data: [
        [0, 0, 5, 'Monday'],
        [1, 7, 10, 'Tuesday'],
        [2, 8, 6, 'Wednesday'],
        [3, 12, 14, 'Thursday'],
        [4, 9, 5, 'Friday'],
        [5, 15, 12, 'Saturday'],
        [6, 10, 8, 'Sunday'],
        [7, 9, 11, 'Monday'],
        [8, 22, 14, 'Tuesday'],
        [9, 16, 9, 'Wednesday'],
        [10, 11, 13, 'Thursday'],
        [11, 15, 10, 'Friday'],
        [12, 9, 11, 'Saturday'],
        [13, 12, 7, 'Sunday'],
        [14, 12, 8, 'Monday'],
        [15, 4, 9, 'Tuesday'],
        [16, 20, 15, 'Wednesday'],
        [17, 7, 6, 'Thursday'],
        [18, 10, 12, 'Friday'],
        [19, 11, 5, 'Saturday'],
        [20, 15, 13, 'Sunday']
      ],
      symbolSize: function (dataItem) {
        return dataItem[2] * 2;
      }
    }
  ]
};

----------------------------------------

TITLE: Installing Latinize.js via Bower
DESCRIPTION: Command to install Latinize.js using Bower package manager.

LANGUAGE: bash
CODE:
bower install latinize

----------------------------------------

TITLE: tslib Installation Commands
DESCRIPTION: Command line instructions for installing tslib via different package managers with version-specific guidance

LANGUAGE: sh
CODE:
# TypeScript 3.9.2 or later
npm install tslib

# TypeScript 3.8.4 or earlier
npm install tslib@^1

# TypeScript 2.3.2 or earlier
npm install tslib@1.6.1

LANGUAGE: sh
CODE:
# TypeScript 3.9.2 or later
yarn add tslib

# TypeScript 3.8.4 or earlier
yarn add tslib@^1

# TypeScript 2.3.2 or earlier
yarn add tslib@1.6.1

LANGUAGE: sh
CODE:
# TypeScript 3.9.2 or later
bower install tslib

# TypeScript 3.8.4 or earlier
bower install tslib@^1

# TypeScript 2.3.2 or earlier
bower install tslib@1.6.1

LANGUAGE: sh
CODE:
# TypeScript 3.9.2 or later
jspm install tslib

# TypeScript 3.8.4 or earlier
jspm install tslib@^1

# TypeScript 2.3.2 or earlier
jspm install tslib@1.6.1

----------------------------------------

TITLE: Requiring jQuery and mousewheel plugin with Browserify
DESCRIPTION: Demonstrates how to require and use the jQuery mousewheel plugin in a Browserify environment. This snippet shows the client-side JavaScript setup.

LANGUAGE: javascript
CODE:
var $ = require('jquery-browserify');
require('jquery-mousewheel')($);

----------------------------------------

TITLE: Defining ECharts Visualization Metadata
DESCRIPTION: YAML frontmatter defining the title and category for an ECharts visualization example focused on creating a GitHub punch card style scatter plot.

LANGUAGE: markdown
CODE:
---
title: Punch Card of Github
category: scatter
titleCN: Punch Card of Github
---

----------------------------------------

TITLE: Defining Effect Scatter Chart Metadata
DESCRIPTION: Markdown frontmatter defining the documentation structure for effect scatter charts in ECharts, specifying the title and category.

LANGUAGE: markdown
CODE:
---
title: Effect Scatter Chart
category: scatter
titleCN: Effect Scatter Chart
---

----------------------------------------

TITLE: ECharts License Header
DESCRIPTION: The Microsoft license header for the ECharts TypeScript definitions. It outlines the terms of use, including permissions and disclaimers.

LANGUAGE: TypeScript
CODE:
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

----------------------------------------

TITLE: TypeScript Helper Function Example - With tslib
DESCRIPTION: Example showing how the same code is emitted when using tslib with --importHelpers flag

LANGUAGE: typescript
CODE:
var tslib_1 = require("tslib");
exports.x = {};
exports.y = tslib_1.__assign({}, exports.x);

----------------------------------------

TITLE: Registering ecStat Regression Transform
DESCRIPTION: Registers the ecStat regression transform for use with ECharts.

LANGUAGE: JavaScript
CODE:
echarts.registerTransform(ecStat.transform.regression);

----------------------------------------

TITLE: Creating ECharts Scatter Plot for Master Painter Color Choices
DESCRIPTION: This code sets up an ECharts scatter plot to visualize the color choices of master painters throughout history. It defines data points representing paintings, configures axes for time periods and color values, and customizes tooltips and visual elements.

LANGUAGE: javascript
CODE:
option = {
  backgroundColor: new echarts.graphic.RadialGradient(0.3, 0.3, 0.8, [
    {
      offset: 0,
      color: '#f7f8fa'
    },
    {
      offset: 1,
      color: '#cdd0d5'
    }
  ]),
  title: {
    text: 'Master Painter Color Choices Throughout History',
    left: '5%',
    top: '3%'
  },
  legend: {
    right: '10%',
    top: '3%',
    data: ['ASH', 'MARASCHINO', 'CAYENNE', 'MERLOT', 'ASPARAGUS']
  },
  grid: {
    left: '8%',
    right: '10%'
  },
  xAxis: {
    type: 'category',
    data: [
      'Renaissance',
      'Baroque',
      'Romanticism',
      'Impressionism',
      'Cubism',
      'Surrealism',
      'Abstract Expressionism',
      'Pop Art',
      'Contemporary'
    ],
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    },
    axisLabel: {
      rotate: 45,
      interval: 0
    }
  },
  yAxis: {
    type: 'value',
    name: 'Color Value',
    splitLine: {
      lineStyle: {
        type: 'dashed'
      }
    }
  },
  series: [
    {
      name: 'ASH',
      data: [
        [0, 53, 1],
        [1, 61, 2],
        [2, 57, 3],
        [3, 45, 4],
        [4, 39, 5],
        [5, 42, 6],
        [6, 49, 7],
        [7, 51, 8],
        [8, 55, 9]
      ],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) * 10;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[2];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(120, 36, 50, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(251, 118, 123)'
          },
          {
            offset: 1,
            color: 'rgb(204, 46, 72)'
          }
        ])
      }
    },
    {
      name: 'MARASCHINO',
      data: [
        [0, 65, 2],
        [1, 72, 4],
        [2, 68, 6],
        [3, 59, 8],
        [4, 54, 10],
        [5, 57, 12],
        [6, 63, 14],
        [7, 66, 16],
        [8, 70, 18]
      ],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) * 10;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[2];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(25, 100, 150, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(129, 227, 238)'
          },
          {
            offset: 1,
            color: 'rgb(25, 183, 207)'
          }
        ])
      }
    },
    {
      name: 'CAYENNE',
      data: [
        [0, 78, 3],
        [1, 85, 6],
        [2, 81, 9],
        [3, 72, 12],
        [4, 67, 15],
        [5, 70, 18],
        [6, 76, 21],
        [7, 79, 24],
        [8, 83, 27]
      ],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) * 10;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[2];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(120, 36, 50, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(255, 176, 97)'
          },
          {
            offset: 1,
            color: 'rgb(255, 128, 0)'
          }
        ])
      }
    },
    {
      name: 'MERLOT',
      data: [
        [0, 90, 4],
        [1, 97, 8],
        [2, 93, 12],
        [3, 84, 16],
        [4, 79, 20],
        [5, 82, 24],
        [6, 88, 28],
        [7, 91, 32],
        [8, 95, 36]
      ],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) * 10;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[2];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(25, 100, 150, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(205, 145, 158)'
          },
          {
            offset: 1,
            color: 'rgb(171, 71, 88)'
          }
        ])
      }
    },
    {
      name: 'ASPARAGUS',
      data: [
        [0, 103, 5],
        [1, 110, 10],
        [2, 106, 15],
        [3, 97, 20],
        [4, 92, 25],
        [5, 95, 30],
        [6, 101, 35],
        [7, 104, 40],
        [8, 108, 45]
      ],
      type: 'scatter',
      symbolSize: function (data) {
        return Math.sqrt(data[2]) * 10;
      },
      emphasis: {
        focus: 'series',
        label: {
          show: true,
          formatter: function (param) {
            return param.data[2];
          },
          position: 'top'
        }
      },
      itemStyle: {
        shadowBlur: 10,
        shadowColor: 'rgba(120, 36, 50, 0.5)',
        shadowOffsetY: 5,
        color: new echarts.graphic.RadialGradient(0.4, 0.3, 1, [
          {
            offset: 0,
            color: 'rgb(179, 217, 145)'
          },
          {
            offset: 1,
            color: 'rgb(123, 175, 78)'
          }
        ])
      }
    }
  ]
};

----------------------------------------

TITLE: Standalone Usage of ecStat Clustering
DESCRIPTION: Example of using the ecStat clustering function standalone.

LANGUAGE: JavaScript
CODE:
var result = ecStat.clustering.hierarchicalKMeans(data, config);
// or
var result = ecStat.clustering.hierarchicalKMeans(data, clusterCount, stepByStep);

----------------------------------------

TITLE: Configuring Vertical Sankey Diagram Metadata
DESCRIPTION: YAML frontmatter configuration for a documentation page about vertical Sankey diagrams in ECharts.

LANGUAGE: markdown
CODE:
---
title: Sankey Orient Vertical
category: sankey
titleCN: Sankey Orient Vertical
---

----------------------------------------

TITLE: Registering ecStat Clustering Transform
DESCRIPTION: Registers the ecStat clustering transform for use with ECharts.

LANGUAGE: JavaScript
CODE:
echarts.registerTransform(ecStat.transform.clustering);

----------------------------------------

TITLE: Lazy Sequences in Immutable.js
DESCRIPTION: Demonstrates the use of lazy Seq for efficient chaining of operations on collections.

LANGUAGE: JavaScript
CODE:
var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)
  .filter(x => x % 2).map(x => x * x);

console.log(oddSquares.get(1)); // 9

var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();

seq.flip().map(key => key.toUpperCase()).flip().toObject();
// Map { A: 1, B: 1, C: 1 }

Immutable.Range(1, Infinity)
  .skip(1000)
  .map(n => -n)
  .filter(n => n % 2 === 0)
  .take(2)
  .reduce((r, n) => r * n, 1);
// 1006008

----------------------------------------

TITLE: Installing Immutable.js via NPM
DESCRIPTION: Shows how to install the Immutable.js library using npm and basic usage example creating an immutable map.

LANGUAGE: shell
CODE:
npm install immutable

LANGUAGE: javascript
CODE:
var Immutable = require('immutable');
var map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: YAML Frontmatter for Sankey Diagram Documentation
DESCRIPTION: YAML frontmatter configuration defining the title and category for a Sankey diagram example documentation. Includes both English and Chinese titles.

LANGUAGE: yaml
CODE:
---
title: Sankey with Levels Setting
category: sankey
titleCN: Sankey with Levels Setting
---

----------------------------------------

TITLE: Installing Immutable.js via NPM
DESCRIPTION: Shows how to install Immutable.js using npm and basic usage example with Map

LANGUAGE: shell
CODE:
npm install immutable

LANGUAGE: javascript
CODE:
var Immutable = require('immutable');
var map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: Map Documentation Frontmatter
DESCRIPTION: YAML frontmatter defining the page metadata for a map location documentation page in ECharts.

LANGUAGE: markdown
CODE:
---
title: Map Locate
category: map
titleCN: Map Locate
---

----------------------------------------

TITLE: Using Latinize.js with AMD
DESCRIPTION: Example of how to use Latinize.js in an AMD (Asynchronous Module Definition) environment.

LANGUAGE: javascript
CODE:
require(['latinize'], function(latinize){
  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');
});

----------------------------------------

TITLE: Initializing Handsontable with AMD Module Loading
DESCRIPTION: Example of loading and initializing Handsontable using AMD module pattern with basic data configuration

LANGUAGE: javascript
CODE:
require(['handsontable'], function(Handsontable) {
    var hot = new Handsontable(document.getElementById('example'), {
      data: [[1, 2, 3, 4], [1, 2, 3, 4]]
    });
});

----------------------------------------

TITLE: TypeScript Integration Example
DESCRIPTION: Shows how to use Immutable.js with TypeScript including type references and basic map operations.

LANGUAGE: javascript
CODE:
///<reference path='./node_modules/immutable/dist/Immutable.d.ts'/>
import Immutable = require('immutable');
var map1: Immutable.Map<string, number>;
map1 = Immutable.Map({a:1, b:2, c:3});
var map2 = map1.set('b', 50);
map1.get('b'); // 2
map2.get('b'); // 50

----------------------------------------

TITLE: Microsoft ISC License Declaration
DESCRIPTION: Standard ISC license header used by Microsoft Corporation that grants permissions for software usage and distribution while disclaiming warranties and limiting liability.

LANGUAGE: text
CODE:
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

----------------------------------------

TITLE: Listing Public Exports in ECharts package.json
DESCRIPTION: This snippet shows the officially exported entries in the ECharts package. These are the paths that users are intended to import from when using ECharts in their projects.

LANGUAGE: javascript
CODE:
[
  'echarts',
  'echarts/index.js',
  'echarts/index.blank.js',
  'echarts/index.common.js',
  'echarts/index.simple.js',
  'echarts/core.js',
  'echarts/charts.js',
  'echarts/components.js',
  'echarts/features.js',
  'echarts/renderers.js',
  'echarts/i18n/*',
  'echarts/theme/*',
  'echarts/types/*',
  'echarts/extension/*',
  'echarts/dist/*',
  'echarts/ssr/client/index.js'
]

----------------------------------------

TITLE: Configuring Column-wise Series Layout in ECharts
DESCRIPTION: This snippet shows how to set up a column-wise series layout in ECharts using dataset and encode properties. It creates a bar chart with multiple series arranged by columns.

LANGUAGE: javascript
CODE:
option = {
  dataset: {
    source: [
      ['product', '2012', '2013', '2014', '2015'],
      ['Matcha Latte', 41.1, 30.4, 65.1, 53.3],
      ['Milk Tea', 86.5, 92.1, 85.7, 83.1],
      ['Cheese Cocoa', 24.1, 67.2, 79.5, 86.4]
    ]
  },
  xAxis: [{ type: 'category', gridIndex: 0 }, { type: 'category', gridIndex: 1 }],
  yAxis: [{ gridIndex: 0 }, { gridIndex: 1 }],
  grid: [{ bottom: '55%' }, { top: '55%' }],
  series: [
    // These series are in the first grid.
    { type: 'bar', seriesLayoutBy: 'column' },
    { type: 'bar', seriesLayoutBy: 'column' },
    { type: 'bar', seriesLayoutBy: 'column' },
    { type: 'bar', seriesLayoutBy: 'column' },
    // These series are in the second grid.
    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },
    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },
    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 },
    { type: 'bar', xAxisIndex: 1, yAxisIndex: 1 }
  ]
};

----------------------------------------

TITLE: Using Latinize.js in the Browser
DESCRIPTION: Example of how to use Latinize.js directly in a web browser. It includes the script tag to load the library and demonstrates its usage within a script tag.

LANGUAGE: html
CODE:
<script src="../latinize.js"></script>
<script>
    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));
</script>

----------------------------------------

TITLE: Using Latinize.js in the Browser
DESCRIPTION: Example of how to use Latinize.js directly in a web browser. It includes the script tag to load the library and demonstrates its usage within a script tag.

LANGUAGE: html
CODE:
<script src="../latinize.js"></script>
<script>
    document.write(latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'));
</script>

----------------------------------------

TITLE: Using Immutable.js with AMD Loader
DESCRIPTION: Demonstrates how to use Immutable.js with an AMD loader like RequireJS.

LANGUAGE: JavaScript
CODE:
require(['./immutable.min.js'], function (Immutable) {
    var map1 = Immutable.Map({a:1, b:2, c:3});
    var map2 = map1.set('b', 50);
    map1.get('b'); // 2
    map2.get('b'); // 50
});

----------------------------------------

TITLE: Defining Boxplot Chart Metadata in Markdown Frontmatter
DESCRIPTION: YAML frontmatter block defining metadata for a boxplot chart visualization, including title and category specifications.

LANGUAGE: markdown
CODE:
---
title: Boxplot Light Velocity2
category: boxplot
titleCN: Boxplot Light Velocity2
---

----------------------------------------

TITLE: Creating Boxplot Chart for Light Velocity Data with ECharts
DESCRIPTION: This snippet sets up the data and options for a boxplot chart using ECharts. It includes data preparation, axis configuration, and series definition for visualizing light velocity measurements.

LANGUAGE: javascript
CODE:
option = {
  title: [
    {
      text: 'Michelson-Morley Experiment',
      left: 'center'
    },
    {
      text: 'upper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR',
      borderColor: '#999',
      borderWidth: 1,
      textStyle: {
        fontWeight: 'normal',
        fontSize: 14,
        lineHeight: 20
      },
      left: '10%',
      top: '90%'
    }
  ],
  dataset: [
    {
      // prettier-ignore
      source: [
        [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],
        [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790, 810, 880, 880, 830, 800, 790, 760, 800],
        [880, 880, 880, 860, 720, 720, 620, 860, 970, 950, 880, 910, 850, 870, 840, 840, 850, 840, 840, 840],
        [890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920, 890, 860, 880, 720, 840, 850, 850, 780],
        [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870, 810, 740, 810, 940, 950, 800, 810, 870]
      ]
    },
    {
      transform: {
        type: 'boxplot',
        config: { itemNameFormatter: 'expr {value}' }
      }
    },
    {
      fromDatasetIndex: 1,
      fromTransformResult: 1
    }
  ],
  tooltip: {
    trigger: 'item',
    axisPointer: {
      type: 'shadow'
    }
  },
  grid: {
    left: '10%',
    right: '10%',
    bottom: '15%'
  },
  xAxis: {
    type: 'category',
    boundaryGap: true,
    nameGap: 30,
    splitArea: {
      show: false
    },
    splitLine: {
      show: false
    }
  },
  yAxis: {
    type: 'value',
    name: 'km/s minus 299,000',
    splitArea: {
      show: true
    }
  },
  series: [
    {
      name: 'boxplot',
      type: 'boxplot',
      datasetIndex: 1
    },
    {
      name: 'outlier',
      type: 'scatter',
      datasetIndex: 2
    }
  ]
};

----------------------------------------

TITLE: Installing ETPL via npm for Node.js
DESCRIPTION: Shows the npm command to install ETPL for use in a Node.js environment.

LANGUAGE: bash
CODE:
$ npm install etpl

----------------------------------------

TITLE: Using Latinize.js in Node.js
DESCRIPTION: Example of how to use Latinize.js in a Node.js environment. It demonstrates requiring the module and using it to convert accented characters to their Latin equivalents.

LANGUAGE: javascript
CODE:
var latinize = require('latinize');
latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů'); // => 'ExAmPlE aeiouycdenrstzu'

----------------------------------------

TITLE: Installing ETPL via npm for Node.js
DESCRIPTION: Shows the npm command to install ETPL for use in a Node.js environment.

LANGUAGE: bash
CODE:
$ npm install etpl

----------------------------------------

TITLE: Defining ECharts Visualization Metadata in Markdown
DESCRIPTION: YAML frontmatter block defining the visualization title and category for an ECharts custom visualization

LANGUAGE: markdown
CODE:
---
title: Girths of Black Cherry Trees
category: custom
---

----------------------------------------

TITLE: Configuring Surface Wave Visualization with ECharts GL in JavaScript
DESCRIPTION: This code snippet sets up a surface wave visualization using ECharts GL. It defines the grid, axis, and surface series properties, and includes settings for animation and lighting effects. The surface is created using a mathematical function to generate wave-like patterns.

LANGUAGE: javascript
CODE:
option = {
    tooltip: {},
    backgroundColor: '#fff',
    visualMap: {
        show: false,
        dimension: 2,
        min: -1,
        max: 1,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        }
    },
    xAxis3D: {
        type: 'value'
    },
    yAxis3D: {
        type: 'value'
    },
    zAxis3D: {
        type: 'value'
    },
    grid3D: {
        viewControl: {
            projection: 'orthographic'
        }
    },
    series: [{
        type: 'surface',
        wireframe: {
            // show: false
        },
        equation: {
            x: {
                step: 0.05
            },
            y: {
                step: 0.05
            },
            z: function (x, y) {
                if (Math.abs(x) < 0.1 && Math.abs(y) < 0.1) {
                    return '-'
                }
                return Math.sin(x * Math.PI) * Math.sin(y * Math.PI);
            }
        }
    }]
}

----------------------------------------

TITLE: Using Latinize.js with AMD
DESCRIPTION: Example of loading and using Latinize.js using AMD (Asynchronous Module Definition) pattern.

LANGUAGE: javascript
CODE:
require(['latinize'], function(latinize){
  latinize('ỆᶍǍᶆṔƚÉ áéíóúýčďěňřšťžů');
});

----------------------------------------

TITLE: Requiring ETPL in Node.js
DESCRIPTION: Demonstrates how to require the ETPL module in a Node.js environment after installation.

LANGUAGE: javascript
CODE:
var etpl = require('etpl');

----------------------------------------

TITLE: Initializing ECharts Instance and Setting Options for NY Streets Visualization
DESCRIPTION: This snippet sets up an ECharts instance and configures the chart options for visualizing New York streets. It includes data loading, series configuration, and visual map settings for color encoding.

LANGUAGE: javascript
CODE:
$.getJSON(ROOT_PATH + '/data-gl/asset/data/nyc.json', function(data) {

    var streets = data.streets.map(function (str) {
        return {
            coords: str.map(function (p) {
                return [
                    p[0] / 1e5 - 74.1,
                    (p[1] + 40.7 * 1e5) / 1e5
                ];
            })
        };
    });

    myChart.setOption({
        title: {
            text: '1 Millions New York Streets',
            left: 'center',
            textStyle: {
                color: '#fff'
            }
        },
        backgroundColor: '#000',
        globe: {
            viewControl: {
                distance: 1.5,
                alpha: 89,
                autoRotate: false
            },
            shading: 'realistic',
            realisticMaterial: {
                roughness: 0.8,
                metalness: 0
            },
            postEffect: {
                enable: true,
                bloom: {
                    enable: false
                },
                SSAO: {
                    radius: 1,
                    intensity: 1,
                    enable: true
                }
            },
            temporalSuperSampling: {
                enable: true
            },
            light: {
                ambient: {
                    intensity: 0
                },
                main: {
                    intensity: 0.1,
                    shadow: false
                },
                ambientCubemap: {
                    texture: ROOT_PATH + '/data-gl/asset/canyon.hdr',
                    exposure: 1,
                    diffuseIntensity: 0.5,
                    specularIntensity: 2
                }
            },
            viewControl: {
                distance: 0.004,
                center: [-74.01220703125, 40.70731539439469]
            }
        },
        series: [{
            type: 'lines3D',

            coordinateSystem: 'globe',

            blendMode: 'lighter',

            lineStyle: {
                width: 1,
                color: 'rgb(50, 50, 150)',
                opacity: 0.1
            },

            data: streets
        }]
    });
});

----------------------------------------

TITLE: Converting Image to 3D Bar Chart using ECharts GL in JavaScript
DESCRIPTION: This code snippet demonstrates how to convert an image into a 3D bar chart using the ECharts GL library. It processes image data, sets up chart options, and configures the visualization parameters for the 3D bar representation.

LANGUAGE: javascript
CODE:
$.get('data/asset/data/bar3D-image-pixels.json', function (data) {

    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    canvas.width = 512;
    canvas.height = 512;
    var img = new Image();
    img.onload = function() {
        ctx.drawImage(img, 0, 0, 512, 512);
        var imgData = ctx.getImageData(0, 0, 512, 512).data;
        var data = [];
        for (var i = 0; i < 512; i++) {
            for (var j = 0; j < 512; j++) {
                var idx = (i * 512 + j) * 4;
                data.push([j, i, (imgData[idx] + imgData[idx + 1] + imgData[idx + 2]) / 3]);
            }
        }
        myChart.setOption({
            tooltip: {},
            backgroundColor: '#fff',
            visualMap: {
                show: false,
                max: 250,
                inRange: {
                    color: ['#000', '#fff']
                }
            },
            xAxis3D: {
                type: 'value'
            },
            yAxis3D: {
                type: 'value'
            },
            zAxis3D: {
                type: 'value',
                max: 255
            },
            grid3D: {
                show: false,
                boxWidth: 200,
                boxHeight: 200,
                boxDepth: 100,
                environment: '#fff',
                viewControl: {
                    distance: 200,
                    alpha: 30,
                    beta: 30
                },
                light: {
                    main: {
                        shadow: true,
                        intensity: 2
                    },
                    ambient: {
                        intensity: 0
                    }
                }
            },
            series: [{
                type: 'bar3D',
                shading: 'lambert',
                data: data,
                barSize: 0.8,
                silent: true
            }]
        });
    };
    img.src = 'data:image/jpg;base64,' + data.image;
});

----------------------------------------

TITLE: Installing Latinize.js via Package Managers
DESCRIPTION: Installation commands for both npm and bower package managers.

LANGUAGE: bash
CODE:
npm install latinize

LANGUAGE: bash
CODE:
bower install latinize

----------------------------------------

TITLE: Including ETPL in Browser via Script Tag
DESCRIPTION: Demonstrates how to include ETPL in a browser environment using a script tag, which creates a global 'etpl' variable.

LANGUAGE: html
CODE:
<script src="etpl.js"></script>

----------------------------------------

TITLE: Creating a Basic Globe Visualization with ECharts-GL in JavaScript
DESCRIPTION: This snippet demonstrates how to set up a basic globe visualization using ECharts-GL. It initializes the chart, defines options including a globe component, and sets series data for the visualization.

LANGUAGE: javascript
CODE:
option = {
    backgroundColor: '#000',
    globe: {
        baseTexture: ROOT_PATH + '/data-gl/asset/earth.jpg',
        heightTexture: ROOT_PATH + '/data-gl/asset/bathymetry_bw_composite_4k.jpg',
        displacementScale: 0.1,
        shading: 'lambert',
        environment: ROOT_PATH + '/data-gl/asset/starfield.jpg',
        atmosphere: {
            show: true
        },
        light: {
            ambient: {
                intensity: 0.1
            },
            main: {
                intensity: 1.5
            }
        }
    },
    series: []  
};

----------------------------------------

TITLE: Configuring Bar3D Globe Component - ECharts HTML
DESCRIPTION: Sets up a Bar3D visualization on a globe using ECharts GL library. Requires the echarts-gl plugin to be loaded for 3D globe visualization capabilities.

LANGUAGE: html
CODE:
<script src="http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js"></script>

----------------------------------------

TITLE: ETPL Legacy Merge Function
DESCRIPTION: Implementation of the legacy merge API for backward compatibility with older versions.

LANGUAGE: javascript
CODE:
/**
 * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。
 * 兼容老版本的模板引擎api
 * 
 * @param {HTMLElement} element 渲染字符串填充的HTML元素
 * @param {string} name target名称
 * @param {Object=} data 模板数据
 */
etpl.merge = function ( element, name, data ) {
    if ( element ) {
        element.innerHTML = this.render( name, data );
    }
};

----------------------------------------

TITLE: Customizing Latinize.js Character Mapping
DESCRIPTION: Examples of how to modify the character mapping used by Latinize.js. It shows how to add a new mapping and how to modify existing mappings for German umlauts.

LANGUAGE: javascript
CODE:
latinize.characters['Ω'] = 'O';

// modify the behavior for German umlauts
_.extend(latinize.characters,
  {'Ä': 'Ae', 'Ä': 'Ae', 'Ü': 'Ue', 'ä': 'ae', 'ö': 'oe', 'ü': 'ue'});

----------------------------------------

TITLE: Configuring Bar3D Geographic Visualization with ECharts GL
DESCRIPTION: Demonstrates how to set up a 3D bar chart visualization overlaid on a geographic surface using ECharts GL library and world map data. Requires echarts-gl.min.js and world.js map data dependencies.

LANGUAGE: javascript
CODE:
option = {
    backgroundColor: '#cdcfd5',
    geo3D: {
        map: 'world',
        shading: 'realistic',
        silent: true,
        environment: '#fff',
        realisticMaterial: {
            roughness: 0.8,
            metalness: 0
        },
        postEffect: {
            enable: true,
            SSAO: {
                enable: true,
                radius: 1,
                intensity: 1,
                quality: 'high'
            }
        },
        groundPlane: {
            show: false
        },
        light: {
            main: {
                intensity: 1,
                shadow: true,
                shadowQuality: 'high',
                alpha: 30
            },
            ambient: {
                intensity: 0
            },
            ambientCubemap: {
                texture: 'data-gl/asset/canyon.hdr',
                exposure: 1,
                diffuseIntensity: 0.5
            }
        },
        viewControl: {
            distance: 50,
            panMouseButton: 'left',
            rotateMouseButton: 'right'
        },
        regionHeight: 0.5
    },
    series: []
}

----------------------------------------

TITLE: Rendering ETPL Template
DESCRIPTION: Shows how to render a compiled template with data object to get the final output.

LANGUAGE: javascript
CODE:
var text = render({ name: 'etpl' });

----------------------------------------

TITLE: Installing Latinize.js using Bower
DESCRIPTION: Command to install Latinize.js using Bower package manager.

LANGUAGE: shell
CODE:
bower install latinize

----------------------------------------

TITLE: Rendering ETPL Template
DESCRIPTION: Shows how to render a compiled template with data object to get the final output.

LANGUAGE: javascript
CODE:
var text = render({ name: 'etpl' });

----------------------------------------

TITLE: Installing Latinize.js via Bower
DESCRIPTION: Command to install Latinize.js using Bower package manager.

LANGUAGE: shell
CODE:
bower install latinize

----------------------------------------

TITLE: Client-side Integration of jQuery Mouse Wheel Plugin with Browserify
DESCRIPTION: Shows how to integrate the jQuery Mouse Wheel Plugin on the client-side when using Browserify. It demonstrates requiring jQuery and the plugin in the browser-side JavaScript.

LANGUAGE: javascript
CODE:
var $ = require('jquery-browserify');
require('jquery-mousewheel')($);

----------------------------------------

TITLE: Integrating jQuery Mouse Wheel Plugin with Browserify
DESCRIPTION: Demonstrates how to use the jQuery Mouse Wheel Plugin with Browserify for server-side integration. It shows the necessary npm installations and server-side Node.js code.

LANGUAGE: javascript
CODE:
var express = require('express');
var app = express.createServer();

app.use(require('browserify')({
    require : [ 'jquery-browserify', 'jquery-mousewheel' ]
}));

----------------------------------------

TITLE: Implementing Merge Function for Backwards Compatibility
DESCRIPTION: Provides a custom implementation of the 'merge' function for compatibility with older versions of the template engine.

LANGUAGE: javascript
CODE:
/**
 * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。
 * 兼容老版本的模板引擎api
 * 
 * @param {HTMLElement} element 渲染字符串填充的HTML元素
 * @param {string} name target名称
 * @param {Object=} data 模板数据
 */
etpl.merge = function ( element, name, data ) {
    if ( element ) {
        element.innerHTML = this.render( name, data );
    }
};

----------------------------------------

TITLE: Installing Handsontable via Package Managers
DESCRIPTION: Instructions for installing Handsontable using npm or Bower package managers

LANGUAGE: bash
CODE:
npm install handsontable --save

LANGUAGE: bash
CODE:
bower install handsontable --save

----------------------------------------

TITLE: Using jQuery Mouse Wheel Plugin with Event Helper Method
DESCRIPTION: Shows how to use the mousewheel event helper method provided by the plugin. This method simplifies binding the mousewheel event to an element.

LANGUAGE: javascript
CODE:
// using the event helper
$('#my_elem').mousewheel(function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

----------------------------------------

TITLE: Installing tslib via yarn
DESCRIPTION: Shell commands for installing tslib using yarn, with different versions for various TypeScript releases.

LANGUAGE: shell
CODE:
# TypeScript 3.9.2 or later
yarn add tslib

# TypeScript 3.8.4 or earlier
yarn add tslib@^1

# TypeScript 2.3.2 or earlier
yarn add tslib@1.6.1


----------------------------------------

TITLE: Compiling and Rendering ETPL Templates
DESCRIPTION: Shows how to compile an ETPL template and render it with data.

LANGUAGE: javascript
CODE:
var render = etpl.compile('Hello ${name}!');
var text = render({ name: 'etpl' });

----------------------------------------

TITLE: Initializing Handsontable with AMD
DESCRIPTION: Example of how to require and initialize Handsontable in an AMD environment.

LANGUAGE: javascript
CODE:
require(['handsontable'], function(Handsontable) {
    var hot = new Handsontable(document.getElementById('example'), {
      data: [[1, 2, 3, 4], [1, 2, 3, 4]]
    });
});

----------------------------------------

TITLE: Installing tslib via npm
DESCRIPTION: Shell commands for installing tslib using npm, with different versions for various TypeScript releases.

LANGUAGE: shell
CODE:
# TypeScript 3.9.2 or later
npm install tslib

# TypeScript 3.8.4 or earlier
npm install tslib@^1

# TypeScript 2.3.2 or earlier
npm install tslib@1.6.1


----------------------------------------

TITLE: Demonstrating TypeScript Helper Functions With tslib
DESCRIPTION: This snippet shows how TypeScript imports helper functions from tslib when using the --importHelpers flag.

LANGUAGE: typescript
CODE:
var tslib_1 = require("tslib");
exports.x = {};
exports.y = tslib_1.__assign({}, exports.x);


----------------------------------------

TITLE: Importing ETPL in AMD Environment (Asynchronous)
DESCRIPTION: Demonstrates asynchronous importing of ETPL in an AMD environment.

LANGUAGE: javascript
CODE:
require([ 'etpl' ], function (etpl) {
});

----------------------------------------

TITLE: Installing jQuery Mousewheel with Browserify
DESCRIPTION: Commands for installing the jQuery mousewheel plugin and jQuery browserify dependency using npm.

LANGUAGE: bash
CODE:
npm install jquery-mousewheel
npm install jquery-browserify

----------------------------------------

TITLE: Demonstrating TypeScript Helper Functions Without tslib
DESCRIPTION: This snippet shows how TypeScript emits helper functions like __assign when not using tslib.

LANGUAGE: typescript
CODE:
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.x = {};
exports.y = __assign({}, exports.x);


----------------------------------------

TITLE: Using ecStat Regression Transform in ECharts
DESCRIPTION: Example of using the ecStat regression transform in an ECharts option configuration.

LANGUAGE: javascript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:regression',
        config: {
            method: regressionType,
            ...opt
        }
    }],
    ...
});

----------------------------------------

TITLE: Including ETPL in Browser Environment
DESCRIPTION: Demonstrates how to include ETPL in a browser environment using a script tag.

LANGUAGE: html
CODE:
<script src="etpl.js"></script>

----------------------------------------

TITLE: Installing tslib via bower
DESCRIPTION: Shell commands for installing tslib using bower, with different versions for various TypeScript releases.

LANGUAGE: shell
CODE:
# TypeScript 3.9.2 or later
bower install tslib

# TypeScript 3.8.4 or earlier
bower install tslib@^1

# TypeScript 2.3.2 or earlier
bower install tslib@1.6.1


----------------------------------------

TITLE: Using ecStat Clustering Function Standalone
DESCRIPTION: Example of using the ecStat clustering function independently of ECharts.

LANGUAGE: javascript
CODE:
var result = ecStat.clustering.hierarchicalKMeans(data, config);
// or
var result = ecStat.clustering.hierarchicalKMeans(data, clusterCount, stepByStep);

----------------------------------------

TITLE: Registering ecStat Histogram Transform
DESCRIPTION: Registering the ecStat histogram transform for use with ECharts.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.histogram);

----------------------------------------

TITLE: Registering ecStat Histogram Transform
DESCRIPTION: Registering the ecStat histogram transform for use with ECharts.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.histogram);

----------------------------------------

TITLE: Basic Handsontable JavaScript Implementation
DESCRIPTION: JavaScript code for initializing Handsontable with sample data and basic configuration options.

LANGUAGE: javascript
CODE:
var data = [
  ["", "Ford", "Volvo", "Toyota", "Honda"],
  ["2016", 10, 11, 12, 13],
  ["2017", 20, 11, 14, 13],
  ["2018", 30, 15, 12, 13]
];

var container = document.getElementById('example');
var hot = new Handsontable(container, {
  data: data,
  rowHeaders: true,
  colHeaders: true
});

----------------------------------------

TITLE: Defining ECharts Scatter Nebula Configuration
DESCRIPTION: YAML front matter configuration that defines the title and category for a scatter plot visualization with a nebula effect in ECharts.

LANGUAGE: yaml
CODE:
---
title: Scatter Nebula
category: scatter
---

----------------------------------------

TITLE: Installing ecStat via npm
DESCRIPTION: Command to install ecStat using npm package manager.

LANGUAGE: sh
CODE:
npm install echarts-stat

----------------------------------------

TITLE: Configuring Graph Modularity in ECharts Options
DESCRIPTION: This snippet demonstrates how to enable and configure the graph modularity feature in ECharts options. It shows basic usage and advanced configuration with resolution and sorting options.

LANGUAGE: javascript
CODE:
setOption({

    ...

    series: [{
        type: 'graph',
        layout: 'force',
        // Set modularity property true and extension will automatically detect different communities
        // and assign each different color.
        modularity: true

        // Specify resolution. Higher resolution will produce less communities
        modularity: {
            resolution: 5,
            // If sort the communities
            sort: false
        }

        ...
    }]
})

----------------------------------------

TITLE: Basic Handsontable HTML Setup
DESCRIPTION: HTML markup required for basic Handsontable initialization.

LANGUAGE: html
CODE:
<div id="example"></div>

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the documentation page, defining the title, category, and Chinese title for the scatter plot example.

LANGUAGE: markdown
CODE:
---
title: Scatter Aqi Color
category: scatter
titleCN: Scatter Aqi Color
---

----------------------------------------

TITLE: Installing Graph Modularity Extension via npm
DESCRIPTION: This snippet demonstrates how to install the graph modularity extension using npm.

LANGUAGE: shell
CODE:
npm install echarts-graph-modularity

----------------------------------------

TITLE: Installing Graph Modularity Extension via CDN in HTML
DESCRIPTION: This snippet shows how to include the ECharts library and the graph modularity extension using script tags in HTML.

LANGUAGE: html
CODE:
<script src="echarts.min.js"></script>
<script src="echarts-graph-modularity.min.js"></script>

----------------------------------------

TITLE: Importing Handsontable as CommonJS Module
DESCRIPTION: Example of importing Handsontable in a CommonJS environment and command for bundling with Browserify.

LANGUAGE: javascript
CODE:
var handsontable = require('handsontable');

LANGUAGE: bash
CODE:
browserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro

----------------------------------------

TITLE: Importing Handsontable as CommonJS Module
DESCRIPTION: Example of importing Handsontable in a CommonJS environment and command for bundling with Browserify.

LANGUAGE: javascript
CODE:
var handsontable = require('handsontable');

LANGUAGE: bash
CODE:
browserify main.js -o bundle.js -r moment -r pikaday -r zeroclipboard -r numbro

----------------------------------------

TITLE: Defining ECharts Heatmap Configuration Metadata
DESCRIPTION: YAML frontmatter configuration defining the visualization title, category and Chinese title for an ECharts heatmap visualization of air quality data.

LANGUAGE: markdown
CODE:
---
title: Air Qulity
category: heatmap
titleCN: 全国主要城市空气质量
---

----------------------------------------

TITLE: Apache License 2.0 Header Comment
DESCRIPTION: Standard legal header containing copyright notice, license reference, and warranty disclaimers required for Apache 2.0 licensed software.

LANGUAGE: plain
CODE:
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

----------------------------------------

TITLE: Importing ECharts Files Example
DESCRIPTION: Demonstrates the correct way to import files with fully specified extensions after v5.5.0 update. Shows both incorrect and correct import syntax patterns.

LANGUAGE: javascript
CODE:
// Incorrect after v5.5.0
import 'xxx/xxx/xxx'

// Correct after v5.5.0
import 'xxx/xxx/xxx.js'

----------------------------------------

TITLE: Initializing Handsontable with AMD Module Loading
DESCRIPTION: Example of loading and initializing Handsontable using AMD module pattern with basic data configuration.

LANGUAGE: javascript
CODE:
require(['handsontable'], function(Handsontable) {
    var hot = new Handsontable(document.getElementById('example'), {
      data: [[1, 2, 3, 4], [1, 2, 3, 4]]
    });
});

----------------------------------------

TITLE: Installing Handsontable via Package Managers
DESCRIPTION: Commands for installing Handsontable using npm or Bower package managers.

LANGUAGE: bash
CODE:
npm install handsontable --save

LANGUAGE: bash
CODE:
bower install handsontable --save

----------------------------------------

TITLE: Browser Usage with Script Tag
DESCRIPTION: Demonstrates how to use Immutable.js in a browser environment by including it via a script tag.

LANGUAGE: html
CODE:
<script src="immutable.min.js"></script>
<script>
    var map1 = Immutable.Map({a:1, b:2, c:3});
    var map2 = map1.set('b', 50);
    map1.get('b'); // 2
    map2.get('b'); // 50
</script>

----------------------------------------

TITLE: Legacy Merge Function Implementation
DESCRIPTION: Implementation of the deprecated merge API for backward compatibility with older versions.

LANGUAGE: javascript
CODE:
/**
 * 执行模板渲染，并将渲染后的字符串作为innerHTML填充到HTML元素中。
 * 兼容老版本的模板引擎api
 * 
 * @param {HTMLElement} element 渲染字符串填充的HTML元素
 * @param {string} name target名称
 * @param {Object=} data 模板数据
 */
etpl.merge = function ( element, name, data ) {
    if ( element ) {
        element.innerHTML = this.render( name, data );
    }
};

----------------------------------------

TITLE: Basic ETPL Template Compilation
DESCRIPTION: Demonstrates how to compile a simple template string using ETPL.

LANGUAGE: javascript
CODE:
var render = etpl.compile('Hello ${name}!');

----------------------------------------

TITLE: Loading ETPL in AMD Environment (Asynchronous)
DESCRIPTION: Shows how to load ETPL as a module in an AMD environment using asynchronous require.

LANGUAGE: javascript
CODE:
require([ 'etpl' ], function (etpl) {
});

----------------------------------------

TITLE: Using ecStat Regression Function Standalone
DESCRIPTION: Example of using the ecStat regression function independently of ECharts.

LANGUAGE: javascript
CODE:
var myRegression = ecStat.regression(regressionType, data, opt);
// or
var myRegression = ecStat.regression('polynomial', data, order);

----------------------------------------

TITLE: Using ecStat Clustering Function Standalone
DESCRIPTION: Example of using the ecStat clustering function independently of ECharts.

LANGUAGE: javascript
CODE:
var result = ecStat.clustering.hierarchicalKMeans(data, config);
// or
var result = ecStat.clustering.hierarchicalKMeans(data, clusterCount, stepByStep);

----------------------------------------

TITLE: Using ecStat Histogram Function Standalone
DESCRIPTION: Example of using the ecStat histogram function independently of ECharts.

LANGUAGE: javascript
CODE:
var bins = ecStat.histogram(data, config);

----------------------------------------

TITLE: Registering ecStat Histogram Transform
DESCRIPTION: Code to register the ecStat histogram transform for use with ECharts.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecStat.transform.histogram);

----------------------------------------

TITLE: Including ecStat via Script Tag
DESCRIPTION: Example of including ecStat library via a script tag and using its clustering function.

LANGUAGE: html
CODE:
<script src='./dist/ecStat.js'></script>
<script>

var result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);

</script>

----------------------------------------

TITLE: Including ecStat via Script Tag
DESCRIPTION: Example of including ecStat library via a script tag and using its clustering function.

LANGUAGE: html
CODE:
<script src='./dist/ecStat.js'></script>
<script>

var result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);

</script>

----------------------------------------

TITLE: Using ecStat Regression Transform in ECharts
DESCRIPTION: Example of using the ecStat regression transform in an ECharts option configuration.

LANGUAGE: JavaScript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:regression',
        config: {
            method: regressionType,
            ...opt
        }
    }],
    ...
});

----------------------------------------

TITLE: Standalone Usage of ecStat Histogram
DESCRIPTION: Examples of using the ecStat histogram function standalone, with different methods for calculating bin numbers.

LANGUAGE: JavaScript
CODE:
var bins = ecStat.histogram(data, config);
// or
var bins = ecStat.histogram(data, method);

----------------------------------------

TITLE: Using ecStat Histogram Transform in ECharts
DESCRIPTION: Example of using the ecStat histogram transform in an ECharts option configuration.

LANGUAGE: JavaScript
CODE:
chart.setOption({
    dataset: [{
        source: data
    }, {
        type: 'ecStat:histogram',
        config: config
    }],
    ...
});

----------------------------------------

TITLE: Registering ecStat Histogram Transform
DESCRIPTION: Registers the ecStat histogram transform for use with ECharts.

LANGUAGE: JavaScript
CODE:
echarts.registerTransform(ecStat.transform.histogram);

----------------------------------------

TITLE: Including ecStat in HTML
DESCRIPTION: Example of including ecStat script in an HTML file and using its clustering function.

LANGUAGE: HTML
CODE:
<script src='./dist/ecStat.js'></script>
<script>

var result = ecStat.clustering.hierarchicalKMeans(data, clusterNumber, false);

</script>

----------------------------------------

TITLE: Building Apache ECharts with NPM
DESCRIPTION: Instructions for building Apache ECharts from source code using NPM. Includes steps for installing dependencies, running in development mode, checking TypeScript code, and building production files.

LANGUAGE: shell
CODE:
# Install the dependencies from NPM:
npm install

# Rebuild source code immediately in watch mode when changing the source code.
# It opens the `./test` directory, and you may open `-cases.html` to get the list
# of all test cases.
# If you wish to create a test case, run `npm run mktest:help` to learn more.
npm run dev

# Check the correctness of TypeScript code.
npm run checktype

# If intending to build and get all types of the "production" files:
npm run release

----------------------------------------

TITLE: Listing Official Public Entries in ECharts Package
DESCRIPTION: This code snippet enumerates the officially exported entries in the ECharts package. These entries are the only ones that are intended for direct use by end-users of the library.

LANGUAGE: markdown
CODE:
+ `'echarts'`
+ `'echarts/index.js'`
+ `'echarts/index.blank.js'`
+ `'echarts/index.common.js'`
+ `'echarts/index.simple.js'`
+ `'echarts/core.js'`
+ `'echarts/charts.js'`
+ `'echarts/components.js'`
+ `'echarts/features.js'`
+ `'echarts/renderers.js'`
+ `'echarts/i18n/*`
+ `'echarts/theme/*`
+ `'echarts/types/*`
+ `'echarts/extension/*`
+ `'echarts/dist/*`
+ `'echarts/ssr/client/index.js'`

----------------------------------------

TITLE: Installing ECharts Graph Modularity via NPM
DESCRIPTION: Command to install the graph modularity extension using NPM package manager.

LANGUAGE: shell
CODE:
npm install echarts-graph-modularity

----------------------------------------

TITLE: Initializing jQuery Mousewheel with Browserify
DESCRIPTION: Client-side JavaScript code showing how to initialize jQuery and the mousewheel plugin when using browserify.

LANGUAGE: javascript
CODE:
var $ = require('jquery-browserify');
require('jquery-mousewheel')($);

----------------------------------------

TITLE: Configuring Browserify Server Integration
DESCRIPTION: Server-side Node.js code showing how to configure browserify to include the jQuery mousewheel plugin.

LANGUAGE: javascript
CODE:
var express = require('express');
var app = express.createServer();

app.use(require('browserify')({
    require : [ 'jquery-browserify', 'jquery-mousewheel' ]
}));

----------------------------------------

TITLE: Implementing Mouse Wheel Event Handlers in jQuery
DESCRIPTION: Examples showing two methods to bind mouse wheel events using jQuery. Demonstrates both the .on() method and the mousewheel helper method to log delta values to the console.

LANGUAGE: javascript
CODE:
// using on
$('#my_elem').on('mousewheel', function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

// using the event helper
$('#my_elem').mousewheel(function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

----------------------------------------

TITLE: Binding mousewheel event using jQuery helper method
DESCRIPTION: Shows how to use the mousewheel helper method provided by the plugin to bind the mousewheel event. This method acts similarly to other jQuery event helper methods.

LANGUAGE: javascript
CODE:
// using the event helper
$('#my_elem').mousewheel(function(event) {
    console.log(event.deltaX, event.deltaY, event.deltaFactor);
});

----------------------------------------

TITLE: Coding Style Guidelines for Immutable JS
DESCRIPTION: This snippet outlines the coding style preferences for contributing to Immutable JS. It covers indentation, line length, quotation marks, ES6 usage, and other stylistic choices.

LANGUAGE: markdown
CODE:
* 2 spaces for indentation (no tabs)
* 80 character line length strongly preferred.
* Prefer `'` over `"`
* ES6 Harmony when possible.
* Use semicolons;
* Trailing commas,
* Avd abbr wrds.

----------------------------------------

TITLE: Installing Dependencies and Running Tests for Immutable JS
DESCRIPTION: This snippet outlines the steps to set up the development environment, run tests, and prepare a pull request for Immutable JS. It includes installing dependencies, running tests, and ensuring code passes linting.

LANGUAGE: markdown
CODE:
 1. Fork the repo and create your branch from `master`.
 2. Install all dependencies. (`npm install`)
 3. Install the grunt CLI tools. (`npm install -g grunt-cli`)
 4. If you've added code, add tests.
 5. If you've changed APIs, update the documentation.
 6. Build generated JS, run tests and ensure your code passes lint. (`grunt`)
 7. Be sure to commit the generated JS in `/dist`.
 8. If you haven't already, complete the Contributor License Agreement ("CLA").

----------------------------------------

TITLE: Configuring tsconfig.json for JSPM Users with tslib
DESCRIPTION: JSON configuration in tsconfig.json for JSPM users to set up paths mapping for tslib.

LANGUAGE: json
CODE:
{
    "compilerOptions": {
        "module": "system",
        "importHelpers": true,
        "baseUrl": "./",
        "paths": {
            "tslib" : ["jspm_packages/npm/tslib@2.x.y/tslib.d.ts"]
        }
    }
}


----------------------------------------

TITLE: Configuring Package.json for ECharts Module Exports
DESCRIPTION: This snippet highlights key aspects of the package.json configuration for ECharts. It specifies that 'zrender.js' is the official export, while other entries in the 'exports' field are for legacy compatibility. The configuration also sets the module type to 'module' and includes an 'exports' object.

LANGUAGE: json
CODE:
{
  "exports": {
    // Other internal files listed here
  },
  "type": "module"
}

----------------------------------------

TITLE: Defining ThemeRiver Chart Headers in Markdown
DESCRIPTION: Front matter metadata for ThemeRiver chart documentation defining the title, category, and Chinese title (titleCN).

LANGUAGE: markdown
CODE:
---
title: ThemeRiver
category: themeRiver
titleCN: 主题河流图
---

----------------------------------------

TITLE: Configuring Monochrome Sunburst Chart in ECharts
DESCRIPTION: This code snippet sets up the data structure and configures options for a monochrome sunburst chart using ECharts. It defines the chart's appearance, data, and interactivity settings.

LANGUAGE: javascript
CODE:
option = {
  color: ['#FFAE57', '#FF7853', '#EA5151', '#CC3F57', '#9A2555'],
  series: [
    {
      type: 'sunburst',
      data: [
        {
          name: 'Grandpa',
          children: [
            {
              name: 'Uncle Leo',
              value: 15,
              children: [
                {
                  name: 'Cousin Jack',
                  value: 2
                },
                {
                  name: 'Cousin Mary',
                  value: 5,
                  children: [
                    {
                      name: 'Jackson',
                      value: 2
                    }
                  ]
                },
                {
                  name: 'Cousin Ben',
                  value: 4
                }
              ]
            },
            {
              name: 'Father',
              value: 10,
              children: [
                {
                  name: 'Me',
                  value: 5
                },
                {
                  name: 'Brother Peter',
                  value: 1
                }
              ]
            }
          ]
        },
        {
          name: 'Nancy',
          children: [
            {
              name: 'Uncle Nike',
              children: [
                {
                  name: 'Cousin Betty',
                  value: 1
                },
                {
                  name: 'Cousin Jenny',
                  value: 2
                }
              ]
            }
          ]
        }
      ],
      radius: [0, '90%'],
      itemStyle: {
        borderRadius: 7,
        borderWidth: 2
      },
      label: {
        show: false
      }
    }
  ]
};

----------------------------------------

TITLE: YAML Frontmatter Configuration for ECharts Population Visualization
DESCRIPTION: YAML configuration metadata that specifies the title and category for an ECharts visualization focusing on world population data from 2011.

LANGUAGE: yaml
CODE:
---
title: World Population (2011)
category: scatter
titleCN: World Population (2011)
---

----------------------------------------

TITLE: Air Quality Chart Metadata in Markdown
DESCRIPTION: Defines metadata for an ECharts scatter plot example that visualizes air quality data for major cities.

LANGUAGE: markdown
CODE:
---
title: Air Quality
category: scatter
titleCN: 全国主要城市空气质量
---

----------------------------------------

TITLE: Defining Sankey Diagram Metadata in YAML
DESCRIPTION: YAML front matter metadata block defining the title, category and Chinese title (titleCN) for Sankey diagram documentation.

LANGUAGE: yaml
CODE:
---
title: Sankey Diagram
category: sankey
titleCN: Sankey Diagram
---

----------------------------------------

TITLE: YAML Frontmatter Configuration for ECharts Example
DESCRIPTION: YAML configuration header that defines metadata for an ECharts example showing a pictorialBar chart with spirits visualization.

LANGUAGE: yaml
CODE:
---
title: Spirits
category: pictorialBar
titleCN: 精灵
---

----------------------------------------

TITLE: Configuring USA Population Map Visualization with ECharts in JavaScript
DESCRIPTION: This code snippet sets up the configuration for an ECharts map visualization of USA population estimates for 2012. It includes data processing, color range definition, and map styling options.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'USA Population Estimates (2012)',
    subtext: 'Data from www.census.gov',
    sublink: 'http://www.census.gov/popest/data/datasets.html',
    left: 'right'
  },
  tooltip: {
    trigger: 'item',
    showDelay: 0,
    transitionDuration: 0.2
  },
  visualMap: {
    left: 'right',
    min: 500000,
    max: 38000000,
    inRange: {
      color: [
        '#313695',
        '#4575b4',
        '#74add1',
        '#abd9e9',
        '#e0f3f8',
        '#ffffbf',
        '#fee090',
        '#fdae61',
        '#f46d43',
        '#d73027',
        '#a50026'
      ]
    },
    text: ['High', 'Low'],
    calculable: true
  },
  toolbox: {
    show: true,
    //orient: 'vertical',
    left: 'left',
    top: 'top',
    feature: {
      dataView: { readOnly: false },
      restore: {},
      saveAsImage: {}
    }
  },
  series: [
    {
      name: 'USA PopEstimates',
      type: 'map',
      roam: true,
      map: 'USA',
      emphasis: {
        label: {
          show: true
        }
      },
      data: [
        { name: 'Alabama', value: 4822023 },
        { name: 'Alaska', value: 731449 },
        { name: 'Arizona', value: 6553255 },
        { name: 'Arkansas', value: 2949131 },
        { name: 'California', value: 38041430 },
        { name: 'Colorado', value: 5187582 },
        { name: 'Connecticut', value: 3590347 },
        { name: 'Delaware', value: 917092 },
        { name: 'District of Columbia', value: 632323 },
        { name: 'Florida', value: 19320749 },
        { name: 'Georgia', value: 9919945 },
        { name: 'Hawaii', value: 1392313 },
        { name: 'Idaho', value: 1595728 },
        { name: 'Illinois', value: 12875255 },
        { name: 'Indiana', value: 6537334 },
        { name: 'Iowa', value: 3074186 },
        { name: 'Kansas', value: 2885905 },
        { name: 'Kentucky', value: 4380415 },
        { name: 'Louisiana', value: 4601893 },
        { name: 'Maine', value: 1329192 },
        { name: 'Maryland', value: 5884563 },
        { name: 'Massachusetts', value: 6646144 },
        { name: 'Michigan', value: 9883360 },
        { name: 'Minnesota', value: 5379139 },
        { name: 'Mississippi', value: 2984926 },
        { name: 'Missouri', value: 6021988 },
        { name: 'Montana', value: 1005141 },
        { name: 'Nebraska', value: 1855525 },
        { name: 'Nevada', value: 2758931 },
        { name: 'New Hampshire', value: 1320718 },
        { name: 'New Jersey', value: 8864590 },
        { name: 'New Mexico', value: 2085538 },
        { name: 'New York', value: 19570261 },
        { name: 'North Carolina', value: 9752073 },
        { name: 'North Dakota', value: 699628 },
        { name: 'Ohio', value: 11544225 },
        { name: 'Oklahoma', value: 3814820 },
        { name: 'Oregon', value: 3899353 },
        { name: 'Pennsylvania', value: 12763536 },
        { name: 'Rhode Island', value: 1050292 },
        { name: 'South Carolina', value: 4723723 },
        { name: 'South Dakota', value: 833354 },
        { name: 'Tennessee', value: 6456243 },
        { name: 'Texas', value: 26059203 },
        { name: 'Utah', value: 2855287 },
        { name: 'Vermont', value: 626011 },
        { name: 'Virginia', value: 8185867 },
        { name: 'Washington', value: 6897012 },
        { name: 'West Virginia', value: 1855413 },
        { name: 'Wisconsin', value: 5726398 },
        { name: 'Wyoming', value: 576412 },
        { name: 'Puerto Rico', value: 3667084 }
      ]
    }
  ]
};

----------------------------------------

TITLE: Markdown Configuration for ECharts Map Example
DESCRIPTION: YAML frontmatter configuration defining the title and category for an ECharts map example that demonstrates province switching functionality.

LANGUAGE: markdown
CODE:
---
title: Switch among 34 Provinces
category: map
titleCN: 34 省切换查看
---

----------------------------------------

TITLE: Configuring Tooltip and DataZoom for Mobile in ECharts
DESCRIPTION: This code snippet demonstrates how to set up a line chart with tooltip and dataZoom components optimized for mobile devices. It includes data generation, chart options configuration, and responsive settings for touch interactions.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    trigger: 'axis',
    position: function (pt) {
      return [pt[0], '10%'];
    }
  },
  title: {
    left: 'center',
    text: 'Large Ara Chart'
  },
  toolbox: {
    feature: {
      dataZoom: {
        yAxisIndex: 'none'
      },
      restore: {},
      saveAsImage: {}
    }
  },
  xAxis: {
    type: 'time',
    boundaryGap: false
  },
  yAxis: {
    type: 'value',
    boundaryGap: [0, '100%']
  },
  dataZoom: [
    {
      type: 'inside',
      start: 0,
      end: 20
    },
    {
      start: 0,
      end: 20
    }
  ],
  series: [
    {
      name: 'Fake Data',
      type: 'line',
      smooth: true,
      symbol: 'none',
      areaStyle: {},
      data: (function () {
        let base = +new Date(1968, 9, 3);
        let oneDay = 24 * 3600 * 1000;
        let date = [];
        for (let i = 1; i < 20000; i++) {
          let now = new Date((base += oneDay));
          date.push([now.getFullYear(), now.getMonth() + 1, now.getDate()].join('/'));
        }
        return date;
      })()
    }
  ]
};

----------------------------------------

TITLE: Configuring ECharts Line Chart for Daily Electricity Usage Distribution
DESCRIPTION: This snippet defines the ECharts option object for creating a line chart showing electricity usage distribution over a 24-hour period. It sets up the x-axis with hour intervals, y-axis for electricity consumption, and configures the data series with smooth curves and area filling.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'Distribution of Electricity',
    subtext: 'Fake Data'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  toolbox: {
    show: true,
    feature: {
      saveAsImage: {}
    }
  },
  xAxis: {
    type: 'category',
    boundaryGap: false,
    data: [
      '00:00',
      '01:15',
      '02:30',
      '03:45',
      '05:00',
      '06:15',
      '07:30',
      '08:45',
      '10:00',
      '11:15',
      '12:30',
      '13:45',
      '15:00',
      '16:15',
      '17:30',
      '18:45',
      '20:00',
      '21:15',
      '22:30',
      '23:45'
    ]
  },
  yAxis: {
    type: 'value',
    axisLabel: {
      formatter: '{value} W'
    },
    axisPointer: {
      snap: true
    }
  },
  visualMap: {
    show: false,
    dimension: 0,
    pieces: [
      {
        lte: 6,
        color: 'green'
      },
      {
        gt: 6,
        lte: 8,
        color: 'red'
      },
      {
        gt: 8,
        lte: 14,
        color: 'green'
      },
      {
        gt: 14,
        lte: 17,
        color: 'red'
      },
      {
        gt: 17,
        color: 'green'
      }
    ]
  },
  series: [
    {
      name: 'Electricity',
      type: 'line',
      smooth: true,
      data: [
        300, 280, 250, 260, 270, 300, 550, 500, 400, 390, 380, 390, 400, 500,
        600, 750, 800, 700, 600, 400
      ],
      markArea: {
        itemStyle: {
          color: 'rgba(255, 173, 177, 0.4)'
        },
        data: [
          [
            {
              name: 'Morning Peak',
              xAxis: '07:30'
            },
            {
              xAxis: '10:00'
            }
          ],
          [
            {
              name: 'Evening Peak',
              xAxis: '17:30'
            },
            {
              xAxis: '21:15'
            }
          ]
        ]
      }
    }
  ]
};

----------------------------------------

TITLE: Defining Line Chart Markdown Headers
DESCRIPTION: YAML frontmatter configuration defining the chart type and category for documentation purposes.

LANGUAGE: markdown
CODE:
---
title: Line with Marklines
titleCN: 折线图的标记线
category: line
---

----------------------------------------

TITLE: Creating Basic Line Chart with ECharts in JavaScript
DESCRIPTION: This snippet demonstrates how to create a basic line chart using ECharts. It sets up the chart options including x-axis data, series data, and tooltip configuration.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [150, 230, 224, 218, 135, 147, 260],
      type: 'line'
    }
  ]
};

----------------------------------------

TITLE: Creating NPM Dependencies Graph with ECharts in JavaScript
DESCRIPTION: This code creates an ECharts graph visualization of NPM package dependencies. It sets up the chart options including data for nodes and links, configures the graph layout, and defines visual properties such as node size, color, and edge curvature.

LANGUAGE: javascript
CODE:
option = {
  title: {
    text: 'NPM Dependencies'
  },
  animationDurationUpdate: 1500,
  animationEasingUpdate: 'quinticInOut',
  series: [
    {
      type: 'graph',
      layout: 'none',
      // progressiveThreshold: 700,
      data: [
        {
          x: 557.8226113467241,
          y: 267.7347860771258,
          id: '0',
          name: 'react',
          symbolSize: 40.42773280830695,
          itemStyle: {
            color: '#FF0000'
          }
        },
        {
          x: 475.2644025251218,
          y: 487.1772421619801,
          id: '1',
          name: 'react-dom',
          symbolSize: 39.035498038982166
        },
        {
          x: 294.78418308560687,
          y: 180.04871629159087,
          id: '2',
          name: 'scheduler',
          symbolSize: 30.611184144481603
        },
        {
          x: 105.42253633014538,
          y: 415.17420231719685,
          id: '3',
          name: 'loose-envify',
          symbolSize: 38.13006140434907
        }
      ],
      links: [
        {
          source: '0',
          target: '1'
        },
        {
          source: '0',
          target: '2'
        },
        {
          source: '0',
          target: '3'
        },
        {
          source: '1',
          target: '2'
        },
        {
          source: '1',
          target: '3'
        }
      ],
      roam: true,
      label: {
        position: 'right',
        formatter: '{b}'
      },
      lineStyle: {
        color: 'source',
        curveness: 0.3
      },
      emphasis: {
        focus: 'adjacency',
        lineStyle: {
          width: 10
        }
      }
    }
  ]
};

----------------------------------------

TITLE: Customizing Force Layout Parameters in ECharts
DESCRIPTION: This code snippet shows how to fine-tune force layout parameters in ECharts. It includes options for initial positions, edge length, repulsion strength, and gravity.

LANGUAGE: javascript
CODE:
option = {
    series: [{
        type: 'graph',
        layout: 'force',
        force: {
            initLayout: 'circular'
            // Node repulsion, edge length, etc.
            repulsion: 100,
            gravity: 0.1,
            edgeLength: 30,
            layoutAnimation: true
        },
        data: [
            {
                x: 100,
                y: 100,
                value: 10
            },
            {
                x: 200,
                y: 200,
                value: 20
            }
        ]
    }]
};

----------------------------------------

TITLE: Defining YAML Frontmatter for ECharts Air Quality Visualization
DESCRIPTION: YAML frontmatter block defining metadata for an ECharts visualization. It specifies the title in English and Chinese, as well as categories for the chart type.

LANGUAGE: yaml
CODE:
---
title: Air Quality - Baidu Map
category: scatter, map
titleCN: 全国主要城市空气质量 - 百度地图
---

----------------------------------------

TITLE: Markdown Front Matter for ECharts Profile Documentation
DESCRIPTION: YAML front matter block defining metadata for the ECharts Profile documentation page, including title, category and Chinese title.

LANGUAGE: markdown
CODE:
---
title: Profile
category: custom
titleCN: Profile
---

----------------------------------------

TITLE: Defining ECharts Profit Component Metadata
DESCRIPTION: YAML frontmatter metadata defining a custom ECharts profit visualization component including title and category.

LANGUAGE: markdown
CODE:
---
title: Profit
category: custom
titleCN: Profit
---

----------------------------------------

TITLE: Configuring 3D Scatter Plot with Simplex Noise in ECharts
DESCRIPTION: Markdown configuration for setting up a 3D scatter plot visualization using ECharts GL and simplex noise. Includes external script dependencies and metadata for the visualization.

LANGUAGE: markdown
CODE:
---
title: Scatter3D - Simplex Noise
category: scatter3D
theme: dark
titleCN: Scatter3D - Simplex Noise
scripts: https://rawgit.com/jwagner/simplex-noise.js/master/simplex-noise.js,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js
---
Visualize 3D simplex noise with scatter3D

----------------------------------------

TITLE: Configuring Map3D and visualMap for Alcohol Consumption Visualization in ECharts
DESCRIPTION: This code snippet sets up an ECharts option object for creating a 3D map visualization of alcohol consumption data. It defines the map type, lighting, viewControl, and uses visualMap to color-code countries based on their consumption levels.

LANGUAGE: javascript
CODE:
option = {
    backgroundColor: '#cdcfd5',
    geo3D: {
        map: 'world',
        shading: 'lambert',
        light: {
            main: {
                intensity: 5,
                shadow: true,
                shadowQuality: 'high',
                alpha: 30
            },
            ambient: {
                intensity: 0
            },
            ambientCubemap: {
                texture: '/asset/get/s/data-1500979839653-ry33I7YTZ.hdr',
                exposure: 1,
                diffuseIntensity: 0.5,
                specularIntensity: 2
            }
        },
        viewControl: {
            distance: 50,
            panMouseButton: 'left',
            rotateMouseButton: 'right'
        },
        postEffect: {
            enable: true,
            bloom: {
                enable: false
            },
            SSAO: {
                radius: 1,
                intensity: 1,
                enable: true
            },
            depthOfField: {
                enable: false,
                focalRange: 10,
                blurRadius: 10,
                fstop: 1
            }
        },
        temporalSuperSampling: {
            enable: true
        },
        itemStyle: {
            color: '#fff'
        },
        regionHeight: 0.5
    },
    visualMap: {
        max: 40,
        calculable: true,
        realtime: false,
        inRange: {
            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
        },
        outOfRange: {
            colorAlpha: 0
        }
    },
    series: [{
        type: 'bar3D',
        coordinateSystem: 'geo3D',
        shading: 'lambert',
        data: [],
        barSize: 0.1,
        minHeight: 0.2,
        silent: true,
        itemStyle: {
            color: 'orange'
        }
    }]
};

----------------------------------------

TITLE: Standalone Usage of ecStat Regression
DESCRIPTION: Examples of using the ecStat regression function standalone.

LANGUAGE: JavaScript
CODE:
var myRegression = ecStat.regression(regressionType, data, opt);
// or
var myRegression = ecStat.regression('polynomial', data, order);

----------------------------------------

TITLE: Configuring ECharts Options for Horizontal Calendar Heatmap
DESCRIPTION: This snippet sets up the configuration options for the ECharts horizontal calendar heatmap. It includes settings for the calendar, visualMap, series, and tooltip components.

LANGUAGE: javascript
CODE:
option = {
  tooltip: {
    position: 'top',
    formatter: function (p) {
      var format = echarts.format.formatTime('yyyy-MM-dd', p.data[0]);
      return format + ': ' + p.data[1];
    }
  },
  visualMap: {
    min: 0,
    max: 10000,
    calculable: true,
    orient: 'vertical',
    left: '670',
    top: 'center'
  },

  calendar: [{
    orient: 'vertical',
    range: '2016'
  }],

  series: [{
    type: 'heatmap',
    coordinateSystem: 'calendar',
    calendarIndex: 0,
    data: getVirtulData(2016)
  }]
};

----------------------------------------

TITLE: Configuring Basic Line Chart with ECharts in JavaScript
DESCRIPTION: This code snippet sets up a basic line chart using ECharts. It defines the x-axis data, series data, and chart options including tooltip, xAxis, yAxis, and series configurations.

LANGUAGE: javascript
CODE:
option = {
  xAxis: {
    type: 'category',
    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
  },
  yAxis: {
    type: 'value'
  },
  series: [
    {
      data: [150, 230, 224, 218, 135, 147, 260],
      type: 'line'
    }
  ]
};

----------------------------------------

TITLE: Creating Parallel Coordinates Chart for Nutrient Data with ECharts
DESCRIPTION: This snippet demonstrates how to create a parallel coordinates chart using ECharts to visualize nutrient data across different food items. It sets up multiple parallel axes for various nutrients and configures the visual encoding for the data series.

LANGUAGE: javascript
CODE:
option = {
  parallelAxis: [
    { dim: 0, name: 'Price' },
    { dim: 1, name: 'Net Weight' },
    { dim: 2, name: 'Amount' },
    {
      dim: 3,
      name: 'Score',
      type: 'category',
      data: ['Excellent', 'Good', 'OK', 'Bad']
    }
  ],
  series: {
    type: 'parallel',
    lineStyle: {
      width: 4
    },
    data: [
      [12.99, 100, 82, 'Good'],
      [9.99, 80, 77, 'OK'],
      [20, 120, 60, 'Excellent']
    ]
  }
};

----------------------------------------

TITLE: Implementing Aggregate Transform in ECharts
DESCRIPTION: This snippet demonstrates how to use the Aggregate Transform to perform data aggregation operations in ECharts. It shows the registration of the transform and its application in the chart option, including various aggregation methods like sum, count, and statistical measures.

LANGUAGE: javascript
CODE:
echarts.registerTransform(ecSimpleTransform.aggregate);

const option = {
    dataset: [{
        source: [
            ['aa', 'bb', 'cc', 'tag'],
            [12, 0.33, 5200, 'AA'],
            [21, 0.65, 7100, 'AA'],
            [51, 0.15, 1100, 'BB'],
            [71, 0.75, 9100, 'BB'],
            ...
        ]
    }, {
        transform: {
            type: 'ecSimpleTransform:aggregate',
            config: {
                resultDimensions: [
                    // by default, use the same name with `from`.
                    { from: 'aa', method: 'sum' },
                    { from: 'bb', method: 'count' },
                    { from: 'cc' }, // method by default: use the first value.
                    { from: 'dd', method: 'Q1' },
                    { from: 'tag' }
                ],
                groupBy: 'tag'
            }
        }
        // Then the result data will be:
        // [
        //     ['aa', 'bb', 'cc', 'tag'],
        //     [12, 0.33, 5200, 'AA'],
        //     [21, 0.65, 8100, 'BB'],
        //     ...
        // ]
    }],
    // ...
};

const myChart = echarts.init(dom);
myChart.setOption(option);