TITLE: Attaching GDB to Running Redis Process
DESCRIPTION: Attach GDB to a running Redis server process using its executable path and process ID. This allows for debugging and core dump generation if a crash occurs.

LANGUAGE: bash
CODE:
$ gdb /usr/local/bin/redis-server 58414

----------------------------------------

TITLE: Handling Redis client errors in production
DESCRIPTION: Set up an error listener to handle Redis client errors and prevent process crashes.

LANGUAGE: typescript
CODE:
const client = createClient({
  // ... client options
});
// Always ensure there's a listener for errors in the client to prevent process crashes due to unhandled errors
client.on('error', error => {
    console.error(`Redis client error:`, error);
});

----------------------------------------

TITLE: Basic Queue Operations with Redis Lists
DESCRIPTION: Demonstrates how to use Redis lists as a queue with FIFO (First In, First Out) behavior using LPUSH and RPOP commands.

LANGUAGE: redis
CODE:
> LPUSH bikes:repairs bike:1
(integer) 1
> LPUSH bikes:repairs bike:2
(integer) 2
> RPOP bikes:repairs
"bike:1"
> RPOP bikes:repairs
"bike:2"

----------------------------------------

TITLE: Setting and Getting Hash Fields in Redis
DESCRIPTION: Demonstrates basic hash operations using HSET to create fields and HGET/HGETALL to retrieve values. Creates a bike object with multiple attributes.

LANGUAGE: redis
CODE:
> HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972
(integer) 4
> HGET bike:1 model
"Deimos"
> HGET bike:1 price
"4972"
> HGETALL bike:1
1) "model"
2) "Deimos"
3) "brand"
4) "Ergonom"
5) "type"
6) "Enduro bikes"
7) "price"
8) "4972"

----------------------------------------

TITLE: Setting and Getting String Values
DESCRIPTION: Shows how to store and retrieve a simple string value using SET and GET commands with a bike example.

LANGUAGE: redis-cli
CODE:
SET bike:1 "Process 134"
GET bike:1

----------------------------------------

TITLE: Atomic Increment Operations on Redis Strings
DESCRIPTION: Demonstrates the use of INCR and INCRBY commands for atomic increment operations on string values used as counters.

LANGUAGE: redis
CODE:
> set total_crashes 0
OK
> incr total_crashes
(integer) 1
> incrby total_crashes 10
(integer) 11

----------------------------------------

TITLE: Working with Hash Data Types
DESCRIPTION: Demonstrates using Redis hashes to store and retrieve object properties, including setting multiple fields with HSET and retrieving individual or all fields with HGET and HGETALL.

LANGUAGE: redis-cli
CODE:
> HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972
(integer) 4
> HGET bike:1 model
"Deimos"
> HGET bike:1 price
"4972"
> HGETALL bike:1
1) "model"
2) "Deimos"
3) "brand"
4) "Ergonom"
5) "type"
6) "Enduro bikes"
7) "price"
8) "4972"

----------------------------------------

TITLE: Setting and Retrieving Hash Fields in Redis
DESCRIPTION: Example demonstrates how to set single and multiple field-value pairs in a Redis hash using HSET, and retrieve values using HGET and HGETALL commands. Shows both single field assignment and multiple field assignments in one command.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HGET myhash field1
HSET myhash field2 "Hi" field3 "World"
HGET myhash field2
HGET myhash field3
HGETALL myhash

----------------------------------------

TITLE: Implementing a Lock with Redis SET Command
DESCRIPTION: A Lua script that implements a secure unlock mechanism for a distributed lock system using Redis. The script checks if the stored value matches the provided token before deleting the key.

LANGUAGE: lua
CODE:
if redis.call("get",KEYS[1]) == ARGV[1]
then
    return redis.call("del",KEYS[1])
else
    return 0
end

----------------------------------------

TITLE: Retrieving Hash Fields Using Redis HGETALL
DESCRIPTION: Example showing how to set hash fields using HSET and retrieve all field-value pairs using HGETALL. The command returns each field name followed by its corresponding value, making the reply length twice the size of the hash.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HGETALL myhash

----------------------------------------

TITLE: Single Instance Lock Acquisition Command - Redis
DESCRIPTION: Redis SET command to acquire a distributed lock on a single instance. Uses NX flag to only set if key doesn't exist and PX flag to set expiration in milliseconds.

LANGUAGE: shell
CODE:
SET resource_name my_random_value NX PX 30000

----------------------------------------

TITLE: Connecting to Redis Server
DESCRIPTION: Demonstrates how to connect to a Redis server running on localhost using the default port 6379 via redis-cli.

LANGUAGE: redis-cli
CODE:
redis-cli -h 127.0.0.1 -p 6379

----------------------------------------

TITLE: Redis TLS-Only Port Configuration
DESCRIPTION: Configuration to disable non-TLS port and enable TLS on the default Redis port 6379.

LANGUAGE: text
CODE:
port 0
tls-port 6379

----------------------------------------

TITLE: Storing and retrieving a map in Redis
DESCRIPTION: Use hSet to store a hash and hGetAll to retrieve all fields and values.

LANGUAGE: javascript
CODE:
await client.hSet('user-session:123', {
    name: 'John',
    surname: 'Smith',
    company: 'Redis',
    age: 29
})

let userSession = await client.hGetAll('user-session:123');
console.log(JSON.stringify(userSession, null, 2));
/*
{
  "surname": "Smith",
  "name": "John",
  "company": "Redis",
  "age": "29"
}
 */

----------------------------------------

TITLE: Setting and Getting Keys in Redis CLI
DESCRIPTION: Demonstrates basic usage of the SET command to store a string value and retrieve it using GET. Also shows how to set a key with an expiration time.

LANGUAGE: cli
CODE:
SET mykey "Hello"
GET mykey

SET anotherkey "will expire in a minute" EX 60

----------------------------------------

TITLE: Testing Redis Connection with CLI
DESCRIPTION: Basic Redis connectivity test using redis-cli to send a PING command to the Redis server running on localhost:6379.

LANGUAGE: bash
CODE:
$ redis-cli ping
PONG

----------------------------------------

TITLE: ACL User Management
DESCRIPTION: Examples of creating and managing ACL users with various permissions

LANGUAGE: redis
CODE:
ACL SETUSER alice
ACL SETUSER alice on >p1pp0 ~cached:* +get
ACL LIST
ACL GETUSER alice

----------------------------------------

TITLE: Executing a Basic Redis Transaction
DESCRIPTION: This snippet demonstrates how to use MULTI to start a transaction, queue commands, and execute them with EXEC. It increments two keys atomically.

LANGUAGE: redis
CODE:
> MULTI
OK
> INCR foo
QUEUED
> INCR bar
QUEUED
> EXEC
1) (integer) 1
2) (integer) 1

----------------------------------------

TITLE: Adding Elements to Redis Sorted Set
DESCRIPTION: Demonstrates how to add elements to a Redis sorted set using the ZADD command. Each element is associated with a score, which determines its order in the set.

LANGUAGE: redis
CODE:
> ZADD racer_scores 10 "Norem"
(integer) 1
> ZADD racer_scores 12 "Castilla"
(integer) 1
> ZADD racer_scores 8 "Sam-Bodden" 10 "Royce" 6 "Ford" 14 "Prickett"
(integer) 4

----------------------------------------

TITLE: Connecting to Redis with TLS in Go
DESCRIPTION: Establish a secure TLS connection to a Redis database using the go-redis client. This snippet demonstrates loading certificates, creating a TLS configuration, and connecting with authentication.

LANGUAGE: go
CODE:
// Load client cert
cert, err := tls.LoadX509KeyPair("redis_user.crt", "redis_user_private.key")
if err != nil {
    log.Fatal(err)
}

// Load CA cert
caCert, err := os.ReadFile("redis_ca.pem")
if err != nil {
    log.Fatal(err)
}
caCertPool := x509.NewCertPool()
caCertPool.AppendCertsFromPEM(caCert)

client := redis.NewClient(&redis.Options{
    Addr:     "my-redis.cloud.redislabs.com:6379",
    Username: "default", // use your Redis user. More info https://redis.io/docs/management/security/acl/
    Password: "secret", // use your Redis password
    TLSConfig: &tls.Config{
        MinVersion:   tls.VersionTLS12,
        Certificates: []tls.Certificate{cert},
        RootCAs:      caCertPool,
    },
})

//send SET command
err = client.Set(ctx, "foo", "bar", 0).Err()
if err != nil {
    panic(err)
}

//send GET command and print the value
val, err := client.Get(ctx, "foo").Result()
if err != nil {
    panic(err)
}
fmt.Println("foo", val)

----------------------------------------

TITLE: Retrieving Elements from Redis Sorted Set
DESCRIPTION: Shows how to retrieve elements from a Redis sorted set using ZRANGE and ZREVRANGE commands. ZRANGE returns elements in ascending order, while ZREVRANGE returns them in descending order.

LANGUAGE: redis
CODE:
> ZRANGE racer_scores 0 -1
1) "Ford"
2) "Sam-Bodden"
3) "Norem"
4) "Royce"
5) "Castilla"
6) "Prickett"
> ZREVRANGE racer_scores 0 -1
1) "Prickett"
2) "Castilla"
3) "Royce"
4) "Norem"
5) "Sam-Bodden"
6) "Ford"

----------------------------------------

TITLE: Adding Entries with Maximum Length in Redis Stream
DESCRIPTION: Adds entries to the 'race:italy' stream while maintaining a maximum length of 2

LANGUAGE: redis
CODE:
> XADD race:italy MAXLEN 2 * rider Jones
"1692633189161-0"
> XADD race:italy MAXLEN 2 * rider Wood
"1692633198206-0"
> XADD race:italy MAXLEN 2 * rider Henshaw
"1692633208557-0"
> XLEN race:italy
(integer) 2
> XRANGE race:italy - +
1) 1) "1692633198206-0"
   2) 1) "rider"
      2) "Wood"
2) 1) "1692633208557-0"
   2) 1) "rider"
      2) "Henshaw"

----------------------------------------

TITLE: Basic Redis CLI Command Execution
DESCRIPTION: Example of executing Redis commands via CLI in non-interactive mode, showing typed response handling

LANGUAGE: shell
CODE:
$ redis-cli INCR mycounter
(integer) 7

----------------------------------------

TITLE: Retrieving Elements with Scores from Redis Sorted Set
DESCRIPTION: Demonstrates how to retrieve elements along with their scores from a Redis sorted set using the ZRANGE command with the WITHSCORES option.

LANGUAGE: redis
CODE:
> ZRANGE racer_scores 0 -1 withscores
 1) "Ford"
 2) "6"
 3) "Sam-Bodden"
 4) "8"
 5) "Norem"
 6) "10"
 7) "Royce"
 8) "10"
 9) "Castilla"
10) "12"
11) "Prickett"
12) "14"

----------------------------------------

TITLE: Basic Sentinel Configuration
DESCRIPTION: Example configuration file showing basic monitoring setup for Redis masters with quorum, timeouts and sync settings

LANGUAGE: redis
CODE:
sentinel monitor mymaster 127.0.0.1 6379 2
sentinel down-after-milliseconds mymaster 60000
sentinel failover-timeout mymaster 180000
sentinel parallel-syncs mymaster 1

sentinel monitor resque 192.168.1.3 6380 4
sentinel down-after-milliseconds resque 10000
sentinel failover-timeout resque 180000
sentinel parallel-syncs resque 5

----------------------------------------

TITLE: Connecting to Redis with TLS in production
DESCRIPTION: Configure a secure connection to Redis using TLS with custom certificates and keys.

LANGUAGE: javascript
CODE:
const client = createClient({
    username: 'default', // use your Redis user. More info https://redis.io/docs/management/security/acl/
    password: 'secret', // use your password here
    socket: {
        host: 'my-redis.cloud.redislabs.com',
        port: 6379,
        tls: true,
        key: readFileSync('./redis_user_private.key'),
        cert: readFileSync('./redis_user.crt'),
        ca: [readFileSync('./redis_ca.pem')]
    }
});

client.on('error', (err) => console.log('Redis Client Error', err));

await client.connect();

await client.set('foo', 'bar');
const value = await client.get('foo');
console.log(value) // returns 'bar'

await client.disconnect();

----------------------------------------

TITLE: Updating Scores in Redis Sorted Set Leaderboard
DESCRIPTION: Shows how to update scores in a Redis sorted set leaderboard using ZADD for direct updates and ZINCRBY for incremental updates.

LANGUAGE: redis
CODE:
> ZADD racer_scores 100 "Wood"
(integer) 1
> ZADD racer_scores 100 "Henshaw"
(integer) 1
> ZADD racer_scores 150 "Henshaw"
(integer) 0
> ZINCRBY racer_scores 50 "Wood"
"150"
> ZINCRBY racer_scores 50 "Henshaw"
"200"

----------------------------------------

TITLE: Lock Release with GETSET - Redis CLI
DESCRIPTION: Demonstrates the safe lock release pattern using GETSET to handle potential deadlock scenarios. This approach prevents race conditions when multiple clients attempt to acquire an expired lock.

LANGUAGE: cli
CODE:
GETSET lock.foo <current Unix timestamp + lock timeout + 1>

----------------------------------------

TITLE: Connecting to Redis and Performing Basic Operations in Python
DESCRIPTION: Connect to a local Redis instance, set and retrieve simple string and dict values.

LANGUAGE: python
CODE:
r = redis.Redis(host='localhost', port=6379, decode_responses=True)

LANGUAGE: python
CODE:
r.set('foo', 'bar')
# True
r.get('foo')
# bar

LANGUAGE: python
CODE:
r.hset('user-session:123', mapping={
    'name': 'John',
    "surname": 'Smith',
    "company": 'Redis',
    "age": 29
})
# True

r.hgetall('user-session:123')
# {'surname': 'Smith', 'name': 'John', 'company': 'Redis', 'age': '29'}

----------------------------------------

TITLE: Enabling Opt-in Caching in Redis
DESCRIPTION: This snippet demonstrates how to enable opt-in caching in Redis, where clients explicitly specify which keys to cache. It shows the commands to enable tracking with the OPTIN option and how to cache specific keys.

LANGUAGE: redis
CODE:
CLIENT TRACKING on REDIRECT 1234 OPTIN

CLIENT CACHING YES
+OK
GET foo
"bar"

----------------------------------------

TITLE: Searching Nearby Locations in Redis Geospatial Index
DESCRIPTION: This example shows how to use the GEOSEARCH command to find all locations within a 5 kilometer radius of a given point. The command returns the matching locations along with their distances from the search point. It demonstrates searching within the 'bikes:rentable' index created in the previous example.

LANGUAGE: redis
CODE:
> GEOSEARCH bikes:rentable FROMLONLAT -122.2612767 37.7936847 BYRADIUS 5 km WITHDIST
1) 1) "station:1"
   2) "1.8523"
2) 1) "station:2"
   2) "1.4979"
3) 1) "station:3"
   2) "2.2441"

----------------------------------------

TITLE: Finding Intersection of Redis Sets
DESCRIPTION: Demonstrates the SINTER command to find common elements between multiple Redis sets.

LANGUAGE: redis
CODE:
> SINTER bikes:racing:france bikes:racing:usa
1) "bike:1"

----------------------------------------

TITLE: Incrementing and Decrementing Float Values in Redis Hash Fields
DESCRIPTION: This snippet demonstrates the usage of HINCRBYFLOAT command in Redis. It shows how to increment and decrement floating-point values stored in hash fields, including handling of scientific notation. The command operates on a specified field of a hash stored at a given key.

LANGUAGE: cli
CODE:
HSET mykey field 10.50
HINCRBYFLOAT mykey field 0.1
HINCRBYFLOAT mykey field -5
HSET mykey field 5.0e3
HINCRBYFLOAT mykey field 2.0e2

----------------------------------------

TITLE: Basic Redis Replica Configuration
DESCRIPTION: Configures a Redis instance as a replica of a master node by specifying the master's IP address and port.

LANGUAGE: conf
CODE:
replicaof 192.168.1.1 6379

----------------------------------------

TITLE: Setting and Getting Redis String Values
DESCRIPTION: Demonstrates how to set and retrieve string values in Redis using the SET and GET commands.

LANGUAGE: redis
CODE:
> SET bike:1 Deimos
OK
> GET bike:1
"Deimos"

----------------------------------------

TITLE: Creating a Redis Stream Consumer Group
DESCRIPTION: Creates a consumer group named 'france_riders' for the stream 'race:france', starting from the latest message ($)

LANGUAGE: redis
CODE:
> XGROUP CREATE race:france france_riders $
OK

----------------------------------------

TITLE: Indexing and Querying JSON Documents in Redis using Python
DESCRIPTION: Create an index for JSON documents, add test data, and perform various queries and aggregations using redis-py.

LANGUAGE: python
CODE:
import redis
from redis.commands.json.path import Path
import redis.commands.search.aggregation as aggregations
import redis.commands.search.reducers as reducers
from redis.commands.search.field import TextField, NumericField, TagField
from redis.commands.search.indexDefinition import IndexDefinition, IndexType
from redis.commands.search.query import NumericFilter, Query

r = redis.Redis(host='localhost', port=6379)

user1 = {
    "name": "Paul John",
    "email": "paul.john@example.com",
    "age": 42,
    "city": "London"
}
user2 = {
    "name": "Eden Zamir",
    "email": "eden.zamir@example.com",
    "age": 29,
    "city": "Tel Aviv"
}
user3 = {
    "name": "Paul Zamir",
    "email": "paul.zamir@example.com",
    "age": 35,
    "city": "Tel Aviv"
}

schema = (
    TextField("$.name", as_name="name"), 
    TagField("$.city", as_name="city"), 
    NumericField("$.age", as_name="age")
)

rs = r.ft("idx:users")
rs.create_index(
    schema,
    definition=IndexDefinition(
        prefix=["user:"], index_type=IndexType.JSON
    )
)
# b'OK'

r.json().set("user:1", Path.root_path(), user1)
r.json().set("user:2", Path.root_path(), user2)
r.json().set("user:3", Path.root_path(), user3)

res = rs.search(
    Query("Paul @age:[30 40]")
)
# Result{1 total, docs: [Document {'id': 'user:3', 'payload': None, 'json': '{"name":"Paul Zamir","email":"paul.zamir@example.com","age":35,"city":"Tel Aviv"}'}]}

rs.search(
    Query("Paul").return_field("$.city", as_field="city")
).docs
# [Document {'id': 'user:1', 'payload': None, 'city': 'London'}, Document {'id': 'user:3', 'payload': None, 'city': 'Tel Aviv'}]

req = aggregations.AggregateRequest("*").group_by('@city', reducers.count().alias('count'))
print(rs.aggregate(req).rows)
# [[b'city', b'Tel Aviv', b'count', b'2'], [b'city', b'London', b'count', b'1']]

----------------------------------------

TITLE: Implementing ZPOP using WATCH in Redis
DESCRIPTION: This snippet shows how to use WATCH to create a new atomic operation (ZPOP) that removes and returns the lowest-scored element from a sorted set.

LANGUAGE: redis
CODE:
WATCH zset
element = ZRANGE zset 0 0
MULTI
ZREM zset element
EXEC

----------------------------------------

TITLE: Multiple Field Retrieval with HMGET in Redis
DESCRIPTION: Shows how to retrieve multiple hash fields in a single operation using HMGET, including handling of non-existent fields which return nil.

LANGUAGE: redis
CODE:
> HMGET bike:1 model price no-such-field
1) "Deimos"
2) "4972"
3) (nil)

----------------------------------------

TITLE: Removing Set Members with Redis SREM Command
DESCRIPTION: Demonstrates how to remove members from a Redis set using SREM command. The example shows adding three members to a set, removing one existing member ('one') and attempting to remove a non-existent member ('four'). The SMEMBERS command is then used to verify the remaining set contents.

LANGUAGE: cli
CODE:
SADD myset "one"
SADD myset "two"
SADD myset "three"
SREM myset "one"
SREM myset "four"
SMEMBERS myset

----------------------------------------

TITLE: ACL User Creation with Selectors
DESCRIPTION: Creates a user with selector-based permissions, allowing GET on all keys and SET only on keys matching 'app1*' pattern. Demonstrates Redis 7.0's selector feature.

LANGUAGE: redis
CODE:
ACL SETUSER virginia on +GET allkeys (+SET ~app1*)

----------------------------------------

TITLE: Basic Redis Key Operations
DESCRIPTION: Demonstrates fundamental Redis commands for checking key existence and deletion using EXISTS and DEL commands.

LANGUAGE: redis
CODE:
> set mykey hello
OK
> exists mykey
(integer) 1
> del mykey
(integer) 1
> exists mykey
(integer) 0

----------------------------------------

TITLE: Retrieving Key Values with Redis GET Command (CLI)
DESCRIPTION: This snippet demonstrates the usage of the Redis GET command in the command-line interface. It shows examples of retrieving non-existent keys, setting a key-value pair, and then retrieving the set value.

LANGUAGE: cli
CODE:
GET nonexisting
SET mykey "Hello"
GET mykey

----------------------------------------

TITLE: Using RPOP Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the RPOP command in Redis CLI. It shows pushing elements to a list, popping single and multiple elements, and checking the remaining list contents.

LANGUAGE: cli
CODE:
RPUSH mylist "one" "two" "three" "four" "five"
RPOP mylist
RPOP mylist 2
LRANGE mylist 0 -1

----------------------------------------

TITLE: List Trimming in Redis
DESCRIPTION: Shows how to limit list length using LTRIM command to keep only specified range of elements.

LANGUAGE: redis
CODE:
> RPUSH bikes:repairs bike:1 bike:2 bike:3 bike:4 bike:5
(integer) 5
> LTRIM bikes:repairs 0 2
OK
> LRANGE bikes:repairs 0 -1
1) "bike:1"
2) "bike:2"
3) "bike:3"

----------------------------------------

TITLE: Connecting to a Redis Cluster in Python
DESCRIPTION: Use RedisCluster to connect to a Redis cluster, set and retrieve values.

LANGUAGE: python
CODE:
from redis.cluster import RedisCluster

rc = RedisCluster(host='localhost', port=16379)

print(rc.get_nodes())
# [[host=127.0.0.1,port=16379,name=127.0.0.1:16379,server_type=primary,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=16379,db=0>>>], ...

rc.set('foo', 'bar')
# True

rc.get('foo')
# b'bar'

----------------------------------------

TITLE: Configuring Redis as a Cache with LRU Eviction
DESCRIPTION: Provides a configuration example for using Redis as a cache with a maximum memory limit and LRU eviction policy. This setup allows Redis to automatically manage key expiration without explicit TTL settings.

LANGUAGE: conf
CODE:
maxmemory 2mb
maxmemory-policy allkeys-lru

----------------------------------------

TITLE: Implementing Optimistic Locking with WATCH in Redis
DESCRIPTION: This example demonstrates how to use WATCH for optimistic locking in Redis transactions. It shows a pattern for atomically incrementing a value.

LANGUAGE: redis
CODE:
WATCH mykey
val = GET mykey
val = val + 1
MULTI
SET mykey $val
EXEC

----------------------------------------

TITLE: BLPOP Example with List Operations
DESCRIPTION: Complete example showing deletion, pushing elements to a list, and then performing a BLPOP operation.

LANGUAGE: redis
CODE:
redis> DEL list1 list2
(integer) 0
redis> RPUSH list1 a b c
(integer) 3
redis> BLPOP list1 list2 0
1) "list1"
2) "a"

----------------------------------------

TITLE: Basic ACL User Creation in Redis
DESCRIPTION: Creates a new user 'virginia' with basic permissions to use SET command on all keys. The user is active and can access any key in the system.

LANGUAGE: redis
CODE:
ACL SETUSER virginia on allkeys +set

----------------------------------------

TITLE: Redis TLS Certificate Configuration
DESCRIPTION: Configuration directives for setting up TLS certificates, keys, and DH parameters in Redis.

LANGUAGE: text
CODE:
tls-cert-file /path/to/redis.crt
tls-key-file /path/to/redis.key
tls-ca-cert-file /path/to/ca.crt
tls-dh-params-file /path/to/redis.dh

----------------------------------------

TITLE: Appending Fixed-Size Samples for Time Series in Redis
DESCRIPTION: Shows how to use the APPEND command to store fixed-size samples as a time series. This example appends two temperature readings to a key named 'ts'.

LANGUAGE: cli
CODE:
APPEND ts "0043"
APPEND ts "0035"
GETRANGE ts 0 3
GETRANGE ts 4 7

----------------------------------------

TITLE: Adding Locations to Redis Geospatial Index
DESCRIPTION: This snippet demonstrates how to use the GEOADD command to add multiple locations (bike rental stations) to a Redis geospatial index named 'bikes:rentable'. The command takes longitude and latitude coordinates followed by a unique identifier for each location.

LANGUAGE: redis
CODE:
> GEOADD bikes:rentable -122.27652 37.805186 station:1
(integer) 1
> GEOADD bikes:rentable -122.2674626 37.8062344 station:2
(integer) 1
> GEOADD bikes:rentable -122.2469854 37.8104049 station:3
(integer) 1

----------------------------------------

TITLE: Creating a Completion Index in Redis
DESCRIPTION: Illustrates how to implement a basic autocompletion feature using a lexicographical index.

LANGUAGE: redis
CODE:
ZADD myindex 0 banana:1

----------------------------------------

TITLE: Installing redis-py Client for Redis in Python
DESCRIPTION: Install the redis-py client using pip. For faster performance, install with hiredis support.

LANGUAGE: bash
CODE:
pip install redis

LANGUAGE: bash
CODE:
pip install redis[hiredis]

----------------------------------------

TITLE: Creating a new post in Redis
DESCRIPTION: Generate post ID, store post data, and add to user timelines.

LANGUAGE: PHP
CODE:
include("retwis.php");

if (!isLoggedIn() || !gt("status")) {
    header("Location:index.php");
    exit;
}

$r = redisLink();
$postid = $r->incr("next_post_id");
$status = str_replace("\n"," ",gt("status"));
$r->hmset("post:$postid","user_id",$User['id'],"time",time(),"body",$status);
$followers = $r->zrange("followers:".$User['id'],0,-1);
$followers[] = $User['id'];

foreach($followers as $fid) {
    $r->lpush("posts:$fid",$postid);
}
$r->lpush("timeline",$postid);
$r->ltrim("timeline",0,1000);

header("Location: index.php");

----------------------------------------

TITLE: Retrieving Element Rank in Redis Sorted Set
DESCRIPTION: Shows how to get the rank of an element in a Redis sorted set using ZRANK for ascending order and ZREVRANK for descending order.

LANGUAGE: redis
CODE:
> ZRANK racer_scores "Norem"
(integer) 0
> ZREVRANK racer_scores "Norem"
(integer) 3

----------------------------------------

TITLE: Querying Redis Cluster Shards
DESCRIPTION: This example demonstrates the usage and output of the CLUSTER SHARDS command in Redis. It returns an array of shards, each containing information about slots and nodes. The command provides detailed attributes for each node, including ID, endpoint, IP, port, role, replication offset, and health status.

LANGUAGE: redis
CODE:
> CLUSTER SHARDS
1) 1) "slots"
   2) 1) (integer) 0
      2) (integer) 5460
   3) "nodes"
   4) 1)  1) "id"
          2) "e10b7051d6bf2d5febd39a2be297bbaea6084111"
          3) "port"
          4) (integer) 30001
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "master"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"
      2)  1) "id"
          2) "1901f5962d865341e81c85f9f596b1e7160c35ce"
          3) "port"
          4) (integer) 30006
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "replica"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"
2) 1) "slots"
   2) 1) (integer) 10923
      2) (integer) 16383
   3) "nodes"
   4) 1)  1) "id"
          2) "fd20502fe1b32fc32c15b69b0a9537551f162f1f"
          3) "port"
          4) (integer) 30003
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "master"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"
      2)  1) "id"
          2) "6daa25c08025a0c7e4cc0d1ab255949ce6cee902"
          3) "port"
          4) (integer) 30005
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "replica"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"
3) 1) "slots"
   2) 1) (integer) 5461
      2) (integer) 10922
   3) "nodes"
   4) 1)  1) "id"
          2) "a4a3f445ead085eb3eb9ee7d8c644ec4481ec9be"
          3) "port"
          4) (integer) 30002
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "master"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"
      2)  1) "id"
          2) "da6d5847aa019e9b9d2a8aa24a75f856fd3456cc"
          3) "port"
          4) (integer) 30004
          5) "ip"
          6) "127.0.0.1"
          7) "endpoint"
          8) "127.0.0.1"
          9) "role"
         10) "replica"
         11) "replication-offset"
         12) (integer) 72156
         13) "health"
         14) "online"

----------------------------------------

TITLE: Redis Master Authentication Configuration
DESCRIPTION: Configures authentication credentials for a replica to connect to a password-protected master node.

LANGUAGE: conf
CODE:
masterauth <password>

----------------------------------------

TITLE: Adding Entry with Explicit Milliseconds in Redis Stream
DESCRIPTION: Adds an entry to the 'race:usa' stream with an explicit milliseconds part of the ID

LANGUAGE: redis
CODE:
> XADD race:usa 0-* racer Prickett
0-3

----------------------------------------

TITLE: Demonstrating Redis KEYS Command Usage with CLI
DESCRIPTION: This snippet shows how to use the Redis KEYS command to search for keys matching different patterns. It first sets multiple key-value pairs using MSET, then demonstrates searching with various patterns.

LANGUAGE: cli
CODE:
MSET firstname Jack lastname Stuntman age 35
KEYS *name*
KEYS a??
KEYS *

----------------------------------------

TITLE: Basic Redis Connection Setup
DESCRIPTION: Establish basic connection to Redis server running on localhost and get database reference

LANGUAGE: csharp
CODE:
using NRedisStack;
using NRedisStack.RedisStackCommands;
using StackExchange.Redis;
//...
ConnectionMultiplexer redis = ConnectionMultiplexer.Connect("localhost");
IDatabase db = redis.GetDatabase();

----------------------------------------

TITLE: Reading from Redis Stream Using Consumer Group
DESCRIPTION: Reads entries from the 'race:italy' stream using a consumer group and consumer name

LANGUAGE: redis
CODE:
> XREADGROUP GROUP italy_riders Alice COUNT 1 STREAMS race:italy >
1) 1) "race:italy"
   2) 1) 1) "1692632639151-0"
         2) 1) "rider"
            2) "Castilla"

----------------------------------------

TITLE: Getting Pending Messages Info in Redis Stream
DESCRIPTION: Retrieves information about pending messages in the 'italy_riders' consumer group

LANGUAGE: redis
CODE:
> XPENDING race:italy italy_riders
1) (integer) 2
2) "1692632647899-0"
3) "1692632662819-0"
4) 1) 1) "Bob"
      2) "2"

----------------------------------------

TITLE: Incrementing Floating-Point Values with INCRBYFLOAT in Redis CLI
DESCRIPTION: This snippet demonstrates the usage of the INCRBYFLOAT command in Redis CLI. It shows how to increment and decrement floating-point values, including handling of exponential notation. The command operates on string representations of numbers and returns the new value after the operation.

LANGUAGE: cli
CODE:
SET mykey 10.50
INCRBYFLOAT mykey 0.1
INCRBYFLOAT mykey -5
SET mykey 5.0e3
INCRBYFLOAT mykey 2.0e2

----------------------------------------

TITLE: Simplified Redis Connection with JedisPooled
DESCRIPTION: Simplified connection example using JedisPooled for automatic connection management

LANGUAGE: java
CODE:
JedisPooled jedis = new JedisPooled("localhost", 6379);
jedis.set("foo", "bar");
System.out.println(jedis.get("foo")); // prints "bar"

----------------------------------------

TITLE: Displaying Redis Cluster Node Configuration with CLUSTER NODES
DESCRIPTION: Example output of the CLUSTER NODES command, showing the serialized format of cluster node information including node IDs, addresses, flags, and slot assignments.

LANGUAGE: text
CODE:
07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,hostname4 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected
67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,hostname2 master - 0 1426238316232 2 connected 5461-10922
292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,hostname3 master - 0 1426238318243 3 connected 10923-16383
6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,hostname5 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected
824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,hostname6 slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected
e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,hostname1 myself,master - 0 0 1 connected 0-5460

----------------------------------------

TITLE: Trimming Redis Stream
DESCRIPTION: Trims the 'race:italy' stream to a maximum of 10 entries

LANGUAGE: redis
CODE:
> XTRIM race:italy MAXLEN 10
(integer) 0

----------------------------------------

TITLE: Basic Redis Connection with JedisPool
DESCRIPTION: Example of connecting to Redis using JedisPool, demonstrating basic string and hash operations

LANGUAGE: java
CODE:
JedisPool pool = new JedisPool("localhost", 6379);

try (Jedis jedis = pool.getResource()) {
    // Store & Retrieve a simple string
    jedis.set("foo", "bar");
    System.out.println(jedis.get("foo")); // prints bar
    
    // Store & Retrieve a HashMap
    Map<String, String> hash = new HashMap<>();;
    hash.put("name", "John");
    hash.put("surname", "Smith");
    hash.put("company", "Redis");
    hash.put("age", "29");
    jedis.hset("user-session:123", hash);
    System.out.println(jedis.hgetAll("user-session:123"));
}

----------------------------------------

TITLE: Checking Set Membership in Redis
DESCRIPTION: Shows how to use SISMEMBER to check if elements are present in a Redis set.

LANGUAGE: redis
CODE:
> SISMEMBER bikes:racing:usa bike:1
(integer) 1
> SISMEMBER bikes:racing:usa bike:2
(integer) 0

----------------------------------------

TITLE: Redis Cluster Connection with Lettuce
DESCRIPTION: Example of connecting to a Redis Cluster using Lettuce, including authentication

LANGUAGE: java
CODE:
import io.lettuce.core.RedisURI;
import io.lettuce.core.cluster.RedisClusterClient;
import io.lettuce.core.cluster.api.StatefulRedisClusterConnection;
import io.lettuce.core.cluster.api.async.RedisAdvancedClusterAsyncCommands;

// ...

RedisURI redisUri = RedisURI.Builder.redis("localhost").withPassword("authentication").build();

RedisClusterClient clusterClient = RedisClusterClient.create(redisUri);
StatefulRedisClusterConnection<String, String> connection = clusterClient.connect();
RedisAdvancedClusterAsyncCommands<String, String> commands = connection.async();

// ...

connection.close();
clusterClient.shutdown();

----------------------------------------

TITLE: Setting and Getting Bits in Redis Bitmap
DESCRIPTION: Demonstrates how to set and get individual bits in a Redis bitmap using SETBIT and GETBIT commands. The example uses a scenario of tracking cyclist check-ins during a race.

LANGUAGE: redis
CODE:
> SETBIT pings:2024-01-01-00:00 123 1
(integer) 0
> GETBIT pings:2024-01-01-00:00 123
1
> GETBIT pings:2024-01-01-00:00 456
0

----------------------------------------

TITLE: Incrementing Hash Field Values with Redis HINCRBY
DESCRIPTION: Demonstrates how to use the HINCRBY command to perform both increment and decrement operations on a hash field. Shows setting initial value with HSET and then modifying it with positive and negative increments.

LANGUAGE: cli
CODE:
HSET myhash field 5
HINCRBY myhash field 1
HINCRBY myhash field -1
HINCRBY myhash field -10

----------------------------------------

TITLE: Connecting to Redis with TLS in Python
DESCRIPTION: Connect to a production Redis instance using TLS, including username, password, and SSL certificate files.

LANGUAGE: python
CODE:
import redis

r = redis.Redis(
    host="my-redis.cloud.redislabs.com", port=6379,
    username="default", # use your Redis user. More info https://redis.io/docs/management/security/acl/
    password="secret", # use your Redis password
    ssl=True,
    ssl_certfile="./redis_user.crt",
    ssl_keyfile="./redis_user_private.key",
    ssl_ca_certs="./redis_ca.pem",
)
r.set('foo', 'bar')
# True

r.get('foo')
# b'bar'

----------------------------------------

TITLE: Enabling Tracking and Retrieving Data in Redis RESP2 Mode
DESCRIPTION: This snippet demonstrates how to enable client tracking, redirect invalidation messages, and retrieve data using two separate connections in Redis RESP2 mode. It shows the process of setting up an invalidation connection and a data connection.

LANGUAGE: redis
CODE:
(Connection 1 -- used for invalidations)
CLIENT ID
:4
SUBSCRIBE __redis__:invalidate
*3
$9
subscribe
$20
__redis__:invalidate
:1

(Connection 2 -- data connection)
CLIENT TRACKING on REDIRECT 4
+OK

GET foo
$3
bar

----------------------------------------

TITLE: Rate Limiter Implementation - Version 1
DESCRIPTION: First implementation of rate limiting pattern using Redis MULTI/EXEC to ensure atomic operations. Limits API calls to 10 requests per second per IP address.

LANGUAGE: pseudocode
CODE:
FUNCTION LIMIT_API_CALL(ip)
ts = CURRENT_UNIX_TIME()
keyname = ip+":"+ts
MULTI
    INCR(keyname)
    EXPIRE(keyname,10)
EXEC
current = RESPONSE_OF_INCR_WITHIN_MULTI
IF current > 10 THEN
    ERROR "too many requests per second"
ELSE
    PERFORM_API_CALL()
END

----------------------------------------

TITLE: Retrieving Hash Field Values with Redis HGET
DESCRIPTION: Demonstrates setting a hash field value with HSET and retrieving values using HGET. Shows both successful retrieval of an existing field and attempting to get a non-existent field.

LANGUAGE: cli
CODE:
HSET myhash field1 "foo"
HGET myhash field1
HGET myhash field2

----------------------------------------

TITLE: Connecting to Redis Using Connection String in Go
DESCRIPTION: Connect to a Redis server using a connection string with the go-redis client. This method allows specifying connection details in a URL format.

LANGUAGE: go
CODE:
opt, err := redis.ParseURL("redis://<user>:<pass>@localhost:6379/<db>")
if err != nil {
	panic(err)
}

client := redis.NewClient(opt)

----------------------------------------

TITLE: Removing Elements from Redis Sorted Set
DESCRIPTION: Demonstrates how to remove elements from a Redis sorted set using ZREM for individual elements and ZREMRANGEBYSCORE for a range of scores.

LANGUAGE: redis
CODE:
> ZREM racer_scores "Castilla"
(integer) 1
> ZREMRANGEBYSCORE racer_scores -inf 9
(integer) 2
> ZRANGE racer_scores 0 -1
1) "Norem"
2) "Royce"
3) "Prickett"

----------------------------------------

TITLE: Storing and Retrieving String in Redis with Go
DESCRIPTION: Demonstrate how to store and retrieve a simple string value in Redis using the go-redis client. This snippet shows setting a key-value pair and then retrieving it.

LANGUAGE: go
CODE:
ctx := context.Background()

err := client.Set(ctx, "foo", "bar", 0).Err()
if err != nil {
    panic(err)
}

val, err := client.Get(ctx, "foo").Result()
if err != nil {
    panic(err)
}
fmt.Println("foo", val)

----------------------------------------

TITLE: Redis Pattern-Based Channel Subscription
DESCRIPTION: Shows how to use pattern matching in Redis pub/sub to subscribe to multiple channels using glob-style patterns.

LANGUAGE: bash
CODE:
PSUBSCRIBE news.*

----------------------------------------

TITLE: Deleting Multiple Redis Keys Using DEL Command
DESCRIPTION: Example shows setting two keys with values and then attempting to delete three keys including a non-existent one. The DEL command will remove key1 and key2 while silently ignoring the non-existent key3.

LANGUAGE: cli
CODE:
SET key1 "Hello"
SET key2 "World"
DEL key1 key2 key3

----------------------------------------

TITLE: Implementing a Navigation Session Pattern with Redis
DESCRIPTION: This code snippet shows how to use Redis to model a user's navigation session, where page views are recorded only if they occur within 60 seconds of each other. It uses MULTI/EXEC for atomic operations.

LANGUAGE: cli
CODE:
MULTI
RPUSH pagewviews.user:<userid> http://.....
EXPIRE pagewviews.user:<userid> 60
EXEC

----------------------------------------

TITLE: Demonstrating Redis GEOSEARCHSTORE with Geospatial Operations
DESCRIPTION: Shows a complete example of using GEOSEARCHSTORE with several related geospatial commands. Demonstrates adding geographical points, searching within a bounding box, storing results with different options, and retrieving stored values. Includes examples of storing both coordinates and distances.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEOADD Sicily 12.758489 38.788135 "edge1"   17.241510 38.788135 "edge2" 
GEOSEARCHSTORE key1 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3
GEOSEARCH key1 FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST WITHHASH
GEOSEARCHSTORE key2 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3 STOREDIST
ZRANGE key2 0 -1 WITHSCORES

----------------------------------------

TITLE: Multiple String Operations in Redis
DESCRIPTION: Illustrates the use of MSET and MGET commands to set and retrieve multiple string values in a single operation.

LANGUAGE: redis
CODE:
> mset bike:1 "Deimos" bike:2 "Ares" bike:3 "Vanth"
OK
> mget bike:1 bike:2 bike:3
1) "Deimos"
2) "Ares"
3) "Vanth"

----------------------------------------

TITLE: Using COMMAND GETKEYS in Redis CLI
DESCRIPTION: Examples demonstrating how to use COMMAND GETKEYS to extract key names from different Redis commands including MSET, EVAL, and SORT operations. Shows how the command works with various command types and structures.

LANGUAGE: cli
CODE:
COMMAND GETKEYS MSET a b c d e f
COMMAND GETKEYS EVAL "not consulted" 3 key1 key2 key3 arg1 arg2 arg3 argN
COMMAND GETKEYS SORT mylist ALPHA STORE outlist

----------------------------------------

TITLE: Reading New Entries with Blocking in Redis Stream
DESCRIPTION: Attempts to read up to 100 new entries from the end of the stream, blocking for 300ms if no entries are available

LANGUAGE: redis
CODE:
> XREAD COUNT 100 BLOCK 300 STREAMS race:france $
(nil)

----------------------------------------

TITLE: Executing Redis Transaction with EXEC
DESCRIPTION: The EXEC command executes all queued commands in a Redis transaction. When used with WATCH, it implements check-and-set (CAS) behavior by only executing if watched keys haven't been modified.

LANGUAGE: redis
CODE:
EXEC

----------------------------------------

TITLE: Adding and Retrieving Set Elements in Redis
DESCRIPTION: Demonstrates adding elements to a set with SADD and retrieving all elements with SMEMBERS.

LANGUAGE: redis
CODE:
> SADD bikes:racing:france bike:1 bike:2 bike:3
(integer) 3
> SMEMBERS bikes:racing:france
1) bike:3
2) bike:1
3) bike:2

----------------------------------------

TITLE: ACL Password Generation
DESCRIPTION: Example of generating secure random passwords for ACL users

LANGUAGE: redis
CODE:
ACL GENPASS

----------------------------------------

TITLE: Benchmarking Redis Pipelining in Ruby
DESCRIPTION: This Ruby script compares the performance of Redis operations with and without pipelining. It demonstrates how to use the Redis Ruby client to perform pipelined operations and measures the execution time for both approaches.

LANGUAGE: ruby
CODE:
require 'rubygems'
require 'redis'

def bench(descr)
  start = Time.now
  yield
  puts "#{descr} #{Time.now - start} seconds"
end

def without_pipelining
  r = Redis.new
  10_000.times do
    r.ping
  end
end

def with_pipelining
  r = Redis.new
  r.pipelined do
    10_000.times do
      r.ping
    end
  end
end

bench('without pipelining') do
  without_pipelining
end
bench('with pipelining') do
  with_pipelining
end

----------------------------------------

TITLE: Consumer Message Processing Loop with XREADGROUP
DESCRIPTION: Example pseudocode showing how to continuously read and process messages from a Redis stream using XREADGROUP, including message acknowledgment with XACK.

LANGUAGE: pseudocode
CODE:
WHILE true
    entries = XREADGROUP GROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream >
    if entries == nil
        puts "Timeout... try again"
        CONTINUE
    end

    FOREACH entries AS stream_entries
        FOREACH stream_entries as message
            process_message(message.id,message.fields)

            # ACK the message as processed
            XACK mystream $GroupName message.id
        END
    END
END

----------------------------------------

TITLE: Creating a new user in Redis
DESCRIPTION: Use INCR to generate a unique user ID and HMSET to store user data in a hash.

LANGUAGE: Redis
CODE:
INCR next_user_id => 1000
HMSET user:1000 username antirez password p1pp0
HSET users antirez 1000

----------------------------------------

TITLE: Using CLUSTER KEYSLOT Command in Redis
DESCRIPTION: Demonstrates how to use the CLUSTER KEYSLOT command to determine hash slots for different keys, including examples with hash tags. Shows how the same hash tag pattern results in identical slot numbers.

LANGUAGE: redis
CODE:
> CLUSTER KEYSLOT somekey
(integer) 11058
> CLUSTER KEYSLOT foo{hash_tag}
(integer) 2515
> CLUSTER KEYSLOT bar{hash_tag}
(integer) 2515

----------------------------------------

TITLE: Error Handling with redis.pcall()
DESCRIPTION: Example of error handling in Lua scripts using redis.pcall() to catch and process Redis runtime errors.

LANGUAGE: lua
CODE:
local reply = redis.pcall('ECHO', unpack(ARGV))
if reply['err'] ~= nil then
  redis.log(redis.LOG_WARNING, reply['err'])
  reply['err'] = 'ERR Something is wrong, but no worries, everything is under control'
end
return reply

----------------------------------------

TITLE: Setting Multiple Key-Value Pairs with MSET in Redis CLI
DESCRIPTION: This example demonstrates how to use the MSET command to set multiple key-value pairs atomically, and then retrieve the values using GET commands. MSET replaces existing values and ensures all keys are updated simultaneously.

LANGUAGE: cli
CODE:
MSET key1 "Hello" key2 "World"
GET key1
GET key2

----------------------------------------

TITLE: ACL Rules for Redis Replicas
DESCRIPTION: Required ACL rules configuration for Redis replica users

LANGUAGE: redis
CODE:
ACL setuser replica-user on >somepassword +psync +replconf +ping

----------------------------------------

TITLE: Incrementing Hash Fields with HINCRBY in Redis
DESCRIPTION: Demonstrates incrementing and decrementing numeric hash field values using HINCRBY command.

LANGUAGE: redis
CODE:
> HINCRBY bike:1 price 100
(integer) 5072
> HINCRBY bike:1 price -100
(integer) 4972

----------------------------------------

TITLE: Adding Entries to a Redis Stream
DESCRIPTION: Adds multiple entries to the 'race:france' stream with rider information

LANGUAGE: redis
CODE:
> XADD race:france * rider Castilla speed 30.2 position 1 location_id 1
"1692632086370-0"
> XADD race:france * rider Norem speed 28.8 position 3 location_id 1
"1692632094485-0"
> XADD race:france * rider Prickett speed 29.7 position 2 location_id 1
"1692632102976-0"

----------------------------------------

TITLE: Using CLIENT PAUSE with MULTI/EXEC in Redis
DESCRIPTION: This snippet shows how to use CLIENT PAUSE within a MULTI/EXEC block along with the INFO replication command. This approach allows getting the current master offset at the time clients are blocked, useful for ensuring all replication stream is processed.

LANGUAGE: redis
CODE:
MULTI
CLIENT PAUSE
INFO replication
EXEC

----------------------------------------

TITLE: Connection Pool Management with Lettuce
DESCRIPTION: Implementation of connection pooling using Lettuce's AsyncConnectionPoolSupport

LANGUAGE: java
CODE:
package org.example;
import io.lettuce.core.RedisClient;
import io.lettuce.core.RedisURI;
import io.lettuce.core.TransactionResult;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.async.RedisAsyncCommands;
import io.lettuce.core.codec.StringCodec;
import io.lettuce.core.support.*;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

public class Pool {
  public static void main(String[] args) {
    RedisClient client = RedisClient.create();

    String host = "localhost";
    int port = 6379;

    CompletionStage<BoundedAsyncPool<StatefulRedisConnection<String, String>>> poolFuture
        = AsyncConnectionPoolSupport.createBoundedObjectPoolAsync(
            () -> client.connectAsync(StringCodec.UTF8, RedisURI.create(host, port)),
            BoundedPoolConfig.create());

    // await poolFuture initialization to avoid NoSuchElementException: Pool exhausted when starting your application
    AsyncPool<StatefulRedisConnection<String, String>> pool = poolFuture.toCompletableFuture()
        .join();

    // execute work
    CompletableFuture<TransactionResult> transactionResult = pool.acquire()
        .thenCompose(connection -> {

          RedisAsyncCommands<String, String> async = connection.async();

          async.multi();
          async.set("key", "value");
          async.set("key2", "value2");
          System.out.println("Executed commands in pipeline");
          return async.exec().whenComplete((s, throwable) -> pool.release(connection));
        });
    transactionResult.join();

    // terminating
    pool.closeAsync();

    // after pool completion
    client.shutdownAsync();
  }
}

----------------------------------------

TITLE: Basic Redis Channel Subscription
DESCRIPTION: Example showing how to subscribe to multiple Redis channels using the SUBSCRIBE command. The client subscribes to channels 'channel11' and 'ch:00'.

LANGUAGE: bash
CODE:
SUBSCRIBE channel11 ch:00

----------------------------------------

TITLE: Redis ACL LOG Command Example
DESCRIPTION: Example showing authentication failure and subsequent ACL LOG output with detailed field explanations. Demonstrates the structure and content of security event logs including timestamps, client info, and event details.

LANGUAGE: redis
CODE:
> AUTH someuser wrongpassword
(error) WRONGPASS invalid username-password pair
> ACL LOG 1
1)  1) "count"
    2) (integer) 1
    3) "reason"
    4) "auth"
    5) "context"
    6) "toplevel"
    7) "object"
    8) "AUTH"
    9) "username"
   10) "someuser"
   11) "age-seconds"
   12) "8.038"
   13) "client-info"
   14) "id=3 addr=127.0.0.1:57275 laddr=127.0.0.1:6379 fd=8 name= age=16 idle=0 flags=N db=0 sub=0 psub=0 ssub=0 multi=-1 qbuf=48 qbuf-free=16842 argv-mem=25 multi-mem=0 rbs=1024 rbp=0 obl=0 oll=0 omem=0 tot-mem=18737 events=r cmd=auth user=default redir=-1 resp=2"
   15) "entry-id"
   16) (integer) 0
   17) "timestamp-created"
   18) (integer) 1675361492408
   19) "timestamp-last-updated"
   20) (integer) 1675361492408

----------------------------------------

TITLE: Basic Usage of Redis APPEND Command
DESCRIPTION: Demonstrates the basic usage of the APPEND command in Redis. It shows how to check if a key exists, append values to it, and retrieve the final result.

LANGUAGE: cli
CODE:
EXISTS mykey
APPEND mykey "Hello"
APPEND mykey " World"
GET mykey

----------------------------------------

TITLE: ACL Rules for Redis Sentinel
DESCRIPTION: Required ACL rules configuration for Redis Sentinel users

LANGUAGE: redis
CODE:
ACL SETUSER sentinel-user on >somepassword allchannels +multi +slaveof +ping +exec +subscribe +config|rewrite +role +publish +info +client|setname +client|kill +script|kill

----------------------------------------

TITLE: Demonstrating Redis Pipelining with Netcat
DESCRIPTION: This bash snippet shows how to use netcat to send multiple PING commands to Redis in a pipeline, reducing the impact of RTT by sending all commands at once and reading responses together.

LANGUAGE: bash
CODE:
$ (printf "PING\r\nPING\r\nPING\r\n"; sleep 1) | nc localhost 6379
+PONG
+PONG
+PONG

----------------------------------------

TITLE: Reading from Multiple Streams with XREAD in Redis
DESCRIPTION: This example demonstrates how to use the XREAD command to read data from two streams ('mystream' and 'writers') starting from the first element they contain. The COUNT option is used to limit the number of returned elements per stream to two.

LANGUAGE: redis
CODE:
> XREAD COUNT 2 STREAMS mystream writers 0-0 0-0
1) 1) "mystream"
   2) 1) 1) 1526984818136-0
         2) 1) "duration"
            2) "1532"
            3) "event-id"
            4) "5"
            5) "user-id"
            6) "7782813"
      2) 1) 1526999352406-0
         2) 1) "duration"
            2) "812"
            3) "event-id"
            4) "9"
            5) "user-id"
            6) "388234"
2) 1) "writers"
   2) 1) 1) 1526985676425-0
         2) 1) "name"
            2) "Virginia"
            3) "surname"
            4) "Woolf"
      2) 1) 1526985685298-0
         2) 1) "name"
            2) "Jane"
            3) "surname"
            4) "Austen"

----------------------------------------

TITLE: Basic BITCOUNT Usage in Redis CLI
DESCRIPTION: Demonstrates various ways to use the BITCOUNT command with different counting intervals and modes (byte vs bit indexing). Shows how to count bits in a full string and specific ranges using both byte and bit positioning.

LANGUAGE: cli
CODE:
SET mykey "foobar"
BITCOUNT mykey
BITCOUNT mykey 0 0
BITCOUNT mykey 1 1
BITCOUNT mykey 1 1 BYTE
BITCOUNT mykey 5 30 BIT

----------------------------------------

TITLE: Asynchronous Redis Connection with Lettuce
DESCRIPTION: Example of establishing an asynchronous connection to Redis using Lettuce, including string operations and hash operations

LANGUAGE: java
CODE:
package org.example;
import java.util.*;
import java.util.concurrent.ExecutionException;

import io.lettuce.core.*;
import io.lettuce.core.api.async.RedisAsyncCommands;
import io.lettuce.core.api.StatefulRedisConnection;

public class Async {
  public static void main(String[] args) {
    RedisClient redisClient = RedisClient.create("redis://localhost:6379");

    try (StatefulRedisConnection<String, String> connection = redisClient.connect()) {
      RedisAsyncCommands<String, String> asyncCommands = connection.async();

      // Asynchronously store & retrieve a simple string
      asyncCommands.set("foo", "bar").get();
      System.out.println(asyncCommands.get("foo").get()); // prints bar

      // Asynchronously store key-value pairs in a hash directly
      Map<String, String> hash = new HashMap<>();
      hash.put("name", "John");
      hash.put("surname", "Smith");
      hash.put("company", "Redis");
      hash.put("age", "29");
      asyncCommands.hset("user-session:123", hash).get();

      System.out.println(asyncCommands.hgetall("user-session:123").get());
      // Prints: {name=John, surname=Smith, company=Redis, age=29}
    } catch (ExecutionException | InterruptedException e) {
      throw new RuntimeException(e);
    } finally {
      redisClient.shutdown();
    }
  }
}

----------------------------------------

TITLE: Implementing Multi-dimensional Indexing in Ruby
DESCRIPTION: A Ruby function that demonstrates how to implement multi-dimensional indexing and querying using Redis lexicographical ranges.

LANGUAGE: ruby
CODE:
def spacequery(x0,y0,x1,y1,exp)
    bits=exp*2
    x_start = x0/(2**exp)
    x_end = x1/(2**exp)
    y_start = y0/(2**exp)
    y_end = y1/(2**exp)
    (x_start..x_end).each{|x|
        (y_start..y_end).each{|y|
            x_range_start = x*(2**exp)
            x_range_end = x_range_start | ((2**exp)-1)
            y_range_start = y*(2**exp)
            y_range_end = y_range_start | ((2**exp)-1)
            puts "#{x},#{y} x from #{x_range_start} to #{x_range_end}, y from #{y_range_start} to #{y_range_end}"

            # Turn it into interleaved form for ZRANGE query.
            # We assume we need 9 bits for each integer, so the final
            # interleaved representation will be 18 bits.
            xbin = x_range_start.to_s(2).rjust(9,'0')
            ybin = y_range_start.to_s(2).rjust(9,'0')
            s = xbin.split("").zip(ybin.split("")).flatten.compact.join("")
            # Now that we have the start of the range, calculate the end
            # by replacing the specified number of bits from 0 to 1.
            e = s[0..-(bits+1)]+("1"*bits)
            puts "ZRANGE myindex [#{s} [#{e} BYLEX"
        }
    }
end

spacequery(50,100,100,300,6)

----------------------------------------

TITLE: Conceptual Example of Redis Set Intersection
DESCRIPTION: This example illustrates the concept of set intersection in Redis using hypothetical sets. It shows how SINTER operates on multiple sets to produce the resulting intersection.

LANGUAGE: text
CODE:
key1 = {a,b,c,d}
key2 = {c}
key3 = {a,c,e}
SINTER key1 key2 key3 = {c}

----------------------------------------

TITLE: Demonstrating Redis GETRANGE Command Usage
DESCRIPTION: Shows various use cases of the GETRANGE command including setting a string value and retrieving different substrings using both positive and negative offsets. Demonstrates boundary handling and full string retrieval.

LANGUAGE: cli
CODE:
SET mykey "This is a string"
GETRANGE mykey 0 3
GETRANGE mykey -3 -1
GETRANGE mykey 0 -1
GETRANGE mykey 10 100

----------------------------------------

TITLE: Querying Time To Live for Redis Key
DESCRIPTION: This example demonstrates how to set a key with a value, set its expiration time, and then query its remaining time to live using the TTL command in Redis CLI.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXPIRE mykey 10
TTL mykey

----------------------------------------

TITLE: Adding Members to a Sorted Set with Redis ZADD Command
DESCRIPTION: This example demonstrates how to use the ZADD command to add members with scores to a sorted set in Redis. It shows adding single and multiple members, as well as retrieving the sorted set contents with scores.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 1 "uno"
ZADD myzset 2 "two" 3 "three"
ZRANGE myzset 0 -1 WITHSCORES

----------------------------------------

TITLE: Basic Lua Script Execution in Redis
DESCRIPTION: Simple example showing how to execute a basic Lua script using the EVAL command with no arguments.

LANGUAGE: redis-cli
CODE:
> EVAL "return 'Hello, scripting!'" 0
"Hello, scripting!"

----------------------------------------

TITLE: Creating a Consumer Group in Redis
DESCRIPTION: This snippet demonstrates how to create a new consumer group for a Redis stream, starting from the beginning of the stream.

LANGUAGE: redis
CODE:
XGROUP CREATE mystream mygroup 0

----------------------------------------

TITLE: Serializing Redis Key Value Using DUMP Command
DESCRIPTION: Demonstrates how to serialize a key value in Redis using the DUMP command. The example shows setting a key first and then dumping its value into a Redis-specific serialized format that includes a 64-bit checksum and RDB version information.

LANGUAGE: redis
CODE:
> SET mykey 10
OK
> DUMP mykey
"\x00\xc0\n\n\x00n\x9fWE\x0e\xaec\xbb"

----------------------------------------

TITLE: Redis ACL User Configuration and Retrieval Example
DESCRIPTION: Demonstrates setting up ACL rules for a user named 'sample' and retrieving those rules using ACL GETUSER. Shows how flags, passwords, commands, keys, channels, and selectors are formatted in the response.

LANGUAGE: redis
CODE:
> ACL SETUSER sample on nopass +GET allkeys &* (+SET ~key2)
"OK"
> ACL GETUSER sample
1) "flags"
2) 1) "on"
   2) "allkeys"
   3) "nopass"
3) "passwords"
4) (empty array)
5) "commands"
6) "+@all"
7) "keys"
8) "~*"
9) "channels"
10) "&*"
11) "selectors"
12) 1) 1) "commands"
       6) "+SET"
       7) "keys"
       8) "~key2"
       9) "channels"
       10) "&*"

----------------------------------------

TITLE: Connecting to Redis Server in Go
DESCRIPTION: Establish a connection to a Redis server using the go-redis client. This snippet demonstrates creating a new client with specified connection options.

LANGUAGE: go
CODE:
import (
	"context"
	"fmt"
	"github.com/redis/go-redis/v9"
)

func main() {
    client := redis.NewClient(&redis.Options{
        Addr:	  "localhost:6379",
        Password: "", // no password set
        DB:		  0,  // use default DB
    })
}

----------------------------------------

TITLE: Redis CLUSTER INFO Command Output Format
DESCRIPTION: Sample output showing the standard fields returned by the CLUSTER INFO command. Shows cluster state information, slot assignments, node counts, epoch values, and message statistics.

LANGUAGE: redis
CODE:
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:2
cluster_stats_messages_sent:1483972
cluster_stats_messages_received:1483968
total_cluster_links_buffer_limit_exceeded:0

----------------------------------------

TITLE: Incrementing a Redis key value using INCRBY command
DESCRIPTION: This example demonstrates how to use the INCRBY command in Redis. It first sets a key 'mykey' with an initial value of '10', then increments it by 5 using INCRBY.

LANGUAGE: cli
CODE:
SET mykey "10"
INCRBY mykey 5

----------------------------------------

TITLE: Setting and Checking Expiration on Redis Keys
DESCRIPTION: This snippet demonstrates how to set an expiration time on a Redis key, check its remaining time to live (TTL), and how the TTL is affected by updating the key's value or using different EXPIRE options.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXPIRE mykey 10
TTL mykey
SET mykey "Hello World"
TTL mykey
EXPIRE mykey 10 XX
TTL mykey
EXPIRE mykey 10 NX
TTL mykey

----------------------------------------

TITLE: Computing Sorted Set Intersection with Redis ZINTERSTORE
DESCRIPTION: Example demonstrates using ZINTERSTORE to compute the intersection of two sorted sets with custom weight multipliers. Shows creating two sorted sets with overlapping members, then computing their weighted intersection and displaying the results with scores.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZADD zset2 3 "three"
ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3
ZRANGE out 0 -1 WITHSCORES

----------------------------------------

TITLE: Deleting Entry from Redis Stream
DESCRIPTION: Removes a specific entry from the 'race:italy' stream using XDEL

LANGUAGE: redis
CODE:
> XRANGE race:italy - + COUNT 2
1) 1) "1692633198206-0"
   2) 1) "rider"
      2) "Wood"
2) 1) "1692633208557-0"
   2) 1) "rider"
      2) "Henshaw"
> XDEL race:italy 1692633208557-0
(integer) 1
> XRANGE race:italy - + COUNT 2
1) 1) "1692633198206-0"
   2) 1) "rider"
      2) "Wood"

----------------------------------------

TITLE: Connecting to Redis using Redis CLI
DESCRIPTION: This snippet demonstrates how to connect to the Redis server using the Redis CLI and perform a simple PING command to test the connection.

LANGUAGE: bash
CODE:
redis-cli 
127.0.0.1:6379> ping
PONG

----------------------------------------

TITLE: Redis LATENCY GRAPH Command Example
DESCRIPTION: Demonstrates using the LATENCY GRAPH command to visualize command latency after introducing artificial delays with debug sleep. Shows how the ASCII graph represents latency trends with varying delay times from 0.1 to 0.5 seconds.

LANGUAGE: redis
CODE:
127.0.0.1:6379> latency reset command
(integer) 0
127.0.0.1:6379> debug sleep .1
OK
127.0.0.1:6379> debug sleep .2
OK
127.0.0.1:6379> debug sleep .3
OK
127.0.0.1:6379> debug sleep .5
OK
127.0.0.1:6379> debug sleep .4
OK
127.0.0.1:6379> latency graph command
command - high 500 ms, low 101 ms (all time high 500 ms)
--------------------------------------------------------------------------------
   #_
  _||
 _|||
_||||

11186
542ss
sss

----------------------------------------

TITLE: Redis ACL Configuration for Sentinel
DESCRIPTION: Redis ACL commands to configure user permissions for Sentinel monitoring and management

LANGUAGE: redis
CODE:
ACL SETUSER sentinel-user ON >somepassword allchannels +multi +slaveof +ping +exec +subscribe +config|rewrite +role +publish +info +client|setname +client|kill +script|kill

----------------------------------------

TITLE: Removing Elements from Redis List Using LREM Command
DESCRIPTION: This example demonstrates how to use the LREM command to remove occurrences of an element from a Redis list. It shows adding elements to a list, removing specific occurrences, and then retrieving the updated list contents.

LANGUAGE: cli
CODE:
RPUSH mylist "hello"
RPUSH mylist "hello"
RPUSH mylist "foo"
RPUSH mylist "hello"
LREM mylist -2 "hello"
LRANGE mylist 0 -1

----------------------------------------

TITLE: Running RedisInsight Docker Container with Persistence
DESCRIPTION: Docker command to run RedisInsight container with persistent data storage using a volume mounted at /data. Maps port 5540 and requires proper permissions for user ID 1000.

LANGUAGE: bash
CODE:
docker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest -v redisinsight:/data

----------------------------------------

TITLE: Demonstrating Redis LPOP Command Usage in CLI
DESCRIPTION: This example shows how to use the LPOP command in Redis CLI. It first pushes elements to a list, then demonstrates single and multiple element removal with LPOP, and finally checks the remaining list contents.

LANGUAGE: cli
CODE:
RPUSH mylist "one" "two" "three" "four" "five"
LPOP mylist
LPOP mylist 2
LRANGE mylist 0 -1

----------------------------------------

TITLE: Redis Key Expiration with SET
DESCRIPTION: Demonstrates setting key expiration during value assignment using SET command with EX option.

LANGUAGE: redis
CODE:
> set key 100 ex 10
OK
> ttl key
(integer) 9

----------------------------------------

TITLE: Using GEOSEARCH Command in Redis CLI
DESCRIPTION: These examples demonstrate how to use the GEOSEARCH command in Redis CLI. The first command adds geospatial data to a sorted set named 'Sicily'. The second and third commands show different ways to search for locations within specified areas.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEOADD Sicily 12.758489 38.788135 "edge1"   17.241510 38.788135 "edge2" 
GEOSEARCH Sicily FROMLONLAT 15 37 BYRADIUS 200 km ASC
GEOSEARCH Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST

----------------------------------------

TITLE: Practical LTRIM Usage Example
DESCRIPTION: Complete example demonstrating how to add elements to a list using RPUSH and then trim it to keep only specific elements. Shows the combination of RPUSH, LTRIM, and LRANGE commands.

LANGUAGE: cli
CODE:
RPUSH mylist "one"
RPUSH mylist "two"
RPUSH mylist "three"
LTRIM mylist 1 -1
LRANGE mylist 0 -1

----------------------------------------

TITLE: Running RedisInsight Docker Container without Persistence
DESCRIPTION: Docker command to run RedisInsight container without persistent data storage. Maps port 5540 and uses the latest RedisInsight image.

LANGUAGE: bash
CODE:
docker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest

----------------------------------------

TITLE: Loading and Invoking a Redis Function in Lua
DESCRIPTION: This snippet demonstrates how to load a Lua function into Redis using FUNCTION LOAD and then invoke it using FCALL. The function 'myfunc' is created within the 'mylib' library and simply returns its first argument.

LANGUAGE: lua
CODE:
redis> FUNCTION LOAD "#!lua name=mylib \n redis.register_function('myfunc', function(keys, args) return args[1] end)"
"mylib"
redis> FCALL myfunc 0 hello
"hello"

----------------------------------------

TITLE: Creating a Composite Index in Redis
DESCRIPTION: Demonstrates how to create a composite index using multiple fields (room number and price) for efficient querying.

LANGUAGE: redis
CODE:
ZADD myindex 0 0056:0028.44:90
ZADD myindex 0 0034:0011.00:832

----------------------------------------

TITLE: LCS Command with Length Option in Redis
DESCRIPTION: Shows how to use the LCS command with the LEN option to get only the length of the longest common subsequence.

LANGUAGE: redis
CODE:
> LCS key1 key2 LEN
(integer) 6

----------------------------------------

TITLE: Demonstrating Redis LRANGE Command Usage
DESCRIPTION: Example showing how to use the LRANGE command with different index ranges, including positive indexes, negative indexes, and out-of-range values. The example first populates a list 'mylist' with three elements and then demonstrates various range queries.

LANGUAGE: cli
CODE:
RPUSH mylist "one"
RPUSH mylist "two"
RPUSH mylist "three"
LRANGE mylist 0 0
LRANGE mylist -3 2
LRANGE mylist -100 100
LRANGE mylist 5 10

----------------------------------------

TITLE: Querying Redis Configuration Parameters
DESCRIPTION: Example showing how to use CONFIG GET command to retrieve multiple configuration parameters using glob-style patterns. The command returns matching parameters as key-value pairs, specifically showing memory-related configuration settings.

LANGUAGE: redis
CODE:
redis> config get *max-*-entries* maxmemory
 1) "maxmemory"
 2) "0"
 3) "hash-max-listpack-entries"
 4) "512"
 5) "hash-max-ziplist-entries"
 6) "512"
 7) "set-max-intset-entries"
 8) "512"
 9) "zset-max-listpack-entries"
10) "128"
11) "zset-max-ziplist-entries"
12) "128"

----------------------------------------

TITLE: Computing Set Difference with Redis ZDIFFSTORE
DESCRIPTION: Example demonstrates how to use ZDIFFSTORE to compute the difference between two sorted sets. Creates two sorted sets with overlapping members, computes their difference, and stores the result in a new set. Shows how to view the resulting set with scores.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset1 3 "three"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZDIFFSTORE out 2 zset1 zset2
ZRANGE out 0 -1 WITHSCORES

----------------------------------------

TITLE: ZRANGE with WITHSCORES Option
DESCRIPTION: Shows how to retrieve elements along with their scores from a sorted set using the WITHSCORES option.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one" 2 "two" 3 "three"
ZRANGE myzset 0 1 WITHSCORES

----------------------------------------

TITLE: LCS Command with Index Option in Redis
DESCRIPTION: Illustrates the use of the LCS command with the IDX option to get the match positions in each string. The matches are returned from last to first.

LANGUAGE: redis
CODE:
> LCS key1 key2 IDX
1) "matches"
2) 1) 1) 1) (integer) 4
         2) (integer) 7
      2) 1) (integer) 5
         2) (integer) 8
   2) 1) 1) (integer) 2
         2) (integer) 3
      2) 1) (integer) 0
         2) (integer) 1
3) "len"
4) (integer) 6

----------------------------------------

TITLE: Finding Bit Positions in Redis Strings using BITPOS
DESCRIPTION: Demonstrates various uses of the BITPOS command to find specific bit positions in Redis strings. Shows examples of searching for both 1 and 0 bits, using byte and bit ranges, and handling negative indices.

LANGUAGE: cli
CODE:
SET mykey "\xff\xf0\x00"
BITPOS mykey 0
SET mykey "\x00\xff\xf0"
BITPOS mykey 1 0
BITPOS mykey 1 2
BITPOS mykey 1 2 -1 BYTE
BITPOS mykey 1 7 15 BIT
set mykey "\x00\x00\x00"
BITPOS mykey 1
BITPOS mykey 1 7 -3 BIT

----------------------------------------

TITLE: Switching from RDB to AOF Persistence in Redis
DESCRIPTION: Demonstrates commands to enable AOF and optionally disable RDB persistence on a live Redis server. This allows converting from snapshots to append-only logging.

LANGUAGE: bash
CODE:
redis-cli config set appendonly yes
redis-cli config set save ""

----------------------------------------

TITLE: Continuing Stream Iteration with XREAD in Redis
DESCRIPTION: This example shows how to continue reading from the 'mystream' and 'writers' streams by providing the last received IDs for each stream. This allows for continuous consumption of new data from multiple streams.

LANGUAGE: redis
CODE:
> XREAD COUNT 2 STREAMS mystream writers 1526999352406-0 1526985685298-0
1) 1) "mystream"
   2) 1) 1) 1526999626221-0
         2) 1) "duration"
            2) "911"
            3) "event-id"
            4) "7"
            5) "user-id"
            6) "9488232"
2) 1) "writers"
   2) 1) 1) 1526985691746-0
         2) 1) "name"
            2) "Toni"
            3) "surname"
            4) "Morrison"
      2) 1) 1526985712947-0
         2) 1) "name"
            2) "Agatha"
            3) "surname"
            4) "Christie"

----------------------------------------

TITLE: LCS Command with Minimum Match Length in Redis
DESCRIPTION: Demonstrates the use of the MINMATCHLEN option with the LCS command to restrict the list of matches to those of a given minimal length.

LANGUAGE: redis
CODE:
> LCS key1 key2 IDX MINMATCHLEN 4
1) "matches"
2) 1) 1) 1) (integer) 4
         2) (integer) 7
      2) 1) (integer) 5
         2) (integer) 8
3) "len"
4) (integer) 6

----------------------------------------

TITLE: Setting Multiple Hash Fields with Redis HMSET
DESCRIPTION: Demonstrates using the HMSET command to set multiple field-value pairs in a Redis hash, followed by retrieving individual values using HGET. The example creates a hash 'myhash' with two fields containing string values.

LANGUAGE: cli
CODE:
HMSET myhash field1 "Hello" field2 "World"
HGET myhash field1
HGET myhash field2

----------------------------------------

TITLE: Redis CLI Authentication Example
DESCRIPTION: Shows how to connect to a password-protected Redis instance using the CLI

LANGUAGE: shell
CODE:
$ redis-cli -a myUnguessablePazzzzzword123 PING
PONG

----------------------------------------

TITLE: Retrieving Multiple Key Values with Redis MGET
DESCRIPTION: Example shows how to retrieve values for multiple keys using the MGET command. The command returns 'nil' for non-existing keys or keys that don't hold string values, making it a safe operation that never fails.

LANGUAGE: cli
CODE:
SET key1 "Hello"
SET key2 "World"
MGET key1 key2 nonexisting

----------------------------------------

TITLE: Redis Key Type Checking
DESCRIPTION: Shows how to check the type of value stored at a key using the TYPE command.

LANGUAGE: redis
CODE:
> set mykey x
OK
> type mykey
string
> del mykey
(integer) 1
> type mykey
none

----------------------------------------

TITLE: Using COMMAND GETKEYSANDFLAGS in Redis CLI
DESCRIPTION: Examples of using the COMMAND GETKEYS and COMMAND GETKEYSANDFLAGS commands in Redis CLI to retrieve keys and their usage flags from various Redis commands.

LANGUAGE: cli
CODE:
COMMAND GETKEYS MSET a b c d e f
COMMAND GETKEYS EVAL "not consulted" 3 key1 key2 key3 arg1 arg2 arg3 argN
COMMAND GETKEYSANDFLAGS LMOVE mylist1 mylist2 left left

----------------------------------------

TITLE: Querying Geospatial Data with Redis GEORADIUS
DESCRIPTION: Demonstrates various uses of the GEORADIUS command to query locations within Sicily. Shows how to add geospatial points and retrieve them with different output options including distance and coordinates.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEORADIUS Sicily 15 37 200 km WITHDIST
GEORADIUS Sicily 15 37 200 km WITHCOORD
GEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD

----------------------------------------

TITLE: Working with Redis Lists
DESCRIPTION: Use LPUSH to add elements to a list and LRANGE to retrieve ranges of elements.

LANGUAGE: Redis
CODE:
LPUSH mylist a
LPUSH mylist b
LPUSH mylist c
LRANGE mylist 0 -1 => c,b,a

----------------------------------------

TITLE: Computing Union of Sorted Sets with ZUNIONSTORE in Redis CLI
DESCRIPTION: This example demonstrates the usage of ZUNIONSTORE command in Redis CLI. It creates two sorted sets, computes their weighted union, and displays the result. The example showcases the WEIGHTS option and retrieves the resulting set with scores.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZADD zset2 3 "three"
ZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3
ZRANGE out 0 -1 WITHSCORES

----------------------------------------

TITLE: Retrieving Multiple Hash Field Values with Redis HMGET
DESCRIPTION: This snippet demonstrates the usage of the HMGET command in Redis. It first sets two fields in a hash using HSET, then retrieves multiple field values, including a non-existent field, using HMGET. The command returns the values for existing fields and nil for non-existent ones.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HMGET myhash field1 field2 nofield

----------------------------------------

TITLE: Configuring RDB Snapshotting in Redis
DESCRIPTION: Sets up Redis to automatically save snapshots every 60 seconds if at least 1000 keys have changed. This configures the RDB persistence strategy.

LANGUAGE: config
CODE:
save 60 1000

----------------------------------------

TITLE: Demonstrating Basic RPOPLPUSH Usage in Redis CLI
DESCRIPTION: Shows how to use RPOPLPUSH to move elements between lists by first populating a list with values and then moving an element to another list. Demonstrates the results using LRANGE to show the modified lists.

LANGUAGE: cli
CODE:
RPUSH mylist "one"
RPUSH mylist "two"
RPUSH mylist "three"
RPOPLPUSH mylist myotherlist
LRANGE mylist 0 -1
LRANGE myotherlist 0 -1

----------------------------------------

TITLE: Checking Redis Value Types Using TYPE Command - CLI
DESCRIPTION: Demonstrates how to use the TYPE command to check data types of different Redis keys. Shows examples with string, list, and set data structures after setting sample values.

LANGUAGE: cli
CODE:
SET key1 "value"
LPUSH key2 "value"
SADD key3 "value"
TYPE key1
TYPE key2
TYPE key3

----------------------------------------

TITLE: Adding Elements to HyperLogLog and Counting Cardinality in Redis CLI
DESCRIPTION: This example demonstrates how to use the PFADD command to add elements to a HyperLogLog structure named 'hll', and then use PFCOUNT to get the estimated cardinality of the set.

LANGUAGE: cli
CODE:
PFADD hll a b c d e f g
PFCOUNT hll

----------------------------------------

TITLE: Redis BLMOVE Command Usage
DESCRIPTION: BLMOVE is the blocking variant of LMOVE that blocks when the source list is empty until another client pushes elements or timeout is reached. It can block indefinitely with timeout of 0 and behaves exactly like LMOVE when used inside MULTI/EXEC blocks or when source contains elements.

LANGUAGE: redis
CODE:
BLMOVE source destination (LEFT|RIGHT) (LEFT|RIGHT) timeout

----------------------------------------

TITLE: Lexicographical Ordering in Redis Sorted Set
DESCRIPTION: Demonstrates how to use Redis sorted sets for lexicographical ordering by adding elements with the same score and using ZRANGEBYLEX to retrieve lexicographical ranges.

LANGUAGE: redis
CODE:
> ZADD racer_scores 0 "Norem" 0 "Sam-Bodden" 0 "Royce" 0 "Castilla" 0 "Prickett" 0 "Ford"
(integer) 3
> ZRANGE racer_scores 0 -1
1) "Castilla"
2) "Ford"
3) "Norem"
4) "Prickett"
5) "Royce"
6) "Sam-Bodden"
> ZRANGEBYLEX racer_scores [A [L
1) "Castilla"
2) "Ford"

----------------------------------------

TITLE: Storing and Retrieving Map in Redis with Go
DESCRIPTION: Store and retrieve a map data structure in Redis using the go-redis client. This example demonstrates using HSet for storing multiple fields and HGetAll for retrieving the entire hash.

LANGUAGE: go
CODE:
session := map[string]string{"name": "John", "surname": "Smith", "company": "Redis", "age": "29"}
for k, v := range session {
    err := client.HSet(ctx, "user-session:123", k, v).Err()
    if err != nil {
        panic(err)
    }
}

userSession := client.HGetAll(ctx, "user-session:123").Val()
fmt.Println(userSession)

----------------------------------------

TITLE: Decrementing Integer Values with Redis DECR Command
DESCRIPTION: Example showing how to use the DECR command to decrement values stored in Redis. The first example shows decrementing a valid integer, while the second demonstrates attempting to decrement a number that exceeds the 64-bit signed integer limit, which will result in an error.

LANGUAGE: cli
CODE:
SET mykey "10"
DECR mykey
SET mykey "234293482390480948029348230948"
DECR mykey

----------------------------------------

TITLE: SETEX Command Usage Example
DESCRIPTION: Demonstrates practical usage of SETEX command by setting a key 'mykey' with value 'Hello' and 10-second timeout, followed by checking its TTL and value.

LANGUAGE: cli
CODE:
SETEX mykey 10 "Hello"
TTL mykey
GET mykey

----------------------------------------

TITLE: Blocking List Operations in Redis
DESCRIPTION: Demonstrates blocking pop operations using BRPOP with timeout, useful for implementing producer-consumer patterns.

LANGUAGE: redis
CODE:
> RPUSH bikes:repairs bike:1 bike:2
(integer) 2
> BRPOP bikes:repairs 1
1) "bikes:repairs"
2) "bike:2"
> BRPOP bikes:repairs 1
1) "bikes:repairs"
2) "bike:1"
> BRPOP bikes:repairs 1
(nil)
(2.01s)

----------------------------------------

TITLE: Registering Key Prefixes for Redis Tracking
DESCRIPTION: This option registers a key prefix for broadcasting mode. Notifications will only be provided for keys starting with the specified prefix. Multiple prefixes can be registered.

LANGUAGE: redis
CODE:
PREFIX <prefix>

----------------------------------------

TITLE: Executing Redis PING Command
DESCRIPTION: Demonstrates the usage of the Redis PING command with and without arguments. The command returns 'PONG' if no argument is provided, or echoes back the provided argument.

LANGUAGE: cli
CODE:
PING

PING "hello world"

----------------------------------------

TITLE: Using Redis ZMPOP Command Examples
DESCRIPTION: Demonstrates various use cases of the ZMPOP command including popping elements with MIN/MAX modifiers, using COUNT parameter, and handling multiple sorted sets. Shows interaction with sorted sets including adding elements, popping them, and checking remaining contents.

LANGUAGE: cli
CODE:
ZMPOP 1 notsuchkey MIN
ZADD myzset 1 "one" 2 "two" 3 "three"
ZMPOP 1 myzset MIN
ZRANGE myzset 0 -1 WITHSCORES
ZMPOP 1 myzset MAX COUNT 10
ZADD myzset2 4 "four" 5 "five" 6 "six"
ZMPOP 2 myzset myzset2 MIN COUNT 10
ZRANGE myzset 0 -1 WITHSCORES
ZMPOP 2 myzset myzset2 MAX COUNT 10
ZRANGE myzset2 0 -1 WITHSCORES
EXISTS myzset myzset2

----------------------------------------

TITLE: Executing SORT_RO Command in Redis
DESCRIPTION: This example demonstrates how to use the SORT_RO command in Redis. It sorts a list named 'mylist' based on weights stored in separate keys, and retrieves object fields for each sorted item. This command can be safely used in read-only replicas.

LANGUAGE: redis
CODE:
SORT_RO mylist BY weight_*->fieldname GET object_*->fieldname

----------------------------------------

TITLE: Configuring Keyspace Notifications in Redis
DESCRIPTION: Shows how to enable keyspace notifications in Redis using the notify-keyspace-events configuration parameter. It includes a table explaining the meaning of each character used in the configuration string.

LANGUAGE: text
CODE:
K     Keyspace events, published with __keyspace@<db>__ prefix.
E     Keyevent events, published with __keyevent@<db>__ prefix.
g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
$     String commands
l     List commands
s     Set commands
h     Hash commands
z     Sorted set commands
t     Stream commands
d     Module key type events
x     Expired events (events generated every time a key expires)
e     Evicted events (events generated when a key is evicted for maxmemory)
m     Key miss events (events generated when a key that doesn't exist is accessed)
n     New key events (Note: not included in the 'A' class)
A     Alias for "g$lshztxed", so that the "AKE" string means all the events except "m" and "n".

----------------------------------------

TITLE: Setting and Retrieving Hash Fields with Redis HSETNX Command
DESCRIPTION: This example demonstrates the usage of the HSETNX command in Redis. It shows how to set a field in a hash, attempt to set it again with a different value, and then retrieve the field's value. The second HSETNX operation has no effect because the field already exists.

LANGUAGE: cli
CODE:
HSETNX myhash field "Hello"
HSETNX myhash field "World"
HGET myhash field

----------------------------------------

TITLE: Lock Acquisition with SETNX - Redis CLI
DESCRIPTION: Shows how to acquire a lock using SETNX by setting a key with an expiration timestamp. The value is set to the current Unix time plus a timeout period.

LANGUAGE: cli
CODE:
SETNX lock.foo <current Unix time + lock timeout + 1>

----------------------------------------

TITLE: Finding Set Differences in Redis
DESCRIPTION: Demonstrates the SDIFF command to find elements present in one set but not in another.

LANGUAGE: redis
CODE:
> SADD bikes:racing:usa bike:1 bike:4
(integer) 2
> SDIFF bikes:racing:france bikes:racing:usa
1) "bike:3"
2) "bike:2"

----------------------------------------

TITLE: Opt-out Tracking for Read-Only Commands in Redis
DESCRIPTION: When broadcasting is not active, this option enables tracking of keys in read-only commands by default, unless explicitly opted out using CLIENT CACHING no.

LANGUAGE: redis
CODE:
OPTOUT

----------------------------------------

TITLE: Connecting to a specific Redis server with authentication
DESCRIPTION: Use a connection string to specify host, port, username, and password for Redis connection.

LANGUAGE: javascript
CODE:
createClient({
  url: 'redis://alice:foobared@awesome.redis.server:6380'
});

----------------------------------------

TITLE: Retrieving Bit Values with Redis GETBIT Command
DESCRIPTION: This example demonstrates how to use the GETBIT command in Redis. It first sets a bit using SETBIT, then retrieves bit values at different offsets using GETBIT, including an offset beyond the string length.

LANGUAGE: cli
CODE:
SETBIT mykey 7 1
GETBIT mykey 0
GETBIT mykey 7
GETBIT mykey 100

----------------------------------------

TITLE: Generating Bulk SET Commands in Ruby
DESCRIPTION: This Ruby script generates 1000 SET commands for key-value pairs in the format 'KeyN' -> 'ValueN'. It uses the gen_redis_proto function to format each command according to the Redis protocol.

LANGUAGE: ruby
CODE:
(0...1000).each{|n|
    STDOUT.write(gen_redis_proto("SET","Key#{n}","Value#{n}"))
}

----------------------------------------

TITLE: Indexing User Objects by Age in Redis
DESCRIPTION: Illustrates how to create an index for user objects stored as hashes, using the user ID as the sorted set element and age as the score.

LANGUAGE: redis
CODE:
HMSET user:1 id 1 username antirez ctime 1444809424 age 38
HMSET user:2 id 2 username maria ctime 1444808132 age 42
HMSET user:3 id 3 username jballard ctime 1443246218 age 33

ZADD user.age.index 38 1
ZADD user.age.index 42 2
ZADD user.age.index 33 3

----------------------------------------

TITLE: Creating follow relationships in Redis
DESCRIPTION: Add bidirectional following/follower relationships using sorted sets.

LANGUAGE: Redis
CODE:
ZADD following:1000 5000
ZADD followers:5000 1000

----------------------------------------

TITLE: Querying Master Role Information in Redis
DESCRIPTION: Example output of the ROLE command when called on a Redis master instance. It returns the role, replication offset, and connected replica information.

LANGUAGE: redis
CODE:
1) "master"
2) (integer) 3129659
3) 1) 1) "127.0.0.1"
      2) "9001"
      3) "3129242"
   2) 1) "127.0.0.1"
      2) "9002"
      3) "3129543"

----------------------------------------

TITLE: Demonstrating PERSIST Command Usage in Redis CLI
DESCRIPTION: This example shows how to use the PERSIST command to remove the expiration time from a key. It sets a key, adds an expiration, checks the time-to-live, removes the expiration, and checks the time-to-live again.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXPIRE mykey 10
TTL mykey
PERSIST mykey
TTL mykey

----------------------------------------

TITLE: Adding Elements to Redis Sets
DESCRIPTION: Demonstrates the SADD command to add elements to Redis sets, showing how duplicate elements are ignored.

LANGUAGE: redis
CODE:
> SADD bikes:racing:france bike:1
(integer) 1
> SADD bikes:racing:france bike:1
(integer) 0
> SADD bikes:racing:france bike:2 bike:3
(integer) 2
> SADD bikes:racing:usa bike:1 bike:4
(integer) 2

----------------------------------------

TITLE: Preventing Self-Notifications in Redis Tracking
DESCRIPTION: This option prevents the sending of notifications about keys modified by the current connection itself.

LANGUAGE: redis
CODE:
NOLOOP

----------------------------------------

TITLE: Claiming Pending Message in Redis Stream
DESCRIPTION: Claims a pending message for consumer 'Alice' in the 'italy_riders' group

LANGUAGE: redis
CODE:
> XCLAIM race:italy italy_riders Alice 60000 1692632647899-0
1) 1) "1692632647899-0"
   2) 1) "rider"
      2) "Royce"

----------------------------------------

TITLE: Basic HELLO Command Usage in Redis RESP2
DESCRIPTION: Example of using the HELLO command without arguments in Redis 6.2 with RESP2 protocol, showing the default server and connection properties response.

LANGUAGE: redis
CODE:
> HELLO
 1) "server"
 2) "redis"
 3) "version"
 4) "255.255.255"
 5) "proto"
 6) (integer) 2
 7) "id"
 8) (integer) 5
 9) "mode"
10) "standalone"
11) "role"
12) "master"
13) "modules"
14) (empty array)

----------------------------------------

TITLE: Querying ACL Rules with Redis ACL LIST Command
DESCRIPTION: Example showing the ACL LIST command output which displays two user configurations. The output shows permissions and restrictions for users 'antirez' and 'default', including their password hashes, key pattern access, and command category permissions.

LANGUAGE: redis
CODE:
> ACL LIST
1) "user antirez on #9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 ~objects:* &* +@all -@admin -@dangerous"
2) "user default on nopass ~* &* +@all"

----------------------------------------

TITLE: Reading Range of Entries from a Redis Stream
DESCRIPTION: Reads two stream entries starting from a specific ID using XRANGE

LANGUAGE: redis
CODE:
> XRANGE race:france 1692632086370-0 + COUNT 2
1) 1) "1692632086370-0"
   2) 1) "rider"
      2) "Castilla"
      3) "speed"
      4) "30.2"
      5) "position"
      6) "1"
      7) "location_id"
      8) "1"
2) 1) "1692632094485-0"
   2) 1) "rider"
      2) "Norem"
      3) "speed"
      4) "28.8"
      5) "position"
      6) "3"
      7) "location_id"
      8) "1"

----------------------------------------

TITLE: HELLO Command with RESP3 Protocol Switch
DESCRIPTION: Demonstrates switching to RESP3 protocol by calling HELLO with protocol version 3, showing the modified response format with map-style output.

LANGUAGE: redis
CODE:
> HELLO 3
1# "server" => "redis"
2# "version" => "6.0.0"
3# "proto" => (integer) 3
4# "id" => (integer) 10
5# "mode" => "standalone"
6# "role" => "master"
7# "modules" => (empty array)

----------------------------------------

TITLE: Using PTTL Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the PTTL command in Redis. It sets a key with a value, sets an expiration time for the key, and then checks the remaining time to live using PTTL.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXPIRE mykey 1
PTTL mykey

----------------------------------------

TITLE: Basic SCAN Usage in Redis
DESCRIPTION: Demonstrates basic cursor-based iteration over Redis keys using the SCAN command. Shows how the cursor value changes between calls and how iteration completes when cursor returns to 0.

LANGUAGE: redis
CODE:
redis 127.0.0.1:6379> scan 0
1) "17"
2)  1) "key:12"
    2) "key:8"
    3) "key:4"
    4) "key:14"
    5) "key:16"
    6) "key:17"
    7) "key:15"
    8) "key:10"
    9) "key:3"
   10) "key:7"
   11) "key:1"
redis 127.0.0.1:6379> scan 17
1) "0"
2) 1) "key:5"
   2) "key:18"
   3) "key:0"
   4) "key:2"
   5) "key:19"
   6) "key:13"
   7) "key:6"
   8) "key:9"
   9) "key:11"

----------------------------------------

TITLE: Viewing Redis Script Commands
DESCRIPTION: Shows how to list all available Redis script management commands using the SCRIPT HELP command.

LANGUAGE: redis
CODE:
SCRIPT HELP

----------------------------------------

TITLE: Getting Stream Information in Redis
DESCRIPTION: Retrieves detailed information about the 'race:italy' stream

LANGUAGE: redis
CODE:
> XINFO STREAM race:italy
 1) "length"
 2) (integer) 5
 3) "radix-tree-keys"
 4) (integer) 1
 5) "radix-tree-nodes"
 6) (integer) 2
 7) "last-generated-id"
 8) "1692632678249-0"
 9) "groups"
10) (integer) 1
11) "first-entry"
12) 1) "1692632639151-0"
    2) 1) "rider"
       2) "Castilla"
13) "last-entry"
14) 1) "1692632678249-0"
    2) 1) "rider"
       2) "Norem"

----------------------------------------

TITLE: Killing Clients by Address in Redis
DESCRIPTION: Demonstrates how to kill clients connected to a specific IP address and port using the ADDR filter.

LANGUAGE: redis
CODE:
CLIENT KILL ADDR ip:port

----------------------------------------

TITLE: Querying Client Connection Info in Redis CLI
DESCRIPTION: Demonstrates how to use the CLIENT INFO command to retrieve information about the current client connection. This command returns connection statistics and details in a human-readable format, similar to CLIENT LIST but only for the current connection.

LANGUAGE: cli
CODE:
CLIENT INFO

----------------------------------------

TITLE: Updating a Simple Sorted Set Index in Redis
DESCRIPTION: Demonstrates how to update an existing index entry when a user's age changes.

LANGUAGE: redis
CODE:
HSET user:1 age 39
ZADD user.age.index 39 1

----------------------------------------

TITLE: Getting Consumer Group Information in Redis Stream
DESCRIPTION: Retrieves information about consumer groups associated with the 'race:italy' stream

LANGUAGE: redis
CODE:
> XINFO GROUPS race:italy
1) 1) "name"
   2) "italy_riders"
   3) "consumers"
   4) (integer) 3
   5) "pending"
   6) (integer) 2
   7) "last-delivered-id"
   8) "1692632662819-0"

----------------------------------------

TITLE: Killing Clients by Age in Redis
DESCRIPTION: Demonstrates how to close all connections older than a specified age in seconds using the MAXAGE filter.

LANGUAGE: redis
CODE:
CLIENT KILL MAXAGE maxage

----------------------------------------

TITLE: Setting List Elements with LSET in Redis CLI
DESCRIPTION: This example demonstrates how to use the LSET command to modify elements in a Redis list. It shows creating a list, setting values at specific indexes, and retrieving the updated list. The example also includes usage of RPUSH for list creation and LRANGE for viewing the list contents.

LANGUAGE: cli
CODE:
RPUSH mylist "one"
RPUSH mylist "two"
RPUSH mylist "three"
LSET mylist 0 "four"
LSET mylist -2 "five"
LRANGE mylist 0 -1

----------------------------------------

TITLE: Basic Redis EVAL Script Example
DESCRIPTION: Simple example demonstrating how to execute a Lua script using Redis EVAL command that returns the first argument passed to it. The script takes no key arguments (0) and one string argument 'hello'.

LANGUAGE: redis
CODE:
> EVAL "return ARGV[1]" 0 hello
"hello"

----------------------------------------

TITLE: Querying Key Expiration Time in Redis CLI
DESCRIPTION: Demonstrates setting a key with value "Hello", setting its expiration time using EXPIREAT, and then querying the expiration timestamp using EXPIRETIME. Shows the complete workflow for managing and checking key expiration times.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXPIREAT mykey 33177117420
EXPIRETIME mykey

----------------------------------------

TITLE: Inspecting Detailed Pending Entries
DESCRIPTION: Demonstrates the extended form of XPENDING command that shows detailed information about pending messages including message ID, owner, idle time, and delivery count.

LANGUAGE: redis
CODE:
> XPENDING mystream group55 - + 10
1) 1) 1526984818136-0
   2) "consumer-123"
   3) (integer) 196415
   4) (integer) 1

----------------------------------------

TITLE: Using Multiple Filters in Redis CLIENT KILL
DESCRIPTION: Shows how to combine multiple filters in a single CLIENT KILL command, which are handled via logical AND.

LANGUAGE: redis
CODE:
CLIENT KILL addr 127.0.0.1:12345 type pubsub

----------------------------------------

TITLE: Retrieving Connection ID in Redis CLI
DESCRIPTION: Demonstrates how to get the current connection's unique identifier using the CLIENT ID command. The returned ID is guaranteed to be unique and monotonically increasing across connections.

LANGUAGE: cli
CODE:
CLIENT ID

----------------------------------------

TITLE: Ruby Cluster Example Application
DESCRIPTION: Sample Ruby application demonstrating Redis Cluster operations with error handling

LANGUAGE: ruby
CODE:
require './cluster'

if ARGV.length != 2
    startup_nodes = [
        {:host => "127.0.0.1", :port => 7000},
        {:host => "127.0.0.1", :port => 7001}
    ]
else
    startup_nodes = [
        {:host => ARGV[0], :port => ARGV[1].to_i}
    ]
end

rc = RedisCluster.new(startup_nodes,32,:timeout => 0.1)

last = false

while not last
    begin
        last = rc.get("__last__")
        last = 0 if !last
    rescue => e
        puts "error #{e.to_s}"
        sleep 1
    end
end

((last.to_i+1)..1000000000).each{|x|
    begin
        rc.set("foo#{x}",x)
        puts rc.get("foo#{x}")
        rc.set("__last__",x)
    rescue => e
        puts "error #{e.to_s}"
    end
    sleep 0.1
}

----------------------------------------

TITLE: Basic Sorting in Redis
DESCRIPTION: Demonstrates the simplest form of the SORT command, which sorts elements numerically from small to large.

LANGUAGE: redis
CODE:
SORT mylist

----------------------------------------

TITLE: Demonstrating Redis RPUSHX List Operation
DESCRIPTION: Example showing how RPUSHX only appends to existing lists, contrasting with RPUSH behavior. The example demonstrates that RPUSHX only works when the target list exists, while attempting to use it on a non-existent list has no effect.

LANGUAGE: cli
CODE:
RPUSH mylist "Hello"
RPUSHX mylist "World"
RPUSHX myotherlist "World"
LRANGE mylist 0 -1
LRANGE myotherlist 0 -1

----------------------------------------

TITLE: Executing Redis SHUTDOWN Command with Modifiers
DESCRIPTION: Examples of using the SHUTDOWN command with various modifiers to alter its behavior. These modifiers include SAVE, NOSAVE, NOW, FORCE, and ABORT.

LANGUAGE: redis
CODE:
SHUTDOWN SAVE
SHUTDOWN NOSAVE
SHUTDOWN NOW
SHUTDOWN FORCE
SHUTDOWN ABORT

----------------------------------------

TITLE: Checking Set Membership with SISMEMBER in Redis CLI
DESCRIPTION: This example demonstrates how to use the SISMEMBER command in Redis to check if a member is part of a set. It first adds an element to a set using SADD, then checks for membership of existing and non-existing elements.

LANGUAGE: cli
CODE:
SADD myset "one"
SISMEMBER myset "one"
SISMEMBER myset "two"

----------------------------------------

TITLE: Querying Redis Stream Entries by Time Range
DESCRIPTION: This example shows how to use XRANGE with incomplete IDs to query entries within a specific time range.

LANGUAGE: redis
CODE:
> XRANGE somestream 1526985054069 1526985055069

----------------------------------------

TITLE: Combining SORT Modifiers in Redis
DESCRIPTION: Shows how multiple modifiers can be used together for complex sorting operations.

LANGUAGE: redis
CODE:
SORT mylist LIMIT 0 5 ALPHA DESC

----------------------------------------

TITLE: Iterating Through a Redis Stream
DESCRIPTION: This set of examples shows how to use XRANGE to iterate through a stream, using the ID of the last entry as the start of the next query.

LANGUAGE: redis
CODE:
> XRANGE writers - + COUNT 2
1) 1) 1526985676425-0
   2) 1) "name"
      2) "Virginia"
      3) "surname"
      4) "Woolf"
2) 1) 1526985685298-0
   2) 1) "name"
      2) "Jane"
      3) "surname"
      4) "Austen"

LANGUAGE: redis
CODE:
> XRANGE writers (1526985685298-0 + COUNT 2
1) 1) 1526985691746-0
   2) 1) "name"
      2) "Toni"
      3) "surname"
      4) "Morrison"
2) 1) 1526985712947-0
   2) 1) "name"
      2) "Agatha"
      3) "surname"
      4) "Christie"

----------------------------------------

TITLE: Working with Redis Hashes
DESCRIPTION: Use HMSET to set multiple fields in a hash and HGET to retrieve individual field values.

LANGUAGE: Redis
CODE:
HMSET myuser name Salvatore surname Sanfilippo country Italy
HGET myuser surname => Sanfilippo

----------------------------------------

TITLE: Fetching a Single Entry from a Redis Stream
DESCRIPTION: This example shows how to use XRANGE to fetch a single entry from a stream by specifying the same ID for both start and end range.

LANGUAGE: redis
CODE:
> XRANGE mystream 1526984818136-0 1526984818136-0
1) 1) 1526984818136-0
   2) 1) "duration"
      2) "1532"
      3) "event-id"
      4) "5"
      5) "user-id"
      6) "7782813"

----------------------------------------

TITLE: Sorting by External Keys in Redis
DESCRIPTION: Illustrates how to sort elements using external keys as weights for comparison.

LANGUAGE: redis
CODE:
SORT mylist BY weight_*

----------------------------------------

TITLE: Adding Entries to Redis Stream with Auto-Generated IDs
DESCRIPTION: Example showing how to add entries to a Redis stream with both system-generated and manually specified IDs. Demonstrates ID format and sequence generation.

LANGUAGE: redis-cli
CODE:
> XADD mystream 1526919030474-55 message "Hello,"
"1526919030474-55"
> XADD mystream 1526919030474-* message " World!"
"1526919030474-56"

----------------------------------------

TITLE: Retrieving Node ID with CLUSTER MYID
DESCRIPTION: The CLUSTER MYID command returns the unique identifier associated with the currently connected Redis cluster node. This identifier is auto-generated and is used to uniquely identify nodes within the cluster configuration.

LANGUAGE: redis
CODE:
CLUSTER MYID

----------------------------------------

TITLE: Client Flags in Redis CLIENT LIST Output
DESCRIPTION: This snippet lists and describes the various client flags that can be returned in the CLIENT LIST command output. Each flag is represented by a single letter and indicates a specific client state or characteristic.

LANGUAGE: plaintext
CODE:
A: connection to be closed ASAP
b: the client is waiting in a blocking operation
c: connection to be closed after writing entire reply
d: a watched keys has been modified - EXEC will fail
e: the client is excluded from the client eviction mechanism
i: the client is waiting for a VM I/O (deprecated)
M: the client is a master
N: no specific flag set
O: the client is a client in MONITOR mode
P: the client is a Pub/Sub subscriber
r: the client is in readonly mode against a cluster node
S: the client is a replica node connection to this instance
u: the client is unblocked
U: the client is connected via a Unix domain socket
x: the client is in a MULTI/EXEC context
t: the client enabled keys tracking in order to perform client side caching
T: the client will not touch the LRU/LFU of the keys it accesses
R: the client tracking target client is invalid
B: the client enabled broadcast tracking mode

----------------------------------------

TITLE: Redis PFCOUNT Basic Usage Example
DESCRIPTION: Demonstrates basic usage of PFADD and PFCOUNT commands with single and multiple HyperLogLog keys. Shows how duplicate values are handled and how to count unique elements across multiple HyperLogLog structures.

LANGUAGE: cli
CODE:
PFADD hll foo bar zap
PFADD hll zap zap zap
PFADD hll foo bar
PFCOUNT hll
PFADD some-other-hll 1 2 3
PFCOUNT hll some-other-hll

----------------------------------------

TITLE: Retrieving Multiple Keys in Redis SORT
DESCRIPTION: Demonstrates retrieving multiple external keys and the sorted element itself.

LANGUAGE: redis
CODE:
SORT mylist BY weight_* GET object_* GET #

----------------------------------------

TITLE: Filtering Pending Entries by Idle Time
DESCRIPTION: Shows how to filter pending entries based on their idle time in milliseconds, useful for identifying messages that haven't been processed for a specific duration.

LANGUAGE: redis
CODE:
> XPENDING mystream group55 IDLE 9000 - + 10
> XPENDING mystream group55 IDLE 9000 - + 10 consumer-123

----------------------------------------

TITLE: Performing Set Operations in Redis
DESCRIPTION: Shows various set operations including intersection (SINTER), union (SUNION), and difference (SDIFF) between multiple sets.

LANGUAGE: redis
CODE:
> SADD bikes:racing:france bike:1 bike:2 bike:3
(integer) 3
> SADD bikes:racing:usa bike:1 bike:4
(integer) 2
> SADD bikes:racing:italy bike:1 bike:2 bike:3 bike:4
(integer) 4
> SINTER bikes:racing:france bikes:racing:usa bikes:racing:italy
1) "bike:1"
> SUNION bikes:racing:france bikes:racing:usa bikes:racing:italy
1) "bike:2"
2) "bike:1"
3) "bike:4"
4) "bike:3"
> SDIFF bikes:racing:france bikes:racing:usa bikes:racing:italy
(empty array)
> SDIFF bikes:racing:france bikes:racing:usa
1) "bike:3"
2) "bike:2"
> SDIFF bikes:racing:usa bikes:racing:france
1) "bike:4"

----------------------------------------

TITLE: Redis CLUSTER SETSLOT MIGRATING Command
DESCRIPTION: Sets a hash slot to migrating state on the source node. Handles existing keys normally while redirecting non-existent key queries to the destination node using ASK redirection.

LANGUAGE: redis
CODE:
CLUSTER SETSLOT <slot> MIGRATING <destination-node-id>

----------------------------------------

TITLE: Querying All Entries in a Redis Stream
DESCRIPTION: This example demonstrates how to use the XRANGE command to retrieve all entries in a Redis stream using the special IDs '-' and '+'.

LANGUAGE: redis
CODE:
> XRANGE somestream - +
1) 1) 1526985054069-0
   2) 1) "duration"
      2) "72"
      3) "event-id"
      4) "9"
      5) "user-id"
      6) "839248"
2) 1) 1526985069902-0
   2) 1) "duration"
      2) "415"
      3) "event-id"
      4) "2"
      5) "user-id"
      6) "772213"
... other entries here ...

----------------------------------------

TITLE: Adding and Querying Geospatial Data in Redis CLI
DESCRIPTION: This example demonstrates how to use the GEOADD command to add locations to a 'Sicily' key, then use GEODIST to calculate distance between points, and GEORADIUS to find locations within a specified radius.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEODIST Sicily Palermo Catania
GEORADIUS Sicily 15 37 100 km
GEORADIUS Sicily 15 37 200 km

----------------------------------------

TITLE: Executing CLIENT KILL Command (New Format) in Redis
DESCRIPTION: Shows the new format of the CLIENT KILL command, which allows killing clients using various filters such as address, ID, type, user, and age.

LANGUAGE: redis
CODE:
CLIENT KILL <filter> <value> ... ... <filter> <value>

----------------------------------------

TITLE: Demonstrating HyperLogLog Operations in Redis
DESCRIPTION: Example showing basic HyperLogLog operations including adding elements with PFADD, counting unique elements with PFCOUNT, and merging HyperLogLogs with PFMERGE. The example demonstrates tracking unique bikes across different collections.

LANGUAGE: redis-cli
CODE:
> PFADD bikes Hyperion Deimos Phoebe Quaoar
(integer) 1
> PFCOUNT bikes
(integer) 4
> PFADD commuter_bikes Salacia Mimas Quaoar
(integer) 1
> PFMERGE all_bikes bikes commuter_bikes
OK
> PFCOUNT all_bikes
(integer) 6

----------------------------------------

TITLE: Querying Key Count in Redis Cluster Hash Slot
DESCRIPTION: Demonstrates how to use the CLUSTER COUNTKEYSINSLOT command to get the number of keys in a specific hash slot. The command returns an integer representing the number of keys in the specified slot. Note that this only counts keys in the local dataset of the queried node.

LANGUAGE: redis
CODE:
> CLUSTER COUNTKEYSINSLOT 7000
(integer) 50341

----------------------------------------

TITLE: ZRANGE with BYSCORE and LIMIT
DESCRIPTION: Demonstrates using ZRANGE with BYSCORE option to query by score range and LIMIT to restrict the number of returned elements.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one" 2 "two" 3 "three"
ZRANGE myzset (1 +inf BYSCORE LIMIT 1 1

----------------------------------------

TITLE: Configuring LFU Parameters
DESCRIPTION: Sets the logarithm factor and decay time parameters for the LFU (Least Frequently Used) eviction algorithm

LANGUAGE: redis-conf
CODE:
lfu-log-factor 10
lfu-decay-time 1

----------------------------------------

TITLE: Redis XAUTOCLAIM Example Usage
DESCRIPTION: Example demonstrating how to claim up to 25 pending stream entries that have been idle for at least an hour (3600000 milliseconds) using the XAUTOCLAIM command. The example shows the command's response format including the cursor ID, claimed messages, and array of deleted message IDs.

LANGUAGE: redis
CODE:
> XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 25
1) "0-0"
2) 1) 1) "1609338752495-0"
      2) 1) "field"
         2) "value"
3) (empty array)

----------------------------------------

TITLE: Connecting Redis Cluster Nodes with CLUSTER MEET Command
DESCRIPTION: Example of using CLUSTER MEET commands to connect multiple Redis cluster nodes. This snippet demonstrates how to connect node A to nodes B, C, and D, which will result in a full mesh network formation.

LANGUAGE: redis
CODE:
CLUSTER MEET B-ip B-port
CLUSTER MEET C-ip C-port
CLUSTER MEET D-ip D-port

----------------------------------------

TITLE: Trimming Redis Stream to Exact Length
DESCRIPTION: This example demonstrates how to trim a Redis stream to exactly the latest 1000 items using the MAXLEN strategy.

LANGUAGE: redis
CODE:
XTRIM mystream MAXLEN 1000

----------------------------------------

TITLE: Using GEOHASH Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the GEOHASH command in Redis. It first adds two locations (Palermo and Catania) to a geospatial index named 'Sicily' using GEOADD, then retrieves their Geohash strings using GEOHASH.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEOHASH Sicily Palermo Catania

----------------------------------------

TITLE: Executing CLIENT KILL Command (Old Format) in Redis
DESCRIPTION: Demonstrates the old format of the CLIENT KILL command, which closes a client connection based on its IP address and port.

LANGUAGE: redis
CODE:
CLIENT KILL addr:port

----------------------------------------

TITLE: Reactive Redis Connection with Lettuce
DESCRIPTION: Implementation of reactive Redis operations using Lettuce's reactive API, demonstrating string and hash operations

LANGUAGE: java
CODE:
package org.example;
import java.util.*;
import io.lettuce.core.*;
import io.lettuce.core.api.reactive.RedisReactiveCommands;
import io.lettuce.core.api.StatefulRedisConnection;

public class Main {
  public static void main(String[] args) {
    RedisClient redisClient = RedisClient.create("redis://localhost:6379");

    try (StatefulRedisConnection<String, String> connection = redisClient.connect()) {
      RedisReactiveCommands<String, String> reactiveCommands = connection.reactive();

      // Reactively store & retrieve a simple string
      reactiveCommands.set("foo", "bar").block();
      reactiveCommands.get("foo").doOnNext(System.out::println).block(); // prints bar

      // Reactively store key-value pairs in a hash directly
      Map<String, String> hash = new HashMap<>();
      hash.put("name", "John");
      hash.put("surname", "Smith");
      hash.put("company", "Redis");
      hash.put("age", "29");

      reactiveCommands.hset("user-session:124", hash).then(
              reactiveCommands.hgetall("user-session:124")
                  .collectMap(KeyValue::getKey, KeyValue::getValue).doOnNext(System.out::println))
          .block();
      // Prints: {surname=Smith, name=John, company=Redis, age=29}

    } finally {
      redisClient.shutdown();
    }
  }
}

----------------------------------------

TITLE: Subscribing to Redis Channels
DESCRIPTION: The SUBSCRIBE command subscribes a client to specified channels. Once subscribed, the client can only issue certain commands like SUBSCRIBE, UNSUBSCRIBE, PING, RESET, and QUIT. RESP3 protocol allows additional commands in subscribed state.

LANGUAGE: redis
CODE:
SUBSCRIBE channel [channel ...]

----------------------------------------

TITLE: Basic ZRANGE Usage in Redis CLI
DESCRIPTION: Demonstrates basic usage of ZRANGE command to retrieve elements from a sorted set using index ranges.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one" 2 "two" 3 "three"
ZRANGE myzset 0 -1
ZRANGE myzset 2 3
ZRANGE myzset -2 -1

----------------------------------------

TITLE: Counting Elements in Redis Sets
DESCRIPTION: Shows how to use SCARD to get the number of elements in a Redis set.

LANGUAGE: redis
CODE:
> SCARD bikes:racing:france
(integer) 3

----------------------------------------

TITLE: Retrieving String Length with Redis STRLEN Command
DESCRIPTION: This example demonstrates how to use the STRLEN command in Redis to get the length of a string value. It shows setting a key with a string value, then querying its length, and also attempting to get the length of a non-existing key.

LANGUAGE: cli
CODE:
SET mykey "Hello world"
STRLEN mykey
STRLEN nonexisting

----------------------------------------

TITLE: Authenticating with Redis using single-argument AUTH command
DESCRIPTION: This snippet shows the syntax for authenticating with a Redis server using the single-argument version of the AUTH command. This version is used for Redis versions prior to 6.0 or when only using the requirepass option.

LANGUAGE: redis
CODE:
AUTH <password>

----------------------------------------

TITLE: Multiple Key Migration in Redis
DESCRIPTION: Example of migrating multiple keys using the MIGRATE command with !KEYS option. This command transfers key1, key2, and key3 to a Redis instance at 192.168.1.34:6379 with a timeout of 5000ms.

LANGUAGE: redis
CODE:
MIGRATE 192.168.1.34 6379 "" 0 5000 KEYS key1 key2 key3

----------------------------------------

TITLE: Killing Clients by User in Redis
DESCRIPTION: Shows how to close all connections authenticated with a specific ACL username.

LANGUAGE: redis
CODE:
CLIENT KILL USER username

----------------------------------------

TITLE: Disabling JVM DNS Cache for Redis
DESCRIPTION: Code snippet to disable JVM DNS cache for optimal load balancing with multiple Redis endpoints

LANGUAGE: java
CODE:
java.security.Security.setProperty("networkaddress.cache.ttl","0");
java.security.Security.setProperty("networkaddress.cache.negative.ttl", "0");

----------------------------------------

TITLE: Demonstrating ZINTERCARD Usage in Redis CLI
DESCRIPTION: Shows how to use ZINTERCARD command to count intersecting elements between sorted sets, including basic set creation with ZADD, comparison with ZINTER, and usage of the LIMIT parameter

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZADD zset2 3 "three"
ZINTER 2 zset1 zset2
ZINTERCARD 2 zset1 zset2
ZINTERCARD 2 zset1 zset2 LIMIT 1

----------------------------------------

TITLE: Redis CLUSTER SETSLOT STABLE Command
DESCRIPTION: Clears migrating/importing state from a hash slot. Used primarily for fixing cluster states through redis-cli --cluster fix.

LANGUAGE: redis
CODE:
CLUSTER SETSLOT <slot> STABLE

----------------------------------------

TITLE: Installing Redis Binaries
DESCRIPTION: Command to install the compiled Redis binaries in /usr/local/bin directory. Requires sudo privileges.

LANGUAGE: bash
CODE:
sudo make install

----------------------------------------

TITLE: Installing NRedisStack Package
DESCRIPTION: Install the NRedisStack package using the dotnet CLI command

LANGUAGE: bash
CODE:
dotnet add package NRedisStack

----------------------------------------

TITLE: Redirecting Invalidation Messages in Redis
DESCRIPTION: This option redirects invalidation messages to a specific connection ID. The target connection must exist, and its ID can be obtained using the CLIENT ID command.

LANGUAGE: redis
CODE:
REDIRECT <id>

----------------------------------------

TITLE: Resetting ACL User Permissions
DESCRIPTION: Demonstrates resetting all permissions for user 'antirez' to default state (inactive, no permissions).

LANGUAGE: redis
CODE:
ACL SETUSER antirez reset

----------------------------------------

TITLE: Basic Redis Increment Operation Example
DESCRIPTION: Demonstrates basic increment operation on a Redis key using SET, INCR and GET commands.

LANGUAGE: cli
CODE:
SET mykey "10"
INCR mykey
GET mykey

----------------------------------------

TITLE: Basic SETNX Usage Example - Redis CLI
DESCRIPTION: Demonstrates basic usage of SETNX command to set a value only if the key doesn't exist. Shows how SETNX prevents overwriting existing values.

LANGUAGE: cli
CODE:
SETNX mykey "Hello"
SETNX mykey "World"
GET mykey

----------------------------------------

TITLE: Converting PEM to PFX Certificate
DESCRIPTION: Command to convert user certificate and private key from PEM format to PFX

LANGUAGE: bash
CODE:
openssl pkcs12 -inkey redis_user_private.key -in redis_user.crt -export -out redis.pfx

----------------------------------------

TITLE: Enabling Broadcasting Mode in Redis Tracking
DESCRIPTION: This option enables tracking in broadcasting mode, where invalidation messages are reported for all specified prefixes, regardless of the keys requested by the connection.

LANGUAGE: redis
CODE:
BCAST

----------------------------------------

TITLE: Redis CLUSTER SETSLOT NODE Command
DESCRIPTION: Associates hash slot with specified node, manages slot ownership transitions, and handles configuration epochs for cluster consistency.

LANGUAGE: redis
CODE:
CLUSTER SETSLOT <slot> NODE <node-id>

----------------------------------------

TITLE: Checking Redis Service Status on macOS
DESCRIPTION: This command checks the status of the Redis service managed by launchd. It provides information about whether the service is running and its process details.

LANGUAGE: bash
CODE:
brew services info redis

----------------------------------------

TITLE: Querying Sentinel for Replica List in Redis
DESCRIPTION: This command retrieves a list of replica instances for a given master name from a Sentinel instance.

LANGUAGE: redis
CODE:
SENTINEL replicas master-name

----------------------------------------

TITLE: Executing Redis ACL DELUSER Command
DESCRIPTION: Example showing how to delete a Redis ACL user named 'antirez' using the ACL DELUSER command. The command returns 1 on successful deletion of the user.

LANGUAGE: redis
CODE:
> ACL DELUSER antirez
1

----------------------------------------

TITLE: Setting Redis client connection timeout
DESCRIPTION: Configure a timeout for the Redis client connection to handle slow or unresponsive servers.

LANGUAGE: typescript
CODE:
const client = createClient({
  // setting a 10-second timeout  
  connectTimeout: 10000 // in milliseconds
});
client.on('error', error => console.error('Redis client error:', error));

----------------------------------------

TITLE: Querying Replica Role Information in Redis
DESCRIPTION: Example output of the ROLE command when called on a Redis replica instance. It returns the role, master IP and port, connection state, and replication offset.

LANGUAGE: redis
CODE:
1) "slave"
2) "127.0.0.1"
3) (integer) 9000
4) "connected"
5) (integer) 3167038

----------------------------------------

TITLE: Secure Redis Connection with TLS
DESCRIPTION: Establishes secure connection to Redis using TLS with certificate validation

LANGUAGE: csharp
CODE:
ConfigurationOptions options = new ConfigurationOptions
{
    EndPoints = { { "my-redis.cloud.redislabs.com", 6379 } },
    User = "default",
    Password = "secret",
    Ssl = true,
    SslProtocols = System.Security.Authentication.SslProtocols.Tls12                
};

options.CertificateSelection += delegate
{
    return new X509Certificate2("redis.pfx", "secret");
};
options.CertificateValidation += ValidateServerCertificate;

bool ValidateServerCertificate(
        object sender,
        X509Certificate? certificate,
        X509Chain? chain,
        SslPolicyErrors sslPolicyErrors)
{
    if (certificate == null) {
        return false;       
    }

    var ca = new X509Certificate2("redis_ca.pem");
    bool verdict = (certificate.Issuer == ca.Subject);
    if (verdict) {
        return true;
    }
    Console.WriteLine("Certificate error: {0}", sslPolicyErrors);
    return false;
}

ConnectionMultiplexer muxer = ConnectionMultiplexer.Connect(options);   
            
IDatabase conn = muxer.GetDatabase();

conn.StringSet("foo", "bar");

Console.WriteLine(conn.StringGet("foo"));

----------------------------------------

TITLE: Querying Sentinel for Other Sentinels in Redis
DESCRIPTION: This command retrieves a list of other Sentinel instances monitoring the same master, which can be used to update the client's internal list of Sentinels.

LANGUAGE: redis
CODE:
SENTINEL sentinels <master-name>

----------------------------------------

TITLE: Using GEOPOS Command in Redis CLI
DESCRIPTION: Demonstrates adding locations to a geospatial index using GEOADD and retrieving their coordinates using GEOPOS. Shows handling of both existing and non-existing members. Note that coordinates may have small variations from input due to geohash conversion.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEOPOS Sicily Palermo Catania NonExisting

----------------------------------------

TITLE: Setting LRU Sample Size
DESCRIPTION: Configures the number of samples Redis checks for each eviction candidate when using LRU algorithm

LANGUAGE: redis-conf
CODE:
maxmemory-samples 5

----------------------------------------

TITLE: Redis Shutdown Command
DESCRIPTION: Command to safely shutdown Redis server while ensuring data is saved to disk.

LANGUAGE: bash
CODE:
$ redis-cli shutdown

----------------------------------------

TITLE: Measuring Intrinsic System Latency
DESCRIPTION: Command to measure the baseline system latency using redis-cli intrinsic latency test

LANGUAGE: bash
CODE:
./redis-cli --intrinsic-latency 100

----------------------------------------

TITLE: Saving Redis ACLs to File
DESCRIPTION: Demonstrates using the ACL SAVE command to persist access control lists, showing both successful and error scenarios. The command requires Redis to be configured with an aclfile option and proper write permissions.

LANGUAGE: redis
CODE:
> ACL SAVE
+OK

> ACL SAVE
-ERR There was an error trying to save the ACLs. Please check the server logs for more information

----------------------------------------

TITLE: Initializing Go Module for Redis Project
DESCRIPTION: Initialize a Go module for the Redis project using the go mod init command.

LANGUAGE: bash
CODE:
go mod init github.com/my/repo

----------------------------------------

TITLE: Querying Multiple Scores from Redis Sorted Set using ZMSCORE
DESCRIPTION: Demonstrates how to retrieve scores for multiple members from a Redis sorted set using ZMSCORE. The example shows adding members with scores first using ZADD, then querying their scores including a non-existent member which returns nil.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZMSCORE myzset "one" "two" "nofield"

----------------------------------------

TITLE: Redis Configuration Setup
DESCRIPTION: Commands for setting up Redis configuration files and working directory.

LANGUAGE: bash
CODE:
sudo cp redis.conf /etc/redis/6379.conf
sudo mkdir /var/redis/6379

----------------------------------------

TITLE: Tracing Redis Disk Operations
DESCRIPTION: Commands for tracing Redis disk operations using strace

LANGUAGE: shell
CODE:
sudo strace -p $(pidof redis-server) -T -e trace=fdatasync
sudo strace -p $(pidof redis-server) -T -e trace=fdatasync,write
sudo strace -f -p $(pidof redis-server) -T -e trace=fdatasync,write 2>&1 | grep -v '0.0' | grep -v unfinished

----------------------------------------

TITLE: Calculating Distances with GEODIST in Redis CLI
DESCRIPTION: This snippet demonstrates how to use the GEODIST command in Redis CLI. It first adds two locations to a geospatial index named 'Sicily' using GEOADD, then calculates the distance between them using GEODIST with different units of measurement.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEODIST Sicily Palermo Catania
GEODIST Sicily Palermo Catania km
GEODIST Sicily Palermo Catania mi
GEODIST Sicily Foo Bar

----------------------------------------

TITLE: Implementing hash slot calculation in Ruby
DESCRIPTION: This code snippet demonstrates how to calculate the hash slot for a given key in Redis Cluster using Ruby. It includes support for hash tags.

LANGUAGE: ruby
CODE:
def HASH_SLOT(key)
    s = key.index "{"
    if s
        e = key.index "}",s+1
        if e && e != s+1
            key = key[s+1..e-1]
        end
    end
    crc16(key) % 16384
end

----------------------------------------

TITLE: Renaming Redis CONFIG Command for Security
DESCRIPTION: This configuration example renames the CONFIG command to an unguessable string to prevent unauthorized configuration changes.

LANGUAGE: redis
CODE:
rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52

----------------------------------------

TITLE: Removing Hash Slot Associations in Redis Cluster
DESCRIPTION: This example demonstrates how to use the CLUSTER DELSLOTS command to remove the association for slots 5000 and 5001 from the node receiving the command. The command returns 'OK' upon successful execution.

LANGUAGE: redis
CODE:
> CLUSTER DELSLOTS 5000 5001
OK

----------------------------------------

TITLE: Storing a key-value pair in Redis
DESCRIPTION: Use the SET command to store a value in a key and GET to retrieve it.

LANGUAGE: Redis
CODE:
SET foo bar
GET foo => bar

----------------------------------------

TITLE: Executing SDIFFSTORE Command in Redis CLI
DESCRIPTION: This example demonstrates the usage of SDIFFSTORE command in Redis. It creates two sets, performs a set difference operation, and stores the result in a new key. The example then shows how to verify the contents of the resulting set.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SDIFFSTORE key key1 key2
SMEMBERS key

----------------------------------------

TITLE: Downloading Redis Source Files using wget
DESCRIPTION: Command to download the latest stable version of Redis source files from the official Redis downloads site.

LANGUAGE: bash
CODE:
wget https://download.redis.io/redis-stable.tar.gz

----------------------------------------

TITLE: Atomic incrementing in Redis
DESCRIPTION: Use the INCR command to atomically increment a numeric value stored in a key.

LANGUAGE: Redis
CODE:
SET foo 10
INCR foo => 11
INCR foo => 12
INCR foo => 13

----------------------------------------

TITLE: Querying Total Command Count in Redis CLI
DESCRIPTION: This command returns an integer reply representing the total number of commands available in the Redis server. It can be used to get an overview of the server's capabilities.

LANGUAGE: cli
CODE:
COMMAND COUNT

----------------------------------------

TITLE: Implementing hash slot calculation in C
DESCRIPTION: This code snippet shows how to calculate the hash slot for a given key in Redis Cluster using C. It includes support for hash tags and handles edge cases.

LANGUAGE: c
CODE:
unsigned int HASH_SLOT(char *key, int keylen) {
    int s, e; /* start-end indexes of { and } */

    /* Search the first occurrence of '{'. */
    for (s = 0; s < keylen; s++)
        if (key[s] == '{') break;

    /* No '{' ? Hash the whole key. This is the base case. */
    if (s == keylen) return crc16(key,keylen) & 16383;

    /* '{' found? Check if we have the corresponding '}'. */
    for (e = s+1; e < keylen; e++)
        if (key[e] == '}') break;

    /* No '}' or nothing between {} ? Hash the whole key. */
    if (e == keylen || e == s+1) return crc16(key,keylen) & 16383;

    /* If we are here there is both a { and a } on its right. Hash
     * what is in the middle between { and }. */
    return crc16(key+s+1,e-s-1) & 16383;
}

----------------------------------------

TITLE: Deploying RedisInsight without Service on Kubernetes
DESCRIPTION: This YAML configuration creates a RedisInsight deployment without a service. It includes environment variables to set the application host and port, and a liveness probe for health checking.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight
  labels:
    app: redisinsight
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redisinsight
  template:
    metadata:
      labels:
        app: redisinsight
    spec:
      containers:
      - name:  redisinsight
        image: redis/redisinsight:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: RI_APP_HOST
            value: "0.0.0.0"
          - name: RI_APP_PORT
            value: "5540"
        volumeMounts:
        - name: redisinsight
          mountPath: /data
        ports:
        - containerPort: 5540
          protocol: TCP
      livenessProbe:
           httpGet:
              path : /healthcheck/
              port: 5540
           initialDelaySeconds: 5
           periodSeconds: 5
           failureThreshold: 1
      volumes:
      - name: redisinsight
        emptyDir: {}

----------------------------------------

TITLE: Accessing Redis Keys in Modules
DESCRIPTION: Demonstrates how to open and access Redis keys using the low-level API.

LANGUAGE: C
CODE:
RedisModuleKey *key;
key = RedisModule_OpenKey(ctx,argv[1],REDISMODULE_READ);

int keytype = RedisModule_KeyType(key);
if (keytype != REDISMODULE_KEYTYPE_STRING &&
    keytype != REDISMODULE_KEYTYPE_EMPTY)
{
    RedisModule_CloseKey(key);
    return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);
}

----------------------------------------

TITLE: Assigning Hash Slots with CLUSTER ADDSLOTS in Redis
DESCRIPTION: This snippet demonstrates how to use the CLUSTER ADDSLOTS command to assign specific hash slots to a node in Redis Cluster. It assigns slots 1, 2, 3, 4, and 5 to the current node.

LANGUAGE: redis
CODE:
> CLUSTER ADDSLOTS 1 2 3 4 5
OK

----------------------------------------

TITLE: Working with Redis Sorted Sets
DESCRIPTION: Use ZADD to add scored elements to a sorted set and ZRANGE to retrieve elements in order.

LANGUAGE: Redis
CODE:
ZADD zset 10 a
ZADD zset 5 b
ZADD zset 12.55 c
ZRANGE zset 0 -1 => b,a,c

----------------------------------------

TITLE: Querying Server Time with Redis TIME Command
DESCRIPTION: The TIME command returns the current server time as a two-item list: a Unix timestamp and the number of microseconds elapsed in the current second. This interface is similar to the gettimeofday system call.

LANGUAGE: cli
CODE:
TIME
TIME

----------------------------------------

TITLE: Continuing Execution in GDB
DESCRIPTION: After attaching GDB to the Redis process, use the 'continue' command to allow the Redis instance to continue running while GDB is attached.

LANGUAGE: bash
CODE:
(gdb) continue
Continuing.

----------------------------------------

TITLE: Managing Key Expiration in Modules
DESCRIPTION: Shows how to get and set expiration times for Redis keys from within a module.

LANGUAGE: C
CODE:
mstime_t expire = RedisModule_GetExpire(key);

int ret = RedisModule_SetExpire(key, expire_time_ms);

----------------------------------------

TITLE: Executing Redis INFO Command
DESCRIPTION: Basic usage of the INFO command without any parameters, which returns the default set of sections.

LANGUAGE: cli
CODE:
INFO

----------------------------------------

TITLE: Configuring Redis Maximum Clients Example
DESCRIPTION: Example showing Redis server startup with maxclients configuration and resulting limit adjustment message when the requested limit exceeds system capabilities.

LANGUAGE: shell
CODE:
$ ./redis-server --maxclients 100000
[41422] 23 Jan 11:28:33.179 # Unable to set the max number of files limit to 100032 (Invalid argument), setting the max clients configuration to 10112.

----------------------------------------

TITLE: Passing Data to Reply Callback in Redis Module C API
DESCRIPTION: Shows how to pass private data from the blocking thread to the reply callback using RedisModule_UnblockClient and RedisModule_GetBlockedClientPrivateData.

LANGUAGE: c
CODE:
void *threadmain(void *arg) {
    RedisModuleBlockedClient *bc = arg;

    sleep(1); /* Wait one second and unblock. */

    long *mynumber = RedisModule_Alloc(sizeof(long));
    *mynumber = rand();
    RedisModule_UnblockClient(bc,mynumber);
}

int reply_func(RedisModuleCtx *ctx, RedisModuleString **argv,
               int argc)
{
    long *mynumber = RedisModule_GetBlockedClientPrivateData(ctx);
    /* IMPORTANT: don't free mynumber here, but in the
     * free privdata callback. */
    return RedisModule_ReplyWithLongLong(ctx,mynumber);
}

void free_privdata(void *privdata) {
    RedisModule_Free(privdata);
}

----------------------------------------

TITLE: Retrieving Keys from a Hash Slot in Redis Cluster
DESCRIPTION: The CLUSTER GETKEYSINSLOT command returns an array of key names stored in the specified hash slot of the contacted Redis Cluster node. It takes two arguments: the hash slot number and the maximum number of keys to return. This command is primarily used during the rehashing process when moving slots between nodes.

LANGUAGE: redis
CODE:
> CLUSTER GETKEYSINSLOT 7000 3
1) "key_39015"
2) "key_89793"
3) "key_92937"

----------------------------------------

TITLE: Compiling Redis from Source
DESCRIPTION: Commands to extract the Redis source tarball, change to the root directory, and compile Redis using the make command.

LANGUAGE: bash
CODE:
tar -xzvf redis-stable.tar.gz
cd redis-stable
make

----------------------------------------

TITLE: Demonstrating SMOVE Command Usage in Redis CLI
DESCRIPTION: This example shows how to use the SMOVE command to move an element between sets, and then check the contents of both sets using SMEMBERS.

LANGUAGE: cli
CODE:
SADD myset "one"
SADD myset "two"
SADD myotherset "three"
SMOVE myset myotherset "two"
SMEMBERS myset
SMEMBERS myotherset

----------------------------------------

TITLE: Monitoring System Swap Activity
DESCRIPTION: Commands to monitor system-wide swap activity using vmstat and iostat

LANGUAGE: shell
CODE:
vmstat 1
iostat -xk 1

----------------------------------------

TITLE: Creating an Enum Config
DESCRIPTION: Example of creating an enum configuration with string tokens mapped to integer values.

LANGUAGE: C
CODE:
const char *enum_vals[3] = {"first", "second", "third"};
const int int_vals[3] = {0, 2, 4};
int enum_val = 0;

int getEnumConfigCommand(const char *name, void *privdata) {
    return enum_val;
}
 
int setEnumConfigCommand(const char *name, int val, void *privdata, const char **err) {
    enum_val = val;
    return REDISMODULE_OK;
}
...
RedisModule_RegisterEnumConfig(ctx, "enum", 0, REDISMODULE_CONFIG_DEFAULT, enum_vals, int_vals, 3, getEnumConfigCommand, setEnumConfigCommand, NULL, NULL);

----------------------------------------

TITLE: Executing LATENCY LATEST Command in Redis
DESCRIPTION: This example demonstrates the usage of the LATENCY LATEST command in Redis. It shows how to induce latency using debug sleep commands and then retrieve the latest latency events.

LANGUAGE: redis
CODE:
127.0.0.1:6379> debug sleep 1
OK
(1.00s)
127.0.0.1:6379> debug sleep .25
OK
127.0.0.1:6379> latency latest
1) 1) "command"
   2) (integer) 1405067976
   3) (integer) 251
   4) (integer) 1001

----------------------------------------

TITLE: Redis CLI Continuous Stats Monitoring
DESCRIPTION: Example of using the --stat option to monitor Redis server stats in real-time

LANGUAGE: shell
CODE:
$ redis-cli --stat
------- data ------ --------------------- load -------------------- - child -
keys       mem      clients blocked requests            connections
506        1015.00K 1       0       24 (+0)             7

----------------------------------------

TITLE: Enabling AOF Persistence in Redis
DESCRIPTION: Turns on Append Only File (AOF) persistence in Redis configuration. This enables logging of all write operations for durability.

LANGUAGE: config
CODE:
appendonly yes

----------------------------------------

TITLE: Extended Redis Hash Functions Library
DESCRIPTION: Complete library implementation with multiple hash operations and metadata handling

LANGUAGE: lua
CODE:
#!lua name=mylib

local function my_hset(keys, args)
  local hash = keys[1]
  local time = redis.call('TIME')[1]
  return redis.call('HSET', hash, '_last_modified_', time, unpack(args))
end

local function my_hgetall(keys, args)
  redis.setresp(3)
  local hash = keys[1]
  local res = redis.call('HGETALL', hash)
  res['map']['_last_modified_'] = nil
  return res
end

local function my_hlastmodified(keys, args)
  local hash = keys[1]
  return redis.call('HGET', hash, '_last_modified_')
end

redis.register_function('my_hset', my_hset)
redis.register_function('my_hgetall', my_hgetall)
redis.register_function('my_hlastmodified', my_hlastmodified)

----------------------------------------

TITLE: Launching Redis with Command-line Arguments
DESCRIPTION: Shows how to start a Redis instance using command-line arguments to override configuration settings. This example demonstrates starting Redis on a custom port and configuring it as a replica of another instance.

LANGUAGE: bash
CODE:
./redis-server --port 6380 --replicaof 127.0.0.1 6379

----------------------------------------

TITLE: Installing Redis using Homebrew on macOS
DESCRIPTION: This command installs Redis on macOS using Homebrew. It downloads and sets up Redis on the system.

LANGUAGE: bash
CODE:
brew install redis

----------------------------------------

TITLE: Using Redis SINTERCARD Command with Sets
DESCRIPTION: Demonstrates the usage of SINTERCARD command by first creating two sets with some overlapping elements, then showing different ways to calculate intersection cardinality, including with a LIMIT parameter. Shows set creation with SADD, regular SINTER operation, and SINTERCARD variations.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key1 "d"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SINTER key1 key2
SINTERCARD 2 key1 key2
SINTERCARD 2 key1 key2 LIMIT 1

----------------------------------------

TITLE: Fixing Truncated AOF File in Redis
DESCRIPTION: Uses the redis-check-aof tool to repair a truncated Append Only File. This allows recovery of data in case of unexpected shutdowns.

LANGUAGE: bash
CODE:
$ redis-check-aof --fix <filename>

----------------------------------------

TITLE: Script Parameterization Example
DESCRIPTION: Demonstrates how to pass arguments to Lua scripts and access them using ARGV array.

LANGUAGE: redis-cli
CODE:
redis> EVAL "return { KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3] }" 2 key1 key2 arg1 arg2 arg3
1) "key1"
2) "key2"
3) "arg1"
4) "arg2"
5) "arg3"

----------------------------------------

TITLE: Querying Latency History in Redis CLI
DESCRIPTION: Example showing how to use the LATENCY HISTORY command to retrieve latency spike data for the 'command' event. Returns an array of timestamp-latency pairs with timestamps in Unix format and latency in milliseconds.

LANGUAGE: redis
CODE:
127.0.0.1:6379> latency history command
1) 1) (integer) 1405067822
   2) (integer) 251
2) 1) (integer) 1405067941
   2) (integer) 1001

----------------------------------------

TITLE: Measuring Redis Latency with redis-cli
DESCRIPTION: Command to measure Redis server latency in milliseconds using redis-cli

LANGUAGE: bash
CODE:
redis-cli --latency -h `host` -p `port`

----------------------------------------

TITLE: Obtaining Stack Trace with GDB
DESCRIPTION: Use the 'bt' command in GDB to obtain a full stack trace after a crash. This provides detailed information about the call stack at the time of the crash.

LANGUAGE: bash
CODE:
(gdb) bt
#0  debugCommand (c=0x7ffc32005000) at debug.c:220
#1  0x000000010d246d63 in call (c=0x7ffc32005000) at redis.c:1163
#2  0x000000010d247290 in processCommand (c=0x7ffc32005000) at redis.c:1305
#3  0x000000010d251660 in processInputBuffer (c=0x7ffc32005000) at networking.c:959
#4  0x000000010d251872 in readQueryFromClient (el=0x0, fd=5, privdata=0x7fff76f1c0b0, mask=220924512) at networking.c:1021
#5  0x000000010d243523 in aeProcessEvents (eventLoop=0x7fff6ce408d0, flags=220829559) at ae.c:352
#6  0x000000010d24373b in aeMain (eventLoop=0x10d429ef0) at ae.c:397
#7  0x000000010d2494ff in main (argc=1, argv=0x10d2b2900) at redis.c:2046

----------------------------------------

TITLE: Building Redis with TLS Support
DESCRIPTION: Command to compile Redis with TLS support enabled. Requires OpenSSL development libraries as a prerequisite.

LANGUAGE: sh
CODE:
make BUILD_TLS=yes

----------------------------------------

TITLE: Redis GET Command Example
DESCRIPTION: Detailed output for the GET command showing all command attributes including ACL categories and key specifications.

LANGUAGE: redis
CODE:
1)  1) "get"
    2) (integer) 2
    3) 1) readonly
       2) fast
    4) (integer) 1
    5) (integer) 1
    6) (integer) 1
    7) 1) @read
       2) @string
       3) @fast
    8) (empty array)
    9) 1) 1) "flags"
          2) 1) read
          3) "begin_search"
          4) 1) "type"
             2) "index"
             3) "spec"
             4) 1) "index"
                2) (integer) 1
          5) "find_keys"
          6) 1) "type"
             2) "range"
             3) "spec"
             4) 1) "lastkey"
                2) (integer) 0
                3) "keystep"
                4) (integer) 1
                5) "limit"
                6) (integer) 0
   10) (empty array)

----------------------------------------

TITLE: Executing SINTERSTORE Command in Redis CLI
DESCRIPTION: This example demonstrates the usage of the SINTERSTORE command in Redis. It creates two sets, performs an intersection, and stores the result in a new key. The command overwrites the destination if it already exists.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SINTERSTORE key key1 key2
SMEMBERS key

----------------------------------------

TITLE: Redis Cluster Basic Configuration
DESCRIPTION: Minimal configuration required in redis.conf to enable Redis Cluster mode on a node

LANGUAGE: redis
CODE:
port 7000
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
appendonly yes

----------------------------------------

TITLE: Redis Directory Setup Commands
DESCRIPTION: Commands for creating necessary directories for Redis configuration and data storage.

LANGUAGE: bash
CODE:
sudo mkdir /etc/redis
sudo mkdir /var/redis

----------------------------------------

TITLE: Redis SORT Command Example
DESCRIPTION: Example output showing the SORT command details including flags and movablekeys indicator.

LANGUAGE: redis
CODE:
1) 1) "sort"
   2) (integer) -2
   3) 1) write
      2) denyoom
      3) movablekeys
   4) (integer) 1
   5) (integer) 1
   6) (integer) 1

----------------------------------------

TITLE: Building Redis with Profiling Support
DESCRIPTION: Compiles Redis with debug information and frame pointer support while maintaining optimizations. Uses make with specific CFLAGS to enable proper stack trace analysis.

LANGUAGE: bash
CODE:
make REDIS_CFLAGS="-g -fno-omit-frame-pointer"

----------------------------------------

TITLE: Redis Cluster Node Directory Setup
DESCRIPTION: Commands to create the directory structure for a 6-node Redis Cluster

LANGUAGE: bash
CODE:
mkdir cluster-test
cd cluster-test
mkdir 7000 7001 7002 7003 7004 7005

----------------------------------------

TITLE: Compiling Redis with TLS Support
DESCRIPTION: Command to compile Redis with TLS support. Requires OpenSSL development libraries to be installed.

LANGUAGE: bash
CODE:
make BUILD_TLS=yes

----------------------------------------

TITLE: Connecting to Redis with TLS Using redis-cli
DESCRIPTION: Command to connect to a TLS-enabled Redis server using redis-cli with appropriate certificate configuration.

LANGUAGE: sh
CODE:
./src/redis-cli --tls \
    --cert ./tests/tls/redis.crt \
    --key ./tests/tls/redis.key \
    --cacert ./tests/tls/ca.crt

----------------------------------------

TITLE: Querying Redis Command Documentation
DESCRIPTION: Example showing how to retrieve documentation for the SET command using COMMAND DOCS. This command returns comprehensive information including summary, version history, complexity, and argument details.

LANGUAGE: cli
CODE:
COMMAND DOCS SET

----------------------------------------

TITLE: Using SPOP Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the SPOP command in Redis CLI. It shows adding members to a set, popping a single member, checking remaining members, adding more members, and then popping multiple members at once.

LANGUAGE: cli
CODE:
SADD myset "one"
SADD myset "two"
SADD myset "three"
SPOP myset
SMEMBERS myset
SADD myset "four"
SADD myset "five"
SPOP myset 3
SMEMBERS myset

----------------------------------------

TITLE: Redis Labs GPG Public Key
DESCRIPTION: The GPG public key for Redis Labs, used for secure communication and verification of Redis-related content.

LANGUAGE: text
CODE:
-----BEGIN PGP PUBLIC KEY BLOCK-----

mQINBF9FWioBEADfBiOE/iKpj2EF/cJ/KzFX+jSBKa8SKrE/9RE0faVF6OYnqstL
S5ox/o+yT45FdfFiRNDflKenjFbOmCbAdIys9Ta0iq6I9hs4sKfkNfNVlKZWtSVG
W4lI6zO2Zyc2wLZonI+Q32dDiXWNcCEsmajFcddukPevj9vKMTJZtF79P2SylEPq
mUuhMy/jOt7q1ibJCj5srtaureBH9662t4IJMFjsEe+hiZ5v071UiQA6Tp7rxLqZ
O6ZRzuamFP3xfy2Lz5NQ7QwnBH1ROabhJPoBOKCATCbfgFcM1Rj+9AOGfoDCOJKH
7yiEezMqr9VbDrEmYSmCO4KheqwC0T06lOLIQC4nnwKopNO/PN21mirCLHvfo01O
H/NUG1LZifOwAURbiFNF8Z3+L0csdhD8JnO+1nphjDHr0Xn9Vff2Vej030pRI/9C
SJ2s5fZUq8jK4n06sKCbqA4pekpbKyhRy3iuITKv7Nxesl4T/uhkc9ccpAvbuD1E
NczN1IH05jiMUMM3lC1A9TSvxSqflqI46TZU3qWLa9yg45kDC8Ryr39TY37LscQk
9x3WwLLkuHeUurnwAk46fSj7+FCKTGTdPVw8v7XbvNOTDf8vJ3o2PxX1uh2P2BHs
9L+E1P96oMkiEy1ug7gu8V+mKu5PAuD3QFzU3XCB93DpDakgtznRRXCkAQARAQAB
tBtSZWRpcyBMYWJzIDxyZWRpc0ByZWRpcy5pbz6JAk4EEwEKADgWIQR5sNCo1OBf
WO913l22qvOUq0evbgUCX0VaKgIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAK
CRC2qvOUq0evbpZaD/4rN7xesDcAG4ec895Fqzk3w74W1/K9lzRKZDwRsAqI+sAz
ZXvQMtWSxLfF2BITxLnHJXK5P+2Y6XlNgrn1GYwC1MsARyM9e1AzwDJHcXFkHU82
2aALIMXGtiZs/ejFh9ZSs5cgRlxBSqot/uxXm9AvKEByhmIeHPZse/Rc6e3qa57v
OhCkVZB4ETx5iZrgA+gdmS8N7MXG0cEu5gJLacG57MHi+2WMOCU9Xfj6+Pqhw3qc
E6lBinKcA/LdgUJ1onK0JCnOG1YVHjuFtaisfPXvEmUBGaSGE6lM4J7lass/OWps
Dd+oHCGI+VOGNx6AiBDZG8mZacu0/7goRnOTdljJ93rKkj31I+6+j4xzkAC0IXW8
LAP9Mmo9TGx0L5CaljykhW6z/RK3qd7dAYE+i7e8J9PuQaGG5pjFzuW4vY45j0V/
9JUMKDaGbU5choGqsCpAVtAMFfIBj3UQ5LCt5zKyescKCUb9uifOLeeQ1vay3R9o
eRSD52YpRBpor0AyYxcLur/pkHB0sSvXEfRZENQTohpY71rHSaFd3q1Hkk7lZl95
m24NRlrJnjFmeSPKP22vqUYIwoGNUF/D38UzvqHD8ltTPgkZc+Y+RRbVNqkQYiwW
GH/DigNB8r2sdkt+1EUu+YkYosxtzxpxxpYGKXYXx0uf+EZmRqRt/OSHKnf2GLkC
DQRfRVoqARAApffsrDNo4JWjX3r6wHJJ8IpwnGEJ2IzGkg8f1Ofk2uKrjkII/oIx
sXC3EeauC1Plhs+m9GP/SPY0LXmZ0OzGD/S1yMpmBeBuXJ0gONDo+xCg1pKGshPs
75XzpbggSOtEYR5S8Z46yCu7TGJRXBMGBhDgCfPVFBBNsnG5B0EeHXM4trqqlN6d
PAcwtLnKPz/Z+lloKR6bFXvYGuN5vjRXjcVYZLLCEwdV9iY5/Opqk9sCluasb3t/
c2gcsLWWFnNz2desvb/Y4ADJzxY+Um848DSR8IcdoArSsqmcCTiYvYC/UU7XPVNk
Jrx/HwgTVYiLGbtMB3u3fUpHW8SabdHc4xG3sx0LeIvl+JwHgx7yVhNYJEyOQfnE
mfS97x6surXgTVLbWVjXKIJhoWnWbLP4NkBc27H4qo8wM/IWH4SSXYNzFLlCDPnw
vQZSel21qxdqAWaSxkKcymfMS4nVDhVj0jhlcTY3aZcHMjqoUB07p5+laJr9CCGv
0Y0j0qT2aUO22A3kbv6H9c1Yjv8EI7eNz07aoH1oYU6ShsiaLfIqPfGYb7LwOFWi
PSl0dCY7WJg2H6UHsV/y2DwRr/3oH0a9hv/cvcMneMi3tpIkRwYFBPXEsIcoD9xr
RI5dp8BBdO/Nt+puoQq9oyialWnQK5+AY7ErW1yxjgie4PQ+XtN+85UAEQEAAYkC
NgQYAQoAIBYhBHmw0KjU4F9Y73XeXbaq85SrR69uBQJfRVoqAhsMAAoJELaq85Sr
R69uoV0QAIvlxAHYTjvH1lt5KbpVGs5gwIAnCMPxmaOXcaZ8V0Z1GEU+/IztwV+N
MYCBv1tYa7OppNs1pn75DhzoNAi+XQOVvU0OZgVJutthZe0fNDFGG9B4i/cxRscI
Ld8TPQQNiZPBZ4ubcxbZyBinE9HsYUM49otHjsyFZ0GqTpyne+zBf1GAQoekxlKo
tWSkkmW0x4qW6eiAmyo5lPS1bBjvaSc67i+6Bv5QkZa0UIkRqAzKN4zVvc2FyILz
+7wVLCzWcXrJt8dOeS6Y/Fjbhb6m7dtapUSETAKu6wJvSd9ndDUjFHD33NQIZ/nL
WaPbn01+e/PHtUDmyZ2W2KbcdlIT9nb2uHrruqdCN04sXkID8E2m2gYMA+TjhC0Q
JBJ9WPmdBeKH91R6wWDq6+HwOpgc/9na+BHZXMG+qyEcvNHB5RJdiu2r1Haf6gHi
Fd6rJ6VzaVwnmKmUSKA2wHUuUJ6oxVJ1nFb7Aaschq8F79TAfee0iaGe9cP+xUHL
zBDKwZ9PtyGfdBp1qNOb94sfEasWPftT26rLgKPFcroCSR2QCK5qHsMNCZL+u71w
NnTtq9YZDRaQ2JAc6VDZCcgu+dLiFxVIi1PFcJQ31rVe16+AQ9zsafiNsxkPdZcY
U9XKndQE028dGZv1E3S5BwpnikrUkWdxcYrVZ4fiNIy5I3My2yCe
=J9BD
-----END PGP PUBLIC KEY BLOCK-----

----------------------------------------

TITLE: Checking Homebrew Version on macOS
DESCRIPTION: This command checks if Homebrew is installed and displays its version. It's a prerequisite for installing Redis using Homebrew.

LANGUAGE: bash
CODE:
brew --version

----------------------------------------

TITLE: Redis MSET and MGET Command Examples
DESCRIPTION: Comparison of MSET and MGET command details showing different step values for key positions.

LANGUAGE: redis
CODE:
1) 1) "mset"
   2) (integer) -3
   3) 1) write
      2) denyoom
   4) (integer) 1
   5) (integer) -1
   6) (integer) 2
   ...

1) 1) "mget"
   2) (integer) -2
   3) 1) readonly
      2) fast
   4) (integer) 1
   5) (integer) -1
   6) (integer) 1
   ...

----------------------------------------

TITLE: Script Caching Example
DESCRIPTION: Demonstrates script caching using SCRIPT LOAD and EVALSHA commands.

LANGUAGE: redis-cli
CODE:
redis> SCRIPT LOAD "return 'Immabe a cached script'"
"c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f"
redis> EVALSHA c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f 0
"Immabe a cached script"

----------------------------------------

TITLE: Generating Redis Protocol in Ruby
DESCRIPTION: This Ruby function generates valid Redis protocol for bulk loading commands. It takes any number of arguments and formats them according to the Redis protocol specification.

LANGUAGE: ruby
CODE:
def gen_redis_proto(*cmd)
    proto = ""
    proto << "*"+cmd.length.to_s+"\r\n"
    cmd.each{|arg|
        proto << "$"+arg.to_s.bytesize.to_s+"\r\n"
        proto << arg.to_s+"\r\n"
    }
    proto
end

puts gen_redis_proto("SET","mykey","Hello World!").inspect

----------------------------------------

TITLE: Redis Docker Replica Announcement Configuration
DESCRIPTION: Forces a replica to announce specific IP and port to the master when running in containerized environments with NAT.

LANGUAGE: conf
CODE:
replica-announce-ip 5.5.5.5
replica-announce-port 1234

----------------------------------------

TITLE: Monitoring Redis Commands with Telnet
DESCRIPTION: This snippet shows how to use the MONITOR command via telnet to connect to Redis and stream all processed commands. It demonstrates the connection process, MONITOR activation, and viewing of Redis operations.

LANGUAGE: bash
CODE:
$ telnet localhost 6379
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
MONITOR
+OK
+1339518083.107412 [0 127.0.0.1:60866] "keys" "*"
+1339518087.877697 [0 127.0.0.1:60866] "dbsize"
+1339518090.420270 [0 127.0.0.1:60866] "set" "x" "6"
+1339518096.506257 [0 127.0.0.1:60866] "get" "x"
+1339518099.363765 [0 127.0.0.1:60866] "del" "x"
+1339518100.544926 [0 127.0.0.1:60866] "get" "x"
QUIT
+OK
Connection closed by foreign host.

----------------------------------------

TITLE: Modern Redis Replication Command
DESCRIPTION: The preferred command name starting from Redis 5+ for configuring replication settings. This command provides identical functionality to SLAVEOF but uses updated terminology.

LANGUAGE: redis
CODE:
REPLICAOF

----------------------------------------

TITLE: ACL Command Categories
DESCRIPTION: Examples of viewing and managing ACL command categories

LANGUAGE: redis
CODE:
ACL CAT
ACL CAT geo

----------------------------------------

TITLE: Defining SDS Type in C
DESCRIPTION: The sds type is defined as a synonym for a character pointer, simplifying the interface for Redis strings.

LANGUAGE: C
CODE:
typedef char *sds;

----------------------------------------

TITLE: Redis XCLAIM Command Example
DESCRIPTION: Example showing how to claim a message with ID 1526569498055-0 using XCLAIM command. The message will only be claimed if idle for at least 3600000ms (1 hour) and ownership will be transferred to consumer 'Alice'.

LANGUAGE: redis
CODE:
> XCLAIM mystream mygroup Alice 3600000 1526569498055-0
1) 1) 1526569498055-0
   2) 1) "message"
      2) "orange"

----------------------------------------

TITLE: Demonstrating ZUNION Command Usage in Redis CLI
DESCRIPTION: This snippet shows how to use the ZUNION command in Redis CLI. It first sets up two sorted sets (zset1 and zset2) using ZADD, then demonstrates ZUNION without and with the WITHSCORES option.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZADD zset2 3 "three"
ZUNION 2 zset1 zset2
ZUNION 2 zset1 zset2 WITHSCORES

----------------------------------------

TITLE: Modifying Data and Receiving Invalidation Messages in Redis
DESCRIPTION: This snippet shows how modifying data on one connection triggers an invalidation message on the invalidation connection. It demonstrates the flow of data modification and invalidation in Redis client-side caching.

LANGUAGE: redis
CODE:
(Some other unrelated connection)
SET foo bar
+OK

(Connection 1 -- used for invalidations)
*3
$7
message
$20
__redis__:invalidate
*1
$3
foo

----------------------------------------

TITLE: Redis VM Object Structure Implementation in C
DESCRIPTION: Data structure for managing virtual memory page information and access times for swapped objects.

LANGUAGE: C
CODE:
struct redisObjectVM {
    off_t page;
    off_t usedpages;
    time_t atime;
} vm;

----------------------------------------

TITLE: Redis Replica Memory Configuration
DESCRIPTION: Configures whether a replica should respect maxmemory settings independently from its master.

LANGUAGE: conf
CODE:
replica-ignore-maxmemory no

----------------------------------------

TITLE: Redis Cluster Special Slot Entry Formats
DESCRIPTION: Examples of special slot entries in the CLUSTER NODES output, showing the format for importing and migrating slots during resharding operations.

LANGUAGE: text
CODE:
[93-<-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]
[1002-<-67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1]
[77->-e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca]
[16311->-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]

----------------------------------------

TITLE: Using CLIENT UNBLOCK with BRPOP Example
DESCRIPTION: Demonstrates how to use CLIENT UNBLOCK command across multiple Redis connections to manage blocking operations. Shows interaction between a blocking connection and control connection to dynamically modify monitored keys.

LANGUAGE: redis
CODE:
Connection A (blocking connection):
> CLIENT ID
2934
> BRPOP key1 key2 key3 0
(client is blocked)

... Now we want to add a new key ...

Connection B (control connection):
> CLIENT UNBLOCK 2934
1

Connection A (blocking connection):
... BRPOP reply with timeout ...
NULL
> BRPOP key1 key2 key3 key4 0
(client is blocked again)

----------------------------------------

TITLE: Configuring Redis Memory Limit
DESCRIPTION: Sets the maximum memory limit for Redis to 100 megabytes using the maxmemory configuration directive

LANGUAGE: redis-conf
CODE:
maxmemory 100mb

----------------------------------------

TITLE: Redis Performance Benchmarks - Raspberry Pi 1 Model B
DESCRIPTION: Performance test results for Redis 4.0 on Raspberry Pi 1 Model B, showing operations per second under different conditions including basic operations, pipelining, and AOF persistence.

LANGUAGE: plaintext
CODE:
Test 1 : 5 millions writes with 1 million keys (even distribution among keys).  No persistence, no pipelining.  2,200 ops/sec.
Test 2: Like test 1 but with pipelining using groups of 8 operations: 8,500 ops/sec.
Test 3: Like test 1 but with AOF enabled, fsync 1 sec: 1,820 ops/sec
Test 4: Like test 3, but with an AOF rewrite in progress: 1,000 ops/sec

----------------------------------------

TITLE: Event Notification Pattern - Consumer
DESCRIPTION: Implementation of an event notification pattern using BLPOP as a consumer, processing elements from a set with blocking behavior.

LANGUAGE: pseudocode
CODE:
LOOP forever
    WHILE SPOP(key) returns elements
        ... process elements ...
    END
    BRPOP helper_key
END

----------------------------------------

TITLE: Retrieving Member Score from Redis Sorted Set using ZSCORE
DESCRIPTION: Demonstrates how to first add a member to a sorted set with ZADD and then retrieve its score using ZSCORE. The example shows adding the member 'one' with score 1 and then querying its score.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZSCORE myzset "one"

----------------------------------------

TITLE: Applying RedisInsight Deployment and Service
DESCRIPTION: This shell command applies the RedisInsight deployment and service configuration to the Kubernetes cluster.

LANGUAGE: sh
CODE:
kubectl apply -f redisinsight.yaml

----------------------------------------

TITLE: Running Specific Redis Benchmark Tests
DESCRIPTION: Shows how to run benchmarks for specific Redis commands (SET and LPUSH) with 100,000 requests in quiet mode.

LANGUAGE: bash
CODE:
redis-benchmark -t set,lpush -n 100000 -q

----------------------------------------

TITLE: Querying Cluster Links in Redis
DESCRIPTION: This example demonstrates the usage and output of the CLUSTER LINKS command in Redis. It shows the structure of the returned data, including information about the direction, node ID, creation time, events, and send buffer details for each link.

LANGUAGE: redis
CODE:
> CLUSTER LINKS
1)  1) "direction"
    2) "to"
    3) "node"
    4) "8149d745fa551e40764fecaf7cab9dbdf6b659ae"
    5) "create-time"
    6) (integer) 1639442739375
    7) "events"
    8) "rw"
    9) "send-buffer-allocated"
   10) (integer) 4512
   11) "send-buffer-used"
   12) (integer) 0
2)  1) "direction"
    2) "from"
    3) "node"
    4) "8149d745fa551e40764fecaf7cab9dbdf6b659ae"
    5) "create-time"
    6) (integer) 1639442739411
    7) "events"
    8) "r"
    9) "send-buffer-allocated"
   10) (integer) 0
   11) "send-buffer-used"
   12) (integer) 0

----------------------------------------

TITLE: Using Redis CLIENT NO-TOUCH Command
DESCRIPTION: The CLIENT NO-TOUCH command controls whether a client's commands will modify the Last Recently Used (LRU) or Least Frequently Used (LFU) statistics of accessed keys. When enabled, the client won't update these stats except when explicitly using the TOUCH command. When disabled, the client behaves normally, updating LRU/LFU stats on key access.

LANGUAGE: redis
CODE:
CLIENT NO-TOUCH

----------------------------------------

TITLE: Enabling Gopher Support in Redis Configuration
DESCRIPTION: This configuration line enables Gopher support in Redis. It should be added to the Redis configuration file to activate the Gopher protocol implementation.

LANGUAGE: redis
CODE:
gopher-enabled yes

----------------------------------------

TITLE: Event Notification Pattern - Producer
DESCRIPTION: Producer side of the event notification pattern using MULTI/EXEC to atomically add elements and trigger the notification.

LANGUAGE: redis
CODE:
MULTI
SADD key element
LPUSH helper_key x
EXEC

----------------------------------------

TITLE: Using ZREVRANK Command in Redis CLI
DESCRIPTION: This snippet demonstrates how to use the ZREVRANK command in Redis CLI. It shows adding members to a sorted set, querying their ranks, and using the WITHSCORE option. The example includes cases for existing and non-existing members.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREVRANK myzset "one"
ZREVRANK myzset "four"
ZREVRANK myzset "three" WITHSCORE
ZREVRANK myzset "four" WITHSCORE

----------------------------------------

TITLE: Creating File Event for Client Connection
DESCRIPTION: Creates a file event for handling client connections, registering readQueryFromClient as the callback for reading client requests.

LANGUAGE: c
CODE:
if (aeCreateFileEvent(server.el, c->fd, AE_READABLE,
    readQueryFromClient, c) == AE_ERR) {
    freeClient(c);
    return NULL;
}

----------------------------------------

TITLE: Redis Benchmark with Pipelining
DESCRIPTION: Demonstrates using pipelining to improve benchmark performance for SET and GET operations.

LANGUAGE: bash
CODE:
redis-benchmark -n 1000000 -t set,get -P 16 -q

----------------------------------------

TITLE: Redis CLUSTER SETSLOT IMPORTING Command
DESCRIPTION: Prepares destination node to import keys from specified source node. Refuses commands without ASKING prefix and generates MOVED redirections.

LANGUAGE: redis
CODE:
CLUSTER SETSLOT <slot> IMPORTING <source-node-id>

----------------------------------------

TITLE: Querying Latency Histogram for 'set' Command in Redis
DESCRIPTION: This example demonstrates how to use the LATENCY HISTOGRAM command in Redis to retrieve the latency histogram for the 'set' command. The output shows the total number of calls and a distribution of latencies across different time buckets.

LANGUAGE: redis
CODE:
127.0.0.1:6379> LATENCY HISTOGRAM set
1# "set" =>
   1# "calls" => (integer) 100000
   2# "histogram_usec" =>
      1# (integer) 1 => (integer) 99583
      2# (integer) 2 => (integer) 99852
      3# (integer) 4 => (integer) 99914
      4# (integer) 8 => (integer) 99940
      5# (integer) 16 => (integer) 99968
      6# (integer) 33 => (integer) 100000

----------------------------------------

TITLE: Defining Redis String Structure in C
DESCRIPTION: The sdshdr structure represents a Redis string, containing length, free space, and the actual string buffer.

LANGUAGE: C
CODE:
struct sdshdr {
    long len;
    long free;
    char buf[];
};

----------------------------------------

TITLE: Basic BLPOP Usage
DESCRIPTION: Demonstrates basic usage of BLPOP command with multiple lists, showing how elements are popped from the first non-empty list.

LANGUAGE: redis
CODE:
BLPOP list1 list2 list3 0

----------------------------------------

TITLE: Using ZREVRANGEBYLEX Command in Redis CLI
DESCRIPTION: This snippet demonstrates how to use the ZREVRANGEBYLEX command in Redis CLI. It first adds elements to a sorted set with the same score, then retrieves elements in reverse lexicographical order using different range specifications.

LANGUAGE: cli
CODE:
ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g
ZREVRANGEBYLEX myzset [c -
ZREVRANGEBYLEX myzset (c -
ZREVRANGEBYLEX myzset (g [aaa

----------------------------------------

TITLE: Perf Report Generation
DESCRIPTION: Generates a call-graph report from recorded perf data with 0.5% minimum inclusion threshold.

LANGUAGE: bash
CODE:
perf report -g "graph,0.5,caller"

----------------------------------------

TITLE: Accessing Redis Client Commands Help
DESCRIPTION: Shows how to access the list of available client connection commands in Redis using the CLIENT HELP command.

LANGUAGE: redis
CODE:
CLIENT HELP

----------------------------------------

TITLE: Querying Consumer Information with Redis XINFO CONSUMERS
DESCRIPTION: Example showing the output format of XINFO CONSUMERS command for a stream 'mystream' with consumer group 'mygroup'. The response includes consumer names (Alice and Bob), their pending message counts, idle times, and inactive times in milliseconds.

LANGUAGE: redis
CODE:
> XINFO CONSUMERS mystream mygroup
1) 1) name
   2) "Alice"
   3) pending
   4) (integer) 1
   5) idle
   6) (integer) 9104628
   7) inactive
   8) (integer) 18104698
2) 1) name
   2) "Bob"
   3) pending
   4) (integer) 1
   5) idle
   6) (integer) 83841983
   7) inactive
   8) (integer) 993841998

----------------------------------------

TITLE: Redis I/O Job Structure Implementation in C
DESCRIPTION: Data structure used for managing background I/O operations in the threaded VM implementation.

LANGUAGE: C
CODE:
typedef struct iojob {
    int type;
    redisDb *db;
    robj *key;
    robj *val;
    off_t page;
    off_t pages;
    int canceled;
    pthread_t thread;
} iojob;

----------------------------------------

TITLE: Demonstrating Redis BRPOP Command Usage
DESCRIPTION: Shows how BRPOP operates by first clearing lists, pushing elements to list1, then performing a blocking right pop operation. The example demonstrates popping the rightmost element 'c' from list1.

LANGUAGE: redis
CODE:
redis> DEL list1 list2
(integer) 0
redis> RPUSH list1 a b c
(integer) 3
redis> BRPOP list1 list2 0
1) "list1"
2) "c"

----------------------------------------

TITLE: Removing Elements from Redis Sorted Set by Score Range
DESCRIPTION: This example demonstrates how to use the ZREMRANGEBYSCORE command in Redis. It first adds elements to a sorted set, then removes elements with scores between negative infinity and 2 (exclusive), and finally displays the remaining elements.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREMRANGEBYSCORE myzset -inf (2
ZRANGE myzset 0 -1 WITHSCORES

----------------------------------------

TITLE: Creating a String Config
DESCRIPTION: Example of creating a string configuration that Redis users can interact with via the config commands.

LANGUAGE: C
CODE:
RedisModuleString *strval;
int adjustable = 1;
RedisModuleString *getStringConfigCommand(const char *name, void *privdata) {
    return strval;
}

int setStringConfigCommand(const char *name, RedisModuleString *new, void *privdata, RedisModuleString **err) {
   if (adjustable) {
       RedisModule_Free(strval);
       RedisModule_RetainString(NULL, new);
       strval = new;
       return REDISMODULE_OK;
   }
   *err = RedisModule_CreateString(NULL, "Not adjustable.", 15);
   return REDISMODULE_ERR;
}
...
RedisModule_RegisterStringConfig(ctx, "string", NULL, REDISMODULE_CONFIG_DEFAULT, getStringConfigCommand, setStringConfigCommand, NULL, NULL);

----------------------------------------

TITLE: Flame Graph Generation from Perf Data
DESCRIPTION: Converts perf data into flame graph visualization through multiple processing steps using FlameGraph tools.

LANGUAGE: bash
CODE:
perf script > redis.perf.stacks
stackcollapse-perf.pl redis.perf.stacks > redis.folded.stacks
flamegraph.pl redis.folded.stacks > redis.svg

----------------------------------------

TITLE: Configuring SKIPME Option in Redis CLIENT KILL
DESCRIPTION: Illustrates how to set the SKIPME option to determine whether the client calling the command should be killed.

LANGUAGE: redis
CODE:
CLIENT KILL SKIPME yes/no

----------------------------------------

TITLE: Querying Redis Stream Consumer Groups Information
DESCRIPTION: Example showing the XINFO GROUPS command output for a stream key 'mystream' with two consumer groups. The response includes detailed information about each group including name, number of consumers, pending entries, last delivered ID, entries read counter, and current lag.

LANGUAGE: redis
CODE:
> XINFO GROUPS mystream
1)  1) "name"
    2) "mygroup"
    3) "consumers"
    4) (integer) 2
    5) "pending"
    6) (integer) 2
    7) "last-delivered-id"
    8) "1638126030001-0"
    9) "entries-read"
   10) (integer) 2
   11) "lag"
   12) (integer) 0
2)  1) "name"
    2) "some-other-group"
    3) "consumers"
    4) (integer) 1
    5) "pending"
    6) (integer) 0
    7) "last-delivered-id"
    8) "1638126028070-0"
    9) "entries-read"
   10) (integer) 1
   11) "lag"
   12) (integer) 1

----------------------------------------

TITLE: Setting ACL Rule with Categories in Redis
DESCRIPTION: Demonstrates how to set an ACL rule for user 'karin' granting all permissions except dangerous operations using ACL categories.

LANGUAGE: redis
CODE:
ACL SETUSER karin on +@all -@dangerous

----------------------------------------

TITLE: Executing Redis FLUSHDB Command with Modifiers
DESCRIPTION: Shows the different ways to execute the FLUSHDB command in Redis. The command can be run synchronously or asynchronously to delete all keys in the current database. The async mode operates on keys present at command invocation time.

LANGUAGE: redis
CODE:
FLUSHDB         # default mode based on configuration
FLUSHDB ASYNC    # asynchronous flush
FLUSHDB !SYNC    # synchronous flush

----------------------------------------

TITLE: Querying Random Elements from Redis Sorted Set using ZRANDMEMBER
DESCRIPTION: Example demonstrates adding elements to a sorted set 'dadi' and retrieving random elements using ZRANDMEMBER command. Shows basic usage, multiple element retrieval with negative count, and usage with WITHSCORES modifier.

LANGUAGE: cli
CODE:
ZADD dadi 1 uno 2 due 3 tre 4 quattro 5 cinque 6 sei
ZRANDMEMBER dadi
ZRANDMEMBER dadi
ZRANDMEMBER dadi -5 WITHSCORES

----------------------------------------

TITLE: BCC Profile Collection
DESCRIPTION: Collects CPU profile data using BCC/BPF tools with direct folded stack output for flame graph generation.

LANGUAGE: bash
CODE:
/usr/share/bcc/tools/profile -F 999 -f --pid $(pgrep redis-server) --duration 60 > redis.folded.stacks

----------------------------------------

TITLE: Killing Clients by Type in Redis
DESCRIPTION: Demonstrates how to close connections of all clients of a specific type (normal, master, replica, or pubsub).

LANGUAGE: redis
CODE:
CLIENT KILL TYPE type

----------------------------------------

TITLE: Redis Stream Operations: Add, Trim, and Range
DESCRIPTION: This example demonstrates a sequence of Redis stream operations: adding entries to a stream, trimming it to a maximum length of 2, and then retrieving all entries in the trimmed stream.

LANGUAGE: redis
CODE:
XADD mystream * field1 A field2 B field3 C field4 D
XTRIM mystream MAXLEN 2
XRANGE mystream - +

----------------------------------------

TITLE: Listing All ACL Categories in Redis
DESCRIPTION: Shows how to list all available ACL categories in Redis using the ACL CAT command without arguments.

LANGUAGE: redis
CODE:
> ACL CAT
 1) "keyspace"
 2) "read"
 3) "write"
 4) "set"
 5) "sortedset"
 6) "list"
 7) "hash"
 8) "string"
 9) "bitmap"
10) "hyperloglog"
11) "geo"
12) "stream"
13) "pubsub"
14) "admin"
15) "fast"
16) "slow"
17) "blocking"
18) "dangerous"
19) "connection"
20) "transaction"
21) "scripting"

----------------------------------------

TITLE: Executing Redis ACL LOAD Command Examples
DESCRIPTION: Examples showing successful and failed attempts to load ACL rules from a configuration file. Demonstrates both a successful load operation with OK response and an error case where invalid configuration prevents loading.

LANGUAGE: redis
CODE:
> ACL LOAD
+OK

> ACL LOAD
-ERR /tmp/foo:1: Unknown command or category name in ACL...

----------------------------------------

TITLE: Blocking XREAD Command in Redis
DESCRIPTION: This example demonstrates the blocking usage of XREAD. The command will block for 1000 milliseconds if no new data is available in the 'mystream' stream after the specified ID. It returns a null reply if the timeout elapses without new data arriving.

LANGUAGE: redis
CODE:
> XREAD BLOCK 1000 STREAMS mystream 1526999626221-0
(nil)

----------------------------------------

TITLE: Generating Secure Passwords with ACL GENPASS in Redis
DESCRIPTION: The ACL GENPASS command generates secure passwords for Redis ACL users. It can produce passwords of varying lengths, from 1 to 1024 bits, rounded up to the nearest multiple of 4. The output is a hexadecimal representation of the generated password.

LANGUAGE: redis
CODE:
> ACL GENPASS
"dd721260bfe1b3d9601e7fbab36de6d04e2e67b0ef1c53de59d45950db0dd3cc"

> ACL GENPASS 32
"355ef3dd"

> ACL GENPASS 5
"90"

----------------------------------------

TITLE: Generating Core Dump with GDB
DESCRIPTION: Use the 'gcore' command in GDB to generate a core dump of the Redis process. This creates an image of the process memory, which is useful for detailed debugging.

LANGUAGE: bash
CODE:
(gdb) gcore
Saved corefile core.58414

----------------------------------------

TITLE: File Descriptor Events in Redis CLIENT LIST Output
DESCRIPTION: This snippet describes the possible file descriptor events that can be reported in the CLIENT LIST command output. These events indicate the readability and writability status of the client socket in the event loop.

LANGUAGE: plaintext
CODE:
r: the client socket is readable (event loop)
w: the client socket is writable (event loop)

----------------------------------------

TITLE: Assigning Hash Slots to a Node in Redis Cluster
DESCRIPTION: This example demonstrates how to use the CLUSTER ADDSLOTS command to assign specific hash slots to a node in Redis Cluster. It also shows the error that occurs when trying to assign already allocated slots.

LANGUAGE: redis
CODE:
> CLUSTER ADDSLOTS 1 2 3
OK

> CLUSTER ADDSLOTS 1 2 3
ERR Slot 1 is already busy

----------------------------------------

TITLE: Basic BITFIELD Operation Example
DESCRIPTION: Example showing how to increment a 5-bit signed integer and get a 4-bit unsigned integer value in a single command.

LANGUAGE: redis
CODE:
> BITFIELD mykey INCRBY i5 100 1 GET u4 0
1) (integer) 1
2) (integer) 0

----------------------------------------

TITLE: Retrieving Substrings with Redis GETRANGE Command
DESCRIPTION: This example demonstrates various ways to use the GETRANGE command in Redis. It shows how to set a string value and then retrieve different substrings using various offset combinations, including positive and negative offsets.

LANGUAGE: cli
CODE:
SET mykey "This is a string"
GETRANGE mykey 0 3
GETRANGE mykey -3 -1
GETRANGE mykey 0 -1
GETRANGE mykey 10 100

----------------------------------------

TITLE: Adding Entries and Querying a Redis Stream
DESCRIPTION: This example demonstrates adding multiple entries to a stream using XADD, checking the length with XLEN, and then querying the first two entries with XRANGE.

LANGUAGE: redis
CODE:
XADD writers * name Virginia surname Woolf
XADD writers * name Jane surname Austen
XADD writers * name Toni surname Morrison
XADD writers * name Agatha surname Christie
XADD writers * name Ngozi surname Adichie
XLEN writers
XRANGE writers - + COUNT 2

----------------------------------------

TITLE: Configuring Linux Kernel Settings for Redis
DESCRIPTION: Commands to configure Linux kernel settings for optimal Redis performance, including overcommit memory and transparent huge pages settings.

LANGUAGE: bash
CODE:
sysctl vm.overcommit_memory=1\necho never > /sys/kernel/mm/transparent_hugepage/enabled

----------------------------------------

TITLE: Redis TOUCH Command
DESCRIPTION: The TOUCH command is used to explicitly update LRU/LFU statistics for keys when CLIENT NO-TOUCH is enabled. This provides manual control over when key access statistics are modified.

LANGUAGE: redis
CODE:
TOUCH

----------------------------------------

TITLE: Removing Multiple Hash Slots Using CLUSTER DELSLOTS
DESCRIPTION: Demonstrates how to remove individual hash slots from a Redis Cluster node using the CLUSTER DELSLOTS command. This command accepts a list of specific slot numbers to remove.

LANGUAGE: redis
CODE:
> CLUSTER DELSLOTS 1 2 3 4 5
OK

----------------------------------------

TITLE: Executing BITFIELD_RO Command in Redis
DESCRIPTION: This example demonstrates how to use the BITFIELD_RO command to retrieve an 8-bit integer starting at bit offset 16 from the 'hello' key. The command only supports the GET subcommand and is safe to use in read-only replicas.

LANGUAGE: redis
CODE:
BITFIELD_RO hello GET i8 16

----------------------------------------

TITLE: Basic Redis GETSET Usage Example
DESCRIPTION: Shows a basic example of using the GETSET command to atomically update a key's value while retrieving its previous value. Demonstrates setting an initial value, using GETSET to update it, and retrieving the final value.

LANGUAGE: cli
CODE:
SET mykey "Hello"
GETSET mykey "World"
GET mykey

----------------------------------------

TITLE: Querying Stream Length in Redis CLI
DESCRIPTION: Demonstrates how to add entries to a stream and query its length using XADD and XLEN commands. Shows adding three items to a stream named 'mystream' and then getting the count of entries.

LANGUAGE: cli
CODE:
XADD mystream * item 1
XADD mystream * item 2
XADD mystream * item 3
XLEN mystream

----------------------------------------

TITLE: Killing Clients by Local Address in Redis
DESCRIPTION: Shows how to kill all clients connected to a specific local (bind) address using the LADDR filter.

LANGUAGE: redis
CODE:
CLIENT KILL LADDR ip:port

----------------------------------------

TITLE: Redis Command Call from Lua
DESCRIPTION: Shows how to call a Redis command from Lua script using redis.call() and handle the return value.

LANGUAGE: lua
CODE:
return redis.call('ECHO', 'Echo, echo... eco... o...')

----------------------------------------

TITLE: Redis Check Commands for Failover Status
DESCRIPTION: Commands for verifying failover status and replica recognition in the cluster. Used to confirm successful failover completion and cluster state changes.

LANGUAGE: redis
CODE:
CLUSTER NODES
CLUSTER REPLICAS
ROLE
INFO REPLICATION

----------------------------------------

TITLE: Redis SET Command Key Specification Example
DESCRIPTION: Shows the key specification structure for the SET command, demonstrating index-based key search with read-write access flags.

LANGUAGE: redis
CODE:
1) 1) "flags"
   2) 1) RW
      2) access
      3) update
   3) "begin_search"
   4) 1) "type"
      2) "index"
      3) "spec"
      4) 1) "index"
         2) (integer) 1
   5) "find_keys"
   6) 1) "type"
      2) "range"
      3) "spec"
      4) 1) "lastkey"
         2) (integer) 0
         3) "keystep"
         4) (integer) 1
         5) "limit"
         6) (integer) 0

----------------------------------------

TITLE: Configuring Redis Server Replies with CLIENT REPLY Command
DESCRIPTION: The CLIENT REPLY command controls the server's reply behavior for client commands. It offers three modes: ON (default), OFF (no replies), and SKIP (skip reply for next command only). This is useful for optimizing performance in scenarios like fire-and-forget operations or bulk data loading.

LANGUAGE: redis
CODE:
CLIENT REPLY ON
CLIENT REPLY OFF
CLIENT REPLY SKIP

----------------------------------------

TITLE: Setting Key Expiration with Redis EXPIREAT Command
DESCRIPTION: Demonstrates setting an absolute expiration timestamp on a Redis key using EXPIREAT. The example shows creating a key, checking its existence, setting expiration, and verifying the effect.

LANGUAGE: cli
CODE:
SET mykey "Hello"
EXISTS mykey
EXPIREAT mykey 1293840000
EXISTS mykey

----------------------------------------

TITLE: Basic Redis Stream Operations Example
DESCRIPTION: Demonstrates basic stream operations including adding entries with field-value pairs, checking stream length, and retrieving ranges of entries.

LANGUAGE: redis-cli
CODE:
XADD mystream * name Sara surname OConnor
XADD mystream * field1 value1 field2 value2 field3 value3
XLEN mystream
XRANGE mystream - +

----------------------------------------

TITLE: Script Effect Replication Control
DESCRIPTION: Demonstrates controlling how script effects are replicated using redis.set_repl().

LANGUAGE: lua
CODE:
redis.replicate_commands() -- Enable effects replication in versions lower than Redis v7.0
redis.call('SET', KEYS[1], ARGV[1])
redis.set_repl(redis.REPL_NONE)
redis.call('SET', KEYS[2], ARGV[2])
redis.set_repl(redis.REPL_ALL)
redis.call('SET', KEYS[3], ARGV[3])

----------------------------------------

TITLE: Using DECRBY Command in Redis CLI
DESCRIPTION: Demonstrates how to use the DECRBY command to decrement a numeric value by a specified amount. First sets a key 'mykey' to '10' and then decrements it by 3.

LANGUAGE: cli
CODE:
SET mykey "10"
DECRBY mykey 3

----------------------------------------

TITLE: Building Redis on Raspberry Pi
DESCRIPTION: Simple instructions for compiling Redis on Raspberry Pi devices. Uses standard make command but defaults to libc allocator instead of jemalloc for better ARM compatibility.

LANGUAGE: bash
CODE:
make

----------------------------------------

TITLE: Enabling Client Tracking in Redis
DESCRIPTION: This command enables tracking for the current Redis connection. It allows for various options to customize the tracking behavior, such as redirection, broadcasting, and prefix filtering.

LANGUAGE: redis
CODE:
CLIENT TRACKING on ... options ...

----------------------------------------

TITLE: Demonstrating Redis ZINTER Command Usage with CLI
DESCRIPTION: Shows how to use the ZINTER command to find intersection between two sorted sets, including basic usage and retrieving scores. The example creates two sorted sets with overlapping members and demonstrates both simple intersection and intersection with scores.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZADD zset2 3 "three"
ZINTER 2 zset1 zset2
ZINTER 2 zset1 zset2 WITHSCORES

----------------------------------------

TITLE: Acknowledging a message in Redis stream using XACK command
DESCRIPTION: This example demonstrates how to use the XACK command in Redis to acknowledge a message in a stream. It removes the specified message from the Pending Entries List (PEL) of the consumer group.

LANGUAGE: redis
CODE:
redis> XACK mystream mygroup 1526569495631-0
(integer) 1

----------------------------------------

TITLE: Assigning Hash Slot Ranges with CLUSTER ADDSLOTSRANGE in Redis
DESCRIPTION: This snippet shows how to use the CLUSTER ADDSLOTSRANGE command to assign a range of hash slots to a node in Redis Cluster. It assigns slots 1 through 5 to the current node using a start and end range.

LANGUAGE: redis
CODE:
> CLUSTER ADDSLOTSRANGE 1 5
OK

----------------------------------------

TITLE: Using redis.debug() for Logging in Redis Lua Scripts
DESCRIPTION: Shows how to use the redis.debug() function to log variables and their values during script execution in the debug console.

LANGUAGE: Lua
CODE:
local a = {1,2,3}
local b = false
redis.debug(a,b)

----------------------------------------

TITLE: Executing ECHO Command in Redis CLI
DESCRIPTION: Demonstrates how to use the ECHO command in Redis CLI. The command returns the input message exactly as provided.

LANGUAGE: cli
CODE:
ECHO "Hello World!"

----------------------------------------

TITLE: Implementing CRC16 algorithm in C
DESCRIPTION: This code provides a reference implementation of the CRC16 algorithm used in Redis Cluster for hash slot calculation. It uses the XMODEM CRC-16 variant.

LANGUAGE: c
CODE:
static const uint16_t crc16tab[256]= {
    0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
    0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef,
    0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,
    0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de,
    0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,
    0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d,
    0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4,
    0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc,
    0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,
    0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b,
    0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12,
    0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a,
    0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41,
    0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,
    0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70,
    0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,
    0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f,
    0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067,
    0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e,
    0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256,
    0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d,
    0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405,
    0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c,
    0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634,
    0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab,
    0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,
    0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a,
    0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92,
    0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9,
    0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
    0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
    0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};

uint16_t crc16(const char *buf, int len) {
    int counter;
    uint16_t crc = 0;
    for (counter = 0; counter < len; counter++)
            crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *buf++)&0x00FF];
    return crc;
}

----------------------------------------

TITLE: Redis Cluster Node Configuration Field Format
DESCRIPTION: Detailed breakdown of the fields in each line of the CLUSTER NODES command output, explaining the structure and meaning of each component.

LANGUAGE: text
CODE:
<id> <ip:port@cport[,hostname]> <flags> <master> <ping-sent> <pong-recv> <config-epoch> <link-state> <slot> <slot> ... <slot>

----------------------------------------

TITLE: Conceptual Example of Redis SUNION Operation
DESCRIPTION: Demonstrates the concept of the SUNION command using set notation. It shows how the union of three sets (key1, key2, and key3) results in a combined set containing all unique elements.

LANGUAGE: text
CODE:
key1 = {a,b,c,d}
key2 = {c}
key3 = {a,c,e}
SUNION key1 key2 key3 = {a,b,c,d,e}

----------------------------------------

TITLE: Redis WAITAOF Command Examples
DESCRIPTION: Examples demonstrating the usage of WAITAOF command with different parameters. Shows local fsync confirmation and replica synchronization scenarios with and without timeouts.

LANGUAGE: redis
CODE:
> SET foo bar
OK
> WAITAOF 1 0 0
1) (integer) 1
2) (integer) 0
> WAITAOF 0 1 1000
1) (integer) 1
2) (integer) 0

----------------------------------------

TITLE: Redis Command Execution from Lua
DESCRIPTION: Shows how to execute Redis commands from within a Lua script using redis.call().

LANGUAGE: redis-cli
CODE:
> EVAL "return redis.call('SET', KEYS[1], ARGV[1])" 1 foo bar
OK

----------------------------------------

TITLE: Basic Redis LMOVE Usage
DESCRIPTION: Demonstrates basic usage of the LMOVE command by moving elements between lists. Shows how to push elements to a list and then move them between lists using different directional parameters.

LANGUAGE: cli
CODE:
RPUSH mylist "one"
RPUSH mylist "two"
RPUSH mylist "three"
LMOVE mylist myotherlist RIGHT LEFT
LMOVE mylist myotherlist LEFT RIGHT
LRANGE mylist 0 -1
LRANGE myotherlist 0 -1

----------------------------------------

TITLE: Setting Linux File Descriptor Limits
DESCRIPTION: Commands for configuring Linux system limits for maximum file descriptors to support higher numbers of Redis client connections.

LANGUAGE: shell
CODE:
ulimit -Sn 100000 # This will only work if hard limit is big enough.
sysctl -w fs.file-max=100000

----------------------------------------

TITLE: Redis Cluster Live Resharding Process
DESCRIPTION: Complete sequence of commands for migrating hash slots between nodes, including proper ordering of operations and optional steps for cluster-wide consistency.

LANGUAGE: redis
CODE:
1. CLUSTER SETSLOT <slot> IMPORTING <source-node-id>
2. CLUSTER SETSLOT <slot> MIGRATING <destination-node-id>
3. CLUSTER GETKEYSINSLOT + MIGRATE
4. CLUSTER SETSLOT <slot> NODE <destination-node-id> # on destination
5. CLUSTER SETSLOT <slot> NODE <destination-node-id> # on source
6. CLUSTER SETSLOT <slot> NODE <destination-node-id> # on other masters

----------------------------------------

TITLE: Setting Key with Millisecond Expiration using Redis PSETEX
DESCRIPTION: This example demonstrates how to use the PSETEX command to set a key with a value and an expiration time in milliseconds. It also shows how to check the remaining time-to-live and retrieve the key's value.

LANGUAGE: cli
CODE:
PSETEX mykey 1000 "Hello"
PTTL mykey
GET mykey

----------------------------------------

TITLE: Updating Key Access Times with Redis TOUCH
DESCRIPTION: Demonstrates using the Redis TOUCH command to update the last access time of multiple keys. The example first sets two keys with values, then touches both keys to update their access timestamps.

LANGUAGE: cli
CODE:
SET key1 "Hello"
SET key2 "World"
TOUCH key1 key2

----------------------------------------

TITLE: Executing Read-Only Redis Lua Scripts with EVAL_RO
DESCRIPTION: Demonstrates the usage of EVAL_RO command with both successful read operation and failed write operation attempts. Shows how the command allows GET operations but prevents DEL operations due to read-only restrictions.

LANGUAGE: redis
CODE:
> SET mykey "Hello"
OK

> EVAL_RO "return redis.call('GET', KEYS[1])" 1 mykey
"Hello"

> EVAL_RO "return redis.call('DEL', KEYS[1])" 1 mykey
(error) ERR Error running script (call to b0d697da25b13e49157b2c214a4033546aba2104): @user_script:1: @user_script: 1: Write commands are not allowed from read-only scripts.

----------------------------------------

TITLE: Lua Script with Flags
DESCRIPTION: Example showing how to use script flags to declare script behavior characteristics.

LANGUAGE: lua
CODE:
#!lua flags=no-writes,allow-stale
local x = redis.call('get','x')
return x

----------------------------------------

TITLE: Merging HyperLogLog Structures in Redis CLI
DESCRIPTION: This example demonstrates how to use the PFADD command to add elements to two separate HyperLogLog structures, then merge them using PFMERGE, and finally count the cardinality of the merged set using PFCOUNT.

LANGUAGE: cli
CODE:
PFADD hll1 foo bar zap a
PFADD hll2 a b c foo
PFMERGE hll3 hll1 hll2
PFCOUNT hll3

----------------------------------------

TITLE: Querying Redis Command Information for PING
DESCRIPTION: This snippet demonstrates how to use the COMMAND INFO command to retrieve detailed information about the PING command, including its tips for request and response policies in a clustered environment.

LANGUAGE: redis
CODE:
redis> command info ping
1)  1) "ping"
    2) (integer) -1
    3) 1) fast
    4) (integer) 0
    5) (integer) 0
    6) (integer) 0
    7) 1) @fast
       2) @connection
    8) 1) "request_policy:all_shards"
       2) "response_policy:all_succeeded"
    9) (empty array)
   10) (empty array)

----------------------------------------

TITLE: Accessing Redis Function Command Help
DESCRIPTION: This snippet demonstrates how to view the list of available Redis function commands using the FUNCTION HELP command.

LANGUAGE: redis
CODE:
FUNCTION HELP

----------------------------------------

TITLE: Basic List Management with LTRIM
DESCRIPTION: Basic example showing how to maintain a list with a fixed maximum size by combining LPUSH with LTRIM. This pattern ensures the list won't grow beyond 100 elements while adding new items.

LANGUAGE: cli
CODE:
LPUSH mylist someelement
LTRIM mylist 0 99

----------------------------------------

TITLE: Practical Redis CLI Example of SUNION Command
DESCRIPTION: Shows a step-by-step CLI example of using the SUNION command. It first adds elements to two sets using SADD, then performs a union operation on these sets using SUNION.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SUNION key1 key2

----------------------------------------

TITLE: Basic Redis Function Implementation
DESCRIPTION: Simple Redis function library implementing a 'knockknock' function that returns a string response

LANGUAGE: lua
CODE:
#!lua name=mylib
redis.register_function(
  'knockknock',
  function() return 'Who\'s there?' end
)

----------------------------------------

TITLE: Optimized Multiple Bit Setting with BITFIELD
DESCRIPTION: Demonstrates how to optimize setting multiple bits using a single BITFIELD command instead of multiple SETBIT calls.

LANGUAGE: cli
CODE:
> BITFIELD bitsinabitmap SET u1 2 1 SET u1 3 1 SET u1 5 1 SET u1 10 1 SET u1 11 1 SET u1 14 1

----------------------------------------

TITLE: Dumping Processor Registers with GDB
DESCRIPTION: Use the 'info registers' command in GDB to dump the processor registers. This provides low-level information about the state of the CPU at the time of the crash.

LANGUAGE: bash
CODE:
(gdb) info registers
rax            0x0  0
rbx            0x7ffc32005000   140721147367424
rcx            0x10d2b0a60  4515891808
rdx            0x7fff76f1c0b0   140735188943024
rsi            0x10d299777  4515796855
rdi            0x0  0
rbp            0x7fff6ce40730   0x7fff6ce40730
rsp            0x7fff6ce40650   0x7fff6ce40650
r8             0x4f26b3f7   1327936503
r9             0x7fff6ce40718   140735020271384
r10            0x81 129
r11            0x10d430398  4517462936
r12            0x4b7c04f8babc0  1327936503000000
r13            0x10d3350a0  4516434080
r14            0x10d42d9f0  4517452272
r15            0x10d430398  4517462936
rip            0x10d26cfd4  0x10d26cfd4 <debugCommand+68>
eflags         0x10246  66118
cs             0x2b 43
ss             0x0  0
ds             0x0  0
es             0x0  0
fs             0x0  0
gs             0x0  0

----------------------------------------

TITLE: Querying Geospatial Data with GEORADIUSBYMEMBER in Redis CLI
DESCRIPTION: This snippet demonstrates how to use the GEORADIUSBYMEMBER command in Redis. It first adds geospatial data for Sicilian cities using GEOADD, then queries for locations within 100 km of Agrigento.

LANGUAGE: cli
CODE:
GEOADD Sicily 13.583333 37.316667 "Agrigento"
GEOADD Sicily 13.361389 38.115556 "Palermo" 15.087269 37.502669 "Catania"
GEORADIUSBYMEMBER Sicily Agrigento 100 km

----------------------------------------

TITLE: Inserting Values with Redis LPUSH Command (CLI)
DESCRIPTION: This example demonstrates how to use the LPUSH command to insert values at the head of a list in Redis. It shows inserting multiple values and then retrieving the list contents using LRANGE.

LANGUAGE: cli
CODE:
LPUSH mylist "world"
LPUSH mylist "hello"
LRANGE mylist 0 -1

----------------------------------------

TITLE: Retrieving External Keys in Redis SORT
DESCRIPTION: Shows how to retrieve external keys based on the elements in the list being sorted.

LANGUAGE: redis
CODE:
SORT mylist BY weight_* GET object_*

----------------------------------------

TITLE: Using GETDEL Command in Redis CLI
DESCRIPTION: Demonstrates the usage of GETDEL command to retrieve and delete a key's value in Redis. The example shows setting a key, retrieving and deleting it with GETDEL, and verifying the deletion with GET.

LANGUAGE: cli
CODE:
SET mykey "Hello"
GETDEL mykey
GET mykey

----------------------------------------

TITLE: Redis Init Script Installation
DESCRIPTION: Commands for setting up Redis init script for automatic startup on system boot.

LANGUAGE: bash
CODE:
sudo cp utils/redis_init_script /etc/init.d/redis_6379
sudo vi /etc/init.d/redis_6379

----------------------------------------

TITLE: Setting Redis Key with Basic Timeout
DESCRIPTION: Shows the equivalent SET command syntax for SETEX operation, setting a key with an expiration time in seconds.

LANGUAGE: redis
CODE:
SET key value EX seconds

----------------------------------------

TITLE: Hardware Performance Counter Monitoring
DESCRIPTION: Collects detailed CPU performance metrics using perf stat with various hardware performance counters.

LANGUAGE: bash
CODE:
perf stat -e "cpu-clock,cpu-cycles,instructions,uops_executed.core,uops_executed.stall_cycles,cache-references,cache-misses,cycle_activity.stalls_total,cycle_activity.stalls_mem_any,cycle_activity.stalls_l3_miss,cycle_activity.stalls_l2_miss,cycle_activity.stalls_l1d_miss" --pid $(pgrep redis-server) -- sleep 60

----------------------------------------

TITLE: Retrieving Hash Field Names with Redis HKEYS Command
DESCRIPTION: This example demonstrates how to set hash fields using HSET and then retrieve all field names using HKEYS. It creates a hash named 'myhash' with two fields and then lists all field names.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HKEYS myhash

----------------------------------------

TITLE: Using ZRANK Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the ZRANK command in Redis CLI. It shows adding members to a sorted set, querying their ranks, and using the WITHSCORE option.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZRANK myzset "three"
ZRANK myzset "four"
ZRANK myzset "three" WITHSCORE
ZRANK myzset "four" WITHSCORE

----------------------------------------

TITLE: Sorting in Descending Order in Redis
DESCRIPTION: Shows how to use the DESC modifier to sort elements from large to small.

LANGUAGE: redis
CODE:
SORT mylist DESC

----------------------------------------

TITLE: Redis Service Management
DESCRIPTION: Commands for managing Redis service including adding to system startup and starting the service.

LANGUAGE: bash
CODE:
sudo update-rc.d redis_6379 defaults
sudo /etc/init.d/redis_6379 start

----------------------------------------

TITLE: Retrieving Set Members with SMEMBERS in Redis CLI
DESCRIPTION: This example demonstrates how to add elements to a set using SADD and then retrieve all members of the set using SMEMBERS. It shows the creation of a set 'myset' with two string elements and then retrieves all members.

LANGUAGE: cli
CODE:
SADD myset "Hello"
SADD myset "World"
SMEMBERS myset

----------------------------------------

TITLE: Function Call Counting with BCC
DESCRIPTION: Traces and counts Redis function calls matching specific patterns using BCC's funccount tool.

LANGUAGE: bash
CODE:
/usr/share/bcc/tools/funccount 'redis-server:(call*|*Read*|*Write*)' --pid $(pgrep redis-server) --duration 60

----------------------------------------

TITLE: Using Redis HRANDFIELD Command with Various Arguments
DESCRIPTION: Demonstrates different ways to use the HRANDFIELD command: basic usage with just a key, using count parameter, and with WITHVALUES modifier. Shows how to first set hash fields with HSET and then retrieve random fields.

LANGUAGE: cli
CODE:
HSET coin heads obverse tails reverse edge null
HRANDFIELD coin
HRANDFIELD coin
HRANDFIELD coin -5 WITHVALUES

----------------------------------------

TITLE: Removing Members from Redis Sorted Set using ZREM
DESCRIPTION: Example shows creating a sorted set with three members, removing one member, and displaying the resulting set. Demonstrates the ZADD command for initial population and ZREM for member removal, followed by ZRANGE to verify the results.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREM myzset "two"
ZRANGE myzset 0 -1 WITHSCORES

----------------------------------------

TITLE: Checking Set Membership with SMISMEMBER in Redis CLI
DESCRIPTION: This example demonstrates how to use the SMISMEMBER command in Redis. It first adds an element to a set, then checks membership for both an existing member and a non-existent member.

LANGUAGE: cli
CODE:
SADD myset "one"
SADD myset "one"
SMISMEMBER myset "one" "notamember"

----------------------------------------

TITLE: Rate Limiter Implementation - Version 2
DESCRIPTION: Second implementation of rate limiting using a single counter approach. Contains a potential race condition.

LANGUAGE: pseudocode
CODE:
FUNCTION LIMIT_API_CALL(ip):
current = GET(ip)
IF current != NULL AND current > 10 THEN
    ERROR "too many requests per second"
ELSE
    value = INCR(ip)
    IF value == 1 THEN
        EXPIRE(ip,1)
    END
    PERFORM_API_CALL()
END

----------------------------------------

TITLE: Starting Redis as a Background Service on macOS
DESCRIPTION: This command uses Homebrew services to start Redis as a background service. It ensures Redis restarts at login.

LANGUAGE: bash
CODE:
brew services start redis

----------------------------------------

TITLE: Using Hash Fields in Redis SORT
DESCRIPTION: Demonstrates how to use BY and GET options with hash fields in the SORT command.

LANGUAGE: redis
CODE:
SORT mylist BY weight_*->fieldname GET object_*->fieldname

----------------------------------------

TITLE: Checking Redis Process Memory Swap
DESCRIPTION: Commands to inspect Redis process memory swap status using proc filesystem

LANGUAGE: shell
CODE:
redis-cli info | grep process_id
cd /proc/5454
cat smaps | grep 'Swap:'
cat smaps | egrep '^(Swap|Size)'

----------------------------------------

TITLE: Using Redis LATENCY DOCTOR Command
DESCRIPTION: Example showing the output of the LATENCY DOCTOR command which provides detailed analysis of latency spikes, including statistics and recommendations for improvement. The output includes average latency, mean deviation, period between spikes, and specific configuration advice.

LANGUAGE: redis
CODE:
127.0.0.1:6379> latency doctor

Dave, I have observed latency spikes in this Redis instance.
You don't mind talking about it, do you Dave?

1. command: 5 latency spikes (average 300ms, mean deviation 120ms,
    period 73.40 sec). Worst all time event 500ms.

I have a few advices for you:

- Your current Slow Log configuration only logs events that are
    slower than your configured latency monitor threshold. Please
    use 'CONFIG SET slowlog-log-slower-than 1000'.
- Check your Slow Log to understand what are the commands you are
    running which are too slow to execute. Please check
    http://redis.io/commands/slowlog for more information.
- Deleting, expiring or evicting (because of maxmemory policy)
    large objects is a blocking operation. If you have very large
    objects that are often deleted, expired, or evicted, try to
    fragment those objects into multiple smaller objects.

----------------------------------------

TITLE: Using ZPOPMAX with Redis Sorted Set
DESCRIPTION: Example demonstrating how to use ZPOPMAX command by first adding members to a sorted set with ZADD and then retrieving the highest scoring member. The example shows adding three members with different scores and then popping the maximum value.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZPOPMAX myzset

----------------------------------------

TITLE: Advanced Bitmap Range Operations in Lua
DESCRIPTION: Lua script implementation for efficiently setting ranges of bits in a bitmap using SETRANGE command. Includes optimization for handling partial bytes and bulk operations.

LANGUAGE: lua
CODE:
--[[
Sets a bitmap range

Bitmaps are stored as Strings in Redis. A range spans one or more bytes,
so we can call `SETRANGE` when entire bytes need to be set instead of flipping
individual bits. Also, to avoid multiple internal memory allocations in
Redis, we traverse in reverse.
Expected input:
  KEYS[1] - bitfield key
  ARGV[1] - start offset (0-based, inclusive)
  ARGV[2] - end offset (same, should be bigger than start, no error checking)
  ARGV[3] - value (should be 0 or 1, no error checking)
]]--

local function tobits(str)
  local r = ''
  for i = 1, string.len(str) do
    local c = string.byte(str, i)
    local b = ' '
    for j = 0, 7 do
      b = tostring(bit.band(c, 1)) .. b
      c = bit.rshift(c, 1)
    end
    r = r .. b
  end
  return r
end

local k = KEYS[1]
local s, e, v = tonumber(ARGV[1]), tonumber(ARGV[2]), tonumber(ARGV[3])

local ms, me = s % 8, (e + 1) % 8
if me > 0 then
  local t = math.max(e - me + 1, s)
  for i = e, t, -1 do
    redis.call('SETBIT', k, i, v)
  end
  e = t
end

if ms > 0 then
  local t = math.min(s - ms + 7, e)
  for i = s, t, 1 do
    redis.call('SETBIT', k, i, v)
  end
  s = t + 1
end

local rs, re = s / 8, (e + 1) / 8
local rl = re - rs
if rl > 0 then
  local b = '\255'
  if 0 == v then
    b = '\0'
  end
  redis.call('SETRANGE', k, rs, string.rep(b, rl))
end

----------------------------------------

TITLE: Executing Redis Commands in CLI on macOS
DESCRIPTION: These commands demonstrate basic Redis operations using the CLI. They show how to push an item to a list and then pop it from the list.

LANGUAGE: bash
CODE:
127.0.0.1:6379> lpush demos redis-macOS-demo
OK
127.0.0.1:6379> rpop demos
"redis-macOS-demo"

----------------------------------------

TITLE: Using Redis WAIT Command with Timeouts
DESCRIPTION: Demonstrates usage of the WAIT command with different timeout values and replica counts. First example shows waiting for 1 replica indefinitely, second shows waiting for 2 replicas with a 1000ms timeout.

LANGUAGE: redis
CODE:
> SET foo bar
OK
> WAIT 1 0
(integer) 1
> WAIT 2 1000
(integer) 1

----------------------------------------

TITLE: Starting Redis Server in Foreground
DESCRIPTION: Command to start the Redis server in the foreground after installation.

LANGUAGE: bash
CODE:
redis-server

----------------------------------------

TITLE: Executing Redis Latency Help Command
DESCRIPTION: Command to display available latency diagnostic commands in Redis. This provides a list of all latency-related subcommands and their usage.

LANGUAGE: redis
CODE:
LATENCY HELP

----------------------------------------

TITLE: Using ZPOPMIN Command in Redis CLI
DESCRIPTION: Example demonstrates adding three members to a sorted set 'myzset' with different scores and then using ZPOPMIN to remove and return the member with the lowest score. The members are added with scores 1, 2, and 3, with ZPOPMIN returning the lowest scored member.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZPOPMIN myzset

----------------------------------------

TITLE: Basic SETBIT Usage in Redis CLI
DESCRIPTION: Demonstrates basic usage of the SETBIT command to set and clear individual bits in a Redis string value.

LANGUAGE: cli
CODE:
SETBIT mykey 7 1
SETBIT mykey 7 0
GET mykey

----------------------------------------

TITLE: Retrieving List Length with Redis LLEN Command (CLI)
DESCRIPTION: This example demonstrates how to use the LLEN command in Redis CLI to get the length of a list. It first pushes two elements to a list using LPUSH, then retrieves the length using LLEN.

LANGUAGE: cli
CODE:
LPUSH mylist "World"
LPUSH mylist "Hello"
LLEN mylist

----------------------------------------

TITLE: Running RedisInsight Docker Container Without Persistence
DESCRIPTION: Command to run RedisInsight in a Docker container without data persistence. Exposes port 5540 for web access.

LANGUAGE: bash
CODE:
docker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest

----------------------------------------

TITLE: Extended Redis XINFO STREAM Command with FULL Modifier
DESCRIPTION: Shows a complete example of stream operations including adding entries, creating a consumer group, reading from the group, and getting full stream information with the FULL modifier.

LANGUAGE: redis
CODE:
> XADD mystream * foo bar
"1638125133432-0"
> XADD mystream * foo bar2
"1638125141232-0"
> XGROUP CREATE mystream mygroup 0-0
OK
> XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream >
1) 1) "mystream"
   2) 1) 1) "1638125133432-0"
         2) 1) "foo"
            2) "bar"
> XINFO STREAM mystream FULL
 1) "length"
 2) (integer) 2
 3) "radix-tree-keys"
 4) (integer) 1
 5) "radix-tree-nodes"
 6) (integer) 2
 7) "last-generated-id"
 8) "1638125141232-0"
 9) "max-deleted-entry-id"
10) "0-0"
11) "entries-added"
12) (integer) 2
13) "entries"
14) 1) 1) "1638125133432-0"
       2) 1) "foo"
          2) "bar"
    2) 1) "1638125141232-0"
       2) 1) "foo"
          2) "bar2"
15) "groups"
16) 1)  1) "name"
        2) "mygroup"
        3) "last-delivered-id"
        4) "1638125133432-0"
        5) "entries-read"
        6) (integer) 1
        7) "lag"
        8) (integer) 1
        9) "pel-count"
       10) (integer) 1
       11) "pending"
       12) 1) 1) "1638125133432-0"
              2) "Alice"
              3) (integer) 1638125153423
              4) (integer) 1
       13) "consumers"
       14) 1) 1) "name"
              2) "Alice"
              3) "seen-time"
              4) (integer) 1638125133422
              5) "active-time"
              6) (integer) 1638125133432
              7) "pel-count"
              8) (integer) 1
              9) "pending"
              10) 1) 1) "1638125133432-0"
                     2) (integer) 1638125133432
                     3) (integer) 1

----------------------------------------

TITLE: Starting Redis Server in Foreground on macOS
DESCRIPTION: This command starts the Redis server in the foreground. It allows you to see the startup logs and run Redis interactively.

LANGUAGE: bash
CODE:
redis-server

----------------------------------------

TITLE: Viewing Redis Memory Commands
DESCRIPTION: This snippet demonstrates how to list all available memory-related commands in Redis using the MEMORY HELP command.

LANGUAGE: redis
CODE:
MEMORY HELP

----------------------------------------

TITLE: Querying Sorted Set Size with Redis ZCARD
DESCRIPTION: Demonstrates how to get the number of elements in a Redis sorted set using ZCARD. First adds two elements to a sorted set 'myzset' with ZADD, then retrieves the cardinality using ZCARD.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZCARD myzset

----------------------------------------

TITLE: Redis SDIFF Command Usage Example
DESCRIPTION: Practical example showing how to add members to sets using SADD and then compute their difference using SDIFF. Shows the sequence of commands to create two sets and find elements unique to the first set.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SDIFF key1 key2

----------------------------------------

TITLE: Deploying RedisInsight with Service on Kubernetes
DESCRIPTION: This YAML configuration creates a RedisInsight deployment and service in a Kubernetes cluster. It uses a LoadBalancer service type and an emptyDir volume for storage.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: redisinsight-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 5540
  selector:
    app: redisinsight
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight
  labels:
    app: redisinsight
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redisinsight
  template:
    metadata:
      labels:
        app: redisinsight
    spec:
      containers:
      - name:  redisinsight
        image: redis/redisinsight:latest
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: redisinsight
          mountPath: /data
        ports:
        - containerPort: 5540
          protocol: TCP
      volumes:
      - name: redisinsight
        emptyDir: {}

----------------------------------------

TITLE: Basic Redis XINFO STREAM Command Example
DESCRIPTION: Demonstrates the default output of XINFO STREAM command showing basic stream statistics including length, radix tree details, IDs, and entry information.

LANGUAGE: redis
CODE:
> XINFO STREAM mystream
 1) "length"
 2) (integer) 2
 3) "radix-tree-keys"
 4) (integer) 1
 5) "radix-tree-nodes"
 6) (integer) 2
 7) "last-generated-id"
 8) "1638125141232-0"
 9) "max-deleted-entry-id"
10) "0-0"
11) "entries-added"
12) (integer) 2
13) "groups"
14) (integer) 1
15) "first-entry"
16) 1) "1638125133432-0"
    2) 1) "message"
       2) "apple"
17) "last-entry"
18) 1) "1638125141232-0"
    2) 1) "message"
       2) "banana"

----------------------------------------

TITLE: Connecting to Redis CLI on macOS
DESCRIPTION: This command opens the Redis command-line interface (CLI), allowing you to interact with the Redis server and execute Redis commands.

LANGUAGE: bash
CODE:
redis-cli

----------------------------------------

TITLE: Setting and Checking Expiration with PEXPIRE in Redis CLI
DESCRIPTION: This example demonstrates how to set a key's expiration time in milliseconds using PEXPIRE, check its TTL, and use the XX and NX options. It shows the interaction between TTL and PTTL commands with PEXPIRE.

LANGUAGE: cli
CODE:
SET mykey "Hello"
PEXPIRE mykey 1500
TTL mykey
PTTL mykey
PEXPIRE mykey 1000 XX
TTL mykey
PEXPIRE mykey 1000 NX
TTL mykey

----------------------------------------

TITLE: Removing Hash Fields with Redis HDEL Command
DESCRIPTION: Example showing how to remove fields from a Redis hash using HDEL. First sets a field value with HSET, then demonstrates successful and non-existent field deletion cases.

LANGUAGE: cli
CODE:
HSET myhash field1 "foo"
HDEL myhash field1
HDEL myhash field2

----------------------------------------

TITLE: Adding Members to a Redis Set using SADD Command
DESCRIPTION: This example demonstrates how to use the SADD command in Redis to add members to a set. It shows adding unique and duplicate values, and then retrieving all members of the set using SMEMBERS.

LANGUAGE: cli
CODE:
SADD myset "Hello"
SADD myset "World"
SADD myset "World"
SMEMBERS myset

----------------------------------------

TITLE: Using PEXPIRETIME Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the PEXPIRETIME command in Redis. It sets a key, sets its expiration time using PEXPIREAT, and then retrieves the expiration time in milliseconds using PEXPIRETIME.

LANGUAGE: cli
CODE:
SET mykey "Hello"
PEXPIREAT mykey 33177117420000
PEXPIRETIME mykey

----------------------------------------

TITLE: Deploying RedisInsight with Persistent Storage on Kubernetes
DESCRIPTION: This YAML configuration creates a RedisInsight deployment with persistent storage using a PersistentVolumeClaim. It includes an init container to set proper permissions on the volume.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: redisinsight-service
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 5540
  selector:
    app: redisinsight
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redisinsight-pv-claim
  labels:
    app: redisinsight
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight
  labels:
    app: redisinsight
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redisinsight
  template:
    metadata:
      labels:
        app: redisinsight
    spec:
      volumes:
        - name: redisinsight
          persistentVolumeClaim:
            claimName: redisinsight-pv-claim
      initContainers:
        - name: init
          image: busybox
          command:
            - /bin/sh
            - '-c'
            - |
              chown -R 1001 /data
          resources: {}
          volumeMounts:
            - name: redisinsight
              mountPath: /data
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
        - name:  redisinsight
          image: redis/redisinsight:latest
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: redisinsight
            mountPath: /data
          ports:
          - containerPort: 5540
            protocol: TCP

----------------------------------------

TITLE: Setting Last Delivered ID for Redis Stream Consumer Group
DESCRIPTION: Sets the last delivered ID for a consumer group to allow message reprocessing. This example shows how to reset the group's position to the beginning of the stream by setting the ID to 0.

LANGUAGE: redis
CODE:
XGROUP SETID mystream mygroup 0

----------------------------------------

TITLE: Installing Redis via Snapcraft
DESCRIPTION: Installs Redis using the Snap package manager, which is available on most major Linux distributions. This is a simpler installation method for systems that support snap packages.

LANGUAGE: bash
CODE:
sudo snap install redis

----------------------------------------

TITLE: Redis Set Difference Basic Example
DESCRIPTION: Shows how set difference works using example sets with letters. The result contains elements present in key1 but not in key2 and key3.

LANGUAGE: text
CODE:
key1 = {a,b,c,d}
key2 = {c}
key3 = {a,c,e}
SDIFF key1 key2 key3 = {b,d}

----------------------------------------

TITLE: Checking Field Existence in Redis Hash using HEXISTS
DESCRIPTION: This example demonstrates how to use the HEXISTS command in Redis to check if a field exists in a hash. It first sets a field in a hash using HSET, then checks for the existence of that field and a non-existent field using HEXISTS.

LANGUAGE: cli
CODE:
HSET myhash field1 "foo"
HEXISTS myhash field1
HEXISTS myhash field2

----------------------------------------

TITLE: Inserting Values with Redis RPUSH Command
DESCRIPTION: This example demonstrates how to use the RPUSH command to insert multiple values into a Redis list. It shows inserting 'hello' and 'world' into 'mylist', then retrieving all elements using LRANGE.

LANGUAGE: cli
CODE:
RPUSH mylist "hello"
RPUSH mylist "world"
LRANGE mylist 0 -1

----------------------------------------

TITLE: Port Forwarding for RedisInsight Deployment
DESCRIPTION: This shell command sets up port forwarding to access the RedisInsight deployment locally on port 5540.

LANGUAGE: sh
CODE:
kubectl port-forward deployment/redisinsight 5540

----------------------------------------

TITLE: Creating Consumer Group and Reading Stream Data
DESCRIPTION: Demonstrates creating a consumer group and reading from a stream using XREADGROUP, which creates a pending entry.

LANGUAGE: redis
CODE:
> XGROUP CREATE mystream group55 0-0
OK

> XREADGROUP GROUP group55 consumer-123 COUNT 1 STREAMS mystream >
1) 1) "mystream"
   2) 1) 1) 1526984818136-0
         2) 1) "duration"
            2) "1532"
            3) "event-id"
            4) "5"
            5) "user-id"
            6) "7782813"

----------------------------------------

TITLE: Retrieving RedisInsight Service Information
DESCRIPTION: This shell command retrieves information about the RedisInsight service, including its external IP address.

LANGUAGE: sh
CODE:
kubectl get svc redisinsight-service

----------------------------------------

TITLE: Basic Usage of SETRANGE Command in Redis CLI
DESCRIPTION: Demonstrates how to use the SETRANGE command to overwrite part of a string stored at a key. It sets an initial string, then overwrites a portion of it starting at a specific offset.

LANGUAGE: cli
CODE:
SET key1 "Hello World"
SETRANGE key1 6 "Redis"
GET key1

----------------------------------------

TITLE: Counting Hash Fields with Redis HLEN Command
DESCRIPTION: This example demonstrates how to use the Redis HLEN command to count the number of fields in a hash. It first sets two fields in a hash using HSET, then uses HLEN to count the fields.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HLEN myhash

----------------------------------------

TITLE: Executing ROLE Command in Redis CLI
DESCRIPTION: Example of how to execute the ROLE command in the Redis command-line interface.

LANGUAGE: cli
CODE:
ROLE

----------------------------------------

TITLE: Forcing Redis Shutdown in Pre-7.0 Versions
DESCRIPTION: Commands to force Redis shutdown in versions before 7.0, where NOW and FORCE flags are not available. This disables AOF and performs a NOSAVE shutdown.

LANGUAGE: redis
CODE:
CONFIG appendonly no
SHUTDOWN NOSAVE

----------------------------------------

TITLE: Installing Lettuce with Maven
DESCRIPTION: Maven dependency configuration for adding Lettuce to a Java project

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.lettuce</groupId>
    <artifactId>lettuce-core</artifactId>
    <version>6.3.2.RELEASE</version> <!-- Check for the latest version on Maven Central -->
</dependency>

----------------------------------------

TITLE: Trimming Redis Stream by Minimum ID
DESCRIPTION: This example shows how to trim a Redis stream by evicting all entries with IDs lower than a specified threshold using the MINID strategy.

LANGUAGE: redis
CODE:
XTRIM mystream MINID 649085820

----------------------------------------

TITLE: Starting a Redis Lua Debugging Session with CLI
DESCRIPTION: Demonstrates how to start a debugging session for a Lua script using redis-cli. It shows how to pass key names and arguments to the script during debugging.

LANGUAGE: bash
CODE:
./redis-cli --ldb --eval /tmp/script.lua mykey somekey , arg1 arg2

----------------------------------------

TITLE: Storing SORT Results in Redis
DESCRIPTION: Shows how to store the result of a SORT operation in a new key instead of returning it to the client.

LANGUAGE: redis
CODE:
SORT mylist BY weight_* STORE resultkey

----------------------------------------

TITLE: Retrieving All Hash Values with Redis HVALS Command
DESCRIPTION: This example demonstrates how to use the HVALS command in Redis to retrieve all values from a hash. It first sets two field-value pairs in a hash named 'myhash' using HSET, then retrieves all values using HVALS.

LANGUAGE: cli
CODE:
HSET myhash field1 "Hello"
HSET myhash field2 "World"
HVALS myhash

----------------------------------------

TITLE: Querying Sentinel Role Information in Redis
DESCRIPTION: Example output of the ROLE command when called on a Redis Sentinel instance. It returns the role and an array of monitored master names.

LANGUAGE: redis
CODE:
1) "sentinel"
2) 1) "resque-master"
   2) "html-fragments-master"
   3) "stats-master"
   4) "metadata-master"

----------------------------------------

TITLE: Installing node-redis with npm
DESCRIPTION: Install the node-redis client using npm package manager.

LANGUAGE: bash
CODE:
npm install redis

----------------------------------------

TITLE: Counting Elements in Redis Sorted Set Using ZCOUNT
DESCRIPTION: Demonstrates using ZCOUNT to count elements in a sorted set within a score range. The example creates a sorted set 'myzset' with three elements and shows counting all elements (-inf to +inf) and elements with scores between 1 and 3 exclusive.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZCOUNT myzset -inf +inf
ZCOUNT myzset (1 3

----------------------------------------

TITLE: Starting Redis Lua Debugger in Synchronous Mode
DESCRIPTION: Demonstrates how to start the Redis Lua debugger in synchronous mode, which retains changes to the dataset during debugging.

LANGUAGE: bash
CODE:
./redis-cli --ldb-sync-mode --eval /tmp/script.lua

----------------------------------------

TITLE: Subscribing to Redis Shard Channels using SSUBSCRIBE
DESCRIPTION: This example demonstrates how to use the SSUBSCRIBE command to subscribe to a shard channel named 'orders' in Redis. It shows the subscription confirmation and a received message.

LANGUAGE: redis
CODE:
> ssubscribe orders
Reading messages... (press Ctrl-C to quit)
1) "ssubscribe"
2) "orders"
3) (integer) 1
1) "smessage"
2) "orders"
3) "hello"

----------------------------------------

TITLE: Getting Set Cardinality with Redis SCARD Command
DESCRIPTION: Example demonstrates using SADD to populate a set with elements and SCARD to count them. Shows adding two strings "Hello" and "World" to a set named "myset" and then retrieving the cardinality.

LANGUAGE: cli
CODE:
SADD myset "Hello"
SADD myset "World"
SCARD myset

----------------------------------------

TITLE: Using RESTORE Command in Redis
DESCRIPTION: This example demonstrates the usage of the RESTORE command in Redis. It shows how to restore a serialized value to a new key, check its type, and retrieve its contents.

LANGUAGE: redis
CODE:
redis> DEL mykey
0
redis> RESTORE mykey 0 "\n\x17\x17\x00\x00\x00\x12\x00\x00\x00\x03\x00\
                        x00\xc0\x01\x00\x04\xc0\x02\x00\x04\xc0\x03\x00\
                        xff\x04\x00u#<\xc0;.\xe9\xdd"
OK
redis> TYPE mykey
list
redis> LRANGE mykey 0 -1
1) "1"
2) "2"
3) "3"

----------------------------------------

TITLE: Using UNLINK Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the UNLINK command in Redis CLI to asynchronously remove multiple keys. It sets two keys and then unlinks them along with a non-existent key.

LANGUAGE: cli
CODE:
SET key1 "Hello"
SET key2 "World"
UNLINK key1 key2 key3

----------------------------------------

TITLE: Connecting to Redis Cluster in Go
DESCRIPTION: Establish a connection to a Redis cluster using the go-redis client. This snippet shows how to create a new cluster client with multiple node addresses.

LANGUAGE: go
CODE:
client := redis.NewClusterClient(&redis.ClusterOptions{
    Addrs: []string{":16379", ":16380", ":16381", ":16382", ":16383", ":16384"},

    // To route commands by latency or randomly, enable one of the following.
    //RouteByLatency: true,
    //RouteRandomly: true,
})

----------------------------------------

TITLE: Counting Elements in Redis Sorted Set Using ZLEXCOUNT
DESCRIPTION: This example demonstrates how to use the ZLEXCOUNT command in Redis to count elements in a sorted set. It first adds elements to a sorted set 'myzset' with the same score, then counts all elements and a specific range.

LANGUAGE: cli
CODE:
ZADD myzset 0 a 0 b 0 c 0 d 0 e
ZADD myzset 0 f 0 g
ZLEXCOUNT myzset - +
ZLEXCOUNT myzset [b [f

----------------------------------------

TITLE: Local Variable Declaration in Lua Scripts
DESCRIPTION: Demonstrates proper local variable declaration in Redis Lua scripts, which is required as global variables are blocked in the sandbox environment.

LANGUAGE: lua
CODE:
local my_local_variable = 'some value'

local function my_local_function()
  -- Do something else, but equally amazing
end

----------------------------------------

TITLE: Removing Elements by Lexicographical Range in Redis Sorted Set
DESCRIPTION: Demonstrates how to use ZREMRANGEBYLEX to remove elements from a sorted set based on lexicographical range. The example shows adding elements with same score (0), displaying the set contents, removing elements between 'alpha' and 'omega', and showing the resulting set.

LANGUAGE: cli
CODE:
ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e
ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha
ZRANGE myzset 0 -1
ZREMRANGEBYLEX myzset [alpha [omega
ZRANGE myzset 0 -1

----------------------------------------

TITLE: Performing Bitwise AND Operation in Redis CLI
DESCRIPTION: Example demonstrating how to use BITOP command to perform a bitwise AND operation between two strings stored in Redis keys. The result is stored in a destination key which can then be retrieved.

LANGUAGE: cli
CODE:
SET key1 "foobar"
SET key2 "abcdef"
BITOP AND dest key1 key2
GET dest

----------------------------------------

TITLE: Renaming Keys with Redis RENAME Command
DESCRIPTION: Demonstrates how to rename an existing key in Redis using the RENAME command. The example shows creating a key with SET, renaming it, and retrieving the value from the new key name. This operation implicitly deletes any existing key at the target name.

LANGUAGE: cli
CODE:
SET mykey "Hello"
RENAME mykey myotherkey
GET myotherkey

----------------------------------------

TITLE: HashMap Operations
DESCRIPTION: Example of storing and retrieving data using Redis HashMaps

LANGUAGE: csharp
CODE:
var hash = new HashEntry[] { 
    new HashEntry("name", "John"), 
    new HashEntry("surname", "Smith"),
    new HashEntry("company", "Redis"),
    new HashEntry("age", "29"),
    };
db.HashSet("user-session:123", hash);

var hashFields = db.HashGetAll("user-session:123");
Console.WriteLine(String.Join("; ", hashFields));

----------------------------------------

TITLE: Selecting Weighted Random Element from Redis Sorted Set (Pseudocode)
DESCRIPTION: Shows how to select a weighted random element from the prepared sorted set using ZRANGEBYSCORE with a random score between 0 and 1.

LANGUAGE: pseudocode
CODE:
RANDOM_ELE = ZRANGEBYSCORE key RAND() +inf LIMIT 0 1

----------------------------------------

TITLE: Random List Population Script
DESCRIPTION: Ruby script that uses Lua to populate a Redis list with random numbers in a deterministic way.

LANGUAGE: ruby
CODE:
require 'rubygems'
require 'redis'

r = Redis.new

RandomPushScript = <<EOF
    local i = tonumber(ARGV[1])
    local res
    math.randomseed(tonumber(ARGV[2]))
    while (i > 0) do
        res = redis.call('LPUSH',KEYS[1],math.random())
        i = i-1
    end
    return res
EOF

r.del(:mylist)
puts r.eval(RandomPushScript,1,:mylist,10,rand(2**32))

----------------------------------------

TITLE: Using ZREMRANGEBYRANK in Redis CLI
DESCRIPTION: This example demonstrates how to use the ZREMRANGEBYRANK command in Redis CLI. It adds elements to a sorted set, removes elements based on rank, and then displays the remaining elements.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREMRANGEBYRANK myzset 0 1
ZRANGE myzset 0 -1 WITHSCORES

----------------------------------------

TITLE: Publishing to Redis Shard Channel
DESCRIPTION: Demonstrates how to publish a message to a Redis shard channel named 'orders'. The command returns the number of clients that received the message.

LANGUAGE: redis
CODE:
> spublish orders hello
(integer) 1

----------------------------------------

TITLE: Using REPLICAOF Command in Redis
DESCRIPTION: Demonstrates how to use the REPLICAOF command in Redis to stop replication and to set a new master server. The first example turns the server into a master, while the second example configures the server as a replica of a specified host and port.

LANGUAGE: redis
CODE:
> REPLICAOF NO ONE
"OK"

> REPLICAOF 127.0.0.1 6799
"OK"

----------------------------------------

TITLE: Retrieving Elements from Redis Sorted Set using ZREVRANGE
DESCRIPTION: Demonstrates how to add elements to a sorted set and retrieve them in reverse order using different range parameters. Shows adding three elements with different scores and retrieving them using various range specifications including full range (0 -1), specific range (2 3), and negative indices (-2 -1).

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREVRANGE myzset 0 -1
ZREVRANGE myzset 2 3
ZREVRANGE myzset -2 -1

----------------------------------------

TITLE: Returning Values from Module Commands
DESCRIPTION: Demonstrates different ways to return values from custom module commands.

LANGUAGE: C
CODE:
RedisModule_ReplyWithError(ctx,"ERR invalid arguments");

RedisModule_ReplyWithLongLong(ctx,12345);

RedisModule_ReplyWithSimpleString(ctx,"OK");

RedisModule_ReplyWithArray(ctx,2);
RedisModule_ReplyWithStringBuffer(ctx,"age",3);
RedisModule_ReplyWithLongLong(ctx,22);

----------------------------------------

TITLE: Implementing Weighted Random Selection with Redis Sorted Set (Pseudocode)
DESCRIPTION: Illustrates a pattern for using ZRANGEBYSCORE to perform weighted random selection. It involves adding elements to a sorted set with normalized cumulative weights as scores, then selecting a random element based on a random score.

LANGUAGE: pseudocode
CODE:
SUM = ELEMENTS.TOTAL_WEIGHT // 6 in this case.
SCORE = 0
FOREACH ELE in ELEMENTS
    SCORE += ELE.weight / SUM
    ZADD KEY SCORE ELE
END

----------------------------------------

TITLE: Redis Hash Set Function with Timestamp
DESCRIPTION: Implementation of a custom HSET function that automatically tracks last modification time

LANGUAGE: lua
CODE:
#!lua name=mylib

local function my_hset(keys, args)
  local hash = keys[1]
  local time = redis.call('TIME')[1]
  return redis.call('HSET', hash, '_last_modified_', time, unpack(args))
end

redis.register_function('my_hset', my_hset)

----------------------------------------

TITLE: Using ZREVRANGEBYSCORE in Redis CLI
DESCRIPTION: Demonstrates the usage of ZREVRANGEBYSCORE command with various score range queries. Shows how to add elements to a sorted set and retrieve them in reverse order based on score ranges, including inclusive and exclusive range boundaries denoted by '(' character.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZREVRANGEBYSCORE myzset +inf -inf
ZREVRANGEBYSCORE myzset 2 1
ZREVRANGEBYSCORE myzset 2 (1
ZREVRANGEBYSCORE myzset (2 (1

----------------------------------------

TITLE: Executing Redis LOLWUT Command with Version Specification
DESCRIPTION: Example showing how to run the LOLWUT command for a specific Redis version. The command accepts optional arguments that modify the generated art output for that version.

LANGUAGE: redis
CODE:
LOLWUT VERSION 5 ... other optional arguments ...

----------------------------------------

TITLE: Querying Subscriber Count for Shard Channels in Redis
DESCRIPTION: This snippet demonstrates how to use the PUBSUB SHARDNUMSUB command in Redis to get the number of subscribers for a shard channel. It returns a list with the channel name and the number of subscribers.

LANGUAGE: redis
CODE:
> PUBSUB SHARDNUMSUB orders
1) "orders"
2) (integer) 1

----------------------------------------

TITLE: Registering a New Native Data Type in Redis Module
DESCRIPTION: This snippet demonstrates how to register a new native data type in a Redis module's OnLoad function. It sets up the required callback functions and creates the data type with a unique name and encoding version.

LANGUAGE: C
CODE:
static RedisModuleType *MyType;
#define MYTYPE_ENCODING_VERSION 0

int RedisModule_OnLoad(RedisModuleCtx *ctx) {
    RedisModuleTypeMethods tm = {
        .version = REDISMODULE_TYPE_METHOD_VERSION,
        .rdb_load = MyTypeRDBLoad,
        .rdb_save = MyTypeRDBSave,
        .aof_rewrite = MyTypeAOFRewrite,
        .free = MyTypeFree
    };

    MyType = RedisModule_CreateDataType(ctx, "MyType-AZ",
        MYTYPE_ENCODING_VERSION, &tm);
    if (MyType == NULL) return REDISMODULE_ERR;
}

----------------------------------------

TITLE: Case-Insensitive Indexing Example in Redis
DESCRIPTION: Shows how to implement case-insensitive searching while preserving original case by using a normalized prefix pattern with colon separator.

LANGUAGE: cli
CODE:
ZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap

----------------------------------------

TITLE: Installing go-redis Client for Go
DESCRIPTION: Install the go-redis client library using the go get command.

LANGUAGE: bash
CODE:
go get github.com/redis/go-redis/v9

----------------------------------------

TITLE: Empty Redis Function Library Example
DESCRIPTION: Example showing invalid empty library load attempt with required Shebang format

LANGUAGE: lua
CODE:
#!<engine name> name=<library name>

----------------------------------------

TITLE: Stack Operations with Redis Lists
DESCRIPTION: Shows how to implement a stack (LIFO - Last In, First Out) using LPUSH and LPOP commands.

LANGUAGE: redis
CODE:
> LPUSH bikes:repairs bike:1
(integer) 1
> LPUSH bikes:repairs bike:2
(integer) 2
> LPOP bikes:repairs
"bike:2"
> LPOP bikes:repairs
"bike:1"

----------------------------------------

TITLE: Querying Active Shard Channels in Redis
DESCRIPTION: This snippet demonstrates the usage of the PUBSUB SHARDCHANNELS command in Redis. It shows how to list all active shard channels and how to use a pattern to filter the results. The command returns information at the shard level, not the cluster level.

LANGUAGE: redis
CODE:
> PUBSUB SHARDCHANNELS
1) "orders"
> PUBSUB SHARDCHANNELS o*
1) "orders"

----------------------------------------

TITLE: Implementing a Custom Redis Lua Debugging Client
DESCRIPTION: Demonstrates how to create a custom debugging client using Lua and the redis-lua library, showcasing integration with the Redis Lua debugger.

LANGUAGE: Lua
CODE:
local redis = require 'redis'

-- add LDB's Continue command
redis.commands['ldbcontinue'] = redis.command('C')

-- script to be debugged
local script = [[
  local x, y = tonumber(ARGV[1]), tonumber(ARGV[2])
  local result = x * y
  return result
]]

local client = redis.connect('127.0.0.1', 6379)
client:script("DEBUG", "YES")
print(unpack(client:eval(script, 0, 6, 9)))
client:ldbcontinue()

----------------------------------------

TITLE: Setting a Native Type Value to a Redis Key
DESCRIPTION: This code shows how to set a native type value to a Redis key using the modules API. It opens the key for writing, creates a custom data structure, and associates it with the key.

LANGUAGE: C
CODE:
RedisModuleKey *key = RedisModule_OpenKey(ctx,keyname,REDISMODULE_WRITE);
struct some_private_struct *data = createMyDataStructure();
RedisModule_ModuleTypeSetValue(key,MyType,data);

----------------------------------------

TITLE: Unblocking a Client in Redis Module C API
DESCRIPTION: Shows how to use RedisModule_UnblockClient to unblock a previously blocked client. This function is thread-safe and can be called from a separate thread.

LANGUAGE: c
CODE:
int RedisModule_UnblockClient(RedisModuleBlockedClient *bc, void *privdata);

----------------------------------------

TITLE: Connecting to Redis Cluster
DESCRIPTION: Example of connecting to a Redis cluster using JedisCluster with multiple nodes

LANGUAGE: java
CODE:
Set<HostAndPort> jedisClusterNodes = new HashSet<HostAndPort>();
jedisClusterNodes.add(new HostAndPort("127.0.0.1", 7379));
jedisClusterNodes.add(new HostAndPort("127.0.0.1", 7380));
JedisCluster jedis = new JedisCluster(jedisClusterNodes);

----------------------------------------

TITLE: List Movement Operations in Redis
DESCRIPTION: Demonstrates atomic movement of elements between lists using LMOVE command and checking list contents with LRANGE.

LANGUAGE: redis
CODE:
> LPUSH bikes:repairs bike:1
(integer) 1
> LPUSH bikes:repairs bike:2
(integer) 2
> LMOVE bikes:repairs bikes:finished LEFT LEFT
"bike:2"
> LRANGE bikes:repairs 0 -1
1) "bike:1"
> LRANGE bikes:finished 0 -1
1) "bike:2"

----------------------------------------

TITLE: Accessing Redis Object Introspection Commands Help
DESCRIPTION: This snippet demonstrates how to view the list of available object introspection subcommands in Redis. It uses the OBJECT HELP command to display the available options.

LANGUAGE: redis
CODE:
OBJECT HELP

----------------------------------------

TITLE: Aborting a Blocked Client in Redis Module C API
DESCRIPTION: Demonstrates how to use RedisModule_AbortBlock to abort the blocking of a client when an error occurs during resource allocation for the blocking operation.

LANGUAGE: c
CODE:
int Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
                             int argc)
{
    RedisModuleBlockedClient *bc =
        RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);

    pthread_t tid;
    if (pthread_create(&tid,NULL,threadmain,bc) != 0) {
        RedisModule_AbortBlock(bc);
        RedisModule_ReplyWithError(ctx,"Sorry can't create a thread");
    }

    return REDISMODULE_OK;
}

----------------------------------------

TITLE: Blocking a Client in Redis Module C API
DESCRIPTION: Demonstrates how to use RedisModule_BlockClient to block a client and set up callbacks for replies and timeouts. The function returns a RedisModuleBlockedClient object used for unblocking.

LANGUAGE: c
CODE:
RedisModuleBlockedClient *RedisModule_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(void*), long long timeout_ms);

----------------------------------------

TITLE: Redis Stack Commands Interface Access
DESCRIPTION: Shows how to access various Redis Stack capabilities through appropriate interfaces

LANGUAGE: csharp
CODE:
IBloomCommands bf = db.BF();
ICuckooCommands cf = db.CF();
ICmsCommands cms = db.CMS();
IGraphCommands graph = db.GRAPH();
ITopKCommands topk = db.TOPK();
ITdigestCommands tdigest = db.TDIGEST();
ISearchCommands ft = db.FT();
IJsonCommands json = db.JSON();
ITimeSeriesCommands ts = db.TS();

----------------------------------------

TITLE: Conditional String Setting in Redis
DESCRIPTION: Shows how to use SET command options to conditionally set string values based on key existence.

LANGUAGE: redis
CODE:
> set bike:1 bike nx
(nil)
> set bike:1 bike xx
OK

----------------------------------------

TITLE: Redis Benchmark With MONITOR Running
DESCRIPTION: This snippet shows the benchmark results for various Redis operations with MONITOR running. It demonstrates the performance impact of running MONITOR on operations like PING, SET, GET, and INCR.

LANGUAGE: bash
CODE:
$ src/redis-benchmark -c 10 -n 100000 -q
PING_INLINE: 58479.53 requests per second
PING_BULK: 59136.61 requests per second
SET: 41823.50 requests per second
GET: 45330.91 requests per second
INCR: 41771.09 requests per second

----------------------------------------

TITLE: Parsing XADD Command Arguments in Redis
DESCRIPTION: This JSON snippet demonstrates the structure of the 'arguments' array for the XADD command in Redis. It includes nested arguments for key, nomkstream option, trimming clause, ID specification, and field-value pairs.

LANGUAGE: json
CODE:
[
  {
    "name": "key",
    "type": "key",
    "value": "key"
  },
  {
    "name": "nomkstream",
    "type": "pure-token",
    "token": "NOMKSTREAM",
    "since": "6.2",
    "flags": ["optional"]
  },
  {
    "name": "trim",
    "type": "block",
    "flags": ["optional"],
    "value": [
      {
        "name": "strategy",
        "type": "oneof",
        "value": [
          {
            "name": "maxlen",
            "type": "pure-token",
            "token": "MAXLEN"
          },
          {
            "name": "minid",
            "type": "pure-token",
            "token": "MINID",
            "since": "6.2"
          }
        ]
      },
      {
        "name": "operator",
        "type": "oneof",
        "flags": ["optional"],
        "value": [
          {
            "name": "equal",
            "type": "pure-token",
            "token": "="
          },
          {
            "name": "approximately",
            "type": "pure-token",
            "token": "~"
          }
        ]
      },
      {
        "name": "threshold",
        "type": "string",
        "value": "threshold"
      },
      {
        "name": "count",
        "type": "integer",
        "token": "LIMIT",
        "since": "6.2",
        "flags": ["optional"],
        "value": "count"
      }
    ]
  },
  {
    "name": "id_or_auto",
    "type": "oneof",
    "value": [
      {
        "name": "auto_id",
        "type": "pure-token",
        "token": "*"
      },
      {
        "name": "id",
        "type": "string",
        "value": "id"
      }
    ]
  },
  {
    "name": "field_value",
    "type": "block",
    "flags": ["multiple"],
    "value": [
      {
        "name": "field",
        "type": "string",
        "value": "field"
      },
      {
        "name": "value",
        "type": "string",
        "value": "value"
      }
    ]
  }
]

----------------------------------------

TITLE: Implementing Redis Module Command with Unified Callback in C
DESCRIPTION: Shows how to implement a Redis module command that uses the same function for the main command, reply callback, and timeout callback using RedisModule_IsBlockedReplyRequest and RedisModule_IsBlockedTimeoutRequest.

LANGUAGE: c
CODE:
int Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
                             int argc)
{
    if (RedisModule_IsBlockedReplyRequest(ctx)) {
        long *mynumber = RedisModule_GetBlockedClientPrivateData(ctx);
        return RedisModule_ReplyWithLongLong(ctx,mynumber);
    } else if (RedisModule_IsBlockedTimeoutRequest) {
        return RedisModule_ReplyWithNull(ctx);
    }

    RedisModuleBlockedClient *bc =
        RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);

    pthread_t tid;
    if (pthread_create(&tid,NULL,threadmain,bc) != 0) {
        RedisModule_AbortBlock(bc);
        RedisModule_ReplyWithError(ctx,"Sorry can't create a thread");
    }

    return REDISMODULE_OK;
}

----------------------------------------

TITLE: Querying Sentinel for Master Address in Redis
DESCRIPTION: This command is used to retrieve the IP address and port of the current master for a given service name from a Sentinel instance.

LANGUAGE: redis
CODE:
SENTINEL get-master-addr-by-name master-name

----------------------------------------

TITLE: Counting Set Bits in Redis Bitmap
DESCRIPTION: Shows how to use the BITCOUNT command to count the number of bits set to 1 in a Redis bitmap.

LANGUAGE: redis
CODE:
> BITCOUNT pings:2024-01-01-00:00
(integer) 1

----------------------------------------

TITLE: Inserting Elements in Redis List Using LINSERT
DESCRIPTION: Demonstrates how to use the LINSERT command to insert an element before a pivot value in a Redis list. The example shows creating a list with RPUSH, inserting a new element, and retrieving the final list contents.

LANGUAGE: cli
CODE:
RPUSH mylist "Hello"
RPUSH mylist "World"
LINSERT mylist BEFORE "World" "There"
LRANGE mylist 0 -1

----------------------------------------

TITLE: Implementing High-Performance RESP Length Parser in C
DESCRIPTION: Example C code demonstrating efficient parsing of RESP bulk string lengths by processing one character at a time while scanning for CR. Shows how to achieve binary protocol-like performance while maintaining readability.

LANGUAGE: C
CODE:
#include <stdio.h>

int main(void) {
    unsigned char *p = "$123\r\n";
    int len = 0;

    p++;
    while(*p != '\r') {
        len = (len*10)+(*p - '0');
        p++;
    }

    /* Now p points at '\r', and the len is in bulk_len. */
    printf("%d\n", len);
    return 0;
}

----------------------------------------

TITLE: Implementing RDB Load Method for Native Type
DESCRIPTION: This code demonstrates how to implement the RDB load method for a custom native type. It reconstructs an array of doubles by first loading the count, then each value.

LANGUAGE: C
CODE:
void *DoubleArrayRDBLoad(RedisModuleIO *io, int encver) {
    if (encver != DOUBLE_ARRAY_ENC_VER) {
        return NULL;
    }

    struct double_array *da;
    da = RedisModule_Alloc(sizeof(*da));
    da->count = RedisModule_LoadUnsigned(io);
    da->values = RedisModule_Alloc(da->count * sizeof(double));
    for (size_t j = 0; j < da->count; j++)
        da->values[j] = RedisModule_LoadDouble(io);
    return da;
}

----------------------------------------

TITLE: Working with Redis Sets
DESCRIPTION: Use SADD to add elements to a set, SCARD to get the cardinality, and SMEMBERS to retrieve all elements.

LANGUAGE: Redis
CODE:
SADD myset a
SADD myset b
SADD myset foo
SADD myset bar
SCARD myset => 4
SMEMBERS myset => bar,a,foo,b

----------------------------------------

TITLE: Acknowledging Message in Redis Stream Consumer Group
DESCRIPTION: Acknowledges a message as processed in the 'italy_riders' consumer group

LANGUAGE: redis
CODE:
> XACK race:italy italy_riders 1692632639151-0
(integer) 1

----------------------------------------

TITLE: LCS Command with Match Length Information in Redis
DESCRIPTION: Shows the use of the WITHMATCHLEN option in combination with MINMATCHLEN to include the length of each match in the output.

LANGUAGE: redis
CODE:
> LCS key1 key2 IDX MINMATCHLEN 4 WITHMATCHLEN
1) "matches"
2) 1) 1) 1) (integer) 4
         2) (integer) 7
      2) 1) (integer) 5
         2) (integer) 8
      3) (integer) 4
3) "len"
4) (integer) 6

----------------------------------------

TITLE: Getting Redis String Length in C
DESCRIPTION: The sdslen function retrieves the length of a Redis string using pointer arithmetic to access the sdshdr structure.

LANGUAGE: C
CODE:
size_t sdslen(const sds s) {
    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));
    return sh->len;
}

----------------------------------------

TITLE: Calling Redis Commands from Modules
DESCRIPTION: Shows how to call existing Redis commands from within a module using RedisModule_Call.

LANGUAGE: C
CODE:
RedisModuleCallReply *reply;
reply = RedisModule_Call(ctx,"INCRBY","sc",argv[1],"10");

if (RedisModule_CallReplyType(reply) == REDISMODULE_REPLY_INTEGER) {
    long long myval = RedisModule_CallReplyInteger(reply);
    /* Do something with myval. */
}

----------------------------------------

TITLE: Checking if user is logged in
DESCRIPTION: Verify authentication cookie and load user info if valid.

LANGUAGE: PHP
CODE:
function isLoggedIn() {
    global $User, $_COOKIE;

    if (isset($User)) return true;

    if (isset($_COOKIE['auth'])) {
        $r = redisLink();
        $authcookie = $_COOKIE['auth'];
        if ($userid = $r->hget("auths",$authcookie)) {
            if ($r->hget("user:$userid","auth") != $authcookie) return false;
            loadUserInfo($userid);
            return true;
        }
    }
    return false;
}

function loadUserInfo($userid) {
    global $User;

    $r = redisLink();
    $User['id'] = $userid;
    $User['username'] = $r->hget("user:$userid","username");
    return true;
}

----------------------------------------

TITLE: Adding Entries with Explicit IDs in Redis Stream
DESCRIPTION: Adds entries to the 'race:usa' stream with explicitly specified IDs

LANGUAGE: redis
CODE:
> XADD race:usa 0-1 racer Castilla
0-1
> XADD race:usa 0-2 racer Norem
0-2

----------------------------------------

TITLE: Loading and Executing Basic Redis Lua Function
DESCRIPTION: Demonstrates loading a simple Lua function library into Redis and executing it. The example creates a library named 'mylib' with a function 'myfunc' that returns its first argument.

LANGUAGE: redis-cli
CODE:
redis> FUNCTION LOAD "#!lua name=mylib \n redis.register_function('myfunc', function(keys, args) return args[1] end)"
mylib
redis> FCALL myfunc 0 hello
"hello"

----------------------------------------

TITLE: Implementing user authentication in PHP
DESCRIPTION: Check username and password, set authentication cookie if valid.

LANGUAGE: PHP
CODE:
include("retwis.php");

if (!gt("username") || !gt("password"))
    goback("You need to enter both username and password to login.");

$username = gt("username");
$password = gt("password");
$r = redisLink();
$userid = $r->hget("users",$username);
if (!$userid)
    goback("Wrong username or password");
$realpassword = $r->hget("user:$userid","password");
if ($realpassword != $password)
    goback("Wrong username or password");

$authsecret = $r->hget("user:$userid","auth");
setcookie("auth",$authsecret,time()+3600*24*365);
header("Location: index.php");

----------------------------------------

TITLE: Iterating Over a Stream
DESCRIPTION: Example of using the stream iterator API to iterate over elements in a stream.

LANGUAGE: C
CODE:
RedisModule_StreamIteratorStart(key, 0, startid_ptr, endid_ptr);
RedisModuleStreamID id;
long numfields;
while (RedisModule_StreamIteratorNextID(key, &id, &numfields) ==
       REDISMODULE_OK) {
    RedisModuleString *field, *value;
    while (RedisModule_StreamIteratorNextField(key, &field, &value) ==
           REDISMODULE_OK) {
        //
        // ... Do stuff ...
        //
        RedisModule_FreeString(ctx, field);
        RedisModule_FreeString(ctx, value);
    }
}
RedisModule_StreamIteratorStop(key);

----------------------------------------

TITLE: Creating a Hexastore Graph Index in Redis
DESCRIPTION: Illustrates how to represent and index graph relationships using a hexastore approach.

LANGUAGE: redis
CODE:
ZADD myindex 0 spo:antirez:is-friend-of:matteocollina
ZADD myindex 0 sop:antirez:matteocollina:is-friend-of
ZADD myindex 0 ops:matteocollina:is-friend-of:antirez
ZADD myindex 0 osp:matteocollina:antirez:is-friend-of
ZADD myindex 0 pso:is-friend-of:antirez:matteocollina
ZADD myindex 0 pos:is-friend-of:matteocollina:antirez

----------------------------------------

TITLE: Managing Counters with Redis Hashes
DESCRIPTION: Shows how to use hashes for maintaining multiple counters related to a bike's statistics, including rides, crashes, and ownership changes.

LANGUAGE: redis
CODE:
> HINCRBY bike:1:stats rides 1
(integer) 1
> HINCRBY bike:1:stats rides 1
(integer) 2
> HINCRBY bike:1:stats rides 1
(integer) 3
> HINCRBY bike:1:stats crashes 1
(integer) 1
> HINCRBY bike:1:stats owners 1
(integer) 1
> HGET bike:1:stats rides
"3"
> HMGET bike:1:stats owners crashes
1) "1"
2) "1"

----------------------------------------

TITLE: Querying Redis Functions and Libraries Information
DESCRIPTION: This Redis command returns information about functions and libraries. It supports an optional LIBRARYNAME argument for filtering and a WITHCODE modifier to include source code in the response.

LANGUAGE: redis
CODE:
FUNCTION LIST [LIBRARYNAME pattern] [WITHCODE]

----------------------------------------

TITLE: Querying a Simple Numerical Index in Redis
DESCRIPTION: Shows how to retrieve persons within a specific age range using the ZRANGE command with the BYSCORE argument.

LANGUAGE: redis
CODE:
ZRANGE myindex 20 40 BYSCORE

----------------------------------------

TITLE: Creating Redis Strings in C
DESCRIPTION: The sdsnewlen function creates a new Redis string, allocating memory for the structure and initializing its fields.

LANGUAGE: C
CODE:
sds sdsnewlen(const void *init, size_t initlen) {
    struct sdshdr *sh;

    sh = zmalloc(sizeof(struct sdshdr)+initlen+1);
#ifdef SDS_ABORT_ON_OOM
    if (sh == NULL) sdsOomAbort();
#else
    if (sh == NULL) return NULL;
#endif
    sh->len = initlen;
    sh->free = 0;
    if (initlen) {
        if (init) memcpy(sh->buf, init, initlen);
        else memset(sh->buf,0,initlen);
    }
    sh->buf[initlen] = '\0';
    return (char*)sh->buf;
}

----------------------------------------

TITLE: Creating a Lexicographical Index in Redis
DESCRIPTION: Shows how to create a basic lexicographical index using sorted sets with a zero score.

LANGUAGE: redis
CODE:
ZADD myindex 0 baaa
ZADD myindex 0 abbb
ZADD myindex 0 aaaa
ZADD myindex 0 bbbb

----------------------------------------

TITLE: Skipping Sort Operation in Redis
DESCRIPTION: Demonstrates how to use a non-existent key with BY to skip the sorting operation.

LANGUAGE: redis
CODE:
SORT mylist BY nosort

----------------------------------------

TITLE: Managing Redis Functions: Dump, Flush, and Restore
DESCRIPTION: This snippet demonstrates the process of dumping loaded Lua libraries, flushing them, and then restoring them using Redis Function commands. It showcases the FUNCTION LOAD, FUNCTION DUMP, FUNCTION FLUSH, FUNCTION RESTORE, and FUNCTION LIST commands.

LANGUAGE: redis
CODE:
redis> FUNCTION LOAD "#!lua name=mylib \n redis.register_function('myfunc', function(keys, args) return args[1] end)"
"mylib"
redis> FUNCTION DUMP
"\xf5\xc3@X@]\x1f#!lua name=mylib \n redis.registe\rr_function('my@\x0b\x02', @\x06`\x12\nkeys, args) 6\x03turn`\x0c\a[1] end)\x0c\x00\xba\x98\xc2\xa2\x13\x0e$\a"
redis> FUNCTION FLUSH
OK
redis> FUNCTION RESTORE "\xf5\xc3@X@]\x1f#!lua name=mylib \n redis.registe\rr_function('my@\x0b\x02', @\x06`\x12\nkeys, args) 6\x03turn`\x0c\a[1] end)\x0c\x00\xba\x98\xc2\xa2\x13\x0e$\a"
OK
redis> FUNCTION LIST
1) 1) "library_name"
   2) "mylib"
   3) "engine"
   4) "LUA"
   5) "functions"
   6) 1) 1) "name"
         2) "myfunc"
         3) "description"
         4) (nil)
         5) "flags"
         6) (empty array)

----------------------------------------

TITLE: Monitoring Redis Keyspace Events
DESCRIPTION: Demonstrates how to enable all keyspace events and subscribe to them using redis-cli. It shows the commands to set the configuration and start listening for events.

LANGUAGE: bash
CODE:
$ redis-cli config set notify-keyspace-events KEA
$ redis-cli --csv psubscribe '__key*__:*'
Reading messages... (press Ctrl-C to quit)
"psubscribe","__key*__:*",1

----------------------------------------

TITLE: Redis Object Structure Implementation in C
DESCRIPTION: Core data structure definition for Redis Objects (robj) that includes VM-related fields for tracking swapped values and their storage state.

LANGUAGE: C
CODE:
typedef struct redisObject {
    void *ptr;
    unsigned char type;
    unsigned char encoding;
    unsigned char storage;
    unsigned char vtype;
    int refcount;
    struct redisObjectVM vm;
} robj;

----------------------------------------

TITLE: Implementing a Blocking Redis Command in C
DESCRIPTION: Demonstrates a complete example of implementing a blocking Redis command that waits for 1 second before replying. It uses a separate thread to perform the blocking operation.

LANGUAGE: c
CODE:
int Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,
                             int argc)
{
    RedisModuleBlockedClient *bc =
        RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);

    pthread_t tid;
    pthread_create(&tid,NULL,threadmain,bc);

    return REDISMODULE_OK;
}

void *threadmain(void *arg) {
    RedisModuleBlockedClient *bc = arg;

    sleep(1); /* Wait one second and unblock. */
    RedisModule_UnblockClient(bc,NULL);
}

int reply_func(RedisModuleCtx *ctx, RedisModuleString **argv,
               int argc)
{
    return RedisModule_ReplyWithSimpleString(ctx,"Hello!");
}

int timeout_func(RedisModuleCtx *ctx, RedisModuleString **argv,
               int argc)
{
    return RedisModule_ReplyWithNull(ctx);
}

----------------------------------------

TITLE: Rate Limiter List-Based Implementation
DESCRIPTION: Alternative implementation using Redis lists instead of counters, providing additional client tracking capability.

LANGUAGE: pseudocode
CODE:
FUNCTION LIMIT_API_CALL(ip)
current = LLEN(ip)
IF current > 10 THEN
    ERROR "too many requests per second"
ELSE
    IF EXISTS(ip) == FALSE
        MULTI
            RPUSH(ip,ip)
            EXPIRE(ip,1)
        EXEC
    ELSE
        RPUSHX(ip,ip)
    END
    PERFORM_API_CALL()
END

----------------------------------------

TITLE: Checking Key Existence with Redis EXISTS Command
DESCRIPTION: This snippet demonstrates how to use the Redis EXISTS command to check for the existence of keys. It shows examples of checking single and multiple keys, including existing and non-existing keys. The command returns the count of existing keys.

LANGUAGE: cli
CODE:
SET key1 "Hello"
EXISTS key1
EXISTS nosuchkey
SET key2 "World"
EXISTS key1 key2 nosuchkey

----------------------------------------

TITLE: Disabling Redis CONFIG Command
DESCRIPTION: This configuration example completely disables the CONFIG command by renaming it to an empty string.

LANGUAGE: redis
CODE:
rename-command CONFIG ""

----------------------------------------

TITLE: Defining Event Loop Structure in C
DESCRIPTION: Core structure definition for Redis event loop that tracks file events, fired events, and time events.

LANGUAGE: c
CODE:
typedef struct aeEventLoop {
    int maxfd;
    long long timeEventNextId;
    aeFileEvent events[AE_SETSIZE]; /* Registered events */
    aeFiredEvent fired[AE_SETSIZE]; /* Fired events */
    aeTimeEvent *timeEventHead;
    int stop;
    void *apidata; /* This is used for polling API specific data */
    aeBeforeSleepProc *beforesleep;
} aeEventLoop;

----------------------------------------

TITLE: Implementing RDB Save Method for Native Type
DESCRIPTION: This snippet shows an example implementation of the RDB save method for a custom native type. It saves an array of doubles by first storing the count, then each value.

LANGUAGE: C
CODE:
void DoubleArrayRDBSave(RedisModuleIO *io, void *ptr) {
    struct dobule_array *da = ptr;
    RedisModule_SaveUnsigned(io,da->count);
    for (size_t j = 0; j < da->count; j++)
        RedisModule_SaveDouble(io,da->values[j]);
}

----------------------------------------

TITLE: Redis ZUNION Command Key Specification Example
DESCRIPTION: Demonstrates the key specification for the ZUNION command, showing keynum-based key search with read-only access flags.

LANGUAGE: redis
CODE:
1) 1) "flags"
   2) 1) RO
      2) access
   3) "begin_search"
   4) 1) "type"
      2) "index"
      3) "spec"
      4) 1) "index"
         2) (integer) 1
   5) "find_keys"
   6) 1) "type"
      2) "keynum"
      3) "spec"
      4) 1) "keynumidx"
         2) (integer) 0
         3) "firstkey"
         4) (integer) 1
         5) "keystep"
         6) (integer) 1

----------------------------------------

TITLE: Redis CLUSTER SLOTS Command Example
DESCRIPTION: Example showing the response format of CLUSTER SLOTS command. Returns nested arrays containing slot ranges, master nodes, and replica information with networking details including IP addresses, ports, node IDs, and hostname metadata.

LANGUAGE: redis
CODE:
> CLUSTER SLOTS
1) 1) (integer) 0
   2) (integer) 5460
   3) 1) "127.0.0.1"
      2) (integer) 30001
      3) "09dbe9720cda62f7865eabc5fd8857c5d2678366"
      4) 1) hostname
         2) "host-1.redis.example.com"
   4) 1) "127.0.0.1"
      2) (integer) 30004
      3) "821d8ca00d7ccf931ed3ffc7e3db0599d2271abf"
      4) 1) hostname
         2) "host-2.redis.example.com"
2) 1) (integer) 5461
   2) (integer) 10922
   3) 1) "127.0.0.1"
      2) (integer) 30002
      3) "c9d93d9f2c0c524ff34cc11838c2003d8c29e013"
      4) 1) hostname
         2) "host-3.redis.example.com"
   4) 1) "127.0.0.1"
      2) (integer) 30005
      3) "faadb3eb99009de4ab72ad6b6ed87634c7ee410f"
      4) 1) hostname
         2) "host-4.redis.example.com"
3) 1) (integer) 10923
   2) (integer) 16383
   3) 1) "127.0.0.1"
      2) (integer) 30003
      3) "044ec91f325b7595e76dbcb18cc688b6a5b434a1"
      4) 1) hostname
         2) "host-5.redis.example.com"
   4) 1) "127.0.0.1"
      2) (integer) 30006
      3) "58e6e48d41228013e5d9c1c37c5060693925e97e"
      4) 1) hostname
         2) "host-6.redis.example.com"

----------------------------------------

TITLE: Redis MEMORY USAGE with Various String Lengths
DESCRIPTION: Shows how memory usage scales with different key-value pairs, demonstrating linear growth pattern with increasing string lengths.

LANGUAGE: redis
CODE:
> SET foo bar
OK
> MEMORY USAGE foo
(integer) 56
> SET foo2 mybar
OK
> MEMORY USAGE foo2
(integer) 64
> SET foo3 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
OK
> MEMORY USAGE foo3
(integer) 160

----------------------------------------

TITLE: CPU Profile Recording with Perf
DESCRIPTION: Records CPU profile data for Redis server process with stack traces at 999 samples per second for 60 seconds using perf tool.

LANGUAGE: bash
CODE:
perf record -g --pid $(pgrep redis-server) -F 999 -- sleep 60

----------------------------------------

TITLE: Implementing a Simple Redis Module Command
DESCRIPTION: Shows how to implement a basic Redis module command that returns a random number.

LANGUAGE: C
CODE:
#include "redismodule.h"
#include <stdlib.h>

int HelloworldRand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {
    RedisModule_ReplyWithLongLong(ctx,rand());
    return REDISMODULE_OK;
}

int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {
    if (RedisModule_Init(ctx,"helloworld",1,REDISMODULE_APIVER_1)
        == REDISMODULE_ERR) return REDISMODULE_ERR;

    if (RedisModule_CreateCommand(ctx,"helloworld.rand",
        HelloworldRand_RedisCommand, "fast random",
        0, 0, 0) == REDISMODULE_ERR)
        return REDISMODULE_ERR;

    return REDISMODULE_OK;
}

----------------------------------------

TITLE: Redis Client List Output Example
DESCRIPTION: Sample output from the CLIENT LIST command showing connected client details including address, file descriptor, age, idle time, flags and other metrics.

LANGUAGE: text
CODE:
redis 127.0.0.1:6379> client list
addr=127.0.0.1:52555 fd=5 name= age=855 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client
addr=127.0.0.1:52787 fd=6 name= age=6 idle=5 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=ping

----------------------------------------

TITLE: Redis Cluster Command for Manual Failover with Takeover
DESCRIPTION: Redis command for forcing a replica to take over as master without cluster consensus. Used in scenarios like data center switches when masters are unreachable.

LANGUAGE: redis
CODE:
CLUSTER FAILOVER TAKEOVER

----------------------------------------

TITLE: Configuring Redis Replication
DESCRIPTION: Command to configure a Redis server as a replica of another server by specifying the master's hostname and port. This will initiate synchronization with the new master and discard the old dataset if previously replicating.

LANGUAGE: redis
CODE:
SLAVEOF hostname port

----------------------------------------

TITLE: Enabling Redis Latency Monitoring
DESCRIPTION: Command to enable latency monitoring by setting a threshold value in milliseconds. This example sets a 100ms threshold above which events will be logged as latency spikes.

LANGUAGE: redis-cli
CODE:
CONFIG SET latency-monitor-threshold 100

----------------------------------------

TITLE: Creating Timed Event in Redis Event Loop
DESCRIPTION: Creates a timed event in the Redis event loop by calling aeCreateTimeEvent with serverCron as the callback function.

LANGUAGE: c
CODE:
aeCreateTimeEvent(server.el /*eventLoop*/, 1 /*milliseconds*/, serverCron /*proc*/, NULL /*clientData*/, NULL /*finalizerProc*/);

----------------------------------------

TITLE: Configuring Redis using redis.conf Directives
DESCRIPTION: Demonstrates the basic syntax for Redis configuration directives in the redis.conf file. Shows how to specify keywords and arguments, including the use of quoted strings for arguments containing spaces.

LANGUAGE: conf
CODE:
keyword argument1 argument2 ... argumentN

LANGUAGE: conf
CODE:
replicaof 127.0.0.1 6380

LANGUAGE: conf
CODE:
requirepass "hello world"

----------------------------------------

TITLE: Killing Clients by ID in Redis
DESCRIPTION: Illustrates how to kill a client by its unique ID, which can be retrieved using the CLIENT LIST command.

LANGUAGE: redis
CODE:
CLIENT KILL ID client-id

----------------------------------------

TITLE: Storing Set Union with Redis SUNIONSTORE
DESCRIPTION: Example showing how to use SUNIONSTORE to compute and store the union of two sets. The command creates sets key1 and key2 with some elements, then combines them using SUNIONSTORE into a new destination key, and finally displays the resulting set members.

LANGUAGE: cli
CODE:
SADD key1 "a"
SADD key1 "b"
SADD key1 "c"
SADD key2 "c"
SADD key2 "d"
SADD key2 "e"
SUNIONSTORE key key1 key2
SMEMBERS key

----------------------------------------

TITLE: Running redis-benchmark with Basic Options
DESCRIPTION: Demonstrates how to run redis-benchmark with default settings and quiet mode for 100,000 requests.

LANGUAGE: bash
CODE:
redis-benchmark -q -n 100000

----------------------------------------

TITLE: Redis Benchmark with Random Keys
DESCRIPTION: Shows how to run a benchmark with 1 million SET operations using random keys from a 100k key space.

LANGUAGE: bash
CODE:
redis-cli flushall
redis-benchmark -t set -r 100000 -n 1000000

----------------------------------------

TITLE: Disabling AOF Rewrites for Backup in Redis
DESCRIPTION: Shows how to temporarily disable automatic AOF rewrites to safely backup AOF files. This prevents inconsistencies during the backup process.

LANGUAGE: bash
CODE:
CONFIG SET auto-aof-rewrite-percentage 0
INFO persistence
CONFIG SET auto-aof-rewrite-percentage <prev-value>

----------------------------------------

TITLE: Using BZPOPMIN with Redis Sorted Sets
DESCRIPTION: This example demonstrates the usage of the BZPOPMIN command in Redis. It shows how to create a sorted set, add members to it, and then use BZPOPMIN to retrieve and remove the member with the lowest score. The command blocks until a result is available or the timeout is reached.

LANGUAGE: redis
CODE:
redis> DEL zset1 zset2
(integer) 0
redis> ZADD zset1 0 a 1 b 2 c
(integer) 3
redis> BZPOPMIN zset1 zset2 0
1) "zset1"
2) "a"
3) "0"

----------------------------------------

TITLE: Basic LCS Command Usage in Redis
DESCRIPTION: Demonstrates the basic usage of the LCS command to find the longest common subsequence between two strings stored as Redis keys.

LANGUAGE: redis
CODE:
> MSET key1 ohmytext key2 mynewtext
OK
> LCS key1 key2
"mytext"

----------------------------------------

TITLE: Obtaining Redis Process ID with redis-cli
DESCRIPTION: Use redis-cli to get the process ID of a running Redis instance. This command retrieves the process_id from Redis server information.

LANGUAGE: bash
CODE:
$ redis-cli info | grep process_id
process_id:58414

----------------------------------------

TITLE: Incrementing Sorted Set Scores with Redis ZINCRBY
DESCRIPTION: Demonstrates using ZINCRBY to increment member scores in a Redis sorted set. The example shows creating a sorted set with initial scores, incrementing a member's score, and displaying the results using ZRANGE.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZINCRBY myzset 2 "one"
ZRANGE myzset 0 -1 WITHSCORES

----------------------------------------

TITLE: Running Redis Sentinel
DESCRIPTION: Commands for starting a Redis Sentinel instance using either redis-sentinel executable or redis-server in sentinel mode

LANGUAGE: bash
CODE:
redis-sentinel /path/to/sentinel.conf

# OR

redis-server /path/to/sentinel.conf --sentinel

----------------------------------------

TITLE: Using BZPOPMAX Command in Redis
DESCRIPTION: This example demonstrates the usage of the BZPOPMAX command in Redis. It shows how to create a sorted set, add members to it, and then use BZPOPMAX to retrieve and remove the member with the highest score.

LANGUAGE: redis
CODE:
redis> DEL zset1 zset2
(integer) 0
redis> ZADD zset1 0 a 1 b 2 c
(integer) 3
redis> BZPOPMAX zset1 zset2 0
1) "zset1"
2) "c"
3) "2"

----------------------------------------

TITLE: Managing Bicycle Statistics with Redis Bitfields
DESCRIPTION: This example demonstrates how to use Redis bitfields to maintain price and ownership counters for bicycles. It shows setting initial values, updating them atomically, and retrieving the current statistics.

LANGUAGE: redis
CODE:
> BITFIELD bike:1:stats SET u32 #0 1000
1) (integer) 0
> BITFIELD bike:1:stats INCRBY u32 #0 -50 INCRBY u32 #1 1
1) (integer) 950
2) (integer) 1
> BITFIELD bike:1:stats INCRBY u32 #0 500 INCRBY u32 #1 1
1) (integer) 1450
2) (integer) 2
> BITFIELD bike:1:stats GET u32 #0 GET u32 #1
1) (integer) 1450
2) (integer) 2

----------------------------------------

TITLE: Redis Configuration Commands
DESCRIPTION: Essential Redis commands for runtime configuration management and replica setup.

LANGUAGE: redis
CODE:
CONFIG SET slave-read-only no\nREPLICAOF NO ONE\nCONFIG GET *\nCLIENT PAUSE\nMONITOR

----------------------------------------

TITLE: Basic ZRANGEBYLEX Usage in Redis CLI
DESCRIPTION: Demonstrates basic usage of ZRANGEBYLEX command with different range specifications. Shows how to add elements to a sorted set and query them using inclusive and exclusive range boundaries.

LANGUAGE: cli
CODE:
ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g
ZRANGEBYLEX myzset - [c
ZRANGEBYLEX myzset - (c
ZRANGEBYLEX myzset [aaa (g

----------------------------------------

TITLE: Redis Cluster Connection
DESCRIPTION: Demonstrates how to connect to a Redis cluster by specifying multiple endpoints

LANGUAGE: csharp
CODE:
ConfigurationOptions options = new ConfigurationOptions
{
    EndPoints = {
        { "localhost", 16379 },
        { "localhost", 16380 },
        // ...
    },            
};

ConnectionMultiplexer cluster = ConnectionMultiplexer.Connect(options);
IDatabase db = cluster.GetDatabase();

db.StringSet("foo", "bar");
Console.WriteLine(db.StringGet("foo")); // prints bar

----------------------------------------

TITLE: BITFIELD Array Access Example
DESCRIPTION: Demonstrates how to use # prefix for array-like access to set consecutive 8-bit integers.

LANGUAGE: redis
CODE:
BITFIELD mystring SET i8 #0 100 SET i8 #1 200

----------------------------------------

TITLE: Lexicographic Sorting in Redis
DESCRIPTION: Illustrates the use of the ALPHA modifier for lexicographic sorting of string values.

LANGUAGE: redis
CODE:
SORT mylist ALPHA

----------------------------------------

TITLE: Binding Redis to Localhost in Configuration File
DESCRIPTION: This configuration directive binds Redis to listen only on the loopback interface, restricting access to the local machine.

LANGUAGE: redis
CODE:
bind 127.0.0.1

----------------------------------------

TITLE: Demonstrating ZDIFF Command Usage in Redis CLI
DESCRIPTION: This example shows how to use the ZDIFF command to compute the difference between two sorted sets in Redis. It first populates two sets (zset1 and zset2) with sample data, then demonstrates the ZDIFF command both with and without scores.

LANGUAGE: cli
CODE:
ZADD zset1 1 "one"
ZADD zset1 2 "two"
ZADD zset1 3 "three"
ZADD zset2 1 "one"
ZADD zset2 2 "two"
ZDIFF 2 zset1 zset2
ZDIFF 2 zset1 zset2 WITHSCORES

----------------------------------------

TITLE: Basic String Operations
DESCRIPTION: Demonstrates basic string operations using SET and GET commands

LANGUAGE: csharp
CODE:
db.StringSet("foo", "bar");
Console.WriteLine(db.StringGet("foo")); // prints bar

----------------------------------------

TITLE: Authenticating with Redis using two-argument AUTH command
DESCRIPTION: This snippet demonstrates the syntax for authenticating with a Redis server using the two-argument version of the AUTH command. This version is used for Redis 6.0 and later when using the Redis ACL system, allowing specification of both username and password.

LANGUAGE: redis
CODE:
AUTH <username> <password>

----------------------------------------

TITLE: Testing Redis ACL Permissions Using DRYRUN Command
DESCRIPTION: Demonstrates how to use the ACL DRYRUN command to test user permissions without executing actual commands. The example shows setting up permissions for user VIRGINIA and testing both allowed and denied operations.

LANGUAGE: redis
CODE:
> ACL SETUSER VIRGINIA +SET ~*
"OK"
> ACL DRYRUN VIRGINIA SET foo bar
"OK"
> ACL DRYRUN VIRGINIA GET foo
"User VIRGINIA has no permissions to run the 'get' command"

----------------------------------------

TITLE: Using Dynamic Breakpoints in Redis Lua Scripts
DESCRIPTION: Shows how to use the redis.breakpoint() function to create dynamic breakpoints in Lua scripts based on conditions.

LANGUAGE: Lua
CODE:
if counter > 10 then redis.breakpoint() end

----------------------------------------

TITLE: Zero Padding Example with SETRANGE in Redis CLI
DESCRIPTION: Shows how SETRANGE handles zero padding when the offset is larger than the current string length. It sets a string at an offset beyond the current string length, causing Redis to pad with zero-bytes.

LANGUAGE: cli
CODE:
SETRANGE key2 6 "Redis"
GET key2

----------------------------------------

TITLE: Configuring Redis client reconnection strategy
DESCRIPTION: Implement a custom reconnection strategy to handle connection failures and limit reconnection attempts.

LANGUAGE: typescript
CODE:
const client = createClient({
  socket: {
    reconnectStrategy: function(retries) {
        if (retries > 20) {
            console.log("Too many attempts to reconnect. Redis connection was terminated");
            return new Error("Too many retries.");
        } else {
            return retries * 500;
        }
    }
  }
});
client.on('error', error => console.error('Redis client error:', error));

----------------------------------------

TITLE: Listing Redis ACL Users
DESCRIPTION: Demonstrates using the ACL USERS command to retrieve a list of all configured usernames in the Redis ACL system. The command returns an array of usernames that are currently set up in the Redis instance.

LANGUAGE: redis
CODE:
> ACL USERS
1) "anna"
2) "antirez"
3) "default"

----------------------------------------

TITLE: Listing Commands in 'dangerous' ACL Category in Redis
DESCRIPTION: Demonstrates how to list all Redis commands that belong to the 'dangerous' ACL category using the ACL CAT command with a category argument.

LANGUAGE: redis
CODE:
> ACL CAT dangerous
 1) "flushdb"
 2) "acl"
 3) "slowlog"
 4) "debug"
 5) "role"
 6) "keys"
 7) "pfselftest"
 8) "client"
 9) "bgrewriteaof"
10) "replicaof"
11) "monitor"
12) "restore-asking"
13) "latency"
14) "replconf"
15) "pfdebug"
16) "bgsave"
17) "sync"
18) "config"
19) "flushall"
20) "cluster"
21) "info"
22) "lastsave"
23) "slaveof"
24) "swapdb"
25) "module"
26) "restore"
27) "migrate"
28) "save"
29) "shutdown"
30) "psync"
31) "sort"

----------------------------------------

TITLE: Handling Errors in Redis Transactions
DESCRIPTION: This example shows how Redis handles errors during transaction execution. It demonstrates that even if one command fails, others are still processed.

LANGUAGE: redis
CODE:
MULTI
+OK
SET a abc
+QUEUED
LPOP a
+QUEUED
EXEC
*2
+OK
-WRONGTYPE Operation against a key holding the wrong kind of value

----------------------------------------

TITLE: Deleting Entries from Redis Stream
DESCRIPTION: Demonstrates using XADD to create stream entries and XDEL to remove specific entries by their IDs. Shows how entries are marked as deleted and verified using XRANGE command. The example creates three entries and deletes the middle one, showing the remaining entries.

LANGUAGE: redis
CODE:
> XADD mystream * a 1
1538561698944-0
> XADD mystream * b 2
1538561700640-0
> XADD mystream * c 3
1538561701744-0
> XDEL mystream 1538561700640-0
(integer) 1
127.0.0.1:6379> XRANGE mystream - +
1) 1) 1538561698944-0
   2) 1) "a"
      2) "1"
2) 1) 1538561701744-0
   2) 1) "c"
      2) "3"

----------------------------------------

TITLE: Storing and retrieving a simple string in Redis
DESCRIPTION: Demonstrate basic key-value operations using set and get commands.

LANGUAGE: javascript
CODE:
await client.set('key', 'value');
const value = await client.get('key');

----------------------------------------

TITLE: Complex ACL User Configuration Example
DESCRIPTION: Shows creating a user 'alan' with string and set command permissions, specific command restrictions, and password authentication.

LANGUAGE: redis
CODE:
ACL SETUSER alan allkeys +@string +@set -SADD >alanpassword

----------------------------------------

TITLE: Creating a Consumer Group with Automatic Stream Creation in Redis
DESCRIPTION: This example shows how to create a consumer group and automatically create the stream if it doesn't exist, using the MKSTREAM option.

LANGUAGE: redis
CODE:
XGROUP CREATE mystream mygroup $ MKSTREAM

----------------------------------------

TITLE: Adding Entry with Auto-generated ID in Redis Stream
DESCRIPTION: Adds a new entry to the 'race:france' stream with an auto-generated ID

LANGUAGE: redis
CODE:
> XADD race:france * rider Castilla speed 29.9 position 1 location_id 2
"1692632147973-0"

----------------------------------------

TITLE: Using Redis SAVE Command
DESCRIPTION: The SAVE command performs a synchronous save of the entire Redis dataset to create an RDB file. This operation blocks all other clients while executing and should typically be avoided in production, where BGSAVE is preferred. It serves as a fallback option when background saving fails.

LANGUAGE: redis
CODE:
SAVE

----------------------------------------

TITLE: Connecting to Redis using node-redis
DESCRIPTION: Establish a connection to a Redis server running on localhost at port 6379.

LANGUAGE: javascript
CODE:
import { createClient } from 'redis';

const client = createClient();

client.on('error', err => console.log('Redis Client Error', err));

await client.connect();

----------------------------------------

TITLE: Spellchecker Installation and Usage Commands
DESCRIPTION: Commands for installing and running the spellchecker-cli tool to validate documentation spelling and grammar.

LANGUAGE: bash
CODE:
npm install --global spellchecker-cli

LANGUAGE: bash
CODE:
spellchecker --no-suggestions -f '**/*.md' -l en-US -q -d wordlist

----------------------------------------

TITLE: Setting Key Expiration with PEXPIREAT in Redis CLI
DESCRIPTION: Demonstrates setting an expiration time for a Redis key using PEXPIREAT with millisecond precision. Shows how to set a key value first, then set its expiration timestamp, and check remaining time using both TTL and PTTL commands.

LANGUAGE: cli
CODE:
SET mykey "Hello"
PEXPIREAT mykey 1555555555005
TTL mykey
PTTL mykey

----------------------------------------

TITLE: TLS Connection with Lettuce
DESCRIPTION: Configuration for secure TLS connection to Redis using Lettuce

LANGUAGE: java
CODE:
RedisURI redisUri = RedisURI.Builder.redis("localhost")
                                 .withSsl(true)
                                 .withPassword("secret!") // use your Redis password
                                 .build();

RedisClient client = RedisClient.create(redisUri);

----------------------------------------

TITLE: Installing Lettuce with Gradle
DESCRIPTION: Gradle dependency configuration for adding Lettuce to a Java project

LANGUAGE: gradle
CODE:
dependencies {
    compile 'io.lettuce:lettuce-core:6.3.2.RELEASE
}

----------------------------------------

TITLE: Redis Performance Benchmarks - Raspberry Pi 3
DESCRIPTION: Performance test results for Redis 4.0 on Raspberry Pi 3, showing operations per second under different conditions including basic operations, pipelining, and AOF persistence.

LANGUAGE: plaintext
CODE:
Test 1 : 5 millions writes with 1 million keys (even distribution among keys).  No persistence, no pipelining. 28,000 ops/sec.
Test 2: Like test 1 but with pipelining using groups of 8 operations: 80,000 ops/sec.
Test 3: Like test 1 but with AOF enabled, fsync 1 sec: 23,000 ops/sec
Test 4: Like test 3, but with an AOF rewrite in progress: 21,000 ops/sec

----------------------------------------

TITLE: Nearly Exact Trimming of Redis Stream
DESCRIPTION: This example illustrates the use of the '~' argument for more efficient, nearly exact trimming of a Redis stream to approximately 1000 items.

LANGUAGE: redis
CODE:
XTRIM mystream MAXLEN ~ 1000

----------------------------------------

TITLE: Installing Jedis with Maven Dependencies
DESCRIPTION: Maven dependency configuration for adding Jedis to a Java project

LANGUAGE: xml
CODE:
<dependency>
    <groupId>redis.clients</groupId>
    <artifactId>jedis</artifactId>
    <version>5.1.2</version>
</dependency>

----------------------------------------

TITLE: Redis Pub/Sub Wire Protocol Example
DESCRIPTION: Demonstrates the wire protocol format for Redis pub/sub operations, showing subscription acknowledgments and message receipt format.

LANGUAGE: text
CODE:
SUBSCRIBE first second
*3
$9
subscribe
$5
first
:1
*3
$9
subscribe
$6
second
:2

----------------------------------------

TITLE: Configuring Redis Reference Documentation Frontmatter in YAML
DESCRIPTION: YAML frontmatter configuration block that defines metadata for a Redis reference documentation page. Specifies the title, link title, description and navigation weight for the page.

LANGUAGE: yaml
CODE:
---
title: "Redis reference"
linkTitle: "Reference"
description: Specifications and protocols
weight: 70

---

----------------------------------------

TITLE: Redis SRANDMEMBER Basic Usage Examples
DESCRIPTION: Examples showing different ways to use SRANDMEMBER command: single element retrieval, multiple distinct elements (positive count), and multiple elements with possible duplicates (negative count).

LANGUAGE: cli
CODE:
SADD myset one two three
SRANDMEMBER myset
SRANDMEMBER myset 2
SRANDMEMBER myset -5

----------------------------------------

TITLE: Redis CLI String Quoting Example
DESCRIPTION: Demonstrates string quoting and escaping in Redis CLI for handling special characters

LANGUAGE: shell
CODE:
127.0.0.1:6379> SET mykey "Hello\nWorld"
OK
127.0.0.1:6379> GET mykey
Hello
World

----------------------------------------

TITLE: Redis Multiple Subscription Types Example
DESCRIPTION: Shows how to combine both direct channel subscription and pattern matching subscription.

LANGUAGE: bash
CODE:
SUBSCRIBE foo
PSUBSCRIBE f*

----------------------------------------

TITLE: Displaying posts in PHP
DESCRIPTION: Retrieve and render a range of posts for a user or global timeline.

LANGUAGE: PHP
CODE:
function showPost($id) {
    $r = redisLink();
    $post = $r->hgetall("post:$id");
    if (empty($post)) return false;

    $userid = $post['user_id'];
    $username = $r->hget("user:$userid","username");
    $elapsed = strElapsed($post['time']);
    $userlink = "<a class=\"username\" href=\"profile.php?u=".urlencode($username)."\">".utf8entities($username)."</a>";

    echo('<div class="post">'.$userlink.' '.utf8entities($post['body'])."<br>");
    echo('<i>posted '.$elapsed.' ago via web</i></div>');
    return true;
}

function showUserPosts($userid,$start,$count) {
    $r = redisLink();
    $key = ($userid == -1) ? "timeline" : "posts:$userid";
    $posts = $r->lrange($key,$start,$start+$count);
    $c = 0;
    foreach($posts as $p) {
        if (showPost($p)) $c++;
        if ($c == $count) break;
    }
    return count($posts) == $count+1;
}

----------------------------------------

TITLE: Setting Redis Lua Debug Modes
DESCRIPTION: Configuration options for enabling or disabling Redis Lua debugger (LDB). Supports asynchronous mode (non-blocking with rollback), synchronous mode (blocking with data persistence), and debug mode disable option.

LANGUAGE: text
CODE:
YES       # Enable non-blocking asynchronous debugging (changes discarded)
!SYNC     # Enable blocking synchronous debugging (saves changes)
NO        # Disable scripts debug mode

----------------------------------------

TITLE: Configuring YAML Front Matter for Redis Documentation
DESCRIPTION: YAML front matter configuration for the Redis documentation homepage, including title, link title, weight and URL aliases for proper routing.

LANGUAGE: yaml
CODE:
title: "Documentation"
linkTitle: "Documentation"
weight: 20
aliases:
    - /documentation
    - /documentation/
    - /topics
    - /topics/

----------------------------------------

TITLE: Stopping Redis Service on macOS
DESCRIPTION: This command stops the Redis service that was started using Homebrew services.

LANGUAGE: bash
CODE:
brew services stop redis

----------------------------------------

TITLE: Querying a Composite Index in Redis
DESCRIPTION: Shows how to perform a range query on a composite index to find products in a specific room and price range.

LANGUAGE: redis
CODE:
ZRANGE myindex [0056:0010.00 [0056:0030.00 BYLEX

----------------------------------------

TITLE: Using MSETNX in Redis CLI
DESCRIPTION: This example demonstrates the usage of the MSETNX command in Redis CLI. It shows how MSETNX sets multiple keys atomically when they don't exist, and how it behaves when trying to set keys that already exist. The MGET command is then used to retrieve the values of all set keys.

LANGUAGE: cli
CODE:
MSETNX key1 "Hello" key2 "there"
MSETNX key2 "new" key3 "world"
MGET key1 key2 key3

----------------------------------------

TITLE: Querying Current User with Redis ACL WHOAMI
DESCRIPTION: This example demonstrates how to use the ACL WHOAMI command in Redis to retrieve the username of the currently authenticated connection. By default, new connections are authenticated as the "default" user.

LANGUAGE: redis
CODE:
> ACL WHOAMI
"default"

----------------------------------------

TITLE: Installing Prerequisites for Redis on Ubuntu/Debian
DESCRIPTION: Installs required system packages (lsb-release, curl, and gpg) needed for Redis installation on minimal distributions.

LANGUAGE: bash
CODE:
sudo apt install lsb-release curl gpg

----------------------------------------

TITLE: Querying a Completion Index in Redis
DESCRIPTION: Shows how to retrieve completion suggestions for a given prefix.

LANGUAGE: redis
CODE:
ZRANGE myindex "[bit" "[bit\xff" BYLEX

----------------------------------------

TITLE: Monitoring Redis Commands with redis-cli
DESCRIPTION: This snippet demonstrates how to use the MONITOR command via redis-cli to stream and view all commands processed by the Redis server. It shows various Redis operations and their timestamps.

LANGUAGE: bash
CODE:
$ redis-cli monitor
1339518083.107412 [0 127.0.0.1:60866] "keys" "*"
1339518087.877697 [0 127.0.0.1:60866] "dbsize"
1339518090.420270 [0 127.0.0.1:60866] "set" "x" "6"
1339518096.506257 [0 127.0.0.1:60866] "get" "x"
1339518099.363765 [0 127.0.0.1:60866] "eval" "return redis.call('set','x','7')" "0"
1339518100.363799 [0 lua] "set" "x" "7"
1339518100.544926 [0 127.0.0.1:60866] "del" "x"

----------------------------------------

TITLE: Querying a Hexastore Graph Index in Redis
DESCRIPTION: Shows how to perform graph queries using the hexastore index representation.

LANGUAGE: redis
CODE:
ZRANGE myindex "[spo:antirez:is-friend-of:" "[spo:antirez:is-friend-of:\xff" BYLEX

----------------------------------------

TITLE: Scanning Redis Keyspace
DESCRIPTION: Shows how to scan the Redis keyspace for keys matching a specific pattern using the SCAN command with a count limit.

LANGUAGE: redis-cli
CODE:
SCAN 0 MATCH "bike:*" COUNT 100

----------------------------------------

TITLE: Starting Redis Server on Ubuntu
DESCRIPTION: This command starts the Redis server as a service on Ubuntu. It requires sudo privileges.

LANGUAGE: bash
CODE:
sudo service redis-server start

----------------------------------------

TITLE: Removing Hash Slot Ranges Using CLUSTER DELSLOTSRANGE
DESCRIPTION: Shows how to remove a continuous range of hash slots from a Redis Cluster node using the CLUSTER DELSLOTSRANGE command. This command accepts start and end slot numbers to define the range.

LANGUAGE: redis
CODE:
> CLUSTER DELSLOTSRANGE 1 5
OK

----------------------------------------

TITLE: Querying a Lexicographical Index in Redis
DESCRIPTION: Demonstrates how to perform range queries on a lexicographical index using ZRANGE with the BYLEX argument.

LANGUAGE: redis
CODE:
ZRANGE myindex [a (b BYLEX

----------------------------------------

TITLE: Redis Key Expiration
DESCRIPTION: Example of setting key expiration using EXPIRE command and retrieving the value before and after expiration.

LANGUAGE: redis
CODE:
> set key some-value
OK
> expire key 5
(integer) 1
> get key (immediately)
"some-value"
> get key (after some time)
(nil)

----------------------------------------

TITLE: Installing Redis on Ubuntu/Debian via APT Repository
DESCRIPTION: This snippet shows how to add the official Redis APT repository, update the package index, and install Redis on Ubuntu running in WSL2. It requires curl and sudo privileges.

LANGUAGE: bash
CODE:
curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list

sudo apt-get update
sudo apt-get install redis

----------------------------------------

TITLE: Querying Redis COMMAND INFO for Multiple Commands
DESCRIPTION: This snippet demonstrates how to use the COMMAND INFO command in Redis to retrieve details about multiple commands. It shows two examples: one querying information for 'get', 'set', and 'eval' commands, and another querying both existing and non-existing commands.

LANGUAGE: cli
CODE:
COMMAND INFO get set eval
COMMAND INFO foo evalsha config bar

----------------------------------------

TITLE: Safe Lock Release Script - Redis Lua
DESCRIPTION: Lua script for safely releasing a distributed lock by checking the key value matches before deletion. This prevents accidental deletion of locks owned by other clients.

LANGUAGE: lua
CODE:
if redis.call("get",KEYS[1]) == ARGV[1] then
    return redis.call("del",KEYS[1])
else
    return 0
end

----------------------------------------

TITLE: Hash Iteration with HSCAN
DESCRIPTION: Demonstrates using HSCAN to iterate over a Redis hash data structure, showing both field names and their corresponding values.

LANGUAGE: redis
CODE:
redis 127.0.0.1:6379> hmset hash name Jack age 33
OK
redis 127.0.0.1:6379> hscan hash 0
1) "0"
2) 1) "name"
   2) "Jack"
   3) "age"
   4) "33"

----------------------------------------

TITLE: Installing Redis via APT Repository on Ubuntu/Debian
DESCRIPTION: Adds the official Redis repository, imports GPG key, and installs Redis using apt package manager. This process includes adding the repository key, configuring the package source, and installing Redis.

LANGUAGE: bash
CODE:
curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/redis.list

sudo apt-get update
sudo apt-get install redis

----------------------------------------

TITLE: Basic ACL Authentication
DESCRIPTION: Examples of basic ACL authentication commands using both single and two-argument forms

LANGUAGE: redis
CODE:
AUTH <username> <password>
AUTH <password>

----------------------------------------

TITLE: Atomic Counter Reset Pattern with Redis GETSET
DESCRIPTION: Demonstrates how to use GETSET with INCR for implementing an atomic counter reset pattern. The sequence shows incrementing a counter and then atomically retrieving its value while resetting it to zero.

LANGUAGE: cli
CODE:
INCR mycounter
GETSET mycounter "0"
GET mycounter

----------------------------------------

TITLE: Redis MEMORY USAGE Basic Example
DESCRIPTION: Demonstrates memory usage for empty string storage in Redis, showing base overhead of 56 bytes with Redis v7.2.0 64-bit using jemalloc.

LANGUAGE: redis
CODE:
> SET "" ""
OK
> MEMORY USAGE ""
(integer) 56

----------------------------------------

TITLE: Interactive Redis CLI Session
DESCRIPTION: Example of using redis-cli in interactive mode to communicate with Redis server.

LANGUAGE: bash
CODE:
$ redis-cli
redis 127.0.0.1:6379> ping
PONG

----------------------------------------

TITLE: Terminating Redis Function Execution
DESCRIPTION: The FUNCTION KILL command terminates a currently executing Redis function. This command can only be used on functions that have not modified the dataset during their execution, preserving Redis's atomicity guarantees for write operations.

LANGUAGE: redis
CODE:
FUNCTION KILL

----------------------------------------

TITLE: Copying Redis Key Values with COPY Command
DESCRIPTION: This snippet demonstrates how to use the Redis COPY command to duplicate a key's value. It sets a value for the 'dolly' key, copies it to a new 'clone' key, and then retrieves the value of the 'clone' key to verify the copy operation.

LANGUAGE: redis
CODE:
SET dolly "sheep"
COPY dolly clone
GET clone

----------------------------------------

TITLE: BITFIELD Overflow FAIL Example
DESCRIPTION: Demonstrates the FAIL overflow mode returning NULL on overflow condition.

LANGUAGE: redis
CODE:
> BITFIELD mykey OVERFLOW FAIL incrby u2 102 1
1) (nil)

----------------------------------------

TITLE: Running RedisInsight Docker Container With Persistence
DESCRIPTION: Command to run RedisInsight in a Docker container with data persistence using a Docker volume mounted at /data. Exposes port 5540 for web access.

LANGUAGE: bash
CODE:
docker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest -v redisinsight:/data

----------------------------------------

TITLE: Querying Redis Sorted Set with ZRANGEBYSCORE (CLI)
DESCRIPTION: Demonstrates basic usage of the ZRANGEBYSCORE command to retrieve elements from a sorted set within specified score ranges. It shows examples of inclusive and exclusive intervals.

LANGUAGE: cli
CODE:
ZADD myzset 1 "one"
ZADD myzset 2 "two"
ZADD myzset 3 "three"
ZRANGEBYSCORE myzset -inf +inf
ZRANGEBYSCORE myzset 1 2
ZRANGEBYSCORE myzset (1 2
ZRANGEBYSCORE myzset (1 (2

----------------------------------------

TITLE: Using LMPOP Command in Redis CLI
DESCRIPTION: This snippet demonstrates various uses of the LMPOP command in Redis, including popping elements from single and multiple lists, using different directions (LEFT/RIGHT), and specifying count limits.

LANGUAGE: cli
CODE:
LMPOP 2 non1 non2 LEFT COUNT 10
LPUSH mylist "one" "two" "three" "four" "five"
LMPOP 1 mylist LEFT
LRANGE mylist 0 -1
LMPOP 1 mylist RIGHT COUNT 10
LPUSH mylist "one" "two" "three" "four" "five"
LPUSH mylist2 "a" "b" "c" "d" "e"
LMPOP 2 mylist mylist2 right count 3
LRANGE mylist 0 -1
LMPOP 2 mylist mylist2 right count 5
LMPOP 2 mylist mylist2 right count 10
EXISTS mylist mylist2

----------------------------------------

TITLE: Client Documentation JSON Structure
DESCRIPTION: Example JSON structure for documenting Redis clients, showing required fields including name, description, and recommended status.

LANGUAGE: json
CODE:
{
    "name": "redis-py",
    "description": "Mature and supported. Currently the way to go for Python.",
    "recommended": true
}

----------------------------------------

TITLE: Demonstrating GETEX Usage in Redis CLI
DESCRIPTION: This example shows how to use the GETEX command to retrieve a key's value, check its TTL, and set an expiration time. It demonstrates setting a key, retrieving it with GETEX, checking its TTL, and then setting an expiration of 60 seconds.

LANGUAGE: cli
CODE:
SET mykey "Hello"
GETEX mykey
TTL mykey
GETEX mykey EX 60
TTL mykey

----------------------------------------

TITLE: Command Response Documentation JSON Structure
DESCRIPTION: Example JSON structure for documenting Redis command responses, showing how to specify different response types with markdown formatting.

LANGUAGE: json
CODE:
{
  "ACL CAT": [
    "One of the following:",
    "* [Array reply](/docs/reference/protocol-spec#arrays): an array of [Bulk string reply](/docs/reference/protocol-spec#bulk-strings) elements representing ACL categories or commands in a given category.",
    "* [Simple error reply](/docs/reference/protocol-spec#simple-errors): the command returns an error if an invalid category name is given."
  ]
}

----------------------------------------

TITLE: Using Special $ ID with XREAD in Redis
DESCRIPTION: This example shows how to use the special '$' ID with XREAD to receive only new entries added to the 'mystream' stream from the moment of blocking. It's useful for consuming only new data without interest in historical entries.

LANGUAGE: redis
CODE:
> XREAD BLOCK 5000 COUNT 100 STREAMS mystream $

----------------------------------------

TITLE: Modifying Existing ACL User Permissions
DESCRIPTION: Adds GET command permission to an existing user 'virginia' while preserving previous permissions.

LANGUAGE: redis
CODE:
ACL SETUSER virginia +get

----------------------------------------

TITLE: Opt-in Tracking for Read-Only Commands in Redis
DESCRIPTION: When broadcasting is not active, this option prevents tracking of keys in read-only commands unless explicitly opted in using CLIENT CACHING yes.

LANGUAGE: redis
CODE:
OPTIN

----------------------------------------

TITLE: Handling Deleted Pending Messages Example
DESCRIPTION: Redis commands demonstration showing what happens when a pending message is deleted from the stream while still being tracked in a consumer group's PEL.

LANGUAGE: redis
CODE:
> XADD mystream 1 myfield mydata
"1-0"
> XGROUP CREATE mystream mygroup 0
OK
> XREADGROUP GROUP mygroup myconsumer STREAMS mystream >
1) 1) "mystream"
   2) 1) 1) "1-0"
         2) 1) "myfield"
            2) "mydata"
> XDEL mystream 1-0
(integer) 1
> XREADGROUP GROUP mygroup myconsumer STREAMS mystream 0
1) 1) "mystream"
   2) 1) 1) "1-0"
         2) (nil)

----------------------------------------

TITLE: Using CLIENT PAUSE in Redis for Controlled Failover
DESCRIPTION: This snippet demonstrates how to use the CLIENT PAUSE command in Redis to facilitate a controlled failover scenario. It shows the steps an administrator might take to switch clients from one Redis instance to another during an upgrade.

LANGUAGE: redis
CODE:
CLIENT PAUSE
WAIT <few seconds>
# Turn one of the replicas into a master
# Reconfigure clients to connect with the new master

----------------------------------------

TITLE: Using ZRANGESTORE to Store Sorted Set Range in Redis CLI
DESCRIPTION: This example demonstrates how to use the ZRANGESTORE command in Redis CLI. It first adds elements to a sorted set, then uses ZRANGESTORE to store a range of elements in a new destination key, and finally retrieves the stored range.

LANGUAGE: cli
CODE:
ZADD srczset 1 "one" 2 "two" 3 "three" 4 "four"
ZRANGESTORE dstzset srczset 2 -1
ZRANGE dstzset 0 -1

----------------------------------------

TITLE: Demonstrating Redis RENAMENX Command
DESCRIPTION: Shows how to use the RENAMENX command to conditionally rename a key in Redis. The example demonstrates setting two keys and attempting to rename one to the other, which will fail since the target key already exists.

LANGUAGE: cli
CODE:
SET mykey "Hello"
SET myotherkey "World"
RENAMENX mykey myotherkey
GET myotherkey

----------------------------------------

TITLE: Using HSTRLEN Command in Redis CLI
DESCRIPTION: This example demonstrates how to use the HSTRLEN command to get the string length of different hash field values. It first sets hash fields with various value types, then retrieves their lengths.

LANGUAGE: cli
CODE:
HSET myhash f1 HelloWorld f2 99 f3 -256
HSTRLEN myhash f1
HSTRLEN myhash f2
HSTRLEN myhash f3