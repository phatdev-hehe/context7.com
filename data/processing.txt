TITLE: Processing Constants and Keywords
DESCRIPTION: Definition of Processing-specific constants, keywords and their token types used for syntax highlighting and language processing. Each line defines a keyword and its token type (e.g. LITERAL2, KEYWORD1 etc).

LANGUAGE: Processing
CODE:
# Constant definitions
ADD	LITERAL2	blend_
ALIGN_CENTER	LITERAL2
ALIGN_LEFT	LITERAL2
ALIGN_RIGHT	LITERAL2
ALPHA	LITERAL2
ALPHA_MASK	LITERAL2

----------------------------------------

TITLE: Processing Datatypes
DESCRIPTION: Definition of data types available in Processing, including both Java and Processing-specific types. Each line maps a datatype to its token category for syntax highlighting.

LANGUAGE: Processing
CODE:
Array	KEYWORD5	Array
ArrayList	KEYWORD5	ArrayList
Boolean	KEYWORD5
Byte	KEYWORD5
BufferedReader	KEYWORD5	BufferedReader

----------------------------------------

TITLE: Java Language Keywords
DESCRIPTION: Core Java programming language keywords and their token types used in Processing. Includes flow control, access modifiers, and basic language constructs.

LANGUAGE: Java
CODE:
abstract	KEYWORD1
break	KEYWORD1	break
class	KEYWORD1	class
continue	KEYWORD1	continue
default	KEYWORD1	default

----------------------------------------

TITLE: Defining Coordinate Pairs for Processing Sketch
DESCRIPTION: This code snippet defines a series of x and y coordinate pairs. These coordinates can be used to draw shapes, define paths, or create custom geometry in a Processing sketch.

LANGUAGE: Processing
CODE:
35	45
41	42
46	37
50	32
57	27
62	24
65	23
68	23
69	26
69	29
69	32
68	36
67	39
65	41
64	45
62	46
59	48
55	49
53	52
49	53
47	56
45	60
45	61
45	63
47	65
50	65
52	66
54	66
56	66
60	69
62	72
62	74
62	76
61	78
59	80
55	82
52	82
49	82
45	82
42	82
39	82
35	82
33	82
30	82
30	81
31	66
28	66
25	62
23	59
22	55
22	52
22	47
23	42
25	39
27	36
30	33
33	31
35	30
38	29
41	29
42	30
43	31
45	34
46	36
48	39
50	41
53	43
57	45
60	46
62	48
63	50
64	51
64	53
64	56
64	58
64	61
63	65
62	68
60	69
56	72
52	73
48	74
44	74
42	74
40	74
38	73
36	72
34	70
33	69
32	67
31	65
30	63
30	21
30	21
34	21
41	20
46	19
50	18
51	17
51	16
58	27
58	27

----------------------------------------

TITLE: Bresenham Line Drawing Algorithm Implementation
DESCRIPTION: Implements Bresenham's line drawing algorithm for efficient line rendering between two points.

LANGUAGE: processing
CODE:
void drawline(int x1, int y1, int x2, int y2)
{
  int sizex, sizey, incx, incy;
  int countx, county, x, y;
  sizex=x2-x1;
  sizey=y2-y1;

  if(sizex<0) {
    sizex=-sizex;
    incx=-1;
  } else {
    incx=1;
  }

  if(sizey<0) {
    sizey=-sizey;
    incy=-1;
  }else {
    incy = 1;
  }
  // Additional implementation omitted for brevity
}

----------------------------------------

TITLE: Correcting Array Manipulation in Processing
DESCRIPTION: This snippet demonstrates correct usage of array manipulation functions in Processing, including append(), shorten(), and arraycopy(). It shows how to properly add and remove elements from arrays, as well as copy array contents.

LANGUAGE: Processing
CODE:
String[] trees = { "ash", "oak" };
append(trees, "maple"); // INCORRECT! Does not change the array
println(trees); // Prints [0] "ash",  [1] "oak"
println();
trees = append(trees, "maple"); // Add "maple" to the end
println(trees); // Prints [0] "ash",  [1] "oak", [2] "maple"
println();
// Add "beech" to the end of the trees array, and creates a new
// array to store the change
String[] moretrees = append(trees, "beech");
// Prints [0] "ash", [1] "oak", [2] "maple", [3] "beech"
println(moretrees);

LANGUAGE: Processing
CODE:
String[] trees = { "lychee", "coconut", "fig"};
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee", [1] "coconut"
println();
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee"

LANGUAGE: Processing
CODE:
String[] north = { "OH", "IN", "MI" };
String[] south = { "GA", "FL", "NC" };
arraycopy(north, south); // Copy from north array to south array
println(south); // Prints [0] "OH", [1] "IN", [3] "MI"
println();
String[] east = { "MA", "NY", "RI" };
String[] west = new String[east.length]; // Create a new array
arraycopy(east, west); // Copy from east array to west array
println(west); // Prints [0] "MA", [1] "NY", [2] "RI"

----------------------------------------

TITLE: Main Animation Loop Implementation
DESCRIPTION: Handles drawing, frame updates, and interface controls for the animation system.

LANGUAGE: processing
CODE:
void loop(){
  if (mousePressed) {
    if (mouseX>=0 && mouseX<width && mouseY>=0 && mouseY<height){
      drawline(mouseX, mouseY, pmouseX, pmouseY);
      if (fat) {
        drawthickline(mouseX, mouseY, pmouseX, pmouseY, 2);
        drawdot(mouseX+1, mouseY);
        drawdot(mouseX,   mouseY+1);
        drawdot(mouseX,   mouseY-1);
        drawdot(mouseX-1, mouseY);
        drawdot(mouseX+1, mouseY-1);
        drawdot(mouseX+1, mouseY+1);
        drawdot(mouseX-1, mouseY-1);
        drawdot(mouseX-1, mouseY+1);
      }
    }
  }
  // Additional loop functionality omitted for brevity
}

----------------------------------------

TITLE: TickerRow Class Implementation in Processing
DESCRIPTION: Defines the TickerRow class, which represents a single row in the stock ticker. It handles scrolling, displaying stock symbols, and managing the order of symbols. The class includes methods for scrolling, refreshing the symbol order, and displaying the ticker.

LANGUAGE: Processing
CODE:
class TickerRow {
  float ypos, xpos1, xpos2, tickerwidth, tickerheight, speed;
  String stock;
  int numSymbols = 31;
  int selSymbol = int(random(numSymbols));
  String[] stcksymbol;
  String order = "";
  int orderlist[];

  TickerRow (int y, int widthsetting, int heightsetting, float scrollSpeed) {
    // Constructor implementation
  }

  void scroll() {
    // Scrolling implementation
  }

  void refreshOrder() {
    // Order refreshing implementation
  }

  void tickerDisplay(int x, int y, int tickerwidth, int tickerheight) {
    // Ticker display implementation
  }
}

----------------------------------------

TITLE: Initializing Stock Ticker Visualization in Processing
DESCRIPTION: Sets up the main parameters and objects for the stock ticker visualization. It initializes variables for image loading, row settings, and scrolling speeds. The setup() function creates TickerRow objects for each row in the visualization.

LANGUAGE: Processing
CODE:
BImage a;
BFont monospace;
int[][] aPixels;
String fileName, frameNumber, sequenceExtension, sequencePrefix, targaSequencePrefix;
int rowWidth, rowHeight, rowSpace, numberofRows, sequenceEndFrame, sequenceStartFrame, extCount;
float minScrollSpeed, maxScrollSpeed;
boolean isImageSequence, saveTargaSequence;
color BGColor, tickerBGColor;
TickerRow[] row;

void setup() {
  size(800, 200);
  monospace = loadFont("SCREENFont-R.vlw");
  fileName = "test.jpg";
  isImageSequence = false;
  sequencePrefix = "sequence_dir/sequence_";
  sequenceExtension = ".jpg";
  sequenceStartFrame = 0;
  sequenceEndFrame = 97;
  saveTargaSequence = false;
  targaSequencePrefix = "SEQUENCE_01-";
  BGColor = color(0,0,0);
  tickerBGColor = color(0,0,0);
  rowSpace = 0;
  numberofRows = 20;
  minScrollSpeed = 1f;
  maxScrollSpeed = 8f;
  rowHeight = height/numberofRows;
  rowWidth = width;

  noStroke();
  noSmooth();

  if (!isImageSequence) { updateImage(); }
  else { extCount = sequenceStartFrame; }

  row = new TickerRow[numberofRows];
  for(int i=0; i < row.length; i++) {
    row[i] = new TickerRow(rowHeight*(i), rowWidth, rowHeight-rowSpace, random(minScrollSpeed, maxScrollSpeed));
  }
}

----------------------------------------

TITLE: Variable Initialization in Processing Animation System
DESCRIPTION: Defines global variables for controlling the animation grid dimensions, buffer length, frame timing, and drawing settings.

LANGUAGE: processing
CODE:
int hquads       = 25;
int vquads       = 1;
int quadwidth    = 39;
int quadheight   = 250;
int buflength    = 200;
int framestep    = 4;
int framerest    = 2;
boolean fat      = false;
boolean grid     = true;
int btnresomulti = 2;
int btnreso      = 25;
int btnheight;
int framecounter = 0;
BImage[] bitlist = new BImage[buflength];
BImage blank     = new BImage();
int currentpic   = buflength - 1;

----------------------------------------

TITLE: Array Copying in Processing - Example 33-20
DESCRIPTION: Demonstrates array copying techniques using arraycopy() function, showing both direct copying between existing arrays and copying to a new array.

LANGUAGE: Processing
CODE:
String[] north = { "OH", "IN", "MI" };
String[] south = { "GA", "FL", "NC" };
arraycopy(north, south); // Copy from north array to south array
println(south); // Prints [0] "OH", [1] "IN", [3] "MI"
println();
String[] east = { "MA", "NY", "RI" };
String[] west = new String[east.length]; // Create a new array
arraycopy(east, west); // Copy from east array to west array
println(west); // Prints [0] "MA", [1] "NY", [2] "RI"

----------------------------------------

TITLE: Array Manipulation in Processing - Example 33-17
DESCRIPTION: Demonstrates proper array manipulation using append() function in Processing, showing both incorrect and correct usage patterns.

LANGUAGE: Processing
CODE:
String[] trees = { "ash", "oak" };
append(trees, "maple"); // INCORRECT! Does not change the array
println(trees); // Prints [0] "ash",  [1] "oak"
println();
trees = append(trees, "maple"); // Add "maple" to the end
println(trees); // Prints [0] "ash",  [1] "oak", [2] "maple"
println();
// Add "beech" to the end of the trees array, and creates a new
// array to store the change
String[] moretrees = append(trees, "beech");
// Prints [0] "ash", [1] "oak", [2] "maple", [3] "beech"
println(moretrees);

----------------------------------------

TITLE: Main Loop for Stock Ticker Visualization in Processing
DESCRIPTION: Implements the main animation loop for the stock ticker. It updates the background, scrolls each row, and optionally saves frames as a sequence. If using an image sequence, it updates the pixel array each frame.

LANGUAGE: Processing
CODE:
void loop() {
  background(BGColor);

  if (isImageSequence)  updateImage();
  for(int i=0; i < row.length; i++) row[i].scroll();

  if (saveTargaSequence) saveFrame(targaSequencePrefix + "-####.tga");
}

----------------------------------------

TITLE: Updating Image for Stock Ticker in Processing
DESCRIPTION: Handles loading and updating the image used for the ticker background. It supports both single images and image sequences, updating the pixel array accordingly.

LANGUAGE: Processing
CODE:
void updateImage() {
  if(extCount == sequenceEndFrame) extCount = sequenceStartFrame;

  frameNumber = String(extCount);
  if      (frameNumber.length() == 1)  frameNumber = "0000" + frameNumber;
  else if (frameNumber.length() == 2)  frameNumber = "000"  + frameNumber;
  else if (frameNumber.length() == 3)  frameNumber = "00"   + frameNumber;

  if (isImageSequence) fileName = sequencePrefix + frameNumber + sequenceExtension;

  a = loadImage(fileName);
  aPixels = new int[width][height];
  for(int i=0; i<height; i++) {
    for(int j=0; j<width; j++) {
      aPixels[j][i] = a.pixels[i*width+j];
    }
  }
  extCount++;
}

----------------------------------------

TITLE: Setup Function for Processing Animation
DESCRIPTION: Initializes the canvas size and creates a blank image template used for clearing frames.

LANGUAGE: processing
CODE:
void setup(){
  size(quadwidth * hquads, quadheight * vquads);
  blank.width  = quadwidth;
  blank.height = quadheight;
  blank.pixels = new color[quadwidth*quadheight];
  for (int j=0; j<blank.pixels.length; j++){
    blank.pixels[j] = color(0,0,0);
  }
  clearall();
}

----------------------------------------

TITLE: Processing Shape Attribute Example
DESCRIPTION: Example demonstrating proposed attribute functionality for shapes in Processing, showing how custom attributes like 'fuzziness' could be set per vertex.

LANGUAGE: Processing
CODE:
beginShape();

fill(203, 100, 44);
attrib("fuzziness", 0.5);
vertex(40, 30, 20);

fill(200, 141, 100);
attrib("fuzziness", 0.4);
vertex(30, 20 30);

// .. and so on

endShape();

----------------------------------------

TITLE: Displaying Coordinate Pairs in Plain Text
DESCRIPTION: This snippet shows a list of coordinate pairs, each on a new line. The values in each pair are separated by a tab character. These could represent points in a 2D space or other paired data.

LANGUAGE: text
CODE:
71	38
29	86
29	20
43	44
71	38

----------------------------------------

TITLE: Analyzing 2D Coordinate Data
DESCRIPTION: This dataset contains 168 pairs of x and y coordinates. Each line represents a point in 2D space, with values separated by a tab. The coordinates range from 10 to 95 for both x and y values, suggesting a bounded area of interest.

LANGUAGE: data
CODE:
70	35
69	35
68	39
67	42
66	47
64	51
64	54
63	57
60	60
58	64
51	69
48	72
44	73
39	75
35	75
30	75
25	75
21	75
17	73
13	69
12	66
11	61
11	57
10	49
10	45
10	38
12	32
13	29
16	23
20	19
24	16
27	15
31	13
33	13
37	13
40	15
42	16
45	19
46	21
47	24
48	26
48	29
48	33
47	39
43	45
42	47
38	50
35	51
32	51
30	51
27	50
27	50
26	46
26	41
29	36
30	34
31	33
31	33
32	33
33	33
34	33
34	33
35	33
37	33
39	33
42	32
44	31
46	29
48	29
49	27
52	24
53	23
57	19
61	16
63	14
67	13
69	12
69	12
77	11
77	11
80	11
86	16
90	21
93	25
95	29
95	32
95	33
95	37
94	41
93	44
92	46
91	49
89	51
87	55
85	59
82	62
80	64
79	67
77	69
74	71
68	72
65	73
63	73
62	73
60	72
58	69
57	67
57	66
56	60
56	56
56	54
58	49
60	47
62	47
63	47
67	48
70	52
73	55
74	57
74	58
74	60
74	62
73	65
70	68
67	69
65	70
63	70
62	70
60	68
57	65
55	64
50	62
46	61
40	60
38	60
36	60
32	61
30	62
27	64
26	68
25	71
25	77
25	81
26	84
28	86
31	87
33	88
36	88
39	86
41	85
43	83
44	81
45	76
45	74
45	71
40	67
37	65
34	63
33	61
33	61
32	60
33	49
37	45
41	41
45	39
47	38
51	37
54	37
58	38
61	41
63	44
65	46
66	49
66	51
67	55
67	58
67	60
66	62
64	65
63	66
61	67
60	68
58	68
55	69
54	69
51	69
48	69
46	68
45	66
44	65
44	63
44	61
44	59
44	56
44	55
45	53
47	52
49	50
50	48
51	47
52	46
54	46
55	45
55	45
56	44
57	44

----------------------------------------

TITLE: Processing Coordinate Data Definition
DESCRIPTION: A sequence of x,y coordinates that could be used to define a path, shape, or animation waypoints in Processing. Each line contains two numbers separated by a tab character.

LANGUAGE: processing
CODE:
70	35
69	35
68	39
67	42
66	47
64	51
64	54
63	57
60	60
58	64
51	69
48	72
44	73
39	75
35	75
30	75
25	75
21	75
17	73
13	69
12	66
11	61
11	57
10	49
10	45
10	38
12	32
13	29
16	23
20	19
24	16
27	15
31	13
33	13
37	13
40	15
42	16
45	19
46	21
47	24
48	26
48	29
48	33
47	39
43	45
42	47
38	50
35	51
32	51
30	51
27	50
27	50
26	46
26	41
29	36
30	34
31	33
31	33
32	33
33	33
34	33
34	33
35	33
37	33
39	33
42	32
44	31
46	29
48	29
49	27
52	24
53	23
57	19
61	16
63	14
67	13
69	12
69	12
77	11
77	11
80	11
86	16
90	21
93	25
95	29
95	32
95	33
95	37
94	41
93	44
92	46
91	49
89	51
87	55
85	59
82	62
80	64
79	67
77	69
74	71
68	72
65	73
63	73
62	73
60	72
58	69
57	67
57	66
56	60
56	56
56	54
58	49
60	47
62	47
63	47
67	48
70	52
73	55
74	57
74	58
74	60
74	62
73	65
70	68
67	69
65	70
63	70
62	70
60	68
57	65
55	64
50	62
46	61
40	60
38	60
36	60
32	61
30	62
27	64
26	68
25	71
25	77
25	81
26	84
28	86
31	87
33	88
36	88
39	86
41	85
43	83
44	81
45	76
45	74
45	71
40	67
37	65
34	63
33	61
33	61
32	60
33	49
37	45
41	41
45	39
47	38
51	37
54	37
58	38
61	41
63	44
65	46
66	49
66	51
67	55
67	58
67	60
66	62
64	65
63	66
61	67
60	68
58	68
55	69
54	69
51	69
48	69
46	68
45	66
44	65
44	63
44	61
44	59
44	56
44	55
45	53
47	52
49	50
50	48
51	47
52	46
54	46
55	45
55	45
56	44
57	44

----------------------------------------

TITLE: Array Shortening in Processing - Example 33-18
DESCRIPTION: Shows how to remove elements from the end of an array using the shorten() function in Processing.

LANGUAGE: Processing
CODE:
String[] trees = { "lychee", "coconut", "fig"};
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee", [1] "coconut"
println();
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee"

----------------------------------------

TITLE: Processing Alternative Attribute Syntax
DESCRIPTION: Alternative syntax example showing how attributes could be set directly rather than using dedicated functions like fill().

LANGUAGE: Processing
CODE:
attrib("fill", 203, 100, 44);

----------------------------------------

TITLE: Array Operations Example in Processing
DESCRIPTION: Demonstrates array manipulation using append() function with proper assignment. Shows correct handling of array references and modifications.

LANGUAGE: Processing
CODE:
String[] trees = { "ash", "oak" };
append(trees, "maple"); // INCORRECT! Does not change the array
println(trees); // Prints [0] "ash",  [1] "oak"
println();
trees = append(trees, "maple"); // Add "maple" to the end
println(trees); // Prints [0] "ash",  [1] "oak", [2] "maple"
println();
// Add "beech" to the end of the trees array, and creates a new
// array to store the change
String[] moretrees = append(trees, "beech");
// Prints [0] "ash", [1] "oak", [2] "maple", [3] "beech"
println(moretrees);

----------------------------------------

TITLE: Array Copy Operations in Processing
DESCRIPTION: Demonstrates array copying using arraycopy() function with both existing and new arrays. Shows proper array initialization and copying techniques.

LANGUAGE: Processing
CODE:
String[] north = { "OH", "IN", "MI" };
String[] south = { "GA", "FL", "NC" };
arraycopy(north, south); // Copy from north array to south array
println(south); // Prints [0] "OH", [1] "IN", [3] "MI"
println();
String[] east = { "MA", "NY", "RI" };
String[] west = new String[east.length]; // Create a new array
arraycopy(east, west); // Copy from east array to west array
println(west); // Prints [0] "MA", [1] "NY", [2] "RI"

----------------------------------------

TITLE: Array Shortening Operations in Processing
DESCRIPTION: Shows how to remove elements from an array using the shorten() function. Demonstrates progressive array size reduction.

LANGUAGE: Processing
CODE:
String[] trees = { "lychee", "coconut", "fig"};
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee", [1] "coconut"
println();
trees = shorten(trees); // Remove the last element from the array
println(trees); // Prints [0] "lychee"

----------------------------------------

TITLE: Displaying Number in Processing Sketch
DESCRIPTION: This sketch creates a canvas and displays the number 1276. It uses the default text settings and positions the number in the center of the canvas.

LANGUAGE: Processing
CODE:
void setup() {
  size(400, 400);
  textAlign(CENTER, CENTER);
  textSize(64);
}

void draw() {
  background(220);
  text("1276", width/2, height/2);
}

----------------------------------------

TITLE: Excluding Methods from Web Reference
DESCRIPTION: JavaDoc annotation example showing how to exclude specific method variants from appearing in the web reference using @nowebref.

LANGUAGE: java
CODE:
/**
  * @nowebref
  */

----------------------------------------

TITLE: Running Java-Generate Build Script
DESCRIPTION: Command-line instructions for running the documentation build script from the ReferenceGenerator directory.

LANGUAGE: bash
CODE:
$ cd ReferenceGenerator/
$ ./processingrefBuild.sh

----------------------------------------

TITLE: Compiling Java-Generate with Ant
DESCRIPTION: Commands for compiling the reference generator using Apache Ant build tool.

LANGUAGE: bash
CODE:
$ cd ReferenceGenerator/
$ ant compile

----------------------------------------

TITLE: Running build_listing.py Script for Processing Contributions
DESCRIPTION: This Python script reads sources.conf and writes contribs.txt. It can be run with optional arguments for input/output files and compatible Processing revisions.

LANGUAGE: bash
CODE:
python build_listing.py

LANGUAGE: bash
CODE:
python build_listing.py sources.conf contribs.txt

LANGUAGE: bash
CODE:
python build_listing.py sources.conf contribs.txt 216 227

LANGUAGE: bash
CODE:
python build_listing.py sources.conf contribs.txt 228 0

----------------------------------------

TITLE: Running build_listing_legacy.py Script for Processing 2.x Contributions
DESCRIPTION: This Python script generates the contributions.txt file for Processing 2.x, which should only include compatible entries.

LANGUAGE: bash
CODE:
python build_listing_legacy.py

----------------------------------------

TITLE: Setting JAVA_HOME Environment Variable on OSX
DESCRIPTION: Example of configuring JAVA_HOME environment variable in bash profile for OSX Mavericks to properly locate JDK.

LANGUAGE: bash
CODE:
# in e.g. ~/.bash_profile
# tell Java where to find JDK and libraries
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home