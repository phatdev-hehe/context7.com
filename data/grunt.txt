TITLE: Complete Gruntfile Configuration in JavaScript
DESCRIPTION: This snippet shows the complete Gruntfile configuration, including all plugin configurations, task loading, and task registration.

LANGUAGE: javascript
CODE:
module.exports = function(grunt) {

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    concat: {
      options: {
        separator: ';'
      },
      dist: {
        src: ['src/**/*.js'],
        dest: 'dist/<%= pkg.name %>.js'
      }
    },
    uglify: {
      options: {
        banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
      },
      dist: {
        files: {
          'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']
        }
      }
    },
    qunit: {
      files: ['test/**/*.html']
    },
    jshint: {
      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],
      options: {
        // options here to override JSHint defaults
        globals: {
          jQuery: true,
          console: true,
          module: true,
          document: true
        }
      }
    },
    watch: {
      files: ['<%= jshint.files %>'],
      tasks: ['jshint', 'qunit']
    }
  });

  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-contrib-qunit');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-contrib-concat');

  grunt.registerTask('test', ['jshint', 'qunit']);

  grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);

};

----------------------------------------

TITLE: Example Gruntfile with uglify task configuration
DESCRIPTION: A sample Gruntfile.js that configures the uglify task to minify a JavaScript file. It demonstrates the basic structure of a Gruntfile, including the wrapper function, task configuration, plugin loading, and default task definition.

LANGUAGE: javascript
CODE:
module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    uglify: {
      options: {
        banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
      },
      build: {
        src: 'src/<%= pkg.name %>.js',
        dest: 'build/<%= pkg.name %>.min.js'
      }
    }
  });

  // Load the plugin that provides the "uglify" task.
  grunt.loadNpmTasks('grunt-contrib-uglify');

  // Default task(s).
  grunt.registerTask('default', ['uglify']);

};

----------------------------------------

TITLE: Initializing Grunt Configuration Object in JavaScript
DESCRIPTION: Demonstrates how to initialize a configuration object for a Grunt project using grunt.config.init(). This example shows sample config data for the grunt-contrib-jshint plugin's jshint task.

LANGUAGE: javascript
CODE:
grunt.config.init({
  jshint: {
    all: ['lib/*.js', 'test/*.js', 'Gruntfile.js']
  }
});

----------------------------------------

TITLE: Basic Gruntfile Structure in JavaScript
DESCRIPTION: This snippet shows the basic structure of a Gruntfile, including the wrapper function and initialization of the configuration object.

LANGUAGE: javascript
CODE:
module.exports = function(grunt) {
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json')
  });
};

----------------------------------------

TITLE: Installing Grunt CLI
DESCRIPTION: Command to install Grunt command-line interface globally using npm package manager. Windows users should run without sudo and may need elevated privileges.

LANGUAGE: bash
CODE:
sudo npm install -g grunt-cli

----------------------------------------

TITLE: Installing Grunt CLI globally using npm
DESCRIPTION: Command to install Grunt's command line interface (CLI) globally using npm. This allows the 'grunt' command to be run from any directory.

LANGUAGE: shell
CODE:
npm install -g grunt-cli

----------------------------------------

TITLE: Installing Grunt Dependencies with npm
DESCRIPTION: Command to install all project dependencies defined in package.json, including Grunt and its plugins.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Installing Grunt locally and adding to package.json
DESCRIPTION: Command to install Grunt locally in a project and automatically add it to the devDependencies in package.json.

LANGUAGE: shell
CODE:
npm install grunt --save-dev

----------------------------------------

TITLE: Accessing Grunt Configuration Data in JavaScript
DESCRIPTION: Shows various methods for accessing Grunt configuration data, including grunt.config(), grunt.config.get(), grunt.config.process(), grunt.config.getRaw(), grunt.config.set(), and grunt.config.escape(). These methods allow retrieving and setting configuration values.

LANGUAGE: javascript
CODE:
grunt.config([prop [, value]])
grunt.config.get([prop])
grunt.config.process(value)
grunt.config.getRaw([prop])
grunt.config.set(prop, value)
grunt.config.escape(propString)

----------------------------------------

TITLE: Initializing Grunt Configuration with Task-Specific Properties
DESCRIPTION: This snippet demonstrates how to set up basic Grunt configuration using grunt.initConfig(). It shows how to define task-specific properties and arbitrary data.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  concat: {
    // concat task configuration goes here.
  },
  uglify: {
    // uglify task configuration goes here.
  },
  // Arbitrary non-task-specific properties.
  my_property: 'whatever',
  my_src_files: ['foo/*.js', 'bar/*.js'],
});

----------------------------------------

TITLE: Registering Function Tasks in Grunt
DESCRIPTION: Example of registering a custom function task that handles arguments and logging. Shows how to access task context and handle different argument scenarios.

LANGUAGE: javascript
CODE:
grunt.task.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {
  if (arguments.length === 0) {
    grunt.log.writeln(this.name + ", no args");
  } else {
    grunt.log.writeln(this.name + ", " + arg1 + " " + arg2);
  }
});

----------------------------------------

TITLE: Installing a Grunt plugin and adding to package.json
DESCRIPTION: Example of installing a Grunt plugin (JSHint) locally and adding it to the devDependencies in package.json.

LANGUAGE: shell
CODE:
npm install grunt-contrib-jshint --save-dev

----------------------------------------

TITLE: Reading and Parsing JSON Files with Grunt
DESCRIPTION: Reads a file's contents, parses the data as JSON, and returns the result. It supports the same options as grunt.file.read.

LANGUAGE: javascript
CODE:
grunt.file.readJSON(filepath [, options])

----------------------------------------

TITLE: Registering Alias Tasks in Grunt
DESCRIPTION: Demonstrates how to create alias tasks that group multiple tasks together. Alias tasks can run multiple tasks in sequence with optional task-specific arguments.

LANGUAGE: javascript
CODE:
grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);

LANGUAGE: javascript
CODE:
grunt.registerTask('dist', ['concat:dist', 'uglify:dist']);

----------------------------------------

TITLE: Writing File Contents with Grunt
DESCRIPTION: Writes specified contents to a file, creating intermediate directories if necessary. Strings are encoded using the specified character encoding, while Buffers are written as-is.

LANGUAGE: javascript
CODE:
grunt.file.write(filepath, contents [, options])

LANGUAGE: javascript
CODE:
var options = {
  // If an encoding is not specified, default to grunt.file.defaultEncoding.
  // If `contents` is a Buffer, encoding is ignored.
  encoding: encodingName
};

----------------------------------------

TITLE: Sample package.json for a Grunt project
DESCRIPTION: Example of a basic package.json file for a Grunt project. It includes the project name, version, and devDependencies for Grunt and some common plugins.

LANGUAGE: javascript
CODE:
{
  "name": "my-project-name",
  "version": "0.1.0",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-uglify": "~0.5.0"
  }
}

----------------------------------------

TITLE: File Processing in Grunt Multi Task
DESCRIPTION: Demonstrates how to process files in a multi task using this.files array, including file existence checking and content manipulation.

LANGUAGE: javascript
CODE:
this.files.forEach(function(file) {
  var contents = file.src.filter(function(filepath) {
    // Remove nonexistent files (it's up to you to filter or warn here).
    if (!grunt.file.exists(filepath)) {
      grunt.log.warn('Source file "' + filepath + '" not found.');
      return false;
    } else {
      return true;
    }
  }).map(function(filepath) {
    // Read and return the file's source.
    return grunt.file.read(filepath);
  }).join('\n');
  // Write joined contents to destination filepath.
  grunt.file.write(file.dest, contents);
  // Print a success message.
  grunt.log.writeln('File "' + file.dest + '" created.');
});

----------------------------------------

TITLE: Creating Basic Tasks in Grunt
DESCRIPTION: Demonstrates implementation of basic tasks that accept arguments and perform simple operations without configuration dependencies.

LANGUAGE: javascript
CODE:
grunt.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {
  if (arguments.length === 0) {
    grunt.log.writeln(this.name + ", no args");
  } else {
    grunt.log.writeln(this.name + ", " + arg1 + " " + arg2);
  }
});

----------------------------------------

TITLE: Using Files Object Format for Multiple Source-Destination Mappings in Grunt
DESCRIPTION: This snippet shows how to use the files object format in Grunt configuration to specify multiple source-destination file mappings for tasks like 'concat'.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  concat: {
    foo: {
      files: {
        'dest/a.js': ['src/aa.js', 'src/aaa.js'],
        'dest/a1.js': ['src/aa1.js', 'src/aaa1.js'],
      },
    },
    bar: {
      files: {
        'dest/b.js': ['src/bb.js', 'src/bbb.js'],
        'dest/b1.js': ['src/bb1.js', 'src/bbb1.js'],
      },
    },
  },
});

----------------------------------------

TITLE: Implementing Asynchronous Task in Grunt
DESCRIPTION: Demonstrates how to create an asynchronous Grunt task using this.async(). The example shows a timeout-based task that randomly succeeds or fails.

LANGUAGE: javascript
CODE:
// Tell Grunt this task is asynchronous.
var done = this.async();
// Your async code.
setTimeout(function() {
  // Let's simulate an error, sometimes.
  var success = Math.random() > 0.5;
  // All done!
  done(success);
}, 1000);

----------------------------------------

TITLE: Merging Grunt Configuration Objects in JavaScript
DESCRIPTION: Demonstrates how to use grunt.config.merge() to recursively merge properties of a specified configObject into the current project configuration. Includes examples of merging task configurations and array values.

LANGUAGE: javascript
CODE:
grunt.config.merge({
  watch: {
    files: ["path/to/files"],
    tasks: ["task"]
  }
});

grunt.initConfig({
  jshint: {
    files: ['Gruntfile.js', 'src/**/*.js'],
  }
);

var config = {
  jshint: {
    files: ['hello.js'],
  }
};

grunt.config.merge(config);

----------------------------------------

TITLE: Configuring Multi-Tasks with Multiple Targets in Grunt
DESCRIPTION: This example shows how to configure multi-tasks in Grunt with multiple named targets. It demonstrates configuration for 'concat' and 'uglify' tasks with different targets.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  concat: {
    foo: {
      // concat task "foo" target options and files go here.
    },
    bar: {
      // concat task "bar" target options and files go here.
    },
  },
  uglify: {
    bar: {
      // uglify task "bar" target options and files go here.
    },
  },
});

----------------------------------------

TITLE: Requiring Grunt Configuration Properties in JavaScript
DESCRIPTION: Shows how to use grunt.config.requires() to fail the current task if one or more required config properties are missing, null, or undefined. This method can be used to ensure necessary configuration is present before executing a task.

LANGUAGE: javascript
CODE:
grunt.config.requires(prop [, prop [, ...]])

----------------------------------------

TITLE: Configuring Grunt Uglify Plugin in JavaScript
DESCRIPTION: This snippet shows the configuration for the grunt-contrib-uglify plugin, which minifies JavaScript files and adds a banner comment.

LANGUAGE: javascript
CODE:
uglify: {
  options: {
    // the banner is inserted at the top of the output
    banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
  },
  dist: {
    files: {
      'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']
    }
  }
}

----------------------------------------

TITLE: Expanding Globbing Patterns with Grunt
DESCRIPTION: Returns a unique array of file or directory paths that match the given globbing pattern(s). Supports exclusion patterns and various options for filtering and matching.

LANGUAGE: javascript
CODE:
grunt.file.expand([options, ] patterns)

----------------------------------------

TITLE: Registering Alias Tasks in Grunt
DESCRIPTION: Examples showing how to register alias tasks that can run multiple other tasks in sequence. Includes examples of default tasks and tasks with arguments.

LANGUAGE: javascript
CODE:
task.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);

LANGUAGE: javascript
CODE:
task.registerTask('dist', ['concat:dist', 'uglify:dist']);

----------------------------------------

TITLE: Recursively Processing Directories with Grunt
DESCRIPTION: Recurses into a directory, executing a callback function for each file. The callback receives arguments for the absolute path, root directory, subdirectory, and filename.

LANGUAGE: javascript
CODE:
grunt.file.recurse(rootdir, callback)

LANGUAGE: javascript
CODE:
function callback(abspath, rootdir, subdir, filename) {
  // The full path to the current file, which is nothing more than
  // the rootdir + subdir + filename arguments, joined.
  abspath
  // The root director, as originally specified.
  rootdir
  // The current file's directory, relative to rootdir.
  subdir
  // The filename of the current file, without any directory parts.
  filename
}

----------------------------------------

TITLE: Task Options Configuration in Grunt
DESCRIPTION: Shows how to handle task options using this.options() method with default values.

LANGUAGE: javascript
CODE:
var options = this.options({
  enabled: false,
});

doSomething(options.enabled);

----------------------------------------

TITLE: Reading File Contents with Grunt
DESCRIPTION: Reads and returns a file's contents as a string or Buffer. The options object can specify the encoding, defaulting to grunt.file.defaultEncoding if not provided.

LANGUAGE: javascript
CODE:
grunt.file.read(filepath [, options])

LANGUAGE: javascript
CODE:
var options = {
  // If an encoding is not specified, default to grunt.file.defaultEncoding.
  // If specified as null, returns a non-decoded Buffer instead of a string.
  encoding: encodingName
};

----------------------------------------

TITLE: Configuring Grunt Watch Plugin in JavaScript
DESCRIPTION: This snippet demonstrates the configuration for the grunt-contrib-watch plugin, which runs specified tasks when files are changed.

LANGUAGE: javascript
CODE:
watch: {
  files: ['<%= jshint.files %>'],
  tasks: ['jshint', 'qunit']
}

----------------------------------------

TITLE: Loading NPM Tasks in Grunt
DESCRIPTION: Method to load Grunt tasks from npm packages programmatically.

LANGUAGE: javascript
CODE:
grunt.loadNpmTasks(...)

----------------------------------------

TITLE: Task Dependency Declaration in Grunt
DESCRIPTION: Shows how to declare task dependencies using this.requires() method to ensure required tasks have run successfully.

LANGUAGE: javascript
CODE:
this.requires(tasksList)

----------------------------------------

TITLE: Loading Custom Tasks in Grunt
DESCRIPTION: Method to load custom Grunt tasks programmatically.

LANGUAGE: javascript
CODE:
grunt.loadTasks(...)

----------------------------------------

TITLE: Config Property Requirement Check in Grunt
DESCRIPTION: Demonstrates how to verify required configuration properties using this.requiresConfig() method.

LANGUAGE: javascript
CODE:
this.requiresConfig(prop [, prop [, ...]])

----------------------------------------

TITLE: Deleting Files and Directories with Grunt
DESCRIPTION: Deletes the specified filepath, including files and folders recursively. The options object can enable deleting outside the current working directory.

LANGUAGE: javascript
CODE:
grunt.file.delete(filepath [, options])

LANGUAGE: javascript
CODE:
var options = {
  // Enable deleting outside the current working directory. This option may
  // be overridden by the --force command-line option.
  force: true
};

----------------------------------------

TITLE: Configuring Grunt Tasks with Target Options
DESCRIPTION: Example showing how to configure Grunt tasks using the target option to handle different build environments (dev vs staging). Demonstrates using grunt.option() to set default values and access command line parameters.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  compass: {
    dev: {
      options: {
        /* ... */
        outputStyle: 'expanded'
      },
    },
    staging: {
      options: {
        /* ... */
        outputStyle: 'compressed'
      },
    },
  },
});
var target = grunt.option('target') || 'dev';
grunt.registerTask('deploy', ['compass:' + target]);

----------------------------------------

TITLE: Creating Directories with Grunt
DESCRIPTION: Creates a directory along with any intermediate directories, similar to mkdir -p. If mode isn't specified, it defaults to 0777 & (~process.umask()).

LANGUAGE: javascript
CODE:
grunt.file.mkdir(dirpath [, mode])

----------------------------------------

TITLE: Installing Grunt Plugin via NPM
DESCRIPTION: Demonstrates how to install a Grunt plugin locally using npm with the --save-dev flag to add it as a development dependency.

LANGUAGE: bash
CODE:
npm install --save-dev grunt-contrib-uglify

----------------------------------------

TITLE: Complex Logging Example in Grunt Task
DESCRIPTION: A comprehensive example demonstrating various logging techniques within a Grunt task, including error handling and conditional verbose output.

LANGUAGE: javascript
CODE:
grunt.registerTask('something', 'Do something interesting.', function(arg) {
  var msg = 'Doing something...';
  grunt.verbose.write(msg);
  try {
    doSomethingThatThrowsAnExceptionOnError(arg);
    // Success!
    grunt.verbose.ok();
  } catch(e) {
    // Something went wrong.
    grunt.verbose.or.write(msg).error().error(e.message);
    grunt.fail.warn('Something went wrong.');
  }
});

----------------------------------------

TITLE: Loading Grunt Plugin Tasks
DESCRIPTION: Shows how to load tasks from an installed Grunt plugin within the Gruntfile.js configuration file.

LANGUAGE: javascript
CODE:
grunt.loadNpmTasks('grunt-contrib-uglify')

----------------------------------------

TITLE: Logging Errors and Success Messages in Grunt
DESCRIPTION: Methods for logging error and success messages, including options for text wrapping and color-coding.

LANGUAGE: javascript
CODE:
grunt.log.error([msg])

LANGUAGE: javascript
CODE:
grunt.log.errorlns(msg)

LANGUAGE: javascript
CODE:
grunt.log.ok([msg])

LANGUAGE: javascript
CODE:
grunt.log.oklns(msg)

----------------------------------------

TITLE: Matching Files Against Globbing Patterns with Grunt
DESCRIPTION: Matches one or more globbing patterns against one or more file paths, returning a unique array of matching file paths. Supports exclusion patterns and various matching options.

LANGUAGE: javascript
CODE:
grunt.file.match([options, ] patterns, filepaths)

----------------------------------------

TITLE: Process Spawning with grunt.util.spawn
DESCRIPTION: Spawns a child process and tracks its stdout, stderr, and exit code. Returns child process reference and calls callback on completion.

LANGUAGE: javascript
CODE:
grunt.util.spawn(options, doneFunction)

LANGUAGE: javascript
CODE:
var options = {
  cmd: commandToExecute,
  grunt: boolean,
  args: arrayOfArguments,
  opts: nodeSpawnOptions,
  fallback: fallbackValue
};

LANGUAGE: javascript
CODE:
function doneFunction(error, result, code) {
  error
  result
  String(result)
  code
}

----------------------------------------

TITLE: Generating File Mapping Objects with Grunt
DESCRIPTION: Returns an array of src-dest file mapping objects based on specified patterns and destination. Supports options for flattening, renaming, and modifying file extensions.

LANGUAGE: javascript
CODE:
grunt.file.expandMapping(patterns, dest [, options])

LANGUAGE: javascript
CODE:
var options = {
  // The directory from which patterns are matched. Any string specified as
  // cwd is effectively stripped from the beginning of all matched paths.
  cwd: String,
  // Remove the path component from all matched src files. The src file path
  // is still joined to the specified dest.
  flatten: Boolean,
  // Remove anything after (and including) either the first or last "."
 the
  // destination path (indicated by options.extDot), then append this value.
  ext: String,
  // *Added in 0.4.3*
  // Indicates where the period demarcating the extension is located. Can take:
  // - 'first' (extension begins after the first period in the file name)
  // - 'last' (extension begins after the last period)
  // Default: 'first'
  extDot: String,
  // If specified, this function will be responsible for returning the final
  // dest filepath. By default, it joins dest and matchedSrcPath like so:
  rename: function(dest, matchedSrcPath, options) {
    return path.join(dest, matchedSrcPath);
  }
};

----------------------------------------

TITLE: Displaying Fatal Error and Aborting Grunt with grunt.fail.fatal in JavaScript
DESCRIPTION: This method displays a fatal error and aborts Grunt immediately. It accepts an error argument (string or object) and an optional error code. A beep is emitted unless the --no-color option is specified.

LANGUAGE: javascript
CODE:
grunt.fail.fatal(error [, errorcode])

----------------------------------------

TITLE: Configuring Files Array Format with Additional Properties in Grunt
DESCRIPTION: This example demonstrates the use of files array format in Grunt configuration, allowing multiple source-destination mappings and additional properties per mapping.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  concat: {
    foo: {
      files: [
        {src: ['src/aa.js', 'src/aaa.js'], dest: 'dest/a.js'},
        {src: ['src/aa1.js', 'src/aaa1.js'], dest: 'dest/a1.js'},
      ],
    },
    bar: {
      files: [
        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},
        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},
      ],
    },
  },
});

----------------------------------------

TITLE: Reading and Parsing YAML Files with Grunt
DESCRIPTION: Reads a file's contents, parses the data as YAML, and returns the result. It supports the same options as grunt.file.read.

LANGUAGE: javascript
CODE:
grunt.file.readYAML(filepath [, options])

----------------------------------------

TITLE: Registering Grunt Task Alias
DESCRIPTION: Shows how to create a custom task alias that includes the plugin task in its sequence.

LANGUAGE: javascript
CODE:
grunt.registerTask("dist", ["uglify"])

----------------------------------------

TITLE: Emitting Events in Grunt
DESCRIPTION: Executes each of the listeners that may be listening for the specified event name in order with the list of arguments. Uses the grunt.event.emit method.

LANGUAGE: javascript
CODE:
grunt.event.emit(event, [arg1], [arg2], [...])

----------------------------------------

TITLE: Processing Templates with grunt.template.process
DESCRIPTION: Demonstrates how to process Lo-Dash templates using grunt.template.process. The method recursively processes templates until no more template patterns remain.

LANGUAGE: javascript
CODE:
grunt.template.process(template [, options])

----------------------------------------

TITLE: Changing Grunt's Current Working Directory
DESCRIPTION: Changes Grunt's current working directory (CWD). By default, all file paths are relative to the Gruntfile. This method works like the --base command-line option.

LANGUAGE: javascript
CODE:
grunt.file.setBase(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Implementing Asynchronous Tasks in Grunt
DESCRIPTION: Shows how to create asynchronous tasks using the this.async() method and handling task completion through callbacks.

LANGUAGE: javascript
CODE:
grunt.registerTask('asyncfoo', 'My "asyncfoo" task.', function() {
  var done = this.async();
  grunt.log.writeln('Processing task...');
  setTimeout(function() {
    grunt.log.writeln('All done!');
    done();
  }, 1000);
});

----------------------------------------

TITLE: Creating Dynamic Alias Tasks in Grunt (JavaScript)
DESCRIPTION: Illustrates how to create a 'dynamic' alias task that can accept parameters and run multiple tasks with those parameters. This is useful for sharing parameters across tasks.

LANGUAGE: javascript
CODE:
grunt.registerTask('build', 'Run all my build tasks.', function(n) {
  if (n == null) {
    grunt.warn('Build num must be specified, like build:001.');
  }
  grunt.task.run('foo:' + n, 'bar:' + n, 'baz:' + n);
});

----------------------------------------

TITLE: Task Error Handling in Grunt
DESCRIPTION: Demonstrates various methods of handling task failures and errors, including synchronous and asynchronous failure scenarios.

LANGUAGE: javascript
CODE:
grunt.registerTask('foo', 'My "foo" task.', function() {
  if (failureOfSomeKind) {
    grunt.log.error('This is an error message.');
  }

  if (ifErrors) { return false; }

  grunt.log.writeln('This is the success message');
});

----------------------------------------

TITLE: Configuring Grunt QUnit Plugin in JavaScript
DESCRIPTION: This snippet demonstrates the configuration for the grunt-contrib-qunit plugin, specifying the location of QUnit test files.

LANGUAGE: javascript
CODE:
qunit: {
  files: ['test/**/*.html']
},

----------------------------------------

TITLE: Using Options Within Grunt Tasks
DESCRIPTION: Example of accessing grunt options within a custom task definition. Shows how to retrieve command line parameters for use in task logic.

LANGUAGE: javascript
CODE:
grunt.registerTask('upload', 'Upload code to specified target.', function(n) {
  var target = grunt.option('target');
  // do something useful with target here
});
grunt.registerTask('deploy', ['validate', 'upload']);

----------------------------------------

TITLE: Checking File Existence with Grunt
DESCRIPTION: Checks if a given path exists, returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.exists(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Basic Grunt Option Usage
DESCRIPTION: Basic syntax for getting or setting a Grunt option using the option API.

LANGUAGE: javascript
CODE:
grunt.option(key[, val])

----------------------------------------

TITLE: Checking for Directories with Grunt
DESCRIPTION: Checks if a given path is a directory, returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.isDir(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Negating Boolean Options in Grunt
DESCRIPTION: Example showing how to use boolean option negation by prepending 'no-' to the option key.

LANGUAGE: javascript
CODE:
grunt.option('staging', false);
var isDev = grunt.option('no-staging');
// isDev === true

----------------------------------------

TITLE: Checking for Files with Grunt
DESCRIPTION: Checks if a given path is a file, returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.isFile(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Initializing Grunt Options
DESCRIPTION: Method to initialize grunt.option with either an empty object or a provided initObject.

LANGUAGE: javascript
CODE:
grunt.option.init([initObject])

----------------------------------------

TITLE: Checking for Absolute Paths with Grunt
DESCRIPTION: Checks if a given file path is absolute, returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.isPathAbsolute(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Getting Grunt Option Flags
DESCRIPTION: Method to retrieve all options as an array of command line parameters.

LANGUAGE: javascript
CODE:
grunt.option.flags()

----------------------------------------

TITLE: Verbose and Non-verbose Logging in Grunt
DESCRIPTION: Methods for conditional logging based on verbose mode, including toggling between verbose and non-verbose output.

LANGUAGE: javascript
CODE:
grunt.verbose

LANGUAGE: javascript
CODE:
grunt.verbose.or

----------------------------------------

TITLE: Logging Messages with Grunt in JavaScript
DESCRIPTION: Basic methods for logging messages to the console using Grunt. Includes examples of writing messages with and without newlines.

LANGUAGE: javascript
CODE:
grunt.log.write(msg)

LANGUAGE: javascript
CODE:
grunt.log.writeln([msg])

----------------------------------------

TITLE: Recursive Template Processing Example
DESCRIPTION: Shows how nested templates are processed recursively using grunt.template.process with a custom data object.

LANGUAGE: javascript
CODE:
var obj = {
  foo: 'c',
  bar: 'b<%= foo %>d',
  baz: 'a<%= bar %>e'
};
grunt.template.process('<%= baz %>', {data: obj}) // 'abcde'

----------------------------------------

TITLE: Formatting and Utility Methods in Grunt Logging
DESCRIPTION: Utility methods for formatting log output, including bold text, flag logging, and debug messages.

LANGUAGE: javascript
CODE:
grunt.log.subhead(msg)

LANGUAGE: javascript
CODE:
grunt.log.writeflags(obj, prefix)

LANGUAGE: javascript
CODE:
grunt.log.debug(msg)

----------------------------------------

TITLE: Using grunt.util.kindOf for Type Checking
DESCRIPTION: Returns the internal [[Class]] value of a variable, providing more detailed type information than typeof.

LANGUAGE: javascript
CODE:
grunt.util.kindOf(value)

----------------------------------------

TITLE: Text Formatting Utilities in Grunt Logging
DESCRIPTION: Utility methods for formatting text output, including word lists, color removal, text wrapping, and table formatting.

LANGUAGE: javascript
CODE:
grunt.log.wordlist(arr [, options])

LANGUAGE: javascript
CODE:
var options = {
  // The separator string (can be colored).
  separator: ', ',
  // The array item color (specify false to not colorize).
  color: 'cyan',
};

LANGUAGE: javascript
CODE:
grunt.log.uncolor(str)

LANGUAGE: javascript
CODE:
grunt.log.wraptext(width, text)

LANGUAGE: javascript
CODE:
grunt.log.table(widths, texts)

----------------------------------------

TITLE: Running Grunt Plugin Task
DESCRIPTION: Example of running a Grunt plugin task from the command line.

LANGUAGE: bash
CODE:
grunt uglify

----------------------------------------

TITLE: Setting Default File Encoding in Grunt
DESCRIPTION: Sets the default character encoding used by all grunt.file methods. It's recommended to set this early in the Gruntfile if a non-default encoding is needed.

LANGUAGE: javascript
CODE:
grunt.file.defaultEncoding = 'utf8';

----------------------------------------

TITLE: Checking Path Containment with Grunt
DESCRIPTION: Checks if all descendant paths are contained within the specified ancestor path, returning a boolean. Does not check if paths actually exist.

LANGUAGE: javascript
CODE:
grunt.file.doesPathContain(ancestorPath, descendantPath1 [, descendantPath2 [, ...]])

----------------------------------------

TITLE: Configuring Byte Order Mark Preservation in Grunt
DESCRIPTION: Sets whether to preserve the Byte Order Mark (BOM) when reading files. This option was added in Grunt version 0.4.2.

LANGUAGE: javascript
CODE:
grunt.file.preserveBOM = false;

----------------------------------------

TITLE: Checking if Path is Current Working Directory with Grunt
DESCRIPTION: Checks if a given file path is the current working directory (CWD), returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.isPathCwd(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Copying Files with Grunt
DESCRIPTION: Copies a source file to a destination path, creating intermediate directories if necessary. The options object can specify encoding, processing function, and glob patterns to exclude from processing.

LANGUAGE: javascript
CODE:
grunt.file.copy(srcpath, destpath [, options])

LANGUAGE: javascript
CODE:
var options = {
  // If an encoding is not specified, default to grunt.file.defaultEncoding.
  // If null, the `process` function will receive a Buffer instead of String.
  encoding: encodingName,
  // The source file contents, source file path, and destination file path
  // are passed into this function, whose return value will be used as the
  // destination file's contents. If this function returns `false`, the file
  // copy will be aborted.
  process: processFunction,
  // These optional globbing patterns will be matched against the filepath
  // (not the filename) using grunt.file.isMatch. If any specified globbing
  // pattern matches, the file won't be processed via the `process` function.
  // If `true` is specified, processing will be prevented.
  noProcess: globbingPatterns
};

----------------------------------------

TITLE: Checking if Path is Inside Current Working Directory with Grunt
DESCRIPTION: Checks if a given file path is inside the current working directory (CWD), returning a boolean. Note that CWD itself is not considered inside CWD.

LANGUAGE: javascript
CODE:
grunt.file.isPathInCwd(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Checking for Symbolic Links with Grunt
DESCRIPTION: Checks if a given path is a symbolic link, returning a boolean. Joins all arguments together and normalizes the resulting path.

LANGUAGE: javascript
CODE:
grunt.file.isLink(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Removing Event Listener in Grunt
DESCRIPTION: Removes a listener from the listener array for the specified event. Uses the grunt.event.off method.

LANGUAGE: javascript
CODE:
grunt.event.off(event, listener)

----------------------------------------

TITLE: Comparing Paths for Equivalence with Grunt
DESCRIPTION: Checks if all specified paths refer to the same path, returning a boolean.

LANGUAGE: javascript
CODE:
grunt.file.arePathsEquivalent(path1 [, path2 [, ...]])

----------------------------------------

TITLE: Date Formatting with grunt.template.date
DESCRIPTION: Formats a specific date using the dateformat library.

LANGUAGE: javascript
CODE:
grunt.template.date(date, format)
grunt.template.date(847602000000, 'yyyy-mm-dd') // '1996-11-10'

----------------------------------------

TITLE: Creating Error Objects with grunt.util.error
DESCRIPTION: Creates a new Error instance with custom message and optional original error stack trace when --stack option is used.

LANGUAGE: javascript
CODE:
grunt.util.error(message [, origError])

----------------------------------------

TITLE: Array Conversion with grunt.util.toArray
DESCRIPTION: Converts array-like objects into proper arrays, useful for handling arguments objects.

LANGUAGE: javascript
CODE:
grunt.util.toArray(arrayLikeObject)

----------------------------------------

TITLE: Normalizing Line Endings with grunt.util.normalizelf
DESCRIPTION: Normalizes line endings in a string based on the current operating system.

LANGUAGE: javascript
CODE:
grunt.util.normalizelf(string)

----------------------------------------

TITLE: Function Normalization with grunt.util.callbackify
DESCRIPTION: Converts both synchronous and asynchronous functions to use a consistent callback pattern.

LANGUAGE: javascript
CODE:
grunt.util.callbackify(syncOrAsyncFunction)

LANGUAGE: javascript
CODE:
function add1(a, b) {
  return a + b;
}
function add2(a, b, callback) {
  callback(a + b);
}

var fn1 = grunt.util.callbackify(add1);
var fn2 = grunt.util.callbackify(add2);

fn1(1, 2, function(result) {
  console.log('1 plus 2 equals ' + result);
});
fn2(1, 2, function(result) {
  console.log('1 plus 2 equals ' + result);
});

----------------------------------------

TITLE: Recursive Object Traversal with grunt.util.recurse
DESCRIPTION: Recursively traverses nested objects and arrays, executing a callback for each non-object value.

LANGUAGE: javascript
CODE:
grunt.util.recurse(object, callbackFunction, continueFunction)

----------------------------------------

TITLE: String Repetition with grunt.util.repeat
DESCRIPTION: Repeats a string a specified number of times.

LANGUAGE: javascript
CODE:
grunt.util.repeat(n, str)

----------------------------------------

TITLE: String Pluralization with grunt.util.pluralize
DESCRIPTION: Handles string pluralization based on a count, using a separator to split singular/plural forms.

LANGUAGE: javascript
CODE:
grunt.util.pluralize(n, str, separator)

----------------------------------------

TITLE: Setting Base Path in Grunt
DESCRIPTION: Alternative method to set base path programmatically in Grunt configuration.

LANGUAGE: javascript
CODE:
grunt.file.setBase(...)

----------------------------------------

TITLE: Adding Event Listener in Grunt
DESCRIPTION: Adds a listener to the end of the listeners array for the specified event. Uses the grunt.event.on method.

LANGUAGE: javascript
CODE:
grunt.event.on(event, listener)

----------------------------------------

TITLE: Getting Grunt Option Keys
DESCRIPTION: Method introduced in version 1.2.0+ to retrieve all option keys.

LANGUAGE: javascript
CODE:
grunt.option.keys()

----------------------------------------

TITLE: Adding One-Time Event Listener in Grunt
DESCRIPTION: Adds a one-time listener for the event. The listener is invoked only the first time the event is fired, after which it is removed. Uses the grunt.event.once method.

LANGUAGE: javascript
CODE:
grunt.event.once(event, listener)

----------------------------------------

TITLE: Installing grunt-init globally using npm
DESCRIPTION: This command installs the grunt-init tool globally on your system, which is necessary for initializing new Grunt plugins.

LANGUAGE: bash
CODE:
npm install -g grunt-init

----------------------------------------

TITLE: Adding Multiple-Time Event Listener in Grunt
DESCRIPTION: Adds a listener that will execute n times for the event before being removed. Uses the grunt.event.many method.

LANGUAGE: javascript
CODE:
grunt.event.many(event, timesToListen, listener)

----------------------------------------

TITLE: Cloning a grunt-init template using git
DESCRIPTION: Example of how to clone a grunt-init template (jquery in this case) into the user's template directory using git.

LANGUAGE: shell
CODE:
git clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery

----------------------------------------

TITLE: Removing All Event Listeners in Grunt
DESCRIPTION: Removes all listeners, or those of the specified event. Uses the grunt.event.removeAllListeners method.

LANGUAGE: javascript
CODE:
grunt.event.removeAllListeners([event])

----------------------------------------

TITLE: Updating Peer Dependencies for Grunt Plugins in package.json
DESCRIPTION: Update the peerDependencies section of package.json for Grunt plugins to ensure compatibility with Grunt 1.0 and avoid installation errors.

LANGUAGE: json
CODE:
"peerDependencies": {
  "grunt": ">=0.4.0"
}

----------------------------------------

TITLE: Setting Template Delimiters
DESCRIPTION: Sets Lo-Dash template delimiters to a predefined set for manual template processing.

LANGUAGE: javascript
CODE:
grunt.template.setDelimiters(name)

----------------------------------------

TITLE: Running Grunt tasks with space-containing arguments
DESCRIPTION: Example of running Grunt tasks from the command line, demonstrating how to handle task arguments that contain spaces.

LANGUAGE: shell
CODE:
grunt my-task:argument-without-spaces "other-task:argument with spaces"

----------------------------------------

TITLE: Adding Custom Template Delimiters
DESCRIPTION: Adds a new named set of Lo-Dash template delimiters for custom template processing.

LANGUAGE: javascript
CODE:
grunt.template.addDelimiters(name, opener, closer)

----------------------------------------

TITLE: Initializing Grunt 0.5 Configuration in JavaScript
DESCRIPTION: Example configuration file showing the proposed structure for Grunt 0.5, including task registration, parallel execution, and CLI options. Demonstrates new features like dry run mode, stack traces, and verbose logging.

LANGUAGE: javascript
CODE:
var grunt = require('grunt');

grunt.initConfig({
  // defaults for cli
  grunt: {
    dryRun: true,
    stack: true,
    verbose: true,
    // what about defining loggers specific to a task?
    // is this required in your gruntfile or on by default?
    logger: [require('grunt-logger')]
  },
  jshint: {
    // ...
  },
  concat: {
    // ...
  },
  min: {
    // ...
  }
});

grunt.registerTask(require('grunt-contrib-jshint'));
grunt.registerTask(require('grunt-contrib-concat'));
grunt.registerTask(require('grunt-contrib-uglify'), 'min'); // optional second param renames

// generates a node-task compliant object and runs grunt.registerTask on it
grunt.registerTask('name','description', function (config) {
  //...
});

// load a set of tasks to be run in parallel
grunt.registerTask('name', ['jshint', 'concat'], { parallel:true });

// i think the cli should call this, but putting it here because you mentioned thinking it should go here.
grunt.run();

----------------------------------------

TITLE: Custom Delimiters Example
DESCRIPTION: Example of adding custom {% %} style delimiters.

LANGUAGE: javascript
CODE:
grunt.template.addDelimiters('myDelimiters', '{%', '%}')

----------------------------------------

TITLE: Today's Date Formatting
DESCRIPTION: Formats today's date using the dateformat library.

LANGUAGE: javascript
CODE:
grunt.template.today(format)
grunt.template.today('yyyy') // This returns a year in format such as '2020'

----------------------------------------

TITLE: Retrieving Command-line Options in Grunt
DESCRIPTION: Method to retrieve the value of a command-line option. Supports testing both the option and its inverse (e.g., debug and no-debug).

LANGUAGE: javascript
CODE:
grunt.option(optionName)

----------------------------------------

TITLE: Accessing Grunt Package Metadata
DESCRIPTION: Property that provides access to Grunt's package.json metadata as an object.

LANGUAGE: javascript
CODE:
grunt.package

----------------------------------------

TITLE: Getting Grunt Version
DESCRIPTION: Property that returns the current Grunt version as a string. Shortcut to grunt.package.version property.

LANGUAGE: javascript
CODE:
grunt.version

----------------------------------------

TITLE: Registering Multi Tasks in Grunt
DESCRIPTION: Example of registering a multi task that iterates over named sub-properties. Includes configuration example and task implementation.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  log: {
    foo: [1, 2, 3],
    bar: 'hello world',
    baz: false
  }
});

grunt.task.registerMultiTask('log', 'Log stuff.', function() {
  grunt.log.writeln(this.target + ': ' + this.data);
});

----------------------------------------

TITLE: Displaying Warning and Aborting Grunt with grunt.fail.warn in JavaScript
DESCRIPTION: This method displays a warning and aborts Grunt immediately, unless the --force option is specified. It accepts an error argument (string or object) and an optional error code.

LANGUAGE: javascript
CODE:
grunt.fail.warn(error [, errorcode])

----------------------------------------

TITLE: File Linting in Grunt Multi Task
DESCRIPTION: Shows how to implement a file linting task using this.filesSrc for read-only file operations.

LANGUAGE: javascript
CODE:
// Lint specified files.
var files = this.filesSrc;
var errorCount = 0;
files.forEach(function(filepath) {
  if (!lint(grunt.file.read(filepath))) {
    errorCount++;
  }
});

// Fail task if errors were logged.
if (errorCount > 0) { return false; }

// Otherwise, print a success message.
grunt.log.ok('Files lint free: ' + files.length);

----------------------------------------

TITLE: Configuring Grunt Concat Plugin in JavaScript
DESCRIPTION: This snippet demonstrates how to configure the grunt-contrib-concat plugin to concatenate JavaScript files from the src directory into a single file in the dist directory.

LANGUAGE: javascript
CODE:
concat: {
  options: {
    // define a string to put between each file in the concatenated output
    separator: ';'
  },
  dist: {
    // the files to concatenate
    src: ['src/**/*.js'],
    // the location of the resulting JS file
    dest: 'dist/<%= pkg.name %>.js'
  }
}

----------------------------------------

TITLE: Configuring Grunt JSHint Plugin in JavaScript
DESCRIPTION: This snippet shows how to configure the grunt-contrib-jshint plugin to lint JavaScript files, including specifying files to lint and JSHint options.

LANGUAGE: javascript
CODE:
jshint: {
  // define the files to lint
  files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],
  // configure JSHint (documented at http://www.jshint.com/docs/)
  options: {
    // more options here if you want to override JSHint defaults
    globals: {
      jQuery: true,
      console: true,
      module: true
    }
  }
}

----------------------------------------

TITLE: Installing grunt-init globally with npm
DESCRIPTION: Command to install grunt-init globally using npm, allowing it to be run from anywhere in the system.

LANGUAGE: shell
CODE:
npm install -g grunt-init

----------------------------------------

TITLE: Specifying default prompt answers in JSON
DESCRIPTION: Example of a defaults.json file used to override default values for grunt-init prompts, including author name, email, and URL.

LANGUAGE: json
CODE:
{
  "author_name": "\"Cowboy\" Ben Alman",
  "author_email": "none",
  "author_url": "http://benalman.com/"
}

----------------------------------------

TITLE: Defining a grunt-init template in JavaScript
DESCRIPTION: Structure of a grunt-init template file, including exports for description, notes, warnOn patterns, and the main template function.

LANGUAGE: javascript
CODE:
exports.description = descriptionString;

exports.notes = notesString;

exports.warnOn = wildcardPattern;

exports.template = function(grunt, init, done) {
  // Template logic here
};

----------------------------------------

TITLE: Using init.process for prompting user input
DESCRIPTION: Example of using init.process to prompt the user for input values like name, description, and version when creating a new project.

LANGUAGE: javascript
CODE:
init.process({}, [
  // Prompt for these values
  init.prompt('name'),
  init.prompt('description'),
  init.prompt('version')
], function(err, props) {
  // All finished, do something with the properties
});

----------------------------------------

TITLE: Cloning gruntplugin template for Unix-like systems
DESCRIPTION: This Git command clones the gruntplugin template repository into the user's home directory for use with grunt-init on Unix-like systems.

LANGUAGE: bash
CODE:
git clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin

----------------------------------------

TITLE: Initializing a new Grunt plugin project
DESCRIPTION: This command initializes a new Grunt plugin project in an empty directory using the previously installed template.

LANGUAGE: bash
CODE:
grunt-init gruntplugin

----------------------------------------

TITLE: Installing development dependencies for the Grunt plugin
DESCRIPTION: This npm command installs all the necessary development dependencies for the Grunt plugin project.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Publishing the Grunt plugin to npm
DESCRIPTION: This npm command publishes the developed Grunt plugin to the npm registry, making it available for others to use.

LANGUAGE: bash
CODE:
npm publish

----------------------------------------

TITLE: Creating a Bash alias for Grunt with stack traces
DESCRIPTION: This Bash command creates an alias that always runs Grunt with the --stack option, enabling error stack traces for easier debugging.

LANGUAGE: bash
CODE:
alias grunt='grunt --stack'

----------------------------------------

TITLE: Implementing Asynchronous Tasks in Grunt (JavaScript)
DESCRIPTION: Demonstrates how to create an asynchronous task in Grunt by using the this.async() method. This allows tasks to perform asynchronous operations and signal completion.

LANGUAGE: javascript
CODE:
grunt.registerTask('asyncme', 'My asynchronous task.', function() {
  var done = this.async();
  doSomethingAsync(done);
});

----------------------------------------

TITLE: Enabling Grunt Shell Tab Auto-completion (Shell)
DESCRIPTION: Shows how to enable bash tab auto-completion for Grunt by adding an evaluation command to the .bashrc file. This assumes Grunt is installed globally.

LANGUAGE: shell
CODE:
eval "$(grunt --completion=bash)"

----------------------------------------

TITLE: Setting Global Variables in Grunt Tasks (JavaScript)
DESCRIPTION: Demonstrates how to create tasks that set global variables or configuration properties. This allows for dynamic configuration across multiple tasks.

LANGUAGE: javascript
CODE:
grunt.registerTask('set_global', 'Set a global variable.', function(name, val) {
  global[name] = val;
});

grunt.registerTask('set_config', 'Set a config property.', function(name, val) {
  grunt.config.set(name, val);
});

----------------------------------------

TITLE: Setting Task and Target-Specific Options in Grunt Configuration
DESCRIPTION: This snippet illustrates how to set task-level and target-level options in Grunt configuration. It shows that target-level options override task-level options.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  concat: {
    options: {
      // Task-level options may go here, overriding task defaults.
    },
    foo: {
      options: {
        // "foo" target options may go here, overriding task-level options.
      },
    },
    bar: {
      // No options specified; this target will use task-level options.
    },
  },
});

----------------------------------------

TITLE: Configuring File Mappings in Compact Format for Grunt Tasks
DESCRIPTION: This example demonstrates how to use the compact format for specifying file mappings in Grunt tasks. It shows configurations for 'jshint' and 'concat' tasks.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  jshint: {
    foo: {
      src: ['src/aa.js', 'src/aaa.js']
    },
  },
  concat: {
    bar: {
      src: ['src/bb.js', 'src/bbb.js'],
      dest: 'dest/b.js',
    },
  },
});

----------------------------------------

TITLE: Implementing Custom Filter Function for File Selection in Grunt
DESCRIPTION: This snippet shows how to use a custom filter function in Grunt configuration to selectively process files based on specific conditions, such as cleaning only empty folders.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  clean: {
    foo: {
      src: ['tmp/**/*'],
      filter: function(filepath) {
        return (grunt.file.isDir(filepath) && require('fs').readdirSync(filepath).length === 0);
      },
    },
  },
});

----------------------------------------

TITLE: Using Dynamic File Mapping with Globbing Patterns in Grunt
DESCRIPTION: This example demonstrates how to use dynamic file mapping with globbing patterns in Grunt, allowing automatic processing of files without manual updates to the Gruntfile.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  uglify: {
    dynamic_mappings: {
      files: [
        {
          expand: true,     // Enable dynamic expansion.
          cwd: 'lib/',      // Src matches are relative to this path.
          src: ['**/*.js'], // Actual pattern(s) to match.
          dest: 'build/',   // Destination path prefix.
          ext: '.min.js',   // Dest filepaths will have this extension.
          extDot: 'first'   // Extensions in filenames begin after the first dot
        },
      ],
    },
  },
});

----------------------------------------

TITLE: Implementing Rename Function for Dynamic File Naming in Grunt
DESCRIPTION: This snippet shows how to use the rename property in Grunt configuration to dynamically modify output filenames during the file copying process.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  copy: {
    production: {
      files: [{
        expand: true,
        cwd: 'dev/',
        src: ['*'],
        dest: 'dist/',
        rename: function (dest, src) {          // The `dest` and `src` values can be passed into the function
          return dest + src.replace('beta',''); // The `src` is being renamed; the `dest` remains the same
        }
      }]
    }
  }
});

----------------------------------------

TITLE: Using Templates and External Data in Grunt Configuration
DESCRIPTION: This example demonstrates how to use templates and import external data (from package.json) in Grunt configuration for dynamic task setup, particularly for the uglify task.

LANGUAGE: javascript
CODE:
grunt.initConfig({
  pkg: grunt.file.readJSON('package.json'),
  uglify: {
    options: {
      banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
    },
    dist: {
      src: 'src/<%= pkg.name %>.js',
      dest: 'dist/<%= pkg.name %>.min.js'
    }
  }
});

----------------------------------------

TITLE: Syntax Standards for JavaScript in Grunt Projects
DESCRIPTION: Code style guidelines for JavaScript contributions to Grunt projects, including indentation, string delimiters, whitespace, and commenting standards.

LANGUAGE: javascript
CODE:
// Use single quotes for strings
var example = 'string';

// One assignment per var statement
var foo = 1;
var bar = 2;

// Proper indentation with two spaces
if (condition) {
  doSomething();
} else {
  doSomethingElse();
}

// Comments before code, not after
// This is a good comment
function doSomething() {
  // Use \t for tab characters in strings
  var str = '\tindented';
}

----------------------------------------

TITLE: Markdown Table of Team Members
DESCRIPTION: A markdown table listing Grunt team members with their profile pictures and social media links, including GitHub, Twitter and personal websites.

LANGUAGE: markdown
CODE:
| | | |
| ------------- | ----------- |
| ![](https://avatars0.githubusercontent.com/u/54051?s=100)     | **Ben Alman**             | [GitHub](https://github.com/cowboy), [Twitter](https://twitter.com/cowboy), [Website](http://benalman.com/)  |
| ![](https://avatars3.githubusercontent.com/u/1004324?s=100)   | **Tyler Kellen**          | [GitHub](https://github.com/tkellen), [Twitter](https://twitter.com/tkellen), [Website](http://goingslowly.com/) |

----------------------------------------

TITLE: Managing Multiple Grunt Plugins Using Shell Commands
DESCRIPTION: Series of shell commands to manage multiple Grunt plugins simultaneously. Includes pulling latest code, reinstalling dependencies, verifying symlinks, running tests, and checking versions. Uses eachdir command to execute operations across multiple grunt-contrib and grunt-lib directories.

LANGUAGE: shell
CODE:
eachdir grunt grunt-{contrib,lib}-* -- 'git pull'
eachdir grunt grunt-{contrib,lib}-* -- 'rm -rf node_modules; linken . --src ..; npm install'

# Make sure symlinks were created, if not there's a version mismatch
eachdir grunt grunt-{contrib,lib}-* -- 'll node_modules | grep grunt'

# Make sure everything passes
eachdir grunt grunt-{contrib,lib}-* -- grunt

# Make sure all versions are final
eachdir grunt grunt-{contrib,lib}-* -- 'git branch; node -pe "require(\"./package.json\").version"'

----------------------------------------

TITLE: Documentation Navigation HTML Structure
DESCRIPTION: HTML markup for the documentation navigation section that organizes Grunt documentation links into two columns - basic documentation and advanced topics.

LANGUAGE: html
CODE:
<div class="row-fluid">
  <div class="span6">
    <h3>Documentation</h3>

    <ul>
      <li><a href="https://gruntjs.com/getting-started">Getting Started</a></li>
      <li><a href="https://gruntjs.com/configuring-tasks">Configuring Tasks</a></li>
      <li><a href="https://gruntjs.com/sample-gruntfile">Sample Gruntfile</a></li>
      <li><a href="https://gruntjs.com/creating-tasks">Creating Tasks</a></li>
      <li><a href="https://gruntjs.com/creating-plugins">Creating Plugins</a></li>
      <li><a href="https://gruntjs.com/using-the-cli">Using the CLI</a></li>
    </ul>
  </div>
  <div class="span6">
    <h3>Advanced</h3>

    <ul>
      <li><a href="https://gruntjs.com/api">API</a></li>
      <li><a href="https://gruntjs.com/installing-grunt">Installing Grunt</a></li>
      <li><a href="https://gruntjs.com/frequently-asked-questions">Frequently Asked Questions</a></li>
      <li><a href="https://gruntjs.com/project-scaffolding">Project Scaffolding</a></li>
    </ul>
  </div>
</div>

----------------------------------------

TITLE: Implementing Grunt Badge in Markdown
DESCRIPTION: Code snippet for adding the official 'Built with Grunt' badge to project README files using Markdown syntax.

LANGUAGE: markdown
CODE:
[![Built with Grunt](https://cdn.gruntjs.com/builtwith.svg)](https://gruntjs.com/)

----------------------------------------

TITLE: Implementing Grunt Badge in HTML
DESCRIPTION: HTML implementation of the 'Built with Grunt' badge for project websites and documentation.

LANGUAGE: html
CODE:
<a href="https://gruntjs.com/">
  <img src="https://cdn.gruntjs.com/builtwith.svg" alt="Built with Grunt">
</a>

----------------------------------------

TITLE: Adding Grunt Badge in Markdown
DESCRIPTION: Markdown code snippet for adding the 'Built with Grunt' badge to a project README or documentation. Links to gruntjs.com and displays the badge image.

LANGUAGE: markdown
CODE:
[![Built with Grunt](https://gruntjs.com/builtwith.svg)](https://gruntjs.com/)

----------------------------------------

TITLE: Adding Grunt Badge in HTML
DESCRIPTION: HTML version of the 'Built with Grunt' badge implementation, suitable for web pages. Creates a linked image with appropriate alt text.

LANGUAGE: html
CODE:
<a href="https://gruntjs.com/">
  <img src="https://gruntjs.com/builtwith.svg" alt="Built with Grunt">
</a>

----------------------------------------

TITLE: Displaying Grunt Help
DESCRIPTION: Command to display Grunt's help text and available options.

LANGUAGE: bash
CODE:
grunt -h

----------------------------------------

TITLE: Installing Specific Grunt Version with npm
DESCRIPTION: Command to install a specific version of Grunt and add it to package.json devDependencies. Replace VERSION with the desired version number.

LANGUAGE: bash
CODE:
npm install grunt@VERSION --save-dev

----------------------------------------

TITLE: Uninstalling global Grunt 0.3
DESCRIPTION: Command to uninstall the global Grunt 0.3 version before upgrading to 0.4.

LANGUAGE: shell
CODE:
npm uninstall -g grunt

----------------------------------------

TITLE: Registering alias tasks in Grunt 0.4
DESCRIPTION: Example showing how to register alias tasks in Grunt 0.4 using an array format, compared to the old string format in 0.3.

LANGUAGE: javascript
CODE:
// v0.3.x (old format)
grunt.registerTask("default", "jshint nodeunit concat");
// v0.4.x (new format)
grunt.registerTask("default", ["jshint", "nodeunit", "concat"]);

----------------------------------------

TITLE: Specifying Grunt 0.4 Release Candidate Dependency in JSON
DESCRIPTION: This snippet shows how to specify the Grunt 0.4 release candidate as a devDependency in a project's package.json file. It's intended for developers who want to test their plugins against the pre-release version of Grunt 0.4.

LANGUAGE: json
CODE:
"devDependencies": {
  "grunt": "0.4.0rc8"
}

----------------------------------------

TITLE: Specifying Grunt 0.4 Stable Dependency in JSON
DESCRIPTION: This snippet demonstrates how to specify the stable Grunt 0.4 version as a dependency in a project's package.json file. It's meant for use after the official release of Grunt 0.4 when publishing plugins.

LANGUAGE: json
CODE:
"dependencies": {
  "grunt": "~0.4.0"
}

----------------------------------------

TITLE: Updating Grunt Version in package.json
DESCRIPTION: Example showing how to specify Grunt version 0.4.1 in package.json dependencies for Node.js v0.10.0 compatibility.

LANGUAGE: json
CODE:
"~0.4.1"

----------------------------------------

TITLE: Migrating from grunt.util._ to Lo-Dash in JavaScript
DESCRIPTION: This snippet demonstrates how to replace the deprecated grunt.util._ with Lo-Dash. It shows the old way of using Grunt's utility functions and the new way of requiring and using Lo-Dash as an external dependency.

LANGUAGE: JavaScript
CODE:
// Then change this code:
var newArr = grunt.util._.map(arr, fn);

// To this:
var _ = require('lodash');
var newArr = _.map(arr, fn);

----------------------------------------

TITLE: Configuring NPM Scripts for Grunt Integration
DESCRIPTION: Example package.json configuration showing how to integrate Grunt commands into npm scripts for easier project execution without global installation.

LANGUAGE: json
CODE:
{
  "scripts": {
    "grunt": "grunt"
  }
}

----------------------------------------

TITLE: Installing Grunt 1.0.0 via npm
DESCRIPTION: Command to install Grunt 1.0.0 as a dev dependency in a project using npm.

LANGUAGE: bash
CODE:
npm install grunt@1.0.0 --save-dev

----------------------------------------

TITLE: Installing Grunt CLI 1.3.0 globally using npm
DESCRIPTION: Command to install the latest version of Grunt CLI globally using npm package manager.

LANGUAGE: bash
CODE:
npm install grunt-cli -g

----------------------------------------

TITLE: Running Grunt with a custom interpreter
DESCRIPTION: Command to run Grunt with a custom module for interpreting the Gruntfile, using the --require option.

LANGUAGE: bash
CODE:
grunt --require myscript/register