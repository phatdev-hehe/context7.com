TITLE: Configuring Colyseus with WebSocket Transport using Existing HTTP Server and Express in TypeScript
DESCRIPTION: This snippet demonstrates how to set up a Colyseus server with WebSocket transport while reusing an existing HTTP server and Express application. It imports required modules, creates an Express app and HTTP server, and then configures the Colyseus server with WebSocketTransport.

LANGUAGE: typescript
CODE:
import http from "http";
import express from "express";
import { Server } from "@colyseus/core";
import { WebSocketTransport } from "@colyseus/ws-transport";

const app = express();
const server = http.createServer(app);

const gameServer = new Server({
  transport: new WebSocketTransport({ server }),
  // ...
})

----------------------------------------

TITLE: Initializing Colyseus Server with WebSocket Transport in TypeScript
DESCRIPTION: This snippet shows how to create a new Colyseus server instance with WebSocket transport. It imports necessary modules and configures the server with WebSocketTransport.

LANGUAGE: typescript
CODE:
import { Server } from "@colyseus/core";
import { WebSocketTransport } from "@colyseus/ws-transport";

const gameServer = new Server({
  transport: new WebSocketTransport(),
  // ...
})

----------------------------------------

TITLE: Installing Colyseus Server Application
DESCRIPTION: Command line instructions for creating a new Colyseus server application using the npm create command. Creates a basic server setup with necessary dependencies.

LANGUAGE: bash
CODE:
npm create colyseus-app@latest my-colyseus-server
cd my-colyseus-server
npm start