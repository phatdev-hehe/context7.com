TITLE: Configuring OpenTelemetrySdk in Java
DESCRIPTION: Creates and configures an OpenTelemetrySdk instance with tracer provider, meter provider, logger provider, and context propagators.

LANGUAGE: Java
CODE:
public static OpenTelemetrySdk create() {
  Resource resource = ResourceConfig.create();
  return OpenTelemetrySdk.builder()
      .setTracerProvider(SdkTracerProviderConfig.create(resource))
      .setMeterProvider(SdkMeterProviderConfig.create(resource))
      .setLoggerProvider(SdkLoggerProviderConfig.create(resource))
      .setPropagators(ContextPropagatorsConfig.create())
      .build();
}

----------------------------------------

TITLE: Java Context Extraction Example
DESCRIPTION: Shows how to extract context from incoming requests and create server spans with proper parent context and error handling.

LANGUAGE: java
CODE:
Context extractedContext = propagator.extract(Context.current(), httpExchange, getter);
Span span = tracer.spanBuilder("receive")
            .setSpanKind(SpanKind.SERVER)
            .setParent(extractedContext)
            .startSpan();

try (Scope unused = span.makeCurrent()) {
  userCode();
} catch (Exception e) {
  span.recordException(e);
  span.setStatus(StatusCode.ERROR);
  throw e;
} finally {
  span.end();
}

----------------------------------------

TITLE: Setting Up OpenTelemetry Java Agent
DESCRIPTION: Shell commands for downloading and configuring the OpenTelemetry Java agent with console exporters for traces, metrics, and logs.

LANGUAGE: sh
CODE:
export JAVA_TOOL_OPTIONS="-javaagent:PATH/TO/opentelemetry-javaagent.jar" \
  OTEL_TRACES_EXPORTER=logging \
  OTEL_METRICS_EXPORTER=logging \
  OTEL_LOGS_EXPORTER=logging \
  OTEL_METRIC_EXPORT_INTERVAL=15000

----------------------------------------

TITLE: Automatic Resource Detection in OpenTelemetry Go
DESCRIPTION: This snippet demonstrates how to use various resource detectors to automatically discover and create a Resource with attributes from the environment, SDK, process, OS, container, and host. It also shows how to add custom attributes and handle potential errors.

LANGUAGE: go
CODE:
res, err := resource.New(
	context.Background(),
	resource.WithFromEnv(),      // Discover and provide attributes from OTEL_RESOURCE_ATTRIBUTES and OTEL_SERVICE_NAME environment variables.
	resource.WithTelemetrySDK(), // Discover and provide information about the OpenTelemetry SDK used.
	resource.WithProcess(),      // Discover and provide process information.
	resource.WithOS(),           // Discover and provide OS information.
	resource.WithContainer(),    // Discover and provide container information.
	resource.WithHost(),         // Discover and provide host information.
	resource.WithAttributes(attribute.String("foo", "bar")), // Add custom resource attributes.
	// resource.WithDetectors(thirdparty.Detector{}), // Bring your own external Detector implementation.
)
if errors.Is(err, resource.ErrPartialResource) || errors.Is(err, resource.ErrSchemaURLConflict) {
	log.Println(err) // Log non-fatal issues.
} else if err != nil {
	log.Fatalln(err) // The error may be fatal.
}

----------------------------------------

TITLE: Initializing OpenTelemetry SDK for Node.js
DESCRIPTION: Sets up the OpenTelemetry SDK for a Node.js application, configuring trace and metric exporters.

LANGUAGE: typescript
CODE:
import { NodeSDK } from '@opentelemetry/sdk-node';
import { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';
import {
  PeriodicExportingMetricReader,
  ConsoleMetricExporter,
} from '@opentelemetry/sdk-metrics';
import { Resource } from '@opentelemetry/resources';
import {
  ATTR_SERVICE_NAME,
  ATTR_SERVICE_VERSION,
} from '@opentelemetry/semantic-conventions';

const sdk = new NodeSDK({
  resource: new Resource({
    [ATTR_SERVICE_NAME]: 'yourServiceName',
    [ATTR_SERVICE_VERSION]: '1.0',
  }),
  traceExporter: new ConsoleSpanExporter(),
  metricReader: new PeriodicExportingMetricReader({
    exporter: new ConsoleMetricExporter(),
  }),
});

sdk.start();

----------------------------------------

TITLE: Acquiring a Tracer in OpenTelemetry JavaScript
DESCRIPTION: Shows how to acquire a tracer for creating spans in an OpenTelemetry instrumented application.

LANGUAGE: typescript
CODE:
import opentelemetry from '@opentelemetry/api';
//...

const tracer = opentelemetry.trace.getTracer(
  'instrumentation-scope-name',
  'instrumentation-scope-version',
);

// You can now use a 'tracer' to do tracing!

----------------------------------------

TITLE: Implementing OpenTelemetry Instrumentation
DESCRIPTION: Configuration of OpenTelemetry with traces, metrics, and logs using the Console exporter. Sets up resource attributes and adds ASP.NET Core instrumentation.

LANGUAGE: csharp
CODE:
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

var builder = WebApplication.CreateBuilder(args);

const string serviceName = "roll-dice";

builder.Logging.AddOpenTelemetry(options =>
{
    options
        .SetResourceBuilder(
            ResourceBuilder.CreateDefault()
                .AddService(serviceName))
        .AddConsoleExporter();
});
builder.Services.AddOpenTelemetry()
      .ConfigureResource(resource => resource.AddService(serviceName))
      .WithTracing(tracing => tracing
          .AddAspNetCoreInstrumentation()
          .AddConsoleExporter())
      .WithMetrics(metrics => metrics
          .AddAspNetCoreInstrumentation()
          .AddConsoleExporter());

var app = builder.Build();

----------------------------------------

TITLE: Initializing Autoconfigured OpenTelemetry SDK
DESCRIPTION: This code snippet demonstrates how to initialize the OpenTelemetry SDK using the autoconfigure module, which configures SDK components with zero code.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;

public class AutoConfiguredSdk {
  public static OpenTelemetrySdk autoconfiguredSdk() {
    return AutoConfiguredOpenTelemetrySdk.initialize().getOpenTelemetrySdk();
  }
}

----------------------------------------

TITLE: Configuring Resource Attributes
DESCRIPTION: Setting key-value pairs as resource attributes in OpenTelemetry using environment variables.

LANGUAGE: shell
CODE:
export OTEL_RESOURCE_ATTRIBUTES="key1=value1,key2=value2"

----------------------------------------

TITLE: Creating Spans in Python with OpenTelemetry
DESCRIPTION: Demonstrate how to create spans using the start_as_current_span context manager.

LANGUAGE: python
CODE:
def do_work():
    with tracer.start_as_current_span("span-name") as span:
        # do some work that 'span' will track
        print("doing some work...")
        # When the 'with' block goes out of scope, 'span' is closed for you

----------------------------------------

TITLE: Configuring Gradle Build for Spring Boot Application
DESCRIPTION: Gradle build configuration file that sets up a Spring Boot project with web dependencies. Configures Java source directories and Maven Central repository.

LANGUAGE: kotlin
CODE:
plugins {
  id("java")
  id("org.springframework.boot") version "3.0.6"
  id("io.spring.dependency-management") version "1.1.0"
}

sourceSets {
  main {
    java.setSrcDirs(setOf("."))
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation("org.springframework.boot:spring-boot-starter-web")
}

----------------------------------------

TITLE: Configuring ASP.NET Core with OpenTelemetry Instrumentation
DESCRIPTION: C# code example showing how to configure OpenTelemetry instrumentation in an ASP.NET Core application with HTTP client and ASP.NET Core instrumentation.

LANGUAGE: csharp
CODE:
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;


var builder = WebApplication.CreateBuilder(args);

builder.Services.AddOpenTelemetry()
  .WithTracing(b =>
  {
      b
      .AddHttpClientInstrumentation()
      .AddAspNetCoreInstrumentation();
  });

var app = builder.Build();

var httpClient = new HttpClient();

app.MapGet("/hello", async () =>
{
    var html = await httpClient.GetStringAsync("https://example.com/");
    if (string.IsNullOrWhiteSpace(html))
    {
        return "Hello, World!";
    }
    else
    {
        return "Hello, World!";
    }
});

app.Run();

----------------------------------------

TITLE: Receiving Service: Extracting Context in OpenTelemetry Python
DESCRIPTION: This snippet shows how to extract propagated context from HTTP headers in a Flask application using OpenTelemetry. It sets up a tracer, extracts context and baggage from headers, and creates a new span using the extracted context.

LANGUAGE: python
CODE:
from flask import Flask, request
from opentelemetry import trace, baggage
from opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor
from opentelemetry.baggage.propagation import W3CBaggagePropagator

app = Flask(__name__)

trace.set_tracer_provider(TracerProvider())
trace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))

tracer = trace.get_tracer(__name__)

@app.route('/')
def hello():
    # Example: Log headers received in the request in API 2
    headers = dict(request.headers)
    print(f"Received headers: {headers}")
    carrier ={'traceparent': headers['Traceparent']}
    ctx = TraceContextTextMapPropagator().extract(carrier=carrier)
    print(f"Received context: {ctx}")

    b2 ={'baggage': headers['Baggage']}
    ctx2 = W3CBaggagePropagator().extract(b2, context=ctx)
    print(f"Received context2: {ctx2}")

    # Start a new span
    with tracer.start_span("api2_span", context=ctx2):
       # Use propagated context
        print(baggage.get_baggage('hello', ctx2))
        return "Hello from API 2!"

if __name__ == '__main__':
    app.run(port=5001)

----------------------------------------

TITLE: OpenTelemetry SDK Initialization in ASP.NET Core
DESCRIPTION: Configuration of OpenTelemetry SDK with tracing, metrics and logging for ASP.NET Core application

LANGUAGE: csharp
CODE:
using OpenTelemetry.Logs;
using OpenTelemetry.Metrics;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

var serviceName = "dice-server";
var serviceVersion = "1.0.0";

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddOpenTelemetry()
    .ConfigureResource(resource => resource.AddService(
        serviceName: serviceName,
        serviceVersion: serviceVersion))
    .WithTracing(tracing => tracing
        .AddSource(serviceName)
        .AddAspNetCoreInstrumentation()
        .AddConsoleExporter())
    .WithMetrics(metrics => metrics
        .AddMeter(serviceName)
        .AddConsoleExporter());

builder.Logging.AddOpenTelemetry(options => options
    .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(
        serviceName: serviceName,
        serviceVersion: serviceVersion))
    .AddConsoleExporter());

----------------------------------------

TITLE: Initializing OpenTelemetry SDK in Node.js
DESCRIPTION: Sets up the OpenTelemetry SDK with auto-instrumentation, OTLP exporters, and various resource detectors. Configures trace and metric collection with specified detectors for cloud environments.

LANGUAGE: javascript
CODE:
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-grpc');
const {
  OTLPMetricExporter,
} = require('@opentelemetry/exporter-metrics-otlp-grpc');
const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');
const {
  alibabaCloudEcsDetector,
} = require('@opentelemetry/resource-detector-alibaba-cloud');
const {
  awsEc2Detector,
  awsEksDetector,
} = require('@opentelemetry/resource-detector-aws');
const {
  containerDetector,
} = require('@opentelemetry/resource-detector-container');
const { gcpDetector } = require('@opentelemetry/resource-detector-gcp');
const {
  envDetector,
  hostDetector,
  osDetector,
  processDetector,
} = require('@opentelemetry/resources');

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new OTLPTraceExporter(),
  instrumentations: [
    getNodeAutoInstrumentations({
      // only instrument fs if it is part of another trace
      '@opentelemetry/instrumentation-fs': {
        requireParentSpan: true,
      },
    }),
  ],
  metricReader: new PeriodicExportingMetricReader({
    exporter: new OTLPMetricExporter(),
  }),
  resourceDetectors: [
    containerDetector,
    envDetector,
    hostDetector,
    osDetector,
    processDetector,
    alibabaCloudEcsDetector,
    awsEksDetector,
    awsEc2Detector,
    gcpDetector,
  ],
});

sdk.start();

----------------------------------------

TITLE: Implementing OpenTelemetry Tracing with Annotations in Java
DESCRIPTION: Example class demonstrating various uses of OpenTelemetry annotations including basic tracing, custom span names, span kinds, and attribute capture. Shows how to use @WithSpan and @SpanAttribute annotations.

LANGUAGE: java
CODE:
package otel;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.SpanKind;
import io.opentelemetry.instrumentation.annotations.SpanAttribute;
import io.opentelemetry.instrumentation.annotations.WithSpan;
import org.springframework.stereotype.Component;

/** Test WithSpan */
@Component
public class TracedClass {

  @WithSpan
  public void tracedMethod() {}

  @WithSpan(value = "span name")
  public void tracedMethodWithName() {
    Span currentSpan = Span.current();
    currentSpan.addEvent("ADD EVENT TO tracedMethodWithName SPAN");
    currentSpan.setAttribute("isTestAttribute", true);
  }

  @WithSpan(kind = SpanKind.CLIENT)
  public void tracedClientSpan() {}

  public void tracedMethodWithAttribute(@SpanAttribute("attributeName") String parameter) {}
}

----------------------------------------

TITLE: OpenTelemetry SDK Builder Configuration
DESCRIPTION: Shows how to use the SDK builder pattern to configure TracerProvider, MeterProvider, and LoggerProvider with various processors and exporters. Demonstrates the builder pattern for more structured SDK setup.

LANGUAGE: php
CODE:
<?php

$spanExporter = new InMemoryExporter(); //mock exporter for demonstration purposes

$meterProvider = MeterProvider::builder()
    ->addReader(
        new ExportingReader(new MetricExporter((new StreamTransportFactory())->create(STDOUT, 'application/x-ndjson'), /*Temporality::CUMULATIVE*/))
    )
    ->build();

$tracerProvider = TracerProvider::builder()
    ->addSpanProcessor(
        (new BatchSpanProcessorBuilder($spanExporter))
            ->setMeterProvider($meterProvider)
            ->build()
    )
    ->build();

$loggerProvider = LoggerProvider::builder()
    ->addLogRecordProcessor(
        new SimpleLogsProcessor(
            (new ConsoleExporterFactory())->create()
        )
    )
    ->setResource(ResourceInfo::create(Attributes::create(['foo' => 'bar'])))
    ->build();

Sdk::builder()
    ->setTracerProvider($tracerProvider)
    ->setLoggerProvider($loggerProvider)
    ->setMeterProvider($meterProvider)
    ->setPropagator(TraceContextPropagator::getInstance())
    ->setAutoShutdown(true)
    ->buildAndRegisterGlobal();

----------------------------------------

TITLE: Basic Pipeline Configuration in YAML
DESCRIPTION: Demonstrates the configuration of a basic telemetry pipeline including receivers, processors and exporters.

LANGUAGE: yaml
CODE:
service:
  pipelines: # section that can contain multiple subsections, one per pipeline
    traces: # type of the pipeline
      receivers: [otlp, zipkin]
      processors: [memory_limiter, batch]
      exporters: [otlp, zipkin]

----------------------------------------

TITLE: Basic Flask Application Setup
DESCRIPTION: Initial Flask application code implementing a simple dice rolling endpoint with logging

LANGUAGE: python
CODE:
from random import randint
from flask import Flask, request
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@app.route("/rolldice")
def roll_dice():
    player = request.args.get('player', default=None, type=str)
    result = str(roll())
    if player:
        logger.warning("%s is rolling the dice: %s", player, result)
    else:
        logger.warning("Anonymous player is rolling the dice: %s", result)
    return result


def roll():
    return randint(1, 6)

----------------------------------------

TITLE: Creating Active Spans in OpenTelemetry JavaScript
DESCRIPTION: Demonstrates how to create active spans for tracing function execution in OpenTelemetry.

LANGUAGE: typescript
CODE:
import { trace, Span } from '@opentelemetry/api';

/* ... */

export function rollTheDice(rolls: number, min: number, max: number) {
  // Create a span. A span must be closed.
  return tracer.startActiveSpan('rollTheDice', (span: Span) => {
    const result: number[] = [];
    for (let i = 0; i < rolls; i++) {
      result.push(rollOnce(min, max));
    }
    // Be sure to end the span!
    span.end();
    return result;
  });
}

----------------------------------------

TITLE: Configuring OTLP Authentication in Java
DESCRIPTION: Demonstrates configuration of static and dynamic header-based authentication for OTLP exporters.

LANGUAGE: Java
CODE:
public static void staticAuthenticationHeader(String endpoint) {
  String apiKeyHeaderName = "api-key";
  String apiKeyHeaderValue = System.getenv("OTLP_API_KEY");

  OtlpHttpSpanExporter spanExporter =
      OtlpHttpSpanExporter.builder()
          .setEndpoint(endpoint)
          .addHeader(apiKeyHeaderName, apiKeyHeaderValue)
          .build();
  OtlpHttpMetricExporter metricExporter =
      OtlpHttpMetricExporter.builder()
          .setEndpoint(endpoint)
          .addHeader(apiKeyHeaderName, apiKeyHeaderValue)
          .build();
  OtlpHttpLogRecordExporter logRecordExporter =
      OtlpHttpLogRecordExporter.builder()
          .setEndpoint(endpoint)
          .addHeader(apiKeyHeaderName, apiKeyHeaderValue)
          .build();
}

public static void dynamicAuthenticationHeader(String endpoint) {
  String username = System.getenv("OTLP_USERNAME");
  String password = System.getenv("OTLP_PASSWORD");
  Supplier<Map<String, String>> supplier =
      new AuthHeaderSupplier(() -> refreshToken(username, password), Duration.ofMinutes(10));

  OtlpHttpSpanExporter spanExporter =
      OtlpHttpSpanExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();
  OtlpHttpMetricExporter metricExporter =
      OtlpHttpMetricExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();
  OtlpHttpLogRecordExporter logRecordExporter =
      OtlpHttpLogRecordExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();
}

----------------------------------------

TITLE: Span API Usage in Java
DESCRIPTION: Example showing how to use OpenTelemetry Span API for creating and managing spans in a trace

LANGUAGE: java
CODE:
public static void spanUsage(Tracer tracer) {
    // Get a span builder by providing the span name
    Span span =
        tracer
            .spanBuilder("span name")
            // Set span kind
            .setSpanKind(SpanKind.INTERNAL)
            // Set attributes
            .setAttribute(AttributeKey.stringKey("com.acme.string-key"), "value")
            .setAttribute(AttributeKey.booleanKey("com.acme.bool-key"), true)
            .setAttribute(AttributeKey.longKey("com.acme.long-key"), 1L)
            .setAttribute(AttributeKey.doubleKey("com.acme.double-key"), 1.1)
            .startSpan();

    // Check if span is recording before computing additional data
    if (span.isRecording()) {
      // Update the span name
      span.updateName("new span name");
      
      // Add events
      span.addEvent("my-event");
      span.addEvent("my-event", WIDGET_RED_CIRCLE);
      
      // Record exception
      span.recordException(new RuntimeException("error"));
      
      // Set status
      span.setStatus(StatusCode.OK, "status description");
    }

    // End the span
    span.end();
}

----------------------------------------

TITLE: Creating Custom Spans with Attributes
DESCRIPTION: Demonstrates creating new OpenTelemetry spans with custom attributes, links, and span kind specifications for HTTP requests.

LANGUAGE: typescript
CODE:
span = tracer.startSpan(`HTTP ${method}`, {
  root: true,
  kind: SpanKind.SERVER,
  links: [{ context: syntheticSpan.spanContext() }],
  attributes: {
    'app.synthetic_request': true,
    [SEMATTRS_HTTP_TARGET]: target,
    [SEMATTRS_HTTP_STATUS_CODE]: response.statusCode,
    [SEMATTRS_HTTP_METHOD]: method,
    [SEMATTRS_HTTP_USER_AGENT]: headers['user-agent'] || '',
    [SEMATTRS_HTTP_URL]: `${headers.host}${url}`,
    [SEMATTRS_HTTP_FLAVOR]: httpVersion,
  },
});

----------------------------------------

TITLE: Configuring SdkTracerProvider in Java
DESCRIPTION: Creates and configures an SdkTracerProvider with resource, span processor, sampler, and span limits.

LANGUAGE: Java
CODE:
public static SdkTracerProvider create(Resource resource) {
  return SdkTracerProvider.builder()
      .setResource(resource)
      .addSpanProcessor(
          SpanProcessorConfig.batchSpanProcessor(
              SpanExporterConfig.otlpHttpSpanExporter("http://localhost:4318/v1/spans")))
      .setSampler(SamplerConfig.parentBasedSampler(SamplerConfig.traceIdRatioBased(.25)))
      .setSpanLimits(SpanLimitsConfig::spanLimits)
      .build();
}

----------------------------------------

TITLE: Sending Service: Injecting Context in OpenTelemetry Python
DESCRIPTION: This snippet demonstrates how to inject the current context into HTTP headers for propagation in a Flask application using OpenTelemetry. It sets up a tracer, creates a span, sets baggage, and injects context into headers for a subsequent HTTP request.

LANGUAGE: python
CODE:
from flask import Flask
import requests
from opentelemetry import trace, baggage
from opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator
from opentelemetry.baggage.propagation import W3CBaggagePropagator
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor

app = Flask(__name__)

trace.set_tracer_provider(TracerProvider())
trace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))

tracer = trace.get_tracer(__name__)

@app.route('/')
def hello():
    with tracer.start_as_current_span("api1_span") as span:
        ctx = baggage.set_baggage("hello", "world")

        headers = {}
        W3CBaggagePropagator().inject(headers, ctx)
        TraceContextTextMapPropagator().inject(headers, ctx)
        print(headers)

        response = requests.get('http://127.0.0.1:5001/', headers=headers)
        return f"Hello from API 1! Response from API 2: {response.text}"

if __name__ == '__main__':
    app.run(port=5002)

----------------------------------------

TITLE: Customizing Autoconfigured OpenTelemetry SDK
DESCRIPTION: This code snippet shows how to customize various components of the autoconfigured OpenTelemetry SDK using programmatic customization hooks.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;
import java.util.Collections;

public class CustomizedAutoConfiguredSdk {
  public static OpenTelemetrySdk autoconfiguredSdk() {
    return AutoConfiguredOpenTelemetrySdk.builder()
        // Optionally customize TextMapPropagator.
        .addPropagatorCustomizer((textMapPropagator, configProperties) -> textMapPropagator)
        // Optionally customize Resource.
        .addResourceCustomizer((resource, configProperties) -> resource)
        // Optionally customize Sampler.
        .addSamplerCustomizer((sampler, configProperties) -> sampler)
        // Optionally customize SpanExporter.
        .addSpanExporterCustomizer((spanExporter, configProperties) -> spanExporter)
        // Optionally customize SpanProcessor.
        .addSpanProcessorCustomizer((spanProcessor, configProperties) -> spanProcessor)
        // Optionally supply additional properties.
        .addPropertiesSupplier(Collections::emptyMap)
        // Optionally customize ConfigProperties.
        .addPropertiesCustomizer(configProperties -> Collections.emptyMap())
        // Optionally customize SdkTracerProviderBuilder.
        .addTracerProviderCustomizer((builder, configProperties) -> builder)
        // Optionally customize SdkMeterProviderBuilder.
        .addMeterProviderCustomizer((builder, configProperties) -> builder)
        // Optionally customize MetricExporter.
        .addMetricExporterCustomizer((metricExporter, configProperties) -> metricExporter)
        // Optionally customize MetricReader.
        .addMetricReaderCustomizer((metricReader, configProperties) -> metricReader)
        // Optionally customize SdkLoggerProviderBuilder.
        .addLoggerProviderCustomizer((builder, configProperties) -> builder)
        // Optionally customize LogRecordExporter.
        .addLogRecordExporterCustomizer((logRecordExporter, configProperties) -> logRecordExporter)
        // Optionally customize LogRecordProcessor.
        .addLogRecordProcessorCustomizer((processor, configProperties) -> processor)
        .build()
        .getOpenTelemetrySdk();
  }
}

----------------------------------------

TITLE: Adding Links Between Spans in Python with OpenTelemetry
DESCRIPTION: Demonstrate how to create links between spans to establish causal relationships.

LANGUAGE: python
CODE:
from opentelemetry import trace

tracer = trace.get_tracer(__name__)

with tracer.start_as_current_span("span-1"):
    # Do something that 'span-1' tracks.
    ctx = trace.get_current_span().get_span_context()
    link_from_span_1 = trace.Link(ctx)

with tracer.start_as_current_span("span-2", links=[link_from_span_1]):
    # Do something that 'span-2' tracks.
    # The link in 'span-2' is causally associated it with the 'span-1',
    # but it is not a child span.
    pass

----------------------------------------

TITLE: Initializing OpenTelemetry Tracing in .NET
DESCRIPTION: Configures OpenTelemetry tracing with Redis, ASP.NET Core, gRPC, and HTTP client instrumentation using the .NET dependency injection container.

LANGUAGE: csharp
CODE:
Action<ResourceBuilder> appResourceBuilder =
    resource => resource
        .AddContainerDetector()
        .AddHostDetector();

builder.Services.AddOpenTelemetry()
    .ConfigureResource(appResourceBuilder)
    .WithTracing(tracerBuilder => tracerBuilder
        .AddSource("OpenTelemetry.Demo.Cart")
        .AddRedisInstrumentation(
            options => options.SetVerboseDatabaseStatements = true)
        .AddAspNetCoreInstrumentation()
        .AddGrpcClientInstrumentation()
        .AddHttpClientInstrumentation()
        .AddOtlpExporter());

----------------------------------------

TITLE: Creating Metrics in OpenTelemetry C++
DESCRIPTION: This snippet shows how to create different types of metrics including a counter, histogram, and observable counter. It demonstrates how to record measurements and add callbacks for observable counters.

LANGUAGE: cpp
CODE:
auto meter = provider->GetMeter(name, "1.2.0");
auto double_counter = meter->CreateDoubleCounter(counter_name);
std::map<std::string, std::string> labels = {{"key", "value"}};
auto labelkv = common::KeyValueIterableView<decltype(labels)>{labels};
double_counter->Add(val, labelkv);

auto histogram_counter = meter->CreateDoubleHistogram("histogram_name");
histogram_counter->Record(val, labelkv);

auto counter = meter->CreateDoubleObservableCounter(counter_name);
counter->AddCallback(MeasurementFetcher::Fetcher, nullptr);

----------------------------------------

TITLE: Injecting OpenTelemetry Meter in Spring Controller (Java)
DESCRIPTION: This code shows how to inject OpenTelemetry into a Spring Controller and obtain a Meter instance. The Meter can be used to create custom metrics such as counters, gauges, or histograms.

LANGUAGE: java
CODE:
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.metrics.Meter;

@Controller
public class MyController {
  private final Meter meter;

  public MyController(OpenTelemetry openTelemetry) {
    this.meter = openTelemetry.getMeter("application");
  }
}

----------------------------------------

TITLE: Java Basic Tracer Setup and Span Creation
DESCRIPTION: Demonstrates how to initialize a tracer, create spans, and handle errors in a database client implementation. Shows proper span attribute setting and error handling patterns.

LANGUAGE: java
CODE:
private static Tracer tracer =  getTracer(TracerProvider.noop());

public static void setTracerProvider(TracerProvider tracerProvider) {
    tracer = getTracer(tracerProvider);
}

private static Tracer getTracer(TracerProvider tracerProvider) {
    return tracerProvider.getTracer("demo-db-client", "0.1.0-beta1");
}

private Response selectWithTracing(Query query) {
    Span span = tracer.spanBuilder(String.format("SELECT %s.%s", dbName, collectionName))
            .setSpanKind(SpanKind.CLIENT)
            .setAttribute("db.name", dbName)
            ...
            .startSpan();

    try (Scope unused = span.makeCurrent()) {
        Response response = query.runWithRetries();
        if (response.isSuccessful()) {
            span.setStatus(StatusCode.OK);
        }

        if (span.isRecording()) {
           // populate response attributes for response codes and other information
        }
    } catch (Exception e) {
        span.recordException(e);
        span.setStatus(StatusCode.ERROR, e.getClass().getSimpleName());
        throw e;
    } finally {
        span.end();
    }
}

----------------------------------------

TITLE: Creating and Assigning Resources in OpenTelemetry Go
DESCRIPTION: This snippet shows how to create a Resource with attributes using semantic conventions and assign it to a TracerProvider. It uses the 'resource' and 'sdktrace' packages from OpenTelemetry.

LANGUAGE: go
CODE:
res := resource.NewWithAttributes(
    semconv.SchemaURL,
    semconv.ServiceNameKey.String("myService"),
    semconv.ServiceVersionKey.String("1.0.0"),
    semconv.ServiceInstanceIDKey.String("abcdef12345"),
)

provider := sdktrace.NewTracerProvider(
    ...
    sdktrace.WithResource(res),
)

----------------------------------------

TITLE: Basic Collector Configuration
DESCRIPTION: Example of a basic OpenTelemetry Collector configuration with OTLP receiver, batch processor, and OTLP exporter.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
processors:
  batch:

exporters:
  otlp:
    endpoint: otelcol:4317

extensions:
  health_check:
  pprof:
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]

----------------------------------------

TITLE: Configuring NGINX as Load Balancer for OpenTelemetry Collectors
DESCRIPTION: This NGINX configuration sets up load balancing for three OpenTelemetry collectors, handling both gRPC (port 4317) and HTTP (port 4318) traffic.

LANGUAGE: nginx
CODE:
server {
    listen 4317 http2;
    server_name _;

    location / {
            grpc_pass      grpc://collector4317;
            grpc_next_upstream     error timeout invalid_header http_500;
            grpc_connect_timeout   2;
            grpc_set_header        Host            $host;
            grpc_set_header        X-Real-IP       $remote_addr;
            grpc_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

server {
    listen 4318;
    server_name _;

    location / {
            proxy_pass      http://collector4318;
            proxy_redirect  off;
            proxy_next_upstream     error timeout invalid_header http_500;
            proxy_connect_timeout   2;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

upstream collector4317 {
    server collector1:4317;
    server collector2:4317;
    server collector3:4317;
}

upstream collector4318 {
    server collector1:4318;
    server collector2:4318;
    server collector3:4318;
}

----------------------------------------

TITLE: Initializing Tracing in OpenTelemetry C++
DESCRIPTION: This snippet shows how to initialize tracing by acquiring a TracerProvider and creating a Tracer. The TracerProvider is typically provided by the OpenTelemetry C++ SDK, while the Tracer is used to create and start spans.

LANGUAGE: cpp
CODE:
auto provider = opentelemetry::trace::Provider::GetTracerProvider();
auto tracer = provider->GetTracer("foo_library", "1.0.0");

----------------------------------------

TITLE: Implementing OpenTelemetry Client in TypeScript
DESCRIPTION: TypeScript code for creating an OpenTelemetry-instrumented client application that makes a request to a server endpoint.

LANGUAGE: typescript
CODE:
import { NodeSDK } from '@opentelemetry/sdk-node';
import {
  SimpleSpanProcessor,
  ConsoleSpanExporter,
} from '@opentelemetry/sdk-trace-node';
import { UndiciInstrumentation } from '@opentelemetry/instrumentation-undici';

const sdk = new NodeSDK({
  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],
  instrumentations: [new UndiciInstrumentation()],
});
sdk.start();

import { request } from 'undici';

request('http://localhost:8080/rolldice').then((response) => {
  response.body.json().then((json: any) => console.log(json));
});

----------------------------------------

TITLE: Creating and Using Counters in OpenTelemetry JavaScript
DESCRIPTION: Demonstrates how to create and use counter instruments for metrics in OpenTelemetry.

LANGUAGE: typescript
CODE:
/*dice.ts*/
const counter = meter.createCounter('dice-lib.rolls.counter');

function rollOnce(min: number, max: number) {
  counter.add(1);
  return Math.floor(Math.random() * (max - min + 1) + min);
}

----------------------------------------

TITLE: Visualizing Microservices Architecture with Mermaid
DESCRIPTION: Mermaid diagram showing the interconnections between various microservices including their programming languages and communication protocols (gRPC/HTTP). Services include frontend, checkout, payment processing, and supporting infrastructure.

LANGUAGE: mermaid
CODE:
graph TD
subgraph Service Diagram
accounting(Accounting):::dotnet
ad(Ad):::java
cache[(Cache<br/>&#40Valkey&#41)]
cart(Cart):::dotnet
checkout(Checkout):::golang
currency(Currency):::cpp
email(Email):::ruby
flagd(Flagd):::golang
flagd-ui(Flagd-ui):::typescript
fraud-detection(Fraud Detection):::kotlin
frontend(Frontend):::typescript
frontend-proxy(Frontend Proxy <br/>&#40Envoy&#41):::cpp
image-provider(Image Provider <br/>&#40nginx&#41):::cpp
load-generator([Load Generator]):::python
payment(Payment):::javascript
product-catalog(Product Catalog):::golang
quote(Quote):::php
recommendation(Recommendation):::python
shipping(Shipping):::rust
queue[(queue<br/>&#40Kafka&#41)]:::java
react-native-app(React Native App):::typescript

ad ---->|gRPC| flagd

checkout -->|gRPC| cart
checkout --->|TCP| queue
cart --> cache
cart -->|gRPC| flagd

checkout -->|gRPC| shipping
checkout -->|gRPC| payment
checkout --->|HTTP| email
checkout -->|gRPC| currency
checkout -->|gRPC| product-catalog

fraud-detection -->|gRPC| flagd

frontend -->|gRPC| ad
frontend -->|gRPC| cart
frontend -->|gRPC| checkout
frontend ---->|gRPC| currency
frontend ---->|gRPC| recommendation
frontend -->|gRPC| product-catalog

frontend-proxy -->|gRPC| flagd
frontend-proxy -->|HTTP| frontend
frontend-proxy -->|HTTP| flagd-ui
frontend-proxy -->|HTTP| image-provider

Internet -->|HTTP| frontend-proxy

load-generator -->|HTTP| frontend-proxy

payment -->|gRPC| flagd

queue -->|TCP| accounting
queue -->|TCP| fraud-detection

recommendation -->|gRPC| product-catalog
recommendation -->|gRPC| flagd

shipping -->|HTTP| quote

react-native-app -->|HTTP| frontend-proxy
end

----------------------------------------

TITLE: Configuring Exporters
DESCRIPTION: Example configuration showing various exporters for sending data to different backends.

LANGUAGE: yaml
CODE:
exporters:
  file:
    path: ./filename.json

  otlp/jaeger:
    endpoint: jaeger-server:4317
    tls:
      cert_file: cert.pem
      key_file: cert-key.pem

  kafka:
    protocol_version: 2.0.0

  debug:
    verbosity: detailed

  opencensus:
    endpoint: otelcol2:55678

  otlp:
    endpoint: otelcol2:4317
    tls:
      cert_file: cert.pem
      key_file: cert-key.pem

  otlphttp:
    endpoint: https://otlp.example.com:4318

  prometheus:
    endpoint: 0.0.0.0:8889
    namespace: default

  prometheusremotewrite:
    endpoint: http://prometheus.example.com:9411/api/prom/push

  zipkin:
    endpoint: http://zipkin.example.com:9411/api/v2/spans

----------------------------------------

TITLE: Python Script for OpenTelemetry Logs and Tracing
DESCRIPTION: A Python script demonstrating the use of OpenTelemetry for logging and tracing. It creates a span, adds an event to it, and logs an error message.

LANGUAGE: python
CODE:
import logging

from opentelemetry import trace

tracer = trace.get_tracer_provider().get_tracer(__name__)

# Trace context correlation
with tracer.start_as_current_span("foo"):
    # Do something
    current_span = trace.get_current_span()
    current_span.add_event("This is a span event")
    logging.getLogger().error("This is a log message")

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with Static Load Balancing
DESCRIPTION: This YAML configuration sets up an OpenTelemetry collector with a static load balancing exporter, distributing traffic to three downstream collectors.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

exporters:
  loadbalancing:
    protocol:
      otlp:
        tls:
          insecure: true
    resolver:
      static:
        hostnames:
          - collector-1.example.com:4317
          - collector-2.example.com:5317
          - collector-3.example.com

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [loadbalancing]

----------------------------------------

TITLE: Using Environment Variables in Config
DESCRIPTION: Example showing how to use environment variables in the Collector configuration.

LANGUAGE: yaml
CODE:
processors:
  attributes/example:
    actions:
      - key: ${env:DB_KEY}
        action: ${env:OPERATION}

----------------------------------------

TITLE: Initializing OpenTelemetry Tracing in C++
DESCRIPTION: This function initializes the OpenTelemetry SDK for tracing. It creates an OTLP gRPC exporter, sets up a simple span processor, and configures the global tracer provider and propagator.

LANGUAGE: cpp
CODE:
void initTracer()
{
  auto exporter = opentelemetry::exporter::otlp::OtlpGrpcExporterFactory::Create();
  auto processor =
      opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::vector<std::unique_ptr<opentelemetry::sdk::trace::SpanProcessor>> processors;
  processors.push_back(std::move(processor));
  std::shared_ptr<opentelemetry::sdk::trace::TracerContext> context =
      opentelemetry::sdk::trace::TracerContextFactory::Create(std::move(processors));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      opentelemetry::sdk::trace::TracerProviderFactory::Create(context);
 // Set the global trace provider
  opentelemetry::trace::Provider::SetTracerProvider(provider);

 // set global propagator
  opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(
      opentelemetry::nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(
          new opentelemetry::trace::propagation::HttpTraceContext()));
}

----------------------------------------

TITLE: Manual OpenTelemetry PHP SDK Setup
DESCRIPTION: Demonstrates manual configuration of the OpenTelemetry SDK with a TracerProvider and BatchSpanProcessor. Shows how to set up an in-memory exporter with specific parameters for queue size, timeout, and batch processing.

LANGUAGE: php
CODE:
<?php
$exporter = new InMemoryExporter();
$meterProvider = new NoopMeterProvider();
$tracerProvider =  new TracerProvider(
    new BatchSpanProcessor(
        $exporter,
        ClockFactory::getDefault(),
        2048, //max queue size
        5000, //export timeout
        1024, //max batch size
        true, //auto flush
        $meterProvider
    )
);

----------------------------------------

TITLE: Configuring OTLP gRPC Exporter in C++
DESCRIPTION: This snippet shows how to configure and initialize the OTLP gRPC exporter for traces, metrics, and logs in C++. It includes setting up the exporter options with SSL credentials, creating processors, and setting global providers.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"
#include "opentelemetry/sdk/trace/tracer_provider.h"

#include "opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/aggregation/default_aggregation.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h"
#include "opentelemetry/sdk/metrics/meter_context_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

#include "opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_options.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;

namespace metric_sdk = opentelemetry::sdk::metrics;
namespace metrics_api = opentelemetry::metrics;

namespace otlp = opentelemetry::exporter::otlp;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;

void InitTracer()
{
  trace_sdk::BatchSpanProcessorOptions bspOpts{};
  opentelemetry::exporter::otlp::OtlpGrpcExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter  = otlp::OtlpGrpcExporterFactory::Create(opts);
  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);
  std::shared_ptr<opentelemetry::trace_api::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor));
  // Set the global trace provider
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
  otlp::OtlpGrpcMetricExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter = otlp::OtlpGrpcMetricExporterFactory::Create(opts);
  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;
  reader_options.export_interval_millis = std::chrono::milliseconds(1000);
  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);
  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);
  auto context = metric_sdk::MeterContextFactory::Create();
  context->AddMetricReader(std::move(reader));
  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));
  std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));
  metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  otlp::OtlpGrpcLogRecordExporterOptions opts;
  opts.endpoint = "localhost:4317";
  opts.use_ssl_credentials = true;
  opts.ssl_credentials_cacert_as_string = "ssl-certificate";
  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(opts);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  nostd::shared_ptr<logs_api::LoggerProvider> provider(
      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));
  logs_api::Provider::SetLoggerProvider(provider);
}

----------------------------------------

TITLE: Implementing AWS Lambda Wrapper with OpenTelemetry
DESCRIPTION: JavaScript code for the AWS Lambda wrapper that sets up OpenTelemetry tracing. It configures the tracer provider, span processor, and registers auto-instrumentations.

LANGUAGE: javascript
CODE:
/* lambda-wrapper.js */

const api = require('@opentelemetry/api');
const { BatchSpanProcessor } = require('@opentelemetry/sdk-trace-base');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-http');
const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');
const { registerInstrumentations } = require('@opentelemetry/instrumentation');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');

api.diag.setLogger(new api.DiagConsoleLogger(), api.DiagLogLevel.ALL);

const spanProcessor = new BatchSpanProcessor(
  new OTLPTraceExporter({
    url: '<backend_url>',
  }),
);

const provider = new NodeTracerProvider({
  spanProcessors: [spanProcessor],
});

registerInstrumentations({
  instrumentations: [
    getNodeAutoInstrumentations({
      '@opentelemetry/instrumentation-aws-lambda': {
        disableAwsContextPropagation: true,
      },
    }),
  ],
});

----------------------------------------

TITLE: Pulling and Running OpenTelemetry Collector Docker Image
DESCRIPTION: Commands to pull the OpenTelemetry Collector Docker image and run it in a container. The version number should be replaced with the desired version.

LANGUAGE: sh
CODE:
docker pull otel/opentelemetry-collector-contrib:{{% param vers %}}
docker run otel/opentelemetry-collector-contrib:{{% param vers %}}

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent via Environment Variables
DESCRIPTION: Shows how to set up the OpenTelemetry agent using environment variables for configuration, including JAVA_TOOL_OPTIONS for the agent path and OTEL_SERVICE_NAME for service identification.

LANGUAGE: shell
CODE:
export JAVA_TOOL_OPTIONS="-javaagent:path/to/opentelemetry-javaagent.jar"
export OTEL_SERVICE_NAME="your-service-name"
java -jar myapp.jar

----------------------------------------

TITLE: Flask Application with Manual Tracing
DESCRIPTION: Enhanced Flask application with manual OpenTelemetry tracing implementation

LANGUAGE: python
CODE:
from random import randint
from flask import Flask

from opentelemetry import trace

# Acquire a tracer
tracer = trace.get_tracer("diceroller.tracer")

app = Flask(__name__)

@app.route("/rolldice")
def roll_dice():
    return str(roll())

def roll():
    # This creates a new span that's the child of the current one
    with tracer.start_as_current_span("roll") as rollspan:
        res = randint(1, 6)
        rollspan.set_attribute("roll.value", res)
        return res

----------------------------------------

TITLE: Creating and Using Histograms in OpenTelemetry JavaScript
DESCRIPTION: Shows how to create and use histogram instruments to measure distributions in OpenTelemetry.

LANGUAGE: typescript
CODE:
import express from 'express';

const app = express();

app.get('/', (_req, _res) => {
  const histogram = myMeter.createHistogram('task.duration');
  const startTime = new Date().getTime();

  // do some work in an API call

  const endTime = new Date().getTime();
  const executionTime = endTime - startTime;

  // Record the duration of the task operation
  histogram.record(executionTime);
});

----------------------------------------

TITLE: Adding OpenTelemetry Resources in Code for .NET
DESCRIPTION: This C# code snippet shows how to add custom resources to OpenTelemetry using a ResourceBuilder. It demonstrates adding service information and custom attributes like environment name and team name. The code also sets up a tracer provider and creates an activity with tags.

LANGUAGE: csharp
CODE:
using System.Diagnostics;
using System.Collections.Generic;

using OpenTelemetry;
using OpenTelemetry.Trace;
using OpenTelemetry.Resources;

var serviceName = "resource-tutorial-dotnet";
var serviceVersion = "1.0";

var resourceBuilder =
    ResourceBuilder
        .CreateDefault()
        .AddService(serviceName: serviceName, serviceVersion: serviceVersion)
        .AddAttributes(new Dictionary<string, object>
        {
            ["environment.name"] = "production",
            ["team.name"] = "backend"
        });

var sourceName = "tutorial-dotnet";

using var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddSource(sourceName)
    .SetResourceBuilder(resourceBuilder)
    .AddConsoleExporter()
    .Build();

var MyActivitySource = new ActivitySource(sourceName);

using var activity = MyActivitySource.StartActivity("SayHello");
activity?.SetTag("foo", 1);
activity?.SetTag("bar", "Hello, World!");
activity?.SetTag("baz", new int[] { 1, 2, 3 });

----------------------------------------

TITLE: Running Collector with Custom Config
DESCRIPTION: Command to run the OpenTelemetry Collector with a custom configuration file.

LANGUAGE: shell
CODE:
otelcol --config=customconfig.yaml

----------------------------------------

TITLE: Injecting OpenTelemetry Tracer in Spring Controller (Java)
DESCRIPTION: This snippet demonstrates how to inject OpenTelemetry into a Spring Controller and obtain a Tracer instance. The Tracer can be used to create custom spans for more detailed tracing.

LANGUAGE: java
CODE:
import io.opentelemetry.api.OpenTelemetry;
import io.opentelemetry.api.trace.Tracer;

@Controller
public class MyController {
  private final Tracer tracer;

  public MyController(OpenTelemetry openTelemetry) {
    this.tracer = openTelemetry.getTracer("application");
  }
}

----------------------------------------

TITLE: Configuring SdkMeterProvider in Java
DESCRIPTION: Creates and configures an SdkMeterProvider with resource, metric reader, metric exporter, and views.

LANGUAGE: Java
CODE:
public static SdkMeterProvider create(Resource resource) {
  SdkMeterProviderBuilder builder =
      SdkMeterProvider.builder()
          .setResource(resource)
          .registerMetricReader(
              MetricReaderConfig.periodicMetricReader(
                  MetricExporterConfig.otlpHttpMetricExporter(
                      "http://localhost:4318/v1/metrics")));

  ViewConfig.dropMetricView(builder, "some.custom.metric");
  ViewConfig.histogramBucketBoundariesView(
      builder, "http.server.request.duration", List.of(1.0, 5.0, 10.0));
  ViewConfig.attributeFilterView(
      builder, "http.client.request.duration", Set.of("http.request.method"));
  ViewConfig.cardinalityLimitsView(builder, "http.server.active_requests", 100);
  return builder.build();
}

----------------------------------------

TITLE: Creating ASP.NET Core Minimal API in C#
DESCRIPTION: This code snippet sets up a basic ASP.NET Core Minimal API application with a '/rolldice' endpoint. It includes logging functionality and demonstrates how to handle both anonymous and named players.

LANGUAGE: csharp
CODE:
using System.Globalization;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

var logger = app.Logger;

int RollDice()
{
    return Random.Shared.Next(1, 7);
}

string HandleRollDice(string? player)
{
    var result = RollDice();

    if (string.IsNullOrEmpty(player))
    {
        logger.LogInformation("Anonymous player is rolling the dice: {result}", result);
    }
    else
    {
        logger.LogInformation("{player} is rolling the dice: {result}", player, result);
    }

    return result.ToString(CultureInfo.InvariantCulture);
}

app.MapGet("/rolldice/{player?}", HandleRollDice);

app.Run();

----------------------------------------

TITLE: Running OpenTelemetry Collector Docker Container with Custom Config
DESCRIPTION: Command to run the OpenTelemetry Collector Docker container with a custom configuration file mounted as a volume.

LANGUAGE: sh
CODE:
docker run -v $(pwd)/config.yaml:/etc/otelcol-contrib/config.yaml otel/opentelemetry-collector-contrib:{{% param vers %}}

----------------------------------------

TITLE: Context API Usage in Java
DESCRIPTION: Example demonstrating how to use OpenTelemetry Context API for storing and propagating context through an application

LANGUAGE: java
CODE:
package otel;

import io.opentelemetry.context.Context;
import io.opentelemetry.context.ContextKey;
import io.opentelemetry.context.Scope;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ContextUsage {
  public static void contextUsage() throws Exception {
    // Define an example context key
    ContextKey<String> exampleContextKey = ContextKey.named("example-context-key");

    // Context doesn't contain the key until we add it
    // Context.current() accesses the current context
    // output => current context value: null
    System.out.println("current context value: " + Context.current().get(exampleContextKey));

    // Add entry to context
    Context context = Context.current().with(exampleContextKey, "value");

    // The local context var contains the added value 
    // output => context value: value
    System.out.println("context value: " + context.get(exampleContextKey));
    // The current context still doesn't contain the value
    // output => current context value: null
    System.out.println("current context value: " + Context.current().get(exampleContextKey));

    // Calling context.makeCurrent() sets Context.current() to the context until the scope is
    // closed, upon which Context.current() is restored to the state prior to when
    // context.makeCurrent() was called. The resulting Scope implements AutoCloseable and is 
    // normally used in a try-with-resources block. Failure to call Scope.close() is an error and
    // may cause memory leaks or other issues.
    try (Scope scope = context.makeCurrent()) {
      // The current context now contains the added value
      // output => context value: value
      System.out.println("context value: " + Context.current().get(exampleContextKey));
    }

    // The local context var still contains the added value
    // output => context value: value
    System.out.println("context value: " + context.get(exampleContextKey));
    // The current context no longer contains the value
    // output => current context value: null
    System.out.println("current context value: " + Context.current().get(exampleContextKey));

    ExecutorService executorService = Executors.newSingleThreadExecutor();
    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);

    // Context instances can be explicitly passed around application code, but it's more convenient
    // to use implicit context, calling Context.makeCurrent() and accessing via Context.current().
    // Context provides a number of utilities for implicit context propagation. These utilities wrap
    // utility classes like Scheduler, ExecutorService, ScheduledExecutorService, Runnable,
    // Callable, Consumer, Supplier, Function, etc and modify their behavior to call
    // Context.makeCurrent() before running.
    context.wrap(ContextUsage::callable).call();
    context.wrap(ContextUsage::runnable).run();
    context.wrap(executorService).submit(ContextUsage::runnable);
    context.wrap(scheduledExecutorService).schedule(ContextUsage::runnable, 1, TimeUnit.SECONDS);
    context.wrapConsumer(ContextUsage::consumer).accept(new Object());
    context.wrapConsumer(ContextUsage::biConsumer).accept(new Object(), new Object());
    context.wrapFunction(ContextUsage::function).apply(new Object());
    context.wrapSupplier(ContextUsage::supplier).get();
  }

  /** Example {@link java.util.concurrent.Callable}. */
  private static Object callable() {
    return new Object();
  }

  /** Example {@link Runnable}. */
  private static void runnable() {}

  /** Example {@link java.util.function.Consumer}. */
  private static void consumer(Object object) {}

  /** Example {@link java.util.function.BiConsumer}. */
  private static void biConsumer(Object object1, Object object2) {}

  /** Example {@link java.util.function.Function}. */
  private static Object function(Object object) {
    return object;
  }

  /** Example {@link java.util.function.Supplier}. */
  private static Object supplier() {
    return new Object();
  }
}

----------------------------------------

TITLE: OpenTelemetry Instrumentation Setup in TypeScript
DESCRIPTION: Configures OpenTelemetry SDK with console exporters for both traces and metrics. Sets up auto-instrumentation for Node.js applications.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
import { NodeSDK } from '@opentelemetry/sdk-node';
import { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import {
  PeriodicExportingMetricReader,
  ConsoleMetricExporter,
} from '@opentelemetry/sdk-metrics';

const sdk = new NodeSDK({
  traceExporter: new ConsoleSpanExporter(),
  metricReader: new PeriodicExportingMetricReader({
    exporter: new ConsoleMetricExporter(),
  }),
  instrumentations: [getNodeAutoInstrumentations()],
});

sdk.start();

----------------------------------------

TITLE: Initializing OpenTelemetry Logging in C++
DESCRIPTION: This function initializes the OpenTelemetry LoggerProvider for logging. It creates an OTLP gRPC exporter, sets up a SimpleLogRecordProcessor, and configures the global LoggerProvider.

LANGUAGE: cpp
CODE:
void initLogger() {
  otlp::OtlpGrpcLogRecordExporterOptions loggerOptions;
  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(loggerOptions);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  std::vector<std::unique_ptr<logs_sdk::LogRecordProcessor>> processors;
  processors.push_back(std::move(processor));
  auto context = logs_sdk::LoggerContextFactory::Create(std::move(processors));
  std::shared_ptr<logs::LoggerProvider> provider = logs_sdk::LoggerProviderFactory::Create(std::move(context));
  opentelemetry::logs::Provider::SetLoggerProvider(provider);
}

----------------------------------------

TITLE: Instrumenting Oat++ HTTP Server with OpenTelemetry in C++
DESCRIPTION: This updated code adds OpenTelemetry instrumentation to the HTTP server, initializing a tracer and emitting spans for each request to the /rolldice endpoint.

LANGUAGE: cpp
CODE:
#include "oatpp/web/server/HttpConnectionHandler.hpp"
#include "oatpp/network/Server.hpp"
#include "oatpp/network/tcp/server/ConnectionProvider.hpp"

#include "opentelemetry/exporters/ostream/span_exporter_factory.h"
#include "opentelemetry/sdk/trace/exporter.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

#include <cstdlib>
#include <ctime>
#include <string>

using namespace std;
namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;
namespace trace_exporter = opentelemetry::exporter::trace;

namespace {
  void InitTracer() {
    auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();
    auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
    std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor));
    //set the global trace provider
    trace_api::Provider::SetTracerProvider(provider);
  }
  void CleanupTracer() {
    std::shared_ptr<opentelemetry::trace::TracerProvider> none;
    trace_api::Provider::SetTracerProvider(none);
  }

}

class Handler : public oatpp::web::server::HttpRequestHandler {
public:
  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {
    auto tracer = opentelemetry::trace::Provider::GetTracerProvider()->GetTracer("my-app-tracer");
    auto span = tracer->StartSpan("RollDiceServer");
    int low = 1;
    int high = 7;
    int random = rand() % (high - low) + low;
    // Convert a std::string to oatpp::String
    const string response = to_string(random);
    span->End();
    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());
  }
};

void run() {
  auto router = oatpp::web::server::HttpRouter::createShared();
  router->route("GET", "/rolldice", std::make_shared<Handler>());
  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);
  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({"localhost", 8080, oatpp::network::Address::IP_4});
  oatpp::network::Server server(connectionProvider, connectionHandler);
  OATPP_LOGI("Dice Server", "Server running on port %s", static_cast<const char*>(connectionProvider->getProperty("port").getData()));
  server.run();
}

int main() {
  oatpp::base::Environment::init();
  InitTracer();
  srand((int)time(0));
  run();
  oatpp::base::Environment::destroy();
  CleanupTracer();
  return 0;
}

----------------------------------------

TITLE: Implementing OpenTelemetry Client in JavaScript
DESCRIPTION: JavaScript code for creating an OpenTelemetry-instrumented client application that makes a request to a server endpoint.

LANGUAGE: javascript
CODE:
const { NodeSDK } = require('@opentelemetry/sdk-node');
const {
  SimpleSpanProcessor,
  ConsoleSpanExporter,
} = require('@opentelemetry/sdk-trace-node');
const {
  UndiciInstrumentation,
} = require('@opentelemetry/instrumentation-undici');

const sdk = new NodeSDK({
  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],
  instrumentations: [new UndiciInstrumentation()],
});
sdk.start();

const { request } = require('undici');

request('http://localhost:8080/rolldice').then((response) => {
  response.body.json().then((json) => console.log(json));
});

----------------------------------------

TITLE: Creating a New Span in OpenTelemetry Python
DESCRIPTION: Demonstrates how to create a new span using the OpenTelemetry tracer. It shows starting a span, printing a message, and setting an attribute on the span.

LANGUAGE: python
CODE:
from opentelemetry import trace

tracer = trace.get_tracer("my.tracer")
with tracer.start_as_current_span("print") as span:
    print("foo")
    span.set_attribute("printed_string", "foo")

----------------------------------------

TITLE: Configuring OpenTelemetry Collector Sidecar Injection in Kubernetes
DESCRIPTION: This snippet demonstrates how to configure an OpenTelemetry Collector as a sidecar in Kubernetes using a Custom Resource and pod annotation.

LANGUAGE: yaml
CODE:
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: sidecar-for-my-workload
spec:
  mode: sidecar
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
    processors:

    exporters:
      # Note: Prior to v0.86.0 use the `logging` instead of `debug`.
      debug:

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [debug]
---
apiVersion: v1
kind: Pod
metadata:
  name: my-microservice
  annotations:
    sidecar.opentelemetry.io/inject: 'true'
spec:
  containers:
    - name: my-microservice
      image: my-org/my-microservice:v0.0.0
      ports:
        - containerPort: 8080
          protocol: TCP

----------------------------------------

TITLE: Overriding Configuration Settings
DESCRIPTION: Examples of overriding Collector settings using the --set option.

LANGUAGE: shell
CODE:
otelcol --set "exporters::debug::verbosity=detailed"
otelcol --set "receivers::otlp::protocols::grpc={endpoint:localhost:4317, compression: gzip}"

----------------------------------------

TITLE: Configuring Batch Span Processor in C++
DESCRIPTION: This snippet shows how to configure a Batch Span Processor with an OTLP HTTP exporter in C++. It demonstrates setting up the processor options and creating the processor with the exporter.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"

opentelemetry::sdk::trace::BatchSpanProcessorOptions options{};

auto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);
auto processor = opentelemetry::sdk::trace::BatchSpanProcessorFactory::Create(std::move(exporter), options);

----------------------------------------

TITLE: Adding Attributes to Spans in OpenTelemetry JavaScript
DESCRIPTION: Demonstrates how to add attributes to spans for additional context in OpenTelemetry tracing.

LANGUAGE: typescript
CODE:
function rollOnce(i: number, min: number, max: number) {
  return tracer.startActiveSpan(`rollOnce:${i}`, (span: Span) => {
    const result = Math.floor(Math.random() * (max - min + 1) + min);

    // Add an attribute to the span
    span.setAttribute('dicelib.rolled', result.toString());

    span.end();
    return result;
  });
}

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with Custom Connector
DESCRIPTION: Example YAML configuration for the OpenTelemetry Collector, including the custom 'example' connector in the pipeline.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

exporters:
  # NOTE: Prior to v0.86.0 use the `logging` instead of `debug`.
  debug:

connectors:
  example:

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [example]
    metrics:
      receivers: [example]
      exporters: [debug]

----------------------------------------

TITLE: Creating Nested Spans in OpenTelemetry Python
DESCRIPTION: Illustrates how to create nested spans using OpenTelemetry in Python. It creates a parent span and a child span within it, demonstrating span hierarchy.

LANGUAGE: python
CODE:
from opentelemetry import trace
import time

tracer = trace.get_tracer("my.tracer")

# Create a new span to track some work
with tracer.start_as_current_span("parent"):
    time.sleep(1)

    # Create a nested span to track nested work
    with tracer.start_as_current_span("child"):
        time.sleep(2)
        # the nested span is closed when it's out of scope

    # Now the parent span is the current span again
    time.sleep(1)

    # This span is also closed when it goes out of scope

----------------------------------------

TITLE: Configuring OTLP Trace Exporter in Swift
DESCRIPTION: This snippet demonstrates how to initialize and configure the OTLP trace exporter for OpenTelemetry Swift. It sets up a gRPC channel, creates the exporter, and registers a tracer provider with the configured exporter.

LANGUAGE: swift
CODE:
import GRPC
import OpenTelemetryApi
import OpenTelemetrySdk
import OpenTelemetryProtocolExporter

// initialize the OtlpTraceExporter
let otlpConfiguration = OtlpConfiguration(timeout: OtlpConfiguration.DefaultTimeoutInterval)

let grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1))
                                                  .connect(host: <collector host>, port: <collector port>)

let traceExporter = OtlpTraceExporter(channel: grpcChannel,
                                      config: otlpConfiguration)

// build & register the Tracer Provider using the built otlp trace exporter
OpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()
                                                      .add(spanProcessor:SimpleSpanProcessor(spanExporter: traceExporter))
                                                      .with(resource: Resource())
                                                      .build())

----------------------------------------

TITLE: OpenAI Client Integration with OpenTelemetry
DESCRIPTION: Python code example showing how to integrate OpenAI client with OpenTelemetry instrumentation

LANGUAGE: python
CODE:
import os
from openai import OpenAI

client = OpenAI()
chat_completion = client.chat.completions.create(
    model=os.getenv("CHAT_MODEL", "gpt-4o-mini"),
    messages=[
        {
            "role": "user",
            "content": "Write a short poem on OpenTelemetry.",
        },
    ],
)
print(chat_completion.choices[0].message.content)

----------------------------------------

TITLE: Creating Basic ASP.NET Core Minimal API
DESCRIPTION: Initial implementation of a dice rolling API using ASP.NET Core Minimal API. Includes endpoints for rolling dice with optional player name parameter and logging functionality.

LANGUAGE: csharp
CODE:
using System.Globalization;

using Microsoft.AspNetCore.Mvc;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

string HandleRollDice([FromServices]ILogger<Program> logger, string? player)
{
    var result = RollDice();

    if (string.IsNullOrEmpty(player))
    {
        logger.LogInformation("Anonymous player is rolling the dice: {result}", result);
    }
    else
    {
        logger.LogInformation("{player} is rolling the dice: {result}", player, result);
    }

    return result.ToString(CultureInfo.InvariantCulture);
}

int RollDice()
{
    return Random.Shared.Next(1, 7);
}

app.MapGet("/rolldice/{player?}", HandleRollDice);

app.Run();

----------------------------------------

TITLE: Creating a Simple OpenTelemetry Collector Instance
DESCRIPTION: This YAML configuration defines a basic OpenTelemetry Collector instance named 'simplest'. It sets up OTLP receivers for gRPC and HTTP protocols, and uses a debug exporter to output received traces.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: simplest
spec:
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:

    exporters:
      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
      debug:

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [debug]

----------------------------------------

TITLE: Configuring Samplers in Java
DESCRIPTION: Demonstrates configuration of various samplers including parent-based, always-on, always-off, trace ID ratio-based, and Jaeger remote sampler.

LANGUAGE: Java
CODE:
public static Sampler parentBasedSampler(Sampler root) {
  return Sampler.parentBasedBuilder(root)
      .setLocalParentNotSampled(Sampler.alwaysOff())
      .setLocalParentSampled(Sampler.alwaysOn())
      .setRemoteParentNotSampled(Sampler.alwaysOff())
      .setRemoteParentSampled(Sampler.alwaysOn())
      .build();
}

public static Sampler alwaysOn() {
  return Sampler.alwaysOn();
}

public static Sampler alwaysOff() {
  return Sampler.alwaysOff();
}

public static Sampler traceIdRatioBased(double ratio) {
  return Sampler.traceIdRatioBased(ratio);
}

public static Sampler jaegerRemoteSampler() {
  return JaegerRemoteSampler.builder()
      .setInitialSampler(Sampler.alwaysOn())
      .setEndpoint("http://endpoint")
      .setPollingInterval(Duration.ofSeconds(60))
      .setServiceName("my-service-name")
      .build();
}

----------------------------------------

TITLE: Initializing OpenTelemetry Tracer in React Native
DESCRIPTION: This snippet shows how to initialize the OpenTelemetry tracer using a custom hook. It sets up the TracerProvider, exports traces via OTLP, registers propagators, and configures auto-instrumentation for network requests.

LANGUAGE: typescript
CODE:
import {
  CompositePropagator,
  W3CBaggagePropagator,
  W3CTraceContextPropagator,
} from '@opentelemetry/core';
import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';
import { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';
import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { Resource } from '@opentelemetry/resources';
import {
  ATTR_DEVICE_ID,
  ATTR_OS_NAME,
  ATTR_OS_VERSION,
  ATTR_SERVICE_NAME,
  ATTR_SERVICE_VERSION,
} from '@opentelemetry/semantic-conventions/incubating';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';
import getLocalhost from '@/utils/Localhost';
import { useEffect, useState } from 'react';
import {
  getDeviceId,
  getSystemVersion,
  getVersion,
} from 'react-native-device-info';
import { Platform } from 'react-native';
import { SessionIdProcessor } from '@/utils/SessionIdProcessor';

const Tracer = async () => {
  const localhost = await getLocalhost();

  const resource = new Resource({
    [ATTR_SERVICE_NAME]: 'react-native-app',
    [ATTR_OS_NAME]: Platform.OS,
    [ATTR_OS_VERSION]: getSystemVersion(),
    [ATTR_SERVICE_VERSION]: getVersion(),
    [ATTR_DEVICE_ID]: getDeviceId(),
  });

  const provider = new WebTracerProvider({
    resource,
    spanProcessors: [
      new BatchSpanProcessor(
        new OTLPTraceExporter({
          url: `http://${localhost}:${process.env.EXPO_PUBLIC_FRONTEND_PROXY_PORT}/otlp-http/v1/traces`,
        }),
        {
          scheduledDelayMillis: 500,
        },
      ),
      new SessionIdProcessor(),
    ],
  });

  provider.register({
    propagator: new CompositePropagator({
      propagators: [
        new W3CBaggagePropagator(),
        new W3CTraceContextPropagator(),
      ],
    }),
  });

  registerInstrumentations({
    instrumentations: [
      new FetchInstrumentation({
        propagateTraceHeaderCorsUrls: /.*/,
        clearTimingResources: false,
      }),
      new XMLHttpRequestInstrumentation({
        ignoreUrls: [/\/api\/.*/],
      }),
    ],
  });
};

export interface TracerResult {
  loaded: boolean;
}

export const useTracer = (): TracerResult => {
  const [loaded, setLoaded] = useState<boolean>(false);

  useEffect(() => {
    if (!loaded) {
      Tracer()
        .catch(() => console.warn('failed to setup tracer'))
        .finally(() => setLoaded(true));
    }
  }, [loaded]);

  return {
    loaded,
  };
};

----------------------------------------

TITLE: Basic Instrumentation Resource Configuration
DESCRIPTION: Sample Kubernetes manifest for configuring basic instrumentation settings including exporter endpoint, propagators and sampling.

LANGUAGE: bash
CODE:
kubectl apply -f - <<EOF
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: demo-instrumentation
spec:
  exporter:
    endpoint: http://demo-collector:4318
  propagators:
    - tracecontext
    - baggage
  sampler:
    type: parentbased_traceidratio
    argument: "1"
EOF

----------------------------------------

TITLE: Getting and Modifying a Span in OpenTelemetry Python
DESCRIPTION: Shows how to get the current span and set an attribute on it using OpenTelemetry in Python.

LANGUAGE: python
CODE:
from opentelemetry import trace

current_span = trace.get_current_span()
current_span.set_attribute("hometown", "Seattle")

----------------------------------------

TITLE: Creating Nested Spans in OpenTelemetry JavaScript
DESCRIPTION: Shows how to create nested child spans to track nested operations in OpenTelemetry tracing.

LANGUAGE: typescript
CODE:
function rollOnce(i: number, min: number, max: number) {
  return tracer.startActiveSpan(`rollOnce:${i}`, (span: Span) => {
    const result = Math.floor(Math.random() * (max - min + 1) + min);
    span.end();
    return result;
  });
}

export function rollTheDice(rolls: number, min: number, max: number) {
  // Create a span. A span must be closed.
  return tracer.startActiveSpan('rollTheDice', (parentSpan: Span) => {
    const result: number[] = [];
    for (let i = 0; i < rolls; i++) {
      result.push(rollOnce(i, min, max));
    }
    // Be sure to end the span!
    parentSpan.end();
    return result;
  });
}

----------------------------------------

TITLE: Configuring OTel-Arrow Exporter in OpenTelemetry Collector
DESCRIPTION: Example YAML configuration for setting up the OTel-Arrow exporter in the OpenTelemetry Collector. It specifies the endpoint, TLS settings, and the number of streams.

LANGUAGE: yaml
CODE:
exporters:
  otelarrow:
    endpoint: collector.local:4317
    tls:
      insecure: true
    arrow:
      num_streams: 1

----------------------------------------

TITLE: Configuring OTLP Metric Exporter in Swift
DESCRIPTION: This snippet shows how to configure the OTLP metric exporter for OpenTelemetry Swift. It reuses the gRPC channel and configuration from the trace exporter setup, and registers a meter provider with the configured exporter.

LANGUAGE: swift
CODE:
// otlpConfiguration & grpcChannel can be reused
OpenTelemetry.registerMeterProvider(meterProvider: MeterProviderBuilder()
            .with(processor: MetricProcessorSdk())
            .with(exporter: OtlpMetricExporter(channel: channel, config: otlpConfiguration))
            .with(resource: Resource())
            .build())

----------------------------------------

TITLE: Context Propagation in OpenTelemetry C++
DESCRIPTION: This snippet shows how to set up context propagation using the W3C Trace Context HTTP headers. It demonstrates setting a global propagator, injecting context into headers, and extracting context from headers.

LANGUAGE: cpp
CODE:
opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(
    nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(
        new opentelemetry::trace::propagation::HttpTraceContext()));

HttpTextMapCarrier<opentelemetry::ext::http::client::Headers> carrier;
auto propagator =
    opentelemetry::context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();

auto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();
propagator->Inject(carrier, current_ctx);

auto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();
auto new_context = propagator->Extract(carrier, current_ctx);
auto remote_span = opentelemetry::trace::propagation::GetSpan(new_context);

----------------------------------------

TITLE: Configuring OTLP Base Endpoint
DESCRIPTION: Environment variable settings for configuring the base OTLP endpoint for all signal types. Supports both gRPC and HTTP protocols with optional port specification.

LANGUAGE: bash
CODE:
export OTEL_EXPORTER_OTLP_ENDPOINT="https://my-api-endpoint:443"

----------------------------------------

TITLE: OpenTelemetry Troubleshooting Configuration
DESCRIPTION: Enables diagnostic logging for OpenTelemetry initialization validation with configurable log levels.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';

// For troubleshooting, set the log level to DiagLogLevel.DEBUG
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);

// const sdk = new NodeSDK({...

----------------------------------------

TITLE: Initializing TracerProvider and Creating a Tracer in Python
DESCRIPTION: Set up a TracerProvider with a BatchSpanProcessor and ConsoleSpanExporter, then create a tracer.

LANGUAGE: python
CODE:
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import (
    BatchSpanProcessor,
    ConsoleSpanExporter,
)

provider = TracerProvider()
processor = BatchSpanProcessor(ConsoleSpanExporter())
provider.add_span_processor(processor)

# Sets the global default tracer provider
trace.set_tracer_provider(provider)

# Creates a tracer from the global tracer provider
tracer = trace.get_tracer("my.tracer.name")

----------------------------------------

TITLE: Initializing OpenTelemetry Metrics in C++
DESCRIPTION: This function initializes the OpenTelemetry MeterProvider for metrics. It sets up an OTLP gRPC exporter, creates a PeriodicExportingMetricReader, and configures the global MeterProvider.

LANGUAGE: cpp
CODE:
void initMeter()
{
  // Build MetricExporter
  otlp_exporter::OtlpGrpcMetricExporterOptions otlpOptions;
  auto exporter = otlp_exporter::OtlpGrpcMetricExporterFactory::Create(otlpOptions);

  // Build MeterProvider and Reader
  metric_sdk::PeriodicExportingMetricReaderOptions options;
  std::unique_ptr<metric_sdk::MetricReader> reader{
      new metric_sdk::PeriodicExportingMetricReader(std::move(exporter), options) };
  auto provider = std::shared_ptr<metrics_api::MeterProvider>(new metric_sdk::MeterProvider());
  auto p = std::static_pointer_cast<metric_sdk::MeterProvider>(provider);
  p->AddMetricReader(std::move(reader));
  metrics_api::Provider::SetMeterProvider(provider);
}

----------------------------------------

TITLE: Configuring SpanProcessors in Java
DESCRIPTION: Demonstrates configuration of batch and simple span processors with customizable parameters.

LANGUAGE: Java
CODE:
public static SpanProcessor batchSpanProcessor(SpanExporter spanExporter) {
  return BatchSpanProcessor.builder(spanExporter)
      .setMaxQueueSize(2048)
      .setExporterTimeout(Duration.ofSeconds(30))
      .setScheduleDelay(Duration.ofSeconds(5))
      .build();
}

public static SpanProcessor simpleSpanProcessor(SpanExporter spanExporter) {
  return SimpleSpanProcessor.builder(spanExporter).build();
}

----------------------------------------

TITLE: Installing OpenTelemetry Operator with Helm
DESCRIPTION: Commands to add the OpenTelemetry Helm repository and install the operator with self-signed certificates. This configuration sets up the operator with a custom collector image and enables auto-generated certificates for admission webhooks.

LANGUAGE: console
CODE:
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
helm install my-opentelemetry-operator open-telemetry/opentelemetry-operator \
  --set "manager.collectorImage.repository=otel/opentelemetry-collector-k8s" \
  --set admissionWebhooks.certManager.enabled=false \
  --set admissionWebhooks.autoGenerateCert.enabled=true

----------------------------------------

TITLE: Initializing OpenTelemetry Tracer Provider in Go
DESCRIPTION: Sets up the OpenTelemetry tracer provider with OTLP gRPC exporter and resource initialization. Configures trace context and baggage propagation.

LANGUAGE: go
CODE:
func initTracerProvider() *sdktrace.TracerProvider {
    ctx := context.Background()

    exporter, err := otlptracegrpc.New(ctx)
    if err != nil {
        log.Fatalf("OTLP Trace gRPC Creation: %v", err)
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(initResource()),
    )
    otel.SetTracerProvider(tp)
    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
    return tp
}

----------------------------------------

TITLE: Installing OpenTelemetry Operator in Kubernetes
DESCRIPTION: This command applies the latest version of the OpenTelemetry Operator YAML configuration to an existing Kubernetes cluster. It requires cert-manager to be installed beforehand.

LANGUAGE: bash
CODE:
kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml

----------------------------------------

TITLE: Custom Protocol Example: Client Implementation
DESCRIPTION: JavaScript code for a client using a custom TCP protocol to send data with OpenTelemetry context propagation.

LANGUAGE: javascript
CODE:
const net = require('net');
const { context, propagation, trace } = require('@opentelemetry/api');

let tracer = trace.getTracer('client');

const client = net.createConnection({ port: 8124 }, () => {
  let span = tracer.startActiveSpan('send', { kind: 1 }, (span) => {
    const output = {};
    propagation.inject(context.active(), output);
    const { traceparent, tracestate } = output;

    const objToSend = { key: 'value' };

    if (traceparent) {
      objToSend._meta = { traceparent, tracestate };
    }

    client.write(JSON.stringify(objToSend), () => {
      client.end();
      span.end();
    });
  });
});

----------------------------------------

TITLE: Initializing OpenTelemetry SDK
DESCRIPTION: PHP code to initialize the OpenTelemetry SDK with TracerProvider, LoggerProvider, and MeterProvider.

LANGUAGE: php
CODE:
<?php

use OpenTelemetry\API\Globals;
use OpenTelemetry\API\Logs\EventLogger;
use OpenTelemetry\API\Logs\LogRecord;
use OpenTelemetry\API\Trace\Propagation\TraceContextPropagator;
use OpenTelemetry\Contrib\Otlp\LogsExporter;
use OpenTelemetry\Contrib\Otlp\MetricExporter;
use OpenTelemetry\Contrib\Otlp\SpanExporter;
use OpenTelemetry\SDK\Common\Attribute\Attributes;
use OpenTelemetry\SDK\Common\Export\Stream\StreamTransportFactory;
use OpenTelemetry\SDK\Logs\LoggerProvider;
use OpenTelemetry\SDK\Logs\Processor\SimpleLogRecordProcessor;
use OpenTelemetry\SDK\Metrics\MeterProvider;
use OpenTelemetry\SDK\Metrics\MetricReader\ExportingReader;
use OpenTelemetry\SDK\Resource\ResourceInfo;
use OpenTelemetry\SDK\Resource\ResourceInfoFactory;
use OpenTelemetry\SDK\Sdk;
use OpenTelemetry\SDK\Trace\Sampler\AlwaysOnSampler;
use OpenTelemetry\SDK\Trace\Sampler\ParentBased;
use OpenTelemetry\SDK\Trace\SpanProcessor\SimpleSpanProcessor;
use OpenTelemetry\SDK\Trace\TracerProvider;
use OpenTelemetry\SemConv\ResourceAttributes;

require 'vendor/autoload.php';

$resource = ResourceInfoFactory::emptyResource()->merge(ResourceInfo::create(Attributes::create([
    ResourceAttributes::SERVICE_NAMESPACE => 'demo',
    ResourceAttributes::SERVICE_NAME => 'test-application',
    ResourceAttributes::SERVICE_VERSION => '0.1',
    ResourceAttributes::DEPLOYMENT_ENVIRONMENT_NAME => 'development',
])));
$spanExporter = new SpanExporter(
    (new StreamTransportFactory())->create('php://stdout', 'application/json')
);

$logExporter = new LogsExporter(
    (new StreamTransportFactory())->create('php://stdout', 'application/json')
);

$reader = new ExportingReader(
    new MetricExporter(
        (new StreamTransportFactory())->create('php://stdout', 'application/json')
    )
);

$meterProvider = MeterProvider::builder()
    ->setResource($resource)
    ->addReader($reader)
    ->build();

$tracerProvider = TracerProvider::builder()
    ->addSpanProcessor(
        new SimpleSpanProcessor($spanExporter)
    )
    ->setResource($resource)
    ->setSampler(new ParentBased(new AlwaysOnSampler()))
    ->build();

$loggerProvider = LoggerProvider::builder()
    ->setResource($resource)
    ->addLogRecordProcessor(
        new SimpleLogRecordProcessor($logExporter)
    )
    ->build();

Sdk::builder()
    ->setTracerProvider($tracerProvider)
    ->setMeterProvider($meterProvider)
    ->setLoggerProvider($loggerProvider)
    ->setPropagator(TraceContextPropagator::getInstance())
    ->setAutoShutdown(true)
    ->buildAndRegisterGlobal();

----------------------------------------

TITLE: Registering Auto-Instrumentations in Node.js SDK
DESCRIPTION: These code snippets show how to register all auto-instrumentations in the OpenTelemetry Node.js SDK for both TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
...
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';

const sdk = new NodeSDK({
  ...
  // This registers all instrumentation packages
  instrumentations: [getNodeAutoInstrumentations()]
});

sdk.start()

LANGUAGE: javascript
CODE:
/*instrumentation.js*/
const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');

const sdk = new NodeSDK({
  ...
  // This registers all instrumentation packages
  instrumentations: [getNodeAutoInstrumentations()]
});

----------------------------------------

TITLE: Manual Flask Route Instrumentation in Python
DESCRIPTION: Example of manually instrumenting a Flask route with OpenTelemetry using a tracer to create and manage spans with custom attributes.

LANGUAGE: python
CODE:
@app.route("/server_request")
def server_request():
    with tracer.start_as_current_span(
        "server_request",
        context=extract(request.headers),
        kind=trace.SpanKind.SERVER,
        attributes=collect_request_attributes(request.environ),
    ):
        print(request.args.get("param"))
        return "served"

----------------------------------------

TITLE: Configuring Processors
DESCRIPTION: Example configuration showing various processors for data transformation and filtering.

LANGUAGE: yaml
CODE:
processors:
  attributes:
    actions:
      - key: environment
        value: production
        action: insert
      - key: db.statement
        action: delete
      - key: email
        action: hash

  batch:

  filter:
    error_mode: ignore
    traces:
      span:
        - 'attributes["container.name"] == "app_container_1"'
        - 'resource.attributes["host.name"] == "localhost"'
        - 'name == "app_3"'
      spanevent:
        - 'attributes["grpc"] == true'
        - 'IsMatch(name, ".*grpc.*")'
    metrics:
      metric:
        - 'name == "my.metric" and resource.attributes["my_label"] == "abc123"'
        - 'type == METRIC_DATA_TYPE_HISTOGRAM'
      datapoint:
        - 'metric.type == METRIC_DATA_TYPE_SUMMARY'
        - 'resource.attributes["service.name"] == "my_service_name"'
    logs:
      log_record:
        - 'IsMatch(body, ".*password.*")'
        - 'severity_number < SEVERITY_NUMBER_WARN'

  memory_limiter:
    check_interval: 5s
    limit_mib: 4000
    spike_limit_mib: 500

  resource:
    attributes:
      - key: cloud.zone
        value: zone-1
        action: upsert
      - key: k8s.cluster.name
        from_attribute: k8s-cluster
        action: insert
      - key: redundant-attribute
        action: delete

  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 15

  span:
    name:
      to_attributes:
        rules:
          - ^/api/v1/document/(?P<documentId>.*)/update$
      from_attributes: [db.svc, operation]
      separator: '::'

----------------------------------------

TITLE: Creating and Using Asynchronous Instruments in Python OpenTelemetry
DESCRIPTION: Show how to create and use an Asynchronous Gauge instrument to report config versions from a server.

LANGUAGE: python
CODE:
from typing import Iterable
from opentelemetry.metrics import CallbackOptions, Observation


def scrape_config_versions(options: CallbackOptions) -> Iterable[Observation]:
    r = requests.get(
        "http://configserver/version_metadata", timeout=options.timeout_millis / 10**3
    )
    for metadata in r.json():
        yield Observation(
            metadata["version_num"], {"config.name": metadata["version_num"]}
        )

meter.create_observable_gauge(
    "config.version",
    callbacks=[scrape_config_versions],
    description="The active config version for each configuration",
)

----------------------------------------

TITLE: Instrumenting HTTPX Clients for Automatic Tracing
DESCRIPTION: Python code demonstrating how to instrument both synchronous and asynchronous HTTPX clients for automatic request tracing.

LANGUAGE: python
CODE:
import httpx
from opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor

url = "https://some.url/get"
HTTPXClientInstrumentor().instrument()

with httpx.Client() as client:
     response = client.get(url)

async with httpx.AsyncClient() as client:
     response = await client.get(url)

----------------------------------------

TITLE: Initializing Metrics in OpenTelemetry JavaScript
DESCRIPTION: Shows how to initialize metrics instrumentation in an OpenTelemetry JavaScript application.

LANGUAGE: typescript
CODE:
import opentelemetry from '@opentelemetry/api';
import {
  ConsoleMetricExporter,
  MeterProvider,
  PeriodicExportingMetricReader,
} from '@opentelemetry/sdk-metrics';
import { Resource } from '@opentelemetry/resources';
import {
  ATTR_SERVICE_NAME,
  ATTR_SERVICE_VERSION,
} from '@opentelemetry/semantic-conventions';

const resource = Resource.default().merge(
  new Resource({
    [ATTR_SERVICE_NAME]: 'dice-server',
    [ATTR_SERVICE_VERSION]: '0.1.0',
  }),
);

const metricReader = new PeriodicExportingMetricReader({
  exporter: new ConsoleMetricExporter(),
  // Default is 60000ms (60 seconds). Set to 10 seconds for demonstrative purposes only.
  exportIntervalMillis: 10000,
});

const myServiceMeterProvider = new MeterProvider({
  resource: resource,
  readers: [metricReader],
});

// Set this MeterProvider to be global to the app being instrumented.
opentelemetry.metrics.setGlobalMeterProvider(myServiceMeterProvider);

----------------------------------------

TITLE: Initializing OpenTelemetry Tracer Provider for Browser
DESCRIPTION: This JavaScript/TypeScript code initializes the OpenTelemetry Web Tracer Provider and registers the Document Load instrumentation. It sets up the foundation for tracing in a browser environment.

LANGUAGE: javascript
CODE:
import { WebTracerProvider } from '@opentelemetry/sdk-trace-web';
import { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';
import { ZoneContextManager } from '@opentelemetry/context-zone';
import { registerInstrumentations } from '@opentelemetry/instrumentation';

const provider = new WebTracerProvider();

provider.register({
  // Changing default contextManager to use ZoneContextManager - supports asynchronous operations - optional
  contextManager: new ZoneContextManager(),
});

// Registering instrumentations
registerInstrumentations({
  instrumentations: [new DocumentLoadInstrumentation()],
});

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with Load Balancing Exporter
DESCRIPTION: This YAML configuration shows how to set up an OpenTelemetry Collector with a load balancing exporter using DNS resolution for backend discovery.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

processors:

exporters:
  loadbalancing:
    protocol:
      otlp:
    resolver:
      dns:
        hostname: otelcol.observability.svc.cluster.local

service:
  pipelines:
    traces:
      receivers:
        - otlp
      processors: []
      exporters:
        - loadbalancing

----------------------------------------

TITLE: Starting and Managing Spans in OpenTelemetry C++
DESCRIPTION: This snippet demonstrates how to start a span, mark it as active, and create nested spans. It shows the parent-child relationship between spans and how to properly end spans.

LANGUAGE: cpp
CODE:
auto span = tracer->StartSpan("HandleRequest");
auto scope = tracer->WithActiveSpan(span);

auto outer_span = tracer->StartSpan("Outer operation");
auto outer_scope = tracer->WithActiveSpan(outer_span);
{
    auto inner_span = tracer->StartSpan("Inner operation");
    auto inner_scope = tracer->WithActiveSpan(inner_span);
    // ... perform inner operation
    inner_span->End();
}
// ... perform outer operation
outer_span->End();

----------------------------------------

TITLE: Installing OpenTelemetry Collector Chart with Helm
DESCRIPTION: Commands to add the OpenTelemetry Helm repository and install the collector chart with specific mode and image settings.

LANGUAGE: sh
CODE:
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
helm install my-opentelemetry-collector open-telemetry/opentelemetry-collector \
   --set image.repository="otel/opentelemetry-collector-k8s" \
   --set mode=<daemonset|deployment|statefulset> \

----------------------------------------

TITLE: Configuring Hugo Frontmatter for OpenTelemetry PHP API Reference Redirect
DESCRIPTION: This YAML frontmatter configures a Hugo page to redirect to the OpenTelemetry PHP API reference documentation. It sets the title, link properties, redirect URL, and specifies that the page should open in a new tab.

LANGUAGE: yaml
CODE:
---
title: API reference
linkTitle: API
redirect: https://open-telemetry.github.io/opentelemetry-php/
manualLinkTarget: _blank
_build: { render: link }
weight: 210
---

----------------------------------------

TITLE: Installing Auto-Instrumentation Metapackages
DESCRIPTION: These snippets demonstrate how to install auto-instrumentation metapackages for Node.js and web applications.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/auto-instrumentations-node

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/auto-instrumentations-web

----------------------------------------

TITLE: Creating Receiver Factory in Go
DESCRIPTION: Implements the NewFactory function to create a factory for the tailtracer receiver.

LANGUAGE: go
CODE:
func NewFactory() receiver.Factory {
	return receiver.NewFactory(
		typeStr,
		createDefaultConfig,
		receiver.WithTraces(createTracesReceiver, component.StabilityLevelAlpha))
}

----------------------------------------

TITLE: Creating Spans in OpenTelemetry Go
DESCRIPTION: Example of creating spans in an HTTP handler using OpenTelemetry Go.

LANGUAGE: go
CODE:
func httpHandler(w http.ResponseWriter, r *http.Request) {
	ctx, span := tracer.Start(r.Context(), "hello-span")
	defer span.End()

	// do some work to track with hello-span
}

----------------------------------------

TITLE: Creating Metric Views in OpenTelemetry C++
DESCRIPTION: This snippet demonstrates how to create metric views for customized aggregation. It shows how to map different types of instruments (counter, histogram, observable counter) to specific aggregation types.

LANGUAGE: cpp
CODE:
std::unique_ptr<opentelemetry::sdk::metrics::InstrumentSelector> instrument_selector{
    new opentelemetry::sdk::metrics::InstrumentSelector(opentelemetry::sdk::metrics::InstrumentType::kCounter, "counter_name")};
std::unique_ptr<opentelemetry::sdk::metrics::MeterSelector> meter_selector{
    new opentelemetry::sdk::metrics::MeterSelector(name, version, schema)};
std::unique_ptr<opentelemetry::sdk::metrics::View> sum_view{
    new opentelemetry::sdk::metrics::View{name, "description", opentelemetry::sdk::metrics::AggregationType::kSum}};
p->AddView(std::move(instrument_selector), std::move(meter_selector), std::move(sum_view));

// Similar code for histogram and observable counter views...

----------------------------------------

TITLE: Getting Context Values in OpenTelemetry
DESCRIPTION: Shows how to retrieve values from a context using getValue() method with a specific key.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';

const key = api.createContextKey('some key');
// ROOT_CONTEXT is the empty context
const ctx = api.ROOT_CONTEXT;

const value = ctx.getValue(key);

----------------------------------------

TITLE: Structured JSON Log Example
DESCRIPTION: Example of a structured log in JSON format showing a user authentication event with detailed metadata, request, and response information.

LANGUAGE: json
CODE:
{
  "timestamp": "2024-08-04T12:34:56.789Z",
  "level": "INFO",
  "service": "user-authentication",
  "environment": "production",
  "message": "User login successful",
  "context": {
    "userId": "12345",
    "username": "johndoe",
    "ipAddress": "192.168.1.1",
    "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"
  },
  "transactionId": "abcd-efgh-ijkl-mnop",
  "duration": 200,
  "request": {
    "method": "POST",
    "url": "/api/v1/login",
    "headers": {
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    "body": {
      "username": "johndoe",
      "password": "******"
    }
  },
  "response": {
    "statusCode": 200,
    "body": {
      "success": true,
      "token": "jwt-token-here"
    }
  }
}

----------------------------------------

TITLE: Using Multiple Tracer Providers with Different Resources in OpenTelemetry Python
DESCRIPTION: Demonstrates how to use multiple tracer providers with different resources in OpenTelemetry Python. It sets up two tracer providers with different service names and creates spans using both providers.

LANGUAGE: python
CODE:
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor

# Global tracer provider which can be set only once
trace.set_tracer_provider(
    TracerProvider(resource=Resource.create({"service.name": "service1"}))
)
trace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))

tracer = trace.get_tracer("tracer.one")
with tracer.start_as_current_span("some-name") as span:
    span.set_attribute("key", "value")



another_tracer_provider = TracerProvider(
    resource=Resource.create({"service.name": "service2"})
)
another_tracer_provider.add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))

another_tracer = trace.get_tracer("tracer.two", tracer_provider=another_tracer_provider)
with another_tracer.start_as_current_span("name-here") as span:
    span.set_attribute("another-key", "another-value")

----------------------------------------

TITLE: Configuring Envoy for OpenTelemetry Tracing
DESCRIPTION: This YAML configuration enables Envoy to produce spans for incoming requests. It sets up listeners, filters, and clusters for OpenTelemetry tracing, with the collector address and port specified via environment variables.

LANGUAGE: yaml
CODE:
static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: ${ENVOY_PORT}
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                tracing:
                  provider:
                    name: envoy.tracers.opentelemetry
                    typed_config:
                      '@type': type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                      grpc_service:
                        envoy_grpc:
                          cluster_name: opentelemetry_collector
                        timeout: 0.250s
                      service_name: frontend-proxy

  clusters:
    - name: opentelemetry_collector
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: opentelemetry_collector
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${OTEL_COLLECTOR_HOST}
                      port_value: ${OTEL_COLLECTOR_PORT}

----------------------------------------

TITLE: Configuring OTLP Exporter in Rust
DESCRIPTION: This code demonstrates how to initialize a tracer with an OTLP exporter in Rust. It sets up the global tracer provider with a tonic-based OTLP exporter and configures the trace context propagator.

LANGUAGE: rust
CODE:
fn init_tracer() {
    match SpanExporter::new_tonic(ExportConfig::default(), TonicConfig::default()) {
        Ok(exporter) => {
            global::set_text_map_propagator(TraceContextPropagator::new());
            let provider = TracerProvider::builder()
                .with_simple_exporter(exporter)
                .build();
            global::set_tracer_provider(provider);
        },
        Err(why) => panic!("{:?}", why)
    }

}

----------------------------------------

TITLE: Using Synchronous Meters
DESCRIPTION: PHP code demonstrating how to use synchronous meters for recording metrics.

LANGUAGE: php
CODE:
$up_down = $meterProvider
    ->getMeter('demo_meter')
    ->createUpDownCounter('queued', 'jobs', 'The number of jobs enqueued');
//jobs come in
$up_down->add(5);
//job completed
$up_down->add(-1);
//more jobs come in
$up_down->add(2);

$meterProvider->forceFlush();

----------------------------------------

TITLE: Manual Context Propagation in TypeScript (Sending Service)
DESCRIPTION: TypeScript code demonstrating how to manually inject trace context for propagation in a sending service.

LANGUAGE: typescript
CODE:
import { context, propagation, trace } from '@opentelemetry/api';

interface Carrier {
  traceparent?: string;
  tracestate?: string;
}

const output: Carrier = {};

propagation.inject(context.active(), output);

const { traceparent, tracestate } = output;

----------------------------------------

TITLE: Creating Dice Library File
DESCRIPTION: PHP code for a simple dice rolling library to be used in the example application.

LANGUAGE: php
CODE:
<?php
class Dice {

    private $tracer;

    function __construct() {
    }

    public function roll($rolls) {
        $result = [];
        for ($i = 0; $i < $rolls; $i++) {
            $result[] = $this->rollOnce();
        }
        return $result;
    }

    private function rollOnce() {
      $result = random_int(1, 6);
      return $result;
    }
}

----------------------------------------

TITLE: Defining Data Models for ATM and Backend System in Go
DESCRIPTION: Defines structs to represent ATM and backend system entities for trace generation.

LANGUAGE: go
CODE:
type Atm struct {
	ID           int64
	Version      string
	Name         string
	StateID      string
	SerialNumber string
	ISPNetwork   string
}

type BackendSystem struct {
	Version       string
	ProcessName   string
	OSType        string
	OSVersion     string
	CloudProvider string
	CloudRegion   string
	Endpoint      string
}

----------------------------------------

TITLE: Configuring OTLP Exporter in Non-ASP.NET Core
DESCRIPTION: Setup of OpenTelemetry exporters in non-ASP.NET Core applications using TracerProvider, MeterProvider, and LoggerFactory

LANGUAGE: csharp
CODE:
var tracerProvider = Sdk.CreateTracerProviderBuilder()
    // Other setup code, like setting a resource goes here too
    .AddOtlpExporter(options =>
    {
        options.Endpoint = new Uri("your-endpoint-here/v1/traces");
        options.Protocol = OtlpExportProtocol.HttpProtobuf;
    })
    .Build();

var meterProvider = Sdk.CreateMeterProviderBuilder()
    // Other setup code, like setting a resource goes here too
    .AddOtlpExporter(options =>
    {
        options.Endpoint = new Uri("your-endpoint-here/v1/metrics");
        options.Protocol = OtlpExportProtocol.HttpProtobuf;
    })
    .Build();

var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddOpenTelemetry(logging =>
    {
        logging.AddOtlpExporter(options =>
        {
            options.Endpoint = new Uri("your-endpoint-here/v1/logs");
            options.Protocol = OtlpExportProtocol.HttpProtobuf;
        })
    });
});

----------------------------------------

TITLE: Configuring OpenTelemetry in Rails
DESCRIPTION: Rails initializer example showing how to configure OpenTelemetry SDK with all available instrumentations enabled.

LANGUAGE: ruby
CODE:
# config/initializers/opentelemetry.rb
require 'opentelemetry/sdk'
require 'opentelemetry/exporter/otlp'
require 'opentelemetry/instrumentation/all'
OpenTelemetry::SDK.configure do |c|
  c.service_name = '<YOUR_SERVICE_NAME>'
  c.use_all() # enables all instrumentation!
end

----------------------------------------

TITLE: Creating Basic OpenTelemetry Spans
DESCRIPTION: Python example demonstrating how to create nested spans using OpenTelemetry tracer

LANGUAGE: python
CODE:
from opentelemetry import trace

with trace.get_tracer("my.tracer").start_as_current_span("foo"):
    with trace.get_tracer("my.tracer").start_as_current_span("bar"):
        print("baz")

----------------------------------------

TITLE: Configuring OpenTelemetry Properties in application.properties
DESCRIPTION: Example of configuring OpenTelemetry settings using application.properties file including propagators and resource attributes.

LANGUAGE: properties
CODE:
otel.propagators=tracecontext,b3
otel.resource.attributes.deployment.environment=dev
otel.resource.attributes.service.name=cart
otel.resource.attributes.service.namespace=shop

----------------------------------------

TITLE: Configuring ContextPropagators in Java
DESCRIPTION: Creates a composite context propagator with W3C trace context and W3C baggage propagators.

LANGUAGE: Java
CODE:
public static ContextPropagators create() {
  return ContextPropagators.create(
      TextMapPropagator.composite(
          W3CTraceContextPropagator.getInstance(), W3CBaggagePropagator.getInstance()));
}

----------------------------------------

TITLE: Manually Setting Span Context in OpenTelemetry Python
DESCRIPTION: Shows how to manually set span context using OpenTelemetry in Python. It demonstrates injecting and extracting trace context, creating a span context, and using different methods to start spans with the context.

LANGUAGE: python
CODE:
from opentelemetry import trace, context
from opentelemetry.trace import NonRecordingSpan, SpanContext, TraceFlags
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor
from opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator

# Set up a simple processor to write spans out to the console so we can see what's happening.
trace.set_tracer_provider(TracerProvider())
trace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))

tracer = trace.get_tracer("my.tracer")

# A TextMapPropagator works with any dict-like object as its Carrier by default. You can also implement custom getters and setters.
with tracer.start_as_current_span('first-trace'):
    carrier = {}
    # Write the current context into the carrier.
    TraceContextTextMapPropagator().inject(carrier)

# The below might be in a different thread, on a different machine, etc.
# As a typical example, it would be on a different microservice and the carrier would
# have been forwarded via HTTP headers.

# Extract the trace context from the carrier.
# Here's what a typical carrier might look like, as it would have been injected above.
carrier = {'traceparent': '00-a9c3b99a95cc045e573e163c3ac80a77-d99d251a8caecd06-01'}
# Then we use a propagator to get a context from it.
ctx = TraceContextTextMapPropagator().extract(carrier=carrier)

# Instead of extracting the trace context from the carrier, if you have a SpanContext
# object already you can get a trace context from it like this.
span_context = SpanContext(
    trace_id=2604504634922341076776623263868986797,
    span_id=5213367945872657620,
    is_remote=True,
    trace_flags=TraceFlags(0x01)
)
ctx = trace.set_span_in_context(NonRecordingSpan(span_context))

# Now there are a few ways to make use of the trace context.

# You can pass the context object when starting a span.
with tracer.start_as_current_span('child', context=ctx) as span:
    span.set_attribute('primes', [2, 3, 5, 7])

# Or you can make it the current context, and then the next span will pick it up.
# The returned token lets you restore the previous context.
token = context.attach(ctx)
try:
    with tracer.start_as_current_span('child') as span:
        span.set_attribute('evens', [2, 4, 6, 8])
finally:
    context.detach(token)

----------------------------------------

TITLE: Configuring Console Exporter in C++
DESCRIPTION: This snippet demonstrates how to configure and initialize the console exporter for traces, metrics, and logs in C++. It uses the OStreamSpanExporter to write telemetry data to stdout for debugging purposes.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/ostream/span_exporter_factory.h"
#include "opentelemetry/sdk/trace/exporter.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

#include "opentelemetry/exporters/ostream/metrics_exporter_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"
#include "opentelemetry/metrics/provider.h"

#include "opentelemetry/exporters/ostream/log_record_exporter_factory.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api      = opentelemetry::trace;
namespace trace_sdk      = opentelemetry::sdk::trace;
namespace trace_exporter = opentelemetry::exporter::trace;

namespace metrics_sdk      = opentelemetry::sdk::metrics;
namespace metrics_api      = opentelemetry::metrics;
namespace metrics_exporter = opentelemetry::exporter::metrics;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;
namespace logs_exporter = opentelemetry::exporter::logs;

void InitTracer()
{
  auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();
  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
    auto exporter = metrics_exporter::OStreamMetricExporterFactory::Create();
    auto u_provider = metrics_sdk::MeterProviderFactory::Create();
    std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));
    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());
    p->AddMetricReader(std::move(exporter));
    metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  auto exporter = logs_exporter::OStreamLogRecordExporterFactory::Create();
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  nostd::shared_ptr<logs_api::LoggerProvider> provider(
      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));
  logs_api::Provider::SetLoggerProvider(provider);
}

----------------------------------------

TITLE: Configuring Tail Sampling Processor in OpenTelemetry Collector
DESCRIPTION: YAML configuration for the tail sampling processor in the OpenTelemetry Collector. It defines sampling policies for error traces and random sampling of other traces.

LANGUAGE: yaml
CODE:
processors:
  tail_sampling:
    decision_wait: 10s
    num_traces: 100
    expected_new_traces_per_sec: 10
    policies:
      [
        {
          name: errors-policy,
          type: status_code,
          status_code: { status_codes: [ERROR] },
        },
        {
          name: randomized-policy,
          type: probabilistic,
          probabilistic: { sampling_percentage: 25 },
        },
      ]

----------------------------------------

TITLE: Configuring Extensions
DESCRIPTION: Example configuration showing various extensions for health monitoring and debugging.

LANGUAGE: yaml
CODE:
extensions:
  health_check:
  pprof:
  zpages:

----------------------------------------

TITLE: Setting Up MeterProvider for Metrics
DESCRIPTION: PHP code showing how to set up a MeterProvider for recording metrics.

LANGUAGE: php
CODE:
<?php

use OpenTelemetry\SDK\Metrics\MetricExporter\ConsoleMetricExporterFactory;
use OpenTelemetry\SDK\Metrics\MeterProvider;
use OpenTelemetry\SDK\Metrics\MetricReader\ExportingReader;

require 'vendor/autoload.php';

$reader = new ExportingReader((new ConsoleMetricExporterFactory())->create());

$meterProvider = MeterProvider::builder()
    ->addReader($reader)
    ->build();

----------------------------------------

TITLE: Using Counters in OpenTelemetry Go
DESCRIPTION: Example of using counters to measure API calls in OpenTelemetry Go.

LANGUAGE: go
CODE:
import (
	"net/http"

	"go.opentelemetry.io/otel/metric"
)

func init() {
	apiCounter, err := meter.Int64Counter(
		"api.counter",
		metric.WithDescription("Number of API calls."),
		metric.WithUnit("{call}"),
	)
	if err != nil {
		panic(err)
	}
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		apiCounter.Add(r.Context(), 1)

		// do some work in an API call
	})
}

----------------------------------------

TITLE: Adding OpenTelemetry Dependencies in Elixir
DESCRIPTION: Adds the opentelemetry and opentelemetry_api dependencies to a Mix project file.

LANGUAGE: elixir
CODE:
# mix.exs
def deps do
  [
    {:opentelemetry, "~> 1.3"},
    {:opentelemetry_api, "~> 1.2"},
  ]
end

----------------------------------------

TITLE: Configuring Span Processor
DESCRIPTION: PHP code demonstrating how to configure a SimpleSpanProcessor with a ConsoleSpanExporter.

LANGUAGE: php
CODE:
$tracerProvider = TracerProvider::builder()
  ->addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporterFactory()->create()))
  ->build();

----------------------------------------

TITLE: Installing OpenTelemetry Distro Packages
DESCRIPTION: Command to install OpenTelemetry distro with OTLP support and instrumentation

LANGUAGE: sh
CODE:
pip install opentelemetry-distro[otlp] opentelemetry-instrumentation

----------------------------------------

TITLE: Recording Exceptions in Spans with Python OpenTelemetry
DESCRIPTION: Demonstrate how to record exceptions in spans and set the span status accordingly.

LANGUAGE: python
CODE:
from opentelemetry import trace
from opentelemetry.trace import Status, StatusCode

current_span = trace.get_current_span()

try:
    # something that might fail

# Consider catching a more specific exception in your code
except Exception as ex:
    current_span.set_status(Status(StatusCode.ERROR))
    current_span.record_exception(ex)

----------------------------------------

TITLE: Accessing Current Span in Java
DESCRIPTION: Demonstrates how to access the current span from the execution context in auto-instrumented code.

LANGUAGE: java
CODE:
Span span = Span.current();

----------------------------------------

TITLE: Setting Context Values in OpenTelemetry
DESCRIPTION: Demonstrates how to set values in a context using setValue() method. Shows that setting creates a new context without modifying the original.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';

const key = api.createContextKey('some key');
const ctx = api.ROOT_CONTEXT;

// add a new entry
const ctx2 = ctx.setValue(key, 'context 2');

// ctx2 contains the new entry
console.log(ctx2.getValue(key)); // "context 2"

// ctx is unchanged
console.log(ctx.getValue(key)); // undefined

----------------------------------------

TITLE: OpenTelemetry Autoloading Implementation
DESCRIPTION: Demonstrates how to use the autoloaded SDK to obtain tracer and meter instances after configuration through environment variables.

LANGUAGE: php
CODE:
<?php
require 'vendor/autoload.php'; //sdk autoloading happens as part of composer initialization

$tracer = OpenTelemetry\API\Globals::tracerProvider()->getTracer('name', 'version', 'schema.url', [/*attributes*/]);
$meter = OpenTelemetry\API\Globals::meterProvider()->getMeter('name', 'version', 'schema.url', [/*attributes*/]);

----------------------------------------

TITLE: Implementing Root Span in OpenTelemetry
DESCRIPTION: Example of a root span representing the beginning of a trace operation. Shows basic span structure with trace ID, timestamps, attributes and events. Has no parent ID indicating it's the root span.

LANGUAGE: json
CODE:
{
  "name": "hello",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "051581bf3cb55c13"
  },
  "parent_id": null,
  "start_time": "2022-04-29T18:52:58.114201Z",
  "end_time": "2022-04-29T18:52:58.114687Z",
  "attributes": {
    "http.route": "some_route1"
  },
  "events": [
    {
      "name": "Guten Tag!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}

----------------------------------------

TITLE: Initializing OpenTelemetry Tracing
DESCRIPTION: Initialize an exporter, resources, tracer provider, and tracer for OpenTelemetry tracing in Go.

LANGUAGE: go
CODE:
package app

import (
	"context"
	"fmt"
	"log"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"
	"go.opentelemetry.io/otel/trace"
)

var tracer trace.Tracer

func newExporter(ctx context.Context)  /* (someExporter.Exporter, error) */ {
	// Your preferred exporter: console, jaeger, zipkin, OTLP, etc.
}

func newTracerProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider {
	// Ensure default SDK resources and the required service name are set.
	r, err := resource.Merge(
		resource.Default(),
		resource.NewWithAttributes(
			semconv.SchemaURL,
			semconv.ServiceName("ExampleService"),
		),
	)

	if err != nil {
		panic(err)
	}

	return sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exp),
		sdktrace.WithResource(r),
	)
}

func main() {
	ctx := context.Background()

	exp, err := newExporter(ctx)
	if err != nil {
		log.Fatalf("failed to initialize exporter: %v", err)
	}

	// Create a new tracer provider with a batch span processor and the given exporter.
	tp := newTracerProvider(exp)

	// Handle shutdown properly so nothing leaks.
	defer func() { _ = tp.Shutdown(ctx) }()

	otel.SetTracerProvider(tp)

	// Finally, set the tracer that can be used for this package.
	tracer = tp.Tracer("example.io/package/name")
}

----------------------------------------

TITLE: Setting Up LoggerProvider for Logging
DESCRIPTION: PHP code demonstrating how to set up a LoggerProvider for logging.

LANGUAGE: php
CODE:
<?php

use OpenTelemetry\API\Logs\EventLogger;
use OpenTelemetry\API\Logs\LogRecord;
use OpenTelemetry\Contrib\Otlp\LogsExporter;
use OpenTelemetry\SDK\Common\Export\Stream\StreamTransportFactory;
use OpenTelemetry\SDK\Logs\LoggerProvider;
use OpenTelemetry\SDK\Logs\Processor\SimpleLogRecordProcessor;
use OpenTelemetry\SDK\Resource\ResourceInfoFactory;

require 'vendor/autoload.php';

$exporter = new LogsExporter(
    (new StreamTransportFactory())->create('php://stdout', 'application/json')
);

$loggerProvider = LoggerProvider::builder()
    ->addLogRecordProcessor(new SimpleLogRecordProcessor($exporter))
    ->setResource(ResourceInfoFactory::emptyResource())
    ->build();

----------------------------------------

TITLE: Adding Attributes to a Span in .NET
DESCRIPTION: Shows how to add key/value pair attributes to a span for additional context.

LANGUAGE: csharp
CODE:
using var span = tracer.StartActiveSpan("SayHello");

span.SetAttribute("operation.value", 1);
span.SetAttribute("operation.name", "Saying hello!");
span.SetAttribute("operation.other-stuff", new int[] { 1, 2, 3 });

----------------------------------------

TITLE: Setting OTLP Exporter Endpoint in Shell
DESCRIPTION: Shell command to configure the OTLP exporter endpoint for an OpenTelemetry application

LANGUAGE: shell
CODE:
export OTEL_EXPORTER_OTLP_ENDPOINT=http://collector.example.com:4318

----------------------------------------

TITLE: Creating and Starting Spans in C++ with OpenTelemetry
DESCRIPTION: This code snippet demonstrates how to create and start a new span using OpenTelemetry in C++. It sets the span name, attributes, and puts it into the active context.

LANGUAGE: cpp
CODE:
std::string span_name = "CurrencyService/Convert";
auto span =
    get_tracer("currency")->StartSpan(span_name,
                                  {{SemanticConventions::kRpcSystem, "grpc"},
                                   {SemanticConventions::kRpcService, "oteldemo.CurrencyService"},
                                   {SemanticConventions::kRpcMethod, "Convert"},
                                   {SemanticConventions::kRpcGrpcStatusCode, 0}},
                                  options);
auto scope = get_tracer("currency")->WithActiveSpan(span);

----------------------------------------

TITLE: Configuring OpenTelemetry Agent via CLI
DESCRIPTION: Example of configuring the OpenTelemetry agent using command-line arguments including trace exporters, metrics exporters, and endpoint configuration

LANGUAGE: sh
CODE:
opentelemetry-instrument \
    --traces_exporter console,otlp \
    --metrics_exporter console \
    --service_name your-service-name \
    --exporter_otlp_endpoint 0.0.0.0:4317 \
    python myapp.py

----------------------------------------

TITLE: Creating Spans in Erlang and Elixir
DESCRIPTION: Shows how to create active spans using macros in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
?with_span(main, #{}, fun() ->
                        %% do work here.
                        %% when this function returns the Span ends
                      end).

LANGUAGE: elixir
CODE:
require OpenTelemetry.Tracer

...

OpenTelemetry.Tracer.with_span :main do
  # do work here
  # when the block ends the Span ends
end

----------------------------------------

TITLE: Adding Manual Tracing with OpenTelemetry
DESCRIPTION: Extends the basic application to add manual tracing using OpenTelemetry's TracerProvider, creating spans and adding events.

LANGUAGE: php
CODE:
<?php

use OpenTelemetry\API\Globals;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\Factory\AppFactory;

require __DIR__ . '/vendor/autoload.php';

$tracer = Globals::tracerProvider()->getTracer('demo');

$app = AppFactory::create();

$app->get('/rolldice', function (Request $request, Response $response) use ($tracer) {
    $span = $tracer
        ->spanBuilder('manual-span')
        ->startSpan();
    $result = random_int(1,6);
    $response->getBody()->write(strval($result));
    $span
        ->addEvent('rolled dice', ['result' => $result])
        ->end();
    return $response;
});

$app->run();

----------------------------------------

TITLE: Creating Nested Spans Manually in Swift
DESCRIPTION: This snippet demonstrates how to manually create nested spans in Swift, establishing a parent-child relationship between spans in different functions.

LANGUAGE: swift
CODE:
func parent() {
  let parentSpan = someTracer.spanBuilder(spanName: "parent span").startSpan()
  child(span: parentSpan)
  parentSpan.end()
}

func child(parentSpan: Span) {
let childSpan = someTracer.spanBuilder(spanName: "child span")
                             .setParent(parentSpan)
                             .startSpan()
  // do work
  childSpan.end()
}

----------------------------------------

TITLE: Writing OpenTelemetry Tests in Elixir
DESCRIPTION: Illustrates how to write tests for OpenTelemetry functionality in Elixir using ExUnit, including span record extraction, exporter setup, and span assertion.

LANGUAGE: elixir
CODE:
defmodule OtelGettingStartedTest do
  use ExUnit.Case

  # Use Record module to extract fields of the Span record from the opentelemetry dependency.
  require Record
  @fields Record.extract(:span, from: "deps/opentelemetry/include/otel_span.hrl")
  # Define macros for `Span`.
  Record.defrecordp(:span, @fields)

  test "greets the world" do
    # Set exporter to :otel_exporter_pid, which sends spans
    # to the given process - in this case self() - in the format {:span, span}
    :otel_simple_processor.set_exporter(:otel_exporter_pid, self())

    # Call the function to be tested.
    OtelGettingStarted.hello()

    # Use Erlang's `:otel_attributes` module to create attributes to match against.
    # See the `:otel_events` module for testing events.
    attributes = :otel_attributes.new([a_key: "a value"], 128, :infinity)

    # Assert that the span emitted by OtelGettingStarted.hello/0 was received and contains the desired attributes.
    assert_receive {:span,
                    span(
                      name: "operation",
                      attributes: ^attributes
                    )}
  end
end

----------------------------------------

TITLE: Configuring OTLP Exporter in ASP.NET Core
DESCRIPTION: Configuration of OpenTelemetry exporters in ASP.NET Core services with default gRPC settings

LANGUAGE: csharp
CODE:
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddOpenTelemetry()
    .WithTracing(tracing => tracing
        // The rest of your setup code goes here
        .AddOtlpExporter())
    .WithMetrics(metrics => metrics
        // The rest of your setup code goes here
        .AddOtlpExporter());

builder.Logging.AddOpenTelemetry(logging => {
    // The rest of your setup code goes here
    logging.AddOtlpExporter();
});

----------------------------------------

TITLE: Configuring ParentBasedSampler in Erlang Application Configuration
DESCRIPTION: Configures the ParentBasedSampler with TraceIdRatioBasedSampler for root spans and specific behaviors for different parent span states in Erlang application configuration.

LANGUAGE: erlang
CODE:
%% config/sys.config.src
{opentelemetry, {sampler, {parent_based, #{root => {trace_id_ratio_based, 0.10},
                                          remote_parent_sampled => always_on,
                                          remote_parent_not_sampled => always_off,
                                          local_parent_sampled => always_on,
                                          local_parent_not_sampled => always_off}}}}

----------------------------------------

TITLE: Configuring Service Pipelines
DESCRIPTION: Example configuration showing how to set up service pipelines for different data types.

LANGUAGE: yaml
CODE:
service:
  pipelines:
    metrics:
      receivers: [opencensus, prometheus]
      processors: [batch]
      exporters: [opencensus, prometheus]
    traces:
      receivers: [opencensus, jaeger]
      processors: [batch, memory_limiter]
      exporters: [opencensus, zipkin]
    traces/2:
      receivers: [opencensus]
      processors: [batch]
      exporters: [zipkin]

----------------------------------------

TITLE: Creating Nested Spans in Python with OpenTelemetry
DESCRIPTION: Show how to create nested spans to represent sub-operations within a larger operation.

LANGUAGE: python
CODE:
def do_work():
    with tracer.start_as_current_span("parent") as parent:
        # do some work that 'parent' tracks
        print("doing some work...")
        # Create a nested span to track nested work
        with tracer.start_as_current_span("child") as child:
            # do some work that 'child' tracks
            print("doing some nested work...")
            # the nested span is closed when it's out of scope

        # This span is also closed when it goes out of scope

----------------------------------------

TITLE: Creating Span Events in Swift
DESCRIPTION: This snippet demonstrates how to add events to a span in Swift, including custom attributes for the event.

LANGUAGE: swift
CODE:
let attributes = [
    "key" : AttributeValue.string("value"),
    "result" : AttributeValue.int(100)
]
span.addEvent(name: "computation complete", attributes: attributes)

----------------------------------------

TITLE: Implementing Custom MetricExporter in Java
DESCRIPTION: Example of implementing a custom MetricExporter that logs exported metrics.

LANGUAGE: Java
CODE:
public class CustomMetricExporter implements MetricExporter {

  private static final Logger logger = Logger.getLogger(CustomMetricExporter.class.getName());

  @Override
  public CompletableResultCode export(Collection<MetricData> metrics) {
    logger.log(Level.INFO, "Exporting metrics");
    metrics.forEach(metric -> logger.log(Level.INFO, "Metric: " + metric));
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode flush() {
    logger.log(Level.INFO, "flushing");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode shutdown() {
    logger.log(Level.INFO, "shutting down");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public AggregationTemporality getAggregationTemporality(InstrumentType instrumentType) {
    return AggregationTemporalitySelector.deltaPreferred()
        .getAggregationTemporality(instrumentType);
  }

  @Override
  public MemoryMode getMemoryMode() {
    return MemoryMode.REUSABLE_DATA;
  }

  @Override
  public Aggregation getDefaultAggregation(InstrumentType instrumentType) {
    return Aggregation.defaultAggregation();
  }
}

----------------------------------------

TITLE: Linking Spans in Erlang and Elixir
DESCRIPTION: Demonstrates how to create linked spans across different processes in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
Parent = ?current_span_ctx,
proc_lib:spawn_link(fun() ->
                        %% a new process has a new context so the span created
                        %% by the following `with_span` will have no parent
                        Link = opentelemetry:link(Parent),
                        ?with_span('other-process', #{links => [Link]},
                                   fun() -> ok end)
                    end),

LANGUAGE: elixir
CODE:
parent = OpenTelemetry.Tracer.current_span_ctx()
task = Task.async(fn ->
                    # a new process has a new context so the span created
                    # by the following `with_span` will have no parent
                    link = OpenTelemetry.link(parent)
                    Tracer.with_span :"my-task", %{links: [link]} do
                      :hello
                    end
                 end)

----------------------------------------

TITLE: Adding OpenTelemetry Java agent to Glassfish / Payara
DESCRIPTION: These snippets show how to add the OpenTelemetry Java agent to Glassfish / Payara using the asadmin tool on Linux and Windows.

LANGUAGE: sh
CODE:
<server_install_dir>/bin/asadmin create-jvm-options "-javaagent\:/path/to/opentelemetry-javaagent.jar"

LANGUAGE: powershell
CODE:
<server_install_dir>\bin\asadmin.bat create-jvm-options '-javaagent\:<Drive>\:\path\\to\\opentelemetry-javaagent.jar'

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation on Windows
DESCRIPTION: PowerShell commands for installing and configuring OpenTelemetry automatic instrumentation on Windows systems. Includes downloading the PowerShell module, installing core components, and setting up instrumentation.

LANGUAGE: powershell
CODE:
# PowerShell 5.1 or higher is required
# Download the module
$module_url = "https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/OpenTelemetry.DotNet.Auto.psm1"
$download_path = Join-Path $env:temp "OpenTelemetry.DotNet.Auto.psm1"
Invoke-WebRequest -Uri $module_url -OutFile $download_path -UseBasicParsing

# Import the module to use its functions
Import-Module $download_path

# Install core files (online vs offline method)
Install-OpenTelemetryCore
Install-OpenTelemetryCore -LocalPath "C:\Path\To\OpenTelemetry.zip"

# Set up the instrumentation for the current PowerShell session
Register-OpenTelemetryForCurrentSession -OTelServiceName "MyServiceDisplayName"

# Run your application with instrumentation
.\MyNetApp.exe

----------------------------------------

TITLE: Changing Default Propagation Format in Python OpenTelemetry
DESCRIPTION: Show how to change the default propagation format using SDK APIs, specifically to B3 format.

LANGUAGE: python
CODE:
from opentelemetry.propagate import set_global_textmap
from opentelemetry.propagators.b3 import B3Format

set_global_textmap(B3Format())

----------------------------------------

TITLE: Running Python Script with OpenTelemetry Auto-Instrumentation
DESCRIPTION: Shell commands to activate the virtual environment, set environment variables, and run the Python script with OpenTelemetry auto-instrumentation.

LANGUAGE: sh
CODE:
source python_logs_example/bin/activate

export OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
opentelemetry-instrument \
  --traces_exporter console,otlp \
  --metrics_exporter console,otlp \
  --logs_exporter console,otlp \
  --service_name python-logs-example \
  python $(pwd)/example.py

----------------------------------------

TITLE: OpenTelemetry Environment Configuration
DESCRIPTION: Example of configuring OpenTelemetry using environment variables for automatic SDK initialization with OTLP exporter settings.

LANGUAGE: shell
CODE:
OTEL_PHP_AUTOLOAD_ENABLED=true \
OTEL_EXPORTER_OTLP_PROTOCOL=grpc \
OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317 \
php example.php

----------------------------------------

TITLE: Adding Attributes to Auto-Instrumented Spans in Go with OpenTelemetry
DESCRIPTION: This code shows how to add custom attributes to an existing span in OpenTelemetry. It retrieves the current span from the context and sets multiple attributes using the SetAttributes method.

LANGUAGE: go
CODE:
span := trace.SpanFromContext(ctx)

span.SetAttributes(
    attribute.String("app.order.id", orderID.String()), shippingTrackingAttribute,
    attribute.Float64("app.shipping.amount", shippingCostFloat),
    attribute.Float64("app.order.amount", totalPriceFloat),
    attribute.Int("app.order.items.count", len(prep.orderItems)),
)

----------------------------------------

TITLE: Configuring Prometheus Exporter in C++
DESCRIPTION: This snippet shows how to configure and initialize the Prometheus exporter for metrics in C++. It sets up the exporter options, creates a meter provider, and configures the endpoint for Prometheus to scrape metrics.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/prometheus/exporter_factory.h"
#include "opentelemetry/exporters/prometheus/exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

namespace metrics_sdk      = opentelemetry::sdk::metrics;
namespace metrics_api      = opentelemetry::metrics;
namespace metrics_exporter = opentelemetry::exporter::metrics;

void InitMetrics()
{
    metrics_exporter::PrometheusExporterOptions opts;
    opts.url = "localhost:9464";
    auto prometheus_exporter = metrics_exporter::PrometheusExporterFactory::Create(opts);
    auto u_provider = metrics_sdk::MeterProviderFactory::Create();
    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());
    p->AddMetricReader(std::move(prometheus_exporter));
    std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));
    metrics_api::Provider::SetMeterProvider(provider);
}

----------------------------------------

TITLE: Adding Attributes to Spans in Swift
DESCRIPTION: This snippet shows how to add attributes to a span in Swift, using semantic conventions for HTTP requests as an example.

LANGUAGE: swift
CODE:
let span = tracer.spanBuilder("/resource/path").startSpan()
span.setAttribute("http.method", "GET");
span.setAttribute("http.url", url.toString());

----------------------------------------

TITLE: Running the Rails Server
DESCRIPTION: Command to start the Rails server on port 8080 for testing the application.

LANGUAGE: sh
CODE:
rails server -p 8080

----------------------------------------

TITLE: Implementing Oat++ HTTP Server in C++
DESCRIPTION: This code creates a simple HTTP server using Oat++ that responds to GET requests on the /rolldice endpoint with a random number.

LANGUAGE: cpp
CODE:
#include "oatpp/web/server/HttpConnectionHandler.hpp"
#include "oatpp/network/Server.hpp"
#include "oatpp/network/tcp/server/ConnectionProvider.hpp"
#include <cstdlib>
#include <ctime>
#include <string>

using namespace std;

class Handler : public oatpp::web::server::HttpRequestHandler {
public:
  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {
    int low = 1;
    int high = 7;
    int random = rand() % (high - low) + low;
    // Convert a std::string to oatpp::String
    const string response = to_string(random);
    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());
  }
};

void run() {
  auto router = oatpp::web::server::HttpRouter::createShared();
  router->route("GET", "/rolldice", std::make_shared<Handler>());
  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);
  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({"localhost", 8080, oatpp::network::Address::IP_4});
  oatpp::network::Server server(connectionProvider, connectionHandler);
  OATPP_LOGI("Dice Server", "Server running on port %s", static_cast<const char*>(connectionProvider->getProperty("port").getData()));
  server.run();
}

int main() {
  oatpp::base::Environment::init();
  srand((int)time(0));
  run();
  oatpp::base::Environment::destroy();
  return 0;
}

----------------------------------------

TITLE: Renaming Metric Label using Regex in OpenTelemetry Collector
DESCRIPTION: Configures the metrics transform processor to rename the 'cluster_name' label to 'cluster-name' for all metrics using a regular expression.

LANGUAGE: yaml
CODE:
processors:
  metricstransform/clustername:
    transforms:
      - include: ^.*$
        match_type: regexp
        action: update
        operations:
          - action: update_label
            label: cluster_name
            new_label: cluster-name

----------------------------------------

TITLE: Deploying OpenTelemetry Collector on Kubernetes
DESCRIPTION: Command to deploy the OpenTelemetry Collector as a daemonset and a single gateway instance on Kubernetes using a pre-defined configuration.

LANGUAGE: sh
CODE:
kubectl apply -f https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/v{{% param vers %}}/examples/k8s/otel-config.yaml

----------------------------------------

TITLE: Installing OpenTelemetry Go Packages
DESCRIPTION: Install the necessary OpenTelemetry Go packages for tracing.

LANGUAGE: sh
CODE:
go get go.opentelemetry.io/otel \
  go.opentelemetry.io/otel/trace \
  go.opentelemetry.io/otel/sdk \

----------------------------------------

TITLE: Creating Nested Spans in Ruby
DESCRIPTION: Shows how to create parent and child spans to represent nested operations.

LANGUAGE: ruby
CODE:
require "opentelemetry/sdk"

def parent_work
  MyAppTracer.in_span("parent") do |span|
    # do some work that the 'parent' span tracks!

    child_work

    # do some more work afterwards
  end
end

def child_work
  MyAppTracer.in_span("child") do |span|
    # do some work that the 'child' span tracks!
  end
end

----------------------------------------

TITLE: Creating and Configuring Activity for Tracing
DESCRIPTION: Creates an Activity instance with custom tags for tracing specific operations.

LANGUAGE: csharp
CODE:
using (var activity = RegisteredActivity.StartActivity("Main"))
{
   activity?.SetTag("foo", "bar1");
   // your logic for Main activity
}

----------------------------------------

TITLE: Configuring Multiple Span Processors in Swift
DESCRIPTION: This snippet shows how to configure multiple span processors in OpenTelemetry Swift, including a BatchSpanProcessor for OTLP export and a SimpleSpanProcessor for stdout export.

LANGUAGE: swift
CODE:
let otlpConfiguration = OtlpConfiguration(timeout: OtlpConfiguration.DefaultTimeoutInterval)

let grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1))
                                                  .connect(host: <collector host>, port: <collector port>)

let traceExporter = OtlpTraceExporter(channel: grpcChannel
                                      config: otlpConfiguration)

// build & register the Tracer Provider using the built otlp trace exporter
OpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()
                                                      .add(spanProcessor:BatchSpanProcessor(spanExporter: traceExporter))
                                                      .add(spanProcessor:SimpleSpanProcessor(spanExporter: StdoutExporter))
                                                      .with(resource: Resource())
                                                      .build())

----------------------------------------

TITLE: Configuring OpenTelemetry Collector Deployment
DESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector as a Deployment, focusing on collecting cluster-level metrics and Kubernetes events.

LANGUAGE: yaml
CODE:
mode: deployment

image:
  repository: otel/opentelemetry-collector-k8s

replicaCount: 1

presets:
  clusterMetrics:
    enabled: true
  kubernetesEvents:
    enabled: true

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent in Dockerfile
DESCRIPTION: Sets up the OpenTelemetry Java agent for automatic instrumentation of libraries like Kafka using the JAVA_TOOL_OPTIONS environment variable. The agent is configured through the Dockerfile and used during Gradle script execution.

LANGUAGE: dockerfile
CODE:
ENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar

----------------------------------------

TITLE: Initializing Context Manager in OpenTelemetry JavaScript
DESCRIPTION: Shows how to configure and enable a context manager using AsyncHooksContextManager. This is typically provided by the SDK but can be registered directly.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';
import { AsyncHooksContextManager } from '@opentelemetry/context-async-hooks';

const contextManager = new AsyncHooksContextManager();
contextManager.enable();
api.context.setGlobalContextManager(contextManager);

----------------------------------------

TITLE: Creating a Manual Span in OpenTelemetry
DESCRIPTION: This code snippet shows how to create a manual span using OpenTelemetry in Node.js. It's useful for verifying that the tracer provider is working correctly when auto-instrumentation is not producing expected results.

LANGUAGE: javascript
CODE:
import { trace } from '@opentelemetry/api';
trace
  .getTracerProvider()
  .getTracer('debug')
  .startSpan('test manual span')
  .end();

----------------------------------------

TITLE: Implementing GCP Function Handler with HTTP Call
DESCRIPTION: JavaScript code for a GCP Function handler that makes an HTTPS request to opentelemetry.io and returns the response.

LANGUAGE: javascript
CODE:
/* index.js */
const functions = require('@google-cloud/functions-framework');
const https = require('https');

functions.http('helloHttp', (req, res) => {
  let url = 'https://opentelemetry.io/';
  https
    .get(url, (response) => {
      res.send(`Response ${response.body}!`);
    })
    .on('error', (e) => {
      res.send(`Error ${e}!`);
    });
});

----------------------------------------

TITLE: Initializing OpenTelemetry Tracer Provider in Python
DESCRIPTION: Sets up the OpenTelemetry tracer provider with batch span processing and OTLP export. Uses environment variables for configuration of export endpoints, resource attributes, and service name.

LANGUAGE: python
CODE:
tracer_provider = TracerProvider()
trace.set_tracer_provider(tracer_provider)
tracer_provider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))

----------------------------------------

TITLE: Defining Dependencies for GCP Functions with OpenTelemetry
DESCRIPTION: JSON configuration of package.json dependencies required for instrumenting GCP Functions with OpenTelemetry.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@google-cloud/functions-framework": "^3.0.0",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/auto-instrumentations-node": "^0.56.1",
    "@opentelemetry/exporter-trace-otlp-http": "^0.57.2",
    "@opentelemetry/instrumentation": "^0.57.2",
    "@opentelemetry/sdk-node": "^0.57.2",
    "@opentelemetry/sdk-trace-base": "^1.30.1",
    "@opentelemetry/sdk-trace-node": "^1.30.1",
    "@opentelemetry/resources": "^1.30.1",
    "@opentelemetry/semantic-conventions": "^1.30.0"
  }
}

----------------------------------------

TITLE: Installing OpenTelemetry Go Metrics Packages
DESCRIPTION: Install the necessary OpenTelemetry Go packages for metrics.

LANGUAGE: sh
CODE:
go get go.opentelemetry.io/otel \
  go.opentelemetry.io/otel/exporters/stdout/stdoutmetric \
  go.opentelemetry.io/otel/sdk \
  go.opentelemetry.io/otel/sdk/metric

----------------------------------------

TITLE: Setting Span Status in Swift
DESCRIPTION: This snippet shows how to set the status of a span in Swift, particularly in error scenarios.

LANGUAGE: swift
CODE:
func myFunction() {
  let span = someTracer.spanBuilder(spanName: "my span").startSpan()
  defer {
    span.end()
  }
  guard let criticalData = get() else {
      span.status = .error(description: "something bad happened")
      return
  }
  // do something
}

----------------------------------------

TITLE: Configuring OTLP HTTP Exporter in C++
DESCRIPTION: This snippet demonstrates how to configure and initialize the OTLP HTTP exporter for traces, metrics, and logs in C++. It includes setting up the exporter options, creating processors, and setting global providers.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/batch_span_processor_factory.h"
#include "opentelemetry/sdk/trace/batch_span_processor_options.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"
#include "opentelemetry/sdk/trace/tracer_provider.h"

#include "opentelemetry/exporters/otlp/otlp_http_metric_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_metric_exporter_options.h"
#include "opentelemetry/metrics/provider.h"
#include "opentelemetry/sdk/metrics/aggregation/default_aggregation.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h"
#include "opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h"
#include "opentelemetry/sdk/metrics/meter_context_factory.h"
#include "opentelemetry/sdk/metrics/meter_provider.h"
#include "opentelemetry/sdk/metrics/meter_provider_factory.h"

#include "opentelemetry/exporters/otlp/otlp_http_log_record_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_log_record_exporter_options.h"
#include "opentelemetry/logs/provider.h"
#include "opentelemetry/sdk/logs/logger_provider_factory.h"
#include "opentelemetry/sdk/logs/processor.h"
#include "opentelemetry/sdk/logs/simple_log_record_processor_factory.h"

namespace trace_api = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;

namespace metric_sdk = opentelemetry::sdk::metrics;
namespace metrics_api = opentelemetry::metrics;

namespace otlp = opentelemetry::exporter::otlp;

namespace logs_api = opentelemetry::logs;
namespace logs_sdk = opentelemetry::sdk::logs;


void InitTracer()
{
  trace_sdk::BatchSpanProcessorOptions bspOpts{};
  otlp::OtlpHttpExporterOptions opts;
  opts.url = "http://localhost:4318/v1/traces";
  auto exporter  = otlp::OtlpHttpExporterFactory::Create(opts);
  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);
  std::shared_ptr<trace_api::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));
  trace_api::Provider::SetTracerProvider(provider);
}

void InitMetrics()
{
  otlp::OtlpHttpMetricExporterOptions opts;
  opts.url = "http://localhost:4318/v1/metrics";
  auto exporter = otlp::OtlpHttpMetricExporterFactory::Create(opts);
  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;
  reader_options.export_interval_millis = std::chrono::milliseconds(1000);
  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);
  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);
  auto context = metric_sdk::MeterContextFactory::Create();
  context->AddMetricReader(std::move(reader));
  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));
  std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));
  metrics_api::Provider::SetMeterProvider(provider);
}

void InitLogger()
{
  otlp::OtlpHttpLogRecordExporterOptions opts;
  opts.url = "http://localhost:4318/v1/logs";
  auto exporter  = otlp::OtlpHttpLogRecordExporterFactory::Create(opts);
  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<logs_api::LoggerProvider> provider =
      logs_sdk::LoggerProviderFactory::Create(std::move(processor));
  logs_api::Provider::SetLoggerProvider(provider);
}

----------------------------------------

TITLE: Setting Span Status in Python with OpenTelemetry
DESCRIPTION: Show how to set the status of a span, typically used to indicate errors.

LANGUAGE: python
CODE:
from opentelemetry import trace
from opentelemetry.trace import Status, StatusCode

current_span = trace.get_current_span()

try:
    # something that might fail
except:
    current_span.set_status(Status(StatusCode.ERROR))

----------------------------------------

TITLE: Implementing GrpcServerCarrier for Context Propagation in C++
DESCRIPTION: This class implements the TextMapCarrier interface to extract context from inbound gRPC requests. It's used for tracing context propagation in the Currency Service.

LANGUAGE: cpp
CODE:
class GrpcServerCarrier : public opentelemetry::context::propagation::TextMapCarrier
{
public:
  GrpcServerCarrier(ServerContext *context) : context_(context) {}
  GrpcServerCarrier() = default;
  virtual opentelemetry::nostd::string_view Get(
      opentelemetry::nostd::string_view key) const noexcept override
  {
    auto it = context_->client_metadata().find(key.data());
    if (it != context_->client_metadata().end())
    {
      return it->second.data();
    }
    return "";
  }

  virtual void Set(opentelemetry::nostd::string_view key,
                   opentelemetry::nostd::string_view value) noexcept override
  {
   // Not required for server
  }

  ServerContext *context_;
};

----------------------------------------

TITLE: Installing OpenTelemetry Python Packages
DESCRIPTION: Commands to install the OpenTelemetry distro package and bootstrap the auto-instrumentation

LANGUAGE: sh
CODE:
pip install opentelemetry-distro opentelemetry-exporter-otlp
opentelemetry-bootstrap -a install

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent via Command Line
DESCRIPTION: Demonstrates how to launch a Java application with the OpenTelemetry agent using direct command line arguments to specify the agent path and service name.

LANGUAGE: shell
CODE:
java -javaagent:path/to/opentelemetry-javaagent.jar -Dotel.service.name=your-service-name -jar myapp.jar

----------------------------------------

TITLE: Implementing Config Validation in Go
DESCRIPTION: Implements the Validate method to check if the receiver configuration is valid.

LANGUAGE: go
CODE:
func (cfg *Config) Validate() error {
	interval, _ := time.ParseDuration(cfg.Interval)
	if interval.Minutes() < 1 {
		return fmt.Errorf("when defined, the interval has to be set to at least 1 minute (1m)")
	}

	if cfg.NumberOfTraces < 1 {
		return fmt.Errorf("number_of_traces must be greater or equal to 1")
	}
	return nil
}

----------------------------------------

TITLE: Configuring MetricExporters in Java
DESCRIPTION: Demonstrates configuration of OTLP HTTP, OTLP gRPC, logging, and OTLP JSON logging metric exporters.

LANGUAGE: Java
CODE:
public static MetricExporter otlpHttpMetricExporter(String endpoint) {
  return OtlpHttpMetricExporter.builder()
      .setEndpoint(endpoint)
      .addHeader("api-key", "value")
      .setTimeout(Duration.ofSeconds(10))
      .build();
}

public static MetricExporter otlpGrpcMetricExporter(String endpoint) {
  return OtlpGrpcMetricExporter.builder()
      .setEndpoint(endpoint)
      .addHeader("api-key", "value")
      .setTimeout(Duration.ofSeconds(10))
      .build();
}

public static MetricExporter logginMetricExporter() {
  return LoggingMetricExporter.create();
}

public static MetricExporter otlpJsonLoggingMetricExporter() {
  return OtlpJsonLoggingMetricExporter.create();
}

----------------------------------------

TITLE: Installing OTLP Exporter Dependencies
DESCRIPTION: Commands to install OTLP exporter packages for different protocols (HTTP/Proto, HTTP/JSON, gRPC) in a Node.js project.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/exporter-trace-otlp-proto \
  @opentelemetry/exporter-metrics-otlp-proto

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/exporter-trace-otlp-http \
  @opentelemetry/exporter-metrics-otlp-http

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/exporter-trace-otlp-grpc \
  @opentelemetry/exporter-metrics-otlp-grpc

----------------------------------------

TITLE: Configuring OpenTelemetry Environment Variables
DESCRIPTION: These commands set up environment variables for OpenTelemetry, including exporter configuration and service name. The Unix shell version uses export and source commands, while the PowerShell version sets environment variables and registers OpenTelemetry for the current session.

LANGUAGE: sh
CODE:
export OTEL_TRACES_EXPORTER=console \
  OTEL_METRICS_EXPORTER=console \
  OTEL_LOGS_EXPORTER=console
  OTEL_SERVICE_NAME=RollDiceService
. $HOME/.otel-dotnet-auto/instrument.sh

LANGUAGE: powershell
CODE:
$env:OTEL_TRACES_EXPORTER="console"
$env:OTEL_METRICS_EXPORTER="console"
$env:OTEL_LOGS_EXPORTER="console"
Register-OpenTelemetryForCurrentSession -OTelServiceName "RollDiceService"

----------------------------------------

TITLE: Configuring Detailed Debug Exporter
DESCRIPTION: YAML configuration to enable detailed output for the debug exporter, which prints the entire payload.

LANGUAGE: yaml
CODE:
exporters:
  debug:
    verbosity: detailed

----------------------------------------

TITLE: Configuring OpenTelemetry Dependencies in Package.swift
DESCRIPTION: Updated Package.swift configuration adding OpenTelemetry dependencies including API, SDK, StdoutExporter, and ResourceExtension.

LANGUAGE: swift
CODE:
// swift-tools-version:5.9
import PackageDescription


let package = Package(
    name: "dice-server",
    platforms: [
       .macOS(.v13)
    ],
    dependencies: [
        .package(url: "https://github.com/vapor/vapor.git", from: "4.83.1"),
        .package(url: "https://github.com/open-telemetry/opentelemetry-swift", from: "1.0.0"),
    ],
    targets: [
        .executableTarget(
            name: "DiceApp",
            dependencies: [
                .product(name: "Vapor", package: "vapor"),
                .product(name: "OpenTelemetryApi", package: "opentelemetry-swift"),
                .product(name: "OpenTelemetrySdk", package: "opentelemetry-swift"),
                .product(name: "StdoutExporter", package: "opentelemetry-swift"),
                .product(name: "ResourceExtension", package: "opentelemetry-swift"),
            ],
            path: "."
        )
    ]
)

----------------------------------------

TITLE: Creating New Spans in Python
DESCRIPTION: This code shows how to create and manage new spans using the OpenTelemetry Tracer object with a 'with' block.

LANGUAGE: python
CODE:
with tracer.start_as_current_span("get_product_list") as span:

----------------------------------------

TITLE: Creating Main Application File
DESCRIPTION: PHP code for the main application file using Slim framework and the dice rolling library.

LANGUAGE: php
CODE:
<?php
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Log\LogLevel;
use Slim\Factory\AppFactory;
use Monolog\Logger;
use Monolog\Level;
use Monolog\Handler\StreamHandler;

require __DIR__ . '/vendor/autoload.php';

require('dice.php');

$logger = new Logger('dice-server');
$logger->pushHandler(new StreamHandler('php://stdout', Level::INFO));

$app = AppFactory::create();

$dice = new Dice();

$app->get('/rolldice', function (Request $request, Response $response) use ($logger, $dice) {
    $params = $request->getQueryParams();
    if(isset($params['rolls'])) {
        $result = $dice->roll($params['rolls']);
        if (isset($params['player'])) {
          $logger->info("A player is rolling the dice.", ['player' => $params['player'], 'result' => $result]);
        } else {
          $logger->info("Anonymous player is rolling the dice.", ['result' => $result]);
        }
        $response->getBody()->write(json_encode($result));
    } else {
        $response->withStatus(400)->getBody()->write("Please enter a number of rolls");
    }
    return $response;
});

$app->run();

----------------------------------------

TITLE: Adding Span Events in Rust OpenTelemetry
DESCRIPTION: This snippet shows how to add events to a span in Rust using OpenTelemetry. It demonstrates adding an event for tracking ID creation.

LANGUAGE: rust
CODE:
let tid = create_tracking_id();
span.set_attribute(KeyValue::new("app.shipping.tracking.id", tid.clone()));
info!("Tracking ID Created: {}", tid);

----------------------------------------

TITLE: Setting Propagators Configuration
DESCRIPTION: Example of configuring propagators for context propagation in OpenTelemetry.

LANGUAGE: shell
CODE:
export OTEL_PROPAGATORS="b3"

----------------------------------------

TITLE: Configuring Custom Authentication for OTLP Exporter
DESCRIPTION: Java configuration class that customizes the OTLP exporter to add custom authentication headers.

LANGUAGE: java
CODE:
package otel;

import io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;
import io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;
import java.util.Collections;
import java.util.Map;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class CustomAuth {
  @Bean
  public AutoConfigurationCustomizerProvider otelCustomizer() {
    return p ->
        p.addSpanExporterCustomizer(
            (exporter, config) -> {
              if (exporter instanceof OtlpHttpSpanExporter) {
                return ((OtlpHttpSpanExporter) exporter)
                    .toBuilder().setHeaders(this::headers).build();
              }
              return exporter;
            });
  }

  private Map<String, String> headers() {
    return Collections.singletonMap("Authorization", "Bearer " + refreshToken());
  }

  private String refreshToken() {
    // e.g. read the token from a kubernetes secret
    return "token";
  }
}

----------------------------------------

TITLE: Initializing OpenTelemetry Meter Provider in Go
DESCRIPTION: Sets up the OpenTelemetry meter provider with OTLP gRPC exporter and periodic reader configuration.

LANGUAGE: go
CODE:
func initMeterProvider() *sdkmetric.MeterProvider {
    ctx := context.Background()

    exporter, err := otlpmetricgrpc.New(ctx)
    if err != nil {
        log.Fatalf("new otlp metric grpc exporter failed: %v", err)
    }

    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))
    global.SetMeterProvider(mp)
    return mp
}

----------------------------------------

TITLE: Shared Exporter Pipeline Configuration
DESCRIPTION: Shows configuration for multiple pipelines sharing the same exporter.

LANGUAGE: yaml
CODE:
exporters:
  otlp:
    protocols:
      grpc:
        endpoint: localhost:14250

service:
  pipelines:
    traces: # a pipeline of "traces" type
      receivers: [zipkin]
      processors: [memory_limiter]
      exporters: [otlp]
    traces/2: # another pipeline of "traces" type
      receivers: [otlp]
      processors: [transform]
      exporters: [otlp]

----------------------------------------

TITLE: Configuring Custom Exporter
DESCRIPTION: Example of configuring a custom exporter in a Node.js application using TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
import * as opentelemetry from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';

const sdk = new NodeSDK({
  spanProcessors: [new SimpleSpanProcessor(exporter)],
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

LANGUAGE: javascript
CODE:
/*instrumentation.js*/
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');

const sdk = new opentelemetry.NodeSDK({
  spanProcessors: [new SimpleSpanProcessor(exporter)],
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

----------------------------------------

TITLE: Creating a Manual Span in PHP with OpenTelemetry
DESCRIPTION: Illustrates how to manually create a span using a Tracer in PHP. The span is set as a child of the active span in the current execution context.

LANGUAGE: php
CODE:
$span = Globals::tracerProvider()
    ->getTracer('manual-instrumentation')
    ->spanBuilder('calculate-quote')
    ->setSpanKind(SpanKind::KIND_INTERNAL)
    ->startSpan();
/* calculate quote */
$span->end();

----------------------------------------

TITLE: Creating Dice Library Class in C#
DESCRIPTION: Implementation of a dice rolling library class that will be instrumented with OpenTelemetry

LANGUAGE: csharp
CODE:
public class Dice
{
    private int min;
    private int max;

    public Dice(int min, int max)
    {
        this.min = min;
        this.max = max;
    }

    public List<int> rollTheDice(int rolls)
    {
        List<int> results = new List<int>();

        for (int i = 0; i < rolls; i++)
        {
            results.Add(rollOnce());
        }

        return results;
    }

    private int rollOnce()
    {
        return Random.Shared.Next(min, max + 1);
    }
}

----------------------------------------

TITLE: Configuring NGINX for CORS with OpenTelemetry Collector
DESCRIPTION: NGINX configuration example for setting up CORS headers to allow browser-based applications to send telemetry to an OpenTelemetry Collector.

LANGUAGE: nginx
CODE:
server {
    listen 80 default_server;
    server_name _;
    location / {
        # Take care of preflight requests
        if ($request_method = 'OPTIONS') {
             add_header 'Access-Control-Max-Age' 1728000;
             add_header 'Access-Control-Allow-Origin' 'name.of.your.website.example.com' always;
             add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type' always;
             add_header 'Access-Control-Allow-Credentials' 'true' always;
             add_header 'Content-Type' 'text/plain charset=UTF-8';
             add_header 'Content-Length' 0;
             return 204;
        }

        add_header 'Access-Control-Allow-Origin' 'name.of.your.website.example.com' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type' always;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://collector:4318;
    }
}

----------------------------------------

TITLE: Configuring Custom Sampler in Elixir Application Configuration
DESCRIPTION: Configures a custom sampler to not sample spans with a specific HTTP target attribute in Elixir application configuration.

LANGUAGE: elixir
CODE:
config :opentelemetry, sampler: {AttributesSampler, %{"http.target": "/healthcheck"}}

----------------------------------------

TITLE: Adding Span Attributes
DESCRIPTION: PHP code showing how to add attributes to a span.

LANGUAGE: php
CODE:
private function rollOnce() {
    $parent = OpenTelemetry\API\Trace\Span::getCurrent();
    $scope = $parent->activate();
    try {
        $span = $this->tracer->spanBuilder("rollTheDice")->startSpan();
        $result = random_int(1, 6);
        $span->setAttribute('dicelib.rolled', $result);
        $span->end();
    } finally {
        $scope->detach();
    }
    return $result;
}

----------------------------------------

TITLE: Translating Metrics to OTLP in Cloud Foundry's Forwarder Agent (Go)
DESCRIPTION: This code snippet shows the implementation of translating Cloud Foundry's custom metric format to OpenTelemetry Protocol (OTLP) in the Forwarder Agent. It demonstrates how Cloud Foundry integrated OpenTelemetry into their existing metric system.

LANGUAGE: Go
CODE:
// 200 lines of Go code to translate metrics to OTLP
// and forward them to the OpenTelemetry Collector
// Example location: github.com/cloudfoundry/loggregator-agent-release/blob/1fd275fe85d6190bac73dc1195007cc8726c1871/src/pkg/otelcolclient/otelcolclient.go#L108-L153

----------------------------------------

TITLE: Initializing OpenTelemetry Tracing in PHP
DESCRIPTION: Demonstrates how to initialize OpenTelemetry tracing in PHP using SDK autoloading. This is enabled by setting the OTEL_PHP_AUTOLOAD_ENABLED environment variable to true.

LANGUAGE: php
CODE:
require __DIR__ . '/../vendor/autoload.php';

----------------------------------------

TITLE: Configuring Zipkin Exporter in C++
DESCRIPTION: This snippet demonstrates how to configure and initialize the Zipkin exporter for traces in C++. It sets up the exporter options, creates a tracer provider with a resource, and configures the global trace provider.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/zipkin/zipkin_exporter_factory.h"
#include "opentelemetry/sdk/resource/resource.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"
#include "opentelemetry/sdk/trace/tracer_provider_factory.h"
#include "opentelemetry/trace/provider.h"

namespace trace     = opentelemetry::trace;
namespace trace_sdk = opentelemetry::sdk::trace;
namespace zipkin    = opentelemetry::exporter::zipkin;
namespace resource  = opentelemetry::sdk::resource;

void InitTracer()
{
  zipkin::ZipkinExporterOptions opts;
  resource::ResourceAttributes attributes = {{"service.name", "zipkin_demo_service"}};
  auto resource                           = resource::Resource::Create(attributes);
  auto exporter                           = zipkin::ZipkinExporterFactory::Create(opts);
  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));
  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =
      trace_sdk::TracerProviderFactory::Create(std::move(processor), resource);
  // Set the global trace provider
  trace::Provider::SetTracerProvider(provider);
}

----------------------------------------

TITLE: Adding Account ID Attribute to Spans in OpenTelemetry Collector
DESCRIPTION: Configures the attributes processor to add an 'account_id' attribute with a value of 2245 to all spans.

LANGUAGE: yaml
CODE:
processors:
  attributes/accountid:
    actions:
      - key: account_id
        value: 2245
        action: insert

----------------------------------------

TITLE: Tracking Current Span in Ruby
DESCRIPTION: Shows how to access the current span and add attributes to it.

LANGUAGE: ruby
CODE:
require "opentelemetry/sdk"

def track_extended_warranty(extended_warranty)
  # Get the current span
  current_span = OpenTelemetry::Trace.current_span

  # And add useful stuff to it!
  current_span.add_attributes({
    "com.extended_warranty.id" => extended_warranty.id,
    "com.extended_warranty.timestamp" => extended_warranty.timestamp
  })
end

----------------------------------------

TITLE: Disabling Specific OpenTelemetry Instrumentation
DESCRIPTION: Example showing how to configure OpenTelemetry SDK with Redis instrumentation disabled while enabling all others.

LANGUAGE: ruby
CODE:
require 'opentelemetry/sdk'
require 'opentelemetry/instrumentation/all'

OpenTelemetry::SDK.configure do |c|
  config = {'OpenTelemetry::Instrumentation::Redis' => { enabled: false }}
  c.use_all(config)
end

----------------------------------------

TITLE: Adding HTTP Instrumentation in Rust OpenTelemetry
DESCRIPTION: This snippet shows how to add HTTP instrumentation to a Rust service using OpenTelemetry. It demonstrates the setup of a reqwest client with tracing middleware.

LANGUAGE: rust
CODE:
let reqwest_client = reqwest::Client::new();
let client = ClientBuilder::new(reqwest_client)
    .with(TracingMiddleware::<SpanBackendWithUrl>::new())
    .build();

----------------------------------------

TITLE: Configuring OTLP Exporter in Node.js
DESCRIPTION: Example of configuring OTLP exporter for traces and metrics in a Node.js application using TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
import * as opentelemetry from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';
import { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-proto';
import { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new OTLPTraceExporter({
    // optional - default url is http://localhost:4318/v1/traces
    url: '<your-otlp-endpoint>/v1/traces',
    // optional - collection of custom headers to be sent with each request, empty by default
    headers: {},
  }),
  metricReader: new PeriodicExportingMetricReader({
    exporter: new OTLPMetricExporter({
      url: '<your-otlp-endpoint>/v1/metrics', // url is optional and can be omitted - default is http://localhost:4318/v1/metrics
      headers: {}, // an optional object containing custom headers to be sent with each request
    }),
  }),
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

LANGUAGE: javascript
CODE:
/*instrumentation.js*/
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-proto');
const {
  OTLPMetricExporter,
} = require('@opentelemetry/exporter-metrics-otlp-proto');
const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new OTLPTraceExporter({
    // optional - default url is http://localhost:4318/v1/traces
    url: '<your-otlp-endpoint>/v1/traces',
    // optional - collection of custom headers to be sent with each request, empty by default
    headers: {},
  }),
  metricReader: new PeriodicExportingMetricReader({
    exporter: new OTLPMetricExporter({
      url: '<your-otlp-endpoint>/v1/metrics', // url is optional and can be omitted - default is http://localhost:4318/v1/metrics
      headers: {}, // an optional object containing custom headers to be sent with each request
      concurrencyLimit: 1, // an optional limit on pending requests
    }),
  }),
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

----------------------------------------

TITLE: Installing Prometheus Exporter
DESCRIPTION: Command to install the Prometheus exporter package for OpenTelemetry in a Node.js project.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/exporter-prometheus

----------------------------------------

TITLE: Enabling Kubernetes Attributes Preset
DESCRIPTION: YAML configuration to enable the Kubernetes attributes preset in the OpenTelemetry Collector Chart.

LANGUAGE: yaml
CODE:
mode: daemonset
presets:
  kubernetesAttributes:
    enabled: true

----------------------------------------

TITLE: Initializing OpenTelemetry Logging in .NET
DESCRIPTION: Configures OpenTelemetry logging using the .NET LoggingBuilder with OTLP exporter.

LANGUAGE: csharp
CODE:
builder.Logging
    .AddOpenTelemetry(options => options.AddOtlpExporter());

----------------------------------------

TITLE: Installing OpenTelemetry Packages for Console App
DESCRIPTION: Commands to add required OpenTelemetry NuGet packages for a console application.

LANGUAGE: sh
CODE:
dotnet add package OpenTelemetry
dotnet add package OpenTelemetry.Exporter.Console

----------------------------------------

TITLE: Implementing Custom Sampler Provider
DESCRIPTION: This code snippet shows how to implement a custom ConfigurableSamplerProvider to allow a custom sampler to participate in autoconfiguration.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
import io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider;
import io.opentelemetry.sdk.trace.samplers.Sampler;

public class CustomSamplerProvider implements ConfigurableSamplerProvider {

  @Override
  public Sampler createSampler(ConfigProperties config) {
    // Callback invoked when OTEL_TRACES_SAMPLER is set to the value from getName().
    return new CustomSampler();
  }

  @Override
  public String getName() {
    return "custom-sampler";
  }
}

----------------------------------------

TITLE: Adding Semantic Attributes
DESCRIPTION: PHP code demonstrating how to add semantic attributes to a span using OpenTelemetry conventions.

LANGUAGE: php
CODE:
use OpenTelemetry\SemConv\TraceAttributes;
use OpenTelemetry\SemConv\TraceAttributeValues;

$span->setAttribute(TraceAttributes::CODE_FUNCTION, 'rollOnce');
$span->setAttribute(TraceAttributes::CODE_FILEPATH, __FILE__);

----------------------------------------

TITLE: Capturing Baggage at Different Contexts in OpenTelemetry Python
DESCRIPTION: Demonstrates how to capture baggage at different contexts using OpenTelemetry in Python. It sets baggage in parent and child spans and then retrieves the baggage values.

LANGUAGE: python
CODE:
from opentelemetry import trace, baggage

tracer = trace.get_tracer("my.tracer")
with tracer.start_as_current_span(name="root span") as root_span:
    parent_ctx = baggage.set_baggage("context", "parent")
    with tracer.start_as_current_span(
        name="child span", context=parent_ctx
    ) as child_span:
        child_ctx = baggage.set_baggage("context", "child")

print(baggage.get_baggage("context", parent_ctx))
print(baggage.get_baggage("context", child_ctx))

----------------------------------------

TITLE: Configuring Zipkin Exporter in Ruby
DESCRIPTION: Ruby configuration code for setting up the Zipkin exporter in a Rails initializer file.

LANGUAGE: ruby
CODE:
# config/initializers/opentelemetry.rb
require 'opentelemetry/sdk'
require 'opentelemetry/instrumentation/all'

require 'opentelemetry-exporter-zipkin'
OpenTelemetry::SDK.configure do |c|
  c.service_name = 'dice-ruby'
  c.use_all() # enables all instrumentation!
end

----------------------------------------

TITLE: Configuring OpenTelemetry for Windows Services
DESCRIPTION: PowerShell commands to set up OpenTelemetry instrumentation for a Windows Service running a .NET application.

LANGUAGE: powershell
CODE:
# Import the module
Import-Module "OpenTelemetry.DotNet.Auto.psm1"

# Install core files
Install-OpenTelemetryCore

# Set up your Windows Service instrumentation
Register-OpenTelemetryForWindowsService -WindowsServiceName "WindowsServiceName" -OTelServiceName "MyServiceDisplayName"

----------------------------------------

TITLE: Configuring Tracing in ASP.NET Core
DESCRIPTION: Code snippet to configure OpenTelemetry tracing in an ASP.NET Core application, including setting up a tracer provider and ASP.NET Core instrumentation.

LANGUAGE: csharp
CODE:
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;

// These can come from a config file, constants file, etc.
var serviceName = "MyCompany.MyProduct.MyService";
var serviceVersion = "1.0.0";

var builder = WebApplication.CreateBuilder(args);

// Configure important OpenTelemetry settings, the console exporter, and instrumentation library
builder.Services.AddOpenTelemetry().WithTracing(tcb =>
{
    tcb
    .AddSource(serviceName)
    .SetResourceBuilder(
        ResourceBuilder.CreateDefault()
            .AddService(serviceName: serviceName, serviceVersion: serviceVersion))
    .AddAspNetCoreInstrumentation()
    .AddConsoleExporter();
});

----------------------------------------

TITLE: Setting a Sampler on TracerProvider in OpenTelemetry Go
DESCRIPTION: This snippet demonstrates how to set a sampler on the tracer provider using the WithSampler option. In this example, the AlwaysSample sampler is used, which means every span will be sampled.

LANGUAGE: go
CODE:
provider := trace.NewTracerProvider(
    trace.WithSampler(trace.AlwaysSample()),
)

----------------------------------------

TITLE: Adding Span Events in Go with OpenTelemetry
DESCRIPTION: These code snippets demonstrate how to add events to a span in OpenTelemetry. It shows adding events both with and without additional attributes using the AddEvent method.

LANGUAGE: go
CODE:
span.AddEvent("prepared")

LANGUAGE: go
CODE:
span.AddEvent("charged",
    trace.WithAttributes(attribute.String("app.payment.transaction.id", txID)))

----------------------------------------

TITLE: Connecting to Database with otelsql
DESCRIPTION: Go function demonstrating how to use otelsql.Open to create an instrumented database connection and register DB stats metrics.

LANGUAGE: go
CODE:
func connectDB() *sql.DB {
	// Connect to database
	db, err := otelsql.Open("mysql", mysqlDSN, otelsql.WithAttributes(
		semconv.DBSystemMySQL,
	))
	if err != nil {
		log.Fatal(err)
	}

	// Register DB stats to meter
	err = otelsql.RegisterDBStatsMetrics(db, otelsql.WithAttributes(
		semconv.DBSystemMySQL,
	))
	if err != nil {
		log.Fatal(err)
	}
	return db
}

----------------------------------------

TITLE: Configuring Zipkin Exporter
DESCRIPTION: Example of configuring the Zipkin exporter in a Node.js application using TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
import * as opentelemetry from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { ZipkinExporter } from '@opentelemetry/exporter-zipkin';

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new ZipkinExporter({}),
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

LANGUAGE: javascript
CODE:
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const { ZipkinExporter } = require('@opentelemetry/exporter-zipkin');

const sdk = new opentelemetry.NodeSDK({
  traceExporter: new ZipkinExporter({}),
  instrumentations: [getNodeAutoInstrumentations()],
});

----------------------------------------

TITLE: Configuring Prometheus Exporter
DESCRIPTION: Example of configuring the Prometheus exporter in a Node.js application using TypeScript and JavaScript.

LANGUAGE: typescript
CODE:
import * as opentelemetry from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { PrometheusExporter } from '@opentelemetry/exporter-prometheus';

const sdk = new opentelemetry.NodeSDK({
  metricReader: new PrometheusExporter({
    port: 9464, // optional - default is 9464
  }),
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

LANGUAGE: javascript
CODE:
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const { PrometheusExporter } = require('@opentelemetry/exporter-prometheus');
const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');
const sdk = new opentelemetry.NodeSDK({
  metricReader: new PrometheusExporter({
    port: 9464, // optional - default is 9464
  }),
  instrumentations: [getNodeAutoInstrumentations()],
});
sdk.start();

----------------------------------------

TITLE: Acquiring a Tracer in Erlang and Elixir
DESCRIPTION: Demonstrates how to get an application-specific Tracer in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
opentelemetry:get_application_tracer(?MODULE)

LANGUAGE: elixir
CODE:
:opentelemetry.get_application_tracer(__MODULE__)

----------------------------------------

TITLE: Adding Span Events
DESCRIPTION: PHP code showing how to add events to a span.

LANGUAGE: php
CODE:
$span->addEvent("Init");
...
$span->addEvent("End");

LANGUAGE: php
CODE:
$eventAttributes = Attributes::create([
    "operation" => "calculate-pi",
    "result" => 3.14159,
]);
$span->addEvent("End Computation", $eventAttributes);

----------------------------------------

TITLE: Creating and Incrementing a Counter Metric in PHP with OpenTelemetry
DESCRIPTION: Demonstrates how to create a counter metric from the global MeterProvider and increment it each time a quote is generated, including an attribute for the number of items.

LANGUAGE: php
CODE:
static $counter;
$counter ??= Globals::meterProvider()
    ->getMeter('quotes')
    ->createCounter('quotes', 'quotes', 'number of quotes calculated');
$counter->add(1, ['number_of_items' => $numberOfItems]);

----------------------------------------

TITLE: Configuring OTLP Exporter in Ruby
DESCRIPTION: Ruby configuration code for setting up the OTLP exporter in a Rails initializer file, including service name configuration and instrumentation setup.

LANGUAGE: ruby
CODE:
# config/initializers/opentelemetry.rb
require 'opentelemetry/sdk'
require 'opentelemetry/instrumentation/all'
require 'opentelemetry-exporter-otlp'
OpenTelemetry::SDK.configure do |c|
  c.service_name = 'dice-ruby'
  c.use_all() # enables all instrumentation!
end

----------------------------------------

TITLE: Creating New Spans in Ruby
DESCRIPTION: Demonstrates how to create new spans using the tracer.

LANGUAGE: ruby
CODE:
require "opentelemetry/sdk"

def do_work
  MyAppTracer.in_span("do_work") do |span|
    # do some work that the 'do_work' span tracks!
  end
end

----------------------------------------

TITLE: Generating a Dice Controller in Rails
DESCRIPTION: Command to generate a new controller for handling dice rolling functionality in the Rails application.

LANGUAGE: sh
CODE:
rails generate controller dice

----------------------------------------

TITLE: Configuring OTLP Metrics Export
DESCRIPTION: YAML configuration for pushing internal Collector metrics to an OTLP backend

LANGUAGE: yaml
CODE:
service:
  telemetry:
    metrics:
      readers:
        - periodic:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: https://backend:4318

----------------------------------------

TITLE: Installing OTLP Dependencies
DESCRIPTION: Commands to install required NuGet packages for OpenTelemetry Protocol (OTLP) exporter

LANGUAGE: shell
CODE:
dotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol
dotnet add package OpenTelemetry.Extensions.Hosting

----------------------------------------

TITLE: Configuring OpenTelemetry Exporter and Processor in Elixir
DESCRIPTION: Sets up the OpenTelemetry exporter and processor for testing in an Elixir application's test.exs file.

LANGUAGE: elixir
CODE:
import Config

config :opentelemetry,
    traces_exporter: :none

config :opentelemetry, :processors, [
  {:otel_simple_processor, %{}}
]

----------------------------------------

TITLE: Managing Active Context in OpenTelemetry
DESCRIPTION: Demonstrates working with active contexts including getting, setting, and nesting contexts using the with() method.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';

const key = api.createContextKey('Key to store a value');
const ctx = api.context.active();

api.context.with(ctx.setValue(key, 'context 2'), async () => {
  // "context 2" is active
  console.log(api.context.active().getValue(key)); // "context 2"
});

----------------------------------------

TITLE: Inserting Kubernetes Cluster Name as Resource Attribute in OpenTelemetry Collector
DESCRIPTION: Configures the resource processor to insert the Kubernetes cluster name as a resource attribute, using the value from an existing 'k8s-cluster' attribute.

LANGUAGE: yaml
CODE:
processors:
  resource/k8s:
    attributes:
      - key: k8s.cluster.name
        from_attribute: k8s-cluster
        action: insert

----------------------------------------

TITLE: Implementing HTTP GET Request Filter in ASP.NET
DESCRIPTION: C# implementation of a filter to collect telemetry only for HTTP GET requests using AspNetInstrumentationOptions.

LANGUAGE: csharp
CODE:
this.tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddAspNetInstrumentation(
        (options) => options.Filter =
            (httpContext) =>
            {
                // only collect telemetry about HTTP GET requests
                return httpContext.Request.HttpMethod.Equals("GET");
            })
    .Build();

----------------------------------------

TITLE: Adding gRPC Auto-Instrumentation for Client in Go with OpenTelemetry
DESCRIPTION: This function creates a gRPC client connection with OpenTelemetry instrumentation. It wraps the gRPC client with otelgrpc.NewClientHandler() to automatically instrument outgoing gRPC calls.

LANGUAGE: go
CODE:
func createClient(ctx context.Context, svcAddr string) (*grpc.ClientConn, error) {
    return grpc.DialContext(ctx, svcAddr,
        grpc.WithTransportCredentials(insecure.NewCredentials()),
        grpc.WithStatsHandler(otelgrpc.NewClientHandler()),
    )
}

----------------------------------------

TITLE: Adding OpenTelemetry Collector to Docker Compose
DESCRIPTION: YAML configuration to add the OpenTelemetry Collector to a Docker Compose file, including volume mounting and port exposures.

LANGUAGE: yaml
CODE:
otel-collector:
  image: otel/opentelemetry-collector-contrib
  volumes:
    - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
  ports:
    - 1888:1888 # pprof extension
    - 8888:8888 # Prometheus metrics exposed by the Collector
    - 8889:8889 # Prometheus exporter metrics
    - 13133:13133 # health_check extension
    - 4317:4317 # OTLP gRPC receiver
    - 4318:4318 # OTLP http receiver
    - 55679:55679 # zpages extension

----------------------------------------

TITLE: Creating Nested Spans
DESCRIPTION: PHP code demonstrating how to create nested spans for tracking nested operations.

LANGUAGE: php
CODE:
private function rollOnce() {
    $parent = OpenTelemetry\API\Trace\Span::getCurrent();
    $scope = $parent->activate();
    try {
        $span = $this->tracer->spanBuilder("rollTheDice")->startSpan();
        $result = random_int(1, 6);
        $span->end();
    } finally {
        $scope->detach();
    }
    return $result;
}

----------------------------------------

TITLE: Using Asynchronous Meters
DESCRIPTION: PHP code showing how to use asynchronous (observable) meters for recording metrics.

LANGUAGE: php
CODE:
$queue = [
    'job1',
    'job2',
    'job3',
];
$reader = $meterProvider
    ->getMeter('demo_meter')
    ->createObservableGauge('queued', 'jobs', 'The number of jobs enqueued')
    ->observe(static function (ObserverInterface $observer) use (&$queue): void {
        $observer->observe(count($queue));
    });
$reader->collect();
array_pop($queue);
$reader->collect();

----------------------------------------

TITLE: Configuring Peer Service Mapping with Port and Path in OpenTelemetry
DESCRIPTION: Shows an advanced configuration for peer service mapping, including port and path specifications. This allows for more granular control over the peer.service attribute assignment.

LANGUAGE: text
CODE:
1.2.3.4:443=cats-service,dogs-abcdef123.serverlessapis.com:80/api=dogs-api

----------------------------------------

TITLE: Multi-Pipeline Receiver Configuration
DESCRIPTION: Shows how to configure a single receiver to send data to multiple pipelines.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: localhost:4317

service:
  pipelines:
    traces: # a pipeline of "traces" type
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp]
    traces/2: # another pipeline of "traces" type
      receivers: [otlp]
      processors: [transform]
      exporters: [otlp]

----------------------------------------

TITLE: Initializing TracerProvider with DefaultResource in Swift
DESCRIPTION: Demonstrates how to register a TracerProvider with DefaultResource for OpenTelemetry Swift implementation. This configuration captures device, OS, and application details automatically.

LANGUAGE: swift
CODE:
OpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()
            .with(resource: DefaultResource.get())
            .build())

----------------------------------------

TITLE: Installing Rails with Ruby Gem
DESCRIPTION: Command to install the Rails framework using the Ruby gem package manager.

LANGUAGE: sh
CODE:
gem install rails

----------------------------------------

TITLE: Creating New Spans with OpenTelemetry in Ruby
DESCRIPTION: This snippet shows how to create new spans and place them into active context using a tracer object and the 'in_span' method with a block.

LANGUAGE: ruby
CODE:
tracer = OpenTelemetry.tracer_provider.tracer('email')
tracer.in_span("send_email") do |span|
  # logic in context of span here
end

----------------------------------------

TITLE: Installing OpenTelemetry Demo with Helm
DESCRIPTION: Command to install the OpenTelemetry Demo Helm chart with a release name of 'my-otel-demo'.

LANGUAGE: shell
CODE:
helm install my-otel-demo open-telemetry/opentelemetry-demo

----------------------------------------

TITLE: Adding Kafka (Sarama) Auto-Instrumentation in Go with OpenTelemetry
DESCRIPTION: This code snippet demonstrates how to instrument a Kafka producer using the Sarama library with OpenTelemetry. It wraps the AsyncProducer with otelsarama.WrapAsyncProducer() for automatic instrumentation.

LANGUAGE: go
CODE:
saramaConfig := sarama.NewConfig()
producer, err := sarama.NewAsyncProducer(brokers, saramaConfig)
if err != nil {
    return nil, err
}
producer = otelsarama.WrapAsyncProducer(saramaConfig, producer)

----------------------------------------

TITLE: Deleting Context Values in OpenTelemetry
DESCRIPTION: Shows how to delete values from a context using deleteValue() method. Demonstrates that deletion creates a new context without modifying the original.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';

const key = api.createContextKey('some key');
const ctx = api.ROOT_CONTEXT;
const ctx2 = ctx.setValue(key, 'context 2');

// remove the entry
const ctx3 = ctx.deleteValue(key);

// ctx3 does not contain the entry
console.log(ctx3.getValue(key)); // undefined

// ctx2 is unchanged
console.log(ctx2.getValue(key)); // "context 2"
// ctx is unchanged
console.log(ctx.getValue(key)); // undefined

----------------------------------------

TITLE: Configuring Debug Exporter in YAML
DESCRIPTION: Example YAML configuration for using the debug exporter to confirm that the Collector is receiving, processing, and exporting data.

LANGUAGE: yaml
CODE:
receivers:
  zipkin:
exporters:
  debug:
service:
  pipelines:
    traces:
      receivers: [zipkin]
      processors: []
      exporters: [debug]

----------------------------------------

TITLE: Generating Redirects in Hugo Template
DESCRIPTION: This snippet iterates through all pages in a Hugo site and generates redirects based on page parameters and aliases. It handles both relative and absolute paths for redirect sources and destinations, and uses partial templates for additional redirect generation.

LANGUAGE: gotemplate
CODE:
{{/* Generate redirects for all given pages */ -}}
{{/* cSpell:ignore cond */ -}}

{{ range $p := .Site.Pages -}}

  {{ range $p.Params.redirects -}}
    {{ $from := cond (strings.HasPrefix .from "/")
        .from
        (print $p.RelPermalink .from) -}}
    {{ $to := cond (strings.HasPrefix .to "/")
        .to
        (print $p.RelPermalink .to) -}}
    {{ $from | printf "%-35s" }} {{ $to }}
  {{ end -}}

  {{ partial "redirects/aliases.txt" $p -}}
  {{ partial "redirects/redirect.txt" $p -}}

{{ end -}}

----------------------------------------

TITLE: Implementing Custom ResourceProvider
DESCRIPTION: This code snippet demonstrates how to implement a custom ResourceProvider to contribute to the autoconfigured resource.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
import io.opentelemetry.sdk.autoconfigure.spi.ResourceProvider;
import io.opentelemetry.sdk.resources.Resource;

public class CustomResourceProvider implements ResourceProvider {

  @Override
  public Resource createResource(ConfigProperties config) {
    // Callback invoked to contribute to the resource.
    return Resource.builder().put("my.custom.resource.attribute", "abc123").build();
  }

  @Override
  public int order() {
    // Optionally influence the order of invocation.
    return 0;
  }
}

----------------------------------------

TITLE: Adding Events to a Span in .NET
DESCRIPTION: Demonstrates how to add events to a span, including events with timestamps and attributes.

LANGUAGE: csharp
CODE:
using var span = tracer.StartActiveSpan("SayHello");

// ...

span.AddEvent("Doing something...");

// ...

span.AddEvent("Dit it!");

// ...

span.AddEvent("event-message");
span.AddEvent("event-message2", DateTimeOffset.Now);

// ...

var attributeData = new Dictionary<string, object>
{
    {"foo", 1 },
    { "bar", "Hello, World!" },
    { "baz", new int[] { 1, 2, 3 } }
};

span.AddEvent("asdf", DateTimeOffset.Now, new(attributeData));

----------------------------------------

TITLE: Exporter Configuration Example
DESCRIPTION: Illustrates how to configure multiple exporters of the same type with different endpoints.

LANGUAGE: yaml
CODE:
exporters:
  otlp/1:
    endpoint: example.com:4317
  otlp/2:
    endpoint: localhost:14317

----------------------------------------

TITLE: Installing OpenTelemetry Ruby Dependencies
DESCRIPTION: Gemfile entries for installing the OpenTelemetry SDK, OTLP exporter, and all instrumentation libraries.

LANGUAGE: sh
CODE:
gem 'opentelemetry-sdk'
gem 'opentelemetry-exporter-otlp'
gem 'opentelemetry-instrumentation-all'

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation Libraries with pip
DESCRIPTION: Command to install specific OpenTelemetry instrumentation libraries using pip package manager.

LANGUAGE: sh
CODE:
pip install opentelemetry-instrumentation-{instrumented-library}

----------------------------------------

TITLE: Configuring Express Instrumentation
DESCRIPTION: These snippets demonstrate how to configure the Express instrumentation library with additional options, such as request hooks and attribute setting.

LANGUAGE: typescript
CODE:
import { Span } from '@opentelemetry/api';
import {
  SEMATTRS_HTTP_METHOD,
  SEMATTRS_HTTP_URL,
} from '@opentelemetry/semantic-conventions';
import {
  ExpressInstrumentation,
  ExpressLayerType,
  ExpressRequestInfo,
} from '@opentelemetry/instrumentation-express';

const expressInstrumentation = new ExpressInstrumentation({
  requestHook: function (span: Span, info: ExpressRequestInfo) {
    if (info.layerType === ExpressLayerType.REQUEST_HANDLER) {
      span.setAttribute(SEMATTRS_HTTP_METHOD, info.request.method);
      span.setAttribute(SEMATTRS_HTTP_URL, info.request.baseUrl);
    }
  },
});

LANGUAGE: javascript
CODE:
/*instrumentation.js*/
const {
  SEMATTRS_HTTP_METHOD,
  SEMATTRS_HTTP_URL,
} = require('@opentelemetry/semantic-conventions');
const {
  ExpressInstrumentation,
  ExpressLayerType,
} = require('@opentelemetry/instrumentation-express');

const expressInstrumentation = new ExpressInstrumentation({
  requestHook: function (span, info) {
    if (info.layerType === ExpressLayerType.REQUEST_HANDLER) {
      span.setAttribute(SEMATTRS_HTTP_METHOD, info.request.method);
      span.setAttribute(SEMATTRS_HTTP_URL, info.request.baseUrl);
    }
  },
});

----------------------------------------

TITLE: Using @WithSpan with Parameters in Java
DESCRIPTION: Example of using the @WithSpan annotation with parameters to customize span creation in Java.

LANGUAGE: Java
CODE:
@WithSpan(kind = SpanKind.CLIENT, inheritContext = false)
public void myMethod() {
    <...>
}

----------------------------------------

TITLE: Configuring Exemplars with Custom Histograms
DESCRIPTION: Sets up exemplar configuration with custom histograms for tracking method latencies in the Cart service.

LANGUAGE: csharp
CODE:
private static readonly ActivitySource CartActivitySource = new("OpenTelemetry.Demo.Cart");
private static readonly Meter CartMeter = new Meter("OpenTelemetry.Demo.Cart");
private static readonly Histogram<long> addItemHistogram = CartMeter.CreateHistogram<long>(
    "app.cart.add_item.latency",
    advice: new InstrumentAdvice<long>
    {
        HistogramBucketBoundaries = [ 500000, 600000, 700000, 800000, 900000, 1000000, 1100000 ]
    });
private static readonly Histogram<long> getCartHistogram = CartMeter.CreateHistogram<long>(
    "app.cart.get_cart.latency",
    advice: new InstrumentAdvice<long>
    {
        HistogramBucketBoundaries = [ 300000, 400000, 500000, 600000, 700000, 800000, 900000 ]
    });

----------------------------------------

TITLE: Creating Context Keys in OpenTelemetry
DESCRIPTION: Demonstrates how to create context keys using the api.createContextKey() method. These keys are used for storing key-value pairs in the context.

LANGUAGE: typescript
CODE:
import * as api from '@opentelemetry/api';

const key1 = api.createContextKey('My first key');
const key2 = api.createContextKey('My second key');

----------------------------------------

TITLE: Listing Collector Components
DESCRIPTION: Shell command to list available components in a Collector distribution, including their stability levels.

LANGUAGE: shell
CODE:
otelcol components

----------------------------------------

TITLE: Including OpenTelemetry Java Introduction Section
DESCRIPTION: This snippet includes a reusable documentation section for introducing OpenTelemetry Java. It uses a custom shortcode to insert the content.

LANGUAGE: markdown
CODE:
{{% docs/languages/index-intro java /%}}

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with Target Allocator
DESCRIPTION: Example configuration for enabling Target Allocator in an OpenTelemetryCollector Custom Resource. Shows the initial configuration with static targets and metric relabeling rules.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: collector-with-ta
spec:
  mode: statefulset
  targetAllocator:
    enabled: true
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 10s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]
            metric_relabel_configs:
            - action: labeldrop
              regex: (id|name)
              replacement: $$1
            - action: labelmap
              regex: label_(.+)
              replacement: $$1

    exporters:
      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
      debug:

    service:
      pipelines:
        metrics:
          receivers: [prometheus]
          processors: []
          exporters: [debug]

----------------------------------------

TITLE: Installing OpenTelemetry Packages for ASP.NET Core
DESCRIPTION: Commands to add required OpenTelemetry NuGet packages for an ASP.NET Core application.

LANGUAGE: sh
CODE:
dotnet add package OpenTelemetry --prerelease
dotnet add package OpenTelemetry.Instrumentation.AspNetCore --prerelease
dotnet add package OpenTelemetry.Extensions.Hosting --prerelease
dotnet add package OpenTelemetry.Exporter.Console --prerelease

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation Library in PHP
DESCRIPTION: Command to install a specific OpenTelemetry instrumentation library using Composer. The user needs to replace {name-of-instrumentation} with the Packagist reference and {version-number} with the desired version.

LANGUAGE: sh
CODE:
php composer.phar install {name-of-instrumentation}:{version-number}

----------------------------------------

TITLE: Implementing AutoConfigurationCustomizerProvider
DESCRIPTION: This code snippet shows how to implement the AutoConfigurationCustomizerProvider interface to customize various autoconfigured SDK components.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizer;
import io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;
import java.util.Collections;

public class CustomizerProvider implements AutoConfigurationCustomizerProvider {

  @Override
  public void customize(AutoConfigurationCustomizer customizer) {
    // Optionally customize TextMapPropagator.
    customizer.addPropagatorCustomizer((textMapPropagator, configProperties) -> textMapPropagator);
    // Optionally customize Resource.
    customizer.addResourceCustomizer((resource, configProperties) -> resource);
    // Optionally customize Sampler.
    customizer.addSamplerCustomizer((sampler, configProperties) -> sampler);
    // Optionally customize SpanExporter.
    customizer.addSpanExporterCustomizer((spanExporter, configProperties) -> spanExporter);
    // Optionally customize SpanProcessor.
    customizer.addSpanProcessorCustomizer((spanProcessor, configProperties) -> spanProcessor);
    // Optionally supply additional properties.
    customizer.addPropertiesSupplier(Collections::emptyMap);
    // Optionally customize ConfigProperties.
    customizer.addPropertiesCustomizer(configProperties -> Collections.emptyMap());
    // Optionally customize SdkTracerProviderBuilder.
    customizer.addTracerProviderCustomizer((builder, configProperties) -> builder);
    // Optionally customize SdkMeterProviderBuilder.
    customizer.addMeterProviderCustomizer((builder, configProperties) -> builder);
    // Optionally customize MetricExporter.
    customizer.addMetricExporterCustomizer((metricExporter, configProperties) -> metricExporter);
    // Optionally customize MetricReader.
    customizer.addMetricReaderCustomizer((metricReader, configProperties) -> metricReader);
    // Optionally customize SdkLoggerProviderBuilder.
    customizer.addLoggerProviderCustomizer((builder, configProperties) -> builder);
    // Optionally customize LogRecordExporter.
    customizer.addLogRecordExporterCustomizer((exporter, configProperties) -> exporter);
    // Optionally customize LogRecordProcessor.
    customizer.addLogRecordProcessorCustomizer((processor, configProperties) -> processor);
  }

  @Override
  public int order() {
    // Optionally influence the order of invocation.
    return 0;
  }
}

----------------------------------------

TITLE: Adding Zipkin Exporter Dependencies - Maven Configuration
DESCRIPTION: Maven dependency configuration for adding OpenTelemetry Zipkin exporter to a Spring project. This includes the opentelemetry-exporter-zipkin artifact with version placeholder.

LANGUAGE: xml
CODE:
<dependencies>
  <dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-zipkin</artifactId>
    <version>{{% param vers.otel %}}</version>
  </dependency>
</dependencies>

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation on Linux/macOS
DESCRIPTION: Shell commands to download, install and configure OpenTelemetry automatic instrumentation on Linux and macOS systems. Includes downloading the installation script, setting up permissions, and running an instrumented application.

LANGUAGE: shell
CODE:
# Download the bash script
curl -sSfL https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/otel-dotnet-auto-install.sh -O

# Install core files
sh ./otel-dotnet-auto-install.sh

# Enable execution for the instrumentation script
chmod +x $HOME/.otel-dotnet-auto/instrument.sh

# Setup the instrumentation for the current shell session
. $HOME/.otel-dotnet-auto/instrument.sh

# Run your application with instrumentation
OTEL_SERVICE_NAME=myapp OTEL_RESOURCE_ATTRIBUTES=deployment.environment=staging,service.version=1.0.0 ./MyNetApp

----------------------------------------

TITLE: Creating Spans with @WithSpan Annotation in Java
DESCRIPTION: Example of using the @WithSpan annotation to create a span around a method in Java.

LANGUAGE: Java
CODE:
import io.opentelemetry.instrumentation.annotations.WithSpan;

public class MyClass {
  @WithSpan
  public void myMethod() {
      <...>
  }
}

----------------------------------------

TITLE: Installing OpenTelemetry Dependencies for AWS Lambda
DESCRIPTION: Command to install required OpenTelemetry packages for instrumenting AWS Lambda functions.

LANGUAGE: shell
CODE:
npm install \
  @opentelemetry/api \
  @opentelemetry/auto-instrumentations-node \
  @opentelemetry/exporter-trace-otlp-http \
  @opentelemetry/instrumentation \
  @opentelemetry/sdk-trace-base \
  @opentelemetry/sdk-trace-node

----------------------------------------

TITLE: Generating Self-Signed Certificates
DESCRIPTION: Commands to generate self-signed certificates for secure communication.

LANGUAGE: shell
CODE:
cfssl genkey -initca csr.json | cfssljson -bare ca
cfssl gencert -ca ca.pem -ca-key ca-key.pem csr.json | cfssljson -bare cert

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation Package
DESCRIPTION: Command to install an OpenTelemetry instrumentation package via NuGet. The package name follows the pattern 'OpenTelemetry.Instrumentation.{library-name-or-type}'.

LANGUAGE: sh
CODE:
dotnet add package OpenTelemetry.Instrumentation.{library-name-or-type}

----------------------------------------

TITLE: Generating Trace IDs and Span IDs in Go
DESCRIPTION: Implements functions to generate new trace IDs and span IDs for OpenTelemetry traces.

LANGUAGE: go
CODE:
func NewTraceID() pcommon.TraceID {
	return pcommon.TraceID(uuid.New())
}

func NewSpanID() pcommon.SpanID {
	var rngSeed int64
	_ = binary.Read(crand.Reader, binary.LittleEndian, &rngSeed)
	randSource := rand.New(rand.NewSource(rngSeed))

	var sid [8]byte
	randSource.Read(sid[:])
	spanID := pcommon.SpanID(sid)

	return spanID
}

----------------------------------------

TITLE: Manual Context Propagation in JavaScript (Receiving Service)
DESCRIPTION: JavaScript code showing how to extract and set trace context in a receiving service for manual context propagation.

LANGUAGE: javascript
CODE:
import { context, propagation, trace } from '@opentelemetry/api';

const input = {};

let activeContext = propagation.extract(context.active(), input);

let tracer = trace.getTracer('app-name');

let span = tracer.startSpan(
  spanName,
  {
    attributes: {},
  },
  activeContext,
);

trace.setSpan(activeContext, span);

----------------------------------------

TITLE: Implementing Custom TextMapPropagator in Java
DESCRIPTION: Example of implementing a custom TextMapPropagator with placeholder methods for injecting and extracting context.

LANGUAGE: Java
CODE:
public class CustomTextMapPropagator implements TextMapPropagator {

  @Override
  public Collection<String> fields() {
    return Collections.emptyList();
  }

  @Override
  public <C> void inject(Context context, C carrier, TextMapSetter<C> setter) {
  }

  @Override
  public <C> Context extract(Context context, C carrier, TextMapGetter<C> getter) {
    return context;
  }
}

----------------------------------------

TITLE: Logging Events
DESCRIPTION: PHP code showing how to log events using an EventLogger.

LANGUAGE: php
CODE:
$logger = $loggerProvider->getLogger('demo', '1.0', 'http://schema.url', [/*attributes*/]);
$eventLogger = new EventLogger($logger, 'my-domain');
$record = (new LogRecord('hello world'))
    ->setSeverityText('INFO')
    ->setAttributes([/*attributes*/]);

$eventLogger->logEvent('foo', $record);

----------------------------------------

TITLE: Implementing Custom Span Exporter Provider
DESCRIPTION: This code snippet demonstrates how to implement a custom ConfigurableSpanExporterProvider to allow a custom span exporter to participate in autoconfiguration.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
import io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider;
import io.opentelemetry.sdk.trace.export.SpanExporter;

public class CustomSpanExporterProvider implements ConfigurableSpanExporterProvider {

  @Override
  public SpanExporter createExporter(ConfigProperties config) {
    // Callback invoked when OTEL_TRACES_EXPORTER includes the value from getName().
    return new CustomSpanExporter();
  }

  @Override
  public String getName() {
    return "custom-exporter";
  }
}

----------------------------------------

TITLE: Defining Receiver Config Struct in Go
DESCRIPTION: Defines the configuration struct for the tailtracer receiver, including interval and number of traces settings.

LANGUAGE: go
CODE:
type Config struct {
   Interval       string `mapstructure:"interval"`
   NumberOfTraces int    `mapstructure:"number_of_traces"`
}

----------------------------------------

TITLE: Implementing Custom SpanExporter in Java
DESCRIPTION: Example of implementing a custom SpanExporter that logs exported spans.

LANGUAGE: Java
CODE:
public class CustomSpanExporter implements SpanExporter {

  private static final Logger logger = Logger.getLogger(CustomSpanExporter.class.getName());

  @Override
  public CompletableResultCode export(Collection<SpanData> spans) {
    logger.log(Level.INFO, "Exporting spans");
    spans.forEach(span -> logger.log(Level.INFO, "Span: " + span));
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode flush() {
    logger.log(Level.INFO, "flushing");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode shutdown() {
    logger.log(Level.INFO, "shutting down");
    return CompletableResultCode.ofSuccess();
  }
}

----------------------------------------

TITLE: Creating ActivitySource for Custom Traces
DESCRIPTION: Initializes an ActivitySource instance for custom trace instrumentation with a specified name.

LANGUAGE: csharp
CODE:
private static readonly ActivitySource RegisteredActivity = new ActivitySource("Examples.ManualInstrumentations.Registered");

----------------------------------------

TITLE: Initializing Logging in Python
DESCRIPTION: This code initializes the OpenTelemetry SDK for logging by creating a logger provider, adding a batch processor with an OTLP exporter, and setting up a logging handler.

LANGUAGE: python
CODE:
logger_provider = LoggerProvider(
    resource=Resource.create(
        {
            'service.name': service_name,
        }
    ),
)
set_logger_provider(logger_provider)
log_exporter = OTLPLogExporter(insecure=True)
logger_provider.add_log_record_processor(BatchLogRecordProcessor(log_exporter))
handler = LoggingHandler(level=logging.NOTSET, logger_provider=logger_provider)

logger = logging.getLogger('main')
logger.addHandler(handler)

----------------------------------------

TITLE: gRPC Server Auto-instrumentation in Go
DESCRIPTION: Configures automatic OpenTelemetry instrumentation for a gRPC server using StatsHandler.

LANGUAGE: go
CODE:
srv := grpc.NewServer(
    grpc.StatsHandler(otelgrpc.NewServerHandler()),
)

----------------------------------------

TITLE: Configuring OpenTelemetry via php.ini
DESCRIPTION: INI configuration to enable and configure OpenTelemetry auto-instrumentation in the PHP configuration file.

LANGUAGE: INI
CODE:
OTEL_PHP_AUTOLOAD_ENABLED="true"
OTEL_SERVICE_NAME=your-service-name
OTEL_TRACES_EXPORTER=otlp
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
OTEL_PROPAGATORS=baggage,tracecontext

----------------------------------------

TITLE: Handling Span Exceptions in OpenTelemetry
DESCRIPTION: Demonstrates how to record exceptions and set error status on spans for error handling.

LANGUAGE: javascript
CODE:
span.recordException(err);
span.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });

----------------------------------------

TITLE: Manual Context Propagation in TypeScript (Receiving Service)
DESCRIPTION: TypeScript code showing how to extract and set trace context in a receiving service for manual context propagation.

LANGUAGE: typescript
CODE:
import {
  type Context,
  propagation,
  trace,
  Span,
  context,
} from '@opentelemetry/api';

interface Carrier {
  traceparent?: string;
  tracestate?: string;
}

const input: Carrier = {};

let activeContext: Context = propagation.extract(context.active(), input);

let tracer = trace.getTracer('app-name');

let span: Span = tracer.startSpan(
  spanName,
  {
    attributes: {},
  },
  activeContext,
);

trace.setSpan(activeContext, span);

----------------------------------------

TITLE: Programmatic Flask Instrumentation in Python
DESCRIPTION: Example of programmatically instrumenting a Flask application using FlaskInstrumentor with optional URL exclusion configuration.

LANGUAGE: python
CODE:
instrumentor = FlaskInstrumentor()

app = Flask(__name__)

instrumentor.instrument_app(app)
# instrumentor.instrument_app(app, excluded_urls="/server_request")
@app.route("/server_request")
def server_request():
    print(request.args.get("param"))
    return "served"

----------------------------------------

TITLE: Service Language Legend Visualization
DESCRIPTION: Mermaid diagram showing the color coding for different programming languages used in the microservices architecture.

LANGUAGE: mermaid
CODE:
graph TD
subgraph Service Legend
  dotnetsvc(.NET):::dotnet
  cppsvc(C++):::cpp
  golangsvc(Go):::golang
  javasvc(Java):::java
  javascriptsvc(JavaScript):::javascript
  kotlinsvc(Kotlin):::kotlin
  phpsvc(PHP):::php
  pythonsvc(Python):::python
  rubysvc(Ruby):::ruby
  rustsvc(Rust):::rust
  typescriptsvc(TypeScript):::typescript
end

----------------------------------------

TITLE: Implementing OpenTelemetry Wrapper for GCP Functions
DESCRIPTION: JavaScript code for the GCP Functions wrapper that sets up OpenTelemetry tracing. It configures the tracer provider, span processor, and registers auto-instrumentations.

LANGUAGE: javascript
CODE:
/* otelwrapper.js */

const { Resource } = require('@opentelemetry/resources');
const {
  SEMRESATTRS_SERVICE_NAME,
} = require('@opentelemetry/semantic-conventions');
const api = require('@opentelemetry/api');
const { BatchSpanProcessor } = require('@opentelemetry/sdk-trace-base');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-http');
const { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');
const { registerInstrumentations } = require('@opentelemetry/instrumentation');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');

api.diag.setLogger(new api.DiagConsoleLogger(), api.DiagLogLevel.ALL);

const collectorOptions = {
  url: '<address for your backend>',
};

const provider = new NodeTracerProvider({
  resource: resourceFromAttributes({
    [SEMRESATTRS_SERVICE_NAME]: '<your function name>',
  }),
  spanProcessors: [
    new BatchSpanProcessor(new OTLPTraceExporter(collectorOptions)),
  ],
});

provider.register();

registerInstrumentations({
  instrumentations: [getNodeAutoInstrumentations()],
});

----------------------------------------

TITLE: Querying Ingress Traces Pipeline Metrics in Prometheus
DESCRIPTION: These Prometheus queries are used to monitor the ingress traces pipeline, showing accepted and refused spans grouped by receiver and transport.

LANGUAGE: prometheus
CODE:
otelcol_receiver_accepted_spans
otelcol_receiver_refused_spans
by (receiver,transport)

----------------------------------------

TITLE: OpenTelemetry Collector Configuration
DESCRIPTION: YAML configuration for setting up the OpenTelemetry Collector with OTLP receivers and debug exporters

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
exporters:
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
  debug:
    verbosity: detailed
processors:
  batch:
service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [debug]
      processors: [batch]
    metrics:
      receivers: [otlp]
      exporters: [debug]
      processors: [batch]
    logs:
      receivers: [otlp]
      exporters: [debug]
      processors: [batch]

----------------------------------------

TITLE: Initializing Collector Configuration in YAML
DESCRIPTION: Basic configuration for the OpenTelemetry Collector, setting up receivers, processors, exporters and pipelines.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

processors:
  batch:

exporters:
  debug:
    verbosity: detailed
  otlp/jaeger:
    endpoint: localhost:14317
    tls:
      insecure: true

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/jaeger, debug]
  telemetry:
    logs:
      level: debug

----------------------------------------

TITLE: Accessing OpenTelemetry Baggage Context
DESCRIPTION: Example of accessing OpenTelemetry baggage context to check for synthetic request flags in the active context.

LANGUAGE: typescript
CODE:
const baggage = propagation.getBaggage(context.active());
if (baggage?.getEntry("synthetic_request")?.value == "true") {...}

----------------------------------------

TITLE: Implementing Custom SpanProcessor in Java
DESCRIPTION: Example of implementing a custom SpanProcessor that adds a custom attribute to spans on start.

LANGUAGE: Java
CODE:
public class CustomSpanProcessor implements SpanProcessor {

  @Override
  public void onStart(Context parentContext, ReadWriteSpan span) {
    span.setAttribute("my.custom.attribute", "hello world");
  }

  @Override
  public boolean isStartRequired() {
    return true;
  }

  @Override
  public void onEnd(ReadableSpan span) {
  }

  @Override
  public boolean isEndRequired() {
    return false;
  }

  @Override
  public CompletableResultCode shutdown() {
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode forceFlush() {
    return CompletableResultCode.ofSuccess();
  }
}

----------------------------------------

TITLE: Configuring Specific OpenTelemetry Instrumentations
DESCRIPTION: Example showing how to configure specific instrumentations (Sinatra and Faraday) with custom options.

LANGUAGE: ruby
CODE:
require 'opentelemetry/sdk'

# install all compatible instrumentation with default configuration
OpenTelemetry::SDK.configure do |c|
  c.use 'OpenTelemetry::Instrumentation::Sinatra'
  c.use 'OpenTelemetry::Instrumentation::Faraday', { opt: 'value' }
end

----------------------------------------

TITLE: Initializing Metrics Provider in Go with OpenTelemetry
DESCRIPTION: This function initializes the OpenTelemetry SDK for metrics. It sets up an OTLP gRPC exporter, creates a MeterProvider with a periodic reader, and sets it as the global provider.

LANGUAGE: go
CODE:
func initMeterProvider() *sdkmetric.MeterProvider {
    ctx := context.Background()

    exporter, err := otlpmetricgrpc.New(ctx)
    if err != nil {
        log.Fatalf("new otlp metric grpc exporter failed: %v", err)
    }

    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))
    global.SetMeterProvider(mp)
    return mp
}

----------------------------------------

TITLE: Adding Attributes to Auto-instrumented Spans in Ruby
DESCRIPTION: This snippet demonstrates how to get the current span from context and add single or multiple attributes to it.

LANGUAGE: ruby
CODE:
current_span = OpenTelemetry::Trace.current_span

LANGUAGE: ruby
CODE:
current_span.add_attributes({
  "app.order.id" => data.order.order_id,
})

LANGUAGE: ruby
CODE:
span.set_attribute("app.email.recipient", data.email)

----------------------------------------

TITLE: Configuring Faraday Instrumentation via Environment Variables
DESCRIPTION: Example of setting Faraday instrumentation options using environment variables.

LANGUAGE: bash
CODE:
export OTEL_RUBY_INSTRUMENTATION_FARADAY_CONFIG_OPTS="peer_service=new_service;span_kind=client"

----------------------------------------

TITLE: Querying Batch Processor Metrics in Prometheus
DESCRIPTION: This Prometheus query monitors the batch processor used in both traces and metrics pipelines, showing the sum of batch send sizes.

LANGUAGE: prometheus
CODE:
otelcol_processor_batch_batch_send_size_sum

----------------------------------------

TITLE: Installing Dependencies for TypeScript Client
DESCRIPTION: Commands to initialize a new TypeScript project and install necessary dependencies for the OpenTelemetry client application.

LANGUAGE: shell
CODE:
npm init -y
npm install typescript \
  ts-node \
  @types/node \
  undici \
  @opentelemetry/instrumentation-undici \
  @opentelemetry/sdk-node

# initialize typescript
npx tsc --init

----------------------------------------

TITLE: Configuring Request Attribute Tracing
DESCRIPTION: Examples of configuring which request attributes should be extracted and set as span attributes for different web frameworks.

LANGUAGE: sh
CODE:
export OTEL_PYTHON_DJANGO_TRACED_REQUEST_ATTRS='path_info,content_type'
export OTEL_PYTHON_FALCON_TRACED_REQUEST_ATTRS='query_string,uri_template'
export OTEL_PYTHON_TORNADO_TRACED_REQUEST_ATTRS='uri,query'

----------------------------------------

TITLE: Adding OpenTelemetry BOM Dependency in Maven
DESCRIPTION: Shows how to add an OpenTelemetry Bill of Materials (BOM) dependency in a Maven POM file to manage OpenTelemetry artifact versions.

LANGUAGE: xml
CODE:
<project>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>{{bomGroupId}}</groupId>
        <artifactId>{{bomArtifactId}}</artifactId>
        <version>{{bomVersion}}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <!-- Add a dependency on an artifact whose version is managed by the bom -->
  <dependencies>
    <dependency>
      <groupId>io.opentelemetry</groupId>
      <artifactId>opentelemetry-api</artifactId>
    </dependency>
  </dependencies>
</project>

----------------------------------------

TITLE: Configuring OpenTelemetry Collector Builder
DESCRIPTION: YAML configuration for the OpenTelemetry Collector Builder, including the custom connector component.

LANGUAGE: yaml
CODE:
dist:
    name: otelcol-dev-bin
    description: Basic OpenTelemetry collector distribution for Developers
    output_path: ./otelcol-dev


exporters:
    - gomod:
    go.opentelemetry.io/collector/exporter/debugexporter v0.86.0


processors:
    - gomod:
    go.opentelemetry.io/collector/processor/batchprocessor v0.86.0


receivers:
    - gomod:
go.opentelemetry.io/collector/receiver/otlpreceiver v0.86.0


connectors:
    - gomod: github.com/gord02/exampleconnector v0.86.0


replaces:
- github.com/gord02/exampleconnector => [PATH-TO-COMPONENT-CODE]/exampleconnector

----------------------------------------

TITLE: Setting Resource Detectors via Environment Variable
DESCRIPTION: Configuration of OpenTelemetry resource detectors using the OTEL_RESOURCE_DETECTORS environment variable.

LANGUAGE: shell
CODE:
OTEL_RESOURCE_DETECTORS=otel_resource_env_var,otel_resource_app_env

----------------------------------------

TITLE: Adding Events to Spans in Python with OpenTelemetry
DESCRIPTION: Show how to add events to spans to represent significant occurrences during the span's lifetime.

LANGUAGE: python
CODE:
from opentelemetry import trace

current_span = trace.get_current_span()

current_span.add_event("Gonna try it!")

# Do the thing

current_span.add_event("Did it!")

----------------------------------------

TITLE: Disabling Instrumentation via Environment Variables
DESCRIPTION: Example of disabling Sinatra instrumentation using environment variables.

LANGUAGE: bash
CODE:
export OTEL_RUBY_INSTRUMENTATION_SINATRA_ENABLED=false

----------------------------------------

TITLE: Setting Up OpenTelemetry SDK in Go
DESCRIPTION: Initializes the OpenTelemetry SDK with trace, metric and log providers

LANGUAGE: go
CODE:
package main

import (
	"context"
	"errors"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutlog"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
	"go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
	"go.opentelemetry.io/otel/log/global"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/log"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/sdk/trace"
)

// setupOTelSDK bootstraps the OpenTelemetry pipeline.
// If it does not return an error, make sure to call shutdown for proper cleanup.
func setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {
	// ... rest of setup code ...
}

----------------------------------------

TITLE: Setting Up OpenTelemetry SDK in Go
DESCRIPTION: Initializes the OpenTelemetry SDK with trace, metric and log providers

LANGUAGE: go
CODE:
package main

import (
	"context"
	"errors"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutlog"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
	"go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
	"go.opentelemetry.io/otel/log/global"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/log"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/sdk/trace"
)

// setupOTelSDK bootstraps the OpenTelemetry pipeline.
// If it does not return an error, make sure to call shutdown for proper cleanup.
func setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {
	// ... rest of setup code ...
}

----------------------------------------

TITLE: Recording Exceptions in Spans in Swift
DESCRIPTION: This snippet demonstrates how to record exceptions as events in spans using OpenTelemetry Swift, following semantic conventions for exception events.

LANGUAGE: swift
CODE:
let span = someTracer.spanBuilder(spanName: "my span").startSpan()
do {
  try throwingFunction()
} catch {
  span.addEvent(name: SemanticAttributes.exception.rawValue,
    attributes: [SemanticAttributes.exceptionType.rawValue: AttributeValue.string(String(describing: type(of: error))),
                 SemanticAttributes.exceptionEscaped.rawValue: AttributeValue.bool(false),
                 SemanticAttributes.exceptionMessage.rawValue: AttributeValue.string(error.localizedDescription)])
  })
  span.status = .error(description: error.localizedDescription)
}
span.end()

----------------------------------------

TITLE: Adding OpenTelemetry Helm Repository
DESCRIPTION: Command to add the OpenTelemetry Helm repository to your local Helm installation.

LANGUAGE: shell
CODE:
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts

----------------------------------------

TITLE: Starting Aspire Dashboard Docker Container
DESCRIPTION: Docker command to run the Aspire Dashboard for local debugging

LANGUAGE: shell
CODE:
docker run --rm -it -d -p 18888:18888 -p 4317:18889 -p 4318:18890 --name aspire-dashboard mcr.microsoft.com/dotnet/aspire-dashboard:9.0

----------------------------------------

TITLE: Adding Custom OpenTelemetry Instrumentation in Go
DESCRIPTION: Adds custom trace spans, metrics and logs to the dice rolling handler

LANGUAGE: go
CODE:
func rolldice(w http.ResponseWriter, r *http.Request) {
	ctx, span := tracer.Start(r.Context(), "roll")
	defer span.End()

	roll := 1 + rand.Intn(6)

	var msg string
	if player := r.PathValue("player"); player != "" {
		msg = fmt.Sprintf("%s is rolling the dice", player)
	} else {
		msg = "Anonymous player is rolling the dice"
	}
	logger.InfoContext(ctx, msg, "result", roll)

	rollValueAttr := attribute.Int("roll.value", roll)
	span.SetAttributes(rollValueAttr)
	rollCnt.Add(ctx, 1, metric.WithAttributes(rollValueAttr))

	resp := strconv.Itoa(roll) + "\n"
	if _, err := io.WriteString(w, resp); err != nil {
		log.Printf("Write failed: %v\n", err)
	}
}

----------------------------------------

TITLE: Enabling Diagnostic Logging in Node.js OpenTelemetry SDK
DESCRIPTION: This snippet shows how to enable diagnostic logging in the OpenTelemetry Node.js SDK for troubleshooting purposes. It sets the log level to DEBUG using the DiagConsoleLogger.

LANGUAGE: javascript
CODE:
// For troubleshooting, set the log level to DiagLogLevel.DEBUG
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);

----------------------------------------

TITLE: Example Log Entry Format in OpenTelemetry
DESCRIPTION: Sample log entry showing timestamp, log level, request ID and action information in a standard logging format. Demonstrates the structure of basic log messages that lack broader request context.

LANGUAGE: text
CODE:
I, [2021-02-23T13:26:23.505892 #22473]  INFO -- : [6459ffe1-ea53-4044-aaa3-bf902868f730] Started GET "/" for ::1 at 2021-02-23 13:26:23 -0800

----------------------------------------

TITLE: Adding Custom OpenTelemetry Instrumentation in Go
DESCRIPTION: Adds custom trace spans, metrics and logs to the dice rolling handler

LANGUAGE: go
CODE:
func rolldice(w http.ResponseWriter, r *http.Request) {
	ctx, span := tracer.Start(r.Context(), "roll")
	defer span.End()

	roll := 1 + rand.Intn(6)

	var msg string
	if player := r.PathValue("player"); player != "" {
		msg = fmt.Sprintf("%s is rolling the dice", player)
	} else {
		msg = "Anonymous player is rolling the dice"
	}
	logger.InfoContext(ctx, msg, "result", roll)

	rollValueAttr := attribute.Int("roll.value", roll)
	span.SetAttributes(rollValueAttr)
	rollCnt.Add(ctx, 1, metric.WithAttributes(rollValueAttr))

	resp := strconv.Itoa(roll) + "\n"
	if _, err := io.WriteString(w, resp); err != nil {
		log.Printf("Write failed: %v\n", err)
	}
}

----------------------------------------

TITLE: Multiple OpenTelemetry Authenticator Instances Configuration
DESCRIPTION: Illustrates how to configure multiple instances of the same authenticator type with different names.

LANGUAGE: yaml
CODE:
extensions:
  oidc/some-provider:
  oidc/another-provider:

receivers:
  otlp/auth:
    protocols:
      grpc:
         endpoint: 0.0.0.0:4317
        auth:
          authenticator: oidc/some-provider

processors:
exporters:

service:
  extensions:
    - oidc/some-provider
    - oidc/another-provider
  pipelines:
    traces:
      receivers:
        - otlp/auth
      processors: []
      exporters: []

----------------------------------------

TITLE: Configure Launch Settings for ASP.NET Core
DESCRIPTION: Launch settings configuration for the ASP.NET Core application, setting up HTTP endpoints and development environment variables.

LANGUAGE: json
CODE:
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:8080",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

----------------------------------------

TITLE: Writing OpenTelemetry Tests in Erlang
DESCRIPTION: Illustrates how to write tests for OpenTelemetry functionality in Erlang using Common Test, including setup, teardown, and span assertion.

LANGUAGE: erlang
CODE:
-module(otel_getting_started_SUITE).

-compile(export_all).

-include_lib("stdlib/include/assert.hrl").
-include_lib("common_test/include/ct.hrl").

-include_lib("opentelemetry/include/otel_span.hrl").

-define(assertReceive(SpanName),
        receive
            {span, Span=#span{name=SpanName}} ->
                Span
        after
            1000 ->
                ct:fail("Did not receive the span after 1s")
        end).

all() ->
    [greets_the_world].

init_per_suite(Config) ->
    application:load(opentelemetry),
    application:set_env(opentelemetry, processors, [{otel_simple_processor, #{}}]),
    {ok, _} = application:ensure_all_started(opentelemetry),
    Config.

end_per_suite(_Config) ->
    _ = application:stop(opentelemetry),
    _ = application:unload(opentelemetry),
    ok.

init_per_testcase(greets_the_world, Config) ->
    otel_simple_processor:set_exporter(otel_exporter_pid, self()),
    Config.

end_per_testcase(greets_the_world, _Config) ->
    otel_simple_processor:set_exporter(none),
    ok.

greets_the_world(_Config) ->
    otel_getting_started:hello(),

    ExpectedAttributes = otel_attributes:new(#{a_key => <<"a_value">>}, 128, infinity),
    #span{attributes=ReceivedAttributes} = ?assertReceive(<<"operation">>),

    %% use an assertMatch instead of matching in the `receive'
    %% so we get a nice error message if it fails
    ?assertMatch(ReceivedAttributes, ExpectedAttributes),

    ok.

----------------------------------------

TITLE: Initializing OpenTelemetry Logging
DESCRIPTION: Initialize a logger provider for OpenTelemetry logging in Go.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"fmt"

	"go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp"
	"go.opentelemetry.io/otel/log/global"
	"go.opentelemetry.io/otel/sdk/log"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"
)

func main() {
	ctx := context.Background()

	// Create resource.
	res, err := newResource()
	if err != nil {
		panic(err)
	}

	// Create a logger provider.
	// You can pass this instance directly when creating bridges.
	loggerProvider, err := newLoggerProvider(ctx, res)
	if err != nil {
		panic(err)
	}

	// Handle shutdown properly so nothing leaks.
	defer func() {
		if err := loggerProvider.Shutdown(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	// Register as global logger provider so that it can be accessed global.LoggerProvider.
	// Most log bridges use the global logger provider as default.
	// If the global logger provider is not set then a no-op implementation
	// is used, which fails to generate data.
	global.SetLoggerProvider(loggerProvider)
}

func newResource() (*resource.Resource, error) {
	return resource.Merge(resource.Default(),
		resource.NewWithAttributes(semconv.SchemaURL,
			semconv.ServiceName("my-service"),
			semconv.ServiceVersion("0.1.0"),
		))
}

func newLoggerProvider(ctx context.Context, res *resource.Resource) (*log.LoggerProvider, error) {
	exporter, err := otlploghttp.New(ctx)
	if err != nil {
		return nil, err
	}
	processor := log.NewBatchProcessor(exporter)
	provider := log.NewLoggerProvider(
		log.WithResource(res),
		log.WithProcessor(processor),
	)
	return provider, nil
}

----------------------------------------

TITLE: Configuring OpenTelemetry Agent via CLI
DESCRIPTION: Example showing how to configure the OpenTelemetry agent using command-line arguments to set up traces and metrics exporters, service name, and endpoint configuration.

LANGUAGE: sh
CODE:
opentelemetry-instrument \
    --traces_exporter console,otlp \
    --metrics_exporter console \
    --service_name your-service-name \
    --exporter_otlp_endpoint 0.0.0.0:4317 \
    python myapp.py

----------------------------------------

TITLE: Implementing Custom Sampler in Erlang
DESCRIPTION: Defines a custom sampler in Erlang that samples spans based on the presence of specific attributes.

LANGUAGE: erlang
CODE:
-module(attribute_sampler).

-behavior(otel_sampler).

-export([description/1,
         setup/1,
         should_sample/7]).

-include("otel_sampler.hrl").

setup(Attributes) when is_map(Attributes) ->
    Attributes;
setup(_) ->
    #{}.

description(_) ->
    <<"AttributeSampler">>.

should_sample(_Ctx, _TraceId, _Links, _SpanName, _SpanKind, Attributes, ConfigAttributes) ->
    AttributesSet = sets:from_list(maps:to_list(Attributes)),
    ConfigSet = sets:from_list(maps:to_list(ConfigAttributes)),
    case sets:is_disjoint(AttributesSet, ConfigSet) of
        true -> {?RECORD_AND_SAMPLE, [], []};
        _ -> {?DROP, [], []}
end.

----------------------------------------

TITLE: Configuring Simple Span Processor in C++
DESCRIPTION: This snippet demonstrates how to configure a Simple Span Processor with an OTLP HTTP exporter in C++. It shows the creation of the processor with the exporter.

LANGUAGE: cpp
CODE:
#include "opentelemetry/exporters/otlp/otlp_http_exporter_factory.h"
#include "opentelemetry/exporters/otlp/otlp_http_exporter_options.h"
#include "opentelemetry/sdk/trace/processor.h"
#include "opentelemetry/sdk/trace/simple_processor_factory.h"

auto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);
auto processor = opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));

----------------------------------------

TITLE: Creating Spans in Swift
DESCRIPTION: This snippet shows how to create and end a span using the OpenTelemetry Swift API. It uses the span builder associated with the tracer to start a span and then ends it.

LANGUAGE: swift
CODE:
let span = tracer.spanBuilder(spanName: "\(name)").startSpan()
...
span.end()

----------------------------------------

TITLE: Basic OpenTelemetry Authenticator Extension Configuration
DESCRIPTION: Demonstrates the basic configuration structure for registering an authenticator extension in OpenTelemetry Collector.

LANGUAGE: yaml
CODE:
extensions:
  oidc:

receivers:
processors:
exporters:

service:
  extensions:
    - oidc
  pipelines:
    traces:
      receivers: []
      processors: []
      exporters: []

----------------------------------------

TITLE: Configuring Global Propagators in Erlang
DESCRIPTION: Configuration for setting text map propagators in Erlang sys.config file. Enables baggage and trace context propagation formats.

LANGUAGE: erlang
CODE:
{text_map_propagators, [baggage,
                        trace_context]},

----------------------------------------

TITLE: Running Node.js Application with OpenTelemetry Resource Attributes
DESCRIPTION: This shell command demonstrates how to run a Node.js application with OpenTelemetry, setting resource attributes through environment variables. It sets the service name and various host and OS attributes.

LANGUAGE: shell
CODE:
$ env OTEL_SERVICE_NAME="app.js" OTEL_RESOURCE_ATTRIBUTES="service.namespace=tutorial,service.version=1.0,service.instance.id=`uuidgen`,host.name=${HOSTNAME},host.type=`uname -m`,os.name=`uname -s`,os.version=`uname -r`" \
  node --require ./tracing.js app.js

----------------------------------------

TITLE: Enabling Logs Collection Preset
DESCRIPTION: YAML configuration to enable the logs collection preset in the OpenTelemetry Collector Chart, using daemonset mode.

LANGUAGE: yaml
CODE:
mode: daemonset
presets:
  logsCollection:
    enabled: true

----------------------------------------

TITLE: Configuring Prometheus Metrics Endpoint
DESCRIPTION: YAML configuration for exposing internal metrics via Prometheus endpoint

LANGUAGE: yaml
CODE:
service:
  telemetry:
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: '0.0.0.0'
                port: 8888

----------------------------------------

TITLE: Configuring OpenTelemetry Agent via Environment Variables
DESCRIPTION: Example of configuring the OpenTelemetry agent using environment variables for traces, metrics, and endpoint settings

LANGUAGE: sh
CODE:
OTEL_SERVICE_NAME=your-service-name \
OTEL_TRACES_EXPORTER=console,otlp \
OTEL_METRICS_EXPORTER=console \
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=0.0.0.0:4317
opentelemetry-instrument \
    python myapp.py

----------------------------------------

TITLE: WebClient Controller Implementation
DESCRIPTION: Example of creating a WebClient using WebClient.Builder in a Spring controller.

LANGUAGE: java
CODE:
package otel;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

@RestController
public class WebClientController {

  private final WebClient webClient;

  public WebClientController(WebClient.Builder webClientBuilder) {
    webClient = webClientBuilder.baseUrl("http://localhost:8080").build();
  }
}

----------------------------------------

TITLE: Generating OpenTelemetry Release URLs with Go Templates
DESCRIPTION: This snippet uses Go template syntax to create dynamic URLs for OpenTelemetry release information. It generates links for the latest release and all releases based on the project's language.

LANGUAGE: Go
CODE:
{{ $relUrl := printf "https://github.com/open-telemetry/opentelemetry-%s/releases" .lang -}}

For releases, including the [latest release][], see [Releases][].
{{- .Inner }}

[latest release]: {{ $relUrl }}/latest
[Releases]: {{ $relUrl }}

----------------------------------------

TITLE: Adding Attributes to Auto-instrumented Spans
DESCRIPTION: Demonstrates how to add custom attributes to automatically instrumented spans in .NET using Activity.Current and SetTag.

LANGUAGE: csharp
CODE:
activity?.SetTag("app.user.id", request.UserId);
activity?.SetTag("app.product.quantity", request.Item.Quantity);
activity?.SetTag("app.product.id", request.Item.ProductId);

----------------------------------------

TITLE: Adding Events to Spans in Erlang and Elixir
DESCRIPTION: Shows how to add events to spans in both Erlang and Elixir, including events with and without attributes.

LANGUAGE: erlang
CODE:
?add_event(<<"Gonna try it">>),

%% Do the thing

?add_event(<<"Did it!">>),

?add_event(<<"Process exited with reason">>, [{pid, Pid)}, {reason, Reason}]))

LANGUAGE: elixir
CODE:
Tracer.add_event("Gonna try it")

%% Do the thing

Tracer.add_event("Did it!")

Tracer.add_event("Process exited with reason", pid: pid, reason: Reason)

----------------------------------------

TITLE: Dockerfile for Node.js Application with OpenTelemetry
DESCRIPTION: This Dockerfile sets up a Node.js environment for running an application with OpenTelemetry. It copies the necessary files, installs dependencies, and specifies the command to run the application with tracing enabled.

LANGUAGE: dockerfile
CODE:
FROM node:latest
WORKDIR /usr/src/app
COPY package.json ./
RUN npm install
COPY . .
EXPOSE 8080
CMD [ "node", "--require", "./tracing.js", "app.js" ]

----------------------------------------

TITLE: Implementing OpenTelemetry Tracing in Erlang
DESCRIPTION: Demonstrates how to implement OpenTelemetry tracing in an Erlang module, creating spans and setting attributes.

LANGUAGE: erlang
CODE:
-module(otel_getting_started).

-export([hello/0]).

-include_lib("opentelemetry_api/include/otel_tracer.hrl").

hello() ->
    %% start an active span and run a local function
    ?with_span(<<"operation">>, #{}, fun nice_operation/1).

nice_operation(_SpanCtx) ->
    ?set_attributes([{a_key, <<"a value">>}]),
    world

----------------------------------------

TITLE: Configuring OTLP gRPC Exporter
DESCRIPTION: PHP code to configure OTLP exporter using gRPC transport

LANGUAGE: php
CODE:
<?php

require __DIR__ . '/vendor/autoload.php';

use OpenTelemetry\API\Signals;
use OpenTelemetry\Contrib\Grpc\GrpcTransportFactory;
use OpenTelemetry\Contrib\Otlp\OtlpUtil;
use OpenTelemetry\Contrib\Otlp\SpanExporter;
use OpenTelemetry\SDK\Trace\SpanProcessor\SimpleSpanProcessor;
use OpenTelemetry\SDK\Trace\TracerProvider;

$transport = (new GrpcTransportFactory())->create('http://jaeger:4317' . OtlpUtil::method(Signals::TRACE));
$exporter = new SpanExporter($transport);

$tracerProvider =  new TracerProvider(
    new SimpleSpanProcessor($exporter)
);

----------------------------------------

TITLE: Rendering CVE Table with JavaScript
DESCRIPTION: This JavaScript code fetches CVE data from a JSON file, sorts it by date, and dynamically renders it into an HTML table. It includes functions for fetching data, rendering the table, and creating clickable links for each CVE and repository.

LANGUAGE: JavaScript
CODE:
  'use strict';
  (function() {
    function fetchAndRender() {
      fetchData()
        .then(renderTable);
    }

    function fetchData() {
      var url = 'https://raw.githubusercontent.com/open-telemetry/sig-security/data-source/published_output.json';
      return fetch(url)
        .then(function(response) {
          return response.json();
        });
    }

    function renderTable(data) {
      var table = document.getElementById('cve-table').querySelector('tbody');

      data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

      data.forEach(item => {
        var row = table.insertRow();

        const cell1 = row.insertCell(0);
        const link = document.createElement('a');
        link.href = item['html_url'];
        link.target = '_blank';
        link.textContent = item['cve_id'];
        cell1.appendChild(link);

        const cell2 = row.insertCell(1);
        cell2.textContent = item['summary'];
        const cell3 = row.insertCell(2);
        cell3.textContent = item['severity'];

        const cell4 = row.insertCell(3);
        // cell4.textContent = item['repo'];
        const link2 = document.createElement('a');
        link2.href = 'https://www.github.com/open-telemetry/' + item['repo'] + '/security/advisories';
        link2.target = '_blank';
        link2.textContent = item['repo'];
        cell4.appendChild(link2);
      });
    }

    fetchAndRender();
  })();

----------------------------------------

TITLE: Implementing Custom Sampler in Elixir
DESCRIPTION: Defines a custom sampler in Elixir that samples spans based on the presence of specific attributes.

LANGUAGE: elixir
CODE:
defmodule AttributesSampler do
  def setup(attributes) when is_map(attributes) do
    attributes
  end

  def setup(_) do
    %{}
  end

  def description(_) do
    "ExampleSampler"
  end

  def should_sample(_ctx, _trace_id, _links, _span_name, _span_kind, attributes, config_attributes) do
    no_match =
      Enum.into(attributes, %MapSet{})
      |> MapSet.disjoint?(Enum.into(config_attributes, %MapSet{}))

    if no_match, do: {:record_and_sample, [], []}, else: {:drop, [], []}
  end
end

----------------------------------------

TITLE: Docker Run Command for Collector
DESCRIPTION: Command to run OpenTelemetry Collector in Docker with port mapping and hostname configuration.

LANGUAGE: shell
CODE:
docker run --hostname my-hostname --name container-name -p 127.0.0.1:4567:4317 otel/opentelemetry-collector:{{% param collector_vers %}}

----------------------------------------

TITLE: Acquiring a Tracer in Swift
DESCRIPTION: This snippet demonstrates how to acquire a tracer from the OpenTelemetry tracer provider in Swift. It specifies an instrumentation name and version.

LANGUAGE: swift
CODE:
let  tracer = OpenTelemetry.instance.tracerProvider.get(instrumentationName: "instrumentation-library-name", instrumentationVersion: "1.0.0")

----------------------------------------

TITLE: Registering Additional Metric Sources
DESCRIPTION: Sets environment variable to register custom meter sources with OpenTelemetry automatic instrumentation.

LANGUAGE: bash
CODE:
OTEL_DOTNET_AUTO_METRICS_ADDITIONAL_SOURCES=Examples.Service

----------------------------------------

TITLE: Creating Spans Across Processes in Erlang and Elixir
DESCRIPTION: Shows how to create and manage spans across different processes in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
SpanCtx = ?start_span(child),

Ctx = otel_ctx:get_current(),

proc_lib:spawn_link(fun() ->
                        otel_ctx:attach(Ctx),
                        ?set_current_span(SpanCtx),

                        %% do work here

                        ?end_span(SpanCtx)
                    end),

LANGUAGE: elixir
CODE:
span_ctx = OpenTelemetry.Tracer.start_span(:child)
ctx = OpenTelemetry.Ctx.get_current()

task = Task.async(fn ->
                      OpenTelemetry.Ctx.attach(ctx)
                      OpenTelemetry.Tracer.set_current_span(span_ctx)
                      # do work here

                      # end span here
                      OpenTelemetry.Tracer.end_span(span_ctx)
                  end)

_ = Task.await(task)

----------------------------------------

TITLE: Creating and Using Synchronous Instruments in Python OpenTelemetry
DESCRIPTION: Demonstrate how to create and use a Counter instrument to measure work items completed.

LANGUAGE: python
CODE:
work_counter = meter.create_counter(
    "work.counter", unit="1", description="Counts the amount of work done"
)

def do_work(work_item):
    # count the work being doing
    work_counter.add(1, {"work.type": work_item.work_type})
    print("doing some work...")

----------------------------------------

TITLE: Installing OpenTelemetry SDK for Ruby
DESCRIPTION: Command to install the OpenTelemetry SDK package using gem.

LANGUAGE: sh
CODE:
gem install opentelemetry-sdk

----------------------------------------

TITLE: Shutting Down Meter Provider in Go with OpenTelemetry
DESCRIPTION: This code snippet demonstrates how to properly shut down the MeterProvider when the service is terminated. It ensures all metric records are exported before the program exits.

LANGUAGE: go
CODE:
mp := initMeterProvider()
defer func() {
    if err := mp.Shutdown(context.Background()); err != nil {
        log.Printf("Error shutting down meter provider: %v", err)
    }
}()

----------------------------------------

TITLE: Creating AWS Lambda Function Handler
DESCRIPTION: JavaScript code for a simple AWS Lambda function handler that makes an HTTPS request to opentelemetry.io and returns the status code.

LANGUAGE: javascript
CODE:
/* handler.js */

'use strict';

const https = require('https');

function getRequest() {
  const url = 'https://opentelemetry.io/';

  return new Promise((resolve, reject) => {
    const req = https.get(url, (res) => {
      resolve(res.statusCode);
    });

    req.on('error', (err) => {
      reject(new Error(err));
    });
  });
}

exports.handler = async (event) => {
  try {
    const result = await getRequest();
    return {
      statusCode: result,
    };
  } catch (error) {
    return {
      statusCode: 400,
      body: error.message,
    };
  }
};

----------------------------------------

TITLE: Configuring LogRecordProcessors in Java
DESCRIPTION: Demonstrates configuration of batch and simple log record processors with customizable parameters.

LANGUAGE: Java
CODE:
public static LogRecordProcessor batchLogRecordProcessor(LogRecordExporter logRecordExporter) {
  return BatchLogRecordProcessor.builder(logRecordExporter)
      .setMaxQueueSize(2048)
      .setExporterTimeout(Duration.ofSeconds(30))
      .setScheduleDelay(Duration.ofSeconds(1))
      .build();
}

public static LogRecordProcessor simpleLogRecordProcessor(LogRecordExporter logRecordExporter) {
  return SimpleLogRecordProcessor.create(logRecordExporter);
}

----------------------------------------

TITLE: Configuring OTEL_RESOURCE_ATTRIBUTES for Envoy Proxies
DESCRIPTION: This snippet demonstrates how to configure the OTEL_RESOURCE_ATTRIBUTES environment variable for Envoy proxies in Istio using a ProxyConfig resource.

LANGUAGE: shell
CODE:
cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1beta1
kind: ProxyConfig
metadata:
  name: my-proxyconfig
  namespace: istio-system
spec:
  concurrency: 0
  environmentVariables:
    OTEL_RESOURCE_ATTRIBUTES: "host.name=abc-123"
EOF

----------------------------------------

TITLE: Dropping Spans from Specific Service using OTTL in OpenTelemetry Collector
DESCRIPTION: Configures the filter processor to drop spans only from a specific service (service1) while keeping all other spans using OTTL (OpenTelemetry Transformation Language).

LANGUAGE: yaml
CODE:
processors:
  filter/ottl:
    error_mode: ignore
    traces:
      span:
        - resource.attributes["service.name"] == "service1"

----------------------------------------

TITLE: Getting the Current Span in Swift
DESCRIPTION: This snippet demonstrates how to access the current active span from any point in the code using OpenTelemetry Swift.

LANGUAGE: swift
CODE:
let currentSpan = OpenTelemetry.instance.contextProvider.activeSpan

----------------------------------------

TITLE: Creating DiceController in ASP.NET Core
DESCRIPTION: Implementation of an ASP.NET Core controller that handles dice rolling requests with logging

LANGUAGE: csharp
CODE:
using Microsoft.AspNetCore.Mvc;
using System.Net;

public class DiceController : ControllerBase
{
    private ILogger<DiceController> logger;

    public DiceController(ILogger<DiceController> logger)
    {
        this.logger = logger;
    }

    [HttpGet("/rolldice")]
    public List<int> RollDice(string player, int? rolls)
    {
        if(!rolls.HasValue)
        {
            logger.LogError("Missing rolls parameter");
            throw new HttpRequestException("Missing rolls parameter", null, HttpStatusCode.BadRequest);
        }

        var result = new Dice(1, 6).rollTheDice(rolls.Value);

        if (string.IsNullOrEmpty(player))
        {
            logger.LogInformation("Anonymous player is rolling the dice: {result}", result);
        }
        else
        {
            logger.LogInformation("{player} is rolling the dice: {result}", player, result);
        }

        return result;
    }
}

----------------------------------------

TITLE: Installing Zipkin Exporter
DESCRIPTION: Command to install the Zipkin exporter package for OpenTelemetry in a Node.js project.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/exporter-zipkin

----------------------------------------

TITLE: Adding Span Links
DESCRIPTION: PHP code demonstrating how to add links to other spans when creating a new span.

LANGUAGE: php
CODE:
$span = $tracer->spanBuilder("span-with-links")
    ->addLink($parentSpan1->getContext())
    ->addLink($parentSpan2->getContext())
    ->addLink($parentSpan3->getContext())
    ->addLink($remoteSpanContext)
    ->startSpan();

----------------------------------------

TITLE: Installing OpenTelemetry API Packages
DESCRIPTION: Shell command to install OpenTelemetry API packages using Composer.

LANGUAGE: shell
CODE:
composer require open-telemetry/api open-telemetry/sem-conv

----------------------------------------

TITLE: Configuring TraceIdRatioBasedSampler with Environment Variables
DESCRIPTION: Sets up the ParentBasedSampler with TraceIdRatioBasedSampler as the root sampler, configured to sample 10% of traces using environment variables.

LANGUAGE: shell
CODE:
export OTEL_TRACES_SAMPLER="parentbased_traceidratio"
export OTEL_TRACES_SAMPLER_ARG="0.1"

----------------------------------------

TITLE: Configuring Serverless Framework for AWS Lambda Deployment
DESCRIPTION: YAML configuration for Serverless Framework to deploy the AWS Lambda function with OpenTelemetry instrumentation.

LANGUAGE: yaml
CODE:
service: lambda-otel-native
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs14.x
  region: '<your-region>'
  environment:
    NODE_OPTIONS: --require lambda-wrapper
functions:
  lambda-otel-test:
    handler: handler.hello

----------------------------------------

TITLE: Configuring SdkLoggerProvider in Java
DESCRIPTION: Creates and configures an SdkLoggerProvider with resource, log record processor, log record exporter, and log limits.

LANGUAGE: Java
CODE:
public static SdkLoggerProvider create(Resource resource) {
  return SdkLoggerProvider.builder()
      .setResource(resource)
      .addLogRecordProcessor(
          LogRecordProcessorConfig.batchLogRecordProcessor(
              LogRecordExporterConfig.otlpHttpLogRecordExporter("http://localhost:4318/v1/logs")))
      .setLogLimits(LogLimitsConfig::logLimits)
      .build();
}

----------------------------------------

TITLE: Setting Span Status in Java
DESCRIPTION: Shows how to set the status of a span when handling errors.

LANGUAGE: java
CODE:
span.setStatus(StatusCode.ERROR);

----------------------------------------

TITLE: Customizing Span Names in otelsql
DESCRIPTION: Go code snippet showing how to use otelsql.WithSpanNameFormatter to customize span names for SQL operations.

LANGUAGE: go
CODE:
otelsql.WithSpanNameFormatter(func(ctx context.Context, method otelsql.Method, query string) string {
    return string(method) + ": " + query
})

----------------------------------------

TITLE: Configuring OpenTelemetry Specifications Page and Redirects in YAML
DESCRIPTION: This YAML configuration sets up the specifications page for OpenTelemetry documentation. It defines metadata such as title, aliases, and weight, and establishes temporary redirect rules for different sections of the OpenTelemetry specification, including logs, trace, metrics, and semantic conventions.

LANGUAGE: yaml
CODE:
---
title: Specifications
linkTitle: Specs
aliases: [reference, specification]
weight: 960
# Temporary redirect rules until they are added to the spec pages
redirects:
  # OTel spec
  - from: otel/logs/semantic_conventions/events
    to: semconv/general/events/
  - from: otel/trace/semantic_conventions/http
    to: semconv/http/http-spans/
  # Temporarily implement a catch-all for the rest. Later we'll add specific redirects like the one above.
  - from: otel/logs/semantic_conventions/*
    to: semconv/general/logs/
  - from: otel/metrics/semantic_conventions/*
    to: semconv/general/metrics/
  - from: otel/resource/semantic_conventions/*
    to: semconv/resource/
  - from: otel/trace/semantic_conventions/*
    to: semconv/general/trace/
  # Semconv
  - from: semconv/resource/deployment_environment
    to: semconv/resource/deployment-environment
---

----------------------------------------

TITLE: Configuring OpenTelemetry Settings in YAML
DESCRIPTION: Example of configuring OpenTelemetry settings using application.yaml format.

LANGUAGE: yaml
CODE:
otel:
  propagators:
    - tracecontext
    - b3
  resource:
    attributes:
      deployment.environment: dev
      service:
        name: cart
        namespace: shop

----------------------------------------

TITLE: RBAC Configuration for Kubeletstats Receiver
DESCRIPTION: Example RBAC configuration to grant necessary permissions for the Kubeletstats Receiver to access Kubelet API resources.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: [''] 
    resources: ['nodes/stats']
    verbs: ['get', 'watch', 'list']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector
    namespace: default

----------------------------------------

TITLE: Manual Context Propagation in Elixir
DESCRIPTION: Example of manually injecting and extracting context using otel_propagator_text_map module in Elixir. Shows how to work with headers for context propagation.

LANGUAGE: elixir
CODE:
# uses the context from the process dictionary to add to an empty list of headers
headers = :otel_propagator_text_map.inject([])

# creates a context in the process dictionary from headers
:otel_propagator_text_map.extract(headers)

----------------------------------------

TITLE: Configuring Kubeletstats Receiver in YAML
DESCRIPTION: Example configuration for the Kubeletstats Receiver, which collects metrics about nodes and workloads from the kubelet API server.

LANGUAGE: yaml
CODE:
receivers:
  kubeletstats:
    collection_interval: 10s
    auth_type: 'serviceAccount'
    endpoint: '${env:K8S_NODE_NAME}:10250'
    insecure_skip_verify: true
    metric_groups:
      - node
      - pod
      - container

----------------------------------------

TITLE: Initializing Metrics in Java
DESCRIPTION: Shows how to initialize and configure metrics using the OpenTelemetry Meter API.

LANGUAGE: java
CODE:
meter
  .counterBuilder("app.ads.ad_requests")
  .setDescription("Counts ad requests by request and response type")
  .build();

----------------------------------------

TITLE: Adding Custom Dictionary Entries in Markdown Front Matter
DESCRIPTION: Demonstrates how to add custom dictionary entries to the front matter of a Markdown file for spell checking purposes.

LANGUAGE: markdown
CODE:
---
title: PageTitle
cSpell:ignore: <word>
---

----------------------------------------

TITLE: Adding Spring Boot Starter AOP Dependency
DESCRIPTION: Maven and Gradle dependency configurations required to use OpenTelemetry annotations in a Spring Boot project.

LANGUAGE: xml
CODE:
<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
  </dependency>
</dependencies>

LANGUAGE: kotlin
CODE:
dependencies {
  implementation("org.springframework.boot:spring-boot-starter-aop")
}

----------------------------------------

TITLE: Creating Node.js Frontend with OpenTelemetry
DESCRIPTION: JavaScript code for a simple Node.js application instrumented with OpenTelemetry, serving as the frontend in the demo environment.

LANGUAGE: javascript
CODE:
const opentelemetry = require('@opentelemetry/sdk-node');
const {
  getNodeAutoInstrumentations,
} = require('@opentelemetry/auto-instrumentations-node');
const {
  OTLPTraceExporter,
} = require('@opentelemetry/exporter-trace-otlp-http');

const initAndStartSDK = async () => {
  const sdk = new opentelemetry.NodeSDK({
    traceExporter: new OTLPTraceExporter(),
    instrumentations: [getNodeAutoInstrumentations()],
  });

  await sdk.start();
  return sdk;
};

const main = async () => {
  try {
    const sdk = await initAndStartSDK();
    const express = require('express');
    const http = require('http');
    const app = express();
    app.get('/', (_, response) => {
      const options = {
        hostname: 'nginx',
        port: 80,
        path: '/',
        method: 'GET',
      };
      const req = http.request(options, (res) => {
        console.log(`statusCode: ${res.statusCode}`);
        res.on('data', (d) => {
          response.send('Hello World');
        });
      });
      req.end();
    });
    app.listen(8000, () => {
      console.log('Listening for requests');
    });
  } catch (error) {
    console.error('Error occurred:', error);
  }
};

main();

----------------------------------------

TITLE: Creating Nested Spans Automatically in Swift
DESCRIPTION: This snippet shows how to create nested spans automatically using the active span context in Swift. It demonstrates how the parent-child relationship is established without explicit passing of spans.

LANGUAGE: swift
CODE:
func parent() {
  let parentSpan = someTracer.spanBuilder(spanName: "parent span")
                      .setActive(true) // automatically sets context
                      .startSpan()
  child()
  parentSpan.end()
}

func child() {
  let childSpan = someTracer.spanBuilder(spanName: "child span")
                             .startSpan() //automatically captures `active span` as parent
  // do work
  childSpan.end()
}

----------------------------------------

TITLE: Implementing Custom MetricReader in Java
DESCRIPTION: Example of implementing a custom MetricReader that collects metrics periodically and logs them.

LANGUAGE: Java
CODE:
public class CustomMetricReader implements MetricReader {

  private static final Logger logger = Logger.getLogger(CustomMetricExporter.class.getName());

  private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
  private final AtomicReference<CollectionRegistration> collectionRef =
      new AtomicReference<>(CollectionRegistration.noop());

  @Override
  public void register(CollectionRegistration collectionRegistration) {
    collectionRef.set(collectionRegistration);
    executorService.scheduleWithFixedDelay(this::collectMetrics, 0, 60, TimeUnit.SECONDS);
  }

  private void collectMetrics() {
    logger.log(Level.INFO, "Collecting metrics");
    collectionRef
        .get()
        .collectAllMetrics()
        .forEach(metric -> logger.log(Level.INFO, "Metric: " + metric));
  }

  @Override
  public CompletableResultCode forceFlush() {
    logger.log(Level.INFO, "flushing");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode shutdown() {
    logger.log(Level.INFO, "shutting down");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public AggregationTemporality getAggregationTemporality(InstrumentType instrumentType) {
    return AggregationTemporalitySelector.deltaPreferred()
        .getAggregationTemporality(instrumentType);
  }

  @Override
  public MemoryMode getMemoryMode() {
    return MemoryMode.REUSABLE_DATA;
  }

  @Override
  public Aggregation getDefaultAggregation(InstrumentType instrumentType) {
    return Aggregation.defaultAggregation();
  }
}

----------------------------------------

TITLE: Installing Core OpenTelemetry Packages
DESCRIPTION: Commands to install the core OpenTelemetry packages required for basic setup including the main package, hosting extensions, and console exporter.

LANGUAGE: sh
CODE:
dotnet add package OpenTelemetry
dotnet add package OpenTelemetry.Extensions.Hosting
dotnet add package OpenTelemetry.Exporter.Console

----------------------------------------

TITLE: Configuring Volume Mounts for Filelog Receiver
DESCRIPTION: Example configuration for mounting necessary volumes to access Kubernetes container logs for the Filelog Receiver.

LANGUAGE: yaml
CODE:
---
apiVersion: apps/v1
kind: DaemonSet
...
spec:
  ...
  template:
    ...
    spec:
      ...
      containers:
        - name: opentelemetry-collector
          ...
          volumeMounts:
            ...
            # Mount the volumes to the collector container
            - name: varlogpods
              mountPath: /var/log/pods
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            ...
      volumes:
        ...
        # Typically the collector will want access to pod logs and container logs
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        ...

----------------------------------------

TITLE: Configuring AlwaysOn/AlwaysOff Sampler with Environment Variables
DESCRIPTION: Sets up the ParentBasedSampler with AlwaysOnSampler or AlwaysOffSampler using environment variables.

LANGUAGE: shell
CODE:
export OTEL_TRACES_SAMPLER="parentbased_always_on"

LANGUAGE: shell
CODE:
export OTEL_TRACES_SAMPLER="parentbased_always_off"

----------------------------------------

TITLE: Filtering Actuator Endpoints from Tracing
DESCRIPTION: Java configuration class that customizes the OpenTelemetry sampler to exclude actuator health check endpoints from tracing.

LANGUAGE: java
CODE:
package otel;

import io.opentelemetry.api.trace.SpanKind;
import io.opentelemetry.contrib.sampler.RuleBasedRoutingSampler;
import io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;
import io.opentelemetry.semconv.UrlAttributes;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FilterPaths {

  @Bean
  public AutoConfigurationCustomizerProvider otelCustomizer() {
    return p ->
        p.addSamplerCustomizer(
            (fallback, config) ->
                RuleBasedRoutingSampler.builder(SpanKind.SERVER, fallback)
                    .drop(UrlAttributes.URL_PATH, "^/actuator")
                    .build());
  }
}

----------------------------------------

TITLE: Adding Attributes to Spans in Erlang and Elixir
DESCRIPTION: Shows how to add attributes to spans in both Erlang and Elixir, including setting attributes at span creation and during span execution.

LANGUAGE: erlang
CODE:
?with_span(my_span, #{attributes => [{'start-opts-attr', <<"start-opts-value">>}]},
           fun() ->
               ?set_attributes([{'my-attribute', <<"my-value">>},
                                {another_attribute, <<"value-of-attribute">>}])
           end)

LANGUAGE: elixir
CODE:
Tracer.with_span :span_1, %{attributes: [{:"start-opts-attr", <<"start-opts-value">>}]} do
  Tracer.set_attributes([{:"my-attributes", "my-value"},
                         {:another_attribute, "value-of-attributes"}])
end

----------------------------------------

TITLE: Viewing Collector Logs via journalctl
DESCRIPTION: Shell commands for viewing OpenTelemetry Collector logs on Linux systems using journalctl

LANGUAGE: sh
CODE:
journalctl | grep otelcol

LANGUAGE: sh
CODE:
journalctl | grep otelcol | grep Error

----------------------------------------

TITLE: Creating Basic Vapor HTTP Server with Dice Roll Endpoint
DESCRIPTION: Implementation of a simple HTTP server using Vapor framework that responds to /rolldice requests with a random number between 1 and 6.

LANGUAGE: swift
CODE:
import Vapor

@main
enum Entrypoint {
    static func main() async throws {
        let app = try Application(.detect())
        defer { app.shutdown() }
        app.get("rolldice") { req in
            let result = Int.random(in: 1..<7)
            return result
        }
        try app.run()
    }
}

----------------------------------------

TITLE: Custom Backend YAML Configuration
DESCRIPTION: YAML configuration examples for adding custom backend exporters to the OpenTelemetry Collector.

LANGUAGE: yaml
CODE:
exporters:
  otlphttp/example:
    endpoint: <your-endpoint-url>

LANGUAGE: yaml
CODE:
service:
  pipelines:
    traces:
      exporters: [spanmetrics, otlphttp/example]

----------------------------------------

TITLE: Installing Specific OpenTelemetry Instrumentations
DESCRIPTION: Commands for installing specific OpenTelemetry instrumentation libraries.

LANGUAGE: sh
CODE:
gem install opentelemetry-instrumentation-sinatra
gem install opentelemetry-instrumentation-faraday

----------------------------------------

TITLE: Configuring MetricReaders in Java
DESCRIPTION: Demonstrates configuration of periodic metric reader and Prometheus HTTP server metric reader.

LANGUAGE: Java
CODE:
public static MetricReader periodicMetricReader(MetricExporter metricExporter) {
  return PeriodicMetricReader.builder(metricExporter).setInterval(Duration.ofSeconds(60)).build();
}

public static MetricReader prometheusMetricReader() {
  return PrometheusHttpServer.builder().setHost("localhost").setPort(9464).build();
}

----------------------------------------

TITLE: Installing OpenTelemetry Go Logging Packages
DESCRIPTION: Install the necessary OpenTelemetry Go packages for logging.

LANGUAGE: sh
CODE:
go get go.opentelemetry.io/otel \
  go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp \
  go.opentelemetry.io/otel/sdk \
  go.opentelemetry.io/otel/sdk/log

----------------------------------------

TITLE: Cloning OpAMP-Go Repository
DESCRIPTION: Command to clone the open-telemetry/opamp-go repository for setting up an OpAMP control plane.

LANGUAGE: sh
CODE:
git clone https://github.com/open-telemetry/opamp-go.git

----------------------------------------

TITLE: Loading Individual Instrumentation Libraries
DESCRIPTION: These code snippets show how to load and register individual instrumentation libraries instead of using auto-instrumentations.

LANGUAGE: typescript
CODE:
/*instrumentation.ts*/
...
import { HttpInstrumentation } from "@opentelemetry/instrumentation-http";
import { ExpressInstrumentation } from "@opentelemetry/instrumentation-express";

const sdk = new NodeSDK({
  ...
  instrumentations: [
    // Express instrumentation expects HTTP layer to be instrumented
    new HttpInstrumentation(),
    new ExpressInstrumentation(),
  ]
});

sdk.start()

LANGUAGE: javascript
CODE:
/*instrumentation.js*/
const { HttpInstrumentation } = require("@opentelemetry/instrumentation-http");
const { ExpressInstrumentation } = require("@opentelemetry/instrumentation-express");

const sdk = new NodeSDK({
  ...
  instrumentations: [
    // Express instrumentation expects HTTP layer to be instrumented
    new HttpInstrumentation(),
    new ExpressInstrumentation(),
  ]
});

----------------------------------------

TITLE: Implementing OpenTelemetry Tracing in Elixir
DESCRIPTION: Demonstrates how to implement OpenTelemetry tracing in an Elixir module, creating spans and setting attributes.

LANGUAGE: elixir
CODE:
defmodule OtelGettingStarted do
  require OpenTelemetry.Tracer, as: Tracer

  def hello do
    Tracer.with_span "operation" do
      Tracer.set_attributes([{:a_key, "a value"}])
      :world
    end
  end
end

----------------------------------------

TITLE: RBAC Configuration for Kubernetes Objects Receiver
DESCRIPTION: Example RBAC configuration to grant necessary permissions for the Kubernetes Objects Receiver to access Kubernetes API resources.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-opentelemetry-collector
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-opentelemetry-collector
rules:
  - apiGroups:
      - ''
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-opentelemetry-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector-opentelemetry-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector-opentelemetry-collector
    namespace: default

----------------------------------------

TITLE: Setting Service Name in OpenTelemetry
DESCRIPTION: Environment variable configuration to set the service name for OpenTelemetry resource attributes.

LANGUAGE: shell
CODE:
export OTEL_SERVICE_NAME="your-service-name"

----------------------------------------

TITLE: Configuring Logback OpenTelemetry Appender
DESCRIPTION: XML configuration for the OpenTelemetry Logback appender with customizable attribute capture settings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
            </pattern>
        </encoder>
    </appender>
    <appender name="OpenTelemetry"
        class="io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender">
        <captureExperimentalAttributes>false</captureExperimentalAttributes>
        <captureCodeAttributes>true</captureCodeAttributes>
        <captureMarkerAttribute>true</captureMarkerAttribute>
        <captureKeyValuePairAttributes>true</captureKeyValuePairAttributes>
        <captureLoggerContext>true</captureLoggerContext>
        <captureMdcAttributes>*</captureMdcAttributes>
    </appender>
    <root level="INFO">
        <appender-ref ref="console"/>
        <appender-ref ref="OpenTelemetry"/>
    </root>
</configuration>

----------------------------------------

TITLE: Adding OpenTelemetry Instrumentation Dependencies in mix.exs
DESCRIPTION: Configuration snippet showing how to add OpenTelemetry instrumentation library dependencies to an Elixir project's mix.exs file. The package name should be replaced with the specific instrumentation package needed.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:opentelemetry_{package}, "~> 1.0"}
  ]
end

----------------------------------------

TITLE: Filter Processor Configuration
DESCRIPTION: Example of filtering non-HTTP spans using the filter processor.

LANGUAGE: yaml
CODE:
processors:
  filter:
    error_mode: ignore
    traces:
      span:
        - attributes["http.request.method"] == nil

----------------------------------------

TITLE: Running Zipkin Container
DESCRIPTION: Docker command to run Zipkin container for trace collection.

LANGUAGE: shell
CODE:
docker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin

----------------------------------------

TITLE: Configuring SpanLimits in Java
DESCRIPTION: Configures span limits including max attributes, attribute value length, links, events, and their attributes.

LANGUAGE: Java
CODE:
public static SpanLimits spanLimits() {
  return SpanLimits.builder()
      .setMaxNumberOfAttributes(128)
      .setMaxAttributeValueLength(1024)
      .setMaxNumberOfLinks(128)
      .setMaxNumberOfAttributesPerLink(128)
      .setMaxNumberOfEvents(128)
      .setMaxNumberOfAttributesPerEvent(128)
      .build();
}

----------------------------------------

TITLE: Installing ASP.NET Core and HTTP Instrumentation
DESCRIPTION: Commands to install the prerelease versions of ASP.NET Core and HTTP instrumentation packages for OpenTelemetry.

LANGUAGE: sh
CODE:
dotnet add package OpenTelemetry.Instrumentation.AspNetCore --prerelease
dotnet add package OpenTelemetry.Instrumentation.Http --prerelease

----------------------------------------

TITLE: Initializing Express Server in TypeScript
DESCRIPTION: Sets up a basic Express server with a /rolldice endpoint that returns random numbers. Demonstrates TypeScript implementation with proper typing.

LANGUAGE: typescript
CODE:
/*app.ts*/
import express, { Express } from 'express';

const PORT: number = parseInt(process.env.PORT || '8080');
const app: Express = express();

function getRandomNumber(min: number, max: number) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

app.get('/rolldice', (req, res) => {
  res.send(getRandomNumber(1, 6).toString());
});

app.listen(PORT, () => {
  console.log(`Listening for requests on http://localhost:${PORT}`);
});

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Prometheus and Jaeger
DESCRIPTION: YAML configuration for the OpenTelemetry Collector to send metrics to Prometheus and traces to Jaeger. It defines receivers, processors, exporters, and service pipelines.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
  memory_limiter:
    # 80% of maximum memory up to 2G
    limit_mib: 1500
    # 25% of limit up to 2G
    spike_limit_mib: 512
    check_interval: 5s

exporters:
  prometheusremotewrite:
    endpoint: 'YOUR_PROMETHEUS_REMOTE_WRITE_URL'
    add_metric_suffixes: false
  otlp:
    endpoint: 'YOUR_JAEGER_URL'

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp]
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [prometheusremotewrite]

----------------------------------------

TITLE: Installing and Configuring Istio with OpenTelemetry Tracing
DESCRIPTION: This snippet demonstrates how to install Istio using istioctl and configure it with OpenTelemetry tracing. It sets up the OTLP HTTP exporter and enables the environment resource detector.

LANGUAGE: shell
CODE:
cat <<EOF | istioctl install -y -f -
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    enableTracing: true
    extensionProviders:
    - name: otel-tracing
      opentelemetry:
        port: 4318
        service: simplest-collector.default.svc.cluster.local
        http:
          path: "/v1/traces"
          timeout: 5s
        resource_detectors:
          environment: {}
EOF

----------------------------------------

TITLE: Integrating Monolog with OpenTelemetry
DESCRIPTION: PHP code demonstrating how to integrate Monolog with OpenTelemetry for logging.

LANGUAGE: php
CODE:
$handler = new \OpenTelemetry\Contrib\Logs\Monolog\Handler(
    $loggerProvider,
    \Psr\Log\LogLevel::ERROR,
);
$monolog = new \Monolog\Logger('example', [$handler]);

$monolog->info('hello, world');
$monolog->error('oh no', [
    'foo' => 'bar',
    'exception' => new \Exception('something went wrong'),
]);

----------------------------------------

TITLE: Implementing Custom Text Map Propagator Provider
DESCRIPTION: This code snippet demonstrates how to implement a custom ConfigurablePropagatorProvider to allow a custom propagator to participate in autoconfiguration.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.context.propagation.TextMapPropagator;
import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
import io.opentelemetry.sdk.autoconfigure.spi.ConfigurablePropagatorProvider;

public class CustomTextMapPropagatorProvider implements ConfigurablePropagatorProvider {
  @Override
  public TextMapPropagator getPropagator(ConfigProperties config) {
    // Callback invoked when OTEL_PROPAGATORS includes the value from getName().
    return new CustomTextMapPropagator();
  }

  @Override
  public String getName() {
    return "custom-propagator";
  }
}

----------------------------------------

TITLE: Configuring OTLP Receiver with Explicit Endpoint in YAML
DESCRIPTION: Updated configuration for the OTLP receiver, explicitly setting the endpoint to use an environment variable for the bind address.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: ${env:HOST_IP}:4317

----------------------------------------

TITLE: Adding IgnoreDirs to YAML Front Matter
DESCRIPTION: Example of how to add IgnoreDirs to the YAML front matter of a page to configure the link checker to ignore certain non-English pages with broken links.

LANGUAGE: yaml
CODE:
htmltest:
  # TODO: remove the IgnoreDirs once broken links are fixed
  IgnoreDirs:
    - path-regex/to/non-en/directory/contain/files/to/ignore
    - path-2-etc

----------------------------------------

TITLE: Complete Span Example with HTTP Details in OpenTelemetry
DESCRIPTION: Comprehensive example of a span containing HTTP request details including network information, timestamps, status codes and events. Shows full span attribute capabilities.

LANGUAGE: json
CODE:
{
  "name": "/v1/sys/health",
  "context": {
    "trace_id": "7bba9f33312b3dbb8b2c2c62bb7abe2d",
    "span_id": "086e83747d0e381e"
  },
  "parent_id": "",
  "start_time": "2021-10-22 16:04:01.209458162 +0000 UTC",
  "end_time": "2021-10-22 16:04:01.209514132 +0000 UTC",
  "status_code": "STATUS_CODE_OK",
  "status_message": "",
  "attributes": {
    "net.transport": "IP.TCP",
    "net.peer.ip": "172.17.0.1",
    "net.peer.port": "51820",
    "net.host.ip": "10.177.2.152",
    "net.host.port": "26040",
    "http.method": "GET",
    "http.target": "/v1/sys/health",
    "http.server_name": "mortar-gateway",
    "http.route": "/v1/sys/health",
    "http.user_agent": "Consul Health Check",
    "http.scheme": "http",
    "http.host": "10.177.2.152:26040",
    "http.flavor": "1.1"
  },
  "events": [
    {
      "name": "",
      "message": "OK",
      "timestamp": "2021-10-22 16:04:01.209512872 +0000 UTC"
    }
  ]
}

----------------------------------------

TITLE: Configuring OTLP Receiver Max Request Size in OpenTelemetry Collector
DESCRIPTION: Example configuration for setting the maximum request body size limit for the OTLP HTTP receiver to 10 MiB. This setting helps prevent denial of service attacks through compressed payloads.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      http:
        endpoint: localhost:4318
        max_request_body_size: 10485760 # 10 MiB

----------------------------------------

TITLE: Adding OpenTelemetry Resources via Environment Variables in .NET
DESCRIPTION: This snippet demonstrates how to add Service, Host, and OS resource attributes to a .NET application using the OTEL_RESOURCE_ATTRIBUTES environment variable. It shows the console output with the added resources.

LANGUAGE: console
CODE:
$ env OTEL_RESOURCE_ATTRIBUTES="service.name=resource-tutorial-dotnet,service.namespace=tutorial,service.version=1.0,service.instance.id=`uuidgen`,host.name=`HOSTNAME`,host.type=`uname -m`,os.name=`uname -s`,os.version=`uname -r`" dotnet run

Activity.TraceId:          d1cbb7787440cc95b325835cb2ff8018
Activity.SpanId:           2ca007300fcb3068
Activity.TraceFlags:           Recorded
Activity.ActivitySourceName: tutorial-dotnet
Activity.DisplayName: SayHello
Activity.Kind:        Internal
Activity.StartTime:   2022-10-02T13:31:12.0175090Z
Activity.Duration:    00:00:00.0003920
Activity.Tags:
    foo: 1
    bar: Hello, World!
    baz: [1,2,3]
Resource associated with Activity:
    service.name: resource-tutorial-dotnet
    service.namespace: tutorial
    service.version: 1.0
    service.instance.id: 93B14BAD-813D-48EE-9FB1-2ADFD07C5E78
    host.name: myhost
    host.type: arm64
    os.name: Darwin
    os.version: 21.6.0

----------------------------------------

TITLE: Implementing RollDice Handler in Go
DESCRIPTION: Implements the dice rolling handler function that generates random numbers

LANGUAGE: go
CODE:
package main

import (
	"io"
	"log"
	"math/rand"
	"net/http"
	"strconv"
)

func rolldice(w http.ResponseWriter, r *http.Request) {
	roll := 1 + rand.Intn(6)

	resp := strconv.Itoa(roll) + "\n"
	if _, err := io.WriteString(w, resp); err != nil {
		log.Printf("Write failed: %v\n", err)
	}
}

----------------------------------------

TITLE: Combining Environment Variables and Code for OpenTelemetry Resources in .NET
DESCRIPTION: This console snippet demonstrates the output when combining resources set through environment variables and in code. It shows how values set in code take precedence over those set via environment variables.

LANGUAGE: console
CODE:
$ env OTEL_RESOURCE_ATTRIBUTES="service.namespace=tutorial,host.name=`HOSTNAME`,host.type=`uname -m`,os.name=`uname -s`,os.version=`uname -r`" dotnet run

Activity.TraceId:          d1cbb7787440cc95b325835cb2ff8018
Activity.SpanId:           2ca007300fcb3068
Activity.TraceFlags:           Recorded
Activity.ActivitySourceName: tutorial-dotnet
Activity.DisplayName: SayHello
Activity.Kind:        Internal
Activity.StartTime:   2022-10-02T13:31:12.0175090Z
Activity.Duration:    00:00:00.0003920
Activity.Tags:
    foo: 1
    bar: Hello, World!
    baz: [1,2,3]
Resource associated with Activity:
    environment.name: production
    team.name: backend
    service.name: resource-tutorial-dotnet
    service.namespace: tutorial
    service.version: 1.0
    service.instance.id: 28976A1C-BF02-43CA-BAE0-6E0564431462
    host.name: pcarter
    host.type: arm64
    os.name: Darwin
    os.version: 21.6.0

----------------------------------------

TITLE: Implementing OpenTelemetry Tracing in Vapor Application
DESCRIPTION: Enhanced version of the HTTP server that includes OpenTelemetry instrumentation for tracing requests to the /rolldice endpoint.

LANGUAGE: swift
CODE:
import Vapor
import OpenTelemetryApi
import OpenTelemetrySdk
import StdoutExporter
import ResourceExtension

@main
enum Entrypoint {
    static func main() async throws {

        let spanExporter = StdoutExporter();
        let spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)
        let resources = DefaultResources().get()

        let instrumentationScopeName = "DiceServer"
        let instrumentationScopeVersion = "semver:0.1.0"

        OpenTelemetry.registerTracerProvider(tracerProvider:
            TracerProviderBuilder()
                .add(spanProcessor: spanProcessor)
                .with(resource: resources)
                .build()
        )
        let tracer = OpenTelemetry.instance.tracerProvider.get(instrumentationName: instrumentationScopeName, instrumentationVersion: instrumentationScopeVersion) as! TracerSdk


        let app = try Application(.detect())
        defer { app.shutdown() }

        app.get("rolldice") { req in
            let span = tracer.spanBuilder(spanName: "GET /rolldice").setSpanKind(spanKind: .client).startSpan()
            let result = Int.random(in: 1..<7)
            span.end();
            return result
        }

        try app.run()
    }
}

----------------------------------------

TITLE: NuGet Package Installation Error Message
DESCRIPTION: Error message showing package compatibility issues with .NET Framework projects

LANGUAGE: txt
CODE:
Could not install package 'OpenTelemetry.AutoInstrumentation.Runtime.Native 1.6.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.7.2', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.

----------------------------------------

TITLE: Creating OpenTelemetry Collector Builder Manifest
DESCRIPTION: YAML configuration for the OpenTelemetry Collector builder manifest file, specifying distribution details and components to include.

LANGUAGE: yaml
CODE:
dist:
  name: otelcol-dev
  description: Basic OTel Collector distribution for Developers
  output_path: ./otelcol-dev

exporters:
  - gomod:
      go.opentelemetry.io/collector/exporter/debugexporter {{% version-from-registry collector-exporter-debug %}}
  - gomod:
      go.opentelemetry.io/collector/exporter/otlpexporter {{% version-from-registry collector-exporter-otlp %}}

processors:
  - gomod:
      go.opentelemetry.io/collector/processor/batchprocessor {{% version-from-registry collector-processor-batch %}}

receivers:
  - gomod:
      go.opentelemetry.io/collector/receiver/otlpreceiver {{% version-from-registry collector-receiver-otlp %}}

providers:
  - gomod: go.opentelemetry.io/collector/confmap/provider/envprovider v1.18.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/fileprovider v1.18.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/httpprovider v1.18.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/httpsprovider v1.18.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/yamlprovider v1.18.0

----------------------------------------

TITLE: Installing OpenTelemetry SDK and Dependencies
DESCRIPTION: Shell commands to install OpenTelemetry SDK, OTLP exporter, and Guzzle HTTP client.

LANGUAGE: shell
CODE:
composer require guzzlehttp/guzzle

LANGUAGE: shell
CODE:
composer require \
  open-telemetry/sdk \
  open-telemetry/exporter-otlp

----------------------------------------

TITLE: Configuring OpenTelemetry SDK with Builders
DESCRIPTION: Java code to programmatically configure OpenTelemetry SDK with custom settings and Jaeger exporter

LANGUAGE: java
CODE:
Resource resource = Resource.getDefault()
        .merge(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, "my-kafka-service")));

SdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder()
        .addSpanProcessor(BatchSpanProcessor.builder(JaegerGrpcSpanExporter.builder().build()).build())
        .setSampler(Sampler.alwaysOn())
        .setResource(resource)
        .build();

OpenTelemetry openTelemetry = OpenTelemetrySdk.builder()
        .setTracerProvider(sdkTracerProvider)
        .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))
        .buildAndRegisterGlobal();

----------------------------------------

TITLE: Implementing RollDice Handler in Go
DESCRIPTION: Implements the dice rolling handler function that generates random numbers

LANGUAGE: go
CODE:
package main

import (
	"io"
	"log"
	"math/rand"
	"net/http"
	"strconv"
)

func rolldice(w http.ResponseWriter, r *http.Request) {
	roll := 1 + rand.Intn(6)

	resp := strconv.Itoa(roll) + "\n"
	if _, err := io.WriteString(w, resp); err != nil {
		log.Printf("Write failed: %v\n", err)
	}
}

----------------------------------------

TITLE: AWS CLI Command for Lambda Configuration
DESCRIPTION: AWS CLI command to update Lambda function configuration with custom collector configuration path.

LANGUAGE: bash
CODE:
aws lambda update-function-configuration --function-name Function --environment Variables={OPENTELEMETRY_COLLECTOR_CONFIG_URI=/var/task/collector.yaml}

----------------------------------------

TITLE: Configuring Views in Java
DESCRIPTION: Demonstrates configuration of views for dropping metrics, setting histogram bucket boundaries, filtering attributes, and setting cardinality limits.

LANGUAGE: Java
CODE:
public static SdkMeterProviderBuilder dropMetricView(
    SdkMeterProviderBuilder builder, String metricName) {
  return builder.registerView(
      InstrumentSelector.builder().setName(metricName).build(),
      View.builder().setAggregation(Aggregation.drop()).build());
}

public static SdkMeterProviderBuilder histogramBucketBoundariesView(
    SdkMeterProviderBuilder builder, String metricName, List<Double> bucketBoundaries) {
  return builder.registerView(
      InstrumentSelector.builder().setName(metricName).build(),
      View.builder()
          .setAggregation(Aggregation.explicitBucketHistogram(bucketBoundaries))
          .build());
}

public static SdkMeterProviderBuilder attributeFilterView(
    SdkMeterProviderBuilder builder, String metricName, Set<String> keysToRetain) {
  return builder.registerView(
      InstrumentSelector.builder().setName(metricName).build(),
      View.builder().setAttributeFilter(keysToRetain).build());
}

public static SdkMeterProviderBuilder cardinalityLimitsView(
    SdkMeterProviderBuilder builder, String metricName, int cardinalityLimit) {
  return builder.registerView(
      InstrumentSelector.builder().setName(metricName).build(),
      View.builder().setCardinalityLimit(cardinalityLimit).build());
}

----------------------------------------

TITLE: Installing OpenTelemetry Collector on Red Hat Linux (AMD64)
DESCRIPTION: Commands to download and install the OpenTelemetry Collector RPM package on Red Hat-based Linux systems for AMD64 architecture.

LANGUAGE: sh
CODE:
sudo yum update
sudo yum -y install wget systemctl
wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.rpm
sudo rpm -ivh otelcol_{{% param vers %}}_linux_amd64.rpm

----------------------------------------

TITLE: Initializing Composer Dependencies for Example App
DESCRIPTION: Shell commands to initialize a minimal composer.json file with required dependencies for the example application.

LANGUAGE: shell
CODE:
composer init \
  --no-interaction \
  --require slim/slim:"^4" \
  --require slim/psr7:"^1" \
  --require monolog/monolog:"^3"
composer update

----------------------------------------

TITLE: Configuring Resource Detection Processor in OpenTelemetry Collector
DESCRIPTION: Sets up the resource detection processor to add cloud or host-level information to telemetry, specifying detectors for various environments and a timeout.

LANGUAGE: yaml
CODE:
processors:
  resourcedetection/system:
    # Modify the list of detectors to match the cloud environment
    detectors: [env, system, gcp, ec2, azure]
    timeout: 2s
    override: false

----------------------------------------

TITLE: Configuring Multiple Receivers
DESCRIPTION: Example configuration showing multiple receivers for different data sources.

LANGUAGE: yaml
CODE:
receivers:
  fluentforward:
    endpoint: 0.0.0.0:8006

  hostmetrics:
    scrapers:
      cpu:
      disk:
      filesystem:
      load:
      memory:
      network:
      process:
      processes:
      paging:

  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      thrift_binary:
      thrift_compact:
      thrift_http:

  kafka:
    protocol_version: 2.0.0

  opencensus:

  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        tls:
          cert_file: cert.pem
          key_file: cert-key.pem
      http:
        endpoint: 0.0.0.0:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 5s
          static_configs:
            - targets: [localhost:8888]

  zipkin:

----------------------------------------

TITLE: Enriching Activity Data with Custom Tags
DESCRIPTION: C# implementation showing how to enrich OpenTelemetry Activity objects with additional custom tags using the Enrich method.

LANGUAGE: csharp
CODE:
this.tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddAspNetInstrumentation((options) => options.Enrich
        = (activity, eventName, rawObject) =>
    {
        if (eventName.Equals("OnStartActivity"))
        {
            if (rawObject is HttpRequest httpRequest)
            {
                activity?.SetTag("physicalPath", httpRequest.PhysicalPath);
            }
        }
        else if (eventName.Equals("OnStopActivity"))
        {
            if (rawObject is HttpResponse httpResponse)
            {
                activity?.SetTag("responseType", httpResponse.ContentType);
            }
        }
    })
    .Build();

----------------------------------------

TITLE: Preparing Virtual Environment for Python Logs Example
DESCRIPTION: Shell commands to create and activate a virtual environment for the Python logs example.

LANGUAGE: sh
CODE:
mkdir python_logs_example
virtualenv python_logs_example
source python_logs_example/bin/activate

----------------------------------------

TITLE: Wrapping Kafka Clients with OpenTelemetry
DESCRIPTION: Java code demonstrating how to wrap Kafka producers and consumers with OpenTelemetry tracing

LANGUAGE: java
CODE:
KafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());
Producer<String, String> tracingProducer = telemetry.wrap(producer);

LANGUAGE: java
CODE:
KafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());
Consumer<String, String> tracingConsumer = telemetry.wrap(this.consumer);

----------------------------------------

TITLE: Setting GOBIN Environment Variable - Bash
DESCRIPTION: Sets the GOBIN environment variable to the default Go binary installation path if not already set.

LANGUAGE: sh
CODE:
export GOBIN=${GOBIN:-$(go env GOPATH)/bin}

----------------------------------------

TITLE: CloudFormation Configuration for Lambda Environment Variables
DESCRIPTION: CloudFormation YAML configuration for setting up Lambda function environment variables with custom collector configuration path.

LANGUAGE: yaml
CODE:
Function:
  Type: AWS::Serverless::Function
  Properties:
    ...
    Environment:
      Variables:
        OPENTELEMETRY_COLLECTOR_CONFIG_URI: /var/task/collector.yaml

----------------------------------------

TITLE: Using Span Decorators in Python with OpenTelemetry
DESCRIPTION: Demonstrate how to use the start_as_current_span decorator to create spans for entire functions.

LANGUAGE: python
CODE:
@tracer.start_as_current_span("do_work")
def do_work():
    print("doing some work...")

----------------------------------------

TITLE: Logback XML Configuration
DESCRIPTION: XML configuration for Logback framework showing production-ready setup with disabled console appenders.

LANGUAGE: xml
CODE:
<configuration>
  <logger name="com.example" level="debug"/>
  <root level="info">
  </root>
</configuration>

----------------------------------------

TITLE: Installing OTLP Dependencies with Composer
DESCRIPTION: Commands to install the OTLP exporter and HTTP client dependencies using Composer

LANGUAGE: shell
CODE:
composer require \
  open-telemetry/exporter-otlp \
  php-http/guzzle7-adapter

----------------------------------------

TITLE: Erlang Dependencies Configuration
DESCRIPTION: Configuration of OpenTelemetry dependencies for Erlang applications including API, SDK, and exporter packages.

LANGUAGE: erlang
CODE:
{deps, [{opentelemetry_api, "~> {{% param versions.otelApi %}}},
        {opentelemetry, "~> {{% param versions.otelSdk %}}},
        {opentelemetry_exporter, "~> {{% param versions.otelExporter %}}}"]}.

----------------------------------------

TITLE: Installing OpenTelemetry Collector Builder (Linux AMD64)
DESCRIPTION: Curl command to download and install the OpenTelemetry Collector builder (ocb) binary for Linux AMD64 systems.

LANGUAGE: sh
CODE:
curl --proto '=https' --tlsv1.2 -fL -o ocb \
https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2F{{% version-from-registry collector-builder %}}/ocb_{{% version-from-registry collector-builder noPrefix %}}_linux_amd64
chmod +x ocb

----------------------------------------

TITLE: Configuring OpenTelemetry Collector in YAML
DESCRIPTION: YAML configuration for OpenTelemetry Collector that receives OTLP data and exports to Jaeger. Sets up both gRPC and HTTP protocol endpoints with batch processing.

LANGUAGE: yaml
CODE:
# otel-collector-config.yaml

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: '0.0.0.0:4317'
      http:
        endpoint: '0.0.0.0:4318'
processors:
  batch:
    send_batch_size: 1024
    timeout: 5s
exporters:
  debug:
  otlp/jaeger:
    endpoint: jaeger-all-in-one:4317
    tls:
      insecure: true
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [debug, otlp/jaeger]

----------------------------------------

TITLE: OTLP Exporter Queue Configuration
DESCRIPTION: Configuration for managing queue size in OTLP exporter using exporterhelper.

LANGUAGE: yaml
CODE:
exporters:
  otlp:
    endpoint: <ENDPOINT>
    sending_queue:
      queue_size: 800

----------------------------------------

TITLE: Basic HTTP Server Implementation in Rust
DESCRIPTION: Implementation of a basic HTTP server using hyper that responds to /rolldice endpoints with random numbers

LANGUAGE: rust
CODE:
use std::convert::Infallible;
use std::net::SocketAddr;

use http_body_util::Full;
use hyper::body::Bytes;
use hyper::server::conn::http1;
use hyper::service::service_fn;
use hyper::Method;
use hyper::{Request, Response};
use hyper_util::rt::TokioIo;
use rand::Rng;
use tokio::net::TcpListener;

async fn roll_dice(_: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {
    let random_number = rand::rng().random_range(1..=6);
    Ok(Response::new(Full::new(Bytes::from(
        random_number.to_string(),
    ))))
}

async fn handle(req: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {
    match (req.method(), req.uri().path()) {
        (&Method::GET, "/rolldice") => roll_dice(req).await,
        _ => Ok(Response::builder()
            .status(404)
            .body(Full::new(Bytes::from("Not Found")))
            .unwrap()),
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let addr = SocketAddr::from(([127, 0, 0, 1], 8080));

    let listener = TcpListener::bind(addr).await?;

    loop {
        let (stream, _) = listener.accept().await?;
        let io = TokioIo::new(stream);
        tokio::task::spawn(async move {
            if let Err(err) = http1::Builder::new()
                .serve_connection(io, service_fn(handle))
                .await
            {
                eprintln!("Error serving connection: {:?}", err);
            }
        });
    }
}

----------------------------------------

TITLE: Adding OpenTelemetry Helm Repository
DESCRIPTION: Command to add the official OpenTelemetry Helm repository to your local Helm configuration. This is required before installing any OpenTelemetry charts.

LANGUAGE: sh
CODE:
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts

----------------------------------------

TITLE: Implementing Flask Backend with Redis
DESCRIPTION: A Python Flask application that implements a simple hello world counter using Redis, configured for OpenTelemetry instrumentation.

LANGUAGE: python
CODE:
import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)

----------------------------------------

TITLE: Pulling OpenTelemetry Collector Docker Image - Bash
DESCRIPTION: Docker command to pull the OpenTelemetry Collector Contrib image.

LANGUAGE: sh
CODE:
docker pull otel/opentelemetry-collector-contrib:{{% param vers %}}

----------------------------------------

TITLE: Setting OTLP Headers
DESCRIPTION: Configuration for adding custom headers to OTLP requests. Headers are specified as key-value pairs for authentication and additional metadata.

LANGUAGE: bash
CODE:
export OTEL_EXPORTER_OTLP_HEADERS="api-key=key,other-config-value=value"

----------------------------------------

TITLE: Configuring Global Propagators in Elixir
DESCRIPTION: Configuration for setting text map propagators in Elixir runtime.exs file. Enables baggage and trace context propagation formats.

LANGUAGE: elixir
CODE:
text_map_propagators: [:baggage, :trace_context],

----------------------------------------

TITLE: Adding OpenTelemetry Helm Repository
DESCRIPTION: Command to add the OpenTelemetry Helm repository to your local Helm installation.

LANGUAGE: shell
CODE:
helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts

----------------------------------------

TITLE: Installing OpenTelemetry Dependencies
DESCRIPTION: Commands to install the required OpenTelemetry packages for Node.js auto-instrumentation.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/api
npm install --save @opentelemetry/auto-instrumentations-node

----------------------------------------

TITLE: Manual Installation of OpenTelemetry Collector on Linux (AMD64)
DESCRIPTION: Commands to download and extract the OpenTelemetry Collector binary manually on Linux systems for AMD64 architecture.

LANGUAGE: sh
CODE:
curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.tar.gz
tar -xvf otelcol_{{% param vers %}}_linux_amd64.tar.gz

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with Target Allocator in Kubernetes
DESCRIPTION: This YAML configuration demonstrates how to set up an OpenTelemetry Collector with Target Allocator for efficient Prometheus scraping in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: collector-with-ta
spec:
  mode: statefulset
  targetAllocator:
    enabled: true
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 10s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]

    exporters:
      # Note: Prior to v0.86.0 use the `logging` instead of `debug`.
      debug:

    service:
      pipelines:
        traces:
          receivers: [prometheus]
          processors: []
          exporters: [debug]

----------------------------------------

TITLE: Configuring Custom Sampler in Erlang Application Configuration
DESCRIPTION: Configures a custom sampler to not sample spans with a specific HTTP target attribute in Erlang application configuration.

LANGUAGE: erlang
CODE:
{opentelemetry, {sampler, {attributes_sampler, #{'http.target' => <<"/healthcheck">>}}}}

----------------------------------------

TITLE: Docker OTLP Configuration
DESCRIPTION: Configuration for running OTLP exporter in Docker environment with specific hostname binding.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: my-hostname:4317

----------------------------------------

TITLE: Python Dependencies Configuration
DESCRIPTION: Requirements file specifying Python package dependencies including OpenTelemetry components.

LANGUAGE: txt
CODE:
flask
redis
opentelemetry-distro
opentelemetry-exporter-otlp-proto-http

----------------------------------------

TITLE: Initializing Chart.js and Custom Scripts for OpenTelemetry Benchmarks
DESCRIPTION: This snippet includes the necessary Chart.js library and a custom script file for rendering benchmark data. It also sets up the main script that will process and display the benchmark results.

LANGUAGE: HTML
CODE:
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.2/dist/Chart.min.js"></script>
<script src="https://open-telemetry.github.io/opentelemetry-collector-contrib/benchmarks/loadtests/data.js"></script>
<script id="main-script">
  'use strict';
  (function () {
    // Main script content here
  })();
</script>

----------------------------------------

TITLE: Setting Resource Attributes via Environment Variable
DESCRIPTION: Setting OpenTelemetry resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable.

LANGUAGE: shell
CODE:
OTEL_RESOURCE_ATTRIBUTES="deployment.environment=development"

----------------------------------------

TITLE: Installing NPM Dependencies
DESCRIPTION: Command to install required npm packages and prerequisites for the website.

LANGUAGE: sh
CODE:
npm install

----------------------------------------

TITLE: Docker Compose Configuration
DESCRIPTION: Docker Compose setup for OpenTelemetry Collector with port mapping.

LANGUAGE: yaml
CODE:
services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:{{% param collector_vers %}}
    ports:
      - '4567:4317'

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: otel-collector:4317

----------------------------------------

TITLE: Generating Sample Traces - Bash
DESCRIPTION: Commands to generate sample traces using telemetrygen utility and filter the output.

LANGUAGE: sh
CODE:
$GOBIN/telemetrygen traces --otlp-insecure --traces 3

LANGUAGE: sh
CODE:
$GOBIN/telemetrygen traces --otlp-insecure \
  --traces 3 2>&1 | grep -E 'start|traces|stop'

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for File Logging
DESCRIPTION: YAML configuration for the OpenTelemetry Collector to process logs from a file.

LANGUAGE: yaml
CODE:
receivers:
  filelog:
    include: [/usr/src/app/*.log]
    operators:
      - type: json_parser
        timestamp:
          parse_from: attributes.asctime
          layout: '%Y-%m-%dT%H:%M:%S'
        severity:
          parse_from: attributes.levelname
exporters:
  debug:
    verbosity: detailed
service:
  pipelines:
    logs:
      receivers: [filelog]
      exporters: [debug]

----------------------------------------

TITLE: Filtering Spans by Service Name using OTTL in OpenTelemetry Collector
DESCRIPTION: Configures the filter processor to allow span data only from specific services (app1, app2, app3) and drop data from all other services using OTTL (OpenTelemetry Transformation Language).

LANGUAGE: yaml
CODE:
processors:
  filter/ottl:
    error_mode: ignore
    traces:
      span:
        - |
        resource.attributes["service.name"] != "app1" and
        resource.attributes["service.name"] != "app2" and
        resource.attributes["service.name"] != "app3"

----------------------------------------

TITLE: Implementing Dice Rolling Logic in Ruby
DESCRIPTION: Ruby code for the DiceController class, implementing a 'roll' action that returns a random number between 1 and 6.

LANGUAGE: ruby
CODE:
class DiceController < ApplicationController
  def roll
    render json: rand(1..6).to_s
  end
end

----------------------------------------

TITLE: Java Agent Configuration
DESCRIPTION: Command line configuration for the OpenTelemetry Java agent to enable OTLP/JSON logging to stdout with various instrumentation parameters.

LANGUAGE: bash
CODE:
java -javaagent:/path/to/opentelemetry-javaagent.jar \
     -Dotel.logs.exporter=experimental-otlp/stdout \
     -Dotel.instrumentation.logback-appender.experimental-log-attributes=true \
     -Dotel.instrumentation.logback-appender.experimental.capture-key-value-pair-attributes=true \
     -Dotel.instrumentation.logback-appender.experimental.capture-mdc-attributes=* \
     -jar /path/to/my-app.jar

----------------------------------------

TITLE: Adding gRPC Auto-Instrumentation for Server in Go with OpenTelemetry
DESCRIPTION: This code creates a new gRPC server with OpenTelemetry instrumentation. It uses the otelgrpc.NewServerHandler() to automatically instrument incoming gRPC requests.

LANGUAGE: go
CODE:
var srv = grpc.NewServer(
    grpc.StatsHandler(otelgrpc.NewServerHandler()),
)

----------------------------------------

TITLE: Installing OpenTelemetry Python Packages
DESCRIPTION: Install the OpenTelemetry API and SDK packages using pip.

LANGUAGE: shell
CODE:
pip install opentelemetry-api
pip install opentelemetry-sdk

----------------------------------------

TITLE: Configuring TraceIdRatioBasedSampler Using Environment Variables
DESCRIPTION: Sets up trace sampling using environment variables to sample 10% of traces. Uses OTEL_TRACES_SAMPLER and OTEL_TRACES_SAMPLER_ARG environment variables.

LANGUAGE: shell
CODE:
export OTEL_TRACES_SAMPLER="traceidratio"
export OTEL_TRACES_SAMPLER_ARG="0.1"

----------------------------------------

TITLE: Installing OpenTelemetry SDK and Instrumentation Libraries
DESCRIPTION: Composer command to install the OpenTelemetry SDK, OTLP exporter, and auto-instrumentation packages for Slim Framework and PSR-18.

LANGUAGE: Shell
CODE:
composer require \
    open-telemetry/sdk \
    open-telemetry/exporter-otlp \
    open-telemetry/opentelemetry-auto-slim \
    open-telemetry/opentelemetry-auto-psr18

----------------------------------------

TITLE: Implementing Shutdown in OpenTelemetry TracerProvider
DESCRIPTION: This code snippet shows how to implement the shutdown function for a TracerProvider in an OpenTelemetry Node.js application. This ensures all spans are exported before the application terminates.

LANGUAGE: javascript
CODE:
import { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';
const provider = new NodeTracerProvider();
provider.register();
// when your you terminate your service, call shutdown on provider:
provider.shutdown();

----------------------------------------

TITLE: OpenTelemetry Collector Configuration with Target Allocator
DESCRIPTION: YAML configuration for setting up the OpenTelemetry Collector with Target Allocator enabled in Kubernetes.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otelcol
  namespace: opentelemetry
spec:
  mode: statefulset
  targetAllocator:
    enabled: true
    serviceAccount: opentelemetry-targetallocator-sa
    prometheusCR:
      enabled: true
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 30s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]
        target_allocator:
          endpoint: http://otelcol-targetallocator
          interval: 30s
          collector_id: "${POD_NAME}"

----------------------------------------

TITLE: Docker Compose Configuration for otelsql Example
DESCRIPTION: YAML configuration for Docker Compose, setting up services for MySQL, OpenTelemetry Collector, Prometheus, Jaeger, and the client application.

LANGUAGE: yaml
CODE:
version: '3.9'
services:
  mysql:
    image: mysql:8.3
    environment:
      - MYSQL_ROOT_PASSWORD=otel_password
      - MYSQL_DATABASE=db
    healthcheck:
      test:
        mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    command: ['--config=/etc/otel-collector.yaml']
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml
    depends_on:
      - jaeger

  prometheus:
    image: prom/prometheus:v2.45.2
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    depends_on:
      - otel-collector

  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - 16686:16686

  client:
    build:
      dockerfile: $PWD/Dockerfile
      context: ../..
    depends_on:
      mysql:
        condition: service_healthy

----------------------------------------

TITLE: Common Log Format (CLF) Example
DESCRIPTION: Example of a structured log in Common Log Format typically used by infrastructure components.

LANGUAGE: text
CODE:
127.0.0.1 - johndoe [04/Aug/2024:12:34:56 -0400] "POST /api/v1/login HTTP/1.1" 200 1234

----------------------------------------

TITLE: Adding a Slow SQL Query for Demonstration
DESCRIPTION: Modified Go function to include a slow SQL query, demonstrating how otelsql can help identify performance issues.

LANGUAGE: go
CODE:
func runSQLQuery(ctx context.Context, db *sql.DB) error {
    // Create a parent span (Optional)
    tracer := otel.GetTracerProvider()
    ctx, span := tracer.Tracer(instrumentationName).Start(ctx, "example")
    defer span.End()

    runSlowSQLQuery(ctx, db)

    err := query(ctx, db)
    if err != nil {
        span.RecordError(err)
        return err
    }
    return nil
}

func runSlowSQLQuery(ctx context.Context, db *sql.DB) {
    db.QueryContext(ctx, `SELECT SLEEP(1)`)
}

----------------------------------------

TITLE: Renaming Metric in OpenTelemetry Collector
DESCRIPTION: Configures the metrics transform processor to rename the 'system.cpu.usage' metric to 'system.cpu.usage_time'.

LANGUAGE: yaml
CODE:
processors:
  metricstransform/rename:
    transforms:
      - include: system.cpu.usage
        action: update
        new_name: system.cpu.usage_time

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Profiling
DESCRIPTION: YAML configuration example showing how to set up the OpenTelemetry Collector for ingesting and exporting profiling data using OTLP protocol. This requires enabling the service.profilesSupport feature gate.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
exporters:
  otlp:
    endpoint: 'localhost:4317'
service:
  pipelines:
    profiles:
      receivers: [otlp]
      exporters: [otlp]

----------------------------------------

TITLE: Configuring LogLimits in Java
DESCRIPTION: Configures log limits including max attributes and attribute value length.

LANGUAGE: Java
CODE:
public static LogLimits logLimits() {
  return LogLimits.builder()
      .setMaxNumberOfAttributes(128)
      .setMaxAttributeValueLength(1024)
      .build();
}

----------------------------------------

TITLE: Implementing TraceIdRatioBasedSampler in Node.js
DESCRIPTION: Configures trace sampling in Node.js environment using TypeScript/JavaScript. Sets up NodeSDK with TraceIdRatioBasedSampler to sample 10% of traces.

LANGUAGE: typescript
CODE:
import { TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-node';

const samplePercentage = 0.1;

const sdk = new NodeSDK({
  // Other SDK configuration parameters go here
  sampler: new TraceIdRatioBasedSampler(samplePercentage),
});

LANGUAGE: javascript
CODE:
const { TraceIdRatioBasedSampler } = require('@opentelemetry/sdk-trace-node');

const samplePercentage = 0.1;

const sdk = new NodeSDK({
  // Other SDK configuration parameters go here
  sampler: new TraceIdRatioBasedSampler(samplePercentage),
});

----------------------------------------

TITLE: Configuring OpenTelemetry via Environment Variables
DESCRIPTION: Shell commands to set environment variables for configuring OpenTelemetry auto-instrumentation, including service name, exporter, and propagators.

LANGUAGE: Shell
CODE:
OTEL_PHP_AUTOLOAD_ENABLED=true \
OTEL_SERVICE_NAME=your-service-name \
OTEL_TRACES_EXPORTER=otlp \
OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \
OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318 \
OTEL_PROPAGATORS=baggage,tracecontext \
php myapp.php

----------------------------------------

TITLE: Setting Up a Basic TracerProvider in OpenTelemetry
DESCRIPTION: This snippet demonstrates how to set up a basic TracerProvider with a ConsoleSpanExporter in an OpenTelemetry Node.js application. It's useful for verifying that spans are being created and processed correctly.

LANGUAGE: javascript
CODE:
import { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';
import {
  ConsoleSpanExporter,
  SimpleSpanProcessor,
} from '@opentelemetry/sdk-trace-base';
const provider = new NodeTracerProvider();
provider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));
provider.register();

----------------------------------------

TITLE: Configuring ParentBasedSampler in Elixir Application Configuration
DESCRIPTION: Configures the ParentBasedSampler with TraceIdRatioBasedSampler for root spans and specific behaviors for different parent span states in Elixir application configuration.

LANGUAGE: elixir
CODE:
# config/runtime.exs
config :opentelemetry, sampler: {:parent_based, %{root: {:trace_id_ratio_based, 0.10},
                                                  remote_parent_sampled: :always_on,
                                                  remote_parent_not_sampled: :always_off,
                                                  local_parent_sampled: :always_on,
                                                  local_parent_not_sampled: :always_off}}

----------------------------------------

TITLE: Initializing ASP.NET OpenTelemetry in Global.asax.cs
DESCRIPTION: C# code for initializing OpenTelemetry instrumentation in an ASP.NET application's Global.asax.cs file, including tracer provider setup and resource configuration.

LANGUAGE: csharp
CODE:
using OpenTelemetry;
using OpenTelemetry.Trace;

public class WebApiApplication : HttpApplication
{
    private TracerProvider _tracerProvider;

    protected void Application_Start()
    {
        _tracerProvider = Sdk.CreateTracerProviderBuilder()
            .AddAspNetInstrumentation()

            // Other configuration, like adding an exporter and setting resources
            .AddConsoleExporter()
            .AddSource("my-service-name")
            .SetResourceBuilder(
                ResourceBuilder.CreateDefault()
                    .AddService(serviceName: "my-service-name", serviceVersion: "1.0.0"))

            .Build();
    }

    protected void Application_End()
    {
        _tracerProvider?.Dispose();
    }
}

----------------------------------------

TITLE: OpenTelemetry Environment Setup Commands
DESCRIPTION: Shell commands for setting up a virtual environment and installing required OpenTelemetry packages.

LANGUAGE: shell
CODE:
mkdir auto_instrumentation
cd auto_instrumentation
python -m venv venv
source ./venv/bin/activate
pip install opentelemetry-distro
pip install flask requests
opentelemetry-bootstrap -a install

----------------------------------------

TITLE: Creating Nested Spans in Erlang and Elixir
DESCRIPTION: Demonstrates how to create nested spans within the same process in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
parent_function() ->
    ?with_span(parent, #{}, fun child_function/0).

child_function() ->
    %% this is the same process, so the span parent set as the active
    %% span in the with_span call above will be the active span in this function
    ?with_span(child, #{},
               fun() ->
                   %% do work here. when this function returns, child will complete.
               end).

LANGUAGE: elixir
CODE:
require OpenTelemetry.Tracer

def parent_function() do
    OpenTelemetry.Tracer.with_span :parent do
        child_function()
    end
end

def child_function() do
    # this is the same process, so the span :parent set as the active
    # span in the with_span call above will be the active span in this function
    OpenTelemetry.Tracer.with_span :child do
        ## do work here. when this function returns, :child will complete.
    end
end

----------------------------------------

TITLE: Installing Jaeger Operator in Kubernetes
DESCRIPTION: This snippet demonstrates how to install the Jaeger operator in a Kubernetes cluster using kubectl commands. It creates a namespace for observability and deploys the Jaeger operator.

LANGUAGE: shell
CODE:
kubectl create namespace observability
kubectl create -f https://github.com/jaegertracing/jaeger-operator/releases/download/v1.57.0/jaeger-operator.yaml -n observability

----------------------------------------

TITLE: Setting OTLP Protocol
DESCRIPTION: Configuration for specifying the transport protocol used by OTLP exporters. Supports gRPC, HTTP/protobuf, and HTTP/JSON options.

LANGUAGE: bash
CODE:
export OTEL_EXPORTER_OTLP_PROTOCOL=grpc

----------------------------------------

TITLE: Adding Quarkus OpenTelemetry Dependency in Gradle
DESCRIPTION: This Kotlin snippet demonstrates how to add the quarkus-opentelemetry extension dependency to a Gradle-based Quarkus project. This is essential for enabling OpenTelemetry support in a Quarkus application using Gradle as the build tool.

LANGUAGE: Kotlin
CODE:
implementation("io.quarkus:quarkus-opentelemetry")

----------------------------------------

TITLE: Configuring Ingress for Frontend Proxy
DESCRIPTION: YAML configuration to enable and configure an ingress resource for the frontend-proxy component in the Helm chart values file.

LANGUAGE: yaml
CODE:
components:
  frontend-proxy:
    ingress:
      enabled: true
      annotations: {}
      hosts:
        - host: otel-demo.my-domain.com
          paths:
            - path: /
              pathType: Prefix
              port: 8080

----------------------------------------

TITLE: Implementing TraceIdRatioBasedSampler in Browser
DESCRIPTION: Configures trace sampling in browser environment using TypeScript/JavaScript. Sets up WebTracerProvider with TraceIdRatioBasedSampler to sample 10% of traces.

LANGUAGE: typescript
CODE:
import {
  WebTracerProvider,
  TraceIdRatioBasedSampler,
} from '@opentelemetry/sdk-trace-web';

const samplePercentage = 0.1;

const provider = new WebTracerProvider({
  sampler: new TraceIdRatioBasedSampler(samplePercentage),
});

LANGUAGE: javascript
CODE:
const {
  WebTracerProvider,
  TraceIdRatioBasedSampler,
} = require('@opentelemetry/sdk-trace-web');

const samplePercentage = 0.1;

const provider = new WebTracerProvider({
  sampler: new TraceIdRatioBasedSampler(samplePercentage),
});

----------------------------------------

TITLE: Setting Resource Attributes via Environment Variables
DESCRIPTION: Example of setting custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable.

LANGUAGE: shell
CODE:
env OTEL_RESOURCE_ATTRIBUTES="service.name=my_service,service.namespace=demo,service.version=1.0,deployment.environment=development" \
php example.php

----------------------------------------

TITLE: Configuring Resource Detectors via Environment Variables
DESCRIPTION: Example showing how to enable specific resource detectors using the OTEL_PHP_RESOURCE_DETECTORS environment variable.

LANGUAGE: shell
CODE:
env OTEL_PHP_RESOURCE_DETECTORS=env,host,sdk \
php example.php

----------------------------------------

TITLE: Adding a Debug Span Processor in OpenTelemetry
DESCRIPTION: This code snippet shows how to add a debug span processor to an OpenTelemetry Node.js application. It helps in diagnosing sampling issues by logging whether each span is sampled or not.

LANGUAGE: javascript
CODE:
import { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';
import { ReadableSpan } from '@opentelemetry/sdk-trace-base';
import { trace, Span, Context, TraceFlags } from '@opentelemetry/api';
const provider = new NodeTracerProvider();
provider.addSpanProcessor({
  forceFlush: async () => {},
  onStart: (_span: Span, _parentContext: Context) => {},
  onEnd: (span: ReadableSpan) => {
    const sampled = !!(span.spanContext().traceFlags & TraceFlags.SAMPLED);
    console.log(`span sampled: ${sampled}`);
  },
  shutdown: async () => {},
});
provider.register();

----------------------------------------

TITLE: Configuring OpenTelemetryCollector with Target Allocator
DESCRIPTION: YAML configuration for an OpenTelemetryCollector resource with Target Allocator and Prometheus CR discovery enabled.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otelcol
  namespace: opentelemetry
spec:
  mode: statefulset
  targetAllocator:
    enabled: true
    serviceAccount: opentelemetry-targetallocator-sa
    prometheusCR:
      enabled: true
      podMonitorSelector: {}
      serviceMonitorSelector: {}
  config:
    receivers:
      otlp:
        protocols:
          grpc: {}
          http: {}
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: ['0.0.0.0:8888']

    processors:
      batch: {}

    exporters:
      debug:
        verbosity: detailed

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]
        metrics:
          receivers: [otlp, prometheus]
          processors: []
          exporters: [debug]
        logs:
          receivers: [otlp]
          processors: [batch]
          exporters: [debug]

----------------------------------------

TITLE: Launching OpAMP Supervisor
DESCRIPTION: Console output when starting the OpAMP supervisor, which in turn launches the OpenTelemetry Collector.

LANGUAGE: console
CODE:
$ go run .
2023/02/08 13:32:54 Supervisor starting, id=01GRRKNBJE06AFVGQT5ZYC0GEK, type=io.opentelemetry.collector, version=1.0.0.
2023/02/08 13:32:54 Starting OpAMP client...
2023/02/08 13:32:54 OpAMP Client started.
2023/02/08 13:32:54 Starting agent /usr/local/bin/otelcol
2023/02/08 13:32:54 Connected to the server.
2023/02/08 13:32:54 Received remote config from server, hash=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.
2023/02/08 13:32:54 Agent process started, PID=13553
2023/02/08 13:32:54 Effective config changed.
2023/02/08 13:32:54 Enabling own metrics pipeline in the config<F11>
2023/02/08 13:32:54 Effective config changed.
2023/02/08 13:32:54 Config is changed. Signal to restart the agent.
2023/02/08 13:32:54 Agent is not healthy: Get "http://localhost:13133": dial tcp [::1]:13133: connect: connection refused
2023/02/08 13:32:54 Stopping the agent to apply new config.
2023/02/08 13:32:54 Stopping agent process, PID=13553
2023/02/08 13:32:54 Agent process PID=13553 successfully stopped.
2023/02/08 13:32:54 Starting agent /usr/local/bin/otelcol
2023/02/08 13:32:54 Agent process started, PID=13554
2023/02/08 13:32:54 Agent is not healthy: Get "http://localhost:13133": dial tcp [::1]:13133: connect: connection refused
2023/02/08 13:32:55 Agent is not healthy: health check on http://localhost:13133 returned 503
2023/02/08 13:32:55 Agent is not healthy: health check on http://localhost:13133 returned 503
2023/02/08 13:32:56 Agent is not healthy: health check on http://localhost:13133 returned 503
2023/02/08 13:32:57 Agent is healthy.

----------------------------------------

TITLE: Configuring Authentication
DESCRIPTION: Example configuration showing how to set up OIDC authentication for a receiver.

LANGUAGE: yaml
CODE:
extensions:
  oidc:
    issuer_url: http://localhost:8080/auth/realms/opentelemetry
    audience: collector

receivers:
  otlp/auth:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        auth:
          authenticator: oidc

processors:

exporters:
  debug:

service:
  extensions:
    - oidc
  pipelines:
    traces:
      receivers:
        - otlp/auth
      processors: []
      exporters:
        - debug

----------------------------------------

TITLE: Configuring OpenTelemetry Collector DaemonSet
DESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector as a DaemonSet, enabling collection of node-level metrics, logs, and application telemetry.

LANGUAGE: yaml
CODE:
mode: daemonset

image:
  repository: otel/opentelemetry-collector-k8s

presets:
  kubernetesAttributes:
    enabled: true
  kubeletMetrics:
    enabled: true
  logsCollection:
    enabled: true

----------------------------------------

TITLE: Deploying Jaeger All-in-One in Kubernetes
DESCRIPTION: This code snippet shows how to deploy the Jaeger all-in-one instance in Kubernetes using a simple YAML configuration applied with kubectl.

LANGUAGE: shell
CODE:
kubectl apply -f - <<EOF
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: simplest
EOF

----------------------------------------

TITLE: Serving with Netlify Redirects
DESCRIPTION: Command to test Netlify redirects by serving the site at localhost:8888.

LANGUAGE: sh
CODE:
npm run serve:netlify

----------------------------------------

TITLE: Adding OpenTelemetry Annotation Dependency in Maven
DESCRIPTION: Maven configuration to add the opentelemetry-instrumentation-annotations dependency to a Java project.

LANGUAGE: XML
CODE:
<dependencies>
  <dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-instrumentation-annotations</artifactId>
    <version>{{% param vers.instrumentation %}}</version>
  </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring OpenTelemetry Dependencies in Elixir
DESCRIPTION: Specifies the required OpenTelemetry dependencies for an Elixir project's mix.exs file.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:opentelemetry_api, "~> {{% param versions.otelApi %}}"},
    {:opentelemetry, "~> {{% param versions.otelSdk %}}"}
  ]
end

----------------------------------------

TITLE: Adding Attributes to Auto-instrumented Spans in Python
DESCRIPTION: This snippet demonstrates how to get the current span from context and add attributes to it.

LANGUAGE: python
CODE:
span = trace.get_current_span()
span.set_attribute("app.products_recommended.count", len(prod_list))

----------------------------------------

TITLE: Creating a Kind Cluster for OpenTelemetry Kubernetes Monitoring
DESCRIPTION: This command creates a new Kubernetes cluster using Kind, which is used as the target environment for deploying OpenTelemetry collectors.

LANGUAGE: sh
CODE:
kind create cluster

----------------------------------------

TITLE: Adding Jaeger Exporter to Custom OpenTelemetry Collector YAML
DESCRIPTION: This snippet shows how to include the Jaeger exporter in a custom OpenTelemetry Collector build. It specifies the Go module paths for both the Jaeger exporter and the Jaeger Thrift HTTP exporter.

LANGUAGE: yaml
CODE:
exporters:
  - gomod: go.opentelemetry.io/collector/exporter/jaegerexporter v0.85.0
  - gomod:
      go.opentelemetry.io/collector/exporter/jaegerthrifthttpexporter v0.85.0

----------------------------------------

TITLE: Initializing Metrics in OpenTelemetry C++
DESCRIPTION: This snippet demonstrates how to initialize metrics by setting up an exporter, reader, and meter provider. It uses an OStream Exporter which prints to stdout by default.

LANGUAGE: cpp
CODE:
std::unique_ptr<opentelemetry::sdk::metrics::MetricExporter> exporter{new opentelemetry::exporters::OStreamMetricExporter};
std::unique_ptr<opentelemetry::sdk::metrics::MetricReader> reader{
    new opentelemetry::sdk::metrics::PeriodicExportingMetricReader(std::move(exporter), options)};

auto provider = std::shared_ptr<opentelemetry::metrics::MeterProvider>(new opentelemetry::sdk::metrics::MeterProvider());
auto p = std::static_pointer_cast<opentelemetry::sdk::metrics::MeterProvider>(provider);
p->AddMetricReader(std::move(reader));

----------------------------------------

TITLE: Enabling Kubernetes Events Preset
DESCRIPTION: YAML configuration to enable the Kubernetes events preset in the OpenTelemetry Collector Chart, using deployment mode with a single replica.

LANGUAGE: yaml
CODE:
mode: deployment
replicaCount: 1
presets:
  kubernetesEvents:
    enabled: true

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for HTTP Check Receiver
DESCRIPTION: YAML configuration for setting up HTTP Check receiver in OpenTelemetry Collector. Demonstrates how to configure multiple endpoints with different HTTP methods, custom headers, and collection intervals.

LANGUAGE: yaml
CODE:
receivers:
  httpcheck:
    targets:
      - endpoint: https://api.restful-api.dev/objects
        method: GET
      - endpoint: https://httpbin.org/delete
        method: DELETE
      - endpoint: https://httpbin.org/post
        method: POST
        headers:
          test-key: 'test-123'
    collection_interval: 10s

exporters:
  #Your chosen exporter

processors:
  batch:

service:
  pipelines:
    metrics:
      receivers: [httpcheck]
      processors: [batch]
      #exporters: [your-exporter]

----------------------------------------

TITLE: Telemetry Data Flow Visualization
DESCRIPTION: Mermaid diagram illustrating the flow of telemetry data through the OpenTelemetry collector to various backend systems including Prometheus, Jaeger, and Grafana.

LANGUAGE: mermaid
CODE:
graph TB
subgraph tdf[Telemetry Data Flow]
    subgraph subgraph_padding [ ]
        style subgraph_padding fill:none,stroke:none;
        subgraph od[OpenTelemetry Demo]
        ms(Microservice)
        end

        ms -.->|"OTLP<br/>gRPC"| oc-grpc
        ms -.->|"OTLP<br/>HTTP POST"| oc-http

        subgraph oc[OTel Collector]
            style oc fill:#97aef3,color:black;
            oc-grpc[/"OTLP Receiver<br/>listening on<br/>grpc://localhost:4317"/]
            oc-http[/"OTLP Receiver<br/>listening on <br/>localhost:4318<br/>"/]
            oc-proc(Processors)
            oc-prom[/"OTLP HTTP Exporter"/]
            oc-otlp[/"OTLP Exporter"/]

            oc-grpc --> oc-proc
            oc-http --> oc-proc

            oc-proc --> oc-prom
            oc-proc --> oc-otlp
        end

        oc-prom -->|"localhost:9090/api/v1/otlp"| pr-sc
        oc-otlp -->|gRPC| ja-col

        subgraph pr[Prometheus]
            style pr fill:#e75128,color:black;
            pr-sc[/"Prometheus OTLP Write Receiver"/]
            pr-tsdb[(Prometheus TSDB)]
            pr-http[/"Prometheus HTTP<br/>listening on<br/>localhost:9090"/]

            pr-sc --> pr-tsdb
            pr-tsdb --> pr-http
        end

        pr-b{{"Browser<br/>Prometheus UI"}}
        pr-http ---->|"localhost:9090/graph"| pr-b

        subgraph ja[Jaeger]
            style ja fill:#60d0e4,color:black;
            ja-col[/"Jaeger Collector<br/>listening on<br/>grpc://jaeger:4317"/]
            ja-db[(Jaeger DB)]
            ja-http[/"Jaeger HTTP<br/>listening on<br/>localhost:16686"/]

            ja-col --> ja-db
            ja-db --> ja-http
        end

        subgraph gr[Grafana]
            style gr fill:#f8b91e,color:black;
            gr-srv["Grafana Server"]
            gr-http[/"Grafana HTTP<br/>listening on<br/>localhost:3000"/]

            gr-srv --> gr-http
        end

        pr-http --> |"localhost:9090/api"| gr-srv
        ja-http --> |"localhost:16686/api"| gr-srv

        ja-b{{"Browser<br/>Jaeger UI"}}
        ja-http ---->|"localhost:16686/search"| ja-b

        gr-b{{"Browser<br/>Grafana UI"}}
        gr-http -->|"localhost:3000/dashboard"| gr-b
    end
end

----------------------------------------

TITLE: Java Context Injection Example
DESCRIPTION: Demonstrates how to inject context into outbound calls and create client spans with proper context propagation.

LANGUAGE: java
CODE:
Span span = tracer.spanBuilder("send")
            .setSpanKind(SpanKind.CLIENT)
            .startSpan();

try (Scope unused = span.makeCurrent()) {
  propagator.inject(Context.current(), transportLayer, setter);
  send();
} catch (Exception e) {
  span.recordException(e);
  span.setStatus(StatusCode.ERROR);
  throw e;
} finally {
  span.end();
}

----------------------------------------

TITLE: Configuring zPages Extension
DESCRIPTION: YAML configuration to expose the zPages extension on a public interface for containerized environments.

LANGUAGE: yaml
CODE:
extensions:
  zpages:
    endpoint: 0.0.0.0:55679

----------------------------------------

TITLE: Configuring Tomcat / TomEE with OpenTelemetry Java agent
DESCRIPTION: These snippets demonstrate how to add the OpenTelemetry Java agent to the startup script for Tomcat / TomEE on Linux and Windows.

LANGUAGE: sh
CODE:
# Add to <tomcat_home>/bin/setenv.sh
CATALINA_OPTS="$CATALINA_OPTS -javaagent:/path/to/opentelemetry-javaagent.jar"

LANGUAGE: bat
CODE:
rem Add to <tomcat_home>\bin\setenv.bat
set CATALINA_OPTS=%CATALINA_OPTS% -javaagent:"<Drive>:\path\to\opentelemetry-javaagent.jar"

----------------------------------------

TITLE: Adding OpenTelemetry API Dependency in Gradle
DESCRIPTION: Groovy configuration to add the opentelemetry-api dependency to a Gradle project. This is necessary for using the OpenTelemetry API in custom instrumentation.

LANGUAGE: groovy
CODE:
dependencies {
    implementation('io.opentelemetry:opentelemetry-api:{{% param vers.otel %}}')
}

----------------------------------------

TITLE: Configuring Resource Detectors in Elixir
DESCRIPTION: Configuration of OpenTelemetry resource detectors in Elixir using runtime.exs. Sets up environment variable and application environment detectors.

LANGUAGE: elixir
CODE:
## runtime.exs
config :opentelemetry, resource_detectors: [:otel_resource_env_var, :otel_resource_app_env]

----------------------------------------

TITLE: Creating Log Records in Python
DESCRIPTION: This snippet demonstrates how to create log records using the initialized logger in OpenTelemetry.

LANGUAGE: python
CODE:
logger.info(f"Receive ListRecommendations for product ids:{prod_list}")

----------------------------------------

TITLE: Configuring OpenTelemetry Tracer in Ruby
DESCRIPTION: Initializes the OpenTelemetry SDK and acquires a tracer for use throughout the application.

LANGUAGE: ruby
CODE:
require "opentelemetry/sdk"

OpenTelemetry::SDK.configure do |c|
  c.service_name = '<YOUR_SERVICE_NAME>'
end

# 'Tracer' can be used throughout your code now
MyAppTracer = OpenTelemetry.tracer_provider.tracer('<YOUR_TRACER_NAME>')

----------------------------------------

TITLE: Configuring Jetty with OpenTelemetry Java agent
DESCRIPTION: These snippets demonstrate different ways to add the OpenTelemetry Java agent to Jetty, including using the command line, modifying jetty.sh, and updating the start.ini file.

LANGUAGE: sh
CODE:
java -javaagent:/path/to/opentelemetry-javaagent.jar -jar start.jar

LANGUAGE: sh
CODE:
JAVA_OPTIONS="${JAVA_OPTIONS} -javaagent:/path/to/opentelemetry-javaagent.jar"

LANGUAGE: ini
CODE:
#===========================================================
# Sample Jetty start.ini file
#-----------------------------------------------------------
--exec
-javaagent:/path/to/opentelemetry-javaagent.jar

----------------------------------------

TITLE: Customizing OpenTelemetry Sampler with Spring Bean
DESCRIPTION: Java code snippet demonstrating how to customize the OpenTelemetry sampler using a Spring Bean.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.api.trace.SpanKind;
import io.opentelemetry.contrib.sampler.RuleBasedRoutingSampler;
import io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;
import io.opentelemetry.semconv.UrlAttributes;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class FilterPaths {

  @Bean
  public AutoConfigurationCustomizerProvider otelCustomizer() {
    return p ->
        p.addSamplerCustomizer(
            (fallback, config) ->
                RuleBasedRoutingSampler.builder(SpanKind.SERVER, fallback)
                    .drop(UrlAttributes.URL_PATH, "^/actuator")
                    .build());
  }
}

----------------------------------------

TITLE: Default OpenTelemetry Collector Configuration in YAML
DESCRIPTION: Default configuration for the OTel Collector Lambda layer that supports emitting data using the debug exporter. Includes OTLP receiver settings and pipeline configurations for traces and metrics.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: '0.0.0.0:4317'
      http:
        endpoint: '0.0.0.0:4318'

exporters:
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
  debug:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [debug]
    metrics:
      receivers: [otlp]
      exporters: [debug]
  telemetry:
    metrics:
      address: localhost:8888

----------------------------------------

TITLE: Frontend Checkout Test Configuration
DESCRIPTION: YAML configuration for testing the checkout process, including HTTP trigger and multiple service validations

LANGUAGE: yaml
CODE:
type: Test
spec:
  name: 'Frontend: Checking out shopping cart'
  description: Simulate user checking out shopping cart
  trigger:
    type: http
    httpRequest:
      url: http://{{frontend address}}/api/checkout
      method: POST
      headers:
        - key: Content-Type
          value: application/json
      body: |
        {
          "userId": "2491f868-88f1-4345-8836-d5d8511a9f83",
          "email": "someone@example.com",
          "address": {
            "streetAddress": "1600 Amphitheatre Parkway",
            "state": "CA",
            "country": "United States",
            "city": "Mountain View",
            "zipCode": "94043"
          },
          "userCurrency": "USD",
          "creditCard": {
            "creditCardCvv": 672,
            "creditCardExpirationMonth": 1,
            "creditCardExpirationYear": 2030,
            "creditCardNumber": "4432-8015-6152-0454"
          }
        }
  specs:
    - name: 'The frontend has been called with success'
      selector: span[name="Test trigger"]
      assertions:
        - attr:response.status = 200
    - selector: span[name="oteldemo.CheckoutService/PlaceOrder" rpc.system="grpc" rpc.method="PlaceOrder" rpc.service="oteldemo.CheckoutService"]
      name: 'The order was placed'
      assertions:
        - attr:app.user.id = "2491f868-88f1-4345-8836-d5d8511a9f83"
        - attr:app.order.items.count = 1
    - selector: span[name="oteldemo.PaymentService/Charge" rpc.system="grpc" rpc.method="Charge" rpc.service="oteldemo.PaymentService"]
      name: 'The user was charged'
      assertions:
        - attr:rpc.grpc.status_code  =  0
        - attr:selected_spans.count >= 1
    - selector: span[name="oteldemo.ShippingService/ShipOrder" rpc.system="grpc" rpc.method="ShipOrder" rpc.service="oteldemo.ShippingService"]
      name: 'The product was shipped'
      assertions:
        - attr:rpc.grpc.status_code = 0
        - attr:selected_spans.count >= 1
    - selector: span[name="oteldemo.CartService/EmptyCart" rpc.system="grpc" rpc.method="EmptyCart" rpc.service="oteldemo.CartService"]
      name: 'The cart was emptied'
      assertions:
        - attr:rpc.grpc.status_code = 0
        - attr:selected_spans.count >= 1

----------------------------------------

TITLE: Configuring OpenTelemetry Exporter and Processor in Erlang
DESCRIPTION: Sets up the OpenTelemetry exporter and processor for testing in an Erlang application's sys.config.src file.

LANGUAGE: erlang
CODE:
{opentelemetry,
  [{traces_exporter, none},
   {processors,
     [{otel_simple_processor, #{}}]}]}

----------------------------------------

TITLE: Accessing OpenTelemetry Meter in Java
DESCRIPTION: Java code to obtain the OpenTelemetry Meter instance. This Meter can be used to create custom metrics such as counters, gauges, or histograms.

LANGUAGE: java
CODE:
import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.api.metrics.Meter;

Meter meter = GlobalOpenTelemetry.getMeter("application");

----------------------------------------

TITLE: Redaction Processor Configuration
DESCRIPTION: Configuration for the redaction processor to mask sensitive data like credit card numbers.

LANGUAGE: yaml
CODE:
processors:
  redaction:
    allow_all_keys: false
    allowed_keys:
      - description
      - group
      - id
      - name
    ignored_keys:
      - safe_attribute
    blocked_values:
      - '4[0-9]{12}(?:[0-9]{3})?'
      - '(5[1-5][0-9]{14})'
    summary: debug

----------------------------------------

TITLE: Adding Span Attributes in Java
DESCRIPTION: Shows how to add custom attributes to a span for additional context about ad requests.

LANGUAGE: java
CODE:
span.setAttribute("app.ads.contextKeys", req.getContextKeysList().toString());
span.setAttribute("app.ads.contextKeys.count", req.getContextKeysCount());

----------------------------------------

TITLE: Default OpenTelemetry Collector Configuration
DESCRIPTION: The default YAML configuration provided by the OpenTelemetry Collector Chart, including exporters, extensions, processors, receivers, and service pipelines.

LANGUAGE: yaml
CODE:
exporters:
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
  debug: {}
extensions:
  health_check: {}
processors:
  batch: {}
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
receivers:
  jaeger:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:14250
      thrift_compact:
        endpoint: ${env:MY_POD_IP}:6831
      thrift_http:
        endpoint: ${env:MY_POD_IP}:14268
  otlp:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:4317
      http:
        endpoint: ${env:MY_POD_IP}:4318
  prometheus:
    config:
      scrape_configs:
        - job_name: opentelemetry-collector
          scrape_interval: 10s
          static_configs:
            - targets:
                - ${env:MY_POD_IP}:8888
  zipkin:
    endpoint: ${env:MY_POD_IP}:9411
service:
  extensions:
    - health_check
  pipelines:
    logs:
      exporters:
        - debug
      processors:
        - memory_limiter
        - batch
      receivers:
        - otlp
    metrics:
      exporters:
        - debug
      processors:
        - memory_limiter
        - batch
      receivers:
        - otlp
        - prometheus
    traces:
      exporters:
        - debug
      processors:
        - memory_limiter
        - batch
      receivers:
        - otlp
        - jaeger
        - zipkin
  telemetry:
    metrics:
      address: ${env:MY_POD_IP}:8888

----------------------------------------

TITLE: Automating PR Merge Process in Shell
DESCRIPTION: This shell script automates the process of watching for CI checks to pass and then merging a pull request. It uses the GitHub CLI (gh) to monitor the status of checks and perform the merge operation.

LANGUAGE: shell
CODE:
export PR=<ID OF THE PR>; gh pr checks ${PR} --watch && gh pr merge ${PR} --squash

----------------------------------------

TITLE: Importing OpenTelemetry Instrumentation Libraries
DESCRIPTION: Imports the necessary OpenTelemetry instrumentors for Requests and URLLib3 libraries used by Locust.

LANGUAGE: python
CODE:
from opentelemetry.instrumentation.requests import RequestsInstrumentor
from opentelemetry.instrumentation.urllib3 import URLLib3Instrumentor

----------------------------------------

TITLE: Running OpenTelemetry Collector - Bash
DESCRIPTION: Docker command to run the OpenTelemetry Collector with ports exposed for OTLP gRPC (4317), OTLP HTTP (4318), and ZPages (55679).

LANGUAGE: sh
CODE:
docker run \
  -p 127.0.0.1:4317:4317 \
  -p 127.0.0.1:4318:4318 \
  -p 127.0.0.1:55679:55679 \
  otel/opentelemetry-collector-contrib:{{% param vers %}} \
  2>&1 | tee collector-output.txt

----------------------------------------

TITLE: Installing Helm Chart with Custom Values File
DESCRIPTION: Command to install the OpenTelemetry Demo Helm chart using a custom values file for configuration.

LANGUAGE: shell
CODE:
helm install my-otel-demo open-telemetry/opentelemetry-demo --values my-values-file.yaml

----------------------------------------

TITLE: API Server Tracing Configuration
DESCRIPTION: YAML configuration for enabling tracing in kube-apiserver with sampling rate and endpoint settings.

LANGUAGE: yaml
CODE:
apiVersion: apiserver.config.k8s.io/v1beta1
kind: TracingConfiguration
endpoint: host.k3d.internal:4317
samplingRatePerMillion: 1000000 # 100%

----------------------------------------

TITLE: Configuring Python Backend Dockerfile
DESCRIPTION: Dockerfile configuration for the Python backend service with OpenTelemetry instrumentation setup.

LANGUAGE: dockerfile
CODE:
FROM python:3.10-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
RUN opentelemetry-bootstrap -a install
EXPOSE 5000
COPY . .
CMD ["opentelemetry-instrument", "--traces_exporter", "otlp_proto_http", "--metrics_exporter", "console", "flask", "run"]

----------------------------------------

TITLE: Running Grafana Docker Container
DESCRIPTION: Docker command to start a Grafana server instance for metrics visualization.

LANGUAGE: sh
CODE:
docker run -d -p 3000:3000 --name=grafana grafana/grafana

----------------------------------------

TITLE: Installing Dependencies on Alpine
DESCRIPTION: Commands to install required development packages on Alpine Linux

LANGUAGE: sh
CODE:
apk add python3-dev
apk add build-base

----------------------------------------

TITLE: Installing Express and HTTP Instrumentation Libraries
DESCRIPTION: This snippet shows how to install the instrumentation libraries for Express and HTTP using npm.

LANGUAGE: shell
CODE:
npm install --save @opentelemetry/instrumentation-http @opentelemetry/instrumentation-express

----------------------------------------

TITLE: Environment Variable Configuration Example
DESCRIPTION: Example showing how to suppress traces from akka-actor library using environment variables, demonstrating the dash-to-underscore conversion rule.

LANGUAGE: shell
CODE:
OTEL_INSTRUMENTATION_AKKA_ACTOR_ENABLED=false

----------------------------------------

TITLE: Adding OTLP Exporter Dependency in Rust
DESCRIPTION: This snippet shows how to add the opentelemetry-otlp crate as a dependency in the Cargo.toml file for a Rust project. It specifies the version and features to use.

LANGUAGE: toml
CODE:
[dependencies]
opentelemetry-otlp = { version = "{{% version-from-registry exporter-rust-otlp %}}", features = ["default"] }

----------------------------------------

TITLE: Frontend Service Transaction Configuration
DESCRIPTION: YAML configuration defining a sequence of frontend service tests that simulate a complete user purchase flow

LANGUAGE: yaml
CODE:
type: Transaction
spec:
  name: 'Frontend Service'
  description: Run all Frontend tests enabled in sequence, simulating a process of a user purchasing products on the Astronomy store
  steps:
    - ./01-see-ads.yaml
    - ./02-get-product-recommendation.yaml
    - ./03-browse-product.yaml
    - ./04-add-product-to-cart.yaml
    - ./05-view-cart.yaml
    - ./06-checking-out-cart.yaml

----------------------------------------

TITLE: Docker Compose Configuration for OpenTelemetry
DESCRIPTION: YAML configuration for Docker Compose to run a Spring Boot application with OpenTelemetry Collector.

LANGUAGE: YAML
CODE:
version: '3.8'
services:
  app:
    image: spring-petclinic-native
    environment:
      OTEL_SERVICE_NAME: 'graal-native-example-app'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://collector:4318'
    ports:
      - '8080:8080'
    depends_on:
      - collector
  collector:
    image: otel/opentelemetry-collector-contrib:0.109.0
    volumes:
      - ./collector-spring-native-config.yaml:/collector-spring-native-config.yaml
    command: ['--config=/collector-spring-native-config.yaml']
    expose:
      - '4317'
    ports:
      - '4317:4317'

----------------------------------------

TITLE: Installing Dependencies for JavaScript Client
DESCRIPTION: Commands to initialize a new JavaScript project and install necessary dependencies for the OpenTelemetry client application.

LANGUAGE: shell
CODE:
npm init -y
npm install undici \
  @opentelemetry/instrumentation-undici \
  @opentelemetry/sdk-node

----------------------------------------

TITLE: Changing Demo Port Configuration
DESCRIPTION: Commands to start the demo with a custom port using environment variables.

LANGUAGE: shell
CODE:
ENVOY_PORT=8081 make start

LANGUAGE: shell
CODE:
ENVOY_PORT=8081 docker compose up --force-recreate --remove-orphans --detach

----------------------------------------

TITLE: Deploying Bookinfo Application with Istio Injection
DESCRIPTION: This code snippet shows how to deploy the Istio Bookinfo application in Kubernetes with Istio sidecar injection enabled for the default namespace.

LANGUAGE: shell
CODE:
kubectl label namespace default istio-injection=enabled
kubectl apply -f bookinfo.yaml

----------------------------------------

TITLE: Configuring Browser Telemetry Endpoint
DESCRIPTION: YAML configuration to set the OpenTelemetry Collector endpoint for browser telemetry in the frontend component of the Helm chart values file.

LANGUAGE: yaml
CODE:
components:
  frontend:
    envOverrides:
      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
        value: http://otel-demo.my-domain.com/otlp-http/v1/traces

----------------------------------------

TITLE: Configuring OTLP Exporter in OpenTelemetry
DESCRIPTION: This code snippet shows how to configure an OTLP exporter with a BatchSpanProcessor in an OpenTelemetry Node.js application. It demonstrates setting up the exporter and adding it to the TracerProvider.

LANGUAGE: javascript
CODE:
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';
// Create TracerProvider
const exporter = new OTLPTraceExporter();
provider.addSpanProcessor(new BatchSpanProcessor(exporter));

----------------------------------------

TITLE: Adding OpenTelemetry Annotation Dependency in Gradle
DESCRIPTION: Gradle configuration to add the opentelemetry-instrumentation-annotations dependency to a Java project.

LANGUAGE: Groovy
CODE:
dependencies {
    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:{{% param vers.instrumentation %}}')
}

----------------------------------------

TITLE: Configuring OpenTelemetry with Zipkin Exporter via Command Line
DESCRIPTION: Example of configuring the OpenTelemetry agent with additional parameters including service name and Zipkin exporter for traces using command line arguments.

LANGUAGE: shell
CODE:
java -javaagent:path/to/opentelemetry-javaagent.jar \
     -Dotel.service.name=your-service-name \
     -Dotel.traces.exporter=zipkin \
     -jar myapp.jar

----------------------------------------

TITLE: Filtering Collector Output - Bash
DESCRIPTION: Command to filter and display trace information from the collector output.

LANGUAGE: console
CODE:
$ grep -E '^Span|(ID|Name|Kind|time|Status \w+)\s+:' ./collector-output.txt

----------------------------------------

TITLE: Configuring URLSessionInstrumentation in Swift
DESCRIPTION: Shows the initialization of URLSessionInstrumentation for automatic network call tracking in OpenTelemetry Swift. This enables automatic span creation and distributed tracing header injection for NSURLSession requests.

LANGUAGE: swift
CODE:
let sessionInstrumentation = URLSessionInstrumentation(configuration: URLSessionInstrumentationConfiguration())

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for OTLP
DESCRIPTION: YAML configuration for the OpenTelemetry Collector to receive logs via OTLP (Yoda level).

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
exporters:
  debug:
    verbosity: detailed
service:
  pipelines:
    logs:
      receivers: [otlp]
      exporters: [debug]

----------------------------------------

TITLE: Deploying OpenTelemetry Collector as DaemonSet
DESCRIPTION: Manifest for deploying the OpenTelemetry Collector in daemonset mode with k8sattributes processor configuration. Includes receiver, processor, and exporter configurations.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector-daemonset
spec:
  mode: daemonset
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.47.0
  serviceAccount: attributes-account
  env:
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
  config: |
    receivers:
      jaeger:
          protocols:
              grpc:
              thrift_binary:
              thrift_compact:
              thrift_http:
      otlp:
          protocols:
              grpc:
              http:

    processors:
         k8sattributes:
             filter:
                 node_from_env_var: KUBE_NODE_NAME
    exporters:
      jaeger:
        endpoint: jaeger-all-in-one-collector:14250
        tls:
          insecure: true

    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [k8sattributes]
          exporters: [jaeger]

----------------------------------------

TITLE: Installing OpenTelemetry Extension via RPM (CentOS 7)
DESCRIPTION: Shell commands to install the OpenTelemetry PHP extension using RPM packages on CentOS 7. It includes steps to enable the Remi repository and install PHP 8.1 with the OpenTelemetry extension.

LANGUAGE: Shell
CODE:
yum update -y
yum install -y epel-release yum-utils
yum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm
yum-config-manager --enable remi-php81
yum install -y php php-pecl-opentelemetry

php --ri opentelemetry

----------------------------------------

TITLE: Configuring Docker for Python Application
DESCRIPTION: Dockerfile configuration for running the Python application in a containerized environment.

LANGUAGE: docker
CODE:
FROM python:3.11
WORKDIR /usr/src/app
COPY . .

----------------------------------------

TITLE: Configuring OTLP Traces Export
DESCRIPTION: YAML configuration for sending internal Collector traces to an OTLP backend

LANGUAGE: yaml
CODE:
service:
  telemetry:
    traces:
      processors:
        - batch:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: https://backend:4318

----------------------------------------

TITLE: Exposing Frontend Proxy with kubectl port-forward
DESCRIPTION: Command to use kubectl port-forward to expose the frontend-proxy service on localhost:8080.

LANGUAGE: shell
CODE:
kubectl port-forward svc/my-otel-demo-frontend-proxy 8080:8080

----------------------------------------

TITLE: Jaeger Backend Configuration
DESCRIPTION: Kubernetes manifest for deploying a Jaeger in-memory backend instance.

LANGUAGE: yaml
CODE:
apiVersion: jaegertracing.io/v1
kind: Jaeger
metadata:
  name: my-in-memory

----------------------------------------

TITLE: Adding Configuration Handling to Go Server
DESCRIPTION: This snippet demonstrates how to read and parse a YAML configuration file in the Go server.

LANGUAGE: go
CODE:
package main

import (
   "fmt"
   "gopkg.in/yaml.v3"
   "io/ioutil"
   "log"
   "net/http"
   "path/filepath"
)

type configurations struct {
   Instrument bool
}

func httpHandler(w http.ResponseWriter, r *http.Request) {
   fmt.Fprintf(w, "Hi! This action could create a trace!")
}

func main() {
   filename, _ := filepath.Abs("./effective.yaml")
   yamlFile, _ := ioutil.ReadFile(filename)

   var config configurations
   yaml.Unmarshal(yamlFile, &config)

   handler := http.HandlerFunc(httpHandler)
   http.Handle("/", handler)
   fmt.Println("Starting server on port 8080")
   log.Fatal(http.ListenAndServe(":8080", nil))
}

----------------------------------------

TITLE: Installing OpenTelemetry Dependencies for Browser Instrumentation
DESCRIPTION: This shell command installs the necessary OpenTelemetry packages for browser instrumentation, including the SDK, document load instrumentation, and context management.

LANGUAGE: shell
CODE:
npm init -y
npm install @opentelemetry/api \
  @opentelemetry/sdk-trace-web \
  @opentelemetry/instrumentation-document-load \
  @opentelemetry/context-zone

----------------------------------------

TITLE: OpenTelemetry PHP INI Configuration
DESCRIPTION: Shows how to configure OpenTelemetry settings using PHP INI format, including autoload enablement and OTLP exporter configuration.

LANGUAGE: ini
CODE:
OTEL_PHP_AUTOLOAD_ENABLED="true"
OTEL_EXPORTER_OTLP_PROTOCOL=grpc
OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317

----------------------------------------

TITLE: Handling Nested Contexts in PHP OpenTelemetry
DESCRIPTION: Shows how to work with nested contexts, which is useful for creating nested spans in traces. Demonstrates activating and deactivating multiple contexts.

LANGUAGE: php
CODE:
use OpenTelemetry\Context\Context;

$key = Context::createKey('my-key');

var_dump(Context::getCurrent()->get($key)); //NULL
$scope2 = Context::getCurrent()->with($key, 'context 2')->activate();
var_dump(Context::getCurrent()->get($key)); //'context 2'
$scope3 = Context::getCurrent()->with($key, 'context 3')->activate();
var_dump(Context::getCurrent()->get($key)); //'context 3'

$scope3->detach(); //context 2 is active
$scope2->detach(); //original context is active
var_dump(Context::getCurrent()->get($key)); //NULL

----------------------------------------

TITLE: Setting JVM Maximum Heap Size
DESCRIPTION: JVM option to increase maximum heap size for better performance with instrumentation

LANGUAGE: properties
CODE:
-Xmx<size>

----------------------------------------

TITLE: Configuring OpAMP Supervisor
DESCRIPTION: YAML configuration for the OpAMP supervisor, specifying the server endpoint and OpenTelemetry Collector executable path.

LANGUAGE: yaml
CODE:
server:
  endpoint: ws://127.0.0.1:4320/v1/opamp

agent:
  executable: $OTEL_COLLECTOR_BINARY

----------------------------------------

TITLE: Configuring Dependencies with Cargo.toml
DESCRIPTION: Initial project dependencies setup for a basic HTTP server using hyper and tokio

LANGUAGE: toml
CODE:
[package]
name = "dice_server"
version = "0.1.0"
edition = "2021"

[dependencies]
hyper = { version = "1", features = ["full"] }
tokio = { version = "1", features = ["full"] }
http-body-util = "0.1"
hyper-util = { version = "0.1", features = ["full"] }
rand = "0.9.0"

----------------------------------------

TITLE: Enabling OpenTelemetry Plugin Globally
DESCRIPTION: cURL command to enable the OpenTelemetry plugin globally in Apache APISIX using global rules. It sets the sampler to always_on for all routes.

LANGUAGE: shell
CODE:
curl 'http://127.0.0.1:9080/apisix/admin/global_rules/1' \
-H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \
-X PUT -d '{
    "plugins": {
        "opentelemetry": {
            "sampler": {
                "name": "always_on"
            }
        }
    }
}'

----------------------------------------

TITLE: Jaeger Tracing Configuration
DESCRIPTION: Implementation of Jaeger tracer provider setup for OpenTelemetry.

LANGUAGE: go
CODE:
package tracing
import (
    "go.opentelemetry.io/otel/exporters/jaeger"
    "go.opentelemetry.io/otel/sdk/resource"
    sdktrace "go.opentelemetry.io/otel/sdk/trace"
    semconv "go.opentelemetry.io/otel/semconv/v1.4.0"
)

func JaegerTracerProvider()(*sdktrace.TracerProvider, error) {
    exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint("http://localhost:14268/api/traces")))
    if err != nil {
        return nil, err
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exp),
        sdktrace.WithResource(resource.NewWithAttributes(
            semconv.SchemaURL,
            semconv.ServiceNameKey.String("todo-service"),
            semconv.DeploymentEnvironmentKey.String("production"),
        )),
    )
    return tp, nil
}

----------------------------------------

TITLE: Customizing OpenTelemetry Collector Configuration
DESCRIPTION: Example YAML configuration to disable metrics and logging pipelines, and non-otlp receivers in the OpenTelemetry Collector.

LANGUAGE: yaml
CODE:
config:
  receivers:
    jaeger: null
    prometheus: null
    zipkin: null
  service:
    pipelines:
      traces:
        receivers:
          - otlp
      metrics: null
      logs: null
ports:
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false

----------------------------------------

TITLE: Adding Span Events in Java
DESCRIPTION: Demonstrates adding events with attributes to spans for error tracking.

LANGUAGE: java
CODE:
span.addEvent("Error", Attributes.of(AttributeKey.stringKey("exception.message"), e.getMessage()));

----------------------------------------

TITLE: Main Function for otelsql Example
DESCRIPTION: Go code for the main function of the example, initializing OpenTelemetry providers, connecting to the database, and running SQL queries.

LANGUAGE: go
CODE:
func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	conn, err := initConn(ctx)
	if err != nil {
		log.Fatal(err)
	}

	shutdownTracerProvider, err := initTracerProvider(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := shutdownTracerProvider(ctx); err != nil {
			log.Fatalf("failed to shutdown TracerProvider: %s", err)
		}
	}()

	shutdownMeterProvider, err := initMeterProvider(ctx, conn)
	if err != nil {
		log.Fatal(err)
	}
	defer func() {
		if err := shutdownMeterProvider(ctx); err != nil {
			log.Fatalf("failed to shutdown MeterProvider: %s", err)
		}
	}()

	db := connectDB()
	defer db.Close()

	err = runSQLQuery(ctx, db)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Example finished")
}

----------------------------------------

TITLE: Creating Custom Spans in Java
DESCRIPTION: Demonstrates creating, managing, and ending custom spans with proper context management and attribute setting.

LANGUAGE: java
CODE:
// create and start a new span manually
Tracer tracer = GlobalOpenTelemetry.getTracer("ad");
Span span = tracer.spanBuilder("getRandomAds").startSpan();

// put the span into context, so if any child span is started the parent will be set properly
try (Scope ignored = span.makeCurrent()) {

  Collection<Ad> allAds = adsMap.values();
  for (int i = 0; i < MAX_ADS_TO_SERVE; i++) {
    ads.add(Iterables.get(allAds, random.nextInt(allAds.size())));
  }
  span.setAttribute("app.ads.count", ads.size());

} finally {
  span.end();
}

----------------------------------------

TITLE: OpenTelemetry Collector Configuration with Basic Auth
DESCRIPTION: Configuration for OpenTelemetry Collector deployment with HTTP Basic Authentication and OTLP exporter setup.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector-app
spec:
  mode: deployment
  image: otel/opentelemetry-collector-contrib:0.58.0
  config: |
    extensions:
      basicauth/server:
        htpasswd:
          inline: |
            <REPLACE: your backend credentials, e.g.: "user-1:1234">

    receivers:
      otlp/basicauth:
        protocols:
          grpc:
            auth:
              authenticator: basicauth/server

    exporters:
      otlp/jaeger:
        endpoint: my-in-memory-collector:4317
        tls:
          insecure: true
          insecure_skip_verify: true

    service:
      extensions: [basicauth/server]
      pipelines:
        traces:
          receivers: [otlp/basicauth]
          exporters: [otlp/jaeger]

----------------------------------------

TITLE: Uninstrumenting HTTPX Clients
DESCRIPTION: Python code showing how to remove instrumentation from specific HTTPX clients or all clients.

LANGUAGE: python
CODE:
import httpx
from opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor

HTTPXClientInstrumentor().instrument()
client = httpx.Client()

# Uninstrument a specific client
HTTPXClientInstrumentor.uninstrument_client(client)

# Uninstrument all clients
HTTPXClientInstrumentor().uninstrument()

----------------------------------------

TITLE: Configuring Resource Detectors in Node.js OpenTelemetry
DESCRIPTION: Sets the OTEL_NODE_RESOURCE_DETECTORS environment variable to enable specific resource detectors (env and host) for OpenTelemetry in Node.js.

LANGUAGE: shell
CODE:
OTEL_NODE_RESOURCE_DETECTORS=env,host

----------------------------------------

TITLE: Launching OpAMP Server
DESCRIPTION: Command to start the OpAMP server in the cloned repository.

LANGUAGE: console
CODE:
$ go run .
2023/02/08 13:31:32.004501 [MAIN] OpAMP Server starting...
2023/02/08 13:31:32.004815 [MAIN] OpAMP Server running...

----------------------------------------

TITLE: Enabling mypy namespace packages via command-line
DESCRIPTION: This snippet demonstrates how to enable namespace package support in mypy using a command-line switch. This option is necessary for mypy to function properly with opentelemetry's namespace packages.

LANGUAGE: shell
CODE:
mypy --namespace-packages

----------------------------------------

TITLE: Starting Kafka Broker
DESCRIPTION: Command to start the Kafka Broker using the default server properties file.

LANGUAGE: shell
CODE:
kafka-server-start /usr/local/etc/kafka/server.properties

----------------------------------------

TITLE: Disabling All Auto-Instrumentation with Manual Support
DESCRIPTION: Configuration command to disable all auto-instrumentations while maintaining support for manual instrumentation using @WithSpan and API interactions.

LANGUAGE: shell
CODE:
-Dotel.instrumentation.common.default-enabled=false -Dotel.instrumentation.opentelemetry-api.enabled=true -Dotel.instrumentation.opentelemetry-instrumentation-annotations.enabled=true

----------------------------------------

TITLE: Basic OpenTelemetry Collector Runtime Configuration
DESCRIPTION: YAML configuration for runtime behavior of the collector, defining pipelines for OTLP receivers and exporters

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
      http:
exporters:
  otlp:
service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [otlp]

----------------------------------------

TITLE: Querying Collector Metrics
DESCRIPTION: Command to query the OpenTelemetry Collector for exported metrics using curl.

LANGUAGE: console
CODE:
$ curl localhost:8888/metrics
...
# HELP otelcol_receiver_accepted_metric_points Number of metric points successfully pushed into the pipeline.
# TYPE otelcol_receiver_accepted_metric_points counter
otelcol_receiver_accepted_metric_points{receiver="prometheus/own_metrics",service_instance_id="01GRRKNBJE06AFVGQT5ZYC0GEK",service_name="io.opentelemetry.collector",service_version="1.0.0",transport="http"} 322
# HELP otelcol_receiver_refused_metric_points Number of metric points that could not be pushed into the pipeline.
# TYPE otelcol_receiver_refused_metric_points counter
otelcol_receiver_refused_metric_points{receiver="prometheus/own_metrics",service_instance_id="01GRRKNBJE06AFVGQT5ZYC0GEK",service_name="io.opentelemetry.collector",service_version="1.0.0",transport="http"} 0

----------------------------------------

TITLE: Querying Collector Metrics
DESCRIPTION: Command to query the OpenTelemetry Collector for exported metrics using curl.

LANGUAGE: console
CODE:
$ curl localhost:8888/metrics
...
# HELP otelcol_receiver_accepted_metric_points Number of metric points successfully pushed into the pipeline.
# TYPE otelcol_receiver_accepted_metric_points counter
otelcol_receiver_accepted_metric_points{receiver="prometheus/own_metrics",service_instance_id="01GRRKNBJE06AFVGQT5ZYC0GEK",service_name="io.opentelemetry.collector",service_version="1.0.0",transport="http"} 322
# HELP otelcol_receiver_refused_metric_points Number of metric points that could not be pushed into the pipeline.
# TYPE otelcol_receiver_refused_metric_points counter
otelcol_receiver_refused_metric_points{receiver="prometheus/own_metrics",service_instance_id="01GRRKNBJE06AFVGQT5ZYC0GEK",service_name="io.opentelemetry.collector",service_version="1.0.0",transport="http"} 0

----------------------------------------

TITLE: Adding Attributes to a Span in PHP with OpenTelemetry
DESCRIPTION: Demonstrates how to add attributes to a span in PHP using the setAttribute method on the span object.

LANGUAGE: php
CODE:
$childSpan->setAttribute('app.quote.items.count', $numberOfItems);
$childSpan->setAttribute('app.quote.cost.total', $quote);

----------------------------------------

TITLE: GKE ConfigMap Creation Command
DESCRIPTION: kubectl command for creating a ConfigMap from the collector configuration file

LANGUAGE: shell
CODE:
kubectl create configmap otel-config --from-file=./otel-config.yaml -n otel-collector

----------------------------------------

TITLE: Configuring OpenTelemetry Using Export Commands
DESCRIPTION: Alternative approach to configure OpenTelemetry by setting environment variables using export commands.

LANGUAGE: shell
CODE:
export OTEL_TRACES_EXPORTER="otlp"
export OTEL_EXPORTER_OTLP_ENDPOINT="your-endpoint"
export OTEL_NODE_RESOURCE_DETECTORS="env,host,os"
export OTEL_SERVICE_NAME="your-service-name"
export NODE_OPTIONS="--require @opentelemetry/auto-instrumentations-node/register"
node app.js

----------------------------------------

TITLE: Shutting Down Tracer Provider in Go with OpenTelemetry
DESCRIPTION: This code snippet demonstrates how to properly shut down the TracerProvider when the service is terminated. It ensures all spans are exported before the program exits.

LANGUAGE: go
CODE:
tp := initTracerProvider()
defer func() {
    if err := tp.Shutdown(context.Background()); err != nil {
        log.Printf("Error shutting down tracer provider: %v", err)
    }
}()

----------------------------------------

TITLE: Creating Context Keys in PHP OpenTelemetry
DESCRIPTION: Demonstrates how to create context keys using OpenTelemetry\Context\Context::createKey(). These keys are used to store and retrieve values from the context.

LANGUAGE: php
CODE:
use OpenTelemetry\Context\Context;

$key1 = Context::createKey('My first key');
$key2 = Context::createKey('My second key');

----------------------------------------

TITLE: Configuring Skipped Instrumentations via CLI
DESCRIPTION: Command to specify skipped instrumentations directly through the dotnet CLI build command with escaped separators.

LANGUAGE: powershell
CODE:
dotnet build -p:SkippedInstrumentations=StackExchange.Redis%3BMongoDB.Driver.Core

----------------------------------------

TITLE: Configuring Zipkin Exporter
DESCRIPTION: PHP code to configure and use Zipkin exporter

LANGUAGE: php
CODE:
$transport = \OpenTelemetry\SDK\Common\Export\Http\PsrTransportFactory::discover()
    ->create('http://zipkin:9411/api/v2/spans', 'application/json');
$zipkinExporter = new ZipkinExporter($transport);
$tracerProvider =  new TracerProvider(
    new SimpleSpanProcessor($zipkinExporter)
);
$tracer = $tracerProvider->getTracer('io.opentelemetry.contrib.php');

----------------------------------------

TITLE: Installing Development Version of OpenTelemetry Python
DESCRIPTION: Commands for installing cutting-edge versions of OpenTelemetry packages directly from the repository using editable install mode. This includes API, SDK, and semantic conventions packages.

LANGUAGE: shell
CODE:
git clone https://github.com/open-telemetry/opentelemetry-python.git
cd opentelemetry-python
pip install -e ./opentelemetry-api -e ./opentelemetry-sdk -e ./opentelemetry-semantic-conventions

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Kubernetes Tracing
DESCRIPTION: YAML configuration for OpenTelemetry Collector that receives traces via OTLP and exports them to Jaeger. Sets up receivers, processors for sampling and batching, and exporters.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
      http:
processors:
  probabilistic_sampler:
    hash_seed: 22
    sampling_percentage: 100
  batch:
    timeout: 100ms
exporters:
  logging:
    logLevel: debug
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [probabilistic_sampler, batch]
      exporters: [otlp/jaeger, logging]

----------------------------------------

TITLE: Initializing Tracing in a .NET Console Application
DESCRIPTION: Code snippet to initialize OpenTelemetry tracing in a .NET console application, including setting up a tracer provider and console exporter.

LANGUAGE: csharp
CODE:
using OpenTelemetry;
using OpenTelemetry.Trace;
using OpenTelemetry.Resources;

// ...

var serviceName = "MyServiceName";
var serviceVersion = "1.0.0";

using var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddSource(serviceName)
    .SetResourceBuilder(
        ResourceBuilder.CreateDefault()
            .AddService(serviceName: serviceName, serviceVersion: serviceVersion))
    .AddConsoleExporter()
    .Build();

//...

----------------------------------------

TITLE: Creating Meter Instance for Metrics
DESCRIPTION: Initializes a Meter instance with name and version for custom metrics collection.

LANGUAGE: csharp
CODE:
using var meter = new Meter("Examples.Service", "1.0");

----------------------------------------

TITLE: Configuring Filelog Receiver with Container Parser
DESCRIPTION: YAML configuration showing how to set up the filelog receiver with the new container parser to handle container logs.

LANGUAGE: yaml
CODE:
receivers:
  filelog:
    include_file_path: true
    include:
      - /var/log/pods/*/*/*.log
    operators:
      - id: container-parser
        type: container

----------------------------------------

TITLE: Using OpenTelemetry Tracer in React Native Component
DESCRIPTION: This snippet demonstrates how to use the custom useTracer hook in a React Native component to ensure the tracer is loaded before rendering the UI.

LANGUAGE: typescript
CODE:
import { useTracer } from '@/hooks/useTracer';

const { loaded: tracerLoaded } = useTracer();

----------------------------------------

TITLE: Configuring OpenTelemetry Collector with OTLP HTTP Receiver
DESCRIPTION: YAML configuration for adding OTLP HTTP Receiver to the OpenTelemetry Collector config file. It enables both gRPC and HTTP protocols for the OTLP receiver.

LANGUAGE: yaml
CODE:
receivers:
otlp:
  protocols:
    grpc:
    http: ${ip:port} # add OTLP HTTP Receiver，default port is 4318

----------------------------------------

TITLE: Instrumented Application
DESCRIPTION: Complete implementation of the todo application with OpenTelemetry instrumentation for both Gin and MongoDB.

LANGUAGE: go
CODE:
package main
import (
    "context"
    "log"
    "net/http"
    "github.com/aspecto-io/opentelemetry-examples/tracing"
    "github.com/gin-gonic/gin"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"
    "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
    "go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/propagation"
)

var client *mongo.Client

func main() {
    tp, tpErr := tracing.JaegerTracerProvider()
    if tpErr != nil {
        log.Fatal(tpErr)
    }
    otel.SetTracerProvider(tp)
    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
    connectMongo()
    startWebServer()
}

func connectMongo() {
    opts := options.Client()
    opts.Monitor = otelmongo.NewMonitor()
    opts.ApplyURI("mongodb://localhost:27017")
    client, _ = mongo.Connect(context.Background(), opts)
    docs := []interface{}{
        bson.D{
            {"id", "1"},
            {"title", "Buy groceries"}
        },
        bson.D{
            {"id", "2"},
            {"title", "install Aspecto.io"}
        },
        bson.D{
            {"id", "3"},
            {"title", "Buy dogz.io domain"}
        },
    }
    client.Database("todo").Collection("todos").InsertMany(context.Background(), docs)
}

func startWebServer() {
    r := gin.Default()
    r.Use(otelgin.Middleware("todo-service"))
    r.GET("/todo", func(c *gin.Context) {
        collection := client.Database("todo").Collection("todos")
        cur, findErr := collection.Find(c.Request.Context(), bson.D{})
        if findErr != nil {
            c.AbortWithError(500, findErr)
            return
        }
        results := make([]interface{}, 0)
        curErr := cur.All(c, &results)
        if curErr != nil {
            c.AbortWithError(500, curErr)
            return
        }
        c.JSON(http.StatusOK, results)
    })
    _ = r.Run(":8080")
}

----------------------------------------

TITLE: Configuring Django Environment Variables for OpenTelemetry
DESCRIPTION: Environment variable configuration required for Django applications when using OpenTelemetry auto-instrumentation. These settings specify the application root directory and Django settings module location.

LANGUAGE: environment
CODE:
PYTHONPATH=/app
DJANGO_SETTINGS_MODULE=myapp.settings

----------------------------------------

TITLE: Implementing Trace Receiver Start Method in Go
DESCRIPTION: Implements the Start method for the tailtracer receiver, which sets up a ticker to periodically generate and consume traces.

LANGUAGE: go
CODE:
func (tailtracerRcvr *tailtracerReceiver) Start(ctx context.Context, host component.Host) error {
    tailtracerRcvr.host = host
    ctx = context.Background()
	ctx, tailtracerRcvr.cancel = context.WithCancel(ctx)

	interval, _ := time.ParseDuration(tailtracerRcvr.config.Interval)
	go func() {
		ticker := time.NewTicker(interval)
		defer ticker.Stop()
		for {
			select {
				case <-ticker.C:
					tailtracerRcvr.logger.Info("I should start processing traces now!")
					tailtracerRcvr.nextConsumer.ConsumeTraces(ctx, generateTraces(tailtracerRcvr.config.NumberOfTraces))
				case <-ctx.Done():
					return
			}
		}
	}()

	return nil
}

----------------------------------------

TITLE: Downloading OpenTelemetry .NET Automatic Instrumentation Script
DESCRIPTION: These commands download the installation scripts for OpenTelemetry .NET Automatic Instrumentation. The Unix shell command uses curl, while the PowerShell command uses Invoke-WebRequest.

LANGUAGE: sh
CODE:
curl -L -O https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/otel-dotnet-auto-install.sh

LANGUAGE: powershell
CODE:
$module_url = "https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/OpenTelemetry.DotNet.Auto.psm1"
$download_path = Join-Path $env:temp "OpenTelemetry.DotNet.Auto.psm1"
Invoke-WebRequest -Uri $module_url -OutFile $download_path -UseBasicParsing

----------------------------------------

TITLE: Generating OpenTelemetry Community Page with Hugo
DESCRIPTION: This Hugo template generates the OpenTelemetry community page. It includes sections for learning and development, along with links to community resources. The template uses translation functions and iterates over predefined link structures.

LANGUAGE: Hugo Template
CODE:
{{ $links := .Site.Params.links -}}

<p>{{ T "community_introduce" . }}</p>

## {{ T "community_learn" }}

{{ T "community_using" . }}

{{ with index $links "user"}}
  {{ template "community-links-list" . }}
{{ end }}

## {{ T "community_develop" }}

{{ T "community_contribute" . }}

{{ with index $links "developer"}}
  {{ template "community-links-list" . }}
{{ end }}

{{ T "community_how_to" . }} <a href="/docs/contributing/">{{ T "community_guideline" }}</a>.

{{ define "community-links-list" -}}
{{ range . }}
- [<i class="{{ .icon }}"></i> {{ .name }}]({{ .url }}): {{ .desc -}}
{{ end -}}
{{ end }}

----------------------------------------

TITLE: S3 Configuration for Lambda Environment Variables
DESCRIPTION: CloudFormation YAML configuration for setting up Lambda function environment variables to load collector configuration from S3.

LANGUAGE: yaml
CODE:
Function:
  Type: AWS::Serverless::Function
  Properties:
    ...
    Environment:
      Variables:
        OPENTELEMETRY_COLLECTOR_CONFIG_URI: s3://<bucket_name>.s3.<region>.amazonaws.com/collector_config.yaml

----------------------------------------

TITLE: Enabling Kubelet Metrics Preset
DESCRIPTION: YAML configuration to enable the kubelet metrics preset in the OpenTelemetry Collector Chart.

LANGUAGE: yaml
CODE:
mode: daemonset
presets:
  kubeletMetrics:
    enabled: true

----------------------------------------

TITLE: Initializing Tracing Provider in Go with OpenTelemetry
DESCRIPTION: This function initializes the OpenTelemetry SDK for tracing. It sets up an OTLP gRPC exporter, creates a TracerProvider with a batcher, and configures global propagators.

LANGUAGE: go
CODE:
func initTracerProvider() *sdktrace.TracerProvider {
    ctx := context.Background()

    exporter, err := otlptracegrpc.New(ctx)
    if err != nil {
        log.Fatal(err)
    }
    tp := sdktrace.NewTracerProvider(
        sdktrace.WithBatcher(exporter),
        sdktrace.WithResource(initResource()),
    )
    otel.SetTracerProvider(tp)
    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
    return tp
}

----------------------------------------

TITLE: Configuring OTLP Logs Export
DESCRIPTION: YAML configuration for sending internal Collector logs to an OTLP backend

LANGUAGE: yaml
CODE:
service:
  telemetry:
    logs:
      processors:
        - batch:
            exporter:
              otlp:
                protocol: http/protobuf
                endpoint: https://backend:4318

----------------------------------------

TITLE: Building the Website
DESCRIPTION: Command to build the static site files, which will be generated in the public directory.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: SSH into HashiQube
DESCRIPTION: Command to SSH into the HashiQube environment

LANGUAGE: shell
CODE:
vagrant ssh

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Metrics
DESCRIPTION: YAML configuration for setting up an OpenTelemetry collector to receive metrics via OTLP and export them using Prometheus Remote Write

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:

exporters:
  prometheusremotewrite:
    endpoint: https://prw.example.com/v1/api/remote_write

service:
  pipelines:
    metrics/prod:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheusremotewrite]

----------------------------------------

TITLE: Configuring Peer Service Mapping in OpenTelemetry
DESCRIPTION: Demonstrates how to set up peer service mapping using host names or IP addresses. This configuration adds a peer.service attribute to spans matching the specified mappings.

LANGUAGE: text
CODE:
1.2.3.4=cats-service,dogs-abcdef123.serverlessapis.com=dogs-api

----------------------------------------

TITLE: Golang Runtime Instrumentation Setup
DESCRIPTION: Configures runtime metrics collection with a minimum read interval of one second.

LANGUAGE: go
CODE:
err := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    log.Fatal(err)
}

----------------------------------------

TITLE: Configuring Auto-instrumentation in Dockerfile
DESCRIPTION: This snippet shows how to set up the OpenTelemetry auto-instrumentor for Python in the Dockerfile's ENTRYPOINT command.

LANGUAGE: dockerfile
CODE:
ENTRYPOINT [ "opentelemetry-instrument", "python", "recommendation_server.py" ]

----------------------------------------

TITLE: Installing Dependencies on CentOS
DESCRIPTION: Commands to install required gcc and development packages on CentOS systems

LANGUAGE: sh
CODE:
yum -y install python3-devel
yum -y install gcc-c++

----------------------------------------

TITLE: Creating Spring Boot Application Entry Point
DESCRIPTION: Main application class that initializes Spring Boot application with minimal configuration. Disables the banner mode for cleaner startup.

LANGUAGE: java
CODE:
package otel;

import org.springframework.boot.Banner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DiceApplication {
  public static void main(String[] args) {
    SpringApplication app = new SpringApplication(DiceApplication.class);
    app.setBannerMode(Banner.Mode.OFF);
    app.run(args);
  }
}

----------------------------------------

TITLE: Blog Post Frontmatter Template in Markdown
DESCRIPTION: Frontmatter template for OpenTelemetry blog posts that defines metadata including title, link title, publication date and canonical URL pointing to the original Medium post. Uses Hugo templating to transform the filename into a properly formatted title.

LANGUAGE: markdown
CODE:
---
title: {{ replaceRE "[-_]" " " .Name | title }} (Medium)
linkTitle: ADD A SHORT TITLE HERE # TODO
date: 2021-01-01 # TODO ADJUST THE DATE
canonical_url: https://medium.com/opentelemetry/ADD-REST-OF-PATH-HERE # TODO
---

----------------------------------------

TITLE: Configuring Git User Information for CNCF CLA
DESCRIPTION: This snippet provides guidance on setting up git configuration to match the information used for signing the CNCF Contributor License Agreement (CLA). It ensures that the contributor's name and email in git config match those used for the CLA.

LANGUAGE: shell
CODE:
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

----------------------------------------

TITLE: Installing Custom Resource Detector
DESCRIPTION: Commands to install and enable a custom container resource detector using Composer.

LANGUAGE: shell
CODE:
composer require open-telemetry/detector-container
env OTEL_PHP_RESOURCE_DETECTORS=container \
php example.php

----------------------------------------

TITLE: Configuring LoadBalancer Service for Frontend Proxy
DESCRIPTION: YAML configuration to set the service type to LoadBalancer for the frontend-proxy component in the Helm chart values file.

LANGUAGE: yaml
CODE:
components:
  frontend-proxy:
    service:
      type: LoadBalancer

----------------------------------------

TITLE: Configuring Resource in Java
DESCRIPTION: Creates a Resource with service name attribute for use in OpenTelemetry SDK configuration.

LANGUAGE: Java
CODE:
public static Resource create() {
  return Resource.getDefault().toBuilder()
      .put(ServiceAttributes.SERVICE_NAME, "my-service")
      .build();
}

----------------------------------------

TITLE: Styling CSS for Issue Management Page
DESCRIPTION: CSS styles for formatting lists and creating a custom alert style for first-time contributors. Includes compact list formatting and warning alert styling with custom colors.

LANGUAGE: css
CODE:
li > p {
  margin-bottom: 0;
}

.alert--first-timer {
  margin: 0.5rem 0 !important;

  > blockquote {
    margin-top: 1rem;
    margin-bottom: 0;
    border-left-color: var(--bs-warning);
    background-color: var(--bs-danger-bg-subtle);
    > *:last-child {
      margin-bottom: 0;
    }
  }
}

----------------------------------------

TITLE: Nomad Memory Resource Configuration
DESCRIPTION: Example of memory resource allocation configuration in Nomad job specification

LANGUAGE: hcl
CODE:
resources {
   cpu    = 55
   memory = 1024
   memory_max = 2048
}

----------------------------------------

TITLE: Enabling Cluster Metrics Preset
DESCRIPTION: YAML configuration to enable the cluster metrics preset in the OpenTelemetry Collector Chart, using deployment mode with a single replica.

LANGUAGE: yaml
CODE:
mode: deployment
replicaCount: 1
presets:
  clusterMetrics:
    enabled: true

----------------------------------------

TITLE: Setting Span Status and Recording Exceptions in .NET
DESCRIPTION: Shows how to set the status of a span and record exceptions when they occur.

LANGUAGE: csharp
CODE:
using var span = tracer.StartActiveSpan("SayHello");

try
{
	// do something
}
catch (Exception ex)
{
    span.SetStatus(new(StatusCode.Error, "Something bad happened!"));
    span.RecordException(ex)
}

----------------------------------------

TITLE: OpenTelemetry Collector Configuration
DESCRIPTION: YAML configuration for OpenTelemetry Collector to receive and export telemetry data.

LANGUAGE: YAML
CODE:
receivers:
  otlp:
    protocols:
      http:
        endpoint: '0.0.0.0:4318'
exporters:
  debug:
    verbosity: detailed
service:
  pipelines:
    metrics:
      receivers: [otlp]
      exporters: [debug]
    traces:
      receivers: [otlp]
      exporters: [debug]
    logs:
      receivers: [otlp]
      exporters: [debug]

----------------------------------------

TITLE: Implementing Custom Metric Exporter Provider
DESCRIPTION: This code snippet shows how to implement a custom ConfigurableMetricExporterProvider to allow a custom metric exporter to participate in autoconfiguration.

LANGUAGE: Java
CODE:
package otel;

import io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;
import io.opentelemetry.sdk.autoconfigure.spi.metrics.ConfigurableMetricExporterProvider;
import io.opentelemetry.sdk.metrics.export.MetricExporter;

public class CustomMetricExporterProvider implements ConfigurableMetricExporterProvider {

  @Override
  public MetricExporter createExporter(ConfigProperties config) {
    // Callback invoked when OTEL_METRICS_EXPORTER includes the value from getName().
    return new CustomMetricExporter();
  }

  @Override
  public String getName() {
    return "custom-exporter";
  }
}

----------------------------------------

TITLE: Environment Variable Definition using Go Templates
DESCRIPTION: Defines build-related environment variables using Go template syntax for use in build information display

LANGUAGE: go-template
CODE:
{{ $branch := os.Getenv "BRANCH" -}}
{{ $buildID := os.Getenv "BUILD_ID" -}}
{{ $commitRef := os.Getenv "COMMIT_REF" -}}
{{ $deployID := os.Getenv "DEPLOY_ID" -}}
{{ $isNetlifyBuilt := os.Getenv "NETLIFY" | default false -}}
{{ $isPR := os.Getenv "PULL_REQUEST" -}}
{{ $reviewID := os.Getenv "REVIEW_ID" -}}
{{ $now := now -}}

----------------------------------------

TITLE: Maven Dependencies for OpenTelemetry Kafka Integration
DESCRIPTION: Required Maven dependencies for adding OpenTelemetry instrumentation to Kafka clients

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-kafka-clients-2.6</artifactId>
</dependency>

----------------------------------------

TITLE: Ansible Configuration File
DESCRIPTION: Basic ansible.cfg configuration specifying inventory location and SSH settings.

LANGUAGE: toml
CODE:
[defaults]
inventory = inventory  # Path to the inventory file
private_key_file = ~/.ssh/id_rsa   # Path to private SSH Key
remote_user=root

----------------------------------------

TITLE: Recording Measurements with OpenTelemetry Java
DESCRIPTION: Example of recording a measurement to an OpenTelemetry histogram instrument with HTTP attributes. It shows how to create attribute sets and use pre-allocated AttributeKey constants for efficient memory usage.

LANGUAGE: java
CODE:
// Record a measurement
histogram.record(7.2, httpAttributes("PUT", "/users/{id}", 200));

// Helper constants
private static final AttributeKey<String> HTTP_REQUEST_METHOD = AttributeKey.stringKey("http.request.method");
private static final AttributeKey<String> HTTP_ROUTE = AttributeKey.stringKey("http.route");
private static final AttributeKey<String> HTTP_RESPONSE_STATUS_CODE = AttributeKey.stringKey("http.response.status_code");

// Helper function
private static Attributes httpAttributes(String method, String route, int responseStatusCode) {
  return Attributes.of(
    HTTP_REQUEST_METHOD, method,
    HTTP_ROUTE, route,
    HTTP_RESPONSE_STATUS_CODE, responseStatusCode);

----------------------------------------

TITLE: Basic Span Creation in Erlang
DESCRIPTION: Demonstrates creation of spans with events and attributes in an Erlang module using OpenTelemetry macros.

LANGUAGE: erlang
CODE:
-module(otel_getting_started).

-export([hello/0]).

-include_lib("opentelemetry_api/include/otel_tracer.hrl").

hello() ->
    ?with_span(operation, #{}, fun nice_operation/1).

nice_operation(_SpanCtx) ->
    ?add_event(<<"Nice operation!">>, [{<<"bogons">>, 100}]),
    ?set_attributes([{another_key, <<"yes">>}]),
    ?with_span(<<"Sub operation...">>, #{},
               fun(_ChildSpanCtx) ->
                       ?set_attributes([{lemons_key, <<"five">>}]),
                       ?add_event(<<"Sub span event!">>, [])
               end).

----------------------------------------

TITLE: Cloning OpenTelemetry Demo Repository
DESCRIPTION: Command to clone the OpenTelemetry demo repository from GitHub.

LANGUAGE: shell
CODE:
git clone https://github.com/open-telemetry/opentelemetry-demo.git

----------------------------------------

TITLE: Running Jaeger in Docker for OTLP Testing
DESCRIPTION: This shell command starts a Jaeger all-in-one container in Docker, configuring it to accept OTLP data and exposing various ports for different Jaeger components and protocols.

LANGUAGE: shell
CODE:
docker run -d --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -e COLLECTOR_OTLP_ENABLED=true \
  -p 6831:6831/udp \
  -p 6832:6832/udp \
  -p 5778:5778 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 14250:14250 \
  -p 14268:14268 \
  -p 14269:14269 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest

----------------------------------------

TITLE: Running Prometheus Docker Container
DESCRIPTION: Shell command to run Prometheus in a Docker container with a mounted configuration file.

LANGUAGE: shell
CODE:
docker run -d \
    -p 9090:9090 \
    -v path/to/prometheus.yml:/etc/prometheus/prometheus.yml \
    prom/prometheus

----------------------------------------

TITLE: Docker Compose Setup for OpenTelemetry Collector
DESCRIPTION: Docker Compose configuration for running the Expert Grogu level setup with OpenTelemetry Collector.

LANGUAGE: yaml
CODE:
version: '3'
services:
  collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml
      - ./:/usr/src/app
    command: ['--config=/etc/otelcol-contrib/config.yaml']
    ports:
      - '4317:4317'
  baby-grogu:
    build: .
    command: python main.py 10
    volumes:
      - .:/usr/src/app

----------------------------------------

TITLE: Disabling Specific Instrumentations in Node.js OpenTelemetry
DESCRIPTION: Sets the OTEL_NODE_DISABLED_INSTRUMENTATIONS environment variable to disable fs and grpc instrumentations for OpenTelemetry in Node.js.

LANGUAGE: shell
CODE:
OTEL_NODE_DISABLED_INSTRUMENTATIONS="fs,grpc"

----------------------------------------

TITLE: Adding DiagnosticSource Package Reference in .NET
DESCRIPTION: Adds the System.Diagnostics.DiagnosticSource NuGet package dependency to the project file.

LANGUAGE: xml
CODE:
<PackageReference Include="System.Diagnostics.DiagnosticSource" Version="8.0.0" />

----------------------------------------

TITLE: Installing HTTPX Instrumentation Library
DESCRIPTION: Command to install the HTTPX-specific OpenTelemetry instrumentation library.

LANGUAGE: sh
CODE:
pip install opentelemetry-instrumentation-httpx

----------------------------------------

TITLE: Running Instrumented Rails Application with Console Exporter
DESCRIPTION: Command to run the Rails server with OpenTelemetry instrumentation, using the console exporter for traces.

LANGUAGE: sh
CODE:
env OTEL_TRACES_EXPORTER=console rails server -p 8080

----------------------------------------

TITLE: Running Jaeger Container for OTLP Export
DESCRIPTION: Docker command to run Jaeger as an OTLP endpoint for trace visualization. Exposes ports 16686 for UI, 4317 and 4318 for OTLP collection.

LANGUAGE: shell
CODE:
docker run -d --name jaeger \
  -e COLLECTOR_OTLP_ENABLED=true \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  jaegertracing/all-in-one:latest

----------------------------------------

TITLE: OTLP Version of SSL Check Script
DESCRIPTION: SSL check script modified to send metrics using OTLP JSON format via HTTP POST.

LANGUAGE: shell
CODE:
#!/bin/bash
URL=${1}
PORT=${2:-443}

now=$(date +%s)
notAfterString=$(echo q | openssl s_client -servername "${URL}" "${URL}:${PORT}" 2>/dev/null | openssl x509 -noout -enddate | awk -F"=" '{ print $2; }')
if [[ "$(uname)" == "Darwin" ]] ; then
  notAfter=$(date -j -f "%b %d %H:%M:%S %Y %Z" "${notAfterString}" +%s)
else
  notAfter=$(date -d "${notAfterString}" +%s)
fi

secondsLeft=$(($notAfter-$now))

data="
{
    \"resourceMetrics\": [
      {
        \"resource\": {
          \"attributes\": [
            {
              \"key\": \"service.name\",
              \"value\": {
                \"stringValue\": \"${URL}\"
              }
            }
          ]
        },
        \"scopeMetrics\": [
          {
            \"metrics\": [
              {
                \"name\": \"tls.server.not_after.time_left\",
                \"unit\": \"s\",
                \"description\": \"\",
                \"gauge\": {
                  \"dataPoints\": [
                    {
                      \"asInt\": ${secondsLeft},
                      \"timeUnixNano\": ${now}000000000
                    }
                  ]
                }
              }
            ]
          }
        ]
      }
    ]
  }
"
curl -X POST -H "Content-Type: application/json" -d "${data}" -i localhost:4318/v1/metrics

----------------------------------------

TITLE: Installing Kafka on macOS using Homebrew
DESCRIPTION: Command to install Kafka on macOS using the Homebrew package manager.

LANGUAGE: shell
CODE:
brew install kafka

----------------------------------------

TITLE: Implementing File Logging with OpenTelemetry in Python
DESCRIPTION: Advanced logging implementation (Expert Grogu level) using file logging and the OpenTelemetry Collector.

LANGUAGE: python
CODE:
start_time = time.time()
try:
    how_long_int = int(how_long)
    logger.info("Starting to practice The Telemetry for %i second(s)", how_long_int)
    while time.time() - start_time < how_long_int:
        next_char = random.choice(string.punctuation)
        print(next_char, end="", flush=True)
        time.sleep(0.5)
    logger.info("Done practicing")
except ValueError as ve:
    logger.error("I need an integer value for the time to practice: %s", ve)
    return False
except Exception as e:
    logger.error("An unexpected error occurred: %s", e)
    return False
return True

----------------------------------------

TITLE: Publishing Accounting Service with Native Runtime Components
DESCRIPTION: This command publishes the Accounting Service project, including appropriate native runtime components. It uses the current runtime, sets the build configuration, specifies the output directory, and disables the use of app host.

LANGUAGE: sh
CODE:
dotnet publish "./AccountingService.csproj" --use-current-runtime -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

----------------------------------------

TITLE: Installing OpenTelemetry Collector on Debian Linux (AMD64)
DESCRIPTION: Commands to download and install the OpenTelemetry Collector DEB package on Debian-based Linux systems for AMD64 architecture.

LANGUAGE: sh
CODE:
sudo apt-get update
sudo apt-get -y install wget
wget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.deb
sudo dpkg -i otelcol_{{% param vers %}}_linux_amd64.deb

----------------------------------------

TITLE: Using Semantic Attributes in Erlang and Elixir
DESCRIPTION: Demonstrates how to use semantic attributes defined by the OpenTelemetry Specification in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
-include_lib("opentelemetry_semantic_conventions/include/trace.hrl").

?with_span(my_span, #{attributes => [{?HTTP_SCHEME, <<"https">>}]},
           fun() ->
             ...
           end)

LANGUAGE: elixir
CODE:
alias OpenTelemetry.SemanticConventions.Trace, as: Trace

Tracer.with_span :span_1, %{attributes: [{Trace.http_scheme(), <<"https">>}]} do

end

----------------------------------------

TITLE: Recording Method Latency with Histograms
DESCRIPTION: Shows how to record method execution time using StopWatch and histograms for exemplar tracking.

LANGUAGE: csharp
CODE:
var stopwatch = Stopwatch.StartNew();

(method logic)

addItemHistogram.Record(stopwatch.ElapsedTicks);

----------------------------------------

TITLE: Configuring OTEL_SERVICE_NAME in App.config or Web.config
DESCRIPTION: Example of setting the OTEL_SERVICE_NAME configuration in an XML configuration file for .NET Framework applications.

LANGUAGE: XML
CODE:
<configuration>
<appSettings>
    <add key="OTEL_SERVICE_NAME" value="my-service-name" />
</appSettings>
</configuration>

----------------------------------------

TITLE: Installing OTLP Exporter via Bundle/Gem
DESCRIPTION: Commands to install the OpenTelemetry OTLP exporter package using either bundler or gem.

LANGUAGE: shell
CODE:
bundle add opentelemetry-exporter-otlp

LANGUAGE: shell
CODE:
gem install opentelemetry-exporter-otlp

----------------------------------------

TITLE: Elixir Dependencies Configuration
DESCRIPTION: Configuration of OpenTelemetry dependencies for Elixir applications including API, SDK, and exporter packages.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:opentelemetry_api, "~> {{% param versions.otelApi %}}},
    {:opentelemetry, "~> {{% param versions.otelSdk %}}},
    {:opentelemetry_exporter, "~> {{% param versions.otelExporter %}}}
  ]
end

----------------------------------------

TITLE: Container Log Parser Output Example
DESCRIPTION: Example JSON output showing how the container parser processes a Docker log line and extracts Kubernetes metadata.

LANGUAGE: json
CODE:
{
  "timestamp": "2024-03-30 08:31:20.545192187 +0000 UTC",
  "body": "INFO: This is a docker log line",
  "attributes": {
    "time": "2024-03-30T08:31:20.545192187Z",
    "log.iostream": "stdout",
    "log.file.path": "/var/log/pods/kube-system_kube-controller-kind-control-plane_49cc7c1fd3702c40b2686ea7486091d6/kube-controller/1.log"
  },
  "resource": {
    "attributes": {
      "k8s.pod.name": "kube-controller-kind-control-plane",
      "k8s.pod.uid": "49cc7c1fd3702c40b2686ea7486091d6",
      "k8s.container.name": "kube-controller",
      "k8s.container.restart_count": "1",
      "k8s.namespace.name": "kube-system"
    }
  }
}

----------------------------------------

TITLE: Creating a New Blog Post with Assets using Hugo CLI
DESCRIPTION: This command creates a new blog post with a dedicated folder for assets like images. It generates an index.md file within a new directory for the post.

LANGUAGE: sh
CODE:
npx hugo new content/en/blog/2024/short-name-for-post/index.md

----------------------------------------

TITLE: OpenTelemetry Receiver with Authenticator Configuration
DESCRIPTION: Shows how to configure a receiver to use an authenticator extension for incoming request authentication.

LANGUAGE: yaml
CODE:
extensions:
  oidc:

receivers:
  otlp/auth:
    protocols:
      grpc:
         endpoint: 0.0.0.0:4317
        auth:
          authenticator: oidc

processors:
exporters:

service:
  extensions:
    - oidc
  pipelines:
    traces:
      receivers:
        - otlp/auth
      processors: []
      exporters: []

----------------------------------------

TITLE: GitHub PR Process Diagram in Mermaid
DESCRIPTION: Flowchart illustrating the steps for opening a pull request using GitHub's web interface

LANGUAGE: mermaid
CODE:
flowchart LR
A([fa:fa-user New<br>Contributor]) --- id1[(open-telemetry/opentelemetry.io<br>GitHub)]
subgraph tasks[Changes using GitHub]
direction TB
    0[ ] -.-
    1[1\. Edit this page] --> 2[2\. Use GitHub markdown<br>editor to make changes]
    2 --> 3[3\. Fill in Propose file change]
end

----------------------------------------

TITLE: Initializing Basic HTTP Server in Go
DESCRIPTION: Creates a basic HTTP server using net/http that handles dice rolling requests

LANGUAGE: go
CODE:
package main

import (
	"log"
	"net/http"
)

func main() {
	http.HandleFunc("/rolldice", rolldice)

	log.Fatal(http.ListenAndServe(":8080", nil))
}

----------------------------------------

TITLE: Setting Span Status in Erlang and Elixir
DESCRIPTION: Demonstrates how to set the status of a span in both Erlang and Elixir.

LANGUAGE: erlang
CODE:
-include_lib("opentelemetry_api/include/opentelemetry.hrl").

?set_status(?OTEL_STATUS_ERROR, <<"this is not ok">>)

LANGUAGE: elixir
CODE:
Tracer.set_status(:error, "this is not ok")

----------------------------------------

TITLE: Creating Directory and Example File for Python Logs
DESCRIPTION: Commands to create a directory for the Python logs example and an empty Python file.

LANGUAGE: sh
CODE:
mkdir python-logs-example
cd python-logs-example
touch example.py

----------------------------------------

TITLE: Creating a New Blog Post with Hugo CLI
DESCRIPTION: This command uses Hugo to generate a new blog post file from a template. It creates a Markdown file for the post in the specified directory.

LANGUAGE: sh
CODE:
npx hugo new content/en/blog/2024/short-name-for-post.md

----------------------------------------

TITLE: RestTemplate Controller Implementation
DESCRIPTION: Example of creating a RestTemplate using RestTemplateBuilder in a Spring controller.

LANGUAGE: java
CODE:
package otel;

import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class RestTemplateController {

  private final RestTemplate restTemplate;

  public RestTemplateController(RestTemplateBuilder restTemplateBuilder) {
    restTemplate = restTemplateBuilder.rootUri("http://localhost:8080").build();
  }
}

----------------------------------------

TITLE: Installing Zipkin Exporter
DESCRIPTION: Command to install Zipkin exporter package using Composer

LANGUAGE: shell
CODE:
composer require open-telemetry/exporter-zipkin

----------------------------------------

TITLE: Kubernetes Collector Configuration
DESCRIPTION: YAML configuration for OpenTelemetry Collector in Kubernetes environment with container log handling.

LANGUAGE: yaml
CODE:
receivers:
  filelog/otlp-json-logs:
    include: [/var/log/pods/<<namespace>>_<<pod_name>>_*/<<container_name>>/]
    include_file_path: true
    operators:
      - type: container
        add_metadata_from_filepath: true

  otlp:
    protocols:
      grpc:
      http:

processors:
  batch:
  resourcedetection:
    detectors: ['env', 'system']
    override: false

connectors:
  otlpjson:

service:
  pipelines:
    logs/raw_otlpjson:
      receivers: [filelog/otlp-json-logs]
      processors: []
      exporters: [otlpjson]
    logs:
      receivers: [otlp, otlpjson]
      processors: [resourcedetection, batch]
      exporters: [otlphttp, debug]

exporters:
  debug:
    verbosity: detailed
  otlphttp:

----------------------------------------

TITLE: Installing Zipkin Exporter via Bundle/Gem
DESCRIPTION: Commands to install the OpenTelemetry Zipkin exporter package using either bundler or gem.

LANGUAGE: shell
CODE:
bundle add opentelemetry-exporter-zipkin

LANGUAGE: shell
CODE:
gem install opentelemetry-exporter-zipkin

----------------------------------------

TITLE: Creating Basic HTML Structure for OpenTelemetry Browser Instrumentation
DESCRIPTION: This HTML file sets up a basic structure for demonstrating OpenTelemetry browser instrumentation. It includes a meta tag for trace context and a placeholder for the instrumentation script.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Document Load Instrumentation Example</title>
    <base href="/" />
    <!--
      https://www.w3.org/TR/trace-context/
      Set the `traceparent` in the server's HTML template code. It should be
      dynamically generated server side to have the server's request trace ID,
      a parent span ID that was set on the server's request span, and the trace
      flags to indicate the server's sampling decision
      (01 = sampled, 00 = not sampled).
      '{version}-{traceId}-{spanId}-{sampleDecision}'
    -->
    <meta
      name="traceparent"
      content="00-ab42124a3c573678d4d8b21ba52df3bf-d21f7bc17caa5aba-01"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    Example of using Web Tracer with document load instrumentation with console
    exporter and collector exporter
  </body>
</html>

----------------------------------------

TITLE: Creating Basic HTML Structure for OpenTelemetry Browser Instrumentation
DESCRIPTION: This HTML file sets up a basic structure for demonstrating OpenTelemetry browser instrumentation. It includes a meta tag for trace context and a placeholder for the instrumentation script.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Document Load Instrumentation Example</title>
    <base href="/" />
    <!--
      https://www.w3.org/TR/trace-context/
      Set the `traceparent` in the server's HTML template code. It should be
      dynamically generated server side to have the server's request trace ID,
      a parent span ID that was set on the server's request span, and the trace
      flags to indicate the server's sampling decision
      (01 = sampled, 00 = not sampled).
      '{version}-{traceId}-{spanId}-{sampleDecision}'
    -->
    <meta
      name="traceparent"
      content="00-ab42124a3c573678d4d8b21ba52df3bf-d21f7bc17caa5aba-01"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    Example of using Web Tracer with document load instrumentation with console
    exporter and collector exporter
  </body>
</html>

----------------------------------------

TITLE: Adding gRPC Instrumentation in Rust OpenTelemetry
DESCRIPTION: This snippet demonstrates how to add gRPC instrumentation to a Rust service using OpenTelemetry. It shows the creation of a root span for a gRPC request and how to pass context to an async function.

LANGUAGE: rust
CODE:
    let tracer = global::tracer("shipping");
    let mut span = tracer.span_builder("oteldemo.ShippingService/GetQuote").with_kind(SpanKind::Server).start_with_context(&tracer, &parent_cx);
    span.set_attribute(semcov::trace::RPC_SYSTEM.string(RPC_SYSTEM_GRPC));

    span.add_event("Processing get quote request".to_string(), vec![]);

    let cx = Context::current_with_span(span);
    let q = match create_quote_from_count(itemct)
        .with_context(cx.clone())
        .await
//-> create_quote_from_count()...
    let f = match request_quote(count).await {
        Ok(float) => float,
        Err(err) => {
            let msg = format!("{}", err);
            return Err(tonic::Status::unknown(msg));
        }
    };

    Ok(get_active_span(|span| {
        let q = create_quote_from_float(f);
        span.add_event(
            "Received Quote".to_string(),
            vec![KeyValue::new("app.shipping.cost.total", format!("{}", q))],
        );
        span.set_attribute(KeyValue::new("app.shipping.items.count", count as i64));
        span.set_attribute(KeyValue::new("app.shipping.cost.total", format!("{}", q)));
        q
    }))
//<- create_quote_from_count()...
    cx.span().set_attribute(semcov::trace::RPC_GRPC_STATUS_CODE.i64(RPC_GRPC_STATUS_CODE_OK));

----------------------------------------

TITLE: Configuring YAML Front Matter for OpenTelemetry API Documentation
DESCRIPTION: YAML configuration block that sets up page metadata and redirect properties for the OpenTelemetry API documentation. Defines the page title, link behavior, and redirect URL to RubyDoc.info.

LANGUAGE: yaml
CODE:
title: API reference
linkTitle: API
redirect: https://www.rubydoc.info/gems/opentelemetry-sdk
manualLinkTarget: _blank
_build: { render: link }
weight: 210

----------------------------------------

TITLE: Running i18n Check Script in Console
DESCRIPTION: Commands to run the i18n check script, which helps track changes in English pages that need to be reflected in localized versions. It can show diffs and update commit hashes.

LANGUAGE: console
CODE:
$ npm run check:i18n
$ npm run check:i18n -- content/zh
$ npm run check:i18n -- -d content/zh/docs/platforms/kubernetes
$ npm run check:i18n -- -n -c HEAD content/zh/docs/concepts
$ npm run check:i18n -- -c <hash> <PATH-TO-YOUR-NEW-FILES>

----------------------------------------

TITLE: Docker Compose Setup for Basic Logging
DESCRIPTION: Docker Compose configuration for running the Baby Grogu level Python application.

LANGUAGE: yaml
CODE:
version: '3'
services:
  baby-grogu:
    build: .
    command: python main.py 3
    volumes:
      - .:/usr/src/app

----------------------------------------

TITLE: Initializing OpenLIT in Python Application
DESCRIPTION: Python code snippet to initialize OpenLIT in an LLM application, specifying the OpenTelemetry Collector endpoint for data export.

LANGUAGE: python
CODE:
import openlit

openlit.init(
  otlp_endpoint="YOUR_OTELCOL_URL:4318",
)

----------------------------------------

TITLE: Testing the Setup with a Sample Request
DESCRIPTION: This snippet demonstrates how to test the Istio and OpenTelemetry setup by making a request to the productpage service from the ratings pod and extracting the title from the response.

LANGUAGE: shell
CODE:
kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

----------------------------------------

TITLE: Setting Resource Attributes in Erlang Configuration
DESCRIPTION: Configuration of OpenTelemetry resource attributes in Erlang using sys.config.

LANGUAGE: erlang
CODE:
%% sys.config
{opentelemetry, {resource, #{deployment => #{environment => <<"development">>}}}}

----------------------------------------

TITLE: Installing OpenTelemetry Packages for Python Logs
DESCRIPTION: Pip commands to install the necessary OpenTelemetry packages for the logs example.

LANGUAGE: sh
CODE:
pip install opentelemetry-distro
pip install opentelemetry-exporter-otlp

----------------------------------------

TITLE: Installing OpenTelemetry SDK
DESCRIPTION: Commands to install the OpenTelemetry SDK and instrumentation libraries for Gin and MongoDB.

LANGUAGE: shell
CODE:
go get go.opentelemetry.io/otel /
go.opentelemetry.io/otel/sdk /
go get go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin /
go get go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo

----------------------------------------

TITLE: Creating a New Rails API Application
DESCRIPTION: Commands to create a new Rails API-only application named 'dice-ruby' and navigate to its directory.

LANGUAGE: sh
CODE:
rails new --api dice-ruby
cd dice-ruby

----------------------------------------

TITLE: Setting Resource Attributes in Elixir Configuration
DESCRIPTION: Configuration of OpenTelemetry resource attributes in Elixir using runtime.exs.

LANGUAGE: elixir
CODE:
## runtime.exs
config :opentelemetry, resource: %{deployment: %{environment: "development" }}

----------------------------------------

TITLE: Setting Resource Attributes in Elixir Configuration
DESCRIPTION: Configuration of OpenTelemetry resource attributes in Elixir using runtime.exs.

LANGUAGE: elixir
CODE:
## runtime.exs
config :opentelemetry, resource: %{deployment: %{environment: "development" }}

----------------------------------------

TITLE: Tracer Provider Shutdown in Go
DESCRIPTION: Demonstrates proper shutdown of the OpenTelemetry tracer provider to ensure all spans are exported.

LANGUAGE: go
CODE:
tp := InitTracerProvider()
defer func() {
    if err := tp.Shutdown(context.Background()); err != nil {
        log.Fatalf("Tracer Provider Shutdown: %v", err)
    }
}()

----------------------------------------

TITLE: Go SDK Benchmark Test Location
DESCRIPTION: Reference to the Go SDK's benchmarking implementation file location.

LANGUAGE: text
CODE:
benchmark_test.go

----------------------------------------

TITLE: Python SDK Trace Benchmark Location
DESCRIPTION: Reference to the Python SDK's trace benchmarking implementation file location.

LANGUAGE: text
CODE:
test_benchmark_trace.py

----------------------------------------

TITLE: Installing OpenTelemetry Collector Deployment using Helm
DESCRIPTION: This command installs the OpenTelemetry Collector as a Deployment using the Helm chart and the previously defined values.yaml file for cluster-wide metrics and events.

LANGUAGE: sh
CODE:
helm install otel-collector-cluster open-telemetry/opentelemetry-collector --values <path where you saved the chart>

----------------------------------------

TITLE: Sequence Diagram: Target Allocator Operation
DESCRIPTION: Mermaid sequence diagram showing the flow of target allocation between the Target Allocator, Metrics Targets, and OTel Collectors.

LANGUAGE: mermaid
CODE:
sequenceDiagram
  participant Target Allocator
  participant Metrics Targets
  participant OTel Collectors
  Target Allocator ->>Metrics Targets: 1. Discover Metrics targets
  Target Allocator ->>OTel Collectors: 2. Discover available Collectors
  Target Allocator ->>Target Allocator: 3. Assign Metrics targets
  OTel Collectors ->>Target Allocator: 4. Query TA for Metrics endpoints scrape
  OTel Collectors ->>Metrics Targets: 5. Scrape Metrics target

----------------------------------------

TITLE: Installing OpenTelemetry Contrib Instrumentation Libraries in Go
DESCRIPTION: Command to install instrumentation libraries from the OpenTelemetry Contrib repository using go get. Replace {import-path} and {package-name} with specific library details.

LANGUAGE: sh
CODE:
go get go.opentelemetry.io/contrib/instrumentation/{import-path}/otel{package-name}

----------------------------------------

TITLE: Installing Dependencies on Debian/Ubuntu
DESCRIPTION: Commands to install required development packages on Debian/Ubuntu systems

LANGUAGE: sh
CODE:
apt install -y python3-dev
apt install -y build-essential

----------------------------------------

TITLE: Configuring OTLP Receiver with Default Settings in YAML
DESCRIPTION: Example of the previous default configuration for the OTLP receiver, which implicitly used '0.0.0.0' as the bind address.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:

----------------------------------------

TITLE: Adding OpenTelemetry Dependency in mix.exs
DESCRIPTION: Configuration snippet showing how to declare the OpenTelemetry package dependency in a Mix project's dependency list. Uses Mix's deps function to specify the package name and version constraint.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:{{ .name }}, "~> {{ .version }}"}
  ]

----------------------------------------

TITLE: Configuring Swift Package Dependencies for Vapor Application
DESCRIPTION: Initial Package.swift configuration for a basic Vapor HTTP server application targeting macOS 13 and above.

LANGUAGE: swift
CODE:
// swift-tools-version:5.9
import PackageDescription

let package = Package(
    name: "dice-server",
    platforms: [
       .macOS(.v13)
    ],
    dependencies: [
        .package(url: "https://github.com/vapor/vapor.git", from: "4.83.1")
    ],
    targets: [
        .executableTarget(
            name: "DiceApp",
            dependencies: [
                .product(name: "Vapor", package: "vapor")
            ],
            path: "."
        )
    ]
)

----------------------------------------

TITLE: Java Logging Implementation
DESCRIPTION: Example of Java logging code using SLF4J with MDC context and structured logging patterns.

LANGUAGE: java
CODE:
Logger logger = org.slf4j.LoggerFactory.getLogger(MyClass.class);
...
MDC.put("customerId", customerId);

logger.info("Order {} successfully placed", orderId);

logger.atInfo().
   .addKeyValue("orderId", orderId)
   .addKeyValue("outcome", "success")
   .log("placeOrder");

----------------------------------------

TITLE: Adding Span Events in .NET
DESCRIPTION: Shows how to add events to spans using the Activity.AddEvent method in .NET.

LANGUAGE: csharp
CODE:
activity?.AddEvent(new("Fetch cart"));

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: Sets up a new Go module for the dice application.

LANGUAGE: shell
CODE:
go mod init dice

----------------------------------------

TITLE: Initializing Go Module
DESCRIPTION: Sets up a new Go module for the dice application.

LANGUAGE: shell
CODE:
go mod init dice

----------------------------------------

TITLE: Configuring OpenTelemetry Node.js App Entrypoint
DESCRIPTION: Dockerfile configuration to start the Node.js application with OpenTelemetry instrumentation using the initialization file.

LANGUAGE: dockerfile
CODE:
ENTRYPOINT [ "node", "--require", "./opentelemetry.js", "./index.js" ]

----------------------------------------

TITLE: Pod UID Sharding Formula
DESCRIPTION: Formula used to shard monitoring of pods across multiple Metricbeat instances in a statefulset deployment.

LANGUAGE: text
CODE:
xxHash(pod uid) % statefulset_size == instance number

----------------------------------------

TITLE: Calculating Relative Error for Exponential Histogram
DESCRIPTION: This code snippet demonstrates how to calculate the relative error for an exponential histogram with a scale factor of 3. It shows the step-by-step process of determining the base and computing the relative error percentage.

LANGUAGE: bash
CODE:
scale = 3
# For base calculation, see above
base  = 1.090508

relative error = (bucketWidth / 2) / bucketMidpoint
               = ((upper - lower) / 2) / ((upper + lower) / 2)
               = ((base - 1) / 2) / ((base + 1) / 2)
               = (base - 1) / (base + 1)
               = (1.090508 - 1) / (1.090508 + 1)
               = 0.04329
               = 4.329%

----------------------------------------

TITLE: Traefik Frontend Proxy Configuration
DESCRIPTION: Nomad service configuration for Traefik frontend proxy routing

LANGUAGE: hcl
CODE:
tags = [        "traefik.http.routers.frontendproxy.rule=Host(`otel-demo.localhost`)",
    "traefik.http.routers.frontendproxy.entrypoints=web",
    "traefik.http.routers.frontendproxy.tls=false",
    "traefik.enable=true",
]

----------------------------------------

TITLE: Installing Development Version of OpenTelemetry Instrumentation
DESCRIPTION: Command to perform an editable installation of OpenTelemetry instrumentation from the contributed repository.

LANGUAGE: sh
CODE:
pip install -e ./instrumentation/opentelemetry-instrumentation-{integration}

----------------------------------------

TITLE: Initializing OpenLIT with Environment Variable
DESCRIPTION: Python code and shell command to initialize OpenLIT using an environment variable for the OpenTelemetry Collector endpoint.

LANGUAGE: python
CODE:
import openlit

openlit.init()

LANGUAGE: shell
CODE:
export OTEL_EXPORTER_OTLP_ENDPOINT = "YOUR_OTELCOL_URL:4318"

----------------------------------------

TITLE: Initializing OpenTelemetry Metrics
DESCRIPTION: Initialize resources, metrics exporter, and metrics provider for OpenTelemetry metrics in Go.

LANGUAGE: go
CODE:
package main

import (
	"context"
	"log"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.26.0"
)

func main() {
	// Create resource.
	res, err := newResource()
	if err != nil {
		panic(err)
	}

	// Create a meter provider.
	// You can pass this instance directly to your instrumented code if it
	// accepts a MeterProvider instance.
	meterProvider, err := newMeterProvider(res)
	if err != nil {
		panic(err)
	}

	// Handle shutdown properly so nothing leaks.
	defer func() {
		if err := meterProvider.Shutdown(context.Background()); err != nil {
			log.Println(err)
		}
	}()

	// Register as global meter provider so that it can be used via otel.Meter
	// and accessed using otel.GetMeterProvider.
	// Most instrumentation libraries use the global meter provider as default.
	// If the global meter provider is not set then a no-op implementation
	// is used, which fails to generate data.
	otel.SetMeterProvider(meterProvider)
}

func newResource() (*resource.Resource, error) {
	return resource.Merge(resource.Default(),
		resource.NewWithAttributes(semconv.SchemaURL,
			semconv.ServiceName("my-service"),
			semconv.ServiceVersion("0.1.0"),
		))
}

func newMeterProvider(res *resource.Resource) (*metric.MeterProvider, error) {
	metricExporter, err := stdoutmetric.New()
	if err != nil {
		return nil, err
	}

	meterProvider := metric.NewMeterProvider(
		metric.WithResource(res),
		metric.WithReader(metric.NewPeriodicReader(metricExporter,
			// Default is 1m. Set to 3s for demonstrative purposes.
			metric.WithInterval(3*time.Second))),
	)
	return meterProvider, nil
}

----------------------------------------

TITLE: AdditionalDeps Error Message
DESCRIPTION: Error message showing assembly dependency manifest issues

LANGUAGE: txt
CODE:
An assembly specified in the application dependencies manifest (OpenTelemetry.AutoInstrumentation.AdditionalDeps.deps.json) was not found

----------------------------------------

TITLE: Configuring Custom OpenTelemetry Collector Exporters
DESCRIPTION: YAML configuration to add custom exporters to the OpenTelemetry Collector configuration in the Helm chart values file.

LANGUAGE: yaml
CODE:
opentelemetry-collector:
  config:
    exporters:
      otlphttp/example:
        endpoint: <your-endpoint-url>

    service:
      pipelines:
        traces:
          exporters: [spanmetrics, otlphttp/example]

----------------------------------------

TITLE: Initializing OpenTelemetry Metrics in .NET
DESCRIPTION: Configures OpenTelemetry metrics with process, runtime, and ASP.NET Core instrumentation using the .NET dependency injection container.

LANGUAGE: csharp
CODE:
Action<ResourceBuilder> appResourceBuilder =
    resource => resource
        .AddContainerDetector()
        .AddHostDetector();

builder.Services.AddOpenTelemetry()
    .ConfigureResource(appResourceBuilder)
    .WithMetrics(meterBuilder => meterBuilder
        .AddMeter("OpenTelemetry.Demo.Cart")
        .AddProcessInstrumentation()
        .AddRuntimeInstrumentation()
        .AddAspNetCoreInstrumentation()
        .SetExemplarFilter(ExemplarFilterType.TraceBased)
        .AddOtlpExporter());

----------------------------------------

TITLE: Sample Target Allocator Job Targets Output
DESCRIPTION: Example JSON output showing the targets for a specific job, including detailed Kubernetes metadata.

LANGUAGE: json
CODE:
{
  "otelcol-collector-0": {
    "_link": "/jobs/serviceMonitor%2Fopentelemetry%2Fsm-example%2F0/targets?collector_id=otelcol-collector-0",
    "targets": [
      {
        "targets": ["10.244.0.11:8080"],
        "labels": {
          "__meta_kubernetes_endpointslice_port_name": "prom",
          "__meta_kubernetes_pod_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_endpointslice_port_protocol": "TCP",
          "__meta_kubernetes_endpointslice_address_target_name": "py-prometheus-app-575cfdd46-nfttj",
          "__meta_kubernetes_endpointslice_annotation_endpoints_kubernetes_io_last_change_trigger_time": "2024-06-21T20:01:37Z",
          "__meta_kubernetes_endpointslice_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_pod_name": "py-prometheus-app-575cfdd46-nfttj",
          "__meta_kubernetes_pod_controller_name": "py-prometheus-app-575cfdd46",
          "__meta_kubernetes_pod_label_app_kubernetes_io_name": "py-prometheus-app",
          "__meta_kubernetes_endpointslice_address_target_kind": "Pod",
          "__meta_kubernetes_pod_node_name": "otel-target-allocator-talk-control-plane",
          "__meta_kubernetes_pod_labelpresent_pod_template_hash": "true",
          "__meta_kubernetes_endpointslice_label_kubernetes_io_service_name": "py-prometheus-app",
          "__meta_kubernetes_endpointslice_annotationpresent_endpoints_kubernetes_io_last_change_trigger_time": "true",
          "__meta_kubernetes_service_name": "py-prometheus-app",
          "__meta_kubernetes_pod_ready": "true",
          "__meta_kubernetes_pod_labelpresent_app": "true",
          "__meta_kubernetes_pod_controller_kind": "ReplicaSet",
          "__meta_kubernetes_endpointslice_labelpresent_app": "true",
          "__meta_kubernetes_pod_container_image": "otel-target-allocator-talk:0.1.0-py-prometheus-app",
          "__address__": "10.244.0.11:8080",
          "__meta_kubernetes_service_label_app_kubernetes_io_name": "py-prometheus-app",
          "__meta_kubernetes_pod_uid": "495d47ee-9a0e-49df-9b41-fe9e6f70090b",
          "__meta_kubernetes_endpointslice_port": "8080",
          "__meta_kubernetes_endpointslice_label_endpointslice_kubernetes_io_managed_by": "endpointslice-controller.k8s.io",
          "__meta_kubernetes_endpointslice_label_app": "my-app",
          "__meta_kubernetes_service_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_pod_host_ip": "172.24.0.2",
          "__meta_kubernetes_namespace": "opentelemetry",
          "__meta_kubernetes_endpointslice_endpoint_conditions_serving": "true",
          "__meta_kubernetes_endpointslice_labelpresent_kubernetes_io_service_name": "true",
          "__meta_kubernetes_endpointslice_endpoint_conditions_ready": "true",
          "__meta_kubernetes_service_annotation_kubectl_kubernetes_io_last_applied_configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"my-app\",\"app.kubernetes.io/name\":\"py-prometheus-app\"},\"name\":\"py-prometheus-app\",\"namespace\":\"opentelemetry\"},\"spec\":{\"ports\":[{\"name\":\"prom\",\"port\":8080}],\"selector\":{\"app\":\"my-app\",\"app.kubernetes.io/name\":\"py-prometheus-app\"}}}",
          "__meta_kubernetes_endpointslice_endpoint_conditions_terminating": "false",
          "__meta_kubernetes_pod_container_port_protocol": "TCP",
          "__meta_kubernetes_pod_phase": "Running",
          "__meta_kubernetes_pod_container_name": "my-app",
          "__meta_kubernetes_pod_container_port_name": "prom",
          "__meta_kubernetes_pod_ip": "10.244.0.11",
          "__meta_kubernetes_service_annotationpresent_kubectl_kubernetes_io_last_applied_configuration": "true",
          "__meta_kubernetes_service_labelpresent_app": "true",
          "__meta_kubernetes_endpointslice_address_type": "IPv4",
          "__meta_kubernetes_service_label_app": "my-app",
          "__meta_kubernetes_pod_label_app": "my-app",
          "__meta_kubernetes_pod_container_port_number": "8080",
          "__meta_kubernetes_endpointslice_name": "py-prometheus-app-bwbvn",
          "__meta_kubernetes_pod_label_pod_template_hash": "575cfdd46",
          "__meta_kubernetes_endpointslice_endpoint_node_name": "otel-target-allocator-talk-control-plane",
          "__meta_kubernetes_endpointslice_labelpresent_endpointslice_kubernetes_io_managed_by": "true",
          "__meta_kubernetes_endpointslice_label_app_kubernetes_io_name": "py-prometheus-app"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Sample Target Allocator Job Targets Output
DESCRIPTION: Example JSON output showing the targets for a specific job, including detailed Kubernetes metadata.

LANGUAGE: json
CODE:
{
  "otelcol-collector-0": {
    "_link": "/jobs/serviceMonitor%2Fopentelemetry%2Fsm-example%2F0/targets?collector_id=otelcol-collector-0",
    "targets": [
      {
        "targets": ["10.244.0.11:8080"],
        "labels": {
          "__meta_kubernetes_endpointslice_port_name": "prom",
          "__meta_kubernetes_pod_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_endpointslice_port_protocol": "TCP",
          "__meta_kubernetes_endpointslice_address_target_name": "py-prometheus-app-575cfdd46-nfttj",
          "__meta_kubernetes_endpointslice_annotation_endpoints_kubernetes_io_last_change_trigger_time": "2024-06-21T20:01:37Z",
          "__meta_kubernetes_endpointslice_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_pod_name": "py-prometheus-app-575cfdd46-nfttj",
          "__meta_kubernetes_pod_controller_name": "py-prometheus-app-575cfdd46",
          "__meta_kubernetes_pod_label_app_kubernetes_io_name": "py-prometheus-app",
          "__meta_kubernetes_endpointslice_address_target_kind": "Pod",
          "__meta_kubernetes_pod_node_name": "otel-target-allocator-talk-control-plane",
          "__meta_kubernetes_pod_labelpresent_pod_template_hash": "true",
          "__meta_kubernetes_endpointslice_label_kubernetes_io_service_name": "py-prometheus-app",
          "__meta_kubernetes_endpointslice_annotationpresent_endpoints_kubernetes_io_last_change_trigger_time": "true",
          "__meta_kubernetes_service_name": "py-prometheus-app",
          "__meta_kubernetes_pod_ready": "true",
          "__meta_kubernetes_pod_labelpresent_app": "true",
          "__meta_kubernetes_pod_controller_kind": "ReplicaSet",
          "__meta_kubernetes_endpointslice_labelpresent_app": "true",
          "__meta_kubernetes_pod_container_image": "otel-target-allocator-talk:0.1.0-py-prometheus-app",
          "__address__": "10.244.0.11:8080",
          "__meta_kubernetes_service_label_app_kubernetes_io_name": "py-prometheus-app",
          "__meta_kubernetes_pod_uid": "495d47ee-9a0e-49df-9b41-fe9e6f70090b",
          "__meta_kubernetes_endpointslice_port": "8080",
          "__meta_kubernetes_endpointslice_label_endpointslice_kubernetes_io_managed_by": "endpointslice-controller.k8s.io",
          "__meta_kubernetes_endpointslice_label_app": "my-app",
          "__meta_kubernetes_service_labelpresent_app_kubernetes_io_name": "true",
          "__meta_kubernetes_pod_host_ip": "172.24.0.2",
          "__meta_kubernetes_namespace": "opentelemetry",
          "__meta_kubernetes_endpointslice_endpoint_conditions_serving": "true",
          "__meta_kubernetes_endpointslice_labelpresent_kubernetes_io_service_name": "true",
          "__meta_kubernetes_endpointslice_endpoint_conditions_ready": "true",
          "__meta_kubernetes_service_annotation_kubectl_kubernetes_io_last_applied_configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"my-app\",\"app.kubernetes.io/name\":\"py-prometheus-app\"},\"name\":\"py-prometheus-app\",\"namespace\":\"opentelemetry\"},\"spec\":{\"ports\":[{\"name\":\"prom\",\"port\":8080}],\"selector\":{\"app\":\"my-app\",\"app.kubernetes.io/name\":\"py-prometheus-app\"}}}",
          "__meta_kubernetes_endpointslice_endpoint_conditions_terminating": "false",
          "__meta_kubernetes_pod_container_port_protocol": "TCP",
          "__meta_kubernetes_pod_phase": "Running",
          "__meta_kubernetes_pod_container_name": "my-app",
          "__meta_kubernetes_pod_container_port_name": "prom",
          "__meta_kubernetes_pod_ip": "10.244.0.11",
          "__meta_kubernetes_service_annotationpresent_kubectl_kubernetes_io_last_applied_configuration": "true",
          "__meta_kubernetes_service_labelpresent_app": "true",
          "__meta_kubernetes_endpointslice_address_type": "IPv4",
          "__meta_kubernetes_service_label_app": "my-app",
          "__meta_kubernetes_pod_label_app": "my-app",
          "__meta_kubernetes_pod_container_port_number": "8080",
          "__meta_kubernetes_endpointslice_name": "py-prometheus-app-bwbvn",
          "__meta_kubernetes_pod_label_pod_template_hash": "575cfdd46",
          "__meta_kubernetes_endpointslice_endpoint_node_name": "otel-target-allocator-talk-control-plane",
          "__meta_kubernetes_endpointslice_labelpresent_endpointslice_kubernetes_io_managed_by": "true",
          "__meta_kubernetes_endpointslice_label_app_kubernetes_io_name": "py-prometheus-app"
        }
      }
    ]
  }
}

----------------------------------------

TITLE: Setting OpenTelemetry Baggage for Synthetic Requests
DESCRIPTION: Configures OpenTelemetry baggage to mark traces as synthetically generated by setting a baggage item and attaching it to the context.

LANGUAGE: python
CODE:
ctx = baggage.set_baggage("synthetic_request", "true")
context.attach(ctx)

----------------------------------------

TITLE: Installing OpenLIT Python Library
DESCRIPTION: Shell command to install the OpenLIT Python library using pip, which is used for auto-instrumentation of LLM-based applications.

LANGUAGE: shell
CODE:
pip install openlit

----------------------------------------

TITLE: Configuring Kubeletstats Receiver
DESCRIPTION: Example configuration for the Kubeletstats Receiver, which collects metrics about nodes and workloads running on nodes from the Kubelet API server.

LANGUAGE: yaml
CODE:
receivers:
  kubeletstats:
    collection_interval: 10s
    auth_type: 'serviceAccount'
    endpoint: '${env:K8S_NODE_NAME}:10250'
    insecure_skip_verify: true
    metric_groups:
      - node
      - pod
      - container

----------------------------------------

TITLE: Viewing Kubernetes Events for Auto-instrumentation Troubleshooting
DESCRIPTION: This command displays events in a specified namespace, which can help identify issues with auto-instrumentation initialization or configuration.

LANGUAGE: shell
CODE:
kubectl get events -n <namespace>

----------------------------------------

TITLE: Configuring OpenTelemetry Dependencies in Mix
DESCRIPTION: Defines required OpenTelemetry dependencies for a Phoenix application including SDK, API, and various exporters.

LANGUAGE: elixir
CODE:
def deps do
  [
    {:opentelemetry, "~> {{% param versions.otelSdk %}}"}, 
    {:opentelemetry_api, "~> {{% param versions.otelApi %}}"}, 
    {:opentelemetry_exporter, "~> {{% param versions.otelExporter %}}"}, 
    {:opentelemetry_phoenix, "~> {{% param versions.otelPhoenix %}}"}, 
    {:opentelemetry_cowboy, "~> {{% param versions.otelCowboy %}}"}, 
    {:opentelemetry_ecto, "~> {{% param versions.otelEcto %}}"}  # if using ecto
  ]
end

----------------------------------------

TITLE: Implementing Custom LogRecordProcessor in Java
DESCRIPTION: Example of implementing a custom LogRecordProcessor that adds a custom attribute to log records.

LANGUAGE: Java
CODE:
public class CustomLogRecordProcessor implements LogRecordProcessor {

  @Override
  public void onEmit(Context context, ReadWriteLogRecord logRecord) {
    logRecord.setAttribute(AttributeKey.stringKey("my.custom.attribute"), "hello world");
  }

  @Override
  public CompletableResultCode shutdown() {
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode forceFlush() {
    return CompletableResultCode.ofSuccess();
  }
}

----------------------------------------

TITLE: Configuring Skipped Instrumentations in Project File
DESCRIPTION: XML configuration in .csproj file to specify which instrumentations should be skipped during build.

LANGUAGE: csproj
CODE:
<PropertyGroup>
   <SkippedInstrumentations>MongoDB.Driver.Core;StackExchange.Redis</SkippedInstrumentations>
</PropertyGroup>

----------------------------------------

TITLE: OpenTelemetry Migration Bridge Links
DESCRIPTION: Links to OpenTelemetry backward compatibility bridges for different programming languages that allow smooth interoperation between OpenCensus and OpenTelemetry instrumentation.

LANGUAGE: markdown
CODE:
[go shim]: https://github.com/open-telemetry/opentelemetry-go/tree/main/bridge/opencensus
[java shim]: https://github.com/open-telemetry/opentelemetry-java/tree/main/opencensus-shim
[python shim]: https://github.com/open-telemetry/opentelemetry-python/tree/main/shim/opentelemetry-opencensus-shim
[js shim]: https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/shim-opencensus

----------------------------------------

TITLE: TLS and Ingress Configuration
DESCRIPTION: Configuration for cert-manager ClusterIssuer and Ingress setup with TLS certificates.

LANGUAGE: yaml
CODE:
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
  namespace: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-email-address-here@example.com # REPLACE
    privateKeySecretRef:
      name: letsencrypt
    solvers:
      - http01:
          ingress:
            class: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-otel
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    cert-manager.io/cluster-issuer: letsencrypt
spec:
  tls:
    - hosts:
        - your-host # REPLACE
      secretName: letsencrypt
  rules:
    - host: your-host # REPLACE
      http:
        paths:
          - pathType: Prefix
            path: '/'
            backend:
              service:
                name: otel-collector-app-collector
                port:
                  number: 4317

----------------------------------------

TITLE: Configuring OpenTelemetry Collector
DESCRIPTION: YAML configuration for the OpenTelemetry Collector, setting up receivers, exporters, and service pipelines.

LANGUAGE: yaml
CODE:
receivers:
  prometheus/own_metrics:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 10s
          static_configs:
            - targets: [0.0.0.0:8888]
  hostmetrics:
    collection_interval: 10s
    scrapers:
      load:
      filesystem:
      memory:
      network:

exporters:
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
  debug:
    verbosity: detailed

service:
  pipelines:
    metrics:
      receivers: [hostmetrics, prometheus/own_metrics]
      exporters: [debug]

----------------------------------------

TITLE: Docker Compose Setup for Observability Stack
DESCRIPTION: Docker Compose configuration that sets up Jaeger and OpenTelemetry Collector containers for trace collection and visualization.

LANGUAGE: yaml
CODE:
services:
  jaeger:
    healthcheck:
      test:
        - CMD
        - wget
        - --spider
        - localhost:16686
      timeout: 3s
      interval: 1s
      retries: 60
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 16686:16686
  otel-collector:
    command:
      - --config
      - /otel-local-config.yaml
    depends_on:
      jaeger:
        condition: service_started
    image: otel/opentelemetry-collector:0.54.0
    ports:
      - 4317:4317
    volumes:
      - ./otel-collector.yaml:/otel-local-config.yaml

----------------------------------------

TITLE: Initializing Browser Instrumentation in Next.js
DESCRIPTION: Code snippet showing how to initialize OpenTelemetry tracer in a Next.js application's _app.tsx file for browser-side instrumentation.

LANGUAGE: typescript
CODE:
import FrontendTracer from '../utils/telemetry/FrontendTracer';

if (typeof window !== 'undefined') FrontendTracer();

----------------------------------------

TITLE: Installing OpenTelemetry Core Packages in Python
DESCRIPTION: Basic installation of OpenTelemetry API and SDK packages using pip package manager. These are the core packages required for implementing OpenTelemetry in Python applications.

LANGUAGE: shell
CODE:
pip install opentelemetry-api
pip install opentelemetry-sdk

----------------------------------------

TITLE: Installing OpenTelemetry Core Packages in Python
DESCRIPTION: Basic installation of OpenTelemetry API and SDK packages using pip package manager. These are the core packages required for implementing OpenTelemetry in Python applications.

LANGUAGE: shell
CODE:
pip install opentelemetry-api
pip install opentelemetry-sdk

----------------------------------------

TITLE: Configuring Node.js Required Modules in package.json
DESCRIPTION: Package.json script configuration to load OpenTelemetry instrumentation module on application startup using the Node.js --require flag.

LANGUAGE: json
CODE:
"scripts": {
  "start": "node --require ./Instrumentation.js server.js",
}

----------------------------------------

TITLE: Customizing Span Labels with additional_attributes
DESCRIPTION: cURL command to create a route with the OpenTelemetry plugin enabled and custom span labels using additional_attributes. It adds route_id and a custom HTTP header as span attributes.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:9080/apisix/admin/routes/1001 \
  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \
  -X PUT -d '
{
    "uri": "/put",
    "plugins": {
        "opentelemetry": {
            "sampler": {
                "name": "always_on"
            },
            "additional_attributes":[
                "route_id",
                "http_x-custom-ot-key"
            ]
        }
    },
    "upstream": {
        "type": "roundrobin",
        "nodes": {
            "httpbin.org:80": 1
        }
    }
}'

----------------------------------------

TITLE: Blog Section Toggle JavaScript
DESCRIPTION: Client-side JavaScript that automatically expands blog sections for years 2024 and 2025 when the page loads, unless viewing paginated pages.

LANGUAGE: javascript
CODE:
document.addEventListener("DOMContentLoaded", function () {
    if (window.location.pathname.includes('/page/')) return;

    var checkbox = document.getElementById("m-blog2025-check");
    if (checkbox) checkbox.checked = true;
    checkbox = document.getElementById("m-blog2024-check");
    if (checkbox) checkbox.checked = true;
});

----------------------------------------

TITLE: Configuring Prometheus for Kafka Metrics
DESCRIPTION: YAML configuration for Prometheus to scrape metrics from the Kafka Broker exposed by OpenTelemetry Java Agent.

LANGUAGE: yaml
CODE:
global:
  scrape_interval: 10s
  evaluation_interval: 10s

scrape_configs:
  - job_name: my-kafka-broker
    scrape_interval: 5s
    static_configs:
      - targets: [host.docker.internal:9464]

----------------------------------------

TITLE: Docker Compose Setup for OpenTelemetry and Jaeger
DESCRIPTION: Docker Compose configuration that sets up the OpenTelemetry Collector and Jaeger all-in-one for trace collection and visualization.

LANGUAGE: yaml
CODE:
version: '3'
services:
  otel:
    image: otel/opentelemetry-collector-contrib:0.98.0
    command: ['--config=/conf/otel-collector-config.yaml']
    ports:
      - 4317:4317
      - 4318:4318
    volumes:
      - ./otel-collector-config.yaml:/conf/otel-collector-config.yaml
    links:
      - jaeger-all-in-one

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686'

----------------------------------------

TITLE: Configuring LogRecordExporters in Java
DESCRIPTION: Demonstrates configuration of OTLP HTTP, OTLP gRPC, system out, and OTLP JSON logging log record exporters.

LANGUAGE: Java
CODE:
public static LogRecordExporter otlpHttpLogRecordExporter(String endpoint) {
  return OtlpHttpLogRecordExporter.builder()
      .setEndpoint(endpoint)
      .addHeader("api-key", "value")
      .setTimeout(Duration.ofSeconds(10))
      .build();
}

public static LogRecordExporter otlpGrpcLogRecordExporter(String endpoint) {
  return OtlpGrpcLogRecordExporter.builder()
      .setEndpoint(endpoint)
      .addHeader("api-key", "value")
      .setTimeout(Duration.ofSeconds(10))
      .build();
}

public static LogRecordExporter systemOutLogRecordExporter() {
  return SystemOutLogRecordExporter.create();
}

public static LogRecordExporter otlpJsonLoggingLogRecordExporter() {
  return OtlpJsonLoggingLogRecordExporter.create();
}

----------------------------------------

TITLE: Installing OpenTelemetry .NET Automatic Instrumentation
DESCRIPTION: These commands execute the downloaded scripts to install OpenTelemetry .NET Automatic Instrumentation in the development environment. The Unix shell command runs a shell script, while the PowerShell commands import a module and install the core components.

LANGUAGE: sh
CODE:
./otel-dotnet-auto-install.sh

LANGUAGE: powershell
CODE:
Import-Module $download_path
Install-OpenTelemetryCore

----------------------------------------

TITLE: Building Spring Boot Native Image Application
DESCRIPTION: Maven command to build a Spring Boot native image application with a custom image name.

LANGUAGE: Shell
CODE:
mvn -Pnative spring-boot:build-image -Dspring-boot.build-image.imageName=spring-petclinic-native

----------------------------------------

TITLE: Adding Attributes to OpenTelemetry Spans
DESCRIPTION: Shows how to retrieve the active span and add custom attributes for payment amount tracking.

LANGUAGE: javascript
CODE:
const span = opentelemetry.trace.getActiveSpan();

LANGUAGE: javascript
CODE:
span.setAttributes({
  'app.payment.amount': parseFloat(`${amount.units}.${amount.nanos}`),
});

----------------------------------------

TITLE: Installing Telemetrygen Utility - Bash
DESCRIPTION: Go command to install the telemetrygen utility for generating sample telemetry data.

LANGUAGE: sh
CODE:
go install github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest

----------------------------------------

TITLE: Installing Telemetrygen Utility - Bash
DESCRIPTION: Go command to install the telemetrygen utility for generating sample telemetry data.

LANGUAGE: sh
CODE:
go install github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest

----------------------------------------

TITLE: Initializing Frontend Tracer with OpenTelemetry
DESCRIPTION: Sets up OpenTelemetry tracing for browser-side instrumentation with custom resource attributes, span processors, and web auto-instrumentations. Configures trace context propagation and OTLP exporter.

LANGUAGE: javascript
CODE:
const FrontendTracer = async () => {
  const { ZoneContextManager } = await import('@opentelemetry/context-zone');

  let resource = new Resource({
    [SEMRESATTRS_SERVICE_NAME]: NEXT_PUBLIC_OTEL_SERVICE_NAME,
  });
  const detectedResources = detectResourcesSync({
    detectors: [browserDetector],
  });
  resource = resource.merge(detectedResources);

  const provider = new WebTracerProvider({
    resource,
    spanProcessors: [
      new SessionIdProcessor(),
      new BatchSpanProcessor(
        new OTLPTraceExporter({
          url:
            NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||
            'http://localhost:4318/v1/traces',
        }),
        {
          scheduledDelayMillis: 500,
        },
      ),
    ],
  });

  const contextManager = new ZoneContextManager();

  provider.register({
    contextManager,
    propagator: new CompositePropagator({
      propagators: [
        new W3CBaggagePropagator(),
        new W3CTraceContextPropagator(),
      ],
    }),
  });

  registerInstrumentations({
    tracerProvider: provider,
    instrumentations: [
      getWebAutoInstrumentations({
        '@opentelemetry/instrumentation-fetch': {
          propagateTraceHeaderCorsUrls: /.*/,
          clearTimingResources: true,
          applyCustomAttributesOnSpan(span) {
            span.setAttribute('app.synthetic_request', IS_SYNTHETIC_REQUEST);
          },
        },
      }),
    ],
  });
};

----------------------------------------

TITLE: Extended Log Format (ELF) with JSON Example
DESCRIPTION: Example of a mixed format log combining Extended Log Format with embedded JSON data.

LANGUAGE: text
CODE:
192.168.1.1 - johndoe [04/Aug/2024:12:34:56 -0400] "POST /api/v1/login HTTP/1.1" 200 1234 "http://example.com" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36" {"transactionId": "abcd-efgh-ijkl-mnop", "responseTime": 150, "requestBody": {"username": "johndoe"}, "responseHeaders": {"Content-Type": "application/json"}}

----------------------------------------

TITLE: Custom OpenTelemetry Collector Configuration with AWS X-Ray
DESCRIPTION: Sample custom configuration file showing OTLP receiver setup with AWS X-Ray and debug exporters. Includes separate pipeline configurations for traces and metrics.

LANGUAGE: yaml
CODE:
#collector.yaml in the root directory
#Set an environment variable 'OPENTELEMETRY_COLLECTOR_CONFIG_URI' to '/var/task/collector.yaml'

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 'localhost:4317'
      http:
        endpoint: 'localhost:4318'

exporters:
  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
  debug:
  awsxray:

service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [awsxray]
    metrics:
      receivers: [otlp]
      exporters: [debug]
  telemetry:
    metrics:
      address: localhost:8888

----------------------------------------

TITLE: Adding Custom Dictionary Entries in YAML Comments
DESCRIPTION: Shows how to add custom dictionary entries as comments in a YAML file for registry entries.

LANGUAGE: yaml
CODE:
# cSpell:ignore <word>
title: registryEntryTitle

----------------------------------------

TITLE: Running Docker Compose for otelsql Example
DESCRIPTION: Commands to clone the otelsql repository, checkout a specific version, and run the Docker Compose example.

LANGUAGE: sh
CODE:
git clone https://github.com/XSAM/otelsql.git
git checkout tags/v0.29.0
cd example/otel-collector
docker compose up -d
docker compose logs client

----------------------------------------

TITLE: Implementing Custom LogRecordExporter in Java
DESCRIPTION: Example of implementing a custom LogRecordExporter that logs exported log records.

LANGUAGE: Java
CODE:
public class CustomLogRecordExporter implements LogRecordExporter {

  private static final Logger logger = Logger.getLogger(CustomLogRecordExporter.class.getName());

  @Override
  public CompletableResultCode export(Collection<LogRecordData> logs) {
    System.out.println("Exporting logs");
    logs.forEach(log -> System.out.println("log record: " + log));
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode flush() {
    logger.log(Level.INFO, "flushing");
    return CompletableResultCode.ofSuccess();
  }

  @Override
  public CompletableResultCode shutdown() {
    logger.log(Level.INFO, "shutting down");
    return CompletableResultCode.ofSuccess();
  }
}

----------------------------------------

TITLE: WebClient Bean Configuration
DESCRIPTION: Spring configuration class demonstrating WebClient bean creation for OpenTelemetry instrumentation.

LANGUAGE: java
CODE:
package otel;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
public class WebClientConfig {

  @Bean
  public WebClient webClient() {
    return WebClient.create();
  }
}

----------------------------------------

TITLE: Semistructured Log Example
DESCRIPTION: Example of a semistructured log with key-value pairs and quoted strings.

LANGUAGE: text
CODE:
2024-08-04T12:45:23Z level=ERROR service=user-authentication userId=12345 action=login message="Failed login attempt" error="Invalid password" ipAddress=192.168.1.1 userAgent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"

----------------------------------------

TITLE: Creating and Using a Histogram in OpenTelemetry Java
DESCRIPTION: This snippet demonstrates how to create a meter, build a histogram instrument, and record a measurement with attributes using the OpenTelemetry Java API.

LANGUAGE: java
CODE:
OpenTelemetry openTelemetry = // declare OpenTelemetry instance
Meter meter = openTelemetry.getMeter("my-meter-scope");
DoubleHistogram histogram =
    meter
        .histogramBuilder("my-histogram")
        .setDescription("The description")
        .setUnit("ms")
        .build();
histogram.record(10.2, Attributes.builder().put("key", "value").build());

----------------------------------------

TITLE: Configuring OpenTelemetry Dependencies in Erlang
DESCRIPTION: Specifies the required OpenTelemetry dependencies for an Erlang project's rebar.config file.

LANGUAGE: erlang
CODE:
{deps, [{opentelemetry_api, "~> {{% param versions.otelApi %}}"},
        {opentelemetry, "~> {{% param versions.otelSdk %}}"}
]}.

----------------------------------------

TITLE: Creating Zipkin Trace JSON Payload
DESCRIPTION: Example JSON payload for generating a Zipkin trace to test the Collector's debug exporter.

LANGUAGE: json
CODE:
[
  {
    "traceId": "5982fe77008310cc80f1da5e10147519",
    "parentId": "90394f6bcffb5d13",
    "id": "67fae42571535f60",
    "kind": "SERVER",
    "name": "/m/n/2.6.1",
    "timestamp": 1516781775726000,
    "duration": 26000,
    "localEndpoint": {
      "serviceName": "api"
    },
    "remoteEndpoint": {
      "serviceName": "apip"
    },
    "tags": {
      "data.http_response_code": "201"
    }
  }
]

----------------------------------------

TITLE: Creating OpenTelemetry Meters and Instruments
DESCRIPTION: Shows how to create meters and counter instruments for tracking payment transactions.

LANGUAGE: javascript
CODE:
const { metrics } = require('@opentelemetry/api-metrics');

const meter = metrics.getMeter('payment');
const transactionsCounter = meter.createCounter('app.payment.transactions');

----------------------------------------

TITLE: Adding Golang Runtime Auto-Instrumentation in Go with OpenTelemetry
DESCRIPTION: This code snippet shows how to enable automatic instrumentation for Golang runtime metrics using OpenTelemetry. It starts the runtime metrics collection with a minimum interval of one second.

LANGUAGE: go
CODE:
err := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    log.Fatal(err)
}

----------------------------------------

TITLE: Adding Golang Runtime Auto-Instrumentation in Go with OpenTelemetry
DESCRIPTION: This code snippet shows how to enable automatic instrumentation for Golang runtime metrics using OpenTelemetry. It starts the runtime metrics collection with a minimum interval of one second.

LANGUAGE: go
CODE:
err := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))
if err != nil {
    log.Fatal(err)
}

----------------------------------------

TITLE: Running API Observability Testing
DESCRIPTION: Commands to enable and run API observability-driven testing using Make or Docker Compose.

LANGUAGE: shell
CODE:
make run-tracetesting

LANGUAGE: shell
CODE:
docker compose -f docker-compose-tests.yml run traceBasedTests

----------------------------------------

TITLE: Generating Netlify Redirect Rule from Hugo Template
DESCRIPTION: This Hugo template snippet generates a Netlify redirect rule for pages with a 'redirect' parameter. It formats the output with the page's relative permalink and the specified redirect URL.

LANGUAGE: hugo
CODE:
{{/* Generate a Netlify redirect rule for pages with a `redirect` param */ -}}

{{ $p := . -}}
{{ with $p.Params.redirect -}}
  {{ $p.RelPermalink | printf "%-35s" }} {{ . }}
{{ end -}}

----------------------------------------

TITLE: Configuring OpenTelemetry BOM in Gradle using Native Support
DESCRIPTION: Configuration for importing OpenTelemetry BOM in Gradle using native BOM support with the dependencies block.

LANGUAGE: kotlin
CODE:
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
  id("java")
  id("org.springframework.boot") version "3.2.O"
}

dependencies {
  implementation(platform(SpringBootPlugin.BOM_COORDINATES))
  implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:{{% param vers.instrumentation %}}")
}

----------------------------------------

TITLE: Defining Custom JMX Metrics in YAML
DESCRIPTION: Example YAML configuration for defining custom JMX metrics to be collected by the OpenTelemetry Java Agent.

LANGUAGE: yaml
CODE:
---
rules:
  - bean: kafka.server:type=BrokerTopicMetrics,name=MessagesInPerSec
    mapping:
      Count:
        metric: kafka.message.count
        type: counter
        desc: The number of messages received by the broker
        unit: '{messages}'

----------------------------------------

TITLE: Configuring TelemetryHttpModule in Web.Config
DESCRIPTION: XML configuration for adding the required TelemetryHttpModule to the ASP.NET application's Web.Config file.

LANGUAGE: xml
CODE:
<system.webServer>
    <modules>
        <add
            name="TelemetryHttpModule"
            type="OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule,
                OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule"
            preCondition="integratedMode,managedHandler" />
    </modules>
</system.webServer>

----------------------------------------

TITLE: Configuring OpenTelemetry BOM in Gradle using Spring Dependency Management
DESCRIPTION: Configuration for importing OpenTelemetry BOM in Gradle using the Spring dependency management plugin.

LANGUAGE: kotlin
CODE:
plugins {
  id("java")
  id("org.springframework.boot") version "3.2.O"
  id("io.spring.dependency-management") version "1.1.0"
}

dependencyManagement {
  imports {
    mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:{{% param vers.instrumentation %}")
  }
}

----------------------------------------

TITLE: Starting OpenTelemetry Collector with Docker
DESCRIPTION: Docker command to run the OpenTelemetry Collector with a custom configuration file.

LANGUAGE: sh
CODE:
docker run -it --rm -p 4317:4317 -p 4318:4318 \
  -v $(pwd)/otel-collector-config.yaml:/etc/otelcol-config.yml \
  --name otelcol \
  otel/opentelemetry-collector-contrib:0.76.1 \
  "--config=/etc/otelcol-config.yml"

----------------------------------------

TITLE: Using OpenTelemetry Baggage for Synthetic Request Detection
DESCRIPTION: Implements baggage checking to identify and handle synthetic requests differently from real payment transactions.

LANGUAGE: javascript
CODE:
// check baggage for synthetic_request=true, and add charged attribute accordingly
const baggage = propagation.getBaggage(context.active());
if (
  baggage &&
  baggage.getEntry('synthetic_request') &&
  baggage.getEntry('synthetic_request').value == 'true'
) {
  span.setAttribute('app.payment.charged', false);
} else {
  span.setAttribute('app.payment.charged', true);
}

----------------------------------------

TITLE: Configuring OTel-Arrow Receiver in OpenTelemetry Collector
DESCRIPTION: Example YAML configuration for setting up the OTel-Arrow receiver in the OpenTelemetry Collector. It includes settings for gRPC protocols, Arrow memory limits, and admission control.

LANGUAGE: yaml
CODE:
receivers:
  otelarrow:
    protocols:
      grpc:
        max_recv_msg_size_mib: 16
      arrow:
        memory_limit_mib: 128
    admission:
      request_limit_mib: 128

----------------------------------------

TITLE: Implementing Child Span with Greetings in OpenTelemetry
DESCRIPTION: Example of a child span showing the greetings operation. Contains parent ID linking to root span and multiple events. Demonstrates span hierarchy and event timing.

LANGUAGE: json
CODE:
{
  "name": "hello-greetings",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "5fb397be34d26b51"
  },
  "parent_id": "051581bf3cb55c13",
  "start_time": "2022-04-29T18:52:58.114304Z",
  "end_time": "2022-04-29T22:52:58.114561Z",
  "attributes": {
    "http.route": "some_route2"
  },
  "events": [
    {
      "name": "hey there!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    },
    {
      "name": "bye now!",
      "timestamp": "2022-04-29T18:52:58.114585Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}

----------------------------------------

TITLE: Installing OpenTelemetry Demo Chart
DESCRIPTION: Command to install the OpenTelemetry Demo chart with a specific release name.

LANGUAGE: shell
CODE:
helm install my-otel-demo open-telemetry/opentelemetry-demo

----------------------------------------

TITLE: Advanced Runtime Configuration
DESCRIPTION: Complete runtime configuration including batch processor and Zipkin exporter

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
      http:
processors:
  batch:
    send_batch_max_size: 200
    send_batch_size: 200
exporters:
  otlp:
  logging:
  zipkin:
    endpoint: http://my-zipkin-service:9411/api/v2/spans
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, logging, zipkin]

----------------------------------------

TITLE: Injecting a Tracer in ASP.NET Core
DESCRIPTION: Example of injecting a Tracer instance during ASP.NET Core setup and using it in an endpoint.

LANGUAGE: csharp
CODE:
using OpenTelemetry.Trace;

var builder = WebApplication.CreateBuilder(args);

// ...

builder.Services.AddSingleton(TracerProvider.Default.GetTracer(serviceName));

// ...

var app = builder.Build();

// ...

app.MapGet("/hello", (Tracer tracer) =>
{
    using var span = tracer.StartActiveSpan("hello-span");

    // do stuff
});

----------------------------------------

TITLE: Adding OpenTelemetry Spring Boot Starter Dependency
DESCRIPTION: Maven and Gradle configurations for adding the OpenTelemetry Spring Boot starter dependency to enable autoconfiguration.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-spring-boot-starter</artifactId>
</dependency>

LANGUAGE: kotlin
CODE:
implementation("io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter")

----------------------------------------

TITLE: Adding GoMod Component to OpenTelemetry Collector Manifest
DESCRIPTION: YAML configuration snippet demonstrating how to add a Go module component to an OpenTelemetry Collector manifest file. Uses template variables for type, name, and version to allow for flexible component configuration.

LANGUAGE: yaml
CODE:
{{ .type | pluralize }}:
    - gomod:
        {{ .name }} {{ .version }}

----------------------------------------

TITLE: Hugo Template Variables and Documentation Structure
DESCRIPTION: Template definition that sets up variables and renders a documentation page for OpenTelemetry language implementations. It includes status information for traces, metrics, and logs components, and incorporates release information.

LANGUAGE: hugo
CODE:
{{ $prettier_ignore := `

<!-- prettier-ignore -->
` -}}
{{ $lang := .Get 0 -}}
{{ $data := index $.Site.Data.instrumentation $lang }}
{{ $name := $data.name -}}

{{ $tracesStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "traces") -}}
{{ $metricsStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "metrics") -}}
{{ $logsStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "logs") -}}

----------------------------------------

TITLE: SSL Certificate Check Script
DESCRIPTION: Bash script that checks SSL certificate expiration time and outputs the remaining seconds until expiration.

LANGUAGE: shell
CODE:
#!/bin/bash
HOST=${1}
PORT=${2:-443}

now=$(date +%s)
notAfterString=$(echo q | openssl s_client -servername "${HOST}" "${HOST}:${PORT}" 2>/dev/null | openssl x509 -noout -enddate | awk -F"=" '{ print $2; }')
if [[ "$(uname)" == "Darwin" ]] ; then
  notAfter=$(date -j -f "%b %d %H:%M:%S %Y %Z" "${notAfterString}" +%s)
else
  notAfter=$(date -d "${notAfterString}" +%s)
fi

secondsLeft=$(($notAfter-$now))

echo ${secondsLeft}

----------------------------------------

TITLE: Adding Events to a Span in PHP with OpenTelemetry
DESCRIPTION: Shows how to add events to a span in PHP using the addEvent method. Examples include adding events with and without additional attributes.

LANGUAGE: php
CODE:
$span->addEvent('Received get quote request, processing it');

LANGUAGE: php
CODE:
$span->addEvent('Quote processed, response sent back', [
    'app.quote.cost.total' => $payload
]);

----------------------------------------

TITLE: Initializing OpenTelemetry SDK and Required Libraries in Ruby
DESCRIPTION: This snippet shows how to require the necessary OpenTelemetry gems and configure the SDK with auto-instrumentation for Sinatra.

LANGUAGE: ruby
CODE:
require "opentelemetry/sdk"
require "opentelemetry/exporter/otlp"
require "opentelemetry/instrumentation/sinatra"

LANGUAGE: ruby
CODE:
OpenTelemetry::SDK.configure do |c|
  c.use "OpenTelemetry::Instrumentation::Sinatra"
end

----------------------------------------

TITLE: Configuring OTTL Statements with Advanced Context Inference in YAML
DESCRIPTION: This snippet shows the advanced configuration style with context inference, which provides more control over statement configurations while still benefiting from automatic context selection.

LANGUAGE: yaml
CODE:
metric_statements:
  - conditions:
      - resource.attributes["service.name"] == "my.service"
    statements:
      - set(metric.description, "counter") where datapoint.attributes["my.attr"] == "some"

----------------------------------------

TITLE: Displaying Component Status Table in Markdown
DESCRIPTION: Creates a markdown table showing the status of Traces, Metrics, and Logs components for a specific OpenTelemetry implementation. Uses placeholders for dynamic content.

LANGUAGE: markdown
CODE:
| Traces              | Metrics              | Logs              |
| ------------------- | -------------------- | ----------------- |
| {{ $tracesStatus }} | {{ $metricsStatus }} | {{ $logsStatus }} |

----------------------------------------

TITLE: Configuring Kubernetes Attributes Processor
DESCRIPTION: Example configuration for the Kubernetes Attributes Processor, which adds Kubernetes metadata to incoming telemetry. It extracts metadata from pods and namespaces, and configures how to associate data with pods.

LANGUAGE: yaml
CODE:
k8sattributes:
  auth_type: 'serviceAccount'
  extract:
    metadata: # extracted from pod
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.pod.start_time
      - k8s.pod.uid
      - k8s.deployment.name
      - k8s.node.name
    annotations:
      # Extract value of pod annotation with key 'annotation-one' and insert as resource attribute with key 'a1'
      - tag_name: a1
        key: annotation-one
        from: pod
      # Extract value of namespace annotation with key 'annotation-two' using regex and insert as resource with key 'a2'
      - tag_name: a2
        key: annotation-two
        regex: field=(?P<value>.+)
        from: namespace
    labels:
      # Extract value of namespace label with key 'label1' and insert as resource attribute with key 'l1'
      - tag_name: l1
        key: label1
        from: namespace
      # Extract value of pod label with key 'label2' using regex and insert as resource attribute with key 'l2'
      - tag_name: l2
        key: label2
        regex: field=(?P<value>.+)
        from: pod
  pod_association: # How to associate data with a pod (order matters)
    - sources: # First try to use value of resource attribute k8s.pod.ip
        - from: resource_attribute
          name: k8s.pod.ip
    - sources: # Then try to use value of resource attribute k8s.pod.uid
        - from: resource_attribute
          name: k8s.pod.uid
    - sources: # If none of those work, use connection of request to get pod IP
        - from: connection

----------------------------------------

TITLE: Setting Vendor Credentials for OpenTelemetry Exporter
DESCRIPTION: This snippet demonstrates how to set vendor-specific credentials (in this case, for Aspecto) when configuring an OTLP exporter in an OpenTelemetry Node.js application.

LANGUAGE: javascript
CODE:
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';
// Create TracerProvider
const exporter = new OTLPTraceExporter({
  url: 'https://otelcol.aspecto.io/v1/trace',
  headers: {
    Authorization: 'YOUR_API_KEY_HERE',
  },
});
provider.addSpanProcessor(new BatchSpanProcessor(exporter));

----------------------------------------

TITLE: Initializing Metrics in Python
DESCRIPTION: This snippet initializes the OpenTelemetry SDK for metrics by creating a meter provider and getting a meter.

LANGUAGE: python
CODE:
meter = metrics.get_meter_provider().get_meter("recommendation")

----------------------------------------

TITLE: Creating Nested Spans in .NET
DESCRIPTION: Demonstrates how to create nested spans to represent parent-child relationships in traced operations.

LANGUAGE: csharp
CODE:
public static void ParentOperation(Tracer tracer)
{
    using var parentSpan = tracer.StartActiveSpan("parent-span");

    // Do some work tracked by parentSpan

    ChildOperation(tracer);

    // Finish up work tracked by parentSpan again
}

public static void ChildOperation(Tracer tracer)
{
    using var childSpan = tracer.StartActiveSpan("child-span");

    // Track work in ChildOperation with childSpan
}

----------------------------------------

TITLE: Configuring WebSphere Liberty Profile with OpenTelemetry Java agent
DESCRIPTION: This snippet shows how to add the OpenTelemetry Java agent to the jvm.options file for WebSphere Liberty Profile.

LANGUAGE: ini
CODE:
-javaagent:/path/to/opentelemetry-javaagent.jar

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for Logs
DESCRIPTION: YAML configuration for setting up an OpenTelemetry collector to receive logs via OTLP and export them to a local file

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:

exporters:
  file:
    path: ./app42_example.log
    rotation:

service:
  pipelines:
    logs/dev:
      receivers: [otlp]
      processors: [batch]
      exporters: [file]

----------------------------------------

TITLE: Initializing OpenTelemetry Tracing in Rust
DESCRIPTION: This snippet shows how to initialize the OpenTelemetry SDK for tracing in Rust. It sets up various resource detectors and configures the OTLP exporter.

LANGUAGE: rust
CODE:
fn init_tracer() -> Result<sdktrace::Tracer, TraceError> {
    global::set_text_map_propagator(TraceContextPropagator::new());
    let os_resource = OsResourceDetector.detect(Duration::from_secs(0));
    let process_resource = ProcessResourceDetector.detect(Duration::from_secs(0));
    let sdk_resource = SdkProvidedResourceDetector.detect(Duration::from_secs(0));
    let env_resource = EnvResourceDetector::new().detect(Duration::from_secs(0));
    let telemetry_resource = TelemetryResourceDetector.detect(Duration::from_secs(0));
    opentelemetry_otlp::new_pipeline()
        .tracing()
        .with_exporter(
            opentelemetry_otlp::new_exporter()
                .tonic()
                .with_endpoint(format!(
                    "{}{}",
                    env::var("OTEL_EXPORTER_OTLP_TRACES_ENDPOINT")
                        .unwrap_or_else(|_| "http://otelcol:4317".to_string()),
                    "/v1/traces"
                )), // TODO: assume this ^ is true from config when opentelemetry crate > v0.17.0
                    // https://github.com/open-telemetry/opentelemetry-rust/pull/806 includes the environment variable.
        )
        .with_trace_config(
            sdktrace::config()
                .with_resource(os_resource.merge(&process_resource).merge(&sdk_resource).merge(&env_resource).merge(&telemetry_resource)),
        )
        .install_batch(opentelemetry::runtime::Tokio)
}

----------------------------------------

TITLE: Configuring Launch Settings in JSON
DESCRIPTION: This JSON configuration sets up the launch settings for the ASP.NET Core application. It specifies the HTTP profile, sets the application URL to http://localhost:8080, and configures environment variables.

LANGUAGE: json
CODE:
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:8080",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

----------------------------------------

TITLE: Configuring OTTL Statements with Basic Context Inference in YAML
DESCRIPTION: This snippet demonstrates the new basic configuration style using context inference, which allows for a flatter and simpler statement list without explicit context specifications.

LANGUAGE: yaml
CODE:
metric_statements:
  - keep_keys(resource.attributes, ["host.name"])
  - set(metric.description, "Sum") where metric.type == "Sum"
  - convert_sum_to_gauge() where metric.name == "system.processes.count"
  - limit(datapoint.attributes, 100, ["host.name"])

----------------------------------------

TITLE: Configuring YAML Front Matter for API Documentation Redirect
DESCRIPTION: YAML front matter configuration that sets up page metadata and redirects to the OpenTelemetry API references section. Includes settings for link behavior, build parameters, and URL aliases.

LANGUAGE: yaml
CODE:
title: API references
linkTitle: API
redirect: /docs/languages/#api-references
manualLinkTarget: _blank
_build: { render: link }
aliases: [api-docs]

----------------------------------------

TITLE: Configuring OpenTelemetry Module for NGINX
DESCRIPTION: NGINX configuration file for the OpenTelemetry module, specifying exporter settings and service information.

LANGUAGE: nginx
CODE:
NginxModuleEnabled ON;
NginxModuleOtelSpanExporter otlp;
NginxModuleOtelExporterEndpoint localhost:4317;
NginxModuleServiceName DemoService;
NginxModuleServiceNamespace DemoServiceNamespace;
NginxModuleServiceInstanceId DemoInstanceId;
NginxModuleResolveBackends ON;
NginxModuleTraceAsError ON;

----------------------------------------

TITLE: Building OpenTelemetry Module with Docker
DESCRIPTION: Commands to clone the repository and build the OpenTelemetry module using Docker on CentOS 7.

LANGUAGE: sh
CODE:
git clone https://github.com/open-telemetry/opentelemetry-cpp-contrib
cd  instrumentation/otel-webserver-module
docker compose --profile centos7 build

----------------------------------------

TITLE: Basic Auth Header Example
DESCRIPTION: Example showing the format of HTTP Basic Authentication header with base64 encoded credentials.

LANGUAGE: yaml
CODE:
# HTTP Header key: value pair
Authorization: Basic <credentials-base64-encoded>

# example: user: user-1 password: 1234
Authorization: Basic dXNlci0xOjEyMzQK

----------------------------------------

TITLE: Running OpenTelemetry Collector Docker Container
DESCRIPTION: Docker command to run the OpenTelemetry Collector with a mounted configuration file

LANGUAGE: sh
CODE:
docker run -p 4317:4317 \
    -v /tmp/otel-collector-config.yaml:/etc/otel-collector-config.yaml \
    otel/opentelemetry-collector:latest \
    --config=/etc/otel-collector-config.yaml

----------------------------------------

TITLE: Defining ServiceMonitor in Kubernetes YAML
DESCRIPTION: Example YAML configuration for a ServiceMonitor resource in Kubernetes, specifying the metrics endpoints to be scraped.

LANGUAGE: yaml
CODE:
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sm-example
  namespace: opentelemetry
  labels:
    app.kubernetes.io/name: py-prometheus-app
    release: prometheus
spec:
  selector:
    matchLabels:
      app: my-app
  namespaceSelector:
    matchNames:
      - opentelemetry
  endpoints:
    - port: prom
      path: /metrics
    - port: py-client-port
      interval: 15s
    - port: py-server-port

----------------------------------------

TITLE: Initializing YAML Front Matter for OpenTelemetry Blog Post
DESCRIPTION: Sets up the YAML front matter for an OpenTelemetry blog post, including title, date, authors, and other metadata. This structure is crucial for proper rendering and categorization of the blog post.

LANGUAGE: yaml
CODE:
---
title: {{ replaceRE "[-_]" " " .Name | title }}
linkTitle: ADD A SHORT TITLE HERE # Mandatory, make sure that your short title.
date: {{ dateFormat "2006-01-02" .Date }} # Put the current date, we will keep the date updated until your PR is merged
author: >- # If you have only one author, then add the single name on this line in quotes.
  [Author1 Name](https://github.com/author1_GH_ID) (Organization Name 1),
  ...
  [AuthorX Name](https://github.com/authorX_GH_ID) (Organization Name X)
draft: true # TODO: remove this line once your post is ready to be published
# canonical_url: http://somewhere.else/ # TODO: if this blog post has been posted somewhere else already, uncomment & provide the canonical URL here.
body_class: otel-with-contributions-from # TODO: remove this line if there are no secondary contributing authors
issue: the issue ID for this blog post # TODO: See https://opentelemetry.io/docs/contributing/blog/ for details
sig: SIG Name # TODO: add the name of the SIG that sponsors this blog post 
---

----------------------------------------

TITLE: Disabling JDBC Instrumentation in Java
DESCRIPTION: Example of how to disable specific instrumentation using JVM options to reduce agent overhead

LANGUAGE: properties
CODE:
-Dotel.instrumentation.jdbc.enabled=false

----------------------------------------

TITLE: Local Development Setup Commands
DESCRIPTION: Shell commands for cloning the repository and setting up the local development environment

LANGUAGE: shell
CODE:
git clone git@github.com:<your_github_username>/opentelemetry.io.git
cd opentelemetry.io
npm install

----------------------------------------

TITLE: Querying Specific Target Allocator Job Targets
DESCRIPTION: Shell command to retrieve and format the targets for a specific job from the Target Allocator.

LANGUAGE: shell
CODE:
curl localhost:8080/jobs/serviceMonitor%2Fopentelemetry%2Fsm-example%2F0/targets | jq

----------------------------------------

TITLE: Configuring Kubernetes Attributes Processor in YAML
DESCRIPTION: Example configuration for the Kubernetes Attributes Processor, which adds Kubernetes metadata to incoming telemetry.

LANGUAGE: yaml
CODE:
k8sattributes:
  auth_type: 'serviceAccount'
  extract:
    metadata:
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.pod.start_time
      - k8s.pod.uid
      - k8s.deployment.name
      - k8s.node.name
    annotations:
      - tag_name: a1
        key: annotation-one
        from: pod
      - tag_name: a2
        key: annotation-two
        regex: field=(?P<value>.+)
        from: namespace
    labels:
      - tag_name: l1
        key: label1
        from: namespace
      - tag_name: l2
        key: label2
        regex: field=(?P<value>.+)
        from: pod
  pod_association:
    - sources:
        - from: resource_attribute
          name: k8s.pod.ip
    - sources:
        - from: resource_attribute
          name: k8s.pod.uid
    - sources:
        - from: connection

----------------------------------------

TITLE: Adding Attributes to Spans in Python with OpenTelemetry
DESCRIPTION: Show how to add key/value pair attributes to a span for additional context.

LANGUAGE: python
CODE:
from opentelemetry import trace

current_span = trace.get_current_span()

current_span.set_attribute("operation.value", 1)
current_span.set_attribute("operation.name", "Saying hello!")
current_span.set_attribute("operation.other-stuff", [1, 2, 3])

----------------------------------------

TITLE: Adding Attributes to Spans in Python with OpenTelemetry
DESCRIPTION: Show how to add key/value pair attributes to a span for additional context.

LANGUAGE: python
CODE:
from opentelemetry import trace

current_span = trace.get_current_span()

current_span.set_attribute("operation.value", 1)
current_span.set_attribute("operation.name", "Saying hello!")
current_span.set_attribute("operation.other-stuff", [1, 2, 3])

----------------------------------------

TITLE: PromQL CPU Usage Query
DESCRIPTION: PromQL query to calculate average CPU usage percentage across cores.

LANGUAGE: promql
CODE:
100 - (avg by (cpu) (irate(system_cpu_time{state="idle"}[5m])) * 100)

----------------------------------------

TITLE: Installing OpenTelemetry Instrumentation Library via Shell Command
DESCRIPTION: This snippet demonstrates how to install an OpenTelemetry instrumentation library using a shell command. The command is generated dynamically based on the library name provided.

LANGUAGE: shell
CODE:
{{ printf .installLine .name }}

----------------------------------------

TITLE: Configuring OpenTelemetry Collector in YAML
DESCRIPTION: YAML configuration for setting up an OpenTelemetry Collector that receives OTLP data and exports it to a debug console. This configuration enables both gRPC and HTTP protocols for receiving data.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
exporters:
  debug:
    verbosity: detailed
service:
  pipelines:
    traces:
      receivers: [otlp]
      exporters: [debug]
    metrics:
      receivers: [otlp]
      exporters: [debug]
    logs:
      receivers: [otlp]
      exporters: [debug]

----------------------------------------

TITLE: Generating OpenTelemetry Adopters List in Hugo
DESCRIPTION: This Hugo shortcode generates a list of organizations using OpenTelemetry for a specific language. It takes the language as a parameter, filters the adopters data, and outputs a formatted list with links to each organization's website.

LANGUAGE: hugo
CODE:
{{ $lang := .Get 0 -}}
{{ $Lang := $lang | humanize -}}
{{ $howMany := .Get 1 | default 10 -}}
{{ $adopters := where $.Site.Data.ecosystem.adopters ".components" "intersect" (slice $Lang) -}}

## Who's using OpenTelemetry {{ $Lang }}?

OpenTelemetry {{ $Lang }} is in use by a number of organizations, including:

{{ range first $howMany (sort $adopters "name") -}}

<!-- prettier-ignore -->
- [{{ .name }}]({{ .url }})
{{- end }}

For the complete list, and instructions for adding your organization, see
[Adopters](/ecosystem/adopters/).

----------------------------------------

TITLE: Enabling OpenTelemetry Logging in Node.js
DESCRIPTION: This snippet demonstrates how to enable logging for OpenTelemetry in a Node.js application. It sets up a console logger with debug level logging, which is useful for troubleshooting.

LANGUAGE: javascript
CODE:
import { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';
diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);
// rest of your otel initialization code

----------------------------------------

TITLE: Configuring mypy for namespace packages in TOML
DESCRIPTION: This snippet shows how to add the necessary configuration to enable namespace package support in mypy using a TOML configuration file. This is required for mypy to work correctly with opentelemetry.

LANGUAGE: toml
CODE:
[tool.mypy]
namespace_packages = true

----------------------------------------

TITLE: Defining Kubernetes Service for Prometheus App
DESCRIPTION: YAML configuration for a Kubernetes Service resource that exposes a Prometheus-instrumented application.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Service
metadata:
  name: py-prometheus-app
  namespace: opentelemetry
  labels:
    app: my-app
    app.kubernetes.io/name: py-prometheus-app
spec:
  selector:
    app: my-app
    app.kubernetes.io/name: py-prometheus-app
  ports:
    - name: prom
      port: 8080

----------------------------------------

TITLE: Configuring OpenTelemetry Plugin in APISIX
DESCRIPTION: Example configuration for enabling the OpenTelemetry plugin in Apache APISIX's config.yaml file. It sets the trace ID source, service name, and collector address.

LANGUAGE: yaml
CODE:
plugins:
  ... # Other plugins that have been enabled
  - opentelemetry
plugin_attr:
  ...
  opentelemetry:
    trace_id_source: x-request-id
    resource:
      service.name: APISIX
    collector:
      address: 127.0.0.1:4318 # OTLP HTTP Receiver address
      request_timeout: 3

----------------------------------------

TITLE: Configuring Filelog Receiver for Kubernetes in YAML
DESCRIPTION: Example configuration for the Filelog Receiver to collect logs from Kubernetes pods.

LANGUAGE: yaml
CODE:
filelog:
  include:
    - /var/log/pods/*/*/*.log
  exclude:
    - /var/log/pods/*/otel-collector/*.log
  start_at: end
  include_file_path: true
  include_file_name: false
  operators:
    - type: container
      id: container-parser

----------------------------------------

TITLE: Setting Resource Attributes via Environment Variables
DESCRIPTION: Demonstrates how to set custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. This example shows setting the deployment environment for an application.

LANGUAGE: shell
CODE:
env OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp

----------------------------------------

TITLE: Setting Resource Attributes via Environment Variables
DESCRIPTION: Demonstrates how to set custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. This example shows setting the deployment environment for an application.

LANGUAGE: shell
CODE:
env OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp

----------------------------------------

TITLE: Ansible Inventory Configuration
DESCRIPTION: Example inventory file listing host IPs for OpenTelemetry Collector deployment.

LANGUAGE: properties
CODE:
10.0.0.1    # hostname = ubuntu-01
10.0.0.2    # hostname = ubuntu-02
10.0.0.3    # hostname = centos-01
10.0.0.4    # hostname = centos-02
10.0.0.5    # hostname = debian-01
10.0.0.6    # hostname = debian-02
10.0.0.7    # hostname = fedora-01
10.0.0.8    # hostname = fedora-02

----------------------------------------

TITLE: Automatic Flask Route Instrumentation in Python
DESCRIPTION: Example of a Flask route that will be automatically instrumented by OpenTelemetry without any manual instrumentation code.

LANGUAGE: python
CODE:
@app.route("/server_request")
def server_request():
    print(request.args.get("param"))
    return "served"

----------------------------------------

TITLE: Generating Install Command using Go Templates
DESCRIPTION: This Go template snippet sets up variables and generates the installation command for an OpenTelemetry instrumentation library. It uses a custom 'typesNames' map to provide a friendly name for the library type.

LANGUAGE: go
CODE:
{{ $typesNames := newScratch -}}
{{ $typesNames.Set "instrumentation" "instrumentation library" -}}

To install this {{ $typesNames.Get .type | default .type }} run:

----------------------------------------

TITLE: Template Variable Definition in Go Templates
DESCRIPTION: Defines template variables for language and span exporter interface URL using Go template syntax.

LANGUAGE: go-template
CODE:
{{ $lang := .Get 0 -}} {{ $spanExporterInterfaceUrl := .Get 1 }}

----------------------------------------

TITLE: Configuring CRI Partial Log Format Example
DESCRIPTION: Example showing how CRI format can provide partial logs that need to be combined into a single log entry.

LANGUAGE: text
CODE:
2024-04-06T00:17:10.113242941Z stdout P This is a very very long line th
2024-04-06T00:17:10.113242941Z stdout P at is really, really, long and spa
2024-04-06T00:17:10.113242941Z stdout F ns across multiple log entries

----------------------------------------

TITLE: Running Jaeger Container
DESCRIPTION: Docker command to run Jaeger all-in-one container with various ports exposed for collecting and viewing traces.

LANGUAGE: shell
CODE:
docker run -d --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -e COLLECTOR_OTLP_ENABLED=true \
  -p 6831:6831/udp \
  -p 6832:6832/udp \
  -p 5778:5778 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 14250:14250 \
  -p 14268:14268 \
  -p 14269:14269 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest

----------------------------------------

TITLE: Setting up port-forward for Target Allocator Service
DESCRIPTION: Shell command to set up port-forwarding for the Target Allocator service in Kubernetes.

LANGUAGE: shell
CODE:
kubectl port-forward svc/otelcol-targetallocator -n opentelemetry 8080:80

----------------------------------------

TITLE: Configuring Python Auto-instrumentation Annotation in Kubernetes
DESCRIPTION: This YAML snippet shows how to annotate a Kubernetes resource to enable Python auto-instrumentation using the OpenTelemetry Operator.

LANGUAGE: yaml
CODE:
annotations:
  instrumentation.opentelemetry.io/inject-python: 'true'

----------------------------------------

TITLE: YAML Front Matter Configuration
DESCRIPTION: YAML configuration block at the start of the article defining metadata like title, author, and spell check exceptions.

LANGUAGE: yaml
CODE:
---
title: Why and How eBay Pivoted to OpenTelemetry
linkTitle: eBay OpenTelemetry
date: 2022-12-19
author: '[Vijay Samuel](https://github.com/vjsamuel) (eBay)'
canonical_url: https://tech.ebayinc.com/engineering/why-and-how-ebay-pivoted-to-opentelemetry/
# prettier-ignore
cSpell:ignore: Aishwarya Aradros Ashpole Auditbeat autodiscover Bhattacharya Bogdan Charif Christos clusterlocal Dropwizard Drutu Feldmeier Filebeat filereloadreceiver Golubenco Kroh kube Markou metricbeat Mirabella Nigaryan Premendra Pérez Rami Ruflin Santanu Sarbu sharded Siering Soriano statefulset Steffen Teoh Tigran Vijay Yandapalli
---

----------------------------------------

TITLE: Exposing Frontend Proxy Service
DESCRIPTION: kubectl command to forward local port 8080 to the frontend proxy service for accessing the web interface.

LANGUAGE: shell
CODE:
kubectl port-forward svc/my-otel-demo-frontendproxy 8080:8080

----------------------------------------

TITLE: Adding OpenTelemetry Dependency in Gradle
DESCRIPTION: Groovy configuration for adding an OpenTelemetry dependency to a Gradle project's build.gradle file. Uses template variables for the dependency coordinates.

LANGUAGE: groovy
CODE:
dependencies {
 implementation '{{ index (split .name "/") 0 }}:{{ index (split .name "/") 1 }}:{{ .version }}'
}

----------------------------------------

TITLE: Querying Target Allocator Jobs
DESCRIPTION: Shell command to retrieve and format the list of jobs registered with the Target Allocator.

LANGUAGE: shell
CODE:
curl localhost:8080/jobs | jq

----------------------------------------

TITLE: Generating Language Instrumentation Links in Go Template
DESCRIPTION: Iterates through instrumentation data to create HTML links for sampling documentation pages. Uses nested template logic to format links with proper paths and names for each supported language.

LANGUAGE: Go Template
CODE:
{{- range $lang, $data := $.Site.Data.instrumentation }}
  {{- $path := printf "/docs/languages/%s/sampling.md" $lang }}
  {{- with site.GetPage $path }}
    {{- template "list-item" (dict "name" $data.name "page" .) }}
  {{- end }}
{{- end }}

{{ define "list-item" -}}
- <a href="{{ .page.RelPermalink }}">{{ .name }}</a>
{{ end -}}

----------------------------------------

TITLE: Generating Language Instrumentation Links in Go Template
DESCRIPTION: Iterates through instrumentation data to create HTML links for sampling documentation pages. Uses nested template logic to format links with proper paths and names for each supported language.

LANGUAGE: Go Template
CODE:
{{- range $lang, $data := $.Site.Data.instrumentation }}
  {{- $path := printf "/docs/languages/%s/sampling.md" $lang }}
  {{- with site.GetPage $path }}
    {{- template "list-item" (dict "name" $data.name "page" .) }}
  {{- end }}
{{- end }}

{{ define "list-item" -}}
- <a href="{{ .page.RelPermalink }}">{{ .name }}</a>
{{ end -}}

----------------------------------------

TITLE: Installing Grafana Ansible Collection
DESCRIPTION: Command to install the Grafana Ansible collection which provides the OpenTelemetry Collector role.

LANGUAGE: sh
CODE:
ansible-galaxy collection install grafana.grafana

----------------------------------------

TITLE: Exposing OpenTelemetry Collector
DESCRIPTION: kubectl command to forward local port 4318 to the OpenTelemetry Collector for span collection via OTLP/HTTP.

LANGUAGE: shell
CODE:
kubectl port-forward svc/my-otel-demo-otelcol 4318:4318

----------------------------------------

TITLE: Implementing Hugo Code Block Template
DESCRIPTION: A Hugo template that reads code files and displays them with syntax highlighting. Features include automatic language detection for Python and C# files, configurable line range selection, and optional file name display. Uses Hugo's built-in file reading and string manipulation functions.

LANGUAGE: go
CODE:
{{ $file := .Get "file" -}}
{{ $lang := .Get "lang" | default "" -}}
{{ $from := .Get "from" | default 0 -}}
{{ $to := .Get "to" | default 99999 -}}
{{ $showFileName := .Get "show-file" | default true -}}
{{ $commentStart := "//" -}}

{{ if not $lang -}}
  {{ if strings.HasSuffix $file ".py" -}}
    {{ $lang = "python" -}}
    {{ $commentStart = "#" -}}
  {{ else if strings.HasSuffix $file ".cs" -}}
    {{ $lang = "csharp" -}}
  {{ end -}}
{{ end -}}

{{ $pathBase := .Page.Param "code_block_from__path_base" | default "" -}}

{{ $path := $file -}}
{{ if $pathBase -}}
  {{ $path = printf "%s/%s" $pathBase $path -}}
{{ end -}}
{{ $fileContent := readFile $path -}}
{{ $fileLines := split $fileContent "\n" -}}
{{ $n := sub (int $to) (int $from) -}}
{{ if le $n 0 }}
  {{ errorf "Invalid line range (from=%s, to=%s) for file %s" $from $to $file -}}
{{ end -}}
{{ $excerpt := first $n (after $from $fileLines) -}}

```{{ $lang }}
{{ if $showFileName -}}
  {{ $commentStart }} {{ $file }}
{{ end -}}
{{ delimit $excerpt "\n" "" }}
```

----------------------------------------

TITLE: Generating Release Links in Markdown
DESCRIPTION: Creates markdown links for the latest release and all releases of a specific OpenTelemetry language implementation. Uses placeholders for the language name.

LANGUAGE: markdown
CODE:
[latest release]:
  <https://github.com/open-telemetry/opentelemetry-{{ $lang }}/releases/latest>
[Releases]:
  <https://github.com/open-telemetry/opentelemetry-{{ $lang }}/releases>

----------------------------------------

TITLE: Configuring Rails Routes for Dice Rolling
DESCRIPTION: Ruby code to set up a route in the Rails application, mapping the '/rolldice' path to the 'roll' action of the DiceController.

LANGUAGE: ruby
CODE:
Rails.application.routes.draw do
  get 'rolldice', to: 'dice#roll'
end

----------------------------------------

TITLE: Configuring Cross-namespace Auto-instrumentation in Kubernetes
DESCRIPTION: This YAML snippet demonstrates how to configure auto-instrumentation when the Instrumentation resource is in a different namespace than the target deployment.

LANGUAGE: yaml
CODE:
annotations:
  instrumentation.opentelemetry.io/inject-python: 'opentelemetry/my-instrumentation'

----------------------------------------

TITLE: Implementing Basic Dice Roll Controller with OpenTelemetry
DESCRIPTION: Example of manual instrumentation in a Phoenix controller that creates spans and adds attributes to track dice roll operations.

LANGUAGE: elixir
CODE:
defmodule RollDiceWeb.DiceController do
  use RollDiceWeb, :controller
  require OpenTelemetry.Tracer, as: Tracer

  defp roll_dice do
    Tracer.with_span("dice_roll") do
      roll = Enum.random(1..6)
      Tracer.set_attribute(:roll, roll)
      to_string(roll)
    end
  end
end

----------------------------------------

TITLE: Configuring OTLP Receiver with IPv4 Loopback
DESCRIPTION: Example of configuring the OTLP receiver to use IPv4 loopback address for gRPC protocol instead of default localhost.

LANGUAGE: yaml
CODE:
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 127.0.0.1:4317

----------------------------------------

TITLE: Enabling Discovery in Receiver Creator Configuration
DESCRIPTION: This YAML snippet shows how to explicitly enable the discovery functionality in the receiver creator configuration.

LANGUAGE: yaml
CODE:
receivers:
  receiver_creator:
    watch_observers: [k8s_observer]
    discovery:
      enabled: true

----------------------------------------

TITLE: Defining YAML Metadata for OpenTelemetry 2024 Page
DESCRIPTION: Sets up the title and weight for a page related to OpenTelemetry's 2024 plans. The negative weight value likely influences the sorting order in the documentation structure.

LANGUAGE: yaml
CODE:
---
title: 2024
weight: -2024
---

----------------------------------------

TITLE: Generating Traces with ATM and Backend Spans in Go
DESCRIPTION: Implements a function to generate OpenTelemetry traces with spans for ATM and backend system operations.

LANGUAGE: go
CODE:
func appendTraceSpans(backend *BackendSystem, backendScopeSpans *ptrace.ScopeSpans, atmScopeSpans *ptrace.ScopeSpans) {
	traceId := NewTraceID()

	var atmOperationName string

	switch {
	case strings.Contains(backend.Endpoint, "balance"):
		atmOperationName = "Check Balance"
	case strings.Contains(backend.Endpoint, "deposit"):
		atmOperationName = "Make Deposit"
	case strings.Contains(backend.Endpoint, "withdraw"):
		atmOperationName = "Fast Cash"
	}

	atmSpanId := NewSpanID()
	atmSpanStartTime := time.Now()
	atmDuration, _ := time.ParseDuration("4s")
	atmSpanFinishTime := atmSpanStartTime.Add(atmDuration)

	atmSpan := atmScopeSpans.Spans().AppendEmpty()
	atmSpan.SetTraceID(traceId)
	atmSpan.SetSpanID(atmSpanId)
	atmSpan.SetName(atmOperationName)
	atmSpan.SetKind(ptrace.SpanKindClient)
	atmSpan.Status().SetCode(ptrace.StatusCodeOk)
	atmSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(atmSpanStartTime))
	atmSpan.SetEndTimestamp(pcommon.NewTimestampFromTime(atmSpanFinishTime))

	backendSpanId := NewSpanID()

	backendDuration, _ := time.ParseDuration("2s")
	backendSpanStartTime := atmSpanStartTime.Add(backendDuration)

	backendSpan := backendScopeSpans.Spans().AppendEmpty()
	backendSpan.SetTraceID(atmSpan.TraceID())
	backendSpan.SetSpanID(backendSpanId)
	backendSpan.SetParentSpanID(atmSpan.SpanID())
	backendSpan.SetName(backend.Endpoint)
	backendSpan.SetKind(ptrace.SpanKindServer)
	backendSpan.Status().SetCode(ptrace.StatusCodeOk)
	backendSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(backendSpanStartTime))
	backendSpan.SetEndTimestamp(atmSpan.EndTimestamp())
}

----------------------------------------

TITLE: Implementing Dynamic File Include with Parameter Substitution in Hugo Templates
DESCRIPTION: A Hugo partial template that implements file inclusion with parameter substitution. It finds the target file in the page hierarchy, renders any shortcodes in the included content, and replaces parameter placeholders with provided values. If the file isn't found, it displays a warning message.

LANGUAGE: gotemplate
CODE:
{{/* This partial implements the core functionality of the 'include.html' shortcode,
allowing reuse across other shortcodes and partials.

This partial expects the following arguments -- beyond those used for the
include functionality:

- `_dot`: the '.' context of the page or shortcode invoking this partial
- `_path`: the path to the file to be included

*/ -}}

{{ $path := ._path -}}
{{ $args := . -}}
{{ $page := partial "func/find-include.html"  (dict "path" $path "page" ._dot.Page) -}}
{{ with $page -}}
  {{ $content := .RenderShortcodes -}}
  {{ range $_k, $v := $args -}}
    {{ $k := string $_k -}}
    {{ if not (hasPrefix $k "_") -}}
      {{ $regex := printf "\\{\\{\\s*\\$%s\\s*\\}\\}" $k -}}
      {{ $content = replaceRE $regex $v $content -}}
    {{ end -}}
  {{ end -}}
  {{ $content -}}
{{ else -}}
  {{ $msg := printf
      "Can't include '%s': file not found in page or ancestor contexts of page %s."
      $path .Page.Path -}}
  {{ warnf $msg -}}

  <div class="alert alert-warning">
  <div class="h4 alert-heading">INTERNAL SITE ERROR</div>
  {{ $msg }}
  </div>
{{ end -}}

----------------------------------------

TITLE: Running OpenTelemetry Test Suites
DESCRIPTION: Commands for executing different test suites in the OpenTelemetry demo project. Includes options for running all tests together or individual test suites for frontend, backend integration, and trace-based testing.

LANGUAGE: bash
CODE:
make run-tests

LANGUAGE: bash
CODE:
docker compose run frontendTests

LANGUAGE: bash
CODE:
docker compose run integrationTests

LANGUAGE: bash
CODE:
docker compose run traceBasedTests

----------------------------------------

TITLE: Configuring TraceIdRatioBased Sampler with Environment Variables in Shell
DESCRIPTION: This snippet demonstrates how to set up a TraceIdRatioBased sampler using environment variables. It configures the sampler to export 10% of traces.

LANGUAGE: shell
CODE:
export OTEL_TRACES_SAMPLER="traceidratio"
export OTEL_TRACES_SAMPLER_ARG="0.1"

----------------------------------------

TITLE: Viewing OpenTelemetry Operator Logs in Kubernetes
DESCRIPTION: This command displays the logs of the OpenTelemetry Operator, which can be useful for identifying any errors related to auto-instrumentation.

LANGUAGE: shell
CODE:
kubectl logs -l app.kubernetes.io/name=opentelemetry-operator --container manager -n opentelemetry-operator-system --follow

----------------------------------------

TITLE: Enabling OpenTelemetry Metrics and Logs in Quarkus
DESCRIPTION: This Properties file snippet shows how to enable OpenTelemetry metrics and logs in a Quarkus application. By default, only tracing is enabled, so these properties are necessary to activate the additional telemetry signals.

LANGUAGE: Properties
CODE:
quarkus.otel.metrics.enabled=true
quarkus.otel.logs.enabled=true

----------------------------------------

TITLE: Including Latest Release Partial in Hugo Template
DESCRIPTION: A Hugo template command that includes a partial template for displaying the latest release information. It takes a language parameter from the first argument and passes inner content to the partial.

LANGUAGE: hugo
CODE:
{{ partial "docs/latest-release.md" (dict "lang" (.Get 0) "Inner" .Inner) -}}

----------------------------------------

TITLE: HTML Structure for CVE Table
DESCRIPTION: This HTML code defines the structure of the CVE table, including the table headers for CVE ID, Issue Summary, Severity, and Repository. It also includes a script tag for the JavaScript code that populates the table.

LANGUAGE: HTML
CODE:
<table id="cve-table">
  <thead>
    <tr>
      <th>CVE ID</th>
      <th>Issue Summary</th>
      <th>Severity</th>
      <th>Repository</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>

<script id="main-script">
  // JavaScript code here
</script>

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent for Kafka Broker Metrics
DESCRIPTION: Sets up the OpenTelemetry Java agent for Kafka broker monitoring through JMX Metric Insight Module. The configuration enables automatic collection of Kafka broker metrics and transmission to the collector via OTLP protocol.

LANGUAGE: dockerfile
CODE:
ENV KAFKA_OPTS="-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.jmx.target.system=kafka-broker"

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent for Kafka Broker Metrics
DESCRIPTION: Sets up the OpenTelemetry Java agent for Kafka broker monitoring through JMX Metric Insight Module. The configuration enables automatic collection of Kafka broker metrics and transmission to the collector via OTLP protocol.

LANGUAGE: dockerfile
CODE:
ENV KAFKA_OPTS="-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.jmx.target.system=kafka-broker"

----------------------------------------

TITLE: Enabling OpenTelemetry in Tyk Gateway Configuration (JSON)
DESCRIPTION: This JSON snippet shows how to enable OpenTelemetry support in the Tyk Gateway configuration file. It sets the 'enabled' flag to true within the 'opentelemetry' object.

LANGUAGE: json
CODE:
{
  "opentelemetry": {
    "enabled": true
  }
}

----------------------------------------

TITLE: Creating RestTemplate Bean Configuration
DESCRIPTION: Spring configuration class demonstrating how to create a RestTemplate bean for OpenTelemetry instrumentation.

LANGUAGE: java
CODE:
package otel;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {

  @Bean
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }
}

----------------------------------------

TITLE: Enabling Host Metrics Preset
DESCRIPTION: YAML configuration to enable the host metrics preset in the OpenTelemetry Collector Chart, using daemonset mode.

LANGUAGE: yaml
CODE:
mode: daemonset
presets:
  hostMetrics:
    enabled: true

----------------------------------------

TITLE: Running Markdown Formatter for OpenTelemetry Blog Post
DESCRIPTION: Executes the markdown formatter to ensure consistent styling across blog posts. This command should be run before submitting a new commit.

LANGUAGE: sh
CODE:
npm run format

----------------------------------------

TITLE: Configuring K8s Attributes Processor in OpenTelemetry Collector
DESCRIPTION: Sets up the K8s attributes processor with default options to enrich telemetry with Kubernetes metadata.

LANGUAGE: yaml
CODE:
processors:
  k8sattributes/default:

----------------------------------------

TITLE: Configuring K8s Attributes Processor in OpenTelemetry Collector
DESCRIPTION: Sets up the K8s attributes processor with default options to enrich telemetry with Kubernetes metadata.

LANGUAGE: yaml
CODE:
processors:
  k8sattributes/default:

----------------------------------------

TITLE: Running Zipkin Container
DESCRIPTION: Docker command to run Zipkin container locally

LANGUAGE: shell
CODE:
docker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin

----------------------------------------

TITLE: Running Zipkin Container
DESCRIPTION: Docker command to run Zipkin container locally

LANGUAGE: shell
CODE:
docker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin

----------------------------------------

TITLE: Adding OpenTelemetry Spring Boot Starter Dependency
DESCRIPTION: Maven dependency configuration to add OpenTelemetry Spring Boot Starter to a project. This enables OTLP exports of logs, spans and metrics with auto-instrumentation for Spring HTTP frameworks.

LANGUAGE: xml
CODE:
<dependencies>
  <dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-spring-boot-starter</artifactId>
    <version>1.32.0-alpha</version>
  </dependency>
</dependencies>

----------------------------------------

TITLE: Configuring Environment Variables in OpenTelemetryCollector CR
DESCRIPTION: Demonstrates how to expose a secret as an environment variable in the OpenTelemetryCollector custom resource.

LANGUAGE: yaml
CODE:
env:
  - name: TOKEN_VALUE
    valueFrom:
      secretKeyRef:
        key: TOKEN_VALUE
        name: otel-collector-secret

----------------------------------------

TITLE: Updating Counter with Tags
DESCRIPTION: Increments the counter value and adds optional tags to the metric.

LANGUAGE: csharp
CODE:
successCounter.Add(1, new KeyValuePair<string, object?>("tagName", "tagValue"));

----------------------------------------

TITLE: Installing OpenTelemetry Collector DaemonSet using Helm
DESCRIPTION: This command installs the OpenTelemetry Collector as a DaemonSet using the Helm chart and the previously defined values.yaml file.

LANGUAGE: sh
CODE:
helm install otel-collector open-telemetry/opentelemetry-collector --values <path where you saved the chart>

----------------------------------------

TITLE: Implementing Trace Connector in Go
DESCRIPTION: Full implementation of the custom trace connector, including consumption and conversion logic.

LANGUAGE: go
CODE:
package exampleconnector

import (
    "context"
    "fmt"

    "go.uber.org/zap"

    "go.opentelemetry.io/collector/component"
    "go.opentelemetry.io/collector/consumer"
    "go.opentelemetry.io/collector/pdata/pmetric"
    "go.opentelemetry.io/collector/pdata/ptrace"
)

type connectorImp struct {
    config Config
    metricsConsumer consumer.Metrics
    logger *zap.Logger
    component.StartFunc
	component.ShutdownFunc
}

func newConnector(logger *zap.Logger, config component.Config) (*connectorImp, error) {
    logger.Info("Building exampleconnector connector")
    cfg := config.(*Config)

    return &connectorImp{
    config: *cfg,
    logger: logger,
    }, nil
}

func (c *connectorImp) Capabilities() consumer.Capabilities {
    return consumer.Capabilities{MutatesData: false}
}

func (c *connectorImp) ConsumeTraces(ctx context.Context, td ptrace.Traces) error {
    for i := 0; i < td.ResourceSpans().Len(); i++ {
        resourceSpan := td.ResourceSpans().At(i)

        for j := 0; j < resourceSpan.ScopeSpans().Len(); j++ {
            scopeSpan := resourceSpan.ScopeSpans().At(j)

            for k := 0; k < scopeSpan.Spans().Len(); k++ {
                span := scopeSpan.Spans().At(k)
                attrs := span.Attributes()
                mapping := attrs.AsRaw()
                for key, _ := range mapping {
                    if key == c.config.AttributeName {
                        metrics := pmetric.NewMetrics()
                        return c.metricsConsumer.ConsumeMetrics(ctx, metrics)
                    }
                }
            }
        }
    }
    return nil
}

----------------------------------------

TITLE: Setting Span Status using Transform Processor in OpenTelemetry Collector
DESCRIPTION: Configures the transform processor to set a span's status to 'Ok' when the 'http.request.status_code' attribute is 400 using OTTL (OpenTelemetry Transformation Language).

LANGUAGE: yaml
CODE:
transform:
  error_mode: ignore
  trace_statements:
    - set(span.status.code, STATUS_CODE_OK) where span.attributes["http.request.status_code"] == 400

----------------------------------------

TITLE: Setting Span Status using Transform Processor in OpenTelemetry Collector
DESCRIPTION: Configures the transform processor to set a span's status to 'Ok' when the 'http.request.status_code' attribute is 400 using OTTL (OpenTelemetry Transformation Language).

LANGUAGE: yaml
CODE:
transform:
  error_mode: ignore
  trace_statements:
    - set(span.status.code, STATUS_CODE_OK) where span.attributes["http.request.status_code"] == 400

----------------------------------------

TITLE: Processor Configuration Example
DESCRIPTION: Demonstrates how to configure processors across multiple pipelines with shared settings.

LANGUAGE: yaml
CODE:
processors:
  batch:
    send_batch_size: 10000
    timeout: 10s

service:
  pipelines:
    traces: # a pipeline of "traces" type
      receivers: [zipkin]
      processors: [batch]
      exporters: [otlp]
    traces/2: # another pipeline of "traces" type
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]

----------------------------------------

TITLE: Processor Configuration Example
DESCRIPTION: Demonstrates how to configure processors across multiple pipelines with shared settings.

LANGUAGE: yaml
CODE:
processors:
  batch:
    send_batch_size: 10000
    timeout: 10s

service:
  pipelines:
    traces: # a pipeline of "traces" type
      receivers: [zipkin]
      processors: [batch]
      exporters: [otlp]
    traces/2: # another pipeline of "traces" type
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]

----------------------------------------

TITLE: JavaScript SDK Span Benchmark Location
DESCRIPTION: Reference to the JavaScript SDK's span benchmarking implementation file location.

LANGUAGE: text
CODE:
benchmark/span.js

----------------------------------------

TITLE: Querying Ingress Metrics Pipeline in Prometheus
DESCRIPTION: These Prometheus queries monitor the ingress metrics pipeline, showing accepted and refused metric points grouped by receiver and transport.

LANGUAGE: prometheus
CODE:
otelcol_receiver_accepted_metric_points
otelcol_receiver_refused_metric_points
by (receiver,transport)

----------------------------------------

TITLE: Configuring Miscellaneous Python Settings
DESCRIPTION: Examples of various other configuration options including Django instrumentation, Elasticsearch naming, gRPC exclusions, ID generation, and Redis sanitization.

LANGUAGE: sh
CODE:
export OTEL_PYTHON_DJANGO_INSTRUMENT=false
export OTEL_PYTHON_ELASTICSEARCH_NAME_PREFIX=my-custom-prefix
export OTEL_PYTHON_GRPC_EXCLUDED_SERVICES="GRPCTestServer,GRPCHealthServer"
export OTEL_PYTHON_ID_GENERATOR=xray
export OTEL_PYTHON_INSTRUMENTATION_SANITIZE_REDIS=true

----------------------------------------

TITLE: Manually Adding OpenTelemetry Collector Sidecar to Kubernetes Pod
DESCRIPTION: This YAML configuration shows how to manually add an OpenTelemetry Collector sidecar to a Kubernetes pod without using the operator.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: my-microservice
spec:
  containers:
    - name: my-microservice
      image: my-org/my-microservice:v0.0.0
      ports:
        - containerPort: 8080
          protocol: TCP
    - name: sidecar
      image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector:0.69.0
      ports:
        - containerPort: 8888
          name: metrics
          protocol: TCP
        - containerPort: 4317
          name: otlp-grpc
          protocol: TCP
      args:
        - --config=/conf/collector.yaml
      volumeMounts:
        - mountPath: /conf
          name: sidecar-conf
  volumes:
    - name: sidecar-conf
      configMap:
        name: sidecar-for-my-workload
        items:
          - key: collector.yaml
            path: collector.yaml

----------------------------------------

TITLE: Adding Quarkus OpenTelemetry Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the quarkus-opentelemetry extension dependency to a Maven-based Quarkus project. This is the first step in enabling OpenTelemetry support in a Quarkus application.

LANGUAGE: XML
CODE:
<dependency>
    <groupId>io.quarkus</groupId>
    <artifactId>quarkus-opentelemetry</artifactId>
</dependency>

----------------------------------------

TITLE: Configuring Resource Detectors in Erlang
DESCRIPTION: Configuration of OpenTelemetry resource detectors in Erlang using sys.config. Sets up environment variable and application environment detectors.

LANGUAGE: erlang
CODE:
%% sys.config
{opentelemetry, {resource_detectors, [otel_resource_env_var, otel_resource_app_env]}}

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for AWS Lambda
DESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector to receive traces and logs from the AWS Lambda Telemetry API and export them to an external collector. It uses the 'decouple' processor to separate receiving and exporting, allowing for efficient telemetry collection in a serverless environment.

LANGUAGE: yaml
CODE:
receivers:
  telemetryapi:
exporters:
  otlphttp/external:
    endpoint: 'external-collector:4318'
processors:
  batch:
  decouple:
service:
  pipelines:
    traces:
      receivers: [telemetryapi]
      processors: [batch, decouple]
      exporters: [otlphttp/external]
    logs:
      receivers: [telemetryapi]
      processors: [batch, decouple]
      exporters: [otlphttp/external]

----------------------------------------

TITLE: Configuring OpenTelemetry Collector for AWS Lambda
DESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector to receive traces and logs from the AWS Lambda Telemetry API and export them to an external collector. It uses the 'decouple' processor to separate receiving and exporting, allowing for efficient telemetry collection in a serverless environment.

LANGUAGE: yaml
CODE:
receivers:
  telemetryapi:
exporters:
  otlphttp/external:
    endpoint: 'external-collector:4318'
processors:
  batch:
  decouple:
service:
  pipelines:
    traces:
      receivers: [telemetryapi]
      processors: [batch, decouple]
      exporters: [otlphttp/external]
    logs:
      receivers: [telemetryapi]
      processors: [batch, decouple]
      exporters: [otlphttp/external]

----------------------------------------

TITLE: Creating a Kafka Topic
DESCRIPTION: Shell command to create a new Kafka topic with specified replication factor and partitions.

LANGUAGE: shell
CODE:
kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic my-test-topic

----------------------------------------

TITLE: Logging Incoming CloudEvent in Knative Second Service
DESCRIPTION: This code snippet demonstrates the log output of an incoming CloudEvent in the second Knative service, showing event attributes and data.

LANGUAGE: nocode
CODE:
2022/02/17 13:39:36 Event received: Context Attributes,
  specversion: 1.0
  type: httpbody
  source: github/com/pavolloffay
  id: fad4139c-b3fb-48b2-b0f4-fee44addc5f1
  time: 2022-02-17T13:39:34.426355726Z
  datacontenttype: text/plain
Extensions,
  knativearrivaltime: 2022-02-17T13:39:34.491325425Z
Data,
  hello from first, traceid=5f2c4775e0e36efc1d554a0b6c456cc1

----------------------------------------

TITLE: GKE Collector Deployment Command
DESCRIPTION: kubectl command for deploying the collector to a GKE cluster using provided Kubernetes manifests

LANGUAGE: shell
CODE:
kubectl apply -f k8s/manifest.yaml -n otel-collector

----------------------------------------

TITLE: Installing OpenTelemetry Collector on macOS (Intel)
DESCRIPTION: Commands to download and extract the OpenTelemetry Collector binary on macOS systems with Intel processors.

LANGUAGE: sh
CODE:
curl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_darwin_amd64.tar.gz
tar -xvf otelcol_{{% param vers %}}_darwin_amd64.tar.gz

----------------------------------------

TITLE: OpenTelemetry Collector Deployment Configuration
DESCRIPTION: Kubernetes manifest for deploying an OpenTelemetry Collector with OTLP receivers and debug exporters.

LANGUAGE: bash
CODE:
kubectl apply -f - <<EOF
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: demo
spec:
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 15
      batch:
        send_batch_size: 10000
        timeout: 10s

    exporters:
      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.
      debug:

    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug]
        metrics:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [debug]
EOF

----------------------------------------

TITLE: Manual Context Propagation in JavaScript (Sending Service)
DESCRIPTION: JavaScript code demonstrating how to manually inject trace context for propagation in a sending service.

LANGUAGE: javascript
CODE:
const { context, propagation } = require('@opentelemetry/api');
const output = {};

propagation.inject(context.active(), output);

const { traceparent, tracestate } = output;

----------------------------------------

TITLE: Adding Custom Resources in PHP Code
DESCRIPTION: Example demonstrating how to merge default resources with custom resources and configure them with a tracer provider in PHP code.

LANGUAGE: php
CODE:
$resource = ResourceInfoFactory::defaultResource()->merge(ResourceInfo::create(Attributes::create([
    ResourceAttributes::SERVICE_NAMESPACE => 'foo',
    ResourceAttributes::SERVICE_NAME => 'bar',
    ResourceAttributes::SERVICE_INSTANCE_ID => 1,
    ResourceAttributes::SERVICE_VERSION => '0.1',
    ResourceAttributes::DEPLOYMENT_ENVIRONMENT_NAME => 'development',
])));

$tracerProvider =  new TracerProvider(
    new SimpleSpanProcessor(
        (new ConsoleSpanExporterFactory())->create()
    ),
    null,
    $resource
);

----------------------------------------

TITLE: Adding Custom Resources in PHP Code
DESCRIPTION: Example demonstrating how to merge default resources with custom resources and configure them with a tracer provider in PHP code.

LANGUAGE: php
CODE:
$resource = ResourceInfoFactory::defaultResource()->merge(ResourceInfo::create(Attributes::create([
    ResourceAttributes::SERVICE_NAMESPACE => 'foo',
    ResourceAttributes::SERVICE_NAME => 'bar',
    ResourceAttributes::SERVICE_INSTANCE_ID => 1,
    ResourceAttributes::SERVICE_VERSION => '0.1',
    ResourceAttributes::DEPLOYMENT_ENVIRONMENT_NAME => 'development',
])));

$tracerProvider =  new TracerProvider(
    new SimpleSpanProcessor(
        (new ConsoleSpanExporterFactory())->create()
    ),
    null,
    $resource
);

----------------------------------------

TITLE: Modified SSL Check Script with Carbon Protocol
DESCRIPTION: Enhanced version of the SSL check script that outputs metrics in Carbon plaintext protocol format.

LANGUAGE: shell
CODE:
#!/bin/bash
HOST=${1}
PORT=${2:-443}

now=$(date +%s)
str=$(echo q | openssl s_client -servername "${HOST}" "${HOST}:${PORT}" 2>/dev/null | openssl x509 -noout -enddate | awk -F"=" '{ print $2; }')
if [[ "$(uname)" == "Darwin" ]] ; then
  notAfter=$(date -j -f "%b %d %H:%M:%S %Y %Z" "${notAfterString}" +%s)
else
  notAfter=$(date -d "${notAfterString}" +%s)
fi

secondsLeft=$(($notAfter-$now))

metricPath="tls.server.not_after.time_left;unit=s"
echo "${metricPath} ${secondsLeft} ${now}"

----------------------------------------

TITLE: Creating a Basic Go HTTP Server
DESCRIPTION: This snippet shows how to create a simple HTTP server in Go that responds with a static message.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"log"
	"net/http"
)

func httpHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hi! This action could create a trace!")
}

func main() {
	handler := http.HandlerFunc(httpHandler)
	http.Handle("/", handler)
	fmt.Println("Starting server on port 8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

----------------------------------------

TITLE: Configuring Dockerfile for NGINX with OpenTelemetry
DESCRIPTION: Dockerfile that sets up NGINX with the OpenTelemetry module, including downloading and installing the necessary components.

LANGUAGE: dockerfile
CODE:
FROM nginx:1.23.1
RUN apt-get update ; apt-get install unzip
ADD https://github.com/open-telemetry/opentelemetry-cpp-contrib/releases/download/webserver%2Fv1.0.3/opentelemetry-webserver-sdk-x64-linux.tgz /opt
RUN cd /opt ; unzip opentelemetry-webserver-sdk-x64-linux.tgz.zip; tar xvfz opentelemetry-webserver-sdk-x64-linux.tgz
RUN cd /opt/opentelemetry-webserver-sdk; ./install.sh
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opentelemetry-webserver-sdk/sdk_lib/lib
RUN echo "load_module /opt/opentelemetry-webserver-sdk/WebServerModule/Nginx/1.23.1/ngx_http_opentelemetry_module.so;\n$(cat /etc/nginx/nginx.conf)" > /etc/nginx/nginx.conf
COPY opentelemetry_module.conf /etc/nginx/conf.d

----------------------------------------

TITLE: Generating OpenTelemetry Collector Code and Binary
DESCRIPTION: Command to run the OpenTelemetry Collector builder (ocb) tool, which generates the Collector's source code and builds the binary based on the provided configuration.

LANGUAGE: sh
CODE:
./ocb --config builder-config.yaml

----------------------------------------

TITLE: Checking OpenTelemetry Instrumentation Resource Status in Kubernetes
DESCRIPTION: This command retrieves detailed information about the OpenTelemetry Instrumentation resource in a specified namespace, including its configuration and status.

LANGUAGE: shell
CODE:
kubectl describe otelinst -n <namespace>

----------------------------------------

TITLE: Configuring Custom Resources in OpenTelemetry Node.js SDK
DESCRIPTION: This JavaScript code snippet shows how to configure custom resources in the OpenTelemetry Node.js SDK. It sets service-related attributes using the Resource class and semantic conventions.

LANGUAGE: javascript
CODE:
const { Resource } = require('@opentelemetry/resources');
const { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_NAMESPACE, SEMRESATTRS_SERVICE_VERSION, SEMRESATTRS_SERVICE_INSTANCE_ID } = require('@opentelemetry/semantic-conventions');

const sdk = new opentelemetry.NodeSDK({
  ...
  resource: new Resource({
    [ SEMRESATTRS_SERVICE_NAME ]: "yourServiceName",
    [ SEMRESATTRS_SERVICE_NAMESPACE ]: "yourNameSpace",
    [ SEMRESATTRS_SERVICE_VERSION ]: "1.0",
    [ SEMRESATTRS_SERVICE_INSTANCE_ID ]: "my-instance-id-1",
  })
  ...
});

----------------------------------------

TITLE: Assembly Loading Error Message
DESCRIPTION: Error message showing dependency version conflicts in .NET applications

LANGUAGE: txt
CODE:
Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Extensions.DependencyInjection.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.

File name: 'Microsoft.Extensions.DependencyInjection.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder..ctor(WebApplicationOptions options, Action`1 configureDefaults)
   at Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(String[] args)
   at Program.<Main>$(String[] args) in /Blog.Core/Blog.Core.Api/Program.cs:line 26

----------------------------------------

TITLE: Assembly Loading Error Message
DESCRIPTION: Error message showing dependency version conflicts in .NET applications

LANGUAGE: txt
CODE:
Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Extensions.DependencyInjection.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.

File name: 'Microsoft.Extensions.DependencyInjection.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'
   at Microsoft.AspNetCore.Builder.WebApplicationBuilder..ctor(WebApplicationOptions options, Action`1 configureDefaults)
   at Microsoft.AspNetCore.Builder.WebApplication.CreateBuilder(String[] args)
   at Program.<Main>$(String[] args) in /Blog.Core/Blog.Core.Api/Program.cs:line 26

----------------------------------------

TITLE: OpenTelemetry Collector Configuration with Carbon Receiver
DESCRIPTION: YAML configuration for OpenTelemetry Collector that sets up Carbon receiver with TCP transport and plaintext parsing.

LANGUAGE: yaml
CODE:
receivers:
  carbon:
    endpoint: localhost:8080
    transport: tcp
    parser:
      type: plaintext
      config:

exporters:
  debug:
    verbosity: detailed

service:
  pipelines:
    metrics:
      receivers: [carbon]
      exporters: [debug]

----------------------------------------

TITLE: Starting OpenTelemetry Demo
DESCRIPTION: Commands to start the OpenTelemetry demo using either Make or Docker Compose.

LANGUAGE: shell
CODE:
make start

LANGUAGE: shell
CODE:
docker compose up --force-recreate --remove-orphans --detach

----------------------------------------

TITLE: Setting up Docker Compose for NGINX, Collector, and Jaeger
DESCRIPTION: Docker Compose configuration to run NGINX with OpenTelemetry, along with the OpenTelemetry Collector and Jaeger for trace visualization.

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686'
  collector:
    image: otel/opentelemetry-collector:latest
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
  nginx:
    image: nginx-otel
    volumes:
      - ./opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf
    ports:
      - 8080:80

----------------------------------------

TITLE: Rendering Benchmark Charts with JavaScript and Chart.js
DESCRIPTION: This JavaScript code processes benchmark data and renders line charts using Chart.js. It includes functions for initializing data, collecting benchmarks per test case, and rendering graphs for each benchmark set.

LANGUAGE: JavaScript
CODE:
function init() {
  function collectBenchesPerTestCase(entries) {
    // Implementation details
  }

  const data = window.BENCHMARK_DATA;

  // Render footer and prepare data points
  // Implementation details
}

function renderAllChars(dataSets) {
  function renderGraph(parent, name, commitIds, byName) {
    // Implementation details
  }

  function renderBenchSet(name, benchSet, main) {
    // Implementation details
  }

  const main = document.getElementById('main');
  for (const { name, dataSet } of dataSets) {
    renderBenchSet(name, dataSet, main);
  }
}

renderAllChars(init()); // Start

----------------------------------------

TITLE: PHP Test Page with Artificial Delay
DESCRIPTION: HTML file with embedded PHP code to demonstrate module-level tracing with an artificial delay.

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <title>PHP Test Page</title>
  </head>

  <body>
    <?php echo date('h:i:s') . "<br />"; echo "Introduce delay of 1 seconds" .
    "<br />"; sleep(1); echo date('h:i:s'); ?>
  </body>
</html>

----------------------------------------

TITLE: Configuring Logs Exporter
DESCRIPTION: Setting the exporter type for logs using environment variables.

LANGUAGE: shell
CODE:
export OTEL_LOGS_EXPORTER="otlp"

----------------------------------------

TITLE: Configuring Logs Exporter
DESCRIPTION: Setting the exporter type for logs using environment variables.

LANGUAGE: shell
CODE:
export OTEL_LOGS_EXPORTER="otlp"

----------------------------------------

TITLE: Configuring OpAMP Supervisor for Agent Control
DESCRIPTION: This YAML configuration is used by the OpAMP supervisor to control the agent (our instrumented server).

LANGUAGE: yaml
CODE:
server:
  endpoint: ws://127.0.0.1:4320/v1/opamp
agent:
  executable: <absolute|relative path to previous build>

----------------------------------------

TITLE: Installing OpenTelemetry Demo with kubectl
DESCRIPTION: Command to install the OpenTelemetry Demo using kubectl by applying a YAML manifest from the GitHub repository.

LANGUAGE: shell
CODE:
kubectl apply --namespace otel-demo -f https://raw.githubusercontent.com/open-telemetry/opentelemetry-demo/main/kubernetes/opentelemetry-demo.yaml

----------------------------------------

TITLE: Configuring RBAC Permissions for K8s Attributes Processor
DESCRIPTION: Defines the minimum ClusterRole permissions required for the k8sattributes processor to access pod and namespace information.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
  - apiGroups: ['']
    resources: ['pods', 'namespaces']
    verbs: ['get', 'watch', 'list']

----------------------------------------

TITLE: Custom Protocol Example: Server Implementation
DESCRIPTION: JavaScript code for a server using a custom TCP protocol to receive data with OpenTelemetry context propagation.

LANGUAGE: javascript
CODE:
const net = require('net');
const { context, propagation, trace } = require('@opentelemetry/api');

let tracer = trace.getTracer('server');

const server = net.createServer((socket) => {
  socket.on('data', (data) => {
    const message = data.toString();
    try {
      const json = JSON.parse(message);
      let activeContext = context.active();
      if (json._meta) {
        activeContext = propagation.extract(context.active(), json._meta);
        delete json._meta;
      }
      span = tracer.startSpan('receive', { kind: 1 }, activeContext);
      trace.setSpan(activeContext, span);
      console.log('Parsed JSON:', json);
    } catch (e) {
      console.error('Error parsing JSON:', e.message);
    } finally {
      span.end();
    }
  });
});

server.listen(8124, () => {
  console.log('Server listening on port 8124');
});

----------------------------------------

TITLE: Configuring OpenTelemetry API Documentation Page in YAML
DESCRIPTION: YAML front matter configuration for a documentation page that redirects to the OpenTelemetry API reference on hexdocs.pm. Sets up page title, link behavior, and navigation weight.

LANGUAGE: yaml
CODE:
---
title: API reference
linkTitle: API
redirect: https://hexdocs.pm/opentelemetry_api/OpenTelemetry.html
manualLinkTarget: _blank
_build: { render: link }
weight: 210
---

----------------------------------------

TITLE: Implementing Custom Sampler in Java
DESCRIPTION: Example of implementing a custom Sampler that samples server spans and drops all others.

LANGUAGE: Java
CODE:
public class CustomSampler implements Sampler {
  @Override
  public SamplingResult shouldSample(
      Context parentContext,
      String traceId,
      String name,
      SpanKind spanKind,
      Attributes attributes,
      List<LinkData> parentLinks) {
    return SpanKind.SERVER == spanKind ? SamplingResult.recordAndSample() : SamplingResult.drop();
  }

  @Override
  public String getDescription() {
    return this.getClass().getSimpleName();
  }
}

----------------------------------------

TITLE: Implementing Custom Sampler in Java
DESCRIPTION: Example of implementing a custom Sampler that samples server spans and drops all others.

LANGUAGE: Java
CODE:
public class CustomSampler implements Sampler {
  @Override
  public SamplingResult shouldSample(
      Context parentContext,
      String traceId,
      String name,
      SpanKind spanKind,
      Attributes attributes,
      List<LinkData> parentLinks) {
    return SpanKind.SERVER == spanKind ? SamplingResult.recordAndSample() : SamplingResult.drop();
  }

  @Override
  public String getDescription() {
    return this.getClass().getSimpleName();
  }
}

----------------------------------------

TITLE: Configuring Kafka Producer and Consumer Interceptors
DESCRIPTION: Java code showing how to configure tracing interceptors for Kafka producers and consumers

LANGUAGE: java
CODE:
props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingProducerInterceptor.class.getName());

LANGUAGE: java
CODE:
props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingConsumerInterceptor.class.getName());

----------------------------------------

TITLE: Running Kafka Producer with OpenTelemetry Agent
DESCRIPTION: Shell command to run a Kafka producer application with the OpenTelemetry Java agent for automatic instrumentation

LANGUAGE: shell
CODE:
java -javaagent:path/to/opentelemetry-javaagent.jar \
      -Dotel.service.name=my-kafka-service \
      -Dotel.traces.exporter=jaeger \
      -Dotel.metrics.exporter=none \
      -jar kafka-producer-agent/target/kafka-producer-agent-1.0-SNAPSHOT-jar-with-dependencies.jar

----------------------------------------

TITLE: Creating a YAML Configuration File
DESCRIPTION: This snippet shows the content of a YAML configuration file used to control server instrumentation.

LANGUAGE: yaml
CODE:
instrument: false

----------------------------------------

TITLE: OpenTelemetry Instrumentation Setup
DESCRIPTION: JavaScript code to set up OpenTelemetry instrumentation for both client and server applications.

LANGUAGE: javascript
CODE:
const { NodeSDK } = require('@opentelemetry/sdk-node');
const {
  ConsoleSpanExporter,
  SimpleSpanProcessor,
} = require('@opentelemetry/sdk-trace-node');

const sdk = new NodeSDK({
  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],
});

sdk.start();

----------------------------------------

TITLE: Configuring YAML Front Matter for OpenTelemetry 2024 Documentation
DESCRIPTION: This YAML-like front matter snippet sets up metadata for a documentation page about OpenTelemetry's 2024 plans. It specifies the title, weight for ordering, and a default language commit hash.

LANGUAGE: yaml
CODE:
---
title: 2024
weight: -2024
default_lang_commit: c0a5eea5d720b0e075efa87f99dcf58c89106268
---

----------------------------------------

TITLE: Manual Context Propagation in Erlang
DESCRIPTION: Example of manually injecting and extracting context using otel_propagator_text_map module in Erlang. Shows how to work with headers for context propagation.

LANGUAGE: erlang
CODE:
%% uses the context from the process dictionary to add to an empty list of headers
Headers = otel_propagator_text_map:inject([]),

%% creates a context in the process dictionary from Headers
otel_propagator_text_map:extract(Headers),

----------------------------------------

TITLE: Installing gRPC Dependencies
DESCRIPTION: Commands to install gRPC extension and transport package

LANGUAGE: shell
CODE:
pecl install grpc
composer require open-telemetry/transport-grpc

----------------------------------------

TITLE: Installing gRPC Dependencies
DESCRIPTION: Commands to install gRPC extension and transport package

LANGUAGE: shell
CODE:
pecl install grpc
composer require open-telemetry/transport-grpc

----------------------------------------

TITLE: Basic Todo Application Setup
DESCRIPTION: Initial implementation of a todo application using Gin and MongoDB, including database connection and HTTP endpoint setup.

LANGUAGE: go
CODE:
package main
import (
    "context"
    "net/http"
    "github.com/gin-gonic/gin"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/mongo/options"
)

var client *mongo.Client

func main() {
    connectMongo()
    setupWebServer()
}

func connectMongo() {
    opts := options.Client()
    opts.ApplyURI("mongodb://localhost:27017")
    client, _ = mongo.Connect(context.Background(), opts)
    docs := []interface{}{
        bson.D{
            {"id", "1"},
            {"title", "Buy groceries"}
        },
        bson.D{
            {"id", "2"},
            {"title", "install Aspecto.io"}
        },
        bson.D{
            {"id", "3"},
            {"title", "Buy dogz.io domain"}
        },
    }
    client.Database("todo").Collection("todos").InsertMany(context.Background(), docs)
}

func setupWebServer() {
    r := gin.Default()
    r.GET("/todo", func(c *gin.Context) {
        collection := client.Database("todo").Collection("todos")
        cur, findErr := collection.Find(c.Request.Context(), bson.D{})
        if findErr != nil {
            c.AbortWithError(500, findErr)
            return
        }
        results := make([]interface{}, 0)
        curErr := cur.All(c, &results)
        if curErr != nil {
            c.AbortWithError(500, curErr)
            return
        }
        c.JSON(http.StatusOK, results)
    })
    _ = r.Run(":8080")
}

----------------------------------------

TITLE: Configuring Java Agent in Dockerfile
DESCRIPTION: Sets up the OpenTelemetry Java agent for auto-instrumentation using environment variables in the Dockerfile.

LANGUAGE: dockerfile
CODE:
ENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar

----------------------------------------

TITLE: Implementing Conditional Instrumentation in Go Server
DESCRIPTION: This snippet shows how to implement conditional instrumentation based on the configuration file and integrate OpenTelemetry tracing.

LANGUAGE: go
CODE:
package main

import (
   "context"
   "fmt"
   "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
   "go.opentelemetry.io/otel"
   "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"
   sdktrace "go.opentelemetry.io/otel/sdk/trace"
   "go.opentelemetry.io/otel/trace"
   "gopkg.in/yaml.v3"
   "io/ioutil"
   "log"
   "net/http"
   "os"
   "path/filepath"
)

type configurations struct {
   Instrument bool
}

var tracer trace.Tracer

func newConsoleExporter() (sdktrace.SpanExporter, error) {
   return stdouttrace.New(
      stdouttrace.WithWriter(os.Stdout),
      stdouttrace.WithPrettyPrint(),
   )
}

func httpHandler(w http.ResponseWriter, r *http.Request) {
   fmt.Fprintf(w, "Hi! This action could create a trace!")
}

func setHandler(handler http.Handler, config configurations) http.Handler {
   if config.Instrument {
      return otelhttp.NewHandler(handler, "instrumentation activated by OpAMP")
   }
   return http.HandlerFunc(httpHandler)
}

func main() {
   filename, _ := filepath.Abs("./effective.yaml")
   yamlFile, _ := ioutil.ReadFile(filename)

   var config configurations
   yaml.Unmarshal(yamlFile, &config)

   exp, _ := newConsoleExporter()
   tp := sdktrace.NewTracerProvider(sdktrace.WithBatcher(exp))
   defer func() { _ = tp.Shutdown(context.Background()) }()

   otel.SetTracerProvider(tp)

   tracer = tp.Tracer("ControlledOpAMPAgentDemo")
   handler := http.HandlerFunc(httpHandler)
   http.Handle("/", setHandler(handler, config))
   fmt.Println("Starting server on port 8080")
   log.Fatal(http.ListenAndServe(":8080", nil))
}

----------------------------------------

TITLE: HTML Structure for Benchmark Dashboard
DESCRIPTION: Basic HTML structure for the benchmark visualization dashboard including container elements, download button, and required script imports.

LANGUAGE: html
CODE:
  <div class="container">
    <main id="main"></main>
  </div>

  <footer>
    <button id="dl-button">Download data as JSON</button>
    <div class="spacer"></div>
    <div class="small">Powered by <a rel="noopener"
        href="https://github.com/marketplace/actions/continuous-benchmark">github-action-benchmark</a></div>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.2/dist/Chart.min.js"></script>
  <script src="https://open-telemetry.github.io/opentelemetry-js/benchmarks/data.js"></script>

----------------------------------------

TITLE: Markdown Frontmatter Configuration for KubeCon EU 2025 Page
DESCRIPTION: YAML frontmatter configuration for a Hugo page defining the title, link title, dates, and weight for the KubeCon Europe 2025 event page.

LANGUAGE: yaml
CODE:
---
title: KubeCon + CloudNativeCon Europe 2025
linkTitle: KubeCon EU 2025
date: 2025-02-03
expiryDate: 2025-04-04
weight: -1
---

----------------------------------------

TITLE: Running Jaeger Container
DESCRIPTION: Docker command to run Jaeger all-in-one container with necessary port configurations

LANGUAGE: shell
CODE:
docker run -d --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -e COLLECTOR_OTLP_ENABLED=true \
  -p 6831:6831/udp \
  -p 6832:6832/udp \
  -p 5778:5778 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 14250:14250 \
  -p 14268:14268 \
  -p 14269:14269 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest

----------------------------------------

TITLE: Running OpenTelemetry Demo with Docker Compose
DESCRIPTION: Command to start the OpenTelemetry demo application using Docker Compose. The initial build takes 15-20 minutes and requires Docker and Docker Compose to be installed.

LANGUAGE: bash
CODE:
docker compose up

----------------------------------------

TITLE: Deploy OTel Demo App Setup Commands
DESCRIPTION: Commands to clone repository and enable memory oversubscription in Nomad

LANGUAGE: shell
CODE:
git clone https://github.com/avillela/nomad-conversions.git
cd nomad-conversions
nomad operator scheduler set-config -memory-oversubscription true

----------------------------------------

TITLE: Configuring Jaeger Exporter in OpenTelemetry Collector YAML
DESCRIPTION: This snippet shows the YAML configuration for the Jaeger exporter in the OpenTelemetry Collector. It specifies the endpoint and includes the exporter in the service pipeline.

LANGUAGE: yaml
CODE:
exporters:
  jaeger:
    endpoint: https://jaeger.example.com:14250

service:
  pipelines:
    exporters: [jaeger]

----------------------------------------

TITLE: Styling Benchmark Charts with CSS
DESCRIPTION: Defines custom CSS styles for the benchmark charts and responsive design for header elements.

LANGUAGE: CSS
CODE:
<style>
  @media (min-width: 100px) {
  #main h3 {
      font-size: 0.9rem;
      font-weight: bold;
      word-break: break-all;
     }
  }
</style>

----------------------------------------

TITLE: OpenTelemetry Page Configuration in Markdown/HTML
DESCRIPTION: Front matter configuration and HTML structure for the OpenTelemetry documentation landing page. Includes page metadata, banner settings, and layout structure using blocks/cover shortcode.

LANGUAGE: markdown
CODE:
---
title: OpenTelemetry
description: >
  High-quality, ubiquitous, and portable telemetry to enable effective
  observability
outputs:
  - HTML
  # Include the following for `content/en` ONLY
  - REDIRECTS
  - RSS
developer_note:
  The blocks/cover shortcode (used below) will use as a background image any
  image file containing "background" in its name.
show_banner: true
---

----------------------------------------

TITLE: Configuring YAML Front Matter for OpenTelemetry Registry Page
DESCRIPTION: Defines the YAML front matter for the OpenTelemetry Registry page, including title, description, layout settings, and redirect rules. It also specifies output formats and aliases for the page.

LANGUAGE: yaml
CODE:
---
title: Registry
description: >
  Find libraries, plugins, integrations, and other useful tools for using and
  extending OpenTelemetry.
type: default
layout: registry
body_class: registry td-content
weight: 20

aliases: [/registry/*]
outputs: [html, json]

redirects: [{ from: /ecosystem/registry*, to: '/ecosystem/registry?' }]
---

----------------------------------------

TITLE: Basic OpenTelemetry Collector Build Configuration
DESCRIPTION: YAML configuration for building a minimal collector with OTLP receiver/exporter and logging exporter. Shows basic component structure for collector-builder.

LANGUAGE: yaml
CODE:
receivers:
  - import: go.opentelemetry.io/collector/receiver/otlpreceiver
    gomod: go.opentelemetry.io/collector v0.57.2

exporters:
  - import: go.opentelemetry.io/collector/exporter/otlpexporter
    gomod: go.opentelemetry.io/collector v0.57.2
  - import: go.opentelemetry.io/collector/exporter/loggingexporter
    gomod: go.opentelemetry.io/collector v0.57.2

----------------------------------------

TITLE: Configuring OpenTelemetry Java Agent for Kafka
DESCRIPTION: Shell command to set environment variables for attaching the OpenTelemetry Java Agent to Kafka Broker, including Prometheus exporter configuration.

LANGUAGE: shell
CODE:
export KAFKA_OPTS="-Dapplication.name=my-kafka-app
-Dotel.metrics.exporter=prometheus
-Dotel.exporter.prometheus.port=9464
-Dotel.service.name=my-kafka-broker
-Dotel.jmx.target.system=kafka-broker
-javaagent:/path/to/opentelemetry-javaagent.jar"

----------------------------------------

TITLE: Configuring YAML Frontmatter for OpenTelemetry Go Registry Page
DESCRIPTION: This YAML frontmatter defines metadata for a documentation page about the OpenTelemetry Go registry. It specifies the title, description, redirect URL, build instructions, and navigation weight.

LANGUAGE: yaml
CODE:
---
title: Registry
description:
  Instrumentation libraries, exporters and other useful components for
  OpenTelemetry Go
redirect: /ecosystem/registry/?language=go
_build: { render: link }
weight: 300
---

----------------------------------------

TITLE: HTML Event Announcement with Markdown Links
DESCRIPTION: Mixed HTML and Markdown content announcing the KubeCon event with responsive design elements and external links to registration and blog.

LANGUAGE: html
CODE:
<i class="fas fa-bullhorn"></i> [**{{% param title %}}**][LF],
**<span class="text-nowrap">April 1 - 4,</span> London England**.
<span class="d-none d-md-inline"><br></span> Come [collaborate, learn, and
share][blog]<span class="d-none d-sm-inline"> with the Cloud Native
community</span>!

----------------------------------------

TITLE: Configuring YAML Frontmatter for OpenTelemetry Ecosystem Page
DESCRIPTION: This YAML snippet defines the metadata for the OpenTelemetry Ecosystem page. It sets the title, link title, description, and configures the page type and menu placement.

LANGUAGE: yaml
CODE:
---
title: OpenTelemetry Ecosystem
linkTitle: Ecosystem
description: >
  OpenTelemetry's thriving ecosystem of components, examples, integrations and
  vendors
cascade: { type: docs }
menu: { main: { weight: 20 } }
---

----------------------------------------

TITLE: Enabling OpenTelemetry Plugin for a Specific Route
DESCRIPTION: cURL command to enable the OpenTelemetry plugin for a specific route in Apache APISIX. It sets the sampler to always_on for testing purposes.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:9080/apisix/admin/routes/1 \
  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \
  -X PUT -d '
{
    "uri": "/get",
    "plugins": {
        "opentelemetry": {
            "sampler": {
                "name": "always_on"
            }
        }
    },
    "upstream": {
        "type": "roundrobin",
        "nodes": {
            "httpbin.org:80": 1
        }
    }
}'

----------------------------------------

TITLE: Installing OpenTelemetry Dependencies
DESCRIPTION: Commands to install OpenTelemetry dependencies and bootstrap the installation

LANGUAGE: shell
CODE:
pip install opentelemetry-distro
opentelemetry-bootstrap -a install

----------------------------------------

TITLE: Implementing Basic Logging in Python
DESCRIPTION: Demonstrates basic logging using print statements in a Python function. This approach is used by beginners (Baby Grogu level) who are not familiar with advanced logging techniques.

LANGUAGE: python
CODE:
start_time = time.time()
try:
    how_long_int = int(how_long)
    print(f"Starting to practice The Telemetry for {how_long_int} second(s)")
    while time.time() - start_time < how_long_int:
        next_char = random.choice(string.punctuation)
        print(next_char, end="", flush=True)
        time.sleep(0.5)
    print("\nDone practicing")
except ValueError as ve:
    print(f"I need an integer value for the time to practice: {ve}")
    return False
except Exception as e:
    print(f"An unexpected error occurred: {e}")
    return False
return True

----------------------------------------

TITLE: Configuring YAML Frontmatter for OpenTelemetry Java Documentation
DESCRIPTION: This YAML frontmatter configures metadata for the OpenTelemetry Java documentation page. It sets the title, description, aliases, version information, and weight for page ordering.

LANGUAGE: yaml
CODE:
---
title: Java
description: >
  <img width="35" class="img-initial" src="/img/logos/32x32/Java_SDK.svg"
  alt="Java"> Language-specific implementation of OpenTelemetry in Java.
aliases: [/java, /java/metrics, /java/tracing]
cascade:
  vers:
    instrumentation: 2.14.0
    otel: 1.48.0
    contrib: 1.45.0
    semconv: 1.30.0
weight: 18
---

----------------------------------------

TITLE: Adding OpenTelemetry Dependency in Maven
DESCRIPTION: XML configuration for adding an OpenTelemetry dependency to a Maven project's pom.xml file. Uses template variables for groupId, artifactId, and version.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>{{ index (split .name "/") 0 }}</groupId>
    <artifactId>{{ index (split .name "/") 1 }}</artifactId>
    <version>{{ .version }}</version>
</dependency>

----------------------------------------

TITLE: Adding OpenTelemetry Spring Boot Starter Dependency
DESCRIPTION: XML snippet for adding the OpenTelemetry Spring Boot starter dependency to a Maven project's pom.xml file.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>io.opentelemetry.instrumentation</groupId>
  <artifactId>opentelemetry-spring-boot-starter</artifactId>
</dependency>

----------------------------------------

TITLE: Retrieving Package Version from Registry in Hugo
DESCRIPTION: This shortcode retrieves a package version from a registry data file in Hugo. It takes a package name as a required parameter and an optional boolean to remove the 'v' prefix. The code includes error handling for missing data or parameters.

LANGUAGE: go-template
CODE:
{{ $name := (.Get 0) -}}
{{ $noPrefix := default false (.Get 1) -}}

{{ with $name -}}
  {{ with index $.Site.Data.registry . -}}
    {{ with .package.version -}}
      {{ if $noPrefix -}}
        {{ strings.TrimLeft "v" . -}}
      {{ else -}}
        {{ . -}}
      {{ end -}}
    {{ else -}}
      {{ errorf "No 'package.version' in registry entry %q: %s" $name $.Position -}}
    {{ end -}}
  {{ else -}}
    {{ errorf "Registry entry %q not found: %s" $name $.Position -}}
  {{ end -}}
{{ else -}}
  {{ errorf "Shortcode parameter 'name' is missing %s: " $.Position -}}
{{ end -}}

----------------------------------------

TITLE: Starting Zookeeper for Kafka
DESCRIPTION: Command to start the Zookeeper server for Kafka using the default configuration.

LANGUAGE: shell
CODE:
zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties

----------------------------------------

TITLE: Java SDK Span Benchmark Location
DESCRIPTION: Reference to the Java SDK's span benchmarking implementation file location.

LANGUAGE: text
CODE:
SpanBenchmark.java

----------------------------------------

TITLE: Configuring OTLP Exporter with HTTP/Protobuf
DESCRIPTION: Customized configuration of OpenTelemetry exporters using HTTP/Protobuf protocol with specific endpoints

LANGUAGE: csharp
CODE:
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddOpenTelemetry()
    .WithTracing(tracing => tracing
        // The rest of your setup code goes here
        .AddOtlpExporter(options =>
        {
            options.Endpoint = new Uri("your-endpoint-here/v1/traces");
            options.Protocol = OtlpExportProtocol.HttpProtobuf;
        }))
    .WithMetrics(metrics => metrics
        // The rest of your setup code goes here
        .AddOtlpExporter(options =>
        {
            options.Endpoint = new Uri("your-endpoint-here/v1/metrics");
            options.Protocol = OtlpExportProtocol.HttpProtobuf;
        }));

builder.Logging.AddOpenTelemetry(logging => {
    // The rest of your setup code goes here
    logging.AddOtlpExporter(options =>
    {
        options.Endpoint = new Uri("your-endpoint-here/v1/logs");
        options.Protocol = OtlpExportProtocol.HttpProtobuf;
    });
});

----------------------------------------

TITLE: Configuring YAML Frontmatter for Blog Post
DESCRIPTION: YAML frontmatter configuration for the blog post, including title, link title, date, author information, and custom settings.

LANGUAGE: yaml
CODE:
---
title: 'End-User Q&A Series: Migrating to OTel at Lightstep'
linkTitle: 'End-User Q&A: Migrating to OTel at Lightstep'
date: 2023-07-24
author: '[Reese Lee](https://github.com/reese-lee) (New Relic)'
body_class: otel-with-contributions-from
# prettier-ignore
cSpell:ignore: Aronoff autoscaler codepath fluentbit k8sattributesprocessor kubelet spanmetrics
---

----------------------------------------

TITLE: Local Time Conversion Script
DESCRIPTION: JavaScript code that converts build timestamp to local timezone for display

LANGUAGE: javascript
CODE:
document.addEventListener("DOMContentLoaded", function() {
  var options = { hour: '2-digit', hour12: false, minute: '2-digit', timeZoneName: 'short' };
  var buildDate = new Date("{{ $now.Format \"2006-01-02T15:04:05Z07:00\" }}");
  document.getElementById("local-time").innerText = buildDate.toLocaleString(undefined, options);
});

----------------------------------------

TITLE: Configuring Host Entries for Traefik
DESCRIPTION: Required host entries to enable access to Traefik-exposed services and dashboard

LANGUAGE: properties
CODE:
127.0.0.1   traefik.localhost
127.0.0.1   otel-demo.localhost

----------------------------------------

TITLE: PHP Function Instrumentation Example
DESCRIPTION: Example demonstrating how to instrument a simple PHP function using the hook mechanism to add pre and post execution handlers.

LANGUAGE: php
CODE:
function helloWorld() {
  echo 'helloWorld';
}

\OpenTelemetry\Instrumentation\hook(null, 'helloWorld',
    static function (?string $class, array $params, ?string $classname, string $functionname, ?string $filename, ?int $lineno)
    {
      echo 'before';
    },
    static function (mixed $object, array $params, mixed $return, ?Throwable $exception)
    {
      echo 'after';
    }
);

----------------------------------------

TITLE: Implementing Sibling Span with Salutations in OpenTelemetry
DESCRIPTION: Example of another child span showing the salutations operation. Contains parent ID linking to root span. Demonstrates span relationships and tracing context.

LANGUAGE: json
CODE:
{
  "name": "hello-salutations",
  "context": {
    "trace_id": "5b8aa5a2d2c872e8321cf37308d69df2",
    "span_id": "93564f51e1abe1c2"
  },
  "parent_id": "051581bf3cb55c13",
  "start_time": "2022-04-29T18:52:58.114492Z",
  "end_time": "2022-04-29T18:52:58.114631Z",
  "attributes": {
    "http.route": "some_route3"
  },
  "events": [
    {
      "name": "hey there!",
      "timestamp": "2022-04-29T18:52:58.114561Z",
      "attributes": {
        "event_attributes": 1
      }
    }
  ]
}

----------------------------------------

TITLE: Configuring OTLP Exporter for Jaeger in OpenTelemetry Collector YAML
DESCRIPTION: This snippet demonstrates how to configure the OTLP exporter for Jaeger in the OpenTelemetry Collector. It specifies the endpoint using the default OTLP/gRPC port and includes the exporter in the service pipeline.

LANGUAGE: yaml
CODE:
exporters:
  otlp/jaeger: # Jaeger supports OTLP directly. The default port for OTLP/gRPC is 4317
    endpoint: https://jaeger.example.com:4317

service:
  pipelines:
    exporters: [otlp/jaeger]

----------------------------------------

TITLE: Sorting and Rendering Vendor Table in Hugo Template
DESCRIPTION: This Hugo template code sorts vendor data and generates a markdown table. It includes logic for handling organization names, OSS/commercial status, native OTLP support, and creating shortened URLs for the 'Learn more' column.

LANGUAGE: hugo
CODE:
{{/*
cSpell:ignore: cial cond
*/ -}}
{{ $data := sort (sort (sort $.Site.Data.ecosystem.vendors "name") "oss" "desc") "commercial" -}}

| Organization[^org] | OSS | Com&shy;mer&shy;cial | Native OTLP | Learn more  |
| ----------- | ----------- | ---------- | ----------------- | ----------- | ----------- |
{{- range $data }}
  {{- $shortUrl := .shortUrl -}}
  {{- if not $shortUrl  }}
      {{- $tmp := split (replace .url "https://" "") "/"  }}
      {{- $shortUrl = (index $tmp 0) }}
      {{- if gt (len $tmp) 1  }}
          {{- $shortUrl = printf "%s/…" $shortUrl  }}
      {{- end }}
  {{- end }}
  {{/* Each line below is a column: */ -}}
  {{ .name }} |
  {{- cond .oss "Yes" "No" }} |
  {{- cond .commercial "Yes" "No" }} |
  {{- cond .nativeOTLP "Yes" "No" }} |
  {{- /* */}} [{{ $shortUrl }}]({{ .url }}) |
{{- end }}

[^org]: Organizations are grouped as follows based on their OTel support:
    - Pure OSS
    - Mixed OSS/commercial
    - Commercial
    - Alphabetical within each group

----------------------------------------

TITLE: Creating New Announcement in Hugo
DESCRIPTION: Command to create a new announcement markdown file in Hugo using the announcement template. The command requires specifying the locale and desired filename.

LANGUAGE: sh
CODE:
hugo new --kind announcement content/YOUR-LOCALE/announcements/announcement-file-name.md

----------------------------------------

TITLE: OpenTelemetry Collector Configuration
DESCRIPTION: YAML configuration for the OpenTelemetry Collector defining receivers, processors, and exporters for handling OTLP/JSON logs.

LANGUAGE: yaml
CODE:
receivers:
  filelog/otlp-json-logs:
    include: [/path/to/my-app.otlpjson.log]
  otlp:
    protocols:
      grpc:
      http:

processors:
  batch:
  resourcedetection:
    detectors: ['env', 'system']
    override: false

connectors:
  otlpjson:

service:
  pipelines:
    logs/raw_otlpjson:
      receivers: [filelog/otlp-json-logs]
      processors: []
      exporters: [otlpjson]
    logs:
      receivers: [otlp, otlpjson]
      processors: [resourcedetection, batch]
      exporters: [otlphttp, debug]

exporters:
  debug:
    verbosity: detailed
  otlphttp:

----------------------------------------

TITLE: Unstructured Log Examples
DESCRIPTION: Examples of unstructured logs showing various formats without consistent structure.

LANGUAGE: text
CODE:
[ERROR] 2024-08-04 12:45:23 - Failed to connect to database. Exception: java.sql.SQLException: Timeout expired. Attempted reconnect 3 times. Server: db.example.com, Port: 5432

System reboot initiated at 2024-08-04 03:00:00 by user: admin. Reason: Scheduled maintenance. Services stopped: web-server, database, cache. Estimated downtime: 15 minutes.

DEBUG - 2024-08-04 09:30:15 - User johndoe performed action: file_upload. Filename: report_Q3_2024.pdf, Size: 2.3 MB, Duration: 5.2 seconds. Result: Success

----------------------------------------

TITLE: Configuring Database Instrumentation Properties
DESCRIPTION: Spring application properties configuration to enable database instrumentation without declaring a DataSource bean. Sets up the OpenTelemetry JDBC driver for H2 database.

LANGUAGE: properties
CODE:
spring.datasource.url=jdbc:otel:h2:mem:db
spring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver

----------------------------------------

TITLE: Processing OpenTelemetry Documentation Template in Hugo
DESCRIPTION: A Hugo template that processes instrumentation documentation for different programming languages. It retrieves language-specific data and signal statuses for traces, metrics, and logs, then passes them to a partial template for rendering.

LANGUAGE: go-template
CODE:
{{ $prettier_ignore := `

<!-- prettier-ignore -->
` -}}
{{ $lang := .Get 0 -}}
{{ $data := index $.Site.Data.instrumentation $lang }}
{{ $name := $data.name -}}

{{ $tracesStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "traces") -}}
{{ $metricsStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "metrics") -}}
{{ $logsStatus := partial "docs/get-signal-status.html" (dict "lang" $lang "signal" "logs") -}}

{{ $args := dict
    "_dot" .
    "_path" "index-intro.md"
    "name" $name
    "lang" $lang
    "tracesStatus" $tracesStatus
    "metricsStatus" $metricsStatus
    "logsStatus" $logsStatus
    ".Inner" .Inner
-}}

{{ partial "include.md" $args -}}

----------------------------------------

TITLE: Installing Node.js with NVM on Windows
DESCRIPTION: Commands to install and use the LTS version of Node.js using NVM on Windows systems.

LANGUAGE: cmd
CODE:
> nvm install lts && nvm use lts

----------------------------------------

TITLE: Starting Jaeger Docker Container
DESCRIPTION: Docker command to run Jaeger for trace visualization

LANGUAGE: shell
CODE:
docker run --rm -it -d -p 16686:16686 -p 4317:4317 -p 4318:4318 --name jaeger jaegertracing/all-in-one:latest

----------------------------------------

TITLE: Configuring Filelog Receiver for Kubernetes Logs
DESCRIPTION: Example configuration for the Filelog Receiver to collect and parse Kubernetes container logs from files.

LANGUAGE: yaml
CODE:
filelog:
  include:
    - /var/log/pods/*/*/*.log
  exclude:
    # Exclude logs from all containers named otel-collector
    - /var/log/pods/*/otel-collector/*.log
  start_at: beginning
  include_file_path: true
  include_file_name: false
  operators:
    # Find out which format is used by kubernetes
    - type: router
      id: get-format
      routes:
        - output: parser-docker
          expr: 'body matches "^\\{"'
        - output: parser-crio
          expr: 'body matches "^[^ Z]+ "'
        - output: parser-containerd
          expr: 'body matches "^[^ Z]+Z"'
    # Parse CRI-O format
    - type: regex_parser
      id: parser-crio
      regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
      output: extract_metadata_from_filepath
      timestamp:
        parse_from: attributes.time
        layout_type: gotime
        layout: '2006-01-02T15:04:05.999999999Z07:00'
    # Parse CRI-Containerd format
    - type: regex_parser
      id: parser-containerd
      regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
      output: extract_metadata_from_filepath
      timestamp:
        parse_from: attributes.time
        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
    # Parse Docker format
    - type: json_parser
      id: parser-docker
      output: extract_metadata_from_filepath
      timestamp:
        parse_from: attributes.time
        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
    - type: move
      from: attributes.log
      to: body
    # Extract metadata from file path
    - type: regex_parser
      id: extract_metadata_from_filepath
      regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
      parse_from: attributes["log.file.path"]
      cache:
        size: 128 # default maximum amount of Pods per Node is 110
    # Rename attributes
    - type: move
      from: attributes.stream
      to: attributes["log.iostream"]
    - type: move
      from: attributes.container_name
      to: resource["k8s.container.name"]
    - type: move
      from: attributes.namespace
      to: resource["k8s.namespace.name"]
    - type: move
      from: attributes.pod_name
      to: resource["k8s.pod.name"]
    - type: move
      from: attributes.restart_count
      to: resource["k8s.container.restart_count"]
    - type: move
      from: attributes.uid
      to: resource["k8s.pod.uid"]

----------------------------------------

TITLE: Currency Service Integration Test in YAML
DESCRIPTION: YAML configuration for testing currency conversion functionality, including gRPC trigger and trace assertions

LANGUAGE: yaml
CODE:
type: Test
spec:
  name: 'Currency: Convert'
  description: Convert a currency
  trigger:
    type: grpc
    grpc:
      protobufFile: {{ protobuf file with CurrencyService definition }}
      address: {{ currency service address }}
      method: oteldemo.CurrencyService.Convert
      request: |-
        {
          "from": {
            "currencyCode": "USD",
            "units": 330,
            "nanos": 750000000
          },
          "toCode": "CAD"
        }
  specs:
    - name: It converts from USD to CAD
      selector:
        span[name="CurrencyService/Convert" rpc.system="grpc"
        rpc.method="Convert" rpc.service="CurrencyService"]
      assertions:
        - attr:app.currency.conversion.from = "USD"
        - attr:app.currency.conversion.to = "CAD"
    - name: It has more nanos than expected
      selector: span[name="Test trigger"]
      assertions:
        - attr:response.body | json_path '$.nanos' >= 599380800

----------------------------------------

TITLE: Running Prometheus Docker Container for OpenTelemetry
DESCRIPTION: This shell command runs Prometheus in a Docker container, mounting a local configuration file and exposing the UI on port 9090. It also enables the OTLP write receive feature.

LANGUAGE: shell
CODE:
docker run --rm -v ${PWD}/prometheus.yml:/prometheus/prometheus.yml -p 9090:9090 prom/prometheus --enable-feature=otlp-write-receive

----------------------------------------

TITLE: Installing Node.js with NVM on Linux
DESCRIPTION: Command to install the Node.js version specified in .nvmrc file using NVM on Linux systems.

LANGUAGE: sh
CODE:
nvm install

----------------------------------------

TITLE: Overriding Collector Image in OpenTelemetryCollector CR
DESCRIPTION: Demonstrates how to override the default Collector image and specify the number of replicas in the OpenTelemetryCollector custom resource.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otelcol
  namespace: mynamespace
spec:
  mode: statefulset
  image: <my_collector_image>
  replicas: <number_of_replicas>

----------------------------------------

TITLE: Configuring Kubernetes Cluster Receiver
DESCRIPTION: Example configuration for the Kubernetes Cluster Receiver, which collects cluster-wide metrics and entity events from the Kubernetes API server.

LANGUAGE: yaml
CODE:
k8s_cluster:
  auth_type: serviceAccount
  node_conditions_to_report:
    - Ready
    - MemoryPressure
  allocatable_types_to_report:
    - cpu
    - memory

----------------------------------------

TITLE: Recording HTTP Server Request Duration in Java
DESCRIPTION: Example of initializing and recording measurements to an OpenTelemetry histogram instrument for HTTP server request duration. It demonstrates setting up the instrument with bucket boundaries and recording measurements with various HTTP attributes.

LANGUAGE: java
CODE:
// Initialize instrument
DoubleHistogram histogram = meterProvider.get("my-instrumentation-name")
    .histogramBuilder("http.server.request.duration")
    .setUnit("s")
    .setExplicitBucketBoundariesAdvice(Arrays.asList(1.0, 5.0, 10.0)) // set histogram bucket boundaries to the thresholds we care about
    .build();

// ... elsewhere in code, record a measurement for each HTTP request served
histogram.record(22.0, httpAttributes("GET", "/users", 200));
histogram.record(7.0, httpAttributes("GET", "/users/{id}", 200));
histogram.record(11.0, httpAttributes("GET", "/users/{id}", 200));
histogram.record(4.0, httpAttributes("GET", "/users/{id}", 200));
histogram.record(6.0, httpAttributes("GET", "/users/{id}", 404));
histogram.record(6.2, httpAttributes("PUT", "/users/{id}", 200));
histogram.record(7.2, httpAttributes("PUT", "/users/{id}", 200));

// Helper constants
private static final AttributeKey<String> HTTP_REQUEST_METHOD = AttributeKey.stringKey("http.request.method");
private static final AttributeKey<String> HTTP_ROUTE = AttributeKey.stringKey("http.route");
private static final AttributeKey<String> HTTP_RESPONSE_STATUS_CODE = AttributeKey.stringKey("http.response.status_code");

// Helper function
private static Attributes httpAttributes(String method, String route, int responseStatusCode) {
  return Attributes.of(
    HTTP_REQUEST_METHOD, method,
    HTTP_ROUTE, route,
    HTTP_RESPONSE_STATUS_CODE, responseStatusCode);
}

----------------------------------------

TITLE: Running OpenTelemetry Collector in Docker
DESCRIPTION: Shell command to run the OpenTelemetry Collector in a Docker container, mapping the configuration file and exposing the necessary ports for OTLP reception.

LANGUAGE: shell
CODE:
docker run -p 4317:4317 -p 4318:4318 --rm -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml otel/opentelemetry-collector

----------------------------------------

TITLE: PR Fix Commands
DESCRIPTION: Commands available for automatically fixing common pull request issues

LANGUAGE: text
CODE:
/fix:all

----------------------------------------

TITLE: Adding OpenTelemetry Instrumentation BOM to Maven POM
DESCRIPTION: XML snippet for adding the OpenTelemetry instrumentation BOM to a Maven project's pom.xml file.

LANGUAGE: XML
CODE:
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>io.opentelemetry.instrumentation</groupId>
            <artifactId>opentelemetry-instrumentation-bom</artifactId>
            <version>2.8.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

----------------------------------------

TITLE: OpenTelemetry Registry Entry Process
DESCRIPTION: Process for adding a new integration to the OpenTelemetry registry by creating a YAML data file and submitting a pull request. Contributors must follow marketing guidelines and Linux Foundation trademark usage rules.



----------------------------------------

TITLE: Configuring NGINX Receiver with Receiver Creator in YAML
DESCRIPTION: This snippet demonstrates how to configure the receiver creator to enable the NGINX receiver when a NGINX pod is deployed on the cluster. It uses a rule to match pods exposing port 80 with names containing 'nginx'.

LANGUAGE: yaml
CODE:
receivers:
  receiver_creator:
    watch_observers: [k8s_observer]
    receivers:
      nginx:
        rule: type == "port" && port == 80 && pod.name matches "(?i)nginx"
        config:
          endpoint: 'http://`endpoint`/nginx_status'
          collection_interval: '15s'

----------------------------------------

TITLE: Generating API Reference Links in Hugo Template
DESCRIPTION: This Hugo template code generates a list of links to API reference pages for various programming languages. It handles special cases for .NET, creates page slices, and formats links with language names and titles. The template also manages external links with appropriate attributes.

LANGUAGE: hugo
CODE:
{{ $pages := slice -}}
{{ range $key,$value := $.Site.Data.instrumentation -}}
    {{ if eq $key "dotnet" -}}
    {{ with $.Site.GetPage "/docs/languages/net/traces-api" -}}
        {{ $pages = $pages | append (dict "lang" $value "page" .) -}}
    {{ end }}
    {{ with $.Site.GetPage "/docs/languages/net/metrics-api" -}}
        {{ $pages = $pages | append (dict "lang" $value "page" .) -}}
    {{ end }}
    {{ else -}}
    {{ with $.Site.GetPage (printf "/docs/languages/%s/api" $key) -}}
        {{ $pages = $pages | append (dict "lang" $value "page" .) -}}
    {{ end }}
    {{ end -}}
{{ end -}}

{{ range $pages }}
{{ $title := replaceRE `API reference` "" .page.Title -}}

- {{/* Encode the link directly as an <a> anchor to avoid unnecessary render-link hook checks */ -}}
  <a href="{{ .page.RelPermalink }}"
      {{- if and .page.Params.redirect (hasPrefix .page.Params.redirect "http") }} {{/* */ -}}
        target="_blank" rel="noopener" class="external-link"
      {{- end -}}
  >
    {{- .lang.name -}}
    {{ with $title }} &mdash; {{ . }} {{- end -}}
  </a>

{{- end -}}

----------------------------------------

TITLE: Contributing Workflow Diagram in Mermaid
DESCRIPTION: Flowchart showing the basic steps for contributing new documentation to OpenTelemetry

LANGUAGE: mermaid
CODE:
flowchart LR
    subgraph first[How to contribute]
    direction TB
       T[ ] -.-
       B[Fork the repo in GitHub] --- C[Write docs in markdown<br>and build site with Hugo]
       C --- D[Push source to the fork]
       D --- E[Open a pull request]
       E --- F[Sign the CNCF CLA]
    end

----------------------------------------

TITLE: Configuring Hugo Frontmatter for Announcements Section
DESCRIPTION: YAML configuration that sets up the announcements page and its child pages with specific parameters. It defines the page title as 'Announcements' and cascades documentation type settings while hiding feedback elements.

LANGUAGE: yaml
CODE:
title: Announcements
cascade:
  type: docs
  params:
    hide_feedback: true

----------------------------------------

TITLE: Rendering HTML Content for OpenTelemetry Registry Page
DESCRIPTION: Generates the HTML structure for the OpenTelemetry Registry page, including a lead section with the page title and description, and a container section with an alert and search form.

LANGUAGE: html
CODE:
{{% blocks/lead color="dark" %}}

<!-- markdownlint-disable single-h1 -->

<h1>{{% param title %}}</h1>

{{% param description %}}

{{% /blocks/lead %}}

{{< blocks/section color="white" type="container-lg" >}}

{{% alert color="info" %}}

The OpenTelemetry Registry allows you to search for instrumentation libraries,
collector components, utilities, and other useful projects in the OpenTelemetry
ecosystem. If you are a project maintainer, you can
[add your project to the OpenTelemetry Registry](adding/).

{{% /alert %}}

{{< ecosystem/registry/search-form >}}

{{< /blocks/section >}}

----------------------------------------

TITLE: Docker Compose Configuration for OpenTelemetry Demo
DESCRIPTION: Docker Compose YAML file for setting up a demo environment with Jaeger, Zipkin, OpenTelemetry Collector, and demo client/server applications. It includes port mappings and environment variable configurations.

LANGUAGE: yaml
CODE:
version: '2'
services:
  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - '16686:16686' # jaeger ui port
      - '14268'
      - '14250'

  # Zipkin
  zipkin-all-in-one:
    image: openzipkin/zipkin:latest
    ports:
      - '9411:9411'

  # Collector
  otel-collector:
    image: ${OTELCOL_IMG}
    command: ['--config=/etc/otel-collector-config.yaml', '${OTELCOL_ARGS}']
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '1888:1888' # pprof extension
      - '8888:8888' # Prometheus metrics exposed by the collector
      - '8889:8889' # Prometheus exporter metrics
      - '13133:13133' # health_check extension
      - '4317' # OTLP gRPC receiver
      - '4318:4318' # Add OTLP HTTP Receiver port mapping
      - '55670:55679' # zpages extension
    depends_on:
      - jaeger-all-in-one
      - zipkin-all-in-one

  demo-client:
    build:
      dockerfile: Dockerfile
      context: ./client
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - DEMO_SERVER_ENDPOINT=http://172.17.0.1:9080/hello # APISIX address
    depends_on:
      - demo-server

  demo-server:
    build:
      dockerfile: Dockerfile
      context: ./server
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
    ports:
      - '7080:7080' # Map the Server port to the host
    depends_on:
      - otel-collector

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

----------------------------------------

TITLE: Generating HTML Alert Component with Hugo Template
DESCRIPTION: A Hugo template that creates an alert/notification component with customizable color and optional title. Uses Bootstrap alert classes and supports safe HTML rendering. Includes special comment handling for CommonMark HTML block parsing.

LANGUAGE: hugo
CODE:
{{/* Temporary, from Docsy */ -}}

{{ $color := .Get "color" | default "primary" -}}

<div class="alert alert-{{ $color }}" role="alert">
{{- with .Get "title" -}}
  <div class="h4 alert-heading" role="heading">
    {{- . | safeHTML -}}
  </div>
{{/* Do **not** remove this comment! It ends the previous HTML block; see https://spec.commonmark.org/0.30/#html-blocks, 7. */}}
{{- end -}}
{{ .Inner -}}
</div>
{{/* */ -}}

----------------------------------------

TITLE: Displaying Alert in Markdown for OpenTelemetry.io
DESCRIPTION: This snippet demonstrates how to create an alert box in the OpenTelemetry.io documentation using a custom shortcode. It provides a note about fixing content issues automatically.

LANGUAGE: markdown
CODE:
{{% alert title="Note" color="primary" %}}

If any of the PR checks fails, try to
[fix content issues automatically](../pull-requests/#fix-issues) first by
running `npm run fix:all` on your machine.

Additionally, you can comment `/fix:all` on your Pull Request. This will make
the OpenTelemetry Bot run those commands on your behalf and update the PR. Make
sure that you pull those changes locally.

Only if your issues persist, read below what the different checks do and how you
can recover from a failed state.

{{% /alert %}}

----------------------------------------

TITLE: YAML Frontmatter Configuration for Community Page
DESCRIPTION: YAML configuration block that sets up the page title, menu weight, and cascade settings for the community documentation page.

LANGUAGE: yaml
CODE:
---
title: Community
menu: { main: { weight: 40 } }
cascade:
  type: docs
---

----------------------------------------

TITLE: Configuring OTTL Contexts in YAML (Before Context Inference)
DESCRIPTION: This snippet shows the original way of configuring OTTL contexts for the transform processor, requiring explicit context specification for each group of statements.

LANGUAGE: yaml
CODE:
metric_statements:
  - context: resource
    statements:
      - keep_keys(attributes, ["host.name"])
  - context: metric
    statements:
      - set(description, "Sum") where type == "Sum"
      - convert_sum_to_gauge() where name == "system.processes.count"
  - context: datapoint
    statements:
      - limit(attributes, 100, ["host.name"])

----------------------------------------

TITLE: Deploying OpenTelemetry Collector in Sidecar Mode
DESCRIPTION: Configuration for deploying the OpenTelemetry Collector as a sidecar with resource detection processor to capture Kubernetes metadata from environment variables.

LANGUAGE: yaml
CODE:
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: sidecar-for-my-app
spec:
  mode: sidecar
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.47.0
  config: |
    receivers:
      jaeger:
        protocols:
          grpc:
          thrift_binary:
          thrift_compact:
          thrift_http:
      otlp:
        protocols:
          grpc:
          http:

    processors:
      resourcedetection:
        detectors: [env]
        timeout: 2s
        override: false

    exporters:
      jaeger:
        endpoint: jaeger-all-in-one-collector:14250
        tls:
          insecure: true

    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger]
          processors: [resourcedetection]
          exporters: [jaeger]

----------------------------------------

TITLE: Running Grafana Docker Container
DESCRIPTION: Shell command to run Grafana in a Docker container for visualizing Prometheus metrics.

LANGUAGE: shell
CODE:
docker run -d -p 3000:3000 grafana/grafana

----------------------------------------

TITLE: YAML Configuration for Training Page
DESCRIPTION: YAML frontmatter configuration for the training documentation page, setting up menu weights, page type, and custom parameters.

LANGUAGE: yaml
CODE:
title: Training
menu: { main: { weight: 45 } }
description: OpenTelemetry certifications and courses
type: docs
body_class: ot-training
hide_feedback: true
params:
  LFS148: https://training.linuxfoundation.org/training/getting-started-with-opentelemetry-lfs148/

----------------------------------------

TITLE: Configuring OTLP Exporter with Environment Variable
DESCRIPTION: Shows how to reference an environment variable in the OTLP exporter definition within the OpenTelemetryCollector custom resource.

LANGUAGE: yaml
CODE:
exporters:
  otlp:
    endpoint: '<your_backend_endpoint_here>'
    headers:
      '<token_name>': '${TOKEN_VALUE}'

----------------------------------------

TITLE: Logging Incoming HTTP Headers in Knative First Service
DESCRIPTION: This code snippet shows the log output of incoming HTTP request headers in the first Knative service, including trace context information.

LANGUAGE: nocode
CODE:
2022/02/17 12:53:48 Request headers:
2022/02/17 12:53:48 	X-B3-Sampled: [1]
2022/02/17 12:53:48 	X-B3-Spanid: [af6c239eb7b39349]
2022/02/17 12:53:48 	X-B3-Traceid: [5f2c4775e0e36efc1d554a0b6c456cc1]
2022/02/17 12:53:48 	X-Forwarded-For: [10.244.0.12, 10.244.0.5]
2022/02/17 12:53:48 	Accept-Language: [en,fr;q=0.9,de;q=0.8,sk;q=0.7]
2022/02/17 12:53:48 	Cookie: [_ga=GA1.2.260863911.1644918876]
2022/02/17 12:53:48 	Accept: [text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9]
2022/02/17 12:53:48 	K-Proxy-Request: [activator]
2022/02/17 12:53:48 	Upgrade-Insecure-Requests: [1]
2022/02/17 12:53:48 	User-Agent: [Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36]
2022/02/17 12:53:48 	X-Request-Id: [ee2797b5-1ee9-408e-b1ff-d5e5431977e6]
2022/02/17 12:53:48 	Cache-Control: [max-age=0]
2022/02/17 12:53:48 	X-Forwarded-Proto: [http]
2022/02/17 12:53:48 	Traceparent: [00-5f2c4775e0e36efc1d554a0b6c456cc1-af6c239eb7b39349-01]
2022/02/17 12:53:48 	Accept-Encoding: [gzip, deflate]
2022/02/17 12:53:48 	Forwarded: [for=10.244.0.12;proto=http]
2022/02/17 12:53:48 Response headers:
2022/02/17 12:53:48 	Traceparent: [00-5f2c4775e0e36efc1d554a0b6c456cc1-1cf3f827eba96bf2-01]
2022/02/17 12:53:48

----------------------------------------

TITLE: Enabling Exponential Bucket Histograms in OpenTelemetry Java
DESCRIPTION: This shell command sets an environment variable to enable exponential bucket histograms as the default histogram aggregation in OpenTelemetry Java.

LANGUAGE: shell
CODE:
export OTEL_EXPORTER_OTLP_METRICS_DEFAULT_HISTOGRAM_AGGREGATION=exponential_bucket_histogram

----------------------------------------

TITLE: Running Instrumented Go Application
DESCRIPTION: Compiles and runs the instrumented Go application.

LANGUAGE: shell
CODE:
go mod tidy
export OTEL_RESOURCE_ATTRIBUTES="service.name=dice,service.version=0.1.0"
go run .

----------------------------------------

TITLE: Defining Frontmatter for OpenTelemetry 2021 Changelog in Markdown
DESCRIPTION: This snippet defines the frontmatter metadata for a markdown file. It sets the title to '2021' and assigns a negative weight value, likely for sorting purposes in a documentation system.

LANGUAGE: markdown
CODE:
---
title: 2021
weight: -2021
---

----------------------------------------

TITLE: Adding Custom OpenTelemetry Instrumentation in Go
DESCRIPTION: Adds custom OpenTelemetry instrumentation to the dice roll handler.

LANGUAGE: Go
CODE:
package main

import (
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"strconv"

	"go.opentelemetry.io/contrib/bridges/otelslog"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
)

const name = "go.opentelemetry.io/otel/example/dice"

var (
	tracer = otel.Tracer(name)
	meter  = otel.Meter(name)
	logger = otelslog.NewLogger(name)
	rollCnt metric.Int64Counter
)

func init() {
	// Implementation details omitted for brevity
}

func rolldice(w http.ResponseWriter, r *http.Request) {
	// Implementation details omitted for brevity
}

----------------------------------------

TITLE: Running OpenTelemetry Instrumented Application
DESCRIPTION: Commands to run the application with OpenTelemetry instrumentation, including options for console export

LANGUAGE: shell
CODE:
opentelemetry-instrument python main.py

----------------------------------------

TITLE: Initializing MeterProvider and Creating a Meter in Python OpenTelemetry
DESCRIPTION: Set up a MeterProvider with a PeriodicExportingMetricReader and ConsoleMetricExporter, then create a meter.

LANGUAGE: python
CODE:
from opentelemetry import metrics
from opentelemetry.sdk.metrics import MeterProvider
from opentelemetry.sdk.metrics.export import (
    ConsoleMetricExporter,
    PeriodicExportingMetricReader,
)

metric_reader = PeriodicExportingMetricReader(ConsoleMetricExporter())
provider = MeterProvider(metric_readers=[metric_reader])

# Sets the global default meter provider
metrics.set_meter_provider(provider)

# Creates a meter from the global meter provider
meter = metrics.get_meter("my.meter.name")

----------------------------------------

TITLE: Configuring Hugo Blog Settings in YAML
DESCRIPTION: YAML front matter configuration for a Hugo blog section. Sets the menu weight to 50, enables HTML and RSS outputs, and includes a default language commit hash.

LANGUAGE: yaml
CODE:
title: Blog
menu: { main: { weight: 50 } }
outputs: [HTML, RSS]
default_lang_commit: c0a5eea5d720b0e075efa87f99dcf58c89106268

----------------------------------------

TITLE: Template Content Insertion
DESCRIPTION: Inserts template content using the Inner template variable in Go templates.

LANGUAGE: go-template
CODE:
{{ .Inner }}

----------------------------------------

TITLE: Sending Zipkin Trace to Collector
DESCRIPTION: Shell command to send a Zipkin trace payload to the Collector for testing purposes.

LANGUAGE: shell
CODE:
curl -X POST localhost:9411/api/v2/spans -H'Content-Type: application/json' -d @trace.json

----------------------------------------

TITLE: Updating CMakeLists.txt for OpenTelemetry Integration
DESCRIPTION: This updated CMake configuration adds OpenTelemetry C++ dependencies to the project.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.25)
project(RollDiceServer)
# Set C++ standard (e.g., C++17)
set(CMAKE_CXX_STANDARD 17)
set(project_name roll-dice-server)

# Define your project's source files
set(SOURCES
    main.cpp  # Add your source files here
)
# Create an executable target
add_executable(dice-server ${SOURCES})

set(OATPP_ROOT ../oatpp)
set(opentelemetry-cpp_DIR ../otel-cpp/lib/cmake/opentelemetry-cpp)
find_library(OATPP_LIB NAMES liboatpp.a HINTS "${OATPP_ROOT}/build/src/" NO_DEFAULT_PATH)
if (NOT OATPP_LIB)
  message(SEND_ERROR "Did not find oatpp library ${OATPP_ROOT}/build/src")
endif()
# set the path to the directory containing "oatpp" package configuration files
include_directories(${OATPP_ROOT}/src)

# Use find_package to include OpenTelemetry C++
find_package(opentelemetry-cpp CONFIG REQUIRED NO_DEFAULT_PATH)

# Link against each OpenTelemetry C++ library
target_link_libraries(dice-server PRIVATE
                      ${OATPP_LIB}
                      ${OPENTELEMETRY_CPP_LIBRARIES})

----------------------------------------

TITLE: Configuring Hugo Page Metadata for OpenTelemetry Documentation
DESCRIPTION: This snippet sets up the front matter for a Hugo markdown page, configuring it as a documentation page and setting the title and an alternative title. It also includes a shortcode to display website build information.

LANGUAGE: markdown
CODE:
---
title: Website information
likeTitle: Site info
cascade: { type: docs }
---

{{% site-build-info %}}

----------------------------------------

TITLE: Running Zipkin Docker Container
DESCRIPTION: Docker command to run a Zipkin container instance. Sets up Zipkin on port 9411 with automatic container cleanup when stopped.

LANGUAGE: shell
CODE:
docker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin

----------------------------------------

TITLE: Markdown Introduction for OpenTelemetry Contributors
DESCRIPTION: Markdown welcome message and contribution guidance for OpenTelemetry.io documentation contributors, providing links to detailed documentation.

LANGUAGE: markdown
CODE:
# Contributing to OpenTelemetry.io

**Thanks for your interest in contributing to
[OpenTelemetry.io](https://opentelemetry.io/)!**

To learn how to contribute new content and fixes to this project, see
[Contributing](https://opentelemetry.io/docs/contributing/), which includes a
style guide and useful information on the review process.

----------------------------------------

TITLE: Transformed OpenTelemetry Collector Configuration
DESCRIPTION: The resulting configuration after the Operator reconciles the initial configuration. Shows how static service discovery is replaced with http_sd_configs pointing to the Target Allocator.

LANGUAGE: yaml
CODE:
receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 10s
          http_sd_configs:
            - url: http://collector-with-ta-targetallocator:80/jobs/otel-collector/targets?collector_id=$POD_NAME
          metric_relabel_configs:
            - action: labeldrop
              regex: (id|name)
              replacement: $$1
            - action: labelmap
              regex: label_(.+)
              replacement: $$1

exporters:
  debug:

service:
  pipelines:
    metrics:
      receivers: [prometheus]
      processors: []
      exporters: [debug]

----------------------------------------

TITLE: Adding default_lang_commit to Markdown Front Matter
DESCRIPTION: Example of how to add the default_lang_commit field to the front matter of a localized Markdown page. This field identifies the commit hash of the English version that the translation is based on.

LANGUAGE: markdown
CODE:
---
title: Your localized page title
# ...
default_lang_commit: <most-recent-commit-hash-of-default-language-page>
---

----------------------------------------

TITLE: Including Native Libraries Documentation in Markdown
DESCRIPTION: This snippet demonstrates the use of a partial include statement in a markdown file. It's likely part of a static site generator or documentation system that compiles multiple markdown files into a cohesive documentation set.

LANGUAGE: markdown
CODE:
{{ partial "docs/native-libraries.md" . }}

----------------------------------------

TITLE: Generating OpenTelemetry Support Status Table with Hugo
DESCRIPTION: This code snippet creates a markdown table using Hugo templating to display the support status for traces, metrics, and logs across various programming languages in the OpenTelemetry project. It relies on a data source stored in $.Site.Data.instrumentation to populate the status information.

LANGUAGE: Hugo
CODE:
{{ $data := $.Site.Data.instrumentation }}

Language | Traces | Metrics | Logs |
| --- | --- | --- | --- |
| [C++](/docs/languages/cpp/) | {{ $data.cpp.status.traces | humanize }} | {{ $data.cpp.status.metrics | humanize }} | {{ $data.cpp.status.logs | humanize }} |
| [C#/.NET](/docs/languages/net/) | {{ $data.dotnet.status.traces | humanize }} | {{ $data.dotnet.status.metrics | humanize }} | {{ $data.dotnet.status.logs | humanize }} |
| [Erlang/Elixir](/docs/languages/erlang/) | {{ $data.erlang.status.traces | humanize }} | {{ $data.erlang.status.metrics | humanize }} | {{ $data.erlang.status.logs | humanize }} |
| [Go](/docs/languages/go/) | {{ $data.go.status.traces | humanize }} | {{ $data.go.status.metrics | humanize }} | {{ $data.go.status.logs | humanize }} |
| [Java](/docs/languages/java/) | {{ $data.java.status.traces | humanize }} | {{ $data.java.status.metrics | humanize }} | {{ $data.java.status.logs | humanize }} |
| [JavaScript](/docs/languages/js/) | {{ $data.js.status.traces | humanize }} | {{ $data.js.status.metrics | humanize }} | {{ $data.js.status.logs | humanize }} |
| [PHP](/docs/languages/php/) | {{ $data.php.status.traces | humanize }} | {{ $data.php.status.metrics | humanize }} | {{ $data.php.status.logs | humanize }} |
| [Python](/docs/languages/python/) | {{$data.python.status.traces | humanize }} | {{ $data.python.status.metrics | humanize }} | {{ $data.python.status.logs | humanize }} |
| [Ruby](/docs/languages/ruby/) | {{ $data.ruby.status.traces | humanize }} | {{ $data.ruby.status.metrics | humanize }} | {{ $data.ruby.status.logs | humanize }} |
| [Rust](/docs/languages/rust/) | {{ $data.rust.status.traces | humanize }} | {{ $data.rust.status.metrics | humanize }} | {{ $data.rust.status.logs | humanize }} |
| [Swift](/docs/languages/swift/) | {{ $data.swift.status.traces | humanize }} | {{ $data.swift.status.metrics | humanize }} | {{ $data.swift.status.logs | humanize }} |

----------------------------------------

TITLE: Serving the Website Locally
DESCRIPTION: Command to serve the website locally for development at localhost:1313.

LANGUAGE: sh
CODE:
npm run serve

----------------------------------------

TITLE: Conditional Content Display in Go Template
DESCRIPTION: A Go template conditional block that displays different content based on language parameter. If a language is specified, it shows a link to context propagation docs. If no language is specified, it shows an explanation about context and propagation concepts.

LANGUAGE: gotemplate
CODE:
{{ $lang := .Get 0 | default "" -}}

{{ if $lang -}}

To learn more, see [Context propagation](/docs/concepts/context-propagation).

{{ else -}}

To understand context propagation, you need to understand two separate concepts:
context and propagation.

{{ end -}}

----------------------------------------

TITLE: Initializing and Rendering Benchmark Charts with JavaScript
DESCRIPTION: Main script that processes benchmark data and renders interactive line charts using Chart.js. Handles data collection, chart creation, and click interactions for viewing commit details.

LANGUAGE: javascript
CODE:
    'use strict';
    (function() {
      const COLORS = [
        "#48aaf9",
        "#8a3ef2",
        "#78eeda",
        "#d78000",
        "#1248b3",
        "#97dbfc",
        "#006174",
        "#00b6b6",
        "#854200",
        "#f3c8ad",
        "#410472",
      ];

      function init() {
        function collectBenchesPerTestCase(entries) {
          const map = new Map();
          for (const entry of entries) {
            const {commit, date, tool, benches} = entry;
            for (const bench of benches) {
              const result = { commit, date, tool, bench };
              const arr = map.get(bench.name);
              if (arr === undefined) {
                map.set(bench.name, [result]);
              } else {
                arr.push(result);
              }
            }
          }
          return map;
        }

        const data = window.BENCHMARK_DATA;

        // Render footer
        document.getElementById('dl-button').onclick = () => {
          const dataUrl = 'data:,' + JSON.stringify(data, null, 2);
          const a = document.createElement('a');
          a.href = dataUrl;
          a.download = 'benchmark_data.json';
          a.click();
        };

        // Prepare data points for charts
        return Object.keys(data.entries).map(name => ({
          name,
          dataSet: collectBenchesPerTestCase(data.entries[name]),
        }));
      }

      function renderAllChars(dataSets) {

        function renderGraph(parent, name, dataset) {
          const chartTitle = document.createElement('h3');
          chartTitle.textContent = name;
          parent.append(chartTitle);

          const canvas = document.createElement('canvas');
          canvas.className = 'benchmark-chart';
          parent.appendChild(canvas);

          const color = COLORS[0];
          const data = {
            labels: dataset.map(d => d.commit.id.slice(0, 7)),
            datasets: [
              {
                label: name,
                data: dataset.map(d => d.bench.value),
                borderColor: color,
                backgroundColor: color + '60', // Add alpha for #rrggbbaa,
                fill: false
              }
            ],
          };
          const options = {
            scales: {
              xAxes: [
                {
                  scaleLabel: {
                    display: true,
                    labelString: 'commit',
                  },
                }
              ],
              yAxes: [
                {
                  scaleLabel: {
                    display: true,
                    labelString: dataset.length > 0 ? dataset[0].bench.unit : '',
                  },
                  ticks: {
                    beginAtZero: true,
                  }
                }
              ],
            },
            tooltips: {
              callbacks: {
                afterTitle: items => {
                  const {index} = items[0];
                  const data = dataset[index];
                  return '\n' + data.commit.message + '\n\n' + data.commit.timestamp + ' committed by @' + data.commit.committer.username + '\n';
                },
                label: item => {
                  let label = item.value;
                  const { range, unit } = dataset[item.index].bench;
                  label += ' ' + unit;
                  if (range) {
                    label += ' (' + range + ')';
                  }
                  return label;
                },
                afterLabel: item => {
                  const { extra } = dataset[item.index].bench;
                  return extra ? '\n' + extra : '';
                }
              }
            },
            onClick: (_mouseEvent, activeElems) => {
              if (activeElems.length === 0) {
                return;
              }
              // XXX: Undocumented. How can we know the index?
              const index = activeElems[0]._index;
              const url = dataset[index].commit.url;
              window.open(url, '_blank');
            },
          };

          new Chart(canvas, {
            type: 'line',
            data,
            options,
          });
        }

        function renderBenchSet(name, benchSet, main) {
          const setElem = document.createElement('div');
          setElem.className = 'benchmark-set';
          main.appendChild(setElem);

          const graphsElem = document.createElement('div');
          graphsElem.className = 'benchmark-graphs';
          setElem.appendChild(graphsElem);

          for (const [benchName, benches] of benchSet.entries()) {
            renderGraph(graphsElem, benchName, benches)
          }
        }

        const main = document.getElementById('main');
        for (const {name, dataSet} of dataSets) {
          renderBenchSet(name, dataSet, main);
        }
      }

      renderAllChars(init()); // Start
    })();

----------------------------------------

TITLE: Generating OpenTelemetry Announcement Frontmatter in Markdown/YAML
DESCRIPTION: This snippet demonstrates the frontmatter structure for an OpenTelemetry announcement. It includes dynamic title generation using regular expressions, automatic date formatting, and optional fields for start and end dates.

LANGUAGE: markdown
CODE:
---
title: {{ replaceRE "[-_]" " " .Name | title }}
date: {{ .Date | time.Format "2006-01-02" }} # Start date (optional)
expiryDate: {{ dateFormat "2006-01-02" .Date }} # End date (optional)
---

----------------------------------------

TITLE: Generating Alias Redirects in Hugo Templates
DESCRIPTION: This Hugo template iterates through the 'aliases' page parameter, processes each alias, and generates redirect rules. It handles both absolute and relative paths, using a nested partial for resolving relative redirects. The output format is aligned for readability.

LANGUAGE: go-template
CODE:
{{/* Generate rules for `aliases` page param. */ -}}
{{/* cSpell:ignore cond */ -}}

{{ $p := . -}}
{{ range $alias := $p.Aliases -}}
  {{ if not (strings.HasPrefix $alias "/") -}}
    {{ $alias = partial "relative-redirects-alias"
        (dict
          "alias" $alias
          "p" (cond (strings.HasPrefix $alias "./") $p $p.Parent)
        ) -}}
  {{ end -}}
  {{ $alias | printf "%-35s" }} {{ $p.RelPermalink }}
{{ end -}}

{{- define "partials/relative-redirects-alias" -}}
  {{ $result := "" }}
  {{ if strings.HasPrefix .alias "../" }}
    {{ $result = (partial "relative-redirects-alias"
          (dict
            "alias" (strings.TrimPrefix "../" .alias)
            "p" .p.Parent ))
    }}
  {{ else }}
    {{ $result = path.Join .p.RelPermalink .alias }}
  {{ end }}
  {{ return $result }}
{{ end -}}

----------------------------------------

TITLE: Running Jaeger Docker Container with OTLP Support
DESCRIPTION: Docker command to run Jaeger all-in-one container with UI accessible on port 16686 and OTLP enabled on ports 4317 and 4318. Also enables Zipkin compatibility on port 9411.

LANGUAGE: shell
CODE:
docker run --rm \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest