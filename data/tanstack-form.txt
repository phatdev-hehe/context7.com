TITLE: Implementing TanStack Form with createFormHook Pattern
DESCRIPTION: Demonstrates the recommended way to implement TanStack Form using createFormHook for type-safe form components with built-in validation using Zod schema. This approach provides better scalability and reduces boilerplate in large applications.

LANGUAGE: tsx
CODE:
import React from 'react'
import ReactDOM from 'react-dom/client'
import { createFormHook, createFormHookContexts } from '@tanstack/react-form'
import { TextField, NumberField, SubmitButton } from '~our-app/ui-library'
import { z } from 'zod'

const { fieldContext, formContext } = createFormHookContexts()

const { useAppForm } = createFormHook({
  fieldComponents: {
    TextField,
    NumberField,
  },
  formComponents: {
    SubmitButton,
  },
  fieldContext,
  formContext,
})

const PeoplePage = () => {
  const form = useAppForm({
    defaultValues: {
      username: '',
      age: 0,
    },
    validators: {
      onChange: z.object({
        username: z.string(),
        age: z.number().min(13),
      }),
    },
    onSubmit: ({ value }) => {
      alert(JSON.stringify(value, null, 2))
    },
  })

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault()
        form.handleSubmit()
      }}
    >
      <h1>Personal Information</h1>
      <form.AppField
        name="username"
        children={(field) => <field.TextField label="Full Name" />}
      />
      <form.AppField
        name="age"
        children={(field) => <field.NumberField label="Age" />}
      />
      <form.AppForm>
        <form.SubmitButton />
      </form.AppForm>
    </form>
  )
}

const rootElement = document.getElementById('root')!
ReactDOM.createRoot(rootElement).render(<PeoplePage />)

----------------------------------------

TITLE: Initializing Form Options in TanStack React Form
DESCRIPTION: Creates form options with default values that can be shared between multiple forms using the formOptions function.

LANGUAGE: tsx
CODE:
const formOpts = formOptions({
  defaultValues: {
    firstName: '',
    lastName: '',
    hobbies: [],
  } as Person,
})

----------------------------------------

TITLE: Implementing Schema-Based Validation with Zod in TanStack Form (Angular)
DESCRIPTION: Demonstrates how to use Zod, a schema validation library, with TanStack Form for field validation. The example validates that the age is at least 13.

LANGUAGE: angular-ts
CODE:
import { z } from 'zod'

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{
        onChange: z.number().gte(13, 'You must be 13 to make an account'),
      }"
      #age="field"
    >
      <!-- ... -->
    </ng-container>
  `,
})
export class AppComponent {
  form = injectForm({
    // ...
   })

  z = z

  // ...
}

----------------------------------------

TITLE: Implementing React Form with TanStack Form
DESCRIPTION: A complete example demonstrating how to create a form using TanStack Form with React. Shows form initialization, field validation, async validation, error handling, and submission handling. Includes type-safe field components and a subscription system for form state.

LANGUAGE: tsx
CODE:
import * as React from 'react'
import { createRoot } from 'react-dom/client'
import { useForm } from '@tanstack/react-form'
import type { AnyFieldApi } from '@tanstack/react-form'

function FieldInfo({ field }: { field: AnyFieldApi }) {
  return (
    <>
      {field.state.meta.isTouched && field.state.meta.errors.length ? (
        <em>{field.state.meta.errors.join(', ')}</em>
      ) : null}
      {field.state.meta.isValidating ? 'Validating...' : null}
    </>
  )
}

export default function App() {
  const form = useForm({
    defaultValues: {
      firstName: '',
      lastName: '',
    },
    onSubmit: async ({ value }) => {
      // Do something with form data
      console.log(value)
    },
  })

  return (
    <div>
      <h1>Simple Form Example</h1>
      <form
        onSubmit={(e) => {
          e.preventDefault()
          e.stopPropagation()
          form.handleSubmit()
        }}
      >
        <div>
          {/* A type-safe field component*/}
          <form.Field
            name="firstName"
            validators={{
              onChange: ({ value }) =>
                !value
                  ? 'A first name is required'
                  : value.length < 3
                    ? 'First name must be at least 3 characters'
                    : undefined,
              onChangeAsyncDebounceMs: 500,
              onChangeAsync: async ({ value }) => {
                await new Promise((resolve) => setTimeout(resolve, 1000))
                return (
                  value.includes('error') && 'No "error" allowed in first name'
                )
              },
            }}
            children={(field) => {
              // Avoid hasty abstractions. Render props are great!
              return (
                <>
                  <label htmlFor={field.name}>First Name:</label>
                  <input
                    id={field.name}
                    name={field.name}
                    value={field.state.value}
                    onBlur={field.handleBlur}
                    onChange={(e) => field.handleChange(e.target.value)}
                  />
                  <FieldInfo field={field} />
                </>
              )
            }}
          />
        </div>
        <div>
          <form.Field
            name="lastName"
            children={(field) => (
              <>
                <label htmlFor={field.name}>Last Name:</label>
                <input
                  id={field.name}
                  name={field.name}
                  value={field.state.value}
                  onBlur={field.handleBlur}
                  onChange={(e) => field.handleChange(e.target.value)}
                />
                <FieldInfo field={field} />
              </>
            )}
          />
        </div>
        <form.Subscribe
          selector={(state) => [state.canSubmit, state.isSubmitting]}
          children={([canSubmit, isSubmitting]) => (
            <button type="submit" disabled={!canSubmit}>
              {isSubmitting ? '...' : 'Submit'}
            </button>
          )}
        />
      </form>
    </div>
  )
}

const rootElement = document.getElementById('root')!

createRoot(rootElement).render(<App />)

----------------------------------------

TITLE: Creating Custom Form Hook with TanStack Form in TypeScript
DESCRIPTION: Demonstrates how to create a custom form hook using createFormHook and createFormHookContexts from TanStack Form. This setup allows for tailored form hooks with pre-bound custom UI components.

LANGUAGE: tsx
CODE:
import { createFormHookContexts, createFormHook } from '@tanstack/react-form'

export const { fieldContext, formContext, useFieldContext } =
  createFormHookContexts()

const { useAppForm } = createFormHook({
  fieldContext,
  formContext,
  fieldComponents: {},
  formComponents: {},
})

function App() {
  const form = useAppForm({
    defaultValues: {
      firstName: 'John',
      lastName: 'Doe',
    },
  })

  return <form.Field /> // ...
}

----------------------------------------

TITLE: Preventing Invalid Form Submission in TanStack Form (Angular)
DESCRIPTION: Shows how to prevent invalid forms from being submitted using TanStack Form. It demonstrates subscribing to the form's canSubmit state and using it to disable the submit button.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <!-- ... -->
    <button type="submit" [disabled]="!canSubmit()">
      {{ isSubmitting() ? '...' : 'Submit' }}
    </button>
  `,
})
export class AppComponent {
  canSubmit = injectStore(this.form, (state) => state.canSubmit)
  isSubmitting = injectStore(this.form, (state) => state.isSubmitting)

  // ...
}

----------------------------------------

TITLE: Implementing onChange Validation in TanStack Form
DESCRIPTION: This snippet demonstrates how to implement onChange validation for a form field using TanStack Form. It shows how to define a validator function and display validation errors.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: ({ value }) =>
      value < 13 ? 'You must be 13 to make an account' : undefined,
  }}
>
  {(field) => (
    <>
      <label htmlFor={field.name}>Age:</label>
      <input
        id={field.name}
        name={field.name}
        value={field.state.value}
        type="number"
        onChange={(e) => field.handleChange(e.target.valueAsNumber)}
      />
      {field.state.meta.errors ? (
        <em role="alert">{field.state.meta.errors.join(', ')}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Creating Form Instance with Form Options
DESCRIPTION: Demonstrates creating a form instance using the useForm hook with predefined form options and an onSubmit handler.

LANGUAGE: tsx
CODE:
const form = useForm({
  ...formOpts,
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
})

----------------------------------------

TITLE: Preventing Invalid Form Submission in Vue with TanStack Form
DESCRIPTION: This example shows how to prevent invalid form submissions using TanStack Form in Vue. It demonstrates subscribing to the form's state to disable the submit button when the form is invalid.

LANGUAGE: vue
CODE:
<script setup lang="ts">
const form = useForm(/* ... */)
</script>

<template>
  <!-- ... -->

  <!-- Dynamic submit button -->
  <form.Subscribe>
    <template v-slot="{ canSubmit, isSubmitting }">
      <button type="submit" :disabled="!canSubmit">
        {{ isSubmitting ? '...' : 'Submit' }}
      </button>
    </template>
  </form.Subscribe>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Initializing TanStack Form with TypeScript
DESCRIPTION: Demonstrates the preferred way to initialize TanStack Form using runtime defaults for type inference, avoiding explicit generics.

LANGUAGE: typescript
CODE:
useForm({
  defaultValues: {
    name: 'Bill Luo',
    age: 24,
  } as MyForm,
})

----------------------------------------

TITLE: Preventing Invalid Form Submission in TanStack Form
DESCRIPTION: This example demonstrates how to prevent invalid form submission using TanStack Form. It shows how to subscribe to the form's canSubmit state and disable the submit button when the form is invalid.

LANGUAGE: tsx
CODE:
const form = useForm(/* ... */)

return (
  /* ... */

  // Dynamic submit button
  <form.Subscribe
    selector={(state) => [state.canSubmit, state.isSubmitting]}
    children={([canSubmit, isSubmitting]) => (
      <button type="submit" disabled={!canSubmit}>
        {isSubmitting ? '...' : 'Submit'}
      </button>
    )}
  />
)

----------------------------------------

TITLE: Implementing Basic TanStack Form in Vue.js
DESCRIPTION: This snippet shows how to create a simple form using TanStack Form in a Vue.js component. It includes setting up the form with default values, handling form submission, and rendering a single input field for the user's full name.

LANGUAGE: vue
CODE:
<!-- App.vue -->
<script setup>
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    fullName: '',
  },
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
})
</script>

<template>
  <div>
    <form @submit.prevent.stop="form.handleSubmit">
      <div>
        <form.Field name="fullName">
          <template v-slot="{ field }">
            <input
              :name="field.name"
              :value="field.state.value"
              @blur="field.handleBlur"
              @input="(e) => field.handleChange(e.target.value)"
            />
          </template>
        </form.Field>
      </div>
      <button type="submit">Submit</button>
    </form>
  </div>
</template>

----------------------------------------

TITLE: Integrating TanStack Form with Mantine Components in React
DESCRIPTION: This example demonstrates how to use TanStack Form with Mantine UI components. It shows the setup of a form with TextInput and Checkbox components, handling state changes and form submission.

LANGUAGE: tsx
CODE:
import { TextInput, Checkbox } from '@mantine/core'
import { useForm } from '@tanstack/react-form'

export default function App() {
  const { Field, handleSubmit, state } = useForm({
    defaultValues: {
      firstName: '',
      lastName: '',
      isChecked: false,
    },
    onSubmit: async ({ value }) => {
      // Handle form submission
      console.log(value)
    },
  })

  return (
    <>
      <form
        onSubmit={(e) => {
          e.preventDefault()
          handleSubmit()
        }}
      >
        <Field
          name="firstName"
          children={({ state, handleChange, handleBlur }) => (
            <TextInput
              defaultValue={state.value}
              onChange={(e) => handleChange(e.target.value)}
              onBlur={handleBlur}
              placeholder="Enter your name"
            />
          )}
        />
        <Field
          name="isChecked"
          children={({ state, handleChange, handleBlur }) => (
            <Checkbox
              onChange={(e) => handleChange(e.target.checked)}
              onBlur={handleBlur}
              checked={state.value}
            />
          )}
        />
      </form>
      <div>
        <pre>{JSON.stringify(state.values, null, 2)}</pre>
      </div>
    </>
  )
}

----------------------------------------

TITLE: Implementing Basic TanStack Form in Angular
DESCRIPTION: This snippet shows how to create a basic form using TanStack Form in an Angular application. It includes setting up a form with a single 'fullName' field, handling form submission, and using the TanStackField directive for form control.

LANGUAGE: angular-ts
CODE:
import { Component } from '@angular/core'
import { bootstrapApplication } from '@angular/platform-browser'
import { TanStackField, injectForm } from '@tanstack/angular-form'

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <form (submit)="handleSubmit($event)">
      <div>
        <ng-container
          [tanstackField]="form"
          name="fullName"
          #fullName="field"
        >
          <label [for]="fullName.api.name">First Name:</label>
          <input
            [name]="fullName.api.name"
            [value]="fullName.api.state.value"
            (blur)="fullName.api.handleBlur()"
            (input)="fullName.api.handleChange($any($event).target.value)"
          />
        </ng-container>
      </div>
      <button type="submit">Submit</button>
    </form>
  `,
})
export class AppComponent {
  form = injectForm({
    defaultValues: {
      fullName: '',
    },
    onSubmit({ value }) {
      // Do something with form data
      console.log(value)
    },
  })

  handleSubmit(event: SubmitEvent) {
    event.preventDefault()
    event.stopPropagation()
    this.form.handleSubmit()
  }
}

bootstrapApplication(AppComponent).catch((err) => console.error(err))

----------------------------------------

TITLE: Implementing Field-Level Validation in TanStack Form (Angular)
DESCRIPTION: Demonstrates how to implement field-level validation for an age input using TanStack Form in Angular. The validation is performed on change and displays an error message if the age is less than 13.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{
        onChange: ageValidator
      }"
      #age="field"
    >
      <label [for]="age.api.name">Age:</label>
      <input
        [id]="age.api.name"
        [name]="age.api.name"
        [value]="age.api.state.value"
        type="number"
        (input)="age.api.handleChange($any($event).target.valueAsNumber)"
      />
      @if (age.api.state.meta.errors) {
        <em role="alert">{{ age.api.state.meta.errors.join(', ') }}</em>
      }
    </ng-container>
  `,
})
export class AppComponent {
  ageValidator: FieldValidateFn<any, any, any, any, number> = ({ value }) =>
    value < 13 ? 'You must be 13 to make an account' : undefined

  // ...
}

----------------------------------------

TITLE: Asynchronous Validation in TanStack Form
DESCRIPTION: This example demonstrates how to implement asynchronous validation for a form field using TanStack Form. It shows how to define an async validator function and handle the validation results.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChangeAsync: async ({ value }) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return value < 13 ? 'You must be 13 to make an account' : undefined
    },
  }}
>
  {(field) => (
    <>
      <label htmlFor={field.name}>Age:</label>
      <input
        id={field.name}
        name={field.name}
        value={field.state.value}
        type="number"
        onChange={(e) => field.handleChange(e.target.valueAsNumber)}
      />
      {field.state.meta.errors ? (
        <em role="alert">{field.state.meta.errors.join(', ')}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Implementing Form Validation with Schema Libraries
DESCRIPTION: Demonstrates form validation using standard schema libraries like Zod, including both synchronous and asynchronous validation.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'
import { z } from 'zod'

const form = useForm({
  // ...
})

const onChangeFirstName = z.string().refine(
  async (value) => {
    await new Promise((resolve) => setTimeout(resolve, 1000))
    return !value.includes('error')
  },
  {
    message: "No 'error' allowed in first name",
  },
)
</script>

----------------------------------------

TITLE: Creating Pre-bound TextField Component for TanStack Form
DESCRIPTION: Shows how to create a custom TextField component that can be pre-bound to a TanStack Form. This component uses the useFieldContext hook to access field state and handlers.

LANGUAGE: tsx
CODE:
import { useFieldContext } from './form-context.tsx'

export function TextField({ label }: { label: string }) {
  const field = useFieldContext<string>()
  return (
    <label>
      <div>{label}</div>
      <input
        value={field.state.value}
        onChange={(e) => field.handleChange(e.target.value)}
      />
    </label>
  )
}

----------------------------------------

TITLE: Implementing Form-Level Validation in TanStack Form (Angular)
DESCRIPTION: Demonstrates how to implement form-level validation using TanStack Form. The validation is applied to the entire form rather than individual fields.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <div>
      <ng-container [tanstackField]="form" name="age" #age="field">
        <!-- ... -->
        @if (formErrorMap().onChange) {
          <div>
            <em
              >There was an error on the form: {{ formErrorMap().onChange }}</em
            >
          </div>
        }
        <!-- ... -->
      </ng-container>
    </div>
  `,
})
export class AppComponent {
  form = injectForm({
    defaultValues: {
      age: 0,
    },
    onSubmit({ value }) {
      console.log(value)
    },
    validators: {
      onChange({ value }) {
        if (value.age < 13) {
          return 'Must be 13 or older to sign'
        }
        return undefined
      },
    },
  })

  formErrorMap = injectStore(this.form, (state) => state.errorMap)
}

----------------------------------------

TITLE: Schema-based Validation with Zod in TanStack Form
DESCRIPTION: This snippet shows how to use Zod, a schema validation library, with TanStack Form. It demonstrates defining a schema and using it for form validation.

LANGUAGE: tsx
CODE:
const userSchema = z.object({
  age: z.number().gte(13, 'You must be 13 to make an account'),
})

function App() {
  const form = useForm({
    defaultValues: {
      age: 0,
    },
    validators: {
      onChange: userSchema,
    },
  })
  return (
    <div>
      <form.Field
        name="age"
        children={(field) => {
          return <>{/* ... */}</>
        }}
      />
    </div>
  )
}

----------------------------------------

TITLE: Using Zod for Schema Validation in @tanstack/angular-form
DESCRIPTION: Demonstrates how to use the Zod library for schema-based validation in @tanstack/angular-form, including both synchronous and asynchronous validation.

LANGUAGE: typescript
CODE:
import { z } from 'zod'

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="firstName"
      [validators]="{
        onChange: z.string().min(3, 'First name must be at least 3 characters'),
        onChangeAsyncDebounceMs: 500,
        onChangeAsync: firstNameAsyncValidator
      }"
      #firstName="field"
    >
      <!-- ... -->
    </ng-container>
  `,
})
export class AppComponent {
  firstNameAsyncValidator = z.string().refine(
    async (value) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return !value.includes('error')
    },
    {
      message: "No 'error' allowed in first name",
    },
  )

  form = injectForm({
    defaultValues: {
      firstName: '',
    },
    onSubmit({ value }) {
      // Do something with form data
      console.log(value)
    },
  })

  z = z
}

----------------------------------------

TITLE: Basic Array Field Implementation in TanStack Form
DESCRIPTION: Basic setup for handling array values in TanStack Form using form.Field with array mode. Shows the initial structure for mapping array elements.

LANGUAGE: jsx
CODE:
function App() {
  const form = useForm({
    defaultValues: {
      people: [],
    },
  })

  return (
    <form.Field name="people" mode="array">
      {(field) => (
        <div>
          {field.state.value.map((_, i) => {
            // ...
          })}
        </div>
      )}
    </form.Field>
  )
}

----------------------------------------

TITLE: Implementing Field Validation in @tanstack/angular-form
DESCRIPTION: Shows how to implement synchronous and asynchronous field validation using custom validator functions and the Zod schema library.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container [tanstackField]="form" name="firstName" #firstName="field">
      <input
        [value]="firstName.api.state.value"
        (blur)="firstName.api.handleBlur()"
        (input)="firstName.api.handleChange($any($event).target.value)"
      />
    </ng-container>
  `,
})
export class AppComponent {
  firstNameValidator: FieldValidateFn<any, any, string, any> = ({
                                                                       value,
                                                                     }) =>
    !value
      ? 'A first name is required'
      : value.length < 3
        ? 'First name must be at least 3 characters'
        : undefined

  firstNameAsyncValidator: FieldValidateAsyncFn<any, string, any> =
    async ({ value }) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return value.includes('error') && 'No "error" allowed in first name'
    }

  form = injectForm({
    defaultValues: {
      firstName: '',
    },
    onSubmit({ value }) {
      console.log(value)
    },
  })
}

----------------------------------------

TITLE: Implementing TanStack Form Field in React Native
DESCRIPTION: This snippet demonstrates how to use the TanStack Form Field component in a React Native application. It includes validation, error handling, and integration with React Native's TextInput component.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: (val) =>
      val < 13 ? 'You must be 13 to make an account' : undefined,
  }}
>
  {(field) => (
    <>
      <Text>Age:</Text>
      <TextInput value={field.state.value} onChangeText={field.handleChange} />
      {field.state.meta.errors ? (
        <Text>{field.state.meta.errors.join(', ')}</Text>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Form-Level Validation in TanStack Form
DESCRIPTION: This snippet demonstrates how to implement form-level validation using TanStack Form. It shows how to define validators for the entire form and display form-level errors.

LANGUAGE: tsx
CODE:
export default function App() {
  const form = useForm({
    defaultValues: {
      age: 0,
    },
    onSubmit: async ({ value }) => {
      console.log(value)
    },
    validators: {
      onChange({ value }) {
        if (value.age < 13) {
          return 'Must be 13 or older to sign'
        }
        return undefined
      },
    },
  })

  const formErrorMap = useStore(form.store, (state) => state.errorMap)

  return (
    <div>
      {/* ... */}
      {formErrorMap.onChange ? (
        <div>
          <em>There was an error on the form: {formErrorMap.onChange}</em>
        </div>
      ) : null}
      {/* ... */}
    </div>
  )
}

----------------------------------------

TITLE: Displaying Validation Errors in TanStack Form (Angular)
DESCRIPTION: Shows how to display validation errors in the UI. It demonstrates two approaches: displaying all errors as a comma-separated list and accessing specific errors using the errorMap property.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{
        onChange: ageValidator
      }"
      #age="field"
    >
      <!-- ... -->
      @if (age.api.state.meta.errors) {
        <em role="alert">{{ age.api.state.meta.errors.join(', ') }}</em>
      }
      @if (age.api.state.meta.errorMap['onChange']) {
        <em role="alert">{{ age.api.state.meta.errorMap['onChange'] }}</em>
      }
    </ng-container>
  `,
})
export class AppComponent {
  ageValidator: FieldValidateFn<any, any, any, any, number> = ({ value }) =>
    value < 13 ? 'You must be 13 to make an account' : undefined

  // ...
}

----------------------------------------

TITLE: Fetching Initial Form Values with React Query in TypeScript
DESCRIPTION: Demonstrates how to use TanStack Query to fetch initial form values asynchronously and populate a TanStack Form. The example shows handling loading states and integrating the fetched data with form initialization.

LANGUAGE: tsx
CODE:
import { useForm } from '@tanstack/react-form'
import { useQuery } from '@tanstack/react-query'

export default function App() {
  const {data, isLoading} = useQuery({
    queryKey: ['data'],
    queryFn: async () => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return {firstName: 'FirstName', lastName: "LastName"}
    }
  })

  const form = useForm({
    defaultValues: {
      firstName: data?.firstName ?? '',
      lastName: data?.lastName ?? '',
    },
    onSubmit: async ({ value }) => {
      // Do something with form data
      console.log(value)
    },
  })

  if (isLoading) return <p>Loading..</p>

  return (
    // ...
  )
}

----------------------------------------

TITLE: Implementing Form-Level Validation in Vue with TanStack Form
DESCRIPTION: This snippet shows how to implement form-level validation using TanStack Form in Vue. It demonstrates adding validators to the form and displaying form-level error messages.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    age: 0,
  },
  onSubmit: async ({ value }) => {
    console.log(value)
  },
  validators: {
    // Add validators to the form the same way you would add them to a field
    onChange({ value }) {
      if (value.age < 13) {
        return 'Must be 13 or older to sign'
      }
      return undefined
    },
  },
})

// Subscribe to the form's error map so that updates to it will render
// alternately, you can use `form.Subscribe`
const formErrorMap = form.useStore((state) => state.errorMap)
</script>

<template>
  <!-- ... -->
  <div v-if="formErrorMap.onChange">
    <em role="alert">
      There was an error on the form: {{ formErrorMap.onChange }}
    </em>
  </div>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Complete TanStack Form Composition Example
DESCRIPTION: A comprehensive example demonstrating the integration of custom hooks, pre-bound components, and form composition techniques using TanStack Form across different parts of an application.

LANGUAGE: tsx
CODE:
// /src/hooks/form.ts, to be used across the entire app
const { fieldContext, useFieldContext, formContext, useFormContext } =
  createFormHookContexts()

function TextField({ label }: { label: string }) {
  const field = useFieldContext<string>()
  return (
    <label>
      <div>{label}</div>
      <input
        value={field.state.value}
        onChange={(e) => field.handleChange(e.target.value)}
      />
    </label>
  )
}

function SubscribeButton({ label }: { label: string }) {
  const form = useFormContext()
  return (
    <form.Subscribe selector={(state) => state.isSubmitting}>
      {(isSubmitting) => <button disabled={isSubmitting}>{label}</button>}
    </form.Subscribe>
  )
}

const { useAppForm, withForm } = createFormHook({
  fieldComponents: {
    TextField,
  },
  formComponents: {
    SubscribeButton,
  },
  fieldContext,
  formContext,
})

// /src/features/people/shared-form.ts, to be used across `people` features
const formOpts = formOptions({
  defaultValues: {
    firstName: 'John',
    lastName: 'Doe',
  },
})

// /src/features/people/nested-form.ts, to be used in the `people` page
const ChildForm = withForm({
  ...formOpts,
  props: {
    title: 'Child Form',
  },
  render: ({ form, title }) => {
    return (
      <div>
        <p>{title}</p>
        <form.AppField
          name="firstName"
          children={(field) => <field.TextField label="First Name" />}
        />
        <form.AppForm>
          <form.SubscribeButton label="Submit" />
        </form.AppForm>
      </div>
    )
  },
})

// /src/features/people/page.ts
const Parent = () => {
  const form = useAppForm({
    ...formOpts,
  })

  return <ChildForm form={form} title={'Testing'} />
}

----------------------------------------

TITLE: Implementing Field-Level Validation in Vue with TanStack Form
DESCRIPTION: This snippet demonstrates how to implement field-level validation for an age input using TanStack Form in Vue. It shows validation on change and how to display error messages.

LANGUAGE: vue
CODE:
<template>
  <!-- ... -->
  <form.Field
    name="age"
    :validators="{
      onChange: ({ value }) =>
        value < 13 ? 'You must be 13 to make an account' : undefined,
    }"
  >
    <template v-slot="{ field }">
      <label :for="field.name">Age:</label>
      <input
        :id="field.name"
        :name="field.name"
        :value="field.state.value"
        type="number"
        @input="(e) => field.handleChange((e.target as HTMLInputElement).valueAsNumber)
                "
      />
      <em role="alert" v-if="field.state.meta.errors">{{
        field.state.meta.errors.join(', ')
      }}</em>
    </template>
  </form.Field>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Complete Array Handling Example in TanStack Form
DESCRIPTION: A full example demonstrating array field usage in TanStack Form, including form creation, array rendering, adding new items, and handling sub-fields.

LANGUAGE: jsx
CODE:
function App() {
  const form = createForm(() => ({
    defaultValues: {
      people: [],
    },
    onSubmit: ({ value }) => alert(JSON.stringify(value)),
  }))

  return (
    <div>
      <form
        onSubmit={(e) => {
          e.preventDefault()
          e.stopPropagation()
          form.handleSubmit()
        }}
      >
        <form.Field name="people">
          {(field) => (
            <div>
              <Show when={field().state.value.length > 0}>
                {/* Do not change this to For or the test will fail */}
                <Index each={field().state.value}>
                  {(_, i) => (
                    <form.Field name={`people[${i}].name`}>
                      {(subField) => (
                        <div>
                          <label>
                            <div>Name for person {i}</div>
                            <input
                              value={subField().state.value}
                              onInput={(e) => {
                                subField().handleChange(e.currentTarget.value)
                              }}
                            />
                          </label>
                        </div>
                      )}
                    </form.Field>
                  )}
                </Index>
              </Show>

              <button
                onClick={() => field().pushValue({ name: '', age: 0 })}
                type="button"
              >
                Add person
              </button>
            </div>
          )}
        </form.Field>
        <button type="submit">Submit</button>
      </form>
    </div>
  )
}

----------------------------------------

TITLE: Complete TanStack Form Array Implementation
DESCRIPTION: Full implementation example showing a complete form with array handling, including form submission, reset functionality, and dynamic array manipulation.

LANGUAGE: typescript
CODE:
export class TestForm extends LitElement {
  #form = new TanStackFormController(this, {
    defaultValues: {
      people: [] as Array<{ name: string}>,
    },
  });
  render() {
    return html`
      <form
        id="form"
        @submit=${(e: Event) => {
          e.preventDefault();
        }}
      >
        <h1>Please enter your details</h1>
        ${this.#form.field(
          {
            name: `people`,
          },
          (peopleField) => {
            return html`${repeat(
                peopleField.state.value,
                (_, index) => index,
                (_, index) => {
                  return html`
                    ${this.#form.field(
                      {
                        name: `people[${index}].name`,
                      },
                      (field) => {
                        return html` <div>
                          <div class="container">
                            <label>Name</label>
                            <input
                              type="text"
                              placeholder="Name"
                              .value="${field.state.value}"
                              @input="${(e: Event) => {
                                const target = e.target as HTMLInputElement;
                                field.handleChange(target.value);
                              }}"
                            />
                          </div>
                        </div>`;
                      }
                    )}
                  `;
                }
              )}

              <div class="container">
                <button
                  type="button"
                  @click=${() => {
                    peopleField.pushValue({
                      name: "",
                    });
                  }}
                >
                  Add Person
                </button>
              </div> `;
          }
        )}

        <div class="container">
          <button type="submit" ?disabled=${this.#form.api.state.isSubmitting}>
            ${this.#form.api.state.isSubmitting ? html` Submitting` : "Submit"}
          </button>
          <button
            type="button"
            id="reset"
            @click=${() => {
              this.#form.api.reset();
            }}
          >
            Reset
          </button>
        </div>
      </form>
    `;
  }

declare global {
  interface HTMLElementTagNameMap {
    "test-form": TestForm;
  }
}}

----------------------------------------

TITLE: Implementing Form Listeners
DESCRIPTION: Shows how to implement form field listeners for handling side effects on value changes.

LANGUAGE: tsx
CODE:
<form.Field
  name="country"
  listeners={{
    onChange: ({ value }) => {
      console.log(`Country changed to: ${value}, resetting province`)
      form.setFieldValue('province', '')
    },
  }}
/>

----------------------------------------

TITLE: Complete TanStack Form Implementation with LitElement
DESCRIPTION: Full implementation of a test form component using TanStack Form and LitElement, including field validation and event handling for a first name input field.

LANGUAGE: typescript
CODE:
export class TestForm extends LitElement {
  #form = new TanStackFormController<Employee>(this, {
    defaultValues: {
      firstName: '',
      lastName: '',
      employed: false,
      jobTitle: '',
    },
  })
  render() {
    return html` <p>Please enter your first name></p>
      ${this.#form.field(
        {
          name: `firstName`,
          validators: {
            onChange: ({ value }) =>
              value.length < 3 ? 'Not long enough' : undefined,
          },
        },
        (field: FieldApi<Employee, 'firstName'>) => {
          return html` <div>
            <label class="first-name-label">First Name</label>
            <input
              id="firstName"
              type="text"
              placeholder="First Name"
              @blur="${() => field.handleBlur()}"
              .value="${field.getValue()}"
              @input="${(event: InputEvent) => {
                if (event.currentTarget) {
                  const newValue = (event.currentTarget as HTMLInputElement)
                    .value
                  field.handleChange(newValue)
                }
              }}"
            />
          </div>`
        },
      )}`
  }
}

----------------------------------------

TITLE: Configuring Async Validation
DESCRIPTION: Configuration option for controlling async validation behavior. When set to true, async validation will run even if sync validation produces errors.

LANGUAGE: typescript
CODE:
optional asyncAlways: boolean;

----------------------------------------

TITLE: Full Example of Array Handling in TanStack Form for Angular
DESCRIPTION: Provides a complete example of an Angular component using TanStack Form to handle an array of people, including adding new elements and rendering inputs for each person's name.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <form (submit)="handleSubmit($event)">
      <div>
        <ng-container [tanstackField]="form" name="people" #people="field">
          <div>
            @for (_ of people.api.state.value; track $index) {
              <ng-container
                [tanstackField]="form"
                [name]="getPeopleName($index)"
                #person="field"
              >
                <div>
                  <label>
                    <div>Name for person {{ $index }}</div>
                    <input
                      [value]="person.api.state.value"
                      (input)="
                        person.api.handleChange($any($event).target.value)
                      "
                    />
                  </label>
                </div>
              </ng-container>
            }
          </div>
          <button (click)="people.api.pushValue(defaultPerson)" type="button">
            Add person
          </button>
        </ng-container>
      </div>
      <button type="submit" [disabled]="!canSubmit()">
        {{ isSubmitting() ? '...' : 'Submit' }}
      </button>
    </form>
  `,
})
export class AppComponent {
  defaultPerson = { name: '', age: 0 }

  form = injectForm({
    defaultValues: {
      people: [] as Array<{ name: string; age: number }>,
    },
    onSubmit({ value }) {
      alert(JSON.stringify(value))
    },
  })


  getPeopleName = (idx: number) => `people[${idx}].name` as const;

  canSubmit = injectStore(this.form, (state) => state.canSubmit)
  isSubmitting = injectStore(this.form, (state) => state.isSubmitting)

  handleSubmit(event: SubmitEvent) {
    event.preventDefault()
    event.stopPropagation()
    this.form.handleSubmit()
  }
}

----------------------------------------

TITLE: Defining useForm Function in TypeScript
DESCRIPTION: This snippet defines the useForm function with multiple generic type parameters for various form validation and submission scenarios. It takes an optional FormOptions object and returns a combined FormApi and VueFormApi.

LANGUAGE: typescript
CODE:
function useForm<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>(opts?): FormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta> & VueFormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>

----------------------------------------

TITLE: Accessing Field State in @tanstack/angular-form
DESCRIPTION: Demonstrates how to access various properties of a field's state, including value, validation errors, and interaction flags.

LANGUAGE: typescript
CODE:
const {
  value,
  meta: { errors, isValidating },
} = field.state

const { isTouched, isPristine, isDirty } = field.state.meta

----------------------------------------

TITLE: Combining onChange and onBlur Validation in TanStack Form
DESCRIPTION: This snippet demonstrates how to combine onChange and onBlur validation for a single form field using TanStack Form. It shows how to define different validation rules for different events.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: ({ value }) =>
      value < 13 ? 'You must be 13 to make an account' : undefined,
    onBlur: ({ value }) => (value < 0 ? 'Invalid value' : undefined),
  }}
>
  {(field) => (
    <>
      <label htmlFor={field.name}>Age:</label>
      <input
        id={field.name}
        name={field.name}
        value={field.state.value}
        type="number"
        onBlur={field.handleBlur}
        onChange={(e) => field.handleChange(e.target.valueAsNumber)}
      />
      {field.state.meta.errors ? (
        <em role="alert">{field.state.meta.errors.join(', ')}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Implementing Linked Password Fields with TanStack Form in TypeScript React
DESCRIPTION: This code snippet shows how to create a form with linked password and confirm password fields using TanStack Form. It demonstrates the use of the 'onChangeListenTo' property to ensure that the confirm password field is re-validated when the password field changes.

LANGUAGE: tsx
CODE:
function App() {
  const form = useForm({
    defaultValues: {
      password: '',
      confirm_password: '',
    },
    // ...
  })

  return (
    <div>
      <form.Field name="password">
        {(field) => (
          <label>
            <div>Password</div>
            <input
              value={field.state.value}
              onChange={(e) => field.handleChange(e.target.value)}
            />
          </label>
        )}
      </form.Field>
      <form.Field
        name="confirm_password"
        validators={{
          onChangeListenTo: ['password'],
          onChange: ({ value, fieldApi }) => {
            if (value !== fieldApi.form.getFieldValue('password')) {
              return 'Passwords do not match'
            }
            return undefined
          },
        }}
      >
        {(field) => (
          <div>
            <label>
              <div>Confirm Password</div>
              <input
                value={field.state.value}
                onChange={(e) => field.handleChange(e.target.value)}
              />
            </label>
            {field.state.meta.errors.map((err) => (
              <div key={err}>{err}</div>
            ))}
          </div>
        )}
      </form.Field>
    </div>
  )
}

----------------------------------------

TITLE: FormApi Constructor Definition
DESCRIPTION: Constructor for creating a new FormApi instance with type parameters for form data and various validation handlers.

LANGUAGE: typescript
CODE:
new FormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>(opts?): FormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>

----------------------------------------

TITLE: Implementing Blur-Based Validation in TanStack Form (Angular)
DESCRIPTION: Shows how to modify the previous example to perform validation on blur instead of on change. The validation logic remains the same, but the event triggering the validation is changed.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{
        onBlur: ageValidator
      }"
      #age="field"
    >
      <label [for]="age.api.name">Age:</label>
      <input
        [id]="age.api.name"
        [name]="age.api.name"
        [value]="age.api.state.value"
        type="number"
        (blur)='age.api.handleBlur()'
        (input)="age.api.handleChange($any($event).target.valueAsNumber)"
      />
      @if (age.api.state.meta.errors) {
        <em role="alert">{{ age.api.state.meta.errors.join(', ') }}</em>
      }
    </ng-container>
  `,
})
export class AppComponent {
  ageValidator: FieldValidateFn<any, any, any, any, number> = ({ value }) =>
    value < 13 ? 'You must be 13 to make an account' : undefined

  // ...
}

----------------------------------------

TITLE: Basic Field Validation in TanStack Form
DESCRIPTION: Implementation of field-level validation with onChange handler for age validation. Shows how to display validation errors and handle input changes.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: ({ value }) =>
      value < 13 ? 'You must be 13 to make an account' : undefined,
  }}
>
  {(field) => (
    <>
      <label for={field().name}>Age:</label>
      <input
        id={field().name}
        name={field().name}
        value={field().state.value}
        type="number"
        onInput={(e) => field().handleChange(e.target.valueAsNumber)}
      />
      {field().state.meta.errors ? (
        <em role="alert">{field().state.meta.errors.join(', ')}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Implementing Field Change Listeners in Angular with TanStack Form
DESCRIPTION: Example showing how to implement field listeners in an Angular component using TanStack Form. The code demonstrates resetting a province field when a country selection changes, using the onChange listener.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="country"
      [listeners]="{
        onChange: onCountryChange
      }"
      #country="field"
    ></ng-container>

    <ng-container
      [tanstackField]="form"
      name="province"
      #province="field"
    ></ng-container>
  `,
})

export class AppComponent {
  form = injectForm({
    defaultValues: {
      country: '',
      province: '',
    },
  })

  onCountryChange: FieldListenerFn<any, any, any, any, string> = ({
    value,
  }) => {
    console.log(`Country changed to: ${value}, resetting province`)
    this.form.setFieldValue('province', '')
  }
}

----------------------------------------

TITLE: Using Listeners in @tanstack/angular-form
DESCRIPTION: Demonstrates how to use listeners to react to specific triggers and dispatch side effects in response to form field changes.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="country"
      [listeners]="{
        onChange: onCountryChange
      }"
      #country="field"
    ></ng-container>
  `,
})

...

onCountryChange: FieldListenerFn<any, any, any, any, string> = ({
    value,
  }) => {
    console.log(`Country changed to: ${value}, resetting province`)
    this.form.setFieldValue('province', '')
  }

----------------------------------------

TITLE: Implementing Asynchronous Validation in TanStack Form (Angular)
DESCRIPTION: Shows how to implement asynchronous validation in TanStack Form. The validation simulates an API call with a 1-second delay before checking if the age is at least 13.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{ onChangeAsync: ageValidator }"
      #age="field"
    >
      <label [for]="age.api.name">Last Name:</label>
      <input
        [id]="age.api.name"
        [name]="age.api.name"
        [value]="age.api.state.value"
        type="number"
        (input)="age.api.handleChange($any($event).target.valueAsNumber)"
      />
      @if (age.api.state.meta.errors) {
        <em role="alert">{{ age.api.state.meta.errors.join(', ') }}</em>
      }
    </ng-container>
  `,
})
export class AppComponent {
  ageValidator: FieldValidateAsyncFn<any, string, number> = async ({
    value,
  }) => {
    await new Promise((resolve) => setTimeout(resolve, 1000))
    return value < 13 ? 'You must be 13 to make an account' : undefined
  }

  // ...
}

----------------------------------------

TITLE: Field Method Signature for TanStack Form
DESCRIPTION: Shows the basic structure of the field method used to wire form elements with TanStack Form.

LANGUAGE: typescript
CODE:
field(FieldOptions, callback)

----------------------------------------

TITLE: Managing Array Fields in @tanstack/solid-form
DESCRIPTION: Shows how to work with array fields, including adding, removing, and rendering array items. It demonstrates the use of the mode="array" prop and array field methods.

LANGUAGE: tsx
CODE:
<form.Field
  name="hobbies"
  mode="array"
  children={(hobbiesField) => (
    <div>
      Hobbies
      <div>
        <Show
          when={hobbiesField().state.value.length > 0}
          fallback={'No hobbies found.'}
        >
          <Index each={hobbiesField().state.value}>
            {(_, i) => (
              <div>
                <form.Field
                  name={`hobbies[${i}].name`}
                  children={(field) => (
                    <div>
                      <label for={field().name}>Name:</label>
                      <input
                        id={field().name}
                        name={field().name}
                        value={field().state.value}
                        onBlur={field().handleBlur}
                        onInput={(e) => field().handleChange(e.target.value)}
                      />
                      <button
                        type="button"
                        onClick={() => hobbiesField().removeValue(i)}
                      >
                        X
                      </button>
                    </div>
                  )}
                />
                <form.Field
                  name={`hobbies[${i}].description`}
                  children={(field) => {
                    return (
                      <div>
                        <label for={field().name}>Description:</label>
                        <input
                          id={field().name}
                          name={field().name}
                          value={field().state.value}
                          onBlur={field().handleBlur}
                          onInput={(e) => field().handleChange(e.target.value)}
                        />
                      </div>
                    )
                  }}
                />
              </div>
            )}
          </Index>
        </Show>
      </div>
      <button
        type="button"
        onClick={() =>
          hobbiesField().pushValue({
            name: '',
            description: '',
            yearsOfExperience: 0,
          })
        }
      >
        Add hobby
      </button>
    </div>
  )}
/>

----------------------------------------

TITLE: Complete Example of Array Handling in TanStack Form
DESCRIPTION: A full example demonstrating array field usage in TanStack Form, including form setup, rendering array elements, adding new elements, and form submission.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    people: [] as Array<{ age: number; name: string }>,
  },
  onSubmit: ({ value }) => alert(JSON.stringify(value)),
})
</script>

<template>
  <form
    @submit="
      (e) => {
        e.preventDefault()
        e.stopPropagation()
        form.handleSubmit()
      }
    "
  >
    <div>
      <form.Field name="people">
        <template v-slot="{ field, state }">
          <div>
            <form.Field
              v-for="(_, i) of field.state.value"
              :key="i"
              :name="`people[${i}].name`"
            >
              <template v-slot="{ field: subField, state }">
                <div>
                  <label>
                    <div>Name for person {{ i }}</div>
                    <input
                      :value="subField.state.value"
                      @input="
                        (e) =>
                          subField.handleChange(
                            (e.target as HTMLInputElement).value,
                          )
                      "
                    />
                  </label>
                </div>
              </template>
            </form.Field>

            <button
              @click="field.pushValue({ name: '', age: 0 })"
              type="button"
            >
              Add person
            </button>
          </div>
        </template>
      </form.Field>
    </div>
    <form.Subscribe>
      <template v-slot="{ canSubmit, isSubmitting }">
        <button type="submit" :disabled="!canSubmit">
          {{ isSubmitting ? '...' : 'Submit' }}
        </button>
      </template>
    </form.Subscribe>
  </form>
</template>

----------------------------------------

TITLE: Tree-shaking Form Components with TanStack Form and React Lazy
DESCRIPTION: Shows how to implement tree-shaking for form components using TanStack Form in combination with React's lazy and Suspense components for optimized bundle sizes.

LANGUAGE: typescript
CODE:
// src/hooks/form-context.ts
import { createFormHookContexts } from '@tanstack/react-form'

export const { fieldContext, useFieldContext, formContext, useFormContext } =
  createFormHookContexts()

// src/components/text-field.tsx
import { useFieldContext } from '../hooks/form-context.tsx'

export default function TextField({ label }: { label: string }) {
  const field = useFieldContext<string>()

  return (
    <label>
      <div>{label}</div>
      <input
        value={field.state.value}
        onChange={(e) => field.handleChange(e.target.value)}
      />
    </label>
  )
}

// src/hooks/form.ts
import { lazy } from 'react'
import { createFormHook } from '@tanstack/react-form'

const TextField = lazy(() => import('../components/text-fields.tsx'))

const { useAppForm, withForm } = createFormHook({
  fieldContext,
  formContext,
  fieldComponents: {
    TextField,
  },
  formComponents: {},
})

// src/App.tsx
import { Suspense } from 'react'
import { PeoplePage } from './features/people/page.tsx'

export default function App() {
  return (
    <Suspense fallback={<p>Loading...</p>}>
      <PeopleForm />
    </Suspense>
  )
}

----------------------------------------

TITLE: Breaking Large Forms into Smaller Pieces with TanStack Form
DESCRIPTION: Demonstrates how to use the withForm higher-order component to break large forms into smaller, more manageable pieces while maintaining type safety and reusability.

LANGUAGE: tsx
CODE:
const ChildForm = withForm({
  defaultValues: {
    firstName: 'John',
    lastName: 'Doe',
  },
  props: {
    title: 'Child Form',
  },
  render: function Render({ form, title }) {
    return (
      <div>
        <p>{title}</p>
        <form.AppField
          name="firstName"
          children={(field) => <field.TextField label="First Name" />}
        />
        <form.AppForm>
          <form.SubscribeButton label="Submit" />
        </form.AppForm>
      </div>
    )
  },
})

function App() {
  const form = useAppForm({
    defaultValues: {
      firstName: 'John',
      lastName: 'Doe',
    },
  })

  return <ChildForm form={form} title={'Testing'} />
}

----------------------------------------

TITLE: Implementing Asynchronous Validation in Vue with TanStack Form
DESCRIPTION: This example demonstrates how to implement asynchronous validation for a field using TanStack Form in Vue. It includes debouncing for async calls and shows how to combine synchronous and asynchronous validations.

LANGUAGE: vue
CODE:
<script setup lang="ts">
// ...

const onBlurAge = ({ value }) => (value < 0 ? 'Invalid value' : undefined)

const onBlurAgeAsync = async ({ value }) => {
  const currentAge = await fetchCurrentAgeOnProfile()
  return value < currentAge ? 'You can only increase the age' : undefined
}
</script>

<template>
  <!-- ... -->
  <form.Field
    name="age"
    :async-debounce-ms="500"
    :validators="{
      onBlur: onBlurAge,
      onBlurAsync: onBlurAgeAsync,
    }"
  >
    <template v-slot="{ field }">
      <label :for="field.name">Age:</label>
      <input
        :id="field.name"
        :name="field.name"
        :value="field.state.value"
        type="number"
        @blur="field.handleBlur"
        @input="
          (e) =>
            field.handleChange((e.target as HTMLInputElement).valueAsNumber)
        "
      />
      <em role="alert" v-if="field.state.meta.errors">{{
        field.state.meta.errors.join(', ')
      }}</em>
    </template>
  </form.Field>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Registering Custom Components with TanStack Form Hook
DESCRIPTION: Demonstrates how to register custom field components with a TanStack Form hook, allowing for type-safe and reusable form fields in the application.

LANGUAGE: tsx
CODE:
import { TextField } from './text-field.tsx'

const { useAppForm } = createFormHook({
  fieldContext,
  formContext,
  fieldComponents: {
    TextField,
  },
  formComponents: {},
})

----------------------------------------

TITLE: Handling Sub-fields in Arrays with TanStack Form
DESCRIPTION: Demonstrates how to work with sub-fields within an array in TanStack Form, including rendering inputs for array elements.

LANGUAGE: angular-html
CODE:
 <ng-container
  [tanstackField]="form"
  [name]="getPeopleName($index)"
  #person="field"
>
  <div>
    <label>
      <div>Name for person {{ $index }}</div>
      <input
        [value]="person.api.state.value"
        (input)="
          person.api.handleChange($any($event).target.value)
        "
      />
    </label>
  </div>
</ng-container>

----------------------------------------

TITLE: Using Custom Form Components in TanStack Form
DESCRIPTION: Shows how to use custom form components in a TanStack Form, demonstrating the usage of pre-bound field components for improved type safety and reusability.

LANGUAGE: tsx
CODE:
function App() {
  const form = useAppForm({
    defaultValues: {
      firstName: 'John',
      lastName: 'Doe',
    },
  })

  return (
    <form.AppField
      name="firstName"
      children={(field) => <field.TextField label="First Name" />}
    />
  )
}

----------------------------------------

TITLE: Installing TanStack Form for Angular
DESCRIPTION: Commands to install the Angular adapter for TanStack Form using different package managers.

LANGUAGE: bash
CODE:
# npm
$ npm i @tanstack/angular-form
# pnpm
$ pnpm add @tanstack/angular-form
# bun
$ bun add @tanstack/angular-form
# yarn
$ yarn add @tanstack/angular-form

----------------------------------------

TITLE: Basic Array Usage in TanStack Form for Angular
DESCRIPTION: Demonstrates how to use an array as a form value in TanStack Form within an Angular component. It shows the component setup and template for rendering array elements.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container [tanstackField]="form" name="people" #people="field">
      <div>
        @for (_ of people.api.state.value; track $index) {
          <!-- ... -->
        }
      </div>
    </ng-container>
  `,
})
export class AppComponent {
  form = injectForm({
    defaultValues: {
      people: [] as Array<{ name: string; age: number }>,
    },
    onSubmit({ value }) {
      alert(JSON.stringify(value))
    },
  })
}

----------------------------------------

TITLE: Implementing Array Fields in @tanstack/angular-form
DESCRIPTION: Shows how to create and manage array fields in @tanstack/angular-form, including adding, removing, and rendering dynamic form fields.

LANGUAGE: typescript
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container [tanstackField]="form" name="hobbies" #hobbies="field">
      <div>
        Hobbies
        <div>
          @if (!hobbies.api.state.value.length) {
            No hobbies found
          }
          @for (_ of hobbies.api.state.value; track $index) {
            <div>
              <ng-container
                [tanstackField]="form"
                [name]="getHobbyName($index)"
                #hobbyName="field"
              >
                <div>
                  <label [for]="hobbyName.api.name">Name:</label>
                  <input
                    [id]="hobbyName.api.name"
                    [name]="hobbyName.api.name"
                    [value]="hobbyName.api.state.value"
                    (blur)="hobbyName.api.handleBlur()"
                    (input)="
                      hobbyName.api.handleChange($any($event).target.value)
                    "
                  />
                  <button
                    type="button"
                    (click)="hobbies.api.removeValue($index)"
                  >
                    X
                  </button>
                </div>
              </ng-container>
              <ng-container
                [tanstackField]="form"
                [name]="getHobbyDesc($index)"
                #hobbyDesc="field"
              >
                <div>
                  <label [for]="hobbyDesc.api.name">Description:</label>
                  <input
                    [id]="hobbyDesc.api.name"
                    [name]="hobbyDesc.api.name"
                    [value]="hobbyDesc.api.state.value"
                    (blur)="hobbyDesc.api.handleBlur()"
                    (input)="
                      hobbyDesc.api.handleChange($any($event).target.value)
                    "
                  />
                </div>
              </ng-container>
            </div>
          }
        </div>
        <button type="button" (click)="hobbies.api.pushValue(defaultHobby)">
          Add hobby
        </button>
      </div>
    </ng-container>
  `,
})
export class AppComponent {
  defaultHobby = {
    name: '',
    description: '',
    yearsOfExperience: 0,
  }

  getHobbyName = (idx: number) => `hobbies[${idx}].name` as const;
  getHobbyDesc = (idx: number) => `hobbies[${idx}].description` as const;

  form = injectForm({
    defaultValues: {
      hobbies: [] as Array<{
        name: string
        description: string
        yearsOfExperience: number
      }>,
    },
    onSubmit({ value }) {
      alert(JSON.stringify(value))
    },
  })
}

----------------------------------------

TITLE: Using Schema Libraries for Validation in Vue with TanStack Form
DESCRIPTION: This snippet shows how to use schema libraries like Zod for validation with TanStack Form in Vue. It demonstrates both synchronous and asynchronous schema-based validations.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { z } from 'zod'
// ...

const form = useForm({
  // ...
})
</script>

<template>
  <!-- ... -->
  <form.Field
    name="age"
    :validators="{
      onChange: z.number().gte(13, 'You must be 13 to make an account'),
      onChangeAsyncDebounceMs: 500,
      onChangeAsync: z.number().refine(
        async (value) => {
          const currentAge = await fetchCurrentAgeOnProfile()
          return value >= currentAge
        },
        {
          message: 'You can only increase the age',
        },
      ),
    }"
  >
    <template v-slot="{ field }">
      <!-- ... -->
    </template>
  </form.Field>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Creating Pre-bound Form Components with TanStack Form
DESCRIPTION: Illustrates how to create and use pre-bound form components, such as a submit button, to reduce form boilerplate and improve reusability across the application.

LANGUAGE: tsx
CODE:
function SubscribeButton({ label }: { label: string }) {
  const form = useFormContext()
  return (
    <form.Subscribe selector={(state) => state.isSubmitting}>
      {(isSubmitting) => <button disabled={isSubmitting}>{label}</button>}
    </form.Subscribe>
  )
}

const { useAppForm, withForm } = createFormHook({
  fieldComponents: {},
  formComponents: {
    SubscribeButton,
  },
  fieldContext,
  formContext,
})

function App() {
  const form = useAppForm({
    defaultValues: {
      firstName: 'John',
      lastName: 'Doe',
    },
  })

  return (
    <form.AppForm>
      <form.SubscribeButton label="Submit" />
    </form.AppForm>
  )
}

----------------------------------------

TITLE: Implementing Reactivity in @tanstack/solid-form
DESCRIPTION: Demonstrates how to use the form.useStore hook and form.Subscribe component to subscribe to form and field state changes, optimizing rendering performance.

LANGUAGE: tsx
CODE:
const firstName = form.useStore((state) => state.values.firstName)
//...
<form.Subscribe
  selector={(state) => ({
    canSubmit: state.canSubmit,
    isSubmitting: state.isSubmitting,
  })}
  children={(state) => (
    <button type="submit" disabled={!state().canSubmit}>
      {state().isSubmitting ? '...' : 'Submit'}
    </button>
  )}
/>

----------------------------------------

TITLE: Configuring Form Options in TypeScript with TanStack Form
DESCRIPTION: A generic function that takes default options and returns typed form configuration. This function allows setting form options with type safety, supporting various form-related configurations like validation, state management, and event handling.

LANGUAGE: typescript
CODE:
function formOptions<T>(defaultOpts): T

----------------------------------------

TITLE: Adding Elements to Array in TanStack Form
DESCRIPTION: Shows how to add new elements to an array in TanStack Form using the pushValue method.

LANGUAGE: angular-html
CODE:
<button (click)="people.api.pushValue(defaultPerson)" type="button">
  Add person
</button>

----------------------------------------

TITLE: Object-Based Error Validation
DESCRIPTION: Rich error object validation with multiple properties for detailed error handling

LANGUAGE: tsx
CODE:
<form.Field
  name="email"
  validators={{
    onChange: ({ value }) => {
      if (!value.includes('@')) {
        return {
          message: 'Invalid email format',
          severity: 'error',
          code: 1001,
        }
      }
      return undefined
    },
  }}
/>

----------------------------------------

TITLE: Implementing Linked Password Fields with TanStack Form in TSX
DESCRIPTION: Example implementation of a form with linked password and confirm password fields. Uses the onChangeListenTo property to ensure the confirm password validation runs whenever the password field changes. Includes field-level validation to check if passwords match.

LANGUAGE: tsx
CODE:
export default function App() {
  const form = createForm(() => ({
    defaultValues: {
      password: '',
      confirm_password: '',
    },
    // ...
  }))

  return (
    <div>
      <form.Field name="password">
        {(field) => (
          <label>
            <div>Password</div>
            <input
              value={field().state.value}
              onChange={(e) => field().handleChange(e.target.value)}
            />
          </label>
        )}
      </form.Field>
      <form.Field
        name="confirm_password"
        validators={{
          onChangeListenTo: ['password'],
          onChange: ({ value, fieldApi }) => {
            if (value !== fieldApi.form.getFieldValue('password')) {
              return 'Passwords do not match'
            }
            return undefined
          },
        }}
      >
        {(field) => (
          <div>
            <label>
              <div>Confirm Password</div>
              <input
                value={field().state.value}
                onChange={(e) => field().handleChange(e.target.value)}
              />
            </label>
            <Index each={field().state.meta.errors}>
              {(err) => <div>{err()}</div>}
            </Index>
          </div>
        )}
      </form.Field>
    </div>
  )
}

----------------------------------------

TITLE: Defining Optional onBlur Validator in TypeScript
DESCRIPTION: Optional validation function that runs when a field loses focus, returning a FormValidationError.

LANGUAGE: typescript
CODE:
optional onBlur: TOnBlur;

----------------------------------------

TITLE: Boolean Error Validation
DESCRIPTION: Implementation of boolean flag-based validation for acceptance fields

LANGUAGE: tsx
CODE:
<form.Field
  name="accepted"
  validators={{
    onChange: ({ value }) => (!value ? true : undefined),
  }}
/>

----------------------------------------

TITLE: Defining Form Submit Handler
DESCRIPTION: Function that handles form submission for valid forms. Receives form API, metadata, and form values as parameters. Can return any value or a Promise.

LANGUAGE: typescript
CODE:
optional onSubmit: (props) => any;

----------------------------------------

TITLE: Form-Level Multi-Field Validation
DESCRIPTION: Implementation of form-level validation affecting multiple fields simultaneously

LANGUAGE: tsx
CODE:
const form = useForm({
  defaultValues: {
    username: '',
    email: '',
  },
  validators: {
    onChange: ({ value }) => {
      return {
        fields: {
          username:
            value.username.length < 3 ? 'Username too short' : undefined,
          email: !value.email.includes('@') ? 'Invalid email' : undefined,
        },
      }
    },
  },
})

----------------------------------------

TITLE: String Validation in TanStack Form
DESCRIPTION: Example of using string-based validation for a username field with length validation

LANGUAGE: tsx
CODE:
<form.Field
  name="username"
  validators={{
    onChange: ({ value }) =>
      value.length < 3 ? 'Username must be at least 3 characters' : undefined,
  }}
/>

----------------------------------------

TITLE: Implementing Linked Password Fields with TanStack Form in Vue.js
DESCRIPTION: Example implementation of password and confirm password fields using TanStack Form in Vue.js. The code shows how to use the onChangeListenTo property to link field validations together, ensuring the confirm password field is re-validated when the password field changes.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    password: '',
    confirm_password: '',
  },
  // ...
})
</script>

<template>
  <div>
    <form @submit.prevent.stop="form.handleSubmit">
      <div>
        <form.Field name="password">
          <template v-slot="{ field }">
            <div>Password:</div>
            <input
              :value="field.state.value"
              @input="
                (e) => field.handleChange((e.target as HTMLInputElement).value)
              "
            />
          </template>
        </form.Field>
        <form.Field
          name="confirm_password"
          :validators="{
            onChangeListenTo: ['password'],
            onChange: ({ value, fieldApi }) => {
              if (value !== fieldApi.form.getFieldValue('password')) {
                return 'Passwords do not match'
              }
              return undefined
            },
          }"
        >
          <template v-slot="{ field }">
            <div>Confirm Password:</div>
            <input
              :value="field.state.value"
              @input="
                (e) => field.handleChange((e.target as HTMLInputElement).value)
              "
            />
            <div v-for="(err, index) in field.state.meta.errors" :key="index">
              {{ err }}
            </div>
          </template>
        </form.Field>
      </div>
      <button type="submit">Submit</button>
    </form>
  </div>
</template>

----------------------------------------

TITLE: Field Method Implementation
DESCRIPTION: Method for creating form field configurations with validation and rendering options. Returns an object containing form API, options and render callback.

LANGUAGE: typescript
CODE:
field<TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync>(fieldConfig, render): object

----------------------------------------

TITLE: Creating a Field with tanstackField Directive in Angular
DESCRIPTION: Shows how to create a form field using the tanstackField directive, binding input events to field API methods for value changes and blur events.

LANGUAGE: html
CODE:
<ng-container [tanstackField]="form" name="firstName" #firstName="field">
  <input
    [value]="firstName.api.state.value"
    (blur)="firstName.api.handleBlur()"
    (input)="firstName.api.handleChange($any($event).target.value)"
  />
</ng-container>

----------------------------------------

TITLE: Implementing useStore Hook with Store Type
DESCRIPTION: TypeScript declaration for useStore hook that accepts a Store instance and optional selector function. Returns selected state of type TSelected which defaults to TState if no selector is provided.

LANGUAGE: typescript
CODE:
function useStore<TState, TSelected>(store, selector?): TSelected

----------------------------------------

TITLE: Implementing Field Component in Vue
DESCRIPTION: Shows how to implement a form field component using form.Field with proper event handling and value binding.

LANGUAGE: vue
CODE:
<template>
  <!-- ... -->
  <form.Field name="fullName">
    <template v-slot="{ field }">
      <input
        :name="field.name"
        :value="field.state.value"
        @blur="field.handleBlur"
        @input="(e) => field.handleChange(e.target.value)"
      />
    </template>
  </form.Field>
  <!-- ... -->
</template>

----------------------------------------

TITLE: Array Sub-field Implementation
DESCRIPTION: Demonstrates how to implement and handle sub-fields within array items, including input binding and change handling.

LANGUAGE: typescript
CODE:
return html`
  ${this.#form.field(
    {
      name: `people[${index}].name`,
    },
    (field) => {
      return html`
        <input
          type="text"
          placeholder="Name"
          .value="${field.state.value}"
          @input="${(e: Event) => {
            const target = e.target as HTMLInputElement
            field.handleChange(target.value)
          }}"
        />
      `
    },
  )}
`

----------------------------------------

TITLE: Complete Array Form Implementation
DESCRIPTION: Full example demonstrating array handling in TanStack Form, including form submission, array manipulation, and field rendering with validation states.

LANGUAGE: jsx
CODE:
function App() {
  const form = useForm({
    defaultValues: {
      people: [],
    },
    onSubmit({ value }) {
      alert(JSON.stringify(value))
    },
  })

  return (
    <div>
      <form
        onSubmit={(e) => {
          e.preventDefault()
          e.stopPropagation()
          form.handleSubmit()
        }}
      >
        <form.Field name="people" mode="array">
          {(field) => {
            return (
              <div>
                {field.state.value.map((_, i) => {
                  return (
                    <form.Field key={i} name={`people[${i}].name`}>
                      {(subField) => {
                        return (
                          <div>
                            <label>
                              <div>Name for person {i}</div>
                              <input
                                value={subField.state.value}
                                onChange={(e) =>
                                  subField.handleChange(e.target.value)
                                }
                              />
                            </label>
                          </div>
                        )
                      }}
                    </form.Field>
                  )
                })}
                <button
                  onClick={() => field.pushValue({ name: '', age: 0 })}
                  type="button"
                >
                  Add person
                </button>
              </div>
            )
          }}
        </form.Field>
        <form.Subscribe
          selector={(state) => [state.canSubmit, state.isSubmitting]}
          children={([canSubmit, isSubmitting]) => (
            <button type="submit" disabled={!canSubmit}>
              {isSubmitting ? '...' : 'Submit'}
            </button>
          )}
        />
      </form>
    </div>
  )

----------------------------------------

TITLE: Array Push Operation in TanStack Form
DESCRIPTION: Example of adding new elements to the form array using the pushValue method.

LANGUAGE: jsx
CODE:
<button onClick={() => field.pushValue({ name: '', age: 0 })} type="button">
  Add person
</button>

----------------------------------------

TITLE: Array Field HTML Template
DESCRIPTION: Shows the HTML template for adding new items to the array using a button element.

LANGUAGE: html
CODE:
<div class="container">
  <button type="button" @click="${()">{
    peopleField.pushValue({name: "",age: ""}) }}> Add Person
  </button>
</div>

----------------------------------------

TITLE: Form Field Manipulation Methods
DESCRIPTION: Method for pushing values into form array fields with validation and meta updates.

LANGUAGE: typescript
CODE:
pushFieldValue<TField>(
   field, 
   value, 
   opts?): void

----------------------------------------

TITLE: Creating Form Component with TanStack Start
DESCRIPTION: Implements a React form component using TanStack Form with client-side validation and server integration.

LANGUAGE: tsx
CODE:
function Home() {
  const { state } = Route.useLoaderData()
  const form = useForm({
    ...formOpts,
    transform: useTransform((baseForm) => mergeForm(baseForm, state), [state]),
  })

  const formErrors = useStore(form.store, (formState) => formState.errors)

  return (
    <form action={handleForm.url} method="post" encType={'multipart/form-data'}>
      {formErrors.map((error) => (
        <p key={error as string}>{error}</p>
      ))}

      <form.Field
        name="age"
        validators={{
          onChange: ({ value }) =>
            value < 8 ? 'Client validation: You must be at least 8' : undefined,
        }}
      >
        {(field) => {
          return (
            <div>
              <input
                name="age"
                type="number"
                value={field.state.value}
                onChange={(e) => field.handleChange(e.target.valueAsNumber)}
              />
              {field.state.meta.errors.map((error) => (
                <p key={error as string}>{error}</p>
              ))}
            </div>
          )
        }}
      </form.Field>
      <form.Subscribe
        selector={(formState) => [formState.canSubmit, formState.isSubmitting]}
      >
        {([canSubmit, isSubmitting]) => (
          <button type="submit" disabled={!canSubmit}>
            {isSubmitting ? '...' : 'Submit'}
          </button>
        )}
      </form.Subscribe>
    </form>
  )
}

----------------------------------------

TITLE: Implementing Server Validation in TanStack Start
DESCRIPTION: Sets up server-side form validation and handling using TanStack Start server functions.

LANGUAGE: typescript
CODE:
import { createServerValidate, ServerValidateError } from '@tanstack/react-form/start'

const serverValidate = createServerValidate({
  ...formOpts,
  onServerValidate: ({ value }) => {
    if (value.age < 12) {
      return 'Server validation: You must be at least 12 to sign up'
    }
  },
})

export const handleForm = createServerFn({
  method: 'POST',
})
  .validator((data: unknown) => {
    if (!(data instanceof FormData)) {
      throw new Error('Invalid form data')
    }
    return data
  })
  .handler(async (ctx) => {
    try {
      const validatedData = await serverValidate(ctx.data)
      console.log('validatedData', validatedData)
    } catch (e) {
      if (e instanceof ServerValidateError) {
        return e.response
      }
      console.error(e)
      setResponseStatus(500)
      return 'There was an internal error'
    }
    return 'Form has validated successfully'
  })

----------------------------------------

TITLE: Implementing Multiple Validation Triggers in TanStack Form (Angular)
DESCRIPTION: Demonstrates how to implement multiple validation triggers (onChange and onBlur) for a single field. Different validation logic is applied for each trigger.

LANGUAGE: angular-ts
CODE:
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [TanStackField],
  template: `
    <ng-container
      [tanstackField]="form"
      name="age"
      [validators]="{
        onChange: ageValidator,
        onBlur: minimumAgeValidator
      }"
      #age="field"
    >
      <label [for]="age.api.name">Age:</label>
      <input
        [id]="age.api.name"
        [name]="age.api.name"
        [value]="age.api.state.value"
        type="number"
        (blur)="age.api.handleBlur()"
        (input)="age.api.handleChange($any($event).target.valueAsNumber)"
      />
      @if (age.api.state.meta.errors) {
        <em role="alert">{{ age.api.state.meta.errors.join(', ') }}</em>
      }
    </ng-container>
  `,
})
export class AppComponent {
  ageValidator: FieldValidateFn<any, any, any, any, number> = ({ value }) =>
    value < 13 ? 'You must be 13 to make an account' : undefined

  minimumAgeValidator: FieldValidateFn<any, any, any, any, number> = ({
    value,
  }) => (value < 0 ? 'Invalid value' : undefined)

  // ...
}

----------------------------------------

TITLE: Implementing Reactivity in @tanstack/angular-form
DESCRIPTION: Shows how to use injectStore to subscribe to form and field state changes, enabling reactive updates in the component.

LANGUAGE: typescript
CODE:
import { injectForm, injectStore } from '@tanstack/angular-form'

@Component(/*...*/)
class AppComponent {
  form = injectForm(/*...*/)
  canSubmit = injectStore(this.form, (state) => state.canSubmit)
  isSubmitting = injectStore(this.form, (state) => state.isSubmitting)
}

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack Form example project. Requires Node.js and npm to be installed.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Creating a Form Instance with @tanstack/solid-form
DESCRIPTION: Shows how to create a form instance using the createForm hook, which accepts an object with an onSubmit function. It also demonstrates creating a form instance without using formOptions.

LANGUAGE: tsx
CODE:
const form = createForm(() => ({
  ...formOpts,
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
}))

LANGUAGE: tsx
CODE:
const form = createForm<Person>(() => ({
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
  defaultValues: {
    firstName: '',
    lastName: '',
    hobbies: [],
  },
}))

----------------------------------------

TITLE: TypeScript Interface Definition - FieldListeners
DESCRIPTION: Generic interface definition for field event listeners in a form. Includes optional handlers for blur, change, mount and submit events. Uses generic types for parent data, field name, and field data.

LANGUAGE: typescript
CODE:
optional onBlur: FieldListenerFn<TParentData, TName, TData>;

LANGUAGE: typescript
CODE:
optional onChange: FieldListenerFn<TParentData, TName, TData>;

LANGUAGE: typescript
CODE:
optional onMount: FieldListenerFn<TParentData, TName, TData>;

LANGUAGE: typescript
CODE:
optional onSubmit: FieldListenerFn<TParentData, TName, TData>;

----------------------------------------

TITLE: Using form.Subscribe Component for UI Reactivity
DESCRIPTION: Shows how to use the form.Subscribe component to create UI elements that react to form state changes. Includes an example of conditionally rendering based on a firstName field value.

LANGUAGE: tsx
CODE:
<form.Subscribe
  selector={(state) => state.values.firstName}
  children={(firstName) => (
    <form.Field>
      {(field) => (
        <input
          name="lastName"
          value={field.state.lastName}
          onChange={field.handleChange}
        />
      )}
    </form.Field>
  )}
/>

----------------------------------------

TITLE: Subscribing to Form State with useStore Hook in React
DESCRIPTION: Demonstrates using the useStore hook to reactively access form state values and error maps. The hook takes a form store and selector function to target specific state values.

LANGUAGE: tsx
CODE:
const firstName = useStore(form.store, (state) => state.values.firstName)
const errors = useStore(form.store, (state) => state.errorMap)

----------------------------------------

TITLE: Async Validation with Debouncing
DESCRIPTION: Implementation of asynchronous field validation with built-in debouncing support to prevent excessive API calls.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  asyncDebounceMs={500}
  validators={{
    onChangeAsyncDebounceMs: 1500,
    onChangeAsync: async ({ value }) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return value < 13 ? 'You must be 13 to make an account' : undefined
    },
    onBlurAsync: async ({ value }) => {
      // ...
    },
  }}
  children={(field) => {
    return <>{/* ... */}</>
  }}
/>

----------------------------------------

TITLE: Host Connection Lifecycle Methods
DESCRIPTION: Implementation of ReactiveController lifecycle methods for handling host connection and disconnection events.

LANGUAGE: typescript
CODE:
hostConnected(): void

LANGUAGE: typescript
CODE:
hostDisconnected(): void

----------------------------------------

TITLE: Defining Field AsyncAlways Option in TypeScript
DESCRIPTION: Optional boolean property that determines if async validation should always run, even when there are synchronous validation errors.

LANGUAGE: typescript
CODE:
optional asyncAlways: boolean;

----------------------------------------

TITLE: Implementing Form Field Component
DESCRIPTION: Shows implementation of a form field component with input handling and state management.

LANGUAGE: tsx
CODE:
<form.Field
  name="firstName"
  children={(field) => (
    <>
      <input
        value={field.state.value}
        onBlur={field.handleBlur}
        onChange={(e) => field.handleChange(e.target.value)}
      />
      <FieldInfo field={field} />
    </>
  )}
/>

----------------------------------------

TITLE: Accessing Field State in TypeScript
DESCRIPTION: Getter for accessing the current field state, which includes properties like value, errors, and validation status.

LANGUAGE: TypeScript
CODE:
get state(): FieldState<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync>

----------------------------------------

TITLE: Implementing Field Component in ReactFormApi
DESCRIPTION: This code snippet shows the Field property of the ReactFormApi interface. It represents a React component used for rendering form fields, allowing developers to manage individual form fields within their application.

LANGUAGE: TypeScript
CODE:
Field: FieldComponent<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>;

----------------------------------------

TITLE: Field API and Properties Definition
DESCRIPTION: Definition of core field properties including API interface, validation options, and metadata configuration.

LANGUAGE: typescript
CODE:
api: FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>;

asyncAlways?: boolean;
asyncDebounceMs?: number;
defaultValue?: NoInfer<TData>;
name: TName;

----------------------------------------

TITLE: Implementing onBlur Validation in TanStack Form
DESCRIPTION: This example shows how to implement onBlur validation for a form field using TanStack Form. It demonstrates how to handle the onBlur event and perform validation when the field loses focus.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onBlur: ({ value }) =>
      value < 13 ? 'You must be 13 to make an account' : undefined,
  }}
>
  {(field) => (
    <>
      <label htmlFor={field.name}>Age:</label>
      <input
        id={field.name}
        name={field.name}
        value={field.state.value}
        type="number"
        onBlur={field.handleBlur}
        onChange={(e) => field.handleChange(e.target.valueAsNumber)}
      />
      {field.state.meta.errors ? (
        <em role="alert">{field.state.meta.errors.join(', ')}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Defining Field DefaultValue Option in TypeScript
DESCRIPTION: Optional property that sets the default value for the field using the NoInfer type helper.

LANGUAGE: typescript
CODE:
optional defaultValue: NoInfer<TData>;

----------------------------------------

TITLE: TanStackField Constructor Definition in TypeScript
DESCRIPTION: Constructor signature for creating new instances of the TanStackField directive with extensive generic type parameters for form validation and handling.

LANGUAGE: typescript
CODE:
new TanStackField<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>(): TanStackField<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>

----------------------------------------

TITLE: Defining Field Component in TypeScript for TanStack Form
DESCRIPTION: This code snippet defines the Field component as a constant with a complex generic type. It takes various type parameters for data, callbacks, and form-related properties. The component returns a Vue component instance with mixins and specific props.

LANGUAGE: typescript
CODE:
const Field: <TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>(props) => CreateComponentPublicInstanceWithMixins<FieldApiOptions<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> & object & {} | {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, EmitsOptions, PublicProps, {}, false, {}, {}>

----------------------------------------

TITLE: Defining FieldComponentProps Type Alias in TypeScript
DESCRIPTION: This code snippet defines a type alias called FieldComponentProps that extends UseFieldOptions with multiple generic type parameters. It is used to specify the props for field components in the tanstack-form library, including various validation and event handling options.

LANGUAGE: typescript
CODE:
type FieldComponentProps<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> = UseFieldOptions<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>;

----------------------------------------

TITLE: Defining ReactFormExtendedApi Type Alias in TypeScript
DESCRIPTION: Defines a type alias ReactFormExtendedApi that extends FormApi with React-specific functionalities from ReactFormApi. It includes various type parameters for form data, validation, and submission handling.

LANGUAGE: typescript
CODE:
type ReactFormExtendedApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta> = FormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta> & ReactFormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>;

----------------------------------------

TITLE: Basic Array Usage in TanStack Form with Vue
DESCRIPTION: Demonstrates how to use an array field in TanStack Form with Vue. It shows the setup of the form with an array of objects and how to render fields for each array element.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    people: [] as Array<{ age: number; name: string }>,
  },
  onSubmit: ({ value }) => alert(JSON.stringify(value)),
})
</script>

<template>
  <form.Field name="people">
    <template v-slot="{ field, state }">
      <div>
        <form.Field
          v-for="(_, i) of field.state.value"
          :key="i"
          :name="`people[${i}].name`"
        >
          <template v-slot="{ field: subField, state }">
            <!-- ... -->
          </template>
        </form.Field>
      </div>
    </template>
  </form.Field>
</template>

----------------------------------------

TITLE: Form-Level Validation Implementation
DESCRIPTION: Example of implementing form-level validation using createForm hook with onChange validator and error display logic.

LANGUAGE: tsx
CODE:
export default function App() {
  const form = createForm(() => ({
    defaultValues: {
      age: 0,
    },
    onSubmit: async ({ value }) => {
      console.log(value)
    },
    validators: {
      onChange({ value }) {
        if (value.age < 13) {
          return 'Must be 13 or older to sign'
        }
        return undefined
      },
    },
  }))

  const formErrorMap = form.useStore((state) => state.errorMap)

  return (
    <div>
      {formErrorMap().onChange ? (
        <div>
          <em>There was an error on the form: {formErrorMap().onChange}</em>
        </div>
      ) : null}
    </div>
  )
}

----------------------------------------

TITLE: Implementing useForm Hook in TypeScript
DESCRIPTION: A TypeScript function signature for the useForm hook that returns a ReactFormExtendedApi instance. The hook accepts multiple generic type parameters for form data, validation handlers, and submission metadata. It takes an optional FormOptions parameter for configuration.

LANGUAGE: typescript
CODE:
function useForm<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>(opts?): ReactFormExtendedApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>

----------------------------------------

TITLE: Schema-based Validation using Zod
DESCRIPTION: Example of using Zod schema library for form validation, demonstrating both synchronous and asynchronous validation rules.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: z.number().gte(13, 'You must be 13 to make an account'),
    onChangeAsyncDebounceMs: 500,
    onChangeAsync: z.number().refine(
      async (value) => {
        const currentAge = await fetchCurrentAgeOnProfile()
        return value >= currentAge
      },
      {
        message: 'You can only increase the age',
      },
    ),
  }}
  children={(field) => {
    return <>{/* ... */}</>
  }}
/>

----------------------------------------

TITLE: Implementing useTransform Hook in TypeScript
DESCRIPTION: Function signature for the useTransform hook that takes a transform function and dependencies array as parameters. The transform function accepts a formBase parameter and returns an AnyFormApi, while the hook returns a FormTransform type with multiple generic parameters.

LANGUAGE: typescript
CODE:
function useTransform(fn, deps): FormTransform<any, any, any, any, any, any, any, any, any, any>

----------------------------------------

TITLE: TanStack Angular Form Component Structure
DESCRIPTION: Main exports of the @tanstack/angular-form package showing the available classes and functions for form management in Angular applications.

LANGUAGE: markdown
CODE:
<!-- DO NOT EDIT: this page is autogenerated from the type comments -->

# @tanstack/angular-form

## Classes

- [TanStackField](classes/tanstackfield.md)

## Functions

- [injectForm](functions/injectform.md)
- [injectStore](functions/injectstore.md)

----------------------------------------

TITLE: Rendering Sub-fields in Array Elements with TanStack Form
DESCRIPTION: Demonstrates how to render and handle sub-fields within array elements in TanStack Form.

LANGUAGE: jsx
CODE:
<form.Field name={`people[${i}].name`}>
  {(subField) => (
    <input
      value={subField().state.value}
      onInput={(e) => {
        subField().handleChange(e.currentTarget.value)
      }}
    />
  )}
</form.Field>

----------------------------------------

TITLE: Rendering Sub-fields in Array Elements
DESCRIPTION: Demonstrates how to render and handle input for sub-fields within array elements in TanStack Form.

LANGUAGE: vue
CODE:
<form.Field
  v-for="(_, i) of field.state.value"
  :key="i"
  :name="`people[${i}].name`"
>
  <template v-slot="{ field: subField, state }">
    <div>
      <label>
        <div>Name for person {{ i }}</div>
        <input
          :value="subField.state.value"
          @input="
          (e) =>
          subField.handleChange(
            (e.target as HTMLInputElement).value,
          )
          "
        />
      </label>
    </div>
  </template>
</form.Field>

----------------------------------------

TITLE: Constructor Definition for TanStackFormController
DESCRIPTION: Constructor implementation for TanStackFormController class that accepts a ReactiveControllerHost and optional FormOptions configuration.

LANGUAGE: typescript
CODE:
new TanStackFormController<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>(host, config?): TanStackFormController<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>

----------------------------------------

TITLE: Implementing Form Reactivity
DESCRIPTION: Shows how to implement reactive form state updates using useStore hook and Subscribe component.

LANGUAGE: tsx
CODE:
const firstName = useStore(form.store, (state) => state.values.firstName)
//...
<form.Subscribe
  selector={(state) => [state.canSubmit, state.isSubmitting]}
  children={([canSubmit, isSubmitting]) => (
    <button type="submit" disabled={!canSubmit}>
      {isSubmitting ? '...' : 'Submit'}
    </button>
  )}
/>

----------------------------------------

TITLE: Type Declaration for Schema Validator Functions
DESCRIPTION: Type declarations for validate and validateAsync functions with their parameter types and return types. These functions handle schema validation with support for field and form-level validations.

LANGUAGE: typescript
CODE:
{
  validate({
    __namedParameters: TStandardSchemaValidatorValue<unknown>,
    schema: StandardSchemaV1
  }): undefined | readonly StandardSchemaV1Issue[] | {
    fields: {},
    form: {}
  },
  validateAsync({
    __namedParameters: TStandardSchemaValidatorValue<unknown>,
    schema: StandardSchemaV1
  }): Promise<undefined | readonly StandardSchemaV1Issue[] | {
    fields: {},
    form: {}
  }>
}

----------------------------------------

TITLE: Defining Standard Schema Validators in TypeScript
DESCRIPTION: Declaration of standardSchemaValidators object with validate and validateAsync methods for form schema validation. Both methods accept schema validator value and schema parameters, returning validation issues or undefined.

LANGUAGE: typescript
CODE:
const standardSchemaValidators: object;

----------------------------------------

TITLE: Basic Array Implementation in TanStack Form
DESCRIPTION: Shows the basic setup of a form with an array field using TanStack Form and Lit Element. Demonstrates form initialization with an empty array and basic rendering logic.

LANGUAGE: typescript
CODE:
export class TestForm extends LitElement {
  #form = new TanStackFormController(this, {
    defaultValues: {
      people: [] as Array<{ name: string; age: string }>,
    },
  })
  render() {
    return html`
      <form
        id="form"
        @submit=${(e: Event) => {
          e.preventDefault()
        }}
      >
        <h1>Please enter your details</h1>
        ${this.#form.field(
          {
            name: `people`,
          },
          (peopleField) => {
            return html`${repeat(
              peopleField.state.value,
              (_, index) => index,
              (_, index) => {
                return html` // ... `
              },
            )} `
          },
        )}
      </form>
    `
  }
}

----------------------------------------

TITLE: Creating Standalone Form Instance
DESCRIPTION: Shows how to create a form instance directly using useForm without formOptions, including default values and submit handler.

LANGUAGE: tsx
CODE:
const form = useForm({
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
  defaultValues: {
    firstName: '',
    lastName: '',
    hobbies: [],
  } as Person,
})

----------------------------------------

TITLE: Defining UnwrapFormAsyncValidateOrFn Type Alias in TypeScript
DESCRIPTION: This type alias unwraps the return type of a form async validation function or schema. It handles three cases: FormValidateAsyncFn, StandardSchemaV1, or undefined.

LANGUAGE: typescript
CODE:
type UnwrapFormAsyncValidateOrFn<TValidateOrFn> = [TValidateOrFn] extends [FormValidateAsyncFn<any>] ? Awaited<ReturnType<TValidateOrFn>> : [TValidateOrFn] extends [StandardSchemaV1<any, any>] ? Record<string, StandardSchemaV1Issue[]> : undefined;

----------------------------------------

TITLE: Displaying Specific Errors in TanStack Form
DESCRIPTION: This example shows how to display specific errors for a form field using the errorMap property in TanStack Form. It demonstrates accessing and rendering errors based on their validation type.

LANGUAGE: tsx
CODE:
<form.Field
  name="age"
  validators={{
    onChange: ({ value }) =>
      value < 13 ? 'You must be 13 to make an account' : undefined,
  }}
>
  {(field) => (
    <>
      {/* ... */}
      {field.state.meta.errorMap['onChange'] ? (
        <em>{field.state.meta.errorMap['onChange']}</em>
      ) : null}
    </>
  )}
</form.Field>

----------------------------------------

TITLE: Defining Generic Updater Type in TypeScript
DESCRIPTION: Defines a generic Updater type that can either be a direct value of TOutput or an updater function that transforms TInput to TOutput. Used for flexible state updates in the form library.

LANGUAGE: typescript
CODE:
type Updater<TInput, TOutput> = TOutput | UpdaterFn<TInput, TOutput>;

----------------------------------------

TITLE: TStandardSchemaValidatorValue Properties Definition
DESCRIPTION: Defines the required properties of the TStandardSchemaValidatorValue type: validationSource of type ValidationSource and value of generic type TData.

LANGUAGE: typescript
CODE:
validationSource: ValidationSource;

LANGUAGE: typescript
CODE:
value: TData;

----------------------------------------

TITLE: Adding Elements to Array in TanStack Form
DESCRIPTION: Shows how to add new elements to an array field in TanStack Form using the pushValue method.

LANGUAGE: vue
CODE:
<button @click="field.pushValue({ name: '', age: 0 })" type="button">
  Add person
</button>

----------------------------------------

TITLE: Implementing Field Validation
DESCRIPTION: Shows how to implement both synchronous and asynchronous field validation with error messages.

LANGUAGE: tsx
CODE:
<form.Field
  name="firstName"
  validators={{
    onChange: ({ value }) =>
      !value
        ? 'A first name is required'
        : value.length < 3
          ? 'First name must be at least 3 characters'
          : undefined,
    onChangeAsync: async ({ value }) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return value.includes('error') && 'No "error" allowed in first name'
    },
  }}
  children={(field) => (
    <>
      <input
        value={field.state.value}
        onBlur={field.handleBlur}
        onChange={(e) => field.handleChange(e.target.value)}
      />
      <FieldInfo field={field} />
    </>
  )}
/>

----------------------------------------

TITLE: FormValidator Type Declaration in TypeScript
DESCRIPTION: Declares the structure of the FormValidator type, including validate and validateAsync methods. Both methods take options with a value parameter and a function parameter, returning unknown or a Promise<unknown> respectively.

LANGUAGE: typescript
CODE:
{
  validate(): {
    options: {
      value: TType
    },
    fn: TFn
  } => unknown;

  validateAsync(): {
    options: {
      value: TType
    },
    fn: TFn
  } => Promise<unknown>;
}

----------------------------------------

TITLE: Implementing Form Field Dependencies with Listeners in React TSX
DESCRIPTION: Example demonstrating how to use the TanStack Form listener API to reset a province field when a country selection changes. Shows implementation of form fields with onChange listeners and proper event handling.

LANGUAGE: tsx
CODE:
function App() {
  const form = useForm({
    defaultValues: {
      country: '',
      province: '',
    },
    // ...
  })

  return (
    <div>
      <form.Field
        name="country"
        listeners={{
          onChange: ({ value }) => {
            console.log(`Country changed to: ${value}, resetting province`)
            form.setFieldValue('province', '')
          },
        }}
      >
        {(field) => (
          <label>
            <div>Country</div>
            <input
              value={field.state.value}
              onChange={(e) => field.handleChange(e.target.value)}
            />
          </label>
        )}
      </form.Field>

      <form.Field name="province">
        {(field) => (
          <label>
            <div>Province</div>
            <input
              value={field.state.value}
              onChange={(e) => field.handleChange(e.target.value)}
            />
          </label>
        )}
      </form.Field>
    </div>
  )
}

----------------------------------------

TITLE: Defining Message Property in StandardSchemaV1Issue Interface - TypeScript
DESCRIPTION: Defines a readonly message property of type string that stores the error message of the validation issue.

LANGUAGE: typescript
CODE:
readonly message: string;

----------------------------------------

TITLE: Defining FormValidator Type Alias in TypeScript
DESCRIPTION: Defines a FormValidator type alias with generic parameters for form data, value type, and function type. It includes validate and validateAsync methods for synchronous and asynchronous validation.

LANGUAGE: typescript
CODE:
type FormValidator<TFormData, TType, TFn> = object;

----------------------------------------

TITLE: Defining FormValidationError Type in TypeScript
DESCRIPTION: A type alias that represents possible form validation errors. It uses a generic type parameter TFormData to type the form data structure and can be either a ValidationError or a GlobalFormValidationError.

LANGUAGE: typescript
CODE:
type FormValidationError<TFormData> = 
  | ValidationError
| GlobalFormValidationError<TFormData>;

----------------------------------------

TITLE: Adding Items to Array in TanStack Form
DESCRIPTION: Shows how to add new items to an array field in TanStack Form using the pushValue method.

LANGUAGE: jsx
CODE:
<button onClick={() => field().pushValue({ name: '', age: 0 })} type="button">
  Add person
</button>

----------------------------------------

TITLE: Defining TStandardSchemaValidatorValue Generic Type in TypeScript
DESCRIPTION: Defines a generic type TStandardSchemaValidatorValue that takes a type parameter TData. The type represents an object containing validation source and value properties for form validation.

LANGUAGE: typescript
CODE:
type TStandardSchemaValidatorValue<TData> = object;

----------------------------------------

TITLE: Defining FormState Type Alias in TypeScript
DESCRIPTION: Defines a FormState type alias that combines BaseFormState and DerivedFormState, with generic parameters for form data and various validation functions. This type is used to represent the complete state of a form in the tanstack-form library.

LANGUAGE: typescript
CODE:
type FormState<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer> = BaseFormState<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer> & DerivedFormState<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer>;

----------------------------------------

TITLE: Defining StandardSchemaV1 Type Alias in TypeScript
DESCRIPTION: Defines a generic type alias for standard schema validation with input and output type parameters. The type extends the base object type and is used as the foundation for form validation schemas.

LANGUAGE: typescript
CODE:
type StandardSchemaV1<Input, Output> = object;

----------------------------------------

TITLE: Defining FieldState Type Alias in TypeScript
DESCRIPTION: This code snippet defines the FieldState type alias with multiple generic type parameters. It represents the state of a field in a form, including metadata and the current value.

LANGUAGE: typescript
CODE:
type FieldState<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync> = object;

----------------------------------------

TITLE: Defining isPristine Property in FieldMetaDerived
DESCRIPTION: This code snippet shows the definition of the isPristine property within the FieldMetaDerived type. It's a boolean flag indicating whether the field's value has been modified.

LANGUAGE: typescript
CODE:
isPristine: boolean;

----------------------------------------

TITLE: Basic Array Usage in TanStack Form with SolidJS
DESCRIPTION: Demonstrates the basic structure for using an array field in TanStack Form. It uses the Index component from SolidJS to render array elements and shows how to add new items to the array.

LANGUAGE: jsx
CODE:
function App() {
  const form = createForm(() => ({
    defaultValues: {
      people: [],
    },
  }))

  return (
    <form.Field name="people" mode="array">
      {(field) => (
        <Show when={field().state.value.length > 0}>
          {/* Do not change this to `For` or things will not work as-expected */}
          <Index each={field().state.value}>
            {
              (_, i) => null // ...
            }
          </Index>
        </Show>
      )}
    </form.Field>
  )
}


----------------------------------------

TITLE: useStore Hook Implementation with Store Type
DESCRIPTION: First call signature of useStore hook that works with Store type. It accepts a store instance and an optional selector function to select specific state, returning an Accessor of the selected state.

LANGUAGE: typescript
CODE:
function useStore<TState, TSelected>(store, selector?): Accessor<TSelected>

----------------------------------------

TITLE: Defining errors Property in FieldMetaDerived
DESCRIPTION: This code snippet shows the definition of the errors property within the FieldMetaDerived type. It's an array of various error types related to field validation.

LANGUAGE: typescript
CODE:
errors: (
  | UnwrapOneLevelOfArray<UnwrapFieldValidateOrFn<TParentData, TName, TOnMount, TFormOnMount>>
  | UnwrapOneLevelOfArray<UnwrapFieldValidateOrFn<TParentData, TName, TOnChange, TFormOnChange>>
  | UnwrapOneLevelOfArray<UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnChangeAsync, TFormOnChangeAsync>>
  | UnwrapOneLevelOfArray<UnwrapFieldValidateOrFn<TParentData, TName, TOnBlur, TFormOnBlur>>
  | UnwrapOneLevelOfArray<UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnBlurAsync, TFormOnBlurAsync>>
  | UnwrapOneLevelOfArray<UnwrapFieldValidateOrFn<TParentData, TName, TOnSubmit, TFormOnSubmit>>
  | UnwrapOneLevelOfArray<UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnSubmitAsync, TFormOnSubmitAsync>>)[];

----------------------------------------

TITLE: useStore Hook Implementation with Derived Type
DESCRIPTION: Second call signature of useStore hook that works with Derived store type. Similar to the first signature but accepts a Derived store instance instead of a regular Store.

LANGUAGE: typescript
CODE:
function useStore<TState, TSelected>(store, selector?): Accessor<TSelected>

----------------------------------------

TITLE: Field State Properties Definition
DESCRIPTION: Defines boolean state properties for tracking field interaction states including blur, dirty, touch, and validation status.

LANGUAGE: typescript
CODE:
isBlurred: boolean;
isDirty: boolean;
isTouched: boolean;
isValidating: boolean;

----------------------------------------

TITLE: Defining FieldMetaBase Type Alias in TypeScript
DESCRIPTION: Defines a generic type alias for field metadata that includes type parameters for parent data, field name, validation functions, and core metadata properties like error maps and field states.

LANGUAGE: typescript
CODE:
type FieldMetaBase<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync> = object;

----------------------------------------

TITLE: Implementing Validation in @tanstack/solid-form
DESCRIPTION: Demonstrates how to implement both synchronous and asynchronous validation for a form field. It shows how to define validation functions and handle error messages.

LANGUAGE: tsx
CODE:
<form.Field
  name="firstName"
  validators={{
    onChange: ({ value }) =>
      !value
        ? 'A first name is required'
        : value.length < 3
          ? 'First name must be at least 3 characters'
          : undefined,
    onChangeAsync: async ({ value }) => {
      await new Promise((resolve) => setTimeout(resolve, 1000))
      return value.includes('error') && 'No "error" allowed in first name'
    },
  }}
  children={(field) => (
    <>
      <input
        name={field().name}
        value={field().state.value}
        onBlur={field().handleBlur}
        onInput={(e) => field().handleChange(e.target.value)}
      />
      <p>{field().state.meta.errors[0]}</p>
    </>
  )}
/>

----------------------------------------

TITLE: Creating Form Options in @tanstack/solid-form
DESCRIPTION: Demonstrates how to create form options using the formOptions function, which can be shared between multiple forms. It defines default values for form fields.

LANGUAGE: tsx
CODE:
const formOpts = formOptions({
  defaultValues: {
    firstName: '',
    lastName: '',
    hobbies: [],
  } as Person,
})

----------------------------------------

TITLE: Declaring FieldInfo Properties in TypeScript
DESCRIPTION: Declares the 'instance' property of FieldInfo, which can be either a FieldApi instance or null, and the 'validationMetaMap' property, which is a record of validation metadata.

LANGUAGE: typescript
CODE:
instance: 
  | FieldApi<TFormData, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>
  | null;

LANGUAGE: typescript
CODE:
validationMetaMap: Record<ValidationErrorMapKeys, ValidationMeta | undefined>;

----------------------------------------

TITLE: Using Standard Schema Libraries for Validation in @tanstack/solid-form
DESCRIPTION: Shows how to use standard schema libraries like Zod for form validation. It demonstrates both synchronous and asynchronous validation using Zod schemas.

LANGUAGE: tsx
CODE:
import { z } from 'zod'

// ...
<form.Field
  name="firstName"
  validators={{
    onChange: z.string().min(3, 'First name must be at least 3 characters'),
    onChangeAsyncDebounceMs: 500,
    onChangeAsync: z.string().refine(
      async (value) => {
        await new Promise((resolve) => setTimeout(resolve, 1000))
        return !value.includes('error')
      },
      {
        message: 'No "error" allowed in first name',
      },
    ),
  }}
  children={(field) => (
    <>
      <input
        name={field().name}
        value={field().state.value}
        onBlur={field().handleBlur}
        onInput={(e) => field().handleChange(e.target.value)}
      />
      <p>{field().state.meta.errors[0]}</p>
    </>
  )}
/>

----------------------------------------

TITLE: Defining DeepValue Type Alias in TypeScript
DESCRIPTION: This type alias, DeepValue, is used to infer the type of a deeply nested property within an object or an array. It handles various cases including array indexing, dot notation, and nested structures. The type is limited to a maximum depth of 10 to prevent excessive recursion.

LANGUAGE: typescript
CODE:
type DeepValue<TValue, TAccessor, TDepth> = unknown extends TValue ? TValue : TDepth["length"] extends 10 ? unknown : TValue extends ReadonlyArray<any> ? TAccessor extends `[${infer TBrackets}].${infer TAfter}` ? DeepValue<DeepValue<TValue, TBrackets, [...TDepth, any]>, TAfter, [...TDepth, any]> : TAccessor extends `[${infer TBrackets}]` ? DeepValue<TValue, TBrackets, [...TDepth, any]> : TAccessor extends keyof TValue ? TValue[TAccessor] : TValue[TAccessor & number] : TAccessor extends `${infer TBefore}[${infer TEverythingElse}` ? DeepValue<DeepValue<TValue, TBefore, [...TDepth, any]>, `[${TEverythingElse}`, [...TDepth, any]> : TAccessor extends `[${infer TBrackets}]` ? DeepValue<TValue, TBrackets, [...TDepth, any]> : TAccessor extends `${infer TBefore}.${infer TAfter}` ? DeepValue<DeepValue<TValue, TBefore, [...TDepth, any]>, TAfter, [...TDepth, any]> : TAccessor extends string ? 
  | Get<TValue, TAccessor>
  | ApplyNull<...> | ApplyUndefined<...> : never;

----------------------------------------

TITLE: Implementing DeepKeys Generic Type in TypeScript
DESCRIPTION: A TypeScript type alias that recursively extracts all possible nested keys from a type T up to a specified depth. It handles arrays, tuples, objects, and primitive types differently, with a depth limit of 5 levels.

LANGUAGE: typescript
CODE:
type DeepKeys<T, TDepth> = TDepth["length"] extends 5 ? never : unknown extends T ? PrefixFromDepth<string, TDepth> : T extends readonly any[] & IsTuple<T> ? PrefixTupleAccessor<T, AllowedIndexes<T>, TDepth> : T extends any[] ? PrefixArrayAccessor<T, [...TDepth, any]> : T extends Date ? never : T extends object ? PrefixObjectAccessor<T, TDepth> : T extends string | number | boolean | bigint ? "" : never;

----------------------------------------

TITLE: Accessing Field State in @tanstack/solid-form
DESCRIPTION: Shows how to access a field's state, including its current value, validation status, and error messages. It also demonstrates how to check field interaction states like touched, pristine, and dirty.

LANGUAGE: tsx
CODE:
const {
  value,
  meta: { errors, isValidating },
} = field().state

LANGUAGE: tsx
CODE:
const { isTouched, isPristine, isDirty } = field().state.meta

----------------------------------------

TITLE: Defining createField Function in TypeScript
DESCRIPTION: This function creates a field for a form with extensive type parameters for various data types, validation functions, and event handlers. It returns a combination of FieldApi and SolidFieldApi, providing a comprehensive interface for field management.

LANGUAGE: typescript
CODE:
function createField<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>(opts): () => FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> & SolidFieldApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>

----------------------------------------

TITLE: DerivedFormState Property Declarations in TypeScript
DESCRIPTION: This code snippet shows the property declarations for the DerivedFormState type alias. It includes properties such as canSubmit, errors, fieldMeta, and various boolean flags indicating the form's state.

LANGUAGE: typescript
CODE:
canSubmit: boolean;

errors: (
  | UnwrapFormValidateOrFn<TOnMount>
  | UnwrapFormValidateOrFn<TOnChange>
  | UnwrapFormAsyncValidateOrFn<TOnChangeAsync>
  | UnwrapFormValidateOrFn<TOnBlur>
  | UnwrapFormAsyncValidateOrFn<TOnBlurAsync>
  | UnwrapFormValidateOrFn<TOnSubmit>
  | UnwrapFormAsyncValidateOrFn<TOnSubmitAsync>
  | UnwrapFormAsyncValidateOrFn<TOnServer>)[];

fieldMeta: Record<DeepKeys<TFormData>, AnyFieldMeta>;

isBlurred: boolean;

isDirty: boolean;

isFieldsValid: boolean;

isFieldsValidating: boolean;

isFormValid: boolean;

isFormValidating: boolean;

isPristine: boolean;

isTouched: boolean;

isValid: boolean;

----------------------------------------

TITLE: Defining Generic FormApi Type Alias in TypeScript
DESCRIPTION: Creates a type alias called AnyFormApi that extends FormApi with all generic type parameters set to 'any'. This provides a convenient way to reference the FormApi type without specifying concrete types for all ten generic parameters.

LANGUAGE: typescript
CODE:
type AnyFormApi = FormApi<any, any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: BaseFormState Type Declaration in TypeScript
DESCRIPTION: This code snippet shows the type declaration for BaseFormState, including various properties such as error maps, field metadata, submission status, and validation states.

LANGUAGE: typescript
CODE:
{
  optional _force_re_eval: boolean;
  errorMap: FormValidationErrorMap<UnwrapFormValidateOrFn<TOnMount>, UnwrapFormValidateOrFn<TOnChange>, UnwrapFormAsyncValidateOrFn<TOnChangeAsync>, UnwrapFormValidateOrFn<TOnBlur>, UnwrapFormAsyncValidateOrFn<TOnBlurAsync>, UnwrapFormValidateOrFn<TOnSubmit>, UnwrapFormAsyncValidateOrFn<TOnSubmitAsync>, UnwrapFormAsyncValidateOrFn<TOnServer>>;
  fieldMetaBase: Record<DeepKeys<TFormData>, AnyFieldMetaBase>;
  isSubmitSuccessful: boolean;
  isSubmitted: boolean;
  isSubmitting: boolean;
  isValidating: boolean;
  submissionAttempts: number;
  validationMetaMap: Record<ValidationErrorMapKeys, ValidationMeta | undefined>;
  values: TFormData;
}

----------------------------------------

TITLE: Defining Generic AnyFormState Type in TypeScript
DESCRIPTION: A type alias that represents a generic form state using the FormState type with 'any' type parameters. This allows for flexible form state typing where specific types are not needed.

LANGUAGE: typescript
CODE:
type AnyFormState = FormState<any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: Creating a Field with @tanstack/solid-form
DESCRIPTION: Demonstrates how to create a field using the form.Field component. It shows how to set up an input field with proper event handling and value binding.

LANGUAGE: tsx
CODE:
<form.Field
  name="firstName"
  children={(field) => (
    <input
      name={field().name}
      value={field().state.value}
      onBlur={field().handleBlur}
      onInput={(e) => field().handleChange(e.target.value)}
    />
  )}
/>

----------------------------------------

TITLE: Initializing Form Options with TypeScript
DESCRIPTION: Creates form options with default values using the formOptions function. These options can be shared between multiple forms.

LANGUAGE: typescript
CODE:
const formOpts = formOptions({
  defaultValues: {
    firstName: '',
    lastName: '',
    hobbies: [],
  } as Person,
})

----------------------------------------

TITLE: Defining AnyFieldMetaDerived Type Alias in TypeScript
DESCRIPTION: Type alias definition that creates a flexible version of FieldMetaDerived accepting any type parameters. This is used for cases where the specific types are not known or need to be generic.

LANGUAGE: typescript
CODE:
type AnyFieldMetaDerived = FieldMetaDerived<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: Creating Form Instance with Submit Handler
DESCRIPTION: Demonstrates how to create a form instance using the useForm function with form options and an onSubmit handler.

LANGUAGE: javascript
CODE:
const form = useForm({
  ...formOpts,
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
})

----------------------------------------

TITLE: Defining Optional onChange Validator in TypeScript
DESCRIPTION: Optional validation function that runs whenever a form value changes.

LANGUAGE: typescript
CODE:
optional onChange: TOnChange;

----------------------------------------

TITLE: Defining Optional Async onBlur Validator in TypeScript
DESCRIPTION: Optional asynchronous validation function that runs when a field loses focus, returning a FormValidationError or Promise<FormValidationError>.

LANGUAGE: typescript
CODE:
optional onBlurAsync: TOnBlurAsync;

----------------------------------------

TITLE: Creating a Form Instance in Angular with @tanstack/angular-form
DESCRIPTION: Demonstrates how to create a form instance using the injectForm function, which accepts an object with an onSubmit callback for form submission handling.

LANGUAGE: typescript
CODE:
const form = injectForm({
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
})

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Form Example
DESCRIPTION: This snippet shows the commands to install project dependencies and start the development server for a TanStack Form example. It uses npm for package management and assumes a dev script is configured in the project.

LANGUAGE: shell
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project and output compiled files to the dist directory.

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Setting Async Validation Debounce
DESCRIPTION: Configuration option for adding a delay before executing async validation. Specified in milliseconds.

LANGUAGE: typescript
CODE:
optional asyncDebounceMs: number;

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install dependencies and start the development server. First installs required node modules, then starts the development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Example of onChange Validator in TypeScript
DESCRIPTION: This code snippet demonstrates an example of an onChange validator using Zod schema validation. It validates that the input is a string with a minimum length of 1.

LANGUAGE: TypeScript
CODE:
z.string().min(1)

----------------------------------------

TITLE: Defining Field Listeners Option in TypeScript
DESCRIPTION: Optional property for attaching event listeners to the field.

LANGUAGE: typescript
CODE:
optional listeners: FieldListeners<TParentData, TName, TData>;

----------------------------------------

TITLE: Schema Validation Implementation
DESCRIPTION: Demonstrates form validation using standard schema libraries like Zod.

LANGUAGE: tsx
CODE:
import { z } from 'zod'

const userSchema = z.object({
  age: z.number().gte(13, 'You must be 13 to make an account'),
})

function App() {
  const form = useForm({
    defaultValues: {
      age: 0,
    },
    validators: {
      onChange: userSchema,
    },
  })
  return (
    <div>
      <form.Field
        name="age"
        children={(field) => {
          return <>{/* ... */}</>
        }}
      />
    </div>
  )
}

----------------------------------------

TITLE: Running Remix Development Server
DESCRIPTION: Command to start the Remix development server for local testing and development.

LANGUAGE: shellscript
CODE:
npm run dev

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner.

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Defining Field DisableErrorFlat Option in TypeScript
DESCRIPTION: Optional boolean property that controls whether to disable the flat(1) operation on field errors.

LANGUAGE: typescript
CODE:
optional disableErrorFlat: boolean;

----------------------------------------

TITLE: Building Remix Project for Production
DESCRIPTION: Command to build the Remix application for production deployment, optimizing assets and generating necessary files.

LANGUAGE: sh
CODE:
npm run build

----------------------------------------

TITLE: Defining Field DefaultMeta Option in TypeScript
DESCRIPTION: Optional partial object containing default metadata for the field, including validation and state information.

LANGUAGE: typescript
CODE:
optional defaultMeta: Partial<FieldMeta<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, any, any, any, any, any, any, any>>;

----------------------------------------

TITLE: Defining Field AsyncDebounceMs Option in TypeScript
DESCRIPTION: Optional number property that specifies the default debounce time in milliseconds for async validation.

LANGUAGE: typescript
CODE:
optional asyncDebounceMs: number;

----------------------------------------

TITLE: Accessing Field State
DESCRIPTION: Demonstrates how to access and destructure field state including validation metadata.

LANGUAGE: tsx
CODE:
const {
  value,
  meta: { errors, isValidating },
} = field.state

LANGUAGE: tsx
CODE:
const { isTouched, isPristine, isDirty } = field.state.meta

----------------------------------------

TITLE: Running Remix in Production Mode
DESCRIPTION: Command to start the Remix application in production mode after building, suitable for deployment environments.

LANGUAGE: sh
CODE:
npm start

----------------------------------------

TITLE: Merging Form State in TypeScript
DESCRIPTION: A generic function that merges a base form instance with a partial form state. It accepts a form API instance and a partial form state object, returning a new form API instance with the merged state. The function preserves type safety through generic type parameters.

LANGUAGE: typescript
CODE:
function mergeForm<TFormData>(baseForm, state): FormApi<NoInfer<TFormData>, any, any, any, any, any, any, any, any, any>

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the local development server on port 4200 with auto-reload capability

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Form Reset Implementation
DESCRIPTION: Method for resetting form state to default or specified values with options for keeping default values.

LANGUAGE: typescript
CODE:
reset(values?, opts?): void

----------------------------------------

TITLE: Validating Field in TypeScript
DESCRIPTION: Method for validating the field value, which can be triggered by various causes like change, blur, or submit events.

LANGUAGE: TypeScript
CODE:
validate(cause: ValidationCause, opts?: { skipFormValidation?: boolean }): unknown[] | Promise<unknown[]>

----------------------------------------

TITLE: Accessing Field State Properties
DESCRIPTION: Example showing how to access various field state properties including validation status and metadata.

LANGUAGE: javascript
CODE:
const {
  value,
  meta: { errors, isValidating },
} = field.state

LANGUAGE: javascript
CODE:
const { isTouched, isPristine, isDirty } = field.state.meta

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Angular CLI commands for generating various project artifacts including components, directives, pipes, services, and more

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Rendering Comparison Table in Markdown
DESCRIPTION: This code snippet shows a markdown table comparing various features and capabilities of different form libraries. It includes information on GitHub stars, supported frameworks, bundle size, and specific features like TypeScript support and validation capabilities.

LANGUAGE: markdown
CODE:
| Feature                                           | TanStack Form                                | Formik                         | Redux Form                             | React Hook Form                                  | Final Form                             |
| ------------------------------------------------- | -------------------------------------------- | ------------------------------ | -------------------------------------- | ------------------------------------------------ | -------------------------------------- |
| Github Repo / Stars                               | [![][stars-tanstack-form]][gh-tanstack-form] | [![][stars-formik]][gh-formik] | [![][stars-redux-form]][gh-redux-form] | [![][stars-react-hook-form]][gh-react-hook-form] | [![][stars-final-form]][gh-final-form] |
| Supported Frameworks                              | React, Vue, Angular, Solid, Lit              | React                          | React                                  | React                                            | React, Vue, Angular, Solid, Vanilla JS |
| Bundle Size                                       | [![][bp-tanstack-form]][bpl-tanstack-form]   | [![][bp-formik]][bpl-formik]   | [![][bp-redux-form]][bpl-redux-form]   | [![][bp-react-hook-form]][bpl-react-hook-form]   | [![][bp-final-form]][bpl-final-form]   |
| First-class TypeScript support                    | ✅                                           | ❓                             | ❓                                     | ✅                                               | ✅                                     |
| Fully Inferred TypeScript (Including Deep Fields) | ✅                                           | ❓                             | ❓                                     | ✅                                               | 🛑                                     |
| Headless UI components                            | ✅                                           | ❓                             | ❓                                     | ✅                                               | ❓                                     |
| Framework agnostic                                | ✅                                           | ❓                             | ❓                                     | 🛑                                               | ✅                                     |
| Granular reactivity                               | ✅                                           | ❓                             | ❓                                     | ❓                                               | ✅                                     |
| Nested object/array fields                        | ✅                                           | ✅                             | ❓                                     | ✅\*(1)                                          | ✅                                     |
| Async validation                                  | ✅                                           | ✅                             | ❓                                     | ✅                                               | ✅                                     |
| Built-in async validation debounce                | ✅                                           | ❓                             | ❓                                     | ❓                                               | ❓                                     |
| Schema-based Validation                           | ✅                                           | ✅                             | ❓                                     | ✅                                               | ❓                                     |
| First Party Devtools                              | 🛑\*(2)                                      | 🛑                             | ✅\*(3)                                | ✅                                               | ❓                                     |
| SSR integrations                                  | ✅                                           | 🛑                             | 🛑                                     | 🛑                                               | 🛑                                     |
| React Compiler support                            | ✅                                           | ❓                             | ❓                                     | 🛑                                               | ❓                                     |

----------------------------------------

TITLE: Running E2E Tests
DESCRIPTION: Command to run end-to-end tests after setting up an E2E testing package

LANGUAGE: bash
CODE:
ng e2e

----------------------------------------

TITLE: Configuring TypeScript for TanStack Form
DESCRIPTION: Required TypeScript configuration setting in tsconfig.json for optimal type safety with TanStack Form. Enables strict type checking mode.

LANGUAGE: json
CODE:
{
  "strict": true
}

----------------------------------------

TITLE: Creating Custom Form Hooks with TanStack Form
DESCRIPTION: Shows how to create customized form hooks and components using TanStack Form's utilities, supporting integration with design systems.

LANGUAGE: typescript
CODE:
// Exported from your own library with pre-bound components for your forms.
export const { useAppForm, withForm } = createFormHook(/* options */)

----------------------------------------

TITLE: Accessing Field State in TanStack Lit Form
DESCRIPTION: Shows how to access various properties of a field's state, including its current value, validation errors, and validation status.

LANGUAGE: tsx
CODE:
const {
  value,
  meta: { errors, isValidating },
} = field.state

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to display Angular CLI help information

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Running TanStack Website Locally
DESCRIPTION: Commands to install dependencies and start the TanStack website in development mode

LANGUAGE: sh
CODE:
cd tanstack.com
pnpm i
# The app will run on https://localhost:3000 by default
pnpm dev

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Form Example in Bash
DESCRIPTION: These commands install the required dependencies using npm and then start the development server for the TanStack Form example project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Building Angular Project
DESCRIPTION: Command to build the Angular project and output to the dist directory

LANGUAGE: bash
CODE:
ng build

----------------------------------------

TITLE: Angular Commit Message Format
DESCRIPTION: Standard format for commit messages following Angular conventions.

LANGUAGE: text
CODE:
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
<footer>

----------------------------------------

TITLE: Implementing a Form Field with Validation in TanStack Lit Form
DESCRIPTION: Demonstrates the creation of a form field using the field method provided by the form instance. This example includes input handling, validation, and rendering of the field in the UI.

LANGUAGE: ts
CODE:
${this.#form.field(
    {
      name: `firstName`,
      validators: {
        onChange: ({ value }) =>
          value.length < 3 ? "Not long enough" : undefined,
        },
      },
      (field: FieldApi<Employee, "firstName">) => {
        return html` <div>
          <label class="first-name-label">First Name</label>
          <input
           id="firstName"
           type="text"
           class="first-name-input"
           placeholder="First Name"
           @blur="${() => field.handleBlur()}"
           .value="${field.state.value}"
           @input="${(event: InputEvent) => {
           if (event.currentTarget) {
            const newValue = (event.currentTarget as HTMLInputElement).value;
            field.handleChange(newValue);
           }
          }}"
        />
      </div>`;
    },
)}

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Command to install project dependencies using npm, pnpm, or yarn package managers.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Building and Running Development Server
DESCRIPTION: Commands for building all packages and starting the development server.

LANGUAGE: bash
CODE:
pnpm build:all
pnpm run watch

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Command to start the development server at http://localhost:5173 with hot reload functionality.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing Development Dependencies with PNPM
DESCRIPTION: Commands for setting up the development environment using PNPM package manager.

LANGUAGE: bash
CODE:
pnpm install

----------------------------------------

TITLE: Creating Form Instance with Standalone TanStackFormController API
DESCRIPTION: Illustrates how to create a form instance without using formOptions, by directly using the TanStackFormController API with spread options.

LANGUAGE: tsx
CODE:
#form = new TanStackFormController(this, {
  ...formOpts,
})

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Command to start the development server at http://localhost:5173 with hot-reload enabled.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install project dependencies and start the development server in a TanStack Form example project.

LANGUAGE: shell
CODE:
npm install
npm run dev

----------------------------------------

TITLE: TypeScript Definition of useField Hook
DESCRIPTION: Type definition for the useField hook that manages a form field. The hook accepts multiple generic type parameters for parent data, field name, validation functions, and returns a combined type of FieldApi and ReactFieldApi.

LANGUAGE: typescript
CODE:
function useField<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TPatentSubmitMeta>(opts): FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TPatentSubmitMeta> & ReactFieldApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TPatentSubmitMeta>

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install dependencies and start the development server for a TanStack Form example project

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install dependencies and start the development server for the TanStack Form example project.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Defining useField Function in TypeScript
DESCRIPTION: This snippet defines the useField function with its complex type signature. It takes numerous type parameters and returns an object with api and state properties.

LANGUAGE: typescript
CODE:
function useField<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>(opts): object

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be accessed at http://localhost:3000 once running.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Creating TanStack Project Directory
DESCRIPTION: Command to create a new directory for TanStack projects

LANGUAGE: sh
CODE:
mkdir tanstack

----------------------------------------

TITLE: Returning API Object in useField Function
DESCRIPTION: This snippet shows the structure of the api object returned by the useField function. It combines FieldApi and VueFieldApi types with various type parameters.

LANGUAGE: typescript
CODE:
readonly api: FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> & VueFieldApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> = fieldApi;

----------------------------------------

TITLE: Cloning TanStack Repositories
DESCRIPTION: Commands to clone the TanStack website and form repositories

LANGUAGE: sh
CODE:
cd tanstack
git clone git@github.com:TanStack/tanstack.com.git
git clone git@github.com:TanStack/form.git

----------------------------------------

TITLE: Installing TanStack Form for React
DESCRIPTION: Commands to install the React adapter for TanStack Form using different package managers.

LANGUAGE: bash
CODE:
# npm
$ npm i @tanstack/react-form
# pnpm
$ pnpm add @tanstack/react-form
# bun
$ bun add @tanstack/react-form
# yarn
$ yarn add @tanstack/react-form

----------------------------------------

TITLE: Defining createFormHook Function in TypeScript
DESCRIPTION: Main function that creates form hook utilities with generic type parameters for components and form components. Returns an object containing useAppForm and withForm functions.

LANGUAGE: typescript
CODE:
function createFormHook<TComponents, TFormComponents>(__namedParameters): object

----------------------------------------

TITLE: Installing TanStack Form for Solid
DESCRIPTION: Commands to install the Solid adapter for TanStack Form using different package managers.

LANGUAGE: bash
CODE:
# npm
$ npm i @tanstack/solid-form
# pnpm
$ pnpm add @tanstack/solid-form
# bun
$ bun add @tanstack/solid-form
# yarn
$ yarn add @tanstack/solid-form

----------------------------------------

TITLE: Installing TanStack Form for Lit
DESCRIPTION: Commands to install the Lit adapter for TanStack Form using different package managers.

LANGUAGE: bash
CODE:
# npm
$ npm i @tanstack/lit-form
# pnpm
$ pnpm add @tanstack/lit-form
# bun
$ bun add @tanstack/lit-form
# yarn
$ yarn add @tanstack/lit-form

----------------------------------------

TITLE: Defining createFormHookContexts Function in TypeScript
DESCRIPTION: This function creates and returns an object containing form-related context objects and hooks. It includes fieldContext, formContext, useFieldContext, and useFormContext.

LANGUAGE: typescript
CODE:
function createFormHookContexts(): object

----------------------------------------

TITLE: Returning Object Structure from createFormHookContexts
DESCRIPTION: The returned object includes fieldContext (a Context for AnyFieldApi), formContext (a Context for AnyFormApi), useFieldContext (a function to access FieldApi), and useFormContext (a function to access ReactFormExtendedApi).

LANGUAGE: typescript
CODE:
{
  fieldContext: Context<AnyFieldApi>;
  formContext: Context<AnyFormApi>;
  useFieldContext: <TData>() => FieldApi<any, string, TData, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>;
  useFormContext: () => ReactFormExtendedApi<Record<string, never>, any, any, any, any, any, any, any, any, any>;
}

----------------------------------------

TITLE: Creating and Rendering a Basic Form with TanStack Form in TSX
DESCRIPTION: This snippet shows how to create a simple form using TanStack Form. It includes creating a form instance, defining a field, and handling form submission. The example uses a single 'fullName' field and logs the form data on submission.

LANGUAGE: tsx
CODE:
import { createForm } from '@tanstack/solid-form'

function App() {
  const form = createForm(() => ({
    defaultValues: {
      fullName: '',
    },
    onSubmit: async ({ value }) => {
      // Do something with form data
      console.log(value)
    },
  }))

  return (
    <div>
      <h1>Simple Form Example</h1>
      <form
        onSubmit={(e) => {
          e.preventDefault()
          e.stopPropagation()
          form.handleSubmit()
        }}
      >
        <div>
          <form.Field
            name="fullName"
            children={(field) => (
              <input
                name={field().name}
                value={field().state.value}
                onBlur={field().handleBlur}
                onInput={(e) => field().handleChange(e.target.value)}
              />
            )}
          />
        </div>
        <button type="submit">Submit</button>
      </form>
    </div>
  )
}

----------------------------------------

TITLE: Defining createForm Function in TypeScript
DESCRIPTION: Function signature for createForm that returns a combined FormApi and SolidFormApi interface. Takes optional form options and supports extensive type parameters for form validation and submission handling.

LANGUAGE: typescript
CODE:
function createForm<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>(opts?): FormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta> & SolidFormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>

----------------------------------------

TITLE: Defining VueFormApi Interface in TypeScript
DESCRIPTION: This snippet defines the VueFormApi interface with various type parameters for form validation and submission handling. It includes properties for Field components, Subscribe components, and methods for managing form state and fields.

LANGUAGE: TypeScript
CODE:
interface VueFormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta> {
  Field: FieldComponent<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>;
  Subscribe: SubscribeComponent<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer>;
  useField: UseField<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>;
  useStore: <TSelected>(selector?: (state: FormState<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer>) => TSelected) => Readonly<Ref<TSelected, TSelected>>;
}

----------------------------------------

TITLE: Implementing Form Field Listeners in Vue with TanStack Form
DESCRIPTION: This code snippet demonstrates how to use the TanStack Form library in a Vue.js component to create form fields with listeners. It shows how to reset the 'province' field when the 'country' field changes using the onChange listener.

LANGUAGE: vue
CODE:
<script setup>
import { useForm } from '@tanstack/vue-form'

const form = useForm({
  defaultValues: {
    country: '',
    province: '',
  },
  // ...
})
</script>

<template>
  <div>
    <form.Field
      name="country"
      :listeners="{
        onChange: ({ value }) => {
          console.log(`Country changed to: ${value}, resetting province`)
          form.setFieldValue('province', '')
        },
      }"
    >
      <template v-slot="{ field }">
        <input
          :value="field.state.value"
          @input="(e) => field.handleChange(e.target.value)"
        />
      </template>
    </form.Field>

    <form.Field name="province">
      <template v-slot="{ field }">
        <input
          :value="field.state.value"
          @input="(e) => field.handleChange(e.target.value)"
        />
      </template>
    </form.Field>
  </div>
</template>

----------------------------------------

TITLE: Defining injectForm Function in TypeScript
DESCRIPTION: This function creates a FormApi object with multiple generic type parameters for form data and various validation functions. It takes an optional FormOptions object as a parameter and returns a FormApi object.

LANGUAGE: typescript
CODE:
function injectForm<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>(opts?): FormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>

----------------------------------------

TITLE: Implementing Async Form Initialization with TanStack Query in Vue
DESCRIPTION: Example showing how to fetch initial form values asynchronously using TanStack Query and populate a TanStack Form. The code demonstrates handling loading states, data fetching with a simulated delay, and reactive form values using Vue's composition API.

LANGUAGE: vue
CODE:
<script setup lang="ts">
import { useForm } from '@tanstack/vue-form'
import { useQuery } from '@tanstack/vue-query'
import { watchEffect, reactive } from 'vue'

const { data, isLoading } = useQuery({
  queryKey: ['data'],
  queryFn: async () => {
    await new Promise((resolve) => setTimeout(resolve, 1000))
    return { firstName: 'FirstName', lastName: 'LastName' }
  },
})

const firstName = computed(() => data.value?.firstName || '')
const lastName = computed(() => data.value?.lastName || '')

const defaultValues = reactive({
  firstName,
  lastName,
})

const form = useForm({
  defaultValues,
  onSubmit: async ({ value }) => {
    // Do something with form data
    console.log(value)
  },
})
</script>

<template>
  <p v-if="isLoading">Loading..</p>
  <form v-else @submit.prevent.stop="form.handleSubmit">
    <!-- ... -->
  </form>
</template>

----------------------------------------

TITLE: Defining CreateField Generic Type Alias in TypeScript
DESCRIPTION: Defines a complex generic type alias for creating form fields with comprehensive type safety. The type handles various validation events (mount, change, blur, submit) with both synchronous and asynchronous variants, along with server-side validation support. Returns a combination of FieldApi and SolidFieldApi interfaces.

LANGUAGE: typescript
CODE:
type CreateField<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> = <TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TSubmitMeta>(opts) => () => FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> & SolidFieldApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>;

----------------------------------------

TITLE: Defining injectStore Function in TypeScript
DESCRIPTION: This snippet defines the injectStore function, which takes a form API and an optional selector function as parameters. It returns a Signal of the selected form state. The function is highly generic, allowing for various form data types and validation functions.

LANGUAGE: typescript
CODE:
function injectStore<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta, TSelected>(form, selector?): Signal<TSelected>

----------------------------------------

TITLE: Defining Blur Async Debounce Configuration in TypeScript
DESCRIPTION: Configuration property for setting debounce time in milliseconds for async blur validation.

LANGUAGE: typescript
CODE:
optional onBlurAsyncDebounceMs: number;

----------------------------------------

TITLE: Defining Optional onMount Validator in TypeScript
DESCRIPTION: Optional validation function that executes when the component mounts.

LANGUAGE: typescript
CODE:
optional onMount: TOnMount;

----------------------------------------

TITLE: Defining Field Component in TypeScript
DESCRIPTION: This code snippet defines the Field component function with its type parameters and return type. It's a complex function with many generic type parameters related to form validation and data handling.

LANGUAGE: typescript
CODE:
function Field<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>(props): Element

----------------------------------------

TITLE: Defining Field Validators Option in TypeScript
DESCRIPTION: Optional property for specifying field validators including mount, change, blur, and submit validators.

LANGUAGE: typescript
CODE:
optional validators: FieldValidators<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync>;

----------------------------------------

TITLE: Implementing Type Guard for StandardSchemaV1 in TypeScript
DESCRIPTION: This function checks if the provided validator is of type StandardSchemaV1<unknown, unknown>. It takes an unknown type as input and returns a boolean indicating whether the input matches the StandardSchemaV1 interface.

LANGUAGE: TypeScript
CODE:
function isStandardSchemaValidator(validator): validator is StandardSchemaV1<unknown, unknown>

----------------------------------------

TITLE: Defining Field Component in TypeScript
DESCRIPTION: This code snippet defines the Field component function with its type parameters and return type. It uses the useField hook internally to manage the field instance and returns a React component.

LANGUAGE: typescript
CODE:
function Field<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TPatentSubmitMeta>(__namedParameters): ReactNode

----------------------------------------

TITLE: Defining Type Guard for Global Form Validation Error in TypeScript
DESCRIPTION: This function serves as a type guard to determine if an error is a GlobalFormValidationError. It takes an unknown error as input and returns a boolean indicating whether the error is of type GlobalFormValidationError<unknown>.

LANGUAGE: typescript
CODE:
function isGlobalFormValidationError(error): error is GlobalFormValidationError<unknown>

----------------------------------------

TITLE: Returning State Object in useField Function
DESCRIPTION: This snippet shows the structure of the state object returned by the useField function. It is a readonly Ref of FieldState with various type parameters.

LANGUAGE: typescript
CODE:
readonly state: Readonly<Ref<FieldState<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync>, FieldState<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync>>> = fieldState;

----------------------------------------

TITLE: Defining ReactFormApi Interface in TypeScript
DESCRIPTION: This snippet defines the ReactFormApi interface with its type parameters and properties. It includes the Field component and Subscribe function, which are crucial for rendering form fields and managing form state in React applications.

LANGUAGE: TypeScript
CODE:
interface ReactFormApi<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta> {
  Field: FieldComponent<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta>;
  Subscribe: <TSelected>(props) => ReactNode;
}

----------------------------------------

TITLE: Implementing useStore Hook with Derived Store
DESCRIPTION: TypeScript declaration for useStore hook variant that works with Derived store types. Similar to the base implementation but accepts a Derived store instance instead of a regular Store.

LANGUAGE: typescript
CODE:
function useStore<TState, TSelected>(store, selector?): TSelected

----------------------------------------

TITLE: withForm HOC Definition
DESCRIPTION: Higher-order component function that wraps components with form functionality, supporting the same validation and async operation type parameters as useAppForm.

LANGUAGE: typescript
CODE:
withForm: <TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer, TSubmitMeta, TRenderProps>(__namedParameters) => (props) => Element;

----------------------------------------

TITLE: Implementing Subscribe Function in ReactFormApi
DESCRIPTION: This snippet defines the Subscribe function in the ReactFormApi interface. It allows developers to listen and react to changes in the form's state, making it useful for executing side effects or rendering specific components based on state updates.

LANGUAGE: TypeScript
CODE:
Subscribe: <TSelected>(props) => ReactNode;

----------------------------------------

TITLE: Defining Default onSubmitMeta in TanStack Form (TSX)
DESCRIPTION: This snippet shows how to define the default state of the form.onSubmitMeta prop in TanStack Form. It sets up a form with default values and a custom onSubmit handler that uses both form values and metadata.

LANGUAGE: tsx
CODE:
const form = useForm({
  defaultValues: {
    firstName: 'Rick',
  },
  // {} is the default value passed to `onSubmit`'s `meta` property
  onSubmitMeta: {} as { lastName: string },
  onSubmit: async ({ value, meta }) => {
    // Do something with the values passed via handleSubmit
    console.log(`${value.firstName} - ${meta}`)
  },
})

----------------------------------------

TITLE: Handling Form Submission with Custom Metadata in TanStack Form (TSX)
DESCRIPTION: This example demonstrates how to handle form submission by providing custom metadata to the handleSubmit function. It prevents default form submission behavior and passes a lastName value as metadata.

LANGUAGE: tsx
CODE:
<form
  onSubmit={(e) => {
    e.preventDefault()
    e.stopPropagation()
    form.handleSubmit({
      lastName: 'Astley',
    })
  }}
></form>

----------------------------------------

TITLE: Defining SolidFormApi Interface in TypeScript
DESCRIPTION: This snippet defines the SolidFormApi interface with multiple generic type parameters. It includes properties for creating fields, a Field component, and utility functions for subscribing to and using the form store.

LANGUAGE: TypeScript
CODE:
interface SolidFormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta> {
  createField: CreateField<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>;
  Field: FieldComponent<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TSubmitMeta>;
  Subscribe: <TSelected>(props: { children: Element | ((state: TSelected) => Element); selector?: (state: FormState<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer>) => TSelected }) => Element;
  useStore: <TSelected>(selector?: (state: FormState<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer>) => TSelected) => () => TSelected;
}

----------------------------------------

TITLE: Array-Based Error Validation
DESCRIPTION: Multiple error message validation using arrays for password requirements

LANGUAGE: tsx
CODE:
<form.Field
  name="password"
  validators={{
    onChange: ({ value }) => {
      const errors = []
      if (value.length < 8) errors.push('Password too short')
      if (!/[A-Z]/.test(value)) errors.push('Missing uppercase letter')
      if (!/[0-9]/.test(value)) errors.push('Missing number')

      return errors.length ? errors : undefined
    },
  }}
/>

----------------------------------------

TITLE: Creating Form Options in TanStack Lit Form
DESCRIPTION: Demonstrates how to create form options using the formOptions function. These options can be shared between multiple forms and include default values for form fields.

LANGUAGE: tsx
CODE:
const formOpts = formOptions({
  defaultValues: {
    firstName: '',
    lastName: '',
    employed: false,
    jobTitle: '',
  } as Employee,
})

----------------------------------------

TITLE: Angular Lifecycle Methods Implementation
DESCRIPTION: Implementation of Angular lifecycle hooks OnInit, OnChanges, and OnDestroy in the TanStackField directive.

LANGUAGE: typescript
CODE:
ngOnInit(): void
ngOnChanges(): void
ngOnDestroy(): void

----------------------------------------

TITLE: Initializing Form Instance with TanStackFormController
DESCRIPTION: Shows how to create a form instance using the TanStackFormController interface. This example initializes the form with default values for various fields.

LANGUAGE: tsx
CODE:
#form = new TanStackFormController(this, {
  defaultValues: {
    firstName: '',
    lastName: '',
    employed: false,
    jobTitle: '',
  } as Employee,
})

----------------------------------------

TITLE: Defining UnwrapFieldAsyncValidateOrFn Type Alias in TypeScript
DESCRIPTION: This type alias is used to unwrap the result of async validation for form fields. It handles different scenarios including standard schema validation, form-level validation, and field-level validation functions.

LANGUAGE: typescript
CODE:
type UnwrapFieldAsyncValidateOrFn<TParentData, TName, TValidateOrFn, TFormValidateOrFn> = 
  | [TFormValidateOrFn] extends [StandardSchemaV1<any, infer TStandardOut>] ? TName extends keyof TStandardOut ? StandardSchemaV1Issue[] : undefined : undefined
  | UnwrapFormAsyncValidateOrFnForInner<TFormValidateOrFn> extends infer TFormValidateVal ? TFormValidateVal extends object ? [DeepValue<TFormValidateVal, TName>] extends [never] ? undefined : StandardSchemaV1Issue[] : TFormValidateVal extends object ? TName extends keyof TFormValidateVal["fields"] ? TFormValidateVal["fields"][TName] : undefined : undefined : never
  | [TValidateOrFn] extends [FieldValidateAsyncFn<any, any, any>] ? Awaited<ReturnType<TValidateOrFn>> : [TValidateOrFn] extends [StandardSchemaV1<any, any>] ? StandardSchemaV1Issue[] : undefined;

----------------------------------------

TITLE: Initializing FieldApi in TypeScript
DESCRIPTION: Constructor for creating a new FieldApi instance. This is typically used internally by framework-specific hooks or functions.

LANGUAGE: TypeScript
CODE:
new FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>(opts): FieldApi<...>

----------------------------------------

TITLE: FieldState Type Declaration in TypeScript
DESCRIPTION: This code snippet shows the type declaration for FieldState, including the meta property of type FieldMeta and the value property of type TData. These properties represent the current metadata and value of the field respectively.

LANGUAGE: typescript
CODE:
meta: FieldMeta<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync>;
value: TData;

----------------------------------------

TITLE: Defining FieldComponent Type Alias in TypeScript
DESCRIPTION: This code snippet defines a complex type alias called FieldComponent. It represents a component for form fields, with generic types for parent data, various form events (onChange, onBlur, onSubmit, etc.), and specific field properties. The component takes children and field options as props and returns a JSX element.

LANGUAGE: typescript
CODE:
type FieldComponent<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> = <TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync>({\n  children,\n  ...fieldOptions\n}) => JSXElement;

----------------------------------------

TITLE: Handling Field Changes in TypeScript
DESCRIPTION: Method for handling field value changes, which updates the field state and triggers validation.

LANGUAGE: TypeScript
CODE:
handleChange(updater: Updater<TData>): void

----------------------------------------

TITLE: Defining FieldApiOptions Interface in TypeScript
DESCRIPTION: This code snippet defines the FieldApiOptions interface, which extends FieldOptions and includes additional properties for form handling. It uses multiple generic type parameters to provide type safety for various form-related operations.

LANGUAGE: typescript
CODE:
interface FieldApiOptions<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> extends FieldOptions<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync> {
  form: FormApi<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>;
}

----------------------------------------

TITLE: Defining Required Field Name Property in TypeScript
DESCRIPTION: Required property that specifies the field name as a deep key of the parent dataset.

LANGUAGE: typescript
CODE:
name: TName;

----------------------------------------

TITLE: Defining FieldValidators Interface in TypeScript
DESCRIPTION: This code snippet defines the FieldValidators interface with various validator functions and properties for form fields. It includes type parameters for parent data, field name, field data, and different validator types.

LANGUAGE: TypeScript
CODE:
interface FieldValidators<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync> {
  onMount?: TOnMount;
  onChange?: TOnChange;
  onChangeAsync?: TOnChangeAsync;
  onChangeAsyncDebounceMs?: number;
  onChangeListenTo?: unknown extends TParentData ? string : TParentData extends readonly any[] & IsTuple<TParentData> ? PrefixTupleAccessor<TParentData<TParentData>, AllowedIndexes<TParentData<TParentData>, never>, []> : TParentData extends any[] ? PrefixArrayAccessor<TParentData<TParentData>, [any]> : TParentData extends Date ? never : TParentData extends object ? PrefixObjectAccessor<TParentData<TParentData>, []> : TParentData extends string | number | bigint | boolean ? "" : never[];
  onBlur?: TOnBlur;
  onBlurAsync?: TOnBlurAsync;
  onBlurAsyncDebounceMs?: number;
  onBlurListenTo?: unknown extends TParentData ? string : TParentData extends readonly any[] & IsTuple<TParentData> ? PrefixTupleAccessor<TParentData<TParentData>, AllowedIndexes<TParentData<TParentData>, never>, []> : TParentData extends any[] ? PrefixArrayAccessor<TParentData<TParentData>, [any]> : TParentData extends Date ? never : TParentData extends object ? PrefixObjectAccessor<TParentData<TParentData>, []> : TParentData extends string | number | bigint | boolean ? "" : never[];
  onSubmit?: TOnSubmit;
  onSubmitAsync?: TOnSubmitAsync;
}

----------------------------------------

TITLE: Example of onChangeAsync Validator in TypeScript
DESCRIPTION: This code snippet shows an example of an asynchronous onChange validator using Zod schema validation. It validates that the input string has a length greater than 3 using an async refine method.

LANGUAGE: TypeScript
CODE:
z.string().refine(async (val) => val.length > 3, { message: 'Testing 123' })

----------------------------------------

TITLE: Handling Invalid Form Submission
DESCRIPTION: Function that handles attempts to submit an invalid form. Receives form API and form values as parameters.

LANGUAGE: typescript
CODE:
optional onSubmitInvalid: (props) => void;

----------------------------------------

TITLE: Configuring Form Validators
DESCRIPTION: Configuration object for defining form validation rules including mount, change, blur, and submit validators for both sync and async validation.

LANGUAGE: typescript
CODE:
optional validators: FormValidators<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync>;

----------------------------------------

TITLE: Defining Optional Async onChange Validator in TypeScript
DESCRIPTION: Optional asynchronous validation function for complex validations involving server requests.

LANGUAGE: typescript
CODE:
optional onChangeAsync: TOnChangeAsync;

----------------------------------------

TITLE: Defining Change Async Debounce Configuration in TypeScript
DESCRIPTION: Configuration property for setting debounce time in milliseconds for async change validation.

LANGUAGE: typescript
CODE:
optional onChangeAsyncDebounceMs: number;

----------------------------------------

TITLE: Defining Optional Submit Validators in TypeScript
DESCRIPTION: Optional synchronous and asynchronous validation functions that run on form submission.

LANGUAGE: typescript
CODE:
optional onSubmit: TOnSubmit;
optional onSubmitAsync: TOnSubmitAsync;

----------------------------------------

TITLE: Defining Path Property in StandardSchemaV1Issue Interface - TypeScript
DESCRIPTION: Defines an optional readonly path property that stores the location of the validation issue as an array of property keys or path segments.

LANGUAGE: typescript
CODE:
readonly optional path: readonly (PropertyKey | StandardSchemaV1PathSegment)[];

----------------------------------------

TITLE: Defining AnyFieldApi Type Alias in TypeScript
DESCRIPTION: This code snippet defines the AnyFieldApi type alias. It represents the FieldApi with all its generic parameters set to 'any', providing a convenient way to use the Field API without specifying concrete types.

LANGUAGE: typescript
CODE:
type AnyFieldApi = FieldApi<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: Defining AnyFieldMeta Type Alias in TypeScript
DESCRIPTION: A type alias that represents a generic FieldMeta type with any possible type parameters. This allows for flexible type usage when exact types are not needed or when working with unknown field types.

LANGUAGE: typescript
CODE:
type AnyFieldMeta = FieldMeta<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: Defining AnyFieldMetaBase Type in TypeScript
DESCRIPTION: A type alias that represents a generic field metadata base structure using FieldMetaBase with all type parameters set to 'any'. This type is used as a base for field metadata handling in the TanStack Form library.

LANGUAGE: typescript
CODE:
type AnyFieldMetaBase = FieldMetaBase<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>;

----------------------------------------

TITLE: Defining BaseFormState Type Alias in TypeScript
DESCRIPTION: This code snippet defines the BaseFormState type alias, which is an object representing the current state of a form. It includes type parameters for form data and various validation functions.

LANGUAGE: typescript
CODE:
type BaseFormState<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer> = object;

----------------------------------------

TITLE: Defining DerivedFormState Type Alias in TypeScript
DESCRIPTION: This code snippet defines the DerivedFormState type alias with multiple generic type parameters. It represents the derived state of a form, including properties for form validation, field metadata, and user interaction status.

LANGUAGE: typescript
CODE:
type DerivedFormState<TFormData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TOnServer> = object;

----------------------------------------

TITLE: Defining FieldInfo Type Alias in TypeScript
DESCRIPTION: Defines the FieldInfo type alias with a generic parameter TFormData. It includes properties for the field instance and validation metadata map.

LANGUAGE: typescript
CODE:
type FieldInfo<TFormData> = object;

----------------------------------------

TITLE: Defining FieldMeta Type Alias in TypeScript
DESCRIPTION: This code snippet defines the FieldMeta type alias, which combines FieldMetaBase and FieldMetaDerived types. It includes multiple generic parameters for customizing the field's behavior, including parent data type, field name, data type, and various validation function types for different form events.

LANGUAGE: typescript
CODE:
type FieldMeta<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync> = FieldMetaBase<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync> & FieldMetaDerived<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync>;

----------------------------------------

TITLE: Field Error Map Property Definition
DESCRIPTION: Defines the errorMap property that contains validation errors for different validation stages including mount, change, blur, and submit events.

LANGUAGE: typescript
CODE:
errorMap: ValidationErrorMap<UnwrapFieldValidateOrFn<TParentData, TName, TOnMount, TFormOnMount>, UnwrapFieldValidateOrFn<TParentData, TName, TOnChange, TFormOnChange>, UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnChangeAsync, TFormOnChangeAsync>, UnwrapFieldValidateOrFn<TParentData, TName, TOnBlur, TFormOnBlur>, UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnBlurAsync, TFormOnBlurAsync>, UnwrapFieldValidateOrFn<TParentData, TName, TOnSubmit, TFormOnSubmit>, UnwrapFieldAsyncValidateOrFn<TParentData, TName, TOnSubmitAsync, TFormOnSubmitAsync>>;

----------------------------------------

TITLE: Defining FieldMetaDerived Type Alias in TypeScript
DESCRIPTION: This code snippet defines the FieldMetaDerived type alias, which is a complex object type with multiple generic parameters. It includes properties for field errors and pristine state.

LANGUAGE: typescript
CODE:
type FieldMetaDerived<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync> = object;

----------------------------------------

TITLE: Defining FormValidateFn Type Alias in TypeScript
DESCRIPTION: Defines the FormValidateFn type alias, which is a function that takes props including formApi and value, and returns an unknown type. It is generic over TFormData.

LANGUAGE: typescript
CODE:
type FormValidateFn<TFormData> = (props) => unknown;

----------------------------------------

TITLE: Defining UpdaterFn Type Alias in TypeScript
DESCRIPTION: Defines a generic function type UpdaterFn that takes an input of type TInput and returns an output of type TOutput. If TOutput is not specified, it defaults to TInput. This type alias is useful for creating updater functions that can optionally transform the input type.

LANGUAGE: TypeScript
CODE:
type UpdaterFn<TInput, TOutput> = (input) => TOutput;

----------------------------------------

TITLE: Defining ValidationMeta Type in TypeScript
DESCRIPTION: Defines the ValidationMeta type alias as an object type. This type represents validation metadata for form fields and includes an AbortController for managing async validation attempts.

LANGUAGE: typescript
CODE:
type ValidationMeta = object;

LANGUAGE: typescript
CODE:
lastAbortController: AbortController;

----------------------------------------

TITLE: Defining ValidationSource Type in TypeScript
DESCRIPTION: Defines a union type that represents the possible sources of validation in the form system. The type can only be one of two string literals: 'form' or 'field', indicating whether validation originated at the form or field level.

LANGUAGE: typescript
CODE:
type ValidationSource = "form" | "field";

----------------------------------------

TITLE: Comparing Objects for Shallow Equality in TypeScript
DESCRIPTION: The shallow() function compares two objects of the same type for shallow equality. It takes two parameters of type T and returns a boolean indicating whether the objects are shallowly equal.

LANGUAGE: typescript
CODE:
function shallow<T>(objA, objB): boolean

----------------------------------------

TITLE: Defining FieldComponent Type with Generic Parameters in TypeScript
DESCRIPTION: A TypeScript type alias that defines the structure of a field component with extensive generic type parameters for handling various form validation and state scenarios. The type includes support for mount, change, blur, and submit events with both synchronous and asynchronous validation.

LANGUAGE: typescript
CODE:
type FieldComponent<TParentData, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta> = <TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync>(props) => CreateComponentPublicInstanceWithMixins<Omit<FieldComponentProps<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>, "form">, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, EmitsOptions, PublicProps, {}, false, {}, SlotsType<{
  default: {
     field: FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>;
     state: FieldApi<TParentData, TName, TData, TOnMount, TOnChange, TOnChangeAsync, TOnBlur, TOnBlurAsync, TOnSubmit, TOnSubmitAsync, TFormOnMount, TFormOnChange, TFormOnChangeAsync, TFormOnBlur, TFormOnBlurAsync, TFormOnSubmit, TFormOnSubmitAsync, TFormOnServer, TParentSubmitMeta>["state"];
    };
}>>;

----------------------------------------

TITLE: Installing TanStack Form for Vue
DESCRIPTION: Commands to install the Vue adapter for TanStack Form using different package managers.

LANGUAGE: bash
CODE:
# npm
$ npm i @tanstack/vue-form
# pnpm
$ pnpm add @tanstack/vue-form
# bun
$ bun add @tanstack/vue-form
# yarn
$ yarn add @tanstack/vue-form

----------------------------------------

TITLE: Installing Dependencies and Running TanStack Form Example
DESCRIPTION: These commands install the necessary dependencies and start the development server for the TanStack Form example project. First, 'npm install' installs all required packages, then 'npm run dev' launches the development server.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install dependencies and start the development server for a TanStack Form example project. Requires npm to be installed on the system.

LANGUAGE: bash
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Form Example
DESCRIPTION: Commands to install project dependencies using npm, yarn, or pnpm package managers.

LANGUAGE: shell
CODE:
npm install

LANGUAGE: shell
CODE:
yarn

LANGUAGE: shell
CODE:
pnpm i

----------------------------------------

TITLE: Running TanStack Form Basic Example
DESCRIPTION: Commands to start the development server and run the basic example using npm, yarn, or pnpm.

LANGUAGE: shell
CODE:
npm run dev

LANGUAGE: shell
CODE:
yarn dev

LANGUAGE: shell
CODE:
pnpm dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Form Example
DESCRIPTION: Command to install project dependencies using npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
npm install

LANGUAGE: bash
CODE:
yarn

LANGUAGE: bash
CODE:
pnpm i

----------------------------------------

TITLE: Running TanStack Form Example in Development Mode
DESCRIPTION: Command to start the development server for the TanStack Form example using npm, yarn, or pnpm.

LANGUAGE: bash
CODE:
npm run dev

LANGUAGE: bash
CODE:
yarn dev

LANGUAGE: bash
CODE:
pnpm dev

----------------------------------------

TITLE: Installing and Running TanStack Form Example
DESCRIPTION: Commands to install npm dependencies and start the development server.

LANGUAGE: shell
CODE:
npm install
npm run dev

----------------------------------------

TITLE: Installing Dependencies for TanStack Form
DESCRIPTION: Command to install project dependencies using npm, pnpm, or yarn package managers.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Building for Production
DESCRIPTION: Command to create an optimized production build in the dist folder with minification and hash-based filenames.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Building Production Bundle
DESCRIPTION: Command to create an optimized production build in the dist folder with minification and hash-based filenames.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Running Unit Tests
DESCRIPTION: Command to execute unit tests using the Karma test runner

LANGUAGE: bash
CODE:
ng test

----------------------------------------

TITLE: Starting Angular Development Server
DESCRIPTION: Command to start the Angular development server which serves the application on localhost:4200 with auto-reload capability.

LANGUAGE: bash
CODE:
ng serve

----------------------------------------

TITLE: Generating Angular Components
DESCRIPTION: Angular CLI command for scaffolding new components and other Angular artifacts like directives, pipes, services, etc.

LANGUAGE: bash
CODE:
ng generate component component-name

----------------------------------------

TITLE: Getting Angular CLI Help
DESCRIPTION: Command to display Angular CLI help information.

LANGUAGE: bash
CODE:
ng help

----------------------------------------

TITLE: Installing and Running TanStack Development Server
DESCRIPTION: Basic commands to install dependencies and start the development server for TanStack projects

LANGUAGE: sh
CODE:
pnpm install
pnpm dev

----------------------------------------

TITLE: Setting up PNPM and Node Version
DESCRIPTION: Commands for enabling corepack and preparing PNPM, plus setting the correct Node version using NVM.

LANGUAGE: bash
CODE:
corepack enable && corepack prepare
nvm use

----------------------------------------

TITLE: Setting up Local Documentation Environment
DESCRIPTION: Commands for creating directory structure and cloning repositories for local documentation development.

LANGUAGE: bash
CODE:
mkdir tanstack
cd tanstack
git clone git@github.com:TanStack/form.git
git clone git@github.com:TanStack/tanstack.com.git --depth=1 --single-branch --branch=main