TITLE: Initializing Hono Application in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic Hono application with a single route. It shows the simplicity of setting up a 'Hello World' style endpoint.

LANGUAGE: typescript
CODE:
import { Hono } from 'hono'
const app = new Hono()

app.get('/', (c) => c.text('Hono!'))

export default app

----------------------------------------

TITLE: Using Zod for Request Validation in Hono
DESCRIPTION: This code demonstrates how to use Zod, a third-party validation library, for request body validation in Hono, as the built-in Validator middleware is deprecated.

LANGUAGE: typescript
CODE:
import { z } from 'zod'

//...

const schema = z.object({
  title: z.string().max(100),
})

app.post('/posts', async (c) => {
  const body = await c.req.parseBody()
  const res = schema.safeParse(body)
  if (!res.success) {
    return c.text('Invalid!', 400)
  }
  return c.text('Valid!')
})

----------------------------------------

TITLE: Updating Basic Auth Middleware Usage in Hono
DESCRIPTION: This snippet shows how to update the usage of Basic Auth middleware in nested handlers for Hono v2.3.0+, addressing a security-related breaking change.

LANGUAGE: typescript
CODE:
app.use('/auth/*', async (c, next) => {
  const auth = basicAuth({ username: c.env.USERNAME, password: c.env.PASSWORD })
  return auth(c, next) // Older: `await auth(c, next)`
})

----------------------------------------

TITLE: Installing Hono via npm
DESCRIPTION: This command creates a new Hono project using the latest version of the Hono CLI tool. It's the recommended way to start a new Hono project.

LANGUAGE: bash
CODE:
npm create hono@latest

----------------------------------------

TITLE: Defining Generics for Hono Instance with Type in TypeScript
DESCRIPTION: This snippet shows how to correctly define generics for a new Hono instance using the 'type' keyword instead of 'interface' in TypeScript.

LANGUAGE: typescript
CODE:
// Should use `type`
type Bindings = {
  TOKEN: string
}

const app = new Hono<{ Bindings: Bindings }>()

----------------------------------------

TITLE: Accessing Raw Request in Hono v3.0.0+
DESCRIPTION: This snippet demonstrates how to access the raw Request object in Hono v3.0.0+ using the new HonoRequest wrapper.

LANGUAGE: typescript
CODE:
app.post('/', async (c) => {
  const metadata = c.req.raw.cf?.hostMetadata?
  ...
})

----------------------------------------

TITLE: Configuring serveStatic for Different Runtimes in Hono v3.0.0+
DESCRIPTION: This code shows how to import and use the serveStatic middleware for different runtimes (Cloudflare Workers, Bun, Deno) in Hono v3.0.0+.

LANGUAGE: typescript
CODE:
// For Cloudflare Workers
import { serveStatic } from 'hono/cloudflare-workers'

// For Bun
// import { serveStatic } from 'hono/bun'

// For Deno
// import { serveStatic } from 'npm:hono/deno'

// ...

app.get('/static/*', serveStatic({ root: './' }))

----------------------------------------

TITLE: Configuring serveStatic with Manifest in Cloudflare Workers
DESCRIPTION: This code shows how to configure the serveStatic middleware with a manifest for Cloudflare Workers adapter in Hono v4.0.0+.

LANGUAGE: typescript
CODE:
import manifest from '__STATIC_CONTENT_MANIFEST'

// ...

app.use('/static/*', serveStatic({ root: './assets', manifest }))

----------------------------------------

TITLE: Updating Deno Import for Hono in TypeScript
DESCRIPTION: This snippet demonstrates how to update the import statement for Hono when migrating from deno.land/x to JSR in Deno projects.

LANGUAGE: typescript
CODE:
// From
import { Hono } from 'https://deno.land/x/hono/mod.ts'

// To
import { Hono } from 'jsr:@hono/hono'

----------------------------------------

TITLE: Setting Up Local Development Environment
DESCRIPTION: Series of commands to clone the repository, install dependencies, and start a Docker development environment

LANGUAGE: bash
CODE:
git clone git@github.com:honojs/hono.git && cd hono/.devcontainer && yarn install --frozen-lockfile
docker compose up -d --build
docker compose exec hono bash

----------------------------------------

TITLE: Installing Hono Dependencies with Bun
DESCRIPTION: Command to install project dependencies using the Bun package manager

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Running Benchmarks on Node.js and Bun
DESCRIPTION: Commands for executing router benchmarks on different JavaScript runtimes. Includes separate commands for Node.js and Bun environments.

LANGUAGE: bash
CODE:
yarn bench:node

LANGUAGE: bash
CODE:
yarn bench:bun

----------------------------------------

TITLE: Running Deno Benchmarks
DESCRIPTION: Command to execute the router benchmarks using Deno runtime with necessary permissions for reading files and running processes.

LANGUAGE: shell
CODE:
deno run --allow-read --allow-run src/bench.mts