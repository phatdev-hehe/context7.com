TITLE: Implementing Basic HTTP Server in Bun
DESCRIPTION: Creates an HTTP server using Bun.serve that listens on port 3000. The server responds to all incoming HTTP requests with a 'Welcome to Bun!' message and a 200 status code. The server URL is logged to the console upon startup.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  port: 3000,
  fetch(request) {
    return new Response("Welcome to Bun!");
  },
});

console.log(`Listening on ${server.url}`);

----------------------------------------

TITLE: Inserting Data with Bun SQL in TypeScript
DESCRIPTION: Shows how to insert data into a PostgreSQL database using Bun's SQL driver, including both direct value insertion and using object helpers for cleaner syntax.

LANGUAGE: typescript
CODE:
import { sql } from "bun";

// Basic insert with direct values
const [user] = await sql`
  INSERT INTO users (name, email) 
  VALUES (${name}, ${email})
  RETURNING *
`;

// Using object helper for cleaner syntax
const userData = {
  name: "Alice",
  email: "alice@example.com",
};

const [newUser] = await sql`
  INSERT INTO users ${sql(userData)}
  RETURNING *
`;
// Expands to: INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com')

----------------------------------------

TITLE: Running TypeScript with Bun CLI
DESCRIPTION: Demonstrates the basic usage of Bun to run a TypeScript/JSX file directly without additional configuration

LANGUAGE: bash
CODE:
$ bun run index.tsx  # TS and JSX supported out of the box

----------------------------------------

TITLE: Sending a POST Request with Custom Body and Headers
DESCRIPTION: Illustrates how to send a POST request with a custom body and headers using Bun's fetch API. This example sets the method to POST, includes a string body, and adds a custom header.

LANGUAGE: typescript
CODE:
const response = await fetch("http://example.com", {
  method: "POST",
  body: "Hello, world!",
  headers: {
    "X-Custom-Header": "value",
  },
});

----------------------------------------

TITLE: Reading Files from S3 in Bun
DESCRIPTION: Demonstrates various methods to read files from S3 using Bun's S3 API.

LANGUAGE: typescript
CODE:
// Read an S3File as text
const text = await s3file.text();

// Read an S3File as JSON
const json = await s3file.json();

// Read an S3File as an ArrayBuffer
const buffer = await s3file.arrayBuffer();

// Get only the first 1024 bytes
const partial = await s3file.slice(0, 1024).text();

// Stream the file
const stream = s3file.stream();
for await (const chunk of stream) {
  console.log(chunk);
}

----------------------------------------

TITLE: Writing and Uploading Files to S3 in Bun
DESCRIPTION: Shows different methods to write and upload files to S3 using Bun's S3 API.

LANGUAGE: typescript
CODE:
// Write a string (replacing the file)
await s3file.write("Hello World!");

// Write a Buffer (replacing the file)
await s3file.write(Buffer.from("Hello World!"));

// Write a Response (replacing the file)
await s3file.write(new Response("Hello World!"));

// Write with content type
await s3file.write(JSON.stringify({ name: "John", age: 30 }), {
  type: "application/json",
});

// Write using a writer (streaming)
const writer = s3file.writer({ type: "application/json" });
writer.write("Hello");
writer.write(" World!");
await writer.end();

// Write using Bun.write
await Bun.write(s3file, "Hello World!");

----------------------------------------

TITLE: Common Bun CLI Commands
DESCRIPTION: Shows the main CLI commands available in Bun for common development tasks like running scripts, installing packages, building projects, running tests, and executing packages

LANGUAGE: bash
CODE:
$ bun run start                 # run the `start` script
$ bun install <pkg>             # install a package
$ bun build ./index.tsx         # bundle a project for browsers
$ bun test                      # run tests
$ bunx cowsay 'Hello, world!'   # execute a package

----------------------------------------

TITLE: Starting TCP Server with Bun.listen()
DESCRIPTION: Demonstrates how to create a TCP server using Bun.listen() with basic socket event handlers for data, open, close, drain and error events.

LANGUAGE: typescript
CODE:
Bun.listen({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {}, // message received from client
    open(socket) {}, // socket opened
    close(socket, error) {}, // socket closed
    drain(socket) {}, // socket ready for more data
    error(socket, error) {}, // error handler
  },
});

----------------------------------------

TITLE: Configuring Basic TLS for Bun HTTP Server
DESCRIPTION: This snippet shows how to set up a basic TLS configuration for a Bun HTTP server. It demonstrates setting the 'cert' and 'key' properties using Bun.file() to read the certificate and private key files.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  fetch: request => new Response("Welcome to Bun!"),
  tls: {
    cert: Bun.file("cert.pem"),
    key: Bun.file("key.pem"),
  },
});

----------------------------------------

TITLE: Basic Bun.serve Usage
DESCRIPTION: A simple example of using Bun.serve to create an HTTP server with routing.

LANGUAGE: typescript
CODE:
Bun.serve({
  routes: {
    "/api/status": new Response("OK"),
    "/users/:id": req => {
      return new Response(`Hello User ${req.params.id}!`);
    },
    "/api/posts": {
      GET: () => new Response("List posts"),
      POST: async req => {
        const body = await req.json();
        return Response.json({ created: true, ...body });
      },
    },
  },
  fetch(req) {
    return new Response("Not Found", { status: 404 });
  },
});

----------------------------------------

TITLE: Adding Start Script to package.json
DESCRIPTION: JSON diff showing how to add a 'start' script to package.json for running the server using 'bun run start'.

LANGUAGE: json
CODE:
  {
    "name": "quickstart",
    "module": "index.ts",
    "type": "module",
+   "scripts": {
+     "start": "bun run index.ts"
+   },
    "devDependencies": {
      "@types/bun": "latest"
    }
  }

----------------------------------------

TITLE: Implementing HTTP Server with Bun.serve
DESCRIPTION: TypeScript code snippet demonstrating the implementation of a simple HTTP server using Bun's built-in serve API. It creates a server listening on port 3000 and responds with 'Bun!'.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Bun!");
  },
});

console.log(`Listening on http://localhost:${server.port} ...`);

----------------------------------------

TITLE: Defining a Basic Test in TypeScript with Bun
DESCRIPTION: This snippet demonstrates how to define a simple test using Bun's test module. It imports the necessary functions and defines a test that checks if 2 + 2 equals 4.

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test("2 + 2", () => {
  expect(2 + 2).toBe(4);
});

----------------------------------------

TITLE: Configuring Dockerfile for Bun Application
DESCRIPTION: A multi-stage Dockerfile that sets up a Bun application environment, installs dependencies, runs tests, and prepares the production build. Uses the official oven/bun base image and implements caching for faster builds.

LANGUAGE: docker
CODE:
# use the official Bun image
# see all versions at https://hub.docker.com/r/oven/bun/tags
FROM oven/bun:1 AS base
WORKDIR /usr/src/app

# install dependencies into temp directory
# this will cache them and speed up future builds
FROM base AS install
RUN mkdir -p /temp/dev
COPY package.json bun.lock /temp/dev/
RUN cd /temp/dev && bun install --frozen-lockfile

# install with --production (exclude devDependencies)
RUN mkdir -p /temp/prod
COPY package.json bun.lock /temp/prod/
RUN cd /temp/prod && bun install --frozen-lockfile --production

# copy node_modules from temp directory
# then copy all (non-ignored) project files into the image
FROM base AS prerelease
COPY --from=install /temp/dev/node_modules node_modules
COPY . .

# [optional] tests & build
ENV NODE_ENV=production
RUN bun test
RUN bun run build

# copy production dependencies and source code into final image
FROM base AS release
COPY --from=install /temp/prod/node_modules node_modules
COPY --from=prerelease /usr/src/app/index.ts .
COPY --from=prerelease /usr/src/app/package.json .

# run the app
USER bun
EXPOSE 3000/tcp
ENTRYPOINT [ "bun", "run", "index.ts" ]

----------------------------------------

TITLE: Implementing WebSocket Server with Bun.serve in TypeScript
DESCRIPTION: This code creates a server that can handle both HTTP requests and WebSocket connections. It uses Bun.serve to set up the server, attempts to upgrade incoming WebSocket requests, and defines a message handler for WebSocket communications.

LANGUAGE: typescript
CODE:
const server = Bun.serve<{ authToken: string }>({
  fetch(req, server) {
    const success = server.upgrade(req);
    if (success) {
      // Bun automatically returns a 101 Switching Protocols
      // if the upgrade succeeds
      return undefined;
    }

    // handle HTTP request normally
    return new Response("Hello world!");
  },
  websocket: {
    // this is called when a message is received
    async message(ws, message) {
      console.log(`Received ${message}`);
      // send back a message
      ws.send(`You said: ${message}`);
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);

----------------------------------------

TITLE: Implementing Basic Fullstack Server with Bun.serve()
DESCRIPTION: Sets up a server with HTML routes and API endpoints using Bun.serve(). Includes database operations, route handling, and development mode configuration.

LANGUAGE: typescript
CODE:
import { sql, serve } from "bun";
import dashboard from "./dashboard.html";
import homepage from "./index.html";

const server = serve({
  routes: {
    "/": homepage,
    "/dashboard": dashboard,

    "/api/users": {
      async GET(req) {
        const users = await sql`SELECT * FROM users`;
        return Response.json(users);
      },
      async POST(req) {
        const { name, email } = await req.json();
        const [user] =
          await sql`INSERT INTO users (name, email) VALUES (${name}, ${email})`;
        return Response.json(user);
      },
    },
    "/api/users/:id": async req => {
      const { id } = req.params;
      const [user] = await sql`SELECT * FROM users WHERE id = ${id}`;
      return Response.json(user);
    },
  },
  development: true,
});

console.log(`Listening on ${server.url}`);

----------------------------------------

TITLE: Creating a React Component in TSX with Bun
DESCRIPTION: Demonstrates how to create a simple React component using TSX syntax in Bun. The component renders a message in red and is logged to the console.

LANGUAGE: tsx
CODE:
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);

----------------------------------------

TITLE: Streaming a File as HTTP Response in TypeScript with Bun
DESCRIPTION: This snippet demonstrates how to read a file using Bun.file() and create an HTTP response from it. The BunFile instance returned by Bun.file() can be directly passed to the Response constructor.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
const file = Bun.file(path);
const resp = new Response(file);

----------------------------------------

TITLE: Creating a WebSocket Client in Bun
DESCRIPTION: Shows how to create a WebSocket client that connects to a WebSocket server, including setting custom headers and adding event listeners.

LANGUAGE: typescript
CODE:
const socket = new WebSocket("ws://localhost:3000", {
  headers: {
    // custom headers
  },
});

// message is received
socket.addEventListener("message", event => {});

// socket opened
socket.addEventListener("open", event => {});

// socket closed
socket.addEventListener("close", event => {});

// error handler
socket.addEventListener("error", event => {});

----------------------------------------

TITLE: Recommended TypeScript Compiler Configuration for Bun
DESCRIPTION: Comprehensive tsconfig.json setup for Bun projects, including support for top-level await, JSX, and TypeScript extensions.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
  },
}

----------------------------------------

TITLE: Initializing HTTP Server with Bun
DESCRIPTION: This snippet sets up a basic HTTP server using Bun. It serves an HTML file for the root path and handles 404 errors for other routes.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  port: 4000,
  async fetch(req) {
    const url = new URL(req.url);

    // return index.html for root path
    if (url.pathname === "/")
      return new Response(Bun.file("index.html"), {
        headers: {
          "Content-Type": "text/html",
        },
      });

    return new Response("Not Found", { status: 404 });
  },
});

console.log(`Listening on http://localhost:${server.port}`);

----------------------------------------

TITLE: Installing Bun on macOS/Linux using curl
DESCRIPTION: This command installs the latest version of Bun on macOS, Linux, and WSL using curl. It also shows how to install a specific version.

LANGUAGE: bash
CODE:
$ curl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL
# to install a specific version
$ curl -fsSL https://bun.sh/install | bash -s "bun-v$BUN_LATEST_VERSION"

----------------------------------------

TITLE: WebSocket Server
DESCRIPTION: Demonstrates setting up a WebSocket server with Bun.serve.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  fetch(req, server) {
    const chatUsers = server.subscriberCount("chat");
    return new Response(`${chatUsers} users in chat`);
  },
  websocket: {
    message(ws) {
      ws.subscribe("chat");
      server.publish("chat", "Hello everyone!");
    },
  },
});

----------------------------------------

TITLE: Creating a Basic HTTP Server with Elysia in TypeScript
DESCRIPTION: A TypeScript example demonstrating how to define a simple HTTP route and start a server using Elysia. It creates a GET route for the root path and listens on port 8080.

LANGUAGE: typescript
CODE:
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(8080)

console.log(`🦊 Elysia is running at on port ${app.server?.port}...`)

----------------------------------------

TITLE: Creating a Basic HTTP Server with Elysia in TypeScript
DESCRIPTION: A TypeScript example demonstrating how to define a simple HTTP route and start a server using Elysia. It creates a GET route for the root path and listens on port 8080.

LANGUAGE: typescript
CODE:
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(8080)

console.log(`🦊 Elysia is running at on port ${app.server?.port}...`)

----------------------------------------

TITLE: Implementing Basic HTTP Server with Bun
DESCRIPTION: Creates an HTTP server using Bun.serve that handles various types of requests and responses. Demonstrates routing for HTML, JSON, file serving, redirects, and form data processing. The server listens on port 3000 and includes handlers for both GET and POST requests.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  async fetch(req) {
    const path = new URL(req.url).pathname;

    // respond with text/html
    if (path === "/") return new Response("Welcome to Bun!");

    // redirect
    if (path === "/abc") return Response.redirect("/source", 301);

    // send back a file (in this case, *this* file)
    if (path === "/source") return new Response(Bun.file(import.meta.path));

    // respond with JSON
    if (path === "/api") return Response.json({ some: "buns", for: "you" });

    // receive JSON data to a POST request
    if (req.method === "POST" && path === "/api/post") {
      const data = await req.json();
      console.log("Received JSON:", data);
      return Response.json({ success: true, data });
    }

    // receive POST data from a form
    if (req.method === "POST" && path === "/form") {
      const data = await req.formData();
      console.log(data.get("someField"));
      return new Response("Success");
    }

    // 404s
    return new Response("Page not found", { status: 404 });
  },
});

console.log(`Listening on ${server.url}`);

----------------------------------------

TITLE: Transforming Images with HTMLRewriter in TypeScript
DESCRIPTION: Example showing how to use HTMLRewriter to replace all image sources with a specific URL and wrap them in links. Demonstrates element manipulation and attribute modification.

LANGUAGE: typescript
CODE:
const rewriter = new HTMLRewriter().on("img", {
  element(img) {
    img.setAttribute(
      "src",
      "https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg",
    );
    img.before(
      '<a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank">',
      { html: true },
    );
    img.after("</a>", { html: true });
    img.setAttribute("alt", "Definitely not a rickroll");
  },
});

----------------------------------------

TITLE: Implementing HTTP Server in Bun.js
DESCRIPTION: This snippet demonstrates how to create a simple HTTP server using Bun.js. It exports an object with a port and a fetch function that responds with 'Hello World'.

LANGUAGE: typescript
CODE:
// http.ts
export default {
  port: 3000,
  fetch(request: Request) {
    return new Response("Hello World");
  },
};

// bun ./http.ts

----------------------------------------

TITLE: Sending a Basic HTTP GET Request with Bun's Fetch API
DESCRIPTION: Demonstrates how to send a simple GET request using Bun's fetch implementation and handle the response. It shows how to check the status code and retrieve the response body as text.

LANGUAGE: typescript
CODE:
const response = await fetch("http://example.com");

console.log(response.status); // => 200

const text = await response.text(); // or response.json(), response.formData(), etc.

----------------------------------------

TITLE: Querying Data with Bun SQL in TypeScript
DESCRIPTION: Demonstrates how to perform basic SELECT queries using Bun's SQL driver with tagged template literals for safe parameter interpolation.

LANGUAGE: typescript
CODE:
import { sql } from "bun";

const users = await sql`
  SELECT * FROM users
  WHERE active = ${true}
  LIMIT ${10}
`;

// Select with multiple conditions
const activeUsers = await sql`
  SELECT * 
  FROM users 
  WHERE active = ${true} 
  AND age >= ${18}
`;

----------------------------------------

TITLE: Configuring TypeScript Compiler Options for Bun
DESCRIPTION: Recommended TypeScript compiler configuration for Bun projects, enabling features like top-level await, extensionless imports, and JSX support. Includes environment setup, bundler mode settings, and best practices.

LANGUAGE: jsonc
CODE:
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false,
  },
}

----------------------------------------

TITLE: Basic S3 Operations with Bun
DESCRIPTION: Demonstrates basic S3 operations including reading, writing, presigning URLs, and deleting files using Bun's S3 API.

LANGUAGE: typescript
CODE:
import { s3, write, S3Client } from "bun";

// Bun.s3 reads environment variables for credentials
// file() returns a lazy reference to a file on S3
const metadata = s3.file("123.json");

// Download from S3 as JSON
const data = await metadata.json();

// Upload to S3
await write(metadata, JSON.stringify({ name: "John", age: 30 }));

// Presign a URL (synchronous - no network request needed)
const url = metadata.presign({
  acl: "public-read",
  expiresIn: 60 * 60 * 24, // 1 day
});

// Delete the file
await metadata.delete();

----------------------------------------

TITLE: Implementing Experimental Decorators in TypeScript with Bun
DESCRIPTION: Demonstrates the use of experimental decorators in TypeScript, including a logging decorator and class implementation.

LANGUAGE: typescript
CODE:
// Simple logging decorator
function log(target: any, propertyKey: string, descriptor: PropertyDescriptor) {
  const originalMethod = descriptor.value;

  descriptor.value = function(...args: any[]) {
    console.log(`Calling ${propertyKey} with:`, args);
    return originalMethod.apply(this, args);
  };
}

class Example {
  @log
  greet(name: string) {
    return `Hello ${name}!`;
  }
}

// Usage
const example = new Example();
example.greet("world"); // Logs: "Calling greet with: ['world']"

----------------------------------------

TITLE: React Integration with Bun.serve()
DESCRIPTION: Example of integrating React with Bun.serve() including backend setup, frontend initialization, and HTML template configuration.

LANGUAGE: typescript
CODE:
import dashboard from "../public/dashboard.html";
import { serve } from "bun";

serve({
  routes: {
    "/": dashboard,
  },

  async fetch(req) {
    return new Response("hello world");
  },
});

LANGUAGE: typescript
CODE:
import "./styles.css";
import { createRoot } from "react-dom/client";
import { App } from "./app.tsx";

document.addEventListener("DOMContentLoaded", () => {
  const root = createRoot(document.getElementById("root"));
  root.render(<App />);
});

----------------------------------------

TITLE: Executing a Basic Shell Command with Bun in TypeScript
DESCRIPTION: Demonstrates how to import the $ function from the bun package and use it to run a simple shell command. The command's output is returned as a promise.

LANGUAGE: typescript
CODE:
import { $ } from "bun";

await $`echo Hello, world!`; // => "Hello, world!"

----------------------------------------

TITLE: Initializing Next.js App with Bun
DESCRIPTION: Creates a new Next.js application using create-next-app with Bun, allowing configuration of TypeScript, ESLint, directory structure, and import aliases.

LANGUAGE: sh
CODE:
$ bun create next-app
✔ What is your project named? … my-app
✔ Would you like to use TypeScript with this project? … No / Yes
✔ Would you like to use ESLint with this project? … No / Yes
✔ Would you like to use `src/` directory with this project? … No / Yes
✔ Would you like to use experimental `app/` directory with this project? … No / Yes
✔ What import alias would you like configured? … @/*
Creating a new Next.js app in /path/to/my-app.

----------------------------------------

TITLE: Using Path Mapping in TypeScript with Bun
DESCRIPTION: Shows how to use path mapping to import modules in TypeScript when running with Bun.

LANGUAGE: typescript
CODE:
import { foo } from "data";
console.log(foo); // => "Hello world!"

LANGUAGE: typescript
CODE:
export const foo = "Hello world!"

----------------------------------------

TITLE: Implementing Pub/Sub in Bun WebSocket Server
DESCRIPTION: Demonstrates how to use Bun's native publish-subscribe API for topic-based broadcasting in a WebSocket server, including subscribing, publishing, and unsubscribing from topics.

LANGUAGE: typescript
CODE:
const server = Bun.serve<{ username: string }>({
  fetch(req, server) {
    const url = new URL(req.url);
    if (url.pathname === "/chat") {
      console.log(`upgrade!`);
      const username = getUsernameFromReq(req);
      const success = server.upgrade(req, { data: { username } });
      return success
        ? undefined
        : new Response("WebSocket upgrade error", { status: 400 });
    }
    return new Response("Hello world");
  },
  websocket: {
    open(ws) {
      const msg = `${ws.data.username} has entered the chat`;
      ws.subscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
    message(ws, message) {
      server.publish("the-group-chat", `${ws.data.username}: ${message}`);
    },
    close(ws) {
      const msg = `${ws.data.username} has left the chat`;
      ws.unsubscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);

----------------------------------------

TITLE: Defining and Registering a Bun Plugin in TypeScript
DESCRIPTION: Demonstrates how to create a basic Bun plugin with a name and setup function, and register it using the plugin function.

LANGUAGE: typescript
CODE:
import { plugin, type BunPlugin } from "bun";

const myPlugin: BunPlugin = {
  name: "Custom loader",
  setup(build) {
    // implementation
  },
};

plugin(myPlugin);

----------------------------------------

TITLE: Creating and Running a Basic Elysia Server in TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple Elysia server that responds with 'Hello Elysia' on the root route and listens on port 8080. It also logs a message when the server starts running.

LANGUAGE: typescript
CODE:
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(8080)

console.log(`🦊 Elysia is running at on port ${app.server.port}...`)

----------------------------------------

TITLE: Implementing a Pub-Sub WebSocket Chat Server in Bun with TypeScript
DESCRIPTION: This code creates a WebSocket server using Bun's serve API. It handles WebSocket upgrades, subscribes clients to a chat channel, and broadcasts messages to all subscribers. The server manages user connections, messages, and disconnections.

LANGUAGE: typescript
CODE:
const server = Bun.serve<{ username: string }>({
  fetch(req, server) {
    const cookies = req.headers.get("cookie");
    const username = getUsernameFromCookies(cookies);
    const success = server.upgrade(req, { data: { username } });
    if (success) return undefined;

    return new Response("Hello world");
  },
  websocket: {
    open(ws) {
      const msg = `${ws.data.username} has entered the chat`;
      ws.subscribe("the-group-chat");
      server.publish("the-group-chat", msg);
    },
    message(ws, message) {
      // the server re-broadcasts incoming messages to everyone
      server.publish("the-group-chat", `${ws.data.username}: ${message}`);
    },
    close(ws) {
      const msg = `${ws.data.username} has left the chat`;
      server.publish("the-group-chat", msg);
      ws.unsubscribe("the-group-chat");
    },
  },
});

console.log(`Listening on ${server.hostname}:${server.port}`);

----------------------------------------

TITLE: Database Connection Setup in TypeScript
DESCRIPTION: Shows different ways to initialize a SQLite database connection, including file-based and in-memory databases.

LANGUAGE: typescript
CODE:
import { Database } from "bun:sqlite";

const db = new Database("mydb.sqlite");

// In-memory alternatives
const db = new Database(":memory:");
const db = new Database();
const db = new Database("");

----------------------------------------

TITLE: Adding Headers to WebSocket Upgrade Response in Bun
DESCRIPTION: Demonstrates how to attach additional headers to the WebSocket upgrade response, such as setting a session cookie.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {
    const sessionId = await generateSessionId();
    server.upgrade(req, {
      headers: {
        "Set-Cookie": `SessionId=${sessionId}`,
      },
    });
  },
  websocket: {}, // handlers
});

----------------------------------------

TITLE: Handling Subprocess Exit
DESCRIPTION: Shows how to use the onExit callback and the exited promise to handle subprocess termination and retrieve exit information.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["bun", "--version"], {
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});

await proc.exited; // resolves when process exit
proc.killed; // boolean — was the process killed?
proc.exitCode; // null | number
proc.signalCode; // null | "SIGABRT" | "SIGALRM" | ...

----------------------------------------

TITLE: Working with Large Files in S3 using Bun
DESCRIPTION: Demonstrates how to handle large file uploads to S3 using Bun's S3 API with multipart uploads and streaming.

LANGUAGE: typescript
CODE:
// Write a large file
const bigFile = Buffer.alloc(10 * 1024 * 1024); // 10MB
const writer = s3file.writer({
  // Automatically retry on network errors up to 3 times
  retry: 3,

  // Queue up to 10 requests at a time
  queueSize: 10,

  // Upload in 5 MB chunks
  partSize: 5 * 1024 * 1024,
});
for (let i = 0; i < 10; i++) {
  await writer.write(bigFile);
}
await writer.end();

----------------------------------------

TITLE: Deleting Files in TypeScript
DESCRIPTION: Demonstrates how to delete a file using the delete() method on a BunFile instance.

LANGUAGE: typescript
CODE:
await Bun.file("logs.json").delete()

----------------------------------------

TITLE: Implementing a Static File Server with Bun.serve()
DESCRIPTION: This snippet demonstrates how to create a simple static file server using Bun.serve(). It handles incoming requests by reading the requested file and returning it as a Response.

LANGUAGE: typescript
CODE:
// static file server
Bun.serve({
  async fetch(req) {
    const path = new URL(req.url).pathname;
    const file = Bun.file(path);
    return new Response(file);
  },
});

----------------------------------------

TITLE: Defining Mongoose schema for Animal model in TypeScript
DESCRIPTION: Creates a Mongoose schema for an Animal model with name and sound properties, and a speak method. Exports the Animal model and its type.

LANGUAGE: ts
CODE:
import * as mongoose from 'mongoose';

const animalSchema = new mongoose.Schema(
  {
    name: {type: String, required: true},
    sound: {type: String, required: true},
  },
  {
    methods: {
      speak() {
        console.log(`${this.sound}!`);
      },
    },
  }
);

export type Animal = mongoose.InferSchemaType<typeof animalSchema>;
export const Animal = mongoose.model('Animal', animalSchema);

----------------------------------------

TITLE: Initializing Hono HTTP Server in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic HTTP server using Hono framework in TypeScript. It sets up a simple route that responds with 'Hono!' when accessed.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
const app = new Hono();

app.get("/", c => c.text("Hono!"));

export default app;

----------------------------------------

TITLE: Streaming Response Body with Async Iterators
DESCRIPTION: Shows how to use async iterators to stream the response body from a fetch request. This method allows processing large responses in chunks without loading the entire body into memory at once.

LANGUAGE: typescript
CODE:
const response = await fetch("http://example.com");

for await (const chunk of response.body) {
  console.log(chunk);
}

----------------------------------------

TITLE: Hashing a Password with Bun's Default Algorithm (Argon2id)
DESCRIPTION: This snippet demonstrates how to hash a password using Bun's default hashing algorithm, Argon2id. It uses the Bun.password.hash() function, which requires no third-party dependencies.

LANGUAGE: typescript
CODE:
const password = "super-secure-pa$$word";

const hash = await Bun.password.hash(password);
// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/...

----------------------------------------

TITLE: Server-Side Rendering React with Bun HTTP Server
DESCRIPTION: Demonstrates how to implement server-side rendering of React components using Bun's HTTP server. It uses the renderToReadableStream function from react-dom/server.

LANGUAGE: tsx
CODE:
import {renderToReadableStream} from 'react-dom/server';

function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

Bun.serve({
  port: 4000,
  async fetch() {
    const stream = await renderToReadableStream(
      <Component message="Hello from server!" />
    );
    return new Response(stream, {
      headers: {'Content-Type': 'text/html'},
    });
  },
});

----------------------------------------

TITLE: Creating Express Server with Bun
DESCRIPTION: TypeScript code to set up a basic Express.js server using Bun. It defines a route for the root path and starts the server on port 8080.

LANGUAGE: typescript
CODE:
import express from "express";

const app = express();
const port = 8080;

app.get("/", (req, res) => {
  res.send("Hello World!");
});

app.listen(port, () => {
  console.log(`Listening on port ${port}...`);
});

----------------------------------------

TITLE: TLS Configuration
DESCRIPTION: Shows how to enable TLS for HTTPS support in Bun.serve.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req) {
    return new Response("Hello!!!");
  },
  tls: {
    key: Bun.file("./key.pem"),
    cert: Bun.file("./cert.pem"),
  }
});

----------------------------------------

TITLE: Using AbortSignal with Bun.spawn
DESCRIPTION: Shows how to use an AbortSignal to abort a subprocess created with Bun.spawn.

LANGUAGE: typescript
CODE:
const controller = new AbortController();
const { signal } = controller;

const proc = Bun.spawn({
  cmd: ["sleep", "100"],
  signal,
});

// Later, to abort the process:
controller.abort();

----------------------------------------

TITLE: Configuring Bun.ArrayBufferSink for Streaming in TypeScript
DESCRIPTION: This snippet demonstrates how to configure Bun.ArrayBufferSink for streaming, allowing continuous writing and periodic flushing of contents in TypeScript.

LANGUAGE: typescript
CODE:
const sink = new Bun.ArrayBufferSink();
sink.start({
  stream: true,
});

sink.write("h");
sink.write("e");
sink.write("l");
sink.flush();
// ArrayBuffer(5) [ 104, 101, 108 ]

sink.write("l");
sink.write("o");
sink.flush();
// ArrayBuffer(5) [ 108, 111 ]

----------------------------------------

TITLE: Checking File Existence in TypeScript
DESCRIPTION: Shows how to check if a file exists using a BunFile instance.

LANGUAGE: typescript
CODE:
const notreal = Bun.file("notreal.txt");
notreal.size; // 0
notreal.type; // "text/plain;charset=utf-8"
const exists = await notreal.exists(); // false

----------------------------------------

TITLE: Handling File Upload in Bun Server
DESCRIPTION: This TypeScript snippet extends the server to handle file uploads. It parses the incoming form data, extracts the name and profile picture, and writes the uploaded file to disk using Bun.write().

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  port: 4000,
  async fetch(req) {
    const url = new URL(req.url);

    // return index.html for root path
    if (url.pathname === "/")
      return new Response(Bun.file("index.html"), {
        headers: {
          "Content-Type": "text/html",
        },
      });

   // parse formdata at /action
   if (url.pathname === '/action') {
     const formdata = await req.formData();
     const name = formdata.get('name');
     const profilePicture = formdata.get('profilePicture');
     if (!profilePicture) throw new Error('Must upload a profile picture.');
     // write profilePicture to disk
     await Bun.write('profilePicture.png', profilePicture);
     return new Response("Success");
   }

    return new Response("Not Found", { status: 404 });
  },
});

----------------------------------------

TITLE: Password Hashing with Bun.password
DESCRIPTION: Demonstrates basic password hashing and verification using Bun's password utilities with default settings.

LANGUAGE: typescript
CODE:
const password = "super-secure-pa$$word";

const hash = await Bun.password.hash(password);
// => $argon2id$v=19$m=65536,t=2,p=1$tFq+9AVr1bfPxQdh6E8DQRhEXg/M/SqYCNu6gVdRRNs$GzJ8PuBi+K+BVojzPfS5mjnC8OpLGtv8KJqF99eP6a4

const isMatch = await Bun.password.verify(password, hash);
// => true

----------------------------------------

TITLE: Fetching with Timeout and Cancellation
DESCRIPTION: Shows how to set a timeout for a fetch request using AbortSignal.timeout and how to cancel a request using an AbortController. These features are useful for managing long-running or potentially hanging requests.

LANGUAGE: typescript
CODE:
const response = await fetch("http://example.com", {
  signal: AbortSignal.timeout(1000),
});

// Canceling a request
const controller = new AbortController();

const response = await fetch("http://example.com", {
  signal: controller.signal,
});

controller.abort();

----------------------------------------

TITLE: SQLite Query Parameter Binding in TypeScript
DESCRIPTION: Demonstrates how to use parameter binding in SQLite queries with both named and positional parameters.

LANGUAGE: typescript
CODE:
import { Database } from "bun:sqlite";

const strict = new Database(
  ":memory:",
  { strict: true }
);

// throws error because of the typo:
const query = strict
  .query("SELECT $message;")
  .all({ message: "Hello world" });

const notStrict = new Database(
  ":memory:"
);
// does not throw error:
notStrict
  .query("SELECT $message;")
  .all({ message: "Hello world" });

----------------------------------------

TITLE: Starting a WebSocket Server with Bun
DESCRIPTION: Demonstrates how to create a basic WebSocket server using Bun.serve(). The server upgrades all incoming requests to WebSocket connections in the fetch handler.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {
    // upgrade the request to a WebSocket
    if (server.upgrade(req)) {
      return; // do not return a Response
    }
    return new Response("Upgrade failed", { status: 500 });
  },
  websocket: {}, // handlers
});

----------------------------------------

TITLE: Fetching from S3 Bucket with Bun's Extended Fetch API
DESCRIPTION: Demonstrates how to use Bun's fetch API to directly access S3 buckets. This example shows both using environment variables for credentials and passing credentials explicitly in the fetch options.

LANGUAGE: typescript
CODE:
// Using environment variables for credentials
const response = await fetch("s3://my-bucket/path/to/object");

// Or passing credentials explicitly
const response = await fetch("s3://my-bucket/path/to/object", {
  s3: {
    accessKeyId: "YOUR_ACCESS_KEY",
    secretAccessKey: "YOUR_SECRET_KEY",
    region: "us-east-1",
  },
});

----------------------------------------

TITLE: TCP Socket Buffering with ArrayBufferSink
DESCRIPTION: Demonstrates efficient buffering strategy using Bun's ArrayBufferSink for performance-sensitive socket writes.

LANGUAGE: typescript
CODE:
import { ArrayBufferSink } from "bun";

const sink = new ArrayBufferSink();
sink.start({ stream: true, highWaterMark: 1024 });

sink.write("h");
sink.write("e");
sink.write("l");
sink.write("l");
sink.write("o");

queueMicrotask(() => {
  const data = sink.flush();
  const wrote = socket.write(data);
  if (wrote < data.byteLength) {
    sink.write(data.subarray(wrote));
  }
});

----------------------------------------

TITLE: Implementing Discord Bot with Discord.js and Bun
DESCRIPTION: Creates a basic Discord bot using Discord.js, including client initialization, event handling, and login using the token from the environment file.

LANGUAGE: ts
CODE:
// import discord.js
import {Client, Events, GatewayIntentBits} from 'discord.js';

// create a new Client instance
const client = new Client({intents: [GatewayIntentBits.Guilds]});

// listen for the client to be ready
client.once(Events.ClientReady, (c) => {
  console.log(`Ready! Logged in as ${c.user.tag}`);
});

// login with the token from .env.local
client.login(process.env.DISCORD_TOKEN);

----------------------------------------

TITLE: Creating HTTP Server with Bun.serve
DESCRIPTION: Demonstrates how to create a basic HTTP server using Bun's native serve API. The server responds with a 'Success!' message for all incoming requests.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req: Request) {
    return new Response("Success!");
  },
});

----------------------------------------

TITLE: Basic WebSocket Context Setup in Bun
DESCRIPTION: Shows how to set basic contextual data (socketId) when upgrading a connection to WebSocket. Demonstrates accessing the data in message handlers.

LANGUAGE: typescript
CODE:
Bun.serve<{ socketId: number }>({\n  fetch(req, server) {\n    const success = server.upgrade(req, {\n      data: {\n        socketId: Math.random(),\n      },\n    });\n    if (success) return undefined;\n\n    // handle HTTP request normally\n    // ...\n  },\n  websocket: {\n    // define websocket handlers\n    async message(ws, message) {\n      // the contextual data is available as the `data` property\n      // on the WebSocket instance\n      console.log(`Received ${message} from ${ws.data.socketId}}`);\n    },\n  },\n});

----------------------------------------

TITLE: TCP Socket with Custom Data Type
DESCRIPTION: Shows how to attach contextual data to a socket using TypeScript generics and the open handler.

LANGUAGE: typescript
CODE:
type SocketData = { sessionId: string };

Bun.listen<SocketData>({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {
      socket.write(`${socket.data.sessionId}: ack`);
    },
    open(socket) {
      socket.data = { sessionId: "abcd" };
    },
  },
});

----------------------------------------

TITLE: Writing to Relative Path with Bun.write()
DESCRIPTION: Shows how to write a string to a file using a relative path, which is resolved relative to the project root (nearest directory with package.json).

LANGUAGE: typescript
CODE:
const path = "./file.txt";
await Bun.write(path, "Lorem ipsum");

----------------------------------------

TITLE: Reading Subprocess Output Streams
DESCRIPTION: Demonstrates how to read the output from a subprocess using the stdout property, which is a ReadableStream by default.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["bun", "--version"]);
const text = await new Response(proc.stdout).text();
console.log(text); // => "$BUN_LATEST_VERSION"

----------------------------------------

TITLE: Querying Data from SQLite Database with Drizzle ORM in Bun
DESCRIPTION: Script to select all records from the 'movies' table using Drizzle ORM's select method and log the results.

LANGUAGE: ts
CODE:
import * as schema from "./schema";
import { db } from "./db";

const result = await db.select().from(schema.movies);
console.log(result);

----------------------------------------

TITLE: Running JavaScript/TypeScript Files with Bun CLI
DESCRIPTION: Execute JavaScript, TypeScript, JSX, or TSX files using the Bun CLI. Bun supports these file types out of the box with its fast native transpiler.

LANGUAGE: bash
CODE:
$ bun run index.js
$ bun run index.jsx
$ bun run index.ts
$ bun run index.tsx

----------------------------------------

TITLE: Configuring Path Mapping in TypeScript
DESCRIPTION: Demonstrates how to set up path mapping in tsconfig.json for module resolution in Bun.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "baseUrl": "./src",
    "paths": {
      "data": ["./data.ts"]
    }
  }
}

----------------------------------------

TITLE: Fetching Data over Unix Domain Socket in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the `unix` option in Bun's `fetch()` function to send a GET request over a Unix domain socket. It specifies the socket path and retrieves JSON data from a local Docker endpoint.

LANGUAGE: typescript
CODE:
const unix = "/var/run/docker.sock";

const response = await fetch("http://localhost/info", { unix });

const body = await response.json();
console.log(body); // { ... }

----------------------------------------

TITLE: Spawning a Process with Bun.spawn
DESCRIPTION: Demonstrates how to spawn a child process using Bun.spawn. The example shows spawning a process to get the Bun version and logging the exit code.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["bun", "--version"]);
console.log(await proc.exited); // 0

----------------------------------------

TITLE: Writing Assertions for Mock Function Usage in Bun Test
DESCRIPTION: Demonstrates how to write test assertions for mock function usage, including checking call count, arguments, and return values. This example uses various 'expect' assertions to validate the mock function's behavior.

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());

test("random", async () => {
  const a = random(1);
  const b = random(2);
  const c = random(3);

  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(3);
  expect(random.mock.args).toEqual([[1], [2], [3]]);
  expect(random.mock.results[0]).toEqual({ type: "return", value: a });
});

----------------------------------------

TITLE: Defining a Database Schema with Drizzle ORM for SQLite
DESCRIPTION: Creates a schema definition for a 'movies' table using Drizzle ORM's SQLite-specific functions.

LANGUAGE: ts
CODE:
import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";

export const movies = sqliteTable("movies", {
  id: integer("id").primaryKey(),
  title: text("name"),
  releaseYear: integer("release_year"),
});

----------------------------------------

TITLE: Watching Directory Changes with Promises in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the node:fs/promises module to watch for directory changes using for await...of instead of a callback.

LANGUAGE: typescript
CODE:
import { watch } from "fs/promises";

const watcher = watch(import.meta.dir);
for await (const event of watcher) {
  console.log(`Detected ${event.eventType} in ${event.filename}`);
}

----------------------------------------

TITLE: Receiving UDP Datagrams in Bun
DESCRIPTION: Demonstrates setting up a UDP server and client for receiving datagrams using callback functions.

LANGUAGE: typescript
CODE:
const server = await Bun.udpSocket({
  socket: {
    data(socket, buf, port, addr) {
      console.log(`message from ${addr}:${port}:`)
      console.log(buf.toString());
    } 
  }
})

const client = await Bun.udpSocket({});
client.send("Hello!", server.port, "127.0.0.1");

----------------------------------------

TITLE: Copying Files with Bun.write()
DESCRIPTION: Demonstrates copying a file to a new location using Bun's file I/O API. Uses Bun.file() to read the source file and Bun.write() to create the copy at the destination path. The operation is asynchronous and provides efficient disk I/O.

LANGUAGE: typescript
CODE:
const file = Bun.file("/path/to/original.txt");
await Bun.write("/path/to/copy.txt", file);

----------------------------------------

TITLE: Compiling for Production Deployment with Bun
DESCRIPTION: Demonstrates the recommended command for compiling a standalone executable for production deployment, including minification and sourcemap generation for improved performance and debugging.

LANGUAGE: bash
CODE:
bun build --compile --minify --sourcemap ./path/to/my/app.ts --outfile myapp

----------------------------------------

TITLE: Writing Byte Array to File in TypeScript
DESCRIPTION: Shows how to write a Uint8Array to a file using Bun.write().

LANGUAGE: typescript
CODE:
const encoder = new TextEncoder();
const data = encoder.encode("datadatadata"); // Uint8Array
await Bun.write("output.txt", data);

----------------------------------------

TITLE: Attaching Contextual Data to WebSocket Connections in Bun
DESCRIPTION: Shows how to attach custom data to a WebSocket connection during the upgrade process, which can be accessed in the WebSocket handlers.

LANGUAGE: typescript
CODE:
type WebSocketData = {
  createdAt: number;
  channelId: string;
  authToken: string;
};

Bun.serve<WebSocketData>({
  fetch(req, server) {
    const cookies = parseCookies(req.headers.get("Cookie"));
    server.upgrade(req, {
      data: {
        createdAt: Date.now(),
        channelId: new URL(req.url).searchParams.get("channelId"),
        authToken: cookies["X-Token"],
      },
    });
    return undefined;
  },
  websocket: {
    async message(ws, message) {
      const user = getUserFromToken(ws.data.authToken);
      await saveMessageToDatabase({
        channel: ws.data.channelId,
        message: String(message),
        userId: user.id,
      });
    },
  },
});

----------------------------------------

TITLE: Running TypeScript with Bun CLI
DESCRIPTION: Shows how to execute a TypeScript file using the Bun CLI, which automatically handles compilation and execution.

LANGUAGE: bash
CODE:
$ bun index.ts
Hello world!

----------------------------------------

TITLE: Auto-installing Latest Package Version in Bun (TypeScript)
DESCRIPTION: Demonstrates how Bun auto-installs the latest version of a package when imported without a specified version. The package is cached for subsequent runs.

LANGUAGE: typescript
CODE:
import { foo } from "foo"; // install `latest` version

foo();

----------------------------------------

TITLE: Parsing Command-Line Arguments in Bun with util.parseArgs (TypeScript)
DESCRIPTION: This snippet shows how to use util.parseArgs to parse command-line arguments into a more structured format. It defines options for parsing flags and allows for positional arguments.

LANGUAGE: typescript
CODE:
import { parseArgs } from "util";

const { values, positionals } = parseArgs({
  args: Bun.argv,
  options: {
    flag1: {
      type: 'boolean',
    },
    flag2: {
      type: 'string',
    },
  },
  strict: true,
  allowPositionals: true,
});

console.log(values);
console.log(positionals);

----------------------------------------

TITLE: Async Route Handler
DESCRIPTION: Demonstrates using async/await in a route handler to perform database operations.

LANGUAGE: typescript
CODE:
import { sql, serve } from "bun";

serve({
  port: 3001,
  routes: {
    "/api/version": async () => {
      const [version] = await sql`SELECT version()`;
      return Response.json(version);
    },
  },
});

----------------------------------------

TITLE: Initializing New Bun Project using CLI
DESCRIPTION: Interactive command line process to scaffold a new Bun project. Creates package.json, index.ts, .gitignore, tsconfig.json, and README.md files with sensible defaults. Supports auto-accepting defaults with -y flag.

LANGUAGE: bash
CODE:
$ bun init
bun init helps you get started with a minimal project and tries to
guess sensible defaults. Press ^C anytime to quit.

package name (quickstart):
entry point (index.ts):

Done! A package.json file was saved in the current directory.
 + index.ts
 + .gitignore
 + tsconfig.json (for editor auto-complete)
 + README.md

To get started, run:
  bun run index.ts

----------------------------------------

TITLE: Bulk Insert with Bun SQL in TypeScript
DESCRIPTION: Demonstrates how to perform bulk inserts using arrays of objects with Bun's SQL driver.

LANGUAGE: typescript
CODE:
const users = [
  { name: "Alice", email: "alice@example.com" },
  { name: "Bob", email: "bob@example.com" },
  { name: "Charlie", email: "charlie@example.com" },
];

await sql`INSERT INTO users ${sql(users)}`;

----------------------------------------

TITLE: Asynchronous Testing with Bun
DESCRIPTION: This snippet illustrates how to write an asynchronous test using Bun. It uses an async function and awaits a Promise before making an assertion.

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test("2 * 2", async () => {
  const result = await Promise.resolve(2 * 2);
  expect(result).toEqual(4);
});

----------------------------------------

TITLE: Module Resolution with Bun.resolveSync() in TypeScript
DESCRIPTION: Demonstrates how to use Bun.resolveSync() to resolve file paths or module specifiers using Bun's internal module resolution algorithm in TypeScript.

LANGUAGE: typescript
CODE:
Bun.resolveSync("./foo.ts", "/path/to/project");
// => "/path/to/project/foo.ts"

Bun.resolveSync("zod", "/path/to/project");
// => "/path/to/project/node_modules/zod/index.ts"

----------------------------------------

TITLE: Writing to Absolute Path with Bun.write()
DESCRIPTION: Demonstrates writing a string to a file using an absolute path. Uses Bun.write() API to efficiently write data to disk.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
await Bun.write(path, "Lorem ipsum");

----------------------------------------

TITLE: Making GET Request with Bun fetch
DESCRIPTION: Demonstrates how to send a simple GET request using Bun's fetch API and retrieve the response as text. Shows basic usage of the fetch API for retrieving HTML content from a URL.

LANGUAGE: typescript
CODE:
const response = await fetch("https://bun.sh");
const html = await response.text(); // HTML string

----------------------------------------

TITLE: Basic Arithmetic Test in TypeScript
DESCRIPTION: Simple example demonstrating how to write a test using Bun's test API with TypeScript

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test("2 + 2", () => {
  expect(2 + 2).toBe(4);
});

----------------------------------------

TITLE: Installing and Managing Dependencies with bun
DESCRIPTION: This snippet demonstrates how to use bun for installing dependencies, adding dev dependencies, and removing packages. It showcases the simplicity of migrating from npm to bun.

LANGUAGE: bash
CODE:
# It only takes one command to migrate
$ bun i

# To add dependencies:
$ bun i @types/bun

# To add devDependencies:
$ bun i -d @types/bun

# To remove a dependency:
$ bun rm @types/bun

----------------------------------------

TITLE: Writing HTTP Response to File in Bun.js
DESCRIPTION: Shows how to write an HTTP response directly to a file using Bun.write(). Currently buffers the entire response before writing, but will support streaming in the future.

LANGUAGE: javascript
CODE:
await Bun.write("index.html", await fetch("https://example.com"));

----------------------------------------

TITLE: Creating Virtual Modules with Bun Plugins
DESCRIPTION: Demonstrates how to create virtual modules at runtime using Bun.plugin, allowing for dynamic module creation and overriding.

LANGUAGE: javascript
CODE:
import { plugin } from "bun";

plugin({
  name: "my-virtual-module",

  setup(build) {
    build.module(
      "my-transpiled-virtual-module",
      () => {
        return {
          contents: "console.log('hello world!')",
          loader: "js",
        };
      },
    );

    build.module("my-object-virtual-module", () => {
      return {
        exports: {
          foo: "bar",
        },
        loader: "object",
      };
    });
  },
});

----------------------------------------

TITLE: Installing Project Dependencies with Bun
DESCRIPTION: Basic command to install all project dependencies using Bun package manager.

LANGUAGE: bash
CODE:
$ bun install

----------------------------------------

TITLE: Setting Timeout and Kill Signal for Subprocess
DESCRIPTION: Demonstrates how to set a timeout for a subprocess and specify a custom kill signal for termination.

LANGUAGE: typescript
CODE:
// Kill the process with SIGKILL after 5 seconds
const proc = Bun.spawn({
  cmd: ["sleep", "10"],
  timeout: 5000,
  killSignal: "SIGKILL", // Can be string name or signal number
});

----------------------------------------

TITLE: Debugging Fetch Requests with Verbose Logging
DESCRIPTION: Shows how to enable verbose logging for fetch requests in Bun. This is useful for debugging purposes, as it prints detailed information about the request and response headers to the terminal.

LANGUAGE: typescript
CODE:
const response = await fetch("http://example.com", {
  verbose: true,
});

----------------------------------------

TITLE: Configuring Bun Preload Scripts
DESCRIPTION: Add preload scripts to bunfig.toml for automatic loading of Happy DOM and Testing Library setup

LANGUAGE: toml
CODE:
[test]
preload = ["./happydom.ts", "./testing-library.ts"]

----------------------------------------

TITLE: Running Bun Applications from CLI
DESCRIPTION: Demonstrates how to execute Bun applications from the command line and shows the resulting output paths.

LANGUAGE: shell
CODE:
$ bun run index.ts
/path/to/index.ts
$ bun run foo.ts
/path/to/foo.ts

----------------------------------------

TITLE: Converting ReadableStream to JSON using Bun in TypeScript
DESCRIPTION: This code snippet demonstrates how to use Bun's readableStreamToJSON function to convert a ReadableStream into a JSON object. It creates a new ReadableStream and then uses the await keyword with Bun.readableStreamToJSON to perform the conversion asynchronously.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const json = await Bun.readableStreamToJSON(stream);

----------------------------------------

TITLE: Bun Install Configuration
DESCRIPTION: TOML configuration for customizing default behavior of bun install command including dependency types and installation options

LANGUAGE: toml
CODE:
[install]

# whether to install optionalDependencies
optional = true

# whether to install devDependencies
dev = true

# whether to install peerDependencies
peer = true

# equivalent to `--production` flag
production = false

# equivalent to `--save-text-lockfile` flag
saveTextLockfile = false

# equivalent to `--frozen-lockfile` flag
frozenLockfile = false

# equivalent to `--dry-run` flag
dryRun = false

# equivalent to `--concurrent-scripts` flag
concurrentScripts = 16 # (cpu count or GOMAXPROCS) x2

----------------------------------------

TITLE: Creating a Svelte Loader Plugin for Bun
DESCRIPTION: Implements a Bun plugin that compiles Svelte components, allowing them to be directly imported and used in Bun projects.

LANGUAGE: typescript
CODE:
import { plugin } from "bun";

await plugin({
  name: "svelte loader",
  async setup(build) {
    const { compile } = await import("svelte/compiler");

    build.onLoad({ filter: /\.svelte$/ }, async ({ path }) => {
      const file = await Bun.file(path).text();
      const contents = compile(file, {
        filename: path,
        generate: "ssr",
      }).js.code;

      return {
        contents,
        loader: "js",
      };
    });
  },
});

----------------------------------------

TITLE: Asynchronous Code Transformation with Bun Transpiler
DESCRIPTION: Shows how to use the transform() method for asynchronous code transpilation. This method returns a Promise<string>.

LANGUAGE: javascript
CODE:
const transpiler = new Bun.Transpiler({ loader: "jsx" });
const result = await transpiler.transform("<div>hi!</div>");
console.log(result);

----------------------------------------

TITLE: Creating Next.js App with Template
DESCRIPTION: Initializes a Next.js application using a specific starter template with the --example flag, demonstrating the use of the Supabase template.

LANGUAGE: sh
CODE:
$ bun create next-app --example with-supabase
✔ What is your project named? … my-app
...

----------------------------------------

TITLE: Importing Prisma Client in TypeScript
DESCRIPTION: Demonstrates how to import the generated Prisma client in a TypeScript file.

LANGUAGE: typescript
CODE:
import {PrismaClient} from "@prisma/client";

----------------------------------------

TITLE: Creating and Using ArrayBuffer
DESCRIPTION: Demonstrates basic ArrayBuffer creation and operations, including creating slices and checking size.

LANGUAGE: typescript
CODE:
// this buffer can store 8 bytes
const buf = new ArrayBuffer(8);

const slice = buf.slice(0, 4); // returns new ArrayBuffer
slice.byteLength; // => 4

----------------------------------------

TITLE: Connecting to MongoDB and performing CRUD operations with Mongoose in TypeScript
DESCRIPTION: Demonstrates how to connect to MongoDB, create a new Animal document, save it to the database, retrieve all Animals, and use the speak method. Finally, it disconnects from the database.

LANGUAGE: ts
CODE:
import * as mongoose from 'mongoose';
import {Animal} from './schema';

// connect to database
await mongoose.connect('mongodb://127.0.0.1:27017/mongoose-app');

// create new Animal
const cow = new Animal({
  name: 'Cow',
  sound: 'Moo',
});
await cow.save(); // saves to the database

// read all Animals
const animals = await Animal.find();
animals[0].speak(); // logs "Moo!"

// disconnect
await mongoose.disconnect();

----------------------------------------

TITLE: Implementing beforeEach and afterEach hooks in Bun test runner
DESCRIPTION: This snippet demonstrates how to use beforeEach and afterEach hooks in Bun's test runner to perform setup and teardown logic for each individual test.

LANGUAGE: typescript
CODE:
import { beforeEach, afterEach } from "bun:test";

beforeEach(() => {
  console.log("running test.");
});

afterEach(() => {
  console.log("done with test.");
});

// tests...

----------------------------------------

TITLE: Initializing Hono Web Application in TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic Hono web application. It imports the Hono class, creates an instance, defines a route for the root path, and exports the app.

LANGUAGE: typescript
CODE:
import { Hono } from "hono";
const app = new Hono();

app.get("/", c => c.text("Hono!"));

export default app;

----------------------------------------

TITLE: Parameterized Testing with test.each in Bun
DESCRIPTION: This example demonstrates how to use 'test.each' for parameterized testing. It allows running the same test multiple times with different inputs.

LANGUAGE: typescript
CODE:
const cases = [
  [1, 2, 3],
  [3, 4, 5],
];

test.each(cases)("%p + %p should be %p", (a, b, expected) => {
  // runs once for each test case provided
});

----------------------------------------

TITLE: Initializing Bun project and installing Mongoose
DESCRIPTION: Commands to create a new directory, initialize a Bun project, and add Mongoose as a dependency.

LANGUAGE: sh
CODE:
$ mkdir mongoose-app
$ cd mongoose-app
$ bun init

LANGUAGE: sh
CODE:
$ bun add mongoose

----------------------------------------

TITLE: Converting ReadableStream to Uint8Array via ArrayBuffer in Bun
DESCRIPTION: This snippet demonstrates how to convert a ReadableStream to a Uint8Array by first converting it to an ArrayBuffer using Bun.readableStreamToArrayBuffer(), then creating a Uint8Array from that buffer.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const buf = await Bun.readableStreamToArrayBuffer(stream);
const uint8 = new Uint8Array(buf);

----------------------------------------

TITLE: Running TypeScript with Bun
DESCRIPTION: Demonstrates how to run a TypeScript file using Bun's built-in TypeScript support.

LANGUAGE: bash
CODE:
bun run index.tsx

----------------------------------------

TITLE: Opening Files in Editor with Bun.openInEditor() in TypeScript
DESCRIPTION: Demonstrates how to open files in the default editor using Bun.openInEditor() in TypeScript.

LANGUAGE: typescript
CODE:
const currentFile = import.meta.url;
Bun.openInEditor(currentFile);

----------------------------------------

TITLE: Converting ArrayBuffer to String using TextDecoder in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the TextDecoder class to convert an ArrayBuffer to a string. It creates an ArrayBuffer, initializes a TextDecoder, and then uses the decode method to convert the buffer to a string.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(64);
const decoder = new TextDecoder();
const str = decoder.decode(buf);

----------------------------------------

TITLE: Creating and Communicating with Worker Thread in JavaScript
DESCRIPTION: Demonstrates how to create a new Worker instance and set up basic message communication from the main thread

LANGUAGE: javascript
CODE:
const worker = new Worker("./worker.ts");

worker.postMessage("hello");
worker.onmessage = event => {
  console.log(event.data);
};

----------------------------------------

TITLE: Using Decorator Metadata in TypeScript with Bun
DESCRIPTION: Illustrates how to use emitDecoratorMetadata to access design-time type information for decorated declarations.

LANGUAGE: typescript
CODE:
import "reflect-metadata";

class User {
  id: number;
  name: string;
}

function Injectable(target: Function) {
  // Get metadata about constructor parameters
  const params = Reflect.getMetadata("design:paramtypes", target);
  console.log("Dependencies:", params); // [User]
}

@Injectable
class UserService {
  constructor(private user: User) {}
}

// Creates new UserService instance with dependencies
const container = new UserService(new User());

----------------------------------------

TITLE: Basic Environment Variable Declaration
DESCRIPTION: Basic .env file format for declaring environment variables in Bun

LANGUAGE: txt
CODE:
FOO=hello
BAR=world

----------------------------------------

TITLE: Reading from a ReadableStream using for-await in TypeScript
DESCRIPTION: This example shows how to read chunks from a ReadableStream using the for-await syntax in TypeScript.

LANGUAGE: typescript
CODE:
for await (const chunk of stream) {
  console.log(chunk);
  // => "hello"
  // => "world"
}

----------------------------------------

TITLE: Creating a Basic Mock Function in Bun Test
DESCRIPTION: Demonstrates how to create a simple mock function using the 'mock' function from 'bun:test'. This mock function returns a random number.

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";

const random = mock(() => Math.random());

----------------------------------------

TITLE: Initializing CookieMap Instances in TypeScript
DESCRIPTION: Demonstrates different ways to create CookieMap instances using various input formats including empty map, cookie string, object, and array pairs.

LANGUAGE: typescript
CODE:
// Empty cookie map
const cookies = new Bun.CookieMap();

// From a cookie string
const cookies1 = new Bun.CookieMap("name=value; foo=bar");

// From an object
const cookies2 = new Bun.CookieMap({
  session: "abc123",
  theme: "dark",
});

// From an array of name/value pairs
const cookies3 = new Bun.CookieMap([
  ["session", "abc123"],
  ["theme", "dark"],
]);

----------------------------------------

TITLE: Verifying a Hashed Password in Bun
DESCRIPTION: This example demonstrates how to verify a password against its hash using Bun.password.verify(). The function automatically detects the algorithm and parameters from the hash, so no additional configuration is needed.

LANGUAGE: typescript
CODE:
const password = "super-secure-pa$$word";
const hash = await Bun.password.hash(password);

const isMatch = await Bun.password.verify(password, hash);
// => true

----------------------------------------

TITLE: Generating and Running Initial Prisma Migration
DESCRIPTION: Generates and applies the initial database migration using Prisma CLI with Bun.

LANGUAGE: bash
CODE:
$ bunx prisma migrate dev --name init

----------------------------------------

TITLE: Converting ArrayBuffer to Blob in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Blob object from an ArrayBuffer. It initializes an ArrayBuffer and then constructs a Blob using that buffer as the data source.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(64);
const blob = new Blob([buf]);

----------------------------------------

TITLE: Querying Neon Postgres using Bun and the serverless driver
DESCRIPTION: TypeScript code demonstrating how to use the Neon serverless driver to connect to the database and execute a simple query. It imports the neon function, uses the DATABASE_URL from the environment, and runs a SELECT query to fetch the Postgres version.

LANGUAGE: ts
CODE:
import { neon } from "@neondatabase/serverless";

// Bun automatically loads the DATABASE_URL from .env.local
// Refer to: https://bun.sh/docs/runtime/env for more information
const sql = neon(process.env.DATABASE_URL);

const rows = await sql`SELECT version()`;

console.log(rows[0].version);

----------------------------------------

TITLE: Enabling WebSocket Compression in Bun
DESCRIPTION: Shows how to enable per-message compression for WebSocket connections using the perMessageDeflate parameter.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    // enable compression and decompression
    perMessageDeflate: true,
  },
});

----------------------------------------

TITLE: Matching Dynamic Routes with URL Parameters in TypeScript
DESCRIPTION: This snippet illustrates how the FileSystemRouter handles dynamic routes with URL parameters. The router automatically parses the parameters and includes them in the 'params' property of the result.

LANGUAGE: typescript
CODE:
router.match("/blog/my-cool-post");

// =>
{
  filePath: "/Users/colinmcd94/Documents/bun/fun/pages/blog/[slug].tsx",
  kind: "dynamic",
  name: "/blog/[slug]",
  pathname: "/blog/my-cool-post",
  src: "https://mydomain.com/_next/static/pages/blog/[slug].tsx",
  params: {
    slug: "my-cool-post"
  }
}

----------------------------------------

TITLE: Basic Command Execution with Bun Shell
DESCRIPTION: Demonstrates the basic usage of Bun Shell for executing commands using template literals with the $ tag.

LANGUAGE: javascript
CODE:
import { $ } from "bun";

const response = await fetch("https://example.com");

// Use Response as stdin.
await $`cat < ${response} | wc -c`; // 1256

----------------------------------------

TITLE: Handling Subprocess Input Stream
DESCRIPTION: Demonstrates how to configure and use the input stream for a subprocess, including using a network resource as input.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["cat"], {
  stdin: await fetch(
    "https://raw.githubusercontent.com/oven-sh/bun/main/examples/hashing.js",
  ),
});

const text = await new Response(proc.stdout).text();
console.log(text); // "const input = "hello world".repeat(400); ..."

----------------------------------------

TITLE: Writing String to File in TypeScript
DESCRIPTION: Shows how to write a string to a file using Bun.write().

LANGUAGE: typescript
CODE:
const data = `It was the best of times, it was the worst of times.`;
await Bun.write("output.txt", data);

----------------------------------------

TITLE: Retrieving MIME Types with Bun.file() in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.file() function to create BunFile instances for different file types and access their MIME types. It shows examples for JSON, HTML, and PNG files.

LANGUAGE: typescript
CODE:
const file = Bun.file("./package.json");
file.type; // application/json

const file = Bun.file("./index.html");
file.type; // text/html

const file = Bun.file("./image.png");
file.type; // image/png

----------------------------------------

TITLE: Detecting Module Entrypoint using import.meta.main in TypeScript
DESCRIPTION: Shows how to use import.meta.main to detect whether a file is being executed directly with 'bun run' or being imported by another file. This is useful for creating modules that can be both imported and run directly.

LANGUAGE: typescript
CODE:
if (import.meta.main) {
  // this file is directly executed with `bun run`
} else {
  // this file is being imported by another file
}

----------------------------------------

TITLE: Initializing FileSystemRouter for Next.js-style Routing in TypeScript
DESCRIPTION: This snippet demonstrates how to create a new FileSystemRouter instance for Next.js-style routing. It specifies the directory, origin, and asset prefix for the router.

LANGUAGE: typescript
CODE:
const router = new Bun.FileSystemRouter({
  style: "nextjs",
  dir: "./pages",
  origin: "https://mydomain.com",
  assetPrefix: "_next/static/"
});
router.match("/");

// =>
{
  filePath: "/path/to/pages/index.tsx",
  kind: "exact",
  name: "/",
  pathname: "/",
  src: "https://mydomain.com/_next/static/pages/index.tsx"
}

----------------------------------------

TITLE: Embedding Assets in Bun Standalone Executables
DESCRIPTION: Shows how to embed files and assets into a standalone executable using Bun's build system. This example demonstrates embedding an image file and accessing it within the application.

LANGUAGE: typescript
CODE:
// this becomes an internal file path
import icon from "./icon.png" with { type: "file" };
import { file } from "bun";

export default {
  fetch(req) {
    // Embedded files can be streamed from Response objects
    return new Response(file(icon));
  },
};

----------------------------------------

TITLE: Writing to stdout using console.log in TypeScript
DESCRIPTION: This snippet demonstrates how to use console.log to write to stdout in Bun. The function automatically appends a line break at the end of the printed data.

LANGUAGE: typescript
CODE:
console.log("Lorem ipsum");

----------------------------------------

TITLE: Converting DataView to String with TextDecoder in TypeScript
DESCRIPTION: Shows how to use TextDecoder to convert a DataView containing ASCII-encoded text into a string. The code creates a TextDecoder instance and uses its decode method to transform the DataView data into a string value.

LANGUAGE: typescript
CODE:
const dv: DataView = ...;
const decoder = new TextDecoder();
const str = decoder.decode(dv);

----------------------------------------

TITLE: Updating All Dependencies with Bun
DESCRIPTION: This command updates all dependencies to their latest versions within the specified version range in package.json.

LANGUAGE: sh
CODE:
$ bun update

----------------------------------------

TITLE: TCP Client Connection with Bun.connect()
DESCRIPTION: Shows how to create a TCP client connection with all available event handlers including client-specific events.

LANGUAGE: typescript
CODE:
const socket = await Bun.connect({
  hostname: "localhost",
  port: 8080,

  socket: {
    data(socket, data) {},
    open(socket) {},
    close(socket, error) {},
    drain(socket) {},
    error(socket, error) {},

    connectError(socket, error) {}, // connection failed
    end(socket) {}, // connection closed by server
    timeout(socket) {}, // connection timed out
  },
});

----------------------------------------

TITLE: Running Bun Test Coverage via CLI
DESCRIPTION: Example showing how to run Bun tests with coverage reporting enabled via command line, displaying a coverage summary table with file-level statistics.

LANGUAGE: javascript
CODE:
$ bun test --coverage
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   38.89 |   42.11 |
 index-0.ts  |   33.33 |   36.84 | 10-15,19-24
 index-1.ts  |   33.33 |   36.84 | 10-15,19-24
 index-10.ts |   33.33 |   36.84 | 10-15,19-24
 index-2.ts  |   33.33 |   36.84 | 10-15,19-24
 index-3.ts  |   33.33 |   36.84 | 10-15,19-24
 index-4.ts  |   33.33 |   36.84 | 10-15,19-24
 index-5.ts  |   33.33 |   36.84 | 10-15,19-24
 index-6.ts  |   33.33 |   36.84 | 10-15,19-24
 index-7.ts  |   33.33 |   36.84 | 10-15,19-24
 index-8.ts  |   33.33 |   36.84 | 10-15,19-24
 index-9.ts  |   33.33 |   36.84 | 10-15,19-24
 index.ts    |  100.00 |  100.00 |
-------------|---------|---------|-------------------

----------------------------------------

TITLE: Spawning a Basic Child Process with Bun
DESCRIPTION: Demonstrates how to spawn a simple child process using Bun.spawn() and wait for its completion. The example uses the 'echo' command to output 'hello'.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"]);

// await completion
await proc.exited;

----------------------------------------

TITLE: Connecting to Neon database using Drizzle ORM
DESCRIPTION: Sets up a connection to the Neon database using the Neon serverless driver wrapped in a Drizzle database instance.

LANGUAGE: ts
CODE:
import { neon } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

// Bun automatically loads the DATABASE_URL from .env.local
// Refer to: https://bun.sh/docs/runtime/env for more information
const sql = neon(process.env.DATABASE_URL!);

export const db = drizzle(sql);

----------------------------------------

TITLE: Mocking Functions in Bun Tests
DESCRIPTION: Example showing how to create and use mock functions in Bun tests with assertions

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";
const random = mock(() => Math.random());

test("random", () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Configuring WebSocket Timeouts and Limits in Bun
DESCRIPTION: Demonstrates how to set custom idle timeout and maximum payload length for WebSocket connections in a Bun server.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    idleTimeout: 60, // 60 seconds
    maxPayloadLength: 1024 * 1024, // 1 MB
    // ...
  },
});

----------------------------------------

TITLE: Listening for CTRL+C interrupt in TypeScript with Bun
DESCRIPTION: This code snippet demonstrates how to listen for the SIGINT event, which is triggered when CTRL+C is pressed. It logs a message to the console and then exits the process. This is useful for graceful shutdown of Bun applications.

LANGUAGE: typescript
CODE:
process.on("SIGINT", () => {
  console.log("Ctrl-C was pressed");
  process.exit();
});

----------------------------------------

TITLE: Creating a Simple Web Server in TypeScript with Bun
DESCRIPTION: This snippet demonstrates a basic web server implementation using Bun's serve function. It logs the URL of incoming requests and responds with 'Hello, world!'.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req){
    console.log(req.url);
    return new Response("Hello, world!");
  }
})

----------------------------------------

TITLE: Automatic Content-Type Detection for File Responses in Bun
DESCRIPTION: This snippet shows how Bun automatically sets the correct Content-Type header based on the file type when creating a Response from a BunFile. Examples are provided for JSON, text, TypeScript, and PNG files.

LANGUAGE: typescript
CODE:
new Response(Bun.file("./package.json")).headers.get("Content-Type");
// => application/json;charset=utf-8

new Response(Bun.file("./test.txt")).headers.get("Content-Type");
// => text/plain;charset=utf-8

new Response(Bun.file("./index.tsx")).headers.get("Content-Type");
// => text/javascript;charset=utf-8

new Response(Bun.file("./img.png")).headers.get("Content-Type");
// => image/png

----------------------------------------

TITLE: Reading File Content as String using Bun.file()
DESCRIPTION: Shows how to read a file's contents as a string using Bun.file() and the .text() method. The BunFile class extends Blob and provides lazy file reading capabilities.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
const file = Bun.file(path);

const text = await file.text();
// string

----------------------------------------

TITLE: Converting Buffer to String with Encoding and Byte Range in TypeScript
DESCRIPTION: This snippet shows how to convert a Buffer to a string with specified encoding and byte range. It creates a Buffer from a longer string and then converts a portion of it to a string using UTF-8 encoding and a specific byte range.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello world!");
const str = buf.toString("utf8", 0, 5);
// => "hello"

----------------------------------------

TITLE: Accessing Bun Version Information in TypeScript
DESCRIPTION: Shows how to retrieve the Bun version and git revision using Bun.version and Bun.revision properties.

LANGUAGE: typescript
CODE:
Bun.version;
// => "0.6.4"

Bun.revision;
// => "f02561530fda1ee9396f51c8bc99b38716e38296"

----------------------------------------

TITLE: Creating Vite Project with Bun
DESCRIPTION: Initialize a new Vite project using Bun's create command, selecting React with TypeScript + SWC as the template.

LANGUAGE: bash
CODE:
$ bun create vite my-app
✔ Select a framework: › React
✔ Select a variant: › TypeScript + SWC
Scaffolding project in /path/to/my-app...

----------------------------------------

TITLE: Extracting Social Metadata from HTML using Bun's HTMLRewriter in TypeScript
DESCRIPTION: This snippet defines an async function 'extractSocialMetadata' that fetches a URL, uses HTMLRewriter to parse the HTML content, and extracts social metadata such as title, description, image, and other Open Graph properties. It also includes fallback mechanisms for Twitter Card meta tags and regular meta tags.

LANGUAGE: typescript
CODE:
interface SocialMetadata {
  title?: string;
  description?: string;
  image?: string;
  url?: string;
  siteName?: string;
  type?: string;
}

async function extractSocialMetadata(url: string): Promise<SocialMetadata> {
  const metadata: SocialMetadata = {};
  const response = await fetch(url);

  const rewriter = new HTMLRewriter()
    // Extract Open Graph meta tags
    .on('meta[property^="og:"]', {
      element(el) {
        const property = el.getAttribute("property");
        const content = el.getAttribute("content");
        if (property && content) {
          // Convert "og:image" to "image" etc.
          const key = property.replace("og:", "") as keyof SocialMetadata;
          metadata[key] = content;
        }
      },
    })
    // Extract Twitter Card meta tags as fallback
    .on('meta[name^="twitter:"]', {
      element(el) {
        const name = el.getAttribute("name");
        const content = el.getAttribute("content");
        if (name && content) {
          const key = name.replace("twitter:", "") as keyof SocialMetadata;
          // Only use Twitter Card data if we don't have OG data
          if (!metadata[key]) {
            metadata[key] = content;
          }
        }
      },
    })
    // Fallback to regular meta tags
    .on('meta[name="description"]', {
      element(el) {
        const content = el.getAttribute("content");
        if (content && !metadata.description) {
          metadata.description = content;
        }
      },
    })
    // Fallback to title tag
    .on("title", {
      text(text) {
        if (!metadata.title) {
          metadata.title = text.text;
        }
      },
    });

  // Process the response
  await rewriter.transform(response).blob();

  // Convert relative image URLs to absolute
  if (metadata.image && !metadata.image.startsWith("http")) {
    try {
      metadata.image = new URL(metadata.image, url).href;
    } catch {
      // Keep the original URL if parsing fails
    }
  }

  return metadata;
}

// Example usage
const metadata = await extractSocialMetadata("https://bun.sh");
console.log(metadata);
// {
//   title: "Bun — A fast all-in-one JavaScript runtime",
//   description: "Bundle, transpile, install and run JavaScript & TypeScript projects — all in Bun. Bun is a fast all-in-one JavaScript runtime & toolkit designed for speed, complete with a bundler, test runner, and Node.js-compatible package manager.",
//   image: "https://bun.sh/share.jpg",
//   type: "website",
//   ...
// }

----------------------------------------

TITLE: Configuring SvelteKit for Bun Adapter
DESCRIPTION: Shows the configuration changes needed in svelte.config.js to use the Bun adapter for production builds. Includes switching from auto adapter to Bun-specific adapter.

LANGUAGE: ts-diff
CODE:
- import adapter from "@sveltejs/adapter-auto";
+ import adapter from "svelte-adapter-bun";
  import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

  /** @type {import('@sveltejs/kit').Config} */
  const config = {
  	// Consult https://svelte.dev/docs/kit/integrations#preprocessors
  	// for more information about preprocessors
  	preprocess: vitePreprocess(),
  
  	kit: {
  		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
  		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
  		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
  		adapter: adapter()
  	}
  };
  
  export default config;

----------------------------------------

TITLE: Implementing 'cat' Command in TypeScript
DESCRIPTION: A 3-line implementation of the Linux 'cat' command using Bun's file system APIs.

LANGUAGE: typescript
CODE:
// Usage
// $ bun ./cat.ts ./path-to-file

import { resolve } from "path";

const path = resolve(process.argv.at(-1));
await Bun.write(Bun.stdout, Bun.file(path));

----------------------------------------

TITLE: Replacing Jest CLI Commands with Bun Test
DESCRIPTION: Shows how to replace Jest CLI commands with the equivalent Bun test command.

LANGUAGE: sh
CODE:
- $ npx jest
- $ yarn test
+ $ bun test

----------------------------------------

TITLE: Setting Environment Variables via Command Line
DESCRIPTION: Shows how to set environment variables when running Bun commands across different operating systems including Linux/macOS and Windows (CMD and PowerShell).

LANGUAGE: shell
CODE:
FOO=helloworld bun run dev

LANGUAGE: shell
CODE:
# Using CMD
set FOO=helloworld && bun run dev

# Using PowerShell
$env:FOO="helloworld"; bun run dev

----------------------------------------

TITLE: Configuring Password Hashing Algorithms
DESCRIPTION: Shows how to configure different hashing algorithms (argon2 and bcrypt) with custom parameters.

LANGUAGE: typescript
CODE:
const password = "super-secure-pa$$word";

// use argon2 (default)
const argonHash = await Bun.password.hash(password, {
  algorithm: "argon2id", // "argon2id" | "argon2i" | "argon2d"
  memoryCost: 4, // memory usage in kibibytes
  timeCost: 3, // the number of iterations
});

// use bcrypt
const bcryptHash = await Bun.password.hash(password, {
  algorithm: "bcrypt",
  cost: 4, // number between 4-31
});

----------------------------------------

TITLE: Configuring Git Attributes for Lockfile
DESCRIPTION: Add an entry to .gitattributes file to tell Git how to handle .lockb files. This configuration marks the file as binary and associates it with the lockb diff driver.

LANGUAGE: javascript
CODE:
*.lockb binary diff=lockb

----------------------------------------

TITLE: Converting ReadableStream to Text using Bun
DESCRIPTION: Shows how to convert a ReadableStream instance to a string using Bun.readableStreamToText() utility function. This async operation returns a Promise that resolves to the stream's contents as a string.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const str = await Bun.readableStreamToText(stream);

----------------------------------------

TITLE: Recursive Directory Watching in Bun (TypeScript)
DESCRIPTION: This code shows how to watch for changes in a directory and its subdirectories by passing the recursive: true option to fs.watch.

LANGUAGE: typescript
CODE:
import { watch } from "fs";

const watcher = watch(
  import.meta.dir,
  { recursive: true },
  (event, filename) => {
    console.log(`Detected ${event} in ${filename}`);
  },
);

----------------------------------------

TITLE: Testing Method Calls with Spy Assertions in Bun
DESCRIPTION: Demonstrates how to write test assertions using the spy object to verify method call counts and arguments. Shows validation of method invocation frequency and parameter passing.

LANGUAGE: typescript
CODE:
import { test, expect, spyOn } from "bun:test";

const leo = {
  name: "Leonardo",
  sayHi(thing: string) {
    console.log(`Sup I'm ${this.name} and I like ${thing}`);
  },
};

const spy = spyOn(leo, "sayHi");

test("turtles", ()=>{
  expect(spy).toHaveBeenCalledTimes(0);
  leo.sayHi("pizza");
  expect(spy).toHaveBeenCalledTimes(1);
  expect(spy.mock.calls).toEqual([[ "pizza" ]]);
})

----------------------------------------

TITLE: Converting Blob to ReadableStream in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Blob with a string content and then convert it to a ReadableStream using the stream() method. The stream() method returns a Promise that resolves to a ReadableStream.

LANGUAGE: typescript
CODE:
const blob = new Blob(["hello world"]);
const stream = await blob.stream();

----------------------------------------

TITLE: Configuring Default NPM Registry in Bun
DESCRIPTION: Configure the default NPM registry in bunfig.toml using different authentication methods including direct URL, token-based auth, and username/password authentication.

LANGUAGE: toml
CODE:
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"
# set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }
# set a username/password
registry = "https://username:password@registry.npmjs.org"

----------------------------------------

TITLE: Installing Bun on Windows using Scoop
DESCRIPTION: This command installs Bun on Windows using the Scoop package manager.

LANGUAGE: powershell
CODE:
> scoop install bun

----------------------------------------

TITLE: Setting Scope-Specific Registry in .npmrc for Bun
DESCRIPTION: This snippet illustrates how to set a registry for a specific scope in the .npmrc file. It associates the 'myorg' scope with a local registry.

LANGUAGE: ini
CODE:
@myorg:registry=http://localhost:4873/

----------------------------------------

TITLE: Scanning Code for Imports and Exports with Bun Transpiler
DESCRIPTION: Demonstrates the use of the scan() method to analyze source code and return a list of its imports and exports, along with additional metadata.

LANGUAGE: typescript
CODE:
const transpiler = new Bun.Transpiler({
  loader: 'tsx',
});

const code = `
import React from 'react';
import type {ReactNode} from 'react';
const val = require('./cjs.js')
import('./loader');

export const name = "hello";
`;

const result = transpiler.scan(code);

----------------------------------------

TITLE: Setting Log Level in Bun
DESCRIPTION: Configures the log level for Bun, which can be 'debug', 'warn', or 'error'.

LANGUAGE: toml
CODE:
logLevel = "debug" # "debug" | "warn" | "error"

----------------------------------------

TITLE: Configuring Package Overrides in package.json
DESCRIPTION: JSON configuration to specify version overrides for dependencies in package.json.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "dependencies": {
    "foo": "^2.0.0"
  },
  "overrides": {
    "bar": "~4.4.0"
  }
}

----------------------------------------

TITLE: Configuring Package Overrides in package.json
DESCRIPTION: JSON configuration to specify version overrides for dependencies in package.json.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "dependencies": {
    "foo": "^2.0.0"
  },
  "overrides": {
    "bar": "~4.4.0"
  }
}

----------------------------------------

TITLE: Initializing Bun Transpiler in TypeScript
DESCRIPTION: Creates an instance of Bun's transpiler with specified options. The loader option determines the input file type.

LANGUAGE: typescript
CODE:
const transpiler = new Bun.Transpiler({
  loader: "tsx", // "js | "jsx" | "ts" | "tsx"
});

----------------------------------------

TITLE: Updating Specific Dependency with Bun
DESCRIPTION: This command updates a specific package to its latest version within the specified version range in package.json.

LANGUAGE: sh
CODE:
$ bun update [package]

----------------------------------------

TITLE: Detecting Bun Execution using Global Object in TypeScript
DESCRIPTION: This snippet shows how to check for the existence of the 'Bun' global object to determine if the code is being executed with Bun. This method is similar to checking for 'window' in browser environments.

LANGUAGE: typescript
CODE:
if (typeof Bun !== "undefined") {
  // this code will only run when the file is run with Bun
}

----------------------------------------

TITLE: Reading stdout from Child Process in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to spawn a child process using Bun.spawn() and read its stdout as a ReadableStream. It uses the Response API to convert the stream to text.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"]);

const output = await new Response(proc.stdout).text();
output; // => "hello"

----------------------------------------

TITLE: Using Spies in Bun Tests
DESCRIPTION: This snippet shows how to use `spyOn()` to create a spy on an object's method without replacing it, allowing you to track calls to the function.

LANGUAGE: typescript
CODE:
import { test, expect, spyOn } from "bun:test";

const ringo = {
  name: "Ringo",
  sayHi() {
    console.log(`Hello I'm ${this.name}`);
  },
};

const spy = spyOn(ringo, "sayHi");

test("spyon", () => {
  expect(spy).toHaveBeenCalledTimes(0);
  ringo.sayHi();
  expect(spy).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Compressing and Decompressing Data with DEFLATE in Bun using TypeScript
DESCRIPTION: This snippet demonstrates how to use Bun.deflateSync() to compress a string into a Uint8Array and then use Bun.inflateSync() to decompress it back. It showcases Bun's built-in compression utilities for working with the DEFLATE algorithm.

LANGUAGE: typescript
CODE:
const data = Buffer.from("Hello, world!");
const compressed = Bun.deflateSync("Hello, world!");
// => Uint8Array

const decompressed = Bun.inflateSync(compressed);
// => Uint8Array

----------------------------------------

TITLE: Installing Dependencies with Workspace Filtering
DESCRIPTION: Commands demonstrating how to install dependencies for specific workspaces using the --filter flag with glob patterns.

LANGUAGE: bash
CODE:
# Install dependencies for all workspaces starting with `pkg-` except for `pkg-c`
$ bun install --filter "pkg-*" --filter "!pkg-c"

# Paths can also be used. This is equivalent to the command above.
$ bun install --filter "./packages/pkg-*" --filter "!pkg-c" # or --filter "!./packages/pkg-c"

----------------------------------------

TITLE: Installing Bun via curl
DESCRIPTION: Installs or upgrades Bun using the official curl installation script. This method works even when Bun is already installed on the system.

LANGUAGE: bash
CODE:
$ curl https://bun.sh/install | bash

----------------------------------------

TITLE: Configuring Bun Cache Behavior in TOML
DESCRIPTION: This snippet shows how to configure Bun's cache behavior using a bunfig.toml file. It includes options for setting the cache directory, disabling the global cache, and always resolving the latest versions from the registry.

LANGUAGE: toml
CODE:
[install.cache]
# the directory to use for the cache
dir = "~/.bun/install/cache"

# when true, don't load from the global cache.
# Bun may still write to node_modules/.cache
disable = false

# when true, always resolve the latest versions from the registry
disableManifest = false

----------------------------------------

TITLE: Basic package.json Structure in Bun
DESCRIPTION: This snippet shows a basic package.json structure with a single dependency 'foo'. It's used to illustrate the default behavior of Bun when installing dependencies and metadependencies.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "dependencies": {
    "foo": "^2.0.0"
  }
}

----------------------------------------

TITLE: Configuring Azure Artifacts in bunfig.toml for Bun Install
DESCRIPTION: This snippet shows how to configure the Azure Artifacts npm registry in a bunfig.toml file for use with Bun install. It includes settings for the registry URL, username, and password (using an environment variable).

LANGUAGE: toml
CODE:
[install.registry]
url = "https://pkgs.dev.azure.com/my-azure-artifacts-user/_packaging/my-azure-artifacts-user/npm/registry"
username = "my-azure-artifacts-user"
# Bun v1.0.3+ supports using an environment variable here
password = "$NPM_PASSWORD"

----------------------------------------

TITLE: Configuring Default Coverage Settings in bunfig.toml
DESCRIPTION: TOML configuration to enable code coverage reporting by default for all test runs using bunfig.toml file.

LANGUAGE: toml
CODE:
[test]
coverage = true # always enable coverage

----------------------------------------

TITLE: Adding a Dependency with Bun
DESCRIPTION: This snippet shows how to add an npm package as a dependency using the 'bun add' command. It uses 'zod' as an example package.

LANGUAGE: sh
CODE:
$ bun add zod

----------------------------------------

TITLE: Using CSS Modules in Bun with TSX
DESCRIPTION: Shows how to import and use CSS Modules in a TSX file, demonstrating the scoping of class names.

LANGUAGE: CSS
CODE:
/* styles.module.css */
.button {
  color: red;
}

/* other-styles.module.css */
.button {
  color: blue;
}

LANGUAGE: TSX
CODE:
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

export default function App() {
  return (
    <>
      <button className={styles.button}>Red button!</button>
      <button className={otherStyles.button}>Blue button!</button>
    </>
  );
}

----------------------------------------

TITLE: Basic Package Publishing with Bun
DESCRIPTION: Demonstrates the basic usage of bun publish command to publish a package to npm registry. Shows the standard output including package details and integrity information.

LANGUAGE: sh
CODE:
## Publishing the package from the current working directory
$ bun publish

## Output
bun publish v$BUN_LATEST_VERSION (ca7428e9)

packed 203B package.json
packed 224B README.md
packed 30B index.ts
packed 0.64KB tsconfig.json

Total files: 4
Shasum: 79e2b4377b63f4de38dc7ea6e5e9dbee08311a69
Integrity: sha512-6QSNlDdSwyG/+[...]X6wXHriDWr6fA==
Unpacked size: 1.1KB
Packed size: 0.76KB
Tag: latest
Access: default
Registry: http://localhost:4873/

 + publish-1@1.0.0

----------------------------------------

TITLE: Reading File to Buffer using Bun.file()
DESCRIPTION: Shows how to read a file into a Buffer by first creating a BunFile instance, converting it to an ArrayBuffer with .arrayBuffer(), and then creating a Buffer from that ArrayBuffer using Buffer.from(). The BunFile class extends Blob for lazy file reading capabilities.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

const arrbuf = await file.arrayBuffer();
const buffer = Buffer.from(arrbuf);

----------------------------------------

TITLE: Bidirectional IPC Communication in Bun
DESCRIPTION: This snippet demonstrates how to set up bidirectional communication between parent and child processes, including sending messages from the parent to the child.

LANGUAGE: typescript
CODE:
const childProc = Bun.spawn(["bun", "child.ts"], {
  ipc(message, childProc) {
    /**
     * The message received from the sub process
     **/
    childProc.send("Respond to child")
  },
});

childProc.send("I am your father"); // The parent can send messages to the child as well

----------------------------------------

TITLE: Using Done Callback for Asynchronous Tests in Bun
DESCRIPTION: This example demonstrates an alternative way to handle asynchronous tests using a 'done' callback. The test is considered complete when the callback is called.

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test("2 * 2", done => {
  Promise.resolve(2 * 2).then(result => {
    expect(result).toEqual(4);
    done();
  });
});

----------------------------------------

TITLE: Converting Node.js Readable to JSON using Response in Bun
DESCRIPTION: This snippet shows how to create a Readable stream from a JSON string, wrap it in a Response object, and then use response.json() to parse it into a JavaScript object. It utilizes Bun's compatibility with Web APIs like Response.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
const stream = Readable.from([JSON.stringify({ hello: "world" })]);
const json = await new Response(stream).json();
console.log(json); // { hello: "world" }

----------------------------------------

TITLE: Specifying Debug Port and URL in Bun
DESCRIPTION: These shell commands demonstrate how to specify a custom port number, URL prefix, or both when using Bun's inspect flag for debugging.

LANGUAGE: shell
CODE:
$ bun --inspect=4000 server.ts
$ bun --inspect=localhost:4000 server.ts
$ bun --inspect=localhost:4000/prefix server.ts

----------------------------------------

TITLE: Installing Specific Version of Bun on Linux/Mac
DESCRIPTION: This command installs a specific version of Bun on Linux or Mac by passing the git tag to the install script.

LANGUAGE: bash
CODE:
$ curl -fsSL https://bun.sh/install | bash -s "bun-v$BUN_LATEST_VERSION"

----------------------------------------

TITLE: Setting Port Permissions for Non-Root Bun Application
DESCRIPTION: Command to allow Bun to listen on privileged ports (80 and 443) when executed by a non-root user. This step is necessary only if the application needs to use these ports.

LANGUAGE: bash
CODE:
$ sudo setcap CAP_NET_BIND_SERVICE=+eip ~/.bun/bin/bun

----------------------------------------

TITLE: CSS Module Composition in Bun
DESCRIPTION: Demonstrates how to use the 'composes' property in CSS Modules to reuse style rules across multiple classes.

LANGUAGE: CSS
CODE:
/* styles.module.css */
.button {
  composes: background;
  color: red;
}

.background {
  background-color: blue;
}

----------------------------------------

TITLE: Initializing a Qwik App with Bun
DESCRIPTION: This snippet demonstrates how to create a new Qwik application using the 'bun create qwik' command. It shows the interactive prompts and the successful creation of the project.

LANGUAGE: sh
CODE:
$ bun create qwik

      ............
    .::: :--------:.
   .::::  .:-------:.
  .:::::.   .:-------.
  ::::::.     .:------.
 ::::::.        :-----:
 ::::::.       .:-----.
  :::::::.     .-----.
   ::::::::..   ---:.
    .:::::::::. :-:.
     ..::::::::::::
             ...::::


┌  Let's create a  Qwik App  ✨ (v1.2.10)
│
◇  Where would you like to create your new project? (Use '.' or './' for current directory)
│  ./my-app
│
●  Creating new project in  /path/to/my-app  ... 🐇
│
◇  Select a starter
│  Basic App
│
◇  Would you like to install bun dependencies?
│  Yes
│
◇  Initialize a new git repository?
│  No
│
◇  Finishing the install. Wanna hear a joke?
│  Yes
│
○  ────────────────────────────────────────────────────────╮
│                                                          │
│  How do you know if there's an elephant under your bed?  │
│  Your head hits the ceiling!                             │
│                                                          │
├──────────────────────────────────────────────────────────╯
│
◇  App Created 🐰
│
◇  Installed bun dependencies 📋
│
○  Result ─────────────────────────────────────────────╮
│                                                      │
│  Success!  Project created in my-app directory       │
│                                                      │
│  Integrations? Add Netlify, Cloudflare, Tailwind...  │
│  bun qwik add                                        │
│                                                      │
│  Relevant docs:                                      │
│  https://qwik.builder.io/docs/getting-started/       │
│                                                      │
│  Questions? Start the conversation at:               │
│  https://qwik.builder.io/chat                        │
│  https://twitter.com/QwikDev                         │
│                                                      │
│  Presentations, Podcasts and Videos:                 │
│  https://qwik.builder.io/media/                      │
│                                                      │
│  Next steps:                                         │
│  cd my-app                                           │
│  bun start                                           │
│                                                      │
│                                                      │
├──────────────────────────────────────────────────────╯
│
└  Happy coding! 🎉

----------------------------------------

TITLE: Monitoring Subprocess Resource Usage
DESCRIPTION: Demonstrates how to retrieve and log resource usage information for a subprocess after it has exited.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["bun", "--version"]);
await proc.exited;

const usage = proc.resourceUsage();
console.log(`Max memory used: ${usage.maxRSS} bytes`);
console.log(`CPU time (user): ${usage.cpuTime.user} µs`);
console.log(`CPU time (system): ${usage.cpuTime.system} µs`);

----------------------------------------

TITLE: Setting MIME Type for BunFile in TypeScript
DESCRIPTION: Demonstrates how to set a custom MIME type when creating a BunFile instance.

LANGUAGE: typescript
CODE:
const notreal = Bun.file("notreal.json", { type: "application/json" });
notreal.type; // => "application/json;charset=utf-8"

----------------------------------------

TITLE: Watching Current Directory for Changes in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to use fs.watch to listen for changes in the current directory. It's a shallow watch, not detecting changes in subdirectories.

LANGUAGE: typescript
CODE:
import { watch } from "fs";

const watcher = watch(import.meta.dir, (event, filename) => {
  console.log(`Detected ${event} in ${filename}`);
});

----------------------------------------

TITLE: Reading File to ArrayBuffer in Bun using TypeScript
DESCRIPTION: This snippet demonstrates how to read a file's contents into an ArrayBuffer using Bun's file API. It uses the Bun.file() function to create a BunFile instance and then calls the arrayBuffer() method to read the file's contents.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

const buffer = await file.arrayBuffer();

----------------------------------------

TITLE: Converting Node.js Readable Stream to Blob using Response API
DESCRIPTION: Creates a Readable stream from an array of strings and converts it to a Blob using the Response API. The code demonstrates how to leverage the Response.blob() method to transform streaming data into a Blob object.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const blob = await new Response(stream).blob();

----------------------------------------

TITLE: Marking Tests as TODO with test.todo in Bun
DESCRIPTION: This snippet shows how to mark a test as a TODO item using 'test.todo'. These tests will not be run but can be identified for future implementation.

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test.todo("fix this", () => {
  myTestFunction();
});

----------------------------------------

TITLE: Converting ReadableStream to Buffer using Bun
DESCRIPTION: Demonstrates the process of converting a ReadableStream to a Buffer in two steps: first converting to ArrayBuffer using Bun.readableStreamToArrayBuffer(), then creating a Buffer from that ArrayBuffer. This utility is part of Bun's stream conversion functions.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const arrBuf = await Bun.readableStreamToArrayBuffer(stream);
const nodeBuf = Buffer.from(arrBuf);

----------------------------------------

TITLE: JSON Import and Bundling Example
DESCRIPTION: Shows how JSON files are imported and bundled, with input and output examples.

LANGUAGE: json
CODE:
{
  "name": "John Doe",
  "age": 35,
  "email": "johndoe@example.com"
}

LANGUAGE: javascript
CODE:
export default {
  name: "John Doe",
  age: 35,
  email: "johndoe@example.com"
}

----------------------------------------

TITLE: Uninstalling Bun on macOS/Linux
DESCRIPTION: This command removes Bun from macOS, Linux, and WSL systems.

LANGUAGE: bash
CODE:
$ rm -rf ~/.bun # for macOS, Linux, and WSL

----------------------------------------

TITLE: Writing ReadableStream to File using Bun.write()
DESCRIPTION: This code snippet shows how to write a ReadableStream to a file using Bun's file I/O API. It creates a Response from the stream and uses Bun.write() to save it to the specified path.

LANGUAGE: typescript
CODE:
const stream: ReadableStream = ...;
const path = "./file.txt";
const response = new Response(stream);

await Bun.write(path, response);

----------------------------------------

TITLE: Configuring JSX Handling in Bun
DESCRIPTION: Sets up how Bun handles JSX, including the JSX factory, fragment, and import source.

LANGUAGE: toml
CODE:
jsx = "react"
jsxFactory = "h"
jsxFragment = "Fragment"
jsxImportSource = "react"

----------------------------------------

TITLE: Creating Package Tarball with bun pm pack
DESCRIPTION: Creates a tarball of the current workspace with options for dry-run, destination, filename, script handling, and compression level configuration.

LANGUAGE: bash
CODE:
$ bun pm pack

----------------------------------------

TITLE: Converting ReadableStream to ArrayBuffer in Bun
DESCRIPTION: Demonstrates the usage of Bun.readableStreamToArrayBuffer() utility function to convert a ReadableStream instance into an ArrayBuffer. This async operation allows for efficient handling of stream data in binary format.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const buf = await Bun.readableStreamToArrayBuffer(stream);

----------------------------------------

TITLE: Reading Promise Results with Bun.peek() in TypeScript
DESCRIPTION: Shows how to use Bun.peek() to read a promise's result without await or .then in TypeScript.

LANGUAGE: typescript
CODE:
import { peek } from "bun";

const promise = Promise.resolve("hi");

// no await!
const result = peek(promise);
console.log(result); // "hi"

----------------------------------------

TITLE: Child Process IPC Communication in Bun
DESCRIPTION: This snippet shows how a child process can send messages to its parent and receive messages from it using process.send() and process.on("message") respectively.

LANGUAGE: typescript
CODE:
process.send("Hello from child as string");
process.send({ message: "Hello from child as object" });

process.on("message", (message) => {
  // print message from parent
  console.log(message);
});

----------------------------------------

TITLE: Running Parsed Command-Line Arguments Example in Bun (Shell)
DESCRIPTION: This shell command demonstrates running the Bun script that uses util.parseArgs to parse command-line arguments. It shows the expected output format of the parsed arguments.

LANGUAGE: shell
CODE:
$ bun run cli.ts --flag1 --flag2 value
{
  flag1: true,
  flag2: "value",
}
[ "/path/to/bun", "/path/to/cli.ts" ]

----------------------------------------

TITLE: Creating a ReadableStream in TypeScript
DESCRIPTION: This snippet demonstrates how to create a simple ReadableStream that enqueues two chunks of data and then closes.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue("hello");
    controller.enqueue("world");
    controller.close();
  },
});

----------------------------------------

TITLE: Closing a FileSink Writer in TypeScript
DESCRIPTION: This example demonstrates how to properly close a FileSink writer using the .end() method. This ensures that any remaining data in the buffer is flushed to disk and the file is closed.

LANGUAGE: typescript
CODE:
writer.end();

----------------------------------------

TITLE: Conditional Testing with test.if in Bun
DESCRIPTION: This snippet shows how to use 'test.if' for conditional test execution. Tests will only run if the specified condition is truthy, useful for platform-specific tests.

LANGUAGE: typescript
CODE:
test.if(Math.random() > 0.5)("runs half the time", () => {
  // ...
});

const macOS = process.arch === "darwin";
test.if(macOS)("runs on macOS", () => {
  // runs if macOS
});

----------------------------------------

TITLE: Converting Absolute Path to File URL using Bun.pathToFileURL() in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.pathToFileURL() function to convert an absolute file path to a file:// URL. The function takes a string representing an absolute path and returns a URL string prefixed with 'file://'.

LANGUAGE: typescript
CODE:
Bun.pathToFileURL("/path/to/file.txt");
// => "file:///path/to/file.txt"

----------------------------------------

TITLE: Appending File Content with Encoding Specification
DESCRIPTION: Demonstrates appending data to a file while specifying the UTF-8 encoding using the callback API.

LANGUAGE: javascript
CODE:
import { appendFile } from "node:fs";

appendFile("message.txt", "data to append", "utf8", callback);

----------------------------------------

TITLE: Writing Fetched Response to File using Bun.write()
DESCRIPTION: This snippet demonstrates how to fetch a response from a URL and write it to a file using Bun.write(). It uses the fast Bun.write() API to efficiently write data to disk. The function takes a destination path and the data to write as arguments.

LANGUAGE: typescript
CODE:
const result = await fetch("https://bun.sh");
const path = "./file.txt";
await Bun.write(path, result);

----------------------------------------

TITLE: Installing Dependencies for Bun Development on macOS
DESCRIPTION: Uses Homebrew to install the required dependencies for building Bun on macOS.

LANGUAGE: bash
CODE:
$ brew install automake ccache cmake coreutils gnu-sed go icu4c libiconv libtool ninja pkg-config rust ruby

----------------------------------------

TITLE: Adding Git Dependencies with Bun
DESCRIPTION: Demonstrates various ways to add dependencies from Git repositories, including public and private repositories with different protocols.

LANGUAGE: bash
CODE:
$ bun add git@github.com:moment/moment.git

----------------------------------------

TITLE: Creating a Mock Function with Arguments in Bun Test
DESCRIPTION: Shows how to create a mock function that accepts arguments. This mock function multiplies a given number by a random value.

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());

----------------------------------------

TITLE: GZIP Compression with Bun.gzipSync() in TypeScript
DESCRIPTION: Shows how to compress a Uint8Array using zlib's GZIP algorithm with Bun.gzipSync() in TypeScript.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello".repeat(100)); // Buffer extends Uint8Array
const compressed = Bun.gzipSync(buf);

buf; // => Uint8Array(500)
compressed; // => Uint8Array(30)

----------------------------------------

TITLE: Capturing Shell Command Output as Text in TypeScript
DESCRIPTION: Shows how to run a shell command and capture its output as text using the text() method. This example lists files in the current directory.

LANGUAGE: typescript
CODE:
import { $ } from "bun";

const output = await $`ls -l`.text();
console.log(output);

----------------------------------------

TITLE: Working with Uint8Array Subsets in TypeScript
DESCRIPTION: This snippet shows how to create a Uint8Array that views a subset of an ArrayBuffer. It demonstrates the use of 'byteOffset' and 'byteLength' properties to indicate the subset of data being viewed.

LANGUAGE: typescript
CODE:
const arr = new Uint8Array(64, 16, 32);
arr.buffer; // => ArrayBuffer(64)
arr.byteOffset; // => 16
arr.byteLength; // => 32

----------------------------------------

TITLE: Converting ReadableStream to Array using Bun
DESCRIPTION: Demonstrates the usage of Bun.readableStreamToArray utility function to convert a ReadableStream into an array of chunks. This function provides a convenient way to collect all data from a stream into a single array structure.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream();
const str = await Bun.readableStreamToArray(stream);

----------------------------------------

TITLE: Installing Sentry SDK for Bun
DESCRIPTION: Command to install the Sentry Bun SDK package using Bun package manager

LANGUAGE: sh
CODE:
$ bun add @sentry/bun

----------------------------------------

TITLE: Writing a Snapshot Test in TypeScript using Bun
DESCRIPTION: This snippet shows how to write a basic snapshot test using Bun's testing framework. It imports the necessary functions from 'bun:test' and uses the toMatchSnapshot() matcher to create a snapshot.

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

test("snap", () => {
  expect("foo").toMatchSnapshot();
});

----------------------------------------

TITLE: Processing Shell Command Output Line by Line in TypeScript
DESCRIPTION: Demonstrates how to iterate over each line of a shell command's output using the lines() method. This can be useful for processing large outputs or implementing custom filtering.

LANGUAGE: typescript
CODE:
import { $ } from "bun";

for await (const line of $`ls -l`.lines()) {
  console.log(line);
}

----------------------------------------

TITLE: Uninstalling Bun on Windows
DESCRIPTION: This PowerShell command uninstalls Bun from Windows systems.

LANGUAGE: powershell
CODE:
> powershell -c ~\.bun\uninstall.ps1

----------------------------------------

TITLE: Enabling Hot Reload in Bun
DESCRIPTION: Command to run a TypeScript file with hot reloading enabled. When any module or file changes, Bun automatically re-runs the file.

LANGUAGE: sh
CODE:
$ bun --hot run index.ts

----------------------------------------

TITLE: Running WebAssembly with Bun
DESCRIPTION: Example of executing WebAssembly (WASM) files using Bun's experimental WASI support. Shows both direct .wasm execution and alternative file extensions.

LANGUAGE: bash
CODE:
$ bun ./my-wasm-app.wasm
# if the filename doesn't end with ".wasm"
$ bun run ./my-wasm-app.whatever

----------------------------------------

TITLE: Unlinking Local Package with Bun CLI
DESCRIPTION: Example showing how to unlink a local package using the bun unlink command from the package's root directory. The command removes local package registrations previously created with bun link.

LANGUAGE: bash
CODE:
$ cd /path/to/cool-pkg
$ bun unlink
bun unlink v1.x (7416672e)

----------------------------------------

TITLE: Running Scripts in Specific Workspaces with --filter in Bun
DESCRIPTION: Example of using the --filter flag to run scripts in specific packages within a Bun workspace.

LANGUAGE: bash
CODE:
# in src/bar: runs myscript in src/foo, no need to cd!
bun run --filter foo myscript

----------------------------------------

TITLE: Running Different File Types with Bun
DESCRIPTION: Demonstrates how to execute different file types using the Bun runtime, including JavaScript, JSX, TypeScript, and TSX files.

LANGUAGE: bash
CODE:
$ bun index.js
$ bun index.jsx
$ bun index.ts
$ bun index.tsx

----------------------------------------

TITLE: Adding Express Library to Bun Project
DESCRIPTION: This shell command adds the Express library to the Bun project using Bun's package manager.

LANGUAGE: sh
CODE:
$ bun add express

----------------------------------------

TITLE: Using Bun.sleep for Millisecond Delay
DESCRIPTION: Demonstrates how to use Bun.sleep to pause execution for a specified number of milliseconds. The example shows waiting for 1 second using an async/await pattern.

LANGUAGE: typescript
CODE:
// sleep for 1 second
await Bun.sleep(1000);

----------------------------------------

TITLE: Configuring Custom Root CAs for Bun HTTP Server
DESCRIPTION: This snippet demonstrates how to override the default list of trusted root CAs in a Bun HTTP server's TLS configuration. It shows how to specify custom CA certificates using the 'ca' property.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  fetch: request => new Response("Welcome to Bun!"),
  tls: {
    cert: Bun.file("cert.pem"),
    key: Bun.file("key.pem"),
    ca: [Bun.file("ca1.pem"), Bun.file("ca2.pem")],
  },
});

----------------------------------------

TITLE: Sending Various Data Types via IPC in Bun
DESCRIPTION: This snippet demonstrates sending different types of data (string and object) from a child process to its parent using process.send(). It showcases the serialization capabilities of the IPC channel.

LANGUAGE: typescript
CODE:
// send a string
process.send("Hello from child as string");

// send an object
process.send({ message: "Hello from child as object" });

----------------------------------------

TITLE: Installing EdgeDB on Linux/macOS
DESCRIPTION: Command to install EdgeDB on Linux or macOS systems using curl.

LANGUAGE: sh
CODE:
$ curl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh

----------------------------------------

TITLE: Initializing Remix Project with Bun
DESCRIPTION: Creates a new Remix project using the 'create-remix' command with Bun. The process includes selecting a directory, using the basic template, initializing git, and installing dependencies.

LANGUAGE: sh
CODE:
$ bun create remix

 remix   v1.19.3 💿 Let's build a better website...

   dir   Where should we create your new project?
         ./my-app

      ◼  Using basic template See https://remix.run/docs/en/main/guides/templates#templates for more
      ✔  Template copied

   git   Initialize a new git repository?
         Yes

  deps   Install dependencies with bun?
         Yes

      ✔  Dependencies installed

      ✔  Git initialized

  done   That's it!

         Enter your project directory using cd ./my-app
         Check out README.md for development and deploy instructions.

----------------------------------------

TITLE: Reading Input Lines with console AsyncIterable in TypeScript
DESCRIPTION: This snippet demonstrates how to use the console object as an AsyncIterable to read input lines in a Bun environment. It uses a for-await loop to iterate over input lines and log them.

LANGUAGE: typescript
CODE:
for await (const line of console) {
  console.log(line);
}

----------------------------------------

TITLE: Setting Timezone via Environment Variable
DESCRIPTION: Shows how to set timezone using the TZ environment variable in the command line.

LANGUAGE: bash
CODE:
TZ=America/Los_Angeles bun test

----------------------------------------

TITLE: Importing CSS Modules in TSX with Bun
DESCRIPTION: Shows how to import CSS module files into a TSX file and use the scoped class names in React components.

LANGUAGE: tsx
CODE:
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

export default function App() {
  return (
    <>
      <button className={styles.button}>Red button!</button>
      <button className={otherStyles.button}>Blue button!</button>
    </>
  );
}

----------------------------------------

TITLE: Character Set Matching with []
DESCRIPTION: Examples of using character sets and ranges in glob patterns.

LANGUAGE: typescript
CODE:
const glob = new Glob("ba[rz].ts");
glob.match("bar.ts"); // => true
glob.match("baz.ts"); // => true
glob.match("bat.ts"); // => false

----------------------------------------

TITLE: Running Scripts with --filter in Bun
DESCRIPTION: Example of using the --filter flag to run scripts in multiple packages simultaneously in a Bun monorepo.

LANGUAGE: bash
CODE:
bun --filter '*' dev

----------------------------------------

TITLE: Using Bun.main for Script Execution Detection in TypeScript
DESCRIPTION: Demonstrates how to use Bun.main to determine if a script is being directly executed or imported.

LANGUAGE: typescript
CODE:
if (import.meta.path === Bun.main) {
  // this script is being directly executed
} else {
  // this file is being imported from another script
}

----------------------------------------

TITLE: Extracting Links from a Webpage using Bun's HTMLRewriter in TypeScript
DESCRIPTION: This function uses Bun's HTMLRewriter API to extract all links from a given webpage URL. It creates a Set to store unique links and uses the HTMLRewriter to process the 'a' elements with 'href' attributes.

LANGUAGE: typescript
CODE:
async function extractLinks(url: string) {
  const links = new Set<string>();
  const response = await fetch(url);

  const rewriter = new HTMLRewriter().on("a[href]", {
    element(el) {
      const href = el.getAttribute("href");
      if (href) {
        links.add(href);
      }
    },
  });

  // Wait for the response to be processed
  await rewriter.transform(response).blob();
  console.log([...links]); // ["https://bun.sh", "/docs", ...]
}

// Extract all links from the Bun website
await extractLinks("https://bun.sh");

----------------------------------------

TITLE: Reading stdin as chunks using Bun.stdin.stream()
DESCRIPTION: Demonstrates how to read from stdin as chunks using Bun.stdin.stream(). This approach is useful for handling large inputs that are piped into the process, though chunks aren't guaranteed to be split line-by-line.

LANGUAGE: typescript
CODE:
for await (const chunk of Bun.stdin.stream()) {
  // chunk is Uint8Array
  // this converts it to text (assumes ASCII encoding)
  const chunkText = Buffer.from(chunk).toString();
  console.log(`Chunk: ${chunkText}`);
}

----------------------------------------

TITLE: Hot Reload Basic Usage
DESCRIPTION: Demonstration of hot reload functionality with a counter example

LANGUAGE: bash
CODE:
$ bun --hot server.ts

LANGUAGE: typescript
CODE:
declare global {
  var count: number;
}

globalThis.count ??= 0;
console.log(`Reloaded ${globalThis.count} times`);
globalThis.count++;

setInterval(function () {}, 1000000);

----------------------------------------

TITLE: TLS Configuration for TCP Server
DESCRIPTION: Demonstrates how to enable TLS for a TCP server by providing key and certificate files.

LANGUAGE: typescript
CODE:
Bun.listen({
  hostname: "localhost",
  port: 8080,
  socket: {
    data(socket, data) {},
  },
  tls: {
    key: Bun.file("./key.pem"),
    cert: Bun.file("./cert.pem"),
  },
});

----------------------------------------

TITLE: Querying data from the database with Drizzle ORM
DESCRIPTION: Demonstrates how to query the 'authors' table and display the results using Drizzle ORM.

LANGUAGE: ts
CODE:
import * as schema from "./schema";
import { db } from "./db";

const result = await db.select().from(schema.authors);
console.log(result);

----------------------------------------

TITLE: Initializing Astro Project with Bun
DESCRIPTION: Creates a new Astro project using Bun's create command. The interactive setup process includes configuring TypeScript, installing dependencies, and initializing git repository.

LANGUAGE: sh
CODE:
$ bun create astro
╭─────╮  Houston:
│ ◠ ◡ ◠  We're glad to have you on board.
╰─────╯

 astro   v3.1.4 Launch sequence initiated.

   dir   Where should we create your new project?
         ./fumbling-field

  tmpl   How would you like to start your new project?
         Use blog template
      ✔  Template copied

  deps   Install dependencies?
         Yes
      ✔  Dependencies installed

    ts   Do you plan to write TypeScript?
         Yes

   use   How strict should TypeScript be?
         Strict
      ✔  TypeScript customized

   git   Initialize a new git repository?
         Yes
      ✔  Git initialized

  next   Liftoff confirmed. Explore your project!

         Enter your project directory using cd ./fumbling-field
         Run `bun run dev` to start the dev server. CTRL+C to stop.
         Add frameworks like react or tailwind using astro add.

         Stuck? Join us at https://astro.build/chat

╭─────╮  Houston:
│ ◠ ◡ ◠  Good luck out there, astronaut! 🚀
╰─────╯

----------------------------------------

TITLE: Implementing an Addition Calculator using console AsyncIterable in TypeScript
DESCRIPTION: This snippet showcases a practical application of using console as an AsyncIterable. It implements an interactive addition calculator that continuously reads input numbers and updates a running total.

LANGUAGE: typescript
CODE:
console.log(`Let's add some numbers!`);
console.write(`Count: 0\n> `);

let count = 0;
for await (const line of console) {
  count += Number(line);
  console.write(`Count: ${count}\n> `);
}

----------------------------------------

TITLE: Manually Regenerating Prisma Client
DESCRIPTION: Shows how to manually regenerate the Prisma client using the Prisma CLI with Bun.

LANGUAGE: bash
CODE:
$ bunx prisma generate

----------------------------------------

TITLE: TypeScript CSS Import Example
DESCRIPTION: Example of importing CSS files in TypeScript modules

LANGUAGE: typescript
CODE:
import "./styles.css";
import "./more-styles.css";

----------------------------------------

TITLE: Deep Object Comparison with Bun.deepEquals() in TypeScript
DESCRIPTION: Shows how to use Bun.deepEquals() for recursive object comparison in TypeScript.

LANGUAGE: typescript
CODE:
const foo = { a: 1, b: 2, c: { d: 3 } };

// true
Bun.deepEquals(foo, { a: 1, b: 2, c: { d: 3 } });

// false
Bun.deepEquals(foo, { a: 1, b: 2, c: { d: 4 } });

----------------------------------------

TITLE: Verifying MSVC Command Line Availability
DESCRIPTION: Checks if MSVC command line tools are available in the current environment.

LANGUAGE: powershell
CODE:
Get-Command mt

----------------------------------------

TITLE: Estimating Object Memory Usage with estimateShallowMemoryUsageOf in JavaScript
DESCRIPTION: Demonstrates how to use estimateShallowMemoryUsageOf from the bun:jsc module to estimate the shallow memory usage of objects in JavaScript.

LANGUAGE: javascript
CODE:
import { estimateShallowMemoryUsageOf } from "bun:jsc";

const obj = { foo: "bar" };
const usage = estimateShallowMemoryUsageOf(obj);
console.log(usage); // => 16

const buffer = Buffer.alloc(1024 * 1024);
estimateShallowMemoryUsageOf(buffer);
// => 1048624

const req = new Request("https://bun.sh");
estimateShallowMemoryUsageOf(req);
// => 167

const array = Array(1024).fill({ a: 1 });
// Arrays are usually not stored contiguously in memory, so this will not return a useful value (which isn't a bug).
estimateShallowMemoryUsageOf(array);
// => 16

----------------------------------------

TITLE: UDP Backpressure Handling in Bun
DESCRIPTION: Shows how to handle backpressure in UDP communications using the drain socket handler.

LANGUAGE: typescript
CODE:
const socket = await Bun.udpSocket({
  socket: {
    drain(socket) {
      // continue sending data
    }
  }
});

----------------------------------------

TITLE: Setting Up TypeScript Declarations
DESCRIPTION: Configure TypeScript declaration merging for Testing Library matcher types

LANGUAGE: typescript
CODE:
import { TestingLibraryMatchers } from '@testing-library/jest-dom/matchers';
import { Matchers, AsymmetricMatchers } from 'bun:test';

declare module 'bun:test' {
  interface Matchers<T>
    extends TestingLibraryMatchers<typeof expect.stringContaining, T> {}
  interface AsymmetricMatchers extends TestingLibraryMatchers {}
}

----------------------------------------

TITLE: Accessing Environment Variables via Bun.env
DESCRIPTION: Shows how to access environment variables using Bun's own env interface, which is an alias of process.env.

LANGUAGE: typescript
CODE:
Bun.env.API_TOKEN; // => "secret"

----------------------------------------

TITLE: Writing a DOM Test with Bun and Happy DOM in TypeScript
DESCRIPTION: Example TypeScript test using Bun's test runner and Happy DOM to test DOM manipulation.

LANGUAGE: ts
CODE:
import { test, expect } from "bun:test";

test("set button text", () => {
  document.body.innerHTML = `<button>My button</button>`;
  const button = document.querySelector("button");
  expect(button?.innerText).toEqual("My button");
});

----------------------------------------

TITLE: Sending UDP Datagram in Bun
DESCRIPTION: Shows how to send a UDP datagram to a specific port and IP address.

LANGUAGE: typescript
CODE:
socket.send("Hello, world!", 41234, "127.0.0.1");

----------------------------------------

TITLE: Configuring Test Runner Root Directory in Bun
DESCRIPTION: Sets the root directory for running tests in Bun.

LANGUAGE: toml
CODE:
[test]
root = "./__tests__"

----------------------------------------

TITLE: Creating Blob with Specified MIME Type in TypeScript
DESCRIPTION: This example shows how to create a Blob from an ArrayBuffer while specifying its MIME type. It sets the type to 'application/octet-stream' and demonstrates how to access the type property of the resulting Blob.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(64);
const blob = new Blob([buf], { type: "application/octet-stream" });
blob.type; // => "application/octet-stream"

----------------------------------------

TITLE: Managing Package Cache
DESCRIPTION: Commands for viewing and clearing Bun's global module cache.

LANGUAGE: bash
CODE:
$ bun pm cache
$ bun pm cache rm

----------------------------------------

TITLE: Text File Import Example
DESCRIPTION: Shows how to import and bundle text files, including HTML files as text.

LANGUAGE: typescript
CODE:
import contents from "./file.txt";
console.log(contents); // => "Hello, world!"

// To import an html file as text
// The "type' attribute can be used to override the default loader.
import html from "./index.html" with { type: "text" };

----------------------------------------

TITLE: ReadableStream Creation and Usage
DESCRIPTION: Demonstrates creating and consuming ReadableStreams with both basic and chunked implementations.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue("hello");
    controller.enqueue("world");
    controller.close();
  },
});

for await (const chunk of stream) {
  console.log(chunk);
}

----------------------------------------

TITLE: Creating Project from GitHub Repository
DESCRIPTION: Commands to create projects from GitHub repositories.

LANGUAGE: bash
CODE:
$ bun create <user>/<repo>
$ bun create github.com/<user>/<repo>

----------------------------------------

TITLE: Building SvelteKit for Production with Bun
DESCRIPTION: Shows the production build process using Bun, including Vite bundling and SSR compilation. Demonstrates the complete build output and next steps.

LANGUAGE: sh
CODE:
$ bun --bun run build
  $ vite build
  vite v5.4.10 building SSR bundle for production...
  "confetti" is imported from external module "@neoconfetti/svelte" but never used in "src/routes/sverdle/+page.svelte".
  ✓ 130 modules transformed.
  vite v5.4.10 building for production...
  ✓ 148 modules transformed.
  ...
  ✓ built in 231ms
  ...
  ✓ built in 899ms
  
  Run npm run preview to preview your production build locally.
  
  > Using svelte-adapter-bun
    ✔ Start server with: bun ./build/index.js
    ✔ done

----------------------------------------

TITLE: Checking Outdated Dependencies with Bun CLI
DESCRIPTION: Use the 'bun outdated' command to display a table of dependencies with newer versions available. The output shows current, update, and latest versions for each package.

LANGUAGE: bash
CODE:
bun outdated

----------------------------------------

TITLE: Setting Proxy via Environment Variables
DESCRIPTION: Shows how to set proxy configuration using environment variables when running a Bun application. This method applies the proxy settings globally to all requests.

LANGUAGE: shell
CODE:
HTTPS_PROXY=https://username:password@proxy.example.com:8080 bun run index.ts

----------------------------------------

TITLE: Installing EdgeDB client and code generation tools
DESCRIPTION: Commands to install EdgeDB JavaScript client, code generation CLI, and create a seed file.

LANGUAGE: sh
CODE:
$ bun add edgedb
$ bun add -D @edgedb/generate
$ touch seed.ts

----------------------------------------

TITLE: DNS Cache Statistics in Bun
DESCRIPTION: Shows how to retrieve DNS cache statistics using the experimental getCacheStats API.

LANGUAGE: typescript
CODE:
import {dns} from "bun";

const stats = dns.getCacheStats();
console.log(stats);
// => { cacheHitsCompleted: 0, cacheHitsInflight: 0, cacheMisses: 0, size: 0, errors: 0, totalCount: 0 }

----------------------------------------

TITLE: Configuring Package Installation Options in Bun
DESCRIPTION: Sets various options for package installation behavior in Bun, including handling of optional, dev, and peer dependencies.

LANGUAGE: toml
CODE:
[install]
optional = true
dev = true
peer = true
production = false
exact = false

----------------------------------------

TITLE: HTML Template Structure
DESCRIPTION: Example HTML template showing the structure before and after Bun's processing, including script and style imports.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <title>Home</title>
    <link rel="stylesheet" href="./reset.css" />
    <link rel="stylesheet" href="./styles.css" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="./sentry-and-preloads.ts"></script>
    <script type="module" src="./my-app.tsx"></script>
  </body>
</html>

----------------------------------------

TITLE: Setting Timezone Programmatically in TypeScript
DESCRIPTION: Shows how to programmatically set the timezone by modifying the TZ environment variable in Bun runtime.

LANGUAGE: typescript
CODE:
process.env.TZ = "America/New_York";

----------------------------------------

TITLE: Running Development Server
DESCRIPTION: Start the development server using the updated npm script.

LANGUAGE: bash
CODE:
bun run dev

----------------------------------------

TITLE: JSON and TOML Import Example
DESCRIPTION: Shows how to import JSON and TOML files directly as JavaScript objects in TypeScript.

LANGUAGE: typescript
CODE:
import pkg from "./package.json";
import data from "./data.toml";

----------------------------------------

TITLE: Seeding Data into SQLite Database with Drizzle ORM in Bun
DESCRIPTION: Script to insert sample movie data into the 'movies' table using Drizzle ORM's insert method.

LANGUAGE: ts
CODE:
import { db } from "./db";
import * as schema from "./schema";

await db.insert(schema.movies).values([
  {
    title: "The Matrix",
    releaseYear: 1999,
  },
  {
    title: "The Matrix Reloaded",
    releaseYear: 2003,
  },
  {
    title: "The Matrix Revolutions",
    releaseYear: 2003,
  },
]);

console.log(`Seeding complete.`);

----------------------------------------

TITLE: Bundling a File with Macros Using Bun
DESCRIPTION: Demonstrates how to bundle a file containing macros using the 'bun build' command. The output shows the macro being replaced with its execution result.

LANGUAGE: bash
CODE:
$ bun build ./cli.tsx
console.log(`Your random number is ${0.6805550949689833}`);

----------------------------------------

TITLE: Single Page Application HTML Template
DESCRIPTION: HTML template structure for a Single Page Application with React support

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <title>My SPA</title>
    <script src="./app.tsx" type="module"></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

----------------------------------------

TITLE: Implementing Single Failure Bail with Bun Test Runner
DESCRIPTION: Shows how to use the --bail flag to stop test execution immediately after the first test failure. This is particularly useful in CI/CD environments where early failure detection is desired.

LANGUAGE: sh
CODE:
$ bun test --bail

----------------------------------------

TITLE: GitHub Actions Workflow Configuration
DESCRIPTION: YAML configuration for setting up Bun testing in GitHub Actions CI/CD pipeline

LANGUAGE: yaml
CODE:
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install
      - name: Run tests
        run: bun test

----------------------------------------

TITLE: Setting Custom Date in Bun Test
DESCRIPTION: Demonstrates how to set a specific date (January 1, 1999) in a test case and verify the system time was correctly modified using assertions.

LANGUAGE: typescript
CODE:
import { test, expect, setSystemTime } from "bun:test";

test("party like it's 1999", () => {
  const date = new Date("1999-01-01T00:00:00.000Z");
  setSystemTime(date); // it's now January 1, 1999

  const now = new Date();
  expect(now.getFullYear()).toBe(1999);
  expect(now.getMonth()).toBe(0);
  expect(now.getDate()).toBe(1);
});

----------------------------------------

TITLE: Updating Snapshots via Command Line
DESCRIPTION: Demonstrates how to update snapshots using the --update-snapshots flag with the bun test command, showing the command output including test results and snapshot status.

LANGUAGE: shell
CODE:
$ bun test --update-snapshots
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [0.86ms]

 1 pass
 0 fail
 snapshots: +1 added # the snapshot was regenerated
 1 expect() calls
Ran 1 tests across 1 files. [102.00ms]

----------------------------------------

TITLE: Locating Executables with Bun.which() in TypeScript
DESCRIPTION: Shows how to use Bun.which() to find the path of an executable in TypeScript.

LANGUAGE: typescript
CODE:
const ls = Bun.which("ls");
console.log(ls); // "/usr/bin/ls"

----------------------------------------

TITLE: Running TypeScript Files with Bun
DESCRIPTION: Demonstrates how to execute different file types (JS, JSX, TS, TSX) using the Bun runtime. Bun automatically transpiles TypeScript files without performing type checking.

LANGUAGE: bash
CODE:
$ bun index.js
$ bun index.jsx
$ bun index.ts
$ bun index.tsx

----------------------------------------

TITLE: Running Qwik Development Server with Bun
DESCRIPTION: This snippet shows how to start the Qwik development server using the 'bun run dev' command. It displays the server startup message and provides local access information.

LANGUAGE: sh
CODE:
$ bun run dev
  $ vite--mode ssr

  VITE v4.4.7  ready in 1190 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h to show help

----------------------------------------

TITLE: C Function Returning a String using N-API
DESCRIPTION: This C function demonstrates how to create and return a string to JavaScript using N-API functions. It creates a UTF-8 string and returns it as a `napi_value`.

LANGUAGE: c
CODE:
#include <node/node_api.h>

napi_value hello(napi_env env) {
  napi_value result;
  napi_create_string_utf8(env, "Hello, Napi!", NAPI_AUTO_LENGTH, &result);
  return result;
}

----------------------------------------

TITLE: Adding Yarn Lockfile Support
DESCRIPTION: Configuration options for generating a Yarn lockfile alongside bun.lock, shown both as CLI command and bunfig.toml configuration.

LANGUAGE: bash
CODE:
$ bun install --yarn

LANGUAGE: toml
CODE:
[install.lockfile]
# whether to save a non-Bun lockfile alongside bun.lock
# only "yarn" is supported
print = "yarn"

----------------------------------------

TITLE: Element Handler Operations in HTMLRewriter
DESCRIPTION: Comprehensive example of element handler operations including attribute manipulation, content modification, and position manipulation.

LANGUAGE: typescript
CODE:
rewriter.on("div", {
  element(el) {
    el.setAttribute("class", "new-class").setAttribute("data-id", "123");
    const classAttr = el.getAttribute("class");
    const hasId = el.hasAttribute("id");
    el.removeAttribute("class");
    el.setInnerContent("New content");
    el.setInnerContent("<p>HTML content</p>", { html: true });
    el.before("Content before")
      .after("Content after")
      .prepend("First child")
      .append("Last child");
  }
});

----------------------------------------

TITLE: Cloning GitHub Repository for Bun Application
DESCRIPTION: These shell commands clone a newly created GitHub repository named 'myapp' and navigate into the project directory.

LANGUAGE: sh
CODE:
$ git clone git@github.com:my-github-username/myapp.git
$ cd myapp

----------------------------------------

TITLE: Modifying Logging Verbosity in Bun Install
DESCRIPTION: Commands to adjust the logging verbosity when installing packages with Bun.

LANGUAGE: bash
CODE:
$ bun install --verbose # debug logging
$ bun install --silent  # no logging

----------------------------------------

TITLE: Configuring Argon2id Hashing Parameters in Bun
DESCRIPTION: This example shows how to customize the Argon2id hashing parameters using Bun.password.hash(). It demonstrates setting the memory cost and time cost for the hashing process.

LANGUAGE: typescript
CODE:
const password = "super-secure-pa$$word";

// use argon2 (default)
const argonHash = await Bun.password.hash(password, {
  memoryCost: 4, // memory usage in kibibytes
  timeCost: 3, // the number of iterations
});

----------------------------------------

TITLE: Importing and Using 'bun' Module Types in TypeScript
DESCRIPTION: Shows how to import and use types, interfaces, and functions declared in the 'bun' module. This snippet demonstrates usage through direct import from 'bun'.

LANGUAGE: typescript
CODE:
import { type MyInterface, type MyType, myFunction } from "bun";

const myInterface: MyInterface = {};
const myType: MyType = "cool";
myFunction();

----------------------------------------

TITLE: Detecting Bun Execution using Process Versions in TypeScript
DESCRIPTION: This snippet demonstrates an alternative method to detect Bun execution by checking 'process.versions'. This approach avoids type errors in TypeScript environments where 'bun-types' is not globally installed.

LANGUAGE: typescript
CODE:
if (process.versions.bun) {
  // this code will only run when the file is run with Bun
}

----------------------------------------

TITLE: Synchronous Sleep Function in TypeScript
DESCRIPTION: Demonstrates the usage of Bun.sleepSync() for blocking synchronous sleep in TypeScript.

LANGUAGE: typescript
CODE:
console.log("hello");
Bun.sleepSync(1000); // blocks thread for one second
console.log("hello one second later!");

----------------------------------------

TITLE: Setting Up Bun in GitHub Actions Workflow
DESCRIPTION: YAML configuration for a GitHub Actions workflow to set up Bun and use it for installing dependencies and building an app.

LANGUAGE: yaml
CODE:
name: bun-types
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install
      - name: Build app
        run: bun run build

----------------------------------------

TITLE: Executing a simple query with Drizzle ORM
DESCRIPTION: Demonstrates how to execute a simple SQL query using Drizzle ORM and log the results.

LANGUAGE: ts
CODE:
import { db } from "./db";
import { sql } from "drizzle-orm";

const query = sql`select 'hello world' as text`;
const result = await db.execute(query);
console.log(result.rows);

----------------------------------------

TITLE: Defining a Simple Macro Function in TypeScript
DESCRIPTION: Demonstrates a basic macro function that returns a random number. This function will be executed at bundle-time when used as a macro.

LANGUAGE: typescript
CODE:
export function random() {
  return Math.random();
}

----------------------------------------

TITLE: Data Type Formatting Examples in JavaScript
DESCRIPTION: Demonstrates formatting of various JavaScript primitive and complex data types including numbers, strings, objects, arrays, and special values.

LANGUAGE: javascript
CODE:
{
  a: "",
}
Hello World!
0
-0
123
-123
123.567
-123.567
true
false
null
undefined
Infinity
-Infinity
Symbol(Symbol Description)
2000-06-27T02:24:34.304Z

----------------------------------------

TITLE: Returning a C String to JavaScript using N-API
DESCRIPTION: This example shows how to return a C string to JavaScript using N-API. It uses the `napi_env` and `napi_value` types to handle the conversion.

LANGUAGE: typescript
CODE:
import { cc } from "bun:ffi";
import source from "./hello.c" with { type: "file" };

const {
  symbols: { hello },
} = cc({
  source,
  symbols: {
    hello: {
      args: ["napi_env"],
      returns: "napi_value",
    },
  },
});

const result = hello();

----------------------------------------

TITLE: Creating Multiple Typed Array Views in TypeScript
DESCRIPTION: Demonstrates creating different types of typed array views (Uint8Array, Uint16Array, etc.) from the same underlying ArrayBuffer. Shows the versatility of ArrayBuffer data interpretation.

LANGUAGE: typescript
CODE:
const buffer = new ArrayBuffer(64);

const arr1 = new Uint8Array(buffer);
const arr2 = new Uint16Array(buffer);
const arr3 = new Uint32Array(buffer);
const arr4 = new Float32Array(buffer);
const arr5 = new Float64Array(buffer);
const arr6 = new BigInt64Array(buffer);
const arr7 = new BigUint64Array(buffer);

----------------------------------------

TITLE: Node.js Test Directory Structure Table
DESCRIPTION: Markdown table documenting the various test directories in Node.js core, their CI execution status, and their specific purposes.

LANGUAGE: markdown
CODE:
| Directory        | Runs on CI | Purpose                                                                                                       |
| ---------------- | ---------- | ------------------------------------------------------------------------------------------------------------- |
| `abort`          | Yes        | Tests that use `--abort-on-uncaught-exception` and other cases where we want to avoid generating a core file. |
| `addons`         | Yes        | Tests for [addon][] functionality along with some tests that require an addon.                                |
| `async-hooks`    | Yes        | Tests for [async\_hooks][async_hooks] functionality.                                                          |
| `benchmark`      | Yes        | Test minimal functionality of benchmarks.                                                                     |
| `cctest`         | Yes        | C++ tests that are run as part of the build process.                                                          |
| `code-cache`     | No         | Tests for a Node.js binary compiled with V8 code cache.                                                       |
| `common`         | _N/A_      | Common modules shared among many tests.[^1]                                                                   |
| `doctool`        | Yes        | Tests for the documentation generator.                                                                        |
| `es-module`      | Yes        | Test ESM module loading.                                                                                      |
| `fixtures`       | _N/A_      | Test fixtures used in various tests throughout the test suite.                                                |
| `internet`       | No         | Tests that make real outbound network connections.[^2]                                                        |
| `js-native-api`  | Yes        | Tests for Node.js-agnostic [Node-API][] functionality.                                                        |
| `known_issues`   | Yes        | Tests reproducing known issues within the system.[^3]                                                         |
| `message`        | Yes        | Tests for messages that are output for various conditions                                                     |
| `node-api`       | Yes        | Tests for Node.js-specific [Node-API][] functionality.                                                        |
| `parallel`       | Yes        | Various tests that are able to be run in parallel.                                                            |
| `pseudo-tty`     | Yes        | Tests that require stdin/stdout/stderr to be a TTY.                                                           |
| `pummel`         | No         | Various tests for various modules / system functionality operating under load.                                |
| `sequential`     | Yes        | Various tests that must not run in parallel.                                                                  |
| `testpy`         | _N/A_      | Test configuration utility used by various test suites.                                                       |
| `tick-processor` | No         | Tests for the V8 tick processor integration.[^4]                                                              |
| `v8-updates`     | No         | Tests for V8 performance integration.                                                                         |

----------------------------------------

TITLE: Configuring Trusted Dependencies in package.json
DESCRIPTION: JSON configuration to specify trusted dependencies for which lifecycle scripts are allowed to run during installation.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "version": "1.0.0",
  "trustedDependencies": ["my-trusted-package"]
}

----------------------------------------

TITLE: Configuring Bun Preload for Happy DOM in TOML
DESCRIPTION: TOML configuration to preload Happy DOM before running tests with Bun.

LANGUAGE: toml
CODE:
[test]
preload = "./happydom.ts"

----------------------------------------

TITLE: Executing Package with bunx
DESCRIPTION: Basic example of using bunx to run an npm package (cowsay) directly from the command line

LANGUAGE: bash
CODE:
$ bunx cowsay "Hello world!"

----------------------------------------

TITLE: Querying EdgeDB using TypeScript and generated query builder
DESCRIPTION: TypeScript code to query the EdgeDB database using the generated query builder.

LANGUAGE: ts
CODE:
import { createClient } from "edgedb";
import e from "./dbschema/edgeql-js";

const client = createClient();

const query = e.select(e.Movie, () => ({
  title: true,
  releaseYear: true,
}));

const results = await query.run(client);
console.log(results);

results; // { title: string, releaseYear: number | null }[]

----------------------------------------

TITLE: Getting Bun Version in TypeScript
DESCRIPTION: Retrieves the current version of Bun in semantic versioning format using the Bun.version property.

LANGUAGE: typescript
CODE:
Bun.version; // => "$BUN_LATEST_VERSION"

----------------------------------------

TITLE: Loading Node-API Module Using require() in Bun
DESCRIPTION: Demonstrates how to load a .node native module using the require() function in Bun. This is the simplest way to import Node-API modules.

LANGUAGE: javascript
CODE:
const napi = require("./my-node-module.node");

----------------------------------------

TITLE: Installing Dependencies with Frozen Lockfile
DESCRIPTION: Command to install dependencies using a frozen lockfile for reproducible installs.

LANGUAGE: bash
CODE:
$ bun install --frozen-lockfile

----------------------------------------

TITLE: PM2 Configuration File for Bun Application
DESCRIPTION: This JavaScript configuration file for PM2 specifies how to run a Bun application. It sets the application name, script, interpreter, and ensures the Bun binary is in the PATH.

LANGUAGE: javascript
CODE:
module.exports = {
  name: "app", // Name of your application
  script: "index.ts", // Entry point of your application
  interpreter: "bun", // Bun interpreter
  env: {
    PATH: `${process.env.HOME}/.bun/bin:${process.env.PATH}`, // Add "~/.bun/bin/bun" to PATH
  }
};

----------------------------------------

TITLE: Getting Directory Path with import.meta in Bun TypeScript
DESCRIPTION: Uses Bun's import.meta.dir property to retrieve the directory path of the current module file. When used in a file located at '/a/b/c.ts', it returns '/a/b' as the directory path.

LANGUAGE: typescript
CODE:
import.meta.dir; // => "/a/b"

----------------------------------------

TITLE: Declaring Module Types for 'bun' in TypeScript
DESCRIPTION: Demonstrates how to declare types, interfaces, and functions for the 'bun' module using the declare module syntax. This allows for both type declarations and runtime value definitions.

LANGUAGE: typescript
CODE:
declare module "bun" {
  // Your types go here
  interface MyInterface {
    // ...
  }

  type MyType = string | number;

  function myFunction(): void;
}

----------------------------------------

TITLE: Setting Environment Variables in CLI
DESCRIPTION: Command line approaches for setting environment variables across different platforms

LANGUAGE: sh
CODE:
FOO=helloworld bun run dev

LANGUAGE: sh
CODE:
# Using CMD
set FOO=helloworld && bun run dev

# Using PowerShell
$env:FOO="helloworld"; bun run dev

----------------------------------------

TITLE: Configuring FileSink High Water Mark in TypeScript
DESCRIPTION: Shows how to set the high water mark for a FileSink instance.

LANGUAGE: typescript
CODE:
const file = Bun.file("output.txt");
const writer = file.writer({ highWaterMark: 1024 * 1024 }); // 1MB

----------------------------------------

TITLE: Scanning Imports with Bun Transpiler
DESCRIPTION: Shows the usage of scanImports() method for faster, but slightly less accurate, import scanning. This method is optimized for performance in large files.

LANGUAGE: typescript
CODE:
const transpiler = new Bun.Transpiler({
  loader: 'tsx',
});

const code = `
import React from 'react';
import type {ReactNode} from 'react';
const val = require('./cjs.js')
import('./loader');

export const name = "hello";
`;

const result = transpiler.scanImports(code);

----------------------------------------

TITLE: Matching Routes Using Request Objects in TypeScript
DESCRIPTION: This example demonstrates how to use the FileSystemRouter with Request objects. The router uses the 'url' property of the Request to resolve the route.

LANGUAGE: typescript
CODE:
router.match(new Request("https://example.com/blog/my-cool-post"));

----------------------------------------

TITLE: Error Handling in HTMLRewriter
DESCRIPTION: Example of proper error handling when using HTMLRewriter transformations.

LANGUAGE: typescript
CODE:
try {
  const result = rewriter.transform(input);
  // Process result
} catch (error) {
  console.error("HTMLRewriter error:", error);
}

----------------------------------------

TITLE: Installing Global Packages with Bun
DESCRIPTION: Using the '--global' flag to install packages globally, typically for command-line tools. This does not modify the project's package.json.

LANGUAGE: bash
CODE:
$ bun add --global cowsay # or `bun add -g cowsay`
$ cowsay "Bun!"
 ______
< Bun! >
 ------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

----------------------------------------

TITLE: Customizing Stack Trace Output in Bun
DESCRIPTION: This TypeScript code demonstrates how to use the Error.prepareStackTrace function to customize the stack trace output, in this case returning an array of file names.

LANGUAGE: typescript
CODE:
Error.prepareStackTrace = (err, stack) => {
  return stack.map(callSite => {
    return callSite.getFileName();
  });
};

const err = new Error("Something went wrong");
console.log(err.stack);
// [ "error.js" ]

----------------------------------------

TITLE: Configuring Workspaces in package.json
DESCRIPTION: JSON configuration to set up workspaces in a project's package.json file.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "version": "1.0.0",
  "workspaces": ["packages/*"],
  "dependencies": {
    "preact": "^10.5.13"
  }
}

----------------------------------------

TITLE: Installing Bun Runtime using NPM
DESCRIPTION: Command to globally install Bun JavaScript runtime using NPM package manager.

LANGUAGE: sh
CODE:
npm install -g bun

----------------------------------------

TITLE: HTML Rewriter Plugin Example
DESCRIPTION: TypeScript implementation of a custom plugin using Bun's HTMLRewriter API

LANGUAGE: typescript
CODE:
await Bun.build({
  entrypoints: ["./index.html"],
  outdir: "./dist",
  minify: true,

  plugins: [
    {
      name: "lowercase-html-plugin",
      setup({ onLoad }) {
        const rewriter = new HTMLRewriter().on("*", {
          element(element) {
            element.tagName = element.tagName.toLowerCase();
          },
          text(element) {
            element.replace(element.text.toLowerCase());
          },
        });

        onLoad({ filter: /\.html$/ }, async args => {
          const html = await Bun.file(args.path).text();

          return {
            contents: rewriter.transform(html),
            loader: "html",
          };
        });
      },
    },
  ],
});

----------------------------------------

TITLE: Installing bun-plugin-svelte
DESCRIPTION: Command to install the Svelte plugin for Bun as a development dependency.

LANGUAGE: sh
CODE:
$ bun add -D bun-plugin-svelte

----------------------------------------

TITLE: Listing Direct Dependencies
DESCRIPTION: Displays installed direct dependencies and their versions, excluding nested dependencies.

LANGUAGE: bash
CODE:
$ bun pm ls
/path/to/project node_modules (135)
├── eslint@8.38.0
├── react@18.2.0
├── react-dom@18.2.0
├── typescript@5.0.4
└── zod@3.21.4

----------------------------------------

TITLE: Defining TypeScript Bindings
DESCRIPTION: TypeScript binding definition for the add function using the bindgen framework. Specifies argument types and return type with optional default value support.

LANGUAGE: typescript
CODE:
import { t, fn } from 'bindgen';

export const add = fn({
  args: {
    global: t.globalObject,
    a: t.i32,
    b: t.i32.default(1),
  },
  ret: t.i32,
});

----------------------------------------

TITLE: Running Next.js Dev Server with Node.js
DESCRIPTION: Starts the Next.js development server using the default Node.js runtime without the --bun flag.

LANGUAGE: sh
CODE:
$ cd my-app
$ bun run dev

----------------------------------------

TITLE: Adding Tarball Dependencies with Bun
DESCRIPTION: Using 'bun add' to install a package from a publicly hosted tarball URL instead of the package registry.

LANGUAGE: bash
CODE:
$ bun add zod@https://registry.npmjs.org/zod/-/zod-3.21.4.tgz

----------------------------------------

TITLE: Environment Variable Usage in Registry Configuration
DESCRIPTION: Demonstrates how to reference environment variables in bunfig.toml for registry authentication. Variables can be loaded from .env.local, .env.[NODE_ENV], and .env files.

LANGUAGE: toml
CODE:
[install.scopes]
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }

----------------------------------------

TITLE: Importing Modules with Extensions in TypeScript
DESCRIPTION: Illustrates that Bun supports both extensionless imports and imports with explicit file extensions in TypeScript.

LANGUAGE: typescript
CODE:
import { hello } from "./hello";
import { hello } from "./hello.ts"; // this works
import { hello } from "./hello.js"; // this also works

----------------------------------------

TITLE: Defining EdgeDB schema
DESCRIPTION: EdgeDB schema definition for a Movie type with title and releaseYear properties.

LANGUAGE: txt
CODE:
module default {
  type Movie {
    required title: str;
    releaseYear: int64;
  }
};

----------------------------------------

TITLE: Measuring Bun Process Uptime in Nanoseconds using TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.nanoseconds() function to obtain the total number of nanoseconds that the Bun process has been running. This high-precision measurement is useful for performance tracking and diagnostics.

LANGUAGE: typescript
CODE:
Bun.nanoseconds();

----------------------------------------

TITLE: Using Glob Patterns to Filter Workspaces in Bun Outdated Check
DESCRIPTION: Apply glob patterns with the --filter flag to check for outdated dependencies in multiple workspaces matching a specific pattern in a Bun monorepo.

LANGUAGE: bash
CODE:
bun outdated {e,t}* --filter='@monorepo/{types,cli}'

----------------------------------------

TITLE: Installing Bun TypeScript Declarations
DESCRIPTION: Command to install TypeScript type definitions for Bun's built-in APIs as a development dependency.

LANGUAGE: sh
CODE:
$ bun add -d @types/bun # dev dependency

----------------------------------------

TITLE: Pattern Negation with !
DESCRIPTION: Shows how to use the ! operator to negate a glob pattern match.

LANGUAGE: typescript
CODE:
const glob = new Glob("!index.ts");
glob.match("index.ts"); // => false
glob.match("foo.ts"); // => true

----------------------------------------

TITLE: Reloading systemd Daemon After Service File Changes
DESCRIPTION: Command to reload the systemd daemon after making changes to the service file. This ensures that systemd recognizes the updated configuration.

LANGUAGE: bash
CODE:
$ sudo systemctl daemon-reload

----------------------------------------

TITLE: Printing npm Username
DESCRIPTION: Displays the current npm username. Requires prior login with npm credentials.

LANGUAGE: bash
CODE:
$ bun pm whoami

----------------------------------------

TITLE: Zig Addition Function with FFI
DESCRIPTION: Implementation of an addition function in Zig with corresponding TypeScript FFI binding code.

LANGUAGE: zig
CODE:
pub export fn add(a: i32, b: i32) i32 {
  return a + b;
}

LANGUAGE: typescript
CODE:
import { dlopen, FFIType, suffix } from "bun:ffi";
const { i32 } = FFIType;

const path = `libadd.${suffix}`;

const lib = dlopen(path, {
  add: {
    args: [i32, i32],
    returns: i32,
  },
});

console.log(lib.symbols.add(1, 2));

----------------------------------------

TITLE: Running Local Package with bunx
DESCRIPTION: Basic command to execute a locally installed package using bunx

LANGUAGE: bash
CODE:
$ bunx my-cli

----------------------------------------

TITLE: Adding Workspace Dependencies
DESCRIPTION: Example of adding inter-workspace dependencies using the workspace:* syntax in package.json.

LANGUAGE: json-diff
CODE:
{
  "name": "stuff-b",
  "dependencies": {
+   "stuff-a": "workspace:*"
  }
}

----------------------------------------

TITLE: Setting System Time in Bun Tests
DESCRIPTION: Demonstrates how to set a specific system time for testing using setSystemTime in Bun's testing framework. Shows usage with beforeAll hook and date assertions.

LANGUAGE: typescript
CODE:
import { setSystemTime, beforeAll, test, expect } from "bun:test";

beforeAll(() => {
  setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
});

test("it is 2020", () => {
  expect(new Date().getFullYear()).toBe(2020);
});

----------------------------------------

TITLE: Running Next.js Dev Server with Bun Runtime
DESCRIPTION: Starts the Next.js development server using the Bun runtime environment with the --bun flag.

LANGUAGE: sh
CODE:
$ cd my-app
$ bun --bun run dev

----------------------------------------

TITLE: Test Name Pattern Filtering
DESCRIPTION: Example of filtering tests by name using the -t/--test-name-pattern flag

LANGUAGE: sh
CODE:
$ bun test -t add
bun test v$BUN_LATEST_VERSION (9c68abdb)

test.test.js:
✓ add [1.79ms]
» multiply

test2.test.js:
✓ add [2.30ms]
» multiply

test3.test.js:
✓ add [0.32ms]
» multiply

 3 pass
 3 skip
 0 fail
 3 expect() calls
Ran 6 tests across 3 files. [59.00ms]

----------------------------------------

TITLE: SQLite Database Import and Query
DESCRIPTION: Example of importing and querying a SQLite database using Bun's built-in SQLite support.

LANGUAGE: typescript
CODE:
import db from "./my.db" with { type: "sqlite" };
console.log(db.query("select * from users LIMIT 1").get());

----------------------------------------

TITLE: Filtering Outdated Dependencies by Package Names in Bun
DESCRIPTION: Check specific dependencies for updates by passing package names as positional arguments to 'bun outdated'. This example checks eslint-plugin-security and eslint-plugin-sonarjs.

LANGUAGE: bash
CODE:
bun outdated eslint-plugin-security eslint-plugin-sonarjs

----------------------------------------

TITLE: Starting Bun Application with PM2 Configuration File
DESCRIPTION: This command starts the Bun application using the PM2 configuration file, which contains all the necessary settings for running the application as a daemon.

LANGUAGE: bash
CODE:
pm2 start pm2.config.js

----------------------------------------

TITLE: Wildcard Character Matching with *
DESCRIPTION: Demonstrates using the * pattern to match multiple characters except path separators.

LANGUAGE: typescript
CODE:
const glob = new Glob("*.ts");
glob.match("index.ts"); // => true
glob.match("src/index.ts"); // => false

----------------------------------------

TITLE: Adding Exact Versions with Bun
DESCRIPTION: Using the '--exact' flag to pin dependencies to specific versions in package.json, rather than using version ranges.

LANGUAGE: bash
CODE:
$ bun add react --exact
$ bun add react -E

----------------------------------------

TITLE: Creating a BunFile Instance in TypeScript
DESCRIPTION: Demonstrates how to create a BunFile instance using Bun.file() and access its properties.

LANGUAGE: typescript
CODE:
const foo = Bun.file("foo.txt"); // relative to cwd
foo.size; // number of bytes
foo.type; // MIME type

----------------------------------------

TITLE: Installing Specific Version of Bun on Windows
DESCRIPTION: This PowerShell command installs a specific version of Bun on Windows by passing the version number to the install script.

LANGUAGE: powershell
CODE:
$ iex "& {$(irm https://bun.sh/install.ps1)} -Version $BUN_LATEST_VERSION"

----------------------------------------

TITLE: Implementing React Server-Side Rendering in Bun.js
DESCRIPTION: This JavaScript snippet shows how to perform React server-side rendering using Bun.js. It creates an HTTP server that renders a React component with the current date.

LANGUAGE: javascript
CODE:
import { renderToReadableStream } from "react-dom/server";

const dt = new Intl.DateTimeFormat();

export default {
  port: 3000,
  async fetch(request: Request) {
    return new Response(
      await renderToReadableStream(
        <html>
          <head>
            <title>Hello World</title>
          </head>
          <body>
            <h1>Hello from React!</h1>
            <p>The date is {dt.format(new Date())}</p>
          </body>
        </html>,
      ),
    );
  },
};

----------------------------------------

TITLE: Installing Packages with Yarn-Compatible Lockfile in Bun
DESCRIPTION: This command uses Bun to install packages and generate both a bun.lock file and a Yarn-compatible yarn.lock file.

LANGUAGE: sh
CODE:
$ bun install --yarn

----------------------------------------

TITLE: Accessing Environment Variables via process.env
DESCRIPTION: Demonstrates how to access environment variables using the standard Node.js process.env interface in Bun.

LANGUAGE: typescript
CODE:
process.env.API_TOKEN; // => "secret"

----------------------------------------

TITLE: Running TypeScript Script with Bun
DESCRIPTION: Executes the TypeScript script using Bun, demonstrating the creation of new users and counting them.

LANGUAGE: bash
CODE:
$ bun run index.ts
Created john-0.12802932895402364@example.com
There are 1 users in the database.
$ bun run index.ts
Created john-0.8671308799782803@example.com
There are 2 users in the database.
$ bun run index.ts
Created john-0.4465968383115295@example.com
There are 3 users in the database.

----------------------------------------

TITLE: Basic Test Runner Output Example
DESCRIPTION: Example output of running tests across multiple test files showing execution time and results

LANGUAGE: sh
CODE:
$ bun test
bun test v$BUN_LATEST_VERSION (9c68abdb)

test.test.js:
✓ add [0.87ms]
✓ multiply [0.02ms]

test2.test.js:
✓ add [0.72ms]
✓ multiply [0.01ms]

test3.test.js:
✓ add [0.54ms]
✓ multiply [0.01ms]

 6 pass
 0 fail
 6 expect() calls
Ran 6 tests across 3 files. [9.00ms]

----------------------------------------

TITLE: Defining Prisma Schema with User Model
DESCRIPTION: Adds a simple User model to the Prisma schema file.

LANGUAGE: prisma
CODE:
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

----------------------------------------

TITLE: Updating Dependencies to Latest Version Regardless of Compatibility
DESCRIPTION: This command updates dependencies to their latest versions, ignoring the version range specified in package.json. It may potentially break compatibility.

LANGUAGE: sh
CODE:
$ bun update --latest

----------------------------------------

TITLE: Configuring Bun Install with bunfig.toml
DESCRIPTION: Example bunfig.toml configuration file showing various options for package scopes, registry settings, installation preferences, and cache configuration.

LANGUAGE: toml
CODE:
[install.scopes]
"@mybigcompany" = { token = "123456", url = "https://registry.mybigcompany.com" }
mybigcompany2 = { token = "123456" }
mybigcompany3 = { token = "$npm_config_token" }
mybigcompany4 = { username = "myusername", password = "$npm_config_password", url = "https://registry.yarnpkg.com/" }
mybigcompany5 = "https://username:password@registry.yarnpkg.com/"
mybigcompany6 = "https://:$NPM_CONFIG_TOKEN@registry.yarnpkg.com/"

[install]
registry = "https://registry.yarnpkg.com/"
production = false
saveTextLockfile = false
frozenLockfile = false
dryRun = true
optional = true
dev = true
peer = true
concurrentScripts = 16
globalDir = "~/.bun/install/global"
globalBinDir = "~/.bun/bin"

[install.cache]
dir = "~/.bun/install/cache"
disable = false
disableManifest = false

[install.lockfile]
print = "yarn"
save = true

----------------------------------------

TITLE: Basic Directory Scanning with TypeScript Glob Pattern
DESCRIPTION: Demonstrates how to scan a directory recursively for TypeScript files using the Glob class.

LANGUAGE: typescript
CODE:
import { Glob } from "bun";

const glob = new Glob("**/*.ts");

// Scans the current working directory and each of its sub-directories recursively
for await (const file of glob.scan(".")) {
  console.log(file); // => "index.ts"
}

----------------------------------------

TITLE: Configuring Workspace Package Dependencies
DESCRIPTION: Example of package.json configuration for an individual workspace showing how to reference other packages in the monorepo.

LANGUAGE: json
CODE:
{
  "name": "pkg-a",
  "version": "1.0.0",
  "dependencies": {
    "pkg-b": "workspace:*"
  }
}

----------------------------------------

TITLE: Comparing Exact vs Non-Exact Versions in package.json
DESCRIPTION: Demonstrates the difference in package.json entries when using '--exact' flag versus default behavior for version specification.

LANGUAGE: jsonc
CODE:
{
  "dependencies": {
    // without --exact
    "react": "^18.2.0", // this matches >= 18.2.0 < 19.0.0

    // with --exact
    "react": "18.2.0" // this matches only 18.2.0 exactly
  }
}

----------------------------------------

TITLE: Importing Path Module with CommonJS
DESCRIPTION: Demonstrates how to import the path module using CommonJS require() syntax.

LANGUAGE: cjs
CODE:
require('path');

----------------------------------------

TITLE: Encoding and Decoding Base64 Strings using Bun Web APIs
DESCRIPTION: Shows how to convert strings to and from base64 encoding using Bun's implementation of the Web-standard atob and btoa functions. These functions are part of Bun's Web APIs compatibility layer.

LANGUAGE: typescript
CODE:
const data = "hello world";
const encoded = btoa(data); // => "aGVsbG8gd29ybGQ="
const decoded = atob(encoded); // => "hello world"

----------------------------------------

TITLE: Initializing an EdgeDB project
DESCRIPTION: Command to initialize an EdgeDB project, creating an edgedb.toml file.

LANGUAGE: sh
CODE:
$ edgedb project init

----------------------------------------

TITLE: Reinstalling Dependencies with Trusted Packages
DESCRIPTION: Command sequence for performing a clean reinstall of dependencies after adding trusted dependencies, including removing node_modules and lock file.

LANGUAGE: shell
CODE:
$ rm -rf node_modules
$ rm bun.lock
$ bun install

----------------------------------------

TITLE: Getting Current File Name Using import.meta in TypeScript
DESCRIPTION: Demonstrates how to use import.meta.file to get the name of the current file in Bun. Returns just the file name without the full path.

LANGUAGE: typescript
CODE:
import.meta.file; // => "c.ts"

----------------------------------------

TITLE: Test File Pattern Configuration
DESCRIPTION: Supported file patterns for test files that Bun will automatically detect and execute

LANGUAGE: txt
CODE:
*.test.{js|jsx|ts|tsx}
*_test.{js|jsx|ts|tsx}
*.spec.{js|jsx|ts|tsx}
*_spec.{js|jsx|ts|tsx}

----------------------------------------

TITLE: Initializing Prisma with SQLite Database
DESCRIPTION: Uses Prisma CLI with Bun to initialize the schema and migration directory with SQLite as the database provider.

LANGUAGE: bash
CODE:
$ bunx prisma init --datasource-provider sqlite

----------------------------------------

TITLE: Setting Bun Shebang
DESCRIPTION: Example of using a shebang to force script execution with Bun runtime

LANGUAGE: bash
CODE:
#!/usr/bin/env bun

----------------------------------------

TITLE: Installing React Dependency with Bun
DESCRIPTION: Command to install React as a dependency using Bun package manager.

LANGUAGE: bash
CODE:
$ bun install react

----------------------------------------

TITLE: Reading Directories Recursively in TypeScript
DESCRIPTION: Demonstrates how to recursively read directory contents using Node.js fs module in Bun.

LANGUAGE: typescript
CODE:
import { readdir } from "node:fs/promises";

// read all the files in the current directory, recursively
const files = await readdir("../", { recursive: true });

----------------------------------------

TITLE: Configuring tsconfig.json for YAML Imports
DESCRIPTION: JSON configuration to add type definitions for bun-plugin-yaml in TypeScript configuration, enabling recognition of .yaml imports.

LANGUAGE: json
CODE:
  {
    "compilerOptions": {
      "types": [
        // other packages, e.g. "bun-types",
       "bun-plugin-yaml"
      ]
    }
  }

----------------------------------------

TITLE: Measuring JavaScript Heap Statistics in Bun
DESCRIPTION: Demonstrates how to use the bun:jsc module to get heap statistics including heap size, capacity, and object counts.

LANGUAGE: typescript
CODE:
import { heapStats } from "bun:jsc";
console.log(heapStats());

----------------------------------------

TITLE: Creating and Running Hono Project with Bun CLI
DESCRIPTION: This bash snippet shows the commands to create a new Hono project using Bun's create command, navigate to the project directory, and start the application using Bun.

LANGUAGE: bash
CODE:
$ bun create hono ./myapp
$ cd myapp
$ bun run start

----------------------------------------

TITLE: Omitting Specific Dependency Types during Installation
DESCRIPTION: Commands to omit certain types of dependencies (dev, peer, or optional) during package installation.

LANGUAGE: bash
CODE:
# Exclude "devDependencies" from the installation. This will apply to the
# root package and workspaces if they exist. Transitive dependencies will
# not have "devDependencies".
$ bun install --omit dev

# Install only dependencies from "dependencies"
$ bun install --omit=dev --omit=peer --omit=optional

----------------------------------------

TITLE: Configuring Azure Artifacts via NPM_CONFIG_REGISTRY Environment Variable
DESCRIPTION: This snippet shows how to set the NPM_CONFIG_REGISTRY environment variable to configure Azure Artifacts without using bunfig.toml. It includes the registry URL with username and password as query parameters.

LANGUAGE: bash
CODE:
NPM_CONFIG_REGISTRY=https://pkgs.dev.azure.com/my-azure-artifacts-user/_packaging/my-azure-artifacts-user/npm/registry/:username=<USERNAME>:_password=<PASSWORD>

----------------------------------------

TITLE: Configuring Bun Install Behavior in bunfig.toml
DESCRIPTION: TOML configuration to set default behaviors for Bun install in the bunfig.toml file.

LANGUAGE: toml
CODE:
[install]

# whether to install optionalDependencies
optional = true

# whether to install devDependencies
dev = true

# whether to install peerDependencies
peer = true

# equivalent to `--production` flag
production = false

# equivalent to `--save-text-lockfile` flag
saveTextLockfile = false

# equivalent to `--frozen-lockfile` flag
frozenLockfile = false

# equivalent to `--dry-run` flag
dryRun = false

# equivalent to `--concurrent-scripts` flag
concurrentScripts = 16 # (cpu count or GOMAXPROCS) x2

----------------------------------------

TITLE: Configuring Root Package.json for Workspaces
DESCRIPTION: Root level package.json configuration for a monorepo with workspaces. Sets private flag and defines workspace locations using glob patterns.

LANGUAGE: json
CODE:
{
  "name": "my-monorepo",
  "private": true,
  "workspaces": [
    "packages/*"
  ]
}

----------------------------------------

TITLE: React Component with TypeScript and JSX
DESCRIPTION: Example of a React component using TypeScript and JSX syntax, showing Bun's built-in support for TSX files and component rendering.

LANGUAGE: tsx
CODE:
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);

----------------------------------------

TITLE: Using Bun's Inspect Flag for Debugging
DESCRIPTION: This shell command shows how to run a TypeScript file with Bun's --inspect flag, which enables debugging by starting a WebSocket server for introspection.

LANGUAGE: shell
CODE:
$ bun --inspect server.ts

----------------------------------------

TITLE: Installing Shadcn Components
DESCRIPTION: Command to install specific shadcn/ui components using bunx.

LANGUAGE: bash
CODE:
# Assuming bun detected imports to @/components/ui/accordion and @/components/ui/button
$ bunx shadcn@canary add accordion button # and any other components

----------------------------------------

TITLE: Initializing Method Spy in TypeScript with Bun Test Runner
DESCRIPTION: Sets up a spy on an object's method using Bun's spyOn utility. Creates an object with a sayHi method and establishes tracking for that method.

LANGUAGE: typescript
CODE:
import { test, expect, spyOn } from "bun:test";

const leo = {
  name: "Leonardo",
  sayHi(thing: string) {
    console.log(`Sup I'm ${this.name} and I like ${thing}`);
  },
};

const spy = spyOn(leo, "sayHi");

----------------------------------------

TITLE: Optimized Output After JSON Replacement
DESCRIPTION: This TypeScript snippet shows the optimized output after Bun replaces the AWS.ACCESS_KEY with its actual value.

LANGUAGE: ts
CODE:
console.log("abc");

----------------------------------------

TITLE: Building Bun Project for Production
DESCRIPTION: This npm script builds the Bun app for production, bundling Solid.js in production mode and optimizing for best performance. The output is placed in the 'dist' folder.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Manual Garbage Collection in Bun
DESCRIPTION: Shows how to manually trigger garbage collection in Bun using both synchronous and asynchronous methods.

LANGUAGE: javascript
CODE:
Bun.gc(true); // synchronous
Bun.gc(false); // asynchronous

----------------------------------------

TITLE: Git Dependency Configuration in package.json
DESCRIPTION: JSON configuration showing various ways to specify Git dependencies in package.json including different protocols and repositories

LANGUAGE: json
CODE:
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod"
  }
}

----------------------------------------

TITLE: Tarball Dependency in package.json
DESCRIPTION: Example of a tarball dependency specified in package.json, referencing a specific package version hosted as a .tgz file.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}

----------------------------------------

TITLE: Starting Vite Development Server
DESCRIPTION: Launch Vite development server using Bun runtime with the --bun flag.

LANGUAGE: bash
CODE:
bunx --bun vite

----------------------------------------

TITLE: Skipping Tests in TypeScript with Bun Test Runner
DESCRIPTION: This snippet shows how to use the test.skip function to mark a test as skipped in Bun's test runner. It imports the test function from bun:test and defines a skipped test case.

LANGUAGE: typescript
CODE:
import { test } from "bun:test";

test.skip("unimplemented feature", () => {
  expect(Bun.isAwesome()).toBe(true);
});

----------------------------------------

TITLE: Configuring Non-npm Dependencies in package.json
DESCRIPTION: JSON configuration to specify dependencies from various sources like Git, GitHub, and tarballs in package.json.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod",
    "react": "https://registry.npmjs.org/react/-/react-18.2.0.tgz",
    "bun-types": "npm:@types/bun"
  }
}

----------------------------------------

TITLE: Debugging Network Requests with Bun
DESCRIPTION: This TypeScript snippet shows how to enable verbose logging of network requests made with fetch() by setting the BUN_CONFIG_VERBOSE_FETCH environment variable to 'curl'.

LANGUAGE: typescript
CODE:
process.env.BUN_CONFIG_VERBOSE_FETCH = "curl";

await fetch("https://example.com", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ foo: "bar" }),
});

----------------------------------------

TITLE: Checking Version Compatibility with Bun.semver.satisfies in TypeScript
DESCRIPTION: Demonstrates the usage of Bun.semver.satisfies function to check if a version satisfies a given range. It returns true if the version is compatible with the range, and false otherwise.

LANGUAGE: typescript
CODE:
import { semver } from "bun";

semver.satisfies("1.0.0", "^1.0.0"); // true
semver.satisfies("1.0.0", "^1.0.1"); // false
semver.satisfies("1.0.0", "~1.0.0"); // true
semver.satisfies("1.0.0", "~1.0.1"); // false
semver.satisfies("1.0.0", "1.0.0"); // true
semver.satisfies("1.0.0", "1.0.1"); // false
semver.satisfies("1.0.1", "1.0.0"); // false
semver.satisfies("1.0.0", "1.0.x"); // true
semver.satisfies("1.0.0", "1.x.x"); // true
semver.satisfies("1.0.0", "x.x.x"); // true
semver.satisfies("1.0.0", "1.0.0 - 2.0.0"); // true
semver.satisfies("1.0.0", "1.0.0 - 1.0.1"); // true

----------------------------------------

TITLE: Bun Configuration TypeScript Types
DESCRIPTION: TypeScript interface definitions for the bunfig.toml configuration structure, including types for installation options, registry settings, and cache configuration.

LANGUAGE: typescript
CODE:
export interface Root {
  install: Install;
}

export interface Install {
  scopes: Scopes;
  registry: Registry;
  production: boolean;
  saveTextLockfile: boolean;
  frozenLockfile: boolean;
  dryRun: boolean;
  optional: boolean;
  dev: boolean;
  peer: boolean;
  globalDir: string;
  globalBinDir: string;
  cache: Cache;
  lockfile: Lockfile;
  logLevel: "debug" | "error" | "warn";
}

type Registry =
  | string
  | {
      url?: string;
      token?: string;
      username?: string;
      password?: string;
    };

type Scopes = Record<string, Registry>;

export interface Cache {
  dir: string;
  disable: boolean;
  disableManifest: boolean;
}

export interface Lockfile {
  print?: "yarn";
  save: boolean;
}

----------------------------------------

TITLE: Configuring Testing Library Setup
DESCRIPTION: Set up Testing Library matchers and cleanup functionality with Bun's test runner

LANGUAGE: typescript
CODE:
import { afterEach, expect } from 'bun:test';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

expect.extend(matchers);

// Optional: cleans up `render` after each test
afterEach(() => {
  cleanup();
});

----------------------------------------

TITLE: Client-Side vs Server-Side Code Check
DESCRIPTION: This JavaScript code checks for the existence of 'window' to determine if it's running on the client-side or server-side. It can be affected by the --define flag replacing 'window' with 'undefined'.

LANGUAGE: js
CODE:
if (typeof window !== "undefined") {
  console.log("Client-side code");
} else {
  console.log("Server-side code");
}

----------------------------------------

TITLE: Text File Import Example
DESCRIPTION: Demonstrates how to import and use text files as strings in TypeScript files using Bun's module system.

LANGUAGE: typescript
CODE:
import text from "./text.txt";
console.log(text);
// => "Hello world!"

LANGUAGE: txt
CODE:
Hello world!

----------------------------------------

TITLE: Installing Bun Using Homebrew
DESCRIPTION: Installs Bun using Homebrew on macOS.

LANGUAGE: bash
CODE:
$ brew tap oven-sh/bun
$ brew install bun

----------------------------------------

TITLE: Demonstrating Buffer as Uint8Array in TypeScript
DESCRIPTION: This snippet shows how to create a Buffer and verify that it is an instance of Uint8Array. It illustrates that no conversion is needed between Buffer and Uint8Array in Bun.

LANGUAGE: typescript
CODE:
const buf = Buffer.alloc(64);
buf instanceof Uint8Array; // => true

----------------------------------------

TITLE: Running Source Map Tests Guide
DESCRIPTION: Comprehensive guide explaining how to set up and run source map tests across different browsers and tools including Firefox, WebKit, and Chrome DevTools.

LANGUAGE: markdown
CODE:
1. Setup:\n    * Install depot_tools following this [depot_tools guide]\n    * Check out [Chrome Devtools]\n    * Run `gclient config https://chromium.googlesource.com/devtools/devtools-frontend --unmanaged`\n    * Run `cd devtools-frontend`\n    * Run `gclient sync`\n    * Run `gn gen out/Default`\n2. Build:\n    * Run `autoninja -C out/Default`\n3. Test:\n    * Run `npm run auto-unittest`\n4. Apply patches from this repo:\n    * Run `git apply <path to .patch file>` in `devtools-frontend` repo

----------------------------------------

TITLE: Setting Local Git Diff Configuration
DESCRIPTION: Configure local Git settings to use Bun for converting lockfile content before diffing. Sets the textconv command to bun and marks the files as binary.

LANGUAGE: shell
CODE:
git config diff.lockb.textconv bun
git config diff.lockb.binary true

----------------------------------------

TITLE: Copying Files with Bun.js
DESCRIPTION: Demonstrates how to copy a file using Bun.file() and Bun.write(). This operation uses optimized system calls like copy_file_range on Linux and clonefile/fcopyfile on macOS.

LANGUAGE: javascript
CODE:
const blob = Bun.file("input.txt");
await Bun.write("output.txt", blob);

----------------------------------------

TITLE: Running Bun Application
DESCRIPTION: Command to execute the Bun application using the specified entry point

LANGUAGE: bash
CODE:
bun run {[entryPoint]s}

----------------------------------------

TITLE: Installing Dependencies for Specific Packages
DESCRIPTION: Commands to install dependencies for specific packages or exclude certain packages in a monorepo setup.

LANGUAGE: bash
CODE:
# Install dependencies for all workspaces except `pkg-c`
$ bun install --filter '!pkg-c'

# Install dependencies for only `pkg-a` in `./packages/pkg-a`
$ bun install --filter './packages/pkg-a'

----------------------------------------

TITLE: Executing a Simple SQL Query with Drizzle ORM in Bun
DESCRIPTION: Demonstrates how to execute a basic SQL query using Drizzle ORM and log the result.

LANGUAGE: ts
CODE:
import { db } from "./db";
import { sql } from "drizzle-orm";

const query = sql`select "hello world" as text`;
const result = db.get<{ text: string }>(query);
console.log(result);

----------------------------------------

TITLE: Installing Dependencies for Bun Development on Ubuntu/Debian
DESCRIPTION: Uses apt to install the required dependencies for building Bun on Ubuntu or Debian-based systems.

LANGUAGE: bash
CODE:
$ sudo apt install curl wget lsb-release software-properties-common cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby-full xz-utils

----------------------------------------

TITLE: Enabling Per-Message WebSocket Compression in Bun
DESCRIPTION: Shows how to enable compression for individual WebSocket messages by passing true as the second parameter to ws.send(). This allows for selective compression of messages rather than compressing all messages globally.

LANGUAGE: typescript
CODE:
Bun.serve({
  // ...
  websocket: {
    async message(ws, message) {
      // send a compressed message
      ws.send(message, true);
    },
  },
});

----------------------------------------

TITLE: Accessing Local bin Directory Path
DESCRIPTION: Prints the path to the bin directory for the local project node_modules.

LANGUAGE: bash
CODE:
$ bun pm bin
/path/to/current/project/node_modules/.bin

----------------------------------------

TITLE: Mixed Module System Usage in Bun
DESCRIPTION: Shows how Bun allows mixing import and require() in the same file, supporting both ES modules and CommonJS modules simultaneously.

LANGUAGE: typescript
CODE:
import { stuff } from "./my-commonjs.cjs";
import Stuff from "./my-commonjs.cjs";
const myStuff = require("./my-commonjs.cjs");

----------------------------------------

TITLE: Basic React Component in TSX
DESCRIPTION: Example of a simple React component demonstrating JSX syntax with TypeScript typing and inline styling.

LANGUAGE: tsx
CODE:
function Component(props: {message: string}) {
  return (
    <body>
      <h1 style={{color: 'red'}}>{props.message}</h1>
    </body>
  );
}

console.log(<Component message="Hello world!" />);

----------------------------------------

TITLE: Installing Dependencies for Bun Development on Ubuntu/Debian
DESCRIPTION: Uses apt to install the required dependencies for building Bun on Ubuntu or Debian-based systems.

LANGUAGE: bash
CODE:
$ sudo apt install curl wget lsb-release software-properties-common cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby-full xz-utils

----------------------------------------

TITLE: Building WebKit Locally for Bun Development
DESCRIPTION: Clones and builds WebKit locally for use in Bun development.

LANGUAGE: bash
CODE:
$ git clone https://github.com/oven-sh/WebKit vendor/WebKit
$ git -C vendor/WebKit checkout <commit_hash>
$ make jsc-debug && rm vendor/WebKit/WebKitBuild/Debug/JavaScriptCore/DerivedSources/inspector/InspectorProtocolObjects.h
$ bun run build:local

----------------------------------------

TITLE: Linking Bun Components
DESCRIPTION: Final stage that links together the Zig and C++ components to create the Bun executable. Supports custom dependency directories and WebKit location. Produces main binary, profile binary, and debug symbols.

LANGUAGE: sh
CODE:
cd tmp3

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUN_LINK_ONLY=1 \
  -DBUN_ZIG_OBJ_DIR=\"/path/to/bun-zig-dir\" \
  -DBUN_CPP_ARCHIVE=\"/path/to/bun-cpp-objects.a\"

ninja

----------------------------------------

TITLE: Linking a Registered Package into a Project
DESCRIPTION: This snippet shows how to link a previously registered package into another project using the 'bun link' command.

LANGUAGE: bash
CODE:
$ cd /path/to/my-app
$ bun link cool-pkg

----------------------------------------

TITLE: Configuring systemd Service File for Bun Application
DESCRIPTION: Template for a systemd service file to run a Bun application. It includes settings for service type, user, working directory, start command, and restart policy. Replace 'YOUR_USER' with the appropriate username.

LANGUAGE: ini
CODE:
[Unit]
Description=My App
After=network.target

[Service]
Type=simple
User=YOUR_USER
WorkingDirectory=/home/YOUR_USER/path/to/my-app
ExecStart=/home/YOUR_USER/.bun/bin/bun run index.ts
Restart=always

[Install]
WantedBy=multi-user.target

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: This command runs Bun tests in watch mode, which automatically restarts the test process when file changes are detected. It's useful for continuous testing during development.

LANGUAGE: sh
CODE:
$ bun test --watch

----------------------------------------

TITLE: Configuring Global Installation Behavior in Bun
DESCRIPTION: TOML configuration for specifying global installation directories for packages and binaries in Bun.

LANGUAGE: toml
CODE:
[install]
# where `bun add --global` installs packages
globalDir = "~/.bun/install/global"

# where globally-installed package bins are linked
globalBinDir = "~/.bun/bin"

----------------------------------------

TITLE: Enabling and Starting Bun Application Service
DESCRIPTION: Commands to enable the Bun application service for automatic start on reboot and to manually start the service without rebooting.

LANGUAGE: bash
CODE:
$ sudo systemctl enable my-app
$ sudo systemctl start my-app

----------------------------------------

TITLE: JSX Prop Punning Example
DESCRIPTION: Example showing Bun's prop punning syntax for shorter JSX prop assignments.

LANGUAGE: tsx
CODE:
function Div(props: {className: string;}) {
  const {className} = props;

  // without punning
  return <div className={className} />;
  // with punning
  return <div {className} />;
}

----------------------------------------

TITLE: Accessing Global bin Directory Path
DESCRIPTION: Prints the path to the global bin directory used by Bun.

LANGUAGE: bash
CODE:
$ bun pm bin -g
<$HOME>/.bun/bin

----------------------------------------

TITLE: Package.json Configuration for Module Exports
DESCRIPTION: Illustrates how to configure package.json to specify different entry points for various module systems and conditions in Bun.

LANGUAGE: json
CODE:
{
  "name": "foo",
  "exports": {
    "bun": "./index.js",
    "node": "./index.js",
    "require": "./index.js",
    "import": "./index.mjs",
    "default": "./index.js"
  }
}

----------------------------------------

TITLE: Non-cryptographic Hashing with Bun.hash
DESCRIPTION: Demonstrates various non-cryptographic hashing algorithms available in Bun.hash, including wyhash, crc32, adler32, and others.

LANGUAGE: typescript
CODE:
Bun.hash("some data here");
// 11562320457524636935n

Bun.hash.wyhash("data", 1234); // equivalent to Bun.hash()
Bun.hash.crc32("data", 1234);
Bun.hash.adler32("data", 1234);
Bun.hash.cityHash32("data", 1234);
Bun.hash.cityHash64("data", 1234);
Bun.hash.xxHash32("data", 1234);
Bun.hash.xxHash64("data", 1234);
Bun.hash.xxHash3("data", 1234);
Bun.hash.murmur32v3("data", 1234);
Bun.hash.murmur32v2("data", 1234);
Bun.hash.murmur64v2("data", 1234);

----------------------------------------

TITLE: Configuring bunfig.toml for YAML Plugin Preload
DESCRIPTION: TOML configuration to preload the YAML plugin in Bun's configuration file.

LANGUAGE: toml
CODE:
preload = ["./yaml.ts"]

----------------------------------------

TITLE: Installing Bun Using PowerShell
DESCRIPTION: Installs Bun using a PowerShell installation script.

LANGUAGE: powershell
CODE:
irm bun.sh/install.ps1 | iex

----------------------------------------

TITLE: Pattern Alternatives with {}
DESCRIPTION: Demonstrates using brace expansion to match multiple alternative patterns.

LANGUAGE: typescript
CODE:
const glob = new Glob("{a,b,c}.ts");
glob.match("a.ts"); // => true
glob.match("b.ts"); // => true
glob.match("c.ts"); // => true
glob.match("d.ts"); // => false

----------------------------------------

TITLE: Installing Bun on Various Platforms
DESCRIPTION: Provides installation commands for Bun on different platforms including Linux, Windows, macOS, and Docker.

LANGUAGE: sh
CODE:
# with install script (recommended)
curl -fsSL https://bun.sh/install | bash

# on windows
powershell -c "irm bun.sh/install.ps1 | iex"

# with npm
npm install -g bun

# with Homebrew
brew tap oven-sh/bun
brew install bun

# with Docker
docker pull oven/bun
docker run --rm --init --ulimit memlock=-1:-1 oven/bun

----------------------------------------

TITLE: Object Inspection with Bun.inspect() in TypeScript
DESCRIPTION: Demonstrates how to serialize an object to a string using Bun.inspect() in TypeScript, similar to console.log output.

LANGUAGE: typescript
CODE:
const obj = { foo: "bar" };
const str = Bun.inspect(obj);
// => '{\nfoo: "bar" \n}'

const arr = new Uint8Array([1, 2, 3]);
const str = Bun.inspect(arr);
// => "Uint8Array(3) [ 1, 2, 3 ]"

----------------------------------------

TITLE: Running the Addition Calculator Script in Bun
DESCRIPTION: This bash snippet demonstrates how to run the addition calculator script using Bun. It shows the command to execute the script and provides an example of the interactive input and output.

LANGUAGE: bash
CODE:
$ bun adder.ts
Let's add some numbers!
Count: 0
> 5
Count: 5
> 5
Count: 10
> 5
Count: 15

----------------------------------------

TITLE: Getting Bun Git Revision in TypeScript
DESCRIPTION: Retrieves the Git commit hash of the oven-sh/bun repository that was used to compile the current Bun binary using the Bun.revision property.

LANGUAGE: typescript
CODE:
Bun.revision; // => "49231b2cb9aa48497ab966fc0bb6b742dacc4994"

----------------------------------------

TITLE: Overriding Shebang with --bun Flag in Bun CLI
DESCRIPTION: Use the --bun flag to override the shebang in JavaScript files and execute them with Bun instead of Node.js.

LANGUAGE: bash
CODE:
$ bun run --bun vite

----------------------------------------

TITLE: Creating Directories in TypeScript
DESCRIPTION: Shows how to recursively create directories using Node.js fs module in Bun.

LANGUAGE: typescript
CODE:
import { mkdir } from "node:fs/promises";

await mkdir("path/to/dir", { recursive: true });

----------------------------------------

TITLE: Single Character Matching with ?
DESCRIPTION: Example of using the ? pattern to match any single character in a filename.

LANGUAGE: typescript
CODE:
const glob = new Glob("???.ts");
glob.match("foo.ts"); // => true
glob.match("foobar.ts"); // => false

----------------------------------------

TITLE: Shell Example - Interactive Prompt
DESCRIPTION: Shows the output of running the interactive prompt script, demonstrating how user input is echoed back.

LANGUAGE: shell
CODE:
$ bun run index.ts
Type something: hello
You typed: hello
Type something: hello again
You typed: hello again

----------------------------------------

TITLE: Adding Peer Dependencies with Bun
DESCRIPTION: Using the '--peer' flag to add packages as peer dependencies in the 'peerDependencies' section of package.json.

LANGUAGE: bash
CODE:
$ bun add --peer @types/bun

----------------------------------------

TITLE: Cryptographic Hashing with Bun.CryptoHasher
DESCRIPTION: Shows how to use Bun.CryptoHasher for incremental cryptographic hashing with various algorithms and output formats.

LANGUAGE: typescript
CODE:
const hasher = new Bun.CryptoHasher("sha256");
hasher.update("hello world");
hasher.digest();
// Uint8Array(32) [ <byte>, <byte>, ... ]

hasher.digest("base64");
// => "uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek="

hasher.digest("hex");
// => "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"

----------------------------------------

TITLE: Checking Bun Installation
DESCRIPTION: These commands check the installed version of Bun and the precise commit of the installation.

LANGUAGE: bash
CODE:
$ bun --version
1.x.y

$ bun --revision
1.x.y+b7982ac13189

----------------------------------------

TITLE: Installing Dependencies with Scoop
DESCRIPTION: Installs Scoop package manager and required dependencies for building Bun.

LANGUAGE: powershell
CODE:
irm https://get.scoop.sh | iex
scoop install nodejs-lts go rust nasm ruby perl ccache
scoop install llvm@19.1.7

----------------------------------------

TITLE: Strict Mode Comparisons with Bun.deepEquals in TypeScript
DESCRIPTION: Illustrates the use of strict mode in Bun.deepEquals() by passing true as the third argument. This mode is used internally by expect().toStrictEqual() in Bun's test runner. The examples show cases where non-strict and strict comparisons differ.

LANGUAGE: typescript
CODE:
// undefined values
Bun.deepEquals({}, { a: undefined }, true); // false

// undefined in arrays
Bun.deepEquals(["asdf"], ["asdf", undefined], true); // false

// sparse arrays
Bun.deepEquals([, 1], [undefined, 1], true); // false

// object literals vs instances w/ same properties
class Foo {
  a = 1;
}
Bun.deepEquals(new Foo(), { a: 1 }, true); // false

----------------------------------------

TITLE: Using Environment Variables in bunfig.toml Registry Configuration
DESCRIPTION: Shows how to use environment variables in bunfig.toml for registry configuration. Environment variables can be loaded from .env.local, .env.[NODE_ENV], and .env files.

LANGUAGE: toml
CODE:
[install]
registry = { url = "https://registry.npmjs.org", token = "$npm_token" }

----------------------------------------

TITLE: Implementing a YAML Loader Plugin for Bun
DESCRIPTION: Creates a Bun plugin that loads and parses YAML files, allowing them to be directly imported as JavaScript objects.

LANGUAGE: typescript
CODE:
import { plugin } from "bun";

await plugin({
  name: "YAML",
  async setup(build) {
    const { load } = await import("js-yaml");

    build.onLoad({ filter: /\.(yaml|yml)$/ }, async (args) => {
      const text = await Bun.file(args.path).text();
      const exports = load(text) as Record<string, any>;

      return {
        exports,
        loader: "object",
      };
    });
  },
});

----------------------------------------

TITLE: Creating a Todo Test in Bun Test Runner
DESCRIPTION: This snippet shows how to create a todo test using the test.todo function from Bun's test runner. It allows marking a test for future implementation without providing an actual test body.

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

// write this later
test.todo("unimplemented feature");

----------------------------------------

TITLE: Updating package.json with Linked Package
DESCRIPTION: This JSON diff demonstrates how the package.json file is updated when using the --save flag with 'bun link'. It adds the linked package to the dependencies with a special version specifier.

LANGUAGE: json
CODE:
  {
    "name": "my-app",
    "version": "1.0.0",
    "dependencies": {
+     "cool-pkg": "link:cool-pkg"
    }
  }

----------------------------------------

TITLE: Copying Files in JavaScript
DESCRIPTION: Demonstrates how to copy a file to another location using Bun.write().

LANGUAGE: javascript
CODE:
const input = Bun.file("input.txt");
const output = Bun.file("output.txt"); // doesn't exist yet!
await Bun.write(output, input);

----------------------------------------

TITLE: Consuming ReadableStream Chunks with Async Iterator
DESCRIPTION: Demonstrates how to consume stream chunks using a for-await loop. Each chunk is received as a Uint8Array.

LANGUAGE: typescript
CODE:
for await (const chunk of stream) {
  chunk; // => Uint8Array
}

----------------------------------------

TITLE: Reading stdin using console AsyncIterable in Bun
DESCRIPTION: Demonstrates how to create an interactive CLI prompt that reads input line-by-line using the console AsyncIterable. The code continuously prompts for user input and echoes back what was typed.

LANGUAGE: typescript
CODE:
const prompt = "Type something: ";
process.stdout.write(prompt);
for await (const line of console) {
  console.log(`You typed: ${line}`);
  process.stdout.write(prompt);
}

----------------------------------------

TITLE: Adding Packages with Bun
DESCRIPTION: Basic usage of 'bun add' command to add packages to a project. Demonstrates adding a specific package and specifying versions or tags.

LANGUAGE: bash
CODE:
$ bun add preact

LANGUAGE: bash
CODE:
$ bun add zod@3.20.0
$ bun add zod@^3.0.0
$ bun add zod@latest

----------------------------------------

TITLE: Configuring Preload Scripts in Bun
DESCRIPTION: Specifies an array of scripts or plugins to execute before running a file or script in Bun.

LANGUAGE: toml
CODE:
# scripts to run before `bun run`-ing a file or script
# register plugins by adding them to this list
preload = ["./preload.ts"]

----------------------------------------

TITLE: Escaping HTML Characters using Bun.escapeHTML()
DESCRIPTION: Demonstrates the usage of Bun.escapeHTML() function to escape special HTML characters in a string. The function converts characters like quotes, ampersands, and angle brackets to their HTML entity equivalents. It handles non-string inputs by converting them to strings first and is optimized for large inputs.

LANGUAGE: typescript
CODE:
Bun.escapeHTML("<script>alert('Hello World!')</script>");
// &lt;script&gt;alert(&#x27;Hello World!&#x27;)&lt;&#x2F;script&gt;

----------------------------------------

TITLE: Configuring Registry-Specific Options in bunfig.toml for Bun
DESCRIPTION: This snippet demonstrates the equivalent configuration for setting registry-specific options in Bun's bunfig.toml format. It uses the install.scopes section to define the URL, username, and password for a specific registry.

LANGUAGE: toml
CODE:
[install.scopes]
myorg = { url = "http://localhost:4873/", username = "myusername", password = "$NPM_PASSWORD" }

----------------------------------------

TITLE: Configuring Chunk Size in Buffer to ReadableStream Conversion
DESCRIPTION: Example showing how to set a specific chunk size when converting Buffer to ReadableStream using Blob.stream(). This allows control over memory usage during streaming.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello world");
const blob = new Blob([buf]);

// set chunk size of 1024 bytes
const stream = blob.stream(1024);

----------------------------------------

TITLE: Converting Node.js Readable to ArrayBuffer in TypeScript using Bun
DESCRIPTION: Demonstrates how to convert a Node.js Readable stream into an ArrayBuffer using Bun's Response object. The example creates a simple text stream and converts it to an ArrayBuffer using the Response.arrayBuffer() method.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const buf = await new Response(stream).arrayBuffer();

----------------------------------------

TITLE: HMR Usage Examples (Valid and Invalid)
DESCRIPTION: Demonstrates correct and incorrect ways to use the HMR API, highlighting the requirement to call APIs directly without indirection.

LANGUAGE: typescript
CODE:
// INVALID: Assigning `hot` to a variable
const hot = import.meta.hot;
hot.accept();

// INVALID: Assigning `import.meta` to a variable
const meta = import.meta;
meta.hot.accept();
console.log(meta.hot.data);

// INVALID: Passing to a function
doSomething(import.meta.hot.dispose);

// OK: The full phrase "import.meta.hot.<API>" must be called directly:
import.meta.hot.accept();

// OK: `data` can be passed to functions:
doSomething(import.meta.hot.data);

----------------------------------------

TITLE: Preloading Bun Plugins in bunfig.toml
DESCRIPTION: Shows how to preload plugin files before running code or tests using the bunfig.toml configuration file.

LANGUAGE: toml
CODE:
preload = ["./myPlugin.ts"]

[test]
preload = ["./myPlugin.ts"]

----------------------------------------

TITLE: Bun's Static Value Replacement Process
DESCRIPTION: This diff shows how Bun replaces `process.env.NODE_ENV` with the string "production" before the code reaches the JavaScript engine.

LANGUAGE: ts-diff
CODE:
+ if ("production" === "production") {
    console.log("Production mode");
  } else {
    console.log("Development mode");
  }

----------------------------------------

TITLE: Filtering Package Scripts in Monorepos with Bun CLI
DESCRIPTION: Use the --filter argument to execute scripts in multiple packages within a monorepo based on a name pattern.

LANGUAGE: bash
CODE:
bun run --filter 'ba*' <script>

----------------------------------------

TITLE: Configuring Happy DOM Setup
DESCRIPTION: Create a preload script to register Happy DOM globally for DOM environment simulation

LANGUAGE: typescript
CODE:
import { GlobalRegistrator } from '@happy-dom/global-registrator';

GlobalRegistrator.register();

----------------------------------------

TITLE: Starting Bun Application with PM2 CLI
DESCRIPTION: This command uses PM2 to start a Bun application as a daemon process, specifying the Bun interpreter explicitly.

LANGUAGE: bash
CODE:
pm2 start --interpreter ~/.bun/bin/bun index.ts

----------------------------------------

TITLE: Shell Example - Piped Input
DESCRIPTION: Shows how to pipe input into a Bun script using the chunk-based stdin reading approach.

LANGUAGE: shell
CODE:
$ echo "hello" | bun run stdin.ts
Chunk: hello

----------------------------------------

TITLE: Installing Bun Shell Completions to Custom Directory
DESCRIPTION: This command installs Bun shell completions to a user-specified directory. It's useful when the user knows the exact location where shell completions should be installed in their system.

LANGUAGE: shell
CODE:
bun completions /path/to/directory

----------------------------------------

TITLE: Defining database schema with Drizzle ORM
DESCRIPTION: Creates a schema for the database using Drizzle ORM primitives, defining an 'authors' table.

LANGUAGE: ts
CODE:
import { pgTable, integer, serial, text, timestamp } from "drizzle-orm/pg-core";

export const authors = pgTable("authors", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  bio: text("bio"),
  createdAt: timestamp("created_at").notNull().defaultNow(),
});

----------------------------------------

TITLE: Importing URL Module with ES Modules
DESCRIPTION: Shows how to import the URL module using ES Modules import syntax with the node: protocol.

LANGUAGE: mjs
CODE:
import 'node:url';

----------------------------------------

TITLE: Defining Dependencies with Postinstall Script in package.json
DESCRIPTION: This snippet shows a package.json file that includes a dependency on 'node-sass', which typically uses a postinstall script to build native binaries.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "node-sass": "^6.0.1"
  }
}

----------------------------------------

TITLE: Setting Scope-Specific Registry in bunfig.toml for Bun
DESCRIPTION: This snippet demonstrates the equivalent configuration for setting a scope-specific registry in Bun's bunfig.toml format. It uses the install.scopes section to define the registry for the 'myorg' scope.

LANGUAGE: toml
CODE:
[install.scopes]
myorg = "http://localhost:4873/"

----------------------------------------

TITLE: Transpiling Nested CSS Syntax in Bun
DESCRIPTION: Demonstrates how Bun's CSS bundler automatically converts nested CSS syntax into traditional flat CSS for browser compatibility.

LANGUAGE: CSS
CODE:
/* With nesting */
.card {
  background: white;
  border-radius: 4px;

  .title {
    font-size: 1.2rem;
    font-weight: bold;
  }

  .content {
    padding: 1rem;
  }
}

LANGUAGE: CSS
CODE:
/* Compiled output */
.card {
  background: white;
  border-radius: 4px;
}

.card .title {
  font-size: 1.2rem;
  font-weight: bold;
}

.card .content {
  padding: 1rem;
}

----------------------------------------

TITLE: JSX Component Logging Example
DESCRIPTION: Demonstration of Bun's JSX logging capabilities with nested components.

LANGUAGE: tsx
CODE:
import { Stack, UserCard } from "./components";

console.log(
  <Stack>
    <UserCard name="Dom" bio="Street racer and Corona lover" />
    <UserCard name="Jakob" bio="Super spy and Dom's secret brother" />
  </Stack>
);

----------------------------------------

TITLE: Comparing Objects with Bun.deepEquals in TypeScript
DESCRIPTION: Demonstrates the basic usage of Bun.deepEquals() to check if two objects are deeply equal. This function is used internally by expect().toEqual() in Bun's test runner.

LANGUAGE: typescript
CODE:
const a = { a: 1, b: 2, c: { d: 3 } };
const b = { a: 1, b: 2, c: { d: 3 } };

Bun.deepEquals(a, b); // true

----------------------------------------

TITLE: Creating Project from NPM Template
DESCRIPTION: Commands to create new projects using npm templates.

LANGUAGE: bash
CODE:
$ bun create <template> [<destination>]

----------------------------------------

TITLE: Verifying Snapshot Test Command
DESCRIPTION: Shell command example showing subsequent test runs that verify against existing snapshots.

LANGUAGE: shell
CODE:
$ bun test
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [1.05ms]

 1 pass
 0 fail
 1 snapshots, 1 expect() calls
Ran 1 tests across 1 files. [101.00ms]

----------------------------------------

TITLE: Implementing onResolve and onLoad in Bun Plugin
DESCRIPTION: Demonstrates how to implement onResolve and onLoad hooks in a Bun plugin. The structure is similar to esbuild but with some differences in supported options and arguments.

LANGUAGE: typescript
CODE:
import type { BunPlugin } from "bun";
const myPlugin: BunPlugin = {
  name: "my-plugin",
  setup(builder) {
    builder.onResolve(
      {
        /* onResolve.options */
      },
      args => {
        return {
          /* onResolve.results */
        };
      },
    );
    builder.onLoad(
      {
        /* onLoad.options */
      },
      args => {
        return {
          /* onLoad.results */
        };
      },
    );
  },
};

----------------------------------------

TITLE: Executing Next.js Frame Analysis Script
DESCRIPTION: Shell command that runs a Node.js script to analyze frame timing with environment variables for sleep interval and project type

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=32 PROJECT=next node read-frames.js

----------------------------------------

TITLE: Reading File to Uint8Array using Bun.file()
DESCRIPTION: Shows how to read a file into a Uint8Array using Bun's file API. The example demonstrates creating a BunFile instance and accessing its contents as a byte array. The BunFile class extends Blob and provides lazy loading capabilities.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

const byteArray = await file.bytes();

byteArray[0]; // first byteArray
byteArray.length; // length of byteArray

----------------------------------------

TITLE: Generating SQL migration with drizzle-kit
DESCRIPTION: Uses the drizzle-kit CLI to generate an initial SQL migration based on the defined schema.

LANGUAGE: sh
CODE:
$ bunx drizzle-kit generate --dialect postgresql --schema ./schema.ts --out ./drizzle

----------------------------------------

TITLE: Getting Bytes Written with Bun.write()
DESCRIPTION: Shows how to capture the number of bytes written to disk using Bun.write(). The function returns the total number of bytes written.

LANGUAGE: typescript
CODE:
const path = "./file.txt";
const bytes = await Bun.write(path, "Lorem ipsum");
// => 11

----------------------------------------

TITLE: Adding Trusted Dependencies in package.json for Bun
DESCRIPTION: This JSON diff demonstrates how to add a package to the 'trustedDependencies' array in package.json, allowing Bun to execute its lifecycle scripts.

LANGUAGE: json-diff
CODE:
  {
    "name": "my-app",
    "version": "1.0.0",
+   "trustedDependencies": ["node-sass"]
  }

----------------------------------------

TITLE: Generating Heap Snapshots in Bun
DESCRIPTION: Demonstrates how to generate and save heap snapshots for memory analysis using the bun:jsc module.

LANGUAGE: typescript
CODE:
import { generateHeapSnapshot } from "bun";

const snapshot = generateHeapSnapshot();
await Bun.write("heap.json", JSON.stringify(snapshot, null, 2));

----------------------------------------

TITLE: Tarball Dependency Configuration
DESCRIPTION: Example of configuring a dependency to be installed from a tarball URL in package.json

LANGUAGE: json
CODE:
{
  "dependencies": {
    "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}

----------------------------------------

TITLE: Listing Installed Packages with bun
DESCRIPTION: This snippet shows how to list installed packages using bun, including options for listing top-level packages and all installed packages including transitive dependencies.

LANGUAGE: sh
CODE:
# List top-level installed packages:
$ bun pm ls
my-pkg node_modules (781)
├── @types/node@20.16.5
├── @types/react@18.3.8
├── @types/react-dom@18.3.0
├── eslint@8.57.1
├── eslint-config-next@14.2.8

# List all installed packages:
$ bun pm ls -a
my-pkg node_modules
├── @alloc/quick-lru@5.2.0
├── @isaacs/cliui@8.0.2
│   └── strip-ansi@7.1.0
│       └── ansi-regex@6.1.0
├── @jridgewell/gen-mapping@0.3.5
├── @jridgewell/resolve-uri@3.1.2
...

----------------------------------------

TITLE: Running the seed script with Bun
DESCRIPTION: Command to execute the seed script using Bun.

LANGUAGE: sh
CODE:
$ bun run seed.ts

----------------------------------------

TITLE: Configuring Neon Postgres connection string
DESCRIPTION: Example of a .env.local file content with a Neon Postgres connection string. This is used to securely store the database connection information.

LANGUAGE: sh
CODE:
DATABASE_URL=postgresql://username:password@ep-adj-noun-guid.us-east-1.aws.neon.tech/neondb?sslmode=require

----------------------------------------

TITLE: Installing Dependencies in Production Mode
DESCRIPTION: Command to install dependencies in production mode, excluding devDependencies and optionalDependencies.

LANGUAGE: bash
CODE:
$ bun install --production

----------------------------------------

TITLE: Installing Express with Bun
DESCRIPTION: Command to install Express.js using Bun package manager.

LANGUAGE: sh
CODE:
$ bun add express

----------------------------------------

TITLE: Snapshot Directory Structure
DESCRIPTION: Shows the file structure created by snapshot testing, including the __snapshots__ directory and its contents.

LANGUAGE: text
CODE:
test
├── __snapshots__
│   └── snap.test.ts.snap
└── snap.test.ts

----------------------------------------

TITLE: Installing Express with Bun
DESCRIPTION: Command to install Express.js using Bun package manager.

LANGUAGE: sh
CODE:
$ bun add express

----------------------------------------

TITLE: Executing CSS HMR Frame Time Analysis Script for Next.js
DESCRIPTION: This command runs a Node.js script named 'read-frames.js' with specific environment variables set for sleep interval and project type. It's used to analyze CSS Hot Module Replacement (HMR) frame times in a Next.js project.

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=16 PROJECT=next node read-frames.js

----------------------------------------

TITLE: Using Symbol.asyncIterator with Response in TypeScript
DESCRIPTION: This snippet demonstrates how to use Symbol.asyncIterator directly to create a Response with a ReadableStream in TypeScript.

LANGUAGE: typescript
CODE:
const response = new Response({
  [Symbol.asyncIterator]: async function* () {
    yield "hello";
    yield "world";
  },
});

await response.text(); // "helloworld"

----------------------------------------

TITLE: Executing database migrations with Drizzle ORM
DESCRIPTION: Creates a migration script that connects to the Neon database and executes all unexecuted migrations in the 'drizzle' directory.

LANGUAGE: ts
CODE:
import { db } from './db';
import { migrate } from "drizzle-orm/neon-http/migrator";

const main = async () => {
  try {
    await migrate(db, { migrationsFolder: "drizzle" });
    console.log("Migration completed");
  } catch (error) {
    console.error("Error during migration:", error);
    process.exit(1);
  }
};

main();

----------------------------------------

TITLE: Plugin Type Definitions in TypeScript
DESCRIPTION: Core type definitions for Bun's plugin system, including PluginBuilder interface and Loader types

LANGUAGE: typescript
CODE:
type PluginBuilder = {
  onStart(callback: () => void): void;
  onResolve: (
    args: { filter: RegExp; namespace?: string },
    callback: (args: { path: string; importer: string }) => {
      path: string;
      namespace?: string;
    } | void,
  ) => void;
  onLoad: (
    args: { filter: RegExp; namespace?: string },
    defer: () => Promise<void>,
    callback: (args: { path: string }) => {
      loader?: Loader;
      contents?: string;
      exports?: Record<string, any>;
    },
  ) => void;
  config: BuildConfig;
};

type Loader = "js" | "jsx" | "ts" | "tsx" | "css" | "json" | "toml";

----------------------------------------

TITLE: Disabling Lifecycle Scripts in Bun Installation
DESCRIPTION: This bash command shows how to use the '--ignore-scripts' flag with Bun to disable lifecycle scripts for all packages during installation.

LANGUAGE: bash
CODE:
$ bun install --ignore-scripts

----------------------------------------

TITLE: Upgrading Bun
DESCRIPTION: Shows how to upgrade Bun to the latest version or to the latest canary build.

LANGUAGE: sh
CODE:
bun upgrade

# To upgrade to the latest canary build
bun upgrade --canary

----------------------------------------

TITLE: Adding Dependencies to Individual Workspace
DESCRIPTION: Commands to navigate to a specific workspace and add npm dependencies.

LANGUAGE: sh
CODE:
$ cd packages/stuff-a
$ bun add zod

----------------------------------------

TITLE: FileSystemRouter TypeScript Interface Definition
DESCRIPTION: This code block provides the TypeScript interface definition for the Bun.FileSystemRouter class, including its constructor parameters and the 'match' method signature.

LANGUAGE: typescript
CODE:
interface Bun {
  class FileSystemRouter {
    constructor(params: {
      dir: string;
      style: "nextjs";
      origin?: string;
      assetPrefix?: string;
      fileExtensions?: string[];
    });

    reload(): void;

    match(path: string | Request | Response): {
      filePath: string;
      kind: "exact" | "catch-all" | "optional-catch-all" | "dynamic";
      name: string;
      pathname: string;
      src: string;
      params?: Record<string, string>;
      query?: Record<string, string>;
    } | null
  }
}

----------------------------------------

TITLE: Running Files in Watch Mode with Bun CLI
DESCRIPTION: Use the --watch flag to run a file in watch mode, which automatically re-runs the script when changes are detected.

LANGUAGE: bash
CODE:
$ bun --watch run index.tsx

----------------------------------------

TITLE: Defining Global Identifiers in Bun
DESCRIPTION: Replaces global identifiers with constant expressions in Bun.

LANGUAGE: toml
CODE:
[define]
# Replace any usage of "process.env.bagel" with the string `lox`.
# The values are parsed as JSON, except single-quoted strings are supported and `'undefined'` becomes `undefined` in JS.
# This will probably change in a future release to be just regular TOML instead. It is a holdover from the CLI argument parsing.
"process.env.bagel" = "'lox'"

----------------------------------------

TITLE: Running Hono Development Server with Bun in Shell
DESCRIPTION: This shell command demonstrates how to start the development server for a Hono project using Bun. After running this command, the server will be accessible at localhost:3000.

LANGUAGE: shell
CODE:
$ bun run dev

----------------------------------------

TITLE: Initializing Discord Bot Project with Bun
DESCRIPTION: Creates a new directory for the bot project and initializes it with Bun.

LANGUAGE: sh
CODE:
$ mkdir my-bot
$ cd my-bot
$ bun init

----------------------------------------

TITLE: Running Performance Analysis Script for Bun CSS HMR
DESCRIPTION: This command executes a Node.js script to analyze CSS Hot Module Replacement (HMR) frame times for the Bun project. It sets the SLEEP_INTERVAL to 8 and the PROJECT to 'bun'.

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=8 PROJECT=bun node read-frames.js

----------------------------------------

TITLE: Using Bun.ArrayBufferSink in TypeScript
DESCRIPTION: This example shows how to use Bun.ArrayBufferSink, a fast incremental writer for constructing an ArrayBuffer of unknown size in TypeScript.

LANGUAGE: typescript
CODE:
const sink = new Bun.ArrayBufferSink();

sink.write("h");
sink.write("e");
sink.write("l");
sink.write("l");
sink.write("o");

sink.end();
// ArrayBuffer(5) [ 104, 101, 108, 108, 111 ]

----------------------------------------

TITLE: Initializing SvelteKit Project with Bun CLI
DESCRIPTION: Creates a new SvelteKit project using the Svelte CLI with Bun as the package manager. Shows the interactive setup process including template selection and TypeScript configuration.

LANGUAGE: sh
CODE:
$ bunx sv create my-app
┌  Welcome to the Svelte CLI! (v0.5.7)
│
◇  Which template would you like?
│  SvelteKit demo
│
◇  Add type checking with Typescript?
│  Yes, using Typescript syntax
│
◆  Project created
│
◇  What would you like to add to your project?
│  none
│
◇  Which package manager do you want to install dependencies with?
│  bun
│
◇  Successfully installed dependencies
│
◇  Project next steps ─────────────────────────────────────────────────────╮
│                                                                          │
│  1: cd my-app                                                            │
│  2: git init && git add -A && git commit -m "Initial commit" (optional)  │
│  3: bun run dev -- --open                                                │
│                                                                          │
│  To close the dev server, hit Ctrl-C                                     │
│                                                                          │
│  Stuck? Visit us at https://svelte.dev/chat                              │
│                                                                          │
├──────────────────────────────────────────────────────────────────────────╯
│
└  You're all set!

----------------------------------------

TITLE: Efficient Streaming Using Blob
DESCRIPTION: A more efficient approach that uses Blob to create a ReadableStream from a Uint8Array. This method enables true streaming of the data in chunks.

LANGUAGE: typescript
CODE:
const arr = new Uint8Array(64);
const blob = new Blob([arr]);
const stream = blob.stream();

----------------------------------------

TITLE: Configuring Root Package.json for Workspaces
DESCRIPTION: Example of root package.json configuration showing workspace configuration and dependency declaration using workspace protocol.

LANGUAGE: json
CODE:
{
  "name": "my-project",
  "version": "1.0.0",
  "workspaces": ["packages/*"],
  "devDependencies": {
    "example-package-in-monorepo": "workspace:*"
  }
}

----------------------------------------

TITLE: High-Precision Timing with Bun.nanoseconds() in TypeScript
DESCRIPTION: Shows how to use Bun.nanoseconds() for high-precision timing in TypeScript, returning nanoseconds since process start.

LANGUAGE: typescript
CODE:
Bun.nanoseconds();
// => 7288958

----------------------------------------

TITLE: Installing Bun using Homebrew
DESCRIPTION: This command installs Bun using Homebrew on macOS and Linux.

LANGUAGE: bash
CODE:
$ brew install oven-sh/bun/bun # for macOS and Linux

----------------------------------------

TITLE: Interpreting Benchmark Results
DESCRIPTION: Example output format for the benchmark results, showing the real, user, and sys times as generated by the 'time' command.

LANGUAGE: sh
CODE:
real <number>
user <number>
sys <number>

----------------------------------------

TITLE: Creating macOS Entitlements for JavaScript Runtime
DESCRIPTION: Defines the security entitlements required for JavaScript engine functionality, including JIT compilation and memory execution permissions.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
</dict>
</plist>

----------------------------------------

TITLE: Checking Outdated Dependencies in Specific Workspace with Bun
DESCRIPTION: Use the --filter flag to check for outdated dependencies in a specific workspace package within a Bun monorepo project.

LANGUAGE: bash
CODE:
bun outdated t* --filter @monorepo/types

----------------------------------------

TITLE: Running Express Server with Bun
DESCRIPTION: Command to start the Express.js server using Bun runtime.

LANGUAGE: sh
CODE:
$ bun server.ts

----------------------------------------

TITLE: Installing EdgeDB on Windows
DESCRIPTION: PowerShell command to install EdgeDB on Windows systems.

LANGUAGE: sh
CODE:
$ iwr https://ps1.edgedb.com -useb | iex

----------------------------------------

TITLE: Benchmarking Results for Next.js CSS Hot Reloading
DESCRIPTION: This snippet displays the performance metrics for Next.js v11.1.2 in CSS hot reloading. It includes frame time percentiles and the percentage of rendered frames, showing slower performance compared to bun.

LANGUAGE: bash
CODE:
 Next.js v11.1.2
 Saving every 16ms

 Frame time:
 50th percentile: 312ms
 75th percentile: 337.6ms
 90th percentile: 387.7ms
 95th percentile: 446.9ms
 99th percentile: 591.7ms
 Rendered frames: 64 / 1024 (6%)

----------------------------------------

TITLE: Creating Worker from Blob URL
DESCRIPTION: Example of creating a Worker from a Blob URL with TypeScript code

LANGUAGE: javascript
CODE:
const blob = new Blob([
  `
  self.onmessage = (event: MessageEvent) => postMessage(event.data)`
], {
  type: "application/typescript",
});
const url = URL.createObjectURL(blob);
const worker = new Worker(url);

----------------------------------------

TITLE: Building for Production
DESCRIPTION: Build the Vite application for production using Bun runtime.

LANGUAGE: bash
CODE:
$ bunx --bun vite build

----------------------------------------

TITLE: Creating UDP Socket in Bun
DESCRIPTION: Demonstrates how to create and bind a UDP socket with optional port specification using Bun.udpSocket().

LANGUAGE: typescript
CODE:
const socket = await Bun.udpSocket({})
console.log(socket.port); // assigned by the operating system

LANGUAGE: typescript
CODE:
const socket = await Bun.udpSocket({
  port: 41234
})
console.log(socket.port); // 41234

----------------------------------------

TITLE: Adding Overrides to package.json in Bun
DESCRIPTION: This snippet shows how to add an 'overrides' field to package.json to specify a version range for a metadependency. It demonstrates pinning the 'bar' package to version '~4.4.0'.

LANGUAGE: json-diff
CODE:
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "overrides": {
+     "bar": "~4.4.0"
+   }
  }

----------------------------------------

TITLE: Running Benchmark in Bun Runtime
DESCRIPTION: Command to execute the benchmark using the Bun JavaScript runtime

LANGUAGE: bash
CODE:
bun ./index.mjs

----------------------------------------

TITLE: Setting Timezone via Command Line
DESCRIPTION: Demonstrates how to set the timezone when running a Bun command through the command line interface.

LANGUAGE: shell
CODE:
$ TZ=America/New_York bun run dev

----------------------------------------

TITLE: Setting up Neon Postgres connection string
DESCRIPTION: Creates a .env.local file with the Neon Postgres connection string.

LANGUAGE: sh
CODE:
DATABASE_URL=postgresql://username:password@ep-adj-noun-guid.us-east-1.aws.neon.tech/neondb?sslmode=require

----------------------------------------

TITLE: Managing Lockfile Hashes
DESCRIPTION: Commands for generating and viewing lockfile hashes and hash strings.

LANGUAGE: bash
CODE:
$ bun pm hash
$ bun pm hash-string
$ bun pm hash-print

----------------------------------------

TITLE: Generating Test Certificate with OpenSSL and NPM
DESCRIPTION: Series of commands to generate a test certificate using OpenSSL and install required Node.js dependencies. The process includes creating an RSA key, extracting the public key, installing dependencies, and creating a certificate that excludes evil.example.com from the subjectAltName field.

LANGUAGE: console
CODE:
$ openssl genrsa -out 0-dns-key.pem 2048
Generating RSA private key, 2048 bit long modulus
...................+++
..............................................................................................+++
e is 65537 (0x10001)
$ openssl rsa -in 0-dns-key.pem -RSAPublicKey_out -outform der -out 0-dns-rsapub.der
writing RSA key
$ npm install
0-dns@1.0.0 /home/github/node/test/fixtures/0-dns
+-- asn1.js@4.9.1
| +-- bn.js@4.11.6
| +-- inherits@2.0.3
| `-- minimalistic-assert@1.0.0
`-- asn1.js-rfc5280@1.2.2

$ node ./createCert.js
$ openssl x509 -text -in 0-dns-cert.pem

----------------------------------------

TITLE: Running the query script with Bun
DESCRIPTION: Command to execute the query script using Bun and display the results.

LANGUAGE: sh
CODE:
$ bun run index.ts

----------------------------------------

TITLE: Reloading FileSystemRouter in TypeScript
DESCRIPTION: This snippet shows how to use the 'reload' method to re-scan the files in the directory after initialization.

LANGUAGE: typescript
CODE:
router.reload();

----------------------------------------

TITLE: CSS HMR Frame Time Performance Results
DESCRIPTION: Displays the results of the CSS Hot Module Replacement frame time analysis for the Bun project. It shows percentile measurements for frame times and the proportion of successfully rendered frames.

LANGUAGE: plaintext
CODE:
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 22.2ms 
 75th percentile: 23.9ms 
 90th percentile: 25.3ms 
 95th percentile: 43.6ms 
 99th percentile: 49.1ms 
 Rendered frames: 922 / 1024 (90%)

----------------------------------------

TITLE: Implementing WebSocket Event Handlers in Bun
DESCRIPTION: Shows the structure for implementing various WebSocket event handlers including message, open, close, and drain events.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    message(ws, message) {}, // a message is received
    open(ws) {}, // a socket is opened
    close(ws, code, message) {}, // a socket is closed
    drain(ws) {}, // the socket is ready to receive more data
  },
});

----------------------------------------

TITLE: Installing Project Dependencies
DESCRIPTION: Navigate to project directory and install dependencies using Bun.

LANGUAGE: bash
CODE:
cd my-app
bun install

----------------------------------------

TITLE: Initializing S3Client in Bun
DESCRIPTION: Shows how to initialize an S3Client with explicit credentials and options.

LANGUAGE: typescript
CODE:
import { S3Client } from "bun";

const client = new S3Client({
  accessKeyId: "your-access-key",
  secretAccessKey: "your-secret-key",
  bucket: "my-bucket",
  // sessionToken: "..."
  // acl: "public-read",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // endpoint: "https://<account-id>.r2.cloudflarestorage.com", // Cloudflare R2
  // endpoint: "https://<region>.digitaloceanspaces.com", // DigitalOcean Spaces
  // endpoint: "http://localhost:9000", // MinIO
});

// Bun.s3 is a global singleton that is equivalent to `new Bun.S3Client()`

----------------------------------------

TITLE: Updating package.json with Git Dependency in Bun
DESCRIPTION: This JSON diff shows how the package.json file is updated after adding a GitHub repository as a dependency. It adds the 'lodash' dependency with the GitHub repository as its source.

LANGUAGE: json
CODE:
{
  "dependencies": {
+   "lodash": "github:lodash/lodash"
  }
}

----------------------------------------

TITLE: Running Svelte Tests with Bun
DESCRIPTION: Shows the command to run tests using Bun's test runner after setting up the Svelte testing environment.

LANGUAGE: bash
CODE:
$ bun test

----------------------------------------

TITLE: Importing with Custom Loader in TypeScript
DESCRIPTION: Demonstrates how to explicitly specify a loader using the 'loader' import attribute.

LANGUAGE: typescript
CODE:
import my_toml from "./my_file" with { loader: "toml" };

----------------------------------------

TITLE: INI-Style Comments in Bun-flavored TOML
DESCRIPTION: Demonstrates the comment syntax in Bun-flavored TOML which supports both '#' and ';' as comment initiators for INI compatibility.

LANGUAGE: ini
CODE:
# This is a comment
; This is also a comment

----------------------------------------

TITLE: Initializing Bun project and installing dependencies
DESCRIPTION: Creates a new directory, initializes a Bun project, and installs Drizzle ORM and Neon serverless driver.

LANGUAGE: sh
CODE:
$ mkdir bun-drizzle-neon
$ cd bun-drizzle-neon
$ bun init -y
$ bun add drizzle-orm @neondatabase/serverless
$ bun add -D drizzle-kit

----------------------------------------

TITLE: Migrating Package Manager Lockfiles
DESCRIPTION: Migrates lockfiles from other package managers without installing packages.

LANGUAGE: bash
CODE:
$ bun pm migrate

----------------------------------------

TITLE: Implementing Counter Component with React Hooks
DESCRIPTION: A React functional component that implements a counter with increment and decrement functionality using the useState hook. The component renders a display of the current count and two buttons for incrementing and decrementing the value.

LANGUAGE: JavaScript
CODE:
import { useState } from "react";

export function Counter() {
  console.log('counter a');
  
  const [count, setCount] = useState(0);

  function increment() {
    setCount(count + 1);
  }

  function decrement() {
    setCount(count - 1);
  }

  return (
    <div id="counter-fixture" className="rounded-bl-full">
      <p>Count A: {count}</p>
      <button className="inc" onClick={increment}>
        +
      </button>
      <button className="dec" onClick={decrement}>
        -
      </button>
    </div>
  );
}

----------------------------------------

TITLE: Initializing a Bun project
DESCRIPTION: Commands to create a new directory and initialize a Bun project.

LANGUAGE: sh
CODE:
$ mkdir my-edgedb-app
$ cd my-edgedb-app
$ bun init -y

----------------------------------------

TITLE: Running Basic Bun Tests - Shell Command
DESCRIPTION: Basic command to execute tests using Bun's test runner

LANGUAGE: bash
CODE:
$ bun test

----------------------------------------

TITLE: Checking Test Failure Due to Insufficient Coverage
DESCRIPTION: This snippet shows how to run the test suite with coverage and check the exit code to determine if the coverage threshold was met. A non-zero exit code indicates that the threshold was not reached.

LANGUAGE: sh
CODE:
$ bun test --coverage
<test output>
$ echo $?
1 # this is the exit code of the previous command

----------------------------------------

TITLE: Batch UDP Packet Sending in Bun
DESCRIPTION: Demonstrates how to send multiple UDP packets in a single operation using sendMany() for both connected and unconnected sockets.

LANGUAGE: typescript
CODE:
const socket = await Bun.udpSocket({})
socket.sendMany(['Hello', 41234, '127.0.0.1', 'foo', 53, '1.1.1.1'])

LANGUAGE: typescript
CODE:
const socket = await Bun.udpSocket({
  connect: {
    port: 41234,
    hostname: 'localhost',
  }
});
socket.sendMany(['foo', 'bar', 'baz']);

----------------------------------------

TITLE: Running the Bun script to query Neon Postgres
DESCRIPTION: Command to execute the Bun script and its output, showing the Postgres version retrieved from the database.

LANGUAGE: sh
CODE:
$ bun ./index.ts
PostgreSQL 16.2 on x86_64-pc-linux-gnu, compiled by gcc (Debian 10.2.1-6) 10.2.1 20210110, 64-bit

----------------------------------------

TITLE: Writing to BunFile with Bun.write()
DESCRIPTION: Demonstrates using a BunFile object as the destination for writing data. The Bun.write() function writes to the path associated with the BunFile.

LANGUAGE: typescript
CODE:
const path = Bun.file("./file.txt");
await Bun.write(path, "Lorem ipsum");

----------------------------------------

TITLE: Updating package.json for Tarball Dependency
DESCRIPTION: This JSON diff shows the changes made to package.json after installing a tarball dependency. It adds the tarball URL as the version for the 'zod' package.

LANGUAGE: json
CODE:
{
  "dependencies": {
+   "zod": "https://registry.npmjs.org/zod/-/zod-3.21.4.tgz"
  }
}

----------------------------------------

TITLE: Responsive CSS Styling
DESCRIPTION: CSS styles for page layout, typography, and responsive design with media queries

LANGUAGE: css
CODE:
body {
    background-color: #f0f0f2;
    margin: 0;
    padding: 0;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
}
div {
    width: 600px;
    margin: 5em auto;
    padding: 2em;
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
}
a:link, a:visited {
    color: #38488f;
    text-decoration: none;
}
@media (max-width: 700px) {
    div {
        margin: 0 auto;
        width: auto;
    }
}

----------------------------------------

TITLE: Creating HTML Form for File Upload
DESCRIPTION: This HTML snippet defines a form with text input and file upload fields. The form is set to submit data to the '/action' endpoint using the POST method and multipart/form-data encoding.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Form</title>
  </head>
  <body>
    <form action="/action" method="post" enctype="multipart/form-data">
      <input type="text" name="name" placeholder="Name" />
      <input type="file" name="profilePicture" />
      <input type="submit" value="Submit" />
    </form>
  </body>
</html>

----------------------------------------

TITLE: Basic Coverage Configuration in bunfig.toml
DESCRIPTION: Configuration to enable coverage reporting by default in Bun tests using bunfig.toml.

LANGUAGE: toml
CODE:
[test]

# always enable coverage
coverage = true

----------------------------------------

TITLE: Package Publishing with Two-Factor Authentication
DESCRIPTION: Demonstrates publishing packages with 2FA enabled, using both web and legacy authentication types.

LANGUAGE: sh
CODE:
$ bun publish --auth-type legacy
...
This operation requires a one-time password.
Enter OTP: 123456
...

LANGUAGE: sh
CODE:
$ bun publish --otp 123456

----------------------------------------

TITLE: Drawing Bun Logo with ASCII Characters
DESCRIPTION: Text-based art representation of the Bun JavaScript runtime logo using ASCII characters, dots, dashes, and other text symbols to create a bunny-shaped visual design.

LANGUAGE: ascii-art
CODE:
           .---------.            
       .--'   o   .   `--.        
     .'@  @@@@@@    .   . `.      
  .'   . @@@@@@@@ @@@@@@     `.   
 / @@o    @@@@@@.  @@@@    O  @\  
 |@@@              @@@@@@    @@|  
/ @@@@   `.-.     @@@@@@@@    @@\ 
|@ @@               @@@@@@ @@   | 
\     @@    @   .()  @@   @@@@  / 
 |         @@@        @@@  @@  |  
 \  .  @@  @\  .     .  @@   o /  
  `.  @@@@  _\ /    .      o .'   
     `.     / |      o    .'      
       `--./   .      .--'        
           `---------'       

----------------------------------------

TITLE: Installing Bun TypeScript Definitions
DESCRIPTION: Command to install TypeScript type definitions for Bun as a development dependency.

LANGUAGE: sh
CODE:
$ bun add -d @types/bun # dev dependency

----------------------------------------

TITLE: Running Tests with Todo Items in Bun
DESCRIPTION: This snippet demonstrates the output of running 'bun test' when todo tests are present. It shows how the test runner indicates the number of todo tests encountered alongside passed and failed tests.

LANGUAGE: shell
CODE:
$ bun test

test.test.ts:
✓ add [0.03ms]
✓ multiply [0.02ms]
✎ unimplemented feature

 2 pass
 1 todo
 0 fail
 2 expect() calls
Ran 3 tests across 1 files. [74.00ms]

----------------------------------------

TITLE: Running DOM Tests with Bun
DESCRIPTION: Command to run tests using Bun's test runner, showing successful execution of a DOM test.

LANGUAGE: sh
CODE:
$ bun test

dom.test.ts:
✓ set button text [0.82ms]

 1 pass
 0 fail
 1 expect() calls
Ran 1 tests across 1 files. 1 total [125.00ms]

----------------------------------------

TITLE: Presigning URLs for S3 in Bun
DESCRIPTION: Shows how to generate presigned URLs for S3 files using Bun's S3 API, including setting ACLs and expiration times.

LANGUAGE: typescript
CODE:
import { s3 } from "bun";

// Generate a presigned URL that expires in 24 hours (default)
const download = s3.presign("my-file.txt"); // GET, text/plain, expires in 24 hours

const upload = s3.presign("my-file", {
  expiresIn: 3600, // 1 hour
  method: "PUT",
  type: "application/json", // No extension for inferring, so we can specify the content type to be JSON
});

// You can call .presign() if on a file reference, but avoid doing so
// unless you already have a reference (to avoid memory usage).
const myFile = s3.file("my-file.txt");
const presignedFile = myFile.presign({
  expiresIn: 3600, // 1 hour
});

----------------------------------------

TITLE: Starting Remix Development Server
DESCRIPTION: Demonstrates how to start the Remix development server using Bun. Note that this actually uses Node.js to run the server due to current Bun compatibility limitations.

LANGUAGE: sh
CODE:
$ cd my-app
$ bun run dev
  $ remix dev

  💿  remix dev

  info  building...
  info  built (263ms)
  Remix App Server started at http://localhost:3000 (http://172.20.0.143:3000)

----------------------------------------

TITLE: Installing Packages Without Lockfile
DESCRIPTION: Installs packages without generating a lockfile using the --no-save flag.

LANGUAGE: bash
CODE:
$ bun install --no-save

----------------------------------------

TITLE: Running StricJS Development Server with Bun
DESCRIPTION: Command to start the development server using Bun in watch mode, which automatically reloads on file changes.

LANGUAGE: bash
CODE:
$ bun --watch run index.ts

----------------------------------------

TITLE: Installing Bun Packages with Symlink Backend
DESCRIPTION: This bash snippet demonstrates how to install Bun packages using the symlink backend and run a Node.js script with the --preserve-symlinks flag. This is necessary when using symlinked dependencies to ensure proper module resolution.

LANGUAGE: bash
CODE:
$ bun install --backend symlink
$ node --preserve-symlinks ./foo.js

----------------------------------------

TITLE: Sourcing Visual Studio Shell Script
DESCRIPTION: Sources the Visual Studio shell script to set up the correct build environment.

LANGUAGE: powershell
CODE:
.\scripts\vs-shell.ps1

----------------------------------------

TITLE: Converting Node.js Readable to String Using Bun Response API
DESCRIPTION: Creates a Readable stream from a Buffer, wraps it in a Response object, and converts it to a string using response.text(). This approach leverages Bun's Web API implementation to handle stream conversion efficiently.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
const stream = Readable.from([Buffer.from("Hello, world!")]);
const text = await new Response(stream).text();
console.log(text); // "Hello, world!"

----------------------------------------

TITLE: Importing HTML File as Text in TypeScript with Bun
DESCRIPTION: Shows how to import an HTML file as a text string using Bun's import attributes. This method supports hot module reloading and watch mode, automatically reloading when the HTML file changes. Requires Bun v1.1.5 or later.

LANGUAGE: typescript
CODE:
import html from "./file.html" with { type: "text" };

console.log(html); // <!DOCTYPE html><html><head>...

----------------------------------------

TITLE: Removing Dependencies with Bun CLI
DESCRIPTION: This code snippet demonstrates how to use the Bun CLI to remove a dependency from a project. In this example, it shows the command to remove the 'ts-node' package.

LANGUAGE: bash
CODE:
$ bun remove ts-node

----------------------------------------

TITLE: Custom Checks with onAfterBundle Function
DESCRIPTION: Shows how to use the onAfterBundle function to perform custom checks on the bundled output.

LANGUAGE: typescript
CODE:
itBundled("default/ThisOutsideFunctionRenamedToExports", {
  files: {
    "/entry.js": /* js */ `
      console.log(this)
      console.log((x = this) => this)
      console.log({x: this})
      console.log(class extends this.foo {})
      console.log(class { [this.foo] })
      console.log(class { [this.foo]() {} })
      console.log(class { static [this.foo] })
      console.log(class { static [this.foo]() {} })
    `,
  },
  onAfterBundle(api) {
    if (api.readFile("/out.js").includes("this")) {
      throw new Error("All cases of `this` should have been rewritten to `exports`");
    }
  },
});

----------------------------------------

TITLE: Importing Specific Package Versions in Bun (TypeScript)
DESCRIPTION: Shows how to specify exact versions, npm tags, or semver ranges directly in import statements when using Bun's module resolution.

LANGUAGE: typescript
CODE:
import { z } from "zod@3.0.0"; // specific version
import { z } from "zod@next"; // npm tag
import { z } from "zod@^3.20.0"; // semver range

----------------------------------------

TITLE: Reading File Contents in TypeScript
DESCRIPTION: Shows various methods to read the contents of a BunFile instance.

LANGUAGE: typescript
CODE:
const foo = Bun.file("foo.txt");

await foo.text(); // contents as a string
await foo.stream(); // contents as ReadableStream
await foo.arrayBuffer(); // contents as ArrayBuffer
await foo.bytes(); // contents as Uint8Array

----------------------------------------

TITLE: Installing Happy DOM Dependencies
DESCRIPTION: Install Happy DOM global registrator as a dev dependency for DOM environment simulation

LANGUAGE: sh
CODE:
bun add -D @happy-dom/global-registrator

----------------------------------------

TITLE: Matching Routes with Query Parameters in TypeScript
DESCRIPTION: This example shows how to use the FileSystemRouter to match a route with query parameters. The router parses the query string and returns it in the 'query' property of the result.

LANGUAGE: typescript
CODE:
router.match("/settings?foo=bar");

// =>
{
  filePath: "/Users/colinmcd94/Documents/bun/fun/pages/settings.tsx",
  kind: "dynamic",
  name: "/settings",
  pathname: "/settings?foo=bar",
  src: "https://mydomain.com/_next/static/pages/settings.tsx",
  query: {
    foo: "bar"
  }
}

----------------------------------------

TITLE: Starting Nuxt Development Server with Bun
DESCRIPTION: This snippet shows how to start the Nuxt development server using Bun as the runtime. It demonstrates the command to run the server and displays the output, including local and network URLs for accessing the app.

LANGUAGE: sh
CODE:
$ cd my-nuxt-app
$ bun --bun run dev
 $ nuxt dev
Nuxi 3.6.5
Nuxt 3.6.5 with Nitro 2.5.2
  > Local:    http://localhost:3000/
  > Network:  http://192.168.0.21:3000/
  > Network:  http://[fd8a:d31d:481c:4883:1c64:3d90:9f83:d8a2]:3000/

✔ Nuxt DevTools is enabled v0.8.0 (experimental)
ℹ Vite client warmed up in 547ms
✔ Nitro built in 244 ms

----------------------------------------

TITLE: Running Deno Benchmark
DESCRIPTION: Command to execute the file upload benchmark using Deno runtime with all permissions enabled

LANGUAGE: bash
CODE:
deno run -A stream-file-deno.js

----------------------------------------

TITLE: Running SolidStart Development Server with Bun
DESCRIPTION: These commands start the development server for the SolidStart application. Note that this actually uses Node.js due to current API limitations in Bun.

LANGUAGE: sh
CODE:
$ bun run dev
# or, equivalently
$ bunx solid-start dev

----------------------------------------

TITLE: Creating Reactive Component with ArrowJS
DESCRIPTION: Defines a reactive component using ArrowJS integration in Stric. Exports a render function that creates a simple paragraph element and specifies the handling path.

LANGUAGE: typescript
CODE:
import { html } from '@stricjs/arrow/utils';

// Code inside this function can use web APIs
export function render() {
  // Render a <p> element with text 'Hi'
  html`<p>Hi</p>`;
};

// Set the path to handle
export const path = '/';

----------------------------------------

TITLE: Registering Happy DOM Global APIs in TypeScript
DESCRIPTION: TypeScript code to register Happy DOM's mocked browser APIs in the global scope.

LANGUAGE: ts
CODE:
import { GlobalRegistrator } from "@happy-dom/global-registrator";

GlobalRegistrator.register();

----------------------------------------

TITLE: Creating JSX Element in React with Bun
DESCRIPTION: Basic example of JSX syntax in Bun showing a simple element creation.

LANGUAGE: jsx
CODE:
const element = <h1>Hello, world!</h1>;

----------------------------------------

TITLE: Installing Bun Canary Build
DESCRIPTION: Upgrades Bun to the latest canary build, which is generated on every commit. This version may be less stable but contains the latest features and fixes.

LANGUAGE: bash
CODE:
$ bun upgrade --canary

----------------------------------------

TITLE: Configuring Bun Project Settings in TOML
DESCRIPTION: Complete Bun configuration file that specifies project framework, origin, npm scopes, bundle packages, cache directories, and development variables. Includes array and nested configurations for complex settings.

LANGUAGE: toml
CODE:
framework = "next"
origin = "http://localhost:5000"
inline.array = [1234, 4, 5, 6]

[macros]
react-relay = { "graphql" = "node_modules/bun-macro-relay/bun-macro-relay.tsx" }

[install.scopes]
"@mybigcompany2" = { "token" = "123456", "url" = "https://registry.mybigcompany.com" }
"@mybigcompany3" = { "token" = "123456", "url" = "https://registry.mybigcompany.com", "three" = 4 }

[install.scopes."@mybigcompany"]
token = "123456"
url = "https://registry.mybigcompany.com"

[bundle.packages]
"@emotion/react" = true

[install.cache]
dir = "C:\\Windows\\System32"
dir2 = "C:\\Windows\\System32\\🏳️‍🌈"

[dev]
foo = 123
"foo.bar" = "baz"
"abba.baba" = "baba"
dabba = -123
doo = 123.456
one.two.three = 4

[[array]]
entry_one = "one"
entry_two = "two"

[[array]]
entry_one = "three"

[[array.nested]]
entry_one = "four"

----------------------------------------

TITLE: Configuring Bun Project Settings in TOML
DESCRIPTION: Complete Bun configuration file that specifies project framework, origin, npm scopes, bundle packages, cache directories, and development variables. Includes array and nested configurations for complex settings.

LANGUAGE: toml
CODE:
framework = "next"
origin = "http://localhost:5000"
inline.array = [1234, 4, 5, 6]

[macros]
react-relay = { "graphql" = "node_modules/bun-macro-relay/bun-macro-relay.tsx" }

[install.scopes]
"@mybigcompany2" = { "token" = "123456", "url" = "https://registry.mybigcompany.com" }
"@mybigcompany3" = { "token" = "123456", "url" = "https://registry.mybigcompany.com", "three" = 4 }

[install.scopes."@mybigcompany"]
token = "123456"
url = "https://registry.mybigcompany.com"

[bundle.packages]
"@emotion/react" = true

[install.cache]
dir = "C:\\Windows\\System32"
dir2 = "C:\\Windows\\System32\\🏳️‍🌈"

[dev]
foo = 123
"foo.bar" = "baz"
"abba.baba" = "baba"
dabba = -123
doo = 123.456
one.two.three = 4

[[array]]
entry_one = "one"
entry_two = "two"

[[array]]
entry_one = "three"

[[array.nested]]
entry_one = "four"

----------------------------------------

TITLE: Writing Different Data Types to FileSink in TypeScript
DESCRIPTION: This example shows how to write different types of data to a FileSink, including strings, Buffer objects, and Uint8Array. It demonstrates the flexibility of the .write() method in handling various data formats.

LANGUAGE: typescript
CODE:
w.write("hello");
w.write(Buffer.from("there"));
w.write(new Uint8Array([0, 255, 128]));
writer.flush();

----------------------------------------

TITLE: Installing LLVM 19 on Ubuntu/Debian
DESCRIPTION: Installs LLVM 19 on Ubuntu or Debian using the official LLVM installation script.

LANGUAGE: bash
CODE:
$ wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 19 all

----------------------------------------

TITLE: Static Method Call
DESCRIPTION: Static method 'again' called on the Fhqwhgads class

LANGUAGE: javascript
CODE:
Fhqwhgads.again()

----------------------------------------

TITLE: Incremental Writing with FileSink in TypeScript
DESCRIPTION: Demonstrates how to use FileSink for incremental file writing, including flushing and closing the file.

LANGUAGE: typescript
CODE:
const file = Bun.file("output.txt");
const writer = file.writer();

writer.write("it was the best of times\n");
writer.write("it was the worst of times\n");

writer.flush(); // write buffer to disk

writer.end();

----------------------------------------

TITLE: Common systemd Commands for Managing Bun Application Service
DESCRIPTION: A cheatsheet of common systemd commands for managing the Bun application service, including reloading the daemon, enabling/disabling the service, and starting/stopping/restarting the application.

LANGUAGE: bash
CODE:
$ sudo systemctl daemon-reload # tell systemd that some files got changed
$ sudo systemctl enable my-app # enable the app (to allow auto-start)
$ sudo systemctl disable my-app # disable the app (turns off auto-start)
$ sudo systemctl start my-app # start the app if is stopped
$ sudo systemctl stop my-app # stop the app
$ sudo systemctl restart my-app # restart the app

----------------------------------------

TITLE: Starting Node.js Server
DESCRIPTION: Command to start the Node.js server that will receive file uploads

LANGUAGE: bash
CODE:
node server-node.mjs

----------------------------------------

TITLE: Rendering React Component to Stream
DESCRIPTION: Demonstrates how to render a React component to a readable HTML stream using renderToReadableStream

LANGUAGE: tsx
CODE:
import { renderToReadableStream } from "react-dom/server";

function Component(props: { message: string }) {
  return (
    <body>
      <h1>{props.message}</h1>
    </body>
  );
}

const stream = await renderToReadableStream(
  <Component message="Hello from server!" />,
);

----------------------------------------

TITLE: Synchronous File Content Appending
DESCRIPTION: Shows how to synchronously append data to a file using fs.appendFileSync with UTF-8 encoding specification.

LANGUAGE: typescript
CODE:
import { appendFileSync } from "node:fs";

appendFileSync("message.txt", "data to append", "utf8");

----------------------------------------

TITLE: Running Bun Development Server
DESCRIPTION: This npm script runs the Bun app in development mode, making it accessible at http://localhost:5173 in the browser.

LANGUAGE: bash
CODE:
npm run dev

----------------------------------------

TITLE: Creating CSS Module Files in Bun
DESCRIPTION: Demonstrates how to create CSS module files with the .module.css extension. These files allow for scoped class names to avoid collisions.

LANGUAGE: css
CODE:
/* styles.module.css */
.button {
  color: red;
}

/* other-styles.module.css */
.button {
  color: blue;
}

----------------------------------------

TITLE: Installing Dependencies for Svelte Testing in Bun
DESCRIPTION: Installs necessary packages for testing Svelte components with Bun, including @testing-library/svelte, svelte, and @happy-dom/global-registrator.

LANGUAGE: bash
CODE:
$ bun add @testing-library/svelte svelte@4 @happy-dom/global-registrator

----------------------------------------

TITLE: Manually Copying Bun Shell Completions
DESCRIPTION: This command allows users to manually copy Bun shell completions to a specified file. It outputs the completion script to stdout, which can then be redirected to a file of the user's choice.

LANGUAGE: shell
CODE:
bun completions > path-to-file

----------------------------------------

TITLE: Compressing Input to Output using zlib in C
DESCRIPTION: This function compresses input from a FILE pointer to a gzFile output using zlib. It reads data in chunks, compresses it, and writes the compressed data to the output file.

LANGUAGE: C
CODE:
void gz_compress(in, out)
    FILE   *in;
    gzFile out;
{
    local char buf[BUFLEN];
    int len;
    int err;

    for (;;) {
        len = (int)fread(buf, 1, sizeof(buf), in);
        if (ferror(in)) {
            perror("fread");
            exit(1);
        }
        if (len == 0) break;

        if (gzwrite(out, buf, (unsigned)len) != len) error(gzerror(out, &err));
    }
    fclose(in);
    if (gzclose(out) != Z_OK) error("failed gzclose");
}

----------------------------------------

TITLE: Appending File Content Using Callback API
DESCRIPTION: Shows how to append data to a file using the callback-based fs.appendFile function with error handling.

LANGUAGE: typescript
CODE:
import { appendFile } from "node:fs";

appendFile("message.txt", "data to append", err => {
  if (err) throw err;
  console.log('The "data to append" was appended to file!');
});

----------------------------------------

TITLE: Installing Dependencies for Bun Development on Fedora
DESCRIPTION: Uses dnf to install the required dependencies for building Bun on Fedora.

LANGUAGE: bash
CODE:
$ sudo dnf install cargo ccache cmake git golang libtool ninja-build pkg-config rustc ruby libatomic-static libstdc++-static sed unzip which libicu-devel 'perl(Math::BigInt)'

----------------------------------------

TITLE: Enabling a Bun Project Feature
DESCRIPTION: This snippet sets a boolean value to true, which likely enables a specific feature or setting in a Bun project configuration.

LANGUAGE: json
CODE:
true

----------------------------------------

TITLE: Basic DNS Resolution in Bun using node:dns
DESCRIPTION: Demonstrates how to resolve IPv4 addresses for a domain using the node:dns promises API with TTL information.

LANGUAGE: typescript
CODE:
import * as dns from "node:dns";

const addrs = await dns.promises.resolve4("bun.sh", { ttl: true });
console.log(addrs);
// => [{ address: "172.67.161.226", family: 4, ttl: 0 }, ...]

----------------------------------------

TITLE: Installing Dependencies for Expo App
DESCRIPTION: Command to install all required npm dependencies for the Expo application

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Running Single Bundler Test with Shell Script
DESCRIPTION: Demonstrates how to use a helper CLI script to run a single bundler test, with an option to use esbuild instead of bun build.

LANGUAGE: shell
CODE:
$ ./run-single-bundler-test.sh default/ExportMissingES6
$ ./run-single-bundler-test.sh default/ExportMissingES6 e

----------------------------------------

TITLE: Configuring Discord Bot Token in .env.local
DESCRIPTION: Sets up the Discord bot token in a local environment file for secure access.

LANGUAGE: txt
CODE:
DISCORD_TOKEN=NzkyNzE1NDU0MTk2MDg4ODQy.X-hvzA.Ovy4MCQywSkoMRRclStW4xAYK7I

----------------------------------------

TITLE: Building MDX-RS Addon Locally with Cargo
DESCRIPTION: Command to build the MDX-RS addon locally using Cargo in release mode.

LANGUAGE: sh
CODE:
cargo build --release

----------------------------------------

TITLE: CSS Import and Bundling Example
DESCRIPTION: Demonstration of CSS imports and bundling capabilities in Bun

LANGUAGE: css
CODE:
@import "./abc.css";

.container {
  background-color: blue;
}

LANGUAGE: css
CODE:
body {
  background-color: red;
}

----------------------------------------

TITLE: Viewing Untrusted Dependencies
DESCRIPTION: Displays current untrusted dependencies with their blocked scripts.

LANGUAGE: bash
CODE:
$ bun pm untrusted

./node_modules/@biomejs/biome @1.8.3
 » [postinstall]: node scripts/postinstall.js

These dependencies had their lifecycle scripts blocked during install.

----------------------------------------

TITLE: Checking Outdated Dependencies with --filter in Bun
DESCRIPTION: Examples of using the --filter flag with bun outdated to check for outdated dependencies in specific packages of a monorepo.

LANGUAGE: bash
CODE:
# Display outdated dependencies for workspaces starting with `pkg-`
$ bun outdated --filter 'pkg-*'

# Display outdated dependencies for only the root package.json
$ bun outdated --filter './'

----------------------------------------

TITLE: Creating Build Targets for TinyCC
DESCRIPTION: Creates build targets for the c2str utility and the TinyCC static library, including custom build commands and dependencies.

LANGUAGE: CMake
CODE:
add_executable(c2str.exe conftest.c)
target_compile_options(c2str.exe PRIVATE -DC2STR)

add_custom_command(
  TARGET
    c2str.exe POST_BUILD
  COMMAND
    c2str.exe include/tccdefs.h tccdefs_.h
  WORKING_DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}
)

add_library(tcc STATIC ${TCC_SOURCES})

add_custom_command(
  TARGET
    tcc PRE_BUILD
  COMMAND
    ${CMAKE_COMMAND} -E touch config.h
  WORKING_DIRECTORY
    ${CMAKE_CURRENT_SOURCE_DIR}
)

add_dependencies(tcc c2str.exe)

target_include_directories(tcc PUBLIC 
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/include
)

----------------------------------------

TITLE: TailwindCSS Plugin Configuration
DESCRIPTION: Configuration for enabling TailwindCSS in Bun.serve() using bunfig.toml and plugin setup.

LANGUAGE: toml
CODE:
[serve.static]
plugins = ["bun-plugin-tailwind"]

----------------------------------------

TITLE: Installing LLVM on openSUSE Tumbleweed
DESCRIPTION: Installs LLVM 19, Clang 19, and LLD 19 on openSUSE Tumbleweed using zypper.

LANGUAGE: bash
CODE:
$ sudo zypper install clang19 lld19 llvm19

----------------------------------------

TITLE: Appending File Content Using Promise-based API
DESCRIPTION: Demonstrates how to asynchronously append data to a file using the Promise-based fs.appendFile function. Creates the file if it doesn't exist.

LANGUAGE: typescript
CODE:
import { appendFile } from "node:fs/promises";

await appendFile("message.txt", "data to append");

----------------------------------------

TITLE: Running JavaScript with Compiled C Code using Bun
DESCRIPTION: This bash command demonstrates how to run the JavaScript file that compiles and executes the C code using Bun.

LANGUAGE: bash
CODE:
$ bun hello.js
What is the answer to the universe? 42

----------------------------------------

TITLE: Creating React Component with Bun
DESCRIPTION: Command to create a new React component development environment with hot reload support.

LANGUAGE: bash
CODE:
$ bun create ./MyComponent.jsx # .tsx also supported

----------------------------------------

TITLE: Running Express Server with Deno
DESCRIPTION: Command to start the Express server using the Deno runtime with all permissions allowed.

LANGUAGE: sh
CODE:
deno run -A ./express.mjs

----------------------------------------

TITLE: Starting Astro Dev Server with Bun Runtime
DESCRIPTION: Demonstrates how to start the Astro development server using Bun runtime instead of Node.js by utilizing the --bun flag.

LANGUAGE: sh
CODE:
$ bunx --bun astro dev
  🚀  astro  v3.1.4 started in 200ms

  ┃ Local    http://localhost:4321/
  ┃ Network  use --host to expose

----------------------------------------

TITLE: Installing Discord.js with Bun
DESCRIPTION: Installs the Discord.js library using Bun's package manager.

LANGUAGE: sh
CODE:
$ bun add discord.js

----------------------------------------

TITLE: Displaying CSS HMR Frame Time Analysis Results for Next.js
DESCRIPTION: This output shows the analysis results of CSS HMR frame times for a Next.js project. It displays various percentile measurements of frame times (50th, 75th, 90th, 95th, and 99th) and the number of rendered frames out of total frames.

LANGUAGE: plaintext
CODE:
next
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 312ms 
 75th percentile: 337.6ms 
 90th percentile: 387.7ms 
 95th percentile: 446.9ms 
 99th percentile: 591.7ms 
 Rendered frames: 64 / 1024 (6%)

----------------------------------------

TITLE: Client-Side Color Formatting with Bun Macros
DESCRIPTION: Example of using Bun's macro system to perform color formatting at bundle-time for client-side JavaScript builds.

LANGUAGE: typescript
CODE:
import { color } from "bun" with { type: "macro" };

console.log(color("#f00", "css"));

LANGUAGE: javascript
CODE:
// client-side.ts
console.log("red");

----------------------------------------

TITLE: Using setSystemTime with Lifecycle Hooks
DESCRIPTION: Shows how to use setSystemTime within a beforeAll lifecycle hook to set up a consistent time environment for all tests in a suite.

LANGUAGE: typescript
CODE:
import { test, expect, beforeAll, setSystemTime } from "bun:test";

beforeAll(() => {
  const date = new Date("1999-01-01T00:00:00.000Z");
  setSystemTime(date); // it's now January 1, 1999
});

// tests...

----------------------------------------

TITLE: Native Plugin Implementation in Rust
DESCRIPTION: Example of creating a native Bun plugin using Rust with NAPI bindings

LANGUAGE: rust
CODE:
use bun_native_plugin::{define_bun_plugin, OnBeforeParse, bun, Result, anyhow, BunLoader};
use napi_derive::napi;

define_bun_plugin!("replace-foo-with-bar");

#[bun]
pub fn replace_foo_with_bar(handle: &mut OnBeforeParse) -> Result<()> {
  let input_source_code = handle.input_source_code()?;
  let loader = handle.output_loader();
  let output_source_code = input_source_code.replace("foo", "bar");
  handle.set_output_source_code(output_source_code, BunLoader::BUN_LOADER_JSX);
  Ok(())
}

----------------------------------------

TITLE: Timer Management Functions in C
DESCRIPTION: High-precision timer implementation for event loops. Designed for efficient resource usage with one timer per loop rather than per socket.

LANGUAGE: c
CODE:
WIN32_EXPORT struct us_timer_t *us_create_timer(struct us_loop_t *loop, int fallthrough, unsigned int ext_size);

WIN32_EXPORT void *us_timer_ext(struct us_timer_t *timer);

/* Additional timer functions... */

----------------------------------------

TITLE: Code Signing Bun Standalone Executable on macOS
DESCRIPTION: Provides instructions for code signing a Bun standalone executable on macOS using the codesign command, including the recommended entitlements for JIT support.

LANGUAGE: bash
CODE:
$ codesign --deep --force -vvvv --sign "XXXXXXXXXX" ./myapp

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
</dict>
</plist>

LANGUAGE: bash
CODE:
$ codesign --deep --force -vvvv --sign "XXXXXXXXXX" --entitlements entitlements.plist ./myapp

----------------------------------------

TITLE: Verifying Clang-19 Installation
DESCRIPTION: Checks if Clang-19 is in the system PATH.

LANGUAGE: bash
CODE:
$ which clang-19

----------------------------------------

TITLE: Deleting a File with Bun.file() in TypeScript
DESCRIPTION: This snippet demonstrates how to delete a file using Bun.file() to create a BunFile instance and then calling the .delete() method. It requires specifying the file path and uses async/await for the deletion operation.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
const file = Bun.file(path);

await file.delete();

----------------------------------------

TITLE: Writing File Contents to Stdout using Bun
DESCRIPTION: Example showing how to read a file and write its contents to stdout using Bun's file I/O API. The code uses Bun.file() to open a file and Bun.write() to pipe its contents to Bun.stdout, which is exposed as a BunFile object.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
const file = Bun.file(path);
await Bun.write(Bun.stdout, file);

----------------------------------------

TITLE: Adding Optional Dependencies with Bun
DESCRIPTION: Using the '--optional' flag to add packages as optional dependencies in the 'optionalDependencies' section of package.json.

LANGUAGE: bash
CODE:
$ bun add --optional lodash

----------------------------------------

TITLE: Using ArrayStream Test Module
DESCRIPTION: Example showing how to use the ArrayStream module as a simple mock stream for testing

LANGUAGE: javascript
CODE:
const ArrayStream = require('../common/arraystream');
const stream = new ArrayStream();
stream.run(['a', 'b', 'c']);

----------------------------------------

TITLE: Configuring Minification in Bun's JavaScript API
DESCRIPTION: Shows how to configure minification options in Bun's JavaScript API. Bun supports both boolean and object formats for granular control.

LANGUAGE: typescript
CODE:
await Bun.build({
  entrypoints: ['./index.tsx'],
  // enable all minification
  minify: true

  // granular options
  minify: {
    identifiers: true,
    syntax: true,
    whitespace: true
  }
})

----------------------------------------

TITLE: Benchmarking Results for bun CSS Hot Reloading
DESCRIPTION: This snippet shows the performance metrics for bun v0.0.34 in CSS hot reloading. It includes frame time percentiles and the percentage of rendered frames.

LANGUAGE: bash
CODE:
 bun v0.0.34
 Saving every 16ms

 Frame time:
 50th percentile: 22.2ms
 75th percentile: 23.9ms
 90th percentile: 25.3ms
 95th percentile: 43.6ms
 99th percentile: 49.1ms
 Rendered frames: 922 / 1024 (90%)

----------------------------------------

TITLE: Setting Different Thresholds for Lines and Functions
DESCRIPTION: This snippet illustrates how to set different coverage thresholds for line-level (50%) and function-level (70%) coverage in the bunfig.toml configuration file.

LANGUAGE: toml
CODE:
[test]
# to set different thresholds for lines and functions
coverageThreshold = { lines = 0.5, functions = 0.7 }

----------------------------------------

TITLE: Resetting System Time in Bun Test
DESCRIPTION: Shows how to reset the system time back to the actual current time by calling setSystemTime with no arguments.

LANGUAGE: typescript
CODE:
import { test, expect, beforeAll, setSystemTime } from "bun:test";

setSystemTime(); // reset to actual time

----------------------------------------

TITLE: Fetching and Parsing HTML at Bundle-Time with Macro in TypeScript
DESCRIPTION: Shows an advanced macro that fetches a webpage, extracts meta tags using HTMLRewriter, and returns the parsed data at bundle-time.

LANGUAGE: typescript
CODE:
export async function extractMetaTags(url: string) {
  const response = await fetch(url);
  const meta = {
    title: "",
  };
  new HTMLRewriter()
    .on("title", {
      text(element) {
        meta.title += element.text;
      },
    })
    .on("meta", {
      element(element) {
        const name =
          element.getAttribute("name") || element.getAttribute("property") || element.getAttribute("itemprop");

        if (name) meta[name] = element.getAttribute("content");
      },
    })
    .transform(response);

  return meta;
}

----------------------------------------

TITLE: Building Bun Types Project
DESCRIPTION: Command to build the Bun types project after making changes to type definitions.

LANGUAGE: bash
CODE:
bun build

----------------------------------------

TITLE: Embedding SQLite Database in Bun Standalone Executable
DESCRIPTION: Demonstrates how to embed a SQLite database into a Bun standalone executable. The embedded database is read-write but changes are lost when the executable exits.

LANGUAGE: javascript
CODE:
import myEmbeddedDb from "./my.db" with { type: "sqlite", embed: "true" };

console.log(myEmbeddedDb.query("select * from users LIMIT 1").get());

----------------------------------------

TITLE: Checking Bun Build Version
DESCRIPTION: Verifies the successful build of Bun by checking its revision.

LANGUAGE: powershell
CODE:
.\build\debug\bun-debug.exe --revision

----------------------------------------

TITLE: Converting ArrayBuffer to Typed Array in TypeScript
DESCRIPTION: This snippet shows how to convert an ArrayBuffer obtained from a file read operation into a typed array (specifically an Int8Array). It demonstrates accessing individual elements and the length of the resulting typed array.

LANGUAGE: typescript
CODE:
const buffer = await file.arrayBuffer();
const bytes = new Int8Array(buffer);

bytes[0];
bytes.length;

----------------------------------------

TITLE: Copying File Contents using Bun.write() and BunFile
DESCRIPTION: This example shows how to copy the contents of one file to another using Bun.write(). It utilizes the BunFile class, which extends Blob, allowing direct use with Bun.write().

LANGUAGE: typescript
CODE:
const path = "./out.txt";
const data = Bun.file("./in.txt");

// write the contents of ./in.txt to ./out.txt
await Bun.write(path, data);

----------------------------------------

TITLE: Optimizing Memory Usage with --smol Flag in Bun CLI
DESCRIPTION: Use the --smol flag to reduce memory usage in memory-constrained environments, at the cost of performance due to more frequent garbage collection.

LANGUAGE: bash
CODE:
$ bun --smol run index.tsx

----------------------------------------

TITLE: Embedding Git Commit Hash Using Macro in TypeScript
DESCRIPTION: Demonstrates how to use a macro to embed the latest Git commit hash into the bundle at build time.

LANGUAGE: typescript
CODE:
export function getGitCommitHash() {
  const {stdout} = Bun.spawnSync({
    cmd: ["git", "rev-parse", "HEAD"],
    stdout: "pipe",
  });

  return stdout.toString();
}

----------------------------------------

TITLE: Running Bun Server
DESCRIPTION: This bash command runs the Bun server, which will start listening on http://localhost:4000.

LANGUAGE: bash
CODE:
$ bun run index.ts
Listening on http://localhost:4000

----------------------------------------

TITLE: Decoding Base64 Password in Browser Console
DESCRIPTION: This JavaScript snippet demonstrates how to decode a base64-encoded password using the browser console. It uses the atob() function to decode the password.

LANGUAGE: js
CODE:
atob("<base64-encoded password>");

----------------------------------------

TITLE: Running Bun Tests with Skipped Test Output
DESCRIPTION: This shell command demonstrates running Bun tests and shows the expected output when a test is skipped. It displays the number of passed, skipped, and failed tests, along with execution time.

LANGUAGE: shell
CODE:
$ bun test

test.test.ts:
✓ add [0.03ms]
✓ multiply [0.02ms]
» unimplemented feature

 2 pass
 1 skip
 0 fail
 2 expect() calls
Ran 3 tests across 1 files. [74.00ms]

----------------------------------------

TITLE: Using 'bun' Types via Global Bun Object in TypeScript
DESCRIPTION: Illustrates how to use types and functions declared for 'bun' through the global Bun object, providing an alternative to direct imports.

LANGUAGE: typescript
CODE:
const myInterface: Bun.MyInterface = {};
const myType: Bun.MyType = "cool";
Bun.myFunction();

----------------------------------------

TITLE: Registering Bun Native Plugin in JavaScript
DESCRIPTION: Example of how to register and use a compiled Bun native plugin in a JavaScript build configuration.

LANGUAGE: javascript
CODE:
const result = await Bun.build({
  entrypoints: ["index.ts"],
  plugins: [
    {
      name: "replace-foo-with-bar",
      setup(build) {
        const napiModule = require("path/to/napi_module.node");

        // Register the `onBeforeParse` hook to run on all `.ts` files.
        // We tell it to use function we implemented inside of our `lib.rs` code.
        build.onBeforeParse(
          { filter: /\.ts/ },
          { napiModule, symbol: "replace_foo_with_bar" },
        );
      },
    },
  ],
});

----------------------------------------

TITLE: Measuring String Width with Bun.stringWidth() in TypeScript
DESCRIPTION: Shows how to use Bun.stringWidth() to get the column count of a string as displayed in a terminal, supporting ANSI, emoji, and wide characters.

LANGUAGE: typescript
CODE:
Bun.stringWidth("hello"); // => 5
Bun.stringWidth("\u001b[31mhello\u001b[0m"); // => 5
Bun.stringWidth("\u001b[31mhello\u001b[0m", { countAnsiEscapeCodes: true }); // => 12

----------------------------------------

TITLE: Enabling Script Execution in PowerShell
DESCRIPTION: Sets the execution policy to allow running scripts for the current user.

LANGUAGE: powershell
CODE:
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

----------------------------------------

TITLE: Using Relative Paths with Bun.file()
DESCRIPTION: Demonstrates using relative paths with Bun.file(), which are resolved relative to the project root (nearest directory containing a package.json file).

LANGUAGE: typescript
CODE:
const path = "./file.txt";
const file = Bun.file(path);

----------------------------------------

TITLE: Creating V8 Heap Snapshot using Bun
DESCRIPTION: This snippet demonstrates how to create a V8 heap snapshot file with an auto-generated name using Bun's implementation of the V8 heap snapshot API. It imports the v8 module from node and uses the writeHeapSnapshot() function to generate the snapshot.

LANGUAGE: typescript
CODE:
import v8 from "node:v8";

// Creates a heap snapshot file with an auto-generated name
const snapshotPath = v8.writeHeapSnapshot();
console.log(`Heap snapshot written to: ${snapshotPath}`);

----------------------------------------

TITLE: Executing Code from Stdin with Bun CLI
DESCRIPTION: Use 'bun run -' to execute JavaScript, TypeScript, TSX, or JSX code piped from stdin without creating temporary files.

LANGUAGE: bash
CODE:
$ echo "console.log('Hello')" | bun run -
Hello

----------------------------------------

TITLE: HMR Dispose Handler Implementation
DESCRIPTION: Shows how to implement a dispose handler that will be removed in production builds. Demonstrates Bun's dead-code elimination capabilities.

LANGUAGE: typescript
CODE:
import.meta.hot.dispose(() => {
  console.log("dispose");
});

----------------------------------------

TITLE: Starting Dev Server
DESCRIPTION: Command to start the development server using Bun.

LANGUAGE: sh
CODE:
$ bun index.html

----------------------------------------

TITLE: TailwindCSS Plugin Configuration in Bunfig
DESCRIPTION: Configuration for Bun's TailwindCSS plugin in bunfig.toml file.

LANGUAGE: toml
CODE:
[serve.static]
plugins = ["bun-plugin-tailwind"]

----------------------------------------

TITLE: Referencing 'bun' Types in Ambient Declarations
DESCRIPTION: Demonstrates two equivalent ways to reference types from the 'bun' module within ambient declarations, using import type or the global Bun object.

LANGUAGE: typescript
CODE:
// These are equivalent
type A = import("bun").MyType;
type A = Bun.MyType;

----------------------------------------

TITLE: Specifying bun-mdx-rs Binary Architecture in Markdown
DESCRIPTION: This snippet defines the specific architecture and platform for the bun-mdx-rs binary using a markdown header and emphasized text.

LANGUAGE: markdown
CODE:
# `bun-mdx-rs-linux-x64-gnu`

This is the **x86_64-unknown-linux-gnu** binary for `bun-mdx-rs`

----------------------------------------

TITLE: Compiling C++ Objects for Bun
DESCRIPTION: Builds the C++ components of Bun, producing bun-cpp-objects.a. WebKit is automatically downloaded if WEBKIT_DIR is not specified. Requires submodule headers but not their build artifacts.

LANGUAGE: sh
CODE:
cd tmp2

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DBUN_CPP_ONLY=1 \

bash compile-cpp-only.sh

----------------------------------------

TITLE: Git Dependencies in package.json
DESCRIPTION: Examples of Git dependencies specified in package.json, showcasing different protocols and repository references.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "dayjs": "git+https://github.com/iamkun/dayjs.git",
    "lodash": "git+ssh://github.com/lodash/lodash.git#4.17.21",
    "moment": "git@github.com:moment/moment.git",
    "zod": "github:colinhacks/zod"
  }
}

----------------------------------------

TITLE: Unreferencing FileSink in TypeScript
DESCRIPTION: Demonstrates how to unref and re-ref a FileSink instance to control process lifecycle.

LANGUAGE: typescript
CODE:
writer.unref();

// to "re-ref" it later
writer.ref();

----------------------------------------

TITLE: Input Code for Property Replacement
DESCRIPTION: This TypeScript snippet shows the input code that uses console.write, which will be replaced by Bun.

LANGUAGE: ts
CODE:
console.write("Hello, world!");

----------------------------------------

TITLE: Defining and Running Package.json Scripts with Bun
DESCRIPTION: Define scripts in package.json and execute them using Bun. Scripts are run in a subshell, with Bun checking for bash, sh, or zsh on Linux & macOS.

LANGUAGE: json
CODE:
{
  "scripts": {
    "clean": "rm -rf dist && echo 'Done.'",
    "dev": "bun server.ts"
  }
}

LANGUAGE: bash
CODE:
$ bun run clean
 $ rm -rf dist && echo 'Done.'
 Cleaning...
 Done.

----------------------------------------

TITLE: HMR Event Handling Implementation
DESCRIPTION: Shows how to implement event listeners for HMR lifecycle events using the on() method.

LANGUAGE: typescript
CODE:
import.meta.hot.on("bun:beforeUpdate", () => {
  console.log("before a hot update");
});

----------------------------------------

TITLE: Contributing to bun-plugin-yaml
DESCRIPTION: Bash commands for setting up the project and running tests when contributing to bun-plugin-yaml.

LANGUAGE: bash
CODE:
$ bun install # project setup
$ bun test # run tests

----------------------------------------

TITLE: Asynchronous Sleep Function in TypeScript
DESCRIPTION: Shows how to use Bun.sleep() for asynchronous waiting in TypeScript.

LANGUAGE: typescript
CODE:
console.log("hello");
await Bun.sleep(1000);
console.log("hello one second later!");

----------------------------------------

TITLE: Local Template Configuration
DESCRIPTION: Package.json configuration for local Bun templates with pre and post-install scripts.

LANGUAGE: json
CODE:
{
  "name": "@bun-examples/simplereact",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  },
  "bun-create": {
    "preinstall": "echo 'Installing...'",
    "postinstall": ["echo 'Done!'"],
    "start": "bun run echo 'Hello world!'"
  }
}

----------------------------------------

TITLE: Configuring Bun Build with Svelte Plugin
DESCRIPTION: TypeScript configuration for bundling Svelte components using Bun.build with sourcemap and development options.

LANGUAGE: typescript
CODE:
// build.ts
// to use: bun run build.ts
import { SveltePlugin } from "bun-plugin-svelte"; // NOTE: not published to npm yet

Bun.build({
  entrypoints: ["src/index.ts"],
  outdir: "dist",
  target: "browser",
  sourcemap: true, // sourcemaps not yet supported
  plugins: [
    SveltePlugin({
      development: true, // turn off for prod builds. Defaults to false
    }),
  ],
});

----------------------------------------

TITLE: Redirection and Piping Examples
DESCRIPTION: Shows how to use redirection operators and piping with both files and JavaScript objects.

LANGUAGE: javascript
CODE:
import { $ } from "bun";

const buffer = Buffer.alloc(100);
await $`echo "Hello World!" > ${buffer}`;

const response = new Response("hello i am a response body");
const result = await $`cat < ${response} | wc -w`.text();

console.log(result); // 6\n

----------------------------------------

TITLE: Compiling Zig Object for Bun
DESCRIPTION: Builds the Zig component of Bun, producing bun-zig.o. Does not require WebKit or other dependencies, only needs bun install to be run. Supports cross-compilation and uses CMake with Ninja generator.

LANGUAGE: sh
CODE:
BUN_REPO=/path/to/oven-sh/bun

cd tmp1

cmake $BUN_REPO \
  -G Ninja \
  -DCMAKE_BUILD_TYPE=Release \
  -DCPU_TARGET=\"native\" \
  -DZIG_TARGET=\"native\" \
  -DBUN_ZIG_OBJ_DIR=\"./build\"

ninja ./build/bun-zig.o

----------------------------------------

TITLE: Excluding @types Packages from Outdated Check in Bun
DESCRIPTION: Use a negation glob pattern to exclude all @types packages from the outdated dependency check in Bun.

LANGUAGE: bash
CODE:
bun outdated '!@types/*'

----------------------------------------

TITLE: Accessing Standard Streams in TypeScript
DESCRIPTION: Shows how to access stdin, stdout, and stderr as BunFile instances.

LANGUAGE: typescript
CODE:
Bun.stdin; // readonly
Bun.stdout;
Bun.stderr;

----------------------------------------

TITLE: Replacing Properties Using --define
DESCRIPTION: This shell command shows how to use --define to replace a property (console.write) with another property (console.log).

LANGUAGE: sh
CODE:
bun --define console.write=console.log src/index.ts

----------------------------------------

TITLE: Registering a Local Package with Bun Link
DESCRIPTION: This snippet demonstrates how to register a local package as linkable using the 'bun link' command. It shows the package.json content and the output of the bun link command.

LANGUAGE: bash
CODE:
$ cd /path/to/cool-pkg
$ cat package.json
{
  "name": "cool-pkg",
  "version": "1.0.0"
}
$ bun link
bun link v1.x (7416672e)
Success! Registered "cool-pkg"

To use cool-pkg in a project, run:
  bun link cool-pkg

Or add it in dependencies in your package.json file:
  "cool-pkg": "link:cool-pkg"

----------------------------------------

TITLE: Installing Bun Lambda Layer
DESCRIPTION: Commands to clone the repository, set up sparse checkout for bun-lambda package, and publish the layer to AWS

LANGUAGE: sh
CODE:
git clone --filter=blob:none --sparse https://github.com/oven-sh/bun.git
git -C bun sparse-checkout set packages/bun-lambda
cd bun/packages/bun-lambda
bun install
bun run publish-layer

----------------------------------------

TITLE: Running Scripts and Executables with bun
DESCRIPTION: This snippet shows how to use bun to run package.json scripts, executables from node_modules/.bin, and JavaScript/TypeScript files. It replaces npm run, npx, and node commands.

LANGUAGE: sh
CODE:
# Run a package.json script:
$ bun my-script
$ bun run my-script

# Run an executable in node_modules/.bin:
$ bun my-executable # such as tsc, esbuild, etc.
$ bun run my-executable

# Run a JavaScript/TypeScript file:
$ bun ./index.ts

----------------------------------------

TITLE: Seeding data into the database with Drizzle ORM
DESCRIPTION: Creates a seed script that inserts sample data into the 'authors' table using Drizzle ORM.

LANGUAGE: ts
CODE:
import { db } from "./db";
import * as schema from "./schema";

async function seed() {
  await db.insert(schema.authors).values([
    {
      name: "J.R.R. Tolkien",
      bio: "The creator of Middle-earth and author of The Lord of the Rings.",
    },
    {
      name: "George R.R. Martin",
      bio: "The author of the epic fantasy series A Song of Ice and Fire.",
    },
    {
      name: "J.K. Rowling",
      bio: "The creator of the Harry Potter series.",
    },
  ]);
}

async function main() {
  try {
    await seed();
    console.log("Seeding completed");
  } catch (error) {
    console.error("Error during seeding:", error);
    process.exit(1);
  }
}

main();

----------------------------------------

TITLE: Running Bun tests with preload setup script
DESCRIPTION: This command shows how to use the --preload option when running Bun tests to execute a setup script before any test files.

LANGUAGE: typescript
CODE:
$ bun test --preload ./setup.ts

----------------------------------------

TITLE: Modifying Bun Build Configuration with Plugins
DESCRIPTION: Shows how to read and modify the Bun build configuration within a plugin's setup function.

LANGUAGE: typescript
CODE:
await Bun.build({
  entrypoints: ["./app.ts"],
  outdir: "./dist",
  sourcemap: "external",
  plugins: [
    {
      name: "demo",
      setup(build) {
        console.log(build.config.sourcemap); // "external"

        build.config.minify = true; // enable minification

        console.log(`Number of plugins: ${build.config.plugins.length}`);
      },
    },
  ],
});

----------------------------------------

TITLE: Using Error.captureStackTrace in Bun
DESCRIPTION: This TypeScript snippet demonstrates the use of Error.captureStackTrace to capture a stack trace at a specific point in the code, rather than where the error was thrown.

LANGUAGE: typescript
CODE:
const fn = () => {
  function myInner() {
    throw err;
  }

  try {
    myInner();
  } catch (err) {
    console.log(err.stack);
    console.log("");
    console.log("-- captureStackTrace --");
    console.log("");
    Error.captureStackTrace(err, fn);
    console.log(err.stack);
  }
};

fn();

----------------------------------------

TITLE: Using Glob Patterns to Check Outdated Packages in Bun
DESCRIPTION: Apply glob patterns to check for outdated packages matching a specific pattern. This example checks all packages starting with 'eslint'.

LANGUAGE: bash
CODE:
bun outdated 'eslint*'

----------------------------------------

TITLE: Installing Bun using Docker
DESCRIPTION: These commands pull the Bun Docker image and run a container with the necessary settings.

LANGUAGE: bash
CODE:
$ docker pull oven/bun
$ docker run --rm --init --ulimit memlock=-1:-1 oven/bun

----------------------------------------

TITLE: Accessing Replaced JSON Values
DESCRIPTION: This TypeScript snippet shows how the replaced JSON values can be accessed in the code, which will be optimized by Bun.

LANGUAGE: ts
CODE:
console.log(AWS.ACCESS_KEY); // => "abc"

----------------------------------------

TITLE: Installing Global Packages with Bun
DESCRIPTION: Command to install a package globally using Bun package manager.

LANGUAGE: bash
CODE:
$ bun install --global cowsay # or `bun install -g cowsay`
$ cowsay "Bun!"
 ______
< Bun! >
 ------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||

----------------------------------------

TITLE: Installing bun-plugin-yaml
DESCRIPTION: Command to install the bun-plugin-yaml as a development dependency using Bun package manager.

LANGUAGE: sh
CODE:
bun add bun-plugin-yaml -d

----------------------------------------

TITLE: Iterator and Custom Class Formatting in JavaScript
DESCRIPTION: Examples of formatting Set and Map iterators, custom classes with properties, and special object representations.

LANGUAGE: javascript
CODE:
SetIterator { 
  1,
  "123",
  {
    a: [],
    str: "123123132",
    nr: 3453,
  },
}
MapIterator { 
  "key",
  "key_2",
}

----------------------------------------

TITLE: Managing Trusted Dependencies
DESCRIPTION: Commands for managing trusted dependencies and viewing default trusted dependencies list.

LANGUAGE: bash
CODE:
$ bun pm trust <names>
$ bun pm default-trusted

----------------------------------------

TITLE: HTML Escaping with Bun.escapeHTML() in TypeScript
DESCRIPTION: Demonstrates how to escape HTML special characters using Bun.escapeHTML() in TypeScript.

LANGUAGE: typescript
CODE:
Bun.escapeHTML("<script>alert('XSS')</script>");
// => "&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;"

----------------------------------------

TITLE: Creating a Response with an Async Generator in TypeScript
DESCRIPTION: This example shows how to create a Response object using an async generator function as a source for a ReadableStream in TypeScript.

LANGUAGE: typescript
CODE:
const response = new Response(async function* () {
  yield "hello";
  yield "world";
}());

await response.text(); // "helloworld"

----------------------------------------

TITLE: Importing JSON and TOML in TypeScript
DESCRIPTION: Shows how to import JSON and TOML files as JavaScript objects in a TypeScript environment using Bun's built-in support for these file formats.

LANGUAGE: typescript
CODE:
import pkg from "./package.json";
import bunfig from "./bunfig.toml";

----------------------------------------

TITLE: Importing YAML Data in TypeScript
DESCRIPTION: Example of importing data from a YAML file in a TypeScript React component.

LANGUAGE: typescript
CODE:
import data from "./data.yaml";

export function Component() {
  return <div>{data.name}</div>;
}

----------------------------------------

TITLE: Publishing with Access Configuration
DESCRIPTION: Examples of setting package access levels using the --access flag and through package.json configuration.

LANGUAGE: sh
CODE:
$ bun publish --access public

LANGUAGE: json
CODE:
{
  "publishConfig": {
    "access": "restricted"
  }
}

----------------------------------------

TITLE: Setting Default Registry in bunfig.toml for Bun
DESCRIPTION: This snippet shows the equivalent configuration for setting the default registry in Bun's bunfig.toml format. It uses the install.registry option to specify the registry URL.

LANGUAGE: toml
CODE:
install.registry = "http://localhost:4873/"

----------------------------------------

TITLE: Demonstrating Static Value Optimization in TypeScript
DESCRIPTION: This TypeScript code shows how Bun uses statically-known values for dead code elimination and optimizations. It includes an if-else statement based on `process.env.NODE_ENV`.

LANGUAGE: ts
CODE:
if (process.env.NODE_ENV === "production") {
  console.log("Production mode");
} else {
  console.log("Development mode");
}

----------------------------------------

TITLE: Upgrading Bun
DESCRIPTION: This command upgrades Bun to the latest stable version.

LANGUAGE: bash
CODE:
$ bun upgrade

----------------------------------------

TITLE: Integrating MDX-RS Addon with Bun Build Process
DESCRIPTION: JavaScript code demonstrating how to use the MDX-RS addon in a Bun build configuration. It imports the necessary modules, sets up the build options including the MDX plugin, and executes the build process.

LANGUAGE: javascript
CODE:
import { build } from "bun";
import mdx from "./index.js";

// TODO: This needs to be prebuilt for the current platform
// Probably use a napi-rs template for this
import addon from "./target/release/libmdx_bun.dylib" with { type: "file" };

const results = await build({
  entrypoints: ["./hello.jsx"],
  plugins: [mdx({ addon })],
  minify: true,
  outdir: "./dist",
  define: {
    "process.env.NODE_ENV": JSON.stringify("production"),
  },
});

console.log(results);

----------------------------------------

TITLE: Executing Database Migrations with Drizzle ORM in Bun
DESCRIPTION: Script to execute all unexecuted migrations in the 'drizzle' directory using Drizzle ORM's migrator.

LANGUAGE: ts
CODE:
import { migrate } from "drizzle-orm/bun-sqlite/migrator";

import { drizzle } from "drizzle-orm/bun-sqlite";
import { Database } from "bun:sqlite";

const sqlite = new Database("sqlite.db");
const db = drizzle(sqlite);
migrate(db, { migrationsFolder: "./drizzle" });

----------------------------------------

TITLE: DNS Prefetching and Preconnecting in Bun
DESCRIPTION: Demonstrates how to use Bun's DNS prefetching and preconnect APIs to optimize network performance. These features can reduce latency by performing DNS lookups and establishing connections in advance.

LANGUAGE: typescript
CODE:
import { dns } from "bun";

dns.prefetch("bun.sh");

import { fetch } from "bun";

fetch.preconnect("https://bun.sh");

----------------------------------------

TITLE: Seeding data in EdgeDB using TypeScript
DESCRIPTION: TypeScript code to insert movie data into EdgeDB using the JavaScript client.

LANGUAGE: ts
CODE:
import { createClient } from "edgedb";

const client = createClient();

const INSERT_MOVIE = `
  with movies := <array<tuple<title: str, year: int64>>>$movies
  for movie in array_unpack(movies) union (
    insert Movie {
      title := movie.title,
      releaseYear := movie.year,
    }
  )
`;

const movies = [
  { title: "The Matrix", year: 1999 },
  { title: "The Matrix Reloaded", year: 2003 },
  { title: "The Matrix Revolutions", year: 2003 },
];

await client.execute(INSERT_MOVIE, { movies });

console.log(`Seeding complete.`);
process.exit();

----------------------------------------

TITLE: Watch Mode Server Example
DESCRIPTION: Example of a simple server implementation with watch mode enabled

LANGUAGE: bash
CODE:
$ bun run --watch watchy.tsx

LANGUAGE: tsx
CODE:
import { serve } from "bun";
console.log("I restarted at:", Date.now());

serve({
  port: 4003,

  fetch(request) {
    return new Response("Sup");
  },
});

----------------------------------------

TITLE: Two-Step Package Publishing with Pack and Publish
DESCRIPTION: Shows how to separately pack and publish a package using bun pm pack followed by bun publish with a tarball path.

LANGUAGE: sh
CODE:
$ bun pm pack
...
$ bun publish ./package.tgz

----------------------------------------

TITLE: Configuring Registry-Specific Options in .npmrc for Bun
DESCRIPTION: This snippet shows how to configure options for a specific registry in the .npmrc file. It includes examples of setting an auth token, username and password, and combined auth string for a registry.

LANGUAGE: ini
CODE:
//http://localhost:4873/:_authToken=${NPM_TOKEN}

//http://localhost:4873/:username=myusername

//http://localhost:4873/:_password=${NPM_PASSWORD}

//http://localhost:4873/:_auth=${NPM_AUTH}

----------------------------------------

TITLE: Handling Directory Watcher Termination in Bun (TypeScript)
DESCRIPTION: This code demonstrates how to stop listening for changes by calling watcher.close(). It also shows how to handle the SIGINT signal when the user presses Ctrl-C to terminate the process.

LANGUAGE: typescript
CODE:
import { watch } from "fs";

const watcher = watch(import.meta.dir, (event, filename) => {
  console.log(`Detected ${event} in ${filename}`);
});

process.on("SIGINT", () => {
  // close watcher when Ctrl-C is pressed
  console.log("Closing watcher...");
  watcher.close();

  process.exit(0);
});

----------------------------------------

TITLE: Upgrading Bun to Canary Build
DESCRIPTION: This command upgrades Bun to the latest canary build for testing new features and bug fixes.

LANGUAGE: bash
CODE:
$ bun upgrade --canary

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install required project dependencies using Bun package manager

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Running Bun Tests - Command Examples
DESCRIPTION: Examples showing the two main ways to execute tests in the Bun project - direct file execution and using the test runner with node:test support.

LANGUAGE: bash
CODE:
bun <filename>\nbun test <filename>

----------------------------------------

TITLE: Building and Starting Remix Production Server
DESCRIPTION: Shows how to build the Remix application for production and start the production server using Bun commands.

LANGUAGE: sh
CODE:
$ bun run build
 $ remix build
 info  building... (NODE_ENV=production)
 info  built (158ms)
$ bun start
 $ remix-serve ./build/index.js
 [remix-serve] http://localhost:3000 (http://192.168.86.237:3000)

----------------------------------------

TITLE: Running Bun Test Suite
DESCRIPTION: Commands to run the Bun test suite using various methods.

LANGUAGE: powershell
CODE:
# Setup
bun i --cwd packages\bun-internal-test

# Run the entire test suite with reporter
# the package.json script "test" uses "build/debug/bun-debug.exe" by default
bun run test

# Run an individual test file:
bun-debug test node\fs
bun-debug test "C:\bun\test\js\bun\resolve\import-meta.test.js"

----------------------------------------

TITLE: Running Initial Snapshot Test Command
DESCRIPTION: Shell command example showing the first execution of a snapshot test, which creates a new snapshot file.

LANGUAGE: shell
CODE:
$ bun test test/snap
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [1.48ms]

 1 pass
 0 fail
 snapshots: +1 added
 1 expect() calls
Ran 1 tests across 1 files. [82.00ms]

----------------------------------------

TITLE: Running Discord Bot with Bun
DESCRIPTION: Executes the Discord bot using Bun and displays the bot's login confirmation.

LANGUAGE: sh
CODE:
$ bun run bot.ts
Ready! Logged in as my-bot#1234

----------------------------------------

TITLE: Resetting System Time in Bun Tests
DESCRIPTION: Shows how to reset the system time back to the actual time by calling setSystemTime without arguments.

LANGUAGE: typescript
CODE:
import { setSystemTime, expect, test } from "bun:test";

test("it was 2020, for a moment.", () => {
  setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
  expect(new Date().getFullYear()).toBe(2020);

  setSystemTime();

  expect(new Date().getFullYear()).toBeGreaterThan(2020);
});

----------------------------------------

TITLE: Installing Linux Kernel Update for Ubuntu 20.04
DESCRIPTION: Commands to check Linux kernel version and install Ubuntu hardware enablement kernel for better performance with Bun

LANGUAGE: bash
CODE:
# If this returns a version >= 5.6, you don't need to do anything
uname -r

# Install the official Ubuntu hardware enablement kernel
sudo apt install --install-recommends linux-generic-hwe-20.04

----------------------------------------

TITLE: Creating a ReadableStream from File in Bun
DESCRIPTION: Creates a ReadableStream from a file using Bun.file() function. The BunFile class extends Blob and enables lazy file reading in various formats.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

const stream = file.stream();

----------------------------------------

TITLE: Adding Resolutions to package.json in Bun
DESCRIPTION: This snippet demonstrates how to use the 'resolutions' field in package.json, which is Yarn's alternative to 'overrides'. It shows pinning the 'bar' package to version '~4.4.0'.

LANGUAGE: json-diff
CODE:
  {
    "name": "my-app",
    "dependencies": {
      "foo": "^2.0.0"
    },
+   "resolutions": {
+     "bar": "~4.4.0"
+   }
  }

----------------------------------------

TITLE: Running Benchmark in Deno
DESCRIPTION: Command to execute the benchmark using Deno runtime with all permissions enabled

LANGUAGE: bash
CODE:
deno run -A index.mjs

----------------------------------------

TITLE: Configuring Trusted Dependencies in package.json
DESCRIPTION: Shows how to add a trusted package to the trustedDependencies array in package.json to allow execution of lifecycle scripts for specific packages.

LANGUAGE: json
CODE:
  {
    "name": "my-app",
    "version": "1.0.0",
    "trustedDependencies": ["my-trusted-package"]
  }

----------------------------------------

TITLE: Writing HTTP Response to File in TypeScript
DESCRIPTION: Shows how to write the body of an HTTP response to a file using Bun.write().

LANGUAGE: typescript
CODE:
const response = await fetch("https://bun.sh");
await Bun.write("index.html", response);

----------------------------------------

TITLE: Adding an Optional Dependency with Bun CLI
DESCRIPTION: This command uses Bun's CLI to add 'zod' as an optional dependency to the project. The --optional flag specifies that the package should be added to the optionalDependencies section of package.json.

LANGUAGE: sh
CODE:
$ bun add zod --optional

----------------------------------------

TITLE: Adding .env.local to .gitignore
DESCRIPTION: Prevents the bot's private key from being checked into version control by adding it to .gitignore.

LANGUAGE: txt
CODE:
node_modules
.env.local

----------------------------------------

TITLE: Configuring preload script in bunfig.toml for Bun tests
DESCRIPTION: This TOML configuration snippet demonstrates how to add a preload script to the bunfig.toml file, eliminating the need to specify --preload every time tests are run.

LANGUAGE: toml
CODE:
[test]
preload = ["./setup.ts"]

----------------------------------------

TITLE: Committing Package Patches with Bun
DESCRIPTION: Examples of committing patches after making changes, including different ways to specify packages and customize patch file location.

LANGUAGE: bash
CODE:
# you can supply the path to the patched package
$ bun patch --commit node_modules/react

# ... or the package name and optionally the version
$ bun patch --commit react@17.0.2

# choose the directory to store the patch files
$ bun patch --commit react --patches-dir=mypatches

# `patch-commit` is available for compatibility with pnpm
$ bun patch-commit react

----------------------------------------

TITLE: Reading stdout from a Spawned Child Process in Bun
DESCRIPTION: Illustrates how to consume the stdout of a spawned child process as a ReadableStream and convert it to text. This example uses the 'echo' command and reads its output.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"]);

const output = await new Response(proc.stdout).text();
output; // => "hello"

----------------------------------------

TITLE: Initializing Bun Project
DESCRIPTION: Commands to create a new directory and initialize a Bun project using the bun init command.

LANGUAGE: bash
CODE:
$ mkdir quickstart
$ cd quickstart

$ bun init

----------------------------------------

TITLE: Running Install Benchmark with Lockfile in Online Mode
DESCRIPTION: This command compares the installation performance of Bun, pnpm, yarn, and npm with existing lockfiles in online mode. It uses hyperfine to run the benchmark, clearing node_modules before each run.

LANGUAGE: sh
CODE:
$ hyperfine --prepare 'rm -rf node_modules' --warmup 1 --runs 3 'bun install' 'pnpm install' 'yarn' 'npm install'

----------------------------------------

TITLE: Running Tests in Vitest
DESCRIPTION: Command to run tests using Vitest in run mode.

LANGUAGE: bash
CODE:
./node_modules/.bin/vitest --run expect-to-equal.vitest.test.js

----------------------------------------

TITLE: Relinking Bun with Custom JavaScriptCore Changes
DESCRIPTION: Instructions for recompiling JavaScriptCore, Bun's C++ bindings, and generating a new Bun binary with custom changes.

LANGUAGE: shell
CODE:
git submodule update --init --recursive
make jsc
zig build

----------------------------------------

TITLE: Cross-Platform Environment Configuration
DESCRIPTION: Package.json script configuration for cross-platform environment variable support

LANGUAGE: json
CODE:
"scripts": {
  "dev": "NODE_ENV=development bun --watch app.ts",
}

----------------------------------------

TITLE: Glob Class Interface Definition
DESCRIPTION: Defines the TypeScript interface for the Glob class and its scanning options.

LANGUAGE: typescript
CODE:
class Glob {
  scan(root: string | ScanOptions): AsyncIterable<string>;
  scanSync(root: string | ScanOptions): Iterable<string>;

  match(path: string): boolean;
}

interface ScanOptions {
  /**
   * The root directory to start matching from. Defaults to `process.cwd()`
   */
  cwd?: string;

  /**
   * Allow patterns to match entries that begin with a period (`.`).
   *
   * @default false
   */
  dot?: boolean;

  /**
   * Return the absolute path for entries.
   *
   * @default false
   */
  absolute?: boolean;

  /**
   * Indicates whether to traverse descendants of symbolic link directories.
   *
   * @default false
   */
  followSymlinks?: boolean;

  /**
   * Throw an error when symbolic link is broken
   *
   * @default false
   */
  throwErrorOnBrokenSymlink?: boolean;

  /**
   * Return only files.
   *
   * @default true
   */
  onlyFiles?: boolean;
}

----------------------------------------

TITLE: Running Bun Tests with Coverage Reporting
DESCRIPTION: This snippet shows how to run Bun tests with the --coverage flag to generate a code coverage report. It displays the test results and a summary of coverage percentages for functions and lines across all files.

LANGUAGE: sh
CODE:
$ bun test --coverage

test.test.ts:
✓ math > add [0.71ms]
✓ math > multiply [0.03ms]
✓ random [0.13ms]
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   66.67 |   77.78 |
 math.ts     |   50.00 |   66.67 |
 random.ts   |   50.00 |   66.67 |
-------------|---------|---------|-------------------

 3 pass
 0 fail
 3 expect() calls

----------------------------------------

TITLE: Using bun patch-commit Command with Custom Patches Directory
DESCRIPTION: Demonstrates how to use the 'bun patch-commit' command with a custom patches directory specified using the '--patches-dir' flag. This command is an alias for 'bun patch --commit' and is used to commit patches prepared with 'bun patch <pkg>'.

LANGUAGE: markdown
CODE:
{% bunCLIUsage command="patch-commit" /%}

----------------------------------------

TITLE: Scoping beforeAll hook to a test file in Bun test runner
DESCRIPTION: This snippet illustrates how to scope a beforeAll hook to an entire test file in Bun's test runner, allowing for setup logic that applies to all tests in the file.

LANGUAGE: typescript
CODE:
import { describe, beforeAll } from "bun:test";

beforeAll(() => {
  // setup
});

describe("test group", () => {
  // tests...
});

----------------------------------------

TITLE: Preparing Packages for Patching with Bun
DESCRIPTION: Examples of using the bun patch command to prepare packages for modification. Shows different ways to specify package names and versions.

LANGUAGE: bash
CODE:
# you can supply the package name
$ bun patch react

# ...and a precise version in case multiple versions are installed
$ bun patch react@17.0.2

# or the path to the package
$ bun patch node_modules/react

----------------------------------------

TITLE: Configuring a Spawned Child Process in Bun
DESCRIPTION: Shows how to use the configuration object with Bun.spawn() to set the working directory, environment variables, and an exit handler for the child process.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "Hello, world!"], {
  cwd: "/tmp",
  env: { FOO: "bar" },
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});

----------------------------------------

TITLE: Bun Project Header in Markdown
DESCRIPTION: Simple markdown header and description text that identifies the Bun runtime binary package and provides a link to the project website.

LANGUAGE: markdown
CODE:
# Bun\n\nThis is the macOS x64 binary for Bun, a fast all-in-one JavaScript runtime. https://bun.sh

----------------------------------------

TITLE: Using Countdown Test Module
DESCRIPTION: Example demonstrating the Countdown module for managing asynchronous test completion

LANGUAGE: javascript
CODE:
const Countdown = require('../common/countdown');

function doSomething() {
  console.log('.');
}

const countdown = new Countdown(2, doSomething);
countdown.dec();
countdown.dec();

----------------------------------------

TITLE: Monorepo Directory Structure
DESCRIPTION: Example directory structure showing the organization of packages within a monorepo workspace setup.

LANGUAGE: txt
CODE:
.
├── package.json
├── node_modules
└── packages
    ├── stuff-a
    │   └── package.json
    └── stuff-b
        └── package.json

----------------------------------------

TITLE: Updating Dependencies with bun
DESCRIPTION: This snippet demonstrates various ways to update dependencies using bun, including updating single packages, all packages, and specifying version constraints.

LANGUAGE: sh
CODE:
# Update a single dependency
$ bun update @types/bun

# Update all dependencies
$ bun update

# Ignore semver, update to the latest version
$ bun update @types/bun --latest

# Update a dependency to a specific version
$ bun update @types/bun@$BUN_LATEST_VERSION

# Update all dependencies to the latest versions
$ bun update --latest

----------------------------------------

TITLE: Testing Module Exports with Runtime Files
DESCRIPTION: Shows how to test module exports using runtimeFiles to provide a test entry point after bundling.

LANGUAGE: typescript
CODE:
itBundled("importstar/ExportSelfES6", {
  files: {
    "/entry.js": /* js */ `
      export const foo = 123
      export * from './entry'
    `,
  },
  format: "esm",
  runtimeFiles: {
    "/test.js": /* js */ `
      import * as foo from './out.js'
      console.log(JSON.stringify(foo));
    `,
  },
  run: {
    file: "/test.js",
    stdout: '{"foo":123}',
  },
});

----------------------------------------

TITLE: Converting Node.js Readable to Uint8Array using Bun
DESCRIPTION: This code snippet demonstrates how to convert a Node.js Readable stream to a Uint8Array using Bun's Response object and bytes() method. It creates a Readable stream from a string array, then uses a Response object to wrap the stream and convert it to a Uint8Array.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
const stream = Readable.from(["Hello, ", "world!"]);
const buf = await new Response(stream).bytes();

----------------------------------------

TITLE: Listing All Dependencies
DESCRIPTION: Shows all installed dependencies including nested dependencies with their versions.

LANGUAGE: bash
CODE:
$ bun pm ls --all
/path/to/project node_modules (135)
├── @eslint-community/eslint-utils@4.4.0
├── @eslint-community/regexpp@4.5.0
├── @eslint/eslintrc@2.0.2
├── @eslint/js@8.38.0
├── @nodelib/fs.scandir@2.1.5
├── @nodelib/fs.stat@2.0.5
├── @nodelib/fs.walk@1.2.8
├── acorn@8.8.2
├── acorn-jsx@5.3.2
├── ajv@6.12.6
├── ansi-regex@5.0.1
├── ...

----------------------------------------

TITLE: Listing All Dependencies
DESCRIPTION: Shows all installed dependencies including nested dependencies with their versions.

LANGUAGE: bash
CODE:
$ bun pm ls --all
/path/to/project node_modules (135)
├── @eslint-community/eslint-utils@4.4.0
├── @eslint-community/regexpp@4.5.0
├── @eslint/eslintrc@2.0.2
├── @eslint/js@8.38.0
├── @nodelib/fs.scandir@2.1.5
├── @nodelib/fs.stat@2.0.5
├── @nodelib/fs.walk@1.2.8
├── acorn@8.8.2
├── acorn-jsx@5.3.2
├── ajv@6.12.6
├── ansi-regex@5.0.1
├── ...

----------------------------------------

TITLE: Writing Tests with Testing Library
DESCRIPTION: Example of writing a test using Testing Library with React components in Bun

LANGUAGE: typescript
CODE:
import { test, expect } from 'bun:test';
import { screen, render } from '@testing-library/react';
import { MyComponent } from './myComponent';

test('Can use Testing Library', () => {
  render(MyComponent);
  const myComponent = screen.getByTestId('my-component');
  expect(myComponent).toBeInTheDocument();
})

----------------------------------------

TITLE: Updating package.json with Optional Dependency
DESCRIPTION: This JSON diff shows the changes made to the package.json file after adding 'zod' as an optional dependency. The package is added to the optionalDependencies object with its version number.

LANGUAGE: json
CODE:
{
  "optionalDependencies": {
+   "zod": "^3.0.0"
  }
}

----------------------------------------

TITLE: Adding Git Dependencies with Various Protocols in Bun
DESCRIPTION: These commands demonstrate different ways to add Git dependencies in Bun using various protocols. It includes HTTPS, SSH, and shorthand GitHub syntax, as well as specifying a particular version.

LANGUAGE: sh
CODE:
$ bun add git+https://github.com/lodash/lodash.git
$ bun add git+ssh://github.com/lodash/lodash.git#4.17.21
$ bun add git@github.com:lodash/lodash.git
$ bun add github:colinhacks/zod

----------------------------------------

TITLE: Installing Bun Types Package
DESCRIPTION: Command to install the @types/bun package as a development dependency using Bun, npm, yarn, or pnpm package managers.

LANGUAGE: bash
CODE:
bun add -D @types/bun

----------------------------------------

TITLE: Using GC Listener Module
DESCRIPTION: Example showing how to install a garbage collection listener

LANGUAGE: javascript
CODE:
require('../common');
const { onGC } = require('../common/gc');

onGC({}, { ongc() { console.log('collected'); } });

----------------------------------------

TITLE: Validating Heap Snapshot Nodes
DESCRIPTION: Example showing how to validate heap dump nodes using the heap dump checker module

LANGUAGE: javascript
CODE:
validateSnapshotNodes('TLSWRAP', [
  {
    children: [
      { name: 'enc_out' },
      { name: 'enc_in' },
      { name: 'TLSWrap' },
    ],
  },
]);

----------------------------------------

TITLE: Configuring File Loaders in Bun
DESCRIPTION: Maps file extensions to loaders in Bun, useful for loading non-natively supported files.

LANGUAGE: toml
CODE:
[loader]
# when a .bagel file is imported, treat it like a tsx file
".bagel" = "tsx"

----------------------------------------

TITLE: Comparing and Sorting Versions with Bun.semver.order in TypeScript
DESCRIPTION: Illustrates the use of Bun.semver.order function to compare version strings and sort an array of versions. It returns 0 for equal versions, 1 if the first version is greater, and -1 if it's less.

LANGUAGE: typescript
CODE:
import { semver } from "bun";

semver.order("1.0.0", "1.0.0"); // 0
semver.order("1.0.0", "1.0.1"); // -1
semver.order("1.0.1", "1.0.0"); // 1

const unsorted = ["1.0.0", "1.0.1", "1.0.0-alpha", "1.0.0-beta", "1.0.0-rc"];
unsorted.sort(semver.order); // ["1.0.0-alpha", "1.0.0-beta", "1.0.0-rc", "1.0.0", "1.0.1"]
console.log(unsorted);

----------------------------------------

TITLE: Connecting to Bun Inspect Process using WebSocket Query Parameter
DESCRIPTION: This snippet demonstrates how to connect to a Bun process that is running with the --inspect flag using a WebSocket query parameter.

LANGUAGE: markdown
CODE:
- Set `?ws=hostname:port` to connect to a `bun --inspect`'d process.

----------------------------------------

TITLE: Configuring Default Yarn Lockfile Generation in Bun
DESCRIPTION: This TOML configuration sets the default behavior to generate a Yarn-compatible lockfile when installing packages with Bun.

LANGUAGE: toml
CODE:
[install.lockfile]
print = "yarn"

----------------------------------------

TITLE: Installing Dependencies with --filter in Bun
DESCRIPTION: Examples of using the --filter flag with bun install to selectively install dependencies in a monorepo with workspaces pkg-a, pkg-b, and pkg-c under ./packages.

LANGUAGE: bash
CODE:
# Install dependencies for all workspaces except `pkg-c`
$ bun install --filter '!pkg-c'

# Install dependencies for packages in `./packages` (`pkg-a`, `pkg-b`, `pkg-c`)
$ bun install --filter './packages/*'

# Save as above, but exclude the root package.json
$ bun install --filter --filter '!./' --filter './packages/*'

----------------------------------------

TITLE: Configuring Bun for Svelte Testing
DESCRIPTION: Adds configuration to bunfig.toml to preload the Svelte loader plugin before running tests.

LANGUAGE: toml
CODE:
[test]
# Tell Bun to load this plugin before your tests run
preload = ["./svelte-loader.js"]

# This also works:
# test.preload = ["./svelte-loader.js"]

----------------------------------------

TITLE: Checking Status of Bun Application Service
DESCRIPTION: Command to check the status of the Bun application service using systemctl. This provides information about the service's current state, PID, and resource usage.

LANGUAGE: bash
CODE:
$ sudo systemctl status my-app

----------------------------------------

TITLE: Creating HTTP Server with Node.js Streams in Bun
DESCRIPTION: Creates a simple HTTP server using Bun's serve function that streams response data using Node.js Readable stream. The server responds with 'Hello, world!' streamed in two parts. Uses Content-Type header to specify plain text response.

LANGUAGE: typescript
CODE:
import { Readable } from "stream";
import { serve } from "bun";
serve({
  port: 3000,
  fetch(req) {
    return new Response(Readable.from(["Hello, ", "world!"]), {
      headers: { "Content-Type": "text/plain" },
    });
  },
});

----------------------------------------

TITLE: Configuring Bun Extension Settings in VS Code settings.json
DESCRIPTION: This snippet demonstrates how to configure the Bun extension settings in the VS Code settings.json file. It includes options for specifying the Bun runtime path, enabling debug terminal support, and setting test file patterns.

LANGUAGE: jsonc
CODE:
{
  "bun.runtime": "/path/to/bun",
  "bun.debugTerminal.enabled": true,
  "bun.debugTerminal.stopOnEntry": false,
  "bun.test.filePattern": "**/*{.test.,.spec.,_test_,_spec_}{js,ts,tsx,jsx,mts,cts}"
}

----------------------------------------

TITLE: Deprecated Component Definition
DESCRIPTION: YAML metadata block showing component addition in v1.0.0 and subsequent deprecation in v2.0.0

LANGUAGE: yaml
CODE:
added: v1.0.0
deprecated: v2.0.0

----------------------------------------

TITLE: Setting Multiple Failure Threshold for Bun Test Runner
DESCRIPTION: Demonstrates how to configure the test runner to stop after a specific number of test failures by providing a numeric value to the --bail flag. The example shows stopping after 10 failures.

LANGUAGE: sh
CODE:
# bail after 10 failures
$ bun test --bail=10

----------------------------------------

TITLE: Installing an npm Package with Alias using Bun CLI
DESCRIPTION: This command installs the 'zod' npm package under the custom alias 'my-custom-name' using Bun's package manager.

LANGUAGE: sh
CODE:
$ bun add my-custom-name@npm:zod

----------------------------------------

TITLE: TOML String Escape Sequences
DESCRIPTION: Lists all supported string escape sequences in Bun-flavored TOML, including additional sequences for JavaScript compatibility and standard TOML escapes.

LANGUAGE: text
CODE:
# Bun-flavored TOML extras
\x{XX}     - ASCII           (U+00XX)
\u{x+}     - unicode         (U+0000000X) - (U+XXXXXXXX)
\v         - vertical tab

# Regular TOML
\b         - backspace       (U+0008)
\t         - tab             (U+0009)
\n         - linefeed        (U+000A)
\f         - form feed       (U+000C)
\r         - carriage return (U+000D)
\"         - quote           (U+0022)
\\         - backslash       (U+005C)
\uXXXX     - unicode         (U+XXXX)
\UXXXXXXXX - unicode         (U+XXXXXXXX)

----------------------------------------

TITLE: Configuring Bun Registry with JFrog Artifactory using bunfig.toml
DESCRIPTION: Configuration snippet for setting up Bun package manager to use JFrog Artifactory as the package registry. Requires replacing MY_SUBDOMAIN with your Artifactory subdomain and MY_TOKEN with your authentication token.

LANGUAGE: toml
CODE:
[install.registry]
url = "https://MY_SUBDOMAIN.jfrog.io/artifactory/api/npm/npm/_auth=MY_TOKEN"
# Bun v1.0.3+ supports using an environment variable here
# url = "$NPM_CONFIG_REGISTRY"

----------------------------------------

TITLE: Running Bun Benchmark
DESCRIPTION: Command to execute the file upload benchmark using Bun runtime

LANGUAGE: bash
CODE:
bun stream-file-bun.js

----------------------------------------

TITLE: Enabling Coverage Reports
DESCRIPTION: Shows how to enable test coverage reporting in Bun test runner.

LANGUAGE: sh
CODE:
$ bun test --coverage

----------------------------------------

TITLE: Initializing Nuxt App with Bun
DESCRIPTION: This snippet demonstrates how to create a new Nuxt application using the 'nuxi' CLI tool with Bun as the package manager. It shows the initialization process, including package installation and project setup.

LANGUAGE: sh
CODE:
$ bunx nuxi init my-nuxt-app
✔ Which package manager would you like to use?
bun
◐ Installing dependencies...
bun install v$BUN_LATEST_VERSION (16b4bf34)
 + @nuxt/devtools@0.8.2
 + nuxt@3.7.0
 785 packages installed [2.67s]
✔ Installation completed.
✔ Types generated in .nuxt
✨ Nuxt project has been created with the v3 template. Next steps:
 › cd my-nuxt-app
 › Start development server with bun run dev

----------------------------------------

TITLE: Streaming Response with Async Generator Function in Bun
DESCRIPTION: Creates an HTTP server that streams response data using an async generator function. The response is sent in chunks with delays between parts, demonstrating real-time data streaming capabilities.

LANGUAGE: typescript
CODE:
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response(
      // An async generator function
      async function* () {
        yield "Hello, ";
        await Bun.sleep(100);
        yield "world!";

        // you can also yield a TypedArray or Buffer
        yield new Uint8Array(["\n".charCodeAt(0)]);
      },
      { headers: { "Content-Type": "text/plain" } },
    );
  },
});

----------------------------------------

TITLE: Installing Dependencies for Bun Project
DESCRIPTION: This command installs the necessary dependencies for the Bun project using npm, pnpm, or yarn package managers.

LANGUAGE: bash
CODE:
$ npm install # or pnpm install or yarn install

----------------------------------------

TITLE: Basic Bundler Test Example with File Definitions
DESCRIPTION: Demonstrates a basic bundler test using itBundled, defining multiple files and running the bundled output to check the result.

LANGUAGE: typescript
CODE:
itBundled("default/SimpleES6", {
  files: {
    "/entry.js": /* js */ `
      import { fn } from './foo';
      console.log(fn());
    `,
    "/foo.js": /* js */ `
      export function fn() {
        return 123
      }
    `,
  },
  run: {
    stdout: "123",
  },
});

----------------------------------------

TITLE: Setting TinyCC Version and Git Hash
DESCRIPTION: Reads the TCC version from a file and retrieves the Git hash, setting them as compile definitions.

LANGUAGE: CMake
CODE:
file(READ ${CMAKE_CURRENT_SOURCE_DIR}/VERSION TCC_VERSION)

add_compile_definitions(TCC_VERSION="${TCC_VERSION}")

execute_process(
  COMMAND git rev-parse --short HEAD
  OUTPUT_VARIABLE TCC_GITHASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
  ERROR_QUIET
)

if(TCC_GITHASH)
  add_compile_definitions(TCC_GITHASH="${TCC_GITHASH}")
endif()

----------------------------------------

TITLE: Formatting Colors as ANSI Escape Codes
DESCRIPTION: Converting colors to ANSI escape codes for terminal output. Demonstrates how different color inputs are converted to 24-bit ANSI color codes.

LANGUAGE: typescript
CODE:
Bun.color("red", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color(0xff0000, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("#f00", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("#ff0000", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("rgb(255, 0, 0)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("rgba(255, 0, 0, 1)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("hsl(0, 100%, 50%)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color("hsla(0, 100%, 50%, 1)", "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color({ r: 255, g: 0, b: 0 }, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color({ r: 255, g: 0, b: 0, a: 1 }, "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color([255, 0, 0], "ansi"); // "\u001b[38;2;255;0;0m"
Bun.color([255, 0, 0, 255], "ansi"); // "\u001b[38;2;255;0;0m"

----------------------------------------

TITLE: Installing Workspace Dependencies
DESCRIPTION: Command to install dependencies for all workspaces in the monorepo.

LANGUAGE: sh
CODE:
$ bun install

----------------------------------------

TITLE: Reading from Standard Input in Bun.js
DESCRIPTION: This TypeScript snippet demonstrates how to read input from stdin line by line using an async iterator.

LANGUAGE: typescript
CODE:
for await (const line of console) {
  // line of text from stdin
  console.log(line);
}

----------------------------------------

TITLE: Creating Package Tarballs with bun
DESCRIPTION: This snippet demonstrates how to create a package tarball using bun, showing the command and its output including file count, shasum, and package sizes.

LANGUAGE: sh
CODE:
# Create a tarball
$ bun pm pack

Total files: 46
Shasum: 2ee19b6f0c6b001358449ca0eadead703f326216
Integrity: sha512-ZV0lzWTEkGAMz[...]Gl4f8lA9sl97g==
Unpacked size: 0.41MB
Packed size: 117.50KB

----------------------------------------

TITLE: Executing Next.js Frame Analysis Script
DESCRIPTION: Shell command to run a Node.js script that measures CSS HMR frame times with specified sleep interval and project parameters

LANGUAGE: shell
CODE:
SLEEP_INTERVAL=8 PROJECT=next node read-frames.js

----------------------------------------

TITLE: Accessing stderr Stream from Child Process in Bun
DESCRIPTION: Demonstrates how to spawn a child process with piped stderr output. The stderr stream is accessible via the proc.stderr property which returns a ReadableStream.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"], {
  stderr: "pipe",
});
proc.stderr; // => ReadableStream

----------------------------------------

TITLE: Setting up Hono Project with create-hono in Shell
DESCRIPTION: This shell script shows the process of creating a new Hono project using the create-hono tool. It guides through selecting the Bun template, cloning the project, and installing dependencies.

LANGUAGE: shell
CODE:
$ bun create hono myapp
✔ Which template do you want to use? › bun
cloned honojs/starter#main to /path/to/myapp
✔ Copied project files
$ cd myapp
$ bun install

----------------------------------------

TITLE: Converting Blob to String using .text() method in TypeScript
DESCRIPTION: This snippet shows how to create a Blob with a string content and then convert it back to a string using the .text() method. The method returns a Promise that resolves to the string content of the Blob.

LANGUAGE: typescript
CODE:
const blob = new Blob(["hello world"]);
const str = await blob.text();
// => "hello world"

----------------------------------------

TITLE: Running Bun with Valgrind
DESCRIPTION: Uses Valgrind to analyze memory issues in Bun on Linux systems.

LANGUAGE: bash
CODE:
$ valgrind --fair-sched=try --track-origins=yes bun-debug <args>

----------------------------------------

TITLE: Using Capture for Partial Snapshot Testing
DESCRIPTION: Demonstrates how to use the capture function for partial snapshot testing of emitted JavaScript code.

LANGUAGE: typescript
CODE:
itBundled("minify/TemplateStringFolding", {
  files: {
    "/entry.js": /* js */ `
      capture(\`😋📋👌\`.length)
      capture(\`😋📋👌\`.length === 6)
      capture(\`😋📋👌\`.length == 6)
      capture(\`😋📋👌\`.length === 2)
      capture(\`😋📋👌\`.length == 2)
    `,
  },
  minifySyntax: true,
  capture: ["6", "true", "true", "false", "false"],
});

----------------------------------------

TITLE: Running Bun Tests with Coverage Report
DESCRIPTION: Example of running Bun tests with the --coverage flag to generate a coverage report showing function and line coverage percentages along with uncovered line numbers.

LANGUAGE: sh
CODE:
$ bun test --coverage

test.test.ts:
✓ math > add [0.71ms]
✓ math > multiply [0.03ms]
✓ random [0.13ms]
-------------|---------|---------|-------------------
File         | % Funcs | % Lines | Uncovered Line #s
-------------|---------|---------|-------------------
All files    |   66.67 |   77.78 |
 math.ts     |   50.00 |   66.67 |
 random.ts   |   50.00 |   66.67 |
-------------|---------|---------|-------------------

 3 pass
 0 fail
 3 expect() calls

----------------------------------------

TITLE: Enhancing Server with Figlet Package
DESCRIPTION: TypeScript code diff showing how to incorporate the figlet package to generate ASCII art for the server response.

LANGUAGE: typescript
CODE:
+ import figlet from "figlet";

  const server = Bun.serve({
    port: 3000,
    fetch(req) {
+     const body = figlet.textSync("Bun!");
+     return new Response(body);
-     return new Response("Bun!");
    },
  });

----------------------------------------

TITLE: SSL Session Parameters PEM Certificate
DESCRIPTION: A PEM-encoded SSL session parameters certificate containing cryptographic parameters and X.509 certificate data. The certificate appears to be for Internet Widgits Pty Ltd with validity from 2010-11-16 to 2013-11-15.

LANGUAGE: pem
CODE:
-----BEGIN SSL SESSION PARAMETERS-----
MIID2wIBAQICAwEEAgA1BCAMjLe+70uBSPGvybkTnPVUMwdbdtVbkMIXf8L5M8Kl
VAQwog+Afs00cnYUcgD1BQewJyxX1e561oRuDTpy7BHABC1hC7hxTaul+pwv+cBx
8D72oQYCBFFQF3OiBAICASyjggNhMIIDXTCCAkWgAwIBAgIJAMUSOvlaeyQHMA0G
CSqGSIb3DQEBBQUAMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRl
MSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwHhcNMTAxMTE2MDkz
MjQ5WhcNMTMxMTE1MDkzMjQ5WjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29t
ZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjAN
BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz+LXZOjcQCJq3+ZKUFabj71oo/ex
/XsBcFqtBThjjTw9CVEVwfPQQp4XwtPiB204vnYXwQ1/R2NdTQqCZu47l79LssL/
u2a5Y9+0NEU3nQA5qdt+1FAE0c5oexPimXOrR3GWfKz7PmZ2O0117IeCUUXPG5U8
umhDe/4mDF4ZNJiKc404WthquTqgS7rLQZHhZ6D0EnGnOkzlmxJMYPNHSOY1/6iv
dNUUcC87awNEA3lgfhy25IyBK3QJc+aYKNTbt70Lery3bu2wWLFGtmNiGlQTS4Js
xImRsECTI727ObS7/FWAQsqW+COL0Sa5BuMFrFIpjPrEe0ih7vRRbdmXRwIDAQAB
o1AwTjAdBgNVHQ4EFgQUDnV4d6mDtOnluLoCjkUHTX/n4agwHwYDVR0jBBgwFoAU
DnV4d6mDtOnluLoCjkUHTX/n4agwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQUF
AAOCAQEAFwV4MQfTo+qMv9JMiynoIEiqfOz4RgtmBqRnXUffcjS2dhc7/z+FPZnM
79Kej8eLHoVfxCyWRHFlzm93vEdvwxOCrD13EDOi08OOZfxWyIlCa6Bg8cMAKqQz
d2OvQOWqlRWBTThBJIhWflU33izXQn5GdmYqhfpc+9ZHHGhvXNydtRQkdxVK2dZN
zLBvBlLlRmtoClU7xm3A+/5dddePAQHEPtyFlUw49VYtZ3ru6KqPms7MKvcRhYLs
y9rwSfuuniMlx4d0bDR7TOkw0QQSA0N8MGQRQpzl4mw4jLzyM5d5QtuGBh2P6hPG
a0YQxtI3RPT/p6ENzzBiAKXiSfzox6QCBAClAwIBEg==
-----END SSL SESSION PARAMETERS-----

----------------------------------------

TITLE: Filtering Workspace Scripts with bun
DESCRIPTION: This snippet shows how to use the --filter flag with bun to run scripts concurrently for specific workspace packages based on a glob pattern.

LANGUAGE: sh
CODE:
$ bun --filter 'lib-*' my-script
# instead of:
# npm run --workspace lib-foo --workspace lib-bar my-script

----------------------------------------

TITLE: Installing Dependencies for Express Benchmark
DESCRIPTION: Command to install necessary dependencies for the Express benchmark using Bun package manager.

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Importing Installed Tarball Package in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates how to import the 'zod' package after it has been installed from a tarball URL.

LANGUAGE: typescript
CODE:
import { z } from "zod";

----------------------------------------

TITLE: Initializing Elysia Project with Bun
DESCRIPTION: Commands to create a new Elysia project using Bun's create command, navigate to the project directory, and start the development server.

LANGUAGE: bash
CODE:
$ bun create elysia myapp
$ cd myapp
$ bun run dev

----------------------------------------

TITLE: Converting Buffer to Blob in TypeScript using Bun
DESCRIPTION: This snippet demonstrates how to create a Blob from a Buffer. It first creates a Buffer from a string, then constructs a new Blob using an array containing the Buffer.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello");
const blob = new Blob([buf]);

----------------------------------------

TITLE: Installing LLVM
DESCRIPTION: Platform-specific commands for installing LLVM 19, which is required for Bun development.

LANGUAGE: bash
CODE:
brew install llvm@19

LANGUAGE: bash
CODE:
wget https://apt.llvm.org/llvm.sh -O - | sudo bash -s -- 19 all

----------------------------------------

TITLE: Argument Declaration Example
DESCRIPTION: Shows how to declare required and optional command arguments with default values

LANGUAGE: JavaScript
CODE:
program
  .version('0.1.0')
  .argument('<username>', 'user to login')
  .argument('[password]', 'password for user, if required', 'no password given')
  .action((username, password) => {
    console.log('username:', username);
    console.log('password:', password);
  });

----------------------------------------

TITLE: Configuring Happy-DOM Environment
DESCRIPTION: Shows how to configure Bun to use happy-dom for browser environment testing via bunfig.toml.

LANGUAGE: toml
CODE:
[test]
preload = ["./happy-dom.ts"]

----------------------------------------

TITLE: Implementing Worker Thread Logic in TypeScript
DESCRIPTION: Shows how to set up the worker thread code with TypeScript type declarations and message handling

LANGUAGE: typescript
CODE:
declare var self: Worker;

self.onmessage = (event: MessageEvent) => {
  console.log(event.data);
  postMessage("world");
};

----------------------------------------

TITLE: Event Loop Management Functions in C
DESCRIPTION: Core functions for creating and managing event loops. Includes loop creation, destruction, execution and thread-safe wakeup capabilities.

LANGUAGE: c
CODE:
WIN32_EXPORT struct us_loop_t *us_create_loop(void *hint, void (*wakeup_cb)(struct us_loop_t *loop), void (*pre_cb)(struct us_loop_t *loop), void (*post_cb)(struct us_loop_t *loop), unsigned int ext_size);

WIN32_EXPORT void us_loop_free(struct us_loop_t *loop);

WIN32_EXPORT void *us_loop_ext(struct us_loop_t *loop);

WIN32_EXPORT void us_loop_run(struct us_loop_t *loop);

WIN32_EXPORT void us_wakeup_loop(struct us_loop_t *loop);

WIN32_EXPORT void us_loop_integrate(struct us_loop_t *loop);

WIN32_EXPORT long long us_loop_iteration_number(struct us_loop_t *loop);

----------------------------------------

TITLE: Setting NPM_PASSWORD in .env file for Bun
DESCRIPTION: This snippet demonstrates how to set the NPM_PASSWORD environment variable in a .env file, which Bun automatically reads. The password should be the Azure Personal Access Token.

LANGUAGE: txt
CODE:
NPM_PASSWORD=<paste token here>

----------------------------------------

TITLE: Running Todo Tests with Implementation in Bun
DESCRIPTION: This snippet shows the output of running 'bun test --todo' when a todo test with implementation passes. It demonstrates how the test runner expects todo tests to fail and returns a non-zero exit code if they pass.

LANGUAGE: shell
CODE:
$ bun test --todo
my.test.ts:
✗ unimplemented feature
  ^ this test is marked as todo but passes. Remove `.todo` or check that test is correct.

 0 pass
 1 fail
 1 expect() calls
$ echo $?
1 # this is the exit code of the previous command

----------------------------------------

TITLE: Installing Tarball Dependency with Bun CLI
DESCRIPTION: This command uses Bun's package manager to install a specific version of the 'zod' package from a tarball URL.

LANGUAGE: sh
CODE:
$ bun add zod@https://registry.npmjs.org/zod/-/zod-3.21.4.tgz

----------------------------------------

TITLE: Running a simple EdgeDB query in REPL
DESCRIPTION: Commands to open EdgeDB REPL, run a simple query, and exit.

LANGUAGE: sh
CODE:
$ edgedb
edgedb> select 1 + 1;
2
edgedb> \quit

----------------------------------------

TITLE: Converting Uint8Array to Regular Array
DESCRIPTION: Shows how to convert a Uint8Array to a standard JavaScript array using Array.from(). Notes that this conversion may have performance implications compared to direct Uint8Array usage.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(64);
const uintArr = new Uint8Array(buf);
const regularArr = Array.from(uintArr);
// number[]

----------------------------------------

TITLE: Running Performance Analysis Script for Bun Project
DESCRIPTION: Executes a Node.js script named 'read-frames.js' with specific environment variables set for the Bun project. The script likely analyzes performance metrics related to CSS Hot Module Replacement.

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=16 PROJECT=bun node read-frames.js

----------------------------------------

TITLE: Structuring HTML Document for Example Domain Page
DESCRIPTION: This snippet shows the overall HTML structure of the example domain page. It includes metadata, styling, and content layout.

LANGUAGE: HTML
CODE:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

----------------------------------------

TITLE: Logging JSX Components in Bun
DESCRIPTION: Example of Bun's special logging capability for JSX components to facilitate debugging.

LANGUAGE: bash
CODE:
$ bun run log-my-component.tsx
<Component message="Hello world!" />

----------------------------------------

TITLE: HMR WebSocket Management Implementation
DESCRIPTION: Demonstrates complete WebSocket lifecycle management with HMR, including cleanup and connection reuse.

LANGUAGE: typescript
CODE:
import { something } from "./something";

// Initialize or re-use a WebSocket connection
export const ws = (import.meta.hot.data.ws ??= new WebSocket(location.origin));

// If the module's import is removed, clean up the WebSocket connection.
import.meta.hot.prune(() => {
  ws.close();
});

----------------------------------------

TITLE: Initializing Page Router for ArrowJS
DESCRIPTION: Sets up a PageRouter instance for handling ArrowJS components in Stric. Creates and serves the router directly using @stricjs/arrow package.

LANGUAGE: typescript
CODE:
import { PageRouter } from '@stricjs/arrow';

// Create a page router, build and serve directly
new PageRouter().serve();

----------------------------------------

TITLE: Adding a Dependency with Exact Version
DESCRIPTION: This snippet demonstrates how to add a dependency with an exact version using the '--exact' flag. This pins the project to the specific version installed.

LANGUAGE: sh
CODE:
$ bun add zod --exact

----------------------------------------

TITLE: Creating a Todo Test with Implementation in Bun
DESCRIPTION: This snippet illustrates how to create a todo test with an optional implementation. The test body is provided but won't be executed unless the --todo flag is used.

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

test.todo("unimplemented feature", () => {
  expect(Bun.isAwesome()).toBe(true);
});

----------------------------------------

TITLE: Installing Peer Dependency via Bun CLI
DESCRIPTION: Shows how to add a package as a peer dependency using the --peer flag with bun add command.

LANGUAGE: sh
CODE:
$ bun add @types/bun --peer

----------------------------------------

TITLE: Converting ArrayBuffer to Uint8Array in TypeScript
DESCRIPTION: Basic example of creating a Uint8Array view of an ArrayBuffer. Creates a 64-byte buffer and wraps it in a Uint8Array typed array.

LANGUAGE: typescript
CODE:
const buffer = new ArrayBuffer(64);
const arr = new Uint8Array(buffer);

----------------------------------------

TITLE: Creating and Accessing Uint8Array from ArrayBuffer
DESCRIPTION: Demonstrates how to create a Uint8Array view over an ArrayBuffer and access its contents. Shows buffer initialization and basic array access operations.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(64);
const arr = new Uint8Array(buf);
arr.length; // 64
arr[0]; // 0 (instantiated with all zeros)

----------------------------------------

TITLE: CSS HMR Frame Time Analysis Results
DESCRIPTION: This output displays the results of the CSS HMR frame time analysis. It shows percentile statistics for frame times and the percentage of rendered frames out of the total frames analyzed.

LANGUAGE: plaintext
CODE:
next
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 310.1ms 
 75th percentile: 360.3ms 
 90th percentile: 461.6ms 
 95th percentile: 660.4ms 
 99th percentile: 1009.9ms 
 Rendered frames: 78 / 1024 (8%)

----------------------------------------

TITLE: Styling Example Domain Page with CSS
DESCRIPTION: This CSS snippet defines the styling for the example domain page. It sets the background color, font, layout, and responsive design for smaller screens.

LANGUAGE: CSS
CODE:
body {
    background-color: #f0f0f2;
    margin: 0;
    padding: 0;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    
}
div {
    width: 600px;
    margin: 5em auto;
    padding: 2em;
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
}
a:link, a:visited {
    color: #38488f;
    text-decoration: none;
}
@media (max-width: 700px) {
    div {
        margin: 0 auto;
        width: auto;
    }
}

----------------------------------------

TITLE: Initializing Bun Project for Prisma Integration
DESCRIPTION: Creates a new directory and initializes a Bun project for Prisma integration.

LANGUAGE: bash
CODE:
$ mkdir prisma-app
$ cd prisma-app
$ bun init

----------------------------------------

TITLE: Configuring Package Executable in package.json
DESCRIPTION: Example of defining a package executable in package.json using the bin field to specify the entry point

LANGUAGE: jsonc
CODE:
{
  // ... other fields
  "name": "my-cli",
  "bin": {
    "my-cli": "dist/index.js"
  }
}

----------------------------------------

TITLE: Adding LLVM to PATH on Arch Linux
DESCRIPTION: Adds the LLVM 19 binaries to the system PATH on Arch Linux.

LANGUAGE: bash
CODE:
$ export PATH="$PATH:/usr/lib/llvm19/bin"

----------------------------------------

TITLE: Adding Peer Dependency in package.json
DESCRIPTION: Demonstrates the addition of a peer dependency entry in package.json file showing the version specification.

LANGUAGE: json
CODE:
{
  "peerDependencies": {
+   "@types/bun": "^$BUN_LATEST_VERSION"
  }
}

----------------------------------------

TITLE: Creating a Svelte Loader Plugin for Bun
DESCRIPTION: Implements a custom Svelte loader plugin for Bun using the Plugin API. It compiles Svelte components to JavaScript and sets up happy-dom for testing.

LANGUAGE: typescript
CODE:
import { plugin } from "bun";
import { compile } from "svelte/compiler";
import { readFileSync } from "fs";
import { beforeEach, afterEach } from "bun:test";
import { GlobalRegistrator } from "@happy-dom/global-registrator";

beforeEach(async () => {
  await GlobalRegistrator.register();
});

afterEach(async () => {
  await GlobalRegistrator.unregister();
});

plugin({
  name: "svelte loader",
  setup(builder) {
    builder.onLoad({ filter: /\.svelte(\?[^.]+)?$/ }, ({ path }) => {
      try {
        const source = readFileSync(
          path.substring(
            0,
            path.includes("?") ? path.indexOf("?") : path.length
          ),
          "utf-8"
        );

        const result = compile(source, {
          filename: path,
          generate: "client",
          dev: false,
        });

        return {
          contents: result.js.code,
          loader: "js",
        };
      } catch (err) {
        throw new Error(`Failed to compile Svelte component: ${err.message}`);
      }
    });
  },
});

----------------------------------------

TITLE: POST Request over Unix Domain Socket in Bun (TypeScript)
DESCRIPTION: This snippet shows how to send a POST request over a Unix domain socket using Bun's `fetch()` function. It includes setting the method, body, and headers for the request, and demonstrates using HTTPS protocol.

LANGUAGE: typescript
CODE:
const response = await fetch("https://hostname/a/path", {
  unix: "/var/run/path/to/unix.sock",
  method: "POST",
  body: JSON.stringify({ message: "Hello from Bun!" }),
  headers: {
    "Content-Type": "application/json",
  },
});

const body = await response.json();

----------------------------------------

TITLE: Updating Snapshots in Bun using CLI
DESCRIPTION: This command demonstrates how to update snapshots in Bun using the command-line interface. It runs the test suite with the --update-snapshots flag to regenerate snapshots.

LANGUAGE: bash
CODE:
$ bun test --update-snapshots

----------------------------------------

TITLE: Setting Naming Options in Bun's JavaScript API
DESCRIPTION: Demonstrates how to set naming options for entries, assets, and chunks using Bun's JavaScript API. Bun supports both string and object formats.

LANGUAGE: typescript
CODE:
Bun.build({
  entrypoints: ["./index.tsx"],
  // when string, this is equivalent to entryNames
  naming: "[name].[ext]",

  // granular naming options
  naming: {
    entry: "[name].[ext]",
    asset: "[name].[ext]",
    chunk: "[name].[ext]",
  },
});

----------------------------------------

TITLE: CSS HMR Performance Statistics
DESCRIPTION: Performance statistics showing frame timing percentiles and rendering success rate for CSS Hot Module Reload operations

LANGUAGE: plaintext
CODE:
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 40.7ms 
 75th percentile: 42.3ms 
 90th percentile: 43.5ms 
 95th percentile: 76.4ms 
 99th percentile: 118.8ms 
 Rendered frames: 958 / 1024 (94%)

----------------------------------------

TITLE: Basic HTML Document Structure
DESCRIPTION: Main HTML document structure with metadata, styling, and content sections

LANGUAGE: html
CODE:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

----------------------------------------

TITLE: Installing and Running Global Packages with bun
DESCRIPTION: This snippet demonstrates how to install packages globally using bun and run globally-installed packages without the 'bun run' prefix.

LANGUAGE: sh
CODE:
# Install a package globally
$ bun i -g eslint

# Run a globally-installed package without the `bun run` prefix
$ eslint --init

----------------------------------------

TITLE: Accessing Mock Function Properties in Bun
DESCRIPTION: This snippet demonstrates how to access additional properties on a mock function, such as `mock.calls` and `mock.results`, which provide information about function calls.

LANGUAGE: typescript
CODE:
import { mock } from "bun:test";
const random = mock((multiplier: number) => multiplier * Math.random());

random(2);
random(10);

random.mock.calls;
// [[ 2 ], [ 10 ]]

random.mock.results;
//  [
//    { type: "return", value: 0.6533907460954099 },
//    { type: "return", value: 0.6452713933037312 }
//  ]

----------------------------------------

TITLE: Installing LLVM on Arch Linux
DESCRIPTION: Installs LLVM, Clang, and LLD on Arch Linux using pacman.

LANGUAGE: bash
CODE:
$ sudo pacman -S llvm clang lld

----------------------------------------

TITLE: Updating package.json with New Dev Dependency
DESCRIPTION: This JSON diff shows the change in the package.json file after adding a development dependency. It demonstrates how 'zod' is added to the 'devDependencies' section with a version specifier.

LANGUAGE: json
CODE:
{
  "devDependencies": {
+   "zod": "^3.0.0"
  }
}

----------------------------------------

TITLE: Test Suite Organization with Describe Blocks
DESCRIPTION: Example of organizing tests using describe blocks and individual test cases with assertions

LANGUAGE: ts
CODE:
import { test, expect, describe } from "bun:test";

describe("math", () => {
  test("add", () => {
    expect(2 + 2).toEqual(4);
  });

  test("multiply", () => {
    expect(2 * 2).toEqual(4);
  });
});

----------------------------------------

TITLE: Specifying External Packages in CLI for esbuild and Bun
DESCRIPTION: Illustrates the syntax difference for specifying external packages in the CLI between esbuild and Bun. Bun omits the colon.

LANGUAGE: bash
CODE:
$ esbuild --external:react
$ bun build --external react

----------------------------------------

TITLE: Mocking Modules in Bun Tests
DESCRIPTION: This snippet demonstrates how to use `mock.module()` to override the behavior of a module in both ESM and CommonJS contexts.

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";

mock.module("./module", () => {
  return {
    foo: "bar",
  };
});

test("mock.module", async () => {
  const esm = await import("./module");
  expect(esm.foo).toBe("bar");

  const cjs = require("./module");
  expect(cjs.foo).toBe("bar");
});

----------------------------------------

TITLE: Setting Loaders in CLI for esbuild and Bun
DESCRIPTION: Demonstrates the syntax difference for setting loaders in the CLI between esbuild and Bun. Bun uses a different separator.

LANGUAGE: bash
CODE:
$ esbuild app.ts --bundle --loader:.svg=text
$ bun build app.ts --loader .svg:text

----------------------------------------

TITLE: Executing Bun Frame Analysis
DESCRIPTION: Command to execute frame analysis script for Bun project with specific sleep interval configuration

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=32 PROJECT=bun node read-frames.js

----------------------------------------

TITLE: Styling Example Domain Page with CSS
DESCRIPTION: Defines CSS styles for the example domain page, including responsive design for smaller screens. Styles the body, main div, and link colors.

LANGUAGE: CSS
CODE:
body {
    background-color: #f0f0f2;
    margin: 0;
    padding: 0;
    font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    
}
div {
    width: 600px;
    margin: 5em auto;
    padding: 2em;
    background-color: #fdfdff;
    border-radius: 0.5em;
    box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
}
a:link, a:visited {
    color: #38488f;
    text-decoration: none;
}
@media (max-width: 700px) {
    div {
        margin: 0 auto;
        width: auto;
    }
}

----------------------------------------

TITLE: Creating SSR HTTP Server with Bun
DESCRIPTION: Implements a simple HTTP server using Bun.serve() that performs server-side rendering of React components

LANGUAGE: tsx
CODE:
Bun.serve({
  async fetch() {
    const stream = await renderToReadableStream(
      <Component message="Hello from server!" />,
    );
    return new Response(stream, {
      headers: { "Content-Type": "text/html" },
    });
  },
});

----------------------------------------

TITLE: CSS Asset Reference Example
DESCRIPTION: Example of referencing local assets in CSS files with automatic path rewriting

LANGUAGE: css
CODE:
body {
  background-image: url("./logo.png");
}

----------------------------------------

TITLE: Installing LLVM 19 on macOS
DESCRIPTION: Installs LLVM 19 using Homebrew on macOS.

LANGUAGE: bash
CODE:
$ brew install llvm@19

----------------------------------------

TITLE: Basic Bun HTTP Server Implementation
DESCRIPTION: Simple HTTP server implementation using Bun.serve(). The server runs on port 3000 and responds with 'Hello world'. When used with hot reload, the fetch handler updates automatically when source files change.

LANGUAGE: typescript
CODE:
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Hello world");
  },
});

----------------------------------------

TITLE: Filtered Test File Execution
DESCRIPTION: Example of running specific test files by filtering with a path argument

LANGUAGE: sh
CODE:
$ bun test test3
bun test v$BUN_LATEST_VERSION (9c68abdb)

test3.test.js:
✓ add [1.40ms]
✓ multiply [0.03ms]

 2 pass
 0 fail
 2 expect() calls
Ran 2 tests across 1 files. [15.00ms]

----------------------------------------

TITLE: Basic HMR Check Implementation in TypeScript
DESCRIPTION: Demonstrates the basic pattern for checking HMR availability in code. This check is optional as Bun automatically handles dead-code elimination in production.

LANGUAGE: typescript
CODE:
if (import.meta.hot) {
  // HMR APIs are available.
}

----------------------------------------

TITLE: Running Bun Tests in Watch Mode
DESCRIPTION: Command to run Bun tests in watch mode, which automatically re-runs tests when any imported files change. This provides immediate feedback during development.

LANGUAGE: sh
CODE:
$ bun test --watch

----------------------------------------

TITLE: HMR State Management Implementation
DESCRIPTION: Shows how to maintain state between hot reloads using import.meta.hot.data, with React DOM root as an example.

LANGUAGE: typescript
CODE:
import { createRoot } from "react-dom/client";
import { App } from "./app";

const root = import.meta.hot.data.root ??= createRoot(elem);
root.render(<App />); // re-use an existing root

----------------------------------------

TITLE: Verifying Application Functionality
DESCRIPTION: These commands are used to check if the application is working as expected after installation. They start the development server using different package managers.

LANGUAGE: sh
CODE:
$ bun run dev
$ npm run dev
$ yarn dev
$ pnpm dev

----------------------------------------

TITLE: Converting Buffer to String in TypeScript
DESCRIPTION: This snippet demonstrates how to convert a Buffer to a string using the built-in .toString() method. It creates a Buffer from a string and then converts it back to a string.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello");
const str = buf.toString();
// => "hello"

----------------------------------------

TITLE: Specifying Bun Version in GitHub Actions Workflow
DESCRIPTION: This snippet shows how to specify a particular version of Bun when using the setup-bun action in a GitHub Actions workflow. It demonstrates setting the version to 'latest' or 'canary' using the 'with' parameter.

LANGUAGE: yaml
CODE:
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: oven-sh/setup-bun@v2
       with:
         version: "latest" # or "canary"

----------------------------------------

TITLE: Installing Dependencies for Bun Development on Arch Linux
DESCRIPTION: Uses pacman to install the required dependencies for building Bun on Arch Linux.

LANGUAGE: bash
CODE:
$ sudo pacman -S base-devel ccache cmake git go libiconv libtool make ninja pkg-config python rust sed unzip ruby

----------------------------------------

TITLE: Creating systemd Service File for Bun Application
DESCRIPTION: Commands to create a new systemd service file for a Bun application. This file will be used to define how the application should be run as a daemon.

LANGUAGE: sh
CODE:
$ cd /lib/systemd/system
$ touch my-app.service

----------------------------------------

TITLE: Coverage Reporter Configuration
DESCRIPTION: Configuration for coverage reporters and output directory in bunfig.toml, supporting both console and lcov output formats.

LANGUAGE: toml
CODE:
[test]
coverageReporter  = ["text", "lcov"]  # default ["text"]
coverageDir = "path/to/somewhere"  # default "coverage"

----------------------------------------

TITLE: Configuring Bun Test Preload in TOML
DESCRIPTION: This TOML configuration for bunfig.toml sets up the preload file for Bun's test runner, ensuring happy-dom is initialized before tests run.

LANGUAGE: toml
CODE:
[test]
preload = "./happydom.ts"

----------------------------------------

TITLE: Cross-compiling for Linux x64 with Bun
DESCRIPTION: Shows how to use the --target flag to compile a standalone executable for Linux x64 platforms, including options for baseline (pre-2013 CPUs) and modern (post-2013 CPUs) versions.

LANGUAGE: bash
CODE:
bun build --compile --target=bun-linux-x64 ./index.ts --outfile myapp

# To support CPUs from before 2013, use the baseline version (nehalem)
bun build --compile --target=bun-linux-x64-baseline ./index.ts --outfile myapp

# To explicitly only support CPUs from 2013 and later, use the modern version (haswell)
# modern is faster, but baseline is more compatible.
bun build --compile --target=bun-linux-x64-modern ./index.ts --outfile myapp

----------------------------------------

TITLE: String Enum Definition Example
DESCRIPTION: Example of defining string enumerations using the bindgen framework for formatting options. Shows usage of t.stringEnum for type-safe string constants.

LANGUAGE: typescript
CODE:
export const Formatter = t.stringEnum(
  "highlight-javascript",
  "escape-powershell",
);

export const fmtString = fn({
  args: {
    global: t.globalObject,
    code: t.UTF8String,
    formatter: Formatter,
  },
  ret: t.DOMString,
});

----------------------------------------

TITLE: Accessing ArrayBuffer from Uint8Array in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Uint8Array and access its underlying ArrayBuffer using the 'buffer' property. It shows that a Uint8Array is a view over an ArrayBuffer.

LANGUAGE: typescript
CODE:
const arr = new Uint8Array(64);
arr.buffer; // => ArrayBuffer(64)

----------------------------------------

TITLE: Benchmarking Express Server with oha
DESCRIPTION: Command to benchmark the Express server using 'oha' tool. It sends 500,000 requests to the server running on localhost:3000 with a specific header to prevent response compression.

LANGUAGE: bash
CODE:
oha http://localhost:3000 -n 500000 -H "Accept-Encoding: identity"

----------------------------------------

TITLE: Conditional Test Skipping with test.skipIf in Bun
DESCRIPTION: This example demonstrates how to use 'test.skipIf' to conditionally skip tests based on a specified condition.

LANGUAGE: typescript
CODE:
const macOS = process.arch === "darwin";

test.skipIf(macOS)("runs on non-macOS", () => {
  // runs if *not* macOS
});

----------------------------------------

TITLE: Foobar Component Definition with Version Info
DESCRIPTION: YAML metadata block indicating Foobar component was added in version 1.0.0

LANGUAGE: yaml
CODE:
added: v1.0.0

----------------------------------------

TITLE: Testing Sentry Error Capture
DESCRIPTION: Example code demonstrating how to capture and send a test error to Sentry using try-catch and setTimeout

LANGUAGE: javascript
CODE:
setTimeout(() => {
  try {
    foo();
  } catch (e) {
    Sentry.captureException(e);
  }
}, 99);

----------------------------------------

TITLE: Coverage Threshold Configuration
DESCRIPTION: Setting coverage thresholds for test suite in bunfig.toml, with options for both combined and separate line/function thresholds.

LANGUAGE: toml
CODE:
[test]

# to require 90% line-level and function-level coverage
coverageThreshold = 0.9

# to set different thresholds for lines and functions
coverageThreshold = { lines = 0.9, functions = 0.9 }

----------------------------------------

TITLE: Configuring Package Registry in Bun
DESCRIPTION: Sets the default registry and configures scoped registries for package installation in Bun.

LANGUAGE: toml
CODE:
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"
# set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }
# set a username/password
registry = "https://username:password@registry.npmjs.org"

[install.scopes]
# registry as string
myorg = "https://username:password@registry.myorg.com/"

# registry with username/password
# you can reference environment variables
myorg = { username = "myusername", password = "$npm_password", url = "https://registry.myorg.com/" }

# registry with token
myorg = { token = "$npm_token", url = "https://registry.myorg.com/" }

----------------------------------------

TITLE: Dead Code Elimination with Macros in TypeScript
DESCRIPTION: Illustrates how dead code elimination works with macros. The macro returns a constant value, allowing the bundler to eliminate unreachable code.

LANGUAGE: typescript
CODE:
import {returnFalse} from './returnFalse.ts' with { type: 'macro' };

if (returnFalse()) {
  console.log("This code is eliminated");
}

----------------------------------------

TITLE: Serialization and Deserialization with bun:jsc in JavaScript
DESCRIPTION: Shows how to use serialize and deserialize functions from the bun:jsc module to save JavaScript values into ArrayBuffer and back in JavaScript.

LANGUAGE: javascript
CODE:
import { serialize, deserialize } from "bun:jsc";

const buf = serialize({ foo: "bar" });
const obj = deserialize(buf);
console.log(obj); // => { foo: "bar" }

----------------------------------------

TITLE: Testing Buffer Manipulation and Process Execution in Bun
DESCRIPTION: This test case creates a 1MB buffer filled with numeric data, spawns 5 Bun processes to read this data, and verifies their output. It demonstrates Bun's capabilities in buffer manipulation, file I/O, and process management.

LANGUAGE: JavaScript
CODE:
import { $ } from "bun";
import {join } from 'path';
test("09041", async () => {
  const buffer = Buffer.alloc(1024 * 1024);
  let i = 0;
  while (i < 1024 * 1024) {
    i += buffer.write(Number(i).toString(10), i);
  }
  const buns = Array.from(
    { length: 5 },
    () => $`${process.argv0} run ${join(import.meta.dir, "09041-fixture.mjs")} < ${buffer}`,
  );

  const runs = await Promise.all(buns);
  for (let i = 0; i < runs.length; i++) {
    const run = runs[i];
    expect(run.exitCode).toBe(0);
    expect(run.stdout).toHaveLength(1024 * 1024);
    expect(run.stdout).toEqual(buffer);
  }
}, 30000);

----------------------------------------

TITLE: Converting Node.js Buffer to ArrayBuffer in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a Node.js Buffer and access its underlying ArrayBuffer. It allocates a Buffer of 64 bytes and then retrieves the ArrayBuffer using the 'buffer' property.

LANGUAGE: typescript
CODE:
const nodeBuf = Buffer.alloc(64);
const arrBuf = nodeBuf.buffer;

----------------------------------------

TITLE: Running WebSocket Chat Server in Node.js
DESCRIPTION: Starts the WebSocket chat server using Node.js with the 'ws' package. The server waits for 32 clients by default.

LANGUAGE: bash
CODE:
node ./chat-server.node.mjs

----------------------------------------

TITLE: Foobar II Component Definition with Version History
DESCRIPTION: YAML metadata block showing component addition in multiple versions and change history, including modification to error parameter functionality

LANGUAGE: yaml
CODE:
added:
  - v5.3.0
  - v4.2.0
changes:
  - version: v4.2.0
    pr-url: https://github.com/nodejs/node/pull/3276
    description: The `error` parameter can now be an arrow function.

----------------------------------------

TITLE: Committing and Pushing Bun Application to GitHub
DESCRIPTION: These shell commands stage the changes, commit them with a message, and push the commits to the main branch of the GitHub repository.

LANGUAGE: sh
CODE:
$ git add app.ts bun.lock package.json
$ git commit -m "Create simple Express app"
$ git push origin main

----------------------------------------

TITLE: Defining Variables in CLI for esbuild and Bun
DESCRIPTION: Shows the syntax difference for defining variables in the CLI between esbuild and Bun. Bun uses a space instead of a colon.

LANGUAGE: bash
CODE:
$ esbuild --define:foo=bar
$ bun build --define foo=bar

----------------------------------------

TITLE: Enabling Small Memory Mode in Bun
DESCRIPTION: Enables 'smol' mode to reduce memory usage at the cost of performance.

LANGUAGE: toml
CODE:
# Reduce memory usage at the cost of performance
smol = true

----------------------------------------

TITLE: Compiling TypeScript to Standalone Executable with Bun
DESCRIPTION: Demonstrates how to use Bun's bundler to compile a TypeScript file into a standalone executable. The resulting binary includes all imported files, packages, and a copy of the Bun runtime.

LANGUAGE: bash
CODE:
$ bun build ./cli.ts --compile --outfile mycli

LANGUAGE: typescript
CODE:
console.log("Hello world!");

----------------------------------------

TITLE: Comparing Jest and Bun Timer Implementations
DESCRIPTION: Shows the differences between Jest's and Bun's fake timer implementations, including how Date constructor handling differs between the two frameworks.

LANGUAGE: typescript
CODE:
test("just like in jest", () => {
  jest.useFakeTimers();
  jest.setSystemTime(new Date("2020-01-01T00:00:00.000Z"));
  expect(new Date().getFullYear()).toBe(2020);
  jest.useRealTimers();
  expect(new Date().getFullYear()).toBeGreaterThan(2020);
});

test("unlike in jest", () => {
  const OriginalDate = Date;
  jest.useFakeTimers();
  if (typeof Bun === "undefined") {
    expect(Date).not.toBe(OriginalDate);
    expect(Date.now).not.toBe(OriginalDate.now);
  } else {
    expect(Date).toBe(OriginalDate);
    expect(Date.now).toBe(OriginalDate.now);
  }
});

----------------------------------------

TITLE: Connecting to Bun Inspect Process using URL Path
DESCRIPTION: This snippet shows an alternative method to connect to a Bun process that is running with the --inspect flag by navigating to a specific URL path.

LANGUAGE: markdown
CODE:
- Navigate to `/inspect/hostname:port`

----------------------------------------

TITLE: Creating Partial Buffer View from ArrayBuffer
DESCRIPTION: Creates a Node.js Buffer that views only a portion of the underlying ArrayBuffer by specifying offset and length parameters. This example creates a view of the first 16 bytes.

LANGUAGE: typescript
CODE:
const arrBuffer = new ArrayBuffer(64);
const nodeBuffer = Buffer.from(arrBuffer, 0, 16); // view first 16 bytes

----------------------------------------

TITLE: Initializing Bun project and adding Neon serverless driver
DESCRIPTION: Commands to create a new directory, initialize a Bun project, and add the Neon serverless driver as a dependency.

LANGUAGE: sh
CODE:
$ mkdir bun-neon-postgres
$ cd bun-neon-postgres
$ bun init -y
$ bun add @neondatabase/serverless

----------------------------------------

TITLE: Setting Global Git Diff Configuration
DESCRIPTION: Configure global Git settings to use Bun for converting lockfile content before diffing. Sets the textconv command to bun and marks the files as binary.

LANGUAGE: shell
CODE:
git config --global diff.lockb.textconv bun
git config --global diff.lockb.binary true

----------------------------------------

TITLE: Running TSX File with Bun CLI
DESCRIPTION: Shows how to execute a TSX file using the Bun CLI. Bun implements special logging for JSX to enhance debugging.

LANGUAGE: bash
CODE:
$ bun run react.tsx
<Component message="Hello world!" />

----------------------------------------

TITLE: Generating EdgeDB query builder
DESCRIPTION: Command to generate the EdgeQL query builder for TypeScript using @edgedb/generate.

LANGUAGE: sh
CODE:
$ bunx @edgedb/generate edgeql-js

----------------------------------------

TITLE: Comparing CLI Usage for esbuild and Bun
DESCRIPTION: Demonstrates the basic CLI usage difference between esbuild and Bun's bundler. Bun always bundles by default and doesn't require the --bundle flag.

LANGUAGE: bash
CODE:
$ esbuild <entrypoint> --outdir=out --bundle
$ bun build <entrypoint> --outdir=out

----------------------------------------

TITLE: Building Bun with JavaScriptCore Changes
DESCRIPTION: Commands to rebuild Bun with custom JavaScriptCore modifications. This process involves updating submodules, compiling JavaScriptCore, and building Bun with the changes.

LANGUAGE: shell
CODE:
git submodule update --init --recursive
make jsc
zig build

----------------------------------------

TITLE: Using S3Client with Different S3-Compatible Services in Bun
DESCRIPTION: Demonstrates how to configure Bun's S3Client to work with various S3-compatible storage services like AWS S3, Google Cloud Storage, Cloudflare R2, DigitalOcean Spaces, and MinIO.

LANGUAGE: typescript
CODE:
import { S3Client } from "bun";

// AWS S3
const s3 = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  // endpoint: "https://s3.us-east-1.amazonaws.com",
  // region: "us-east-1",
});

// Google Cloud Storage
const gcs = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  endpoint: "https://storage.googleapis.com",
});

// CloudFlare R2
const r2 = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  endpoint: "https://<account-id>.r2.cloudflarestorage.com",
});

// DigitalOcean Spaces
const spaces = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  // region: "nyc3",
  endpoint: "https://<region>.digitaloceanspaces.com",
});

// MinIO
const minio = new S3Client({
  accessKeyId: "access-key",
  secretAccessKey: "secret-key",
  bucket: "my-bucket",
  endpoint: "http://localhost:9000",
});

----------------------------------------

TITLE: Adding DOM Type References in TypeScript Tests
DESCRIPTION: This TypeScript code snippet shows how to add a triple-slash directive to include DOM type definitions in test files, resolving potential type errors.

LANGUAGE: typescript
CODE:
/// <reference lib="dom" />

import {test, expect} from 'bun:test';

test('dom test', () => {
  document.body.innerHTML = `<button>My button</button>`;
  const button = document.querySelector('button');
  expect(button?.innerText).toEqual('My button');
});

----------------------------------------

TITLE: Demonstrating a Critical Security Bug in C++ Server Code
DESCRIPTION: This code snippet showcases a server implementation with a potential security vulnerability. It uses epoll for event handling and recv for data reception, but contains a critical bug that's hard to trigger under normal circumstances.

LANGUAGE: c++
CODE:
int epfd = epoll_create1();

int lsfd = listen(asdasdasd);

int ready_fd = epoll_wait(epfd, lalalala);

for (all ready fds)

int length = recv(buf, 24234234);

//copy from 0 and length

----------------------------------------

TITLE: Converting Blob to Uint8Array in TypeScript using Bun
DESCRIPTION: This snippet demonstrates how to create a Blob with a string content, read its contents as an ArrayBuffer, and then convert it to a Uint8Array. It uses the Blob.arrayBuffer() method to get the ArrayBuffer, which is then used to create a new Uint8Array.

LANGUAGE: typescript
CODE:
const blob = new Blob(["hello world"]);
const arr = new Uint8Array(await blob.arrayBuffer());

----------------------------------------

TITLE: Worker Event Handling and Lifecycle Management
DESCRIPTION: Examples of handling worker events and managing worker lifecycle with ref/unref

LANGUAGE: typescript
CODE:
const worker = new Worker(new URL("worker.ts", import.meta.url).href);

worker.addEventListener("open", () => {
  console.log("worker is ready");
});

worker.addEventListener("close", event => {
  console.log("worker is being closed");
});

worker.unref();

----------------------------------------

TITLE: Bun Transpiler API Reference in TypeScript
DESCRIPTION: Provides a comprehensive reference for the Bun.Transpiler class, including the TranspilerOptions interface and various method signatures.

LANGUAGE: typescript
CODE:
type Loader = "jsx" | "js" | "ts" | "tsx";

interface TranspilerOptions {
  define?: Record<string, string>,
  loader?: Loader,
  target?: "browser" | "bun" | "node",
  tsconfig?: string | TSConfig,
  macro?: MacroMap,
  exports?: {
      eliminate?: string[];
      replace?: Record<string, string>;
  },
  trimUnusedImports?: boolean,
  minifyWhitespace?: boolean,
  inline?: boolean,
}

interface MacroMap {
  [packagePath: string]: {
    [importItemName: string]: string,
  },
}

class Bun.Transpiler {
  constructor(options: TranspilerOptions)

  transform(code: string, loader?: Loader): Promise<string>
  transformSync(code: string, loader?: Loader): string

  scan(code: string): {exports: string[], imports: Import}
  scanImports(code: string): Import[]
}

type Import = {
  path: string,
  kind:
  | "import-statement"
  | "require-call"
  | "require-resolve"
  | "dynamic-import"
  | "import-rule"
  | "url-token"
  | "internal" 
  | "entry-point-build"
  | "entry-point-run"
}

const transpiler = new Bun.Transpiler({ loader: "jsx" });

----------------------------------------

TITLE: Exporting Module Contents in Bun Builtin Modules
DESCRIPTION: Shows how to export module contents in Bun builtin modules. The 'export default' syntax is used to control the result of using 'require' to import the module, and named exports are preprocessed into properties on the default object.

LANGUAGE: typescript
CODE:
const fs = require("fs"); // load another builtin module

export default {
  hello: 2,
  world: 3,
};

----------------------------------------

TITLE: Installing Dependencies for SolidStart App with Bun
DESCRIPTION: This command installs the necessary dependencies for the SolidStart application using Bun's package manager.

LANGUAGE: sh
CODE:
$ cd my-app
$ bun install

----------------------------------------

TITLE: Importing and Using a Macro in TypeScript
DESCRIPTION: Shows how to import a macro using the import attribute syntax and use it in code. The macro will be executed during bundling.

LANGUAGE: typescript
CODE:
import { random } from './random.ts' with { type: 'macro' };

console.log(`Your random number is ${random()}`);

----------------------------------------

TITLE: Configuring Scoped Private Registries in Bun
DESCRIPTION: Configure organization-specific private registries in bunfig.toml using different authentication methods. Supports environment variable references for credentials.

LANGUAGE: toml
CODE:
[install.scopes]
# registry as string
"@myorg1" = "https://username:password@registry.myorg.com/"

# registry with username/password
# you can reference environment variables
"@myorg2" = { username = "myusername", password = "$NPM_PASS", url = "https://registry.myorg.com/" }

# registry with token
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }

----------------------------------------

TITLE: C Function Returning an Object using N-API
DESCRIPTION: This C function shows how to create and return an empty object to JavaScript using N-API. It demonstrates the flexibility of using N-API for non-primitive types.

LANGUAGE: c
CODE:
#include <node/node_api.h>

napi_value hello(napi_env env) {
  napi_value result;
  napi_create_object(env, &result);
  return result;
}

----------------------------------------

TITLE: Registering happy-dom Globals in TypeScript
DESCRIPTION: This TypeScript code registers the happy-dom globals, making browser APIs available in the global scope for testing.

LANGUAGE: typescript
CODE:
import { GlobalRegistrator } from "@happy-dom/global-registrator";

GlobalRegistrator.register();

----------------------------------------

TITLE: Converting Uint8Array to Buffer using Buffer.from() in TypeScript
DESCRIPTION: This snippet shows how to create a Buffer instance from a Uint8Array using the Buffer.from() method. It demonstrates the conversion process in TypeScript, which is commonly used in Node.js and Bun environments for handling binary data.

LANGUAGE: typescript
CODE:
const arr: Uint8Array = ...
const buf = Buffer.from(arr);

----------------------------------------

TITLE: Passing Arguments to bunx Executable
DESCRIPTION: Example of passing command-line arguments and flags to a package executable using bunx

LANGUAGE: bash
CODE:
$ bunx my-cli --foo bar

----------------------------------------

TITLE: Setting Concurrent Scripts Limit for Bun Install
DESCRIPTION: Command to adjust the maximum number of concurrent scripts that can run during package installation.

LANGUAGE: bash
CODE:
$ bun install --concurrent-scripts 5

----------------------------------------

TITLE: Main Function for Minigzip Utility in C
DESCRIPTION: The main function handles command-line arguments, determines compression or decompression mode, and processes input files or standard input/output accordingly. It supports various compression options and file handling.

LANGUAGE: C
CODE:
int main(argc, argv)
    int argc;
    char *argv[];
{
    int copyout = 0;
    int uncompr = 0;
    gzFile file;
    char *bname, outmode[20];

    snprintf(outmode, sizeof(outmode), "%s", "wb6 ");

    prog = argv[0];
    bname = strrchr(argv[0], '/');
    if (bname)
      bname++;
    else
      bname = argv[0];
    argc--, argv++;

    if (!strcmp(bname, "gunzip"))
      uncompr = 1;
    else if (!strcmp(bname, "zcat"))
      copyout = uncompr = 1;

    // ... (argument parsing and file processing)

    return 0;
}

----------------------------------------

TITLE: Configuring Package Exports for Macros in JSON
DESCRIPTION: Shows how to configure a package.json file to provide a special version of a package for the macro environment using the 'macro' export condition.

LANGUAGE: json
CODE:
{
  "name": "my-package",
  "exports": {
    "import": "./index.js",
    "require": "./index.js",
    "default": "./index.js",
    "macro": "./index.macro.js"
  }
}

----------------------------------------

TITLE: Running Tests with Bun CLI
DESCRIPTION: Examples of different ways to run tests using Bun's test command, including running all tests, specific directories, or individual test files.

LANGUAGE: shell
CODE:
bun test # Run all tests
bun test js/bun # Only run tests in a directory
bun test sqlite.test.ts # Only run a specific test

----------------------------------------

TITLE: Setting Default Registry in .npmrc for Bun
DESCRIPTION: This snippet demonstrates how to set the default registry in the .npmrc file for Bun. It changes the default registry from npm's official registry to a local address.

LANGUAGE: ini
CODE:
registry=http://localhost:4873/

----------------------------------------

TITLE: Compiling and Running C Code in JavaScript using bun:ffi
DESCRIPTION: This snippet demonstrates how to use the `cc` function to compile a C function and call it from JavaScript. It imports a C source file, defines the function signature, and logs the result.

LANGUAGE: typescript
CODE:
import { cc } from "bun:ffi";
import source from "./hello.c" with { type: "file" };

const {
  symbols: { hello },
} = cc({
  source,
  symbols: {
    hello: {
      args: [],
      returns: "int",
    },
  },
});

console.log("What is the answer to the universe?", hello());

----------------------------------------

TITLE: Echo Command with Output Control
DESCRIPTION: Shows different ways to handle command output including direct execution, quiet mode, and text conversion.

LANGUAGE: javascript
CODE:
import { $ } from "bun";

await $`echo "Hello World!"`; // Hello World!

await $`echo "Hello World!"`.quiet(); // No output

const welcome = await $`echo "Hello World!"`.text();

console.log(welcome); // Hello World!\n

----------------------------------------

TITLE: Test File Coverage Configuration
DESCRIPTION: Configuration to skip test files in coverage reporting using bunfig.toml.

LANGUAGE: toml
CODE:
[test]
coverageSkipTestFiles = true       # default false

----------------------------------------

TITLE: Converting Uint8Array to String using TextDecoder in TypeScript
DESCRIPTION: This snippet demonstrates how to use the TextDecoder class to convert a Uint8Array containing ASCII character codes to a string. It creates a Uint8Array with numeric values representing 'hello', initializes a TextDecoder, and uses its decode method to convert the array to a string.

LANGUAGE: typescript
CODE:
const arr = new Uint8Array([104, 101, 108, 108, 111]);
const decoder = new TextDecoder();
const str = decoder.decode(arr);
// => "hello"

----------------------------------------

TITLE: CommonJS Module Usage in Bun
DESCRIPTION: Demonstrates how Bun supports CommonJS modules alongside ES modules, allowing the use of require() and module.exports.

LANGUAGE: javascript
CODE:
const { hello } = require("./hello");

hello();

LANGUAGE: javascript
CODE:
function hello() {
  console.log("Hello world!");
}

exports.hello = hello;

----------------------------------------

TITLE: Running Install Benchmark without Lockfile in Offline Mode
DESCRIPTION: This command compares the installation performance of Bun, pnpm, yarn, and npm without lockfiles in offline mode. It uses hyperfine to run the benchmark, removing lockfiles and clearing node_modules before each run.

LANGUAGE: sh
CODE:
$ hyperfine --prepare 'rm -rf node_modules' --warmup 1 'rm bun.lock && bun install' 'rm pnpm-lock.yaml && pnpm install --prefer-offline' 'rm yarn.lock && yarn --offline' 'rm package-lock.json && npm install --prefer-offline'

----------------------------------------

TITLE: TOML Import and Usage Example
DESCRIPTION: Demonstrates TOML file importing and parsing with Bun's native TOML parser.

LANGUAGE: typescript
CODE:
import config from "./bunfig.toml";
config.logLevel; // => "debug"

LANGUAGE: toml
CODE:
name = "John Doe"
age = 35
email = "johndoe@example.com"

LANGUAGE: javascript
CODE:
export default {
  name: "John Doe",
  age: 35,
  email: "johndoe@example.com"
}

----------------------------------------

TITLE: CommonJS Module Import
DESCRIPTION: Shows how to import the path module using CommonJS require() syntax. This is the traditional Node.js approach for module imports.

LANGUAGE: javascript
CODE:
require('path');

----------------------------------------

TITLE: Implementing Basic Router in Stric
DESCRIPTION: Creates a basic router implementation using Stric framework that responds with 'Hi' for root path requests. Uses the @stricjs/router package to handle routing.

LANGUAGE: typescript
CODE:
import { Router } from '@stricjs/router';

// Export the fetch handler and serve with Bun
export default new Router()
  // Return 'Hi' on every request
  .get('/', () => new Response('Hi'));

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Configuring Test Coverage in Bun
DESCRIPTION: Enables coverage reporting and sets coverage thresholds for Bun's test runner.

LANGUAGE: toml
CODE:
[test]
coverage = false

# to require 90% line-level and function-level coverage
coverageThreshold = 0.9

# Different thresholds for line, function, and statement coverage
coverageThreshold = { line = 0.7, function = 0.8, statement = 0.9 }

----------------------------------------

TITLE: Using Jest-style Function Mocks in Bun Tests
DESCRIPTION: This snippet shows how to use Jest-style mocking with `jest.fn()` in Bun, which behaves identically to Bun's native `mock()` function.

LANGUAGE: typescript
CODE:
import { test, expect, jest } from "bun:test";
const random = jest.fn(() => Math.random());

test("random", async () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Converting Blob to DataView in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Blob with string content, read its contents into an ArrayBuffer, and then create a DataView from that buffer. This process allows for binary data manipulation of the Blob's contents.

LANGUAGE: typescript
CODE:
const blob = new Blob(["hello world"]);
const arr = new DataView(await blob.arrayBuffer());

----------------------------------------

TITLE: UDP Connection Setup in Bun
DESCRIPTION: Shows how to establish a UDP connection between client and server for dedicated peer communication.

LANGUAGE: typescript
CODE:
const server = await Bun.udpSocket({
  socket: {
    data(socket, buf, port, addr) {
      console.log(`message from ${addr}:${port}:`)
      console.log(buf.toString());
    } 
  }
})
const client = await Bun.udpSocket({
  connect: {
    port: server.port,
    hostname: '127.0.0.1',
  }
});

client.send("Hello");

----------------------------------------

TITLE: Using Bun's Runtime for Scripts
DESCRIPTION: This snippet shows how to force bun to use its own runtime instead of the system's node executable when running scripts, even with node shebangs.

LANGUAGE: sh
CODE:
# Force using Bun's runtime instead of node
$ bun --bun my-script

# This also works:
$ bun run --bun my-script

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager.

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Loading JavaScript Modules in Browser
DESCRIPTION: Demonstrates basic ESM module loading in browser using HTML script tag and JavaScript import/export statements across multiple files.

LANGUAGE: html
CODE:
<html>
  <head>
    <script type="module" src="/index.js" ></script>
  </head>
</html>

LANGUAGE: javascript
CODE:
import {sayHello} from "./hello.js";

sayHello();

LANGUAGE: javascript
CODE:
export function sayHello() {
  console.log("Hello, world!");
}

----------------------------------------

TITLE: Specifying ALTDOCS Introduction Version in Markdown
DESCRIPTION: This snippet is a Markdown comment that specifies the version of bun in which the ALTDOCS feature was introduced. It uses an HTML-style comment within a Markdown file to provide metadata about the feature's introduction.

LANGUAGE: markdown
CODE:
<!--introduced_in=v8.4.0-->

----------------------------------------

TITLE: HTMLRewriter Input Types Example
DESCRIPTION: Demonstrates different input types that HTMLRewriter can handle, including Response, string, ArrayBuffer, Blob, and File.

LANGUAGE: typescript
CODE:
// From Response
rewriter.transform(new Response("<div>content</div>"));

// From string
rewriter.transform("<div>content</div>");

// From ArrayBuffer
rewriter.transform(new TextEncoder().encode("<div>content</div>").buffer);

// From Blob
rewriter.transform(new Blob(["<div>content</div>"]));

// From File
rewriter.transform(Bun.file("index.html"));

----------------------------------------

TITLE: Defining Global Object Table for Bun JavaScript Runtime in C++
DESCRIPTION: This code snippet defines a table of global object properties and methods for the Bun JavaScript runtime. It includes built-in functions, objects, and constructors with their corresponding C++ implementations or callbacks. The table is used to generate a header file named ZigGlobalObject.lut.h.

LANGUAGE: C++
CODE:
/* Source for ZigGlobalObject.lut.h
@begin bunGlobalObjectTable
  addEventListener                jsFunctionAddEventListener                           Function 2
  alert                           WebCore__alert                                       Function 1
  atob                            functionATOB                                         Function 1
  btoa                            functionBTOA                                         Function 1
  clearImmediate                  functionClearImmediate                               Function 1
  clearInterval                   functionClearInterval                                Function 1
  clearTimeout                    functionClearTimeout                                 Function 1
  confirm                         WebCore__confirm                                     Function 1
  dispatchEvent                   jsFunctionDispatchEvent                              Function 1
  fetch                           constructBunFetchObject                              PropertyCallback
  postMessage                     jsFunctionPostMessage                                Function 1
  prompt                          WebCore__prompt                                      Function 1
  queueMicrotask                  functionQueueMicrotask                               Function 2
  removeEventListener             jsFunctionRemoveEventListener                        Function 2
  reportError                     functionReportError                                  Function 1
  setImmediate                    functionSetImmediate                                 Function 1
  setInterval                     functionSetInterval                                  Function 1
  setTimeout                      functionSetTimeout                                   Function 1
  structuredClone                 functionStructuredClone                              Function 2
  
  global                          GlobalObject_getGlobalThis                           PropertyCallback
  
  Bun                             GlobalObject::m_bunObject                            CellProperty|DontDelete|ReadOnly
  File                            GlobalObject::m_JSDOMFileConstructor                 CellProperty
  crypto                          GlobalObject::m_cryptoObject                         CellProperty
  navigator                       GlobalObject::m_navigatorObject                      CellProperty
  performance                     GlobalObject::m_performanceObject                    CellProperty
  process                         GlobalObject::m_processObject                        CellProperty

  Blob                            GlobalObject::m_JSBlob                               ClassStructure
  Buffer                          GlobalObject::m_JSBufferClassStructure               ClassStructure
  BuildError                      GlobalObject::m_JSBuildMessage                       ClassStructure
  BuildMessage                    GlobalObject::m_JSBuildMessage                       ClassStructure
  Crypto                          GlobalObject::m_JSCrypto                             ClassStructure
  HTMLRewriter                    GlobalObject::m_JSHTMLRewriter                       ClassStructure
  Request                         GlobalObject::m_JSRequest                            ClassStructure
  ResolveError                    GlobalObject::m_JSResolveMessage                     ClassStructure
  ResolveMessage                  GlobalObject::m_JSResolveMessage                     ClassStructure
  Response                        GlobalObject::m_JSResponse                           ClassStructure
  TextDecoder                     GlobalObject::m_JSTextDecoder                        ClassStructure

  AbortController                 AbortControllerConstructorCallback                   PropertyCallback
  AbortSignal                     AbortSignalConstructorCallback                       PropertyCallback
  BroadcastChannel                BroadcastChannelConstructorCallback                  PropertyCallback
  ByteLengthQueuingStrategy       ByteLengthQueuingStrategyConstructorCallback         PropertyCallback
  CloseEvent                      CloseEventConstructorCallback                        PropertyCallback
  CountQueuingStrategy            CountQueuingStrategyConstructorCallback              PropertyCallback
  CryptoKey                       CryptoKeyConstructorCallback                         PropertyCallback
  CustomEvent                     CustomEventConstructorCallback                       PropertyCallback
  DOMException                    DOMExceptionConstructorCallback                      PropertyCallback
  ErrorEvent                      ErrorEventConstructorCallback                        PropertyCallback
  Event                           EventConstructorCallback                             PropertyCallback
  EventTarget                     EventTargetConstructorCallback                       PropertyCallback
  FormData                        DOMFormDataConstructorCallback                       PropertyCallback
  Headers                         FetchHeadersConstructorCallback                      PropertyCallback
  MessageChannel                  MessageChannelConstructorCallback                    PropertyCallback
  MessageEvent                    MessageEventConstructorCallback                      PropertyCallback
  MessagePort                     MessagePortConstructorCallback                       PropertyCallback
  Performance                     PerformanceConstructorCallback                       PropertyCallback
  PerformanceEntry                PerformanceEntryConstructorCallback                  PropertyCallback
  PerformanceMark                 PerformanceMarkConstructorCallback                   PropertyCallback
  PerformanceMeasure              PerformanceMeasureConstructorCallback                PropertyCallback
  PerformanceObserver             PerformanceObserverConstructorCallback               PropertyCallback
  PerformanceObserverEntryList    PerformanceObserverEntryListConstructorCallback      PropertyCallback
  PerformanceResourceTiming       PerformanceResourceTimingConstructorCallback         PropertyCallback
  PerformanceServerTiming         PerformanceServerTimingConstructorCallback           PropertyCallback
  PerformanceTiming               PerformanceTimingConstructorCallback                 PropertyCallback
  ReadableByteStreamController    ReadableByteStreamControllerConstructorCallback      PropertyCallback
  ReadableStream                  ReadableStreamConstructorCallback                    PropertyCallback
  ReadableStreamBYOBReader        ReadableStreamBYOBReaderConstructorCallback          PropertyCallback
  ReadableStreamBYOBRequest       ReadableStreamBYOBRequestConstructorCallback         PropertyCallback
  ReadableStreamDefaultController ReadableStreamDefaultControllerConstructorCallback   PropertyCallback
  ReadableStreamDefaultReader     ReadableStreamDefaultReaderConstructorCallback       PropertyCallback
  SubtleCrypto                    SubtleCryptoConstructorCallback                      PropertyCallback
  TextDecoderStream               TextDecoderStreamConstructorCallback                 PropertyCallback
  TextEncoder                     TextEncoderConstructorCallback                       PropertyCallback
  TextEncoderStream               TextEncoderStreamConstructorCallback                 PropertyCallback
  TransformStream                 TransformStreamConstructorCallback                   PropertyCallback
  TransformStreamDefaultController TransformStreamDefaultControllerConstructorCallback PropertyCallback
  URL                             DOMURLConstructorCallback                            DontEnum|PropertyCallback
  URLSearchParams                 URLSearchParamsConstructorCallback                   DontEnum|PropertyCallback
  WebSocket                       WebSocketConstructorCallback                         PropertyCallback
  Worker                          WorkerConstructorCallback                            PropertyCallback
  WritableStream                  WritableStreamConstructorCallback                    PropertyCallback
  WritableStreamDefaultController WritableStreamDefaultControllerConstructorCallback   PropertyCallback
  WritableStreamDefaultWriter     WritableStreamDefaultWriterConstructorCallback       PropertyCallback
@end
*/

----------------------------------------

TITLE: Configuring Telemetry in Bun
DESCRIPTION: Enables or disables analytics records in Bun.

LANGUAGE: toml
CODE:
telemetry = false

----------------------------------------

TITLE: Initializing Bun Project
DESCRIPTION: Command to initialize a new Bun project with default TypeScript configuration.

LANGUAGE: sh
CODE:
$ bun init

----------------------------------------

TITLE: Basic Buffer to ReadableStream Conversion in TypeScript
DESCRIPTION: Simple approach to convert a Buffer to ReadableStream by enqueueing the entire buffer as a single chunk. This method is not recommended for large buffers as it doesn't utilize true streaming.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello world");
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue(buf);
    controller.close();
  },
});

----------------------------------------

TITLE: Accessing Command-Line Arguments in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to access the raw command-line arguments using Bun.argv. It simply logs the argv array to the console.

LANGUAGE: typescript
CODE:
console.log(Bun.argv);

----------------------------------------

TITLE: Finding Executable Paths with Bun.which in TypeScript
DESCRIPTION: Demonstrates how to use Bun.which to locate executable files in the system path. Returns the absolute path of the executable if found, or null if not found. Examples include finding common executables like sh, bun, and handling non-existent files.

LANGUAGE: typescript
CODE:
Bun.which("sh"); // => "/bin/sh"
Bun.which("notfound"); // => null
Bun.which("bun"); // => "/home/user/.bun/bin/bun"

----------------------------------------

TITLE: Displaying CSS HMR Frame Time Analysis Results
DESCRIPTION: This snippet shows the output of the performance analysis, presenting percentile breakdowns of CSS HMR frame times and the number of rendered frames. It provides insights into the performance characteristics of Bun's CSS Hot Module Replacement.

LANGUAGE: plaintext
CODE:
bun
 --------------------------------------------------
 CSS HMR FRAME TIME

 50th percentile: 20ms 
 75th percentile: 24.4ms 
 90th percentile: 41ms 
 95th percentile: 53.9ms 
 99th percentile: 90.4ms 
 Rendered frames: 475 / 1024 (46%)

----------------------------------------

TITLE: HMR Accept with Callback Implementation
DESCRIPTION: Demonstrates how to implement HMR accept with a callback function to handle module updates explicitly.

LANGUAGE: typescript
CODE:
export const count = 0;

import.meta.hot.accept(newModule => {
  if (newModule) {
    // newModule is undefined when SyntaxError happened
    console.log("updated: count is now ", newModule.count);
  }
});

----------------------------------------

TITLE: Using Global Variables in Bundler Tests
DESCRIPTION: Demonstrates how to use globalThis to define extra variables for testing bundled code.

LANGUAGE: typescript
CODE:
itBundled("default/MinifiedBundleEndingWithImportantSemicolon", {
  files: {
    "/entry.js": `while(foo()); // This semicolon must not be stripped`,
    "/test.js": /* js */ `
      let i = 0;
      globalThis.foo = () => {
        console.log(i++);
        return i === 1;
      };
      await import('./out.js')
    `,
  },
  minifyWhitespace: true,
  format: "iife",
  run: {
    file: "/test.js",
    stdout: "0\n1",
  },
});

----------------------------------------

TITLE: Simple C Function to be Compiled and Run in JavaScript
DESCRIPTION: This C code defines a simple function that returns the integer 42. It is meant to be compiled and called from JavaScript using bun:ffi.

LANGUAGE: c
CODE:
int hello() {
  return 42;
}

----------------------------------------

TITLE: Node.js N-API Function Exports
DESCRIPTION: Node.js Native API (N-API) functions providing a stable ABI layer for native addons.

LANGUAGE: C++
CODE:
_napi_acquire_threadsafe_function
_napi_add_async_cleanup_hook
_napi_add_env_cleanup_hook
...

----------------------------------------

TITLE: Reinstalling ccache on macOS
DESCRIPTION: Reinstalls ccache on macOS to resolve conflicts with TinyCC building.

LANGUAGE: bash
CODE:
brew uninstall ccache
brew install ccache

----------------------------------------

TITLE: Configuring package.json for Bun Project
DESCRIPTION: Example package.json configuration file showing basic project metadata and author information.

LANGUAGE: json
CODE:
{
  "name": "bun",
  "version": "1.0.0",
  "author": {
    "name": "John Dough",
    "email": "john@dough.com"
  }
}

----------------------------------------

TITLE: Efficient Buffer to ReadableStream Conversion Using Blob
DESCRIPTION: Improved method to convert Buffer to ReadableStream using Blob.stream(). This approach enables true streaming of data in chunks.

LANGUAGE: typescript
CODE:
const buf = Buffer.from("hello world");
const blob = new Blob([buf]);
const stream = blob.stream();

----------------------------------------

TITLE: Implementing global setup and teardown in Bun test runner
DESCRIPTION: This code demonstrates how to create global setup and teardown logic for a multi-file test run in Bun's test runner using beforeAll and afterAll hooks in a separate setup file.

LANGUAGE: typescript
CODE:
import { beforeAll, afterAll } from "bun:test";

beforeAll(() => {
  // global setup
});

afterAll(() => {
  // global teardown
});

----------------------------------------

TITLE: Generating UUIDv7 with Bun.randomUUIDv7() in TypeScript
DESCRIPTION: Demonstrates how to generate a UUIDv7 using Bun.randomUUIDv7() in TypeScript.

LANGUAGE: typescript
CODE:
import { randomUUIDv7 } from "bun";

const id = randomUUIDv7();
// => "0192ce11-26d5-7dc3-9305-1426de888c5a"

----------------------------------------

TITLE: Generated Snapshot File Content
DESCRIPTION: Example of the generated snapshot file content, showing how the test value is serialized and stored.

LANGUAGE: javascript
CODE:
// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
{
  "foo": "bar",
}
`;

----------------------------------------

TITLE: CSS Module Composition from Separate Files in Bun
DESCRIPTION: Demonstrates how to compose styles from a separate CSS module file using the 'composes' property with a 'from' clause.

LANGUAGE: css
CODE:
/* background.module.css */
.background {
  background-color: blue;
}

/* styles.module.css */
.button {
  composes: background from "./background.module.css";
  color: red;
}

----------------------------------------

TITLE: Running Bun Project in Production
DESCRIPTION: Command to run the Bun project in a production environment.

LANGUAGE: bash
CODE:
bun start

----------------------------------------

TITLE: Registering Builtin Functions in C++ for Bun
DESCRIPTION: Demonstrates how to register a builtin function in C++ for the Bun project. This example shows how to use the CodeGenerator to create a FunctionExecutable and add it to a global object.

LANGUAGE: c++
CODE:
object->putDirectBuiltinFunction(
  vm,
  globalObject,
  identifier,
  // ReadableStream.ts, `function readableStreamToJSON()`
  // This returns a FunctionExecutable* (extends JSCell*, but not JSFunction*).
  readableStreamReadableStreamToJSONCodeGenerator(vm),
  JSC::PropertyAttribute::DontDelete | 0
);

----------------------------------------

TITLE: Configuring bunfig.toml for Dev Server
DESCRIPTION: Configuration in bunfig.toml to enable the Svelte plugin for Bun's Fullstack Dev Server with HMR support.

LANGUAGE: toml
CODE:
[serve.static]
plugins = ["bun-plugin-svelte"]

----------------------------------------

TITLE: Implementing Basic Math Function in Zig
DESCRIPTION: Example of implementing a simple addition function in Zig with error handling for integer overflow. The function takes two 32-bit integers and returns their sum.

LANGUAGE: zig
CODE:
pub fn add(global: *JSC.JSGlobalObject, a: i32, b: i32) !i32 {
    return std.math.add(i32, a, b) catch {
        // Binding functions can return `error.OutOfMemory` and `error.JSError`.
        // Others like `error.Overflow` from `std.math.add` must be converted.
        // Remember to be descriptive.
        return global.throwPretty("Integer overflow while adding", .{});
    };
}

const gen = bun.gen.math; // "math" being this file's basename

const std = @import("std");
const bun = @import("root").bun;
const JSC = bun.JSC;

----------------------------------------

TITLE: Initializing CMake Project for Bun
DESCRIPTION: Sets up the CMake project for Bun, including minimum CMake version, module paths, and policies. It also handles platform-specific configurations for Windows and macOS.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.24)
message(STATUS "Configuring Bun")

list(APPEND CMAKE_MODULE_PATH
  ${CMAKE_SOURCE_DIR}/cmake
  ${CMAKE_SOURCE_DIR}/cmake/targets
  ${CMAKE_SOURCE_DIR}/cmake/tools
  ${CMAKE_SOURCE_DIR}/cmake/analysis
  ${CMAKE_SOURCE_DIR}/cmake/scripts
)

include(Policies)
include(Globals)

if (CMAKE_HOST_WIN32)
  # Workaround for TLS certificate verification issue on Windows when downloading from GitHub
  # Remove this once we've bumped the CI machines build image
  set(CMAKE_TLS_VERIFY 0)
endif()

# --- Compilers ---

if(CMAKE_HOST_APPLE)
  include(SetupMacSDK)
endif()
include(SetupLLVM)
include(SetupCcache)

----------------------------------------

TITLE: Configuring Chunk Size with Blob Streaming
DESCRIPTION: Example showing how to set a specific chunk size when creating a ReadableStream from a Uint8Array using Blob.stream(). This allows for fine-tuned control over the streaming process.

LANGUAGE: typescript
CODE:
const arr = new Uint8Array(64);
const blob = new Blob([arr]);

// set chunk size of 1024 bytes
const stream = blob.stream(1024);

----------------------------------------

TITLE: Decoding Base64 Password using Command Line
DESCRIPTION: This bash snippet shows how to decode a base64-encoded password using the base64 command-line tool. It's noted that this method may save the password in terminal history, which is not recommended for security reasons.

LANGUAGE: bash
CODE:
echo "base64-encoded-password" | base64 --decode

----------------------------------------

TITLE: Implementing Basic Snapshot Test in TypeScript
DESCRIPTION: Example of creating a basic snapshot test using Bun's test runner. Shows how to import test utilities and create a test case that generates a snapshot of an object.

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ foo: "bar" }).toMatchSnapshot();
});

----------------------------------------

TITLE: Writing to Standard Output in Bun.js
DESCRIPTION: This JavaScript snippet demonstrates how to write to stdout without a trailing newline using console.write in Bun.js.

LANGUAGE: javascript
CODE:
// no trailing newline
// works with strings and typed arrays
console.write("Hello World!");

----------------------------------------

TITLE: Installing Dependencies with Bun
DESCRIPTION: Command to install project dependencies using Bun package manager.

LANGUAGE: bash
CODE:
bun install

----------------------------------------

TITLE: Accessing Private Properties and JSC Intrinsics in Bun Modules
DESCRIPTION: Demonstrates the use of the '$' prefix to access private property names and JSC intrinsics in Bun modules. This syntax allows for tamper-proof access to globals and prototype values, as well as internal variables and engine intrinsics.

LANGUAGE: typescript
CODE:
// Many globals have private versions which are impossible for the user to
// tamper with. Though, these global variables are auto-prefixed by the bundler.
const hello = $Array.from(...);

// Similar situation with prototype values. These aren't autoprefixed since it depends on type.
something.$then(...);
map.$set(...);

// Internal variables we define
$requireMap.$has("elysia");

// JSC engine intrinsics. These usually translate directly to bytecode instructions.
const arr = $newArrayWithSize(5);
// A side effect of this is that using an intrinsic incorrectly like
// this will fail to parse and cause a segfault.
console.log($getInternalField)

----------------------------------------

TITLE: Accessing Plugin State in Bun Native Plugin Implementation
DESCRIPTION: Example of accessing and modifying plugin state within the native plugin implementation in Rust.

LANGUAGE: rust
CODE:
#[bun]
pub fn on_before_parse_plugin_impl(handle: &mut OnBeforeParse) {
    // This operation is only safe if you pass in an external when registering the plugin.
    // If you don't, this could lead to a segfault or access of undefined memory.
  let plugin_state: &PluginState =
     unsafe { handle.external().and_then(|state| state.ok_or(Error::Unknown))? };


  // Fetch our source code again
  let input_source_code = handle.input_source_code()?;

  // Count the number of `foo`s and add it to our state
  let foo_count = source_code.matches("foo").count() as u32;
  plugin_state.foo_count.fetch_add(foo_count, std::sync::atomic::Ordering::Relaxed);
}

----------------------------------------

TITLE: Generating Bun Lockfile Without Installation
DESCRIPTION: Creates a bun.lock file without installing packages to node_modules using the --lockfile-only flag.

LANGUAGE: bash
CODE:
$ bun install --lockfile-only

----------------------------------------

TITLE: Running Tests in Bun
DESCRIPTION: Command to run tests specifically in Bun runtime, avoiding Vitest execution.

LANGUAGE: bash
CODE:
bun test expect-to-equal.test.js

----------------------------------------

TITLE: Configuring FileSink Buffer Size in TypeScript
DESCRIPTION: This snippet shows how to configure the buffer size of a FileSink using the highWaterMark option. Setting a larger buffer size can improve performance for writing large amounts of data.

LANGUAGE: typescript
CODE:
const file = Bun.file("/path/to/file.txt");
const writer = file.writer({ highWaterMark: 1024 * 1024 }); // 1MB

----------------------------------------

TITLE: Installing Bun in GitHub Actions Workflow
DESCRIPTION: This snippet demonstrates how to modify a GitHub Actions workflow to install Bun using the setup-bun action and run 'bun install'. It uses the actions/checkout@v4 action and the oven-sh/setup-bun@v2 action.

LANGUAGE: yaml
CODE:
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: actions/checkout@v4
     - uses: oven-sh/setup-bun@v2

      # run any `bun` or `bunx` command
     - run: bun install

----------------------------------------

TITLE: Authentication-based WebSocket Context in Bun
DESCRIPTION: Demonstrates setting up WebSocket context with user authentication data. Includes cookie parsing, token validation, and database interaction.

LANGUAGE: typescript
CODE:
type WebSocketData = {\n  createdAt: number;\n  token: string;\n  userId: string;\n};\n\n// TypeScript: specify the type of `data`\nBun.serve<WebSocketData>({\n  async fetch(req, server) {\n    // use a library to parse cookies\n    const cookies = parseCookies(req.headers.get("Cookie"));\n    const token = cookies["X-Token"];\n    const user = await getUserFromToken(token);\n\n    const upgraded = server.upgrade(req, {\n      data: {\n        createdAt: Date.now(),\n        token: cookies["X-Token"],\n        userId: user.id,\n      },\n    });\n\n    if (upgraded) return undefined;\n  },\n  websocket: {\n    async message(ws, message) {\n      // save the message to a database\n      await saveMessageToDatabase({\n        message: String(message),\n        userId: ws.data.userId,\n      });\n    },\n  },\n});

----------------------------------------

TITLE: Writing File to stdout in TypeScript
DESCRIPTION: Demonstrates how to write the contents of a file to stdout using Bun.write().

LANGUAGE: typescript
CODE:
const input = Bun.file("input.txt");
await Bun.write(Bun.stdout, input);

----------------------------------------

TITLE: Escaping Special Characters with \
DESCRIPTION: Demonstrates how to escape special glob pattern characters with backslash.

LANGUAGE: typescript
CODE:
const glob = new Glob("\\!index.ts");
glob.match("!index.ts"); // => true
glob.match("index.ts"); // => false

----------------------------------------

TITLE: Poll Event Management in C
DESCRIPTION: Low-level polling interface for managing file descriptor events. Forms the foundation for socket and timer implementations.

LANGUAGE: c
CODE:
WIN32_EXPORT struct us_poll_t *us_create_poll(struct us_loop_t *loop, int fallthrough, unsigned int ext_size);

WIN32_EXPORT void us_poll_free(struct us_poll_t *p, struct us_loop_t *loop);

/* Additional poll functions... */

----------------------------------------

TITLE: HTML Styling Function Example (Commented Out)
DESCRIPTION: Example implementation of a HTML styling function for formatting inspect output with color-coded spans. This code is currently commented out in the documentation but shows the basic approach for HTML-based styling.

LANGUAGE: javascript
CODE:
function stylizeWithHTML(str, styleType) {
  const style = inspect.styles[styleType];
  if (style !== undefined) {
    return `<span style="color:${style};">${str}</span>`;
  }
  return str;
}

----------------------------------------

TITLE: Using Plugin State in JavaScript for Bun Native Plugin
DESCRIPTION: Example of creating and using plugin state from JavaScript when registering a Bun native plugin.

LANGUAGE: javascript
CODE:
const napiModule = require("path/to/napi_module.node");
const pluginState = napiModule.createPluginState();

const result = await Bun.build({
  entrypoints: ["index.ts"],
  plugins: [
    {
      name: "replace-foo-with-bar",
      setup(build) {
        build.onBeforeParse(
          { filter: /\.ts/ },
          {
            napiModule,
            symbol: "on_before_parse_plugin_impl",
            // pass our NAPI external which contains our plugin state here
            external: pluginState,
          },
        );
      },
    },
  ],
});

console.log("Total `foo`s encountered: ", pluginState.getFooCount());

----------------------------------------

TITLE: Rebuilding JSC After Merge
DESCRIPTION: Commands to clean build artifacts and recompile JSC for macOS

LANGUAGE: bash
CODE:
rm -rf WebKitBuild

# Go to Bun's directory! Not WebKit.
cd ../../../../
make jsc-build-mac-compile

----------------------------------------

TITLE: Logging CSS Module Objects in Bun
DESCRIPTION: Demonstrates how Bun transforms CSS module imports into objects with unique identifiers for class names.

LANGUAGE: tsx
CODE:
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

console.log(styles);
console.log(otherStyles);

----------------------------------------

TITLE: Writing String Data to File using Bun.write()
DESCRIPTION: This snippet demonstrates how to write a string to a file using Bun.write(). It takes a file path and a string as arguments, efficiently writing the data to disk.

LANGUAGE: typescript
CODE:
const path = "/path/to/file.txt";
await Bun.write(path, "Lorem ipsum");

----------------------------------------

TITLE: Running Express Server with Bun
DESCRIPTION: Command to start the Express server using the Bun runtime.

LANGUAGE: sh
CODE:
bun ./express.mjs

----------------------------------------

TITLE: Building Bun on Windows
DESCRIPTION: Commands to build Bun on Windows using bun and ninja.

LANGUAGE: powershell
CODE:
bun run build

# after the initial `bun run build` you can use the following to build
ninja -Cbuild/debug

----------------------------------------

TITLE: DNS Prefetching in Bun
DESCRIPTION: Shows how to prefetch DNS entries using Bun's experimental dns.prefetch API to optimize connection times.

LANGUAGE: typescript
CODE:
import {dns} from "bun";

dns.prefetch("my.database-host.com", 5432);

----------------------------------------

TITLE: String Pattern Matching with Glob
DESCRIPTION: Shows how to match a string against a glob pattern to determine if it matches.

LANGUAGE: typescript
CODE:
import { Glob } from "bun";

const glob = new Glob("*.ts");

glob.match("index.ts"); // => true
glob.match("index.js"); // => false

----------------------------------------

TITLE: Socket Context Management in C
DESCRIPTION: Functions for managing socket contexts which handle groups of related sockets. Includes context creation, callback registration, and socket adoption capabilities.

LANGUAGE: c
CODE:
struct us_socket_context_options_t {
    const char *key_file_name;
    const char *cert_file_name;
    const char *passphrase;
    const char *dh_params_file_name;
    const char *ca_file_name;
    const char *ssl_ciphers;
    int ssl_prefer_low_memory_usage;
};

WIN32_EXPORT struct us_socket_context_t *us_create_socket_context(int ssl, struct us_loop_t *loop, int ext_size, struct us_socket_context_options_t options);

/* Additional socket context functions... */

----------------------------------------

TITLE: Basic HTTP Route Handler in µWebSockets
DESCRIPTION: Example of setting up a basic HTTP GET route handler that responds with 'Hello World!' using the µWebSockets App interface.

LANGUAGE: c++
CODE:
uWS::App().get("/hello", [](auto *res, auto *req) {
    res->end("Hello World!");
});

----------------------------------------

TITLE: Publishing Bun Lambda Layer to AWS
DESCRIPTION: Example command for publishing a Bun Lambda layer to AWS with custom architecture, release version, and region settings

LANGUAGE: sh
CODE:
bun run publish-layer -- \
  --arch aarch64 \
  --release latest \
  --output /path/to/layer.zip \
  --region us-east-1

----------------------------------------

TITLE: Basic HTML Entry Point Structure
DESCRIPTION: Example of a basic HTML entry point file with stylesheet and TypeScript module references

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="./styles.css" />
    <script src="./app.ts" type="module"></script>
  </head>
  <body>
    <img src="./logo.png" />
  </body>
</html>

----------------------------------------

TITLE: Basic HTML Entry Point Structure
DESCRIPTION: Example of a basic HTML entry point file with stylesheet and TypeScript module references

LANGUAGE: html
CODE:
<!doctype html>
<html>
  <head>
    <link rel="stylesheet" href="./styles.css" />
    <script src="./app.ts" type="module"></script>
  </head>
  <body>
    <img src="./logo.png" />
  </body>
</html>

----------------------------------------

TITLE: Writing to stdout using Bun.write() in TypeScript
DESCRIPTION: This snippet shows a more advanced method of writing to stdout in Bun using Bun.write(). It utilizes the Bun.stdout property, which is exposed as a BunFile for more complex use cases.

LANGUAGE: typescript
CODE:
await Bun.write(Bun.stdout, "Lorem ipsum");

----------------------------------------

TITLE: Demonstrating Timezone Effects on Date Objects
DESCRIPTION: Shows how changing the timezone affects the hours returned by Date objects in the Bun runtime.

LANGUAGE: typescript
CODE:
new Date().getHours(); // => 18

process.env.TZ = "America/New_York";

new Date().getHours(); // => 21

----------------------------------------

TITLE: Setting up a Bun Native Plugin Project with napi-rs
DESCRIPTION: Commands to set up a new napi-rs project and add the bun-native-plugin crate for developing Bun native plugins.

LANGUAGE: bash
CODE:
bun add -g @napi-rs/cli
napi new
cargo add bun-native-plugin

----------------------------------------

TITLE: Bun Plugin Configuration
DESCRIPTION: TOML configuration for enabling Tailwind CSS plugin in Bun

LANGUAGE: toml
CODE:
[serve.static]
plugins = ["bun-plugin-tailwind"]

----------------------------------------

TITLE: C++ Addition Function with FFI
DESCRIPTION: Implementation of an addition function in C++ with extern C linkage for FFI compatibility.

LANGUAGE: cpp
CODE:
#include <cstdint>

extern "C" int32_t add(int32_t a, int32_t b) {
    return a + b;
}

----------------------------------------

TITLE: Using bun-debug with Logging Options
DESCRIPTION: Demonstrates how to use bun-debug with various logging options for development purposes.

LANGUAGE: bash
CODE:
BUN_DEBUG_QUIET_LOGS=1 bun-debug ...
BUN_DEBUG_EventLoop=1 bun-debug ...

----------------------------------------

TITLE: Declaring Internal Types for 'bun' in TypeScript
DESCRIPTION: Shows how to declare internal types that shouldn't be exposed to users by using the __internal namespace within the 'bun' module declaration.

LANGUAGE: typescript
CODE:
declare module "bun" {
  namespace __internal {
    interface MyInternalType {
      // ...
    }
  }
}

----------------------------------------

TITLE: Building Bun Lambda Layer with Custom Options
DESCRIPTION: Example command for building a Bun Lambda layer with custom architecture, release version, and output path

LANGUAGE: sh
CODE:
bun run build-layer -- \
  --arch x64 \
  --release canary \
  --output /path/to/layer.zip

----------------------------------------

TITLE: V8 Engine Function Exports
DESCRIPTION: V8 JavaScript engine related functions for handling objects, contexts, isolates, strings and other core functionality.

LANGUAGE: C++
CODE:
__ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm
__ZN2v811HandleScopeC1EPNS_7IsolateE
__ZN2v811HandleScopeD1Ev
...

----------------------------------------

TITLE: Specifying Bun Version in GitHub Actions
DESCRIPTION: Configuration example showing how to specify a particular version of Bun to install in the GitHub Actions workflow. Demonstrates version specification options including exact versions, latest, canary, or specific SHA.

LANGUAGE: yaml
CODE:
name: my-workflow
jobs:
  my-job:
    name: my-job
    runs-on: ubuntu-latest
    steps:
      # ...
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.0 # or "latest", "canary", <sha>

----------------------------------------

TITLE: Streaming Response with Async Iterable in Bun
DESCRIPTION: Implements an HTTP server that streams response data using an async iterable object. Demonstrates an alternative approach to streaming using the Symbol.asyncIterator property.

LANGUAGE: typescript
CODE:
Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response(
      {
        [Symbol.asyncIterator]: async function* () {
          yield "Hello, ";
          await Bun.sleep(100);
          yield "world!";
        },
      },
      { headers: { "Content-Type": "text/plain" } },
    );
  },
});

----------------------------------------

TITLE: Verifying Bun Debug Build
DESCRIPTION: Checks the version of the debug build of Bun to verify successful compilation.

LANGUAGE: bash
CODE:
$ build/debug/bun-debug --version

----------------------------------------

TITLE: Importing and Accessing TOML Data in TypeScript with Bun
DESCRIPTION: This snippet demonstrates how to import a TOML file in TypeScript using Bun's native support. It shows how to access various properties from the imported TOML data, including nested objects.

LANGUAGE: typescript
CODE:
import data from "./data.toml";

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"

----------------------------------------

TITLE: Working with DataView
DESCRIPTION: Shows how to use DataView to read and write values to an ArrayBuffer with specific byte offsets and data types.

LANGUAGE: typescript
CODE:
const buf = new ArrayBuffer(4);
const dv = new DataView(buf);
dv.setUint8(0, 3); // write value 3 at byte offset 0
dv.getUint8(0); // => 3

----------------------------------------

TITLE: Creating BunFile with File Descriptors and URLs in TypeScript
DESCRIPTION: Demonstrates creating BunFile instances using numerical file descriptors and file:// URLs.

LANGUAGE: typescript
CODE:
Bun.file(1234);
Bun.file(new URL(import.meta.url)); // reference to the current file

----------------------------------------

TITLE: Installing Xcode Command Line Tools
DESCRIPTION: Installs Xcode Command Line Tools to resolve 'library not found for -lSystem' errors on macOS.

LANGUAGE: bash
CODE:
$ xcode-select --install

----------------------------------------

TITLE: Upgrading Bun Runtime
DESCRIPTION: Command to upgrade an existing Bun installation to the latest version.

LANGUAGE: sh
CODE:
bun upgrade

----------------------------------------

TITLE: Rendering JSX Button Component in MDX
DESCRIPTION: This snippet demonstrates how to use a JSX component (Button) directly within an MDX file. The Button component is rendered with an onClick event that triggers an alert.

LANGUAGE: jsx
CODE:
<Button onClick={() => alert("Hello!")}>Click me</Button>

----------------------------------------

TITLE: Object and Array Formatting in JavaScript
DESCRIPTION: Shows formatting of nested objects, arrays, and various JavaScript object representations including wrapped primitives and custom classes.

LANGUAGE: javascript
CODE:
[
  {}, {}, {}, {}
]
{
  level1: {
    level2: {
      level3: [Object ...],
    },
  },
}
{
  "1": [Object ...],
}

----------------------------------------

TITLE: Handling SIGINT Signal in Bun
DESCRIPTION: Demonstrates how to listen for SIGINT (interrupt signal) using process.on(). This is typically triggered when a user presses Ctrl+C in the terminal.

LANGUAGE: typescript
CODE:
process.on("SIGINT", () => {
  console.log("Received SIGINT");
});

----------------------------------------

TITLE: Creating a Reusable HTTP Server with Bun
DESCRIPTION: This snippet demonstrates how to create an HTTP server using Bun.serve() with the 'reusePort' option enabled. It generates a unique ID for each server instance and responds with a greeting message including this ID.

LANGUAGE: typescript
CODE:
import { serve } from "bun";

const id = Math.random().toString(36).slice(2);

serve({
  port: process.env.PORT || 8080,
  development: false,

  // Share the same port across multiple processes
  // This is the important part!
  reusePort: true,

  async fetch(request) {
    return new Response("Hello from Bun #" + id + "!\n");
  }
});

----------------------------------------

TITLE: Installing Happy DOM for Bun
DESCRIPTION: Command to install the Happy DOM global registrator as a dev dependency in a Bun project.

LANGUAGE: sh
CODE:
$ bun add -d @happy-dom/global-registrator

----------------------------------------

TITLE: Basic JSON Import in TypeScript with Bun
DESCRIPTION: Demonstrates how to import and use JSON file data directly in TypeScript using Bun's native JSON import support.

LANGUAGE: typescript
CODE:
import data from "./package.json";

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"

----------------------------------------

TITLE: Accessing Module Information with import.meta in Bun (TypeScript)
DESCRIPTION: This snippet demonstrates how to use various properties of the import.meta object in Bun to access information about the current module. It shows how to get the directory path, file name, full path, URL, execution context, and how to resolve module specifiers.

LANGUAGE: typescript
CODE:
import.meta.dir;   // => "/path/to/project"
import.meta.file;  // => "file.ts"
import.meta.path;  // => "/path/to/project/file.ts"
import.meta.url;   // => "file:///path/to/project/file.ts"

import.meta.main;  // `true` if this file is directly executed by `bun run`
                   // `false` otherwise

import.meta.resolve("zod"); // => "file:///path/to/project/node_modules/zod/index.js"

----------------------------------------

TITLE: Running WebSocket Chat Server in Bun
DESCRIPTION: Starts the WebSocket chat server using Bun's Bun.serve functionality. The server waits for 32 clients by default.

LANGUAGE: bash
CODE:
bun ./chat-server.bun.js

----------------------------------------

TITLE: Updating GCC on Ubuntu for Bun Development
DESCRIPTION: Updates GCC to version 11 on Ubuntu to resolve C++20 feature compatibility issues.

LANGUAGE: bash
CODE:
$ sudo apt update
$ sudo apt install gcc-11 g++-11
$ sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
$ sudo apt install gcc-11 g++-11
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
$ sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

----------------------------------------

TITLE: Basic Commander Option Example
DESCRIPTION: Demonstrates basic option parsing with Commander.js including boolean and value options

LANGUAGE: JavaScript
CODE:
const { program } = require('commander');

program
  .option('--first')
  .option('-s, --separator <char>');

program.parse();

const options = program.opts();
const limit = options.first ? 1 : undefined;
console.log(program.args[0].split(options.separator, limit));

----------------------------------------

TITLE: Building Bun with Dynamic libatomic Linking
DESCRIPTION: Builds Bun with dynamic linking for libatomic on systems without static libatomic.

LANGUAGE: bash
CODE:
$ bun run build -DUSE_STATIC_LIBATOMIC=OFF

----------------------------------------

TITLE: Method Call with Parameter
DESCRIPTION: Method 'to' called on everybody object with a limit parameter

LANGUAGE: javascript
CODE:
everybody.to(limit)

----------------------------------------

TITLE: Reading Complete stderr Output from Child Process in Bun
DESCRIPTION: Shows how to read the complete stderr output from a child process using Bun.readableStreamToText(). This approach waits for the process to exit and captures all error output as a string.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"], {
  stderr: "pipe",
});

const errors: string = await Bun.readableStreamToText(proc.stderr);
if (errors) {
  // handle errors
}

----------------------------------------

TITLE: Spawning Multiple HTTP Server Instances with Bun
DESCRIPTION: This snippet shows how to spawn multiple instances of the HTTP server created in the previous snippet. It uses Bun's spawn function to create a number of server processes equal to the number of CPU cores available, and sets up process termination handlers.

LANGUAGE: typescript
CODE:
import { spawn } from "bun";

const cpus = navigator.hardwareConcurrency; // Number of CPU cores
const buns = new Array(cpus);

for (let i = 0; i < cpus; i++) {
  buns[i] = spawn({
    cmd: ["bun", "./server.ts"],
    stdout: "inherit",
    stderr: "inherit",
    stdin: "inherit",
  });
}

function kill() {
  for (const bun of buns) {
    bun.kill();
  }
}

process.on("SIGINT", kill);
process.on("exit", kill);

----------------------------------------

TITLE: Installing Dependencies and Running Bun Scripts
DESCRIPTION: This snippet demonstrates how to install project dependencies using npm and run various scripts using Bun. It includes commands for executing FFI, logging, gzip compression, asynchronous operations, and SQLite scripts.

LANGUAGE: bash
CODE:
npm install

bun run ffi
bun run log
bun run gzip
bun run async
bun run sqlite

----------------------------------------

TITLE: TailwindCSS Configuration in Package.json
DESCRIPTION: Package.json configuration for TailwindCSS integration with Bun projects.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "tailwindcss": "^4",
    "bun-plugin-tailwind": "latest"
  }
}

----------------------------------------

TITLE: CSS Module Composition in Bun
DESCRIPTION: Shows how to use the 'composes' property in CSS modules to reuse style rules across multiple classes.

LANGUAGE: css
CODE:
/* styles.module.css */
.button {
  composes: background;
  color: red;
}

.background {
  background-color: blue;
}

----------------------------------------

TITLE: Running CSS HMR Frame Time Analysis for Next.js
DESCRIPTION: This command executes a Node.js script to analyze CSS Hot Module Replacement (HMR) frame times in a Next.js project. It sets environment variables for sleep interval and project name before running the script.

LANGUAGE: bash
CODE:
SLEEP_INTERVAL=24 PROJECT=next node read-frames.js

----------------------------------------

TITLE: ESM Module Import
DESCRIPTION: Demonstrates importing the URL module using ES Modules syntax. This is the modern approach for importing modules in Node.js.

LANGUAGE: javascript
CODE:
import 'node:url';

----------------------------------------

TITLE: Adding LLVM to PATH on macOS
DESCRIPTION: Adds the LLVM 19 binaries to the system PATH on macOS using Homebrew.

LANGUAGE: bash
CODE:
$ export PATH="$(brew --prefix llvm@19)/bin:$PATH"

----------------------------------------

TITLE: HTML Document Structure with Responsive Styling
DESCRIPTION: Complete HTML template with embedded CSS styling. Features a responsive design that adapts to mobile screens under 700px width. Includes a centered content box with shadow effects and styled typography.

LANGUAGE: html
CODE:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

----------------------------------------

TITLE: Streaming Request Body with ReadableStream
DESCRIPTION: Demonstrates how to use a ReadableStream to send a streaming request body. This is useful for sending large amounts of data or data that's generated dynamically without buffering it all in memory.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue("Hello");
    controller.enqueue(" ");
    controller.enqueue("World");
    controller.close();
  },
});

const response = await fetch("http://example.com", {
  method: "POST",
  body: stream,
});

----------------------------------------

TITLE: Sourcemap Coverage Configuration
DESCRIPTION: Configuration to disable sourcemap usage in coverage reporting using bunfig.toml.

LANGUAGE: toml
CODE:
[test]
coverageIgnoreSourcemaps = true   # default false

----------------------------------------

TITLE: Basic Bun TypeScript Usage
DESCRIPTION: Example showing how to access Bun's global API in TypeScript.

LANGUAGE: typescript
CODE:
console.log(Bun.version);

----------------------------------------

TITLE: Advanced Build Configuration
DESCRIPTION: Example showing advanced bundler configuration options including minification and sourcemaps

LANGUAGE: typescript
CODE:
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './out',
  minify: {
    whitespace: true,
    identifiers: true,
    syntax: true,
  },
  sourcemap: 'external',
  splitting: true
});

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.

LANGUAGE: bash
CODE:
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev

----------------------------------------

TITLE: Updating Test Import Statements
DESCRIPTION: Demonstrates how to update Jest import statements to use Bun's test utilities instead.

LANGUAGE: typescript
CODE:
- import {test, expect} from "@jest/globals";
+ import {test, expect} from "bun:test";

----------------------------------------

TITLE: Running Multiple Test Iterations with Bun Test Runner
DESCRIPTION: Example showing how to use the --rerun-each flag with bun test to execute each test 10 times. This feature helps identify non-deterministic or flaky tests by running them repeatedly.

LANGUAGE: sh
CODE:
# re-run each test 10 times
$ bun test --rerun-each 10

----------------------------------------

TITLE: Creating Fhqwhgads Instance
DESCRIPTION: Constructor for instantiating a new Fhqwhgads object

LANGUAGE: javascript
CODE:
new Fhqwhgads()

----------------------------------------

TITLE: Installing Visual Studio with WinGet
DESCRIPTION: Installs Visual Studio Community 2022 with necessary components using WinGet.

LANGUAGE: powershell
CODE:
winget install "Visual Studio Community 2022" --override "--add Microsoft.VisualStudio.Workload.NativeDesktop Microsoft.VisualStudio.Component.Git " -s msstore

----------------------------------------

TITLE: Initializing Test Environment for Bun Build Tests
DESCRIPTION: Sets up the test environment for bun build tests using the testForFile function instead of importing directly from bun:test.

LANGUAGE: typescript
CODE:
import { itBundled, testForFile } from "./expectBundled";
var { describe, test, expect } = testForFile(import.meta.path);

----------------------------------------

TITLE: Implementing onBeforeParse Hook in Rust for Bun Native Plugin
DESCRIPTION: Example of implementing the onBeforeParse hook in Rust using the bun-native-plugin crate. This snippet replaces all occurrences of 'foo' with 'bar' in the input source code.

LANGUAGE: rust
CODE:
use bun_native_plugin::{define_bun_plugin, OnBeforeParse, bun, Result, anyhow, BunLoader};
use napi_derive::napi;

/// Define the plugin and its name
define_bun_plugin!("replace-foo-with-bar");

/// Here we'll implement `onBeforeParse` with code that replaces all occurrences of
/// `foo` with `bar`.
///
/// We use the #[bun] macro to generate some of the boilerplate code.
///
/// The argument of the function (`handle: &mut OnBeforeParse`) tells
/// the macro that this function implements the `onBeforeParse` hook.
#[bun]
pub fn replace_foo_with_bar(handle: &mut OnBeforeParse) -> Result<()> {
  // Fetch the input source code.
  let input_source_code = handle.input_source_code()?;

  // Get the Loader for the file
  let loader = handle.output_loader();


  let output_source_code = input_source_code.replace("foo", "bar");

  handle.set_output_source_code(output_source_code, BunLoader::BUN_LOADER_JSX);

  Ok(())
}

----------------------------------------

TITLE: LCOV Reporter Configuration
DESCRIPTION: Simple configuration to enable lcov coverage reporting in bunfig.toml.

LANGUAGE: toml
CODE:
[test]
coverageReporter = "lcov"

----------------------------------------

TITLE: Running the Bundler Benchmark Script
DESCRIPTION: Instructions for executing the benchmark script. The script needs to be made executable before running.

LANGUAGE: sh
CODE:
$ chmod +x run-bench.sh
$ ./run-bench.sh

----------------------------------------

TITLE: Non-HTTP Event Handler Implementation in Bun
DESCRIPTION: Example of a Bun Lambda function handling non-HTTP events like S3, SQS, or EventBridge

LANGUAGE: typescript
CODE:
export default {
  async fetch(request: Request): Promise<Response> {
    const event = await request.json();
    // ...
    return new Response();
  },
};

----------------------------------------

TITLE: Making POST Request with Bun fetch
DESCRIPTION: Shows how to send a POST request with JSON data using Bun's fetch API. Includes setting the Content-Type header, formatting the request body as JSON, and parsing the JSON response.

LANGUAGE: typescript
CODE:
const response = await fetch("https://bun.sh/api", {
  method: "POST",
  body: JSON.stringify({ message: "Hello from Bun!" }),
  headers: { "Content-Type": "application/json" },
});

const body = await response.json();

----------------------------------------

TITLE: Running Specific Tests with test.only in Bun
DESCRIPTION: This example demonstrates how to use 'test.only' and 'describe.only' to run specific tests or suites. When used with 'bun test --only', only the marked tests will be executed.

LANGUAGE: typescript
CODE:
import { test, describe } from "bun:test";

test("test #1", () => {
  // does not run
});

test.only("test #2", () => {
  // runs
});

describe.only("only", () => {
  test("test #3", () => {
    // runs
  });
});

----------------------------------------

TITLE: Setting Test Timeout
DESCRIPTION: Demonstrates how to configure test timeout duration using Bun test CLI flag.

LANGUAGE: sh
CODE:
$ bun test --timeout 10000

----------------------------------------

TITLE: Implementing React Counter Component with Hooks
DESCRIPTION: This snippet defines a Counter component using React's useState hook. It manages a count state and provides functions to increment and decrement the count by 2. The component renders the current count and buttons for incrementing and decrementing.

LANGUAGE: JavaScript
CODE:
import { useState } from "react";

export function Counter() {
  console.log('counter b loaded');

  const [count, setCount] = useState(0);

  function increment() {
    setCount(count + 2);
  }

  function decrement() {
    setCount(count - 2);
  }

  return (
    <div id="counter-fixture" className="rounded-br-full">
      <p>Count B: {count}</p>
      <button className="inc" onClick={increment}>
        +
      </button>
      <button className="dec" onClick={decrement}>
        -
      </button>
    </div>
  );
}

----------------------------------------

TITLE: Updating Snapshots Command
DESCRIPTION: Shell command example showing how to update existing snapshots using the --update-snapshots flag.

LANGUAGE: shell
CODE:
$ bun test --update-snapshots
bun test v$BUN_LATEST_VERSION (9c68abdb)

test/snap.test.ts:
✓ snapshot [0.86ms]

 1 pass
 0 fail
 snapshots: +1 added  # the snapshot was regenerated
 1 expect() calls
Ran 1 tests across 1 files. [102.00ms]

----------------------------------------

TITLE: Decompressing gzip Input to Output in C
DESCRIPTION: This function decompresses input from a gzFile to a FILE pointer output. It reads compressed data in chunks, decompresses it using zlib, and writes the uncompressed data to the output file.

LANGUAGE: C
CODE:
void gz_uncompress(in, out)
    gzFile in;
    FILE   *out;
{
    local char buf[BUFLEN];
    int len;
    int err;

    for (;;) {
        len = gzread(in, buf, sizeof(buf));
        if (len < 0) error (gzerror(in, &err));
        if (len == 0) break;

        if ((int)fwrite(buf, 1, (unsigned)len, out) != len) {
            error("failed fwrite");
        }
    }
    if (fclose(out)) error("failed fclose");

    if (gzclose(in) != Z_OK) error("failed gzclose");
}

----------------------------------------

TITLE: Starting Development Server with Bun
DESCRIPTION: Command to start a development server for the Bun project.

LANGUAGE: bash
CODE:
bun dev

----------------------------------------

TITLE: Installing happy-dom Global Registrator with Bun
DESCRIPTION: This command installs the @happy-dom/global-registrator package as a development dependency using Bun's package manager.

LANGUAGE: bash
CODE:
$ bun add -d @happy-dom/global-registrator

----------------------------------------

TITLE: Installing Dependencies for Bun Build
DESCRIPTION: Script to install and configure all required dependencies for building Bun. Supports optional output directory specification through BUN_DEPS_OUT_DIR environment variable.

LANGUAGE: sh
CODE:
BUN_DEPS_OUT_DIR=\"/optional/out/dir\" bash ./scripts/all-dependencies.sh

----------------------------------------

TITLE: Hot Reload HTTP Server Example
DESCRIPTION: Example of using hot reload with an HTTP server that maintains state between reloads

LANGUAGE: typescript
CODE:
globalThis.count ??= 0;
globalThis.count++;

Bun.serve({
  fetch(req: Request) {
    return new Response(`Reloaded ${globalThis.count} times`);
  },
  port: 3000,
});

----------------------------------------

TITLE: Configuring Decorator Metadata in TypeScript
DESCRIPTION: Demonstrates how to enable emitDecoratorMetadata in tsconfig.json for use with Bun.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    // ... rest of your config
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
  },
}

----------------------------------------

TITLE: Skipping Tests with test.skip in Bun
DESCRIPTION: This example demonstrates how to skip a test using 'test.skip'. The skipped test will not be run during the test execution.

LANGUAGE: typescript
CODE:
import { expect, test } from "bun:test";

test.skip("wat", () => {
  // TODO: fix this
  expect(0.1 + 0.2).toEqual(0.3);
});

----------------------------------------

TITLE: Finding Code Signing Identities on macOS
DESCRIPTION: Lists available code signing identities from the macOS keychain that can be used for signing the executable.

LANGUAGE: sh
CODE:
$ security find-identity -v -p codesigning
1. XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "Developer ID Application: Your Name (ZZZZZZZZZZ)"
   1 valid identities found

----------------------------------------

TITLE: Installing Bun on Windows using PowerShell
DESCRIPTION: This command installs Bun on Windows using PowerShell.

LANGUAGE: powershell
CODE:
> powershell -c "irm bun.sh/install.ps1|iex"

----------------------------------------

TITLE: Creating Simple Bun Web Server for Debugging
DESCRIPTION: A basic TypeScript web server implementation using Bun.serve() that responds with 'Hello, world!' and logs request URLs.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req){
    console.log(req.url);
    return new Response("Hello, world!");
  }
})

----------------------------------------

TITLE: Configuring SQLite3 Static Library Build with CMake
DESCRIPTION: Configures SQLite3 compilation as a static library with extended features enabled. Sets up include paths, compiler definitions for various SQLite features, and handles Windows-specific compilation flags. Includes settings for metadata, variable limits, RTREE, FTS3/5, JSON1, and math functions.

LANGUAGE: cmake
CODE:
cmake_minimum_required(VERSION 3.28)
project(sqlite3 C)

add_library(sqlite3 STATIC sqlite3.c)
target_include_directories(sqlite3 PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_definitions(sqlite3 PRIVATE
  "SQLITE_ENABLE_COLUMN_METADATA="
  "SQLITE_MAX_VARIABLE_NUMBER=250000"
  "SQLITE_ENABLE_RTREE=1"
  "SQLITE_ENABLE_FTS3=1"
  "SQLITE_ENABLE_FTS3_PARENTHESIS=1"
  "SQLITE_ENABLE_FTS5=1"
  "SQLITE_ENABLE_JSON1=1"
  "SQLITE_ENABLE_MATH_FUNCTIONS=1"
)

if(WIN32)
  target_compile_options(sqlite3 PRIVATE /MT /U_DLL)
endif()

----------------------------------------

TITLE: Console Log Output Examples
DESCRIPTION: Collection of console log statements showing timestamp formatting and output of different JavaScript data types including primitives, objects, arrays, dates, and symbols.

LANGUAGE: javascript
CODE:
[0.00ms] label
[0.06ms] label Hello World!
[0.09ms] label a %s b c d
[0.11ms] label 0 -0 123 -123 123.567 -123.567 Infinity -Infinity
[0.14ms] label true false
[0.15ms] label null undefined
[0.17ms] label Symbol(Symbol Description)
[0.22ms] label 2000-06-27T02:24:34.304Z
[0.29ms] label [ 123, 456, 789 ]
[0.34ms] label {
  name: "foo",
}
[0.37ms] label {
  a: 123,
  b: 456,
  c: 789,
}
[0.39ms] label

----------------------------------------

TITLE: Configuring Experimental Decorators in TypeScript
DESCRIPTION: Shows how to enable experimental decorators in tsconfig.json for use with Bun.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    // ... rest of your config
    "experimentalDecorators": true,
  },
}

----------------------------------------

TITLE: Configuring Trusted Dependencies in package.json
DESCRIPTION: Adding packages to the 'trustedDependencies' array in package.json to allow execution of lifecycle scripts for specific dependencies.

LANGUAGE: json
CODE:
{
  "name": "my-app",
  "version": "1.0.0",
  "trustedDependencies": ["my-trusted-package"]
}

----------------------------------------

TITLE: Extracting LibUV Symbols Using LLVM
DESCRIPTION: Command to extract symbols from LibUV dynamic library using LLVM's nm tool. The output is filtered for UV-specific symbols and redirected to a text file.

LANGUAGE: bash
CODE:
llvm-nm -g libuv.dylib | grep _uv &> symbols.txt

----------------------------------------

TITLE: Configuring Global WebSocket Compression in Bun
DESCRIPTION: Demonstrates how to enable compression for all WebSocket messages using the perMessageDeflate parameter in the server configuration. This uses the permessage-deflate WebSocket extension to compress all messages.

LANGUAGE: typescript
CODE:
Bun.serve({
  // ...
  websocket: {
    // enable compression
    perMessageDeflate: true,
  },
});

----------------------------------------

TITLE: Replacing Values with JSON Using --define
DESCRIPTION: This shell command demonstrates how to use --define to replace a variable (AWS) with a JSON object containing access keys.

LANGUAGE: sh
CODE:
bun --define AWS='{"ACCESS_KEY":"abc","SECRET_KEY":"def"}' src/index.ts

----------------------------------------

TITLE: Adding GitHub Repository as Dependency in Bun
DESCRIPTION: This command adds a GitHub repository (lodash/lodash) as a dependency to a Bun project. It demonstrates the simplest way to include a Git-based dependency.

LANGUAGE: sh
CODE:
$ bun add github:lodash/lodash

----------------------------------------

TITLE: Installing Bun Using npm
DESCRIPTION: Installs Bun globally using npm.

LANGUAGE: bash
CODE:
$ npm install -g bun

----------------------------------------

TITLE: Accessing Environment Variables in Bun
DESCRIPTION: Demonstrates how to access environment variables using both process.env and Bun.env APIs. Both methods provide access to the same environment variables.

LANGUAGE: typescript
CODE:
Bun.env.API_TOKEN; // => "secret"
process.env.API_TOKEN; // => "secret"

----------------------------------------

TITLE: Defining Compile Definitions for TinyCC
DESCRIPTION: Sets compile-time definitions for TinyCC, including platform-specific configurations for macOS and Windows.

LANGUAGE: CMake
CODE:
add_compile_definitions(
  CONFIG_TCC_PREDEFS
  ONE_SOURCE=0
  TCC_LIBTCC1="\\0"
)

if(APPLE)
  add_compile_definitions(
    TCC_TARGET_MACHO
    CONFIG_CODESIGN
    CONFIG_NEW_MACHO
    CONFIG_USR_INCLUDE="${CMAKE_OSX_SYSROOT}"
  )
endif()

if(WIN32)
  add_compile_definitions(
    CONFIG_WIN32
    CONFIG_TCCDIR="${CMAKE_CURRENT_SOURCE_DIR}/win32"
  )
endif()

----------------------------------------

TITLE: Rendering JSX Button Component in MDX
DESCRIPTION: This snippet demonstrates how to use a JSX component (Button) directly within MDX content. The button, when clicked, triggers an alert with the message "Hello!".

LANGUAGE: jsx
CODE:
<Button onClick={() => alert("Hello!")}>Click me</Button>

----------------------------------------

TITLE: Error Handling in Bun Shell
DESCRIPTION: Demonstrates error handling patterns including try-catch blocks and nothrow options for shell commands.

LANGUAGE: javascript
CODE:
import { $ } from "bun";

try {
  const output = await $`something-that-may-fail`.text();
  console.log(output);
} catch (err) {
  console.log(`Failed with code ${err.exitCode}`);
  console.log(err.stdout.toString());
  console.log(err.stderr.toString());
}

----------------------------------------

TITLE: Basic Watch Mode Usage
DESCRIPTION: Examples of using Bun's watch mode with different file types and test runs

LANGUAGE: bash
CODE:
$ bun --watch index.tsx

LANGUAGE: bash
CODE:
$ bun --watch test

----------------------------------------

TITLE: Converting Blob to ArrayBuffer in TypeScript using Bun
DESCRIPTION: This snippet demonstrates how to create a Blob with a string content and then convert it to an ArrayBuffer using the .arrayBuffer() method. The conversion is asynchronous and returns a Promise.

LANGUAGE: typescript
CODE:
const blob = new Blob(["hello world"]);
const buf = await blob.arrayBuffer();

----------------------------------------

TITLE: Using bcrypt Algorithm for Password Hashing in Bun
DESCRIPTION: This snippet illustrates how to use the bcrypt algorithm for password hashing in Bun. It specifies the algorithm and cost parameter for bcrypt hashing.

LANGUAGE: typescript
CODE:
// use bcrypt
const bcryptHash = await Bun.password.hash(password, {
  algorithm: "bcrypt",
  cost: 4, // number between 4-31
});

----------------------------------------

TITLE: Replacing Global with globalThis Using --define
DESCRIPTION: This shell command shows how to use --define to replace all usages of 'global' with 'globalThis', which can be useful for compatibility between Node.js and web browsers.

LANGUAGE: sh
CODE:
bun --define global="globalThis" src/index.ts

----------------------------------------

TITLE: Converting Relative URLs to Absolute during Link Extraction with Bun's HTMLRewriter in TypeScript
DESCRIPTION: This function extracts links from a given URL and converts relative URLs to absolute URLs. It uses Bun's HTMLRewriter to process 'a' elements with 'href' attributes and the URL constructor to resolve relative URLs.

LANGUAGE: typescript
CODE:
async function extractLinksFromURL(url: string) {
  const response = await fetch(url);
  const links = new Set<string>();

  const rewriter = new HTMLRewriter().on("a[href]", {
    element(el) {
      const href = el.getAttribute("href");
      if (href) {
        // Convert relative URLs to absolute
        try {
          const absoluteURL = new URL(href, url).href;
          links.add(absoluteURL);
        } catch {
          links.add(href);
        }
      }
    },
  });

  // Wait for the response to be processed
  await rewriter.transform(response).blob();
  return [...links];
}

const websiteLinks = await extractLinksFromURL("https://example.com");

----------------------------------------

TITLE: Debugging Environment Variables via CLI
DESCRIPTION: Demonstrates how to print all environment variables to the command line for debugging purposes using the bun --print command.

LANGUAGE: shell
CODE:
$ bun --print process.env
BAZ=stuff
FOOBAR=aaaaaa
<lots more lines>

----------------------------------------

TITLE: Configuring C Compiler Options for TinyCC
DESCRIPTION: Sets C language standard and compiler options, including warnings and platform-specific flags for GCC and TCC.

LANGUAGE: CMake
CODE:
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

if(WIN32)
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()

add_compile_options(-Wall)

if(NOT CMAKE_C_COMPILER_ID MATCHES "tcc")
  add_compile_options(
    -fno-strict-aliasing
    -Wdeclaration-after-statement
    -Wpointer-sign
    -Wsign-compare
    -Wunused-result
    -Wformat-truncation
  )
endif()

if(CMAKE_C_COMPILER_ID MATCHES "GNU")
  add_compile_options(
    -fheinous-gnu-extensions
    -Wno-string-plus-int
    -Wno-deprecated-declarations
  )
endif()

----------------------------------------

TITLE: Function Variants Example
DESCRIPTION: Demonstration of function overloading using variants in bindgen. Shows how to define multiple function signatures that handle different types of arguments.

LANGUAGE: typescript
CODE:
import { t, fn } from 'bindgen';

export const action = fn({
  variants: [
    {
      args: {
        a: t.i32,
      },
      ret: t.i32,
    },
    {
      args: {
        a: t.DOMString,
      },
      ret: t.DOMString,
    },
  ]
});

LANGUAGE: zig
CODE:
fn action1(a: i32) i32 {
  return a;
}

fn action2(a: bun.String) bun.String {
  return a;
}

----------------------------------------

TITLE: Configuring TypeScript for Bun
DESCRIPTION: JSON configuration for tsconfig.json to properly set up TypeScript for use with Bun, including necessary compiler options.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
  }
}

----------------------------------------

TITLE: Package.json Dependency Addition
DESCRIPTION: This JSON diff demonstrates how the package.json file is updated when adding a dependency. It shows the addition of 'zod' with a caret (^) version range.

LANGUAGE: json
CODE:
{
  "dependencies": {
+     "zod": "^3.0.0"
  }
}

----------------------------------------

TITLE: Environment Variables Configuration File
DESCRIPTION: Example of a .env file configuration showing how to define environment variables. Variables are defined in key=value format.

LANGUAGE: plaintext
CODE:
FOO=hello
BAR=world

----------------------------------------

TITLE: Converting ArrayBuffer to Buffer
DESCRIPTION: Creates a Node.js Buffer from an ArrayBuffer using Buffer.from() static method. This converts the entire ArrayBuffer into a Buffer instance.

LANGUAGE: typescript
CODE:
const arrBuffer = new ArrayBuffer(64);
const nodeBuffer = Buffer.from(arrBuffer);

----------------------------------------

TITLE: Setting Test Timeout in Bun CLI
DESCRIPTION: Example of using the --timeout flag with bun test command to set a custom timeout of 3 seconds for all tests. If any test exceeds this duration, it will be marked as failed.

LANGUAGE: sh
CODE:
$ bun test --timeout 3000 # 3 seconds

----------------------------------------

TITLE: Running WebSocket Chat Client
DESCRIPTION: Executes the client script that connects 32 clients to the chat server. This script is compatible with Bun, Node.js, and Deno.

LANGUAGE: bash
CODE:
node ./chat-client.mjs

----------------------------------------

TITLE: JSON Import using Import Attributes in TypeScript
DESCRIPTION: Shows how to import JSON files using the Import Attributes syntax, which explicitly specifies the import type as JSON.

LANGUAGE: typescript
CODE:
import data from "./package.json" with { type: "json" };

data.name; // => "bun"
data.version; // => "1.0.0"
data.author.name; // => "John Dough"

----------------------------------------

TITLE: Configuring Bun Bundler with YAML Plugin
DESCRIPTION: TypeScript code to configure Bun's bundler to use the YAML plugin, enabling support for .yaml file imports.

LANGUAGE: typescript
CODE:
import yamlPlugin from "bun-plugin-yaml";

await Bun.build({
  entrypoints: ["./index.tsx"],
  // other config

  plugins: [yamlPlugin()],
});

----------------------------------------

TITLE: Updating Bun Bindings
DESCRIPTION: Command to update Bun's bindings with parallel processing

LANGUAGE: bash
CODE:
make bindings -j10

----------------------------------------

TITLE: Importing and Using Aliased Package in TypeScript
DESCRIPTION: This TypeScript code demonstrates how to import the 'zod' package using the custom alias 'my-custom-name' and use its functionality.

LANGUAGE: typescript
CODE:
import { z } from "my-custom-name";

z.string();

----------------------------------------

TITLE: Synchronous Code Transformation with Bun Transpiler
DESCRIPTION: Demonstrates the use of transformSync() method to transpile TSX code to vanilla JavaScript synchronously. The result is a string of JavaScript code.

LANGUAGE: javascript
CODE:
const transpiler = new Bun.Transpiler({
  loader: 'tsx',
});

const code = `
import * as whatever from "./whatever.ts"
export function Home(props: {title: string}){
  return <p>{props.title}</p>;
}`;

const result = transpiler.transformSync(code);

----------------------------------------

TITLE: Adding Triple-Slash Directive for New Type Definitions
DESCRIPTION: Example of how to add a new type definition file reference using TypeScript's triple-slash directive in index.d.ts.

LANGUAGE: diff
CODE:
+ /// <reference path=\"./newfile.d.ts\" />

----------------------------------------

TITLE: Installing Linux Kernel for Ubuntu 20.04
DESCRIPTION: Commands to check the current kernel version and install a newer kernel on Ubuntu 20.04 for better compatibility with Bun.

LANGUAGE: bash
CODE:
# If this returns a version >= 5.6, you don't need to do anything
$ uname -r

# Install the official Ubuntu hardware enablement kernel
$ sudo apt install --install-recommends linux-generic-hwe-20.04

----------------------------------------

TITLE: Publishing with Tag Configuration
DESCRIPTION: Examples of setting package tags using the --tag flag and through package.json configuration.

LANGUAGE: sh
CODE:
$ bun publish --tag alpha

LANGUAGE: json
CODE:
{
  "publishConfig": {
    "tag": "next"
  }
}

----------------------------------------

TITLE: Running Install Benchmark with Lockfile in Offline Mode
DESCRIPTION: This command compares the installation performance of Bun, pnpm, yarn, and npm with existing lockfiles in offline mode. It uses hyperfine to run the benchmark once, clearing node_modules before the run.

LANGUAGE: sh
CODE:
$ hyperfine --prepare 'rm -rf node_modules' --runs 1 'bun install' 'pnpm install --prefer-offline' 'yarn --offline' 'npm install --prefer-offline'

----------------------------------------

TITLE: Constant Folding Optimization in Bun
DESCRIPTION: This diff demonstrates Bun's constant folding optimization, where the condition is replaced with `true` since "production" === "production" is always true.

LANGUAGE: ts-diff
CODE:
+ if (true) {
    console.log("Production mode");
  } else {
    console.log("Development mode");
  }

----------------------------------------

TITLE: Rendering JSX Button Component in MDX
DESCRIPTION: This snippet demonstrates how to use a JSX component (Button) directly within MDX content. The button, when clicked, triggers an alert with the message 'Hello!'.

LANGUAGE: jsx
CODE:
<Button onClick={() => alert("Hello!")}>Click me</Button>

----------------------------------------

TITLE: Optimized File Operations in Bun.js
DESCRIPTION: These JavaScript snippets showcase Bun.js's optimized file operations using Bun.file and Bun.write. It demonstrates efficient file copying and writing from network responses.

LANGUAGE: javascript
CODE:
const blob = Bun.file("input.txt");
await Bun.write("output.txt", blob);

LANGUAGE: javascript
CODE:
// Eventually, this will stream the response to disk but today it buffers
await Bun.write("index.html", await fetch("https://example.com"));

----------------------------------------

TITLE: Checking Outdated @types Packages in Bun
DESCRIPTION: Use a glob pattern to check for outdated @types packages in your Bun project.

LANGUAGE: bash
CODE:
bun outdated '@types/*'

----------------------------------------

TITLE: Building Docker Image for Bun Application
DESCRIPTION: Command to build a Docker image from the Dockerfile, with output showing the build process and successful image creation.

LANGUAGE: bash
CODE:
$ docker build --pull -t bun-hello-world .
[+] Building 0.9s (21/21) FINISHED
 => [internal] load build definition from Dockerfile                                                                                     0.0s
 => => transferring dockerfile: 37B                                                                                                      0.0s
 => [internal] load .dockerignore                                                                                                        0.0s
 => => transferring context: 35B                                                                                                         0.0s
 => [internal] load metadata for docker.io/oven/bun:1                                                                                    0.8s
 => [auth] oven/bun:pull token for registry-1.docker.io                                                                                  0.0s
 => [base 1/2] FROM docker.io/oven/bun:1@sha256:373265748d3cd3624cb3f3ee6004f45b1fc3edbd07a622aeeec17566d2756997                         0.0s
 => [internal] load build context                                                                                                        0.0s
 => => transferring context: 155B                                                                                                        0.0s
 # ...lots of commands...
 => exporting to image                                                                                                                   0.0s
 => => exporting layers                                                                                                                  0.0s
 => => writing image sha256:360663f7fdcd6f11e8e94761d5592e2e4dfc8d167f034f15cd5a863d5dc093c4                                             0.0s
 => => naming to docker.io/library/bun-hello-world                                                                                       0.0s

----------------------------------------

TITLE: Configuring Bun Debugger in VS Code launch.json
DESCRIPTION: This snippet shows how to configure the Bun debugger in the VS Code launch.json file. It includes options for launching and attaching to Bun programs, with various configuration parameters explained.

LANGUAGE: jsonc
CODE:
{
  "version": "0.2.0",
  "configurations": [
    {
      "type": "bun",
      "request": "launch",
      "name": "Debug Bun",
      "program": "${file}",
      "args": [],
      "cwd": "${workspaceFolder}",
      "env": {},
      "strictEnv": false,
      "watchMode": false,
      "stopOnEntry": false,
      "noDebug": false,
      "runtime": "bun",
      "runtimeArgs": []
    },
    {
      "type": "bun",
      "request": "attach",
      "name": "Attach to Bun",
      "url": "ws://localhost:6499/"
    }
  ]
}

----------------------------------------

TITLE: Writing to Subprocess Input Stream
DESCRIPTION: Shows how to incrementally write to a subprocess's input stream using the 'pipe' option and the FileSink interface.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["cat"], {
  stdin: "pipe", // return a FileSink for writing
});

// enqueue string data
proc.stdin.write("hello");

// enqueue binary data
const enc = new TextEncoder();
proc.stdin.write(enc.encode(" world!"));

// send buffered data
proc.stdin.flush();

// close the input stream
proc.stdin.end();

----------------------------------------

TITLE: Benchmarking HTTP Load Test in Bun.js
DESCRIPTION: This bash command demonstrates how to run a load test on the HTTP server using the http_load_test tool.

LANGUAGE: bash
CODE:
$ ./http_load_test  20 127.0.0.1 3000

----------------------------------------

TITLE: Configuring Analysis Tools for Bun Project
DESCRIPTION: Sets up various code analysis tools like Clang Format, Clang Tidy, Zig Format, and Prettier if analysis is enabled for the project.

LANGUAGE: cmake
CODE:
if(ENABLE_ANALYSIS)
  include(RunClangFormat)
  include(RunClangTidy)
  include(RunZigFormat)
  include(RunPrettier)
endif()

----------------------------------------

TITLE: Configuring HTTP Proxy in Fetch Request
DESCRIPTION: Demonstrates how to configure a proxy server for a fetch request in Bun. The proxy option accepts both HTTP and HTTPS URLs and can include authentication credentials in the URL.

LANGUAGE: typescript
CODE:
await fetch("https://example.com", {
  // The URL of the proxy server
  proxy: "https://username:password@proxy.example.com:8080",
});

----------------------------------------

TITLE: Setting Up Build Tools for Bun Project
DESCRIPTION: Includes CMake modules for setting up various build tools and dependencies required for the Bun project, such as Git, Buildkite, Bun itself, esbuild, Zig, and Rust.

LANGUAGE: cmake
CODE:
include(SetupGit)
include(SetupBuildkite)
include(SetupBun)
include(SetupEsbuild)
include(SetupZig)
include(SetupRust)

----------------------------------------

TITLE: Loading Node-API Module Using process.dlopen() in Bun
DESCRIPTION: Shows how to load a .node native module using process.dlopen() method. This approach provides more control over module loading by explicitly creating the exports object.

LANGUAGE: javascript
CODE:
let mod = { exports: {} };
process.dlopen(mod, "./my-node-module.node");

----------------------------------------

TITLE: Building Bun from Source
DESCRIPTION: Builds Bun from source using the provided build script.

LANGUAGE: bash
CODE:
$ bun run build

----------------------------------------

TITLE: Performing a Dry Run Installation
DESCRIPTION: Command to perform a dry run installation, which doesn't actually install anything but simulates the process.

LANGUAGE: bash
CODE:
$ bun install --dry-run

----------------------------------------

TITLE: Configuring NPM Registry Settings in bunfig.toml
DESCRIPTION: Demonstrates different ways to configure the npm registry in bunfig.toml including basic URL, token authentication, and username/password authentication. The default registry is registry.npmjs.org but can be customized using these configurations.

LANGUAGE: toml
CODE:
[install]
# set default registry as a string
registry = "https://registry.npmjs.org"

# if needed, set a token
registry = { url = "https://registry.npmjs.org", token = "123456" }

# if needed, set a username/password
registry = "https://username:password@registry.npmjs.org"

----------------------------------------

TITLE: Using Bun.spawnSync for Synchronous Process Spawning
DESCRIPTION: Demonstrates the use of Bun.spawnSync for spawning a process synchronously and accessing its output.

LANGUAGE: typescript
CODE:
const proc = Bun.spawnSync(["echo", "hello"]);

console.log(proc.stdout.toString());
// => "hello\n"

----------------------------------------

TITLE: Initializing CMake Project for TinyCC
DESCRIPTION: Sets up the CMake project for TinyCC, specifying the minimum required CMake version, project name, version, and language.

LANGUAGE: CMake
CODE:
cmake_minimum_required(VERSION 3.10)
project(tinycc VERSION 0.9.28 LANGUAGES C)

----------------------------------------

TITLE: Including Build Targets for Bun
DESCRIPTION: Includes the CMake module responsible for defining the build targets for the Bun project.

LANGUAGE: cmake
CODE:
include(BuildBun)

----------------------------------------

TITLE: Configuring Bun Project Version and Options
DESCRIPTION: Parses the package.json file for the version, sets up the project with the parsed or specified version, and includes project options and compiler flags.

LANGUAGE: cmake
CODE:
parse_package_json(VERSION_VARIABLE DEFAULT_VERSION)
optionx(VERSION STRING "The version of Bun" DEFAULT ${DEFAULT_VERSION})
project(Bun VERSION ${VERSION})
include(Options)
include(CompilerFlags)

----------------------------------------

TITLE: Formatting Colors as CSS with Bun
DESCRIPTION: Examples of using Bun.color() to format various color inputs into CSS-compatible strings. Shows how different input formats are normalized to their most compact CSS representation.

LANGUAGE: typescript
CODE:
Bun.color("red", "css"); // "red"
Bun.color(0xff0000, "css"); // "#f000"
Bun.color("#f00", "css"); // "red"
Bun.color("#ff0000", "css"); // "red"
Bun.color("rgb(255, 0, 0)", "css"); // "red"
Bun.color("rgba(255, 0, 0, 1)", "css"); // "red"
Bun.color("hsl(0, 100%, 50%)", "css"); // "red"
Bun.color("hsla(0, 100%, 50%, 1)", "css"); // "red"
Bun.color({ r: 255, g: 0, b: 0 }, "css"); // "red"
Bun.color({ r: 255, g: 0, b: 0, a: 1 }, "css"); // "red"
Bun.color([255, 0, 0], "css"); // "red"
Bun.color([255, 0, 0, 255], "css"); // "red"

----------------------------------------

TITLE: Retrieving Absolute File Path with import.meta.path in Bun TypeScript
DESCRIPTION: This snippet shows how to use import.meta.path to get the absolute path of the current file in a Bun TypeScript environment. The example assumes the file is located at '/a/b/c.ts'.

LANGUAGE: typescript
CODE:
import.meta.path; // => "/a/b/c.ts"

----------------------------------------

TITLE: Navigating and Checking Out WebKit Commit
DESCRIPTION: Commands to navigate to the WebKit directory and checkout the target commit

LANGUAGE: bash
CODE:
cd src/bun.js/WebKit
git checkout $COMMIT

----------------------------------------

TITLE: Writing Tests with Bun Test Framework
DESCRIPTION: Example of writing tests using Bun's test framework with Jest-like syntax. Demonstrates test structure, imports, and assertions using TextEncoder as an example.

LANGUAGE: typescript
CODE:
import { describe, test, expect } from "bun:test";
import { gcTick } from "harness";

describe("TextEncoder", () => {
  test("can encode a string", async () => {
    const encoder = new TextEncoder();
    const actual = encoder.encode("bun");
    await gcTick();
    expect(actual).toBe(new Uint8Array([0x62, 0x75, 0x6E]));
  });
});

----------------------------------------

TITLE: Running Node.js Benchmark
DESCRIPTION: Command to execute the file upload benchmark using Node.js runtime

LANGUAGE: bash
CODE:
node stream-file-node.mjs

----------------------------------------

TITLE: Installing Dependencies for Bun Development on openSUSE Tumbleweed
DESCRIPTION: Uses zypper to install the required dependencies for building Bun on openSUSE Tumbleweed.

LANGUAGE: bash
CODE:
$ sudo zypper install go cmake ninja automake git icu rustup && rustup toolchain install stable

----------------------------------------

TITLE: libuv Function Exports
DESCRIPTION: libuv cross-platform asynchronous I/O library functions for networking, filesystem, threading and other system operations.

LANGUAGE: C++
CODE:
_uv_accept
_uv_async_init
_uv_async_send
...

----------------------------------------

TITLE: Rust Addition Function with FFI
DESCRIPTION: Implementation of an addition function in Rust with no-mangle attribute for FFI compatibility.

LANGUAGE: rust
CODE:
#[no_mangle]
pub extern "C" fn add(a: i32, b: i32) -> i32 {
    a + b
}

----------------------------------------

TITLE: Running Bun CSS HMR Analysis Script
DESCRIPTION: Shell command to execute CSS Hot Module Reload frame time analysis for Bun project with a 24-hour sleep interval.

LANGUAGE: shell
CODE:
SLEEP_INTERVAL=24 PROJECT=bun node read-frames.js

----------------------------------------

TITLE: Hijacking stdio for Testing
DESCRIPTION: Example showing how to hijack stdout to test console output

LANGUAGE: javascript
CODE:
const { hijackStdout, restoreStdout } = require('../common/hijackstdio');

hijackStdout((data) => {
  /* Do something with data */
  restoreStdout();
});

console.log('this is sent to the hijacked listener');

----------------------------------------

TITLE: Installing pkg-config on macOS for libarchive
DESCRIPTION: Installs pkg-config on macOS to resolve libarchive compilation issues.

LANGUAGE: bash
CODE:
$ brew install pkg-config

----------------------------------------

TITLE: Common Bun CLI Commands
DESCRIPTION: Shows examples of various Bun CLI commands for testing, running scripts, installing packages, and executing packages.

LANGUAGE: bash
CODE:
bun test
bun run start
bun install <pkg>
bunx cowsay 'Hello, world!'

----------------------------------------

TITLE: Socket Operations Interface in C
DESCRIPTION: Core socket operations including writing data, managing timers, and handling connection state. Provides both SSL and non-SSL socket functionality.

LANGUAGE: c
CODE:
WIN32_EXPORT int us_socket_write(int ssl, struct us_socket_t *s, const char *data, int length, int msg_more);

WIN32_EXPORT void us_socket_timeout(int ssl, struct us_socket_t *s, unsigned int seconds);

/* Additional socket functions... */

----------------------------------------

TITLE: SQLite Version Check with bun:ffi
DESCRIPTION: Example showing how to load and call the sqlite3_libversion function using bun:ffi to get SQLite version.

LANGUAGE: typescript
CODE:
import { dlopen, FFIType, suffix } from "bun:ffi";

const path = `libsqlite3.${suffix}`;

const {
  symbols: {
    sqlite3_libversion,
  },
} = dlopen(
  path,
  {
    sqlite3_libversion: {
      args: [],
      returns: FFIType.cstring,
    },
  },
);

console.log(`SQLite 3 version: ${sqlite3_libversion()}`);

----------------------------------------

TITLE: Configuring Multiple Scoped Registry Authentication Methods in bunfig.toml
DESCRIPTION: Shows three different ways to configure private registry authentication for npm scopes: direct URL with credentials, separate username/password, and token-based authentication. Supports environment variable references for sensitive credentials.

LANGUAGE: toml
CODE:
[install.scopes]
# as a string
"@myorg1" = "https://username:password@registry.myorg.com/"

# as an object with username/password
# you can reference environment variables
"@myorg2" = {
  username = "myusername",
  password = "$npm_pass",
  url = "https://registry.myorg.com/"
}

# as an object with token
"@myorg3" = { token = "$npm_token", url = "https://registry.myorg.com/" }

----------------------------------------

TITLE: Viewing Yarn Lockfile Contents with Bun
DESCRIPTION: This command uses Bun to display the contents of the bun.lockb file in Yarn lockfile format without writing to disk.

LANGUAGE: sh
CODE:
$ bun bun.lockb
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
# bun ./bun.lockb --hash: 9BFBF11D86084AAB-9418b03ff880c569-390CE6459EACEC9A...

abab@^2.0.6:
  version "2.0.6"
  resolved "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz"
  integrity sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvH...

----------------------------------------

TITLE: Basic Bun Build Usage
DESCRIPTION: Basic examples of using Bun's bundler via JavaScript API and CLI

LANGUAGE: typescript
CODE:
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './build',
});

LANGUAGE: bash
CODE:
$ bun build ./index.tsx --outdir ./build

----------------------------------------

TITLE: Configuring Optional Peer Dependencies
DESCRIPTION: Shows how to mark peer dependencies as optional using peerDependenciesMeta configuration in package.json.

LANGUAGE: json
CODE:
{
  "peerDependencies": {
    "@types/bun": "^$BUN_LATEST_VERSION"
  },
  "peerDependenciesMeta": {
+   "@types/bun": {
+     "optional": true
+   }
  }

}

----------------------------------------

TITLE: Configuring Asset Naming in Bun's JavaScript API
DESCRIPTION: Shows how to configure asset naming using Bun's JavaScript API. The syntax is similar to esbuild but requires explicit inclusion of [ext].

LANGUAGE: typescript
CODE:
Bun.build({
  entrypoints: ["./index.tsx"],
  naming: {
    asset: "[name].[ext]",
  },
});

----------------------------------------

TITLE: Reverting to Stable Bun Version
DESCRIPTION: Reverts from a canary build back to the latest stable published version of Bun.

LANGUAGE: bash
CODE:
$ bun upgrade

----------------------------------------

TITLE: Initializing Sentry in Bun Application
DESCRIPTION: Configuration code to initialize Sentry SDK with DSN and performance monitoring settings. Must be called before importing other modules to ensure proper error tracking.

LANGUAGE: javascript
CODE:
import * as Sentry from "@sentry/bun";

// Ensure to call this before importing any other modules!
Sentry.init({
  dsn: "__SENTRY_DSN__",

  // Add Performance Monitoring by setting tracesSampleRate
  // We recommend adjusting this value in production
  tracesSampleRate: 1.0,
});

----------------------------------------

TITLE: Checking Multiple Workspaces for Outdated Dependencies in Bun
DESCRIPTION: Use multiple --filter flags to check for outdated dependencies in multiple workspace packages within a Bun monorepo project.

LANGUAGE: bash
CODE:
bun outdated {e,t}* --filter @monorepo/types --filter @monorepo/cli

----------------------------------------

TITLE: Reading JSON File with Bun.file()
DESCRIPTION: Shows how to read and parse a JSON file using Bun's file API. The example demonstrates creating a BunFile instance, reading its contents as JSON, and accessing the file's MIME type. The BunFile class extends Blob and provides lazy file reading capabilities.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

const contents = await file.json();
// { name: "my-package" }

file.type; // => "application/json;charset=utf-8";

----------------------------------------

TITLE: Running Express Server with Node.js
DESCRIPTION: Command to start the Express server using the Node.js runtime.

LANGUAGE: sh
CODE:
node ./express.mjs

----------------------------------------

TITLE: Reading Directories in TypeScript
DESCRIPTION: Shows how to read directory contents using Node.js fs module in Bun.

LANGUAGE: typescript
CODE:
import { readdir } from "node:fs/promises";

// read all the files in the current directory
const files = await readdir(import.meta.dir);

----------------------------------------

TITLE: Handling Process Exit Event in Bun
DESCRIPTION: Shows how to listen for the process exit event, which is triggered when the process is about to exit. The callback receives the exit code as a parameter.

LANGUAGE: typescript
CODE:
process.on("exit", code => {
  console.log(`Process exited with code ${code}`);
});

----------------------------------------

TITLE: Sending Messages in Bun WebSocket Server
DESCRIPTION: Illustrates how to send messages back to the client using the ServerWebSocket instance's .send() method, supporting various input types.

LANGUAGE: typescript
CODE:
Bun.serve({
  fetch(req, server) {}, // upgrade logic
  websocket: {
    message(ws, message) {
      ws.send("Hello world"); // string
      ws.send(response.arrayBuffer()); // ArrayBuffer
      ws.send(new Uint8Array([1, 2, 3])); // TypedArray | DataView
    },
  },
});

----------------------------------------

TITLE: Using --define Flag in Bun for Runtime and Build
DESCRIPTION: This snippet demonstrates how to use the `--define` flag in Bun to set a constant value for `process.env.NODE_ENV` during runtime execution and build process.

LANGUAGE: sh
CODE:
$ bun --define process.env.NODE_ENV="'production'" src/index.ts # Runtime
$ bun build --define process.env.NODE_ENV="'production'" src/index.ts # Build

----------------------------------------

TITLE: Installing Bun Using curl
DESCRIPTION: Installs the latest release of Bun using curl and a shell script.

LANGUAGE: bash
CODE:
$ curl -fsSL https://bun.sh/install | bash

----------------------------------------

TITLE: Complete µWebSockets Server Example
DESCRIPTION: Minimal working example of a µWebSockets server that sets up a route, listens on a port, and runs the event loop.

LANGUAGE: c++
CODE:
int main() {
    uWS::App().get("/*", [](auto *res, auto *req) {
        res->end("Hello World!");
    }).listen(9001, [](auto *listenSocket) {
        if (listenSocket) {
            std::cout << "Listening for connections..." << std::endl;
        }
    }).run();

    std::cout << "Shoot! We failed to listen and the App fell through, exiting now!" << std::endl;
}

----------------------------------------

TITLE: Installing Prisma Dependencies with Bun
DESCRIPTION: Installs Prisma CLI and Prisma Client as dependencies using Bun package manager.

LANGUAGE: bash
CODE:
$ bun add -d prisma
$ bun add @prisma/client

----------------------------------------

TITLE: Running Bun Release Scripts
DESCRIPTION: Commands for building and publishing Bun release assets. The script allows building assets for the latest release, a specific release, or building and publishing to npm with an optional dry-run mode.

LANGUAGE: sh
CODE:
bun run npm # build assets for the latest release
bun run npm -- <release> # build assets for the provided release
bun run npm -- <release> [dry-run|publish] # build and publish assets to npm

----------------------------------------

TITLE: Running Node.js Applications from Command Line
DESCRIPTION: Demonstrates the basic command line syntax for executing Node.js applications. Users can specify various options followed by the main JavaScript file to run.

LANGUAGE: bash
CODE:
node [options] index.js

----------------------------------------

TITLE: Using bunx with Bun Runtime Flag
DESCRIPTION: Examples of correct and incorrect usage of the --bun flag to force execution with Bun runtime

LANGUAGE: bash
CODE:
$ bunx --bun my-cli # good
$ bunx my-cli --bun # bad

----------------------------------------

TITLE: Starting the Expo Development Server
DESCRIPTION: Command to launch the Expo development server for running the application

LANGUAGE: bash
CODE:
npx expo start

----------------------------------------

TITLE: Creating Node.js Executable Script
DESCRIPTION: Example of a JavaScript executable file with Node.js shebang for command-line execution

LANGUAGE: javascript
CODE:
#!/usr/bin/env node

console.log("Hello world!");

----------------------------------------

TITLE: Configuring TypeScript Path Mapping in Bun
DESCRIPTION: Shows how to use tsconfig.json to configure path mapping for imports, which Bun's runtime respects for TypeScript-like import resolution.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "paths": {
      "config": ["./config.ts"],
      "components/*": ["components/*"]
    }
  }
}

----------------------------------------

TITLE: Configuring Subprocess with Bun.spawn Options
DESCRIPTION: Shows how to use the options object in Bun.spawn to configure the subprocess, including setting the working directory, environment variables, and an exit handler.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["bun", "--version"], {
  cwd: "./path/to/subdir", // specify a working directory
  env: { ...process.env, FOO: "bar" }, // specify environment variables
  onExit(proc, exitCode, signalCode, error) {
    // exit handler
  },
});

proc.pid; // process ID of subprocess

----------------------------------------

TITLE: TailwindCSS Import in CSS
DESCRIPTION: CSS configuration to import TailwindCSS in component styles.

LANGUAGE: css
CODE:
@import "tailwindcss";

----------------------------------------

TITLE: Running Benchmark in Node.js
DESCRIPTION: Command to execute the benchmark using Node.js runtime

LANGUAGE: bash
CODE:
node index.mjs

----------------------------------------

TITLE: Starting SvelteKit Development Server with Bun
DESCRIPTION: Demonstrates how to start the SvelteKit development server using Bun runtime. Shows the Vite development server startup and local access URL.

LANGUAGE: sh
CODE:
$ cd my-app
$ bun --bun run dev
  $ vite dev
  Forced re-optimization of dependencies
  
    VITE v5.4.10  ready in 424 ms
  
    ➜  Local:   http://localhost:5173/
    ➜  Network: use --host to expose
    ➜  press h + enter to show help

----------------------------------------

TITLE: File URL Conversion with Bun.fileURLToPath() in TypeScript
DESCRIPTION: Demonstrates how to convert a file:// URL to an absolute path using Bun.fileURLToPath() in TypeScript.

LANGUAGE: typescript
CODE:
const path = Bun.fileURLToPath(new URL("file:///foo/bar.txt"));
console.log(path); // "/foo/bar.txt"

----------------------------------------

TITLE: Checking File Existence using Bun.file()
DESCRIPTION: Shows how to create a BunFile instance and check if a file exists at the specified path using the .exists() method. The method returns a Promise that resolves to a boolean indicating file existence.

LANGUAGE: typescript
CODE:
const path = "/path/to/package.json";
const file = Bun.file(path);

await file.exists(); // boolean;

----------------------------------------

TITLE: Compressing and Decompressing Data with Bun's gzip Functions
DESCRIPTION: This snippet demonstrates how to use Bun.gzipSync() to compress a Uint8Array and Bun.gunzipSync() to decompress it. It uses a simple 'Hello, world!' string as an example, converting it to a Buffer before compression.

LANGUAGE: typescript
CODE:
const data = Buffer.from("Hello, world!");
const compressed = Bun.gzipSync(data);
// => Uint8Array

const decompressed = Bun.gunzipSync(compressed);
// => Uint8Array

----------------------------------------

TITLE: Creating and Using Function Mocks in Bun Tests
DESCRIPTION: This snippet demonstrates how to create a mock function using Bun's `mock()` function and test it using various expectations.

LANGUAGE: typescript
CODE:
import { test, expect, mock } from "bun:test";
const random = mock(() => Math.random());

test("random", async () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});

----------------------------------------

TITLE: Restoring All Function Mocks in Bun Tests
DESCRIPTION: This snippet shows how to use `mock.restore()` to reset all function mocks to their original values, which can be useful in test cleanup or setup.

LANGUAGE: typescript
CODE:
import { expect, mock, spyOn, test } from "bun:test";

import * as fooModule from './foo.ts';
import * as barModule from './bar.ts';
import * as bazModule from './baz.ts';

test('foo, bar, baz', () => {
  const fooSpy = spyOn(fooModule, 'foo');
  const barSpy = spyOn(barModule, 'bar');
  const bazSpy = spyOn(bazModule, 'baz');

  expect(fooSpy).toBe('foo');
  expect(barSpy).toBe('bar');
  expect(bazSpy).toBe('baz');

  fooSpy.mockImplementation(() => 42);
  barSpy.mockImplementation(() => 43);
  bazSpy.mockImplementation(() => 44);

  expect(fooSpy).toBe(42);
  expect(barSpy).toBe(43);
  expect(bazSpy).toBe(44);

  mock.restore();

  expect(fooSpy).toBe('foo');
  expect(barSpy).toBe('bar');
  expect(bazSpy).toBe('baz');
});

----------------------------------------

TITLE: Installing LLVM on Fedora
DESCRIPTION: Installs LLVM, Clang, and LLD on Fedora using dnf.

LANGUAGE: bash
CODE:
$ sudo dnf install llvm clang lld-devel

----------------------------------------

TITLE: Converting File URL to Absolute Path using Bun in TypeScript
DESCRIPTION: This snippet demonstrates how to use the Bun.fileURLToPath() function to convert a file:// URL to an absolute path. The function takes a file URL as input and returns the corresponding absolute path as a string.

LANGUAGE: typescript
CODE:
Bun.fileURLToPath("file:///path/to/file.txt");
// => "/path/to/file.txt"

----------------------------------------

TITLE: Structuring HTML for Example Domain Page
DESCRIPTION: Defines the basic HTML structure for the example domain page, including metadata, title, and body content.

LANGUAGE: HTML
CODE:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    /* CSS styles here */
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

----------------------------------------

TITLE: Dead Code Elimination in Bun
DESCRIPTION: This TypeScript snippet shows the final result after Bun's dead code elimination, where the unreachable else branch is removed.

LANGUAGE: ts
CODE:
console.log("Production mode");

----------------------------------------

TITLE: Installing Drizzle ORM and Kit with Bun
DESCRIPTION: Commands to initialize a new Bun project and install Drizzle ORM and Drizzle Kit.

LANGUAGE: sh
CODE:
$ bun init -y
$ bun add drizzle-orm
$ bun add -D drizzle-kit

----------------------------------------

TITLE: Serving Static Files with StricJS Router
DESCRIPTION: Extends the basic HTTP server to serve static files from a '/public' directory in addition to the root route.

LANGUAGE: typescript
CODE:
import { dir } from '@stricjs/utils';

export default new Router()
  .get('/', () => new Response('Hi'))
  .get('/*', dir('./public'));

----------------------------------------

TITLE: Adding Dev Dependencies with Bun
DESCRIPTION: Using the '--dev' flag to add packages as development dependencies in the 'devDependencies' section of package.json.

LANGUAGE: bash
CODE:
$ bun add --dev @types/react
$ bun add -d @types/react

----------------------------------------

TITLE: Running 'cat' Implementation in Bash
DESCRIPTION: Shows how to run the TypeScript implementation of 'cat' using Bun.

LANGUAGE: bash
CODE:
$ bun ./cat.ts ./path-to-file

----------------------------------------

TITLE: Creating and Configuring Cookie Instances in TypeScript
DESCRIPTION: Examples of creating Cookie instances with various configurations including basic cookies, secure session cookies, and parsing from strings.

LANGUAGE: typescript
CODE:
import { Cookie } from "bun";

// Create a basic cookie
const cookie = new Bun.Cookie("name", "value");

// Create a cookie with options
const secureSessionCookie = new Bun.Cookie("session", "abc123", {
  domain: "example.com",
  path: "/admin",
  expires: new Date(Date.now() + 86400000), // 1 day
  httpOnly: true,
  secure: true,
  sameSite: "strict",
});

// Parse from a cookie string
const parsedCookie = new Bun.Cookie("name=value; Path=/; HttpOnly");

// Create from an options object
const objCookie = new Bun.Cookie({
  name: "theme",
  value: "dark",
  maxAge: 3600,
  secure: true,
});

----------------------------------------

TITLE: Snapshot Testing Example
DESCRIPTION: Demonstration of snapshot testing functionality in Bun

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ a: 1 }).toMatchSnapshot();
});

----------------------------------------

TITLE: Regenerating Bindings and Headers
DESCRIPTION: Commands to clean and regenerate C++/Zig bindings and headers

LANGUAGE: bash
CODE:
make clean-bindings headers builtins

----------------------------------------

TITLE: Example Package.json for Bun Update Demonstration
DESCRIPTION: This JSON snippet shows an example package.json file with a dependency on React version 17.0.2. It's used to demonstrate the difference between regular update and update with --latest flag.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "react": "^17.0.2"
  }
}

----------------------------------------

TITLE: Creating and Using Plugin State with NAPI External in Rust
DESCRIPTION: Example of creating threadsafe plugin state using NAPI's External type in Rust, allowing data to be passed between JavaScript and the native plugin.

LANGUAGE: rust
CODE:
struct PluginState {
  foo_count: std::sync::atomic::AtomicU32,
}

#[napi]
pub fn create_plugin_state() -> External<PluginState> {
  let external = External::new(PluginState {
    foo_count: 0,
  });

  external
}


#[napi]
pub fn get_foo_count(plugin_state: External<PluginState>) -> u32 {
  let plugin_state: &PluginState = &plugin_state;
  plugin_state.foo_count.load(std::sync::atomic::Ordering::Relaxed)
}

----------------------------------------

TITLE: HTTP Server Cookie Handling in TypeScript
DESCRIPTION: Shows how to handle cookies in a Bun HTTP server including accessing, checking, and setting cookies in request handlers.

LANGUAGE: typescript
CODE:
const server = Bun.serve({
  routes: {
    "/": req => {
      // Access request cookies
      const cookies = req.cookies;

      // Get a specific cookie
      const sessionCookie = cookies.get("session");
      if (sessionCookie != null) {
        console.log(sessionCookie);
      }

      // Check if a cookie exists
      if (cookies.has("theme")) {
        // ...
      }

      // Set a cookie, it will be automatically applied to the response
      cookies.set("visited", "true");

      return new Response("Hello");
    },
  },
});

console.log("Server listening at: " + server.url);

----------------------------------------

TITLE: Running and Managing Docker Containers
DESCRIPTION: Commands for running a Docker container, checking container status, and stopping containers using the Docker CLI.

LANGUAGE: sh
CODE:
$ docker run -d -p 3000:3000 bun-hello-world
7f03e212a15ede8644379bce11a13589f563d3909a9640446c5bbefce993678d

LANGUAGE: sh
CODE:
$ docker stop 7f03e212a15ede8644379bce11a13589f563d3909a9640446c5bbefce993678d

LANGUAGE: sh
CODE:
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
7f03e212a15e        bun-hello-world     "bun run index.ts"       2 minutes ago       Up 2 minutes        0.0.0.0:3000->3000/tcp   flamboyant_cerf

----------------------------------------

TITLE: Transaction Handling with Bun SQL in TypeScript
DESCRIPTION: Illustrates how to use transactions with Bun's SQL driver, including basic transactions, savepoints, and distributed transactions.

LANGUAGE: typescript
CODE:
await sql.begin(async tx => {
  // All queries in this function run in a transaction
  await tx`INSERT INTO users (name) VALUES (${'Alice'})`;
  await tx`UPDATE accounts SET balance = balance - 100 WHERE user_id = 1`;

  // Transaction automatically commits if no errors are thrown
  // Rolls back if any error occurs
});

// Savepoint example
await sql.begin(async tx => {
  await tx`INSERT INTO users (name) VALUES (${'Alice'})`;

  await tx.savepoint(async sp => {
    // This part can be rolled back separately
    await sp`UPDATE users SET status = 'active'`;
    if (someCondition) {
      throw new Error("Rollback to savepoint");
    }
  });

  // Continue with transaction even if savepoint rolled back
  await tx`INSERT INTO audit_log (action) VALUES ('user_created')`;
});

// Distributed transaction example
await sql.beginDistributed("tx1", async tx => {
  await tx`INSERT INTO users (name) VALUES (${'Alice'})`;
});

// Later, commit or rollback
await sql.commitDistributed("tx1");
// or
await sql.rollbackDistributed("tx1");

----------------------------------------

TITLE: Environment Variable Expansion
DESCRIPTION: Demonstration of environment variable expansion and reference syntax in .env files

LANGUAGE: txt
CODE:
FOO=world
BAR=hello$FOO

----------------------------------------

TITLE: Adding Development Dependency with Bun CLI
DESCRIPTION: This snippet demonstrates how to add a development dependency using Bun's CLI. It shows two equivalent commands for adding 'zod' as a dev dependency.

LANGUAGE: sh
CODE:
$ bun add zod --dev
$ bun add zod -d # shorthand

----------------------------------------

TITLE: Creating Snapshot Tests in TypeScript with Bun
DESCRIPTION: Example of writing a basic snapshot test using Bun's test runner. The test creates a snapshot of an object for comparison in future test runs.

LANGUAGE: typescript
CODE:
import { test, expect } from "bun:test";

test("snapshot", () => {
  expect({ foo: "bar" }).toMatchSnapshot();
});

----------------------------------------

TITLE: Defining a Plugin in Bun
DESCRIPTION: Illustrates how to define a plugin in Bun using the BunPlugin type. The structure is similar to esbuild plugins.

LANGUAGE: typescript
CODE:
import type { BunPlugin } from "bun";

const myPlugin: BunPlugin = {
  name: "my-plugin",
  setup(builder) {
    // define plugin
  },
};

----------------------------------------

TITLE: Importing Modules in TypeScript with Bun
DESCRIPTION: Demonstrates basic module importing in TypeScript using Bun. Shows how to import from a relative path without an extension, which Bun resolves automatically.

LANGUAGE: typescript
CODE:
import { hello } from "./hello";

hello();

LANGUAGE: typescript
CODE:
export function hello() {
  console.log("Hello world!");
}

----------------------------------------

TITLE: Standard TOML Comments
DESCRIPTION: Shows the standard TOML comment syntax which only uses '#' as the comment indicator.

LANGUAGE: toml
CODE:
# This is a comment

----------------------------------------

TITLE: Installing WebKit Build Dependencies
DESCRIPTION: Installs additional packages required for building WebKit locally.

LANGUAGE: powershell
CODE:
scoop install make cygwin python

----------------------------------------

TITLE: Code Signing and Verification Commands
DESCRIPTION: Commands to sign the executable with the specified identity and entitlements, followed by verification of the signature.

LANGUAGE: bash
CODE:
$ codesign --entitlements entitlements.plist -vvvv --deep --sign "XXXXXXXXXX" ./myapp --force
$ codesign -vvv --verify ./myapp

----------------------------------------

TITLE: Setting Test Timeout in Bun
DESCRIPTION: This snippet shows how to set a timeout for a test in Bun. The test must complete within the specified time (500ms in this case) or it will fail.

LANGUAGE: typescript
CODE:
import { test } from "bun:test";

test("wat", async () => {
  const data = await slowOperation();
  expect(data).toBe(42);
}, 500); // test must run in <500ms

----------------------------------------

TITLE: Initializing SolidStart App with Bun
DESCRIPTION: This command initializes a new SolidStart application using the 'create-solid' CLI tool. It prompts for template selection, server-side rendering, and TypeScript usage.

LANGUAGE: sh
CODE:
$ bun create solid my-app
create-solid version 0.2.31

Welcome to the SolidStart setup wizard!

There are definitely bugs and some feature might not work yet.
If you encounter an issue, have a look at
https://github.com/solidjs/solid-start/issues and open a new one,
if it is not already tracked.

✔ Which template do you want to use? › todomvc
✔ Server Side Rendering? … yes
✔ Use TypeScript? … yes
cloned solidjs/solid-start#main to /path/to/my-app/.solid-start
✔ Copied project files

----------------------------------------

TITLE: Connecting to SQLite Database with Drizzle ORM in Bun
DESCRIPTION: Creates a connection to a SQLite database using Bun's built-in SQLite module and initializes a Drizzle database instance.

LANGUAGE: ts
CODE:
import { drizzle } from "drizzle-orm/bun-sqlite";
import { Database } from "bun:sqlite";

const sqlite = new Database("sqlite.db");
export const db = drizzle(sqlite);

----------------------------------------

TITLE: Resetting Expo Project
DESCRIPTION: Command to reset the project by moving starter code to app-example directory and creating a new blank app directory

LANGUAGE: bash
CODE:
npm run reset-project

----------------------------------------

TITLE: Working with Blobs
DESCRIPTION: Shows how to create and manipulate Blobs, including reading contents in various formats.

LANGUAGE: typescript
CODE:
const blob = new Blob(["<html>Hello</html>"], {
  type: "text/html",
});

await blob.text(); // => <html>Hello</html>
await blob.bytes(); // => Uint8Array
await blob.arrayBuffer(); // => ArrayBuffer
await blob.stream(); // => ReadableStream

----------------------------------------

TITLE: Native Addon and SQLite Import Examples
DESCRIPTION: Demonstrates importing native addons and SQLite databases in Bun.

LANGUAGE: typescript
CODE:
import addon from "./addon.node";
console.log(addon);

LANGUAGE: typescript
CODE:
import db from "./my.db" with { type: "sqlite" };

// embed the database into the bundle
import db from "./my.db" with { type: "sqlite", embed: "true" };

----------------------------------------

TITLE: Inter-Process Communication (IPC) with Bun.spawn
DESCRIPTION: Shows how to set up IPC between a parent Bun process and a child Bun process using Bun.spawn.

LANGUAGE: typescript
CODE:
const childProc = Bun.spawn(["bun", "child.ts"], {
  ipc(message, childProc) {
    /**
     * The message received from the sub process
     **/
    childProc.send("Respond to child")
  },
});

childProc.send("I am your father"); // The parent can send messages to the child as well

----------------------------------------

TITLE: Creating a Sample Svelte Component
DESCRIPTION: Defines a simple Svelte component (Counter.svelte) with a button that increments a count when clicked.

LANGUAGE: html
CODE:
<script>
  export let initialCount = 0;
  let count = initialCount;
</script>

<button on:click={() => (count += 1)}>+1</button>

----------------------------------------

TITLE: HTTP Event Handler Implementation in Bun
DESCRIPTION: Example of a Bun Lambda function handling HTTP events from API Gateway, demonstrating the Request/Response pattern

LANGUAGE: typescript
CODE:
export default {
  async fetch(request: Request): Promise<Response> {
    console.log(request.headers.get("x-amzn-function-arn"));
    // ...
    return new Response("Hello from Lambda!", {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  },
};

----------------------------------------

TITLE: Running Release Builds from Pull Requests
DESCRIPTION: Downloads and runs release builds of Bun from GitHub pull requests using the bun-pr package.

LANGUAGE: bash
CODE:
bunx bun-pr <pr-number>
bunx bun-pr <branch-name>
bunx bun-pr "https://github.com/oven-sh/bun/pull/1234566"

bun-1234566 --version

----------------------------------------

TITLE: React Component Example
DESCRIPTION: Example of bundling a simple React component with TypeScript and JSX

LANGUAGE: typescript
CODE:
import * as ReactDOM from 'react-dom/client';
import {Component} from "./Component"

const root = ReactDOM.createRoot(document.getElementById('root')!);
root.render(<Component message="Sup!" />)

LANGUAGE: typescript
CODE:
export function Component(props: {message: string}) {
  return <p>{props.message}</p>
}

----------------------------------------

TITLE: TypedArray Operations
DESCRIPTION: Examples of creating and manipulating TypedArrays, including initialization and element access.

LANGUAGE: typescript
CODE:
const buffer = new ArrayBuffer(3);
const arr = new Uint8Array(buffer);

// contents are initialized to zero
console.log(arr); // Uint8Array(3) [0, 0, 0]

// assign values like an array
arr[0] = 0;
arr[1] = 10;
arr[2] = 255;

----------------------------------------

TITLE: Grouping Tests with Describe in Bun
DESCRIPTION: This example shows how to group related tests using the 'describe' function. It creates a suite of arithmetic tests, including addition and multiplication.

LANGUAGE: typescript
CODE:
import { expect, test, describe } from "bun:test";

describe("arithmetic", () => {
  test("2 + 2", () => {
    expect(2 + 2).toBe(4);
  });

  test("2 * 2", () => {
    expect(2 * 2).toBe(4);
  });
});

----------------------------------------

TITLE: WebSocket Route Configuration in µWebSockets
DESCRIPTION: Complete example of setting up a WebSocket route with all available handlers and settings including compression, payload limits, and timeout configuration.

LANGUAGE: c++
CODE:
uWS::App().ws<PerSocketData>("/*", {
    /* Settings */
    .compression = uWS::SHARED_COMPRESSOR,
    .maxPayloadLength = 16 * 1024,
    .idleTimeout = 10,
    /* Handlers */
    .upgrade = [](auto *res, auto *req, auto *context) {
        /* You may read from req only here, and COPY whatever you need into your PerSocketData.
         * See UpgradeSync and UpgradeAsync examples. */
    },
    .open = [](auto *ws) {

    },
    .message = [](auto *ws, std::string_view message, uWS::OpCode opCode) {
        ws->send(message, opCode);
    },
    .drain = [](auto *ws) {
        /* Check getBufferedAmount here */
    },
    .ping = [](auto *ws) {

    },
    .pong = [](auto *ws) {

    },
    .close = [](auto *ws, int code, std::string_view message) {

    }
});

----------------------------------------

TITLE: Performing CRUD Operations with Prisma and Bun
DESCRIPTION: Creates a new user and counts the total number of users in the database using Prisma client with Bun.

LANGUAGE: typescript
CODE:
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// create a new user
await prisma.user.create({
  data: {
    name: "John Dough",
    email: `john-${Math.random()}@example.com`,
  },
});

// count the number of users
const count = await prisma.user.count();
console.log(`There are ${count} users in the database.`);

----------------------------------------

TITLE: Converting Uint8Array to DataView in TypeScript
DESCRIPTION: Creates a new DataView instance that shares the same underlying ArrayBuffer as a Uint8Array, using the same byte range defined by the array's offset and length. This allows for different ways of accessing and manipulating the same binary data.

LANGUAGE: typescript
CODE:
const arr: Uint8Array = ...
const dv = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);

----------------------------------------

TITLE: Implementing Bun Plugin Lifecycle Hooks
DESCRIPTION: Demonstrates the usage of onStart, onResolve, and onLoad lifecycle hooks in Bun plugins for custom build processes.

LANGUAGE: typescript
CODE:
import { plugin } from "bun";

plugin({
  name: "lifecycle-hooks-example",
  setup(build) {
    build.onStart(() => {
      console.log("Bundle started!");
    });

    build.onResolve({ filter: /.*/, namespace: "file" }, args => {
      if (args.path.startsWith("images/")) {
        return {
          path: args.path.replace("images/", "./public/images/"),
        };
      }
    });

    build.onLoad({ filter: /env/, namespace: "file" }, args => {
      return {
        contents: `export default ${JSON.stringify(process.env)}`,
        loader: "js",
      };
    });
  },
});

----------------------------------------

TITLE: Implementing Fast File Cat in Bun.js
DESCRIPTION: This JavaScript snippet shows how to create a fast 'cat' clone using Bun.js file system operations. It reads a file and writes its content to stdout.

LANGUAGE: javascript
CODE:
// cat.js
import { resolve } from "path";
import { write, stdout, file, argv } from "bun";

const path = resolve(argv.at(-1));

await write(
  // stdout is a Blob
  stdout,
  // file(path) returns a Blob - https://developer.mozilla.org/en-US/docs/Web/API/Blob
  file(path),
);

----------------------------------------

TITLE: Installing Bun using npm
DESCRIPTION: This command installs Bun globally using npm on macOS, Linux, and Windows.

LANGUAGE: bash
CODE:
$ npm install -g bun # the last `npm` command you'll ever need

----------------------------------------

TITLE: Using Custom Binary Versions in Bun Scripts
DESCRIPTION: This snippet shows how to use a custom version of Bun, Deno, or Node binary when running scripts. It provides an example of setting the BUN environment variable inline and mentions the option to edit the .env file for persistent configuration.

LANGUAGE: bash
CODE:
# to use custom version of bun/deno/node binary
BUN=path/to/bun bun run ffi
# or edit .env file

----------------------------------------

TITLE: Recursive Path Matching with **
DESCRIPTION: Shows how to use ** pattern for matching files across multiple directory levels.

LANGUAGE: typescript
CODE:
const glob = new Glob("**/*.ts");
glob.match("index.ts"); // => true
glob.match("src/index.ts"); // => true
glob.match("src/index.js"); // => false

----------------------------------------

TITLE: Using Bun Test Bail Flag
DESCRIPTION: Demonstrates how to use the bail flag to stop testing after a number of failures.

LANGUAGE: sh
CODE:
$ bun test --bail=3

----------------------------------------

TITLE: Merging Upstream WebKit Changes
DESCRIPTION: Commands to merge upstream WebKit changes, including handling shallow clone issues

LANGUAGE: bash
CODE:
git merge upstream main
# If you get an error saying histories are unrelated, run this and try again:
git fetch --unshallow

----------------------------------------

TITLE: Displaying Monorepo Directory Structure
DESCRIPTION: Example directory structure for a typical monorepo project showing the root configuration files and multiple package directories.

LANGUAGE: tree
CODE:
<root>
├── README.md
├── bun.lock
├── package.json
├── tsconfig.json
└── packages
    ├── pkg-a
    │   ├── index.ts
    │   ├── package.json
    │   └── tsconfig.json
    ├── pkg-b
    │   ├── index.ts
    │   ├── package.json
    │   └── tsconfig.json
    └── pkg-c
        ├── index.ts
        ├── package.json
        └── tsconfig.json

----------------------------------------

TITLE: Building a Release Version of Bun
DESCRIPTION: Compiles a release build of Bun using the provided build script.

LANGUAGE: bash
CODE:
$ bun run build:release

----------------------------------------

TITLE: Output After Property Replacement
DESCRIPTION: This TypeScript snippet shows the output after Bun replaces console.write with console.log.

LANGUAGE: ts
CODE:
console.log("Hello, world!");

----------------------------------------

TITLE: Spawning a Child Process with IPC in Bun
DESCRIPTION: This snippet shows how to spawn a child process using Bun.spawn() and set up an IPC handler to receive messages from the child process.

LANGUAGE: typescript
CODE:
const child = Bun.spawn(["bun", "child.ts"], {
  ipc(message) {
    /**
     * The message received from the sub process
     **/
  },
});

----------------------------------------

TITLE: Implementing Interactive Button in MDX
DESCRIPTION: A simple button component example that shows how to use JSX components directly in MDX content with an onClick event handler.

LANGUAGE: jsx
CODE:
<Button onClick={() => alert("Hello!")}>Click me</Button>

----------------------------------------

TITLE: Configuring Docker Ignore File
DESCRIPTION: Configuration for .dockerignore file to exclude unnecessary files and directories from the Docker build context, improving build efficiency and security.

LANGUAGE: txt
CODE:
node_modules
Dockerfile*
docker-compose*
.dockerignore
.git
.gitignore
README.md
LICENSE
.vscode
Makefile
helm-charts
.env
.editorconfig
.idea
coverage*

----------------------------------------

TITLE: Building and Running Bun
DESCRIPTION: Commands for building Bun from source and running the debug version.

LANGUAGE: bash
CODE:
bun run build

LANGUAGE: bash
CODE:
build/debug/bun-debug --version

----------------------------------------

TITLE: Prop Punning in TSX with Bun
DESCRIPTION: Illustrates the use of prop punning in TSX, a shorthand syntax for assigning a variable to a prop with the same name.

LANGUAGE: tsx
CODE:
function Div(props: {className: string;}) {
  const {className} = props;

  // without punning
  return <div className={className} />;
  // with punning
  return <div {className} />;
}

----------------------------------------

TITLE: Configuring Run Command Options in Bun
DESCRIPTION: Sets options for the 'bun run' command, including shell selection and node aliasing.

LANGUAGE: toml
CODE:
[run]
# default outside of Windows
shell = "system"

# default on Windows
shell = "bun"

# equivalent to `bun --bun` for all `bun run` commands
bun = true

silent = true

----------------------------------------

TITLE: Creating and Using a FileSink Writer in TypeScript
DESCRIPTION: This snippet demonstrates how to create a FileSink writer from a BunFile, write multiple strings to it, and flush the data to disk. It shows the basic usage of the incremental file writing API in Bun.

LANGUAGE: typescript
CODE:
const file = Bun.file("/path/to/file.txt");
const writer = file.writer();

writer.write("lorem");
writer.write("ipsum");
writer.write("dolor");

writer.flush();

// continue writing & flushing

----------------------------------------

TITLE: Installing Testing Library Dependencies
DESCRIPTION: Install Testing Library packages for React testing including DOM and Jest-DOM matchers

LANGUAGE: sh
CODE:
bun add -D @testing-library/react @testing-library/dom @testing-library/jest-dom

----------------------------------------

TITLE: Piping Child Process stdout to Parent Process in Bun (TypeScript)
DESCRIPTION: This snippet shows how to spawn a child process and pipe its stdout directly to the parent process's stdout by setting the 'stdout' option to 'inherit'.

LANGUAGE: typescript
CODE:
const proc = Bun.spawn(["echo", "hello"], {
  stdout: "inherit",
});

----------------------------------------

TITLE: Accessing Mock Function Call Information in Bun Test
DESCRIPTION: Illustrates how to access additional properties of a mock function, including call arguments and results. This is useful for inspecting how the mock function was used during tests.

LANGUAGE: typescript
CODE:
import { mock } from "bun:test";

const random = mock((multiplier: number) => multiplier * Math.random());

random(2);
random(10);

random.mock.calls;
// [[ 2 ], [ 10 ]]

random.mock.results;
//  [
//    { type: "return", value: 0.6533907460954099 },
//    { type: "return", value: 0.6452713933037312 }
//  ]

----------------------------------------

TITLE: Configuring Import Path Re-mapping in tsconfig.json for Bun
DESCRIPTION: This snippet shows how to set up the 'paths' field in tsconfig.json to re-map import paths. It demonstrates aliasing a package name and creating a shorthand for a directory path.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "paths": {
      "my-custom-name": ["zod"],
      "@components/*": ["./src/components/*"]
    }
  }
}

----------------------------------------

TITLE: Running Debug Builds of Bun
DESCRIPTION: Uses the 'bd' script to compile and run debug builds of Bun with various arguments.

LANGUAGE: bash
CODE:
$ bun bd <args>
$ bun bd test foo.test.ts
$ bun bd ./foo.ts

----------------------------------------

TITLE: Configuring DNS Cache TTL
DESCRIPTION: Example of setting DNS cache Time-To-Live duration using environment variables.

LANGUAGE: shell
CODE:
BUN_CONFIG_DNS_TIME_TO_LIVE_SECONDS=5 bun run my-script.ts

----------------------------------------

TITLE: Registering YAML Plugin for Runtime Use
DESCRIPTION: TypeScript code to register the YAML plugin for runtime use in Bun.

LANGUAGE: typescript
CODE:
// yaml.ts
import yamlPlugin from "bun-plugin-yaml";

Bun.plugin(yamlPlugin());

----------------------------------------

TITLE: HMR Module Accept Implementation
DESCRIPTION: Shows how to implement basic module acceptance for hot reloading, including dependency management and state preservation.

LANGUAGE: typescript
CODE:
import { getCount } from "./foo.ts";

console.log("count is ", getCount());

import.meta.hot.accept();

export function getNegativeCount() {
  return -getCount();
}

----------------------------------------

TITLE: Creating a Direct ReadableStream in TypeScript
DESCRIPTION: This snippet demonstrates Bun's optimized direct ReadableStream, which avoids unnecessary data copying and queue management logic.

LANGUAGE: typescript
CODE:
const stream = new ReadableStream({
  type: "direct",
  pull(controller) {
    controller.write("hello");
    controller.write("world");
  },
});

----------------------------------------

TITLE: HTML Processing Example
DESCRIPTION: Shows how the HTML loader processes and bundles HTML files with referenced assets.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <body>
    <img src="./image.jpg" alt="Local image">
    <img src="https://example.com/image.jpg" alt="External image">
    <script type="module" src="./script.js"></script>
  </body>
</html>

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <body>
    <img src="./image-HASHED.jpg" alt="Local image">
    <img src="https://example.com/image.jpg" alt="External image">
    <script type="module" src="./output-ALSO-HASHED.js"></script>
  </body>
</html>