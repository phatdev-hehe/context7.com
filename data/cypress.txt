TITLE: Type Command Overwrite Example
DESCRIPTION: Example showing how to overwrite the built-in type command to mask sensitive data

LANGUAGE: javascript
CODE:
Cypress.Commands.overwrite('type', (originalFn, element, text, options) => {
  if (options && options.sensitive) {
    options.log = false
    Cypress.log({
      $el: element,
      name: 'type',
      message: '*'.repeat(text.length),
    })
  }
  return originalFn(element, text, options)
})

----------------------------------------

TITLE: Custom Commands for Selecting Elements in Cypress
DESCRIPTION: Defines custom Cypress commands for selecting elements using data-test attributes, improving test readability and maintainability.

LANGUAGE: TypeScript
CODE:
Cypress.Commands.add('getBySel', (selector, ...args) => {
  return cy.get(`[data-test=${selector}]`, ...args)
})

Cypress.Commands.add('getBySelLike', (selector, ...args) => {
  return cy.get(`[data-test*=${selector}]`, ...args)
})

----------------------------------------

TITLE: Parallelizing Cypress Tests in AWS CodeBuild
DESCRIPTION: This configuration demonstrates how to parallelize Cypress tests in AWS CodeBuild using the batch build-matrix strategy. It sets up multiple containers to run tests in parallel with different configurations.

LANGUAGE: yaml
CODE:
batch:
  fast-fail: false
  build-matrix:
    dynamic:
      env:
        variables:
          CY_GROUP_SPEC:
            - 'UI-Chrome|chrome|cypress/tests/ui/*'
            - 'UI-Chrome-Mobile|chrome|cypress/tests/ui/*|viewportWidth=375,viewportHeight=667'
            - 'API|chrome|cypress/tests/api/*'
            - 'UI-Firefox|firefox|cypress/tests/ui/*'
            - 'UI-Firefox-Mobile|firefox|cypress/tests/ui/*|viewportWidth=375,viewportHeight=667'
          WORKERS:
            - 1
            - 2
            - 3
            - 4
            - 5

phases:
  install:
    commands:
      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording
      # https://docs.cypress.io//app/continuous-integration/overview#Git-information
      - export COMMIT_INFO_BRANCH="$(git rev-parse HEAD | xargs git name-rev |
        cut -d' ' -f2 | sed 's/remotes\/origin\///g')"
      - export COMMIT_INFO_MESSAGE="$(git log -1 --pretty=%B)"
      - export COMMIT_INFO_EMAIL="$(git log -1 --pretty=%ae)"
      - export COMMIT_INFO_AUTHOR="$(git log -1 --pretty=%an)"
      - export COMMIT_INFO_SHA="$(git log -1 --pretty=%H)"
      - export COMMIT_INFO_REMOTE="$(git config --get remote.origin.url)"
      - CY_GROUP=$(echo $CY_GROUP_SPEC | cut -d'|' -f1)
      - CY_BROWSER=$(echo $CY_GROUP_SPEC | cut -d'|' -f2)
      - CY_SPEC=$(echo $CY_GROUP_SPEC | cut -d'|' -f3)
      - CY_CONFIG=$(echo $CY_GROUP_SPEC | cut -d'|' -f4)
      - npm ci
  build:
    commands:
      - npm start:ci &
      - npx cypress run --record --parallel --browser $CY_BROWSER --ci-build-id
        $CODEBUILD_INITIATOR --group "$CY_GROUP" --spec "$CY_SPEC" --config
        "$CY_CONFIG"

----------------------------------------

TITLE: Cypress Folder Structure Example
DESCRIPTION: Example of default Cypress folder structure for E2E and Component testing

LANGUAGE: text
CODE:
E2E:
/cypress.config.js
/cypress/fixtures/example.json
/cypress/support/commands.js
/cypress/support/e2e.js

Component:
/cypress.config.js
/cypress/fixtures/example.json
/cypress/support/commands.js
/cypress/support/component.js
/cypress/support/component-index.html

----------------------------------------

TITLE: Using Route Aliases Instead of Arbitrary Waits in Cypress
DESCRIPTION: Demonstrates how to use route aliases to wait for specific network requests instead of using arbitrary time-based waits.

LANGUAGE: JavaScript
CODE:
cy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }]).as('getUsers')
cy.get('[data-testid="fetch-users"]').click()
cy.wait('@getUsers') // <--- wait explicitly for this route to finish
cy.get('table tr').should('have.length', 2)

----------------------------------------

TITLE: Complete Cypress Test with Assertions
DESCRIPTION: Full test example showing URL verification and form interaction with multiple assertions

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('Gets, types and asserts', () => {
    cy.visit('https://example.cypress.io')
    cy.contains('type').click()
    cy.url().should('include', '/commands/actions')
    cy.get('.action-email').type('fake@email.com')
    cy.get('.action-email').should('have.value', 'fake@email.com')
  })
})

----------------------------------------

TITLE: Selecting Elements with Data Attributes in Cypress
DESCRIPTION: Demonstrates how to use data-* attributes to select elements in Cypress tests, which is more resilient to changes in CSS or JS.

LANGUAGE: HTML
CODE:
<button
  id="main"
  class="btn btn-large"
  name="submission"
  role="button"
  data-cy="submit"
>
  Submit
</button>

----------------------------------------

TITLE: Basic Cypress Test Structure
DESCRIPTION: Simple test structure demonstrating the basic syntax of a Cypress test with an assertion

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('Does not do much!', () => {
    expect(true).to.equal(true)
  })
})

----------------------------------------

TITLE: Basic Origin Navigation Test Example
DESCRIPTION: Demonstrates how to properly test navigation between different origins using cy.origin()

LANGUAGE: javascript
CODE:
it('navigates', () => {
  cy.visit('https://example.cypress.io')
  cy.visit('https://docs.cypress.io')
  cy.origin('https://docs.cypress.io', () => {
    cy.get('selector') // yup all good
  })
})

----------------------------------------

TITLE: Optimizing Login with cy.session() in Cypress
DESCRIPTION: Demonstrates how to use cy.session() to cache and reuse login state for improved test performance.

LANGUAGE: javascript
CODE:
Cypress.Commands.add('login', (username, password) => {
  cy.session(
    username,
    () => {
      cy.visit('/login')
      cy.get('input[name=username]').type(username)
      cy.get('input[name=password]').type(`${password}{enter}`, { log: false })
      cy.url().should('include', '/dashboard')
      cy.get('h1').should('contain', username)
    },
    {
      validate: () => {
        cy.getCookie('your-session-cookie').should('exist')
      }
    }
  )
})

----------------------------------------

TITLE: Basic Cypress Test Structure
DESCRIPTION: Demonstration of basic test structure in Cypress using describe and it blocks with math function examples

LANGUAGE: javascript
CODE:
describe('Unit test our math functions', () => {
  context('math', () => {
    it('can add numbers', () => {
      expect(add(1, 2)).to.eq(3)
    })

    it('can subtract numbers', () => {
      expect(subtract(5, 12)).to.eq(-7)
    })

    specify('can divide numbers', () => {
      expect(divide(27, 9)).to.eq(3)
    })

    specify('can multiply numbers', () => {
      expect(multiply(5, 4)).to.eq(20)
    })
  })
})

----------------------------------------

TITLE: Parallel Test Execution Configuration in CircleCI
DESCRIPTION: CircleCI configuration for running Cypress tests across 4 machines in parallel. Includes parallel test execution flags and recording configuration.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  build:
    jobs:
      - cypress/run:
          start-command: 'npm run start'
          cypress-command: 'npx cypress run --parallel --record --group all tests'
          parallelism: 4

----------------------------------------

TITLE: Auth0 Programmatic Login Implementation
DESCRIPTION: Custom Cypress command for programmatic Auth0 login using the OAuth token endpoint

LANGUAGE: typescript
CODE:
Cypress.Commands.add(
  'loginByAuth0Api',
  (username: string, password: string) => {
    cy.log(`Logging in as ${username}`)
    const client_id = Cypress.env('auth0_client_id')
    const client_secret = Cypress.env('auth0_client_secret')
    const audience = Cypress.env('auth0_audience')
    const scope = Cypress.env('auth0_scope')

    cy.request({
      method: 'POST',
      url: `https://${Cypress.env('auth0_domain')}/oauth/token`,
      body: {
        grant_type: 'password',
        username,
        password,
        audience,
        scope,
        client_id,
        client_secret,
      },
    })

----------------------------------------

TITLE: Dynamic Request Handling
DESCRIPTION: Examples showing dynamic request handling with route handlers for modifying requests and responses.

LANGUAGE: javascript
CODE:
// spying, dynamic stubbing, request modification, etc.
cy.intercept(url, routeHandler)
cy.intercept(method, url, routeHandler)
cy.intercept(routeMatcher, routeHandler)
cy.intercept(url, routeMatcher, routeHandler)

----------------------------------------

TITLE: Basic Asynchronous Pattern in Cypress
DESCRIPTION: Demonstrates the incorrect and correct ways to handle asynchronous operations in Cypress tests using .then() callbacks.

LANGUAGE: javascript
CODE:
// this won't work the way you think it does
const button = cy.get('button')
const form = cy.get('form')

button.click()

----------------------------------------

TITLE: Basic AWS CodeBuild Configuration for Cypress Tests
DESCRIPTION: This YAML configuration sets up a basic CI job in AWS CodeBuild to run Cypress tests within the Electron browser. It installs dependencies, verifies the Cypress installation, and runs the tests.

LANGUAGE: yaml
CODE:
version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording
      # https://docs.cypress.io/app/continuous-integration/overview#Git-information
      - export COMMIT_INFO_BRANCH="$(git rev-parse HEAD | xargs git name-rev |
        cut -d' ' -f2 | sed 's/remotes\/origin\///g')"
      - export COMMIT_INFO_MESSAGE="$(git log -1 --pretty=%B)"
      - export COMMIT_INFO_EMAIL="$(git log -1 --pretty=%ae)"
      - export COMMIT_INFO_AUTHOR="$(git log -1 --pretty=%an)"
      - export COMMIT_INFO_SHA="$(git log -1 --pretty=%H)"
      - export COMMIT_INFO_REMOTE="$(git config --get remote.origin.url)"
      - npm ci
  pre_build:
    commands:
      - npm run cy:verify
      - npm run cy:info
  build:
    commands:
      - npm run start:ci &
      - npx cypress run --record

----------------------------------------

TITLE: Resetting Database State in Cypress Tests
DESCRIPTION: Shows how to reset and re-seed a database before each test using a custom Cypress task, ensuring a clean slate for each test.

LANGUAGE: TypeScript
CODE:
beforeEach(function () {
  cy.task('db:seed')
  // ...
})

LANGUAGE: TypeScript
CODE:
on('task', {
  async 'db:seed'() {
    // Send request to backend API to re-seed database with test data
    const { data } = await axios.post(`${testDataApiEndpoint}/seed`)
    return data
  },
  //...
})

----------------------------------------

TITLE: GraphQL Test Utilities Implementation
DESCRIPTION: Utility functions for matching and aliasing GraphQL operations in tests, including helpers for both queries and mutations.

LANGUAGE: javascript
CODE:
// utils/graphql-test-utils.js

// Utility to match GraphQL mutation based on the operation name
export const hasOperationName = (req, operationName) => {
  const { body } = req
  return (
    Object.prototype.hasOwnProperty.call(body, 'operationName') &&
    body.operationName === operationName
  )
}

// Alias query if operationName matches
export const aliasQuery = (req, operationName) => {
  if (hasOperationName(req, operationName)) {
    req.alias = `gql${operationName}Query`
  }
}

// Alias mutation if operationName matches
export const aliasMutation = (req, operationName) => {
  if (hasOperationName(req, operationName)) {
    req.alias = `gql${operationName}Mutation`
  }
}

----------------------------------------

TITLE: Writing an End-to-End Test with Cypress
DESCRIPTION: Demonstrates how to write a basic end-to-end test in Cypress to visit a page, interact with elements, and make assertions.

LANGUAGE: javascript
CODE:
it('adds todos', () => {
  cy.visit('https://example.cypress.io/')
  cy.get('[data-cy="new-todo"]').type('write tests{enter}')
  // confirm the application is showing one item
  cy.get('[data-cy="todos"]').should('have.length', 1)
})

----------------------------------------

TITLE: Adding TypeScript Typings for cy.mount() Command in Angular
DESCRIPTION: Provides TypeScript type definitions for the custom cy.mount() command in Angular. This ensures proper type-checking and autocompletion in Angular TypeScript projects.

LANGUAGE: typescript
CODE:
import { mount } from 'cypress/angular'

declare global {
  namespace Cypress {
    interface Chainable {
      mount: typeof mount
    }
  }
}

----------------------------------------

TITLE: Testing React Components with Cypress
DESCRIPTION: Example demonstrating proper way to test React components with cypress/react mounting library and stub assertions.

LANGUAGE: javascript
CODE:
it('calls the click prop', () => {
  const onClick = cy.stub().as('clicker')

  cy.mount(<Clicker click={onClick} />)
  // Good practice 💡: Don't chain anything off of commands
  cy.get('button').click()
  cy.get('button').click()

  // Good practice 💡: Reference the stub with an alias
  cy.get('@clicker').should('have.been.calledTwice')
})

----------------------------------------

TITLE: Programmatic Login Command for Amazon Cognito (Amplify v6)
DESCRIPTION: Create a custom Cypress command to perform programmatic login to Amazon Cognito using Amplify v6 and set localStorage items.

LANGUAGE: tsx
CODE:
import { Amplify } from 'aws-amplify'
import { fetchAuthSession, signIn } from 'aws-amplify/auth'

Amplify.configure(Cypress.env('awsConfig'))
const fetchJwts = async (username: string, password: string) => {
  const options = { authFlowType: 'USER_PASSWORD_AUTH' as const }
  await signIn({ username, password, options })
  const authSession = await fetchAuthSession()
  const tokens = authSession.tokens!
  const accessToken = tokens.accessToken
  const accessTokenPayload = accessToken.payload
  return {
    idToken: tokens.idToken!.toString(),
    accessToken: accessToken.toString(),
    clientId: accessTokenPayload.client_id as string,
    accessTokenSub: accessTokenPayload.sub!,
  }
}
type JwtResponse = Awaited<ReturnType<typeof fetchJwts>>

// Amazon Cognito
Cypress.Commands.add(
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  'loginByCognitoApi',
  (username: string, password: string) => {
    const log = Cypress.log({
      displayName: 'COGNITO LOGIN',
      message: [`🔐 Authenticating | ${username}`],
      autoEnd: false,
    })

    log.snapshot('before')

    cy.wrap(fetchJwts(username, password), { log: false }).then(
      (unknownJwts) => {
        const { idToken, accessToken, clientId, accessTokenSub } =
          unknownJwts as JwtResponse

        const keyPrefix = `CognitoIdentityServiceProvider.${clientId}`
        const keyPrefixWithUsername = `${keyPrefix}.${accessTokenSub}`

        const ls = window.localStorage
        ls.setItem(`${keyPrefixWithUsername}.idToken`, idToken)
        ls.setItem(`${keyPrefixWithUsername}.accessToken`, accessToken)
        ls.setItem(`${keyPrefix}.LastAuthUser`, accessTokenSub)

        log.snapshot('after')
        log.end()
      }
    )
  }
)

----------------------------------------

TITLE: Simple GET Request Example
DESCRIPTION: Basic example of making a GET request to an endpoint

LANGUAGE: javascript
CODE:
cy.request('http://dev.local/seed')

----------------------------------------

TITLE: Implementing Sitemap-Based Accessibility Testing with Cypress
DESCRIPTION: Script that performs automated accessibility testing by fetching URLs from a sitemap.xml file and running accessibility checks on each page. The test visits each URL, scrolls to the footer, and generates accessibility reports for dynamic content analysis.

LANGUAGE: javascript
CODE:
describe('Accessibility Scan', () => {
  it('Checks accessibility with the sitemap.xml', () => {
    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {
      const xmlString = response.body
      const parser = new DOMParser()
      const xmlDoc = parser.parseFromString(xmlString, 'application/xml')
      const URLs = Array.from(xmlDoc.querySelectorAll('loc')).map(
        (loc) => loc.textContent
      )
      Cypress._.each(URLs, (URL) => {
        cy.visit(URL)
        cy.contains('<YOUR_FOOTER_CONTENT>').scrollIntoView()
      })
    })
  })
})

----------------------------------------

TITLE: Form Submission with Cross-Origin Redirect
DESCRIPTION: Shows how to handle form submissions that redirect to a different origin using cy.origin()

LANGUAGE: html
CODE:
<html>
  <form method="POST" action="/submit">
    <input type="text" name="email" />
    <input type="submit" value="Submit" />
  </form>
</html>

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:8080')
cy.get('form').submit() // submit the form!
cy.origin('cypress.io', () => {
  cy.url().should('contain', 'cypress.io')
})

----------------------------------------

TITLE: Basic cy.intercept Syntax
DESCRIPTION: Basic request spying syntax examples showing different ways to intercept requests with url and method patterns.

LANGUAGE: javascript
CODE:
// spying only
cy.intercept(url)
cy.intercept(method, url)
cy.intercept(routeMatcher)

----------------------------------------

TITLE: Booting a Server Before Cypress Tests
DESCRIPTION: Example of using the wait-on module to wait for a server to boot before running Cypress tests.

LANGUAGE: shell
CODE:
npm start & wait-on http://localhost:8080
cypress run

----------------------------------------

TITLE: Using Fixtures for Response Stubbing
DESCRIPTION: Shows how to use fixture data to stub API responses for GET requests to /activities/* endpoint.

LANGUAGE: javascript
CODE:
// we set the response to be the activites.json fixture
cy.intercept('GET', '/activities/*', { fixture: 'activities.json' })

----------------------------------------

TITLE: Mounting React Component with Props
DESCRIPTION: Shows how to pass props to a React component during mounting and test the resulting state.

LANGUAGE: typescript
CODE:
it('mounts', () => {
  cy.mount(<Stepper initial={100} />)
  //Stepper should have initial count of 100
  cy.get('[data-cy=counter]').should('have.text', '100')
})

----------------------------------------

TITLE: Testing Redux Connected Components
DESCRIPTION: Demonstrates testing a Redux-connected component with pre-configured store state.

LANGUAGE: jsx
CODE:
import { getStore } from '../redux/store'
import { setUser } from '../redux/userSlice'
import { UserProfile } from './UserProfile'

it('User profile should display user name', () => {
  const user = { name: 'test person' }

  const store = getStore()

  store.dispatch(setUser(user))

  cy.mount(<UserProfile />, { reduxStore: store })

  cy.get('div.name').should('have.text', user.name)
})

----------------------------------------

TITLE: Combining Multiple Tests into One in Cypress
DESCRIPTION: Shows how to combine multiple small tests into a single, more comprehensive test to avoid coupling and improve test independence.

LANGUAGE: JavaScript
CODE:
describe('my form', () => {
  it('can submit a valid form', () => {
    cy.visit('/users/new')

    cy.log('filling out first name')
    cy.get('[data-testid="first-name"]').type('Johnny')

    cy.log('filling out last name')
    cy.get('[data-testid="last-name"]').type('Appleseed')

    cy.log('submitting form')
    cy.get('form').submit()
  })
})

----------------------------------------

TITLE: GitLab CI Configuration for Parallel Cypress Tests
DESCRIPTION: GitLab CI configuration that sets up parallel execution of Cypress tests using Cypress Cloud. It includes an install job and a worker job for running tests in parallel.

LANGUAGE: yaml
CODE:
stages:
  - build
  - test

variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/*
    - cache/Cypress
    - node_modules
    - build

install:
  image: cypress/browsers:22.12.0
  stage: build
  script:
    - npm ci

ui-chrome-tests:
  image: cypress/browsers:22.12.0
  stage: test
  parallel: 5
  script:
    # install dependencies
    - npm ci
    # start the server in the background
    - npm start &
    # run Cypress tests in parallel
    - npx cypress run --record --parallel --browser chrome --group UI-Chrome

----------------------------------------

TITLE: Creating Custom Login Command in Cypress
DESCRIPTION: Shows how to create a custom Cypress command for login to reuse across tests.

LANGUAGE: javascript
CODE:
Cypress.Commands.add('login', (username, password) => {
  cy.visit('/login')
  cy.get('input[name=username]').type(username)
  cy.get('input[name=password]').type(`${password}{enter}`, { log: false })
  cy.url().should('include', '/dashboard')
  cy.getCookie('your-session-cookie').should('exist')
  cy.get('h1').should('contain', username)
})

----------------------------------------

TITLE: Correct Usage Examples
DESCRIPTION: Valid examples showing proper usage patterns for request spying, response stubbing and dynamic request handling.

LANGUAGE: javascript
CODE:
// spying
cy.intercept('/users/**')
cy.intercept('GET', '/users*')
cy.intercept({
  method: 'GET',
  url: '/users*',
  hostname: 'localhost',
})

// spying and response stubbing
cy.intercept('POST', '/users*', {
  statusCode: 201,
  body: {
    name: 'Peter Pan',
  },
})

// spying, dynamic stubbing, request modification, etc.
cy.intercept('/users*', { hostname: 'localhost' }, (req) => {
  /* do something with request and/or response */
})

----------------------------------------

TITLE: Defining Route Interception in Cypress
DESCRIPTION: Example showing how to intercept GET requests to /users/* endpoint and stub the response with an empty array while assigning an alias.

LANGUAGE: javascript
CODE:
cy.intercept(
  {
    method: 'GET', // Route all GET requests
    url: '/users/*', // that have a URL that matches '/users/*'
  },
  [] // and force the response to be: []
).as('getUsers') // and assign an alias

----------------------------------------

TITLE: Configuring tsconfig.json for Cypress
DESCRIPTION: Recommended TypeScript configuration for Cypress projects, including compiler options and file inclusion.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["es5", "dom"],
    "types": ["cypress", "node"]
  },
  "include": ["**/*.ts"]
}

----------------------------------------

TITLE: Testing Login Flow in Cypress
DESCRIPTION: Demonstrates how to test a login flow including seeding a user and asserting successful authentication.

LANGUAGE: javascript
CODE:
describe('The Login Page', () => {
  beforeEach(() => {
    cy.exec('npm run db:reset && npm run db:seed')
    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })
      .its('body')
      .as('currentUser')
  })

  it('sets auth cookie when logging in via form submission', function () {
    const { username, password } = this.currentUser
    cy.visit('/login')
    cy.get('input[name=username]').type(username)
    cy.get('input[name=password]').type(`${password}{enter}`)
    cy.url().should('include', '/dashboard')
    cy.getCookie('your-session-cookie').should('exist')
    cy.get('h1').should('contain', 'jane.lane')
  })
})

----------------------------------------

TITLE: Using Cypress Testing Library for Accessibility-Friendly Locators
DESCRIPTION: Demonstrates the use of Cypress Testing Library to locate elements using accessibility-friendly methods, such as finding an image by its role and accessible name.

LANGUAGE: javascript
CODE:
// use the recommended ByRole Testing Library locator
cy.findByRole('img', { name: 'Cypress Logo' }).should('be.visible')

----------------------------------------

TITLE: Basic Custom Command Syntax
DESCRIPTION: Basic syntax for adding and overwriting Cypress commands using Cypress.Commands API

LANGUAGE: javascript
CODE:
Cypress.Commands.add(name, callbackFn)
Cypress.Commands.add(name, options, callbackFn)
Cypress.Commands.addAll(callbackObj)
Cypress.Commands.addAll(options, callbackObj)
Cypress.Commands.overwrite(name, callbackFn)

----------------------------------------

TITLE: Configuring Cypress for React with Webpack
DESCRIPTION: Configuration setup for using Cypress component testing with React and Webpack bundler. Supports custom webpack configuration through direct object or async function.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'react',
      bundler: 'webpack',
      // optionally pass in webpack config
      webpackConfig,
      // or a function - the result is merged with any
      // webpack.config that is found
      webpackConfig: async () => {
        // ... do things ...
        const modifiedConfig = await injectCustomConfig(baseConfig)
        return modifiedConfig
      },
    },
  },
}

----------------------------------------

TITLE: Implementing Azure AD Login Command in Cypress
DESCRIPTION: TypeScript implementation of a custom Cypress command for handling Azure AD authentication using cy.origin() to manage cross-origin navigation.

LANGUAGE: typescript
CODE:
function loginViaAAD(username: string, password: string) {
  cy.visit('http://localhost:3000/')
  cy.get('button#signIn').click()

  cy.origin(
    'login.microsoftonline.com',
    {
      args: {
        username,
      },
    },
    ({ username }) => {
      cy.get('input[type="email"]').type(username, {
        log: false,
      })
      cy.get('input[type="submit"]').click()
    }
  )

  cy.origin(
    'login.live.com',
    {
      args: {
        password,
      },
    },
    ({ password }) => {
      cy.get('input[type="password"]').type(password, {
        log: false,
      })
      cy.get('input[type="submit"]').click()
      cy.get('#idBtn_Back').click()
    }
  )

  cy.url().should('equal', 'http://localhost:3000/')
  cy.get('#welcome-div').should(
    'contain',
    `Welcome ${Cypress.env('aad_username')}!`
  )
}

----------------------------------------

TITLE: Basic Component Test Setup - React
DESCRIPTION: Basic test structure for mounting and testing a React component in Cypress

LANGUAGE: jsx
CODE:
import React from 'react'
import Stepper from './Stepper'

describe('<Stepper />', () => {
  it('mounts', () => {
    // see: https://on.cypress.io/mounting-react
    cy.mount(<Stepper />)
  })
})

----------------------------------------

TITLE: Using Options with cy.visit() in Cypress
DESCRIPTION: Demonstrates how to use various options with cy.visit(), including changing timeout, adding basic auth headers, and providing callback functions.

LANGUAGE: javascript
CODE:
// Wait 30 seconds for page 'load' event
cy.visit('/index.html', { timeout: 30000 })

// Add basic auth headers
cy.visit('https://example.cypress.io/', {
  auth: {
    username: 'wile',
    password: 'coyote',
  },
})

// Provide an onBeforeLoad callback
cy.visit('http://localhost:3000/#dashboard', {
  onBeforeLoad: (contentWindow) => {
    // contentWindow is the remote page's window object
  },
})

// Provide an onLoad callback
cy.visit('http://localhost:3000/#/users', {
  onLoad: (contentWindow) => {
    // contentWindow is the remote page's window object
    if (contentWindow.angular) {
      // do something
    }
  },
})

----------------------------------------

TITLE: Basic Cypress Test Setup in Bitbucket Pipelines YAML
DESCRIPTION: Configures a basic Cypress test setup using a Cypress Docker image in Bitbucket Pipelines. It installs dependencies, starts the server, and runs Cypress tests in Firefox.

LANGUAGE: yaml
CODE:
image: cypress/browsers:22.12.0

pipelines:
  default:
    - step:
        script:
          # install dependencies
          - npm ci
          # start the server in the background
          - npm run start &
          # run Cypress tests in Firefox
          - npx cypress run --browser firefox

----------------------------------------

TITLE: Custom Mount Command for React Router
DESCRIPTION: Configures a custom mount command to support React Router components with MemoryRouter integration.

LANGUAGE: jsx
CODE:
import { mount } from 'cypress/react'
import { MemoryRouter } from 'react-router-dom'

Cypress.Commands.add('mount', (component, options = {}) => {
  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options

  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>

  return mount(wrapped, mountOptions)
})

LANGUAGE: typescript
CODE:
import { MountOptions, MountReturn } from 'cypress/react'
import { MemoryRouterProps } from 'react-router-dom'

declare global {
  namespace Cypress {
    interface Chainable {
      mount(
        component: React.ReactNode,
        options?: MountOptions & { routerProps?: MemoryRouterProps }
      ): Cypress.Chainable<MountReturn>
    }
  }
}

----------------------------------------

TITLE: Using beforeEach Hook for Shared Test Setup in Cypress
DESCRIPTION: Demonstrates how to use beforeEach hooks to set up shared state between tests, improving test independence and reducing duplication.

LANGUAGE: JavaScript
CODE:
describe('my form', () => {
  beforeEach(() => {
    cy.visit('/users/new')
    cy.get('[data-testid="first-name"]').type('Johnny')
    cy.get('[data-testid="last-name"]').type('Appleseed')
  })

  it('displays form validation', () => {
    cy.get('[data-testid="first-name"]').clear()
    cy.get('form').submit()
    cy.get('[data-testid="errors"]').should('contain', 'First name is required')
  })

  it('can submit a valid form', () => {
    cy.get('form').submit()
  })
})

----------------------------------------

TITLE: Running Cypress Tests in Parallel
DESCRIPTION: Command to run Cypress tests in parallel mode with recording enabled. Requires a record key and the --parallel flag.

LANGUAGE: shell
CODE:
cypress run --record --key=abc123 --parallel

----------------------------------------

TITLE: Creating a Login Custom Command with cy.origin() and cy.session()
DESCRIPTION: Demonstrates how to create a custom login command using cy.origin() and cy.session() for efficient cross-origin authentication with session caching.

LANGUAGE: javascript
CODE:
Cypress.Commands.add('login', (username, password) => {
  const args = { username, password }
  cy.session(
    args,
    () => {
      cy.origin('cypress.io', { args }, ({ username, password }) => {
        cy.visit('/login')
        cy.contains('Username').find('input').type(username)
        cy.contains('Password').find('input').type(password)
        cy.get('button').contains('Login').click()
      })
      cy.url().should('contain', '/home')
    },
    {
      validate() {
        cy.request('/api/user').its('status').should('eq', 200)
      },
    }
  )
})

----------------------------------------

TITLE: React Component Mount Example
DESCRIPTION: Demonstrates mounting a React component and testing it with Cypress commands. Shows how to interact with elements and make assertions.

LANGUAGE: jsx
CODE:
import { mount } from '@cypress/react'
import { Stepper } from './Stepper'

it('mounts', () => {
  mount(<StepperComponent />)
  cy.get('[data-cy=increment]').click()
  cy.get('[data-cy=counter]').should('have.text', '1')
}

----------------------------------------

TITLE: Response Stubbing with cy.intercept
DESCRIPTION: Examples of intercepting requests with static response stubs.

LANGUAGE: javascript
CODE:
// spying and response stubbing
cy.intercept(url, staticResponse)
cy.intercept(method, url, staticResponse)
cy.intercept(routeMatcher, staticResponse)
cy.intercept(url, routeMatcher, staticResponse)

----------------------------------------

TITLE: Basic Fixture Usage in Cypress
DESCRIPTION: Examples of loading fixture data using basic cy.fixture() syntax with different parameter combinations.

LANGUAGE: javascript
CODE:
cy.fixture(filePath)
cy.fixture(filePath, encoding)
cy.fixture(filePath, options)
cy.fixture(filePath, encoding, options)

----------------------------------------

TITLE: Controlling Time with cy.clock() in Cypress
DESCRIPTION: Illustrates how to use cy.clock() to control Date, setTimeout, and setInterval in tests, including advancing time with cy.tick().

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('http://localhost:3333')
cy.get('#search').type('Acme Company')
cy.tick(1000)

----------------------------------------

TITLE: Implementing cy.mount() Command for React in JavaScript
DESCRIPTION: Creates a custom Cypress command for mounting React components. This allows for wrapping components in providers or adding common setup logic.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/react'

Cypress.Commands.add('mount', (component, options) => {
  // Wrap any parent components needed
  // ie: return mount(<MyProvider>{component}</MyProvider>, options)
  return mount(component, options)
})

----------------------------------------

TITLE: Basic CircleCI Configuration for Cypress Testing
DESCRIPTION: Basic setup of CircleCI configuration using Cypress Orb to install, cache and run Cypress tests. Uses version 3 of the orb and includes a custom start command.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  build:
    jobs:
      - cypress/run:
          start-command: 'npm run start'

----------------------------------------

TITLE: Basic Cypress GitHub Action Setup
DESCRIPTION: Basic CI setup using Cypress GitHub Action to run tests in Electron browser. Configuration placed in .github/workflows/main.yml.

LANGUAGE: yaml
CODE:
name: Cypress Tests

on: push

jobs:
  cypress-run:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm start

----------------------------------------

TITLE: Auth0 UI Login Command Implementation
DESCRIPTION: Custom Cypress command implementation for Auth0 UI-based login using cy.origin() and cy.session()

LANGUAGE: typescript
CODE:
function loginViaAuth0Ui(username: string, password: string) {
  cy.visit('/')

  cy.origin(
    Cypress.env('auth0_domain'),
    { args: { username, password } },
    ({ username, password }) => {
      cy.get('input#username').type(username)
      cy.get('input#password').type(password, { log: false })
      cy.contains('button[value=default]', 'Continue').click()
    }
  )

  cy.url().should('equal', 'http://localhost:3000/')
}

----------------------------------------

TITLE: Closure Pattern for Command Access
DESCRIPTION: Shows how to use closures to access command results and maintain references to previous operations.

LANGUAGE: javascript
CODE:
cy.get('button').then(($btn) => {
  // store the button's text
  const txt = $btn.text()

  // submit a form
  cy.get('form').submit()

  // compare the two buttons' text
  // and make sure they are different
  cy.get('button').should(($btn2) => {
    expect($btn2.text()).not.to.eq(txt)
  })
})

----------------------------------------

TITLE: Angular Signal Component Example
DESCRIPTION: Example of an Angular component using input and model signals

LANGUAGE: typescript
CODE:
import { Component, input, model } from '@angular/core'

@Component({
  selector: 'test-component',
  templateUrl: './test-component.component.html',
  standalone: true,
})
export class TestComponent {
  title = input.required<string>()
  count = model<number>(1)
}

LANGUAGE: html
CODE:
<p data-cy="test-component-title-display">{{ title() }}</p>
<p data-cy="test-component-count-display">{{ count() }}</p>
<button data-cy="test-component-count-incr" (click)="count.set(count() + 1)">
  Increase
</button>
<button data-cy="test-component-count-decr" (click)="count.set(count() - 1)">
  Decrease
</button>

----------------------------------------

TITLE: Seeding Data in Cypress Tests
DESCRIPTION: Illustrates how to seed data before running tests using cy.exec() and cy.request() commands.

LANGUAGE: javascript
CODE:
describe('The Home Page', () => {
  beforeEach(() => {
    // reset and seed the database prior to every test
    cy.exec('npm run db:reset && npm run db:seed')

    // seed a post in the DB that we control from our tests
    cy.request('POST', '/test/seed/post', {
      title: 'First Post',
      authorId: 1,
      body: '...'
    })

    // seed a user in the DB that we can control from our tests
    cy.request('POST', '/test/seed/user', { name: 'Jane' })
      .its('body')
      .as('currentUser')
  })

  it('successfully loads', () => {
    cy.visit('/')
  })
})

----------------------------------------

TITLE: Defining Click Command Syntax in JavaScript
DESCRIPTION: Shows the various ways to call the click command in Cypress, including with options, position, and coordinates.

LANGUAGE: javascript
CODE:
.click()
.click(options)
.click(position)
.click(position, options)
.click(x, y)
.click(x, y, options)

----------------------------------------

TITLE: Accessibility Testing with Cypress
DESCRIPTION: Illustrates how to write a Cypress test to check for accessibility attributes, such as verifying the correct alt text for an image.

LANGUAGE: javascript
CODE:
it('adds todos', () => {
  cy.visit('https://example.cypress.io/')
  cy.get('img#logo')
    // Assert that an image has the correct alt text
    .should('have.attr', 'alt', 'Cypress Logo')
})

----------------------------------------

TITLE: Testing Event Handlers in Svelte Component with Cypress
DESCRIPTION: Demonstrates how to test emitted events from a Svelte component. It uses a Cypress spy to validate that the onChange callback is called with the expected value when incrementing the stepper.

LANGUAGE: javascript
CODE:
it('clicking + fires a change event with the incremented value', () => {
  const onChangeSpy = cy.spy().as('onChangeSpy')
  cy.mount(Stepper, { props: { onChange: onChangeSpy } })
  cy.get('[data-cy=increment]').click()
  cy.get('@onChangeSpy').should('have.been.calledWith', 1)
})

----------------------------------------

TITLE: Network Handling Example
DESCRIPTION: Example showing how to handle network requests and responses using Cypress intercept API.

LANGUAGE: javascript
CODE:
it('should display a warning when the third-party API is down', () => {
  cy.intercept(
    'GET',
    'https://api.openweathermap.org/data/2.5/weather?q=Atlanta',
    { statusCode: 500 }
  )
  cy.get('.weather-forecast').contains('Weather Forecast Unavailable')
})

----------------------------------------

TITLE: Defining Cypress Wait Command Syntax
DESCRIPTION: Shows the various ways to use the cy.wait() command, including waiting for a specific time, an aliased resource, or multiple aliases.

LANGUAGE: javascript
CODE:
cy.wait(time)
cy.wait(alias)
cy.wait(aliases)
cy.wait(time, options)
cy.wait(alias, options)
cy.wait(aliases, options)

----------------------------------------

TITLE: Caching Dependencies in Bitbucket Pipelines YAML
DESCRIPTION: Demonstrates how to cache node_modules and npm cache across builds in Bitbucket Pipelines. It also shows how to store generated images and videos as artifacts.

LANGUAGE: yaml
CODE:
image: cypress/browsers:22.12.0

pipelines:
  default:
    - step:
        caches:
          - node
        script:
          # install dependencies
          - npm ci
          # start the server in the background
          - npm run start &
          # run Cypress tests in Firefox
          - npx cypress run --browser firefox
        artifacts:
          # store any generates images and videos as artifacts
          - cypress/screenshots/**
          - cypress/videos/**

----------------------------------------

TITLE: Installing Cypress in CI
DESCRIPTION: Commands to install Cypress in a CI environment using npm, yarn, or pnpm.

LANGUAGE: shell
CODE:
npm install cypress --save-dev

LANGUAGE: shell
CODE:
yarn add cypress --dev

LANGUAGE: shell
CODE:
pnpm add cypress --save-dev

----------------------------------------

TITLE: Cypress Test Hooks Implementation
DESCRIPTION: Example showing how to use before, beforeEach, afterEach and after hooks in Cypress tests

LANGUAGE: javascript
CODE:
before(() => {
  // root-level hook
  // runs once before all tests
})

beforeEach(() => {
  // root-level hook
  // runs before every test block
})

afterEach(() => {
  // runs after each test block
})

after(() => {
  // runs once all tests are done
})

----------------------------------------

TITLE: Correct Usage Example
DESCRIPTION: Example showing correct usage of get() to retrieve list items within a list element.

LANGUAGE: javascript
CODE:
cy.get('.list > li') // Yield the <li>'s in .list

----------------------------------------

TITLE: Demonstrating Unstable DOM Testing in JavaScript
DESCRIPTION: Example showing why testing unstable DOM elements can lead to non-deterministic results due to random timing of class additions.

LANGUAGE: javascript
CODE:
const random = Math.random() * 100 // random ms of time
const btn = document.createElement('button')

document.body.appendChild(btn)

setTimeout(() => {
  // add the class active after a random amount of time
  btn.setAttribute('class', 'active')
}, random)

LANGUAGE: javascript
CODE:
it('does something different based on the class of the button', () => {
  // RERUN THIS TEST OVER AND OVER AGAIN
  // AND IT WILL SOMETIMES BE TRUE, AND
  // SOMETIMES BE FALSE.

  cy.get('button').then(($btn) => {
    if ($btn.hasClass('active')) {
      // do something if it's active
    } else {
      // do something else
    }
  })
})

----------------------------------------

TITLE: Assertions with Stubs and Spies in Cypress
DESCRIPTION: Shows various assertions that can be made on stubs and spies, including checking call counts, arguments, return values, and thrown errors.

LANGUAGE: javascript
CODE:
const user = {
  getName: (arg) => {
    return arg
  },

  updateEmail: (arg) => {
    return arg
  },

  fail: () => {
    throw new Error('fail whale')
  },
}

// force user.getName() to return "Jane"
cy.stub(user, 'getName').returns('Jane Lane')

// spy on updateEmail but do not change its behavior
cy.spy(user, 'updateEmail')

// spy on fail but do not change its behavior
cy.spy(user, 'fail')

// invoke getName
const name = user.getName(123)

// invoke updateEmail
const email = user.updateEmail('jane@devs.com')

try {
  // invoke fail
  user.fail()
} catch (e) {}

expect(name).to.eq('Jane Lane') // true
expect(user.getName).to.be.calledOnce // true
expect(user.getName).not.to.be.calledTwice // true
expect(user.getName).to.be.calledWith(123)
expect(user.getName).to.be.calledWithExactly(123) // true
expect(user.getName).to.be.calledOn(user) // true

expect(email).to.eq('jane@devs.com') // true
expect(user.updateEmail).to.be.calledWith('jane@devs.com') // true
expect(user.updateEmail).to.have.returned('jane@devs.com') // true

expect(user.fail).to.have.thrown('Error') // true

----------------------------------------

TITLE: Custom Login Command with Session
DESCRIPTION: Examples showing how to update existing login custom commands to use cy.session() for caching

LANGUAGE: javascript
CODE:
Cypress.Commands.add('login', (username, password) => {
  cy.session(
    [username, password],
    () => {
      cy.visit('/login')
      cy.get('[data-test=name]').type(username)
      cy.get('[data-test=password]').type(password)
      cy.get('form').contains('Log In').click()
      cy.url().should('contain', '/login-successful')
    },
    {
      validate() {
        cy.request('/whoami').its('status').should('eq', 200)
      },
    }
  )
})

----------------------------------------

TITLE: Visiting a Page in Cypress
DESCRIPTION: Test demonstrating how to visit a webpage using Cypress cy.visit() command

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('Visits the Kitchen Sink', () => {
    cy.visit('https://example.cypress.io')
  })
})

----------------------------------------

TITLE: Configuring AWS Amplify v6 for Authentication
DESCRIPTION: Configure the AWS Amplify v6 library with Amazon Cognito credentials and perform user sign-in.

LANGUAGE: tsx
CODE:
import { Amplify } from "aws-amplify";
import { fetchAuthSession, signIn } from "aws-amplify/auth";

Amplify.configure({
  Auth: {
    Cognito: {
      userPoolId: "XX-XXXX-X_XXXXXXXXX",
      userPoolClientId: "XXXXXXXXXXXXXXXXXXXXXXXXX",
      // OR:
      identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID
    },
  },
});
signIn({ username, password, { authFlowType: "USER_PASSWORD_AUTH" } })
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  .then((_signInOutput) => fetchAuthSession())
  .then((authSession) => console.log(authSession))
  .catch((err) => console.log(err));

----------------------------------------

TITLE: Using Promises with Cypress .then() command
DESCRIPTION: Demonstrates how Cypress waits for Promises to resolve before continuing, using examples with Q, bluebird, and jQuery deferred.

LANGUAGE: javascript
CODE:
cy.get('button')
  .click()
  .then(($button) => {
    const p = Q.defer()

    setTimeout(() => {
      p.resolve()
    }, 1000)

    return p.promise
  })

LANGUAGE: javascript
CODE:
cy.get('button')
  .click()
  .then(($button) => {
    return Promise.delay(1000)
  })

LANGUAGE: javascript
CODE:
cy.get('button')
  .click()
  .then(($button) => {
    const df = $.Deferred()

    setTimeout(() => {
      df.resolve()
    }, 1000)

    return df
  })

----------------------------------------

TITLE: Custom Mount Command for Redux Integration
DESCRIPTION: Implements a custom mount command to support Redux store integration in component tests.

LANGUAGE: jsx
CODE:
import { mount } from 'cypress/react'
import { Provider } from 'react-redux'
import { getStore } from '../../src/store'

Cypress.Commands.add('mount', (component, options = {}) => {
  const { reduxStore = getStore(), ...mountOptions } = options

  const wrapped = <Provider store={reduxStore}>{component}</Provider>

  return mount(wrapped, mountOptions)
})

LANGUAGE: typescript
CODE:
import { MountOptions, MountReturn } from 'cypress/react'
import { EnhancedStore } from '@reduxjs/toolkit'
import { RootState } from './src/StoreState'

declare global {
  namespace Cypress {
    interface Chainable {
      mount(
        component: React.ReactNode,
        options?: MountOptions & { reduxStore?: EnhancedStore<RootState> }
      ): Cypress.Chainable<MountReturn>
    }
  }
}

----------------------------------------

TITLE: GitLab CI Configuration with Caching and Artifacts
DESCRIPTION: GitLab CI configuration that implements caching for dependencies and saves test artifacts. It demonstrates how to optimize CI performance and preserve test results.

LANGUAGE: yaml
CODE:
stages:
  - test

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

test:
  image: cypress/browsers:22.12.0
  stage: test
  script:
    # install dependencies
    - npm ci
    # start the server in the background
    - npm start &
    # run Cypress tests
    - npx cypress run --browser firefox
  artifacts:
    when: always
    paths:
      - cypress/videos/**/*.mp4
      - cypress/screenshots/**/*.png
    expire_in: 1 day

----------------------------------------

TITLE: Enhanced Azure AD Login Command with Session Management
DESCRIPTION: TypeScript implementation of the login command using cy.session() for caching authentication state between tests.

LANGUAGE: typescript
CODE:
Cypress.Commands.add('loginToAAD', (username: string, password: string) => {
  cy.session(
    `aad-${username}`,
    () => {
      const log = Cypress.log({
        displayName: 'Azure Active Directory Login',
        message: [`🔐 Authenticating | ${username}`],
        // @ts-ignore
        autoEnd: false,
      })

      log.snapshot('before')

      loginViaAAD(username, password)

      log.snapshot('after')
      log.end()
    },
    {
      validate: () => {
        cy.visit('http://localhost:3000')
        cy.get('#welcome-div').should(
          'contain',
          `Welcome ${Cypress.env('aad_username')}!`
        )
      },
    }
  )
})

----------------------------------------

TITLE: Basic Session Usage Examples
DESCRIPTION: Examples showing correct and incorrect usage of the cy.session() command for login flows

LANGUAGE: javascript
CODE:
// Caching session when logging in via page visit
cy.session(name, () => {
  cy.visit('/login')
  cy.get('[data-test=name]').type(name)
  cy.get('[data-test=password]').type('s3cr3t')
  cy.get('form').contains('Log In').click()
  cy.url().should('contain', '/login-successful')
})

// Caching session when logging in via API
cy.session(username, () => {
  cy.request({
    method: 'POST',
    url: '/login',
    body: { username, password },
  }).then(({ body }) => {
    window.localStorage.setItem('authToken', body.token)
  })
})

----------------------------------------

TITLE: Asserting Alt Text of Images in Cypress
DESCRIPTION: Demonstrates how to explicitly check the alt text of an image using Cypress assertions. This ensures proper alternative text is present for screen readers and other assistive technologies.

LANGUAGE: javascript
CODE:
it('adds todos', () => {
  cy.visit('https://example.cypress.io/')
  // explicitly check the alt text of an image
  cy.get('img[data-cy="logo"]').should('have.attr', 'alt', 'Cypress Logo')
})

----------------------------------------

TITLE: Testing HTML Form Validation
DESCRIPTION: Example showing how to test both default and custom HTML form validation error messages using Cypress assertions.

LANGUAGE: html
CODE:
<form>
  <input type="text" id="name" name="name" required />
  <button type="submit">Submit</button>
</form>

LANGUAGE: javascript
CODE:
cy.get('[type="submit"]').click()
cy.get('input:invalid').should('have.length', 1)
cy.get('#name').then(($input) => {
  expect($input[0].validationMessage).to.eq('Please fill out this field.')
})

----------------------------------------

TITLE: Mounting a Component in Cypress Component Test
DESCRIPTION: Demonstrates how to mount a component for testing in Cypress component tests. This is contrasted with the cy.visit() method used in E2E tests.

LANGUAGE: javascript
CODE:
cy.mount(<MyComponent />)

----------------------------------------

TITLE: Component Tests with Props and Interactions
DESCRIPTION: Example of testing component props and user interactions across different frameworks

LANGUAGE: jsx
CODE:
it('supports a "count" prop to set the value', () => {
  cy.mount(<Stepper count={100} />)
  cy.get('[data-cy=counter]').should('have.text', '100')
})

it('when the increment button is pressed, the counter is incremented', () => {
  cy.mount(<Stepper />)
  cy.get('[data-cy=increment]').click()
  cy.get('[data-cy=counter]').should('have.text', '1')
})

----------------------------------------

TITLE: API Testing with Cypress
DESCRIPTION: Demonstrates how to use Cypress for API testing by making an HTTP request and asserting on the response.

LANGUAGE: javascript
CODE:
it('adds a todo', () => {
  cy.request('POST', '/todos', { title: 'Write API Tests' })
    .its('body')
    .should('contain', { title: 'Write API Tests' })
})

----------------------------------------

TITLE: Custom Command for Okta Authentication using cy.origin()
DESCRIPTION: Implements a custom Cypress command 'loginByOkta' that performs login to Okta using cy.origin(). It navigates to the Okta origin, inputs credentials, signs in, and caches the session.

LANGUAGE: typescript
CODE:
// Okta
const loginToOkta = (username: string, password: string) => {
  Cypress.log({
    displayName: 'OKTA LOGIN',
    message: [`🔐 Authenticating | ${username}`],
    autoEnd: false,
  })

  cy.visit('/')
  cy.origin(
    Cypress.env('okta_domain'),
    { args: { username, password } },
    ({ username, password }) => {
      cy.get('input[name="identifier"]').type(username)
      cy.get('input[name="credentials.passcode"]').type(password, {
        log: false,
      })
      cy.get('[type="submit"]').click()
    }
  )

  cy.get('[data-test="sidenav-username"]').should('contain', username)
}
// right now our custom command is light. More on this later!
Cypress.Commands.add('loginByOkta', (username: string, password: string) => {
  return loginToOkta(username, password)
})

----------------------------------------

TITLE: Implementing Google Authentication in React Frontend
DESCRIPTION: Adapts the React frontend to support Google authentication using the react-google-login component and custom hooks.

LANGUAGE: tsx
CODE:
import { GoogleLogin, useGoogleLogin } from 'react-google-login'
// ...
const AppGoogle = () => {
  // ...
  useGoogleLogin({
    clientId: process.env.REACT_APP_GOOGLE_CLIENTID!,
    onSuccess: (res) => {
      authService.send('GOOGLE', { user: res.profileObj, token: res.tokenId })
    },
    cookiePolicy: 'single_host_origin',
    isSignedIn: true,
  })
  // ...
  return (
    <div className={classes.root}>
      // ...
      {authState.matches('unauthorized') && (
        <Container component="main" maxWidth="xs">
          <CssBaseline />
          <div className={classes.paper}>
            <GoogleLogin
              clientId={process.env.REACT_APP_GOOGLE_CLIENTID!}
              buttonText="Login"
              cookiePolicy={'single_host_origin'}
            />
          </div>
        </Container>
      )}
    </div>
  )
}
export default AppGoogle

----------------------------------------

TITLE: Configuring Client Certificates in Cypress TypeScript Config
DESCRIPTION: Demonstrates how to configure client certificates in Cypress using the clientCertificates configuration option. Shows examples of configuring both PEM and PFX certificates with different URL patterns and optional CA validation.

LANGUAGE: typescript
CODE:
{
  clientCertificates: [
    {
      url: 'https://a.host.com',
      ca: ['certs/ca.pem'],
      certs: [
        {
          cert: 'certs/cert.pem',
          key: 'certs/private.key',
          passphrase: 'certs/pem-passphrase.txt',
        },
      ],
    },
    {
      url: 'https://b.host.com/a_base_route/**',
      ca: [],
      certs: [
        {
          pfx: '/home/tester/certs/cert.pfx',
          passphrase: '/home/tester/certs/pfx-passphrase.txt',
        },
      ],
    },
    {
      url: 'https://a.host.*.com/',
      ca: [],
      certs: [
        {
          pfx: 'certs/cert.pfx',
          passphrase: 'certs/pfx-passphrase.txt',
        },
      ],
    },
  ],
}

----------------------------------------

TITLE: Using cy.location() in Cypress Tests
DESCRIPTION: Demonstrates various ways to use the cy.location() command in Cypress tests, including getting the full location object and accessing specific properties.

LANGUAGE: javascript
CODE:
cy.location()
cy.location(key)
cy.location(options)
cy.location(key, options)

LANGUAGE: javascript
CODE:
cy.location() // Get location object
cy.location('host') // Get the host of the location object
cy.location('port') // Get the port of the location object

----------------------------------------

TITLE: Testing React Router Navigation
DESCRIPTION: Shows how to test React Router navigation components with different routes using custom mount command.

LANGUAGE: jsx
CODE:
import { Navigation } from './Navigation'

it('home link should be active when url is "/"', () => {
  cy.mount(<Navigation />)

  cy.get('a').contains('Home').should('have.class', 'active')
})

it('login link should be active when url is "/login"', () => {
  cy.mount(<Navigation />, {
    routerProps: {
      initialEntries: ['/login'],
    },
  })

  cy.get('a').contains('Login').should('have.class', 'active')
})

----------------------------------------

TITLE: Basic Component Test Setup - Angular
DESCRIPTION: Basic test structure for mounting and testing an Angular component in Cypress

LANGUAGE: typescript
CODE:
import { StepperComponent } from './stepper.component'

describe('StepperComponent', () => {
  it('mounts', () => {
    // see: https://on.cypress.io/mounting-angular
    cy.mount(StepperComponent)
  })
})

----------------------------------------

TITLE: Automating UI Coverage Scan with Sitemap in Cypress
DESCRIPTION: This code snippet demonstrates how to automate UI coverage scanning using a sitemap.xml file. It requests the sitemap, parses the URLs, and visits each page to capture initial coverage data.

LANGUAGE: javascript
CODE:
describe('UI Coverage Scan', () => {
  it('Checks ui coverage with the sitemap.xml', () => {
    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {
      const xmlString = response.body
      const parser = new DOMParser()
        (loc) => loc.textContent
    })
    Cypress._.each(URLs, (URL) => {
      cy.visit(URL)
    })
  })
})

----------------------------------------

TITLE: Basic Usage of cy.origin() in Cypress
DESCRIPTION: Demonstrates how to use cy.origin() to execute commands in a secondary origin, passing serializable values and navigating between origins.

LANGUAGE: javascript
CODE:
const hits = getHits() // Defined elsewhere
cy.origin('https://example.cypress.io', { args: { hits } }, ({ hits }) => {
  cy.visit('/history/founder')
  cy.get('h1').contains('About our Founder')
  cy.get('#hitcounter').contains(hits)
})
cy.visit('/')
cy.get('h1').contains('My cool site under test')

----------------------------------------

TITLE: Handling Multiple Requests with Cypress Wait
DESCRIPTION: Demonstrates how cy.wait() automatically increments responses for repeated aliases and how to handle multiple requests.

LANGUAGE: javascript
CODE:
// stub an empty response to requests for books
cy.intercept('GET', '/books', []).as('getBooks')
cy.get('#search').type('Peter Pan')

// wait for the first response to finish
cy.wait('@getBooks')

// the results should be empty because we
// responded with an empty array first
cy.get('#book-results').should('be.empty')

// now the request (aliased again as `getBooks`) will return one book
cy.intercept('GET', '/books', [{ name: 'Peter Pan' }]).as('getBooks')

cy.get('#search').type('Peter Pan')

// when we wait for 'getBooks' again, Cypress will
// automatically know to wait for the 2nd response
cy.wait('@getBooks')

// we responded with one book the second time
cy.get('#book-results').should('have.length', 1)

----------------------------------------

TITLE: Configuring Cypress for Next.js
DESCRIPTION: Basic configuration setup for using Cypress component testing with Next.js framework using webpack bundler.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'next',
      bundler: 'webpack',
    },
  },
}

----------------------------------------

TITLE: Writing a Cypress Test for Google Authentication
DESCRIPTION: Example of a Cypress test that uses the custom 'loginByGoogleApi' command to authenticate with Google and verify the onboarding process.

LANGUAGE: jsx
CODE:
describe('Google', function () {
  beforeEach(function () {
    cy.task('db:seed')
    cy.loginByGoogleApi()
  })

  it('shows onboarding', function () {
    cy.contains('Get Started').should('be.visible')
  })
})

----------------------------------------

TITLE: Resolving 'Cypress cannot execute commands outside a running test' error
DESCRIPTION: This error occurs when Cypress commands are executed outside of an 'it' block. Move the commands into an 'it' block to resolve the issue.

LANGUAGE: javascript
CODE:
describe('Some Tests', () => {
  it('is true', () => {
    expect(true).to.be.true
  })

  it('is false', () => {
    expect(false).to.be.false
  })

  context('some nested tests', () => {
    it('contains todos', () => {
      cy.get('h1').should('contain', 'todos')
    })
  })
})

----------------------------------------

TITLE: Audio Fixture Handling
DESCRIPTION: Example of loading and playing MP3 audio files from fixtures.

LANGUAGE: javascript
CODE:
cy.fixture('audio/sound.mp3', 'base64').then((mp3) => {
  const uri = 'data:audio/mp3;base64,' + mp3
  const audio = new Audio(uri)
  audio.play()
})

----------------------------------------

TITLE: Changing System Time in Cypress Tests
DESCRIPTION: Demonstrates how to change the current system time without triggering timers, useful for testing time-dependent UI elements.

LANGUAGE: javascript
CODE:
cy.clock(0)
cy.visit('http://localhost:3333')
cy.clock().then((clock) => {
  clock.setSystemTime(60 * 60 * 1000 - 60);
  // setSystemTime doesn't trigger any timers, so we run the last frame
  // with tick to trigger a callback to update the timer.
  clock.tick(60);
})
cy.get('#timer').should(...) // assert that it fits within the screen etc.
// more test code here

----------------------------------------

TITLE: Demonstrating Correct Usage of Click Command in Cypress
DESCRIPTION: Provides examples of correctly using the click command on various elements.

LANGUAGE: javascript
CODE:
cy.get('.btn').click() // Click on button
cy.focused().click() // Click on el with focus
cy.contains('Welcome').click() // Click on first el containing 'Welcome'

----------------------------------------

TITLE: Cypress Support File Example
DESCRIPTION: Example of a support file that runs before every test with a global beforeEach hook

LANGUAGE: javascript
CODE:
beforeEach(() => {
  cy.log('I run before every test in every spec file!!!!!!')
})

----------------------------------------

TITLE: Running Cypress in CI
DESCRIPTION: Commands to run Cypress tests in a CI environment using npm, yarn, or pnpm.

LANGUAGE: shell
CODE:
npm run cypress:run

LANGUAGE: shell
CODE:
yarn cypress run

LANGUAGE: shell
CODE:
pnpm cypress run

----------------------------------------

TITLE: Using Custom Command in Cypress Test
DESCRIPTION: Example of using the custom 'dataCy' command in a Cypress test specification.

LANGUAGE: typescript
CODE:
it('works', () => {
  cy.visit('/')
  // IntelliSense and TS compiler should
  // not complain about unknown method
  cy.dataCy('greeting')
})

----------------------------------------

TITLE: Writing Targeted Test for Form Submission in Cypress
DESCRIPTION: Example of writing a Cypress test to cover form submission functionality on a landing page, demonstrating how to interact with previously untested elements.

LANGUAGE: javascript
CODE:
describe('Dashboard', () => {
  it('Submits form on landing page', () => {
    cy.visit('/request-trial')

    // Interact with previously untested elements
    cy.get('[data-cy="email"]').type('test@email.com')
    cy.contain('Request Trial').click()
    // UI Coverage will now surface the coverage of the thank you page
    cy.url().should('include', '/thank-you')
  })
})

----------------------------------------

TITLE: Adding Custom Command Types in Cypress
DESCRIPTION: Example of adding types for a custom Cypress command 'dataCy' to extend the global Cypress Chainable interface.

LANGUAGE: typescript
CODE:
declare global {
  namespace Cypress {
    interface Chainable {
      /**
       * Custom command to select DOM element by data-cy attribute.
       * @example cy.dataCy('greeting')
       */
      dataCy(value: string): Chainable<JQuery<HTMLElement>>
    }
  }
}

----------------------------------------

TITLE: Demonstrating Asynchronous Behavior of 'as' in Cypress
DESCRIPTION: Examples illustrating the asynchronous nature of the 'as' command and how to properly access aliased data.

LANGUAGE: javascript
CODE:
describe('A fixture', () => {
  describe('alias can be accessed', () => {
    it('via get().', () => {
      cy.fixture('admin-users.json').as('admins')
      cy.get('@admins').then((users) => {
        cy.log(`There are ${users.length} admins.`)
      })
    })

    it('via then().', function () {
      cy.fixture('admin-users.json').as('admins')
      cy.visit('/').then(() => {
        cy.log(`There are ${this.admins.length} admins.`)
      })
    })
  })

  describe('aliased in beforeEach()', () => {
    beforeEach(() => {
      cy.fixture('admin-users.json').as('admins')
    })

    it('is bound to this.', function () {
      cy.log(`There are ${this.admins.length} admins.`)
    })
  })
})

----------------------------------------

TITLE: Creating a Custom Cypress Command for Google Authentication
DESCRIPTION: Implements a custom Cypress command 'loginByGoogleApi' that performs programmatic login to Google using refresh tokens and sets user details in localStorage.

LANGUAGE: jsx
CODE:
Cypress.Commands.add('loginByGoogleApi', () => {
  cy.log('Logging in to Google')
  cy.request({
    method: 'POST',
    url: 'https://www.googleapis.com/oauth2/v4/token',
    body: {
      grant_type: 'refresh_token',
      client_id: Cypress.env('googleClientId'),
      client_secret: Cypress.env('googleClientSecret'),
      refresh_token: Cypress.env('googleRefreshToken'),
    },
  }).then(({ body }) => {
    const { access_token, id_token } = body

    cy.request({
      method: 'GET',
      url: 'https://www.googleapis.com/oauth2/v3/userinfo',
      headers: { Authorization: `Bearer ${access_token}` },
    }).then(({ body }) => {
      cy.log(body)
      const userItem = {
        token: id_token,
        user: {
          googleId: body.sub,
          email: body.email,
          givenName: body.given_name,
          familyName: body.family_name,
          imageUrl: body.picture,
        },
      }

      window.localStorage.setItem('googleCypress', JSON.stringify(userItem))
      cy.visit('/')
    })
  })
})

----------------------------------------

TITLE: Component Testing with Cypress in React
DESCRIPTION: Shows how to perform component testing in Cypress using React, including mounting a component and making assertions on its rendered output.

LANGUAGE: typescript
CODE:
import Button from './Button'

it('uses custom text for the button label', () => {
  cy.mount(<Button>Click me!</Button>)
  // Assert that a button component has the correct text
  cy.get('button').should('contains.text', 'Click me!')
})

----------------------------------------

TITLE: Custom Command for Amazon Cognito Authentication with cy.origin()
DESCRIPTION: Create a custom Cypress command to perform login to Amazon Cognito using cy.origin().

LANGUAGE: jsx
CODE:
// Amazon Cognito
const loginToCognito = (username: string, password: string) => {
  Cypress.log({
    displayName: 'COGNITO LOGIN',
    message: [`🔐 Authenticating | ${username}`],
    autoEnd: false,
  })

  cy.visit('/')

  cy.origin(
    Cypress.env('cognito_domain'),
    {
      args: {
        username,
        password,
      },
    },
    ({ username, password }) => {
      cy.contains('Sign in with your email and password')
      // Cognito log in page has some elements of the same id but are off screen.
      // We only want the visible elements to log in
      cy.get('input[name="username"]:visible').type(username)
      cy.get('input[name="password"]:visible').type(password, {
        // use log: false to prevent your password from showing in the Command Log
        log: false,
      })
      cy.get('input[name="signInSubmitButton"]:visible').click()
    }
  )

  // give a few seconds for redirect to settle
  cy.wait(2000)

  // verify we have made it passed the login screen
  cy.contains('Get Started').should('be.visible')
}

// right now our custom command is light. More on this later!
Cypress.Commands.add('loginByCognito', (username, password) => {
  return loginToCognito(username, password)
})

----------------------------------------

TITLE: Chaining Asynchronous Functions in Cypress
DESCRIPTION: Demonstrates the correct way to chain asynchronous functions using cy.wrap() and .then() to ensure proper execution order.

LANGUAGE: javascript
CODE:
cy.wrap(foo())

cy.get('some-button').click()
cy.get('some-input').type(someValue)
cy.get('some-submit-button')
  .click()
  .then(() => {
    // this will execute `bar()` after the
    // other cy.get(...) functions complete
    cy.wrap(bar())
  })

----------------------------------------

TITLE: Basic HTTP Request Syntax in Cypress
DESCRIPTION: Different syntax variations for making HTTP requests using cy.request()

LANGUAGE: javascript
CODE:
cy.request(url)
cy.request(url, body)
cy.request(method, url)
cy.request(method, url, body)
cy.request(options)

----------------------------------------

TITLE: Defining a Custom Framework Definition for Solid.js in Cypress
DESCRIPTION: This code snippet demonstrates how to create a Framework Definition for Solid.js, including dependencies, detectors, and icon. It uses the defineFrameworkDefinition function to structure the definition.

LANGUAGE: javascript
CODE:
const { defineFrameworkDefinition } = require('cypress')

const solidDep = {
  type: 'solid-js',
  name: 'Solid',
  package: 'solid-js',
  installer: 'solid-js',
  description:
    'A declarative, efficient, and flexible JavaScript library for building user interfaces.',
  minVersion: '^1.6.0',
}

const solidVitePlugin = {
  type: 'solid-js-vite-plugin',
  name: 'Vite Plugin Solid',
  package: 'vite-plugin-solid',
  installer: 'vite-plugin-solid',
  description: 'A simple integration to run solid-js with vite',
  minVersion: '^1.6.0 || ^2.0.0',
}

module.exports = defineFrameworkDefinition({
  type: '@lmiller1990/cypress-ct-solid-js',
  name: 'Solid.js',
  supportedBundlers: ['vite'],
  detectors: [solidDep],
  dependencies: (bundler) => {
    return [solidDep, solidVitePlugin]
  },
  icon: `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 166 155.3"><path d="M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z" fill="#76b3e1"/><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="27.5" y1="3" x2="152" y2="63.5"><stop offset=".1" stop-color="#76b3e1"/><stop offset=".3" stop-color="#dcf2fd"/><stop offset="1" stop-color="#76b3e1"/></linearGradient><path d="M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z" opacity=".3" fill="url(#a)"/><path d="M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z" fill="#518ac8"/><linearGradient id="b" gradientUnits="userSpaceOnUse" x1="95.8" y1="32.6" x2="74" y2="105.2"><stop offset="0" stop-color="#76b3e1"/><stop offset=".5" stop-color="#4377bb"/><stop offset="1" stop-color="#1f3b77"/></linearGradient><path d="M52 35l-4 1c-17 5-22 21npm install https://cdn.cypress.io/beta/npm/12.6.0/darwin-arm64/feature/ct-public-api-ab820f062d313fbef51665bdd1d883c69d89b3be/cypress.tgz-13 35 10 13 31 20 48 15l62-21S92 26 52 35z" opacity=".3" fill="url(#b)"/><linearGradient id="c" gradientUnits="userSpaceOnUse" x1="18.4" y1="64.2" x2="144.3" y2="149.8"><stop offset="0" stop-color="#315aa9"/><stop offset=".5" stop-color="#518ac8"/><stop offset="1" stop-color="#315aa9"/></linearGradient><path d="M134 80a45 45 0 00-48-15L24 85 4 120l112 19 20-36c4-7 3-15-2-23z" fill="url(#c)"/><linearGradient id="d" gradientUnits="userSpaceOnUse" x1="75.2" y1="74.5" x2="24.4" y2="260.8"><stop offset="0" stop-color="#4377bb"/><stop offset=".5" stop-color="#1a336b"/><stop offset="1" stop-color="#1a336b"/></linearGradient><path d="M114 115a45 45 0 00-48-15L4 120s53 40 94 30l3-1c17-5 23-21 13-34z" fill="url(#d)"/></svg>
  `,
})

----------------------------------------

TITLE: Focusing and Interacting with Form Elements in Cypress
DESCRIPTION: Shows examples of focusing on input elements and textareas, as well as chaining focus with other actions like typing and blurring.

LANGUAGE: javascript
CODE:
cy.get('[type="input"]').focus()

LANGUAGE: javascript
CODE:
// yields the <textarea> for further chaining
cy.get('textarea').focus().type('Nice Product!').blur()

----------------------------------------

TITLE: Correct Fixture Implementation
DESCRIPTION: Demonstrates proper usage of cy.fixture() command for loading JSON and image files.

LANGUAGE: javascript
CODE:
cy.fixture('users').as('usersJson') // load data from users.json
cy.fixture('logo.png').then((logo) => {
  // load data from logo.png
})

----------------------------------------

TITLE: Angular Component Mount Examples
DESCRIPTION: Examples showing how to mount Angular components both directly and via template, including configuration of providers and imports

LANGUAGE: typescript
CODE:
import { mount } from '@cypress/angular'
import { StepperComponent } from './stepper.component'
import { MyService } from 'services/my.service'
import { SharedModule } from 'shared/shared.module'
it('mounts', () => {
  mount(StepperComponent, {
    providers: [MyService],
    imports: [SharedModule],
  })
  cy.get('[data-cy=increment]').click()
  cy.get('[data-cy=counter]').should('have.text', '1')
})

// or

it('mounts with template', () => {
  mount('<app-stepper></app-stepper>', {
    declarations: [StepperComponent],
  })
})

----------------------------------------

TITLE: Cypress Test for Add Function
DESCRIPTION: A Cypress test that imports and tests the add function, demonstrating how coverage is collected.

LANGUAGE: javascript
CODE:
const { add } = require('./add')

it('adds numbers', () => {
  expect(add(2, 3)).to.equal(5)
})

----------------------------------------

TITLE: Stopping Tests on Failure in Cypress
DESCRIPTION: Example of how to use Cypress.stop() to halt test execution when a test fails. This code should be added to the support/index.js file.

LANGUAGE: javascript
CODE:
afterEach(function () {
  if (this.currentTest.state === 'failed') {
    Cypress.stop()
  }
})

----------------------------------------

TITLE: Configuring Keystroke Delay in Test Configuration
DESCRIPTION: Examples of setting keystroke delay in test configuration for individual tests and test suites.

LANGUAGE: javascript
CODE:
it('removes keystroke delay for all typing in this test', { keystrokeDelay: 0 }, () => {
  cy.get('input').eq(0).type('fast typing')
  cy.get('input').eq(1).type('more fast typing')
})

describe('removes keystroke delay in all tests in this suite', { keystrokeDelay: 0 }, () => {
  it('types fast in the first input', () => {
    cy.get('input').eq(0).type('fast typing')
  })

  it('types fast in the second input', () => {
    cy.get('input').eq(1).type('more fast typing')
  })
}))

----------------------------------------

TITLE: Correct Usage Examples of .and() Command
DESCRIPTION: Demonstrates proper usage of the .and() command for chaining assertions on elements.

LANGUAGE: javascript
CODE:
cy.get('.err').should('be.empty').and('be.hidden')
cy.contains('Login').and('be.visible')
cy.wrap({ foo: 'bar' })
  .should('have.property', 'foo')
  .and('eq', 'bar')

----------------------------------------

TITLE: Configuring Global Test Retries in Cypress
DESCRIPTION: Configure global test retries for both run mode and open mode in Cypress configuration.

LANGUAGE: javascript
CODE:
{
  retries: {
    // Configure retry attempts for `cypress run`
    // Default is 0
    runMode: 2,
    // Configure retry attempts for `cypress open`
    // Default is 0
    openMode: 0
  }
}

----------------------------------------

TITLE: Cypress Support File for Code Coverage
DESCRIPTION: Code to add to Cypress support file to enable code coverage.

LANGUAGE: javascript
CODE:
import '@cypress/code-coverage/support'

----------------------------------------

TITLE: Screenshot DOM Manipulation Hooks
DESCRIPTION: Example of using before and after screenshot hooks to modify DOM elements

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  onBeforeScreenshot($el) {
    const $clock = $el.find('.clock')

    if ($clock) {
      $clock.hide()
    }
  },

  onAfterScreenshot($el, props) {
    const $clock = $el.find('.clock')

    if ($clock) {
      $clock.show()
    }
  },
})

----------------------------------------

TITLE: Finding Elements with Regular Expressions
DESCRIPTION: Example of using regular expressions with contains to find elements matching a pattern.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>bananas</li>
cy.contains(/^b\w+/)

----------------------------------------

TITLE: Form Input with Enter - Cypress
DESCRIPTION: Shows how to type into form fields and submit with enter key.

LANGUAGE: html
CODE:
<form action="/login">
  <input id="username" />
  <input id="password" />
  <button type="submit">Log In</button>
</form>

LANGUAGE: javascript
CODE:
cy.get('#username').type('bob@burgers.com')
cy.get('#password').type('password123{enter}')

----------------------------------------

TITLE: Element Selection Examples
DESCRIPTION: Various examples of using get() with different selectors to find specific elements.

LANGUAGE: javascript
CODE:
cy.get('input').should('be.disabled')
cy.get('ul li:first').should('have.class', 'active')
cy.get('.dropdown-menu').click()
cy.get('[data-test-id="test-example"]').should('have.length', 5)
cy.get('a[href*="questions"]').click()

----------------------------------------

TITLE: Basic Vue Component Mounting in TypeScript
DESCRIPTION: Shows how to mount a basic Vue component using cy.mount() with TypeScript

LANGUAGE: typescript
CODE:
import { Stepper } from './Stepper.vue'

it('mounts', () => {
  cy.mount(Stepper)
})

----------------------------------------

TITLE: Correct Usage of Hash Command
DESCRIPTION: Demonstrates the proper way to use the cy.hash() command to get the URL hash.

LANGUAGE: javascript
CODE:
cy.hash() // Get the url hash

----------------------------------------

TITLE: Cypress Test for Todo App
DESCRIPTION: A Cypress test that adds and completes todos in a sample application.

LANGUAGE: javascript
CODE:
it('adds and completes todos', () => {
  cy.visit('/')
  cy.get('.new-todo')
    .type('write code{enter}')
    .type('write tests{enter}')
    .type('deploy{enter}')

  cy.get('.todo').should('have.length', 3)

  cy.get('.todo').first().find('.toggle').check()

  cy.get('.todo').first().should('have.class', 'completed')
})

----------------------------------------

TITLE: Complete Configuration Options for Cypress UI Coverage
DESCRIPTION: This JSON snippet shows all available configuration options for Cypress UI Coverage, including element filters, views, view filters, and UI coverage-specific settings such as attribute filters, element groups, and significant attributes.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": string,
      "include": boolean
    }
  ],
  "views": [
    {
      "pattern": string,
      "groupBy": [
        string
      ]
    }
  ],
  "viewFilters": [
    {
      "pattern": string,
      "include": boolean
    }
  ],
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": string,
        "value": string,
        "include": boolean
      }
    ],
    "elementGroups": [
      {
        "selector": string,
        "name": string
      }
    ],
    "significantAttributes": [
      string
    ]
  }
}

----------------------------------------

TITLE: Full Browser Window Capture Configuration
DESCRIPTION: Setting screenshot capture mode to include entire Cypress runner window

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  capture: 'runner',
})

----------------------------------------

TITLE: POST Request with JSON Body
DESCRIPTION: Example of making a POST request with JSON data and handling the response

LANGUAGE: javascript
CODE:
cy.request('POST', 'http://localhost:8888/users/admin', { name: 'Jane' }).then((response) => {
  expect(response.body).to.have.property('name', 'Jane')
})

----------------------------------------

TITLE: Basic Usage of check() Command in Cypress
DESCRIPTION: Demonstrates the correct usage of the check() command for checkbox and radio elements.

LANGUAGE: javascript
CODE:
cy.get('[type="checkbox"]').check() // Check checkbox element
cy.get('[type="radio"]').first().check() // Check first radio element

----------------------------------------

TITLE: Unit Test for Selector Function
DESCRIPTION: A unit test for a selector function, demonstrating how to test edge cases not covered by E2E tests.

LANGUAGE: javascript
CODE:
import { getVisibleTodos } from '../../src/selectors'

describe('getVisibleTodos', () => {
  it('throws an error for unknown visibility filter', () => {
    expect(() => {
      getVisibleTodos({
        todos: [],
        visibilityFilter: 'unknown-filter',
      })
    }).to.throw()
  })
})

----------------------------------------

TITLE: Cypress Plugin Setup for Code Coverage
DESCRIPTION: Code to add to Cypress plugin file to configure code coverage tasks.

LANGUAGE: javascript
CODE:
require('@cypress/code-coverage/task')(on, config)
// include any other plugin code...

// It's IMPORTANT to return the config object
// with any changed environment variables
return config

----------------------------------------

TITLE: Setting Viewport Size in Cypress
DESCRIPTION: Demonstrates how to use the cy.viewport() command to set specific dimensions or use preset device sizes.

LANGUAGE: javascript
CODE:
cy.viewport(550, 750) // Set viewport to 550px x 750px
cy.viewport('iphone-6') // Set viewport to 375px x 667px

----------------------------------------

TITLE: Generated Test Code for Creating a Bank Account
DESCRIPTION: This code snippet shows the test generated by Cypress Studio for creating a new bank account. It includes interactions like navigating to the bank accounts page, filling out the form, and saving the new account.

LANGUAGE: javascript
CODE:
import { User } from 'models'

describe('Cypress Studio Demo', () => {
  beforeEach(() => {
    cy.task('db:seed')

    cy.database('find', 'users').then((user: User) => {
      cy.login(user.username, 's3cret', true)
    })
  })

  it('create new transaction', () => {
    // Extend test with Cypress Studio
  })

  /* === Test Created with Cypress Studio === */
  it('create bank account', function () {
    /* ==== Generated with Cypress Studio ==== */
    cy.get('[data-test=sidenav-bankaccounts]').click()
    cy.get('[data-test=bankaccount-new] > .MuiButton-label').click()
    cy.get('#bankaccount-bankName-input').click()
    cy.get('#bankaccount-bankName-input').type('Test Bank Account')
    cy.get('#bankaccount-routingNumber-input').click()
    cy.get('#bankaccount-routingNumber-input').type('987654321')
    cy.get('#bankaccount-accountNumber-input').click()
    cy.get('#bankaccount-accountNumber-input').type('123456789')
    cy.get('[data-test=bankaccount-submit] > .MuiButton-label').click()
    /* ==== End Cypress Studio ==== */
  })
})

----------------------------------------

TITLE: Using Cypress.session Methods in JavaScript
DESCRIPTION: Demonstrates the syntax for various Cypress.session methods, including clearing all saved sessions, clearing current session data, getting current session data, and retrieving a specific session by ID.

LANGUAGE: javascript
CODE:
// Clear all sessions saved on the backend, including cached global sessions.
Cypress.session.clearAllSavedSessions()
// Clear all storage and cookie date across all origins associated with the current session.
Cypress.session.clearCurrentSessionData()
// Get all storage and cookie data across all origins associated with the current session.
Cypress.session.getCurrentSessionData()
// Get all storage and cookie data saved on the backend associated with the provided session id.
Cypress.session.getSession(id)

----------------------------------------

TITLE: Correct Usage of .within() in Cypress Tests
DESCRIPTION: Demonstrates the correct way to use .within() by chaining it off a command that yields a DOM element. It scopes subsequent commands to that element.

LANGUAGE: javascript
CODE:
cy.get('.list')
  .first()
  .within(($list) => {}) // Yield the first `.list` and scope all commands within it

----------------------------------------

TITLE: Basic Stub Syntax in Cypress
DESCRIPTION: Basic syntax examples for using cy.stub() function.

LANGUAGE: javascript
CODE:
cy.stub()
cy.stub(object, method)

----------------------------------------

TITLE: Basic Usage of cy.visit() in Cypress
DESCRIPTION: Examples of correct usage for the cy.visit() command, including visiting the baseUrl, local files, and full URLs.

LANGUAGE: javascript
CODE:
cy.visit('/') // visits the baseUrl
cy.visit('index.html') // visits the local file "index.html" if baseUrl is null
cy.visit('http://localhost:3000') // specify full URL if baseUrl is null or the domain is different the baseUrl
cy.visit({
  url: '/pages/hello.html',
  method: 'GET',
})

----------------------------------------

TITLE: Implementing cy.mount() Command for Vue in JavaScript
DESCRIPTION: Sets up a custom Cypress command for mounting Vue components. This implementation includes options for global stubs, components, and plugins.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/vue'

Cypress.Commands.add('mount', (component, options = {}) => {
  // Setup options object
  options.global = options.global || {}
  options.global.stubs = options.global.stubs || {}
  options.global.stubs['transition'] = false
  options.global.components = options.global.components || {}
  options.global.plugins = options.global.plugins || []

  /* Add any global plugins */
  // options.global.plugins.push({
  //   install(app) {
  //     app.use(MyPlugin);
  //   },
  // });

  /* Add any global components */
  // options.global.components['Button'] = Button;

  return mount(component, options)
})

----------------------------------------

TITLE: Basic Stub Syntax in Cypress
DESCRIPTION: Basic syntax examples for using cy.stub() function.

LANGUAGE: javascript
CODE:
cy.stub()
cy.stub(object, method)

----------------------------------------

TITLE: Invoking Third-Party Plugin Methods
DESCRIPTION: Shows how to use invoke with third-party plugins like Kendo UI.

LANGUAGE: javascript
CODE:
cy.get('input')
  .invoke('getKendoDropDownList')
  .invoke('select', 'apples')
  .invoke('val')
  .should('match', /apples/)

----------------------------------------

TITLE: Basic Cypress Configuration Syntax
DESCRIPTION: Shows the basic syntax patterns for using Cypress.config() to get and set configuration values.

LANGUAGE: javascript
CODE:
Cypress.config()
Cypress.config(name)
Cypress.config(name, value)
Cypress.config(object)

----------------------------------------

TITLE: Refactoring Social Login Command with cy.session()
DESCRIPTION: Enhanced version of the loginToAuth0ViaSocial command using cy.session() to cache authenticated users and improve test efficiency.

LANGUAGE: typescript
CODE:
Cypress.Commands.add(
  'loginToAuth0ViaSocial',
  (SOCIAL_PROVIDER: 'microsoft' | 'google' | 'facebook') => {
    const log = Cypress.log({
      displayName: 'Social LOGIN',
      message: [`🔐 Authenticating | ${SOCIAL_PROVIDER}`],
      // @ts-ignore
      autoEnd: false,
    })
    log.snapshot('before')

    cy.session(
      `social-${SOCIAL_PROVIDER}`,
      () => {
        switch (SOCIAL_PROVIDER) {
          case 'microsoft':
            logIntoMicrosoft(
              Cypress.env('MICROSOFT_USERNAME'),
              Cypress.env('MICROSOFT_PASSWORD'),
              Cypress.env('MICROSOFT_NAME')
            )
            break
          case 'google':
            logIntoGoogle(
              Cypress.env('GOOGLE_USERNAME'),
              Cypress.env('GOOGLE_PASSWORD'),
              Cypress.env('GOOGLE_NAME')
            )
            break
          case 'facebook':
            logIntoFacebook(
              Cypress.env('FACEBOOK_USERNAME'),
              Cypress.env('FACEBOOK_PASSWORD'),
              Cypress.env('FACEBOOK_NAME')
            )
            break
          default:
            throw new Error('no social provider configured!')
        }
      },
      {
        validate: () => {
          cy.visit('http://localhost:3000')
          switch (SOCIAL_PROVIDER) {
            case 'microsoft':
              cy.get('h6.dropdown-header').should(
                'contain',
                Cypress.env('MICROSOFT_NAME')
              )
              break
            case 'google':
              cy.get('h6.dropdown-header').should(
                'contain',
                Cypress.env('GOOGLE_NAME')
              )
              break
            case 'facebook':
              cy.get('h6.dropdown-header').should(
                'contain',
                Cypress.env('FACEBOOK_NAME')
              )
              break
            default:
              throw new Error('no social provider configured!')
          }
        },
      }
    )

    log.snapshot('after')
    log.end()
  }
)

----------------------------------------

TITLE: Configuring Okta in React Entry Point
DESCRIPTION: Updates the React entry point to wrap the application with the Okta Security component, providing necessary Okta configuration.

LANGUAGE: typescript
CODE:
// initial imports ...
import { OktaAuth } from '@okta/okta-auth-js'
import { Security } from '@okta/okta-react'
import AppOkta from './containers/AppOkta'

// ...

const oktaAuth = new OktaAuth({
  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,
  clientId: process.env.REACT_APP_OKTA_CLIENTID,
  redirectUri: window.location.origin + '/implicit/callback',
})

ReactDOM.render(
  <Router history={history}>
    <ThemeProvider theme={theme}>
      {process.env.REACT_APP_OKTA ? (
        <Security oktaAuth={oktaAuth}>
          <AppOkta />
        </Security>
      ) : (
        <App />
      )}
    </ThemeProvider>
  </Router>,
  document.getElementById('root')
)

----------------------------------------

TITLE: Correct Usage of Cypress Wait Command
DESCRIPTION: Shows the correct way to use cy.wait() with a time value or an aliased route.

LANGUAGE: javascript
CODE:
cy.wait(500)
cy.wait('@getProfile')

----------------------------------------

TITLE: Basic Select Command Syntax in Cypress
DESCRIPTION: Demonstrates the basic syntax patterns for the Cypress select command.

LANGUAGE: javascript
CODE:
.select(value)
.select(values)
.select(value, options)
.select(values, options)

----------------------------------------

TITLE: Organizing Desktop and Mobile Tests with Viewport
DESCRIPTION: Shows how to structure tests for different screen sizes using cy.viewport() in before hooks.

LANGUAGE: javascript
CODE:
describe('Nav Menus', () => {
  context('720p resolution', () => {
    beforeEach(() => {
      // run these tests as if in a desktop
      // browser with a 720p monitor
      cy.viewport(1280, 720)
    })

    it('displays full header', () => {
      cy.get('nav .desktop-menu').should('be.visible')
      cy.get('nav .mobile-menu').should('not.be.visible')
    })
  })

  context('iphone-5 resolution', () => {
    beforeEach(() => {
      // run these tests as if in a mobile browser
      // and ensure our responsive UI is correct
      cy.viewport('iphone-5')
    })

    it('displays mobile menu on click', () => {
      cy.get('nav .desktop-menu').should('not.be.visible')
      cy.get('nav .mobile-menu')
        .should('be.visible')
        .find('i.hamburger')
        .click()

      cy.get('ul.slideout-menu').should('be.visible')
    })
  })
})

----------------------------------------

TITLE: Using Cypress.env in JavaScript
DESCRIPTION: Demonstrates various ways to use Cypress.env to get and set environment variables. Includes examples of retrieving all variables, getting a single variable, setting variables, and overriding multiple values.

LANGUAGE: javascript
CODE:
Cypress.env() // => {foo: 'bar', baz: 'quux'}

LANGUAGE: javascript
CODE:
Cypress.env('HOST') // => "laura.dev"
Cypress.env('IS_CI') // => true
Cypress.env('MY_ID') // => 123

LANGUAGE: javascript
CODE:
Cypress.env('host', 'http://server.dev.local')

Cypress.env('host') // => http://server.dev.local

LANGUAGE: javascript
CODE:
Cypress.env({
  host: 'http://server.dev.local',
  foo: 'foo',
})

Cypress.env() // => {foo: 'foo', baz: 'quux', host: 'http://server.dev.local'}

----------------------------------------

TITLE: CircleCI Configuration for Multi-Browser Testing with Subsets
DESCRIPTION: This YAML configuration sets up separate CircleCI jobs for running all tests in Chrome and a subset of tests in Firefox, with different group names for Cypress Cloud reporting.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  build:
    jobs:
      - cypress/run:
          name: Chrome
          start-command: 'npm start'
          install-browsers: true
          cypress-command: 'npx cypress run --browser chrome --record --group chrome'
      - cypress/run:
          name: Firefox
          start-command: 'npm start'
          cypress-command: 'npx cypress run --browser firefox --record --group
            firefox-critical-path --spec
            cypress/e2e/signup.cy.js,cypress/e2e/login.cy.js'

----------------------------------------

TITLE: Clicking Multiple Elements in Cypress
DESCRIPTION: Demonstrates how to click all elements with IDs starting with 'btn' using the multiple option.

LANGUAGE: javascript
CODE:
cy.get('[id^=btn]').click({ multiple: true })

----------------------------------------

TITLE: Nested Fixture Loading
DESCRIPTION: Shows how to load fixtures from nested folder structures within the fixtures directory.

LANGUAGE: javascript
CODE:
cy.fixture('users/admin.json') // Get data from {fixturesFolder}/users/admin.json

----------------------------------------

TITLE: Accessing Cypress.sinon Matchers in JavaScript
DESCRIPTION: Demonstrates the syntax for using Cypress.sinon matchers in test assertions. These matchers provide flexible ways to match values in spy and stub assertions.

LANGUAGE: javascript
CODE:
Cypress.sinon.match(value)
Cypress.sinon.match.<matcher name>

----------------------------------------

TITLE: Correct Spy Usage Examples
DESCRIPTION: Examples showing proper usage of cy.spy() including aliasing.

LANGUAGE: javascript
CODE:
cy.spy(user, 'addFriend')
cy.spy(user, 'addFriend').as('addFriend')

----------------------------------------

TITLE: Basic React Component Mounting in Cypress
DESCRIPTION: Demonstrates how to mount a basic React component and test its initial state using Cypress mount command.

LANGUAGE: javascript
CODE:
import { Stepper } from './stepper'

it('mounts', () => {
  cy.mount(<Stepper />)
  //Stepper should have initial count of 0 (default)
  cy.get('[data-cy=counter]').should('have.text', '0')
})

----------------------------------------

TITLE: Basic Browser Detection in Cypress Tests
DESCRIPTION: Examples of using Cypress.isBrowser() to check for specific browsers and run conditional test logic.

LANGUAGE: javascript
CODE:
it('download extension link', () => {
  // true when running in Firefox
  if (Cypress.isBrowser('firefox')) {
    cy.get('#dl-extension').should('contain', 'Download Firefox Extension')
  }

  // true when running in Chrome
  if (Cypress.isBrowser('chrome')) {
    cy.get('#dl-extension').should('contain', 'Download Chrome Extension')
  }
})

----------------------------------------

TITLE: Azure AD Authentication Test Suite
DESCRIPTION: JavaScript test suite demonstrating authentication verification using the custom login command.

LANGUAGE: javascript
CODE:
describe('Azure Active Directory Authentication', () => {
  beforeEach(() => {
    cy.loginToAAD(Cypress.env('aad_username'), Cypress.env('aad_password'))
    cy.visit('http://localhost:3000')
  })

  it('verifies the user logged in has the correct name', () => {
    cy.get('#table-body-div td:contains("name") + td').should(
      'contain',
      `${Cypress.env('aad_name')}`
    )
  })

  it('verifies the user logged in has the correct preferred name', () => {
    cy.get('#table-body-div td:contains("preferred_username") + td').should(
      'contain',
      `${Cypress.env('aad_username')}`
    )
  })
})

----------------------------------------

TITLE: Assigning Aliases in Cypress
DESCRIPTION: Examples of correct usage of the 'as' command to alias various Cypress elements and commands.

LANGUAGE: javascript
CODE:
cy.get('.main-nav').find('li').first().as('firstNav') // Alias element as @firstNav
cy.get('input.username').invoke('val').as('username', { type: 'static' }) // Alias that references the value at the time the alias was created
cy.intercept('PUT', '/users').as('putUser') // Alias route as @putUser
cy.stub(api, 'onUnauth').as('unauth') // Alias stub as @unauth
cy.spy(win, 'fetch').as('winFetch') // Alias spy as @winFetch

----------------------------------------

TITLE: Taking a screenshot with padding
DESCRIPTION: Shows how to capture a screenshot of an element with additional padding around it.

LANGUAGE: javascript
CODE:
cy.get('.post').first().screenshot({ padding: 10 })

----------------------------------------

TITLE: Wrapping Elements in Cypress Tests
DESCRIPTION: Demonstrates how to wrap DOM elements to continue executing Cypress commands on them.

LANGUAGE: javascript
CODE:
cy.get('form').within(($form) => {
  // ... more commands

  cy.wrap($form).should('have.class', 'form-container')
})

LANGUAGE: javascript
CODE:
cy.get('button').then(($button) => {
  // $button is a wrapped jQuery element
  if ($button.someMethod() === 'something') {
    // wrap this element so we can
    // use cypress commands on it
    cy.wrap($button).click()
  } else {
    // do something else
  }
})

----------------------------------------

TITLE: Implementing Custom Queries with Cypress.ensure
DESCRIPTION: Examples of using Cypress.ensure in custom query implementations, showing type checking and element state verification in practical usage.

LANGUAGE: javascript
CODE:
Cypress.Commands.addQuery('getChildById', function (id) {
  return (subject) => {
    // Verify that the subject is an element, document, or window object
    Cypress.ensure.isType(
      subject,
      ['element', 'document', 'window'],
      'getChildById',
      cy
    )

    return $$(`#${id}`, subject)
  }
})

const queryName = 'verifyElementActionable'

Cypress.Commands.addQuery(queryName, function (...args) {
  return (subject) => {
    // Verify that the subject fulfills a variety of conditions
    Cypress.ensure.isElement(subject, queryName, cy)
    Cypress.ensure.isVisible(subject, queryName, cy)
    Cypress.ensure.isNotDisabled(subject, queryName, cy)
    Cypress.ensure.isNotReadonly(subject, queryName, cy)

    return subject
  }
})

----------------------------------------

TITLE: Initializing Clock in Cypress Tests
DESCRIPTION: Basic usage of cy.clock() to override native time functions in Cypress tests.

LANGUAGE: javascript
CODE:
cy.clock()

----------------------------------------

TITLE: Component Testing Configuration in CircleCI
DESCRIPTION: Configuration for running Cypress component tests in CircleCI using the Cypress Orb.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  test:
    jobs:
      - cypress/run:
          cypress-command: 'npx cypress run --component'

----------------------------------------

TITLE: Basic Cypress get() Syntax
DESCRIPTION: Basic syntax examples showing different ways to use the get() command with selectors and aliases.

LANGUAGE: javascript
CODE:
cy.get(selector)
cy.get(alias)
cy.get(selector, options)
cy.get(alias, options)

----------------------------------------

TITLE: Basic Shadow DOM Traversal Syntax - JavaScript
DESCRIPTION: Basic syntax examples for the .shadow() command showing correct and incorrect usage patterns.

LANGUAGE: javascript
CODE:
.shadow()
.shadow(options)

----------------------------------------

TITLE: Finding Elements Within Parent
DESCRIPTION: Example showing how to find li elements within a parent element using .find().

LANGUAGE: javascript
CODE:
// yields [<li class="first"></li>, <li class="second"></li>]
cy.get('#parent').find('li')

----------------------------------------

TITLE: Reading Text File with Cypress readFile
DESCRIPTION: Example of reading a .txt file using cy.readFile() and asserting its contents.

LANGUAGE: javascript
CODE:
cy.readFile('path/to/message.txt').should('eq', 'Hello World') // true

----------------------------------------

TITLE: Configuring Cypress for React with Vite
DESCRIPTION: Configuration setup for using Cypress component testing with React and Vite bundler. Allows custom Vite configuration through direct object or async function.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'react',
      bundler: 'vite',
      // optionally pass in vite config
      viteConfig: customViteConfig,
      // or a function - the result is merged with
      // any `vite.config` file that is detected
      viteConfig: async () => {
        // ... do things ...
        const modifiedConfig = await injectCustomConfig(baseConfig)
        return modifiedConfig
      },
    },
  },
}

----------------------------------------

TITLE: Testing Dynamic Content in Cypress
DESCRIPTION: Demonstrates how to test elements that are conditionally rendered based on user authentication state.

LANGUAGE: javascript
CODE:
// Login to render elements that only display after login
cy.get('[data-cy="login-button"]').click()
cy.get('[data-cy="user-profile"]')

----------------------------------------

TITLE: Basic Next Command Syntax
DESCRIPTION: Shows the different ways to use the .next() command in Cypress including with selectors and options.

LANGUAGE: javascript
CODE:
.next()
.next(selector)
.next(options)
.next(selector, options)

----------------------------------------

TITLE: Basic scrollTo Syntax in Cypress
DESCRIPTION: Shows the various ways to call the scrollTo command in Cypress, including both direct calls and chained commands.

LANGUAGE: javascript
CODE:
cy.scrollTo(position)
cy.scrollTo(x, y)
cy.scrollTo(position, options)
cy.scrollTo(x, y, options)

  // ---or---

  .scrollTo(position)
  .scrollTo(x, y)
  .scrollTo(position, options)
  .scrollTo(x, y, options)

----------------------------------------

TITLE: Debugging Cached Session Data in JavaScript
DESCRIPTION: Demonstrates how to use Cypress.session.getSession(id) to view what session data has been cached by cy.session() for debugging purposes.

LANGUAGE: javascript
CODE:
it('debug session', () => {
    cy.session('id', () => {
        ...
    })
    .then(async () => {
        const sessionData = await Cypress.session.getSession('id')
        cy.debug()
    })
})

----------------------------------------

TITLE: Mounting Svelte Component Example
DESCRIPTION: Demonstrates how to mount a Svelte Counter component with props and test its rendering using Cypress

LANGUAGE: javascript
CODE:
import Counter from './Counter.svelte'
import { mount } from 'cypress/svelte'

it('should render', () => {
  mount(Counter, { props: { count: 42 } })
  cy.get('button').contains(42)
})

----------------------------------------

TITLE: Angular Output Spy Example
DESCRIPTION: Example demonstrating how to use createOutputSpy to test component output events

LANGUAGE: typescript
CODE:
import { StepperComponent } from './stepper.component'
import { mount, createOutputSpy } from '@cypress/angular'

it('Has spy', () => {
  mount(StepperComponent, { change: createOutputSpy('changeSpy') })
  cy.get('[data-cy=increment]').click()
  cy.get('@changeSpy').should('have.been.called')
})

----------------------------------------

TITLE: Using Mocha Test Structure in Cypress
DESCRIPTION: Common Mocha BDD syntax methods available in Cypress for structuring tests, including test suites, hooks, and exclusion modifiers.

LANGUAGE: javascript
CODE:
describe()
context()
it()
before()
beforeEach()
afterEach()
after()
.only()
.skip()

----------------------------------------

TITLE: Using get() with within()
DESCRIPTION: Example showing how to use get() within a specific form context using the within() command.

LANGUAGE: javascript
CODE:
cy.get('form').within(() => {
  cy.get('input').type('Pamela') // Only yield inputs within form
  cy.get('textarea').type('is a developer') // Only yield textareas within form
})

----------------------------------------

TITLE: Basic Siblings Command Syntax in Cypress
DESCRIPTION: Shows the different ways to call the siblings() command with optional selector and options parameters.

LANGUAGE: javascript
CODE:
.siblings()
.siblings(selector)
.siblings(options)
.siblings(selector, options)

----------------------------------------

TITLE: Basic Cypress.ensure Syntax Examples
DESCRIPTION: Demonstrates the basic syntax for various Cypress.ensure methods, including type checking and DOM element state verification.

LANGUAGE: javascript
CODE:
// Type of argument
Cypress.ensure.isType(subject, type, commandName, cy)​
Cypress.ensure.isElement(subject, commandName, cy)​
Cypress.ensure.isWindow(subject, commandName, cy)
Cypress.ensure.isDocument(subject, commandName, cy)​

// State of DOM element
Cypress.ensure.isAttached(subject, commandName, cy)​
Cypress.ensure.isNotDisabled(subject, commandName)​
Cypress.ensure.isNotHiddenByAncestors(subject, commandName)​
Cypress.ensure.isNotReadonly(subject, commandName)​
Cypress.ensure.isScrollable(subject, commandName)​
Cypress.ensure.isStrictlyVisible(subject, commandName)​
Cypress.ensure.isVisible(subject, commandName)​

----------------------------------------

TITLE: Adding TypeScript Typings for cy.mount() Command in React
DESCRIPTION: Provides TypeScript type definitions for the custom cy.mount() command in React. This ensures proper type-checking and autocompletion in TypeScript projects.

LANGUAGE: typescript
CODE:
import { mount } from 'cypress/react'

declare global {
  namespace Cypress {
    interface Chainable {
      mount: typeof mount
    }
  }
}

----------------------------------------

TITLE: Complex Logging Examples
DESCRIPTION: Shows multiple logging examples including arrays and messages in the Command Log.

LANGUAGE: javascript
CODE:
cy.log('log out any message we want here')
cy.log('another message', ['one', 'two', 'three'])

----------------------------------------

TITLE: Testing React Event Handlers with Cypress Spy
DESCRIPTION: Example of testing event handlers using Cypress spy functionality to verify event callbacks.

LANGUAGE: typescript
CODE:
it('clicking + fires a change event with the incremented value', () => {
  const onChangeSpy = cy.spy().as('onChangeSpy')
  cy.mount(<Stepper onChange={onChangeSpy} />)
  cy.get('[data-cy=increment]').click()
  cy.get('@onChangeSpy').should('have.been.calledWith', 1)
})

----------------------------------------

TITLE: Working with Forms Using .within() in Cypress
DESCRIPTION: Demonstrates how to use .within() to interact with form elements. It scopes commands to the form, allowing easy interaction with inputs and form submission.

LANGUAGE: html
CODE:
<form>
  <input name="email" type="email" />
  <input name="password" type="password" />
  <button type="submit">Login</button>
</form>

LANGUAGE: javascript
CODE:
cy.get('form').within(($form) => {
  // you have access to the found form via
  // the jQuery object $form if you need it

  // cy.get() will only search for elements within form,
  // not within the entire document
  cy.get('input[name="email"]').type('john.doe@email.com')
  cy.get('input[name="password"]').type('password')
  cy.root().submit()
})

----------------------------------------

TITLE: Handling fixed/sticky elements in full page captures
DESCRIPTION: Demonstrates how to handle fixed or sticky elements when taking a full page screenshot.

LANGUAGE: javascript
CODE:
cy.get('.sticky-header').invoke('css', 'position', 'absolute')
cy.screenshot()
cy.get('.sticky-header').invoke('css', 'position', null)

----------------------------------------

TITLE: Title Assertion Example
DESCRIPTION: Example showing how to assert that a document's title matches an expected value.

LANGUAGE: javascript
CODE:
cy.title().should('eq', 'My Awesome Application')

----------------------------------------

TITLE: Session Cookie Validation After Login
DESCRIPTION: Example demonstrating how to check for a session cookie after login and validate its value

LANGUAGE: javascript
CODE:
// assume we just logged in
cy.contains('Login').click()
cy.url().should('include', 'profile')
// retries until cookie with value=189jd09su
// is found or default command timeout ends
cy.getCookie('session_id')
  .should('have.property', 'value', '189jd09su')
  .then((cookie) => {
    // cookie is an object with "domain", "name" and other properties
  })

----------------------------------------

TITLE: Logging Current Subject for Debugging in Cypress
DESCRIPTION: Shows how to use .debug() to log out the current subject after performing actions in Cypress tests.

LANGUAGE: javascript
CODE:
cy.get('.ls-btn').click({ force: true }).debug()

----------------------------------------

TITLE: Adding TypeScript Typings for cy.mount() Command in Vue
DESCRIPTION: Defines TypeScript type definitions for the custom cy.mount() command in Vue. This setup includes types for mount parameters and options.

LANGUAGE: typescript
CODE:
import { mount } from 'cypress/vue'

type MountParams = Parameters<typeof mount>
type OptionsParam = MountParams[1]

declare global {
  namespace Cypress {
    interface Chainable {
      mount: typeof mount
    }
  }
}

----------------------------------------

TITLE: Form Submit with Network Intercept in Cypress
DESCRIPTION: Example showing form submission with network request interception and fixture usage.

LANGUAGE: javascript
CODE:
cy.intercept('POST', '/users', { fixture: 'user' }).as('userSuccess')
cy.get('form').submit()

----------------------------------------

TITLE: Basic eq Command Syntax in Cypress
DESCRIPTION: Shows the different ways to use the eq command for selecting elements by index.

LANGUAGE: javascript
CODE:
.eq(index)
.eq(indexFromEnd)
.eq(index, options)
.eq(indexFromEnd, options)

----------------------------------------

TITLE: Asserting on Root Element in Cypress
DESCRIPTION: Demonstrates asserting on the root element and using root within a specific element context with assertions.

LANGUAGE: javascript
CODE:
cy.root().should('match', 'html')

cy.get('.query-ul').within(() => {
  cy.root().should('have.class', 'query-ul')
})

----------------------------------------

TITLE: Aliasing and Using DOM Elements in Cypress
DESCRIPTION: Example of aliasing a DOM element and then using cy.get() to access the aliased element in a test.

LANGUAGE: javascript
CODE:
it('disables on click', () => {
  cy.get('button[type=submit]').as('submitBtn')
  cy.get('@submitBtn').click().should('be.disabled')
})

----------------------------------------

TITLE: Stub with Custom Function Implementation
DESCRIPTION: Example showing how to replace a method with a custom function implementation using callsFake.

LANGUAGE: javascript
CODE:
// assume App.start calls util.addListeners
let listenersAdded = false

cy.stub(util, 'addListeners').callsFake(() => {
  listenersAdded = true
})

App.start()
expect(listenersAdded).to.be.true

----------------------------------------

TITLE: Implementing Microsoft Login Function in Cypress
DESCRIPTION: Custom function to perform Microsoft login using cy.origin() for cross-origin testing in Auth0 authentication flow.

LANGUAGE: javascript
CODE:
function logIntoMicrosoft(username: string, password: string, name: string) {
  cy.visit('http://localhost:3000')
  cy.get('#qsLoginBtn').click()

  cy.origin(Auth0Domain, () => {
    cy.scrollTo('bottom')
    cy.get('form[data-provider="windowslive"]').submit()
  })

  cy.origin(
    'login.live.com',
    {
      args: {
        username,
        password,
      },
    },
    ({ username, password }) => {
      cy.get('input[type="email"]').type(username)
      cy.get('input[type="submit"]').click()
      cy.get('input[type="password"]').type(password, {
        log: false,
      })
      cy.get('input[type="submit"]').click()
      cy.get('#idBtn_Back').click()
    }
  )

  cy.get('h6.dropdown-header').should('contain', name)
}

----------------------------------------

TITLE: Correct Title Command Usage
DESCRIPTION: Example showing proper usage of the title command to yield the document's title as a string.

LANGUAGE: javascript
CODE:
cy.title() // Yields the documents title as a string

----------------------------------------

TITLE: Invoking Show Method on Hidden Element in Cypress
DESCRIPTION: This example shows how to make a hidden element visible using the 'invoke' command before clicking on it.

LANGUAGE: javascript
CODE:
cy.get('.hidden').invoke('show').click()

----------------------------------------

TITLE: Basic Usage of Cypress wrap() Command
DESCRIPTION: Demonstrates the basic syntax and correct usage of the cy.wrap() command in Cypress.

LANGUAGE: javascript
CODE:
cy.wrap(subject)
cy.wrap(subject, options)

LANGUAGE: javascript
CODE:
cy.wrap({ name: 'Jane Lane' })

----------------------------------------

TITLE: Asserting Redirect Behavior Using cy.location() in Cypress
DESCRIPTION: Shows how to use cy.location() to assert that a redirect works correctly by checking the pathname after visiting a specific URL.

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:3000/admin')
cy.location('pathname').should('eq', '/login')

----------------------------------------

TITLE: Using Cypress Module API in Node.js Script
DESCRIPTION: Example Node.js script using Cypress Module API to programmatically control test runs.

LANGUAGE: javascript
CODE:
const cypress = require('cypress')
const server = require('./lib/my-server')

// start your server
return server.start().then(() => {
  // kick off a cypress run
  return cypress.run().then((results) => {
    // stop your server when it's complete
    return server.stop()
  })
})

----------------------------------------

TITLE: Handling App Ready State in Cypress
DESCRIPTION: Example showing how to wait for application readiness by checking window properties.

LANGUAGE: javascript
CODE:
// app.js
if (window.Cypress) {
  window.appReady = true
}

// spec.cy.js
beforeEach(() => {
  cy.visit('/')
  cy.window().should('have.property', 'appReady', true)
})

----------------------------------------

TITLE: Writing API Response to a Fixture File with Cypress
DESCRIPTION: Example of making an API request, writing the response to a fixture file, and then using the fixture in a test.

LANGUAGE: javascript
CODE:
cy.request('https://jsonplaceholder.typicode.com/users').then((response) => {
  cy.writeFile('cypress/fixtures/users.json', response.body)
})

// our fixture file is now generated and can be used
cy.fixture('users').then((users) => {
  expect(users[0].name).to.exist
})

----------------------------------------

TITLE: Syntax for Cypress closest Command
DESCRIPTION: Demonstrates the basic syntax for using the closest command in Cypress, including an optional options parameter.

LANGUAGE: javascript
CODE:
.closest(selector)
.closest(selector, options)

----------------------------------------

TITLE: Checking Element Focusability in Cypress
DESCRIPTION: This example shows how to use Cypress.dom.isFocusable to determine if an input element can receive focus.

LANGUAGE: javascript
CODE:
cy.get('input').then(($el) => {
  Cypress.dom.isFocusable($el) // true
})

----------------------------------------

TITLE: Locating Images by Alt Text in Cypress
DESCRIPTION: Shows how to use an accessibility-aware locator approach to find an image element by its alt text. This method combines element location with an accessibility check.

LANGUAGE: javascript
CODE:
// use the `alt` content to target the image
cy.get('img[alt="Cypress Logo"]').should('be.visible')

----------------------------------------

TITLE: Retrieving Cookies in Cypress
DESCRIPTION: Basic syntax for using the cy.getCookies() command in Cypress to retrieve browser cookies. It can be called without arguments or with an options object to customize behavior.

LANGUAGE: javascript
CODE:
cy.getCookies()
cy.getCookies(options)

----------------------------------------

TITLE: Stub with Aliases
DESCRIPTION: Example demonstrating how to use aliases with stubs for better identification in error messages and command log.

LANGUAGE: javascript
CODE:
const obj = {
  foo() {},
}
const stub = cy.stub(obj, 'foo').as('anyArgs')
const withFoo = stub.withArgs('foo').as('withFoo')

obj.foo()

expect(stub).to.be.called
cy.get('@withFoo').should('be.called') // purposefully failing assertion

----------------------------------------

TITLE: Handling Unhandled Promise Rejections in Cypress
DESCRIPTION: Example of how to conditionally turn off uncaught exception handling for unhandled promise rejections in Cypress.

LANGUAGE: javascript
CODE:
Cypress.on('uncaught:exception', (err, runnable, promise) => {
  // when the exception originated from an unhandled promise
  // rejection, the promise is provided as a third argument
  // you can turn off failing the test in this case
  if (promise) {
    return false
  }
  // we still want to ensure there are no other unexpected
  // errors, so we let them fail the test
})

----------------------------------------

TITLE: Chaining commands after taking a screenshot
DESCRIPTION: Demonstrates how to chain additional commands after capturing a screenshot.

LANGUAGE: javascript
CODE:
cy.get('button').first().screenshot().click()

----------------------------------------

TITLE: Basic Spread Command Syntax in Cypress
DESCRIPTION: Shows the basic syntax patterns for using the .spread() command in Cypress.

LANGUAGE: javascript
CODE:
.spread(callbackFn)
.spread(options, callbackFn)

----------------------------------------

TITLE: Overriding Specific Time Functions in Cypress
DESCRIPTION: Demonstrates how to override only specific time-related functions using cy.clock().

LANGUAGE: javascript
CODE:
cy.clock(null, ['setTimeout', 'clearTimeout'])

----------------------------------------

TITLE: Basic Contains Command Syntax
DESCRIPTION: Shows the different ways to use the contains command in Cypress, including with content, options, and selectors.

LANGUAGE: javascript
CODE:
.contains(content)
.contains(content, options)
.contains(selector, content)
.contains(selector, content, options)

// ---or---

cy.contains(content)
cy.contains(content, options)
cy.contains(selector, content)
cy.contains(selector, content, options)

----------------------------------------

TITLE: Custom Login Command Implementation
DESCRIPTION: Example of creating a custom login command that handles UI authentication flow

LANGUAGE: javascript
CODE:
Cypress.Commands.add('loginViaUi', (user) => {
  cy.session(
    user,
    () => {
      cy.visit('/login')
      cy.get('input[name=email]').type(user.email)
      cy.get('input[name=password]').type(user.password)
      cy.click('button#login')
      cy.get('h1').contains(`Welcome back ${user.name}!`)
    },
    {
      validate: () => {
        cy.getCookie('auth_key').should('exist')
      },
    }
  )
})

----------------------------------------

TITLE: Asserting Against Resolved Objects in Cypress
DESCRIPTION: Shows how to use cy.wrap() with application code to make assertions against resolved objects from promises.

LANGUAGE: javascript
CODE:
// import application code for logging in
import { userService } from '../../src/_services/user.service'

it('can assert against resolved object using .should', () => {
  cy.log('user service login')
  const username = Cypress.env('username')
  const password = Cypress.env('password')

  // wrap the promise returned by the application code
  cy.wrap(userService.login(username, password))
    // check the yielded object
    .should('be.an', 'object')
    .and('have.keys', ['firstName', 'lastName', 'username', 'id', 'token'])
    .and('contain', {
      username: 'test',
      firstName: 'Test',
      lastName: 'User',
    })

  // cy.visit command will wait for the promise returned from
  // the "userService.login" to resolve. Then local storage item is set
  // and the visit will immediately be authenticated and logged in
  cy.visit('/')
  // we should be logged in
  cy.contains('Hi Test!').should('be.visible')
})

----------------------------------------

TITLE: Using nextAll in Cypress to Get Following Siblings
DESCRIPTION: Demonstrates the correct usage of the nextAll command to retrieve all following siblings of a matched DOM element.

LANGUAGE: javascript
CODE:
cy.get('.active').nextAll() // Yield all links next to `.active`

----------------------------------------

TITLE: Reading File Contents with Cypress readFile Command
DESCRIPTION: Demonstrates the basic syntax and usage of the cy.readFile() command in Cypress for reading file contents.

LANGUAGE: javascript
CODE:
cy.readFile(filePath)
cy.readFile(filePath, encoding)
cy.readFile(filePath, options)
cy.readFile(filePath, encoding, options)

LANGUAGE: javascript
CODE:
cy.readFile('menu.json')

----------------------------------------

TITLE: Reloading Pages with Cypress
DESCRIPTION: Demonstrates various ways to use the cy.reload() command in Cypress, including basic usage, force reloading, and passing options.

LANGUAGE: javascript
CODE:
cy.reload()
cy.reload(forceReload)
cy.reload(options)
cy.reload(forceReload, options)

----------------------------------------

TITLE: Shadow DOM Element Interaction - HTML & JavaScript
DESCRIPTION: Example showing how to find and click a button inside shadow DOM, including both HTML structure and JavaScript implementation.

LANGUAGE: html
CODE:
<div class="shadow-host">
  #shadow-root
  <button class="my-button">Click me</button>
</div>

LANGUAGE: javascript
CODE:
// yields [#shadow-root (open)]
cy.get('.shadow-host').shadow().find('.my-button').click()

----------------------------------------

TITLE: Catching a Single Uncaught Exception in Cypress
DESCRIPTION: Example of how to catch a single uncaught exception within a test in Cypress using the 'uncaught:exception' event.

LANGUAGE: javascript
CODE:
it('is doing something very important', (done) => {
  // this event will automatically be unbound when this
  // test ends because it's attached to 'cy'
  cy.on('uncaught:exception', (err, runnable) => {
    expect(err.message).to.include('something about the error')

    // using mocha's async done callback to finish
    // this test so we prove that an uncaught exception
    // was thrown
    done()

    // return false to prevent the error from
    // failing this test
    return false
  })

  // assume this causes an error
  cy.get('button').click()
})

----------------------------------------

TITLE: Multiple Configuration Override
DESCRIPTION: Demonstrates how to override multiple configuration options simultaneously using an object.

LANGUAGE: javascript
CODE:
Cypress.config({
  defaultCommandTimeout: 10000,
  viewportHeight: 900,
})

Cypress.config() // => {defaultCommandTimeout: 10000, viewportHeight: 900, ...}

----------------------------------------

TITLE: Using prevAll in Cypress
DESCRIPTION: Demonstrates correct and incorrect usage of the prevAll command in Cypress. It shows how to chain prevAll off a DOM element selection and explains that it cannot be used directly on 'cy' or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.get('.active').prevAll() // Yield all links previous to `.active`

LANGUAGE: javascript
CODE:
cy.prevAll() // Errors, cannot be chained off 'cy'
cy.getCookies().prevAll() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Animation Control Configuration
DESCRIPTION: Configuring whether timers and animations should continue during screenshot capture

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  disableTimersAndAnimations: false,
})

----------------------------------------

TITLE: Proper Nesting of Cypress Commands
DESCRIPTION: Illustrates the correct way to structure Cypress commands without unnecessary nesting, including asserting on the response status.

LANGUAGE: javascript
CODE:
// Anti-pattern: placing Cypress commands inside .then callbacks
cy.wait('@alias')
  .then(() => {
    cy.get(...)
  })

// Recommended practice: write Cypress commands serially
cy.wait('@alias')
cy.get(...)

// Example: assert status from cy.intercept() before proceeding
cy.wait('@alias').its('response.statusCode').should('eq', 200)
cy.get(...)

----------------------------------------

TITLE: Basic Spy Syntax in Cypress
DESCRIPTION: Basic syntax for creating a spy on an object's method in Cypress.

LANGUAGE: javascript
CODE:
cy.spy(object, method)

----------------------------------------

TITLE: Saving a screenshot in a specific directory
DESCRIPTION: Demonstrates how to save a screenshot in a custom directory structure.

LANGUAGE: javascript
CODE:
// screenshot will be saved as
// cypress/screenshots/spec.cy.js/actions/login/clicking-login.png
cy.screenshot('actions/login/clicking-login')

----------------------------------------

TITLE: Manual Function Replacement with Stub
DESCRIPTION: Example showing how to manually replace a function with a stub and verify its usage.

LANGUAGE: javascript
CODE:
// assume App.start calls util.addListeners
util.addListeners = cy.stub()

App.start()
expect(util.addListeners).to.be.called

----------------------------------------

TITLE: Next Command with Selector Filter
DESCRIPTION: Shows how to use next() with a selector to filter matching elements.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li class="selected">pineapples</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>pineapples</li>
cy.get('li').next('.selected')

----------------------------------------

TITLE: Appending Content to a File with Cypress
DESCRIPTION: Example of appending content to an existing file using cy.writeFile() with the 'a+' flag in Cypress.

LANGUAGE: javascript
CODE:
cy.writeFile('path/to/message.txt', 'Hello World', { flag: 'a+' })

----------------------------------------

TITLE: Reading JSON File with Cypress readFile
DESCRIPTION: Demonstrates reading a JSON file and accessing its parsed contents using cy.readFile().

LANGUAGE: javascript
CODE:
cy.readFile('path/to/data.json').its('name').should('eq', 'Eliza') // true

----------------------------------------

TITLE: Using parent() Command in Cypress
DESCRIPTION: Demonstrates the basic syntax and usage of the parent() command in Cypress. It can be used without arguments, with a selector, or with options.

LANGUAGE: javascript
CODE:
.parent()
.parent(selector)
.parent(options)
.parent(selector, options)

----------------------------------------

TITLE: Using .then() with DOM elements in Cypress
DESCRIPTION: Demonstrates how to use .then() to work with a button element, accessing its class attribute and performing actions.

LANGUAGE: javascript
CODE:
cy.get('button').then(($btn) => {
  const cls = $btn.attr('class')

  cy.wrap($btn).click().should('not.have.class', cls)
})

----------------------------------------

TITLE: Writing File Content with Cypress
DESCRIPTION: Basic syntax for writing file content using cy.writeFile() in Cypress. Multiple variations are shown with different parameter combinations.

LANGUAGE: javascript
CODE:
cy.writeFile(filePath, contents)
cy.writeFile(filePath, contents, encoding)
cy.writeFile(filePath, contents, options)
cy.writeFile(filePath, contents, encoding, options)

----------------------------------------

TITLE: Cropping a screenshot to specific dimensions
DESCRIPTION: Shows how to crop a screenshot to a specific position and size using the clip option.

LANGUAGE: javascript
CODE:
// screenshot will be clipped 20px from the top and left
// to the dimensions 400px x 300px
cy.screenshot({ clip: { x: 20, y: 20, width: 400, height: 300 } })

----------------------------------------

TITLE: Setting Proxy on Windows PowerShell
DESCRIPTION: PowerShell commands for configuring proxy settings in Windows

LANGUAGE: powershell
CODE:
$env:HTTP_PROXY = "http://my-company-proxy.com"

----------------------------------------

TITLE: Real World Task Configuration in Cypress
DESCRIPTION: Example of configuring database-related tasks in Cypress including seeding and querying.

LANGUAGE: typescript
CODE:
on('task', {
  async 'db:seed'() {
    // seed database with test data
    const { data } = await axios.post(`${testDataApiEndpoint}/seed`)
    return data
  },

  // fetch test data from a database (MySQL, PostgreSQL, etc...)
  'filter:database'(queryPayload) {
    return queryDatabase(queryPayload, (data, attrs) =>
      _.filter(data.results, attrs)
    )
  },
  'find:database'(queryPayload) {
    return queryDatabase(queryPayload, (data, attrs) =>
      _.find(data.results, attrs)
    )
  },
})

----------------------------------------

TITLE: Complex Example with Network Intercept
DESCRIPTION: Comprehensive example showing .its() usage with network interception and assertions.

LANGUAGE: javascript
CODE:
cy.intercept('/comments', { fixture: 'comments.json' }).as('getComments')
cy.get('#fetch-comments').click()
cy.wait('@getComments')
  .its('response.body')
  .should(
    'deep.eq',
    JSON.stringify([
      { id: 1, comment: 'hi' },
      { id: 2, comment: 'there' },
    ])
  )

----------------------------------------

TITLE: Passing Props to Vue Components
DESCRIPTION: Demonstrates passing props to a Vue component during mounting

LANGUAGE: javascript
CODE:
cy.mount(Stepper, {
  props: {
    initial: 100,
  },
})

----------------------------------------

TITLE: Stub with Return Value
DESCRIPTION: Example showing how to specify a return value for a stubbed method.

LANGUAGE: javascript
CODE:
// assume App.start calls util.addListeners, which returns a function
// that removes the listeners
const removeStub = cy.stub()

cy.stub(util, 'addListeners').returns(removeStub)

App.start()
App.stop()
expect(removeStub).to.be.called

----------------------------------------

TITLE: Using Custom Video for Webcam Testing in Cypress
DESCRIPTION: Example of specifying a custom video file for webcam testing in Cypress, applicable to Chromium-based browsers.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  if (browser.family === 'chromium' && browser.name !== 'electron') {
    // Mac/Linux
    launchOptions.args.push(
      '--use-file-for-fake-video-capture=cypress/fixtures/my-video.y4m'
    )

    // Windows
    // launchOptions.args.push('--use-file-for-fake-video-capture=c:\\path\\to\\video\\my-video.y4m')
  }

  return launchOptions
})

----------------------------------------

TITLE: Basic Cypress.testingType Syntax
DESCRIPTION: Basic syntax showing how to access the Cypress.testingType property which returns either 'e2e' or 'component' based on the testing mode.

LANGUAGE: javascript
CODE:
Cypress.testingType // returns 'e2e' or 'component'

----------------------------------------

TITLE: Correct Right Click Usage - JavaScript
DESCRIPTION: Demonstrates correct ways to use the rightclick command on various DOM elements.

LANGUAGE: javascript
CODE:
cy.get('.menu').rightclick() // Right click on .menu
cy.focused().rightclick() // Right click on el with focus
cy.contains('Today').rightclick() // Right click on first el containing 'Today'

----------------------------------------

TITLE: Iterating Over DOM Elements with .each() in Cypress
DESCRIPTION: Demonstrates how to iterate over an array of DOM elements, performing conditional actions on each element.

LANGUAGE: javascript
CODE:
cy.get('ul>li').each(($el, index, $list) => {
  // $el is a wrapped jQuery element
  if ($el.someMethod() === 'something') {
    // wrap this element so we can
    // use cypress commands on it
    cy.wrap($el).click()
  } else {
    // do something else
  }
})

----------------------------------------

TITLE: Writing JSON to a File with Cypress
DESCRIPTION: Example of writing a JavaScript object as JSON to a file using cy.writeFile() and then reading it back to verify the content.

LANGUAGE: javascript
CODE:
cy.writeFile('path/to/data.json', { name: 'Eliza', email: 'eliza@example.com' })
cy.readFile('path/to/data.json').then((user) => {
  expect(user.name).to.equal('Eliza') // true
})

----------------------------------------

TITLE: Invoking Functions with Return Values
DESCRIPTION: Demonstrates how to use invoke to call a function and assert on its return value.

LANGUAGE: javascript
CODE:
const fn = () => {
  return 'bar'
}

cy.wrap({ foo: fn }).invoke('foo').should('eq', 'bar') // true

----------------------------------------

TITLE: Multiple Browser Detection in Cypress
DESCRIPTION: Example of checking for multiple browsers using an array with Cypress.isBrowser()

LANGUAGE: javascript
CODE:
it('colors rainbow', () => {
  // true when running in Electron or Chrome
  if (Cypress.isBrowser(['electron', 'chrome'])) {
    cy.get('.rainbox').should(
      'have.css',
      'conic-gradient(red, orange, yellow, green, blue)'
    )
  }
})

----------------------------------------

TITLE: Basic Document Command Syntax
DESCRIPTION: Basic syntax showing how to use the cy.document() command with and without options.

LANGUAGE: javascript
CODE:
cy.document()
cy.document(options)

----------------------------------------

TITLE: Correct Document Command Usage
DESCRIPTION: Example showing the correct way to use the document command to yield the window.document object.

LANGUAGE: javascript
CODE:
cy.document() // yield the window.document object

----------------------------------------

TITLE: Date Input Formatting - Cypress
DESCRIPTION: Shows how to type dates in the required yyyy-MM-dd format for date input fields.

LANGUAGE: javascript
CODE:
cy.get('input[type="date"]').type('1999-12-31')

----------------------------------------

TITLE: Login Message Example
DESCRIPTION: Shows how to use cy.log() to log a successful login action after a click event.

LANGUAGE: javascript
CODE:
cy.click('Login')
cy.log('Login successful')

----------------------------------------

TITLE: Selecting Option by Text Content
DESCRIPTION: Example of selecting an option using its text content with assertion.

LANGUAGE: html
CODE:
<select>
  <option value="456">apples</option>
  <option value="457">oranges</option>
  <option value="458">bananas</option>
</select>

LANGUAGE: javascript
CODE:
cy.get('select').select('apples').should('have.value', '456')

----------------------------------------

TITLE: Saving a screenshot with a specific filename
DESCRIPTION: Shows how to take a screenshot and save it with a custom filename.

LANGUAGE: javascript
CODE:
// screenshot will be saved as
// cypress/screenshots/spec.cy.js/clicking-on-nav.png
cy.screenshot('clicking-on-nav')

----------------------------------------

TITLE: Using Cookie Value in Subsequent Request
DESCRIPTION: Example showing how to store and use a cookie value in a later API request

LANGUAGE: javascript
CODE:
let cookie

cy.getCookie('session_id')
  .should('exist')
  .then((c) => {
    // save cookie until we need it
    cookie = c
  })

// some time later, force the "cy.request"
// to run ONLY after the cookie has been set
// by placing it inside ".then"
cy.get('#submit')
  .click()
  .then(() => {
    cy.request({
      url: '/api/admin',
      headers: {
        'my-token-x': cookie.value,
      },
    })
  })

----------------------------------------

TITLE: Using Cypress Wait with TypeScript and Aliased Intercepts
DESCRIPTION: Demonstrates how to use cy.wait() with TypeScript, including specifying request and response types for aliased intercepts and handling multiple aliases.

LANGUAGE: typescript
CODE:
// Specifying request and response types for aliased intercepts
type UserReq = {}
type UserRes = {}
type ActivityReq = {}
type ActivityRes = {}

cy.intercept('/users/*').as('getUsers')
cy.intercept('/activities/*').as('getActivities')

// As templated types:
cy.wait<UserReq, UserRes>('@getUsers').then(({ request, response }) => {
  request.body // will be of type UserReq
  response.body // will be of type UserRes
})

// As inferred types, with type `Interception` available in `cypress/types/net-stubbing`
cy.wait('@getUsers').then(
  ({ request, response }: Interception<UserReq, UserRes>) => {
    request.body // will be of type UserReq
    response.body // will be of type UserRes
  }
)

// When passing an array of aliases, types must be inferred:
cy.wait(['@getUsers', 'getActivities']).then(
  (
    interceptions: Array<
      Interception<UserReq | ActivityReq, UserRes | ActivityRes>
    >
  ) => {
    interceptions.forEach(({ request, response }) => {
      request.body // will be of type UserReq | ActivityReq
      response.body // will be of type UserRes | ActivityRes
    })
  }
)

----------------------------------------

TITLE: Asserting on Location's href in Cypress
DESCRIPTION: Shows how to make an assertion on the href property of the location object returned by cy.location().

LANGUAGE: javascript
CODE:
cy.location().should((loc) => {
  expect(loc.href).to.include('commands/querying')
})

----------------------------------------

TITLE: Demonstrating Original Array Yielding with .each() in Cypress
DESCRIPTION: Shows that .each() always yields the original array, regardless of what is returned in the callback function.

LANGUAGE: javascript
CODE:
cy.get('li')
  .should('have.length', 3)
  .each(($li, index, $lis) => {
    return 'something else'
  })
  .then(($lis) => {
    expect($lis).to.have.length(3) // true
  })

----------------------------------------

TITLE: Correct Filter Usage Example
DESCRIPTION: Demonstrates correct usage of the filter command to find elements with specific class.

LANGUAGE: javascript
CODE:
cy.get('td').filter('.users') // Yield all el's with class '.users'

----------------------------------------

TITLE: Using nextAll with a Selector in Cypress
DESCRIPTION: Shows how to use nextAll with a selector to find specific following siblings with a class 'selected' in an unordered list.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li class="selected">pineapples</li>
  <li>grapes</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>pineapples</li>
cy.get('li').nextAll('.selected')

----------------------------------------

TITLE: Filtering Elements by Text Content
DESCRIPTION: Examples of filtering elements using jQuery contains selector for text matching.

LANGUAGE: html
CODE:
<ul>
  <li>Home</li>
  <li>Services</li>
  <li>Advanced Services</li>
  <li>Pricing</li>
  <li>Contact</li>
</ul>

LANGUAGE: javascript
CODE:
cy.get('li').filter(':contains("Services")').should('have.length', 2)

----------------------------------------

TITLE: Initializing Cypress.SelectorPlayground with Custom Options in JavaScript
DESCRIPTION: Demonstrates how to set custom selector priority and define an onElement callback function for the Cypress.SelectorPlayground API. This allows for fine-tuning of how Cypress selects elements during testing.

LANGUAGE: javascript
CODE:
Cypress.SelectorPlayground.defaults({
  selectorPriority: ['id', 'class', 'attributes'],
})

LANGUAGE: javascript
CODE:
Cypress.SelectorPlayground.defaults({
  onElement: ($el) => {
    const customId = $el.attr('my-custom-attr')

    if (customId) {
      return `[my-custom-attr=${customId}]`
    }
  },
})

----------------------------------------

TITLE: Correct and Incorrect Syntax for Cypress.require
DESCRIPTION: Illustrates the correct and incorrect ways to write Cypress.require statements, emphasizing the requirement for a continuous string on one line.

LANGUAGE: javascript
CODE:
// ✅ GOOD
Cypress.require('lodash')

// ❌ BAD
const { require } = Cypress
require('lodash')

// ❌ BAD
Cypress
.require('lodash')

// ❌ BAD
Cypress . require('lodash')

// ❌ BAD
Cypress.require(
  'lodash'
)

----------------------------------------

TITLE: Basic Usage of cy.url() in Cypress
DESCRIPTION: Demonstrates the basic syntax and correct usage of the cy.url() command to yield the current URL as a string.

LANGUAGE: javascript
CODE:
cy.url() // Yields the current URL as a string

----------------------------------------

TITLE: ScrollTo with ensureScrollable Option
DESCRIPTION: Example showing how to handle potentially non-scrollable elements using the ensureScrollable option.

LANGUAGE: javascript
CODE:
// will move on to next command even if table is not scrollable
cy.get('table').scrollTo('bottom', { ensureScrollable: false })
cy.get('table').find('tr:last-child').should('be.visible')

----------------------------------------

TITLE: Setting Command Timeout via CLI
DESCRIPTION: Example showing how to configure the default command timeout using command line options.

LANGUAGE: shell
CODE:
cypress run --config defaultCommandTimeout=10000

----------------------------------------

TITLE: Example of Finding Closest Nav Element in Cypress Test
DESCRIPTION: Shows how to use the closest command to find the nearest nav element from an active list item in a Cypress test.

LANGUAGE: javascript
CODE:
cy.get('li.active').closest('.nav')

----------------------------------------

TITLE: Getting Parent of Active List Item in Cypress
DESCRIPTION: Example of using parent() to get the parent element of an active list item in an HTML structure.

LANGUAGE: html
CODE:
<ul class="main-nav">
  <li>Overview</li>
  <li>
    Getting started
    <ul class="sub-nav">
      <li>Install</li>
      <li class="active">Build</li>
      <li>Test</li>
    </ul>
  </li>
</ul>

LANGUAGE: javascript
CODE:
// yields .sub-nav
cy.get('li.active').parent()

----------------------------------------

TITLE: Forcing a Click with Position Argument in Cypress
DESCRIPTION: Demonstrates forcing a click on the bottom left of an element in Cypress.

LANGUAGE: javascript
CODE:
cy.get('#collapse-sidebar').click('bottomLeft', { force: true })

----------------------------------------

TITLE: Correct Select Usage Example
DESCRIPTION: Shows the proper way to use the select command to choose an option.

LANGUAGE: javascript
CODE:
cy.get('select').select('user-1') // Select the 'user-1' option

----------------------------------------

TITLE: Verifying jQuery Object in Cypress
DESCRIPTION: This snippet shows how to use Cypress.dom.isJquery to check if an object is a jQuery object.

LANGUAGE: javascript
CODE:
cy.get('input').then(($el) => {
  Cypress.dom.isJquery($el)
})

----------------------------------------

TITLE: Document Command with Callback
DESCRIPTION: Example showing how to work with the document object using a callback function.

LANGUAGE: javascript
CODE:
cy.document().then((doc) => {
  // work with document element
})

----------------------------------------

TITLE: Triggering Mouse Events in Cypress
DESCRIPTION: Examples of triggering various mouse events, including mouseover, long press, and specific mouse button events.

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mouseover') // yields 'button'

LANGUAGE: javascript
CODE:
cy.get('.target').trigger('mousedown')
cy.wait(1000)
cy.get('.target').trigger('mouseup')

LANGUAGE: javascript
CODE:
// Main button pressed (usually the left button)
cy.get('.target').trigger('mousedown', { button: 0 })
// Auxiliary button pressed (usually the middle button)
cy.get('.target').trigger('mousedown', { button: 1 })
//Secondary button pressed (usually the right button)
cy.get('.target').trigger('mousedown', { button: 2 })

----------------------------------------

TITLE: Correct Usage of getCookies in Cypress
DESCRIPTION: Demonstrates the correct way to use the cy.getCookies() command to retrieve cookies for the current domain in Cypress.

LANGUAGE: javascript
CODE:
cy.getCookies() // Get cookies for the currrent domain

----------------------------------------

TITLE: Using decode Option with cy.url() in Cypress
DESCRIPTION: Demonstrates how to use the decode option when the URL contains non-ASCII characters.

LANGUAGE: javascript
CODE:
// For the curious, '사랑' means 'love' in Korean.
cy.url({ decode: true }).should('contain', '사랑')

----------------------------------------

TITLE: ScrollIntoView with Linear Easing
DESCRIPTION: Example of using scrollIntoView with linear easing animation option.

LANGUAGE: javascript
CODE:
cy.get('.next-page').scrollIntoView({ easing: 'linear' })

----------------------------------------

TITLE: ScrollIntoView with Assertion Example
DESCRIPTION: Complete example showing scrolling to a horizontal button and asserting visibility.

LANGUAGE: javascript
CODE:
cy.get('#scroll-horizontal button').scrollIntoView().should('be.visible')

----------------------------------------

TITLE: Basic Cypress Buffer Method Syntax
DESCRIPTION: Demonstrates the correct syntax for calling Cypress.Buffer methods.

LANGUAGE: javascript
CODE:
Cypress.Buffer.method()

----------------------------------------

TITLE: Getting Current Test Title in Cypress
DESCRIPTION: Example showing how to access and verify the current test title using Cypress.currentTest.title within a test case.

LANGUAGE: javascript
CODE:
describe('app layout and responsiveness', () => {
  it('toggles the nav', () => {
    expect(Cypress.currentTest.title).to.eq('toggles the nav')
  })
})

----------------------------------------

TITLE: Defining Basic TypeScript Configuration
DESCRIPTION: Example of a basic TypeScript configuration object using defineConfig helper for code completion.

LANGUAGE: typescript
CODE:
{
  e2e: {
    baseUrl: 'http://localhost:1234',
  },
}

----------------------------------------

TITLE: Basic Window Command Usage in Cypress
DESCRIPTION: Basic syntax for accessing the window object using cy.window() command.

LANGUAGE: javascript
CODE:
cy.window()
cy.window(options)

----------------------------------------

TITLE: Clicking a Specific Corner of an Element in Cypress
DESCRIPTION: Shows how to click the top right corner of an image element using Cypress.

LANGUAGE: javascript
CODE:
cy.get('img').click('topRight')

----------------------------------------

TITLE: Wrapping Method with Spy
DESCRIPTION: Example of wrapping a utility method with a spy and asserting it was called.

LANGUAGE: javascript
CODE:
// assume App.start calls util.addListeners
cy.spy(util, 'addListeners')
App.start()
expect(util.addListeners).to.be.called

----------------------------------------

TITLE: Basic first() Command Syntax in Cypress
DESCRIPTION: Basic syntax examples showing how to use the first() command in Cypress.

LANGUAGE: javascript
CODE:
.first()
.first(options)

----------------------------------------

TITLE: Asserting on Window Alerts in Cypress
DESCRIPTION: Example of how to assert on the text content of window alerts in Cypress using the 'window:alert' event.

LANGUAGE: javascript
CODE:
// app code
$('button').on('click', (e) => {
  alert('hi')
  alert('there')
  alert('friend')
})

it('can assert on the alert text content', () => {
  const stub = cy.stub()

  cy.on('window:alert', stub)

  cy.get('button')
    .click()
    .then(() => {
      expect(stub.getCall(0)).to.be.calledWith('hi')
      expect(stub.getCall(1)).to.be.calledWith('there')
      expect(stub.getCall(2)).to.be.calledWith('friend')
    })
})

----------------------------------------

TITLE: Simulating Drag and Drop in Cypress
DESCRIPTION: Examples of simulating drag and drop actions using the 'trigger' command, including jQuery UI sortable and custom drag and drop.

LANGUAGE: javascript
CODE:
cy.get('[data-cy=draggable]')
  .trigger('mousedown', { which: 1, pageX: 600, pageY: 100 })
  .trigger('mousemove', { which: 1, pageX: 600, pageY: 600 })
  .trigger('mouseup')

----------------------------------------

TITLE: Configuring Event Options in Cypress Trigger Command
DESCRIPTION: Examples of using options to configure event behavior, such as preventing event bubbling or specifying exact coordinates.

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mouseover', { bubbles: false })

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mousemove', { clientX: 200, clientY: 300 })

----------------------------------------

TITLE: Forcing a Click in Cypress Regardless of Element State
DESCRIPTION: Shows how to force a click on an element, bypassing Cypress's actionability checks.

LANGUAGE: javascript
CODE:
cy.get('.close').as('closeBtn')
cy.get('@closeBtn').click({ force: true })

----------------------------------------

TITLE: Force Reloading a Page without Cache in Cypress
DESCRIPTION: Shows how to force reload a page without using the cache in Cypress, which is useful for testing with fresh data.

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:3000/admin')
cy.reload(true)

----------------------------------------

TITLE: Launching Chrome Browser
DESCRIPTION: Commands to launch different versions of Chrome browsers in Cypress.

LANGUAGE: shell
CODE:
cypress run --browser chrome
cypress run --browser chromium
cypress run --browser chrome:beta
cypress run --browser chrome:canary
cypress run --browser chrome-for-testing

----------------------------------------

TITLE: Correct Double-click Usage Examples in Cypress
DESCRIPTION: Demonstrates proper usage of the dblclick command with different element selectors.

LANGUAGE: javascript
CODE:
cy.get('button').dblclick() // Double click on button
cy.focused().dblclick() // Double click on el with focus
cy.contains('Welcome').dblclick() // Double click on first el containing 'Welcome'

----------------------------------------

TITLE: Specifying Encoding for cy.writeFile() in Cypress
DESCRIPTION: Examples of specifying encoding when writing files using cy.writeFile() in Cypress.

LANGUAGE: javascript
CODE:
cy.writeFile('path/to/ascii.txt', 'Hello World', 'ascii'))

LANGUAGE: javascript
CODE:
cy.writeFile('path/to/ascii.txt', 'Hello World', {
  encoding: 'ascii',
  flag: 'a+',
})

----------------------------------------

TITLE: Force Select on Hidden Element
DESCRIPTION: Demonstrates forcing selection on a hidden select element using the force option.

LANGUAGE: html
CODE:
<select style="display: none;">
  <optgroup label="Fruits">
    <option value="banana">Banana</option>
    <option value="apple">Apple</option>
  </optgroup>
  <optgroup></optgroup>
</select>

LANGUAGE: javascript
CODE:
cy.get('select')
  .select('banana', { force: true })
  .invoke('val')
  .should('eq', 'banana')

----------------------------------------

TITLE: Debugging Cookie Operations in Cypress
DESCRIPTION: Demonstrates how to enable cookie debugging and perform cookie operations to generate console logs.

LANGUAGE: javascript
CODE:
Cypress.Cookies.debug(true) // now Cypress will log when it alters cookies

cy.clearCookie('foo')
cy.setCookie('foo', 'bar')

----------------------------------------

TITLE: Using .prev() with Selector in Cypress
DESCRIPTION: Demonstrates using .prev() with a selector to find the previous element with a specific class.

LANGUAGE: html
CODE:
<ul>
  <li>Cockatiels</li>
  <li>Lorikeets</li>
  <li class="active">Cockatoos</li>
  <li>Conures</li>
  <li>Eclectus</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>Cockatoos</li>
cy.get('li').prev('.active')

----------------------------------------

TITLE: Complex .prev() Usage in Cypress
DESCRIPTION: Shows a more complex example of using .prev() to find the previous element of an active list item within a specific container.

LANGUAGE: javascript
CODE:
cy.get('.left-nav').find('li.active').prev()

----------------------------------------

TITLE: Using Cypress.platform for Conditional Logic in Cypress Tests
DESCRIPTION: Shows how to use Cypress.platform in a test to execute different commands based on the operating system. This example checks for JSON files using 'dir' on Windows and 'ls' on other platforms.

LANGUAGE: javascript
CODE:
it('has JSON files', () => {
  // if windows do one thing, else do another
  const cmd = Cypress.platform === 'win32' ? 'dir *.json' : 'ls *.json'

  cy.exec(cmd).its('stdout').should('include', 'package.json')
})

----------------------------------------

TITLE: Incorrect Usage of invoke Command
DESCRIPTION: Illustrates common mistakes when using the invoke command, such as chaining off 'cy' directly or invoking non-functions.

LANGUAGE: javascript
CODE:
cy.invoke('convert') // Errors, cannot be chained off 'cy'
cy.wrap({ name: 'Jane' }).invoke('name') // Errors, 'name' is not a function
cy.wrap({ animate: fn })
  .invoke('animate')
  .then(() => {}) // 'animate' will be called multiple times

----------------------------------------

TITLE: Reading Binary File with Cypress Buffer
DESCRIPTION: Example of reading a binary file (PNG image) and verifying it as a Buffer instance.

LANGUAGE: javascript
CODE:
cy.readFile('images/logo.png', null).then((file) => {
  expect(Cypress.Buffer.isBuffer(file)).to.be.true
  // Do something with `file` Buffer here
})

----------------------------------------

TITLE: Correct Next Command Usage Example
DESCRIPTION: Demonstrates the correct way to use the next() command to get the next link in navigation.

LANGUAGE: javascript
CODE:
cy.get('nav a:first').next() // Yield next link in nav

----------------------------------------

TITLE: Asserting on Parent Element in Cypress
DESCRIPTION: Example of using parent() command with an assertion to check the class of the parent element.

LANGUAGE: javascript
CODE:
cy.get('li.active').parent().should('have.class', 'nav')

----------------------------------------

TITLE: Handling Unhandled Rejected Promises with Cypress.Promise in JavaScript
DESCRIPTION: Shows how to register a callback to handle potentially unhandled rejected promises when using Cypress.Promise.

LANGUAGE: javascript
CODE:
Cypress.Promise.onPossiblyUnhandledRejection((error, promise) => {
  throw error
})

----------------------------------------

TITLE: Selector Example with Chaining
DESCRIPTION: Shows how to use Cypress.$ to select elements and chain assertions and actions.

LANGUAGE: javascript
CODE:
const $li = Cypress.$('ul li:first')

cy.wrap($li)
  .should('not.have.class', 'active')
  .click()
  .should('have.class', 'active')

----------------------------------------

TITLE: Setting Up Component Dev Server
DESCRIPTION: Example showing how to configure the dev server for component testing with React and webpack.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'create-react-app',
      bundler: 'webpack',
    },
  },
}

----------------------------------------

TITLE: Pausing and Stepping Through Click Commands
DESCRIPTION: Complex example showing how to use pause to step through multiple click commands on a canvas element in Cypress.

LANGUAGE: javascript
CODE:
cy.get('#action-canvas')
  .click(80, 75)
  .pause()
  .click(170, 75)
  .click(80, 165)
  .click(100, 185)
  .click(125, 190)
  .click(150, 185)
  .click(170, 165)

----------------------------------------

TITLE: ScrollIntoView with Offset
DESCRIPTION: Example of scrolling to an element with an additional offset adjustment.

LANGUAGE: javascript
CODE:
cy.get('#nav').scrollIntoView({ offset: { top: 150, left: 0 } })

----------------------------------------

TITLE: Configuring Cypress for Svelte with Vite
DESCRIPTION: This snippet shows the Cypress configuration for Svelte component testing using Vite as the bundler. It specifies the devServer settings with the framework and bundler options.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'svelte',
      bundler: 'vite',
    },
  },
}

----------------------------------------

TITLE: Image Upload Using Cypress.Blob
DESCRIPTION: Shows how to use Cypress.Blob to convert a base64 image fixture to a blob for file upload testing with jQuery File Upload plugin.

LANGUAGE: javascript
CODE:
cy.fixture('images/logo.png').as('logo')
cy.get('input[type=file]').then(function ($input) {
  const blob = Cypress.Blob.base64StringToBlob(this.logo, 'image/png')
  $input.fileupload('add', { files: blob })
})

----------------------------------------

TITLE: Alternative to End Command in Cypress
DESCRIPTION: Shows an alternative approach to using 'end' by starting a new chain of commands with 'cy'. This achieves the same result of resetting the context.

LANGUAGE: javascript
CODE:
cy.contains('User: Cheryl').click()
cy.contains('User: Charles').click() // contains looks for content in document now

----------------------------------------

TITLE: Using Cypress.require in cy.origin() Callback
DESCRIPTION: Demonstrates correct usage of Cypress.require within a cy.origin() callback to include lodash and a local utils module.

LANGUAGE: javascript
CODE:
cy.origin('cypress.io', () => {
  const _ = Cypress.require('lodash')
  const utils = Cypress.require('./utils')

  // ... use lodash and utils ...
})

----------------------------------------

TITLE: Writing a Buffer to a File with Cypress
DESCRIPTION: Example of writing a buffer directly to a file without encoding as a string using cy.writeFile() in Cypress.

LANGUAGE: javascript
CODE:
const filename = '/path/to/file.png'

cy.readFile(filename, null).then((obj) => {
  // <Buffer ef 3a bf ... >
  cy.writeFile(filename, obj, null)
})

----------------------------------------

TITLE: Taking a screenshot in a Cypress test
DESCRIPTION: Demonstrates how to take a screenshot within a test case and explains where the screenshot will be saved.

LANGUAGE: javascript
CODE:
describe('my tests', () => {
  it('takes a screenshot', () => {
    // screenshot will be saved as
    // cypress/screenshots/users.cy.js/my tests -- takes a screenshot.png
    cy.screenshot()
  })
})

----------------------------------------

TITLE: Correct Usage of parent() Command in Cypress
DESCRIPTION: Shows the correct way to use the parent() command, chaining it off a command that yields DOM elements.

LANGUAGE: javascript
CODE:
cy.get('header').parent() // Yield parent el of `header`

----------------------------------------

TITLE: Asserting File Non-Existence in Cypress
DESCRIPTION: Shows how to use cy.readFile() to assert that a file does not exist.

LANGUAGE: javascript
CODE:
// will pass if the file does not exist
cy.readFile('does-not-exist.yaml').should('not.exist')

----------------------------------------

TITLE: Table Row Selection Example
DESCRIPTION: Shows how to select and assert on a specific table row using eq.

LANGUAGE: html
CODE:
<table>
  <tr>
    <th>Breed</th>
    <th>Origin</th>
  </tr>
  <tr>
    <td>Siamese</td>
    <td>Thailand</td>
  </tr>
  <tr>
    <td>Sphynx</td>
    <td>Canada</td>
  </tr>
  <tr>
    <td>Persian</td>
    <td>Iran</td>
  </tr>
</table>

LANGUAGE: javascript
CODE:
cy.get('tr').eq(2).should('contain', 'Canada') //true

----------------------------------------

TITLE: Invoking jQuery Methods on DOM Elements
DESCRIPTION: Shows how to use invoke to call jQuery methods on DOM elements, such as show() to make hidden elements visible.

LANGUAGE: javascript
CODE:
cy.get('div.container')
  .should('be.hidden') // element is hidden
  .invoke('show') // call jquery method 'show' on the '.container'
  .should('be.visible') // element is visible now
  .find('input') // drill down into a child "input" element
  .type('Cypress is great') // and type text

----------------------------------------

TITLE: Correct ScrollIntoView Usage in Cypress
DESCRIPTION: Demonstrates the correct way to use scrollIntoView by chaining it from a DOM element selector.

LANGUAGE: javascript
CODE:
cy.get('footer').scrollIntoView() // Scrolls 'footer' into view

----------------------------------------

TITLE: Package.json Content Reading
DESCRIPTION: Example showing how to read package.json contents with platform-specific commands

LANGUAGE: javascript
CODE:
if (Cypress.platform === 'win32') {
  cy.exec('type package.json').its('stderr').should('be.empty')
} else {
  cy.exec('cat package.json').its('stderr').should('be.empty')
}

----------------------------------------

TITLE: Verifying Cookies After Login in Cypress
DESCRIPTION: Example of using cy.getCookies() to verify the presence of a session cookie after a user logs in. It checks the length of the cookie array and the properties of the first cookie.

LANGUAGE: javascript
CODE:
// assume we just logged in
cy.contains('Login').click()
cy.url().should('include', 'profile')
cy.getCookies()
  .should('have.length', 1)
  .then((cookies) => {
    expect(cookies[0]).to.have.property('name', 'session_id')
  })

----------------------------------------

TITLE: Import Statement Usage
DESCRIPTION: Demonstrates using import statements to load JSON fixtures via bundler.

LANGUAGE: javascript
CODE:
// cypress/e2e/spec.cy.js
import user from '../fixtures/user.json'
it('loads the same object', () => {
  cy.fixture('user').then((userFixture) => {
    expect(user, 'the same data').to.deep.equal(userFixture)
  })
})

----------------------------------------

TITLE: Asserting URL with cy.url() in Cypress
DESCRIPTION: Shows how to use cy.url() to assert the current URL after clicking a link, including partial and exact matching.

LANGUAGE: javascript
CODE:
// clicking the anchor causes the browser to follow the link
cy.get('#user-edit a').click()
cy.url().should('include', '/users/1/edit') // => true
cy.url().should('eq', 'http://localhost:8000/users/1/edit') // => true

----------------------------------------

TITLE: Handling 'cy...() failed because the element cannot be interacted with' error
DESCRIPTION: This error occurs when Cypress cannot interact with an element. You can force the interaction by using the {force: true} option.

LANGUAGE: javascript
CODE:
cy.get('[disabled]').click({force: true})

----------------------------------------

TITLE: Taking a screenshot of a specific element
DESCRIPTION: Demonstrates how to capture a screenshot of a particular element on the page.

LANGUAGE: javascript
CODE:
cy.get('.post').first().screenshot()

----------------------------------------

TITLE: Using nextUntil Command in Cypress
DESCRIPTION: The nextUntil command gets all following siblings of each DOM element in a set of matched DOM elements up to, but not including, the element provided. It can be used with selectors or DOM elements.

LANGUAGE: javascript
CODE:
.nextUntil(selector)
.nextUntil(selector, filter)
.nextUntil(selector, filter, options)
.nextUntil(element)
.nextUntil(element, filter)
.nextUntil(element, filter, options)

----------------------------------------

TITLE: Correct Usage of nextUntil Command in Cypress
DESCRIPTION: Example of correct usage of the nextUntil command, chained off a get command to yield siblings after 'div' until '.warning'.

LANGUAGE: javascript
CODE:
cy.get('div').nextUntil('.warning') // Yield siblings after 'div' until '.warning'

----------------------------------------

TITLE: Extracting Browser Version Data from Cypress Cloud API
DESCRIPTION: Example of how to query the Cypress Cloud API to retrieve data on browser versions tested in your organization over time. This endpoint provides detailed information on browser usage trends.

LANGUAGE: bash
CODE:
https://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=browser-versions-over-time&export_format=csv&start_date=2024-01-01

----------------------------------------

TITLE: Hash RegExp Matching Example
DESCRIPTION: Example demonstrating how to use regular expressions to match URL hashes.

LANGUAGE: html
CODE:
<ul id="users">
  <li>
    <a href="#/users/8fc45b67-d2e5-465a-b822-b281d9c8e4d1">Fred</a>
  </li>
</ul>

LANGUAGE: javascript
CODE:
cy.get('#users li').find('a').click()
cy.hash().should('match', /users\/.+$/) // => true

----------------------------------------

TITLE: Configuring Both E2E and Component Testing
DESCRIPTION: Example showing how to override default configuration options specifically for E2E and component testing.

LANGUAGE: typescript
CODE:
{
  defaultCommandTimeout: 5000,
  viewportWidth: 1000,
  viewportHeight: 600,
  component: {
    viewportWidth: 500,
    viewportHeight: 500,
  },
  e2e: {
    defaultCommandTimeout: 10000,
  },
}

----------------------------------------

TITLE: Using the screenshot command in Cypress
DESCRIPTION: Demonstrates various ways to use the screenshot command, including basic usage, specifying filenames, and using options.

LANGUAGE: javascript
CODE:
.screenshot()
.screenshot(fileName)
.screenshot(options)
.screenshot(fileName, options)

// ---or---

cy.screenshot()
cy.screenshot(fileName)
cy.screenshot(options)
cy.screenshot(fileName, options)

----------------------------------------

TITLE: Right Click with Key Modifiers - JavaScript
DESCRIPTION: Example of right clicking while holding command/meta key.

LANGUAGE: javascript
CODE:
cy.get('.menu-item').rightclick({
  metaKey: true,
})

----------------------------------------

TITLE: Reading File as Buffer in Cypress
DESCRIPTION: Demonstrates reading a file as a buffer using cy.readFile() with null encoding.

LANGUAGE: javascript
CODE:
cy.fixture('path/to/logo.png', null).then((logo) => {
  // logo will be read as a buffer
  // and should look something like this:
  // Buffer([0, 0, ...])
})

----------------------------------------

TITLE: Hash Assertion Example
DESCRIPTION: Example showing how to assert that a hash matches a specific value.

LANGUAGE: javascript
CODE:
// yields #/users/1
cy.hash().should('eq', '#/users/1') // => true

----------------------------------------

TITLE: Cypress.$ jQuery Utility Functions
DESCRIPTION: Demonstrates using jQuery utility functions with Cypress.$ compared to global jQuery.

LANGUAGE: javascript
CODE:
Cypress.$.each([1, 2, 3], (index, value) => {
  expect(index).to.eq(value)
}) // works

----------------------------------------

TITLE: Basic Syntax of .within() Command in Cypress
DESCRIPTION: Shows the basic syntax for using the .within() command in Cypress tests. It can be called with just a callback function or with options and a callback.

LANGUAGE: javascript
CODE:
.within(callbackFn)
.within(options, callbackFn)

----------------------------------------

TITLE: Incorrect Usage of check() Command in Cypress
DESCRIPTION: Shows examples of incorrect usage of the check() command, which will result in errors.

LANGUAGE: javascript
CODE:
cy.check('[type="checkbox"]') // Errors, cannot be chained off 'cy'
cy.get('p:first').check() // Errors, '.get()' does not yield checkbox or radio

----------------------------------------

TITLE: Passing Environment Variables via CLI
DESCRIPTION: Demonstrates how to pass environment variables as options when using the Cypress CLI tool.

LANGUAGE: shell
CODE:
cypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1

----------------------------------------

TITLE: Finding All Siblings Following a Specific Element
DESCRIPTION: Demonstrates how to use nextAll to find all siblings following an element with class 'second' in an unordered list.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li class="second">oranges</li>
  <li>bananas</li>
  <li>pineapples</li>
  <li>grapes</li>
</ul>

LANGUAGE: javascript
CODE:
// yields [<li>bananas</li>, <li>pineapples</li>, <li>grapes</li>]
cy.get('.second').nextAll()

----------------------------------------

TITLE: Getting Specific Sibling by Selector
DESCRIPTION: Example showing how to get specific siblings using a class selector.

LANGUAGE: javascript
CODE:
// yields <li class="active">Services</li>
cy.get('li').siblings('.active')

----------------------------------------

TITLE: Enabling Debug Logging for Cypress Events
DESCRIPTION: Example of how to enable debug logging for all Cypress events using localStorage.

LANGUAGE: javascript
CODE:
localStorage.debug = 'cypress:*'

----------------------------------------

TITLE: Using Root Command Within a Form in Cypress
DESCRIPTION: Shows how to use the root command within a form context to submit the form after filling in input fields.

LANGUAGE: javascript
CODE:
cy.get('form').within(($form) => {
  cy.get('input[name="email"]').type('john.doe@email.com')
  cy.get('input[name="password"]').type('password')
  cy.root().submit() // submits the form yielded from 'within'
})

----------------------------------------

TITLE: Multiple Right Clicks - JavaScript
DESCRIPTION: Example of right clicking multiple elements using the multiple option.

LANGUAGE: javascript
CODE:
cy.get('.open-menu').rightclick({ multiple: true })

----------------------------------------

TITLE: Using the onAfterScreenshot callback
DESCRIPTION: Shows how to use the onAfterScreenshot callback to access information about the captured screenshot.

LANGUAGE: javascript
CODE:
cy.screenshot('my-screenshot', {
  onAfterScreenshot($el, props) {
    // props has information about the screenshot,
    // including but not limited to the following:
    // {
    //   name: 'my-screenshot',
    //   path: '/Users/janelane/project/screenshots/spec.cy.js/my-screenshot.png',
    //   size: '15 kb',
    //   dimensions: {
    //     width: 1000,
    //     height: 660,
    //   },
    //   scaled: true,
    //   blackout: [],
    //   duration: 2300,
    // }
  },
})

----------------------------------------

TITLE: Complete siblings() Command Example
DESCRIPTION: Shows a complete example of finding siblings of an active element in a navigation menu.

LANGUAGE: javascript
CODE:
cy.get('.left-nav').find('li.active').siblings()

----------------------------------------

TITLE: Incorrect Usage Examples of siblings() Command
DESCRIPTION: Shows invalid usage patterns that will result in errors.

LANGUAGE: javascript
CODE:
cy.siblings('.error') // Errors, cannot be chained off 'cy'
cy.clock().siblings() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Complex Assertion on Focused Element in Cypress
DESCRIPTION: Example showing multiple chained assertions on a focused element.

LANGUAGE: javascript
CODE:
cy.focused().should('have.attr', 'name').and('eq', 'num')

----------------------------------------

TITLE: Special Character Sequences - Cypress
DESCRIPTION: Example of using special character sequences for keyboard shortcuts and combinations.

LANGUAGE: javascript
CODE:
cy.get('input').type('{shift+alt+b}hello')

----------------------------------------

TITLE: Setting Environment Variables in Cypress Configuration
DESCRIPTION: Shows how to set environment variables in the Cypress configuration file under the env key.

LANGUAGE: javascript
CODE:
{
  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',
  env: {
    login_url: '/login',
    products_url: '/products'
  }
}

----------------------------------------

TITLE: prevAll Command Syntax in Cypress
DESCRIPTION: Shows various syntax options for the prevAll command in Cypress, including usage without arguments, with a selector, with options, or with both selector and options.

LANGUAGE: javascript
CODE:
.prevAll()
.prevAll(selector)
.prevAll(options)
.prevAll(selector, options)

----------------------------------------

TITLE: Incorrect Next Command Usage Examples
DESCRIPTION: Shows incorrect usage patterns that will result in errors.

LANGUAGE: javascript
CODE:
cy.next() // Errors, cannot be chained off 'cy'
cy.getCookies().next() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Double-click with Coordinates in Cypress
DESCRIPTION: Example of double-clicking an element at specific coordinates relative to its top-left corner.

LANGUAGE: javascript
CODE:
cy.get('button').dblclick(30, 10)

----------------------------------------

TITLE: Unchecking Checkboxes in Cypress
DESCRIPTION: Demonstrates the basic syntax for using the uncheck command in Cypress to uncheck checkbox elements.

LANGUAGE: javascript
CODE:
.uncheck()
.uncheck(value)
.uncheck(values)
.uncheck(options)
.uncheck(value, options)
.uncheck(values, options)

----------------------------------------

TITLE: Configuring Cypress for Angular Component Testing
DESCRIPTION: This snippet shows the basic Cypress configuration for Angular component testing. It specifies the devServer framework as Angular, uses webpack as the bundler, and sets the spec pattern for test files.

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'angular',
      bundler: 'webpack',
    },
    specPattern: '**/*.cy.ts',
  },
}

----------------------------------------

TITLE: Using nextUntil with Selectors in Cypress
DESCRIPTION: Example of using the nextUntil command with selectors to find all of the element's siblings following '#veggies' until '#nuts' in an HTML list.

LANGUAGE: html
CODE:
<ul>
  <li id="fruits" class="header">Fruits</li>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li id="veggies" class="header">Vegetables</li>
  <li>cucumbers</li>
  <li>carrots</li>
  <li>corn</li>
  <li id="nuts" class="header">Nuts</li>
  <li>walnuts</li>
  <li>cashews</li>
  <li>almonds</li>
</ul>

LANGUAGE: javascript
CODE:
//returns [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]
cy.get('#veggies').nextUntil('#nuts')

----------------------------------------

TITLE: Correct and Incorrect Usage of prevUntil
DESCRIPTION: Demonstrates the proper way to use prevUntil command and common incorrect usage patterns that will result in errors.

LANGUAGE: javascript
CODE:
cy.get('p').prevUntil('.intro') // Yield siblings before 'p' until '.intro'

LANGUAGE: javascript
CODE:
cy.prevUntil() // Errors, cannot be chained off 'cy'
cy.location().prevUntil('path') // Errors, 'location' does not yield DOM element

----------------------------------------

TITLE: Conditional Logic Based on CPU Architecture
DESCRIPTION: Example showing how to implement conditional test logic based on the CPU architecture type.

LANGUAGE: javascript
CODE:
it('does something differently', () => {
  if (Cypress.arch === 'x64') {
    cy.exec('something')
  } else {
    cy.exec('something else')
  }
})

----------------------------------------

TITLE: Hash Command with Assertion
DESCRIPTION: Example showing hash command with a specific assertion for a users page.

LANGUAGE: javascript
CODE:
cy.hash().should('eq', '#users/new')

----------------------------------------

TITLE: Illustrating Incorrect Usage of .each() in Cypress
DESCRIPTION: Demonstrates incorrect ways to use the .each() command, which will result in errors.

LANGUAGE: javascript
CODE:
cy.each(() => {...})            // Errors, cannot be chained off 'cy'
cy.clock().each(() => {...})    // Errors, 'clock' does not yield an array

----------------------------------------

TITLE: Basic Cypress.Blob Method Syntax
DESCRIPTION: Demonstrates the basic syntax for calling Cypress.Blob methods.

LANGUAGE: javascript
CODE:
Cypress.Blob.method()

----------------------------------------

TITLE: Setting Environment Variables in Test Configuration
DESCRIPTION: Shows how to set environment variables for specific suites or tests using test configuration.

LANGUAGE: javascript
CODE:
describe(
  'test against Spanish content',
  {
    env: {
      language: 'es',
    },
  },
  () => {
    it('displays Spanish', () => {
      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)
      cy.contains('¿Por qué Cypress?')
    })
  }
)

----------------------------------------

TITLE: Checking Location for Query Params and Pathname in Cypress
DESCRIPTION: Demonstrates how to check the location object for specific query parameters and pathname after performing an action in a Cypress test.

LANGUAGE: javascript
CODE:
cy.get('#search').type('niklas{enter}')
cy.location().should((loc) => {
  expect(loc.search).to.eq('?search=niklas')
  expect(loc.pathname).to.eq('/users')
})

----------------------------------------

TITLE: Invoking jQuery Methods for Attribute Assertion
DESCRIPTION: Demonstrates how to use invoke to call jQuery methods for asserting on element attributes.

LANGUAGE: javascript
CODE:
cy.contains('The code example')
  .invoke('attr', 'id')
  .should('equal', 'code-snippet')

----------------------------------------

TITLE: Incorrect Usage of Cypress End Command
DESCRIPTION: Illustrates an incorrect usage of the 'end' command in Cypress. The 'end' command cannot be used directly on the 'cy' object.

LANGUAGE: javascript
CODE:
cy.end()

----------------------------------------

TITLE: Basic Cypress Cookies Debug Method Syntax
DESCRIPTION: Shows the basic syntax for enabling cookie debugging in Cypress with optional configuration parameters.

LANGUAGE: javascript
CODE:
Cypress.Cookies.debug(enable, options)

----------------------------------------

TITLE: Basic prevUntil Syntax in Cypress
DESCRIPTION: Shows the different syntax variations for using the prevUntil command with selectors, elements, filters and options.

LANGUAGE: javascript
CODE:
.prevUntil(selector)
.prevUntil(selector, filter)
.prevUntil(selector, filter, options)
.prevUntil(element)
.prevUntil(element, filter)
.prevUntil(element, filter, options)

----------------------------------------

TITLE: Managing Video Deletion for Passed Tests
DESCRIPTION: Implementation of after:spec event handler to delete videos for test specs that passed without failures or retries.

LANGUAGE: typescript
CODE:
import fs from 'fs'


LANGUAGE: typescript
CODE:
on(
  'after:spec',
  (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {
    if (results && results.video) {
      // Do we have failures for any retry attempts?
      const failures = results.tests.some((test) =>
        test.attempts.some((attempt) => attempt.state === 'failed')
      )
      if (!failures) {
        // delete the video if the spec passed and no tests retried
        fs.unlinkSync(results.video)
      }
    }
  }
)

----------------------------------------

TITLE: User Token Scopes for Slack Integration
DESCRIPTION: Required Slack API scopes for user-level permissions in the Cypress integration.

LANGUAGE: plaintext
CODE:
links:read
links:write

----------------------------------------

TITLE: Incorrect Filter Usage Examples
DESCRIPTION: Shows incorrect ways to use the filter command that will result in errors.

LANGUAGE: javascript
CODE:
cy.filter('.animated') // Errors, cannot be chained off 'cy'
cy.clock().filter() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Verifying Element Visibility in Cypress
DESCRIPTION: This snippet uses Cypress.dom.isVisible to check if an image element is visible.

LANGUAGE: javascript
CODE:
cy.get('img').then(($el) => {
  Cypress.dom.isVisible($el) // true
})

----------------------------------------

TITLE: Setting Cypress Keyboard Defaults
DESCRIPTION: Basic syntax for configuring Cypress.Keyboard defaults with options object parameter.

LANGUAGE: javascript
CODE:
Cypress.Keyboard.defaults(options)

----------------------------------------

TITLE: Setting OS-level Environment Variables for Cypress
DESCRIPTION: Shows how to set OS-level environment variables that Cypress will automatically parse if they start with CYPRESS_ or cypress_.

LANGUAGE: shell
CODE:
export CYPRESS_VIEWPORT_WIDTH=800
export CYPRESS_VIEWPORT_HEIGHT=600

----------------------------------------

TITLE: Arguments Logging Example
DESCRIPTION: Demonstrates logging a message with additional arguments to the Command Log.

LANGUAGE: javascript
CODE:
cy.log('events triggered', events)

----------------------------------------

TITLE: Getting Last List Item Example in Cypress
DESCRIPTION: Shows how to use .last() to select the final item from a list of DOM elements.

LANGUAGE: javascript
CODE:
// yields <li class="four">Knick knack on my door</li>
cy.get('li').last()

----------------------------------------

TITLE: Disable Stub Logging
DESCRIPTION: Example showing how to disable stub logging in the Command Log using the log() method.

LANGUAGE: javascript
CODE:
const obj = {
  foo() {},
}
const stub = cy.stub(obj, 'foo').log(false)

----------------------------------------

TITLE: Basic Cypress exec Command Syntax
DESCRIPTION: Basic syntax for executing system commands using cy.exec()

LANGUAGE: javascript
CODE:
cy.exec(command)
cy.exec(command, options)

----------------------------------------

TITLE: Handling Promises with Cypress wrap()
DESCRIPTION: Illustrates how cy.wrap() can be used to handle promises in Cypress tests, automatically waiting for resolution.

LANGUAGE: javascript
CODE:
const myPromise = new Promise((resolve, reject) => {
  // we use setTimeout(...) to simulate async code.
  setTimeout(() => {
    resolve({
      type: 'success',
      message: 'It worked!',
    })
  }, 2500)
})

it('should wait for promises to resolve', () => {
  cy.wrap(myPromise).its('message').should('eq', 'It worked!')
})

----------------------------------------

TITLE: Verifying DOM Element Type in Cypress
DESCRIPTION: This snippet uses Cypress.dom.isElement to check if an object is a DOM element.

LANGUAGE: javascript
CODE:
cy.get('p').then(($el) => {
  Cypress.dom.isElement($el) // true
})

----------------------------------------

TITLE: Filtering Elements with Non-breaking Space
DESCRIPTION: Shows how to handle non-breaking space characters when filtering elements.

LANGUAGE: html
CODE:
<div data-testid="testattr">
  <span>Hello&nbsp;world</span>
</div>

LANGUAGE: javascript
CODE:
cy.get('[data-testid="testattr"]').filter(':contains("Hello\u00a0world")')

----------------------------------------

TITLE: Merging Mochawesome JSON Reports
DESCRIPTION: Demonstrates how to merge multiple Mochawesome JSON reports into a single file using the command line.

LANGUAGE: shell
CODE:
npx mochawesome-merge "cypress/results/*.json" > mochawesome.json

----------------------------------------

TITLE: Basic Double-click Command Syntax in Cypress
DESCRIPTION: Shows the different syntax variations for using the dblclick command in Cypress.

LANGUAGE: javascript
CODE:
.dblclick()
.dblclick(options)
.dblclick(position)
.dblclick(position, options)
.dblclick(x, y)
.dblclick(x, y, options)

----------------------------------------

TITLE: Setting Firefox Flags in Cypress
DESCRIPTION: Example of setting specific Firefox flags, such as 'browser.send_pings', in Cypress tests using browser preferences.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  if (browser.family === 'firefox') {
    launchOptions.preferences['browser.send_pings'] = true
  }

  return launchOptions
})

----------------------------------------

TITLE: HTML List Example Structure
DESCRIPTION: Sample HTML structure showing a list of items to demonstrate first() usage.

LANGUAGE: html
CODE:
<ul>
  <li class="one">Knick knack on my thumb</li>
  <li class="two">Knick knack on my shoe</li>
  <li class="three">Knick knack on my knee</li>
  <li class="four">Knick knack on my door</li>
</ul>

----------------------------------------

TITLE: Correct Usage of cy.clearCookies() in Cypress
DESCRIPTION: Shows the correct way to use the clearCookies command to clear cookies for the current domain in a Cypress test.

LANGUAGE: javascript
CODE:
cy.clearCookies() // Clear cookies for the currrent domain

----------------------------------------

TITLE: Correct Usage Example
DESCRIPTION: Demonstrates the correct way to use cy.log() with a simple message.

LANGUAGE: javascript
CODE:
cy.log('created new user')

----------------------------------------

TITLE: Correct Usage of Last Command in Cypress
DESCRIPTION: Demonstrates the correct way to use the .last() command to select the last link in a navigation element.

LANGUAGE: javascript
CODE:
cy.get('nav a').last() // Yield last link in nav

----------------------------------------

TITLE: Overriding Device Pixel Ratio in Cypress
DESCRIPTION: Example of forcing the screen to behave like a retina display when running Chrome in headless mode for Cypress tests.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser, launchOptions) => {
  if (browser.name === 'chrome' && browser.isHeadless) {
    // force screen to behave like retina
    // when running Chrome headless browsers
    // (2560x1440 in size by default)
    launchOptions.args.push('--force-device-scale-factor=2')
  }

  return launchOptions
})

----------------------------------------

TITLE: Using End Command in Cypress Chain
DESCRIPTION: Demonstrates how to use the 'end' command in a chain of Cypress commands. It's used to reset the context for subsequent commands.

LANGUAGE: javascript
CODE:
cy.contains('User: Cheryl')
  .click()
  .end() // yield null
  .contains('User: Charles')
  .click() // contains looks for content in document now

----------------------------------------

TITLE: Checking Window Object in Cypress
DESCRIPTION: This example shows how to use Cypress.dom.isWindow to verify if an object is a window object.

LANGUAGE: javascript
CODE:
cy.get(window).then(($el) => {
  Cypress.dom.isWindow($el) // true
})

----------------------------------------

TITLE: Script Execution with Output Assertion
DESCRIPTION: Example showing how to run a script and assert its output content

LANGUAGE: javascript
CODE:
cy.exec('npm run my-script')
  .its('stdout')
  .should('contain', 'Done running the script')

----------------------------------------

TITLE: Incorrect Usage of .find() in Cypress
DESCRIPTION: Examples showing incorrect usage patterns that will result in errors.

LANGUAGE: javascript
CODE:
cy.find('.progress') // Errors, cannot be chained off 'cy'
cy.exec('node start').find() // Errors, 'exec' does not yield DOM element

----------------------------------------

TITLE: Cypress isCy Basic Syntax
DESCRIPTION: Basic syntax for using Cypress.isCy() method which takes an object parameter and returns a boolean indicating if it's a valid Cypress chainable.

LANGUAGE: javascript
CODE:
Cypress.isCy(obj)

----------------------------------------

TITLE: Configuring Browser Environment in Cypress
DESCRIPTION: Example of setting custom environment variables for the browser in Cypress tests. This is not supported when targeting Electron.

LANGUAGE: javascript
CODE:
on('before:browser:launch', (browser, launchOptions) => {
  launchOptions.env.CUSTOM_ENV_VALUE = '1'

  return launchOptions
})

----------------------------------------

TITLE: Asserting on Focused Element in Cypress
DESCRIPTION: Example demonstrating how to make assertions on the focused element's attributes.

LANGUAGE: javascript
CODE:
cy.focused().should('have.attr', 'name', 'username')

----------------------------------------

TITLE: Debugging After .get() in Cypress
DESCRIPTION: Demonstrates how to pause with a debugger after using the .get() command in Cypress, followed by an assertion.

LANGUAGE: javascript
CODE:
cy.get('a').debug().should('have.attr', 'href')

----------------------------------------

TITLE: Basic Cypress Log Command Syntax
DESCRIPTION: Basic syntax examples for the cy.log() command showing both single message and multiple arguments usage.

LANGUAGE: javascript
CODE:
cy.log(message)
cy.log(message, args...)

----------------------------------------

TITLE: Waiting for Promises with Cypress.Promise in JavaScript
DESCRIPTION: Demonstrates a more complex example of using Cypress.Promise to create a promise that resolves after one second, and how Cypress waits for this promise to resolve before continuing the test.

LANGUAGE: javascript
CODE:
it('waits for promises to resolve', () => {
  let waited = false

  function waitOneSecond() {
    // return a promise that resolves after 1 second
    return new Cypress.Promise((resolve, reject) => {
      setTimeout(() => {
        // set waited to true
        waited = true

        // resolve with 'foo' string
        resolve('foo')
      }, 1000)
    })
  }

  cy.wrap(null).then(() => {
    // return a promise to cy.then() that
    // is awaited until it resolves
    return waitOneSecond().then((str) => {
      expect(str).to.eq('foo')
      expect(waited).to.be.true
    })
  })
})

----------------------------------------

TITLE: Basic Last Command Syntax in Cypress
DESCRIPTION: Shows the basic syntax for using the .last() command in Cypress, including options parameter.

LANGUAGE: javascript
CODE:
.last()
.last(options)

----------------------------------------

TITLE: Resetting Viewport via Cypress Configuration
DESCRIPTION: Demonstrates how to change the default viewport size for the remainder of the tests using Cypress.config().

LANGUAGE: javascript
CODE:
Cypress.config('viewportWidth', 800)
Cypress.config('viewportWidth') // => 800

----------------------------------------

TITLE: Launching Electron Browser Headed Mode
DESCRIPTION: Command to launch Electron browser in headed mode during Cypress test execution.

LANGUAGE: shell
CODE:
cypress run --headed

----------------------------------------

TITLE: Verifying Cookie Clearing in Cypress Tests
DESCRIPTION: Shows how to verify that cookies have been cleared by checking the cookie count before and after using cy.clearCookies().

LANGUAGE: javascript
CODE:
cy.getCookies().should('have.length', 1)
cy.clearCookies()
cy.getCookies().should('be.empty')

----------------------------------------

TITLE: CircleCI Configuration for Parallelized Multi-Browser Testing
DESCRIPTION: This YAML configuration demonstrates how to set up parallelized test execution for Chrome and Firefox with different levels of parallelism and test subsets.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  build:
    jobs:
      - cypress/run:
          name: Chrome
          cypress-command: 'npx cypress run --record --parallel --group chrome --browser chrome'
          start-command: 'npm start'
          parallelism: 4
          install-browsers: true
      - cypress/run:
          name: Firefox
          cypress-command:
            'npx cypress run --record --parallel --group firefox --browser
            firefox --spec
            cypress/e2e/app.cy.js,cypress/e2e/login.cy.js,cypress/e2e/about.cy.js'
          start-command: 'npm start'
          parallelism: 2
          install-browsers: true

----------------------------------------

TITLE: Basic Usage Example
DESCRIPTION: Example showing correct usage of cy.exec() to run an npm build command

LANGUAGE: javascript
CODE:
cy.exec('npm run build')

----------------------------------------

TITLE: Incorrect Usage of Cypress Spread Command
DESCRIPTION: Shows invalid ways of using the .spread() command that will result in errors.

LANGUAGE: javascript
CODE:
cy.spread(() => {}) // Errors, cannot be chained off 'cy'
cy.clock().spread() // Errors, 'clock' does not yield an array

----------------------------------------

TITLE: Unchecking Multiple Checkboxes by Values in Cypress
DESCRIPTION: Demonstrates how to uncheck multiple checkboxes with specific values using the uncheck command.

LANGUAGE: javascript
CODE:
cy.get('[type="checkbox"]').uncheck(['ga', 'ca'])

----------------------------------------

TITLE: Testing Multiple Viewports Dynamically
DESCRIPTION: Demonstrates how to iterate through an array of viewport sizes to test responsiveness.

LANGUAGE: javascript
CODE:
const sizes = ['iphone-6', 'ipad-2', [1024, 768]]

describe('Logo', () => {
  sizes.forEach((size) => {
    // make assertions on the logo using
    // an array of different viewports
    it(`Should display logo on ${size} screen`, () => {
      if (Cypress._.isArray(size)) {
        cy.viewport(size[0], size[1])
      } else {
        cy.viewport(size)
      }

      -{cy.visit('https://example.cypress.io')::cy.mount(<MyComponent />)}-
      cy.get('#logo').should('be.visible')
    })
  })
})

----------------------------------------

TITLE: Correct Usage of Focused Command in Cypress
DESCRIPTION: Example showing the correct way to use the focused command to yield the element currently in focus.

LANGUAGE: javascript
CODE:
cy.focused() // Yields the element currently in focus

----------------------------------------

TITLE: Incorrect Usage of first() Command
DESCRIPTION: Examples showing incorrect usage of the first() command that will result in errors.

LANGUAGE: javascript
CODE:
cy.first() // Errors, cannot be chained off 'cy'
cy.getCookies().first() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Getting Focused Element with Callback in Cypress
DESCRIPTION: Example demonstrating how to work with a focused element using a callback function.

LANGUAGE: javascript
CODE:
cy.focused().then(($el) => {
  // do something with $el
})

----------------------------------------

TITLE: Invoking Functions with Cypress
DESCRIPTION: Demonstrates the basic syntax for using the invoke command in Cypress, including various argument patterns.

LANGUAGE: javascript
CODE:
.invoke(functionName)
.invoke(options, functionName)
.invoke(functionName, args...)
.invoke(options, functionName, args...)

----------------------------------------

TITLE: ScrollTo with Options
DESCRIPTION: Examples of using scrollTo with various options like easing and duration.

LANGUAGE: javascript
CODE:
cy.get('.documentation').scrollTo('top', { easing: 'linear' })
cy.get('#slider').scrollTo('right', { duration: 2000 })

----------------------------------------

TITLE: Recording Cypress Tests
DESCRIPTION: Command to run and record Cypress tests with a project key.

LANGUAGE: shell
CODE:
cypress run --record --key=abc123

----------------------------------------

TITLE: Opening DevTools by Default in Cypress
DESCRIPTION: Example of modifying browser launch options to automatically open DevTools for different browser types including Chromium, Firefox, and Electron.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  console.log(launchOptions.args) // print all current args

  if (browser.family === 'chromium' && browser.name !== 'electron') {
    // auto open devtools
    launchOptions.args.push('--auto-open-devtools-for-tabs')
  }

  if (browser.family === 'firefox') {
    // auto open devtools
    launchOptions.args.push('-devtools')
  }

  if (browser.name === 'electron') {
    // auto open devtools
    launchOptions.preferences.devTools = true
  }

  // whatever you return here becomes the launchOptions
  return launchOptions
})

----------------------------------------

TITLE: Finding Elements by Index Example
DESCRIPTION: Example of using eq to find the second element in a list of cat breeds.

LANGUAGE: html
CODE:
<ul>
  <li>tabby</li>
  <li>siamese</li>
  <li>persian</li>
  <li>sphynx</li>
  <li>burmese</li>
</ul>

LANGUAGE: javascript
CODE:
cy.get('li').eq(1).should('contain', 'siamese') // true

----------------------------------------

TITLE: Generated Visit Example Output
DESCRIPTION: The generated code block for the E2E testing scenario using cy.visit.

LANGUAGE: javascript
CODE:
cy.clock(now)
cy.visit('/index.html')
cy.get('#date').should('have.value', '04/14/2021')

----------------------------------------

TITLE: Right Click with Force Option - JavaScript
DESCRIPTION: Examples of forcing right clicks regardless of actionability state.

LANGUAGE: javascript
CODE:
cy.get('#open-menu').rightclick({ force: true })
cy.get('#open-menu').rightclick('bottomLeft', { force: true })
cy.get('#open-menu').rightclick(5, 60, { force: true })

----------------------------------------

TITLE: TypeScript Type Inference with Cypress.require
DESCRIPTION: Demonstrates two methods for type inference when using Cypress.require in TypeScript: casting and generics.

LANGUAGE: typescript
CODE:
cy.origin('cypress.io', async () => {
  const _ = Cypress.require('lodash') as typeof import('lodash')

  // lodash methods are properly typed
  _.map([1, 2, 3], (num: number) => {
    // ...
  })
})

LANGUAGE: typescript
CODE:
import type { LoDashStatic } from 'lodash'

cy.origin('cypress.io', async () => {
  const _ = Cypress.require < LoDashStatic > 'lodash'

  // lodash methods are properly typed
  _.map([1, 2, 3], (num: number) => {
    // ...
  })
})

----------------------------------------

TITLE: Finding Checked Option Using jQuery Selector in Cypress
DESCRIPTION: Demonstrates how to find and assert on the currently checked option using jQuery's :checked selector.

LANGUAGE: javascript
CODE:
cy.get('#pick-fruit :checked').should('be.checked').and('have.value', 'apple')

----------------------------------------

TITLE: Verifying Element Focus State in Cypress
DESCRIPTION: This snippet demonstrates the use of Cypress.dom.isFocused to check if a button element currently has focus.

LANGUAGE: javascript
CODE:
cy.get('button').then(($el) => {
  Cypress.dom.isFocused($el)
})

----------------------------------------

TITLE: Basic Focused Element Syntax in Cypress
DESCRIPTION: Basic syntax for getting the currently focused element in Cypress tests.

LANGUAGE: javascript
CODE:
cy.focused()
cy.focused(options)

----------------------------------------

TITLE: Forcing a Click with Relative Coordinates in Cypress
DESCRIPTION: Shows how to force a click at specific coordinates relative to an element in Cypress.

LANGUAGE: javascript
CODE:
cy.get('#footer .next').click(5, 60, { force: true })

----------------------------------------

TITLE: Force Checking Hidden Checkbox in Cypress
DESCRIPTION: This example shows how to check a hidden checkbox element using the 'force' option.

LANGUAGE: javascript
CODE:
cy.get('.checkbox').check({ force: true })

----------------------------------------

TITLE: Specifying Timestamp for Clock in Cypress
DESCRIPTION: Shows how to specify a starting timestamp when initializing the clock in Cypress tests.

LANGUAGE: javascript
CODE:
const now = new Date(2021, 3, 14) // month is 0-indexed

cy.clock(now)
cy.visit('/index.html')
cy.get('#date').should('have.value', '04/14/2021')

----------------------------------------

TITLE: Checking an Invisible Checkbox with Force Option in Cypress
DESCRIPTION: Shows how to check an invisible checkbox by using the force option to override default visibility checks.

LANGUAGE: javascript
CODE:
cy.get('.action-checkboxes')
  .should('not.be.visible') // Passes
  .check({ force: true })
  .should('be.checked') // Passes

----------------------------------------

TITLE: Clearing Cookies After Login in Cypress E2E Tests
DESCRIPTION: Demonstrates how to use cy.clearCookies() in a real-world scenario, clearing session cookies after login and verifying redirection to the login page.

LANGUAGE: javascript
CODE:
// assume we just logged in
cy.contains('Login').click()
cy.url().should('include', 'profile')
cy.clearCookies()
cy.visit('/dashboard') // we should be redirected back to login
cy.url().should('include', 'login')

----------------------------------------

TITLE: Setting Electron App Switches in Cypress
DESCRIPTION: Example of setting Electron-specific launch arguments using environment variables in Cypress for Linux/OSX and Windows.

LANGUAGE: shell
CODE:
export ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es

LANGUAGE: shell
CODE:
set ELECTRON_EXTRA_LAUNCH_ARGS=--disable-http-cache --lang=es

----------------------------------------

TITLE: Incorrect Usage Examples of eq Command
DESCRIPTION: Shows invalid ways of using the eq command that will result in errors.

LANGUAGE: javascript
CODE:
cy.eq(0) // Errors, cannot be chained off 'cy'
cy.getCookies().eq(4) // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Including Images in Cypress Documentation
DESCRIPTION: Example of using the DocsImage component to include images in the Cypress documentation markdown files.

LANGUAGE: jsx
CODE:
<DocsImage
  src="/img/app/tooling/coverage-object.png"
  alt="code coverage object"
/>

----------------------------------------

TITLE: Pausing Cypress Commands
DESCRIPTION: Basic syntax for using the pause command in Cypress. It can be chained off cy or another command, and optionally accepts an options object.

LANGUAGE: javascript
CODE:
.pause()
.pause(options)

cy.pause()
cy.pause(options)

----------------------------------------

TITLE: Negative Index Selection Example
DESCRIPTION: Demonstrates using negative indices to select elements from the end of a collection.

LANGUAGE: javascript
CODE:
cy.get('li').eq(-2).should('contain', 'sphynx') // true

----------------------------------------

TITLE: Forced Double-click Examples in Cypress
DESCRIPTION: Shows various ways to force a double-click action regardless of element state.

LANGUAGE: javascript
CODE:
cy.get('button').dblclick({ force: true })
cy.get('button').dblclick('topRight', { force: true })
cy.get('button').dblclick(60, 60, { force: true })

----------------------------------------

TITLE: Title Include Assertion
DESCRIPTION: Example demonstrating how to assert that a document's title includes a specific string.

LANGUAGE: javascript
CODE:
cy.title().should('include', 'New User')

----------------------------------------

TITLE: Getting Parents of Active List Item in Cypress
DESCRIPTION: Demonstrates how to get all parent elements of an active list item using .parents() command.

LANGUAGE: html
CODE:
<ul class="main-nav">
  <li>Overview</li>
  <li>
    Getting started
    <ul class="sub-nav">
      <li>Install</li>
      <li class="active">Build</li>
      <li>Test</li>
    </ul>
  </li>
</ul>

LANGUAGE: javascript
CODE:
// yields [.sub-nav, li, .main-nav]
cy.get('li.active').parents()

----------------------------------------

TITLE: Blurring Focused Element in Cypress
DESCRIPTION: Example showing how to blur the currently focused element.

LANGUAGE: javascript
CODE:
cy.focused().blur()

----------------------------------------

TITLE: Force Clicking Hidden Element in Cypress
DESCRIPTION: This snippet demonstrates how to force a click action on a hidden element using the 'force' option.

LANGUAGE: javascript
CODE:
cy.get('.hidden').click({ force: true })

----------------------------------------

TITLE: Aliasing and Using Intercepted Routes in Cypress
DESCRIPTION: Example of aliasing an intercepted route and then using cy.wait() to wait for the aliased route in a test.

LANGUAGE: javascript
CODE:
cy.intercept('PUT', '/users', { fixture: 'user' }).as('editUser')

// we'll assume submitting `form` triggers a matching request
cy.get('form').submit()

// once a response comes back from the `editUser`
// this `wait` will resolve with the subject containing `url`
cy.wait('@editUser').its('url').should('contain', 'users')

----------------------------------------

TITLE: Supporting Custom File Download MIME Types in Cypress
DESCRIPTION: Example of adding support for custom MIME types when testing file downloads in Cypress, specifically for Firefox.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser, options) => {
  // only Firefox requires all mime types to be listed
  if (browser.family === 'firefox') {
    const existingMimeTypes =
      options.preferences['browser.helperApps.neverAsk.saveToDisk']
    const myMimeType = 'my/mimetype'

    // prevents the browser download prompt
    options.preferences['browser.helperApps.neverAsk.saveToDisk'] =
      `${existingMimeTypes},${myMimeType}`

    return options
  }
})

----------------------------------------

TITLE: Correct Usage of Cypress End Command
DESCRIPTION: Shows the correct way to use the 'end' command in Cypress. It is chained after a previous command to yield null instead of the element.

LANGUAGE: javascript
CODE:
cy.contains('ul').end() // Yield 'null' instead of 'ul' element

----------------------------------------

TITLE: Installing Cypress Documentation Dependencies
DESCRIPTION: Command to install the necessary dependencies for the Cypress documentation project using npm.

LANGUAGE: bash
CODE:
$ npm i

----------------------------------------

TITLE: Correct Usage of pause Command
DESCRIPTION: Examples of correct usage of the pause command, including pausing at the beginning of commands and after a 'get' command yields.

LANGUAGE: javascript
CODE:
cy.pause().getCookie('app') // Pause at the beginning of commands
cy.get('nav').pause() // Pause after the 'get' commands yield

----------------------------------------

TITLE: ScrollIntoView with Visibility Assertion
DESCRIPTION: Example of scrolling an element into view and asserting its visibility.

LANGUAGE: javascript
CODE:
cy.get('button#checkout').scrollIntoView().should('be.visible')

----------------------------------------

TITLE: Changing Browser Preferences in Cypress
DESCRIPTION: Example of modifying browser preferences for different browser types including Chromium, Firefox, and Electron in Cypress tests.

LANGUAGE: javascript
CODE:
on('before:browser:launch', (browser, launchOptions) => {
  if (browser.family === 'chromium' && browser.name !== 'electron') {
    // in Chromium, preferences can exist in Local State, Preferences, or Secure Preferences
    // via launchOptions.preferences, these can be acccssed as `localState`, `default`, and `secureDefault`

    // for example, to set `somePreference: true` in Preferences:
    launchOptions.preferences.default['preference'] = true

    return launchOptions
  }

  if (browser.family === 'firefox') {
    // launchOptions.preferences is a map of preference names to values
    launchOptions.preferences['some.preference'] = true

    return launchOptions
  }

  if (browser.name === 'electron') {
    // launchOptions.preferences is a `BrowserWindow` `options` object
    launchOptions.preferences.darkTheme = true

    return launchOptions
  }
})

----------------------------------------

TITLE: Next Command with List Elements Example
DESCRIPTION: Example showing how to find the next element after one with a specific class.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li class="second">oranges</li>
  <li>bananas</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>bananas</li>
cy.get('.second').next()

----------------------------------------

TITLE: Basic Usage of .parents() in Cypress
DESCRIPTION: Demonstrates how to use the .parents() command to get all parent elements of an 'aside' element.

LANGUAGE: javascript
CODE:
cy.get('aside').parents() // Yield parents of aside

----------------------------------------

TITLE: Handling cross-origin errors in Cypress
DESCRIPTION: To handle cross-origin errors, you can set chromeWebSecurity to false in your Cypress configuration when running in Chrome family browsers.

LANGUAGE: javascript
CODE:
{
  chromeWebSecurity: false,
}

----------------------------------------

TITLE: Finding First Input in Form
DESCRIPTION: Example demonstrating how to find the first input element within a form.

LANGUAGE: javascript
CODE:
cy.get('form').find('input').first()

----------------------------------------

TITLE: Correct Usage Examples of siblings() Command
DESCRIPTION: Demonstrates correct ways to use the siblings() command to get sibling elements.

LANGUAGE: javascript
CODE:
cy.get('td').siblings() // Yield all td's siblings
cy.get('li').siblings('.active') // Yield all li's siblings with class '.active'

----------------------------------------

TITLE: Basic Form Submit Syntax in Cypress
DESCRIPTION: Basic syntax examples for the submit command, showing both the simple and options-based usage.

LANGUAGE: javascript
CODE:
.submit()
.submit(options)

----------------------------------------

TITLE: Basic Text Input - Cypress
DESCRIPTION: Demonstrates basic usage of type command for typing text into input elements.

LANGUAGE: javascript
CODE:
cy.get('input').type('Hello, World')

----------------------------------------

TITLE: Implementing File Change Rerun Event in Preprocessor
DESCRIPTION: Example demonstrating how to emit a rerun event when watched files change to trigger test reruns.

LANGUAGE: javascript
CODE:
fs.watch(filePath, () => {
  file.emit('rerun')
})

----------------------------------------

TITLE: Chaining Cypress Commands with blur
DESCRIPTION: Demonstrates how to chain the blur command with other Cypress commands like get, focus, and type.

LANGUAGE: javascript
CODE:
cy.get('[name="comment"]').type('Nice Product!').blur()

LANGUAGE: javascript
CODE:
cy.get('[name="comment"]').focus().type('Nice Product!').blur()

----------------------------------------

TITLE: Getting Cookies After Login in Cypress
DESCRIPTION: Shows how to use getAllCookies to verify cookies set after logging in through an identity provider and redirecting back to the site.

LANGUAGE: javascript
CODE:
cy.contains('Log in').click()
cy.origin('https://example.cypress.io', () => {
  cy.get('[type=password]').type('*****')
  cy.contains('Log in').click()
})
cy.url().should('include', 'profile')
cy.getAllCookies()
  .should('have.length', 2)
  .then((cookies) => {
    expect(cookies[0]).to.have.property('name', 'identity_session_id')
    expect(cookies[1]).to.have.property('name', 'session_id')
  })

----------------------------------------

TITLE: Correct Usage of Cypress Spread Command
DESCRIPTION: Demonstrates the correct way to use the .spread() command with cookies.

LANGUAGE: javascript
CODE:
cy.getCookies().spread(() => {}) // Yield all cookies

----------------------------------------

TITLE: Conditional Testing Type Logic
DESCRIPTION: Example showing how to use conditional logic based on the testing type to execute different commands.

LANGUAGE: javascript
CODE:
it('does something differently', () => {
  if (Cypress.testingType === 'e2e') {
    cy.exec('something')
  } else {
    cy.exec('something else')
  }
})

----------------------------------------

TITLE: Babel Configuration for Istanbul
DESCRIPTION: Babel configuration to use the istanbul plugin for code instrumentation.

LANGUAGE: json
CODE:
{
  "presets": ["@babel/preset-react"],
  "plugins": ["transform-class-properties", "istanbul"]
}

----------------------------------------

TITLE: Incorrect Usage of .parents() in Cypress
DESCRIPTION: Shows examples of incorrect usage of the .parents() command, which cannot be chained directly off 'cy' or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.parents() // Errors, cannot be chained off 'cy'
cy.clock().parents() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Selecting First List Item
DESCRIPTION: Example showing how to select the first list item from a list using first().

LANGUAGE: javascript
CODE:
// yields <li class="one">Knick knack on my thumb</li>
cy.get('li').first()

----------------------------------------

TITLE: Changing subject in Cypress .then() command
DESCRIPTION: Shows how the subject can be changed within a .then() callback using Cypress commands or by returning a new value.

LANGUAGE: javascript
CODE:
cy.get('button')
  .then(($btn) => {
    const cls = $btn.attr('class')

    cy.wrap($btn).click().should('not.have.class', cls).find('i')
    // since there is no explicit return
    // the last Cypress command's yield is yielded
  })
  .should('have.class', 'spin') // assert on i element

----------------------------------------

TITLE: Hapi Middleware for Code Coverage
DESCRIPTION: Code to add code coverage middleware to a Hapi server.

LANGUAGE: javascript
CODE:
if (global.__coverage__) {
  require('@cypress/code-coverage/middleware/hapi')(server)
}

----------------------------------------

TITLE: Incorrect Usage Example
DESCRIPTION: Shows incorrect usage that will result in an error when trying to chain off 'cy'.

LANGUAGE: javascript
CODE:
cy.$('p') // Errors, cannot be chained off 'cy'

----------------------------------------

TITLE: Correct Form Submit Usage in Cypress
DESCRIPTION: Demonstrates the correct way to submit a form using Cypress by selecting a form element.

LANGUAGE: javascript
CODE:
cy.get('form').submit() // Submit a form

----------------------------------------

TITLE: Creating Custom Command with Cypress.log in JavaScript
DESCRIPTION: Shows how to use Cypress.log within a custom command to log specific properties and create a custom display in the Command Log and DevTools console.

LANGUAGE: javascript
CODE:
Cypress.Commands.add('setSessionStorage', (key, value) => {
  // Turn off logging of the cy.window() to command log
  cy.window({ log: false }).then((window) => {
    window.sessionStorage.setItem(key, value)
  })

  const log = Cypress.log({
    name: 'setSessionStorage',
    // shorter name for the Command Log
    displayName: 'setSS',
    message: `${key}, ${value}`,
    consoleProps: () => {
      // return an object which will
      // print to dev tools console on click
      return {
        Key: key,
        Value: value,
        'Session Storage': window.sessionStorage,
      }
    },
  })
})

----------------------------------------

TITLE: Creating Dynamic File Contents with Buffer
DESCRIPTION: Demonstrates creating multiple Buffer instances with dynamic content for file upload testing.

LANGUAGE: javascript
CODE:
const files = []

for (var i = 1; i <= 10; i++) {
  files.push(Cypress.Buffer.from(`Contents of file #${i}`))
}

// Attach 10 files, of the form "Contents of file #1", "Contents of file #2", etc.
cy.get('input[type=file]').selectFile(files)

----------------------------------------

TITLE: Verifying Element Descendant Relationship in Cypress
DESCRIPTION: This snippet demonstrates how to use Cypress.dom.isDescendent to check if one element is a descendant of another.

LANGUAGE: javascript
CODE:
cy.get('div').then(($el) => {
  Cypress.dom.isDescendent($el.parent(), $el) // true
})

----------------------------------------

TITLE: Instrumented JavaScript Function
DESCRIPTION: The same add function after instrumentation, showing how coverage counters are inserted.

LANGUAGE: javascript
CODE:
const c = (window.__coverage__ = {
  f: [0],
  s: [0, 0, 0],
})

c.s[0]++
function add(a, b) {
  c.f[0]++
  c.s[1]++

  return a + b
}
c.s[2]++
module.exports = { add }

----------------------------------------

TITLE: Finding Ancestors with parentsUntil in Cypress
DESCRIPTION: Demonstrates how to use parentsUntil to find all ancestors of an element with class 'active' up to an element with class 'nav'.

LANGUAGE: javascript
CODE:
// yields [ul.menu, li]
cy.get('.active').parentsUntil('.nav')

----------------------------------------

TITLE: Accessing CPU Architecture in Cypress
DESCRIPTION: Basic syntax example showing how to access the Cypress.arch property which returns the CPU architecture name.

LANGUAGE: javascript
CODE:
Cypress.arch // 'x64'

----------------------------------------

TITLE: Correct Usage of first() Command
DESCRIPTION: Example showing correct usage of first() to yield the first link in a navigation element.

LANGUAGE: javascript
CODE:
cy.get('nav a').first() // Yield first link in nav

----------------------------------------

TITLE: Launching Edge Browser
DESCRIPTION: Commands to launch different versions of Microsoft Edge browsers in Cypress.

LANGUAGE: shell
CODE:
cypress run --browser edge
cypress run --browser edge:beta
cypress run --browser edge:canary
cypress run --browser edge:dev

----------------------------------------

TITLE: Handling 'No tests found' error
DESCRIPTION: This error occurs when Cypress is unable to find tests in the specified file. It's likely due to an empty test file with no tests written yet.

LANGUAGE: javascript
CODE:
// Example of an empty test file that would cause this error
// No tests written yet

----------------------------------------

TITLE: Importing Angular Mount Function
DESCRIPTION: Demonstrates importing the mount() function for Angular components. This implementation uses Angular TestBed internally and mounts components in the actual browser rather than a virtual environment.

LANGUAGE: typescript
CODE:
import { mount } from 'cypress/angular'

----------------------------------------

TITLE: Incorrect Cypress Buffer Usage
DESCRIPTION: Shows incorrect usage pattern that will result in errors when trying to chain Buffer off the cy command.

LANGUAGE: javascript
CODE:
cy.Buffer.method() // Errors, cannot be chained off 'cy'

----------------------------------------

TITLE: HTML Structure Example for siblings()
DESCRIPTION: Sample HTML structure showing list items where siblings can be selected.

LANGUAGE: html
CODE:
<ul>
  <li>Home</li>
  <li>Contact</li>
  <li class="active">Services</li>
  <li>Price</li>
</ul>

----------------------------------------

TITLE: Correct Usage Example
DESCRIPTION: Demonstrates the correct way to use the getAllSessionStorage command.

LANGUAGE: javascript
CODE:
cy.getAllSessionStorage()

----------------------------------------

TITLE: Configuring jsconfig.json for Cypress IntelliSense
DESCRIPTION: This JSON configuration in jsconfig.json enables Cypress IntelliSense for JavaScript files in the project. It includes the Cypress module and all JavaScript files in the cypress directory.

LANGUAGE: json
CODE:
{
  "include": ["./node_modules/cypress", "cypress/**/*.js"]
}

----------------------------------------

TITLE: Screenshot Scaling Configuration
DESCRIPTION: Enabling scaling for viewport and fullPage screenshot captures

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  scale: true,
})

----------------------------------------

TITLE: Correct Usage Examples of scrollTo
DESCRIPTION: Demonstrates correct usage patterns for the scrollTo command including window scrolling and element scrolling.

LANGUAGE: javascript
CODE:
cy.scrollTo(0, 500) // Scroll the window 500px down
cy.get('.sidebar').scrollTo('bottom') // Scroll 'sidebar' to its bottom

----------------------------------------

TITLE: Using parent() with Selector in Cypress
DESCRIPTION: Example of using parent() with a selector to get a specific parent element of all list items.

LANGUAGE: html
CODE:
<ul class="main-nav">
  <li>Overview</li>
  <li>
    Getting started
    <ul class="sub-nav">
      <li>Install</li>
      <li class="active">Build</li>
      <li>Test</li>
    </ul>
  </li>
</ul>

LANGUAGE: javascript
CODE:
// yields .sub-nav
cy.get('li').parent('.sub-nav')

----------------------------------------

TITLE: Filtering Elements by Class
DESCRIPTION: Example showing how to filter list items to find ones with specific class.

LANGUAGE: html
CODE:
<ul>
  <li>Home</li>
  <li class="active">About</li>
  <li>Services</li>
  <li>Pricing</li>
  <li>Contact</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>About</li>
cy.get('ul').find('>li').filter('.active')

----------------------------------------

TITLE: Fixing 'Support file missing or invalid' error
DESCRIPTION: This error occurs when the supportFile configuration option is incorrectly placed. It must be added within each testing type's configuration object.

LANGUAGE: javascript
CODE:
// Correct placement of supportFile configuration
module.exports = {
  e2e: {
    supportFile: 'cypress/support/e2e.js'
  }
}

----------------------------------------

TITLE: Cypress Info Command Output
DESCRIPTION: Example output from cypress info command showing system details and browser information

LANGUAGE: css
CODE:
cypress info
Displaying Cypress info...

Detected 2 browsers installed:

1. Chrome
  - Name: chrome
  - Channel: stable
  - Version: 79.0.3945.130
  - Executable: /path/to/google-chrome
  - Profile: /user/profile/folder/for/google-chrome

----------------------------------------

TITLE: Advanced Pattern Matching with Double Asterisk
DESCRIPTION: Demonstrates the difference between single and double asterisk patterns in URL matching.

LANGUAGE: javascript
CODE:
// ** matches against all downstream path segments

// returns true
Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {
  matchBase: true,
})

// whereas * matches only the next path segment

// returns false
Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {
  matchBase: false,
})

----------------------------------------

TITLE: Retrieving Root Element in Cypress
DESCRIPTION: Demonstrates getting the root element, which is typically the <html> tag.

LANGUAGE: javascript
CODE:
cy.root() // yields <html>

----------------------------------------

TITLE: Incorrect Contains Usage Examples
DESCRIPTION: Shows invalid uses of the contains command that will result in errors.

LANGUAGE: javascript
CODE:
cy.title().contains('My App') // Errors, 'title' does not yield DOM element
cy.getCookies().contains('_key') // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Frontend Configuration for Amazon Cognito Authentication
DESCRIPTION: Update the React frontend to allow authentication with Amazon Cognito using the AWS Amplify Framework Authentication Library.

LANGUAGE: jsx
CODE:
// amplify v6
// initial imports ...
import { Amplify, ResourcesConfig } from "aws-amplify";
import { fetchAuthSession, signInWithRedirect, signOut } from "aws-amplify/auth";

import awsConfig from "../aws-exports";

Amplify.configure(awsConfig as ResourcesConfig);

// ...

const AppCognito: React.FC = () => {

  // ...

  useEffect(() => {
    if (!isLoggedIn) {
      fetchAuthSession().then((authSession) => {
        if (authSession && authSession.tokens && authSession.tokens.accessToken) {
          const { tokens, userSub } = authSession;
          authService.send("COGNITO", {
            accessTokenJwtString: tokens!.accessToken.toString(),
            userSub: userSub!,
            email: tokens!.idToken!.payload.email,
          });
        } else {
          void signInWithRedirect();
        }
      });
    }
  }, [isLoggedIn]);

  // ...

  if (!isLoggedIn) {
    return null; // redirection will occur soon anyway
  }
};

export default AppCognito;

----------------------------------------

TITLE: Accessing Cypress.platform in JavaScript
DESCRIPTION: Demonstrates how to access the Cypress.platform property to get the underlying OS name. This can be used to determine the operating system on which the tests are running.

LANGUAGE: javascript
CODE:
Cypress.platform // 'darwin'

----------------------------------------

TITLE: Correct Usage Examples of eq Command
DESCRIPTION: Demonstrates proper usage of the eq command to select specific elements from a collection.

LANGUAGE: javascript
CODE:
cy.get('tbody>tr').eq(0) // Yield first 'tr' in 'tbody'
cy.get('ul>li').eq(4) // Yield fifth 'li' in 'ul'

----------------------------------------

TITLE: Asserting Number of Children in Cypress
DESCRIPTION: Demonstrates how to use the children command with an assertion to check the number of child elements.

LANGUAGE: javascript
CODE:
cy.get('.left-nav>.nav').children().should('have.length', 8)

----------------------------------------

TITLE: Incorrect Right Click Usage - JavaScript
DESCRIPTION: Shows incorrect usage patterns that will result in errors.

LANGUAGE: javascript
CODE:
cy.rightclick('button') // Errors, cannot be chained off 'cy'
cy.window().rightclick() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: Basic Filter Command Syntax
DESCRIPTION: Basic syntax for the Cypress filter command showing both simple selector and options usage.

LANGUAGE: javascript
CODE:
.filter(selector)
.filter(selector, options)

----------------------------------------

TITLE: Auth0 Backend Integration
DESCRIPTION: Express backend configuration for validating Auth0 JWT tokens

LANGUAGE: typescript
CODE:
import jwt from 'express-jwt'
import jwksRsa from 'jwks-rsa'

const auth0JwtConfig = {
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/.well-known/jwks.json`,
  }),
  audience: process.env.REACT_APP_AUTH0_AUDIENCE,
  issuer: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/`,
  algorithms: ['RS256'],
}

----------------------------------------

TITLE: Visit and Go Command Example
DESCRIPTION: Example showing how to chain visit and go commands together.

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:8000/folders').go('back')

----------------------------------------

TITLE: Importing Vue Mount Function
DESCRIPTION: Shows how to import the mount() function for Vue components. This implementation uses Vue Test Utils internally and mounts components in the actual browser instead of a virtual environment.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/vue'

----------------------------------------

TITLE: Importing Angular Output Spy Function
DESCRIPTION: Import statement for the createOutputSpy function used for testing component outputs

LANGUAGE: javascript
CODE:
import { createOutputSpy } from 'cypress/angular'

----------------------------------------

TITLE: Using Lodash _.chain Method in Cypress JavaScript Test
DESCRIPTION: Shows how to use Lodash's _.chain method along with other Lodash functions like _.map, _.take, and _.value in a Cypress test to process API response data.

LANGUAGE: javascript
CODE:
cy
  // use the _.chain, _.map, _.take, and _.value functions
  .request('http://jsonplaceholder.typicode.com/users')
  .then((response) => {
    const ids = Cypress._.chain(response.body).map('id').take(3).value()

    expect(ids).to.deep.eq([1, 2, 3])
  })

----------------------------------------

TITLE: Incorrect Usage of .prev() in Cypress
DESCRIPTION: Shows examples of incorrect usage of the .prev() command, which cannot be chained directly off 'cy' or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.prev() // Errors, cannot be chained off 'cy'
cy.getCookies().prev() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Configuring Retry Attempts for Test Suites in Cypress
DESCRIPTION: Set custom retry attempts for a suite of tests using suite configuration in Cypress.

LANGUAGE: javascript
CODE:
describe(
  'User bank accounts',
  {
    retries: {
      runMode: 2,
      openMode: 1,
    },
  },
  () => {
    // The per-suite configuration is applied to each test
    // If a test fails, it will be retried
    it('allows a user to view their transactions', () => {
      // ...
    })

    it('allows a user to edit their transactions', () => {
      // ...
    })
  }
)

----------------------------------------

TITLE: Getting All Configuration Options
DESCRIPTION: Demonstrates how to retrieve all configuration options using Cypress.config().

LANGUAGE: javascript
CODE:
Cypress.config() // => {defaultCommandTimeout: 10000, pageLoadTimeout: 30000, ...}

----------------------------------------

TITLE: Generating HTML Report from Mochawesome JSON
DESCRIPTION: Shows how to generate an HTML report from a merged Mochawesome JSON file using the marge command.

LANGUAGE: shell
CODE:
npx marge mochawesome.json

----------------------------------------

TITLE: Example of Finding Closest Element with Class in Cypress
DESCRIPTION: Demonstrates how to use the closest command to find the nearest ancestor element with a specific class.

LANGUAGE: javascript
CODE:
cy.get('p.error').closest('.banner')

----------------------------------------

TITLE: Build Command with Result Handling
DESCRIPTION: Example showing how to execute a build command and handle the result object containing code, stdout and stderr

LANGUAGE: javascript
CODE:
cy.exec('npm run build').then((result) => {
  // yields the 'result' object
  // {
  //   code: 0,
  //   stdout: "Files successfully built",
  //   stderr: ""
  // }
})

----------------------------------------

TITLE: Configuring Cypress Plugin Event Handlers
DESCRIPTION: Example of binding to plugin events in the setupNodeEvents configuration function. Shows the basic structure for handling plugin events in Cypress.

LANGUAGE: typescript
CODE:
// bind to the event we care about
on('<event>', (arg1, arg2) => {
  // plugin stuff here
})

----------------------------------------

TITLE: Working with Event Types Across Iframes
DESCRIPTION: Example demonstrating how to properly handle event types when working across Cypress iframes.

LANGUAGE: javascript
CODE:
it('should trigger KeyboardEvent with .type inside Cypress event listener', (done) => {
  cy.window().then((win) => {
    cy.get('#test-input').then((jQueryElement) => {
      let elemHtml = jQueryElement.get(0)

      elemHtml.addEventListener('keydown', (event) => {
        expect(event instanceof win['KeyboardEvent']).to.be.true
        done()
      })
    })
  })

  cy.get('#test-input').type('A')
})

----------------------------------------

TITLE: Passing Data to Angular Component
DESCRIPTION: Demonstrates how to pass inputs and outputs to a component using componentProperties

LANGUAGE: typescript
CODE:
cy.mount(StepperComponent, {
  componentProperties: {
    count: 100,
    change: new EventEmitter(),
  },
})

----------------------------------------

TITLE: Global jQuery Example
DESCRIPTION: Shows equivalent functionality using global jQuery syntax.

LANGUAGE: javascript
CODE:
$.each([1, 2, 3], (index, value) => {
  expect(index).to.eq(value)
}) // also works

----------------------------------------

TITLE: Incorrect Usage of nextUntil Command in Cypress
DESCRIPTION: Examples of incorrect usage of the nextUntil command, showing that it cannot be chained off 'cy' directly or off commands that don't yield DOM elements.

LANGUAGE: javascript
CODE:
cy.nextUntil() // Errors, cannot be chained off 'cy'
cy.clock().nextUntil('path') // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Express Middleware for Code Coverage
DESCRIPTION: Code to add code coverage middleware to an Express server.

LANGUAGE: javascript
CODE:
const express = require('express')
const app = express()

require('@cypress/code-coverage/middleware/express')(app)

----------------------------------------

TITLE: Testing Current Retry Count
DESCRIPTION: Example test case demonstrating how to check the current retry count, which starts at 0 for the first test attempt.

LANGUAGE: javascript
CODE:
it('example', () => {
  expect(Cypress.currentRetry).to.eq(0)
})

----------------------------------------

TITLE: Cypress isCy Usage Examples
DESCRIPTION: Examples demonstrating various use cases of Cypress.isCy() including checking the cy object itself, chainable instances, and invalid values.

LANGUAGE: javascript
CODE:
Cypress.isCy(cy) // true

const chainer = cy.wrap().then(() => {
  Cypress.isCy(chainer) // true
})

Cypress.isCy(undefined) // false

Cypress.isCy(() => {}) // false

----------------------------------------

TITLE: Correct Usage of Cypress closest Command
DESCRIPTION: Shows the correct way to use the closest command, chaining it off a previous DOM element selection.

LANGUAGE: javascript
CODE:
cy.get('td').closest('.filled') // Yield closest el with class '.filled'

----------------------------------------

TITLE: Incorrect Usage of Cypress closest Command
DESCRIPTION: Illustrates incorrect ways to use the closest command, which cannot be chained directly off 'cy' or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.closest('.active') // Errors, cannot be chained off 'cy'
cy.clock().closest() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Handling Promises in .each() Callbacks in Cypress
DESCRIPTION: Illustrates how promises returned from the callback function are awaited before iterating to the next element.

LANGUAGE: javascript
CODE:
cy.wrap([1, 2, 3]).each((num, i, array) => {
  return new Cypress.Promise((resolve) => {
    setTimeout(() => {
      resolve()
    }, num * 100)
  })
})

----------------------------------------

TITLE: Grouping URLs by Named Query Parameters in Cypress
DESCRIPTION: This configuration demonstrates how to group URLs based on named query parameters. It uses a complex pattern to match URLs with a 'status' query parameter.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://www.my-app.com/home?*status=:status{&*}?#*",
      "groupBy": ["status"]
    }
  ]
}

----------------------------------------

TITLE: Testing Special Characters in Selectors
DESCRIPTION: Example showing how to test elements with special characters in IDs using CSS.escape.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
  <body>
    <div id="Configuration/Setup/TextField.id">Hello World</div>
  </body>
</html>

LANGUAGE: javascript
CODE:
it('test', () => {
  cy.visit('index.html')
  cy.get(`#${CSS.escape('Configuration/Setup/TextField.id')}`).contains('Hello World')

  cy.get(`#${Cypress.$.escapeSelector('Configuration/Setup/TextField.id')}`).contains('Hello World')
})

----------------------------------------

TITLE: Importing React Mount Function
DESCRIPTION: Demonstrates how to import the mount() function for React components in Cypress. This function supports standard JSX syntax for mounting components.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/react'

----------------------------------------

TITLE: Custom Browser Integration
DESCRIPTION: TypeScript code to add a custom browser (Brave) to the list of available browsers in Cypress.

LANGUAGE: typescript
CODE:
import execa from 'execa'
const findBrowser = () => {
  const browserPath =
    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'

  return execa(browserPath, ['--version']).then((result) => {
    const [, version] = /Brave Browser (\d+\.\d+\.\d+\.\d+)/.exec(result.stdout)
    const majorVersion = parseInt(version.split('.')[0])

    return {
      name: 'Brave',
      channel: 'stable',
      family: 'chromium',
      displayName: 'Brave',
      version,
      path: browserPath,
      majorVersion,
    }
  })
}

return findBrowser().then((browser) => {
  return {
    browsers: config.browsers.concat(browser),
  }
})

----------------------------------------

TITLE: Correct Usage Example
DESCRIPTION: Demonstrates the correct way to use Cypress.$ for querying elements.

LANGUAGE: javascript
CODE:
Cypress.$('p')

----------------------------------------

TITLE: Incorrect Usage of .within() in Cypress
DESCRIPTION: Shows examples of incorrect usage of .within(), including chaining it directly off 'cy' or after commands that don't yield DOM elements.

LANGUAGE: javascript
CODE:
cy.within(() => {}) // Errors, cannot be chained off 'cy'
cy.getCookies().within(() => {}) // Errors, 'getCookies' does not yield DOM element
cy.get('div').within(($divs) => {}) // Probably errors, because get('div') yields multiple elements

----------------------------------------

TITLE: Including Only Specific URL Patterns
DESCRIPTION: Configuration example that includes only dashboard-related URLs while excluding all others using a wildcard pattern.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "https://cypress.io/dashboards*",
      "include": true
    },
    {
      "pattern": "*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Creating Clock and Triggering setInterval in Cypress
DESCRIPTION: Example of creating a clock, visiting a page, and using cy.tick() to trigger a setInterval function.

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('/index.html')
cy.tick(1000)
cy.get('#seconds-elapsed').should('have.text', '1 seconds')
cy.tick(1000)
cy.get('#seconds-elapsed').should('have.text', '2 seconds')

----------------------------------------

TITLE: Ending Command Chain in Cypress
DESCRIPTION: Demonstrates the basic syntax of the 'end' command in Cypress. This command is used to end a chain of commands and yields null.

LANGUAGE: javascript
CODE:
.end()

----------------------------------------

TITLE: Right Click with Coordinates - JavaScript
DESCRIPTION: Example of right clicking at specific coordinates relative to an element.

LANGUAGE: javascript
CODE:
cy.get('#open-menu').rightclick(15, 40)

----------------------------------------

TITLE: Double-click with Position Specification in Cypress
DESCRIPTION: Example of double-clicking an element at a specific position using the bottom parameter.

LANGUAGE: javascript
CODE:
cy.get('button').dblclick('bottom')

----------------------------------------

TITLE: Configuring Custom Index File Path in Cypress
DESCRIPTION: Shows how to specify a custom path for the component testing index HTML file. This configuration allows for customization of the default HTML file location used for rendering components.

LANGUAGE: javascript
CODE:
{
  component: {
    devServer,
    indexHtmlFile: '/custom/path/to/component-index.html'
  }
}

----------------------------------------

TITLE: Overwriting Existing Hover Command in Cypress
DESCRIPTION: This example shows how to overwrite an existing 'hover' command in Cypress using Cypress.Commands.overwrite().

LANGUAGE: javascript
CODE:
Cypress.Commands.overwrite('hover', (originalFn, ...otherArgs) => {})

----------------------------------------

TITLE: Simulating Chat Application Testing in Cypress
DESCRIPTION: Demonstrates how to test a chat application using Cypress by simulating server responses and other connections. This approach avoids the need for multiple open browsers while still providing comprehensive test coverage.

LANGUAGE: javascript
CODE:
// Cypress tests

// tell the http server at 8081 to connect to 8080
cy.request('http://localhost:8081/connect?url=http://localhost:8080')

// tell the http server at 8081 to send a message
cy.request('http://localhost:8081/message?m=hello')

// tell the http server at 8081 to disconnect
cy.request('http://localhost:8081/disconnect')

LANGUAGE: javascript
CODE:
const client = require('socket.io:client')
const express = require('express')

const app = express()

let socket

app.get('/connect', (req, res) => {
  const url = req.query.url

  socket = client(url)

  socket.on('connect', () => {
    res.sendStatus(200)
  })
})

app.get('/message', (req, res) => {
  const msg = req.query.m

  socket.send(msg, () => {
    res.sendStatus(200)
  })
})

app.get('/disconnect', (req, res) => {
  socket.on('disconnect', () => {
    res.sendStatus(200)
  })

  socket.disconnect()
})

app.listen(8081, () => {})

----------------------------------------

TITLE: Using Cypress.dom Methods in JavaScript
DESCRIPTION: This snippet demonstrates the basic syntax for using Cypress.dom methods. It shows how to call the isHidden method on a DOM element.

LANGUAGE: javascript
CODE:
Cypress.dom.isHidden(element)

----------------------------------------

TITLE: Demonstrating Correct Usage of .each() in Cypress
DESCRIPTION: Shows the correct way to use the .each() command in Cypress, iterating over DOM elements and cookies.

LANGUAGE: javascript
CODE:
cy.get('ul>li').each(() => {...}) // Iterate through each 'li'
cy.getCookies().each(() => {...}) // Iterate through each cookie

----------------------------------------

TITLE: Basic .find() Syntax in Cypress
DESCRIPTION: Basic syntax examples showing how to use the .find() command.

LANGUAGE: javascript
CODE:
.find(selector)
.find(selector, options)

----------------------------------------

TITLE: Basic Cypress .and() Command Syntax
DESCRIPTION: Shows the basic syntax patterns for using the .and() command in Cypress assertions.

LANGUAGE: javascript
CODE:
.and(chainers)
.and(chainers, value)
.and(chainers, method, value)
.and(callbackFn)

----------------------------------------

TITLE: Shadow DOM Click Workaround - JavaScript
DESCRIPTION: Workaround for Chrome click issues with Shadow DOM elements by specifying click position.

LANGUAGE: javascript
CODE:
cy.get('#element')
  .shadow()
  .find('[data-test-id="my-button"]')
  .click({ position: 'top' })

----------------------------------------

TITLE: Incorrect Select Usage Examples
DESCRIPTION: Demonstrates invalid ways of using the select command that will result in errors.

LANGUAGE: javascript
CODE:
cy.select('John Adams') // Errors, cannot be chained off 'cy'
cy.clock().select() // Errors, 'clock' does not yield a <select> element

----------------------------------------

TITLE: Incorrect Double-click Usage Examples in Cypress
DESCRIPTION: Shows incorrect ways to use the dblclick command that will result in errors.

LANGUAGE: javascript
CODE:
cy.dblclick('button') // Errors, cannot be chained off 'cy'
cy.window().dblclick() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: Setting Custom Significant Attributes in Cypress UI Coverage
DESCRIPTION: Configuration example demonstrating how to define custom significant attributes for element identification. Shows how to add custom data attributes to the list of prioritized selectors.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": ["data-custom-id"]
  }
}

----------------------------------------

TITLE: Incorrect Usage of Last Command in Cypress
DESCRIPTION: Shows invalid ways of using the .last() command that will result in errors.

LANGUAGE: javascript
CODE:
cy.last() // Errors, cannot be chained off 'cy'
cy.getCookies().last() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Unchecking All Checkboxes in Cypress
DESCRIPTION: Demonstrates how to uncheck all checkbox elements on a page using the uncheck command.

LANGUAGE: javascript
CODE:
cy.get(':checkbox').uncheck()

----------------------------------------

TITLE: Using cy.spy() in Cypress
DESCRIPTION: Shows how to use cy.spy() to observe function calls without modifying their behavior, useful for testing function interactions.

LANGUAGE: javascript
CODE:
cy.spy(obj, 'method')

----------------------------------------

TITLE: Async Configuration Example
DESCRIPTION: Shows how to properly update configuration within an asynchronous test flow.

LANGUAGE: javascript
CODE:
it('using cy.then', () => {
  cy.visit('/my-test_page')
  cy.click('#download-html').then(() => {
    Cypress.config('baseUrl', null)
  })
  cy.visit('/downloads/contents.html')
})

----------------------------------------

TITLE: Correct Usage of .find() in Cypress
DESCRIPTION: Example showing correct usage of .find() to get footer within an article element.

LANGUAGE: javascript
CODE:
cy.get('.article').find('footer') // Yield 'footer' within '.article'

----------------------------------------

TITLE: Configuring View Filters in Cypress UI Coverage
DESCRIPTION: Configuration example demonstrating how to exclude specific URL patterns from being tracked as Views using view filters.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "https://auth.example.com/*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Performing a Shift-Click in Cypress
DESCRIPTION: Shows how to simulate a shift-click on the first list item element using Cypress.

LANGUAGE: javascript
CODE:
// execute a SHIFT + click on the first <li>
cy.get('li:first').click({
  shiftKey: true,
})

----------------------------------------

TITLE: Correct Usage Examples of .its()
DESCRIPTION: Demonstrates proper usage of the .its() command for accessing properties.

LANGUAGE: javascript
CODE:
cy.wrap({ width: '50' }).its('width') // Get the 'width' property
cy.window().its('sessionStorage') // Get the 'sessionStorage' property

----------------------------------------

TITLE: Shadow DOM Usage Examples - JavaScript
DESCRIPTION: Examples demonstrating correct and incorrect usage of the .shadow() command in Cypress.

LANGUAGE: javascript
CODE:
cy.get('.shadow-host').shadow()

LANGUAGE: javascript
CODE:
cy.shadow() // Errors, cannot be chained off 'cy'
cy.exec('npm start').shadow() // Errors, 'exec' does not yield DOM element
cy.get('.not-a-shadow-host').shadow() // Errors, subject must host a shadow root

----------------------------------------

TITLE: Accessing Clock Object in Cypress Tests
DESCRIPTION: Demonstrates how to access the clock object yielded by cy.clock() to manipulate time synchronously.

LANGUAGE: javascript
CODE:
cy.clock().then((clock) => {
  clock.tick(1000)
})

----------------------------------------

TITLE: Configuring Attribute Filters in Cypress UI Coverage
DESCRIPTION: This JSON configuration excludes auto-generated or irrelevant attributes to reduce noise in the UI Coverage report.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": "id",
        "value": "sizzle.*",
        "include": false
      },
      {
        "attribute": "ng-.*",
        "value": ".*",
        "include": false
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring NPM Scripts for Browser-Specific Cypress Runs
DESCRIPTION: This JSON snippet shows how to set up npm scripts in package.json for convenient launching of Cypress tests in specific browsers.

LANGUAGE: json
CODE:
"scripts": {
  "cy:run:chrome": "cypress run --browser chrome",
  "cy:run:firefox": "cypress run --browser firefox"
}

----------------------------------------

TITLE: Installing Cypress Plugins using Package Managers
DESCRIPTION: Commands to install Cypress plugins using different package managers (npm, yarn, pnpm). Plugins are installed as dev dependencies.

LANGUAGE: shell
CODE:
npm install <plugin name> --save-dev

LANGUAGE: shell
CODE:
yarn add <plugin name> --dev

LANGUAGE: shell
CODE:
pnpm add --save-dev <plugin name>

----------------------------------------

TITLE: Controlling Window Confirmations in Cypress
DESCRIPTION: Example of how to control whether to accept or reject window confirmations in Cypress using the 'window:confirm' event.

LANGUAGE: javascript
CODE:
// app code
$('button').on('click', (e) => {
  const one = confirm('first confirm')

  if (one) {
    const two = confirm('second confirm')

    if (!two) {
      const three = confirm('third confirm')

      confirm('third confirm was ' + three)
    }
  }
})

// test code
it('can control application confirms', (done) => {
  let count = 0

  // make sure you bind to this **before** the
  // confirm method is called in your application
  //
  // this event will automatically be unbound when this
  // test ends because it's attached to 'cy'
  cy.on('window:confirm', (str) => {
    count += 1

    switch (count) {
      case 1:
        expect(str).to.eq('first confirm')
      // returning nothing here automatically
      // accepts the confirmation
      case 2:
        expect(str).to.eq('second confirm')

        // reject the confirmation
        return false

      case 3:
        expect(str).to.eq('third confirm')

        // don't have to return true but it works
        // as well
        return true

      case 4:
        expect(str).to.eq('third confirm was true')

        // using mocha's async done callback to finish
        // this test so we are guaranteed everything
        // got to this point okay without throwing an error
        done()
    }
  })

  // click the button causing the confirm to fire
  cy.get('button').click()
})

it('could also use a stub instead of imperative code', () => {
  const stub = cy.stub()

  // not necessary but showing for clarity
  stub.onFirstCall().returns(undefined)
  stub.onSecondCall().returns(false)
  stub.onThirdCall().returns(true)

  cy.on('window:confirm', stub)

  cy.get('button')
    .click()
    .then(() => {
      expect(stub.getCall(0)).to.be.calledWith('first confirm')
      expect(stub.getCall(1)).to.be.calledWith('second confirm')
      expect(stub.getCall(2)).to.be.calledWith('third confirm')
      expect(stub.getCall(3)).to.be.calledWith('third confirm was true')
    })
})

----------------------------------------

TITLE: Installing Cypress with npm
DESCRIPTION: This command installs Cypress as a dev dependency using npm. It adds Cypress to the project's devDependencies in package.json.

LANGUAGE: shell
CODE:
npm install cypress --save-dev

----------------------------------------

TITLE: Configuring Element Groups in Cypress UI Coverage
DESCRIPTION: This JSON configuration groups elements with similar selectors to reduce repetitive entries in the UI Coverage report.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "nav [id^=nav-button]"
      }
    ]
  }
}

----------------------------------------

TITLE: Aborting Cypress Tests on Condition
DESCRIPTION: Example of using Cypress.stop() to abort tests when a specific condition is not met, such as an incorrect environment setup.

LANGUAGE: javascript
CODE:
beforeEach(() => {
  if (env !== 'expected-condition') {
    cy.log('Stop tests - environment is not setup correctly')
    Cypress.stop()
  }
})

----------------------------------------

TITLE: Making Assertions on Location Properties in Cypress
DESCRIPTION: Shows how to make assertions on various properties of the location object returned by cy.location(), including hash, host, hostname, href, origin, pathname, port, protocol, and search.

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:8000/app/index.html?q=dan#/users/123/edit')

cy.location().should((loc) => {
  expect(loc.hash).to.eq('#/users/123/edit')
  expect(loc.host).to.eq('localhost:8000')
  expect(loc.hostname).to.eq('localhost')
  expect(loc.href).to.eq(
    'http://localhost:8000/app/index.html?q=dan#/users/123/edit'
  )
  expect(loc.origin).to.eq('http://localhost:8000')
  expect(loc.pathname).to.eq('/app/index.html')
  expect(loc.port).to.eq('8000')
  expect(loc.protocol).to.eq('http:')
  expect(loc.search).to.eq('?q=dan')
  expect(loc.toString()).to.eq(
    'http://localhost:8000/app/index.html?q=brian#/users/123/edit'
  )
})

----------------------------------------

TITLE: Basic Title Command Syntax
DESCRIPTION: Basic syntax examples showing how to use the cy.title() command with and without options.

LANGUAGE: javascript
CODE:
cy.title()
cy.title(options)

----------------------------------------

TITLE: Installing Cypress with pnpm
DESCRIPTION: This command installs Cypress as a dev dependency using pnpm. It adds Cypress to the project's devDependencies in package.json.

LANGUAGE: shell
CODE:
pnpm add --save-dev cypress

----------------------------------------

TITLE: Correct Usage of Cypress.sinon Matcher in JavaScript
DESCRIPTION: Shows the correct way to use a Cypress.sinon matcher, specifically the string matcher, in a test assertion.

LANGUAGE: javascript
CODE:
Cypress.sinon.match.string

----------------------------------------

TITLE: Basic significantAttributes Configuration in JSON
DESCRIPTION: Shows the basic syntax for configuring significant attributes in the UI Coverage configuration file.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": [
      string
    ]
  }
}

----------------------------------------

TITLE: Installation Configuration for package.json
DESCRIPTION: Package.json configuration for running Cypress tests with Angular applications using concurrently.

LANGUAGE: json
CODE:
{
  "scripts": {
    "cy:open": "concurrently \"ng serve\" \"cypress open\"",
    "cy:run": "concurrently \"ng serve\" \"cypress run\""
  },
  "dependencies": { ... },
  "devDependencies": { ... }
}

----------------------------------------

TITLE: Unchecking Specific Checkbox by ID in Cypress
DESCRIPTION: Shows how to uncheck a specific checkbox element by its ID using the uncheck command.

LANGUAGE: javascript
CODE:
cy.get('#saveUserName').uncheck()

----------------------------------------

TITLE: Adding Triple Slash Directives for Custom Commands in Cypress
DESCRIPTION: This code snippet shows how to add triple slash directives to enable IntelliSense for both Cypress and custom commands in JavaScript files. It references both Cypress types and custom command definitions.

LANGUAGE: javascript
CODE:
// type definitions for Cypress object "cy"
/// <reference types="cypress" />

// type definitions for custom commands like "createDefaultTodos"
/// <reference types="../support" />

----------------------------------------

TITLE: Modifying Application Before Load in Cypress
DESCRIPTION: Example of how to modify the application window before it loads after page transitions in Cypress using the 'window:before:load' event.

LANGUAGE: javascript
CODE:
it('can modify the window prior to page load on all pages', () => {
  // create the stub here
  const ga = cy.stub().as('ga')

  // prevent google analytics from loading
  // and replace it with a stub before every
  // single page load including all new page
  // navigations
  cy.on('window:before:load', (win) => {
    Object.defineProperty(win, 'ga', {
      configurable: false,
      get: () => ga, // always return the stub
      set: () => {}, // don't allow actual google analytics to overwrite this property
    })
  })

  cy
    // window:before:load will be called here
    .visit('/first/page')

    .then((win) => {
      // and here
      win.location.href = '/second/page'
    })

    // and here
    .get('a')
    .click()
})

----------------------------------------

TITLE: Excluding Container Elements Example
DESCRIPTION: Shows how to exclude all elements within a specific container using the footer selector.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "footer *",
      "include": false
    }
  ]
}

LANGUAGE: xml
CODE:
<body>
  <main>
    <button id="start">Included</button>
  </main>
  <footer>
    <a href="#">Excluded</a>
  </footer>
</body>

----------------------------------------

TITLE: Grouping Container Elements
DESCRIPTION: Shows how to group all elements within a specific container using CSS selectors.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "#calendar button"
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <div id="calendar">
    <button id="jan"></button>
    <button id="feb"></button>
    <button id="mar"></button>
  </div>
</body>

----------------------------------------

TITLE: Invoking Functions with Cypress wrap()
DESCRIPTION: Shows how to use cy.wrap() to invoke a function on the subject and return the new value.

LANGUAGE: javascript
CODE:
const getName = () => {
  return 'Jane Lane'
}

cy.wrap({ name: getName }).invoke('name').should('eq', 'Jane Lane') // true

----------------------------------------

TITLE: Basic Clear Command Syntax in Cypress
DESCRIPTION: Basic syntax examples for the clear() command showing both simple usage and usage with options.

LANGUAGE: javascript
CODE:
.clear()
.clear(options)

----------------------------------------

TITLE: Using getAllCookies in Cypress
DESCRIPTION: Demonstrates the basic usage of the getAllCookies command in Cypress to retrieve all browser cookies.

LANGUAGE: javascript
CODE:
cy.getAllCookies()

----------------------------------------

TITLE: Basic Cypress.minimatch Syntax
DESCRIPTION: Shows the basic syntax for using Cypress.minimatch with its parameters. Takes a target string, pattern string, and optional MinimatchOptions object.

LANGUAGE: javascript
CODE:
Cypress.minimatch(target: string, pattern: string, options?: MinimatchOptions);

----------------------------------------

TITLE: Cypress vs Cucumber-Cypress Test Comparison
DESCRIPTION: Compares standard Cypress test syntax with Cucumber-style syntax using the cucumber preprocessor.

LANGUAGE: javascript
CODE:
it("I should see a search bar", () => {
  cy.visit("https://www.duckduckgo.com");
  cy.get("input").should(
    "have.attr",
    "placeholder",
    "Search the web without being tracked"
  )

LANGUAGE: javascript
CODE:
import { When, Then } from '@badeball/cypress-cucumber-preprocessor'

When('I visit duckduckgo.com', () => {
  cy.visit('https://www.duckduckgo.com')
})

Then('I should see a search bar', () => {
  cy.get('input').should(
    'have.attr',
    'placeholder',
    'Search the web without being tracked'
  )
})

----------------------------------------

TITLE: Incorrect Clear Command Usage Examples in Cypress
DESCRIPTION: Shows invalid usage patterns of the clear() command that will result in errors.

LANGUAGE: javascript
CODE:
cy.clear() // Errors, cannot be chained off 'cy'
cy.get('nav').clear() // Errors, 'get' doesn't yield input or textarea
cy.clock().clear() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Setting Default Screenshot Blackout Options in Cypress
DESCRIPTION: Configuration to set default blackout options for masking elements in all screenshots taken during test runs.

LANGUAGE: javascript
CODE:
before(() => {
  Cypress.Screenshot.defaults({
    // blackout all elements with 'mask-cy' attribute
    blackout: ['mask-cy'],
  })
})

----------------------------------------

TITLE: Debugging Test Failures in Cypress
DESCRIPTION: Example of how to debug the moment a test fails in Cypress by binding to the 'fail' event.

LANGUAGE: javascript
CODE:
Cypress.on('fail', (error, runnable) => {
  debugger

  // we now have access to the err instance
  // and the mocha runnable this failed on

  throw error // throw error to have test still fail
})

it('calls the "fail" callback when this test fails', () => {
  // when this cy.get() fails the callback
  // is invoked with the error
  cy.get('element-that-does-not-exist')
})

----------------------------------------

TITLE: Running Cypress Tests with Yarn
DESCRIPTION: This command runs Cypress tests using Yarn. It executes the 'cypress run' command, which starts the Cypress test runner in headless mode.

LANGUAGE: shell
CODE:
yarn cypress run

----------------------------------------

TITLE: Basic Authorization Test Example
DESCRIPTION: Comparison of a basic authorization test between Protractor and Cypress, showing how to navigate pages and interact with form elements.

LANGUAGE: javascript
CODE:
describe('Authorization tests', () => {
  it('allows the user to signup for a new account', () => {
    browser.get('/signup')
    element(by.css('#email-field')).sendKeys('user@email.com')
    element(by.css('#confirm-email-field')).sendKeys('user@email.com')
    element(by.css('#password-field')).sendKeys('testPassword1234')
    element(by.cssContainingText('button', 'Create new account')).click()

    expect(browser.getCurrentUrl()).toEqual('/signup/success')
  })
})

LANGUAGE: javascript
CODE:
describe('Authorization Tests', () => {
  it('allows the user to signup for a new account', () => {
    cy.visit('/signup')
    cy.get('#email-field').type('user@email.com')
    cy.get('#confirm-email-field').type('user@email.com')
    cy.get('#password-field').type('testPassword1234')
    cy.get('button').contains('Create new account').click()

    cy.url().should('include', '/signup/success')
  })
})

----------------------------------------

TITLE: Basic Cypress.spec Usage
DESCRIPTION: Shows the basic syntax for accessing the Cypress.spec property which returns an object containing test specification details.

LANGUAGE: javascript
CODE:
Cypress.spec // returns spec object

----------------------------------------

TITLE: Selenium WebDriver Setup Example
DESCRIPTION: Demonstrates typical Selenium WebDriver initialization code that becomes obsolete in Cypress.

LANGUAGE: java
CODE:
WebDriver driver = new ChromeDriver();

WebDriverWait wait = new WebDriverWait(driver, 10);

driver.quit();

----------------------------------------

TITLE: Clearing All Cookies in Cypress
DESCRIPTION: Use the cy.clearAllCookies() command to clear all browser cookies in Cypress. This command can be called with or without options.

LANGUAGE: javascript
CODE:
cy.clearAllCookies()
cy.clearAllCookies(options)

----------------------------------------

TITLE: Basic ViewFilters Configuration Structure
DESCRIPTION: Demonstrates the basic JSON structure for configuring view filters in Cypress. Shows the required pattern property and optional include boolean.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": string,
      "include": boolean
    }
  ]
}

----------------------------------------

TITLE: Using Cypress._ Syntax in JavaScript
DESCRIPTION: Demonstrates the correct syntax for using Lodash methods in Cypress. It shows how to call any valid Lodash method on Cypress._.

LANGUAGE: javascript
CODE:
Cypress._.method()

----------------------------------------

TITLE: Example of Getting All localStorage in Cypress
DESCRIPTION: Demonstrates setting a localStorage item during page load and then retrieving all localStorage data using getAllLocalStorage.

LANGUAGE: javascript
CODE:
cy.visit('https://example.cypress.io', {
  onBeforeLoad(win) {
    win.localStorage.setItem('key', 'value')
  },
})

cy.getAllLocalStorage().then((result) => {
  expect(result).to.deep.equal({
    'https://example.cypress.io': {
      key: 'value',
    },
  })
})

----------------------------------------

TITLE: Running Cypress Tests in Chrome via Command Line
DESCRIPTION: This snippet demonstrates how to run Cypress tests specifically in Chrome using the command line interface.

LANGUAGE: shell
CODE:
cypress run --browser chrome

----------------------------------------

TITLE: Complex Checkbox Interaction in Cypress
DESCRIPTION: Shows a more complex interaction involving clicking a 'choose all' element, finding checkboxes, and unchecking the first one.

LANGUAGE: javascript
CODE:
cy.get('[data-js="choose-all"]')
  .click()
  .find('input[type="checkbox"]')
  .first()
  .uncheck()

----------------------------------------

TITLE: Grouping Cypress Test Runs by Spec Context
DESCRIPTION: Commands to group Cypress test runs by different parts of an application. Uses the --spec flag to specify test files for each group.

LANGUAGE: shell
CODE:
cypress run --record --group package/admin --spec 'cypress/e2e/packages/admin/**/*'

LANGUAGE: shell
CODE:
cypress run --record --group package/customer --spec 'cypress/e2e/packages/customer/**/*'

LANGUAGE: shell
CODE:
cypress run --record --group package/guest --spec 'cypress/e2e/packages/guest/**/*'

----------------------------------------

TITLE: Increasing Keystroke Delay in Cypress
DESCRIPTION: Example showing how to slow down typing by increasing the keystroke delay to 20 milliseconds.

LANGUAGE: javascript
CODE:
Cypress.Keyboard.defaults({
  keystrokeDelay: 20,
})

----------------------------------------

TITLE: Querying Cypress Cloud API for Enterprise Reporting Data
DESCRIPTION: Example of how to construct a URL to query the Cypress Cloud API for enterprise reporting data. This snippet demonstrates the basic structure of the API endpoint, including the API key, report type, and export format.

LANGUAGE: bash
CODE:
https://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=REPORT-TYPE&export_format=csv

----------------------------------------

TITLE: Basic Cypress.$ Syntax
DESCRIPTION: Shows the basic syntax for using Cypress.$ and available jQuery methods that are proxied through the Cypress.$ interface.

LANGUAGE: javascript
CODE:
Cypress.$(selector)

// other proxied jQuery methods
Cypress.$.Event
Cypress.$.Deferred
Cypress.$.ajax
Cypress.$.get
Cypress.$.getJSON
Cypress.$.getScript
Cypress.$.post

----------------------------------------

TITLE: Form Submission Example
DESCRIPTION: Example of submitting form data using cy.request() with form encoding

LANGUAGE: javascript
CODE:
cy.request({
  method: 'POST',
  url: '/login_with_form',
  form: true,
  body: {
    username: 'jane.lane',
    password: 'password123'
  }
})

----------------------------------------

TITLE: Clearing a Cookie After Login in Cypress E2E Tests
DESCRIPTION: Shows how to clear a session cookie after login, then verify redirection to the login page when accessing a protected route.

LANGUAGE: javascript
CODE:
// assume we just logged in
cy.contains('Login').click()
cy.url().should('include', 'profile')
cy.clearCookie('session_id')
cy.visit('/dashboard') // we should be redirected back to login
cy.url().should('include', 'login')

----------------------------------------

TITLE: Conditional Testing Based on Cypress Version
DESCRIPTION: This example shows how to use the semver library to perform conditional testing based on the Cypress version. It checks if the current version is greater than or equal to '1.1.3' before running a specific test.

LANGUAGE: javascript
CODE:
const semver = require('semver')

if (semver.gte(Cypress.version, '1.1.3')) {
  it('has Cypress.platform', () => {
    expect(Cypress.platform).to.be.a('string')
  })
}

----------------------------------------

TITLE: Correct Usage Example in Cypress
DESCRIPTION: Demonstrates the correct way to use the cy.go() command for navigation.

LANGUAGE: javascript
CODE:
cy.go('back')

----------------------------------------

TITLE: Basic Element Filter Configuration Structure
DESCRIPTION: Defines the basic JSON structure for configuring element filters in Cypress. Includes the selector string and optional include boolean property.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": string,
      "include": boolean
    }
  ]
}

----------------------------------------

TITLE: Using Cypress.log API in JavaScript
DESCRIPTION: Demonstrates the basic syntax for using Cypress.log to create a custom log entry.

LANGUAGE: javascript
CODE:
Cypress.log(options)

----------------------------------------

TITLE: User Role Permissions Table in Markdown
DESCRIPTION: Markdown table defining the permissions matrix for different user roles (Member, Admin, Owner) in Cypress Cloud, detailing what actions each role can perform.

LANGUAGE: markdown
CODE:
| Permission                                      | Member | Admin | Owner |
| ----------------------------------------------- | ------ | ----- | ----- |
| See test results of private projects            | ✅     | ✅    | ✅    |
| See record keys of projects                     | ✅     | ✅    | ✅    |
| See billing and usage information               |        | ✅    | ✅    |
| Edit billing information                        |        | ✅    | ✅    |
| See users invited to organization               |        | ✅    | ✅    |
| Resend invitation to invited user               |        | ✅    | ✅    |
| Invite 'member' to organization                 |        | ✅    | ✅    |
| Invite 'admin' to organization                  |        | ✅    | ✅    |
| See user requests to join organization          |        | ✅    | ✅    |
| Accept user requests to join organization       |        | ✅    | ✅    |
| Remove 'member' from organization               |        | ✅    | ✅    |
| Remove 'admin' from organization                |        | ✅    | ✅    |
| Edit 'member' in organization                   |        | ✅    | ✅    |
| Edit 'admin' in organization                    |        | ✅    | ✅    |
| Edit project name                               |        | ✅    | ✅    |
| Edit project status (private/public)            |        | ✅    | ✅    |
| Add or delete record keys                       |        | ✅    | ✅    |
| Set up GitHub Integration                       |        | ✅    | ✅    |
| Set up Slack Integration                        |        | ✅    | ✅    |
| Invite 'owner' to organization                  |        |       | ✅    |
| Edit 'owner' in organization                    |        |       | ✅    |
| Remove 'owner' from organization                |        |       | ✅    |
| Add, edit, remove user in personal organization |        |       | ✅    |
| Edit organization name                          |        |       | ✅    |
| Delete organization                             |        |       | ✅    |
| Transfer project to another organization        |        |       | ✅    |
| Delete project                                  |        |       | ✅    |
| Set up SSO                                      |        |       | ✅    |

----------------------------------------

TITLE: Waiting for Multiple Aliases in Cypress
DESCRIPTION: Shows how to use cy.wait() with an array of aliases to wait for multiple requests to complete.

LANGUAGE: javascript
CODE:
cy.intercept('/users/*').as('getUsers')
cy.intercept('/activities/*').as('getActivities')
cy.intercept('/comments/*').as('getComments')
cy.visit('/dashboard')

cy.wait(['@getUsers', '@getActivities', '@getComments']).then(
  (interceptions) => {
    // interceptions will now be an array of matching requests
    // interceptions[0] <-- getUsers
    // interceptions[1] <-- getActivities
    // interceptions[2] <-- getComments
  }
)

----------------------------------------

TITLE: Handling Unhandled Rejected Promises with Native Promises in JavaScript
DESCRIPTION: Demonstrates how to register an event listener to handle unhandled rejected promises when using native built-in promises in test code.

LANGUAGE: javascript
CODE:
window.addEventListener('unhandledrejection', (event) => {
  throw event.reason
})

----------------------------------------

TITLE: Clearing Local Storage in Cypress
DESCRIPTION: Demonstrates various ways to clear localStorage using Cypress commands. This includes clearing all localStorage, clearing specific keys, and using regular expressions to match keys.

LANGUAGE: javascript
CODE:
cy.clearLocalStorage()
cy.clearLocalStorage(key)
cy.clearLocalStorage(options)
cy.clearLocalStorage(keys, options)

LANGUAGE: javascript
CODE:
cy.clearLocalStorage() // clear all local storage

LANGUAGE: javascript
CODE:
cy.clearLocalStorage('appName')

LANGUAGE: javascript
CODE:
cy.clearLocalStorage(/app-/)

LANGUAGE: javascript
CODE:
cy.clearLocalStorage(/prop1|2/).then((ls) => {
  expect(ls.getItem('prop1')).to.be.null
  expect(ls.getItem('prop2')).to.be.null
  expect(ls.getItem('prop3')).to.eq('magenta')
})

----------------------------------------

TITLE: Setting Proxy on Windows Command Prompt
DESCRIPTION: Commands to set proxy environment variables in Windows Command Prompt

LANGUAGE: shell
CODE:
set HTTP_PROXY=http://my-company-proxy.com

LANGUAGE: shell
CODE:
setx HTTP_PROXY http://my-company-proxy.com

----------------------------------------

TITLE: Verifying Document Type in Cypress
DESCRIPTION: This snippet shows how to use Cypress.dom.isDocument to check if a node is of document type.

LANGUAGE: javascript
CODE:
cy.get('p').then(($el) => {
  Cypress.dom.isDocument($el) // false
})

----------------------------------------

TITLE: Stopping Cypress Tests Using Cypress.stop()
DESCRIPTION: Basic syntax for using Cypress.stop() to halt test execution.

LANGUAGE: javascript
CODE:
Cypress.stop()

----------------------------------------

TITLE: Incorrect Usage of uncheck Command in Cypress
DESCRIPTION: Illustrates incorrect ways to use the uncheck command, either by chaining directly off 'cy' or using it on non-checkbox elements.

LANGUAGE: javascript
CODE:
cy.uncheck('[type="checkbox"]') // Errors, cannot be chained off 'cy'
cy.get('p:first').uncheck() // Errors, '.get()' does not yield checkbox

----------------------------------------

TITLE: Using Named Path Parameters in Cypress Views
DESCRIPTION: This configuration shows how to use named path parameters in the URL pattern. It groups all URLs under '/users/' with a named parameter for the user.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://www.my-app.com/users/:name"
    }
  ]
}

----------------------------------------

TITLE: Accessing Cypress Version in JavaScript
DESCRIPTION: This snippet demonstrates how to access the current version of Cypress using the Cypress.version property. It returns a string representing the semantic version number.

LANGUAGE: javascript
CODE:
Cypress.version // '1.1.0'

----------------------------------------

TITLE: Creating cypress.env.json for Environment Variables
DESCRIPTION: Demonstrates how to create a cypress.env.json file to set environment variables that can be different for each developer machine.

LANGUAGE: json
CODE:
{
  "host": "veronica.dev.local",
  "api_server": "http://localhost:8888/api/v1/"
}

----------------------------------------

TITLE: Cookie Existence Check
DESCRIPTION: Simple example showing how to verify a cookie exists without checking its properties

LANGUAGE: javascript
CODE:
cy.getCookie('my-session-cookie').should('exist')

----------------------------------------

TITLE: Cypress Visibility Assertion
DESCRIPTION: Shows the equivalent visibility assertion in Cypress.

LANGUAGE: javascript
CODE:
cy.get('#myButton').should('be.visible')

----------------------------------------

TITLE: Basic Usage of getAllLocalStorage in Cypress
DESCRIPTION: Demonstrates the basic syntax for using the getAllLocalStorage command in Cypress.

LANGUAGE: javascript
CODE:
cy.getAllLocalStorage()

----------------------------------------

TITLE: Checking if an Element is Detached from the DOM in Cypress
DESCRIPTION: This example uses Cypress.dom.isDetached to verify if a button element is detached from the DOM.

LANGUAGE: javascript
CODE:
cy.get('button').then(($el) => {
  Cypress.dom.isDetached($el) // false
})

----------------------------------------

TITLE: ScrollTo Coordinate Examples
DESCRIPTION: Examples of using scrollTo with specific pixel and percentage coordinates.

LANGUAGE: javascript
CODE:
cy.get('#infinite-scroll-list').scrollTo(0, 500)
cy.scrollTo('500px')
cy.get('.user-photo').scrollTo('0%', '25%')

----------------------------------------

TITLE: Running Cypress Tests with npm
DESCRIPTION: This command uses npx to run Cypress tests with npm. It executes the 'cypress run' command, which starts the Cypress test runner in headless mode.

LANGUAGE: shell
CODE:
npx cypress run

----------------------------------------

TITLE: Accessing Environment Variables in Cypress Tests
DESCRIPTION: Shows how to access an environment variable set in a plugin within a Cypress test. This example demonstrates grabbing the value of an environment variable once before any tests in the spec run.

LANGUAGE: javascript
CODE:
// cypress/e2e/secrets.cy.js
describe('Environment variable set in plugin', () => {
  let sharedSecret

  before(() => {
    sharedSecret = Cypress.env('sharedSecret')
  })

  it.only('can be accessed within test.', () => {
    cy.log(sharedSecret)
  })
})

----------------------------------------

TITLE: Browser Customization Configuration
DESCRIPTION: TypeScript configuration to customize the list of available browsers in Cypress, filtering for Chromium-based browsers excluding Electron.

LANGUAGE: typescript
CODE:
return {
  browsers: config.browsers.filter(
    (b) => b.family === 'chromium' && b.name !== 'electron'
  ),
}

----------------------------------------

TITLE: Clearing a Specific Cookie in Cypress
DESCRIPTION: Demonstrates the basic syntax for clearing a cookie named 'authId' using the cy.clearCookie() command.

LANGUAGE: javascript
CODE:
cy.clearCookie('authId') // clear the 'authId' cookie

----------------------------------------

TITLE: Setting Custom Spec Pattern for Component Tests
DESCRIPTION: Demonstrates how to configure custom spec file patterns for component testing. This example restricts spec file locations to the src directory with specific file extensions.

LANGUAGE: javascript
CODE:
{
  component: {
    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'
  }
}

----------------------------------------

TITLE: Disabling Spy Command Log
DESCRIPTION: Example showing how to disable logging of spy calls to the Command Log using .log(false).

LANGUAGE: javascript
CODE:
const obj = {
  foo() {},
}
const spy = cy.spy(obj, 'foo').log(false)

----------------------------------------

TITLE: Cypress Tests with Chrome Browser
DESCRIPTION: Configuration for running Cypress tests using Chrome browser in GitHub Actions.

LANGUAGE: yaml
CODE:
- name: Cypress run
  uses: cypress-io/github-action@v6
  with:
    build: npm run build
    start: npm start
    browser: chrome

----------------------------------------

TITLE: Setting Retry Attempts for All Modes in Cypress
DESCRIPTION: Configure retry attempts for all tests in both cypress run and cypress open modes.

LANGUAGE: javascript
CODE:
{
  retries: 1
}

----------------------------------------

TITLE: Testing Type Assertion Example
DESCRIPTION: Example test case showing how to assert the current testing type is set to component testing mode.

LANGUAGE: javascript
CODE:
it('is running component testing mode', () => {
  expect(Cypress.testingType).to.equal('component')
})

----------------------------------------

TITLE: Testing Responsive Navigation with Viewport Changes
DESCRIPTION: Demonstrates how to use viewport changes to test responsive behavior of a navigation bar.

LANGUAGE: javascript
CODE:
cy.get('#navbar').should('be.visible')

cy.viewport(320, 480)

// the navbar should have collapse since our screen is smaller
cy.get('#navbar').should('not.be.visible')
cy.get('.navbar-toggle').should('be.visible').click()
cy.get('.nav').find('a').should('be.visible')

----------------------------------------

TITLE: Opening Cypress with Yarn
DESCRIPTION: Launches the Cypress Test Runner using Yarn package manager. This command opens the interactive GUI for running Cypress tests.

LANGUAGE: shell
CODE:
yarn cypress open

----------------------------------------

TITLE: Basic After Run Event Handler in TypeScript
DESCRIPTION: Basic implementation of the after:run event handler showing the syntax for registering the event.

LANGUAGE: typescript
CODE:
on('after:run', (results) => {
  /* ... */
})

----------------------------------------

TITLE: Cypress Tests with Docker Container
DESCRIPTION: GitHub Actions configuration using Cypress Docker image with specific Chrome version.

LANGUAGE: yaml
CODE:
name: Cypress Tests using Cypress Docker Image

on: push

jobs:
  cypress-run:
    runs-on: ubuntu-24.04
    container:
      image: cypress/browsers:22.12.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm start
          browser: chrome

----------------------------------------

TITLE: HTML Structure Example for .find()
DESCRIPTION: Sample HTML structure showing parent-child relationship for .find() usage.

LANGUAGE: html
CODE:
<ul id="parent">
  <li class="first"></li>
  <li class="second"></li>
</ul>

----------------------------------------

TITLE: Using .should() or .and() in Cypress for Assertions
DESCRIPTION: .should() and .and() have special logic to rerun the callback function until no assertions throw. Be cautious of side effects in these callbacks as they may be performed multiple times.

LANGUAGE: javascript
CODE:
.should()

LANGUAGE: javascript
CODE:
.and()

----------------------------------------

TITLE: Basic Usage of cy.tick() in Cypress
DESCRIPTION: Demonstrates the basic syntax for using cy.tick() to move time forward by a specified number of milliseconds.

LANGUAGE: javascript
CODE:
cy.tick(500)

----------------------------------------

TITLE: Enabling Video Recording in Cypress Configuration
DESCRIPTION: Configuration snippet to enable video recording in Cypress tests by setting the video property to true.

LANGUAGE: typescript
CODE:
{
  video: true
}

----------------------------------------

TITLE: Browser History Navigation Using Direction
DESCRIPTION: Examples of using cy.go() with 'back' and 'forward' direction parameters.

LANGUAGE: javascript
CODE:
cy.go('back') // equivalent to clicking back button
cy.go('forward') // equivalent to clicking forward button

----------------------------------------

TITLE: HTML Snapshots for Dynamic Element Identification
DESCRIPTION: These HTML snippets represent two different snapshots of a form with a dynamically changing dropdown ID. They demonstrate how the configured selector can identify the same element across snapshots despite the changing ID.

LANGUAGE: xml
CODE:
<!-- Snapshot 1 -->
<body>
  <form id="my-form">
    <input id="dropdown-142"></input>
  </form>
</body>

<!-- Snapshot 2 -->
<body>
  <form id="my-form">
    <input id="dropdown-980"></input>
  </form>
</body>

----------------------------------------

TITLE: Generic Server Endpoint for Code Coverage
DESCRIPTION: Generic code to add a code coverage endpoint to any server type.

LANGUAGE: javascript
CODE:
if (global.__coverage__) {
  // handle "GET __coverage__" requests
  onRequest = (response) => {
    response.sendJSON({ coverage: global.__coverage__ })
  }
}

----------------------------------------

TITLE: GitLab CI Configuration with Cypress Docker Image
DESCRIPTION: GitLab CI configuration using the official Cypress Docker image to run tests in Firefox. It demonstrates how to use pre-built images with browsers.

LANGUAGE: yaml
CODE:
stages:
  - test

test:
  image: cypress/browsers:22.12.0
  stage: test
  script:
    # install dependencies
    - npm ci
    # start the server in the background
    - npm start &
    # run Cypress tests
    - npx cypress run --browser firefox

----------------------------------------

TITLE: Restoring Clock in Cypress Tests
DESCRIPTION: Shows how to restore the clock to allow the application to resume normal time-related behavior.

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('http://localhost:3333')
cy.get('#search').type('Acme Company')
cy.tick(1000)
// more test code here

// restore the clock
cy.clock().then((clock) => {
  clock.restore()
})
// more test code here

----------------------------------------

TITLE: Grouping URLs Across Subdomains in Cypress
DESCRIPTION: This example shows how to group URLs across different subdomains. It uses a wildcard for the subdomain and groups by the path.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://*.my-app.com/:path*",
      "groupBy": ["path"]
    }
  ]
}

----------------------------------------

TITLE: Correct Usage of .debug() in Cypress
DESCRIPTION: Shows correct usage examples of the .debug() command, including pausing at the beginning of commands and debugging a specific command's yield.

LANGUAGE: javascript
CODE:
cy.debug().getCookie('app') // Pause to debug at beginning of commands
cy.get('nav').debug() // Debug the `get` command's yield

----------------------------------------

TITLE: Configuring Cypress for Svelte with Webpack
DESCRIPTION: This snippet demonstrates the Cypress configuration for Svelte component testing using Webpack as the bundler. It imports a webpack config and sets up the devServer options, including the framework, bundler, and optional webpack configuration.

LANGUAGE: typescript
CODE:
import webpackConfig from './webpack.config'

LANGUAGE: typescript
CODE:
{
  component: {
    devServer: {
      framework: 'svelte',
      bundler: 'webpack',
      // optionally pass in webpack config
      webpackConfig,
    },
  },
}

----------------------------------------

TITLE: Cypress Test Configuration for Browser-Specific Tests
DESCRIPTION: This JavaScript snippet shows how to configure Cypress tests to run or be ignored based on specific browsers using the test configuration options.

LANGUAGE: javascript
CODE:
// Run the test if Cypress is running
// using the built-in Electron browser
it('has access to clipboard', { browser: 'electron' }, () => {
  // ...
})

// Run the test if Cypress is run via Firefox
it('Download extension in Firefox', { browser: 'firefox' }, () => {
  cy.get('#dl-extension').should('contain', 'Download Firefox Extension')
})

// Run happy path tests if Cypress is run via Firefox
describe('happy path suite', { browser: 'firefox' }, () => {
  it('...')
})

// Ignore test if Cypress is running via Chrome
// This test is not recorded to Cypress Cloud
it('Show warning outside Chrome', { browser: '!chrome' }, () => {
  cy.get('.browser-warning').should(
    'contain',
    'For optimal viewing, use Chrome browser'
  )
})

----------------------------------------

TITLE: Basic Usage of .prev() in Cypress
DESCRIPTION: Demonstrates the correct usage of the .prev() command to get the previous 'tr' element of a highlighted row.

LANGUAGE: javascript
CODE:
cy.get('tr.highlight').prev() // Yield previous 'tr'

----------------------------------------

TITLE: Setting Viewport in Test Configuration
DESCRIPTION: Shows how to configure viewport size for a specific test suite using test configuration options.

LANGUAGE: javascript
CODE:
describe(
  'page display on medium size screen',
  {
    viewportHeight: 1000,
    viewportWidth: 400,
  },
  () => {
    it('does not display sidebar', () => {
      cy.get('#sidebar').should('not.be.visible')
    })

    it('shows hamburger menu', () => {
      cy.get('#header').find('i.menu').should('be.visible')
    })
  }
)

----------------------------------------

TITLE: Resulting Elements Shown in UI Coverage After Filtering
DESCRIPTION: This code block represents the elements that will be shown in the UI Coverage report after applying the `elementFilters` configuration. Only the enabled 'Cancel' button is included.

LANGUAGE: plaintext
CODE:
[data-cy='cancel']

----------------------------------------

TITLE: NPM Script for Coverage-Enabled Server Start
DESCRIPTION: NPM script to start a Node server with code coverage instrumentation.

LANGUAGE: json
CODE:
{
  "scripts": {
    "start": "node server",
    "start:coverage": "nyc --silent node server"
  }
}

----------------------------------------

TITLE: Accessing Svelte Component Instance in Cypress Test
DESCRIPTION: Shows how to access the mounted Svelte component instance directly in a Cypress test. This can be useful for more advanced testing scenarios where you need to interact with the component's internal state or methods.

LANGUAGE: javascript
CODE:
cy.mount(Stepper).then(({ component }) => {
  //component is the rendered instance of Stepper
})

----------------------------------------

TITLE: Starting Browser in Fullscreen for Cypress Tests
DESCRIPTION: Example of configuring browsers to start in fullscreen mode for Cypress tests, covering Chromium-based browsers and Electron.

LANGUAGE: javascript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  if (browser.family === 'chromium' && browser.name !== 'electron') {
    launchOptions.args.push('--start-fullscreen')

    return launchOptions
  }

  if (browser.name === 'electron') {
    launchOptions.preferences.fullscreen = true

    return launchOptions
  }
})

----------------------------------------

TITLE: Excluding Elements by Attribute Example
DESCRIPTION: Shows how to exclude elements based on specific data attributes using attribute selectors.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "[data-role='decorative']",
      "include": false
    }
  ]
}

LANGUAGE: xml
CODE:
<body>
  <button data-role="decorative">
    <img src="icon.png" />
  </button>
  <button data-role="primary">
    View
  </button>
</body>

----------------------------------------

TITLE: Setting Viewport Configuration
DESCRIPTION: Shows how to modify viewport dimensions during test execution.

LANGUAGE: javascript
CODE:
Cypress.config('viewportWidth', 800)

Cypress.config('viewportWidth') // => 800

----------------------------------------

TITLE: Configuring Cypress Base URL
DESCRIPTION: Shows how to set up the baseUrl configuration option in Cypress to avoid repeating the full URL in tests.

LANGUAGE: javascript
CODE:
{
  e2e: {
    baseUrl: 'http://localhost:8080'
  }
}

----------------------------------------

TITLE: Browser Exclusion in Cypress Tests
DESCRIPTION: Example showing how to exclude specific browsers using the ! operator with Cypress.isBrowser()

LANGUAGE: javascript
CODE:
it('warns to view page in Chrome browser', () => {
  // true when running in Firefox, etc...
  if (Cypress.isBrowser('!chrome')) {
    cy.get('.browser-warning').should(
      'contain',
      'For optimal viewing, use Chrome browser'
    )
  }
})

----------------------------------------

TITLE: Stable Attribute Configuration Example
DESCRIPTION: Shows how to prioritize stable attributes over dynamic ones for consistent element identification.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": ["data-type"]
  }
}

LANGUAGE: xml
CODE:
<ul>
  <li row-id="10829" data-type="search">Search</li>
  <li row-id="38019" data-type="filter">Filter</li>
</ul>

----------------------------------------

TITLE: Configuring Reporter Options in Cypress Config
DESCRIPTION: Illustrates how to set reporter options in the Cypress configuration file, using JUnit reporter as an example.

LANGUAGE: javascript
CODE:
{
  reporter: 'junit',
  reporterOptions: {
    mochaFile: 'results/my-test-output.xml',
    toConsole: true
  }
}

----------------------------------------

TITLE: Testing Event Handlers in Vue Components
DESCRIPTION: Shows how to test event handlers using Cypress spies with Vue components

LANGUAGE: javascript
CODE:
it('clicking + fires a change event with the incremented value', () => {
  const onChangeSpy = cy.spy().as('onChangeSpy')
  cy.mount(Stepper, { props: { onChange: onChangeSpy } })
  cy.get('[data-cy=increment]').click()
  cy.get('@onChangeSpy').should('have.been.calledWith', 1)
})

----------------------------------------

TITLE: Clearing Current Session Data with Disabled Test Isolation in JavaScript
DESCRIPTION: Demonstrates how to clear the current session data in a before() block when testIsolation is disabled for a test suite.

LANGUAGE: javascript
CODE:
describe('Dashboard', { testIsolation: false }, () => {
  before(() => {
    // ensure clean test slate for these tests
    cy.then(Cypress.session.clearCurrentSessionData)
  })
})

----------------------------------------

TITLE: Testing Event Handlers with Spy
DESCRIPTION: Shows how to test event handlers using Cypress spy functionality

LANGUAGE: typescript
CODE:
it('clicking + fires a change event with the incremented value', () => {
  cy.mount(StepperComponent, {
    componentProperties: {
      change: createOutputSpy('changeSpy'),
    },
  })
  cy.get('[data-cy=increment]').click()
  cy.get('@changeSpy').should('have.been.calledWith', 1)
})

----------------------------------------

TITLE: Configuring Verbose Cookie Debugging Output
DESCRIPTION: Shows how to configure cookie debugging with reduced verbosity and how to disable debugging.

LANGUAGE: javascript
CODE:
Cypress.Cookies.debug(true, { verbose: false })

// Later disable debugging
Cypress.Cookies.debug(false) // now debugging is turned off

----------------------------------------

TITLE: Implementing Google Login Function in Cypress
DESCRIPTION: Custom function to perform Google login using cy.origin() for cross-origin testing in Auth0 authentication flow.

LANGUAGE: javascript
CODE:
function logIntoGoogle(username: string, password: string, name: string) {
  Cypress.on(
    'uncaught:exception',
    (err) =>
      !err.message.includes('ResizeObserver loop') &&
      !err.message.includes('Error in protected function')
  )
  cy.visit('http://localhost:3000')
  cy.get('#qsLoginBtn').click()

  cy.origin(Auth0Domain, () => {
    cy.scrollTo('bottom')
    cy.get('form[data-provider="google"]').submit()
  })

  cy.origin(
    'https://accounts.google.com',
    {
      args: {
        username,
        password,
      },
    },
    ({ username, password }) => {
      Cypress.on(
        'uncaught:exception',
        (err) =>
          !err.message.includes('ResizeObserver loop') &&
          !err.message.includes('Error in protected function')
      )

      cy.get('input[type="email"]').type(username, {
        log: false,
      })
      cy.contains('Next').click().wait(4000)
      cy.get('[type="password"]').type(password, {
        log: false,
      })
      cy.contains('Next').click().wait(4000)
    }
  )

  cy.get('h6.dropdown-header').should('contain', name)
}

----------------------------------------

TITLE: Visiting a Local Server in Cypress Test
DESCRIPTION: Demonstrates how to create a basic Cypress test that visits a local development server.

LANGUAGE: javascript
CODE:
describe('The Home Page', () => {
  it('successfully loads', () => {
    cy.visit('http://localhost:8080') // change URL to match your dev URL
  })
})

----------------------------------------

TITLE: Getting Children of Secondary Navigation in Cypress
DESCRIPTION: Demonstrates how to use the children command to retrieve child elements of a specific class.

LANGUAGE: html
CODE:
<ul>
  <li>About</li>
  <li>
    Services
    <ul class="secondary-nav">
      <li class="services-1">Web Design</li>
      <li class="services-2">Logo Design</li>
      <li class="services-3">
        Print Design
        <ul class="tertiary-nav">
          <li>Signage</li>
          <li>T-Shirt</li>
          <li>Business Cards</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Contact</li>
</ul>

LANGUAGE: javascript
CODE:
// yields [
//  <li class="services-1">Web Design</li>,
//  <li class="services-2">Logo Design</li>,
//  <li class="services-3">Print Design</li>
// ]
cy.get('ul.secondary-nav').children()

----------------------------------------

TITLE: Triggering Change Events on Input Elements in Cypress
DESCRIPTION: Demonstrates how to trigger change events on input elements, such as range inputs (sliders).

LANGUAGE: javascript
CODE:
cy.get('input[type=range]').as('range').invoke('val', 25).trigger('change')

cy.get('@range').siblings('p').should('have.text', '25')

----------------------------------------

TITLE: Testing Multiple Untested Links in Cypress
DESCRIPTION: Shows how to systematically test multiple untested pages by iterating through an array of URLs and performing basic checks on each page.

LANGUAGE: javascript
CODE:
describe('Cover Untested Links', () => {
  it('Visits untested pages', () => {
    const untestedLinks = ['/about-us', '/contact', '/pricing']

    untestedLinks.forEach((link) => {
      cy.visit(link)
      // Perform basic checks to ensure the page loads correctly
      cy.get('h1').should('exist')
      // UI Coverage will now surface the coverage of these pages
    })
  })
})

----------------------------------------

TITLE: NPM Config for Custom CA Certificate
DESCRIPTION: Configuration for using custom certificate authority in .npmrc file

LANGUAGE: shell
CODE:
cafile=/home/person/certs/ca.crt

----------------------------------------

TITLE: Running Cypress with CI build ID for parallelization
DESCRIPTION: Command to run Cypress tests with recording, parallelization, and a custom CI build ID. This is useful for load balancing in custom CI setups.

LANGUAGE: shell
CODE:
cypress run --record --parallel --ci-build-id $CI_RUN_ID

----------------------------------------

TITLE: Basic Plugin Configuration in Cypress
DESCRIPTION: Example showing the basic structure for configuring plugins in Cypress.

LANGUAGE: typescript
CODE:
// configure plugins here

----------------------------------------

TITLE: Creating Express Server for Cypress Component Testing
DESCRIPTION: TypeScript implementation of a custom Express server that handles component test requests and injects necessary scripts.

LANGUAGE: typescript
CODE:
function createServer(cypressConfig, bundleDir, port = 1234) {
  const app = express()

  const clientScript = readFileSync(
    path.join(__dirname, './client-script.js'),
    'utf8'
  )

  app.get(
    cypressConfig.devServerPublicPathRoute + '/index.html',
    async (_req, res) => {
      const html = await fs.readFile(
        path.join(cypressConfig.repoRoot, cypressConfig.indexHtmlFile),
        { encoding: 'utf8' }
      )

      const output = html.replace(
        '</head>',
        `<script type="module">${clientScript}</script></head>`
      )
      res.send(output)
    }
  )

  app.use(cypressConfig.devServerPublicPathRoute, express.static(bundleDir))

  app.listen(port)
}

----------------------------------------

TITLE: Accessing Cypress.currentTest Basic Syntax
DESCRIPTION: Shows the basic syntax for accessing Cypress.currentTest object and its properties. Demonstrates how to access the test title and titlePath properties.

LANGUAGE: javascript
CODE:
// an object with title and titlePath properties
Cypress.currentTest

// the title of the current test
Cypress.currentTest.title

// an array with the current test's title path
Cypress.currentTest.titlePath

----------------------------------------

TITLE: Creating a Mount Adapter for Solid.js in Cypress
DESCRIPTION: This code snippet shows how to implement a Mount Adapter for Solid.js, which renders components in Cypress tests using cy.mount(). It includes cleanup logic and uses the getContainerEl and setupHooks utilities from @cypress/mount-utils.

LANGUAGE: javascript
CODE:
import { getContainerEl, setupHooks } from '@cypress/mount-utils'
import { render } from 'solid-js/web'

let dispose

function cleanup() {
  dispose?.()
}

/**
 * @param {() => JSX.Element} - component to render
 */
export function mount(component, options = {}) {
  // Retrieve root DOM element that Cypress has prepared for this test
  const root = getContainerEl()

  dispose = render(() => component, root)

  // Wait until next microtick to ensure any async render logic has executed
  return cy.wait(0, { log: false }).then(() => {
    if (options.log !== false) {
      Cypress.log({
        name: 'mount',
        message: 'Mounted component',
      })
    }
  })
}

// Cleanup between each test
setupHooks(cleanup)

----------------------------------------

TITLE: Cypress Plugin Setup for Instrumenting Spec Files
DESCRIPTION: Configuration to instrument Cypress spec files for code coverage.

LANGUAGE: javascript
CODE:
require('@cypress/code-coverage/task')(on, config)
// tell Cypress to use .babelrc file
// and instrument the specs files
// only the extra application files will be instrumented
// not the spec files themselves
on('file:preprocessor', require('@cypress/code-coverage/use-babelrc'))

return config

----------------------------------------

TITLE: Handling Hidden Elements in Cypress Tests
DESCRIPTION: Example of revealing and testing hidden elements in a dropdown menu to ensure complete coverage.

LANGUAGE: javascript
CODE:
cy.get('[data-cy="dropdown-toggle"]').click() // Reveal hidden elements
cy.get('[data-cy="dropdown-item"]').should('be.visible').click()

----------------------------------------

TITLE: Setting HTTP Proxy on Linux/macOS
DESCRIPTION: Commands to configure HTTP proxy and NO_PROXY settings on Linux or macOS systems

LANGUAGE: shell
CODE:
export HTTP_PROXY=http://my-company-proxy.com

LANGUAGE: shell
CODE:
export NO_PROXY=localhost,google.com,apple.com

----------------------------------------

TITLE: Login Helper Function with Session
DESCRIPTION: Example showing how to update an existing login helper function to use cy.session()

LANGUAGE: javascript
CODE:
const login = (name, password) => {
  cy.session(
    [name, password],
    () => {
      cy.visit('/login')
      cy.get('[data-test=name]').type(name)
      cy.get('[data-test=password]').type(password)
      cy.get('#submit').click()
      cy.url().should('contain', '/home')
    },
    {
      validate() {
        cy.visit('/account-details')
      },
    }
  )
}

----------------------------------------

TITLE: Verifying Applied Session Data in JavaScript
DESCRIPTION: Shows how to use Cypress.session.getCurrentSessionData() to check all cookies, localStorage, and sessionStorage applied after cy.session() completes.

LANGUAGE: javascript
CODE:
it('debug session', () => {
    cy.session('id', () => {
        ...
    })
    .then(async () => {
        const sessionData = await Cypress.session.getCurrentSessionData()
        cy.debug()
    })
})

----------------------------------------

TITLE: Screenshot Overwrite Configuration
DESCRIPTION: Enabling overwrite of existing screenshots with the same filename

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  overwrite: true,
})

----------------------------------------

TITLE: Checking Element Scrollability in Cypress
DESCRIPTION: This example demonstrates the use of Cypress.dom.isScrollable to determine if the body element is scrollable.

LANGUAGE: javascript
CODE:
cy.get('body').then(($el) => {
  Cypress.dom.isScrollable($el) // true
})

----------------------------------------

TITLE: Database Seeding with Assertion
DESCRIPTION: Example of seeding a database and asserting successful execution

LANGUAGE: javascript
CODE:
cy.exec('rake db:seed').its('code').should('eq', 0)

----------------------------------------

TITLE: Converting TypeScript Exports to JavaScript with copyTsToJs
DESCRIPTION: Demonstrates how the copyTsToJs plugin converts a TypeScript code block with type annotations and ES6 exports into equivalent JavaScript code with CommonJS exports.

LANGUAGE: typescript
CODE:
const name: string = 'joe'

export default name

LANGUAGE: javascript
CODE:
const name = 'joe'

module.exports = name

----------------------------------------

TITLE: JavaScript Redirect Testing
DESCRIPTION: Example of testing JavaScript-based redirects to different origins

LANGUAGE: html
CODE:
<html>
  <button id="nav">Navigate to Cypress example</button>
  <script>
    document.querySelector('#nav').addEventListener('click', () => {
      window.location.href = 'https://example.cypress.io'
    })
  </script>
</html>

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:8080')
cy.get('#nav').submit() // trigger a javascript redirect!
cy.origin('https://example.cypress.io', () => {
  cy.url().should('contain', 'cypress.io')
})

----------------------------------------

TITLE: Correct usage of the screenshot command
DESCRIPTION: Shows the proper way to use the screenshot command in Cypress tests.

LANGUAGE: javascript
CODE:
cy.screenshot()
cy.get('.post').screenshot()

----------------------------------------

TITLE: Installing UI Coverage Results Module
DESCRIPTION: Command to install the @cypress/extract-cloud-results module in CI environment. Should be installed separately from other dependencies using --force flag.

LANGUAGE: shell
CODE:
npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz

----------------------------------------

TITLE: Configuring Cypress to disable animation error checking
DESCRIPTION: You can globally disable animation error checking or increase the threshold by modifying the Cypress configuration.

LANGUAGE: javascript
CODE:
{
  waitForAnimations: false,
  animationDistanceThreshold: 50,
}

----------------------------------------

TITLE: File Writing from Response
DESCRIPTION: Example demonstrating how to write API response data to a fixture file

LANGUAGE: javascript
CODE:
cy.intercept('POST', '/comments').as('postComment')
cy.get('.add-comment').click()
cy.wait('@postComment').then(({ response }) => {
  cy.exec(
    `echo ${JSON.stringify(response.body)} >cypress/fixtures/comment.json`
  )
  cy.fixture('comment.json').should('deep.eq', response.body)
})

----------------------------------------

TITLE: Unwrapping jQuery Object in Cypress
DESCRIPTION: This snippet demonstrates how to use Cypress.dom.unwrap to extract raw elements from a jQuery object.

LANGUAGE: javascript
CODE:
cy.get('body').then(($el) => {
  Cypress.dom.unwrap($el)
})

----------------------------------------

TITLE: Correct Usage of cy.writeFile()
DESCRIPTION: Example of correct usage for the cy.writeFile() command in Cypress.

LANGUAGE: javascript
CODE:
cy.writeFile('menu.json')

----------------------------------------

TITLE: Checking Element Visibility in Cypress
DESCRIPTION: This example uses Cypress.dom.isHidden to determine if a paragraph element is hidden.

LANGUAGE: javascript
CODE:
cy.get('p').then(($el) => {
  Cypress.dom.isHidden($el) // false
})

----------------------------------------

TITLE: Defining Significant Attributes in Cypress UI Coverage
DESCRIPTION: This JSON configuration specifies which attributes Cypress should prioritize when identifying elements in the UI Coverage report.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": ["data-custom-id"]
  }
}

----------------------------------------

TITLE: Finding Last Button in Form Example
DESCRIPTION: Demonstrates chaining commands to find the last button element within a form.

LANGUAGE: javascript
CODE:
cy.get('form').find('button').last()

----------------------------------------

TITLE: Implementing UI Coverage Results Verification
DESCRIPTION: Script to fetch and verify UI Coverage results including overall coverage and critical view coverage thresholds. Uses getUICoverageResults utility to analyze test coverage data.

LANGUAGE: javascript
CODE:
const { getUICoverageResults } = require('@cypress/extract-cloud-results')

getUICoverageResults({
  projectId: process.env.CYPRESS_PROJECT_ID, // Optional if set from env
  recordKey: process.env.CYPRESS_RECORD_KEY, // Optional if set from env
  runTags: [process.env.RUN_TAGS], // Required if recording multiple runs
}).then((results) => {
  const { runNumber, uiCoverageReportUrl, summary, views } = results

  console.log(
    `Received ${summary.isPartialReport ? 'partial' : ''} results for run #${runNumber}.`
  )
  console.log(`See full report at ${uiCoverageReportUrl}.`)

  // Verify overall coverage
  if (summary.coverage < 80) {
    throw new Error(
      `Project coverage is ${summary.coverage}, below the minimum threshold of 80%.`
    )
  }

  const criticalViews = [/login/, /checkout/]

  // Verify critical view coverage
  views.forEach((view) => {
    const { displayName, coverage, uiCoverageReportUrl } = view

    if (
      criticalViews.some((pattern) => pattern.test(displayName)) &&
      coverage < 95
    ) {
      throw new Error(
        `Critical view "${displayName}" coverage is ${coverage}%, below the required 95%. See: ${uiCoverageReportUrl}`
      )
    }
  })

  console.log('UI Coverage is above minimum thresholds.')
})

----------------------------------------

TITLE: Cypress Script Configuration
DESCRIPTION: Example of configuring Cypress run scripts in package.json

LANGUAGE: json
CODE:
{
  "scripts": {
    "e2e:chrome": "cypress run --browser chrome"
  }
}

----------------------------------------

TITLE: Reading YAML File with Cypress readFile
DESCRIPTION: Example of reading a YAML file, parsing its contents, and using the data in tests.

LANGUAGE: javascript
CODE:
const YAML = require('yamljs')

cy.readFile('languages/en.yml').then((str) => {
  // parse the string into object literal
  const english = YAML.parse(str)

  cy.get('#sidebar')
    .find('.sidebar-title')
    .each(($el, i) => {
      englishTitle = english.sidebar[i]

      expect($el.text()).to.eq(englishTitle)
    })
})

----------------------------------------

TITLE: Incorrect Usage of Cypress.require
DESCRIPTION: Shows incorrect usage of Cypress.require outside cy.origin() callback and incorrect use of require() and import() inside the callback.

LANGUAGE: javascript
CODE:
// `Cypress.require()` cannot be used outside the `cy.origin()` callback.
// Use CommonJS `require()` instead
const _ = Cypress.require('lodash')

cy.origin('cypress.io', async () => {
  // `require()` and `import()` cannot be used inside the `cy.origin()` callback.
  // Use `Cypress.require()` instead
  const _ = require('lodash')
  const utils = await import('./utils')
})

----------------------------------------

TITLE: Parallelization Setup in Bitbucket Pipelines YAML
DESCRIPTION: Configures parallelization for Cypress tests using Cypress Cloud. It defines an install job and worker jobs for parallel test execution.

LANGUAGE: yaml
CODE:
image: cypress/base:22.12.0

## job definition for running E2E tests in parallel
e2e: &e2e
  name: E2E tests
  caches:
    - node
    - cypress
  script:
    - npm run start &
    - npm run e2e:record -- --parallel --group UI-Chrome --ci-build-id $BITBUCKET_BUILD_NUMBER
  artifacts:
    # store any generates images and videos as artifacts
    - cypress/screenshots/**
    - cypress/videos/**

pipelines:
  default:
    - step:
        name: Install dependencies
        caches:
          - npm
          - cypress
          - node
        script:
          - npm ci
    - parallel:
      # run N steps in parallel
      - step:
          <<: *e2e
      - step:
          <<: *e2e
      - step:
          <<: *e2e
definitions:
  caches:
    npm: $HOME/.npm
    cypress: $HOME/.cache/Cypress

----------------------------------------

TITLE: Clearing All Session Data in JavaScript
DESCRIPTION: Shows how to clear all cached session data using Cypress.session.clearAllSavedSessions().

LANGUAGE: javascript
CODE:
Cypress.session.clearAllSavedSessions()

----------------------------------------

TITLE: Automatic Retries with Cypress readFile
DESCRIPTION: Demonstrates how cy.readFile() automatically retries reading a file until assertions pass.

LANGUAGE: javascript
CODE:
cy.readFile('some/nested/path/story.txt').should('eq', 'Once upon a time...')

LANGUAGE: javascript
CODE:
cy.readFile('users.json').its('users.123.name').should('eq', 'John Doe')

----------------------------------------

TITLE: Configuring Attribute Filters in Cypress UI Coverage
DESCRIPTION: Configuration example showing how to exclude specific attributes using regex patterns to reduce noise in UI Coverage reports. Uses the attributeFilters option to exclude dynamically generated IDs.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": "id",
        "value": ":r.*:",
        "include": false
      }
    ]
  }
}

----------------------------------------

TITLE: Blurring Elements with Cypress blur Command
DESCRIPTION: Demonstrates the basic usage of the blur command in Cypress to remove focus from an element. It shows correct and incorrect usage examples.

LANGUAGE: javascript
CODE:
cy.get('[type="email"]').blur() // Blur email input
cy.get('[tabindex="1"]').blur() // Blur el with tabindex

LANGUAGE: javascript
CODE:
cy.blur('input') // Errors, cannot be chained off 'cy'
cy.window().blur() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: ScrollIntoView with Duration
DESCRIPTION: Example of scrolling to an element over a specified duration in milliseconds.

LANGUAGE: javascript
CODE:
cy.get('footer').scrollIntoView({ duration: 2000 })

----------------------------------------

TITLE: Using Icons in Cypress Documentation
DESCRIPTION: Example of using the Icon component to include Font Awesome icons in the Cypress documentation markdown files.

LANGUAGE: jsx
CODE:
<Icon name="question-circle" />

----------------------------------------

TITLE: Accessing Current Retry Attempt in Cypress Tests
DESCRIPTION: Example of how to access the current retry attempt counter and total allowed attempts in a Cypress test.

LANGUAGE: javascript
CODE:
it('does something differently on retry', { retries: 3 }, () => {
  // Cypress.currentRetry returns the current test retry count
  const attempt = Cypress.currentRetry
  // cy.state('runnable') returns the current test object
  // we can grab the total allowed attempts from its properties
  const retries = cy.state('runnable')._retries
  // use the "attempt" and "retries" values somehow
})

----------------------------------------

TITLE: Correct Usage of cy.reload() in Cypress
DESCRIPTION: Shows the correct way to use the cy.reload() command in Cypress for reloading the current page.

LANGUAGE: javascript
CODE:
cy.reload()

----------------------------------------

TITLE: Configuring before:browser:launch Event in Cypress
DESCRIPTION: Basic syntax for setting up the before:browser:launch event in Cypress configuration. This event allows modification of browser settings before launch.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  /* ... */
})

----------------------------------------

TITLE: Configuring Experimental Test Retries Strategy
DESCRIPTION: Configuration example for setting up the detect-flake-and-pass-on-threshold strategy with maxRetries and passesRequired options.

LANGUAGE: javascript
CODE:
{
  retries: {
    experimentalStrategy: 'detect-flake-and-pass-on-threshold',
    experimentalOptions: {
      maxRetries: 2,
      passesRequired: 2
    },
    openMode: true,
    runMode: true
  }
}

----------------------------------------

TITLE: Logging Cypress.spec Information
DESCRIPTION: Demonstrates how to log the Cypress.spec object within a test case, showing the object's structure with properties like name, relative path, and absolute path.

LANGUAGE: javascript
CODE:
it('log spec info', () => {
  console.log(Cypress.spec)
  // {
  //   name: 'filter.cy.js',
  //   relative: 'cypress/e2e/filter.cy.js',
  //   absolute: '/Users/janelane/Dev/web-app/cypress/e2e/filter.cy.js',
  // }
})

----------------------------------------

TITLE: Demonstrating Table Row Grouping in HTML
DESCRIPTION: This HTML snippet shows a table structure where delete buttons in each row would be grouped by UI Coverage. Interacting with one delete button is considered equivalent to testing all delete buttons in the table.

LANGUAGE: html
CODE:
<table>
  <tr>
    <td>John Doe</td>
    <td>
      <button>Delete</button>
    </td>
  </tr>
  <tr>
    <td>Jane Smith</td>
    <td>
      <button>Delete</button>
    </td>
  </tr>
</table>

----------------------------------------

TITLE: Visiting a URL in Cypress E2E Test
DESCRIPTION: Shows how to visit a URL in Cypress end-to-end tests, which is the typical way to initialize an E2E test scenario.

LANGUAGE: javascript
CODE:
cy.visit(url)

----------------------------------------

TITLE: Original TypeScript Code Example
DESCRIPTION: Shows a standalone TypeScript code block without the copyTsToJs conversion functionality.

LANGUAGE: typescript
CODE:
const name: string = 'joe'

export default name

----------------------------------------

TITLE: Taking Screenshots with Test Retries in Cypress
DESCRIPTION: Example of how screenshots are named when using test retries with cy.screenshot() in Cypress.

LANGUAGE: javascript
CODE:
describe('User Login', () => {
  it('displays login errors', () => {
    cy.visit('/')
    cy.screenshot('user-login-errors')
    // ...
  })
})

----------------------------------------

TITLE: Using baseUrl Configuration with cy.url() in Cypress
DESCRIPTION: Shows how to use Cypress.config().baseUrl to create more flexible URL assertions.

LANGUAGE: javascript
CODE:
cy.url().should('eq', 'http://localhost:8000/index.html')
cy.url().should('eq', Cypress.config().baseUrl + '/index.html') // tests won't fail in case the port changes

----------------------------------------

TITLE: Implementing File Preprocessor Event Handler in Cypress
DESCRIPTION: Example of binding to the file:preprocessor event in the setupNodeEvents function to handle file preprocessing.

LANGUAGE: javascript
CODE:
on('file:preprocessor', (file) => {
  // ...
})

----------------------------------------

TITLE: Including Specific Container Elements Example
DESCRIPTION: Demonstrates how to include only elements within a specific form container while excluding all others.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "#form *",
      "include": true
    },
    {
      "selector": "*",
      "include": false
    }
  ]
}

LANGUAGE: xml
CODE:
<body>
  <form id="form">
    <input id="name" />
  </form>
  <footer>
    <a href="#">Excluded</a>
  </footer>
</body>

----------------------------------------

TITLE: Setting Screen Size for Headless Browsers in Cypress
DESCRIPTION: Example of overriding the default screen size when running browsers in headless mode for Cypress tests. This affects screenshot and video sizes.

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser, launchOptions) => {
  if (browser.name === 'chrome' && browser.isHeadless) {
    // fullPage screenshot size is 1400x1200 on non-retina screens
    // and 2800x2400 on retina screens
    launchOptions.args.push('--window-size=1400,1200')

    // force screen to be non-retina (1400x1200 size)
    launchOptions.args.push('--force-device-scale-factor=1')

    // force screen to be retina (2800x2400 size)
    // launchOptions.args.push('--force-device-scale-factor=2')
  }

  if (browser.name === 'electron' && browser.isHeadless) {
    // fullPage screenshot size is 1400x1200
    launchOptions.preferences.width = 1400
    launchOptions.preferences.height = 1200
  }

  if (browser.name === 'firefox' && browser.isHeadless) {
    // menubars take up height on the screen
    // so fullPage screenshot size is 1400x1126
    launchOptions.args.push('--width=1400')
    launchOptions.args.push('--height=1200')
  }

  return launchOptions
})

----------------------------------------

TITLE: Triggering Events with Specific Positions and Coordinates in Cypress
DESCRIPTION: Examples of triggering events at specific positions or coordinates relative to the target element.

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mousedown', 'topRight')

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mouseup', 15, 40)

----------------------------------------

TITLE: ARIA Attribute Configuration
DESCRIPTION: Illustrates configuration for using ARIA attributes as significant identifiers in UI Coverage.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": ["aria-label"]
  }
}

LANGUAGE: xml
CODE:
<button data-cy="close" aria-label="Close">X</button>
<button data-cy="submit">Save</button>

----------------------------------------

TITLE: Event Listener Registration in Cypress
DESCRIPTION: Demonstrates how to register an event listener using the 'on' function in Cypress plugins.

LANGUAGE: typescript
CODE:
on('<event>', (arg1, arg2) => {
  // plugin stuff here
})

----------------------------------------

TITLE: Basic ScrollIntoView Syntax in Cypress
DESCRIPTION: Basic syntax examples for the scrollIntoView command showing both standard usage and with options parameter.

LANGUAGE: javascript
CODE:
.scrollIntoView()
.scrollIntoView(options)

----------------------------------------

TITLE: Input Example - TypeScript Import and Event Handler
DESCRIPTION: Example input showing a TypeScript import statement and browser launch event handler that will be transformed by the plugin

LANGUAGE: typescript
CODE:
import fs from 'fs'

LANGUAGE: typescript
CODE:
on('before:browser:launch', (browser = {}, launchOptions) => {
  /* ... */
})

----------------------------------------

TITLE: Failing Cypress Test Example
DESCRIPTION: Example showing how a failing test looks in Cypress with an intentionally failing assertion

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('Does not do much!', () => {
    expect(true).to.equal(false)
  })
})

----------------------------------------

TITLE: Spy with Aliases Example
DESCRIPTION: Example demonstrating how to use aliases with spies for better identification and assertions.

LANGUAGE: javascript
CODE:
const obj = {
  foo() {},
}
const spy = cy.spy(obj, 'foo').as('anyArgs')
const withFoo = spy.withArgs('foo').as('withFoo')

obj.foo()

expect(spy).to.be.called
cy.get('@withFoo').should('be.called') // purposefully failing assertion

----------------------------------------

TITLE: Node Module Import Example in Cypress
DESCRIPTION: Shows how to import and use various Node modules within the setupNodeEvents function.

LANGUAGE: typescript
CODE:
const _ = require('lodash') // yup, dev dependencies
const path = require('path') // yup, core node library
const debug = require('debug') // yup, dependencies
const User = require('./lib/models/user') // yup, relative local modules

console.log(__dirname) // /Users/janelane/Dev/my-project
console.log(process.cwd()) // /Users/janelane/Dev/my-project

----------------------------------------

TITLE: AWS CodeBuild Configuration with Cypress Docker Image
DESCRIPTION: This configuration demonstrates how to use a Cypress Docker image from the Amazon ECR Public Gallery in AWS CodeBuild. It uses the batch build-list strategy to specify a custom image for the build.

LANGUAGE: yaml
CODE:
version: 0.2

batch:
  fast-fail: false
  build-list:
    - identifier: cypress-e2e-tests
      env:
        image: public.ecr.aws/cypress-io/cypress/browsers:22.12.0

phases:
  install:
    runtime-versions:
      nodejs: latest
    commands:
      # Set COMMIT_INFO variables to send Git specifics to Cypress Cloud when recording
      # https://docs.cypress.io/app/continuous-integration/overview#Git-information
      - export COMMIT_INFO_BRANCH="$(git rev-parse HEAD | xargs git name-rev |
        cut -d' ' -f2 | sed 's/remotes\/origin\///g')"
      - export COMMIT_INFO_MESSAGE="$(git log -1 --pretty=%B)"
      - export COMMIT_INFO_EMAIL="$(git log -1 --pretty=%ae)"
      - export COMMIT_INFO_AUTHOR="$(git log -1 --pretty=%an)"
      - export COMMIT_INFO_SHA="$(git log -1 --pretty=%H)"
      - export COMMIT_INFO_REMOTE="$(git config --get remote.origin.url)"
      - npm ci
  pre_build:
    commands:
      - npm run cy:verify
      - npm run cy:info
  build:
    commands:
      - npm run start:ci &
      - npx cypress run --record --browser firefox

----------------------------------------

TITLE: Correct Usage of Cypress._ in JavaScript
DESCRIPTION: Shows the correct way to use Cypress._ to call Lodash methods, specifically using the keys method as an example.

LANGUAGE: javascript
CODE:
Cypress._.keys(obj)

----------------------------------------

TITLE: Grouping Form Controls with Labels
DESCRIPTION: Demonstrates grouping form inputs and their associated labels with a custom name.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "input[name='animal'], label:has(input[name='animal'])",
        "name": "Animal Option"
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <label>
    <input id="bear" name="animal"></input>
  </label>
  <label>
    <input id="lion" name="animal"></input>
  </label>
</body>

----------------------------------------

TITLE: Correct Stub Usage Examples
DESCRIPTION: Examples showing proper usage of cy.stub() with object methods.

LANGUAGE: javascript
CODE:
cy.stub(user, 'addFriend')
cy.stub(user, 'addFriend').as('addFriend')

----------------------------------------

TITLE: Configuring Accessibility Settings in Cypress
DESCRIPTION: Complete configuration schema for Cypress Accessibility showing all available options including elementFilters, views, and viewFilters. This configuration affects both UI Coverage and Accessibility features.

LANGUAGE: typescript
CODE:
{
  "elementFilters": [
    {
      "selector": string,
      "include": boolean
    }
  ],
  "views": [
    {
      "pattern": string,
      "groupBy": [
        string
      ]
    }
  ],
  "viewFilters": [
    {
      "pattern": string,
      "include": boolean
    }
  ]
}

----------------------------------------

TITLE: Using start-server-and-test Module
DESCRIPTION: Example of using the start-server-and-test module in package.json to start a server and run Cypress tests.

LANGUAGE: json
CODE:
{
  "scripts": {
    "start": "my-server -p 3030",
    "cy:run": "cypress run",
    "test": "start-server-and-test start http://localhost:3030 cy:run"
  }
}

----------------------------------------

TITLE: Request Polling Implementation
DESCRIPTION: Example of implementing request polling using recursive function calls

LANGUAGE: javascript
CODE:
function req() {
  cy
    .request(...)
    .then((resp) => {
      if (resp.status === 200 && resp.body.ok === true)
        return
      req()
    })
}

cy
  .get('button').click()
  .then(req)

----------------------------------------

TITLE: Client Script for Cypress Test Loading
DESCRIPTION: TypeScript implementation of a client-side script that handles test file loading and Cypress instance initialization.

LANGUAGE: typescript
CODE:
const CypressInstance = (window.Cypress = parent.Cypress)
const devServerPublicPathRoute = CypressInstance.config(
  'devServerPublicPathRoute'
)

let importPromise = Promise.resolve()

const supportFilePath = CypressInstance.config('supportFile')
if (supportFilePath) {
  const relative = supportFilePath.replace(
    CypressInstance.config('projectRoot'),
    ''
  )
  importPromise = importPromise.then(
    () => import(`${devServerPublicPathRoute}${relative}`)
  )
}

const { relative } = CypressInstance.spec
importPromise = importPromise.then(
  () => import(`${devServerPublicPathRoute}/${relative}`)
)

CypressInstance.onSpecWindow(window, importPromise)

CypressInstance.action('app:window:before:load', window)

----------------------------------------

TITLE: Mounting Svelte Component with Cypress
DESCRIPTION: Demonstrates how to mount a Svelte component using cy.mount(). This example imports the Stepper component and mounts it for testing.

LANGUAGE: typescript
CODE:
import { Stepper } from './stepper.svelte'

it('mounts', () => {
  cy.mount(Stepper)
})

----------------------------------------

TITLE: Correct Cypress.minimatch Usage
DESCRIPTION: Demonstrates the correct way to use Cypress.minimatch with a URL pattern and options.

LANGUAGE: javascript
CODE:
Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {
  matchBase: true,
})

----------------------------------------

TITLE: Sample Response Format
DESCRIPTION: Example of the object structure returned by getAllSessionStorage showing data from multiple origins.

LANGUAGE: javascript
CODE:
{
  'https://example.cypress.io': {
    key1: 'value1',
  },
  'https://www.cypress-dx.com': {
    key2: 'value2',
  },
}

----------------------------------------

TITLE: Configuring Elements in Cypress UI Coverage JSON
DESCRIPTION: This snippet demonstrates the syntax for configuring element identification in the UI Coverage configuration file. It specifies the structure for defining selectors and optional names for elements.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elements": [
      {
        "selector": string,
        "name": string
      }
    ]
  }
}

----------------------------------------

TITLE: Comparing cy.url() with cy.location() in Cypress
DESCRIPTION: Illustrates the equivalence between cy.url() and cy.location('href') for getting the current URL.

LANGUAGE: javascript
CODE:
cy.url() // these yield the same string
cy.location('href') // these yield the same string

----------------------------------------

TITLE: prevUntil Practical Example
DESCRIPTION: Demonstrates how to use prevUntil to find all siblings before #nuts element until #veggies element.

LANGUAGE: javascript
CODE:
// yields [<li>cucumbers</li>, <li>carrots</li>, <li>corn</li>]
cy.get('#nuts').prevUntil('#veggies')

----------------------------------------

TITLE: Recording Cypress Tests Locally with npm
DESCRIPTION: Command to run and record a specific Cypress test file to Cypress Cloud using npm. Requires a record key and specifies the test file to run.

LANGUAGE: shell
CODE:
npx cypress run --key <record_key> --record --spec "cypress/e2e/my-spec.cy.js"

----------------------------------------

TITLE: Mutable State Management Example
DESCRIPTION: Demonstrates handling mutable state in tests using HTML elements and JavaScript event handlers.

LANGUAGE: html
CODE:
<button>increment</button>

you clicked button <span data-testid="num">0</span> times

LANGUAGE: javascript
CODE:
// app code
let count = 0

$('button').on('click', () => {
  $('[data-testid="num"]').text((count += 1))
})

LANGUAGE: javascript
CODE:
// cypress test code
cy.get('[data-testid="num"]').then(($span) => {
  // capture what num is right now
  const num1 = parseFloat($span.text())

  cy.get('button')
    .click()
    .then(() => {
      // now capture it again
      const num2 = parseFloat($span.text())

      // make sure it's what we expected
      expect(num2).to.eq(num1 + 1)
    })
})

----------------------------------------

TITLE: Document Command with Assertion
DESCRIPTION: Example demonstrating how to make assertions about the document's content type.

LANGUAGE: javascript
CODE:
cy.document().its('contentType').should('eq', 'text/html')

----------------------------------------

TITLE: Basic GitLab CI Setup for Cypress Tests
DESCRIPTION: A basic GitLab CI configuration to run Cypress tests within the Electron browser. It installs dependencies, starts the server, and runs the tests.

LANGUAGE: yaml
CODE:
stages:
  - test

test:
  image: node:latest
  stage: test
  script:
    # install dependencies
    - npm ci
    # start the server in the background
    - npm start &
    # run Cypress tests
    - npm run e2e

----------------------------------------

TITLE: Passing Props to Svelte Component in Cypress Test
DESCRIPTION: Shows how to pass props to a Svelte component when mounting it for testing. This example sets the 'count' prop to 100.

LANGUAGE: typescript
CODE:
it('mounts', () => {
  cy.mount(Stepper, { props: { count: 100 } })
})

----------------------------------------

TITLE: Incorrect Usage of Cypress.sinon Matcher in JavaScript
DESCRIPTION: Demonstrates an incorrect attempt to use a Cypress.sinon matcher by chaining it off 'cy', which will result in an error.

LANGUAGE: javascript
CODE:
cy.sinon.match.string // Errors, cannot be chained off 'cy'

----------------------------------------

TITLE: Overriding Default Timeout for Specific Cypress Command
DESCRIPTION: This example shows how to override the default timeout for a specific Cypress command. The '.get()' command is given a custom timeout of 10000 milliseconds (10 seconds).

LANGUAGE: javascript
CODE:
cy.get('.my-slow-selector', { timeout: 10000 })

----------------------------------------

TITLE: Retrieving Root DOM Element in Cypress
DESCRIPTION: Demonstrates the basic syntax for using the root command in Cypress to get the root DOM element. It can be called with or without options.

LANGUAGE: javascript
CODE:
cy.root()
cy.root(options)

----------------------------------------

TITLE: GitHub Actions CI Configuration
DESCRIPTION: YAML configuration for implementing accessibility testing in GitHub Actions workflow, including installation and verification steps.

LANGUAGE: yaml
CODE:
name: My Workflow
on: push

env:
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

jobs:
  run-cypress:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: install
        run: npm install
      - name: Run
        run: npx cypress run --record
      - name: Verify Accessibility Results
        run: |
          npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz
          node ./scripts/verifyAccessibilityResults.js

----------------------------------------

TITLE: Running Cypress via NPM Script
DESCRIPTION: Shell command to execute the Cypress open script defined in package.json using npm run.

LANGUAGE: shell
CODE:
npm run cy:open

----------------------------------------

TITLE: Setting, Clearing, and Verifying a Cookie in Cypress
DESCRIPTION: Demonstrates setting a cookie, clearing it, and then verifying that it has been cleared using assertions.

LANGUAGE: javascript
CODE:
cy.setCookie('foo', 'bar')
cy.clearCookie('foo')
cy.getCookie('foo').should('be.null')

----------------------------------------

TITLE: Basic Cypress Run Command
DESCRIPTION: Example of running Cypress tests in headless mode with record and spec options

LANGUAGE: shell
CODE:
npx cypress run --record --spec "cypress/e2e/my-spec.cy.js"

----------------------------------------

TITLE: NPM Scripts for Managing Reports
DESCRIPTION: Defines NPM scripts for deleting old reports, running tests with multiple reporters, and combining XML reports.

LANGUAGE: json
CODE:
{
  "scripts": {
    "delete:reports": "rm cypress/results/* || true",
    "combine:reports": "jrm cypress/results/combined-report.xml \"cypress/results/*.xml\"",
    "prereport": "npm run delete:reports",
    "report": "cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json",
    "postreport": "npm run combine:reports"
  }
}

----------------------------------------

TITLE: Configuring Project ID in Cypress
DESCRIPTION: Example of setting the projectId in Cypress configuration file. The projectId is a unique 6-character string that identifies your project in Cypress Cloud.

LANGUAGE: typescript
CODE:
{
  projectId: 'a7bq2k',
}

----------------------------------------

TITLE: Custom Named Element Groups
DESCRIPTION: Demonstrates how to assign custom names to element groups for better readability in reports.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "[id^='listbox-button-']",
        "name": "Add Button"
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <button id='listbox-button-1'>+</button>
  <button id='listbox-button-2'>+</button>
  <button id='listbox-button-3'>+</button>
  <button id='listbox-button-4'>+</button>
</body>

----------------------------------------

TITLE: Retrieving Individual Test Results from Cypress Cloud API
DESCRIPTION: Example of how to query the Cypress Cloud API to extract all test result details regardless of test result status. This endpoint provides comprehensive data on individual test executions.

LANGUAGE: bash
CODE:
https://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=test-details&export_format=csv&start_date=2024-01-01

----------------------------------------

TITLE: Accessing Window Properties in Cypress
DESCRIPTION: Example showing how to access and test custom window properties.

LANGUAGE: javascript
CODE:
window.tags = {
  foo: 'bar',
}

cy.window().its('tags.foo').should('equal', 'bar')

----------------------------------------

TITLE: HTML Structure Example for prevUntil
DESCRIPTION: Shows an HTML list structure used to demonstrate how prevUntil selects elements.

LANGUAGE: html
CODE:
<ul>
  <li id="fruits" class="header">Fruits</li>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li id="veggies" class="header">Vegetables</li>
  <li>cucumbers</li>
  <li>carrots</li>
  <li>corn</li>
  <li id="nuts" class="header">Nuts</li>
  <li>walnuts</li>
  <li>cashews</li>
  <li>almonds</li>
</ul>

----------------------------------------

TITLE: Configuring package.json for a Custom Cypress Framework Definition
DESCRIPTION: This JSON snippet shows the required configuration in package.json for a custom Framework Definition. It includes the correct naming convention and exports configuration for the Definition file and Mount Adapter.

LANGUAGE: json
CODE:
{
  "name": "@lmiller1990/cypress-ct-solid-js",
  "version": "0.0.4",
  "description": "Example Framework Definition for Cypress and Solid.js",
  "exports": {
    "node": "./definition.cjs",
    "default": "./index.mjs"
  },
  "files": [
    "package.json",
    "definition.cjs",
    "index.mjs"
  ],
  "dependencies": {
    "@cypress/mount-utils": "^4.0.0"
  },
  "devDependencies": {
    "solid-js": "^1.6.0"
  },
  "peerDependencies": {
    "solid-js": "^1.6.0",
    "cypress": "^12.7.0"
  }
}

----------------------------------------

TITLE: Configuring Custom Index File in Cypress
DESCRIPTION: Configuration example showing how to specify a custom index HTML file path for component testing.

LANGUAGE: javascript
CODE:
{
  component: {
    devServer,
    indexHtmlFile: '/custom/path/to/component-index.html'
  }
}

----------------------------------------

TITLE: Accessing Cypress Environment Variables in JavaScript
DESCRIPTION: Demonstrates how to access Cypress environment variables using the Cypress.env() function in a test file.

LANGUAGE: javascript
CODE:
cy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var

----------------------------------------

TITLE: Related Dynamic Attributes Configuration
DESCRIPTION: Configuration for filtering multiple related dynamic attributes including ARIA relationships.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": "id|for|name|aria-.*",
        "value": "dynamic-.*",
        "include": false
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<div>
  <label for="dynamic-input-1">First Name</label>
  <input id="dynamic-input-1" name="dynamic-input-1" aria-describedby="dynamic-help-1" />
  <p id="dynamic-help-1">Enter your first name</p>
</div>

----------------------------------------

TITLE: Disabling Auto Cancellation for a Cypress Run in Shell
DESCRIPTION: This command runs Cypress tests with recording enabled and disables Auto Cancellation for the current run. It shows how to use the --auto-cancel-after-failures flag with a 'false' value to override the project settings.

LANGUAGE: shell
CODE:
npx cypress run --record --key <<your_record_key>> --auto-cancel-after-failures false

----------------------------------------

TITLE: Setting Cypress Record Key as Environment Variable in Shell
DESCRIPTION: This snippet shows how to set the Cypress record key as an environment variable and then run Cypress tests with recording enabled.

LANGUAGE: shell
CODE:
export CYPRESS_RECORD_KEY=<record key>

LANGUAGE: shell
CODE:
cypress run --record

----------------------------------------

TITLE: Implementing Accessibility Results Verification Script
DESCRIPTION: JavaScript script using getAccessibilityResults to fetch and analyze accessibility test results. Includes logic for checking violations and managing existing known issues.

LANGUAGE: javascript
CODE:
const { getAccessibilityResults } = require('@cypress/extract-cloud-results')

const rulesWithExistingViolations = [
  'aria-required-children',
  'empty-heading',
  'aria-dialog-name',
  'link-in-text-block',
  'list',
]

getAccessibilityResults({
  projectId: '...', 
  recordKey: '...', 
  runTags: [process.env.RUN_TAGS], 
}).then((results) => {
  const { runNumber, accessibilityReportUrl, summary, rules } = results
  const { total } = summary.violationCounts

  console.log(
    `Received ${summary.isPartialReport ? 'partial' : ''} results for run #${runNumber}.`
  )
  console.log(`See full report at ${accessibilityReportUrl}.`)

  if (total === 0) {
    console.log('No Accessibility violations detected!')
    return
  }

  const { critical, serious, moderate, minor } = summary.violationCounts

  console.log(`${total} Accessibility violations were detected:`)
  console.log(`  - ${critical} critical`)
  console.log(`  - ${serious} serious`)
  console.log(`  - ${moderate} moderate`)
  console.log(`  - ${minor} minor.`)

  const newRuleViolations = rules.filter((rule) => {
    return !rulesWithExistingViolations.includes(rule.name)
  })

  if (newRuleViolations.length > 0) {
    console.error(
      'The following rules were violated that were previously passing:'
    )
    console.error(newRuleViolations)
    throw new Error(
      `${newRuleViolations.length} rule regressions were introduced and must be fixed.`
    )
  }

  if (total < rulesWithExistingViolations.length) {
    console.warn(
      `It seems you have resolved ${rulesWithExistingViolations.length - total} rule(s). Remove them from the list of problematic rules so regressions are not introduced.`
    )
  }

  console.log('No new Accessibility violations detected!')
})

----------------------------------------

TITLE: Testing Component Events with Spies
DESCRIPTION: Example of using Cypress spies to test component event emissions

LANGUAGE: jsx
CODE:
it('clicking + fires a change event with the incremented value', () => {
  const onChangeSpy = cy.spy().as('onChangeSpy')
  cy.mount(<Stepper onChange={onChangeSpy} />)
  cy.get('[data-cy=increment]').click()
  cy.get('@onChangeSpy').should('have.been.calledWith', 1)
})

----------------------------------------

TITLE: Implementing Welcome Screen Skip Command in Cypress
DESCRIPTION: Example showing how to reduce test duplication by implementing a custom Cypress command to skip the welcome screen, along with test cases demonstrating both the original welcome page test and an optimized approach using the skip command.

LANGUAGE: javascript
CODE:
// This example is simplified for demonstration purposes
// In a real-world scenario, you would change the properties that are checked
// to hide or display the welcome screen for first-time users
Cypress.Commands.add('skipWelcome', () => {
  cy.setCookie('welcome', 'dismissed')
})

it('shows welcome page', () => {
  cy.visit('/')
  cy.contains('Welcome')
  cy.get('[data-cy="continue"]').click()
  cy.contains('Projects')
})

it('shows projects page', () => {
  cy.skipWelcome()
  cy.visit('/')
  cy.contains('Projects')
})

----------------------------------------

TITLE: NYC Report Command
DESCRIPTION: Command to generate a text summary of code coverage using NYC.

LANGUAGE: shell
CODE:
npx nyc report --reporter=text-summary

----------------------------------------

TITLE: Importing mount function for Vue component testing in Cypress
DESCRIPTION: This snippet shows how to import the 'mount' function from Cypress Vue module. This function is used for mounting Vue components in isolation within Cypress tests.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/vue'

----------------------------------------

TITLE: Running Cypress with Record Key in Shell
DESCRIPTION: This snippet demonstrates how to run Cypress tests with recording enabled by passing the record key directly as a command line argument.

LANGUAGE: shell
CODE:
cypress run --record --key <record key>

----------------------------------------

TITLE: Grouping Cypress Test Runs by Browser
DESCRIPTION: Commands to group Cypress test runs by browser type and version. Uses the --group flag to label each run.

LANGUAGE: shell
CODE:
cypress run --record --group Windows/Chrome-69 --browser chrome

LANGUAGE: shell
CODE:
cypress run --record --group Mac/Chrome-70 --browser chrome

LANGUAGE: shell
CODE:
cypress run --record --group Linux/Electron

----------------------------------------

TITLE: Browser History Navigation Using Numbers
DESCRIPTION: Examples of using cy.go() with numerical parameters for navigation.

LANGUAGE: javascript
CODE:
cy.go(-1) // equivalent to clicking back button
cy.go(1) // equivalent to clicking forward button

----------------------------------------

TITLE: Using prevAll with Selector in Cypress
DESCRIPTION: Shows how to use prevAll with a selector to filter the previous siblings. The example demonstrates finding previous siblings with a specific class.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li>oranges</li>
  <li>bananas</li>
  <li class="selected">pineapples</li>
  <li>grapes</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>pineapples</li>
cy.get('li').prevAll('.selected')

----------------------------------------

TITLE: Testing Console Logs
DESCRIPTION: Example showing how to spy on console.log calls using Cypress stubs.

LANGUAGE: javascript
CODE:
cy.visit('/', {
  onBeforeLoad(win) {
    cy.stub(win.console, 'log').as('consoleLog')
  },
})

cy.get('@consoleLog').should('be.calledWith', 'Hello World!')

----------------------------------------

TITLE: Configuring View Grouping in Cypress UI Coverage
DESCRIPTION: Configuration example showing how to define custom URL grouping patterns for Views using a pattern matcher.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://cypress.io/users/*"
    }
  ]
}

----------------------------------------

TITLE: Aliasing and Using Fixtures in Cypress
DESCRIPTION: Example of aliasing fixture data and then using 'this' to access it via the alias in a test.

LANGUAGE: javascript
CODE:
beforeEach(() => {
  cy.fixture('users-admins.json').as('admins')
})

it('the users fixture is bound to this.admins', function () {
  cy.log(`There are ${this.admins.length} administrators.`)
})

----------------------------------------

TITLE: Using JSX with Vue Components
DESCRIPTION: Example of using JSX syntax for mounting Vue components in tests

LANGUAGE: jsx
CODE:
it('clicking + fires a change event with the incremented value', () => {
  const onChangeSpy = cy.spy().as('onChangeSpy')
  cy.mount(<Stepper initial={100} onChange={onChangeSpy} />)
  cy.get('[data-cy=increment]').click()
  cy.get('@onChangeSpy').should('have.been.calledWith', 101)
})

----------------------------------------

TITLE: Fetching Test Status by Run from Cypress Cloud API
DESCRIPTION: Example of how to query the Cypress Cloud API to retrieve test status data at the run level. This endpoint provides information on success and failure rates for test runs.

LANGUAGE: bash
CODE:
https://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=status-per-build-summary&export_format=csv&start_date=2024-01-01

----------------------------------------

TITLE: Installing TypeScript for Cypress (Yarn)
DESCRIPTION: Command to install TypeScript as a dev dependency using Yarn.

LANGUAGE: shell
CODE:
yarn add typescript --dev

----------------------------------------

TITLE: Using parentsUntil Command in Cypress
DESCRIPTION: Demonstrates the correct usage of the parentsUntil command to find parent elements up to a specified selector.

LANGUAGE: javascript
CODE:
cy.get('p').parentsUntil('.article') // Yield parents of 'p' until '.article'

----------------------------------------

TITLE: Refactored Custom Command with cy.session()
DESCRIPTION: Refactor the custom Cypress command for Amazon Cognito authentication to use cy.session() for caching logged-in user.

LANGUAGE: jsx
CODE:
// Amazon Cognito
Cypress.Commands.add(
  'loginByCognito, cy.origin() login',
  (username, password) => {
    cy.session(
      `cognito-${username}`,
      () => {
        return loginToCognito(username, password)
      },
      {
        validate() {
          cy.visit('/')
          // revalidate our session to make sure we are logged in
          cy.contains('Get Started').should('be.visible')
        },
      }
    )
  }
)

----------------------------------------

TITLE: Basic Element Groups Configuration in JSON
DESCRIPTION: Shows the basic syntax structure for configuring element groups in UI Coverage using JSON configuration.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": string,
        "name": string
      }
    ]
  }
}

----------------------------------------

TITLE: Using Cypress blur Command with Options
DESCRIPTION: Shows how to use the blur command with options, specifically using the force option to bypass element checks.

LANGUAGE: javascript
CODE:
cy.get('input:first').blur({ force: true })

----------------------------------------

TITLE: Vue Component with Default Slot
DESCRIPTION: Example Vue component utilizing default slots with both JS and JSX mounting syntax

LANGUAGE: html
CODE:
<template>
  <div>
    <div class="content">
      <slot />
    </div>
  </div>
</template>

<script setup></script>

----------------------------------------

TITLE: Retrieving Project List from Cypress Cloud API
DESCRIPTION: Example of how to query the Cypress Cloud API to retrieve a list of all projects that have had tests recorded since a specific start date. This endpoint returns project names and IDs.

LANGUAGE: bash
CODE:
https://cloud.cypress.io/enterprise-reporting/report?token=YOUR-API-KEY&report_id=project-list&export_format=csv&start_date=2024-01-01

----------------------------------------

TITLE: Configuring Mochawesome Reporter in Cypress Config
DESCRIPTION: Shows how to configure the Mochawesome reporter in the Cypress configuration file to generate JSON reports.

LANGUAGE: javascript
CODE:
{
  reporter: 'mochawesome',
  reporterOptions: {
    reportDir: 'cypress/results',
    overwrite: false,
    html: false,
    json: true
  }
}

----------------------------------------

TITLE: Cypress Click Command
DESCRIPTION: Demonstrates the equivalent Cypress command for clicking an element with built-in waiting.

LANGUAGE: javascript
CODE:
cy.get('#myButton').click()

----------------------------------------

TITLE: Finding Previous Siblings with prevAll in Cypress
DESCRIPTION: Demonstrates how to use prevAll to find all siblings before a specific element in an HTML list. The example shows the HTML structure and the corresponding Cypress command.

LANGUAGE: html
CODE:
<ul>
  <li>apples</li>
  <li>oranges</li>
  <li class="third">bananas</li>
  <li>pineapples</li>
  <li>grapes</li>
</ul>

LANGUAGE: javascript
CODE:
// yields [<li>apples</li>, <li>oranges</li>]
cy.get('.third').prevAll()

----------------------------------------

TITLE: Configuring Environment Variables for Azure AD Authentication
DESCRIPTION: JSON configuration file for storing Azure AD credentials used in Cypress tests.

LANGUAGE: json
CODE:
{
  "aad_username": "AAD_USERNAME",
  "aad_password": "AAD_PASSWORD",
  "aad_name": "AAD_NAME"
}

----------------------------------------

TITLE: Sample HTML Structure for UI Coverage Element Filtering
DESCRIPTION: This HTML snippet shows a simple structure with two buttons: one enabled and one disabled. When used with the previous `elementFilters` configuration, only the enabled button will be included in the UI Coverage report.

LANGUAGE: xml
CODE:
<body>
  <button data-cy='cancel'>Cancel</button>
  <button disabled data-cy='submit'>Submit</button>
</body>

----------------------------------------

TITLE: Filtering Children with Selector in Cypress
DESCRIPTION: Shows how to use a selector to filter children elements, retrieving only those with a specific class.

LANGUAGE: html
CODE:
<div>
  <ul>
    <li class="active">Unit Testing</li>
    <li>Integration Testing</li>
  </ul>
</div>

LANGUAGE: javascript
CODE:
// yields [
//  <li class="active">Unit Testing</li>
// ]
cy.get('ul').children('.active')

----------------------------------------

TITLE: Configuring tsconfig.json for Cypress IntelliSense
DESCRIPTION: This JSON configuration in tsconfig.json enables Cypress IntelliSense for TypeScript files in the project. It allows JavaScript files and includes Cypress types for intelligent code completion.

LANGUAGE: json
CODE:
{
  "compilerOptions": {
    "allowJs": true,
    "types": ["cypress"]
  },
  "include": ["**/*.*"]
}

----------------------------------------

TITLE: Conditional Okta Authentication for Cypress Testing
DESCRIPTION: Modifies the React component to conditionally use Okta authentication based on whether it's running in Cypress, allowing for different authentication flows in development/production and testing environments.

LANGUAGE: typescript
CODE:
// initial imports ...
import { LoginCallback, SecureRoute, useOktaAuth, withOktaAuth } from "@okta/okta-react";

// ...

const AppOkta: React.FC = () => {
  const { authState, oktaAuth } = useOktaAuth();

  // ...

  // If under test in Cypress, get credentials from "oktaCypress" localstorage item and send event to our state management to log the user into the SPA
  if (window.Cypress) {
    useEffect(() => {
      const okta = JSON.parse(localStorage.getItem("oktaCypress")!);
      authService.send("OKTA", {
        user: okta.user,
        token: okta.token,
      });
    }, []);
  } else {
    useEffect(() => {
      if (authState.isAuthenticated) {
        oktaAuth.getUser().then((user) => {
          authService.send("OKTA", { user, token: oktaAuthState.accessToken });
        });
      }
    }, [authState, oktaAuth]);
  }

  // ...

  return (
    <div className={classes.root}>

      // ...

      {authState.matches("unauthorized") && (
        <>
          <Route path="/implicit/callback" component={LoginCallback} />
          <SecureRoute exact path="/" />
        </>
      )}

      // ...
    </div>
  );
};

// Conditional export wrapped with `withOktaAuth` if we are not under test in Cypress
let appOkta = window.Cypress ? AppOkta : withOktaAuth(AppOkta);
export default appOkta;

----------------------------------------

TITLE: Running Cypress with Custom Reporter via Command Line
DESCRIPTION: Shows how to specify a custom reporter using the command line when running Cypress tests.

LANGUAGE: shell
CODE:
npx cypress run --reporter reporters/custom.js

----------------------------------------

TITLE: Basic Cypress Test Structure
DESCRIPTION: Shows how to structure tests in Cypress using describe and it blocks with beforeEach hooks.

LANGUAGE: javascript
CODE:
describe('General information', () => {
  beforeEach(() => {
    cy.get('#loginButton').click()
  })

  it('Header is visible', () => {
    cy.get('#header').should('be.visible')
  })

  it('Footer is visible', () => {
    cy.get('#footer').should('be.visible')
  })
})

----------------------------------------

TITLE: Configuring Backend for Google JWT Validation
DESCRIPTION: Sets up the backend to validate Google JWTs using express-jwt and jwks-rsa, including configuration and middleware creation.

LANGUAGE: jsx
CODE:
import jwt from 'express-jwt'
import jwksRsa from 'jwks-rsa'

dotenv.config()
const googleJwtConfig = {
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: 'https://www.googleapis.com/oauth2/v3/certs',
  }),
  // Validate the audience and the issuer.
  audience: process.env.REACT_APP_GOOGLE_CLIENTID,
  issuer: 'accounts.google.com',
  algorithms: ['RS256'],
}

export const checkJwt = jwt(googleJwtConfig).unless({ path: ['/testData/*'] })

----------------------------------------

TITLE: Basic AttributeFilters Configuration Schema
DESCRIPTION: JSON schema showing the basic structure of attributeFilters configuration in Cypress UI Coverage.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": string,
        "value": string,
        "include": boolean
      }
    ]
  }
}

----------------------------------------

TITLE: Correct Clear Command Usage Examples in Cypress
DESCRIPTION: Demonstrates proper usage of the clear() command with different element selectors.

LANGUAGE: javascript
CODE:
cy.get('[type="text"]').clear() // Clear text input
cy.get('textarea').type('Hi!').clear() // Clear textarea
cy.focused().clear() // Clear focused input/textarea

----------------------------------------

TITLE: Installing TypeScript for Cypress (NPM)
DESCRIPTION: Command to install TypeScript as a dev dependency using NPM.

LANGUAGE: shell
CODE:
npm install typescript --save-dev

----------------------------------------

TITLE: Express Middleware for Okta Token Verification
DESCRIPTION: Defines an Express middleware function to verify the Okta JWT sent in API requests as the Bearer token.

LANGUAGE: typescript
CODE:
export const verifyOktaToken = (req, res, next) => {
  const bearerHeader = req.headers['authorization']

  if (bearerHeader) {
    const bearer = bearerHeader.split(' ')
    const bearerToken = bearer[1]

    oktaJwtVerifier
      .verifyAccessToken(bearerToken, 'api://default')
      .then((jwt) => {
        // the token is valid
        req.user = {
          // @ts-ignore
          sub: jwt.sub,
        }

        return next()
      })
      .catch((err) => {
        // a validation failed, inspect the error
        console.log('error', err)
      })
  } else {
    res.status(401).send({
      error: 'Unauthorized',
    })
  }
}

----------------------------------------

TITLE: Available Cypress Utility Objects
DESCRIPTION: Built-in utility libraries available on the Cypress object for use in tests, including lodash, jQuery, minimatch, and various data manipulation utilities.

LANGUAGE: javascript
CODE:
Cypress._ // lodash
Cypress.$ // jQuery
Cypress.minimatch // minimatch.js
Cypress.Blob // Blob utils
Cypress.Buffer // Buffer utils
Cypress.Promise // Bluebird

----------------------------------------

TITLE: Incorrect Cypress.minimatch Usage
DESCRIPTION: Shows incorrect usage by attempting to chain minimatch off the 'cy' command.

LANGUAGE: javascript
CODE:
cy.minimatch() // Errors, cannot be chained off 'cy'

----------------------------------------

TITLE: Finding All Elements Following an Active List Item
DESCRIPTION: Demonstrates how to use nextAll to find all elements following an active list item in a left navigation menu.

LANGUAGE: javascript
CODE:
cy.get('.left-nav').find('li.active').nextAll()

----------------------------------------

TITLE: Cypress Test Using Okta Authentication
DESCRIPTION: Demonstrates a Cypress test that uses the custom 'loginByOkta' command to authenticate with Okta and perform basic sanity checks.

LANGUAGE: javascript
CODE:
describe('Okta', function () {
  beforeEach(function () {
    cy.task('db:seed')
    cy.loginByOkta(Cypress.env('okta_username'), Cypress.env('okta_password'))
  })

  it('verifies signed in user does not have a bank account', function () {
    cy.get('[data-test="sidenav-bankaccounts"]').click()
    cy.get('[data-test="empty-list-header"]').should('be.visible')
  })
})

----------------------------------------

TITLE: Setting Custom CI Build ID for Cypress Parallelization
DESCRIPTION: Command to set a custom CI build ID for linking CI machines in Cypress parallelization. Uses the --ci-build-id flag with a Jenkins environment variable.

LANGUAGE: shell
CODE:
cypress run --record --parallel --ci-build-id $BUILD_TAG

----------------------------------------

TITLE: Basic clearAllLocalStorage Usage in Cypress
DESCRIPTION: Basic syntax for clearing all localStorage data across origins in Cypress tests. Can be called with or without options.

LANGUAGE: javascript
CODE:
cy.clearAllLocalStorage()
cy.clearAllLocalStorage(options)

----------------------------------------

TITLE: Restoring Clock in Cypress Tests
DESCRIPTION: Demonstrates how to restore the clock after using cy.clock(), allowing the application to resume normal time-related behavior.

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('http://localhost:3333')
cy.get('#search').type('Acme Company')
cy.tick(1000)
// more test code here

// restore the clock
cy.clock().then((clock) => {
  clock.restore()
})
// more test code here

LANGUAGE: javascript
CODE:
cy.clock().invoke('restore')

----------------------------------------

TITLE: Configuring Video Compression in Cypress
DESCRIPTION: Configuration examples for enabling video compression and setting custom compression values using Constant Rate Factor (CRF).

LANGUAGE: typescript
CODE:
{
  videoCompression: true
}

LANGUAGE: typescript
CODE:
{
  videoCompression: 15
}

----------------------------------------

TITLE: Generated Test Code for Creating a New Transaction
DESCRIPTION: This code snippet shows the test generated by Cypress Studio for creating a new transaction. It includes interactions like clicking buttons, typing in form fields, and adding assertions.

LANGUAGE: javascript
CODE:
describe('Cypress Studio Demo', () => {
  beforeEach(() => {
    // Seed database with test data
    cy.task('db:seed')

    // Login test user
    cy.database('find', 'users').then((user) => {
      cy.login(user.username, 's3cret', true)
    })
  })

  it('create new transaction', () => {
    /* ==== Generated with Cypress Studio ==== */
    cy.get('[data-test=nav-top-new-transaction]').click()
    cy.get('[data-test=user-list-search-input]').clear()
    cy.get('[data-test=user-list-search-input]').type('dev')
    cy.get(
      '[data-test=user-list-item-tsHF6_D5oQ] > .MuiListItemText-root > .MuiListItemText-primary'
    ).should('have.text', 'Devon Becker')
    cy.get('[data-test=user-list-item-tsHF6_D5oQ]').click()
    cy.get('#amount').clear()
    cy.get('#amount').type('$25')
    cy.get('#transaction-create-description-input').clear()
    cy.get('#transaction-create-description-input').type('Sushi dinner')
    cy.get('[data-test=transaction-create-submit-payment]').should('be.enabled')
    cy.get('[data-test=transaction-create-submit-payment]').click()
    /* ==== End Cypress Studio ==== */
  })
})

----------------------------------------

TITLE: Screenshot Properties Access
DESCRIPTION: Demonstrating access to screenshot properties in the onAfterScreenshot callback

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  onAfterScreenshot($el, props) {
    // props has information about the screenshot,
    // including but not limited to the following:
    // {
    //   path: '/Users/janelane/project/screenshots/my-screenshot.png',
    //   size: '15 kb',
    //   dimensions: {
    //     width: 1000,
    //     height: 660,
    //   },
    //   scaled: true,
    //   blackout: ['.foo'],
    //   duration: 2300,
    // }
  },
})

----------------------------------------

TITLE: Programmatic Okta Login Command
DESCRIPTION: Implements a 'loginByOktaApi' command that performs programmatic login to Okta using the Okta Authentication API and Okta Auth SDK. It sets the authenticated user details in localStorage.

LANGUAGE: javascript
CODE:
import { OktaAuth } from '@okta/okta-auth-js'

// Okta
Cypress.Commands.add('loginByOktaApi', (username, password) => {
  cy.request({
    method: 'POST',
    url: `https://${Cypress.env('okta_domain')}/api/v1/authn`,
    body: {
      username,
      password,
    },
  }).then(({ body }) => {
    const user = body._embedded.user
    const config = {
      issuer: `https://${Cypress.env('okta_domain')}/oauth2/default`,
      clientId: Cypress.env('okta_client_id'),
      redirectUri: 'http://localhost:3000/implicit/callback',
      scopes: ['openid', 'email', 'profile'],
    }

    const authClient = new OktaAuth(config)

    return authClient.token
      .getWithoutPrompt({ sessionToken: body.sessionToken })
      .then(({ tokens }) => {
        const userItem = {
          token: tokens.accessToken.value,
          user: {
            sub: user.id,
            email: user.profile.login,
            given_name: user.profile.firstName,
            family_name: user.profile.lastName,
            preferred_username: user.profile.login,
          },
        }

        window.localStorage.setItem('oktaCypress', JSON.stringify(userItem))

        log.snapshot('after')
        log.end()
      })
  })
})

----------------------------------------

TITLE: Grouping Cypress Test Runs with Parallelization
DESCRIPTION: Commands to group Cypress test runs with different levels of parallelization. Uses prefixes like 1x, 2x, 4x to indicate parallelism level.

LANGUAGE: shell
CODE:
cypress run --record --group 1x-electron

LANGUAGE: shell
CODE:
cypress run --record --group 2x-chrome --browser chrome --parallel

LANGUAGE: shell
CODE:
cypress run --record --group 4x-electron --parallel

----------------------------------------

TITLE: Correct Contains Usage Examples
DESCRIPTION: Demonstrates proper usage of the contains command for finding elements with specific text.

LANGUAGE: javascript
CODE:
cy.get('.nav').contains('About') // Yield el in .nav containing 'About'
cy.contains('Hello') // Yield first el in document containing 'Hello'

----------------------------------------

TITLE: CircleCI Configuration for Nightly Firefox Tests
DESCRIPTION: This YAML configuration sets up a nightly CI schedule for running Cypress tests in Firefox against the production branch.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - cypress/run:
          install-browsers: true
          cypress-command: 'npx cypress run --browser firefox'
          start-command: 'npm start'

----------------------------------------

TITLE: Deleting Videos for Passing Tests with Cypress Test Retries
DESCRIPTION: Use the after:spec event to delete recorded videos for specs without retry attempts or failures when using Cypress test retries.

LANGUAGE: typescript
CODE:
// need to install these dependencies
// npm install lodash del --save-dev
import _ from 'lodash'
import del from 'del'

on('after:spec', (spec, results) => {
  if (results && results.video) {
    // Do we have failures for any retry attempts?
    const failures = _.some(results.tests, (test) => {
      return _.some(test.attempts, { state: 'failed' })
    })
    if (!failures) {
      // delete the video if the spec passed and no tests retried
      return del(results.video)
    }
  }
})

----------------------------------------

TITLE: Test Scaffolding for Cypress Studio Demo
DESCRIPTION: This code provides the initial test structure for demonstrating Cypress Studio. It includes a describe block with a beforeEach hook for database seeding and user login.

LANGUAGE: javascript
CODE:
describe('Cypress Studio Demo', () => {
  beforeEach(() => {
    // Seed database with test data
    cy.task('db:seed')

    // Login test user
    cy.database('find', 'users').then((user) => {
      cy.login(user.username, 's3cret', true)
    })
  })

  it('create new transaction', () => {
    // Extend test with Cypress Studio
  })
})

----------------------------------------

TITLE: Clicking at Specific Coordinates within an Element in Cypress
DESCRIPTION: Demonstrates clicking at specific coordinates (15px from left, 40px from top) within an element.

LANGUAGE: javascript
CODE:
cy.get('#top-banner').click(15, 40)

----------------------------------------

TITLE: Invoking Functions with Multiple Arguments
DESCRIPTION: Demonstrates how to pass multiple arguments to a function using the invoke command.

LANGUAGE: javascript
CODE:
const fn = (a, b, c) => {
  return a + b + c
}

cy.wrap({ sum: fn })
  .invoke('sum', 2, 4, 6)
  .should('be.gt', 10) // true
  .and('be.lt', 20) // true

----------------------------------------

TITLE: Implementing Facebook Login Function in Cypress
DESCRIPTION: Custom function to perform Facebook login using cy.origin() for cross-origin testing in Auth0 authentication flow.

LANGUAGE: javascript
CODE:
function logIntoFacebook(username: string, password: string, name: string) {
  cy.visit('http://localhost:3000')
  cy.get('#qsLoginBtn').click()

  cy.origin(Auth0Domain, () => {
    cy.scrollTo('bottom')
    cy.get('form[data-provider="facebook"]').submit()
  })

  cy.origin(
    'https://www.facebook.com',
    {
      args: {
        username,
        password,
      },
    },
    ({ username, password }) => {
      cy.get('input#email').type(username)
      cy.get('input#pass').type(password, {
        log: false,
      })
      cy.get('[type="submit"]').contains('Log In').click()
    }
  )

  cy.get('h6.dropdown-header').should('contain', name)
}

----------------------------------------

TITLE: Disable Network Request Logging
DESCRIPTION: Configuration to disable logging of XMLHttpRequests and fetch requests in the Cypress Command Log.

LANGUAGE: javascript
CODE:
before(() => {
  // disable Cypress's default behavior of logging all XMLHttpRequests and fetches
  cy.intercept({ resourceType: /xhr|fetch/ }, { log: false })
})

----------------------------------------

TITLE: Aliasing Examples
DESCRIPTION: Examples demonstrating how to use get() with aliases for elements and fixtures.

LANGUAGE: javascript
CODE:
cy.get('ul#todos').as('todos')

//later retrieve the todos
cy.get('@todos')

----------------------------------------

TITLE: CircleCI Configuration for Production Branch Firefox Tests
DESCRIPTION: This YAML snippet configures CircleCI to run Firefox tests only when commits are merged into the production deployment branch.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  test_develop:
    jobs:
      - filters:
        branches:
          only:
            - develop
      - cypress/run:
          install-browsers: true
          cypress-command: 'npx cypress run --browser firefox'
          start-command: 'npm start'

----------------------------------------

TITLE: Mounting a Vue Component and Testing Password Input in Cypress
DESCRIPTION: Demonstrates mounting a Vue component and asserting on the type attribute of a password input field.

LANGUAGE: javascript
CODE:
it('should have password input of type password', () => {
  mount(LoginForm)
  cy.contains('Password').find('input').should('have.attr', 'type', 'password')
})

----------------------------------------

TITLE: Basic JavaScript Function Example
DESCRIPTION: A simple JavaScript function that adds two numbers, used to demonstrate code instrumentation.

LANGUAGE: javascript
CODE:
function add(a, b) {
  return a + b
}
module.exports = { add }

----------------------------------------

TITLE: Incorrect Usage of nextAll Command in Cypress
DESCRIPTION: Shows examples of incorrect usage of the nextAll command, which cannot be chained directly off 'cy' or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.nextAll() // Errors, cannot be chained off 'cy'
cy.getCookies().nextAll() // Errors, 'getCookies' does not yield DOM element

----------------------------------------

TITLE: Specific Screenshot Capture Configuration
DESCRIPTION: Example of configuring capture settings for a single screenshot in a test.

LANGUAGE: javascript
CODE:
it('sign in page', () => {
  cy.visit('/sign-in')
  cy.screenshot({
    capture: 'viewport', // or fullPage
  })
})

----------------------------------------

TITLE: Inspecting Cookie Properties in Cypress
DESCRIPTION: Demonstrates how to use cy.getCookies() to retrieve cookies and then inspect various properties of the returned cookie objects, including name, value, domain, and security settings.

LANGUAGE: javascript
CODE:
cy.getCookies()
  .should('have.length', 1)
  .then((cookies) => {
    expect(cookies[0]).to.have.property('name', 'fakeCookie1')
    expect(cookies[0]).to.have.property('value', '123ABC')
    expect(cookies[0]).to.have.property('domain')
    expect(cookies[0]).to.have.property('httpOnly')
    expect(cookies[0]).to.have.property('path')
    expect(cookies[0]).to.have.property('secure')
  })

----------------------------------------

TITLE: Converting Image to DataURL
DESCRIPTION: Demonstrates how to convert an image to a dataURL and create an img element with the resulting data.

LANGUAGE: javascript
CODE:
return Cypress.Blob.imgSrcToDataURL('/assets/img/logo.png').then((dataUrl) => {
  const img = Cypress.$('<img />', { src: dataUrl })

  cy.get('.utility-blob').then(($div) => {
    // append the image
    $div.append(img)
  })
  cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl)
})

----------------------------------------

TITLE: Visiting a URL and Asserting Page Title in Cypress
DESCRIPTION: Demonstrates how to visit a URL and make an assertion on the page title using Cypress commands.

LANGUAGE: javascript
CODE:
cy.visit('https://example.cypress.io')

cy.title().should('include', 'Kitchen Sink')

----------------------------------------

TITLE: Configuring NPM Keywords for Cypress Preprocessor
DESCRIPTION: JSON configuration showing the required npm keywords for publishing a Cypress preprocessor package.

LANGUAGE: json
CODE:
"keywords": [
  "cypress",
  "cypress-plugin",
  "cypress-preprocessor"
]

----------------------------------------

TITLE: Bot Token Scopes for Slack Integration
DESCRIPTION: List of required Slack API scopes for the Cypress integration bot, including chat:write, incoming-webhook, links:read, and links:write permissions.

LANGUAGE: plaintext
CODE:
chat:write
incoming-webhook
links:read
links:write

----------------------------------------

TITLE: Working with DOM Elements using .its()
DESCRIPTION: Example of accessing DOM element properties using .its().

LANGUAGE: javascript
CODE:
cy.get('ul li') // this yields us a jquery object
  .its('length') // calls 'length' property returning that value
  .should('be.gt', 2) // ensure the length is greater than 2

----------------------------------------

TITLE: Incorrect Usage of parent() Command in Cypress
DESCRIPTION: Demonstrates incorrect ways to use the parent() command, which will result in errors.

LANGUAGE: javascript
CODE:
cy.parent() // Errors, cannot be chained off 'cy'
cy.reload().parent() // Errors, 'reload' does not yield DOM element

----------------------------------------

TITLE: Blackout Elements in Specific Screenshot
DESCRIPTION: Example showing how to blackout specific elements for an individual screenshot capture.

LANGUAGE: javascript
CODE:
it('admin page loads', () => {
  cy.visit('/admin')
  cy.screenshot({
    blackout: ['.user-name'],
  })
})

----------------------------------------

TITLE: Cookie Assertion Example
DESCRIPTION: Example showing how to make assertions about a cookie's properties

LANGUAGE: javascript
CODE:
cy.getCookie('fakeCookie1').should('have.property', 'value', '123ABC')

----------------------------------------

TITLE: Checking if an Object is a DOM Object in Cypress
DESCRIPTION: This example demonstrates the use of Cypress.dom.isDom to verify if an object is a DOM object.

LANGUAGE: javascript
CODE:
cy.get('body').then(($el) => {
  Cypress.dom.isDom($el) // true
})

----------------------------------------

TITLE: Using cy.pause() for Debugging in Cypress
DESCRIPTION: Shows how to use cy.pause() command to pause test execution for debugging purposes.

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('clicking "type" shows the right headings', () => {
    cy.visit('https://example.cypress.io')

    cy.pause()

    cy.contains('type').click()

    // Should be on a new URL which includes '/commands/actions'
    cy.url().should('include', '/commands/actions')

    // Get an input, type into it and verify that the value has been updated
    cy.get('[data-testid="action-email"]')
      .type('fake@email.com')
      .should('have.value', 'fake@email.com')
  })
})

----------------------------------------

TITLE: Setting Viewport Orientation in Cypress
DESCRIPTION: Shows how to change the viewport orientation to landscape mode for a specific device preset.

LANGUAGE: javascript
CODE:
// the viewport will now be changed to 736px x 414px
// and simulates the user holding the iPhone in landscape
cy.viewport('iphone-6', 'landscape')

----------------------------------------

TITLE: Basic URL Pattern Matching Examples
DESCRIPTION: Examples showing how to match URL patterns using Cypress.minimatch with single asterisk wildcards.

LANGUAGE: javascript
CODE:
// test that the glob you're writing matches the request's url

// returns true
Cypress.minimatch('/users/1/comments', '/users/*/comments', {
  matchBase: true,
})

// returns false
Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {
  matchBase: true,
})

----------------------------------------

TITLE: Filtering Parents with Selector in Cypress
DESCRIPTION: Shows how to use a selector to filter parent elements when using the .parents() command.

LANGUAGE: javascript
CODE:
// yields [.main-nav]
cy.get('li.active').parents('.main-nav')

----------------------------------------

TITLE: Excluding Error Pages Configuration
DESCRIPTION: Example showing how to exclude error pages and 404 pages from any domain using multiple filter patterns.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "http*://*/404",
      "include": false
    },
    {
      "pattern": "http*://*/error/*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Correct Usage of invoke Command
DESCRIPTION: Shows correct examples of using the invoke command to call functions on DOM elements and wrapped objects.

LANGUAGE: javascript
CODE:
cy.get('.input').invoke('val').should('eq', 'foo') // Invoke the 'val' function
cy.get('.modal').invoke('show') // Invoke the jQuery 'show' function
cy.wrap({ animate: fn }).invoke('animate') // Invoke the 'animate' function

----------------------------------------

TITLE: Browser Family Detection in Cypress
DESCRIPTION: Example of using browser family filters to detect Chromium-based browsers

LANGUAGE: javascript
CODE:
it('has CSS reflections', () => {
  // if in Chromium-based browser (Chrome, Electron, etc...)
  // check css property was properly applied
  if (Cypress.isBrowser({ family: 'chromium' })) {
    cy.get('.header').should('have.css', '-webkit-box-reflect', 'left')
  }
})

----------------------------------------

TITLE: Demonstrating Cypress Commands, Queries and Assertions
DESCRIPTION: Example showing how different types of Cypress commands work together, including non-query commands, queries, and assertions.

LANGUAGE: javascript
CODE:
it('creates an item', () => {
  // Non-query commands only execute once.
  cy.visit('/')

  // The .focused() query and .should() assertion link together,
  // rerunning until the currently focused element has
  // the 'new-todo' class
  cy.focused().should('have.class', 'new-todo')

  // The queries .get() and .find()
  // link together, forming the subject for
  // the non-query `.type()`.
  cy.get('.header').find('.new-todo').type('todo A{enter}')

  // Two queries and an assertion chained together
  cy.get('.todoapp').find('.todo-list li').should('have.length', 1)
})

----------------------------------------

TITLE: Incorrect Form Submit Usage in Cypress
DESCRIPTION: Shows incorrect usage patterns that will result in errors when trying to submit forms.

LANGUAGE: javascript
CODE:
cy.submit() // Errors, cannot be chained off 'cy'
cy.get('input').submit() // Errors, 'input' does not yield a form

----------------------------------------

TITLE: Working with Tables Using .within() in Cypress
DESCRIPTION: Shows how to use .within() to interact with specific table rows. It finds a row by its content and then performs assertions on other cells within that row.

LANGUAGE: html
CODE:
<table>
  <tr>
    <td>My first client</td>
    <td>My first project</td>
    <td>0</td>
    <td>Active</td>
    <td><button>Edit</button></td>
  </tr>
</table>

LANGUAGE: javascript
CODE:
cy.contains('My first client')
  .parent('tr')
  .within(() => {
    // all searches are automatically rooted to the found tr element
    cy.get('td').eq(1).contains('My first project')
    cy.get('td').eq(2).contains('0')
    cy.get('td').eq(3).contains('Active')
    cy.get('td').eq(4).contains('button', 'Edit').click()
  })

----------------------------------------

TITLE: Working with Arrays using .its()
DESCRIPTION: Example of accessing array elements using .its().

LANGUAGE: javascript
CODE:
cy.wrap(['Wai Yan', 'Yu']).its(1).should('eq', 'Yu') // true

----------------------------------------

TITLE: Getting Siblings of Active Element
DESCRIPTION: Example showing how to get siblings of an element with a specific class.

LANGUAGE: javascript
CODE:
// yields all other li's in list
cy.get('.active').siblings()

----------------------------------------

TITLE: Excluding Third-Party Domain URLs
DESCRIPTION: Example configuration showing how to exclude all URLs from a specific domain (Okta) while including all others.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "https://app.okta.com/*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: HTML List Example for Last Command
DESCRIPTION: Sample HTML structure showing a list of items that can be queried using the .last() command.

LANGUAGE: html
CODE:
<ul>
  <li class="one">Knick knack on my thumb</li>
  <li class="two">Knick knack on my shoe</li>
  <li class="three">Knick knack on my knee</li>
  <li class="four">Knick knack on my door</li>
</ul>

----------------------------------------

TITLE: Adding Custom Hover Command in Cypress
DESCRIPTION: This snippet demonstrates how to add a custom 'hover' command to Cypress using Cypress.Commands.add().

LANGUAGE: javascript
CODE:
Cypress.Commands.add('hover', (...args) => {})

----------------------------------------

TITLE: NYC Instrumentation Command
DESCRIPTION: Command to instrument application code using NYC for code coverage.

LANGUAGE: shell
CODE:
npx nyc instrument --compact=false src instrumented

----------------------------------------

TITLE: Expanding Cookies Array with Spread in Cypress
DESCRIPTION: Example demonstrating how to use .spread() to handle multiple cookies as individual arguments.

LANGUAGE: javascript
CODE:
cy.getCookies().spread((cookie1, cookie2, cookie3) => {
  // each cookie is now an individual argument
})

----------------------------------------

TITLE: Custom Data Role Attribute Configuration
DESCRIPTION: Demonstrates how to configure and use custom data-role attributes for element identification.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "significantAttributes": ["data-role"]
  }
}

LANGUAGE: xml
CODE:
<form>
  <input id="in1" data-role="email"></input>
  <input id="in2" data-role="interests"></input>
  <input id="in3" data-role="interests"></input>
</form>

----------------------------------------

TITLE: HTML Structure for parentsUntil Example
DESCRIPTION: Provides an HTML structure used to demonstrate the parentsUntil command in action.

LANGUAGE: html
CODE:
<ul class="nav">
  <li>
    <a href="#">Clothes</a>
    <ul class="menu">
      <li>
        <a href="/shirts">Shirts</a>
      </li>
      <li class="active">
        <a href="/pants">Pants</a>
      </li>
    </ul>
  </li>
</ul>

----------------------------------------

TITLE: Excluding Dynamic Elements Example
DESCRIPTION: Demonstrates how to exclude dynamically generated elements using class pattern matching.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "[class^='auth']",
      "include": false
    }
  ]
}

LANGUAGE: xml
CODE:
<body>
  <button class="cancel">Cancel</button>
  <button class="auth908283794">Login</button>
</body>

----------------------------------------

TITLE: Creating a Clock and Triggering setTimeout with cy.tick()
DESCRIPTION: Shows how to use cy.clock() and cy.tick() together to control time and trigger a setTimeout in the application code.

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('/index.html')
cy.window().invoke('addIntro')
cy.tick(500)
cy.get('#header').should('have.text', 'Hello, World')

----------------------------------------

TITLE: Aliasing Multiple Routes in Cypress
DESCRIPTION: Example of aliasing several routes using the 'as' command in Cypress.

LANGUAGE: javascript
CODE:
cy.intercept('/company/*').as('companyGet')
cy.intercept('/roles/*').as('rolesGet')
cy.intercept('/teams/*').as('teamsGet')
cy.intercept(/users\/\d+/).as('userGet')
cy.intercept('PUT', /^\/users\/\d+/).as('userPut')

----------------------------------------

TITLE: Implementing Custom Dev Server in Cypress Config (TypeScript)
DESCRIPTION: Demonstrates how to configure a custom dev server function in Cypress using TypeScript, including type definitions. The function takes a typed Cypress configuration object and returns a dev server instance.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'cypress'

export default defineConfig({
  component: {
    devServer(cypressConfig: CypressConfiguration) {
      // return devServer instance or a promise that resolves to
      // a dev server here
      return {
        port: 1234,
        close: () => {},
      }
    },
  },
})

----------------------------------------

TITLE: Finding Previous Element with .prev() in Cypress
DESCRIPTION: Example of using .prev() to find the previous element of an element with class 'active' in an unordered list.

LANGUAGE: html
CODE:
<ul>
  <li>Cockatiels</li>
  <li>Lorikeets</li>
  <li class="active">Cockatoos</li>
  <li>Conures</li>
  <li>Eclectus</li>
</ul>

LANGUAGE: javascript
CODE:
// yields <li>Lorikeets</li>
cy.get('.active').prev()

----------------------------------------

TITLE: Handling File Watcher Close Event in Preprocessor
DESCRIPTION: Example showing how to properly handle the close event when watching files in a preprocessor to perform cleanup operations.

LANGUAGE: javascript
CODE:
const watcher = fs.watch(filePath /* ... */)

file.on('close', () => {
  watcher.close()
})

----------------------------------------

TITLE: Working with Objects using .its()
DESCRIPTION: Example of accessing object properties using .its().

LANGUAGE: javascript
CODE:
cy.wrap({ age: 52 }).its('age').should('eq', 52) // true

----------------------------------------

TITLE: Running Cypress Tests with pnpm
DESCRIPTION: This command runs Cypress tests using pnpm. It executes the 'cypress run' command, which starts the Cypress test runner in headless mode.

LANGUAGE: shell
CODE:
pnpm cypress run

----------------------------------------

TITLE: Restoring the Clock in Cypress Tests
DESCRIPTION: Demonstrates how to restore the clock after using cy.clock() and cy.tick(), allowing the application to resume normal time behavior.

LANGUAGE: javascript
CODE:
cy.clock()
cy.visit('http://localhost:3333')
cy.get('#search').type('Acme Company')
cy.tick(1000)
// more test code here

// restore the clock
cy.clock().then((clock) => {
  clock.restore()
})
// more test code here

----------------------------------------

TITLE: Example Test Replay Upload Output
DESCRIPTION: Terminal output showing the size and upload time of Test Replay artifacts to Cypress Cloud

LANGUAGE: shell
CODE:
  (Uploading Cloud Artifacts)

  - Video - Nothing to upload
  - Screenshot - Nothing to upload
  - Test Replay - 298 kB

  Uploading Cloud Artifacts: .

  (Uploaded Cloud Artifacts)

  - Test Replay - Done Uploading 298 kB in 633.40ms 1/1

----------------------------------------

TITLE: Grouping URLs by Named Parameters in Cypress
DESCRIPTION: This example shows how to group URLs by named parameters using the 'groupBy' property. It creates separate views for different types of analytics.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://www.my-app.com/analytics/:type/:id",
      "groupBy": ["type"]
    }
  ]
}

----------------------------------------

TITLE: Complex prevAll Usage in Cypress
DESCRIPTION: Illustrates a more complex usage of prevAll in combination with other Cypress commands. This example finds all elements before the active list item in a left navigation.

LANGUAGE: javascript
CODE:
cy.get('.left-nav').find('li.active').prevAll()

----------------------------------------

TITLE: Assigning Human-Readable Names to Elements in JSON
DESCRIPTION: This configuration example demonstrates how to assign a human-readable name to an element for easier identification in UI Coverage reports. It uses a specific ID selector and provides a custom name for the element.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elements": [
      {
        "selector": "#ui-popover-button",
        "name": "Help Popover"
      }
    ]
  }
}

----------------------------------------

TITLE: Expanding Aliased Routes with Spread in Cypress
DESCRIPTION: Example showing how to use .spread() with multiple intercepted routes to handle each response individually.

LANGUAGE: javascript
CODE:
cy.intercept('/users/*').as('getUsers')
cy.intercept('/activities/*').as('getActivities')
cy.intercept('/comments/*').as('getComments')
cy.wait(['@getUsers', '@getActivities', '@getComments']).spread(
  (getUsers, getActivities, getComments) => {
    // each interception is now an individual argument
  }
)

----------------------------------------

TITLE: Input Example Using Visit Mount Directive
DESCRIPTION: Demonstrates the input format using the triple colon directive with special syntax for splitting code between visit and mount examples.

LANGUAGE: javascript
CODE:
cy.clock(now)
-{cy.visit('/index.html')::cy.mount(<DatePicker id="date" />)}-
cy.get('#date').should('have.value', '04/14/2021')

----------------------------------------

TITLE: Restoring the Clock Using cy.invoke() in Cypress
DESCRIPTION: Shows an alternative method to restore the clock using cy.invoke() to call the restore function.

LANGUAGE: javascript
CODE:
cy.clock().invoke('restore')

----------------------------------------

TITLE: Running Cypress with Auto Cancellation in Shell
DESCRIPTION: This command runs Cypress tests with recording enabled and sets the auto-cancel threshold to 1 failure. It demonstrates how to use the --auto-cancel-after-failures flag with the cypress run command.

LANGUAGE: shell
CODE:
npx cypress run --record --key <<your_record_key>> --auto-cancel-after-failures 1

----------------------------------------

TITLE: Excluding Specific Element Example
DESCRIPTION: Demonstrates how to exclude a specific element using its ID selector while including others by default.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "#button-2",
      "include": false
    }
  ]
}

LANGUAGE: xml
CODE:
<body>
  <button id="button-1">Included</button>
  <button id="button-2">Excluded</button>
</body>

----------------------------------------

TITLE: Incorrect Usage of parentsUntil Command in Cypress
DESCRIPTION: Shows examples of incorrect usage of the parentsUntil command, which will result in errors.

LANGUAGE: javascript
CODE:
cy.parentsUntil() // Errors, cannot be chained off 'cy'
cy.clock().parentsUntil('href') // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Checking if an Element is Attached to the DOM in Cypress
DESCRIPTION: This example shows how to use Cypress.dom.isAttached to check if a button element is attached to the DOM.

LANGUAGE: javascript
CODE:
cy.get('button').then(($el) => {
  Cypress.dom.isAttached($el) // true
})

----------------------------------------

TITLE: Triggering Mouseover Event in Cypress
DESCRIPTION: This snippet demonstrates how to simulate a hover effect by triggering a 'mouseover' event on a menu item to make a popover visible.

LANGUAGE: javascript
CODE:
cy.get('.menu-item').trigger('mouseover')
cy.get('.popover').should('be.visible')

----------------------------------------

TITLE: Incorrect Usage of children Command in Cypress
DESCRIPTION: Shows examples of incorrect usage of the children command, which cannot be chained off 'cy' directly or non-DOM yielding commands.

LANGUAGE: javascript
CODE:
cy.children() // Errors, cannot be chained off 'cy'
cy.clock().children() // Errors, 'clock' does not yield DOM elements

----------------------------------------

TITLE: Output Example - TypeScript Configuration
DESCRIPTION: The TypeScript version of the complete Cypress configuration including the imported module and event handler

LANGUAGE: typescript
CODE:
import { defineConfig } from 'cypress'
import fs from 'fs'

export default defineConfig({
  // setupNodeEvents can be defined in either
  // the e2e or component configuration
  e2e: {
    setupNodeEvents(on, config) {
      on('before:browser:launch', (browser = {}, launchOptions) => {
        /* ... */
      })
    },
  },
})

----------------------------------------

TITLE: Triggering Events on DOM Elements in Cypress
DESCRIPTION: Demonstrates the basic syntax and usage of the 'trigger' command in Cypress for triggering events on DOM elements.

LANGUAGE: javascript
CODE:
.trigger(eventName)
.trigger(eventName, position)
.trigger(eventName, options)
.trigger(eventName, x, y)
.trigger(eventName, position, options)
.trigger(eventName, x, y, options)

LANGUAGE: javascript
CODE:
cy.get('a').trigger('mousedown') // Trigger mousedown event on link

----------------------------------------

TITLE: Setting Project ID Environment Variable
DESCRIPTION: Example of setting the Cypress project ID as an environment variable for enhanced security. This allows you to keep the projectId out of source control.

LANGUAGE: shell
CODE:
export CYPRESS_PROJECT_ID={projectId}

----------------------------------------

TITLE: Starting Cypress Documentation Local Development Server
DESCRIPTION: Command to start a local development server for the Cypress documentation. This opens a browser window and reflects most changes live without server restart.

LANGUAGE: bash
CODE:
$ npm run start

----------------------------------------

TITLE: Incorrect Usage Examples of .its()
DESCRIPTION: Shows incorrect ways to use the .its() command that will result in errors.

LANGUAGE: javascript
CODE:
cy.its('window') // Errors, cannot be chained off 'cy'
cy.clearCookies().its('length') // Errors, 'clearCookies' does not yield Object

----------------------------------------

TITLE: Testing Page Redirection in Cypress
DESCRIPTION: Example of how to test that an application was redirected to another page in Cypress using the 'window:before:unload' and 'window:unload' events.

LANGUAGE: javascript
CODE:
// app code
$('button').on('click', (e) => {
  // change the page programmatically
  window.location.href = '/some/new/link'
})

// test code
it('redirects to another page on click', (done) => {
  // this event will automatically be unbound when this
  // test ends because it's attached to 'cy'
  cy.on('window:before:unload', (e) => {
    // no return value on the event
    expect(e.returnValue).to.be.undefined
  })

  cy.on('window:unload', (e) => {
    // using mocha's async done callback to finish
    // this test so we are guaranteed the application
    // was unloaded while navigating to the new page
    done()
  })

  // click the button causing the page redirect
  cy.get('button').click()
})

----------------------------------------

TITLE: Logging Location Object in Cypress Tests
DESCRIPTION: Demonstrates how to log the window.location object and the Cypress location object to the console for comparison and debugging purposes.

LANGUAGE: javascript
CODE:
cy.window().then((win) => {
  console.log(win.location)
})

LANGUAGE: javascript
CODE:
cy.location().then((loc) => {
  console.log(loc)
})

----------------------------------------

TITLE: Output Example - JavaScript Configuration
DESCRIPTION: The JavaScript version of the complete Cypress configuration including the imported module and event handler

LANGUAGE: javascript
CODE:
const { defineConfig } = require('cypress')
const fs = require('fs')

module.exports = defineConfig({
  // setupNodeEvents can be defined in either
  // the e2e or component configuration
  e2e: {
    setupNodeEvents(on, config) {
      on('before:browser:launch', (browser = {}, launchOptions) => {
        /* ... */
      })
    },
  },
})

----------------------------------------

TITLE: Waiting for a Specific Request in Cypress
DESCRIPTION: Shows how to use cy.wait() to wait for a specific aliased request to respond, including accessing the interception details.

LANGUAGE: javascript
CODE:
// Wait for the alias 'getAccount' to respond
// without changing or stubbing its response
cy.intercept('/accounts/*').as('getAccount')
cy.visit('/accounts/123')
cy.wait('@getAccount').then((interception) => {
  // we can now access the low level interception
  // that contains the request body,
  // response body, status, etc
})

----------------------------------------

TITLE: Cypress Configuration for Backend Coverage URL
DESCRIPTION: Cypress configuration to specify the URL for collecting backend code coverage.

LANGUAGE: json
CODE:
{
  "env": {
    "codeCoverage": {
      "url": "http://localhost:3000/__coverage__"
    }
  }
}

----------------------------------------

TITLE: HTML Form Example with Submit in Cypress
DESCRIPTION: Complete example showing HTML form structure and corresponding Cypress submit command.

LANGUAGE: html
CODE:
<form id="contact">
  <input type="text" name="message" />
  <button type="submit">Send</button>
</form>

LANGUAGE: javascript
CODE:
cy.get('#contact').submit()

----------------------------------------

TITLE: TypeScript Request/Response Types
DESCRIPTION: Example showing how to specify custom request and response types when using TypeScript.

LANGUAGE: typescript
CODE:
// Specifying request and response types
type CustomRequest = {
  kind: 'custom_request'
}
type CustomResponse = {
  kind: 'custom_response'
}
cy.intercept<CustomRequest, CustomResponse>(url, (req) => {
  req.body // .body of request will be of type CustomRequest
  req.continue((res) => {
    res.body // .body of request will be of type CustomResponse
  })
})

----------------------------------------

TITLE: Creating Basic Promise with Cypress.Promise in JavaScript
DESCRIPTION: Shows how to create a basic promise using Cypress.Promise within a cy.get().then() chain.

LANGUAGE: javascript
CODE:
cy.get('button').then(($button) => {
  return new Cypress.Promise((resolve, reject) => {
    // do something custom here
  })
})

----------------------------------------

TITLE: Basic Hash Command Syntax in Cypress
DESCRIPTION: Basic syntax examples for using the cy.hash() command with and without options.

LANGUAGE: javascript
CODE:
cy.hash()
cy.hash(options)

----------------------------------------

TITLE: Incorrect Usage Examples of .and() Command
DESCRIPTION: Shows improper ways of using the .and() command that should be avoided.

LANGUAGE: javascript
CODE:
cy.and('eq', '42')
cy.get('button').click().and('be.focused')

----------------------------------------

TITLE: Generated Cypress Configuration in TypeScript
DESCRIPTION: This snippet demonstrates the generated TypeScript configuration file for Cypress. It imports the defineConfig function and exports a configuration object with the baseUrl set for end-to-end testing.

LANGUAGE: typescript
CODE:
import { defineConfig } from 'cypress'

export default defineConfig({
  e2e: {
    baseUrl: 'http://localhost:1234',
  },
})

----------------------------------------

TITLE: Removing Keystroke Delay in Cypress
DESCRIPTION: Example demonstrating how to remove the keystroke delay by setting it to 0 milliseconds.

LANGUAGE: javascript
CODE:
Cypress.Keyboard.defaults({
  keystrokeDelay: 0,
})

----------------------------------------

TITLE: Markdown Section Header with Icon Link
DESCRIPTION: A markdown heading that includes an icon component and a link to the core concepts section about command chaining.

LANGUAGE: markdown
CODE:
### Requirements [<Icon name="question-circle" title="Learn about chaining commands"/>](/app/core-concepts/introduction-to-cypress#Chains-of-Commands) {#Requirements}

----------------------------------------

TITLE: Next Command with Datalist Testing
DESCRIPTION: Example demonstrating how to test sequential datalist options using next().

LANGUAGE: html
CODE:
<input list="fruit" />
<datalist id="fruit">
  <option>Apple</option>
  <option>Banana</option>
  <option>Cantaloupe</option>
</datalist>

LANGUAGE: javascript
CODE:
cy.get('#fruit option')
  .first()
  .should('have.text', 'Apple')
  .next()
  .should('have.text', 'Banana')
  .next()
  .should('have.text', 'Cantaloupe')

----------------------------------------

TITLE: Focusing on DOM Elements in Cypress
DESCRIPTION: Demonstrates the basic syntax and usage of the focus command in Cypress. It shows correct and incorrect usage examples, and explains the available options.

LANGUAGE: javascript
CODE:
.focus()
.focus(options)

LANGUAGE: javascript
CODE:
cy.get('input').first().focus() // Focus on the first input

LANGUAGE: javascript
CODE:
cy.focus('#search') // Errors, cannot be chained off 'cy'
cy.window().focus() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: Playing MP3 File in Cypress Test
DESCRIPTION: Example of reading an MP3 file as base64 and playing it using the Audio API.

LANGUAGE: javascript
CODE:
cy.readFile('audio/sound.mp3', 'base64').then((mp3) => {
  const uri = 'data:audio/mp3;base64,' + mp3
  const audio = new Audio(uri)

  audio.play()
})

----------------------------------------

TITLE: Illustrating Incorrect Usage of Click Command in Cypress
DESCRIPTION: Shows examples of incorrectly using the click command, which would result in errors.

LANGUAGE: javascript
CODE:
cy.click('.btn') // Errors, cannot be chained off 'cy'
cy.window().click() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: Generated Cypress Configuration in JavaScript
DESCRIPTION: This snippet shows the generated JavaScript configuration file for Cypress. It imports the defineConfig function and exports a configuration object with the baseUrl set for end-to-end testing.

LANGUAGE: javascript
CODE:
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  e2e: {
    baseUrl: 'http://localhost:1234',
  },
})

----------------------------------------

TITLE: Grouping Elements by Data Attribute
DESCRIPTION: Demonstrates how to group elements using a data-cy attribute selector pattern.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "[data-cy^='item-']"
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <button data-cy="item-1"></button>
  <button data-cy="item-2"></button>
  <button data-cy="item-3"></button>
</body>

----------------------------------------

TITLE: Defining Custom Views in Cypress Configuration
DESCRIPTION: This snippet shows the basic structure for defining custom views in Cypress configuration. It uses the 'views' property to specify URL patterns and optional groupBy parameters.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": string,
      "groupBy": [
        string
      ]
    }
  ]
}

----------------------------------------

TITLE: Image Fixture Handling
DESCRIPTION: Examples of loading and handling image fixtures with different encoding options.

LANGUAGE: javascript
CODE:
cy.fixture('images/logo.png').then((logo) => {
  // logo will be encoded as base64
})

cy.fixture('images/logo.png', null).then((logo) => {
  // logo will be read as a buffer
  expect(Cypress.Buffer.isBuffer(logo)).to.be.true
})

----------------------------------------

TITLE: Using .debug() in Cypress Tests
DESCRIPTION: Demonstrates the syntax for using the .debug() command in Cypress tests. It can be chained off 'cy' or another command, and optionally accepts an options object.

LANGUAGE: javascript
CODE:
.debug()
.debug(options)

// ---or---

cy.debug()
cy.debug(options)

----------------------------------------

TITLE: Identifying Elements with Dynamic Selectors in JSON
DESCRIPTION: This example shows how to configure UI Coverage to identify elements with dynamic attributes across different snapshots. It uses a CSS selector that matches elements with IDs starting with 'dropdown' within a specific form.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elements": [
      {
        "selector": "#my-form [id^='dropdown']"
      }
    ]
  }
}

----------------------------------------

TITLE: Correct Usage Example of getCookie
DESCRIPTION: Example showing proper usage of getCookie to retrieve an authentication cookie

LANGUAGE: javascript
CODE:
cy.getCookie('auth_key') // Get cookie with name 'auth_key'

----------------------------------------

TITLE: Clicking a Link in Navigation using Cypress
DESCRIPTION: Demonstrates how to click a link within a navigation element using Cypress.

LANGUAGE: javascript
CODE:
cy.get('.nav > a').click()

----------------------------------------

TITLE: Defining Cypress Configuration with TypeScript
DESCRIPTION: This snippet demonstrates how to define a Cypress configuration object using TypeScript. It sets the baseUrl property for end-to-end testing.

LANGUAGE: typescript
CODE:
{
    baseUrl: 'http://localhost:1234',
}

----------------------------------------

TITLE: Basic Angular Component Mounting in Cypress
DESCRIPTION: Shows how to mount a basic Angular component using cy.mount()

LANGUAGE: typescript
CODE:
import { StepperComponent } from './stepper.component'

it('mounts', () => {
  cy.mount(StepperComponent)
})

----------------------------------------

TITLE: Working with HTTP Requests using .its()
DESCRIPTION: Examples of accessing response properties in HTTP requests.

LANGUAGE: javascript
CODE:
cy
  .request(...)
  .its('body.user')
  .then(user => ...)

// alternatively, use destructuring
cy
  .request(...)
  .its('body')
  .then(({user}) => ...)

----------------------------------------

TITLE: Reloading and Interacting with Page Elements in Cypress
DESCRIPTION: Demonstrates visiting a page, interacting with elements, reloading the page, and then interacting with elements again.

LANGUAGE: javascript
CODE:
cy.visit('http://localhost:3000/admin')
cy.get('#undo-btn').click().should('not.be.visible')
cy.reload()
cy.get('#undo-btn').click().should('not.be.visible')

----------------------------------------

TITLE: cy.$$ Limitation Example
DESCRIPTION: Demonstrates the limitations of cy.$$ compared to Cypress.$ when using jQuery utility functions.

LANGUAGE: javascript
CODE:
cy.$$.each([1, 2, 3], (index, value) => {
  expect(index).to.eq(value)
}) // fails

----------------------------------------

TITLE: HTML Structure for Grouping Dynamic Button IDs
DESCRIPTION: This HTML snippet shows multiple buttons with dynamically generated IDs that can be grouped in the UI Coverage report.

LANGUAGE: html
CODE:
<nav>
  <button id="nav-button819230">Page 1</button>
  <button id="nav-button819231">Page 2</button>
  <button id="nav-button819232">Page 3</button>
</nav>

----------------------------------------

TITLE: Pausing After Assertion in Cypress
DESCRIPTION: Example of using pause after making assertions in a Cypress test. This demonstrates how to pause execution after checking attributes and before further assertions.

LANGUAGE: javascript
CODE:
cy.get('a')
  .should('have.attr', 'href')
  .and('match', /dashboard/)
  .pause()
cy.get('button').should('not.be.disabled')

----------------------------------------

TITLE: Installing extract-cloud-results Module
DESCRIPTION: Command to install the @cypress/extract-cloud-results module in CI environment. Must be installed separately with --force flag to ensure latest version.

LANGUAGE: shell
CODE:
npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz

----------------------------------------

TITLE: Importing React Mount Function
DESCRIPTION: Shows how to import the mount function from Cypress React module

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/react'

----------------------------------------

TITLE: Triggering Specific Event Types in Cypress
DESCRIPTION: Demonstrates how to trigger specific event types, such as MouseEvent, using the eventConstructor option.

LANGUAGE: javascript
CODE:
cy.get('button').trigger('mouseover', { eventConstructor: 'MouseEvent' })

----------------------------------------

TITLE: Fixing 'The test has finished but Cypress still has commands in its queue' error
DESCRIPTION: This error occurs when commands are queued after the test has finished. Use Mocha's 'done' callback to signify asynchronous tests.

LANGUAGE: javascript
CODE:
it('does not cause commands to bleed into the next test', (done) => {
  setTimeout(() => {
    cy.get('body')
      .children()
      .should('not.contain', 'foo')
      .then(() => {
        done()
      })
  }, 10)
})

----------------------------------------

TITLE: Selenium Wait Until Click Example
DESCRIPTION: Shows a typical Selenium explicit wait and click action.

LANGUAGE: python
CODE:
wait.until(EC.element_to_be_clickable((By.ID, "myButton"))).click()

----------------------------------------

TITLE: Basic .its() Syntax in Cypress
DESCRIPTION: Basic syntax examples showing how to use the .its() command with optional parameters.

LANGUAGE: javascript
CODE:
.its(propertyName)
.its(propertyName, options)

----------------------------------------

TITLE: Basic Cookie Retrieval in Cypress
DESCRIPTION: Basic syntax for retrieving a browser cookie by name using cy.getCookie()

LANGUAGE: javascript
CODE:
cy.getCookie(name)
cy.getCookie(name, options)

----------------------------------------

TITLE: Basic Right Click Syntax - JavaScript
DESCRIPTION: Shows the various syntax options for the rightclick command including basic usage, with options, positions and coordinates.

LANGUAGE: javascript
CODE:
.rightclick()
.rightclick(options)
.rightclick(position)
.rightclick(position, options)
.rightclick(x, y)
.rightclick(x, y, options)

----------------------------------------

TITLE: Configuring Cypress projectId
DESCRIPTION: Example of setting the projectId in the Cypress configuration file. The projectId is a 6-character string that helps identify your project when recording tests.

LANGUAGE: typescript
CODE:
{
  projectId: 'a7bq2k'
}

----------------------------------------

TITLE: Unchecking Checkbox by Value in Cypress
DESCRIPTION: Illustrates how to uncheck a checkbox with a specific value using the uncheck command.

LANGUAGE: javascript
CODE:
cy.get('input[type="checkbox"]').uncheck(['ga'])

----------------------------------------

TITLE: Configuring elementFilters to Exclude Disabled Elements in Cypress UI Coverage
DESCRIPTION: This JSON configuration demonstrates how to use the `elementFilters` property to exclude disabled elements from the UI Coverage report. It specifies a selector for disabled elements and sets `include` to false.

LANGUAGE: json
CODE:
{
  "elementFilters": [
    {
      "selector": "[disabled]",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Using Spread with Cypress Wait for Multiple Aliases
DESCRIPTION: Demonstrates how to use the .spread() command with cy.wait() to handle multiple aliased requests.

LANGUAGE: javascript
CODE:
cy.intercept('/users/*').as('getUsers')
cy.intercept('/activities/*').as('getActivities')
cy.intercept('/comments/*').as('getComments')
cy.wait(['@getUsers', '@getActivities', '@getComments']).spread(
  (getUsers, getActivities, getComments) => {
    // each interception is now an individual argument
  }
)

----------------------------------------

TITLE: Writing Text to a File with Cypress
DESCRIPTION: Example of writing text content to a file using cy.writeFile() and then reading it back to verify the content.

LANGUAGE: javascript
CODE:
cy.writeFile('path/to/message.txt', 'Hello World')
cy.readFile('path/to/message.txt').then((text) => {
  expect(text).to.equal('Hello World') // true
})

----------------------------------------

TITLE: Generated Mount Example Output
DESCRIPTION: The generated code block for the component testing scenario using cy.mount.

LANGUAGE: javascript
CODE:
cy.clock(now)
cy.mount(<DatePicker id="date" />)
cy.get('#date').should('have.value', '04/14/2021')

----------------------------------------

TITLE: Temporarily Escaping .within() Context in Cypress
DESCRIPTION: Demonstrates how to temporarily escape the .within() context using cy.root() and .closest(). This allows interacting with elements outside the scoped area.

LANGUAGE: html
CODE:
<section class="example">
  {/* note the input field outside the form */}
  <input id="name" type="text" />
  <form>
    <input name="email" type="email" />
    <input name="password" type="password" />
    <button type="submit">Login</button>
  </form>
</section>

LANGUAGE: javascript
CODE:
cy.get('form').within(($form) => {
  // temporarily escape the .within context
  cy.root().closest('.example').find('#name').type('Joe')
  // continue using the .within context
  cy.get('input[name="email"]').type('john.doe@email.com')
  cy.get('input[name="password"]').type('password')
  cy.root().submit()
})

----------------------------------------

TITLE: Excluding Auto-generated IDs Configuration
DESCRIPTION: Example configuration to exclude auto-generated ID attributes matching a specific pattern.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "attributeFilters": [
      {
        "attribute": "id",
        "value": ":r.*:",
        "include": false
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <button id=":r11:" name="my-button">Button 1</button>
  <button id=":r12:" name="other-button">Button 2</button>
</body>

----------------------------------------

TITLE: Correct Usage of Cypress Root Command
DESCRIPTION: Shows correct usage examples of the root command, including getting the default root element and using root within a specific element context.

LANGUAGE: javascript
CODE:
cy.root() // Yield root element <html>
cy.get('nav').within(($nav) => {
  cy.root() // Yield root element <nav>
})

----------------------------------------

TITLE: Finding Elements in Navigation
DESCRIPTION: Example showing how to find li elements within nested navigation structure.

LANGUAGE: javascript
CODE:
cy.get('.left-nav>.nav').find('>li')

----------------------------------------

TITLE: Demonstrating Automatic Retries with invoke
DESCRIPTION: Illustrates how invoke automatically retries the function call until assertions pass.

LANGUAGE: javascript
CODE:
let message = 'hello'
const english = {
  greeting() {
    return message
  },
}

setTimeout(() => {
  message = 'bye'
}, 1000)

// initially the english.greeting() returns "hello" failing the assertion.
// .invoke('greeting') tries again and again until after 1 second
// the returned message becomes "bye" and the assertion passes
cy.wrap(english).invoke('greeting').should('equal', 'bye')

----------------------------------------

TITLE: Selenium Visibility Assertion
DESCRIPTION: Shows how to assert element visibility in Selenium.

LANGUAGE: python
CODE:
assert driver.find_element(By.ID, "myButton").is_displayed()

----------------------------------------

TITLE: Basic Navigation Syntax in Cypress
DESCRIPTION: Basic syntax examples for the cy.go() command showing both direction and options parameters.

LANGUAGE: javascript
CODE:
cy.go(direction)
cy.go(direction, options)

----------------------------------------

TITLE: Implementing Custom Dev Server in Cypress
DESCRIPTION: TypeScript example demonstrating how to implement a custom dev server with proper interface implementation and return values.

LANGUAGE: typescript
CODE:
{
  component: {
    async devServer({specs, cypressConfig, devServerEvents}: DevServerOptions) {
      const {port, close} = await startDevServer(specs, cypressConfig, devServerEvents)

      return {
        port,
        close
      }
    },
  },
}

----------------------------------------

TITLE: Cypress Test Using Programmatic Okta Login
DESCRIPTION: Shows a Cypress test that uses the 'loginByOktaApi' command for programmatic Okta authentication, then performs onboarding process checks.

LANGUAGE: javascript
CODE:
describe('Okta', function () {
  beforeEach(function () {
    cy.task('db:seed')
    cy.loginByOktaApi(
      Cypress.env('auth_username'),
      Cypress.env('auth_password')
    )
  })

  it('shows onboarding', function () {
    cy.contains('Get Started').should('be.visible')
  })
})

----------------------------------------

TITLE: Checking Multiple Checkboxes by Value in Cypress
DESCRIPTION: Demonstrates how to check multiple checkboxes by specifying their values in an array.

LANGUAGE: javascript
CODE:
cy.get('form input').check(['subscribe', 'accept'])

----------------------------------------

TITLE: Embedding Videos in Cypress Documentation
DESCRIPTION: Example of using the DocsVideo component to embed videos in the Cypress documentation markdown files.

LANGUAGE: jsx
CODE:
<DocsVideo
  src="https://www.youtube.com/embed/dQw4w9WgXcQ"
  title="Cypress Tips and Tricks"
/>

----------------------------------------

TITLE: Safely Accessing Retry Attempt with Lodash in Cypress
DESCRIPTION: Use Lodash to safely access the current retry attempt and total allowed attempts in a Cypress test, with fallback to default values.

LANGUAGE: javascript
CODE:
it('does something differently on retry', { retries: 3 }, () => {
  // _.get: if the object or property is missing use the provided default value
  const attempt = Cypress.currentRetry
  const retries = Cypress._.get(cy.state('runnable'), '_retries', 0)
  // use the "attempt" and "retries" values somehow
})

----------------------------------------

TITLE: Defining Additional Caches in Bitbucket Pipelines YAML
DESCRIPTION: Shows how to define additional caches for npm and Cypress in the definitions block of the Bitbucket Pipelines configuration.

LANGUAGE: yaml
CODE:
definitions:
  caches:
    npm: $HOME/.npm
    cypress: $HOME/.cache/Cypress

----------------------------------------

TITLE: Backend Configuration for JWT Validation
DESCRIPTION: Configure the backend to validate JWTs from Amazon Cognito using express-jwt and jwks-rsa.

LANGUAGE: jsx
CODE:
// ... initial imports
import jwt from 'express-jwt'
import jwksRsa from 'jwks-rsa'

// ...

const awsCognitoJwtConfig = {
  secret: jwksRsa.expressJwtSecret({
    jwksUri: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}/.well-known/jwks.json`,
  }),

  issuer: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}`,
  algorithms: ['RS256'],
}

export const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({
  path: ['/testData/*'],
})

----------------------------------------

TITLE: Implementing Custom Dev Server in Cypress Config (JavaScript)
DESCRIPTION: Demonstrates how to configure a custom dev server function in Cypress using JavaScript. The function takes a Cypress configuration object and returns a dev server instance with specified port and close method.

LANGUAGE: javascript
CODE:
const { defineConfig } = require('cypress')

module.exports = defineConfig({
  component: {
    devServer(cypressConfig) {
      // return devServer instance or a promise that resolves to
      // a dev server here
      return {
        port: 1234,
        close: () => {},
      }
    },
  },
})

----------------------------------------

TITLE: Clear and Type Example in Cypress
DESCRIPTION: Example showing how to clear an input field and type new content.

LANGUAGE: javascript
CODE:
cy.get('textarea').clear().type('Hello, World')

----------------------------------------

TITLE: Clear and Type with Named Input in Cypress
DESCRIPTION: Example demonstrating clearing and typing into a specific named input field.

LANGUAGE: javascript
CODE:
cy.get('input[name="name"]').clear().type('Jane Lane')

----------------------------------------

TITLE: Using .then() in Cypress for Value Manipulation
DESCRIPTION: .then() is used when you need to manipulate yielded subject values or perform actions. It allows you to use the yielded subject in a callback function.

LANGUAGE: javascript
CODE:
.then()

----------------------------------------

TITLE: Yarn Package Manager Configuration in CircleCI
DESCRIPTION: CircleCI configuration using Yarn as the package manager for Cypress test execution.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  test:
    jobs:
      - cypress/run:
          package-manager: 'yarn'
          start-command: 'yarn start'

----------------------------------------

TITLE: Programmatic Login Command for Amazon Cognito
DESCRIPTION: Create a custom Cypress command to perform programmatic login to Amazon Cognito and set localStorage items.

LANGUAGE: jsx
CODE:
import Amplify, { Auth } from 'aws-amplify'

Amplify.configure(Cypress.env('awsConfig'))

// Amazon Cognito
Cypress.Commands.add('loginByCognitoApi', (username, password) => {
  const log = Cypress.log({
    displayName: 'COGNITO LOGIN',
    message: [`🔐 Authenticating | ${username}`],
    // @ts-ignore
    autoEnd: false,
  })

  log.snapshot('before')

  const signIn = Auth.signIn({ username, password })

  cy.wrap(signIn, { log: false }).then((cognitoResponse) => {
    const keyPrefixWithUsername = `${cognitoResponse.keyPrefix}.${cognitoResponse.username}`

    window.localStorage.setItem(
      `${keyPrefixWithUsername}.idToken`,
      cognitoResponse.signInUserSession.idToken.jwtToken
    )

    window.localStorage.setItem(
      `${keyPrefixWithUsername}.accessToken`,
      cognitoResponse.signInUserSession.accessToken.jwtToken
    )

    window.localStorage.setItem(
      `${keyPrefixWithUsername}.refreshToken`,
      cognitoResponse.signInUserSession.refreshToken.token
    )

    window.localStorage.setItem(
      `${keyPrefixWithUsername}.clockDrift`,
      cognitoResponse.signInUserSession.clockDrift
    )

    window.localStorage.setItem(
      `${cognitoResponse.keyPrefix}.LastAuthUser`,
      cognitoResponse.username
    )

    window.localStorage.setItem('amplify-authenticator-authState', 'signedIn')
    log.snapshot('after')
    log.end()
  })

  cy.visit('/')
})

----------------------------------------

TITLE: Incorrect ScrollIntoView Usage in Cypress
DESCRIPTION: Shows incorrect usage patterns that will result in errors when using scrollIntoView.

LANGUAGE: javascript
CODE:
cy.scrollIntoView('footer') // Errors, cannot be chained off 'cy'
cy.window().scrollIntoView() // Errors, 'window' does not yield DOM element

----------------------------------------

TITLE: TypeScript Configuration Example
DESCRIPTION: Example of default command timeout configuration in TypeScript.

LANGUAGE: typescript
CODE:
{
  defaultCommandTimeout: 10000,
}

----------------------------------------

TITLE: Double-click with Key Modifiers in Cypress
DESCRIPTION: Example of performing a double-click while holding the Alt key.

LANGUAGE: javascript
CODE:
cy.get('li:first').dblclick({
  altKey: true
})

----------------------------------------

TITLE: Chrome Browser Testing Configuration in CircleCI
DESCRIPTION: Configuration for running Cypress tests in Chrome browser, including browser installation setup.

LANGUAGE: yaml
CODE:
version: 2.1
orbs:
  cypress: cypress-io/cypress@3
workflows:
  test:
    jobs:
      - cypress/run:
          install-browsers: true
          start-command: 'npm run start'
          cypress-command: 'npx cypress run --browser chrome'

----------------------------------------

TITLE: Running Cypress Tests in Parallel
DESCRIPTION: Command to run Cypress tests in parallel across multiple machines.

LANGUAGE: shell
CODE:
cypress run --record --key=abc123 --parallel

----------------------------------------

TITLE: Correct Usage of uncheck Command in Cypress
DESCRIPTION: Shows the correct way to use the uncheck command, chaining it off a get command that yields a checkbox element.

LANGUAGE: javascript
CODE:
cy.get('[type="checkbox"]').uncheck() // Unchecks checkbox element

----------------------------------------

TITLE: Using children Command in Cypress
DESCRIPTION: Demonstrates the correct usage of the children command to yield children of a nav element.

LANGUAGE: javascript
CODE:
cy.get('nav').children() // Yield children of nav

----------------------------------------

TITLE: Blackout Elements Configuration
DESCRIPTION: Example of configuring elements to be blacked out in screenshots using CSS selectors

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  blackout: ['.secret-info', '[data-hide=true]'],
})

----------------------------------------

TITLE: Cypress Cloud Feature Commands
DESCRIPTION: Command flag examples for Cypress Cloud features including recording tests (--record), running parallel tests (--parallel), and grouping test runs (--group)

LANGUAGE: markdown
CODE:
--record
--parallel
--group UI-Chrome

----------------------------------------

TITLE: Grouping User Profile Views in Cypress UI Coverage
DESCRIPTION: This JSON configuration groups user profile views with similar URL patterns to consolidate coverage metrics for related pages.

LANGUAGE: json
CODE:
{
  "views": [
    {
      "pattern": "https://cypress.io/users/*"
    }
  ]
}

----------------------------------------

TITLE: Setting a Global baseUrl in Cypress Configuration
DESCRIPTION: Shows how to set a global baseUrl in Cypress configuration to simplify URL handling in tests and improve initial test startup time.

LANGUAGE: TypeScript
CODE:
{
  e2e: {
    baseUrl: 'http://localhost:8484',
  },
}

----------------------------------------

TITLE: Complex Assertion Example with Multiple Checks
DESCRIPTION: Shows how to use .and() with a callback function to perform multiple assertions on DOM elements.

LANGUAGE: html
CODE:
<div>
  <p class="text-primary">Hello World</p>
  <p class="text-danger">You have an error</p>
  <p class="text-default">Try again later</p>
</div>

LANGUAGE: javascript
CODE:
cy.get('p')
  .should('not.be.empty')
  .and(($p) => {
    expect($p).to.have.length(3)
    expect($p.first()).to.contain('Hello World')
    const classes = $p.map((i, el) => {
      return Cypress.$(el).attr('class')
    })
    expect(classes.get()).to.deep.eq([
      'text-primary',
      'text-danger',
      'text-default'
    ])
  })

----------------------------------------

TITLE: Retrieving Selectors with Cypress.SelectorPlayground in JavaScript
DESCRIPTION: Shows how to use the Cypress.SelectorPlayground.getSelector method to retrieve selector values for given elements. It includes examples with default and custom selector strategies, demonstrating how selector priority affects the returned value.

LANGUAGE: javascript
CODE:
const $el = Cypress.$('button')
const selector = Cypress.SelectorPlayground.getSelector($el) // '#bingo'

LANGUAGE: javascript
CODE:
Cypress.SelectorPlayground.defaults({
  selectorPriority: ['class', 'id'],
})

const $el = Cypress.$('button')
const selector = Cypress.SelectorPlayground.getSelector($el) // '.number3'

----------------------------------------

TITLE: Failure Screenshot Configuration
DESCRIPTION: Disabling automatic screenshots on test failure during cypress run

LANGUAGE: javascript
CODE:
Cypress.Screenshot.defaults({
  screenshotOnRunFailure: false,
})

----------------------------------------

TITLE: Wrapping Elements in jQuery Object in Cypress
DESCRIPTION: This example shows how to use Cypress.dom.wrap to create a jQuery object from a DOM element.

LANGUAGE: javascript
CODE:
cy.get('p').then(($el) => {
  Cypress.dom.wrap($el)
})

----------------------------------------

TITLE: Getting Full Title Path in Cypress
DESCRIPTION: Example demonstrating how to access and verify the complete title path of the current test using Cypress.currentTest.titlePath.

LANGUAGE: javascript
CODE:
describe('app layout and responsiveness', () => {
  it('toggles the nav', () => {
    expect(Cypress.currentTest.titlePath).to.deep.eq([
      'app layout and responsiveness',
      'toggles the nav',
    ])
  })
})

----------------------------------------

TITLE: Handling Uncaught Exceptions in cy.origin Command
DESCRIPTION: Example of how to handle uncaught exceptions within a cy.origin command by adding an exception handler inside the command.

LANGUAGE: javascript
CODE:
cy.origin('https://example.cypress.io', () => {
  Cypress.on('uncaught:exception', (err, runnable) => {
    // returning false here prevents Cypress
    // inside the cy.origin() method from failing the test
    return false
  })
})

----------------------------------------

TITLE: Disabling Uncaught Exception Handling in Cypress
DESCRIPTION: Example of how to turn off all uncaught exception handling in Cypress by binding to the 'uncaught:exception' event and returning false.

LANGUAGE: javascript
CODE:
Cypress.on('uncaught:exception', (err, runnable) => {
  // returning false here prevents Cypress from
  // failing the test
  return false
})

----------------------------------------

TITLE: Testing CSS Variable Change with Cypress.sinon Matcher in JavaScript
DESCRIPTION: Cypress test that uses a spy and Cypress.sinon matcher to verify that setProperty was called with a string and a specific color value when a color input is changed.

LANGUAGE: javascript
CODE:
cy.document()
  .its('documentElement.style')
  .then((style) => {
    cy.spy(style, 'setProperty').as('setColor')
  })

cy.get('input[type=color]').invoke('val', '#ff0000').trigger('change')

// we don't care about '--background-color' exact
// value but know it should be a string
cy.get('@setColor').should(
  'have.been.calledWith',
  Cypress.sinon.match.string,
  '#ff0000'
)

----------------------------------------

TITLE: Initializing Cypress.Promise in JavaScript
DESCRIPTION: Demonstrates the correct syntax for creating a new Cypress.Promise. It takes a function with resolve and reject parameters.

LANGUAGE: javascript
CODE:
new Cypress.Promise((resolve, reject) => { ... })

----------------------------------------

TITLE: Using Lodash _.each Function in Cypress JavaScript Test
DESCRIPTION: Demonstrates how to use the Lodash _.each function in a Cypress test. It iterates over list items and performs assertions on each element.

LANGUAGE: javascript
CODE:
// set local reference to lodash and jquery
const { _, $ } = Cypress

cy.get('li').then(($li) => {
  // use the _.each function
  _.each($li.get(), (el, i) => {
    // use $(...) to wrap the DOM element
    // into a jQuery object
    expect($(el).parent()).to.match('ul')
  })
})

----------------------------------------

TITLE: Incorrect Usage of Cypress._ in JavaScript
DESCRIPTION: Illustrates an incorrect way of using Lodash methods in Cypress, attempting to chain off 'cy' instead of using Cypress._.

LANGUAGE: javascript
CODE:
cy._.keys(obj) // Errors, cannot be chained off 'cy'

----------------------------------------

TITLE: Configuring Multiple Reporters in JSON
DESCRIPTION: Defines the configuration for multiple reporters (spec and mocha-junit-reporter) in a separate JSON file.

LANGUAGE: json
CODE:
{
  "reporterEnabled": "spec, mocha-junit-reporter",
  "mochaJunitReporterReporterOptions": {
    "mochaFile": "cypress/results/results-[hash].xml"
  }
}

----------------------------------------

TITLE: Configuring Multiple Reporters in Cypress Config
DESCRIPTION: Shows how to set up multiple reporters using cypress-multi-reporters in the Cypress configuration file.

LANGUAGE: javascript
CODE:
{
  reporter: 'cypress-multi-reporters',
  reporterOptions: {
    configFile: 'reporter-config.json'
  }
}

----------------------------------------

TITLE: Running Cypress with Reporter Options via Command Line
DESCRIPTION: Demonstrates how to specify reporter options using the command line when running Cypress tests.

LANGUAGE: shell
CODE:
npx cypress run --reporter junit \
  --reporter-options "mochaFile=results/my-test-output.xml,toConsole=true"

----------------------------------------

TITLE: Configuring Custom Reporter in Cypress Config
DESCRIPTION: Demonstrates how to specify a custom reporter using a relative path in the Cypress configuration file.

LANGUAGE: javascript
CODE:
{
  reporter: 'reporters/custom.js'
}

----------------------------------------

TITLE: Adding Triple Slash Directive for Cypress IntelliSense in JavaScript
DESCRIPTION: This code snippet demonstrates how to add a triple slash directive to enable Cypress IntelliSense in JavaScript files. It references the Cypress types to provide intelligent code suggestions.

LANGUAGE: javascript
CODE:
/// <reference types="Cypress" />

----------------------------------------

TITLE: Implementing Synchronous DOM Element Testing
DESCRIPTION: Example of proper conditional testing based on synchronously rendered elements using jQuery event handling.

LANGUAGE: javascript
CODE:
$('button').on('click', (e) => {
  // do something synchronously randomly
  if (Math.random() < 0.5) {
    // append an input
    $('<input />').appendTo($('body'))
  } else {
    // or append a textarea
    $('<textarea />').appendTo($('body'))
  }
})

LANGUAGE: javascript
CODE:
// click the button causing the new elements to appear
cy.get('button').click()
cy.get('body')
  .then(($body) => {
    // synchronously query from body
    // to find which element was created
    if ($body.find('input').length) {
      // input was found, do something else here
      return 'input'
    }

    // else assume it was textarea
    return 'textarea'
  })
  .then((selector) => {
    // selector is a string that represents
    // the selector we could use to find it
    cy.get(selector).type(`found the element by selector ${selector}`)
  })

----------------------------------------

TITLE: Locating and Interacting with Buttons in Cypress
DESCRIPTION: Shows different methods for locating and interacting with buttons, including using Cypress's contains method and Testing Library's findByRole method.

LANGUAGE: javascript
CODE:
// click the "Submit" button located by `cy.contains()`
cy.contains('button', 'Submit').click()

// click any element with role `button` and an accessible name of `Submit`
cy.findByRole('button', { name: 'Submit' }).click()

----------------------------------------

TITLE: GitHub Actions CI Integration
DESCRIPTION: Configuration example showing how to integrate UI Coverage results verification into a GitHub Actions workflow.

LANGUAGE: yaml
CODE:
name: My Workflow
on: push

env:
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

jobs:
  run-cypress:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: install
        run: npm install
      - name: Run
        run: npx cypress run --record
      - name: Verify UI Coverage Results
        run: |
          npm install --force https://cdn.cypress.io/extract-cloud-results/v1/extract-cloud-results.tgz
          node ./scripts/verifyUICoverageResults.js

----------------------------------------

TITLE: Configuring View Filter to Exclude All Third Party URLs in Cypress UI Coverage
DESCRIPTION: JSON configuration example demonstrating how to include only localhost URLs while excluding all other URLs from UI Coverage reports.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "http://localhost:3000/*",
      "include": true
    },
    {
      "pattern": "*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Configuring View Filter to Exclude Single URL in Cypress UI Coverage
DESCRIPTION: JSON configuration example showing how to exclude a specific third-party authentication URL pattern from UI Coverage reports.

LANGUAGE: json
CODE:
{
  "viewFilters": [
    {
      "pattern": "https://auth.example.com/*",
      "include": false
    }
  ]
}

----------------------------------------

TITLE: Grouping Dynamic Elements
DESCRIPTION: Shows how to group dynamically generated elements using ID patterns.

LANGUAGE: json
CODE:
{
  "uiCoverage": {
    "elementGroups": [
      {
        "selector": "[id^='product']"
      }
    ]
  }
}

LANGUAGE: xml
CODE:
<body>
  <button id="product125">Product 1</button>
  <button id="product514">Product 2</button>
  <button id="product256">Product 3</button>
</body>

----------------------------------------

TITLE: HTML for Named Element Identification
DESCRIPTION: This HTML snippet shows the structure of a button element that matches the selector in the previous configuration example. It demonstrates how the custom name will be applied to this element in UI Coverage reports.

LANGUAGE: xml
CODE:
<body>
  <button id="ui-popover-button">Help</button>
</body>

----------------------------------------

TITLE: Grouping Dynamic Path Parameters in Cypress
DESCRIPTION: This example demonstrates how to group dynamic path parameters in URLs. It uses a wildcard pattern to group all URLs under the '/users/' path.

LANGUAGE: typescript
CODE:
{
  "views": [
    {
      "pattern": "https://www.my-app.com/users/*"
    }
  ]
}

----------------------------------------

TITLE: Setting Default Command Timeout in Cypress Configuration
DESCRIPTION: This snippet demonstrates how to set the default command timeout in the Cypress configuration file. The timeout is set to 5000 milliseconds (5 seconds) for all commands.

LANGUAGE: javascript
CODE:
{
  defaultCommandTimeout: 5000
}

----------------------------------------

TITLE: Opening Cypress with PNPM
DESCRIPTION: Launches the Cypress Test Runner using PNPM (Performant NPM) package manager. This command opens the interactive GUI for running Cypress tests.

LANGUAGE: shell
CODE:
pnpm cypress open

----------------------------------------

TITLE: Opening Cypress with NPM
DESCRIPTION: Launches the Cypress Test Runner using NPX (Node Package Runner) which is included with npm. This command opens the interactive GUI for running Cypress tests.

LANGUAGE: shell
CODE:
npx cypress open

----------------------------------------

TITLE: Installing Cypress with yarn
DESCRIPTION: This command installs Cypress as a dev dependency using yarn. It adds Cypress to the project's devDependencies in package.json.

LANGUAGE: shell
CODE:
yarn add cypress --dev

----------------------------------------

TITLE: Configuring Retry Attempts for Individual Tests in Cypress
DESCRIPTION: Set custom retry attempts for specific tests using test configuration in Cypress.

LANGUAGE: javascript
CODE:
describe('User sign-up and login', () => {
  // `it` test block with no custom configuration
  it('should redirect unauthenticated user to sign-in page', () => {
    // ...
  })

  // `it` test block with custom configuration
  it(
    'allows user to login',
    {
      retries: {
        runMode: 2,
        openMode: 1,
      },
    },
    () => {
      // ...
    }
  )
})

----------------------------------------

TITLE: Adapting Frontend React App for Okta Authentication
DESCRIPTION: Updates a React frontend to use Okta authentication with the Okta React SDK, including secure routes and login callbacks.

LANGUAGE: typescript
CODE:
// initial imports ...
import {
  LoginCallback,
  SecureRoute,
  useOktaAuth,
  withOktaAuth,
} from '@okta/okta-react'

// ...

const AppOkta: React.FC = () => {
  const { authState, oktaAuth } = useOktaAuth()

  // ...

  useEffect(() => {
    if (authState.isAuthenticated) {
      oktaAuth.getUser().then((user) => {
        authService.send('OKTA', { user, token: oktaAuthState.accessToken })
      })
    }
  }, [authState, oktaAuth])

  // ...

  return (
    <div className={classes.root}>
      // ...
      {authState.matches('unauthorized') && (
        <>
          <Route path="/implicit/callback" component={LoginCallback} />
          <SecureRoute exact path="/" />
        </>
      )}
      // ...
    </div>
  )
}

export default withOktaAuth(AppOkta)

----------------------------------------

TITLE: Refactoring Okta Login Command with cy.session()
DESCRIPTION: Refactors the 'loginByOkta' command to use cy.session() for caching the logged-in user state, reducing the need for reauthentication in every test.

LANGUAGE: javascript
CODE:
Cypress.Commands.add('loginByOkta', (username: string, password: string) => {
  cy.session(
    `okta-${username}`,
    () => {
      return loginToOkta(username, password)
    },
    {
      validate() {
        cy.visit('/')
        cy.get('[data-test="sidenav-username"]').should('contain', username)
      },
    }
  )
})

----------------------------------------

TITLE: Configuring AWS Amplify for Authentication
DESCRIPTION: Configure the AWS Amplify library with Amazon Cognito credentials and perform user sign-in.

LANGUAGE: jsx
CODE:
// Add 'aws-amplify' library into your application
import Amplify, { Auth } from 'aws-amplify'

// Configure Auth category with your Amazon Cognito credentials
Amplify.configure({
  Auth: {
    identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID
    region: 'XX-XXXX-X', // Amazon Cognito Region
  },
})

// Call Auth.signIn with user credentials
Auth.signIn(username, password)
  .then((user) => console.log(user))
  .catch((err) => console.log(err))

----------------------------------------

TITLE: Using Custom Environment Variables in Tests
DESCRIPTION: Example of setting and using a custom environment variable in Cypress tests.

LANGUAGE: shell
CODE:
export "EXTERNAL_API_SERVER=https://corp.acme.co"

LANGUAGE: javascript
CODE:
cy.request({
  method: 'POST',
  url: Cypress.env('EXTERNAL_API_SERVER') + '/users/1',
  body: {
    foo: 'bar',
    baz: 'quux',
  },
})

----------------------------------------

TITLE: Configuring Component Test Spec Pattern
DESCRIPTION: JavaScript configuration example showing how to customize the spec pattern for component tests.

LANGUAGE: javascript
CODE:
{
  component: {
    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'
  }
}

----------------------------------------

TITLE: Custom Mount Command for Angular
DESCRIPTION: Example of creating a custom mount command with default declarations

LANGUAGE: typescript
CODE:
import { Type } from '@angular/core'
import { mount, MountConfig } from 'cypress/angular'
import { ButtonComponent } from 'src/app/button/button.component'
import { CardComponent } from 'src/app/card/card.component'

declare global {
  namespace Cypress {
    interface Chainable {
      mount: typeof customMount
    }
  }
}

const declarations = [ButtonComponent, CardComponent]

function customMount<T>(component: string | Type<T>, config?: MountConfig<T>) {
  if (!config) {
    config = { declarations }
  } else {
    config.declarations = [...(config?.declarations || []), ...declarations]
  }
  return mount<T>(component, config)
}

Cypress.Commands.add('mount', customMount)

----------------------------------------

TITLE: Importing Angular Mount Function
DESCRIPTION: Basic import statement for the mount function from Cypress Angular integration

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/angular'

----------------------------------------

TITLE: Package.json Dependencies Example
DESCRIPTION: Example package.json showing required dependencies for Cypress plugins.

LANGUAGE: json
CODE:
{
  "name": "My Project",
  "dependencies": {
    "debug": "x.x.x"
  },
  "devDependencies": {
    "lodash": "x.x.x"
  }
}

----------------------------------------

TITLE: Logging Test Results After Run in TypeScript
DESCRIPTION: Example showing how to access and log test results from the after:run event handler, including handling of the results object with various test statistics and configuration details.

LANGUAGE: typescript
CODE:
on('after:run', (results) => {
  if (results) {
    // results will be undefined in interactive mode
    console.log(results.totalPassed, 'out of', results.totalTests, 'passed')
  }
})

----------------------------------------

TITLE: Using Cypress.require() in cy.origin() Callback
DESCRIPTION: Shows how to use Cypress.require() to include npm packages and other files within the cy.origin() callback, requiring the experimentalOriginDependencies option.

LANGUAGE: javascript
CODE:
cy.origin('cypress.io', () => {
  const _ = Cypress.require('lodash')
  const utils = Cypress.require('../support/utils')

  // ... use lodash and utils ...
})

----------------------------------------

TITLE: Reading Binary File with Encoding in Cypress
DESCRIPTION: Shows how to read a binary file (PNG image) with base64 encoding using cy.readFile().

LANGUAGE: javascript
CODE:
cy.readFile('path/to/logo.png', 'base64').then((logo) => {
  // logo will be encoded as base64
  // and should look something like this:
  // aIJKnwxydrB10NVWqhlmmC+ZiWs7otHotSAAAOw==...
})

----------------------------------------

TITLE: Implementing cy.mount() Command for Angular in JavaScript
DESCRIPTION: Creates a custom Cypress command for mounting Angular components. This basic implementation allows for component mounting with configuration options.

LANGUAGE: javascript
CODE:
import { mount } from 'cypress/angular'

Cypress.Commands.add('mount', (component, config) => {
  return mount(component, config)
})

----------------------------------------

TITLE: Correct Usage of clearAllSessionStorage
DESCRIPTION: Demonstrates the correct way to use the clearAllSessionStorage command in Cypress tests.

LANGUAGE: javascript
CODE:
cy.clearAllSessionStorage()

----------------------------------------

TITLE: Correct clearAllLocalStorage Implementation
DESCRIPTION: Example showing the correct way to use the clearAllLocalStorage command in Cypress tests.

LANGUAGE: javascript
CODE:
cy.clearAllLocalStorage()

----------------------------------------

TITLE: Configuring Always Fail Strategy for Flaky Tests
DESCRIPTION: Configuration example showing how to set up the detect-flake-but-always-fail strategy with maxRetries and stopIfAnyPassed options.

LANGUAGE: javascript
CODE:
{
  retries: {
    experimentalStrategy: 'detect-flake-but-always-fail',
    experimentalOptions: {
      maxRetries: 2,
      stopIfAnyPassed: true
    },
    openMode: true,
    runMode: true
  }
}

----------------------------------------

TITLE: Creating a Combined Social Login Command in Cypress
DESCRIPTION: Custom Cypress command that combines login functions for Facebook, Google, and Microsoft, allowing flexible social authentication in tests.

LANGUAGE: typescript
CODE:
Cypress.Commands.add(
  'loginToAuth0ViaSocial',
  (SOCIAL_PROVIDER: 'microsoft' | 'google' | 'facebook') => {
    const log = Cypress.log({
      displayName: 'Social LOGIN',
      message: [`🔐 Authenticating | ${SOCIAL_PROVIDER}`],
      // @ts-ignore
      autoEnd: false,
    })
    log.snapshot('before')

    switch (SOCIAL_PROVIDER) {
      case 'microsoft':
        logIntoMicrosoft(
          Cypress.env('MICROSOFT_USERNAME'),
          Cypress.env('MICROSOFT_PASSWORD'),
          Cypress.env('MICROSOFT_NAME')
        )
        break
      case 'google':
        logIntoGoogle(
          Cypress.env('GOOGLE_USERNAME'),
          Cypress.env('GOOGLE_PASSWORD'),
          Cypress.env('GOOGLE_NAME')
        )
        break
      case 'facebook':
        logIntoFacebook(
          Cypress.env('FACEBOOK_USERNAME'),
          Cypress.env('FACEBOOK_PASSWORD'),
          Cypress.env('FACEBOOK_NAME')
        )
        break
      default:
        throw new Error('no social provider configured!')
    }

    log.snapshot('after')
    log.end()
  }
)

----------------------------------------

TITLE: Finding Content with Cypress Contains
DESCRIPTION: Test showing how to find content on a page using cy.contains() command

LANGUAGE: javascript
CODE:
describe('My First Test', () => {
  it('finds the content "type"', () => {
    cy.visit('https://example.cypress.io')
    cy.contains('type')
  })
})

----------------------------------------

TITLE: Building Cypress Documentation Static Content
DESCRIPTION: Command to generate static content for the Cypress documentation into the 'dist' directory. The resulting content can be served using any static content hosting service.

LANGUAGE: bash
CODE:
$ npm run build

----------------------------------------

TITLE: Cloning Forked Cypress Documentation Repository
DESCRIPTION: Commands to clone the forked Cypress documentation repository and navigate to the project directory.

LANGUAGE: shell
CODE:
git clone https://github.com/<your username>/cypress-documentation.git
cd cypress-documentation