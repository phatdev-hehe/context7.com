TITLE: Managing Helm Charts in Bash
DESCRIPTION: Commands for creating, packaging, linting, inspecting, and managing dependencies of Helm charts. These operations are essential for chart development and maintenance.

LANGUAGE: bash
CODE:
helm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.
helm package <chart-path>               # Packages a chart into a versioned chart archive file.
helm lint <chart>                       # Run tests to examine a chart and identify possible issues:
helm show all <chart>                   # Inspect a chart and list its contents:
helm show values <chart>                # Displays the contents of the values.yaml file
helm pull <chart>                       # Download/pull chart 
helm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it
helm pull <chart> --verify              # Verify the package before using it
helm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use
helm dependency list <chart>            # Display a list of a chart's dependencies:

----------------------------------------

TITLE: Managing Helm Charts in Bash
DESCRIPTION: Commands for creating, packaging, linting, inspecting, and managing dependencies of Helm charts. These operations are essential for chart development and maintenance.

LANGUAGE: bash
CODE:
helm create <name>                      # Creates a chart directory along with the common files and directories used in a chart.
helm package <chart-path>               # Packages a chart into a versioned chart archive file.
helm lint <chart>                       # Run tests to examine a chart and identify possible issues:
helm show all <chart>                   # Inspect a chart and list its contents:
helm show values <chart>                # Displays the contents of the values.yaml file
helm pull <chart>                       # Download/pull chart 
helm pull <chart> --untar=true          # If set to true, will untar the chart after downloading it
helm pull <chart> --verify              # Verify the package before using it
helm pull <chart> --version <number>    # Default-latest is used, specify a version constraint for the chart version to use
helm dependency list <chart>            # Display a list of a chart's dependencies:

----------------------------------------

TITLE: Installing a Helm Chart
DESCRIPTION: Shows how to install a Helm chart using helm install command with custom configuration values.

LANGUAGE: console
CODE:
$ helm install happy-panda bitnami/wordpress

LANGUAGE: yaml
CODE:
mariadb.auth.database: user0db
mariadb.auth.username: user0

----------------------------------------

TITLE: Creating a New Helm Chart
DESCRIPTION: Demonstrates how to create a new Helm chart using the helm create command.

LANGUAGE: console
CODE:
$ helm create mychart
Creating mychart

----------------------------------------

TITLE: Installing a Helm Chart
DESCRIPTION: This set of commands updates the local chart repository cache and installs the MySQL chart from the Bitnami repository. It generates a unique name for the release.

LANGUAGE: console
CODE:
$ helm repo update
$ helm install bitnami/mysql --generate-name

----------------------------------------

TITLE: Adding a Helm Chart Repository
DESCRIPTION: This command adds the Bitnami chart repository to Helm. It allows access to a collection of pre-configured Helm charts.

LANGUAGE: console
CODE:
$ helm repo add bitnami https://charts.bitnami.com/bitnami

----------------------------------------

TITLE: Installing and Uninstalling Helm Charts in Bash
DESCRIPTION: Commands for installing and uninstalling Helm charts with various options such as namespace specification, value setting, and dry-run installations. These commands are crucial for deploying and removing applications using Helm.

LANGUAGE: bash
CODE:
helm install <name> <chart>                           # Install the chart with a name
helm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace
helm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)
helm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values
helm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)
helm install <name> <chart> --verify                  # Verify the package before using it 
helm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart
helm uninstall <name>                                 # Uninstall a release

----------------------------------------

TITLE: Installing and Uninstalling Helm Charts in Bash
DESCRIPTION: Commands for installing and uninstalling Helm charts with various options such as namespace specification, value setting, and dry-run installations. These commands are crucial for deploying and removing applications using Helm.

LANGUAGE: bash
CODE:
helm install <name> <chart>                           # Install the chart with a name
helm install <name> <chart> --namespace <namespace>   # Install the chart in a specific namespace
helm install <name> <chart> --set key1=val1,key2=val2 # Set values on the command line (can specify multiple or separate values with commas)
helm install <name> <chart> --values <yaml-file/url>  # Install the chart with your specified values
helm install <name> <chart> --dry-run --debug         # Run a test installation to validate chart (p)
helm install <name> <chart> --verify                  # Verify the package before using it 
helm install <name> <chart> --dependency-update       # update dependencies if they are missing before installing the chart
helm uninstall <name>                                 # Uninstall a release

----------------------------------------

TITLE: Searching for Helm Charts
DESCRIPTION: Demonstrates how to search for available Helm charts using helm search hub and helm search repo commands.

LANGUAGE: console
CODE:
$ helm search hub wordpress
URL                                                 CHART VERSION APP VERSION DESCRIPTION
https://hub.helm.sh/charts/bitnami/wordpress        7.6.7         5.2.4       Web publishing platform for building blogs and ...
https://hub.helm.sh/charts/presslabs/wordpress-...  v0.6.3        v0.6.3      Presslabs WordPress Operator Helm Chart
https://hub.helm.sh/charts/presslabs/wordpress-...  v0.7.1        v0.7.1      A Helm chart for deploying a WordPress site on ...

----------------------------------------

TITLE: Demonstrating Valid Helm Chart Names
DESCRIPTION: Examples of acceptable naming conventions for Helm charts. Chart names must use lowercase letters and numbers, with words optionally separated by dashes.

LANGUAGE: plaintext
CODE:
drupal
nginx-lego
aws-cluster-autoscaler

----------------------------------------

TITLE: Setting Configuration Values in Helm
DESCRIPTION: Demonstrates various ways to set configuration values using --set flag, including complex data structures and special characters.

LANGUAGE: yaml
CODE:
outer:
  inner: value

name:
  - a
  - b
  - c

servers:
  - port: 80
    host: example

nodeSelector:
  kubernetes.io/role: master

----------------------------------------

TITLE: Removing Default Template Files
DESCRIPTION: Shows how to remove default template files from a newly created Helm chart.

LANGUAGE: console
CODE:
$ rm -rf mychart/templates/*

----------------------------------------

TITLE: Upgrading and Rolling Back Helm Releases in Bash
DESCRIPTION: Commands for upgrading Helm releases with various options and rolling back to previous versions. These operations are essential for managing the lifecycle of applications deployed with Helm.

LANGUAGE: bash
CODE:
helm upgrade <release> <chart>                            # Upgrade a release
helm upgrade <release> <chart> --atomic                   # If set, upgrade process rolls back changes made in case of failed upgrade.
helm upgrade <release> <chart> --dependency-update        # update dependencies if they are missing before installing the chart
helm upgrade <release> <chart> --version <version_number> # specify a version constraint for the chart version to use
helm upgrade <release> <chart> --values                   # specify values in a YAML file or a URL (can specify multiple)
helm upgrade <release> <chart> --set key1=val1,key2=val2  # Set values on the command line (can specify multiple or separate valuese)
helm upgrade <release> <chart> --force                    # Force resource updates through a replacement strategy
helm rollback <release> <revision>                        # Roll back a release to a specific revision
helm rollback <release> <revision>  --cleanup-on-fail     # Allow deletion of new resources created in this rollback when rollback fails

----------------------------------------

TITLE: Managing Helm Repositories
DESCRIPTION: Commands for adding, listing, updating, removing, and indexing Helm chart repositories.

LANGUAGE: bash
CODE:
helm repo add <repo-name> <url>
helm repo list
helm repo update
helm repo remove <repo_name>
helm repo index <DIR>
helm repo index <DIR> --merge
helm search repo <keyword>
helm search hub <keyword>

----------------------------------------

TITLE: Managing Helm Repositories in Bash
DESCRIPTION: Commands for adding, listing, updating, and removing Helm chart repositories. These operations are crucial for managing the sources of Helm charts and keeping them up to date.

LANGUAGE: bash
CODE:
helm repo add <repo-name> <url>   # Add a repository from the internet:
helm repo list                    # List added chart repositories
helm repo update                  # Update information of available charts locally from chart repositories
helm repo remove <repo_name>      # Remove one or more chart repositories
helm repo index <DIR>             # Read the current directory and generate an index file based on the charts found.
helm repo index <DIR> --merge     # Merge the generated index with an existing index file
helm search repo <keyword>        # Search repositories for a keyword in charts
helm search hub <keyword>         # Search for charts in the Artifact Hub or your own hub instance

----------------------------------------

TITLE: Debugging Helm Chart Installation
DESCRIPTION: Demonstrates how to use the helm install command with debug and dry-run options to test template rendering without actual installation.

LANGUAGE: console
CODE:
$ helm install --debug --dry-run goodly-guppy ./mychart
install.go:149: [debug] Original chart version: ""
install.go:166: [debug] CHART PATH: /Users/ninja/mychart

NAME: goodly-guppy
LAST DEPLOYED: Thu Dec 26 17:24:13 2019
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
affinity: {}
fullnameOverride: ""
image:
  pullPolicy: IfNotPresent
  repository: nginx
imagePullSecrets: []
ingress:
  annotations: {}
  enabled: false
  hosts:
  - host: chart-example.local
    paths: []
  tls: []
nameOverride: ""
nodeSelector: {}
podSecurityContext: {}
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  create: true
  name: null
tolerations: []

HOOKS:
MANIFEST:
---
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: goodly-guppy-configmap
data:
  myvalue: "Hello World"


----------------------------------------

TITLE: Sample Template File
DESCRIPTION: Example of a Helm template file for a Kubernetes ReplicationController

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ReplicationController
metadata:
  name: deis-database
  namespace: deis
  labels:
    app.kubernetes.io/managed-by: deis
spec:
  replicas: 1
  selector:
    app.kubernetes.io/name: deis-database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: deis-database
    spec:
      serviceAccount: deis-database
      containers:
        - name: deis-database
          image: {{ .Values.imageRegistry }}/postgres:{{ .Values.dockerTag }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - containerPort: 5432
          env:
            - name: DATABASE_STORAGE
              value: {{ default "minio" .Values.storage }}

----------------------------------------

TITLE: Monitoring Helm Releases in Bash
DESCRIPTION: Commands for listing, filtering, and checking the status of Helm releases. These operations are essential for understanding the current state of deployments managed by Helm.

LANGUAGE: bash
CODE:
helm list                       # Lists all of the releases for a specified namespace, uses current namespace context if namespace not specified
helm list --all                 # Show all releases without any filter applied, can use -a
helm list --all-namespaces      # List releases across all namespaces, we can use -A
helm list -l key1=value1,key2=value2 # Selector (label query) to filter on, supports '=', '==', and '!='
helm list --date                # Sort by release date
helm list --deployed            # Show deployed releases. If no other is specified, this will be automatically enabled
helm list --pending             # Show pending releases
helm list --failed              # Show failed releases
helm list --uninstalled         # Show uninstalled releases (if 'helm uninstall --keep-history' was used)
helm list --superseded          # Show superseded releases
helm list -o yaml               # Prints the output in the specified format. Allowed values: table, json, yaml (default table)
helm status <release>           # This command shows the status of a named release.
helm status <release> --revision <number>   # if set, display the status of the named release with revision
helm history <release>          # Historical revisions for a given release.
helm env                        # Env prints out all the environment information in use by Helm.

----------------------------------------

TITLE: Naming Conventions in YAML Values
DESCRIPTION: Demonstrates correct and incorrect naming patterns for Helm values. Variables should use camelCase and start with lowercase letters.

LANGUAGE: yaml
CODE:
chicken: true
chickenNoodleSoup: true

LANGUAGE: yaml
CODE:
Chicken: true  # initial caps may conflict with built-ins
chicken-noodle-soup: true # do not use hyphens in the name

----------------------------------------

TITLE: Installing Helm via Chocolatey on Windows
DESCRIPTION: Installs Helm using the Chocolatey package manager on Windows.

LANGUAGE: console
CODE:
choco install kubernetes-helm

----------------------------------------

TITLE: Downloading Helm Release Information in Bash
DESCRIPTION: Commands for retrieving detailed information about Helm releases, including manifests, hooks, notes, and values. These operations are useful for debugging and understanding the configuration of deployed releases.

LANGUAGE: bash
CODE:
helm get all <release>      # A human readable collection of information about the notes, hooks, supplied values, and generated manifest file of the given release.
helm get hooks <release>    # This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\n' separator.
helm get manifest <release> # A manifest is a YAML-encoded representation of the Kubernetes resources that were generated from this release's chart(s). If a chart is dependent on other charts, those resources will also be included in the manifest.
helm get notes <release>    # Shows notes provided by the chart of a named release.
helm get values <release>   # Downloads a values file for a given release. use -o to format output

----------------------------------------

TITLE: Retrieving Helm Release Information
DESCRIPTION: Commands for getting detailed information about Helm releases, including hooks, manifests, notes, and values.

LANGUAGE: bash
CODE:
helm get all <release>
helm get hooks <release>
helm get manifest <release>
helm get notes <release>
helm get values <release>

----------------------------------------

TITLE: Defining a Named Template in Helm
DESCRIPTION: Demonstrates how to define a named template using the 'define' action. This example creates a template for Kubernetes labels.

LANGUAGE: yaml
CODE:
{{- define "mychart.labels" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
{{- end }}

----------------------------------------

TITLE: Adding and Listing Helm Repositories
DESCRIPTION: Shows how to add a new Helm repository to the local client and list all configured repositories.

LANGUAGE: console
CODE:
$ helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com
$ helm repo list
fantastic-charts    https://fantastic-charts.storage.googleapis.com

----------------------------------------

TITLE: Sample Chart.yaml File
DESCRIPTION: Example of a Chart.yaml file with common fields

LANGUAGE: yaml
CODE:
apiVersion: The chart API version (required)
name: The name of the chart (required)
version: A SemVer 2 version (required)
kubeVersion: A SemVer range of compatible Kubernetes versions (optional)
description: A single-sentence description of this project (optional)
type: The type of the chart (optional)
keywords:
  - A list of keywords about this project (optional)
home: The URL of this projects home page (optional)
sources:
  - A list of URLs to source code for this project (optional)
dependencies: # A list of the chart requirements (optional)
  - name: The name of the chart (nginx)
    version: The version of the chart ("1.2.3")
    repository: (optional) The repository URL ("https://example.com/charts") or alias ("@repo-name")
    condition: (optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
    tags: # (optional)
      - Tags can be used to group charts for enabling/disabling together
    import-values: # (optional)
      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.
    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times
maintainers: # (optional)
  - name: The maintainers name (required for each maintainer)
    email: The maintainers email (optional for each maintainer)
    url: A URL for the maintainer (optional for each maintainer)
icon: A URL to an SVG or PNG image to be used as an icon (optional).
appVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.
deprecated: Whether this chart is deprecated (optional, boolean)
annotations:
  example: A list of annotations keyed by name (optional).

----------------------------------------

TITLE: Installing a Helm Chart
DESCRIPTION: Shows how to install a Helm chart using the helm install command.

LANGUAGE: console
CODE:
$ helm install full-coral ./mychart
NAME: full-coral
LAST DEPLOYED: Tue Nov  1 17:36:01 2016
NAMESPACE: default
STATUS: DEPLOYED
REVISION: 1
TEST SUITE: None

----------------------------------------

TITLE: ConfigMap Template with Values Reference
DESCRIPTION: Helm template demonstrating how to access and use values from values.yaml in a Kubernetes ConfigMap definition.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favoriteDrink }}

----------------------------------------

TITLE: Installing Helm Chart with Values File
DESCRIPTION: Demonstrates how to install a Redis chart using a custom values file for configuration.

LANGUAGE: bash
CODE:
$ helm install -f myvalues.yaml myredis ./redis

----------------------------------------

TITLE: Using the include Function in Helm Templates
DESCRIPTION: Demonstrates how to use the include function to incorporate a template and perform operations on its output. This is useful for including snippets of code while handling indentation in YAML.

LANGUAGE: yaml
CODE:
value: {{ include "mytpl" . | lower | quote }}

----------------------------------------

TITLE: Using OCI-based Charts with Helm Commands
DESCRIPTION: Demonstrates various Helm commands (pull, show, template, install, upgrade) using OCI-based charts.

LANGUAGE: console
CODE:
$ helm pull oci://localhost:5000/helm-charts/mychart --version 0.1.0
Pulled: localhost:5000/helm-charts/mychart:0.1.0
Digest: sha256:0be7ec9fb7b962b46d81e4bb74fdcdb7089d965d3baca9f85d64948b05b402ff

$ helm show all oci://localhost:5000/helm-charts/mychart --version 0.1.0
apiVersion: v2
appVersion: 1.16.0
description: A Helm chart for Kubernetes
name: mychart
...

$ helm template myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0
---
# Source: mychart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
...

$ helm install myrelease oci://localhost:5000/helm-charts/mychart --version 0.1.0
NAME: myrelease
LAST DEPLOYED: Wed Oct 27 15:11:40 2021
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
...

$ helm upgrade myrelease oci://localhost:5000/helm-charts/mychart --version 0.2.0
Release "myrelease" has been upgraded. Happy Helming!
NAME: myrelease
LAST DEPLOYED: Wed Oct 27 15:12:05 2021
NAMESPACE: default
STATUS: deployed
REVISION: 2
NOTES:
...

----------------------------------------

TITLE: Using the Lookup Function in Helm Templates
DESCRIPTION: Shows how to use the lookup function to query Kubernetes resources from within a Helm template.

LANGUAGE: go
CODE:
(lookup "v1" "Namespace" "" "mynamespace").metadata.annotations

LANGUAGE: go
CODE:
{{ range $index, $service := (lookup "v1" "Service" "mynamespace" "").items }}
    {{/* do something with each service */}}
{{ end }}

----------------------------------------

TITLE: Creating New Helm Chart Command
DESCRIPTION: Basic command syntax for creating a new Helm chart with a specified name. The command creates a directory with standard Helm chart structure including templates, values, and chart definition files.

LANGUAGE: bash
CODE:
helm create NAME [flags]

----------------------------------------

TITLE: Using Pipelines in Helm Templates
DESCRIPTION: Shows how to use pipelines to chain multiple functions together in Helm templates for efficient data transformation.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | quote }}
  food: {{ .Values.favorite.food | upper | quote }}

----------------------------------------

TITLE: Installing Helm via Script
DESCRIPTION: Downloads and executes the official Helm installation script to automatically install the latest version.

LANGUAGE: console
CODE:
$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

----------------------------------------

TITLE: Pushing a Helm Chart to an OCI-based Registry
DESCRIPTION: Demonstrates uploading a Helm chart to an OCI-based registry using the helm push command.

LANGUAGE: console
CODE:
$ helm push mychart-0.1.0.tgz oci://localhost:5000/helm-charts
Pushed: localhost:5000/helm-charts/mychart:0.1.0
Digest: sha256:ec5f08ee7be8b557cd1fc5ae1a0ac985e8538da7c93f51a51eff4b277509a723

----------------------------------------

TITLE: Creating a Subchart in Helm
DESCRIPTION: Commands to create a new subchart within an existing Helm chart and remove default templates.

LANGUAGE: console
CODE:
$ cd mychart/charts
$ helm create mysubchart
Creating mysubchart
$ rm -rf mysubchart/templates/*

----------------------------------------

TITLE: Creating and Signing a Helm Chart
DESCRIPTION: Demonstrates how to create a new Helm chart and sign it using a PGP key. This process generates both the chart package (.tgz) and its provenance file (.prov).

LANGUAGE: console
CODE:
$ helm create mychart
Creating mychart
$ helm package --sign --key 'John Smith' --keyring path/to/keyring.secret mychart

----------------------------------------

TITLE: Installing Helm Chart with Command Line Values
DESCRIPTION: Shows various methods to set values during chart installation using --set flags.

LANGUAGE: bash
CODE:
$ helm install --set name=prod myredis ./redis

----------------------------------------

TITLE: Basic Chart Directory Structure
DESCRIPTION: Shows the typical file structure for a Helm chart

LANGUAGE: text
CODE:
wordpress/
  Chart.yaml          # A YAML file containing information about the chart
  LICENSE             # OPTIONAL: A plain text file containing the license for the chart
  README.md           # OPTIONAL: A human-readable README file
  values.yaml         # The default configuration values for this chart
  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file
  charts/             # A directory containing any charts upon which this chart depends.
  crds/               # Custom Resource Definitions
  templates/          # A directory of templates that, when combined with values,
                      # will generate valid Kubernetes manifest files.
  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes

----------------------------------------

TITLE: Searching for Charts in a Repository
DESCRIPTION: This command searches for available charts in the Bitnami repository. It displays the chart name, version, and a brief description.

LANGUAGE: console
CODE:
$ helm search repo bitnami

----------------------------------------

TITLE: Example .helmignore File Configuration for Helm Charts
DESCRIPTION: This snippet demonstrates various pattern matching rules used in a .helmignore file to exclude files and directories from Helm charts. It includes examples of comment syntax, exact matching, glob patterns, directory matching, and negation.

LANGUAGE: plaintext
CODE:
# comment

# Match any file or path named .helmignore
.helmignore

# Match any file or path named .git
.git

# Match any text file
*.txt

# Match only directories named mydir
mydir/

# Match only text files in the top-level directory
/*.txt

# Match only the file foo.txt in the top-level directory
/foo.txt

# Match any file named ab.txt, ac.txt, or ad.txt
a[b-d].txt

# Match any file under subdir matching temp*
*/temp*

*/*/temp*
temp?

----------------------------------------

TITLE: Example Chart Repository Structure
DESCRIPTION: Illustrates the typical layout of a chart repository, including the index.yaml file and packaged chart files.

LANGUAGE: text
CODE:
charts/
  |
  |- index.yaml
  |
  |- alpine-0.1.2.tgz
  |
  |- alpine-0.1.2.tgz.prov

----------------------------------------

TITLE: Using a Named Template in a Helm Chart
DESCRIPTION: Shows how to use a defined template within a Kubernetes ConfigMap using the 'template' action.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  {{- template "mychart.labels" }}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}

----------------------------------------

TITLE: Creating a Basic Helm Chart Structure
DESCRIPTION: Shows the typical directory structure of a Helm chart, including the main directories and files.

LANGUAGE: text
CODE:
mychart/
  Chart.yaml
  values.yaml
  charts/
  templates/
  ...

----------------------------------------

TITLE: Listing Installed Helm Releases
DESCRIPTION: This command lists all the Helm releases that have been installed in the Kubernetes cluster, showing details such as name, namespace, revision, and status.

LANGUAGE: console
CODE:
$ helm list

----------------------------------------

TITLE: Configuring Helm File Locations Using Environment Variables
DESCRIPTION: Environment variables that can be used to customize where Helm stores its files using the XDG structure. These variables control the locations of cached files, configuration, and Helm data.

LANGUAGE: bash
CODE:
$XDG_CACHE_HOME
$XDG_CONFIG_HOME
$XDG_DATA_HOME

----------------------------------------

TITLE: Defining a Helm Plugin in YAML
DESCRIPTION: Example of a plugin.yaml file that defines a simple Helm plugin called 'last' to get the last release name.

LANGUAGE: yaml
CODE:
name: last
version: 0.1.0
usage: get the last release name
description: get the last release name
ignoreFlags: false
platformCommand:
  - command: ${HELM_BIN}
    args:
      - list
      - --short
      - --max=1
      - --date
      - -r

----------------------------------------

TITLE: Iterating Over Key-Value Pairs with Variables
DESCRIPTION: This example demonstrates how to use variables in a 'range' loop to iterate over key-value pairs in a Helm template.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}

----------------------------------------

TITLE: Defining Standard Labels in Helm Chart Templates
DESCRIPTION: This snippet demonstrates how to define recommended and optional standard labels in Helm chart templates. It includes labels for app name, chart version, managed-by, instance, app version, component, and part-of.

LANGUAGE: yaml
CODE:
app.kubernetes.io/name: {{ template "name" . }}
helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/version: {{ .Chart.AppVersion }}
app.kubernetes.io/component: frontend
app.kubernetes.io/part-of: top-level-app

----------------------------------------

TITLE: Executing Helm Search Repo Command in Bash
DESCRIPTION: This snippet shows the basic syntax for running the 'helm search repo' command. It allows searching for charts in configured repositories using keywords and various options.

LANGUAGE: bash
CODE:
helm search repo [keyword] [flags]

----------------------------------------

TITLE: Configuring Helm Options in Bash
DESCRIPTION: This snippet shows the available command-line options for configuring Helm. It includes options for setting API server details, authentication, namespace scoping, and various configuration file paths.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
  -h, --help                            help for helm
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Uninstalling a Helm Release
DESCRIPTION: This command uninstalls a Helm release, removing all associated resources from the Kubernetes cluster. The release name is specified as an argument.

LANGUAGE: console
CODE:
$ helm uninstall mysql-1612624192

----------------------------------------

TITLE: Accessing Root Context with $ Variable
DESCRIPTION: This snippet illustrates how to use the '$' variable to access the root context within nested scopes in a Helm template, particularly useful in range loops.

LANGUAGE: yaml
CODE:
{{- range .Values.tlsSecrets }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}
  labels:
    app.kubernetes.io/name: {{ template "fullname" $ }}
    helm.sh/chart: "{{ $.Chart.Name }}-{{ $.Chart.Version }}"
    app.kubernetes.io/instance: "{{ $.Release.Name }}"
    app.kubernetes.io/version: "{{ $.Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ $.Release.Service }}"
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate }}
  tls.key: {{ .key }}
{{- end }}

----------------------------------------

TITLE: Sample values.yaml File
DESCRIPTION: Example of a values.yaml file for configuring chart values

LANGUAGE: yaml
CODE:
imageRegistry: "quay.io/deis"
dockerTag: "latest"
pullPolicy: "Always"
storage: "s3"

----------------------------------------

TITLE: Hook Annotation Examples in Helm
DESCRIPTION: Examples of different hook annotations including multiple hooks per resource and hook weights.

LANGUAGE: yaml
CODE:
annotations:
  "helm.sh/hook": post-install

LANGUAGE: yaml
CODE:
annotations:
  "helm.sh/hook": post-install,post-upgrade

LANGUAGE: yaml
CODE:
annotations:
  "helm.sh/hook-weight": "5"

----------------------------------------

TITLE: Defining a Custom Resource Definition in YAML
DESCRIPTION: Example of a YAML file that declares a Custom Resource Definition. This snippet illustrates the basic structure of a CRD declaration.

LANGUAGE: yaml
CODE:
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: foos.example.com
spec:
  group: example.com
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: foos
    singular: foo
    kind: Foo

----------------------------------------

TITLE: Helm Chart Test Pod Definition in YAML
DESCRIPTION: Demonstrates a sample test pod definition in YAML format. This test checks the connection to the service created by the chart.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "demo.fullname" . }}-test-connection"
  labels:
    {{- include "demo.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['{{ include "demo.fullname" . }}:{{ .Values.service.port }}']
  restartPolicy: Never

----------------------------------------

TITLE: Defining Namespaced Template in Helm Chart
DESCRIPTION: Demonstrates the correct way to define a namespaced template in a Helm chart using the 'define' directive.

LANGUAGE: yaml
CODE:
{{- define "nginx.fullname" }}
{{/* ... */}}
{{ end -}}

----------------------------------------

TITLE: Installing Helm via Homebrew on macOS
DESCRIPTION: Installs Helm using the Homebrew package manager on macOS.

LANGUAGE: console
CODE:
brew install helm

----------------------------------------

TITLE: Installing Helm Chart with File Values
DESCRIPTION: Shows how to set values from a file during chart installation.

LANGUAGE: bash
CODE:
$ helm install --set-file my_script=dothings.sh myredis ./redis

----------------------------------------

TITLE: Helm Install Output with NOTES.txt
DESCRIPTION: Example output from running 'helm install' command showing how the NOTES.txt template is rendered along with resource creation information. Demonstrates the actual execution result with a specific release name.

LANGUAGE: bash
CODE:
RESOURCES:
==> v1/Secret
NAME                   TYPE      DATA      AGE
rude-cardinal-secret   Opaque    1         0s

==> v1/ConfigMap
NAME                      DATA      AGE
rude-cardinal-configmap   3         0s


NOTES:
Thank you for installing mychart.

Your release is named rude-cardinal.

To learn more about the release, try:

  $ helm status rude-cardinal
  $ helm get all rude-cardinal

----------------------------------------

TITLE: Using a Scoped Named Template in Helm
DESCRIPTION: Shows how to use a named template that requires a scope, passing the top-level scope to access chart information.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  {{- template "mychart.labels" . }}

----------------------------------------

TITLE: Utility Merge Function Template
DESCRIPTION: Helper template for merging YAML configurations, enabling customization of common templates.

LANGUAGE: yaml
CODE:
{{- define "mylibchart.util.merge" -}}
{{- $top := first . -}}
{{- $overrides := fromYaml (include (index . 1) $top) | default (dict ) -}}
{{- $tpl := fromYaml (include (index . 2) $top) | default (dict ) -}}
{{- toYaml (merge $overrides $tpl) -}}
{{- end -}}

----------------------------------------

TITLE: Installing Helm via Winget on Windows
DESCRIPTION: Installs Helm using the Winget package manager on Windows.

LANGUAGE: console
CODE:
winget install Helm.Helm

----------------------------------------

TITLE: Executing Helm Show Chart Command
DESCRIPTION: This command inspects a chart (directory, file, or URL) and displays the contents of the Chart.yaml file. It can be used with various options to customize the behavior.

LANGUAGE: bash
CODE:
helm show chart [CHART] [flags]

----------------------------------------

TITLE: Defining Chart Dependencies in Helm 2
DESCRIPTION: Example showing how to specify chart dependencies using requirements.yaml in Helm 2. Demonstrates defining a MariaDB dependency with version constraints, repository URL, conditions, and tags.

LANGUAGE: yaml
CODE:
dependencies:
- name: mariadb
  version: 5.x.x
  repository: https://kubernetes-charts.storage.googleapis.com/
  condition: mariadb.enabled
  tags:
    - database

----------------------------------------

TITLE: Assigning Variables in Helm Templates
DESCRIPTION: This snippet demonstrates how to assign and use variables in Helm templates to overcome scoping issues within 'with' blocks.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- $relname := .Release.Name -}}
  {{- with .Values.favorite }}
  drink: {{ .drink | default "tea" | quote }}
  food: {{ .food | upper | quote }}
  release: {{ $relname }}
  {{- end }}

----------------------------------------

TITLE: Declaring Dependencies in Chart.yaml for Helm
DESCRIPTION: Example of how to declare chart dependencies in a Chart.yaml file. It shows how to specify the name, version, and repository for each dependency. The repository can be a URL or a local file path.

LANGUAGE: yaml
CODE:
# Chart.yaml
dependencies:
- name: nginx
  version: "1.2.3"
  repository: "https://example.com/charts"
- name: memcached
  version: "3.2.1"
  repository: "https://another.example.com/charts"

LANGUAGE: yaml
CODE:
# Chart.yaml
dependencies:
- name: nginx
  version: "1.2.3"
  repository: "file://../dependency_chart/nginx"

----------------------------------------

TITLE: Basic If/Else Conditional Structure in Helm
DESCRIPTION: Shows the basic syntax for conditional blocks in Helm templates using if/else statements with pipeline evaluation.

LANGUAGE: yaml
CODE:
{{ if PIPELINE }}
  # Do something
{{ else if OTHER PIPELINE }}
  # Do something else
{{ else }}
  # Default case
{{ end }}

----------------------------------------

TITLE: Setting Conditional Dependencies in Helm
DESCRIPTION: Demonstrates how to make a dependency optional using conditions. The condition references the enabled property of the dependent chart.

LANGUAGE: yaml
CODE:
condition: somechart.enabled

----------------------------------------

TITLE: Creating a Basic ConfigMap Template
DESCRIPTION: Demonstrates how to create a simple ConfigMap template file in YAML format.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  myvalue: "Hello World"

----------------------------------------

TITLE: YAML String Representations
DESCRIPTION: Illustrates different ways to represent strings in YAML including bare words, quoted strings, and multi-line formats.

LANGUAGE: yaml
CODE:
way1: bare words
way2: "double-quoted strings"
way3: 'single-quoted strings'

LANGUAGE: yaml
CODE:
coffee: |
  Latte
  Cappuccino
  Espresso

----------------------------------------

TITLE: Helm Template Command Options
DESCRIPTION: A comprehensive list of available options for the 'helm template' command. These options allow users to customize the template rendering process, specify values, control output, and more.

LANGUAGE: bash
CODE:
  -a, --api-versions strings                       Kubernetes api versions used for Capabilities.APIVersions
      --atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used
      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string                           identify HTTPS client using this SSL certificate file
      --create-namespace                           create the release namespace if not present
      --dependency-update                          update dependencies if they are missing before installing the chart
      --description string                         add a custom description
      --devel                                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
      --disable-openapi-validation                 if set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
      --dry-run string[="client"]                  simulate an install. If --dry-run is set with no option being specified or as '--dry-run=client', it will not attempt cluster connections. Setting '--dry-run=server' allows attempting cluster connections.
      --enable-dns                                 enable DNS lookups when rendering templates
      --force                                      force resource updates through a replacement strategy
  -g, --generate-name                              generate the name (and omit the NAME parameter)
  -h, --help                                       help for template
      --hide-notes                                 if set, do not show notes in install output. Does not affect presence in chart metadata
      --include-crds                               include CRDs in the templated output
      --insecure-skip-tls-verify                   skip tls certificate checks for the chart download
      --is-upgrade                                 set .Release.IsUpgrade instead of .Release.IsInstall
      --key-file string                            identify HTTPS client using this SSL key file
      --keyring string                             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --kube-version string                        Kubernetes version used for Capabilities.KubeVersion
  -l, --labels stringToString                      Labels that would be added to release metadata. Should be divided by comma. (default [])
      --name-template string                       specify template used to name the release
      --no-hooks                                   prevent hooks from running during install
      --output-dir string                          writes the executed templates to files in output-dir instead of stdout
      --pass-credentials                           pass credentials to all domains
      --password string                            chart repository password where to locate the requested chart
      --plain-http                                 use insecure HTTP connections for the chart download
      --post-renderer postRendererString           the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path
      --post-renderer-args postRendererArgsSlice   an argument to the post-renderer (can specify multiple) (default [])
      --release-name                               use release name in the output-dir path.
      --render-subchart-notes                      if set, render subchart notes along with the parent
      --replace                                    re-use the given name, only if that name is a deleted release which remains in the history. This is unsafe in production
      --repo string                                chart repository url where to locate the requested chart
      --set stringArray                            set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --set-file stringArray                       set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --set-json stringArray                       set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)
      --set-literal stringArray                    set a literal STRING value on the command line
      --set-string stringArray                     set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
  -s, --show-only stringArray                      only show manifests rendered from the given templates
      --skip-crds                                  if set, no CRDs will be installed. By default, CRDs are installed if not already present
      --skip-schema-validation                     if set, disables JSON schema validation
      --skip-tests                                 skip tests from templated output
      --take-ownership                             if set, install will ignore the check for helm annotations and take ownership of the existing resources
      --timeout duration                           time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)
      --username string                            chart repository username where to locate the requested chart
      --validate                                   validate your manifests against the Kubernetes cluster you are currently pointing at. This is the same validation performed on an install
  -f, --values strings                             specify values in a YAML file or a URL (can specify multiple)
      --verify                                     verify the package before using it
      --version string                             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used
      --wait                                       if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout
      --wait-for-jobs                              if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout

----------------------------------------

TITLE: Conditional ConfigMap with Drink Settings
DESCRIPTION: Demonstrates practical use of conditionals in a Kubernetes ConfigMap template with drink preferences.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink | default "tea" | quote }}
  food: {{ .Values.favorite.food | upper | quote }}
  {{ if eq .Values.favorite.drink "coffee" }}mug: "true"{{ end }}

----------------------------------------

TITLE: Installing a Verified Helm Chart
DESCRIPTION: Demonstrates how to install a Helm chart while verifying its integrity and signature using the --verify flag.

LANGUAGE: console
CODE:
$ helm install --generate-name --verify mychart-0.1.0.tgz

----------------------------------------

TITLE: Nested vs Flat YAML Structure
DESCRIPTION: Shows comparison between nested and flat value structures in YAML, with flat being preferred for simplicity.

LANGUAGE: yaml
CODE:
server:
  name: nginx
  port: 80

LANGUAGE: yaml
CODE:
serverName: nginx
serverPort: 80

----------------------------------------

TITLE: Defining Library Chart ConfigMap Template
DESCRIPTION: YAML template defining a common ConfigMap with merge functionality for reuse across charts.

LANGUAGE: yaml
CODE:
{{- define "mylibchart.configmap.tpl" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name | printf "%s-%s" .Chart.Name }}
data: {}
{{- end -}}
{{- define "mylibchart.configmap" -}}
{{- include "mylibchart.util.merge" (append . "mylibchart.configmap.tpl") -}}
{{- end -}}

----------------------------------------

TITLE: Scope Control with With Statement
DESCRIPTION: Shows how to modify template scope using the with action to simplify variable access within a specific context.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- with .Values.favorite }}
  drink: {{ .drink | default "tea" | quote }}
  food: {{ .food | upper | quote }}
  {{- end }}

----------------------------------------

TITLE: Defining a Helper Template for ServiceAccount Name in Helm Charts
DESCRIPTION: Provides a Helm template helper function to determine the appropriate ServiceAccount name based on configuration values. This template handles cases where the ServiceAccount is created or uses an existing one.

LANGUAGE: yaml
CODE:
{{/*
Create the name of the service account to use
*/}}
{{- define "mychart.serviceAccountName" -}}
{{- if .Values.serviceAccount.create -}}
    {{ default (include "mychart.fullname" .) .Values.serviceAccount.name }}
{{- else -}}
    {{ default "default" .Values.serviceAccount.name }}
{{- end -}}
{{- end -}}

----------------------------------------

TITLE: Nested Value Template Check
DESCRIPTION: Demonstrates template syntax for checking nested values in Helm templates.

LANGUAGE: yaml
CODE:
{{ if .Values.server }}
  {{ default "none" .Values.server.name }}
{{ end }}

LANGUAGE: yaml
CODE:
{{ default "none" .Values.serverName }}

----------------------------------------

TITLE: Running Helm List Command
DESCRIPTION: The basic syntax for running the 'helm list' command. This command lists all releases in the current namespace or a specified namespace.

LANGUAGE: bash
CODE:
helm list [flags]

----------------------------------------

TITLE: ConfigMap Template with File Integration
DESCRIPTION: Helm template that creates a ConfigMap by reading and including the contents of multiple TOML files using the .Files object and range function.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  {{- $files := .Files }}
  {{- range tuple "config1.toml" "config2.toml" "config3.toml" }}
  {{ . }}: |-
    {{ $files.Get . }}
  {{- end }}

----------------------------------------

TITLE: Verifying a Helm Chart Signed by a Keybase User
DESCRIPTION: Shows how to verify a Helm chart that has been signed by another Keybase.io user by first following them and pulling their public keys.

LANGUAGE: console
CODE:
$ keybase follow technosophos
$ keybase pgp pull
$ helm verify somechart-1.2.3.tgz

----------------------------------------

TITLE: Quoting Values in Helm Templates
DESCRIPTION: Demonstrates how to use the quote function to properly format string values in a Helm template.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ quote .Values.favorite.drink }}
  food: {{ quote .Values.favorite.food }}

----------------------------------------

TITLE: Adding Authenticated Helm Repository
DESCRIPTION: Demonstrates how to add a Helm repository that requires HTTP basic authentication.

LANGUAGE: console
CODE:
$ helm repo add fantastic-charts https://fantastic-charts.storage.googleapis.com --username my-username --password my-password
$ helm repo list
fantastic-charts    https://fantastic-charts.storage.googleapis.com

----------------------------------------

TITLE: Basic Helm Get All Command
DESCRIPTION: The basic syntax for retrieving all information about a named Helm release. This command returns notes, hooks, supplied values, and the generated manifest file.

LANGUAGE: bash
CODE:
helm get all RELEASE_NAME [flags]

----------------------------------------

TITLE: Glob Pattern File Access
DESCRIPTION: Examples of using glob patterns to access multiple files matching specific patterns within the chart directory structure.

LANGUAGE: yaml
CODE:
{{ $currentScope := .}}
{{ range $path, $_ :=  .Files.Glob  "**.yaml" }}
    {{- with $currentScope}}
        {{ .Files.Get $path }}
    {{- end }}
{{ end }}

LANGUAGE: yaml
CODE:
{{ range $path, $_ :=  .Files.Glob  "**.yaml" }}
      {{ $.Files.Get $path }}
{{ end }}

----------------------------------------

TITLE: Defining Container Image in Helm Values
DESCRIPTION: Demonstrates how to define a container image using a value from the values.yaml file in a Helm chart.

LANGUAGE: yaml
CODE:
image: {{ .Values.redisImage | quote }}

----------------------------------------

TITLE: Combining Chart Name and Version in Helm Template
DESCRIPTION: Shows how to combine the chart name and version from the Chart object in a Helm template.

LANGUAGE: yaml
CODE:
{{ .Chart.Name }}-{{ .Chart.Version }}

----------------------------------------

TITLE: Hook Deletion Policy in Helm
DESCRIPTION: Example of hook deletion policy annotation configuration that determines when hook resources should be deleted.

LANGUAGE: yaml
CODE:
annotations:
  "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded

----------------------------------------

TITLE: Basic Helm Plugin List Command
DESCRIPTION: The basic command syntax for listing installed Helm plugins.

LANGUAGE: bash
CODE:
helm plugin list [flags]

----------------------------------------

TITLE: ConfigMap and Secret with Glob Patterns
DESCRIPTION: Template demonstrating how to create both ConfigMap and Secret resources using glob patterns to include multiple files.

LANGUAGE: yaml
CODE:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: conf
data:
{{ (.Files.Glob "foo/*").AsConfig | indent 2 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: very-secret
type: Opaque
data:
{{ (.Files.Glob "bar/*").AsSecrets | indent 2 }}

----------------------------------------

TITLE: Listing Helm Releases with Go SDK
DESCRIPTION: This snippet demonstrates how to perform a 'helm list' operation using the Helm Go SDK. It initializes the Helm configuration, creates a list client, and runs the list command to retrieve deployed releases.

LANGUAGE: go
CODE:
package main

import (
    "log"
    "os"

    "helm.sh/helm/v3/pkg/action"
    "helm.sh/helm/v3/pkg/cli"
)

func main() {
    settings := cli.New()

    actionConfig := new(action.Configuration)
    // You can pass an empty string instead of settings.Namespace() to list
    // all namespaces
    if err := actionConfig.Init(settings.RESTClientGetter(), settings.Namespace(), os.Getenv("HELM_DRIVER"), log.Printf); err != nil {
        log.Printf("%+v", err)
        os.Exit(1)
    }

    client := action.NewList(actionConfig)
    // Only list deployed
    client.Deployed = true
    results, err := client.Run()
    if err != nil {
        log.Printf("%+v", err)
        os.Exit(1)
    }

    for _, rel := range results {
        log.Printf("%+v", rel)
    }
}

----------------------------------------

TITLE: Helm Upgrade with Set Values
DESCRIPTION: Example demonstrating how to upgrade a release while setting values directly via command line. The last (right-most) value takes precedence.

LANGUAGE: bash
CODE:
helm upgrade --set foo=bar --set foo=newbar redis ./redis

----------------------------------------

TITLE: Creating Basic Helm NOTES.txt Template
DESCRIPTION: Example of a basic NOTES.txt template that displays the chart name, release name, and helpful commands for users to get more information about their release. The template uses standard Helm variables like .Chart.Name and .Release.Name.

LANGUAGE: yaml
CODE:
Thank you for installing {{ .Chart.Name }}.

Your release is named {{ .Release.Name }}.

To learn more about the release, try:

  $ helm status {{ .Release.Name }}
  $ helm get all {{ .Release.Name }}


----------------------------------------

TITLE: Executing Helm Dependency Build Command in Bash
DESCRIPTION: This command rebuilds the charts/ directory based on the Chart.lock file. It is used to reconstruct a chart's dependencies to the state specified in the lock file without re-negotiating dependencies.

LANGUAGE: bash
CODE:
helm dependency build CHART [flags]

----------------------------------------

TITLE: Base64 Encoded Secret
DESCRIPTION: Template showing how to create a Secret with base64 encoded file contents using the b64enc function.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secret
type: Opaque
data:
  token: |-
    {{ .Files.Get "config1.toml" | b64enc }}

----------------------------------------

TITLE: Using Post-Renderer with Helm Install Command
DESCRIPTION: Demonstrates how to use a post-renderer executable with the Helm install command. This allows for manual manipulation, configuration, or validation of rendered manifests before installation.

LANGUAGE: shell
CODE:
$ helm install mychart stable/wordpress --post-renderer ./path/to/executable

----------------------------------------

TITLE: Building Helm using Make
DESCRIPTION: Demonstrates how to build Helm using the Make command. This will install dependencies, validate configuration, compile Helm, and place the binary in the bin/helm directory.

LANGUAGE: console
CODE:
$ make

----------------------------------------

TITLE: Helm Get Metadata Command Options
DESCRIPTION: These are the specific options available for the 'helm get metadata' command. They include help, output format selection, and revision specification.

LANGUAGE: bash
CODE:
  -h, --help            help for metadata
  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)
      --revision int    specify release revision

----------------------------------------

TITLE: Executing Helm Dependency List Command in Bash
DESCRIPTION: This command lists all dependencies declared in a chart. It can take chart archives and chart directories as input without altering the contents of the chart. An error will be produced if the chart cannot be loaded.

LANGUAGE: bash
CODE:
helm dependency list CHART [flags]

----------------------------------------

TITLE: Line-by-Line File Processing
DESCRIPTION: Example of processing a file line by line using the Lines method in a template.

LANGUAGE: yaml
CODE:
data:
  some-file.txt: {{ range .Files.Lines "foo/bar.txt" }}
    {{ . }}{{ end }}

----------------------------------------

TITLE: Accessing Release Name in Helm Template
DESCRIPTION: Demonstrates how to access the release name within a Helm template using the Release object.

LANGUAGE: yaml
CODE:
{{ .Release.Name }}

----------------------------------------

TITLE: Default Liveness Probe Configuration
DESCRIPTION: Example of default values for a Kubernetes liveness probe configuration in Helm.

LANGUAGE: yaml
CODE:
livenessProbe:
  httpGet:
    path: /user/login
    port: http
  initialDelaySeconds: 120

----------------------------------------

TITLE: Helm Get Notes Command Options
DESCRIPTION: Specific options available for the get notes command

LANGUAGE: bash
CODE:
  -h, --help           help for notes
      --revision int   get the named release with revision

----------------------------------------

TITLE: Using Helm Repo Index Command in Bash
DESCRIPTION: This command generates an index file for a chart repository based on the packaged charts in the current directory. It can merge with existing index files and set absolute URLs for charts.

LANGUAGE: bash
CODE:
helm repo index [DIR] [flags]

----------------------------------------

TITLE: Debugging YAML Template in Helm
DESCRIPTION: Demonstrates how to debug template rendering issues by commenting out problematic sections. Shows both the template with commented section and the resulting rendered output after processing.

LANGUAGE: yaml
CODE:
apiVersion: v2
# some: problem section
# {{ .Values.foo | quote }}

LANGUAGE: yaml
CODE:
apiVersion: v2
# some: problem section
#  "bar"

----------------------------------------

TITLE: Accessing Subchart Values in Helm Template
DESCRIPTION: Illustrates how to access values from a subchart within a parent chart's template.

LANGUAGE: yaml
CODE:
.Subcharts.mySubChart.myValue

----------------------------------------

TITLE: Creating a Demo Helm Chart
DESCRIPTION: Shows how to create a demo Helm chart using the 'helm create' command, which automatically generates a folder structure including a test file.

LANGUAGE: console
CODE:
$ helm create demo

----------------------------------------

TITLE: Helm Plugin List Command Options
DESCRIPTION: Available command-specific options for the helm plugin list command.

LANGUAGE: bash
CODE:
  -h, --help   help for list

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Additional options inherited from parent commands, including Kubernetes API configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Defining Version Range in Helm Dependencies
DESCRIPTION: Demonstrates how to specify a patch-level version match for a dependency using tilde notation. This matches the specified version and any patches to that release.

LANGUAGE: yaml
CODE:
version: ~1.2.3

----------------------------------------

TITLE: Retrieving File Content in Helm Template
DESCRIPTION: Demonstrates how to retrieve the content of a file within a Helm chart using the Files object.

LANGUAGE: yaml
CODE:
.Files.Get config.ini

----------------------------------------

TITLE: YAML Anchors Example
DESCRIPTION: Shows how to use YAML anchors to create references to values that can be reused.

LANGUAGE: yaml
CODE:
coffee: "yes, please"
favorite: &favoriteCoffee "Cappuccino"
coffees:
  - Latte
  - *favoriteCoffee
  - Espresso

----------------------------------------

TITLE: Helm Show All Command Options
DESCRIPTION: Available command-line flags for customizing the helm show all command, including TLS configuration, repository authentication, and version constraints.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for all
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Signing a Helm Chart with Keybase Keys
DESCRIPTION: Demonstrates how to sign a Helm chart using Keybase.io credentials that have been imported into the local GnuPG keyring.

LANGUAGE: console
CODE:
$ helm package --sign --key technosophos --keyring ~/.gnupg/secring.gpg mychart

----------------------------------------

TITLE: Implementing Dependency Tags in Helm
DESCRIPTION: Shows how to group related dependencies using tags, allowing features requiring multiple dependencies to be enabled or disabled together.

LANGUAGE: yaml
CODE:
tags:
  - webaccelerator

----------------------------------------

TITLE: Checking API Version Availability in Helm Template
DESCRIPTION: Shows how to check if a specific Kubernetes API version is available in the cluster using the Capabilities object.

LANGUAGE: yaml
CODE:
Capabilities.APIVersions.Has $version

----------------------------------------

TITLE: Searching for Nginx Ingress Chart in Helm 3
DESCRIPTION: Shows how to search for the Nginx Ingress chart in the added repository using Helm 3.

LANGUAGE: bash
CODE:
$ helm search repo nginx-ingress
NAME                    CHART VERSION   APP VERSION     DESCRIPTION
nginx/nginx-ingress     0.3.7           1.5.7           NGINX Ingress Controller

----------------------------------------

TITLE: Helm Show Chart Command Options
DESCRIPTION: These are the available options for the 'helm show chart' command. They include various flags for authentication, verification, and specifying chart versions.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for chart
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Enabling OCI Support in Helm Prior to v3.8.0
DESCRIPTION: Sets the HELM_EXPERIMENTAL_OCI environment variable to enable OCI support in Helm versions before 3.8.0.

LANGUAGE: console
CODE:
export HELM_EXPERIMENTAL_OCI=1

----------------------------------------

TITLE: Sample Custom Resource Definition
DESCRIPTION: Example of a CRD file for defining a custom Kubernetes resource

LANGUAGE: yaml
CODE:
kind: CustomResourceDefinition
metadata:
  name: crontabs.stable.example.com
spec:
  group: stable.example.com
  versions:
    - name: v1
      served: true
      storage: true
  scope: Namespaced
  names:
    plural: crontabs
    singular: crontab
    kind: CronTab

----------------------------------------

TITLE: Using Helm Push Command in Bash
DESCRIPTION: The 'helm push' command is used to upload a chart to a registry. If the chart has an associated provenance file, it will also be uploaded. The command accepts a chart and remote destination as arguments, along with various optional flags.

LANGUAGE: bash
CODE:
helm push [chart] [remote] [flags]

----------------------------------------

TITLE: Declaring Library Chart Dependencies in Chart.yaml
DESCRIPTION: Example of declaring a library chart dependency in Chart.yaml for Helm 3.

LANGUAGE: yaml
CODE:
dependencies:
  - name: mylib
    version: 1.x.x
    repository: quay.io

----------------------------------------

TITLE: Helm Show CRDs Command Options
DESCRIPTION: Available command-line options for the helm show crds command, including TLS configuration, authentication, and chart repository settings.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for crds
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Granting Namespace Access in PostgreSQL for Helm Releases
DESCRIPTION: This SQL command creates a policy that grants read and write permissions for all releases in the 'default' namespace to a specific role. It uses PostgreSQL's Row Level Security (RLS) feature to manage access control.

LANGUAGE: sql
CODE:
CREATE POLICY <name> ON releases_v1 FOR ALL TO <role> USING (namespace = 'default');

----------------------------------------

TITLE: Creating Namespace-Scoped Access in Kubernetes
DESCRIPTION: Commands to create a namespace and grant a user edit permissions within that namespace using RoleBinding.

LANGUAGE: console
CODE:
$ kubectl create namespace foo

$ kubectl create rolebinding sam-edit \
    --clusterrole edit \
    --user sam \
    --namespace foo

----------------------------------------

TITLE: Defining and Documenting Helm Template Functions
DESCRIPTION: Illustrates how to define and document a custom Helm template function using template comments.

LANGUAGE: yaml
CODE:
{{- /*
mychart.shortname provides a 6 char truncated version of the release name.
*/}}
{{ define "mychart.shortname" -}}
{{ .Release.Name | trunc 6 }}
{{- end -}}

----------------------------------------

TITLE: Defining Chart Dependencies in Helm 2 requirements.yaml
DESCRIPTION: Example of defining chart dependencies in Helm 2 using requirements.yaml file.

LANGUAGE: yaml
CODE:
dependencies:
- name: mariadb
  version: 5.x.x
  repository: https://charts.helm.sh/stable
  condition: mariadb.enabled
  tags:
    - database

----------------------------------------

TITLE: Helm Show Readme Command Options in Bash
DESCRIPTION: Lists the available options for the 'helm show readme' command, including flags for certificate verification, HTTPS client identification, version constraints, and more.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for readme
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Defining Custom Secret Reader ClusterRole
DESCRIPTION: YAML configuration for creating a custom ClusterRole that allows reading secrets, which is necessary for Helm operations.

LANGUAGE: yaml
CODE:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]

----------------------------------------

TITLE: Granting Cluster-wide Access in Kubernetes
DESCRIPTION: Commands to create ClusterRoleBindings for providing view and secret-reader access to a user across all namespaces.

LANGUAGE: console
CODE:
$ kubectl create clusterrolebinding sam-view \
    --clusterrole view \
    --user sam

$ kubectl create clusterrolebinding sam-secret-reader \
    --clusterrole secret-reader \
    --user sam

----------------------------------------

TITLE: Using YAML Comments in Helm Templates
DESCRIPTION: Demonstrates the use of YAML comments within Helm templates for user-visible debugging information.

LANGUAGE: yaml
CODE:
# This may cause problems if the value is more than 100Gi
memory: {{ .Values.maxMem | quote }}

----------------------------------------

TITLE: Upgrading Nginx Image in Helm Chart YAML
DESCRIPTION: Example of a Helm chart manifest upgrading the nginx image tag to 2.1.0.

LANGUAGE: yaml
CODE:
containers:
- name: server
  image: nginx:2.1.0

----------------------------------------

TITLE: Packaging and Indexing Helm Charts
DESCRIPTION: Demonstrates how to package a Helm chart, create a directory for the repository, and generate an index file using the helm CLI.

LANGUAGE: console
CODE:
$ helm package docs/examples/alpine/
$ mkdir fantastic-charts
$ mv alpine-0.1.0.tgz fantastic-charts/
$ helm repo index fantastic-charts --url https://fantastic-charts.storage.googleapis.com

----------------------------------------

TITLE: Configuring Downloader Plugins in YAML
DESCRIPTION: Example of how to declare a downloader plugin in the plugin.yaml file to enable Helm to download charts from arbitrary sources.

LANGUAGE: yaml
CODE:
downloaders:
- command: "bin/mydownloader"
  protocols:
  - "myprotocol"
  - "myprotocols"

----------------------------------------

TITLE: Correct Use of Comments with Required Function in Helm
DESCRIPTION: Shows the correct way to comment a block containing a required function in a Helm template to avoid rendering errors.

LANGUAGE: yaml
CODE:
{{- /*
# This may cause problems if the value is more than 100Gi
memory: {{ required "maxMem must be set" .Values.maxMem | quote }}
*/ -}}

----------------------------------------

TITLE: Extending ServiceAccount Configuration for Multiple Components in Helm Charts
DESCRIPTION: Shows how to extend the YAML structure to accommodate multiple ServiceAccounts for more complex Helm charts with multiple components.

LANGUAGE: yaml
CODE:
someComponent:
  serviceAccount:
    create: true
    name:
anotherComponent:
  serviceAccount:
    create: true
    name:

----------------------------------------

TITLE: Helm Registry Login Command Options
DESCRIPTION: Available flags specific to the login command, including SSL certificate configuration, authentication credentials, and security options.

LANGUAGE: bash
CODE:
      --ca-file string     verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string   identify registry client using this SSL certificate file
  -h, --help               help for login
      --insecure           allow connections to TLS registry without certs
      --key-file string    identify registry client using this SSL key file
  -p, --password string    registry password or identity token
      --password-stdin     read password or identity token from stdin
  -u, --username string    registry username

----------------------------------------

TITLE: Running Helm Test Suite on a Release
DESCRIPTION: Demonstrates how to install a chart and run its test suite using Helm commands. This example installs the 'demo' chart and then runs the test suite on the resulting release.

LANGUAGE: console
CODE:
$ helm install demo demo --namespace default
$ helm test demo
NAME: demo
LAST DEPLOYED: Mon Feb 14 20:03:16 2022
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE:     demo-test-connection
Last Started:   Mon Feb 14 20:35:19 2022
Last Completed: Mon Feb 14 20:35:23 2022
Phase:          Succeeded
[...]

----------------------------------------

TITLE: Logging out from a Helm Registry
DESCRIPTION: Shows how to log out from a Helm registry using the helm registry logout command.

LANGUAGE: console
CODE:
$ helm registry logout localhost:5000
Logout succeeded

----------------------------------------

TITLE: Defining Container Image and Tag Separately in Helm Values
DESCRIPTION: Shows how to define a container image and its tag as two separate fields in the values.yaml file of a Helm chart.

LANGUAGE: yaml
CODE:
image: "{{ .Values.redisImage }}:{{ .Values.redisTag }}"

----------------------------------------

TITLE: Defining Deployment Replicas in Helm Chart YAML
DESCRIPTION: Example of a Helm chart manifest defining a Deployment object with 3 replicas.

LANGUAGE: yaml
CODE:
containers:
- name: server
  image: nginx:2.0.0

----------------------------------------

TITLE: Installing Charts with Helm SDK - Go
DESCRIPTION: Demonstrates how to install a Helm chart using the SDK, specifying the chart, version, and values.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/install.go" >}}

----------------------------------------

TITLE: Helm Environment Command Options
DESCRIPTION: Basic command options for the helm env command

LANGUAGE: bash
CODE:
  -h, --help   help for env

----------------------------------------

TITLE: Helm Chart Manifest in OCI Registry
DESCRIPTION: Displays an example of a Helm chart manifest as represented in an OCI registry.

LANGUAGE: json
CODE:
{
  "schemaVersion": 2,
  "config": {
    "mediaType": "application/vnd.cncf.helm.config.v1+json",
    "digest": "sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111",
    "size": 117
  },
  "layers": [
    {
      "mediaType": "application/vnd.cncf.helm.chart.content.v1.tar+gzip",
      "digest": "sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617",
      "size": 2487
    }
  ]
}

----------------------------------------

TITLE: Declaring Selectors in PodTemplates for Helm Charts
DESCRIPTION: Illustrates the recommended way to declare selectors in PodTemplate sections of Helm chart manifests, ensuring proper pod matching.

LANGUAGE: yaml
CODE:
selector:
  matchLabels:
      app.kubernetes.io/name: MyName
template:
  metadata:
    labels:
      app.kubernetes.io/name: MyName

----------------------------------------

TITLE: Incorrect Use of Comments with Required Function in Helm
DESCRIPTION: Illustrates an incorrect way of commenting a line with a required function in a Helm template, which would cause rendering errors.

LANGUAGE: yaml
CODE:
# This may cause problems if the value is more than 100Gi
# memory: {{ required .Values.maxMem "maxMem must be set" | quote }}

----------------------------------------

TITLE: Loading PowerShell Completions
DESCRIPTION: Command to load Helm completions in the current PowerShell session.

LANGUAGE: powershell
CODE:
PS C:\> helm completion powershell | Out-String | Invoke-Expression

----------------------------------------

TITLE: Retrieving Chart Metadata with Helm CLI
DESCRIPTION: Demonstrates the new 'helm get metadata' command functionality by retrieving metadata information for a WordPress installation. Shows various metadata fields including chart name, version, namespace, and deployment timestamp.

LANGUAGE: shell
CODE:
$ helm get metadata wp
NAME: wp
CHART: wordpress
VERSION: 17.1.13
APP_VERSION: 6.3.1
NAMESPACE: default
REVISION: 1
STATUS: deployed
DEPLOYED_AT: 2023-09-28T16:28:30-04:00

----------------------------------------

TITLE: Using the Include Function for Proper Indentation in Helm
DESCRIPTION: Demonstrates the use of the 'include' function instead of 'template' to allow for proper indentation of the included template content.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  labels:
{{ include "mychart.app" . | indent 4 }}
data:
  myvalue: "Hello World"
  {{- range $key, $val := .Values.favorite }}
  {{ $key }}: {{ $val | quote }}
  {{- end }}
{{ include "mychart.app" . | indent 2 }}

----------------------------------------

TITLE: Basic Helm Repo Add Command Syntax
DESCRIPTION: Basic command syntax for adding a new chart repository to Helm. Requires a name and URL for the repository.

LANGUAGE: bash
CODE:
helm repo add [NAME] [URL] [flags]

----------------------------------------

TITLE: Inherited Options for Helm Push Command in Bash
DESCRIPTION: This snippet shows the options inherited from parent commands when using 'helm push'. These options provide additional configuration for Kubernetes API interaction, authentication, and Helm-specific settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Zsh Completion Command Syntax
DESCRIPTION: Basic command syntax for generating Zsh autocompletion script with optional flags.

LANGUAGE: bash
CODE:
helm completion zsh [flags]

----------------------------------------

TITLE: Pushing Helm Charts Using Helm SDK - Go Example
DESCRIPTION: Shows how to programmatically push a Helm chart to an OCI registry using the Helm SDK in Go. Demonstrates client initialization, file reading, and push operations with error handling.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"io/ioutil"

	"helm.sh/helm/v3/pkg/registry"
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	client, err := registry.NewClient()
	check(err)

	b, err := ioutil.ReadFile("demo-0.1.0.tgz")
	check(err)

	info, err := client.Push(b, "r.example.com/myuser/demo:0.1.0")
	check(err)

	fmt.Printf("Pushed: %s\n", info.Ref)
	fmt.Printf("Digest: %s\n", info.Manifest.Digest)
}

----------------------------------------

TITLE: Using Variables in Range Loops for Lists
DESCRIPTION: This snippet shows how to use variables in 'range' loops to capture both index and value from list-like objects in Helm templates.

LANGUAGE: yaml
CODE:
  toppings: |-
    {{- range $index, $topping := .Values.pizzaToppings }}
      {{ $index }}: {{ $topping }}
    {{- end }}

----------------------------------------

TITLE: Generating Helm Autocompletion Script for Bash
DESCRIPTION: This command generates the autocompletion script for Helm in the bash shell. It can be used to load completions for the current session or set up permanent autocompletion.

LANGUAGE: bash
CODE:
helm completion bash [flags]

----------------------------------------

TITLE: Helm Verify Command Options
DESCRIPTION: Available command-specific options for the helm verify command.

LANGUAGE: shell
CODE:
  -h, --help             help for verify
      --keyring string   keyring containing public keys (default "~/.gnupg/pubring.gpg")

----------------------------------------

TITLE: Helm Get Hooks Command Options in Bash
DESCRIPTION: These are the specific options available for the 'helm get hooks' command. They include help and revision options.

LANGUAGE: bash
CODE:
  -h, --help           help for hooks
      --revision int   get the named release with revision

----------------------------------------

TITLE: Creating a New Helm Chart
DESCRIPTION: Demonstrates how to create a new Helm chart using the 'helm create' command.

LANGUAGE: bash
CODE:
$ helm create diy
Creating diy

----------------------------------------

TITLE: YAML Frontmatter for Helm Architecture Documentation
DESCRIPTION: This YAML frontmatter defines metadata for the Helm architecture documentation page, including title, description, aliases, and weight for sorting.

LANGUAGE: yaml
CODE:
---
title: "Helm Architecture"
description: "Describes the Helm architecture at a high level."
aliases: ["/docs/architecture/"]
weight: 8
---

----------------------------------------

TITLE: Helm Create Command Options
DESCRIPTION: Available command-line options specific to the helm create command, including help flag and starter scaffold specification.

LANGUAGE: bash
CODE:
  -h, --help             help for create
  -p, --starter string   the name or absolute path to Helm starter scaffold

----------------------------------------

TITLE: Helm Package Command Options
DESCRIPTION: Available command-line options for the helm package command, including version control, signing, and destination settings.

LANGUAGE: bash
CODE:
      --app-version string         set the appVersion on the chart to this version
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
  -u, --dependency-update          update dependencies from "Chart.yaml" to dir "charts/" before packaging
  -d, --destination string         location to write the chart. (default ".")
  -h, --help                       help for package
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key string                 name of the key to use when signing. Used if --sign is true
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of a public keyring (default "~/.gnupg/pubring.gpg")
      --passphrase-file string     location of a file which contains the passphrase for the signing key. Use "-" in order to read from stdin.
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --sign                       use a PGP private key to sign this package
      --username string            chart repository username where to locate the requested chart
      --version string             set the version on the chart to this semver version

----------------------------------------

TITLE: Displaying Inherited Options for Helm Registry Command
DESCRIPTION: This snippet lists the options inherited from parent commands for the 'helm registry' command. It includes various configuration options for Kubernetes API server, authentication, and Helm-specific settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Installing helm-2to3 Plugin for Helm v3
DESCRIPTION: Commands to install the helm-2to3 plugin and verify its installation.

LANGUAGE: bash
CODE:
$ helm3 plugin install https://github.com/helm/helm-2to3
Downloading and installing helm-2to3 v0.2.0 ...
https://github.com/helm/helm-2to3/releases/download/v0.2.0/helm-2to3_0.2.0_darwin_amd64.tar.gz
Installed plugin: 2to3

LANGUAGE: bash
CODE:
$ helm3 plugin list
NAME  	VERSION	DESCRIPTION
2to3  	0.2.0  	migrate and cleanup Helm v2 configuration and releases in-place to Helm v3

LANGUAGE: bash
CODE:
$ helm3 2to3
Migrate and Cleanup Helm v2 configuration and releases in-place to Helm v3

Usage:
  2to3 [command]

Available Commands:
  cleanup     cleanup Helm v2 configuration, release data and Tiller deployment
  convert     migrate Helm v2 release in-place to Helm v3
  help        Help about any command
  move        migrate Helm v2 configuration in-place to Helm v3

Flags:
  -h, --help   help for 2to3

Use "2to3 [command] --help" for more information about a command.

----------------------------------------

TITLE: Defining Deprecated Deployment API Version in Kubernetes YAML
DESCRIPTION: This snippet shows an example of a deprecated Deployment API version (apps/v1beta1) that was removed in Kubernetes 1.16. Chart maintainers and users should update such definitions to use supported API versions.

LANGUAGE: yaml
CODE:
apiVersion: apps/v1beta1
kind: Deployment

----------------------------------------

TITLE: Helm Create Inherited Options
DESCRIPTION: Global command options inherited from parent commands, including Kubernetes cluster configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Options for Helm Template Command
DESCRIPTION: Additional options inherited from parent commands that can be used with the 'helm template' command. These options provide global configuration for Helm and Kubernetes interactions.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Repository Removal Command Syntax
DESCRIPTION: Basic command syntax for removing Helm repositories. Allows specifying one or more repository names to remove.

LANGUAGE: bash
CODE:
helm repo remove [REPO1 [REPO2 ...]] [flags]

----------------------------------------

TITLE: Declaring Library Chart Dependencies in Chart.yaml
DESCRIPTION: This YAML snippet demonstrates how to declare a library chart dependency in the Chart.yaml file of a Helm chart. It specifies the library chart name, version constraint, and repository.

LANGUAGE: yaml
CODE:
dependencies:
  - name: mylib
    version: 1.x.x
    repository: quay.io

----------------------------------------

TITLE: Application Chart ConfigMap Implementation
DESCRIPTION: Example of using the library chart to create a customized ConfigMap in an application chart.

LANGUAGE: yaml
CODE:
{{- include "mylibchart.configmap" (list . "mychart.configmap") -}}
{{- define "mychart.configmap" -}}
data:
  myvalue: "Hello World"
{{- end -}}

----------------------------------------

TITLE: Helm Completion Basic Options
DESCRIPTION: Basic command line options for the helm completion command. Shows the help flag option.

LANGUAGE: bash
CODE:
  -h, --help   help for completion

----------------------------------------

TITLE: Running Helm Test Command
DESCRIPTION: This command runs tests for a specified Helm release. The tests are defined in the chart that was installed. It takes the name of a deployed release as an argument.

LANGUAGE: bash
CODE:
helm test [RELEASE] [flags]

----------------------------------------

TITLE: Executing Helm Show Values Command
DESCRIPTION: Basic command syntax for showing a chart's values.yaml contents. Can be used with a chart directory, file, or URL as the input.

LANGUAGE: bash
CODE:
helm show values [CHART] [flags]

----------------------------------------

TITLE: Defining Chart Dependencies in Helm 3
DESCRIPTION: Example showing how to specify chart dependencies directly in Chart.yaml for Helm 3. Uses the same dependency specification format but moves it from requirements.yaml to Chart.yaml.

LANGUAGE: yaml
CODE:
dependencies:
- name: mariadb
  version: 5.x.x
  repository: https://kubernetes-charts.storage.googleapis.com/
  condition: mariadb.enabled
  tags:
    - database

----------------------------------------

TITLE: Common Helper Chart Implementation
DESCRIPTION: Examples of using the Common Helm Helper Chart for deployment and service resources.

LANGUAGE: yaml
CODE:
{{- template "common.deployment" (list . "demo.deployment") -}}
{{- define "demo.deployment" -}}
apiVersion: apps/v1
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "demo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "demo.selectorLabels" . | nindent 8 }}
{{- end -}}

LANGUAGE: yaml
CODE:
{{- template "common.service" (list . "demo.service") -}}
{{- define "demo.service" -}}
{{- end -}}

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: This snippet shows the options inherited from parent commands, which can be used with 'helm history'. These include various Kubernetes API server configurations, authentication options, and Helm-specific settings.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Status Command Options
DESCRIPTION: These are the specific options available for the 'helm status' command. They allow customization of the output format, specifying a revision, and showing additional details like description and resources.

LANGUAGE: bash
CODE:
  -h, --help             help for status
  -o, --output format    prints the output in the specified format. Allowed values: table, json, yaml (default table)
      --revision int     if set, display the status of the named release with revision
      --show-desc        if set, display the description message of the named release
      --show-resources   if set, display the resources of the named release

----------------------------------------

TITLE: Defining Helm v3 Project Configuration in YAML
DESCRIPTION: This YAML snippet defines the configuration for the Helm v3 project. It specifies the project URL, name, GitHub repository URL, and the development branch for version 3.

LANGUAGE: yaml
CODE:
---
url: "helm/v3"
name: "helm/v3"
repoURL: "https://github.com/helm/helm"
branch: "dev-v3"
---

----------------------------------------

TITLE: Testing a Local Helm Plugin
DESCRIPTION: Commands to find the HELM_PLUGINS path and create a symbolic link to test a local plugin.

LANGUAGE: bash
CODE:
helm env

ln -s ~/GitHub/helm-mapkubeapis ./helm-mapkubeapis

----------------------------------------

TITLE: Helm Version Command Options
DESCRIPTION: Available flags specific to the version command including help, short output, and template formatting options.

LANGUAGE: bash
CODE:
  -h, --help              help for version
      --short             print the version number
      --template string   template for version string format

----------------------------------------

TITLE: Inherited Global Options for Helm Commands
DESCRIPTION: Global configuration options inherited from parent commands, including Kubernetes cluster settings, authentication, and Helm repository configurations.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Test Command-Specific Options
DESCRIPTION: These are the options specific to the 'helm test' command. They include filters for specifying tests, hiding notes, showing logs, and setting a timeout for Kubernetes operations.

LANGUAGE: bash
CODE:
      --filter strings     specify tests by attribute (currently "name") using attribute=value syntax or '!attribute=value' to exclude a test (can specify multiple or separate values with commas: name=test1,name=test2)
  -h, --help               help for test
      --hide-notes         if set, do not show notes in test output. Does not affect presence in chart metadata
      --logs               dump the logs from test pods (this runs after all tests are complete, but before any cleanup)
      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)

----------------------------------------

TITLE: Configuring ChartMuseum Repository Source in YAML
DESCRIPTION: Basic YAML configuration that specifies the name, repository URL, and branch for the ChartMuseum Helm repository server.

LANGUAGE: yaml
CODE:
name: "chartmuseum"
repoURL: "https://github.com/helm/chartmuseum"
branch: "main"

----------------------------------------

TITLE: Configuring SQL Storage Backend for Helm
DESCRIPTION: Demonstrates how to set environment variables to enable and configure the beta SQL storage backend for Helm, using PostgreSQL as an example.

LANGUAGE: shell
CODE:
export HELM_DRIVER=sql
export HELM_DRIVER_SQL_CONNECTION_STRING=postgresql://helm-postgres:5432/helm?user=helm&password=changeme

----------------------------------------

TITLE: Helm Get Hooks Inherited Options in Bash
DESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Completion Inherited Options
DESCRIPTION: Inherited command line options from parent commands including Kubernetes configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Basic Helm Version Command
DESCRIPTION: Basic command syntax for displaying Helm version information.

LANGUAGE: bash
CODE:
helm version [flags]

----------------------------------------

TITLE: Listing Helm Releases - Go
DESCRIPTION: Shows how to list all released Helm charts in the configured namespace using the SDK.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/list.go" >}}

----------------------------------------

TITLE: Sample Schema File
DESCRIPTION: Example of a JSON Schema file for validating chart values

LANGUAGE: json
CODE:
{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "properties": {
    "image": {
      "description": "Container Image",
      "properties": {
        "repo": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "name": {
      "description": "Service name",
      "type": "string"
    },
    "port": {
      "description": "Port",
      "minimum": 0,
      "type": "integer"
    },
    "protocol": {
      "type": "string"
    }
  },
  "required": [
    "protocol",
    "port"
  ],
  "title": "Values",
  "type": "object"
}

----------------------------------------

TITLE: Basic Helm Environment Command
DESCRIPTION: Command syntax for displaying Helm environment information

LANGUAGE: bash
CODE:
helm env [flags]

----------------------------------------

TITLE: Inherited Options for Helm Uninstall Command in Bash
DESCRIPTION: This snippet shows the options inherited from parent commands. These options provide additional configuration for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Defining Static Auto-completion for a Helm Plugin
DESCRIPTION: Example of a completion.yaml file for the fullstatus plugin to provide static shell auto-completion for flags.

LANGUAGE: yaml
CODE:
name: fullstatus
flags:
- o
- output
- revision

----------------------------------------

TITLE: Pulling OCI Charts with Helm SDK - Go
DESCRIPTION: Demonstrates pulling a Helm chart from an OCI repository using the SDK.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/pull.go" >}}

----------------------------------------

TITLE: Basic Values File Definition in YAML
DESCRIPTION: Simple example of defining a single value in values.yaml file for Helm chart configuration.

LANGUAGE: yaml
CODE:
favoriteDrink: coffee

----------------------------------------

TITLE: Helm Push Command Options in Bash
DESCRIPTION: This snippet lists the specific options available for the 'helm push' command. These options allow users to configure SSL certificates, authentication, and connection security settings for the chart upload process.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify registry client using this SSL certificate file
  -h, --help                       help for push
      --insecure-skip-tls-verify   skip tls certificate checks for the chart upload
      --key-file string            identify registry client using this SSL key file
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart upload
      --username string            chart repository username where to locate the requested chart

----------------------------------------

TITLE: Inherited Options for Helm Dependency Build Command in Bash
DESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Updating Helm Stable Repository
DESCRIPTION: Commands to update the deprecated stable repository to the new archive location at charts.helm.sh

LANGUAGE: console
CODE:
$ helm repo add stable https://charts.helm.sh/stable --force-update

----------------------------------------

TITLE: Executing Helm Dependency Update Command
DESCRIPTION: Basic command syntax for updating Helm chart dependencies. This command updates the on-disk dependencies to mirror Chart.yaml specifications.

LANGUAGE: bash
CODE:
helm dependency update CHART [flags]

----------------------------------------

TITLE: Structured Values Definition
DESCRIPTION: Example of nested values structure in values.yaml showing hierarchical configuration.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza

----------------------------------------

TITLE: Helm Global Command Options
DESCRIPTION: These are the global options inherited from parent commands. They provide various configuration settings for Helm and Kubernetes interactions.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Global options inherited from parent commands, including Kubernetes configuration, authentication, and rate limiting settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Updating Helm Incubator Repository
DESCRIPTION: Commands to update the deprecated incubator repository to the new archive location at charts.helm.sh

LANGUAGE: console
CODE:
$ helm repo add incubator https://charts.helm.sh/incubator --force-update

----------------------------------------

TITLE: Helm Dependency Update Command Options
DESCRIPTION: Available flags specific to the dependency update command, including security certificates, authentication, and verification options.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
  -h, --help                       help for update
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             keyring containing public keys (default "~/.gnupg/pubring.gpg")
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --skip-refresh               do not refresh the local repository cache
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the packages against signatures

----------------------------------------

TITLE: Defining Values for Subchart in Helm
DESCRIPTION: YAML configuration to set a simple value 'dessert' for the subchart in its values.yaml file.

LANGUAGE: yaml
CODE:
dessert: cake

----------------------------------------

TITLE: Helm Plugin Install Command Options
DESCRIPTION: Lists the specific options available for the 'helm plugin install' command. It includes help for the command and the ability to specify a version constraint for the plugin installation.

LANGUAGE: bash
CODE:
  -h, --help             help for install
      --version string   specify a version constraint. If this is not specified, the latest version is installed

----------------------------------------

TITLE: Helm Plugin Uninstall Inherited Options
DESCRIPTION: Comprehensive list of global options inherited from parent commands, including Kubernetes configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Repository List Inherited Options
DESCRIPTION: Global options inherited from parent commands including Kubernetes cluster configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Dependency Command Options
DESCRIPTION: Lists the available options for the 'helm dependency' command, including help option and inherited options from parent commands.

LANGUAGE: bash
CODE:
  -h, --help   help for dependency

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Setting Global Values in Helm Chart
DESCRIPTION: YAML configuration to set a global value 'salad' accessible by all charts and subcharts.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

global:
  salad: caesar

----------------------------------------

TITLE: Installing Helm Plugin from URL or Local Path
DESCRIPTION: This command allows you to install a Helm plugin from a URL to a VCS repo or a local path. It supports specifying a version constraint and inherits various options from parent commands for Kubernetes API interaction and Helm configuration.

LANGUAGE: bash
CODE:
helm plugin install [options] <path|url> [flags]

----------------------------------------

TITLE: Inherited Options for Helm Show Readme Command in Bash
DESCRIPTION: Lists the options inherited from parent commands, including flags for Kubernetes API server configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Repository Remove Inherited Options
DESCRIPTION: Global options inherited from parent commands that can be used with the repo remove command. Includes various Kubernetes and Helm configuration options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Get Command Basic Options
DESCRIPTION: Basic command-line options for the 'helm get' command

LANGUAGE: bash
CODE:
  -h, --help   help for get

----------------------------------------

TITLE: Setting Global Values in Helm Chart
DESCRIPTION: YAML configuration to set global values accessible by all charts and subcharts.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

global:
  salad: caesar

----------------------------------------

TITLE: Setting Global Values in Helm Chart
DESCRIPTION: YAML configuration to set global values accessible by all charts and subcharts.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

global:
  salad: caesar

----------------------------------------

TITLE: Helm List Command Options
DESCRIPTION: Available options for the 'helm list' command, including flags for filtering, sorting, and formatting the output of listed releases.

LANGUAGE: bash
CODE:
  -a, --all                  show all releases without any filter applied
  -A, --all-namespaces       list releases across all namespaces
  -d, --date                 sort by release date
      --deployed             show deployed releases. If no other is specified, this will be automatically enabled
      --failed               show failed releases
  -f, --filter string        a regular expression (Perl compatible). Any releases that match the expression will be included in the results
  -h, --help                 help for list
  -m, --max int              maximum number of releases to fetch (default 256)
      --no-headers           don't print headers when using the default output format
      --offset int           next release index in the list, used to offset from start value
  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)
      --pending              show pending releases
  -r, --reverse              reverse the sort order
  -l, --selector string      Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2). Works only for secret(default) and configmap storage backends.
  -q, --short                output short (quiet) listing format
      --superseded           show superseded releases
      --time-format string   format time using golang time formatter. Example: --time-format "2006-01-02 15:04:05Z0700"
      --uninstalled          show uninstalled releases (if 'helm uninstall --keep-history' was used)
      --uninstalling         show releases that are currently being uninstalled

----------------------------------------

TITLE: Inherited Options for Helm Search Repo Command in Bash
DESCRIPTION: This snippet shows the options inherited from parent commands for the 'helm search repo' command. These options provide additional configuration for Kubernetes API interaction and Helm repository management.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Using a Custom Resource in YAML
DESCRIPTION: Example of a YAML resource that uses a previously defined Custom Resource Definition. This snippet shows how to create an instance of a custom resource.

LANGUAGE: yaml
CODE:
apiVersion: example.com/v1
kind: Foo
metadata:
  name: my-foo
spec:
  # Custom resource fields go here

----------------------------------------

TITLE: Helm Get Inherited Options
DESCRIPTION: Global options inherited from parent commands that can be used with 'helm get', including Kubernetes cluster configuration and authentication options

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: CircleCI Configuration for Chart Testing
DESCRIPTION: CircleCI configuration file showing how to integrate chart testing into CI pipeline using the chart-testing Docker image

LANGUAGE: yaml
CODE:
version: 2
jobs:
  lint-charts:
    docker:
      - image: quay.io/helmpack/chart-testing:v1.1.0
    steps:
      - checkout
      - run:
          name: lint
          command: |
            chart_test.sh --config .testenv --no-install
workflows:
  version: 2
  lint:
    jobs:
      - lint-charts

----------------------------------------

TITLE: Basic Helm Repository List Command
DESCRIPTION: The basic command syntax for listing Helm chart repositories. Shows all configured repositories in the default table format.

LANGUAGE: bash
CODE:
helm repo list [flags]

----------------------------------------

TITLE: Inherited Options for Helm Show CRDs Command
DESCRIPTION: This snippet lists the options inherited from the parent command. These options provide additional configuration for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the file containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Incorrect Template Definition in Helm Chart
DESCRIPTION: Shows an incorrect way of defining a template without proper namespacing, which should be avoided.

LANGUAGE: yaml
CODE:
{{- define "fullname" -}}
{{/* ... */}}
{{ end -}}

----------------------------------------

TITLE: Executing Helm Get Manifest Command in Bash
DESCRIPTION: This command fetches the generated manifest for a given release. The manifest is a YAML-encoded representation of the Kubernetes resources generated from the release's chart(s), including resources from dependent charts.

LANGUAGE: bash
CODE:
helm get manifest RELEASE_NAME [flags]

----------------------------------------

TITLE: Installing Nginx Ingress Chart with Helm 3
DESCRIPTION: Demonstrates how to install the Nginx Ingress chart using Helm 3's install command.

LANGUAGE: bash
CODE:
$ helm install my-ingress-controller nginx/nginx-ingress

----------------------------------------

TITLE: Helm Rollback Command Options in Bash
DESCRIPTION: This snippet lists the available options for the 'helm rollback' command. These options allow for customization of the rollback process, including cleanup behavior, dry-run simulation, force updates, and setting timeouts.

LANGUAGE: bash
CODE:
      --cleanup-on-fail    allow deletion of new resources created in this rollback when rollback fails
      --dry-run            simulate a rollback
      --force              force resource update through delete/recreate if needed
  -h, --help               help for rollback
      --history-max int    limit the maximum number of revisions saved per release. Use 0 for no limit (default 10)
      --no-hooks           prevent hooks from running during rollback
      --recreate-pods      performs pods restart for the resource if applicable
      --timeout duration   time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)
      --wait               if set, will wait until all Pods, PVCs, Services, and minimum number of Pods of a Deployment, StatefulSet, or ReplicaSet are in a ready state before marking the release as successful. It will wait for as long as --timeout
      --wait-for-jobs      if set and --wait enabled, will wait until all Jobs have been completed before marking the release as successful. It will wait for as long as --timeout

----------------------------------------

TITLE: Adding Nginx Repository in Helm 3
DESCRIPTION: Demonstrates how to add the Nginx repository to Helm 3 for searching and installing charts.

LANGUAGE: bash
CODE:
$ helm repo add nginx https://helm.nginx.com/stable

----------------------------------------

TITLE: Incorrect Formatting of Helm Template Directives
DESCRIPTION: Shows incorrect formatting of Helm template directives without proper whitespace, which should be avoided.

LANGUAGE: yaml
CODE:
{{.foo}}
{{print "foo"}}
{{-print "bar"-}}

----------------------------------------

TITLE: Helm Get Manifest Command Options in Bash
DESCRIPTION: These are the specific options available for the 'helm get manifest' command. They allow users to get help information and specify a revision number for the release.

LANGUAGE: bash
CODE:
  -h, --help           help for manifest
      --revision int   get the named release with revision

----------------------------------------

TITLE: Helm 插件列表命令可选项
DESCRIPTION: 此代码块显示了 'helm plugin list' 命令的可选参数。目前只有一个 help 选项，用于显示命令的帮助信息。

LANGUAGE: shell
CODE:
  -h, --help   help for list

----------------------------------------

TITLE: Helm Get Values Inherited Options
DESCRIPTION: Global options inherited from parent commands including Kubernetes cluster configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Cleaning up Helm v2 Data
DESCRIPTION: Commands to clean up Helm v2 configuration, release data, and Tiller deployment after migration.

LANGUAGE: bash
CODE:
$ helm3 2to3 cleanup --dry-run
2019/11/14 15:06:59 NOTE: This is in dry-run mode, the following actions will not be executed.
2019/11/14 15:06:59 Run without --dry-run to take the actions described below:
2019/11/14 15:06:59
WARNING: "Helm v2 Configuration" "Release Data" "Release Data" will be removed.
This will clean up all releases managed by Helm v2. It will not be possible to restore them if you haven't made a backup of the releases.
Helm v2 may not be usable afterwards.

[Cleanup/confirm] Are you sure you want to cleanup Helm v2 data? [y/N]: y
2019/11/14 15:07:01
Helm v2 data will be cleaned up.
2019/11/14 15:07:01 [Helm 2] Releases will be deleted.
2019/11/14 15:07:01 [Helm 2] ReleaseVersion "postgres.v1" will be deleted.
2019/11/14 15:07:01 [Helm 2] ReleaseVersion "redis.v1" will be deleted.
2019/11/14 15:07:01 [Helm 2] Home folder "/Users/rimasm/.helm" will be deleted.

----------------------------------------

TITLE: Inherited Options for Helm Plugin Install Command
DESCRIPTION: Displays the options inherited from parent commands, including various Kubernetes API server configurations, authentication options, and Helm-specific settings like repository and registry configurations.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm History Command
DESCRIPTION: This snippet shows the basic syntax for running the 'helm history' command. It fetches the revision history for a specified release name and accepts optional flags.

LANGUAGE: shell
CODE:
helm history RELEASE_NAME [flags]

----------------------------------------

TITLE: Executing Helm Get All Command in Shell
DESCRIPTION: This command prints a readable set of information including notes, hooks, supplied values, and generated manifest files for a given release.

LANGUAGE: shell
CODE:
helm get all RELEASE_NAME [flags]

----------------------------------------

TITLE: Helm Global Command Options
DESCRIPTION: Inherited global configuration options available for all Helm commands including verify.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Migrating Helm v2 Configuration to Helm v3
DESCRIPTION: Commands to migrate Helm v2 configuration, including repositories and plugins, to Helm v3.

LANGUAGE: bash
CODE:
$ helm3 2to3 move config --dry-run
2019/11/14 14:54:04 NOTE: This is in dry-run mode, the following actions will not be executed.
2019/11/14 14:54:04 Run without --dry-run to take the actions described below:
2019/11/14 14:54:04
2019/11/14 14:54:04 WARNING: Helm v3 configuration maybe overwritten during this operation.
2019/11/14 14:54:04
[Move Config/confirm] Are you sure you want to move the v2 configration? [y/N]: y
2019/11/14 14:54:12
Helm v2 configuration will be moved to Helm v3 configration.
2019/11/14 14:54:12 [Helm 2] Home directory: /Users/rimas/.helm
2019/11/14 14:54:12 [Helm 3] Config directory: /Users/rimas/Library/Preferences/helm
2019/11/14 14:54:12 [Helm 3] Data directory: /Users/rimas/Library/helm
2019/11/14 14:54:12 [Helm 3] Create config folder "/Users/rimas/Library/Preferences/helm" .
2019/11/14 14:54:12 [Helm 2] repositories file "/Users/rimas/.helm/repository/repositories.yaml" will copy to [Helm 3] config folder "/Users/rimas/Library/Preferences/helm/repositories.yaml" .
2019/11/14 14:54:12 [Helm 3] Create data folder "/Users/rimas/Library/helm" .
2019/11/14 14:54:12 [Helm 2] plugins "/Users/rimas/.helm/plugins" will copy to [Helm 3] data folder "/Users/rimas/Library/helm/plugins" .
2019/11/14 14:54:12 [Helm 2] starters "/Users/rimas/.helm/starters" will copy to [Helm 3] data folder "/Users/rimas/Library/helm/starters" .

LANGUAGE: bash
CODE:
$ helm3 2to3 move config
WARNING: Helm v3 configuration maybe overwritten during this operation.

[Move Config/confirm] Are you sure you want to move the v2 configration? [y/N]: y

2019/11/14 14:55:00 Helm v2 configuration will be moved to Helm v3 configration.
2019/11/14 14:55:00 [Helm 2] Home directory: /Users/rimas/.helm
2019/11/14 14:55:00 [Helm 3] Config directory: /Users/rimas/Library/Preferences/helm
2019/11/14 14:55:00 [Helm 3] Data directory: /Users/rimas/Library/helm
2019/11/14 14:55:00 [Helm 3] Create config folder "/Users/rimas/Library/Preferences/helm" .
2019/11/14 14:55:00 [Helm 3] Config folder "/Users/rimas/Library/Preferences/helm" created.
2019/11/14 14:55:00 [Helm 2] repositories file "/Users/rimas/.helm/repository/repositories.yaml" will copy to [Helm 3] config folder "/Users/rimas/Library/Preferences/helm/repositories.yaml" .
2019/11/14 14:55:00 [Helm 2] repositories file "/Users/rimas/.helm/repository/repositories.yaml" copied successfully to [Helm 3] config folder "/Users/rimas/Library/Preferences/helm/repositories.yaml" .
2019/11/14 14:55:00 [Helm 3] Create data folder "/Users/rimas/Library/helm" .
2019/11/14 14:55:00 [Helm 3] data folder "/Users/rimas/Library/helm" created.
2019/11/14 14:55:00 [Helm 2] plugins "/Users/rimas/.helm/plugins" will copy to [Helm 3] data folder "/Users/rimas/Library/helm/plugins" .
2019/11/14 14:55:00 [Helm 2] plugins "/Users/rimas/.helm/plugins" copied successfully to [Helm 3] data folder "/Users/rimas/Library/helm/plugins" .
2019/11/14 14:55:00 [Helm 2] starters "/Users/rimas/.helm/starters" will copy to [Helm 3] data folder "/Users/rimas/Library/helm/starters" .
2019/11/14 14:55:00 [Helm 2] starters "/Users/rimas/.helm/starters" copied successfully to [Helm 3] data folder "/Users/rimas/Library/helm/starters" .
2019/11/14 14:55:00 Helm v2 configuration was moved successfully to Helm v3 configration.

LANGUAGE: bash
CODE:
$ helm3 repo list
NAME       	URL
stable     	https://kubernetes-charts.storage.googleapis.com
jfrog      	https://charts.jfrog.io
rimusz     	https://charts.rimusz.net
buildkite  	https://buildkite.github.io/charts
jetstack   	https://charts.jetstack.io
odavid     	https://odavid.github.io/k8s-helm-charts
elastic    	https://helm.elastic.co
appscode   	https://charts.appscode.com/stable

$ helm3 plugin list
NAME   	VERSION	DESCRIPTION
2to3   	0.1.0  	migrate Helm v2 configuration and releases in-place to Helm v3
edit   	0.3.0  	Edit a release.
gcs    	0.2.0  	Provides Google Cloud Storage protocol support.
       	       	https://github.com/vigles...
linter 	0.1.1  	Helm plugin to find hardcoded passwords in values.yaml files
monitor	0.3.0  	Query at a given interval a Prometheus, ElasticSearch or Sentry instance...

----------------------------------------

TITLE: Helm Plugin Update Command Options in Bash
DESCRIPTION: This snippet shows the available options specific to the 'helm plugin update' command. Currently, it only includes a help flag for displaying command usage information.

LANGUAGE: bash
CODE:
  -h, --help   help for update

----------------------------------------

TITLE: Installing Helm Chart with JSON Values
DESCRIPTION: Demonstrates setting complex JSON values during chart installation.

LANGUAGE: bash
CODE:
$ helm install --set-json 'master.sidecars=[{"name":"sidecar","image":"myImage","imagePullPolicy":"Always","ports":[{"name":"portname","containerPort":1234}]}]' myredis ./redis

----------------------------------------

TITLE: Inherited Helm Command Options in Shell
DESCRIPTION: Options inherited from parent commands, including Kubernetes API server configuration, authentication, and Helm repository settings.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the file containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Repository Update Command Syntax
DESCRIPTION: The basic command syntax for updating Helm repositories. Allows updating either specific repositories or all repositories at once.

LANGUAGE: bash
CODE:
helm repo update [REPO1 [REPO2 ...]] [flags]

----------------------------------------

TITLE: Generating YAML with Helm 1
DESCRIPTION: An example of how Helm 1 used YAML front-matter generators to substitute fields in Kubernetes manifests. This demonstrates the limitations of the early version and the need for more sophisticated templating.

LANGUAGE: yaml
CODE:
#helm:generate sed -i -e s|ubuntu-debootstrap|fluffy-bunny| my/pod.yaml

----------------------------------------

TITLE: Inherited Options for Helm Plugin Update Command in Bash
DESCRIPTION: This snippet lists the options inherited from parent commands. These options provide various configurations for Kubernetes API server communication, authentication, and Helm-specific settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with 'helm list', including Kubernetes API server configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Flags for Helm Plugin Uninstall Command
DESCRIPTION: This snippet lists all the flags inherited from the parent command. These flags provide options for configuring the Kubernetes API server connection, authentication, and Helm-specific settings like repository and registry configurations.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the file containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm Chart Verification Command
DESCRIPTION: Basic command syntax for verifying a Helm chart's signature using the verify command.

LANGUAGE: shell
CODE:
helm verify PATH [flags]

----------------------------------------

TITLE: Installing Helm via pkg on FreeBSD
DESCRIPTION: Installs Helm using the pkg package manager on FreeBSD systems.

LANGUAGE: console
CODE:
pkg install helm

----------------------------------------

TITLE: Basic Helm Package Command
DESCRIPTION: The basic syntax for packaging a Helm chart into an archive file. The command accepts a chart path and optional flags.

LANGUAGE: bash
CODE:
helm package [CHART_PATH] [...] [flags]

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with the package command.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Basic Helm Package Command
DESCRIPTION: The basic syntax for packaging a Helm chart into an archive file. The command accepts a chart path and optional flags.

LANGUAGE: bash
CODE:
helm package [CHART_PATH] [...] [flags]

----------------------------------------

TITLE: Executing Helm Get Metadata Command
DESCRIPTION: This command fetches metadata for a given release in Helm. It requires a RELEASE_NAME argument and accepts optional flags for output format and revision specification.

LANGUAGE: bash
CODE:
helm get metadata RELEASE_NAME [flags]

----------------------------------------

TITLE: Displaying Helm Registry Command Options
DESCRIPTION: This snippet shows the available options for the 'helm registry' command. It includes the help flag for displaying command usage information.

LANGUAGE: bash
CODE:
  -h, --help   help for registry

----------------------------------------

TITLE: Helm Package Command with Signing
DESCRIPTION: Example of packaging a Helm chart with signing enabled, specifying the key and keyring location.

LANGUAGE: bash
CODE:
helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg

----------------------------------------

TITLE: Installing Helm via Snap
DESCRIPTION: Installs Helm using the Snap package manager.

LANGUAGE: console
CODE:
sudo snap install helm --classic

----------------------------------------

TITLE: Helm Registry Logout Command Syntax
DESCRIPTION: Basic command syntax for logging out from a Helm registry. Accepts an optional host parameter and supports various flags.

LANGUAGE: bash
CODE:
helm registry logout [host] [flags]

----------------------------------------

TITLE: Helm Plugin Uninstall Command Syntax
DESCRIPTION: Basic command syntax for uninstalling Helm plugins. Accepts one or more plugin names as arguments.

LANGUAGE: bash
CODE:
helm plugin uninstall <plugin>... [flags]

----------------------------------------

TITLE: Helm Package Command with Signing
DESCRIPTION: Example of packaging a Helm chart with signing enabled, specifying the key and keyring location.

LANGUAGE: bash
CODE:
helm package --sign ./mychart --key mykey --keyring ~/.gnupg/secring.gpg

----------------------------------------

TITLE: Helm Plugin Uninstall Command Syntax
DESCRIPTION: Basic command syntax for uninstalling Helm plugins. Accepts one or more plugin names as arguments.

LANGUAGE: bash
CODE:
helm plugin uninstall <plugin>... [flags]

----------------------------------------

TITLE: Basic Helm Search Options
DESCRIPTION: Basic command line options specific to the helm search command.

LANGUAGE: bash
CODE:
  -h, --help   help for search

----------------------------------------

TITLE: Installing Helm via DNF on Fedora
DESCRIPTION: Installs Helm using the DNF package manager on Fedora systems.

LANGUAGE: console
CODE:
sudo dnf install helm

----------------------------------------

TITLE: Inherited Options for Helm Show Chart Command
DESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API interaction, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Plugin Inherited Options
DESCRIPTION: Command line options inherited from parent commands, including Kubernetes configuration and authentication settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm Plugin Update Command in Bash
DESCRIPTION: This command is used to update one or more Helm plugins. It accepts one or more plugin names as arguments and supports various options for customization.

LANGUAGE: bash
CODE:
helm plugin update <plugin>... [flags]

----------------------------------------

TITLE: Executing Helm Template Command
DESCRIPTION: The basic syntax for running the 'helm template' command. It allows users to render chart templates locally and display the output. The command can take a name, chart, and various flags as arguments.

LANGUAGE: bash
CODE:
helm template [NAME] [CHART] [flags]

----------------------------------------

TITLE: Building Helm from Source
DESCRIPTION: Builds Helm from source code using Go, useful for testing pre-release versions or development.

LANGUAGE: console
CODE:
$ git clone https://github.com/helm/helm.git
$ cd helm
$ make

----------------------------------------

TITLE: Upgrading Helm Releases - Go
DESCRIPTION: Shows how to upgrade an existing Helm release with a new chart version or modified values.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/upgrade.go" >}}

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Options inherited from parent commands including API server configuration, authentication, and repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Repo Base Command Options
DESCRIPTION: Basic command-line options for the 'helm repo' command.

LANGUAGE: bash
CODE:
  -h, --help   help for repo

----------------------------------------

TITLE: Setting Environment Variables for Major/Minor Helm Release
DESCRIPTION: Shell commands to set environment variables for release name, branch name, and release candidate name for major or minor Helm releases.

LANGUAGE: shell
CODE:
export RELEASE_NAME=vX.Y.0
export RELEASE_BRANCH_NAME="release-X.Y"
export RELEASE_CANDIDATE_NAME="$RELEASE_NAME-rc.1"

----------------------------------------

TITLE: Helm Plugin Uninstall Basic Options
DESCRIPTION: Lists the basic command-specific options available for the plugin uninstall command.

LANGUAGE: bash
CODE:
  -h, --help   help for uninstall

----------------------------------------

TITLE: Formatting Helm Template Directives
DESCRIPTION: Illustrates the correct formatting of Helm template directives with proper whitespace.

LANGUAGE: yaml
CODE:
{{ .foo }}
{{ print "foo" }}
{{- print "bar" -}}

----------------------------------------

TITLE: Uninstalling Helm Releases - Go
DESCRIPTION: Demonstrates the process of uninstalling a Helm release using the SDK.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/uninstall.go" >}}

----------------------------------------

TITLE: Helm Plugin Uninstall Basic Options
DESCRIPTION: Lists the basic command-specific options available for the plugin uninstall command.

LANGUAGE: bash
CODE:
  -h, --help   help for uninstall

----------------------------------------

TITLE: Helm Repository Remove Command Options
DESCRIPTION: Available command-specific options for the helm repo remove command.

LANGUAGE: bash
CODE:
  -h, --help   help for remove

----------------------------------------

TITLE: Cherry-Picking Commits for Patch Helm Release
DESCRIPTION: Git commands to view commit logs, cherry-pick specific commits, and push the release branch for Helm patch releases.

LANGUAGE: shell
CODE:
git log --oneline
git cherry-pick -x <commit-id>
git push upstream $RELEASE_BRANCH_NAME

----------------------------------------

TITLE: Values Documentation Format
DESCRIPTION: Demonstrates correct and incorrect ways to document values in values.yaml file.

LANGUAGE: yaml
CODE:
# the host name for the webserver
serverHost: example
serverPort: 9191

LANGUAGE: yaml
CODE:
# serverHost is the host name for the webserver
serverHost: example
# serverPort is the HTTP listener port for the webserver
serverPort: 9191

----------------------------------------

TITLE: Implementing Post-Install Job Hook in Helm
DESCRIPTION: Example of a Kubernetes Job template configured as a Helm post-install hook. The job runs an Alpine container with configurable sleep duration and includes hook annotations for weight and deletion policy.

LANGUAGE: yaml
CODE:
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      containers:
      - name: post-install-job
        image: "alpine:3.3"
        command: ["/bin/sleep","{{ default "10" .Values.sleepyTime }}"]

----------------------------------------

TITLE: Helm Repository Update Command Options
DESCRIPTION: Specific flags available for the helm repo update command including failure handling options.

LANGUAGE: bash
CODE:
      --fail-on-repo-update-fail   update fails if any of the repository updates fail
  -h, --help                       help for update

----------------------------------------

TITLE: Updating Version Number for Major/Minor Helm Release
DESCRIPTION: Git commands to commit version number changes in the release branch for major or minor Helm releases.

LANGUAGE: shell
CODE:
git add .
git commit -m "bump version to $RELEASE_NAME"

----------------------------------------

TITLE: Adding local Helm binary to PATH in bash
DESCRIPTION: Shows how to update the PATH environment variable to include the directory containing the locally built Helm binary. This allows running the local version of Helm from the terminal.

LANGUAGE: bash
CODE:
export PATH="<path to your binary folder>:$PATH"

----------------------------------------

TITLE: Helm Completion Bash Command Options
DESCRIPTION: These are the specific options available for the 'helm completion bash' command. They allow customization of the completion behavior.

LANGUAGE: bash
CODE:
  -h, --help              help for bash
      --no-descriptions   disable completion descriptions

----------------------------------------

TITLE: Helm Repository Update Inherited Options
DESCRIPTION: Global options inherited from parent commands including Kubernetes configuration, authentication, and repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Generating Release Notes for Helm
DESCRIPTION: Make commands to generate release notes for a Helm release.

LANGUAGE: shell
CODE:
export VERSION="$RELEASE_NAME"
export PREVIOUS_RELEASE=vX.Y.Z
make clean
make fetch-dist
make release-notes

----------------------------------------

TITLE: MicroK8s Helm Enable Command
DESCRIPTION: Command to enable Helm 3 in a MicroK8s environment

LANGUAGE: bash
CODE:
microk8s.enable helm3

----------------------------------------

TITLE: Helm Dependency Build Command Options in Bash
DESCRIPTION: These are the available options for the 'helm dependency build' command. They include various flags for specifying certificate files, skipping TLS verification, and setting repository credentials.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
  -h, --help                       help for build
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             keyring containing public keys (default "~/.gnupg/pubring.gpg")
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --skip-refresh               do not refresh the local repository cache
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the packages against signatures

----------------------------------------

TITLE: Basic Helm Registry Login Command
DESCRIPTION: The basic syntax for logging into a Helm registry. Requires specifying the host and supports various authentication flags.

LANGUAGE: bash
CODE:
helm registry login [host] [flags]

----------------------------------------

TITLE: Helm Registry Logout Basic Options
DESCRIPTION: Available command-specific options for the logout command.

LANGUAGE: bash
CODE:
  -h, --help   help for logout

----------------------------------------

TITLE: Signing Helm Release Downloads
DESCRIPTION: Make commands to sign the Helm release downloads and generate signature files.

LANGUAGE: shell
CODE:
export VERSION="$RELEASE_NAME"
make clean
make fetch-dist
make sign

----------------------------------------

TITLE: Setting Up Namespace-Scoped Read Access
DESCRIPTION: Commands to create namespace-scoped view and secret-reader access for a user using RoleBindings.

LANGUAGE: console
CODE:
$ kubectl create namespace foo

$ kubectl create rolebinding sam-view \
    --clusterrole view \
    --user sam \
    --namespace foo

$ kubectl create rolebinding sam-secret-reader \
    --clusterrole secret-reader \
    --user sam \
    --namespace foo

----------------------------------------

TITLE: Helm Dependency List Inherited Options in Bash
DESCRIPTION: These options are inherited from parent commands and provide various configurations for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Registry Logout Inherited Options
DESCRIPTION: Options inherited from parent commands including Kubernetes configuration, authentication, and rate limiting settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Options inherited from parent commands that can be used with the helm repo add command, including Kubernetes configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Creating Release Branch for Patch Helm Release
DESCRIPTION: Git commands to fetch upstream and create a new release branch based on the existing release branch for Helm patch releases.

LANGUAGE: shell
CODE:
git fetch upstream
git checkout -b $RELEASE_BRANCH_NAME upstream/$RELEASE_BRANCH_NAME

----------------------------------------

TITLE: Helm SDK Main Driver Implementation - Go
DESCRIPTION: Complete driver implementation showcasing auxiliary functions and combining multiple Helm SDK actions to manage the podinfo chart from an OCI repository.

LANGUAGE: go
CODE:
{{< highlightexamplego file="sdkexamples/main.go" >}}

----------------------------------------

TITLE: Helm Repo Add Command Options
DESCRIPTION: Available flags and options for customizing the helm repo add command, including security options, authentication, and update behaviors.

LANGUAGE: bash
CODE:
      --allow-deprecated-repos     by default, this command will not allow adding official repos that have been permanently deleted. This disables that behavior
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --force-update               replace (overwrite) the repo if it already exists
  -h, --help                       help for add
      --insecure-skip-tls-verify   skip tls certificate checks for the repository
      --key-file string            identify HTTPS client using this SSL key file
      --no-update                  Ignored. Formerly, it would disabled forced updates. It is deprecated by force-update.
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password
      --password-stdin             read chart repository password from stdin
      --username string            chart repository username

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global command line options inherited from parent commands, including Kubernetes configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Creating New Release Candidate Tag
DESCRIPTION: Git commands to create and push a new release candidate tag for Helm.

LANGUAGE: shell
CODE:
export RELEASE_CANDIDATE_NAME="$RELEASE_NAME-rc.2"
git tag --sign --annotate "${RELEASE_CANDIDATE_NAME}" --message "Helm release ${RELEASE_CANDIDATE_NAME}"
git push upstream $RELEASE_CANDIDATE_NAME

----------------------------------------

TITLE: Defining PostRenderer Interface in Go
DESCRIPTION: Shows the Go interface definition for a custom post-renderer in the Helm SDK. This interface allows for flexible implementation of post-rendering logic in Go programs.

LANGUAGE: go
CODE:
type PostRenderer interface {
    // Run expects a single buffer filled with Helm rendered manifests. It
    // expects the modified results to be returned on a separate buffer or an
    // error if there was an issue or failure while running the post render step
    Run(renderedManifests *bytes.Buffer) (modifiedManifests *bytes.Buffer, err error)
}

----------------------------------------

TITLE: Helm Repo Index Command Options in Bash
DESCRIPTION: These are the specific options available for the 'helm repo index' command. They allow for help display, JSON output, merging with existing index, and setting the URL of the chart repository.

LANGUAGE: bash
CODE:
  -h, --help           help for index
      --json           output in JSON format
      --merge string   merge the generated index into the given index
      --url string     url of chart repository

----------------------------------------

TITLE: Listing Inherited Options for Helm Show Command
DESCRIPTION: This code block displays the options inherited from parent commands for the 'helm show' command. It includes various configuration options for Kubernetes API server, authentication, and Helm-specific settings.

LANGUAGE: plaintext
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Creating Release Branch for Major/Minor Helm Release
DESCRIPTION: Git commands to fetch upstream, checkout main branch, and create a new release branch for major or minor Helm releases.

LANGUAGE: shell
CODE:
git fetch upstream
git checkout upstream/main
git checkout -b $RELEASE_BRANCH_NAME

----------------------------------------

TITLE: Retrieving Helm Release Information from Secrets
DESCRIPTION: Shows the kubectl command to retrieve Helm release information stored in Secrets across all namespaces.

LANGUAGE: shell
CODE:
kubectl get secret --all-namespaces -l "owner=helm"

----------------------------------------

TITLE: Helm Get All Command Options
DESCRIPTION: Specific options available for the 'helm get all' command, including help flag, revision selection, and output templating options.

LANGUAGE: bash
CODE:
  -h, --help              help for all
      --revision int      get the named release with revision
      --template string   go template for formatting the output, eg: {{.Release.Name}}

----------------------------------------

TITLE: Installing Helm Chart with String Values
DESCRIPTION: Example of installing a chart while setting a string value for a long integer.

LANGUAGE: bash
CODE:
$ helm install --set-string long_int=1234567890 myredis ./redis

----------------------------------------

TITLE: Inherited Options for Helm Repo Index Command in Bash
DESCRIPTION: These options are inherited from parent commands and provide additional configuration for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Get All Command Options
DESCRIPTION: Specific options available for the 'helm get all' command, including help flag, revision selection, and output templating options.

LANGUAGE: bash
CODE:
  -h, --help              help for all
      --revision int      get the named release with revision
      --template string   go template for formatting the output, eg: {{.Release.Name}}

----------------------------------------

TITLE: Setting Up Git Remote for Helm Release
DESCRIPTION: Commands to set up the Git remote for the Helm repository, naming it 'upstream'.

LANGUAGE: shell
CODE:
git remote add upstream git@github.com:helm/helm.git

----------------------------------------

TITLE: Implementing Dynamic Auto-completion for a Helm Plugin
DESCRIPTION: Example of a plugin.complete script that calls the main plugin executable to provide dynamic auto-completion.

LANGUAGE: bash
CODE:
#!/usr/bin/env sh

# "$@" is the entire command-line that requires completion.
# It is important to double-quote the "$@" variable to preserve a possibly empty last parameter.
$HELM_PLUGIN_DIR/status.sh --complete "$@"

----------------------------------------

TITLE: Helm Install Command Options
DESCRIPTION: Available command line options for the helm install command.

LANGUAGE: bash
CODE:
      --atomic                                     if set, the installation process deletes the installation on failure. The --wait flag will be set automatically if --atomic is used
      --ca-file string                             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string                           identify HTTPS client using this SSL certificate file
      --create-namespace                           create the release namespace if not present
      --dependency-update                          update dependencies if they are missing before installing the chart
      --description string                         add a custom description

----------------------------------------

TITLE: Helm Repository List Command Options
DESCRIPTION: Specific options available for the repo list command, including help flag and output format selection (supports table, json, and yaml formats).

LANGUAGE: bash
CODE:
  -h, --help            help for list
  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)

----------------------------------------

TITLE: Inherited Options for Helm Get Manifest Command in Bash
DESCRIPTION: These options are inherited from parent commands and provide various configurations for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Setting Environment Variables for Patch Helm Release
DESCRIPTION: Shell commands to set environment variables for previous patch release, new release name, and release branch name for Helm patch releases.

LANGUAGE: shell
CODE:
export PREVIOUS_PATCH_RELEASE=vX.Y.Z
export RELEASE_NAME=vX.Y.Z+1
export RELEASE_BRANCH_NAME="release-X.Y"

----------------------------------------

TITLE: Configuring a Complex Helm Plugin with Hooks
DESCRIPTION: Example of a plugin.yaml file for a more complex plugin with installation hooks and platform-specific commands.

LANGUAGE: yaml
CODE:
name: myplugin
version: 0.1.0
usage: example plugin
description: example plugin
ignoreFlags: false
platformCommand:
  - command: ${HELM_PLUGIN_DIR}/bin/myplugin
  - os: windows
    command: ${HELM_PLUGIN_DIR}\bin\myplugin.exe
platformHooks:
  install:
    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh
    - os: windows
      command: pwsh
      args:
        - -c
        - ${HELM_PLUGIN_DIR}\scripts\install.ps1
  update:
    - command: ${HELM_PLUGIN_DIR}/scripts/install.sh
      args:
        - -u
    - os: windows
      command: pwsh
      args:
        - -c
        - ${HELM_PLUGIN_DIR}\scripts\install.ps1
        - -Update

----------------------------------------

TITLE: Basic Helm Lint Command Syntax
DESCRIPTION: The basic syntax for running the helm lint command to examine a chart for possible issues. The command requires a path to the chart as an argument.

LANGUAGE: bash
CODE:
helm lint PATH [flags]

----------------------------------------

TITLE: Executing Helm Rollback Command in Bash
DESCRIPTION: This command rolls back a Helm release to a previous revision. It requires the release name as the first argument and optionally a revision number as the second argument. If no revision is specified or it's set to 0, it rolls back to the previous release.

LANGUAGE: bash
CODE:
helm rollback <RELEASE> [REVISION] [flags]

----------------------------------------

TITLE: Inherited Options for Helm Get Metadata Command
DESCRIPTION: These options are inherited from parent commands and provide various configurations for Kubernetes API server connection, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Example of Semantic Commit Message for Helm
DESCRIPTION: Illustrates the format for writing semantic commit messages in the Helm project. It includes the type of change, scope, description, and optional body and footer.

LANGUAGE: text
CODE:
fix(helm): add --foo flag to 'helm install'

When 'helm install --foo bar' is run, this will print "foo" in the
output regardless of the outcome of the installation.

Closes #1234

----------------------------------------

TITLE: Helm Chart Manifest with Provenance File
DESCRIPTION: Shows an example of a Helm chart manifest in an OCI registry that includes a provenance file.

LANGUAGE: json
CODE:
{
  "schemaVersion": 2,
  "config": {
    "mediaType": "application/vnd.cncf.helm.config.v1+json",
    "digest": "sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111",
    "size": 117
  },
  "layers": [
    {
      "mediaType": "application/vnd.cncf.helm.chart.content.v1.tar+gzip",
      "digest": "sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617",
      "size": 2487
    },
    {
      "mediaType": "application/vnd.cncf.helm.chart.provenance.v1.prov",
      "digest": "sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a",
      "size": 643
    }
  ]
}

----------------------------------------

TITLE: Helm Plugin Basic Options
DESCRIPTION: Basic command line options specific to the helm plugin command.

LANGUAGE: bash
CODE:
  -h, --help   help for plugin

----------------------------------------

TITLE: Inherited Options for Helm Rollback Command in Bash
DESCRIPTION: This snippet shows the options inherited from parent commands for the 'helm rollback' command. These options provide configuration for Kubernetes API interaction, authentication, and Helm-specific settings like repository and registry configurations.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Get Values Basic Command Syntax
DESCRIPTION: Basic command syntax for downloading values from a Helm release. Requires specifying a RELEASE_NAME parameter.

LANGUAGE: bash
CODE:
helm get values RELEASE_NAME [flags]

----------------------------------------

TITLE: GKE Certificate Authority Error
DESCRIPTION: Example of certificate authority error message in Google Container Engine

LANGUAGE: console
CODE:
Unable to connect to the server: x509: certificate signed by unknown authority

----------------------------------------

TITLE: Logging into a Helm Registry
DESCRIPTION: Demonstrates how to log into a Helm registry using the helm registry login command.

LANGUAGE: console
CODE:
$ helm registry login -u myuser localhost:5000
Password:
Login succeeded

----------------------------------------

TITLE: Helm Search Hub Command Options
DESCRIPTION: Available flags specific to the helm search hub command, including endpoint configuration, output formatting, and search behavior options.

LANGUAGE: bash
CODE:
      --endpoint string      Hub instance to query for charts (default "https://hub.helm.sh")
      --fail-on-no-result    search fails if no results are found
  -h, --help                 help for hub
      --list-repo-url        print charts repository URL
      --max-col-width uint   maximum column width for output table (default 50)
  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Additional options inherited from parent commands, including Kubernetes configuration, authentication, and repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm Pull Command
DESCRIPTION: Basic command syntax for pulling a Helm chart from a repository or URL. The command accepts a chart URL or repository/chartname combination as its main argument.

LANGUAGE: bash
CODE:
helm pull [chart URL | repo/chartname] [...] [flags]

----------------------------------------

TITLE: Migrating Helm v2 Releases to Helm v3
DESCRIPTION: Commands to migrate individual Helm v2 releases to Helm v3, including a dry run and actual migration.

LANGUAGE: bash
CODE:
$ helm list

NAME    	REVISION	UPDATED                 	STATUS  	CHART           	APP VERSION	NAMESPACE
postgres	1       	Thu Nov 14 15:01:00 2019	DEPLOYED	postgresql-7.1.0	11.5.0     	postgres
redis   	1       	Thu Nov 14 15:02:12 2019	DEPLOYED	redis-9.5.4     	5.0.6      	redis

LANGUAGE: bash
CODE:
$ helm3 2to3 convert --dry-run postgres
2019/11/14 15:03:17 NOTE: This is in dry-run mode, the following actions will not be executed.
2019/11/14 15:03:17 Run without --dry-run to take the actions described below:
2019/11/14 15:03:17
2019/11/14 15:03:17 Release "postgres" will be converted from Helm v2 to Helm v3.
2019/11/14 15:03:17 [Helm 3] Release "postgres" will be created.
2019/11/14 15:03:17 [Helm 3] ReleaseVersion "postgres.v1" will be created.

LANGUAGE: bash
CODE:
$ helm3 2to3 convert postgres
2019/11/14 15:03:57 Release "postgres" will be converted from Helm v2 to Helm v3.
2019/11/14 15:03:57 [Helm 3] Release "postgres" will be created.
2019/11/14 15:03:57 [Helm 3] ReleaseVersion "postgres.v1" will be created.
2019/11/14 15:03:57 [Helm 3] ReleaseVersion "postgres.v1" created.
2019/11/14 15:03:57 [Helm 3] Release "postgres" created.
2019/11/14 15:03:57 Release "postgres" was converted successfully from Helm v2 to Helm v3.
2019/11/14 15:03:57 Note: The v2 release information still remains and should be removed to avoid conflicts with the migrated v3 release.
2019/11/14 15:03:57 v2 release information should only be removed using `helm 2to3` cleanup and when all releases have been migrated over.

LANGUAGE: bash
CODE:
$ helm list
NAME    	REVISION	UPDATED                 	STATUS  	CHART           	APP VERSION	NAMESPACE
postgres	1       	Thu Nov 14 15:01:00 2019	DEPLOYED	postgresql-7.1.0	11.5.0     	postgres
redis   	1       	Thu Nov 14 15:02:12 2019	DEPLOYED	redis-9.5.4     	5.0.6      	redis

$ helm3 list -n postgres
NAME    	NAMESPACE	REVISION	UPDATED                             	STATUS  	CHART           	APP VERSION
postgres	postgres 	1       	2019-11-14 13:01:00.188487 +0000 UTC	deployed	postgresql-7.1.0	11.5.0

----------------------------------------

TITLE: Sample index.yaml File for Helm Chart Repository
DESCRIPTION: Demonstrates the structure of an index.yaml file, which contains metadata about the charts in the repository, including versions, descriptions, and download URLs.

LANGUAGE: yaml
CODE:
apiVersion: v1
entries:
  alpine:
    - created: 2016-10-06T16:23:20.499814565-06:00
      description: Deploy a basic Alpine Linux pod
      digest: 99c76e403d752c84ead610644d4b1c2f2b453a74b921f422b9dcb8a7c8b559cd
      home: https://helm.sh/helm
      name: alpine
      sources:
      - https://github.com/helm/helm
      urls:
      - https://technosophos.github.io/tscharts/alpine-0.2.0.tgz
      version: 0.2.0
    - created: 2016-10-06T16:23:20.499543808-06:00
      description: Deploy a basic Alpine Linux pod
      digest: 515c58e5f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cd78727
      home: https://helm.sh/helm
      name: alpine
      sources:
      - https://github.com/helm/helm
      urls:
      - https://technosophos.github.io/tscharts/alpine-0.1.0.tgz
      version: 0.1.0
  nginx:
    - created: 2016-10-06T16:23:20.499543808-06:00
      description: Create a basic nginx HTTP server
      digest: aaff4545f79d8b2913a10cb400ebb6fa9c77fe813287afbacf1a0b897cdffffff
      home: https://helm.sh/helm
      name: nginx
      sources:
      - https://github.com/helm/charts
      urls:
      - https://technosophos.github.io/tscharts/nginx-1.1.0.tgz
      version: 1.1.0
generated: 2016-10-06T16:23:20.499029981-06:00

----------------------------------------

TITLE: Executing Helm Pull Command
DESCRIPTION: Basic command syntax for pulling a Helm chart from a repository or URL. The command accepts a chart URL or repository/chartname combination as its main argument.

LANGUAGE: bash
CODE:
helm pull [chart URL | repo/chartname] [...] [flags]

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Additional options inherited from parent commands, including Kubernetes API configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm History Command Options
DESCRIPTION: This code block lists the specific options available for the 'helm history' command, including help, maximum revisions, and output format.

LANGUAGE: shell
CODE:
  -h, --help            help for history
      --max int         maximum number of revision to include in history (default 256)
  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)

----------------------------------------

TITLE: Executing Helm Show CRDs Command
DESCRIPTION: Basic command syntax for displaying CRDs from a Helm chart. The command accepts a chart parameter which can be a directory, file, or URL.

LANGUAGE: bash
CODE:
helm show crds [CHART] [flags]

----------------------------------------

TITLE: Creating GitHub Pages Branch for Chart Repository
DESCRIPTION: Shows the command to create a gh-pages branch for hosting a chart repository on GitHub Pages.

LANGUAGE: console
CODE:
$ git checkout -b gh-pages

----------------------------------------

TITLE: Executing Helm Show CRDs Command
DESCRIPTION: Basic command syntax for displaying CRDs from a Helm chart. The command accepts a chart parameter which can be a directory, file, or URL.

LANGUAGE: bash
CODE:
helm show crds [CHART] [flags]

----------------------------------------

TITLE: Inherited Parent Command Options
DESCRIPTION: Additional options inherited from parent commands that can be used with helm show values, including Kubernetes cluster configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global configuration options inherited from parent commands, including Kubernetes API settings, authentication, and repository configurations

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Range Loop for List Iteration
DESCRIPTION: Demonstrates how to iterate over lists using the range operator in Helm templates, including pipeline processing of list items.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  {{- with .Values.favorite }}
  drink: {{ .drink | default "tea" | quote }}
  food: {{ .food | upper | quote }}
  {{- end }}
  toppings: |-
    {{- range .Values.pizzaToppings }}
    - {{ . | title | quote }}
    {{- end }}

----------------------------------------

TITLE: Helm Show Values Command Options
DESCRIPTION: Available command-specific flags for customizing the helm show values command execution, including authentication, security, and version control options.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for values
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --jsonpath string            supply a JSONPath expression to filter the output
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Helm Pull Command Options
DESCRIPTION: Available flags and options for customizing the helm pull command behavior, including SSL configuration, destination settings, and verification options.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
  -d, --destination string         location to write the chart. If this and untardir are specified, untardir is appended to this (default ".")
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
  -h, --help                       help for pull
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --prov                       fetch the provenance file, but don't perform verification
      --repo string                chart repository url where to locate the requested chart
      --untar                      if set to true, will untar the chart after downloading it
      --untardir string            if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default ".")
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use

----------------------------------------

TITLE: Executing Helm Status Command
DESCRIPTION: This command shows the status of a named release in Helm. It displays information such as deployment time, namespace, state, revision, and optionally resources and description.

LANGUAGE: bash
CODE:
helm status RELEASE_NAME [flags]

----------------------------------------

TITLE: Helm Pull Command Options
DESCRIPTION: Available flags and options for customizing the helm pull command behavior, including SSL configuration, destination settings, and verification options.

LANGUAGE: bash
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
  -d, --destination string         location to write the chart. If this and untardir are specified, untardir is appended to this (default ".")
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored.
  -h, --help                       help for pull
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --plain-http                 use insecure HTTP connections for the chart download
      --prov                       fetch the provenance file, but don't perform verification
      --repo string                chart repository url where to locate the requested chart
      --untar                      if set to true, will untar the chart after downloading it
      --untardir string            if untar is specified, this flag specifies the name of the directory into which the chart is expanded (default ".")
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use

----------------------------------------

TITLE: JSON as YAML Example
DESCRIPTION: Demonstrates how JSON can be represented as YAML since YAML is a superset of JSON.

LANGUAGE: json
CODE:
{
  "coffee": "yes, please",
  "coffees": [
    "Latte", "Cappuccino", "Espresso"
  ]
}

----------------------------------------

TITLE: Executing Helm Uninstall Command in Bash
DESCRIPTION: This command uninstalls a Helm release. It removes all resources associated with the last release of the chart and the release history. The command accepts one or more release names and various flags to customize the uninstallation process.

LANGUAGE: bash
CODE:
helm uninstall RELEASE_NAME [...] [flags]

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with the helm pull command, including Kubernetes cluster configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: These options are inherited from parent commands and apply to all Helm commands, including 'helm status'. They provide configuration for Kubernetes API server connection, authentication, and Helm-specific settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with the helm pull command, including Kubernetes cluster configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Adding Helm Repository Instructions in Markdown
DESCRIPTION: Markdown snippet providing instructions for users on how to add the Helm chart repository, search for charts, and install/uninstall charts using Helm commands.

LANGUAGE: markdown
CODE:
## Usage

[Helm](https://helm.sh) must be installed to use the charts.  Please refer to
Helm's [documentation](https://helm.sh/docs) to get started.

Once Helm has been set up correctly, add the repo as follows:

  helm repo add <alias> https://<orgname>.github.io/helm-charts

If you had already added this repo earlier, run `helm repo update` to retrieve
the latest versions of the packages.  You can then run `helm search repo
<alias>` to see the charts.

To install the <chart-name> chart:

    helm install my-<chart-name> <alias>/<chart-name>

To uninstall the chart:

    helm uninstall my-<chart-name>

----------------------------------------

TITLE: Defining Shared Templates in Helm
DESCRIPTION: YAML snippet demonstrating how to define a shared template that can be used across charts.

LANGUAGE: yaml
CODE:
{{- define "labels" }}from: mychart{{ end }}

----------------------------------------

TITLE: Helm Upgrade with Value Files
DESCRIPTION: Example showing how to upgrade a Redis release using multiple value files. The right-most file takes precedence for overlapping keys.

LANGUAGE: bash
CODE:
helm upgrade -f myvalues.yaml -f override.yaml redis ./redis

----------------------------------------

TITLE: Helm Test Inherited Options
DESCRIPTION: These options are inherited from parent commands and provide various configuration settings for Kubernetes API server, authentication, and Helm repositories.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Handling Integers in Helm Templates
DESCRIPTION: Demonstrates how to handle integer values in Helm templates without quoting to avoid parsing errors in Kubernetes.

LANGUAGE: yaml
CODE:
port: {{ .Values.Port }}

----------------------------------------

TITLE: YAML Scalar Types Example
DESCRIPTION: Shows different scalar value representations in YAML including numbers and booleans.

LANGUAGE: yaml
CODE:
count: 1
size: 2.34

LANGUAGE: yaml
CODE:
count: "1" # <-- string, not int
size: '2.34' # <-- string, not float

LANGUAGE: yaml
CODE:
isGood: true   # bool
answer: "true" # string

LANGUAGE: yaml
CODE:
coffee: "yes, please"
age: !!str 21
port: !!int "80"

----------------------------------------

TITLE: Helm Upgrade with Reused Values
DESCRIPTION: Example showing how to upgrade a release while reusing existing values and overriding specific values via command line.

LANGUAGE: bash
CODE:
helm upgrade --reuse-values --set foo=bar --set foo=newbar redis ./redis

----------------------------------------

TITLE: Helm Uninstall Command Options in Bash
DESCRIPTION: This snippet lists the available options for the 'helm uninstall' command. These options allow users to customize the uninstallation process, such as simulating the uninstall, setting deletion strategies, and controlling the behavior of hooks.

LANGUAGE: bash
CODE:
      --cascade string       Must be "background", "orphan", or "foreground". Selects the deletion cascading strategy for the dependents. Defaults to background. (default "background")
      --description string   add a custom description
      --dry-run              simulate a uninstall
  -h, --help                 help for uninstall
      --ignore-not-found     Treat "release not found" as a successful uninstall
      --keep-history         remove all associated resources and mark the release as deleted, but retain the release history
      --no-hooks             prevent hooks from running during uninstallation
      --timeout duration     time to wait for any individual Kubernetes operation (like Jobs for hooks) (default 5m0s)
      --wait                 if set, will wait until all the resources are deleted before returning. It will wait for as long as --timeout

----------------------------------------

TITLE: Using the tpl Function in Helm Templates
DESCRIPTION: Shows how to use the tpl function to evaluate strings as templates inside a template, useful for passing template strings as values or rendering external configuration files.

LANGUAGE: yaml
CODE:
# values
template: "{{ .Values.name }}"
name: "Tom"

# template
{{ tpl .Values.template . }}

# output
Tom

----------------------------------------

TITLE: Basic TOML Configuration Files
DESCRIPTION: Example TOML configuration files that will be included in the ConfigMap.

LANGUAGE: toml
CODE:
message = Hello from config 1

LANGUAGE: toml
CODE:
message = This is config 2

LANGUAGE: toml
CODE:
message = Goodbye from config 3

----------------------------------------

TITLE: Helm Get All Command Options in Shell
DESCRIPTION: Available options for the 'helm get all' command, including help flag, revision specification, and output formatting template.

LANGUAGE: shell
CODE:
  -h, --help              help for all
      --revision int      get the named release with revision
      --template string   go template for formatting the output, eg: {{.Release.Name}}

----------------------------------------

TITLE: Basic Helm Upgrade Command
DESCRIPTION: Basic syntax for upgrading a Helm release to a new version of a chart. The command requires a release name and chart reference as arguments.

LANGUAGE: bash
CODE:
helm upgrade [RELEASE] [CHART] [flags]

----------------------------------------

TITLE: Syncing Local and Remote Helm Chart Repositories
DESCRIPTION: Executes a script to synchronize the local chart repository with a GCS bucket. This process uploads the local charts and index file to the remote storage.

LANGUAGE: console
CODE:
$ pwd
/Users/me/code/go/src/helm.sh/helm
$ scripts/sync-repo.sh fantastic-charts/ fantastic-charts
Getting ready to sync your local directory (fantastic-charts/) to a remote repository at gs://fantastic-charts
Verifying Prerequisites....
Thumbs up! Looks like you have gsutil. Let's continue.
Building synchronization state...
Starting synchronization
Would copy file://fantastic-charts/alpine-0.1.0.tgz to gs://fantastic-charts/alpine-0.1.0.tgz
Would copy file://fantastic-charts/index.yaml to gs://fantastic-charts/index.yaml
Are you sure you would like to continue with these changes?? [y/N]} y
Building synchronization state...
Starting synchronization
Copying file://fantastic-charts/alpine-0.1.0.tgz [Content-Type=application/x-tar]...
Uploading   gs://fantastic-charts/alpine-0.1.0.tgz:              740 B/740 B
Copying file://fantastic-charts/index.yaml [Content-Type=application/octet-stream]...
Uploading   gs://fantastic-charts/index.yaml:                    347 B/347 B
Congratulations your remote chart repository now matches the contents of fantastic-charts/

----------------------------------------

TITLE: Installing Specific Tiller Version
DESCRIPTION: Command to initialize Helm with a specific Tiller version from GitHub Container Registry

LANGUAGE: console
CODE:
helm init --tiller-image ghcr.io/helm/tiller:v2.16.9

----------------------------------------

TITLE: 执行 Helm 插件列表命令
DESCRIPTION: 使用此命令可以列出所有已安装的 Helm 插件。该命令支持一个可选的 help 标志，用于显示帮助信息。

LANGUAGE: shell
CODE:
helm plugin list [flags]

----------------------------------------

TITLE: Helm Global Command Options
DESCRIPTION: Inherited global options for Kubernetes configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Updating Local Helm Chart Repository from GCS Bucket
DESCRIPTION: Uses gsutil rsync to synchronize the contents of a remote GCS bucket with a local directory. This command allows for updating the local repository with changes from the remote.

LANGUAGE: console
CODE:
$ gsutil rsync -d -n gs://bucket-name local-dir/    # the -n flag does a dry run
Building synchronization state...
Starting synchronization
Would copy gs://bucket-name/alpine-0.1.0.tgz to file://local-dir/alpine-0.1.0.tgz
Would copy gs://bucket-name/index.yaml to file://local-dir/index.yaml

$ gsutil rsync -d gs://bucket-name local-dir/       # performs the copy actions
Building synchronization state...
Starting synchronization
Copying gs://bucket-name/alpine-0.1.0.tgz...
Downloading file://local-dir/alpine-0.1.0.tgz:                        740 B/740 B
Copying gs://bucket-name/index.yaml...
Downloading file://local-dir/index.yaml:                              346 B/346 B

----------------------------------------

TITLE: Helm Repo Inherited Options
DESCRIPTION: Command-line options inherited from parent commands, including Kubernetes configuration and authentication options.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm Pull Command
DESCRIPTION: Basic usage of the 'helm pull' command to download a chart from a repository or URL. The command allows for optional flags to modify its behavior.

LANGUAGE: shell
CODE:
helm pull [chart URL | repo/chartname] [...] [flags]

----------------------------------------

TITLE: Defining Chart Dependencies in Helm 3 Chart.yaml
DESCRIPTION: Example of defining chart dependencies in Helm 3 using Chart.yaml file.

LANGUAGE: yaml
CODE:
dependencies:
- name: mariadb
  version: 5.x.x
  repository: https://charts.helm.sh/stable
  condition: mariadb.enabled
  tags:
    - database

----------------------------------------

TITLE: Configuring YAML Front Matter for Helm Docs
DESCRIPTION: YAML front matter block defining metadata for the Helm documentation page, including title, weight for ordering, and URL aliases.

LANGUAGE: yaml
CODE:
---
title: "Introduction"
weight: 1
aliases: ["/docs/using_helm/"]
---

----------------------------------------

TITLE: Helm Search Repo Command Options in Bash
DESCRIPTION: This snippet lists the available options for the 'helm search repo' command. These options allow users to customize the search behavior, output format, and version constraints.

LANGUAGE: bash
CODE:
      --devel                use development versions (alpha, beta, and release candidate releases), too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
      --fail-on-no-result    search fails if no results are found
  -h, --help                 help for repo
      --max-col-width uint   maximum column width for output table (default 50)
  -o, --output format        prints the output in the specified format. Allowed values: table, json, yaml (default table)
  -r, --regexp               use regular expressions for searching repositories you have added
      --version string       search using semantic versioning constraints on repositories you have added
  -l, --versions             show the long listing, with each version of each chart on its own line, for repositories you have added

----------------------------------------

TITLE: Executing Helm Show CRDs Command in Shell
DESCRIPTION: This command checks a chart (directory, file, or URL) and displays the content of custom resource definition (CRD) files. It accepts optional flags to customize the behavior.

LANGUAGE: shell
CODE:
helm show crds [CHART] [flags]

----------------------------------------

TITLE: GKE SSH Tunneling Error
DESCRIPTION: Example of SSH tunneling error message encountered in Google Container Engine

LANGUAGE: console
CODE:
Error: Error forwarding ports: error upgrading connection: No SSH tunnels currently open. Were the targets able to accept an ssh-key for user "gke-[redacted]"?

----------------------------------------

TITLE: Installing Helm via Scoop on Windows
DESCRIPTION: Installs Helm using the Scoop package manager on Windows.

LANGUAGE: console
CODE:
scoop install helm

----------------------------------------

TITLE: Executing Helm Show Readme Command in Bash
DESCRIPTION: This command inspects a chart (directory, file, or URL) and displays the contents of the README file. It accepts a CHART argument and various optional flags.

LANGUAGE: bash
CODE:
helm show readme [CHART] [flags]

----------------------------------------

TITLE: Signing Git Commits with DCO
DESCRIPTION: Commands demonstrating how to sign Git commits with the Developer Certificate of Origin (DCO) signature. Shows both creating new signed commits and amending existing commits to add the signature.

LANGUAGE: shell
CODE:
$ git commit -s -m 'An example commit message'

LANGUAGE: shell
CODE:
$ git commit --amend -s

----------------------------------------

TITLE: Enabling Kubernetes Debug Logging
DESCRIPTION: Command to enable verbose logging for debugging Kubernetes client issues

LANGUAGE: console
CODE:
helm list -v 6

----------------------------------------

TITLE: Helm Get Values Command Options
DESCRIPTION: Available flags specific to the get values command, including options for dumping all values, output format selection, and specifying release revision.

LANGUAGE: bash
CODE:
  -a, --all             dump all (computed) values
  -h, --help            help for values
  -o, --output format   prints the output in the specified format. Allowed values: table, json, yaml (default table)
      --revision int    get the named release with revision

----------------------------------------

TITLE: Executing Helm Get Hooks Command in Bash
DESCRIPTION: This command downloads hooks for a given release. Hooks are formatted in YAML and separated by the YAML '---\n' separator.

LANGUAGE: bash
CODE:
helm get hooks RELEASE_NAME [flags]

----------------------------------------

TITLE: Running Local Chart Tests on Mac
DESCRIPTION: Command to execute chart testing on Docker for Mac using the provided test script

LANGUAGE: bash
CODE:
$ /path/to/chart-testing/examples/docker-for-mac/my_test.sh

----------------------------------------

TITLE: Loading Helm Completions for Current Bash Session
DESCRIPTION: This command loads Helm completions for the current bash shell session. It generates the autocompletion script and sources it directly.

LANGUAGE: bash
CODE:
source <(helm completion bash)

----------------------------------------

TITLE: Modified Live State with Injected Sidecar in Kubernetes YAML
DESCRIPTION: Example of a Kubernetes manifest where a sidecar container has been injected by a service mesh or controller.

LANGUAGE: yaml
CODE:
containers:
- name: server
  image: nginx:2.0.0
- name: my-injected-sidecar
  image: my-cool-mesh:1.0.0

----------------------------------------

TITLE: Helm Get Notes Command Usage
DESCRIPTION: Basic command syntax for retrieving notes from a named Helm release

LANGUAGE: bash
CODE:
helm get notes RELEASE_NAME [flags]

----------------------------------------

TITLE: Chart Testing Environment Configuration
DESCRIPTION: Example environment configuration file (.testenv) for chart testing showing various testing parameters and options

LANGUAGE: bash
CODE:
# The name of the Git remote
REMOTE=k8s

# The name of the Git target branch
TARGET_BRANCH=master

# Chart directories separated by a space
CHART_DIRS=(
    stable
    incubator
)

# Charts that should be skipped
EXCLUDED_CHARTS=(
    common
)

# Additional chart repos to add (<name>=<url>), separated by a space
CHART_REPOS=(
    incubator=https://kubernetes-charts-incubator.storage.googleapis.com/
)

TIMEOUT=600

----------------------------------------

TITLE: Helm Global Command Options
DESCRIPTION: Inherited global options available for all Helm commands including API server configuration, authentication, and repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Pushing Helm Charts to OCI Registry - CLI Example
DESCRIPTION: Demonstrates the command line workflow for creating, packaging, and pushing a Helm chart to an OCI registry. Includes login, chart creation, packaging, and push operations.

LANGUAGE: text
CODE:
$ helm create demo
Creating demo

$ helm package demo
Successfully packaged chart and saved it to: /tmp/demo-0.1.0.tgz

$ echo "mypass" | helm registry login r.example.com -u myuser --password-stdin
Login Succeeded

$ helm push demo-0.1.0.tgz oci://r.example.com/myuser
Pushed: r.example.com/myuser/demo:0.1.0
Digest: sha256:7ed393daf1ffc94803c08ffcbecb798fa58e786bebffbab02da5458f68d0ecb0

----------------------------------------

TITLE: Helm Lint Command Options
DESCRIPTION: Available command-line options for customizing the helm lint behavior, including settings for values, validation, and output control.

LANGUAGE: bash
CODE:
  -h, --help                      help for lint
      --kube-version string       Kubernetes version used for capabilities and deprecation checks
      --quiet                     print only warnings and errors
      --set stringArray           set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --set-file stringArray      set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)
      --set-json stringArray      set JSON values on the command line (can specify multiple or separate values with commas: key1=jsonval1,key2=jsonval2)
      --set-literal stringArray   set a literal STRING value on the command line
      --set-string stringArray    set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)
      --skip-schema-validation    if set, disables JSON schema validation
      --strict                    fail on lint warnings
  -f, --values strings            specify values in a YAML file or a URL (can specify multiple)
      --with-subcharts            lint dependent charts

----------------------------------------

TITLE: Setting up Helm v3 and Checking Repository List
DESCRIPTION: Instructions for setting up Helm v3 alongside Helm v2 and verifying the initial empty repository list.

LANGUAGE: bash
CODE:
$ helm3 repo list
Error: no repositories to show

----------------------------------------

TITLE: Helm Dependency List Command Options in Bash
DESCRIPTION: These are the specific options for the 'helm dependency list' command. It includes help and maximum column width options.

LANGUAGE: bash
CODE:
  -h, --help                 help for list
      --max-col-width uint   maximum column width for output table (default 80)

----------------------------------------

TITLE: Setting Up Permanent Helm Completions for Bash on Linux
DESCRIPTION: This command sets up permanent Helm completions for bash on Linux systems. It generates the autocompletion script and saves it to the system-wide bash completion directory.

LANGUAGE: bash
CODE:
helm completion bash > /etc/bash_completion.d/helm

----------------------------------------

TITLE: Installing Helm Zsh Completions Permanently
DESCRIPTION: Command to install Helm autocompletion script permanently for all new Zsh shell sessions.

LANGUAGE: bash
CODE:
helm completion zsh > "${fpath[1]}/_helm"

----------------------------------------

TITLE: Inherited Command Options
DESCRIPTION: Global options inherited from parent commands, including Kubernetes cluster configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Verifying Deployment with kubectl
DESCRIPTION: Shows how to verify the installed chart's deployment using kubectl.

LANGUAGE: bash
CODE:
$ kubectl get deployments

----------------------------------------

TITLE: Inherited Command Options
DESCRIPTION: Global options inherited from parent commands, including Kubernetes cluster configuration, authentication, and Helm repository settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Helm Fish Completion Options
DESCRIPTION: Available flags specific to the fish completion command.

LANGUAGE: plaintext
CODE:
  -h, --help              help for fish
      --no-descriptions   disable completion descriptions

----------------------------------------

TITLE: Setting Up Permanent Helm Completions for Bash on MacOS
DESCRIPTION: This command sets up permanent Helm completions for bash on MacOS systems. It generates the autocompletion script and saves it to the local bash completion directory.

LANGUAGE: bash
CODE:
helm completion bash > /usr/local/etc/bash_completion.d/helm

----------------------------------------

TITLE: Debugging Object Types in Helm Templates
DESCRIPTION: This snippet demonstrates how to use the printf function to debug an object's type in a Helm template. It also mentions the typeOf and kindOf functions for type checking.

LANGUAGE: go
CODE:
printf "%T"

----------------------------------------

TITLE: Helm Get Notes Inherited Options
DESCRIPTION: Global options inherited from parent commands that can be used with get notes

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global Helm options that apply to all commands including completion.

LANGUAGE: plaintext
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Creating Image Pull Secrets in Helm Charts
DESCRIPTION: Demonstrates how to create a helper template to compose a Docker configuration file for use as an image pull secret payload in a Kubernetes Secret manifest.

LANGUAGE: yaml
CODE:
{{- define "imagePullSecret" }}
{{- with .Values.imageCredentials }}
{{- printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"email\":\"%s\",\"auth\":\"%s\"}}}" .registry .username .password .email (printf "%s:%s" .username .password | b64enc) | b64enc }}
{{- end }}
{{- end }}

----------------------------------------

TITLE: Using the Default Function in Helm Templates
DESCRIPTION: Demonstrates how to use the default function to provide fallback values in Helm templates when a value is not specified.

LANGUAGE: yaml
CODE:
drink: {{ .Values.favorite.drink | default "tea" | quote }}

----------------------------------------

TITLE: Inherited Helm Command Options
DESCRIPTION: Global options inherited from parent commands that can be used with the lint command, including Kubernetes configuration and authentication settings.

LANGUAGE: bash
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --qps float32                     queries per second used when communicating with the Kubernetes API, not including bursting
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the directory containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Executing Helm Fish Completion Command
DESCRIPTION: Basic command syntax for generating Fish shell autocompletion script for Helm.

LANGUAGE: bash
CODE:
helm completion fish [flags]

----------------------------------------

TITLE: Quoting Strings in Helm Templates
DESCRIPTION: Illustrates the proper way to quote string data in Helm templates to ensure safety.

LANGUAGE: yaml
CODE:
name: {{ .Values.MyName | quote }}

----------------------------------------

TITLE: Adding a Template Directive to ConfigMap
DESCRIPTION: Shows how to modify the ConfigMap template to include a template directive for dynamic naming.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"

----------------------------------------

TITLE: Retrieving Installed Helm Chart Manifest
DESCRIPTION: Demonstrates how to retrieve the manifest of an installed Helm chart using the helm get manifest command.

LANGUAGE: console
CODE:
$ helm get manifest full-coral

---
# Source: mychart/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mychart-configmap
data:
  myvalue: "Hello World"

----------------------------------------

TITLE: Basic Helm PowerShell Completion Command
DESCRIPTION: Basic command syntax for generating PowerShell autocompletion script for Helm.

LANGUAGE: bash
CODE:
helm completion powershell [flags]

----------------------------------------

TITLE: Generating Updated index.yaml for Helm Chart Repository
DESCRIPTION: Uses the Helm CLI to generate an updated index.yaml file for the chart repository. This command indexes the charts in the specified directory and sets the remote repository URL.

LANGUAGE: console
CODE:
$ helm repo index fantastic-charts/ --url https://fantastic-charts.storage.googleapis.com

----------------------------------------

TITLE: ConfigMap with Nested Values Reference
DESCRIPTION: Template showing how to access nested values from the values.yaml structure.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favorite.drink }}
  food: {{ .Values.favorite.food }}

----------------------------------------

TITLE: Defining a Named Template with Scope in Helm
DESCRIPTION: Demonstrates how to define a template that includes chart-specific information, requiring a scope to be passed when used.

LANGUAGE: yaml
CODE:
{{/* Generate basic labels */}}
{{- define "mychart.labels" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
    chart: {{ .Chart.Name }}
    version: {{ .Chart.Version }}
{{- end }}

----------------------------------------

TITLE: Initial Git Commit for Helm Project
DESCRIPTION: The first Git commit that marked the creation of the Helm project at Deis, showing the initial commit hash, author, and timestamp from October 19, 2015.

LANGUAGE: git
CODE:
commit ecad6e2ef9523a0218864ec552bbfc724f0b9d3d
Author: Matt Butcher <mbutcher@engineyard.com>
Date:   Mon Oct 19 17:43:26 2015 -0600

    initial add

----------------------------------------

TITLE: Managing Helm Plugins in Bash
DESCRIPTION: Commands for installing, listing, updating, and uninstalling Helm plugins. These operations allow users to extend Helm's functionality with custom plugins.

LANGUAGE: bash
CODE:
helm plugin install <path/url>      # Install plugins
helm plugin list                    # View a list of all installed plugins
helm plugin update <plugin>         # Update plugins
helm plugin uninstall <plugin>      # Uninstall a plugin

----------------------------------------

TITLE: Basic YAML Collections Example
DESCRIPTION: Demonstrates the two main collection types in YAML: maps and sequences.

LANGUAGE: yaml
CODE:
map:
  one: 1
  two: 2
  three: 3

sequence:
  - one
  - two
  - three

----------------------------------------

TITLE: Overriding Subchart Values in Parent Chart
DESCRIPTION: YAML configuration in the parent chart's values.yaml to override subchart values.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

----------------------------------------

TITLE: Loading Helm Zsh Completions for Current Session
DESCRIPTION: Command to generate and load Helm autocompletion script for the current Zsh shell session.

LANGUAGE: bash
CODE:
source <(helm completion zsh)

----------------------------------------

TITLE: Configuring Helm v2 Repository Settings in YAML
DESCRIPTION: YAML configuration block defining the repository settings for Helm v2, including the URL path, name identifier, GitHub repository URL, and target branch.

LANGUAGE: yaml
CODE:
url: "helm/v2"
name: "helm/v2"
repoURL: "https://github.com/helm/helm"
branch: "dev-v2"

----------------------------------------

TITLE: Downloading Helm Release Candidate for Testing (Linux/macOS)
DESCRIPTION: Wget command to download the Helm release candidate tarball for testing on Linux or macOS.

LANGUAGE: shell
CODE:
wget https://get.helm.sh/helm-$RELEASE_CANDIDATE_NAME-linux-amd64.tar.gz

----------------------------------------

TITLE: Helm Zsh Completion Command Options
DESCRIPTION: Available flags specific to the zsh completion command including help and description toggle.

LANGUAGE: bash
CODE:
  -h, --help              help for zsh
      --no-descriptions   disable completion descriptions

----------------------------------------

TITLE: Overriding Subchart Values in Parent Chart
DESCRIPTION: YAML configuration in the parent chart's values.yaml to override the subchart's 'dessert' value and set other values.

LANGUAGE: yaml
CODE:
favorite:
  drink: coffee
  food: pizza
pizzaToppings:
  - mushrooms
  - cheese
  - peppers
  - onions

mysubchart:
  dessert: ice cream

----------------------------------------

TITLE: Creating Local Chart Repository Directory in Console
DESCRIPTION: Creates a local directory for chart storage and moves a packaged chart into it. This step sets up the local repository structure for synchronization.

LANGUAGE: console
CODE:
$ mkdir fantastic-charts
$ mv alpine-0.1.0.tgz fantastic-charts/

----------------------------------------

TITLE: Helm PowerShell Completion Options
DESCRIPTION: Available flags specific to the PowerShell completion command.

LANGUAGE: bash
CODE:
  -h, --help              help for powershell
      --no-descriptions   disable completion descriptions

----------------------------------------

TITLE: Accessing Global Values in Subchart Template
DESCRIPTION: YAML template showing how to access both subchart-specific and global values in a subchart's ConfigMap.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Creating a Subchart in Helm
DESCRIPTION: Commands to create a new subchart named 'mysubchart' within the 'mychart' parent chart and remove default templates.

LANGUAGE: console
CODE:
$ cd mychart/charts
$ helm create mysubchart
Creating mysubchart
$ rm -rf mysubchart/templates/*

----------------------------------------

TITLE: Installing Helm via Apt on Debian/Ubuntu
DESCRIPTION: Installs Helm using the Apt package manager on Debian/Ubuntu systems, including adding the repository and GPG key.

LANGUAGE: console
CODE:
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

----------------------------------------

TITLE: Accessing Global Values in Subchart Template
DESCRIPTION: YAML template showing how to access both subchart-specific and global values in a subchart's ConfigMap.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Map Structure for Values
DESCRIPTION: Shows different approaches to structuring server data, with the map structure being more suitable for --set operations.

LANGUAGE: yaml
CODE:
servers:
  - name: foo
    port: 80
  - name: bar
    port: 81

LANGUAGE: yaml
CODE:
servers:
  foo:
    port: 80
  bar:
    port: 81

----------------------------------------

TITLE: Available Options for Helm Show CRDs Command
DESCRIPTION: This snippet lists the available options for the 'helm show crds' command. These options allow users to customize various aspects of the command execution, such as specifying certificates, enabling development versions, and setting authentication credentials.

LANGUAGE: shell
CODE:
      --ca-file string             verify certificates of HTTPS-enabled servers using this CA bundle
      --cert-file string           identify HTTPS client using this SSL certificate file
      --devel                      use development versions, too. Equivalent to version '>0.0.0-0'. If --version is set, this is ignored
  -h, --help                       help for crds
      --insecure-skip-tls-verify   skip tls certificate checks for the chart download
      --key-file string            identify HTTPS client using this SSL key file
      --keyring string             location of public keys used for verification (default "~/.gnupg/pubring.gpg")
      --pass-credentials           pass credentials to all domains
      --password string            chart repository password where to locate the requested chart
      --repo string                chart repository url where to locate the requested chart
      --username string            chart repository username where to locate the requested chart
      --verify                     verify the package before using it
      --version string             specify a version constraint for the chart version to use. This constraint can be a specific tag (e.g. 1.1.1) or it may reference a valid range (e.g. ^2.0.0). If this is not specified, the latest version is used

----------------------------------------

TITLE: Displaying Helm Command Help
DESCRIPTION: This command shows the help text for a specific Helm command (in this case, the 'get' command), providing information on its usage and available options.

LANGUAGE: console
CODE:
$ helm get -h

----------------------------------------

TITLE: Accessing Global Values in Parent Chart Template
DESCRIPTION: YAML template demonstrating how to access global values in a parent chart's ConfigMap.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Accessing Global Values in Parent Chart Template
DESCRIPTION: YAML template demonstrating how to access global values in a parent chart's ConfigMap.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Installing Subchart in Helm (Dry Run)
DESCRIPTION: Command to perform a dry run installation of a Helm subchart and view the output.

LANGUAGE: console
CODE:
$ helm install --generate-name --dry-run --debug mychart/charts/mysubchart

----------------------------------------

TITLE: Running Helm Website Locally
DESCRIPTION: Command to compile and serve the Helm website locally using Hugo static site generator.

LANGUAGE: bash
CODE:
hugo serve

----------------------------------------

TITLE: Configuring GitHub Actions Workflow for Chart Releaser
DESCRIPTION: YAML configuration for a GitHub Actions workflow that uses the Chart Releaser Action to automatically release Helm charts. It runs on pushes to the main branch, configures Git, and executes the chart-releaser action.

LANGUAGE: yaml
CODE:
name: Release Charts

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

----------------------------------------

TITLE: Setting Values for Subchart in Helm
DESCRIPTION: YAML configuration for setting values in a subchart's values.yaml file.

LANGUAGE: yaml
CODE:
dessert: cake

----------------------------------------

TITLE: OCI Image Manifest Structure for Helm Charts
DESCRIPTION: Example JSON structure showing how a Helm chart is represented as an OCI artifact, including config and layers with their associated media types, sizes, and digests.

LANGUAGE: json
CODE:
{
  "schemaVersion": 2,
  "config": {
    "mediaType": "application/vnd.cncf.helm.config.v1+json",
    "digest": "sha256:8ec7c0f2f6860037c19b54c3cfbab48d9b4b21b485a93d87b64690fdb68c2111",
    "size": 117
  },
  "layers": [
    {
      "mediaType": "application/vnd.cncf.helm.chart.content.v1.tar+gzip",
      "digest": "sha256:1b251d38cfe948dfc0a5745b7af5ca574ecb61e52aed10b19039db39af6e1617",
      "size": 2487
    },
    {
      "mediaType": "application/vnd.cncf.helm.chart.provenance.v1.prov",
      "digest": "sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a",
      "size": 643
    }
  ]
}

----------------------------------------

TITLE: Automatically Rolling Deployments in Helm Charts
DESCRIPTION: Shows how to use the sha256sum function to ensure a deployment's annotation section is updated if a ConfigMap or Secret changes, triggering a rolling update.

LANGUAGE: yaml
CODE:
kind: Deployment
spec:
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
[...]

----------------------------------------

TITLE: Creating ConfigMap Template for Subchart in Helm
DESCRIPTION: YAML template for creating a ConfigMap in a Helm subchart.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}

----------------------------------------

TITLE: Creating Final Release Tag for Helm
DESCRIPTION: Git commands to create and push the final release tag for Helm.

LANGUAGE: shell
CODE:
git checkout $RELEASE_BRANCH_NAME
git tag --sign --annotate "${RELEASE_NAME}" --message "Helm release ${RELEASE_NAME}"
git push upstream $RELEASE_NAME

----------------------------------------

TITLE: Setting ConfigMap Storage Backend for Helm
DESCRIPTION: Illustrates how to set the HELM_DRIVER environment variable to use the ConfigMap storage backend instead of the default Secret backend.

LANGUAGE: shell
CODE:
export HELM_DRIVER=configmap

----------------------------------------

TITLE: Preventing Resource Uninstallation in Helm Charts
DESCRIPTION: Demonstrates how to add an annotation to a resource to prevent Helm from uninstalling it during operations like helm uninstall, upgrade, or rollback.

LANGUAGE: yaml
CODE:
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
[...]

----------------------------------------

TITLE: Installing Helm Website Dependencies
DESCRIPTION: Commands for installing Hugo static site generator and project dependencies using Homebrew and Yarn package managers.

LANGUAGE: bash
CODE:
brew install hugo
yarn install

----------------------------------------

TITLE: Downloading Helm Release Candidate for Testing (Windows)
DESCRIPTION: PowerShell command to download the Helm release candidate zip file for testing on Windows.

LANGUAGE: shell
CODE:
PS C:\> Invoke-WebRequest -Uri "https://get.helm.sh/helm-$RELEASE_CANDIDATE_NAME-windows-amd64.tar.gz" -OutFile "helm-$ReleaseCandidateName-windows-amd64.tar.gz"

----------------------------------------

TITLE: Kubeconfig Export for Kubeadm
DESCRIPTION: Environment variable export command required for some versions of Helm when using kubeadm

LANGUAGE: bash
CODE:
export KUBECONFIG=/etc/kubernetes/admin.conf

----------------------------------------

TITLE: Checking Helm Release Status
DESCRIPTION: This command checks the status of a specific Helm release, even after it has been uninstalled (if the --keep-history flag was used during uninstallation).

LANGUAGE: console
CODE:
$ helm status mysql-1612624192

----------------------------------------

TITLE: Language Configuration Example - TOML
DESCRIPTION: TOML configuration example showing how to add Korean language support to the Helm documentation site configuration.

LANGUAGE: toml
CODE:
# Korean
[languages.ko]
title = "Helm"
description = "Helm - The Kubernetes Package Manager."
contentDir = "content/ko"
languageName = "한국어 Korean"
weight = 1

----------------------------------------

TITLE: Creating Release Candidate Tag for Helm Release
DESCRIPTION: Git commands to create and push a signed, annotated tag for a Helm release candidate.

LANGUAGE: shell
CODE:
git tag --sign --annotate "${RELEASE_CANDIDATE_NAME}" --message "Helm release ${RELEASE_CANDIDATE_NAME}"
git push upstream $RELEASE_CANDIDATE_NAME

----------------------------------------

TITLE: Managing Helm Charts
DESCRIPTION: Commands for creating, packaging, linting, inspecting, and managing dependencies of Helm charts.

LANGUAGE: bash
CODE:
helm create <name>
helm package <chart-path>
helm lint <chart>
helm show all <chart>
helm show values <chart>
helm pull <chart>
helm pull <chart> --untar=true
helm pull <chart> --verify
helm pull <chart> --version <number>
helm dependency list <chart>

----------------------------------------

TITLE: Creating Korean Documentation Directory Structure - Shell
DESCRIPTION: Shell commands demonstrating how to create the directory structure and copy files for translating Helm documentation into Korean.

LANGUAGE: sh
CODE:
mkdir -p content/ko/docs/intro
cp content/en/docs/intro/install.md content/ko/docs/intro/install.md

----------------------------------------

TITLE: Monitoring Helm Releases
DESCRIPTION: Commands for listing, filtering, and checking the status of Helm releases across different namespaces and states.

LANGUAGE: bash
CODE:
helm list
helm list -all
helm list -all-namespaces
helm list -l key1=value1,key2=value2
helm list --date
helm list --deployed
helm list --pending
helm list --failed
helm list --uninstalled
helm list --superseded
helm list -o yaml
helm status <release>
helm status <release> --revision <number>
helm history <release>
helm env

----------------------------------------

TITLE: Importing Keybase Keys for Helm Chart Signing
DESCRIPTION: Shows the process of importing Keybase.io keys into the local GnuPG keyring for use in signing Helm charts.

LANGUAGE: console
CODE:
$ keybase pgp export -s | gpg --import
$ gpg --list-secret-keys

----------------------------------------

TITLE: Defining Helm Project Settings in YAML
DESCRIPTION: This YAML snippet defines the core settings for the Helm project, including the project name, the GitHub repository URL, and the main branch to be used.

LANGUAGE: yaml
CODE:
---
name: "helm"
repoURL: "https://github.com/helm/helm"
branch: "main"
---

----------------------------------------

TITLE: Managing Helm Plugins
DESCRIPTION: Commands for installing, listing, updating, and uninstalling Helm plugins.

LANGUAGE: bash
CODE:
helm plugin install <path/url1>
helm plugin list
helm plugin update <plugin>
helm plugin uninstall <plugin>

----------------------------------------

TITLE: Accessing Global Values in Parent Chart Template
DESCRIPTION: YAML template for a ConfigMap in the parent chart, demonstrating how to access the global 'salad' value.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Displaying Git Commit Log Example in Markdown
DESCRIPTION: This code block shows an example of a properly formatted git commit log with author information and sign-off.

LANGUAGE: markdown
CODE:
```
Author: Joe Smith <joe.smith@example.com>
Date:   Thu Feb 2 11:41:15 2018 -0800

    Update README

    Signed-off-by: Joe Smith <joe.smith@example.com>
```

----------------------------------------

TITLE: Creating ConfigMap Template for Subchart in Helm
DESCRIPTION: YAML template for a ConfigMap in the subchart, using the 'dessert' value from the subchart's values.yaml.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}

----------------------------------------

TITLE: Accessing Global Values in Subchart Template
DESCRIPTION: YAML template for a ConfigMap in the subchart, showing how to access both local 'dessert' value and global 'salad' value.

LANGUAGE: yaml
CODE:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-cfgmap2
data:
  dessert: {{ .Values.dessert }}
  salad: {{ .Values.global.salad }}

----------------------------------------

TITLE: Helm Installation Script Reference
DESCRIPTION: Reference to the Helm installation script location that can be used with curl to install Helm. The script is located in the repository under scripts/get-helm-3.

LANGUAGE: bash
CODE:
scripts/get-helm-3

----------------------------------------

TITLE: Running Helm Go SDK Examples
DESCRIPTION: Command to execute the Helm Go SDK examples from the helm-www/sdkexamples directory. This command runs all Go files in the current directory and its subdirectories.

LANGUAGE: bash
CODE:
# cd helm-www/sdkexamples
$ go run ./...

----------------------------------------

TITLE: Defining Shared Template in Helm
DESCRIPTION: YAML snippet demonstrating how to define a simple shared template that can be used across charts.

LANGUAGE: yaml
CODE:
{{- define "labels" }}from: mychart{{ end }}

----------------------------------------

TITLE: Executing Helm Package Command in Shell
DESCRIPTION: Basic usage of the 'helm package' command to package a chart directory. The command accepts an optional chart path and additional flags.

LANGUAGE: shell
CODE:
helm package [CHART_PATH] [...] [flags]

----------------------------------------

TITLE: Helm 插件列表命令继承选项
DESCRIPTION: 这些是从父命令继承的选项，包括各种 Kubernetes 集群配置、命名空间设置、仓库配置等。这些选项可以用来自定义命令的执行环境和行为。

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the file containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")

----------------------------------------

TITLE: Inherited Helm Command Flags
DESCRIPTION: Flags inherited from parent commands that can be used with 'helm pull'. These flags provide additional configuration options for Kubernetes API server connection, authentication, and Helm-specific settings.

LANGUAGE: shell
CODE:
      --burst-limit int                 client-side default throttling limit (default 100)
      --debug                           enable verbose output
      --kube-apiserver string           the address and the port for the Kubernetes API server
      --kube-as-group stringArray       group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --kube-as-user string             username to impersonate for the operation
      --kube-ca-file string             the certificate authority file for the Kubernetes API server connection
      --kube-context string             name of the kubeconfig context to use
      --kube-insecure-skip-tls-verify   if true, the Kubernetes API server's certificate will not be checked for validity. This will make your HTTPS connections insecure
      --kube-tls-server-name string     server name to use for Kubernetes API server certificate validation. If it is not provided, the hostname used to contact the server is used
      --kube-token string               bearer token used for authentication
      --kubeconfig string               path to the kubeconfig file
  -n, --namespace string                namespace scope for this request
      --registry-config string          path to the registry config file (default "~/.config/helm/registry/config.json")
      --repository-cache string         path to the file containing cached repository indexes (default "~/.cache/helm/repository")
      --repository-config string        path to the file containing repository names and URLs (default "~/.config/helm/repositories.yaml")