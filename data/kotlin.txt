TITLE: Defining Functions in Kotlin
DESCRIPTION: Illustrates different ways to define functions in Kotlin, including with explicit return types, expression bodies, and Unit return type.

LANGUAGE: kotlin
CODE:
fun sum(a: Int, b: Int): Int {
    return a + b
}

LANGUAGE: kotlin
CODE:
fun sum(a: Int, b: Int) = a + b

LANGUAGE: kotlin
CODE:
fun printSum(a: Int, b: Int): Unit {
    println("sum of $a and $b is ${a + b}")
}

LANGUAGE: kotlin
CODE:
fun printSum(a: Int, b: Int) {
    println("sum of $a and $b is ${a + b}")
}

----------------------------------------

TITLE: Using Tail Recursion in Kotlin Functions
DESCRIPTION: Shows how to use the tailrec modifier for tail-recursive functions in Kotlin, allowing for efficient recursive algorithms without stack overflow risks.

LANGUAGE: kotlin
CODE:
val eps = 1E-10 // "good enough", could be 10^-15

tailrec fun findFixPoint(x: Double = 1.0): Double =
    if (Math.abs(x - Math.cos(x)) < eps) x else findFixPoint(Math.cos(x))

// Equivalent traditional style:
val eps = 1E-10 // "good enough", could be 10^-15

private fun findFixPoint(): Double {
    var x = 1.0
    while (true) {
        val y = Math.cos(x)
        if (Math.abs(x - y) < eps) return x
        x = Math.cos(x)
    }
}

----------------------------------------

TITLE: Defining and Using Extension Functions in Kotlin
DESCRIPTION: Demonstrates how to create an extension function 'swap' for MutableList<Int> and use it. Also shows how to make the function generic for any MutableList<T>.

LANGUAGE: kotlin
CODE:
fun MutableList<Int>.swap(index1: Int, index2: Int) {
    val tmp = this[index1] // 'this' corresponds to the list
    this[index1] = this[index2]
    this[index2] = tmp
}

val list = mutableListOf(1, 2, 3)
list.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'list'

LANGUAGE: kotlin
CODE:
fun <T> MutableList<T>.swap(index1: Int, index2: Int) {
    val tmp = this[index1] // 'this' corresponds to the list
    this[index1] = this[index2]
    this[index2] = tmp
}

----------------------------------------

TITLE: Handling Nullable Values in Kotlin
DESCRIPTION: Demonstrates how to work with nullable types and perform null checks in Kotlin.

LANGUAGE: kotlin
CODE:
fun parseInt(str: String): Int? {
    return str.toIntOrNull()
}

fun printProduct(arg1: String, arg2: String) {
    val x = parseInt(arg1)
    val y = parseInt(arg2)

    if (x != null && y != null) {
        println(x * y)
    }
    else {
        println("'$arg1' or '$arg2' is not a number")
    }    
}

----------------------------------------

TITLE: Implementing a Higher-Order Function in Kotlin
DESCRIPTION: This snippet demonstrates the implementation of the 'fold' higher-order function for collections in Kotlin. It takes an initial accumulator value and a combining function, then applies the function to each element in the collection.

LANGUAGE: kotlin
CODE:
fun <T, R> Collection<T>.fold(
    initial: R, 
    combine: (acc: R, nextElement: T) -> R
): R {
    var accumulator: R = initial
    for (element: T in this) {
        accumulator = combine(accumulator, element)
    }
    return accumulator
}

----------------------------------------

TITLE: Working with Collections in Kotlin
DESCRIPTION: Shows how to iterate over collections, check for membership, and use lambda expressions for filtering and mapping in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    val items = listOf("apple", "banana", "kiwifruit")
    for (item in items) {
        println(item)
    }
}

LANGUAGE: kotlin
CODE:
fun main() {
    val fruits = listOf("banana", "avocado", "apple", "kiwifruit")
    fruits
      .filter { it.startsWith("a") }
      .sortedBy { it }
      .map { it.uppercase() }
      .forEach { println(it) }
}

----------------------------------------

TITLE: Printing Hello World in Kotlin
DESCRIPTION: A simple Kotlin program that prints 'Hello, world!' to the console. It demonstrates the basic structure of a Kotlin program with the main() function.

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello, world!")
    // Hello, world!
}

----------------------------------------

TITLE: Demonstrating Function Types and Invocation in Kotlin
DESCRIPTION: This code snippet illustrates the usage of function types in Kotlin, including how to declare variables of function types and invoke them. It also shows the interchangeability of function types with and without receivers.

LANGUAGE: kotlin
CODE:
fun main() {
    val repeatFun: String.(Int) -> String = { times -> this.repeat(times) }
    val twoParameters: (String, Int) -> String = repeatFun
    
    fun runTransformation(f: (String, Int) -> String): String {
        return f("hello", 3)
    }
    val result = runTransformation(repeatFun)
    
    println("result = $result")
}

----------------------------------------

TITLE: Defining Packages and Imports in Kotlin
DESCRIPTION: Demonstrates how to specify a package and import dependencies at the top of a Kotlin source file.

LANGUAGE: kotlin
CODE:
package my.demo

import kotlin.text.*

// ...

----------------------------------------

TITLE: Defining Data Class, Singleton Object, and Main Function in Kotlin
DESCRIPTION: This snippet demonstrates the creation of a data class 'Employee', a singleton object 'MyCompany', and a main function that utilizes both. It highlights Kotlin's concise syntax for creating classes with automatically generated methods and object declarations for singletons.

LANGUAGE: kotlin
CODE:
data class Employee(
   val name: String,
   val email: String,
   val company: String
) // + automatically generated equals(), hashCode(), toString(), and copy()

object MyCompany {                                // A singleton
   const val name: String = "MyCompany"
}

fun main() {                                      // Function at the top level
   val employee = Employee("Alice",               // No `new` keyword
      "alice@mycompany.com", MyCompany.name)
   println(employee)
}

----------------------------------------

TITLE: Elvis Operator in Kotlin
DESCRIPTION: Shows how to use the Elvis operator ?: to provide default values for null cases

LANGUAGE: kotlin
CODE:
fun main() {
    val b: String? = null
    val l = b?.length ?: 0
    println(l)
}

----------------------------------------

TITLE: Checking for Null Values in Kotlin
DESCRIPTION: Shows how to safely check for null values using conditional expressions. The function demonstrates proper null handling with an if-else statement.

LANGUAGE: kotlin
CODE:
fun describeString(maybeString: String?): String {
    if (maybeString != null && maybeString.length > 0) {
        return "String of length ${maybeString.length}"
    } else {
        return "Empty or null string"
    }
}

fun main() {
    val nullString: String? = null
    println(describeString(nullString))
}

----------------------------------------

TITLE: Creating a Main Function Entry Point in Kotlin
DESCRIPTION: Shows two ways to define the main function as the entry point of a Kotlin application, with and without command-line arguments.

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello world!")
}

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    println(args.contentToString())
}

----------------------------------------

TITLE: Variable Declaration and Initialization in Kotlin
DESCRIPTION: Shows how to declare variables without initialization, initialize them later, and declare variables with explicit types. Demonstrates that variables must be initialized before they are read.

LANGUAGE: kotlin
CODE:
fun main() {
    // Variable declared without initialization
    val d: Int
    // Variable initialized
    d = 3

    // Variable explicitly typed and initialized
    val e: String = "hello"

    // Variables can be read because they have been initialized
    println(d) // 3
    println(e) // hello
}

----------------------------------------

TITLE: Defining Abstract Class, Interface, and Concrete Class in Kotlin
DESCRIPTION: This snippet defines an abstract Person class, a FoodConsumer interface, and a RestaurantCustomer class that inherits from Person and implements FoodConsumer. It demonstrates abstract method implementation, interface implementation, and usage of default interface methods.

LANGUAGE: kotlin
CODE:
abstract class Person(val name: String) {
    abstract fun greet()
}

interface FoodConsumer {
    fun eat()
    fun pay(amount: Int) = println("Delicious! Here's $amount bucks!")
}

class RestaurantCustomer(name: String, val dish: String) : Person(name), FoodConsumer {
    fun order() = println("$dish, please!")
    override fun eat() = println("*Eats $dish*")
    override fun greet() = println("It's me, $name.")
}

fun main() {
    val sam = RestaurantCustomer("Sam", "Mixed salad")
    sam.greet() // An implementation of an abstract function
    sam.order() // A member function
    sam.eat()   // An implementation of an interface function
    sam.pay(10) // A default implementation in an interface
}

----------------------------------------

TITLE: Declaring a Basic Kotlin Class
DESCRIPTION: Demonstrates how to declare a simple class in Kotlin using the 'class' keyword.

LANGUAGE: kotlin
CODE:
class Customer

----------------------------------------

TITLE: Basic Class Declaration in Kotlin
DESCRIPTION: Demonstrates the basic syntax for declaring a class in Kotlin, showing both a simple class with a body and an empty class declaration.

LANGUAGE: kotlin
CODE:
class Person { /*...*/ }

LANGUAGE: kotlin
CODE:
class Empty

----------------------------------------

TITLE: Defining Basic Data Class in Kotlin
DESCRIPTION: Shows how to declare a simple data class with two properties. The compiler automatically generates equals(), hashCode(), toString(), componentN(), and copy() functions for properties in the primary constructor.

LANGUAGE: kotlin
CODE:
data class User(val name: String, val age: Int)

----------------------------------------

TITLE: Constructor Declaration in Kotlin
DESCRIPTION: Shows different ways to declare constructors in Kotlin, including with and without the constructor keyword.

LANGUAGE: kotlin
CODE:
class Person constructor(firstName: String) { /*...*/ }

LANGUAGE: kotlin
CODE:
class Person(firstName: String) { /*...*/ }

----------------------------------------

TITLE: Basic Kotlin Function Declaration
DESCRIPTION: Demonstrates the basic syntax for declaring and calling a simple function in Kotlin using the fun keyword.

LANGUAGE: kotlin
CODE:
fun hello() {
    return println("Hello, world!")
}

fun main() {
    hello()
    // Hello, world!
}

----------------------------------------

TITLE: Performing Type Checks and Automatic Casts in Kotlin
DESCRIPTION: Shows how to use the 'is' operator for type checking and how Kotlin performs automatic smart casts.

LANGUAGE: kotlin
CODE:
fun getStringLength(obj: Any): Int? {
    if (obj is String) {
        return obj.length
    }
    return null
}

----------------------------------------

TITLE: Declaring a Basic Kotlin Function
DESCRIPTION: Demonstrates the basic syntax for declaring a function in Kotlin using the 'fun' keyword, specifying parameters and return type.

LANGUAGE: kotlin
CODE:
fun double(x: Int): Int {
    return 2 * x
}

----------------------------------------

TITLE: Demonstrating Map Operations in Kotlin
DESCRIPTION: This snippet shows basic Map operations such as accessing keys and values, checking for key/value presence, and using the containsValue() function.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key4" to 1)
    
    println("All keys: ${numbersMap.keys}")
    println("All values: ${numbersMap.values}")
    if ("key2" in numbersMap) println("Value by key \"key2\": ${numbersMap["key2"]}")
    if (1 in numbersMap.values) println("The value 1 is in the map")
    if (numbersMap.containsValue(1)) println("The value 1 is in the map") // same as previous
}

----------------------------------------

TITLE: Demonstrating Non-Nullable Types in Kotlin
DESCRIPTION: Shows how Kotlin handles non-nullable String types and prevents null assignment

LANGUAGE: kotlin
CODE:
fun main() {
    var a: String = "abc"
    a = null
    print(a)
}

----------------------------------------

TITLE: Custom Property Accessors in Kotlin
DESCRIPTION: Demonstrates implementation of custom getter for a computed property in a Rectangle class.

LANGUAGE: kotlin
CODE:
class Rectangle(val width: Int, val height: Int) {
    val area: Int
        get() = this.width * this.height
}

----------------------------------------

TITLE: Using ArrayDeque in Kotlin
DESCRIPTION: This snippet demonstrates the usage of ArrayDeque as a double-ended queue, showing operations like addFirst, addLast, removeFirst, and removeLast.

LANGUAGE: kotlin
CODE:
fun main() {
    val deque = ArrayDeque(listOf(1, 2, 3))

    deque.addFirst(0)
    deque.addLast(4)
    println(deque) // [0, 1, 2, 3, 4]

    println(deque.first()) // 0
    println(deque.last()) // 4

    deque.removeFirst()
    deque.removeLast()
    println(deque) // [1, 2, 3]
}

----------------------------------------

TITLE: Safe Call Operator Usage in Kotlin
DESCRIPTION: Demonstrates the safe call operator ?. for handling nullable properties

LANGUAGE: kotlin
CODE:
fun main() {
    val a: String? = "Kotlin"
    val b: String? = null
    println(a?.length)
    println(b?.length)
}

----------------------------------------

TITLE: Declaring Variables in Kotlin
DESCRIPTION: Demonstrates how to declare and initialize variables in Kotlin using val for read-only variables and var for mutable variables.

LANGUAGE: kotlin
CODE:
val x: Int = 5

LANGUAGE: kotlin
CODE:
var x: Int = 5
x += 1

LANGUAGE: kotlin
CODE:
val x = 5

LANGUAGE: kotlin
CODE:
val x = 5
val c: Int
c = 3

----------------------------------------

TITLE: Creating Spring Boot REST API with Kotlin
DESCRIPTION: Demonstrates building a simple REST API using Kotlin and Spring Boot framework. Includes a data class definition and controller implementation that returns a list of messages.

LANGUAGE: kotlin
CODE:
@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
   runApplication<DemoApplication>(*args)
}

@RestController
class MessageResource {
   @GetMapping
   fun index(): List<Message> = listOf(
      Message("1", "Hello!"),
      Message("2", "Bonjour!"),
      Message("3", "Privet!"),
   )
}

data class Message(val id: String?, val text: String)

----------------------------------------

TITLE: Using When Expression in Kotlin
DESCRIPTION: Shows how to use the when expression for multi-way branching in Kotlin.

LANGUAGE: kotlin
CODE:
fun describe(obj: Any): String =
    when (obj) {
        1          -> "One"
        "Hello"    -> "Greeting"
        is Long    -> "Long"
        !is String -> "Not a string"
        else       -> "Unknown"
    }

----------------------------------------

TITLE: Using String Templates in Kotlin
DESCRIPTION: Shows how to use string templates with variable names and expressions.

LANGUAGE: kotlin
CODE:
fun main() {
    val i = 10
    println("i = $i") 
    val letters = listOf("a","b","c","d","e")
    println("Letters: $letters") 
}

LANGUAGE: kotlin
CODE:
fun main() {
    val s = "abc"
    println("$s.length is ${s.length}") 
}

----------------------------------------

TITLE: Declaring and Using a Kotlin Data Class
DESCRIPTION: Shows how to declare a data class in Kotlin and use its automatically generated functions like toString(), equals(), and copy().

LANGUAGE: kotlin
CODE:
data class User(val name: String, val id: Int)

fun main() {
    val user = User("Alex", 1)
    
    println(user)            
    
    val secondUser = User("Alex", 1)
    val thirdUser = User("Max", 2)

    println("user == secondUser: ${user == secondUser}") 
    println("user == thirdUser: ${user == thirdUser}")   
    
    println(user.copy())       
    println(user.copy("Max"))  
    println(user.copy(id = 3)) 
}

----------------------------------------

TITLE: Coroutine Implementation in Kotlin
DESCRIPTION: Shows how coroutines provide a clean, synchronous-looking way to write asynchronous code using the suspend keyword.

LANGUAGE: kotlin
CODE:
fun postItem(item: Item) {
    launch {
        val token = preparePost()
        val post = submitPost(token, item)
        processPost(post)
    }
}

suspend fun preparePost(): Token {
    // makes a request and suspends the coroutine
    return suspendCoroutine { /* ... */ } 
}

----------------------------------------

TITLE: Overriding Methods in Kotlin
DESCRIPTION: Illustrates how to override methods in Kotlin, emphasizing the need for explicit 'open' and 'override' modifiers.

LANGUAGE: kotlin
CODE:
open class Shape {
    open fun draw() { /*...*/ }
    fun fill() { /*...*/ }
}

class Circle() : Shape() {
    override fun draw() { /*...*/ }
}

----------------------------------------

TITLE: Declaring and Using Lists in Kotlin
DESCRIPTION: Demonstrates how to create read-only and mutable lists, access elements, and perform basic operations.

LANGUAGE: kotlin
CODE:
fun main() { 
    // Read only list
    val readOnlyShapes = listOf("triangle", "square", "circle")
    println(readOnlyShapes)
    // [triangle, square, circle]
    
    // Mutable list with explicit type declaration
    val shapes: MutableList<String> = mutableListOf("triangle", "square", "circle")
    println(shapes)
    // [triangle, square, circle]
}

----------------------------------------

TITLE: Implementing Basic Kotlin Program with Variables and Loops
DESCRIPTION: This snippet demonstrates key Kotlin features including variable declaration, string interpolation, and a for loop. It declares a string variable, prints a greeting using that variable, and then loops through numbers 0 to 10, printing each one.

LANGUAGE: kotlin
CODE:
fun main() {
    val name = "stranger"        // Declare your first variable
    println("Hi, $name!")        // ...and use it!
    print("Current count:")
    for (i in 0..10) {           // Loop over a range from 0 to 10
        print(" $i")
    }
}

----------------------------------------

TITLE: Using When Expressions in Kotlin
DESCRIPTION: Shows how to use when expressions in Kotlin for conditional branching, including with and without a subject, as expressions and statements, and with multiple conditions.

LANGUAGE: kotlin
CODE:
fun main() {
    val x = 2
    when (x) {
        1 -> print("x == 1")
        2 -> print("x == 2")
        else -> print("x is neither 1 nor 2")
    }
    // x == 2
}

----------------------------------------

TITLE: Iterating Through a Collection in Kotlin
DESCRIPTION: This snippet demonstrates how to create a function that prints all elements of a Collection<String>, and how to use it with both a List and a Set.

LANGUAGE: kotlin
CODE:
fun printAll(strings: Collection<String>) {
    for(s in strings) print("$s ")
    println()
}
    
fun main() {
    val stringList = listOf("one", "two", "one")
    printAll(stringList)
    
    val stringSet = setOf("one", "two", "three")
    printAll(stringSet)
}

----------------------------------------

TITLE: Using Safe Call Operator in Kotlin
DESCRIPTION: This Kotlin code demonstrates the use of the safe call operator (?.) to combine a null check and method call in a single operation.

LANGUAGE: kotlin
CODE:
// Kotlin
fun stringLength(a: String?): Int = a?.length ?: 0

----------------------------------------

TITLE: Declaring an Inheritable Class in Kotlin
DESCRIPTION: Shows how to make a Kotlin class open for inheritance using the 'open' keyword, as classes are final by default.

LANGUAGE: kotlin
CODE:
open class Base // Class is open for inheritance

----------------------------------------

TITLE: Creating Sets and Maps in Kotlin
DESCRIPTION: Demonstrates how to create sets and maps using standard library functions. It shows creating a set with elements, an empty mutable set, and a map with key-value pairs.

LANGUAGE: kotlin
CODE:
val numbersSet = setOf("one", "two", "three", "four")
val emptySet = mutableSetOf<String>()

val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key4" to 1)

----------------------------------------

TITLE: Creating and Using Maps in Kotlin
DESCRIPTION: Demonstrates how to create read-only and mutable maps, access values, and perform basic operations.

LANGUAGE: kotlin
CODE:
fun main() {
    // Read-only map
    val readOnlyJuiceMenu = mapOf("apple" to 100, "kiwi" to 190, "orange" to 100)
    println(readOnlyJuiceMenu)
    // {apple=100, kiwi=190, orange=100}

    // Mutable map with explicit type declaration
    val juiceMenu: MutableMap<String, Int> = mutableMapOf("apple" to 100, "kiwi" to 190, "orange" to 100)
    println(juiceMenu)
    // {apple=100, kiwi=190, orange=100}
}

----------------------------------------

TITLE: Creating Spring Boot Application Entry Point
DESCRIPTION: Main application class and entry point for the Spring Boot application, includes the @SpringBootApplication annotation and runApplication function call.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
    runApplication<DemoApplication>(*args)
}

----------------------------------------

TITLE: Demonstrating Kotlin Language Features
DESCRIPTION: This code snippet demonstrates various Kotlin language features including map traversal, destructuring declarations, nullable expressions, scope functions, and conditional value usage. It also includes helper functions and data structures to support the main examples.

LANGUAGE: kotlin
CODE:
fun main() {
   val map = mapOf(1 to "one", 2 to "two")
   for ((k, v) in map) {                            // Traverse a map or a list of pairs
       println("$k -> $v")
   }

   fun obtainKnowledge() = Pair("The Answer", 42)   // Single-expression functions

   val (description, answer) = obtainKnowledge()    // Destructure into a pair of two variables
   println("$description: $answer")
    
   getText()?.let {                                 // Apply an action to a nullable expression
      sendEmailTo("alice@example.com", it)          // if it's not null 
   }

   createEmptyWindow()
      .apply {                                    // Configure properties of an object
         width = 300
         height = 200
         isVisible = true
      }.also { w ->                               // Perform an additional operation on a call chain
         showWindow(w)
      }

   val fixedIssue = issueById["13456"]
       ?.takeIf { it.status == Status.FIXED }       // Use the value only if the condition is true
   println(fixedIssue)
}

data class Window(var width: Int, var height: Int, var isVisible: Boolean)

fun createEmptyWindow() = Window(0, 0, false)

fun showWindow(window: Window) {
   println("Showing $window")
}

fun getText(): String? = "Hi! You've won the lottery! Pay the attached bill to get the prize."
fun sendEmailTo(to: String, message: String) {
   println("Sending email to $to: \n$message")
}

enum class Status { OPEN, FIXED, IN_PROGRESS }
data class Issue(val status: Status)
val issueById = mutableMapOf(
   "13456" to Issue(Status.FIXED)
)

----------------------------------------

TITLE: Filtering by Type with filterIsInstance() in Kotlin
DESCRIPTION: Demonstrates the use of filterIsInstance() to filter elements of a specific type from a list of mixed types.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(null, 1, "two", 3.0, "four")
    println("All String elements in upper case:")
    numbers.filterIsInstance<String>().forEach {
        println(it.uppercase())
    }
}

----------------------------------------

TITLE: UI State Management with Sealed Classes in Kotlin
DESCRIPTION: Demonstrates using sealed classes for managing UI states in applications.

LANGUAGE: kotlin
CODE:
sealed class UIState { 
    data object Loading : UIState()
    data class Success(val data: String) : UIState()
    data class Error(val exception: Exception) : UIState()
}

fun updateUI(state: UIState) { 
    when (state) {
        is UIState.Loading -> showLoadingIndicator()
        is UIState.Success -> showData(state.data)
        is UIState.Error -> showError(state.exception) 
    }
}

----------------------------------------

TITLE: Mapping Collections in Kotlin
DESCRIPTION: Demonstrates the use of map(), mapIndexed(), mapNotNull(), and mapIndexedNotNull() functions for transforming collections. Also shows mapKeys() and mapValues() for transforming maps.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf(1, 2, 3)
    println(numbers.map { it * 3 })
    println(numbers.mapIndexed { idx, value -> value * idx })
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf(1, 2, 3)
    println(numbers.mapNotNull { if ( it == 2) null else it * 3 })
    println(numbers.mapIndexedNotNull { idx, value -> if (idx == 0) null else value * idx })
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key11" to 11)
    println(numbersMap.mapKeys { it.key.uppercase() })
    println(numbersMap.mapValues { it.value + it.key.length })
}

----------------------------------------

TITLE: Using Scope Functions in Kotlin
DESCRIPTION: Guidance on choosing the appropriate scope function (apply, with, run, also, let) in Kotlin.

LANGUAGE: kotlin
CODE:
// Example of using 'let' for null checks
nullableValue?.let { nonNullValue ->
    // Use nonNullValue safely here
}

// Example of using 'apply' for object configuration
val myObject = MyClass().apply {
    property1 = value1
    property2 = value2
}

----------------------------------------

TITLE: Filtering Collections in Kotlin
DESCRIPTION: Demonstrates basic collection filtering operations and how results need to be stored to be used. Shows that operations don't affect the original collection but create new result collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")  
    numbers.filter { it.length > 3 }  // nothing happens with `numbers`, result is lost
    println("numbers are still $numbers")
    val longerThan3 = numbers.filter { it.length > 3 } // result is stored in `longerThan3`
    println("numbers longer than 3 chars are $longerThan3")
}

----------------------------------------

TITLE: Handling Nullable Types in Kotlin
DESCRIPTION: This Kotlin snippet shows how to handle potentially null values using nullable types (String?) and null checks within the function body.

LANGUAGE: kotlin
CODE:
// Kotlin
fun stringLength(a: String?): Int = if (a != null) a.length else 0

----------------------------------------

TITLE: Initializing and Iterating Over Strings in Kotlin
DESCRIPTION: Demonstrates how to create a string and iterate over its characters using a for loop.

LANGUAGE: kotlin
CODE:
fun main() {
    val str = "abcd" 
    for (c in str) {
        println(c)
    }
}

----------------------------------------

TITLE: Implementing Delegation in Kotlin
DESCRIPTION: Demonstrates how to use the 'by' keyword to implement delegation in Kotlin. A Derived class implements the Base interface by delegating to a BaseImpl object.

LANGUAGE: kotlin
CODE:
interface Base {
    fun print()
}

class BaseImpl(val x: Int) : Base {
    override fun print() { print(x) }
}

class Derived(b: Base) : Base by b

fun main() {
    val base = BaseImpl(10)
    Derived(base).print()
}

----------------------------------------

TITLE: Using First and Last Functions in Kotlin Collections
DESCRIPTION: Shows how to retrieve the first and last elements of a collection using first() and last() functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")
    println(numbers.first())    
    println(numbers.last())    
}

----------------------------------------

TITLE: Demonstrating Mutable List Operations in Kotlin
DESCRIPTION: This snippet shows how to create a mutable list of strings, add an element, and attempt to reassign the list (which results in a compilation error when using val).

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf("one", "two", "three", "four")
    numbers.add("five")   // this is OK
    println(numbers)
    //numbers = mutableListOf("six", "seven")      // compilation error
}

----------------------------------------

TITLE: Filtering Lists and Maps in Kotlin
DESCRIPTION: Demonstrates the use of filter() function on both List and Map collections. For List, it filters elements longer than 3 characters. For Map, it filters entries where the key ends with '1' and the value is greater than 10.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")  
    val longerThan3 = numbers.filter { it.length > 3 }
    println(longerThan3)

    val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key11" to 11)
    val filteredMap = numbersMap.filter { (key, value) -> key.endsWith("1") && value > 10}
    println(filteredMap)
}

----------------------------------------

TITLE: Data Class with Body Properties in Kotlin
DESCRIPTION: Shows how to declare properties in the class body that are excluded from generated implementations like toString(), equals(), hashCode(), and copy().

LANGUAGE: kotlin
CODE:
data class Person(val name: String) {
    var age: Int = 0
}

----------------------------------------

TITLE: Demonstrating Basic Aggregate Operations in Kotlin
DESCRIPTION: This snippet showcases the usage of basic aggregate operations such as count(), maxOrNull(), minOrNull(), average(), and sum() on a list of numbers in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(6, 42, 10, 4)

    println("Count: ${numbers.count()}")
    println("Max: ${numbers.maxOrNull()}")
    println("Min: ${numbers.minOrNull()}")
    println("Average: ${numbers.average()}")
    println("Sum: ${numbers.sum()}")
}

----------------------------------------

TITLE: Implementing Loops in Kotlin
DESCRIPTION: Demonstrates the use of for and while loops in Kotlin for iterating over collections and ranges.

LANGUAGE: kotlin
CODE:
fun main() {
    val items = listOf("apple", "banana", "kiwifruit")
    for (item in items) {
        println(item)
    }
}

LANGUAGE: kotlin
CODE:
fun main() {
    val items = listOf("apple", "banana", "kiwifruit")
    var index = 0
    while (index < items.size) {
        println("item at $index is ${items[index]}")
        index++
    }
}

----------------------------------------

TITLE: Performing Mutable List Operations in Kotlin
DESCRIPTION: This snippet shows various operations on a MutableList, including adding, removing, updating elements, and shuffling the list.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf(1, 2, 3, 4)
    numbers.add(5)
    numbers.removeAt(1)
    numbers[0] = 0
    numbers.shuffle()
    println(numbers)
}

----------------------------------------

TITLE: Declaring Class Properties in Kotlin
DESCRIPTION: Shows two ways to declare properties for a Kotlin class: within parentheses after the class name and within the class body.

LANGUAGE: kotlin
CODE:
class Contact(val id: Int, var email: String)

LANGUAGE: kotlin
CODE:
class Contact(val id: Int, var email: String) {
    val category: String = ""
}

----------------------------------------

TITLE: Overriding Delegated Members in Kotlin
DESCRIPTION: Shows how to override methods in a class that uses delegation. The overridden methods in the derived class take precedence over the delegate object's implementations.

LANGUAGE: kotlin
CODE:
interface Base {
    fun printMessage()
    fun printMessageLine()
}

class BaseImpl(val x: Int) : Base {
    override fun printMessage() { print(x) }
    override fun printMessageLine() { println(x) }
}

class Derived(b: Base) : Base by b {
    override fun printMessage() { print("abc") }
}

fun main() {
    val base = BaseImpl(10)
    Derived(base).printMessage()
    Derived(base).printMessageLine()
}

----------------------------------------

TITLE: Apply Function Configuration Example (Kotlin)
DESCRIPTION: Demonstrates using apply for object configuration, where the context object is available as this and the function returns the object itself.

LANGUAGE: kotlin
CODE:
data class Person(var name: String, var age: Int = 0, var city: String = "")

fun main() {
    val adam = Person("Adam").apply { 
        age = 20
        city = "London"
    }
    println(adam)
}

----------------------------------------

TITLE: Working with Ranges in Kotlin
DESCRIPTION: Demonstrates how to use ranges for checking if a value is within a range and for iteration in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    val x = 10
    val y = 9
    if (x in 1..y+1) {
        println("fits in range")
    }
}

LANGUAGE: kotlin
CODE:
fun main() {
    for (x in 1..5) {
        print(x)
    }
}

----------------------------------------

TITLE: Flattening Collections in Kotlin
DESCRIPTION: Shows the usage of flatten() and flatMap() functions for working with nested collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numberSets = listOf(setOf(1, 2, 3), setOf(4, 5, 6), setOf(1, 2))
    println(numberSets.flatten())
}

LANGUAGE: kotlin
CODE:
data class StringContainer(val values: List<String>)

fun main() {
    val containers = listOf(
        StringContainer(listOf("one", "two", "three")),
        StringContainer(listOf("four", "five", "six")),
        StringContainer(listOf("seven", "eight"))
    )
    println(containers.flatMap { it.values })
}

----------------------------------------

TITLE: Null Check with If Conditional in Kotlin
DESCRIPTION: Shows how to safely check for null values using if conditional before accessing properties

LANGUAGE: kotlin
CODE:
fun main() {
    val b: String? = null
    val l = if (b != null) b.length else -1
    print(l)
}

----------------------------------------

TITLE: Data Class Copy Function Usage in Kotlin
DESCRIPTION: Shows how to use the auto-generated copy() function to create modified copies of data class instances while keeping some properties unchanged.

LANGUAGE: kotlin
CODE:
val jack = User(name = "Jack", age = 1)
val olderJack = jack.copy(age = 2)

----------------------------------------

TITLE: Using Destination Objects in Kotlin Collections
DESCRIPTION: Shows how to use destination objects with collection operations using 'To' postfix functions. The destination collection receives the operation results directly.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    val filterResults = mutableListOf<String>()  //destination object
    numbers.filterTo(filterResults) { it.length > 3 }
    numbers.filterIndexedTo(filterResults) { index, _ -> index == 0 }
    println(filterResults) // contains results of both operations
}

----------------------------------------

TITLE: Try-Catch Exception Handling
DESCRIPTION: Example of basic try-catch block usage in Kotlin

LANGUAGE: kotlin
CODE:
try {
    // Code that may throw an exception
} catch (e: SomeException) {
    // Code for handling the exception
}

----------------------------------------

TITLE: Converting an Iterable to a Sequence in Kotlin
DESCRIPTION: Shows how to create a sequence from an existing Iterable object (like a List or Set) using the asSequence() function.

LANGUAGE: kotlin
CODE:
val numbers = listOf("one", "two", "three", "four")
val numbersSequence = numbers.asSequence()

----------------------------------------

TITLE: Basic Generic Class Declaration in Kotlin
DESCRIPTION: Shows how to declare a basic generic class in Kotlin and create instances with type parameters.

LANGUAGE: kotlin
CODE:
class Box<T>(t: T) {
    var value = t
}

----------------------------------------

TITLE: Collection Transformation with HashSet Destination
DESCRIPTION: Demonstrates using mapTo() with a HashSet destination to transform collection elements while eliminating duplicates in the result.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    // filter numbers right into a new hash set, 
    // thus eliminating duplicates in the result
    val result = numbers.mapTo(HashSet()) { it.length }
    println("distinct item lengths are $result")
}

----------------------------------------

TITLE: Using require() Function for Input Validation
DESCRIPTION: Shows how to use require() to validate function arguments and throw IllegalArgumentException

LANGUAGE: kotlin
CODE:
fun getIndices(count: Int): List<Int> {
    require(count >= 0) { "Count must be non-negative. You set count to $count." }
    return List(count) { it + 1 }
}

----------------------------------------

TITLE: Declaring Extensions as Members in Kotlin
DESCRIPTION: Illustrates how to declare extensions within a class, dealing with multiple implicit receivers and name conflicts.

LANGUAGE: kotlin
CODE:
class Host(val hostname: String) {
    fun printHostname() { print(hostname) }
}

class Connection(val host: Host, val port: Int) {
    fun printPort() { print(port) }

    fun Host.printConnectionString() {
        printHostname()   // calls Host.printHostname()
        print(":")
        printPort()   // calls Connection.printPort()
    }

    fun connect() {
        /*...*/
        host.printConnectionString()   // calls the extension function
    }
}

fun main() {
    Connection(Host("kotl.in"), 443).connect()
    //Host("kotl.in").printConnectionString()  // error, the extension function is unavailable outside Connection
}

----------------------------------------

TITLE: Demonstrating Top-Level Visibility Modifiers in Kotlin
DESCRIPTION: This snippet shows how visibility modifiers are applied to top-level declarations in Kotlin. It includes examples of private, public, and internal modifiers.

LANGUAGE: kotlin
CODE:
// file name: example.kt
package foo

private fun foo() { ... } // visible inside example.kt

public var bar: Int = 5 // property is visible everywhere
    private set         // setter is visible only in example.kt
    
internal val baz = 6    // visible inside the same module

----------------------------------------

TITLE: Working with Nullable Types in Kotlin
DESCRIPTION: Demonstrates declaration and usage of nullable String types with the ? operator

LANGUAGE: kotlin
CODE:
fun main() {
    var b: String? = "abc"
    b = null
    print(b)
}

----------------------------------------

TITLE: Iterating a List using Iterator in Kotlin
DESCRIPTION: Demonstrates how to obtain an iterator from a list and use it to traverse the elements. The example uses a while loop with hasNext() and next() methods.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    val numbersIterator = numbers.iterator()
    while (numbersIterator.hasNext()) {
        println(numbersIterator.next())
    }
}

----------------------------------------

TITLE: Calling Kotlin Functions
DESCRIPTION: Shows how to call functions in Kotlin, including member functions using dot notation.

LANGUAGE: kotlin
CODE:
val result = double(2)

Stream().read() // create instance of class Stream and call read()

----------------------------------------

TITLE: Overriding Methods with Default Parameters in Kotlin
DESCRIPTION: Shows how default parameter values are handled when overriding methods in Kotlin.

LANGUAGE: kotlin
CODE:
open class A {
    open fun foo(i: Int = 10) { /*...*/ }
}

class B : A() {
    override fun foo(i: Int) { /*...*/ }  // No default value is allowed.
}

----------------------------------------

TITLE: Abstract Classes in Kotlin
DESCRIPTION: Shows how to declare and implement abstract classes and methods in Kotlin.

LANGUAGE: kotlin
CODE:
abstract class Polygon {
    abstract fun draw()
}

class Rectangle : Polygon() {
    override fun draw() {
        // draw the rectangle
    }
}

----------------------------------------

TITLE: Data Class with Default Constructor Values in Kotlin
DESCRIPTION: Demonstrates how to create a data class with default values for JVM compatibility when a parameterless constructor is needed.

LANGUAGE: kotlin
CODE:
data class User(val name: String = "", val age: Int = 0)

----------------------------------------

TITLE: Declaring Nullable Types in Kotlin
DESCRIPTION: Demonstrates how to declare nullable types and shows compiler enforcement of null safety rules. Includes examples of allowed and disallowed null assignments and function parameter constraints.

LANGUAGE: kotlin
CODE:
fun main() {
    var neverNull: String = "This can't be null"
    neverNull = null
    var nullable: String? = "You can keep a null here"
    nullable = null
    var inferredNonNull = "The compiler assumes non-nullable"
    inferredNonNull = null
    fun strLength(notNull: String): Int {                 
        return notNull.length
    }
    println(strLength(neverNull))
    println(strLength(nullable))
}

----------------------------------------

TITLE: Creating Basic Ranges in Kotlin
DESCRIPTION: Demonstrates creating and checking values in closed-ended and open-ended ranges using rangeTo() and rangeUntil() functions.

LANGUAGE: kotlin
CODE:
fun main() {
    // Closed-ended range: includes both 1 and 4
    println(4 in 1..4)
    // true
    
    // Open-ended range: includes 1, excludes 4
    println(4 in 1..<4)
    // false
}

----------------------------------------

TITLE: KDoc Element Link Examples
DESCRIPTION: Demonstrates various ways to create links to code elements using KDoc's markdown-based syntax.

LANGUAGE: text
CODE:
Use the method [foo] for this purpose.
Use [this method][foo] for this purpose.
Use [kotlin.reflect.KClass.properties] to enumerate the properties of the class.

----------------------------------------

TITLE: Retrieving Map Values in Kotlin
DESCRIPTION: Demonstrates different methods for accessing map values including get(), getValue(), getOrDefault(), and direct key access using square bracket notation. Shows handling of missing keys and default values.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("one" to 1, "two" to 2, "three" to 3)
    println(numbersMap.get("one"))
    println(numbersMap["one"])
    println(numbersMap.getOrDefault("four", 10))
    println(numbersMap["five"])               // null
    //numbersMap.getValue("six")      // exception!
}

----------------------------------------

TITLE: String Representation of Collections in Kotlin
DESCRIPTION: Demonstrates joinToString() and joinTo() functions for creating string representations of collections with various customization options.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    
    println(numbers)         
    println(numbers.joinToString())
    
    val listString = StringBuffer("The list of numbers: ")
    numbers.joinTo(listString)
    println(listString)
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")    
    println(numbers.joinToString(separator = " | ", prefix = "start: ", postfix = ": end"))
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = (1..100).toList()
    println(numbers.joinToString(limit = 10, truncated = "<...>"))
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    println(numbers.joinToString { "Element: ${it.uppercase()}"})
}

----------------------------------------

TITLE: Demonstrating Boolean Operations in Kotlin
DESCRIPTION: Example showing basic boolean operations including logical OR (||), AND (&&), and NOT (!). Demonstrates both non-nullable and nullable boolean variables, along with their operations and output printing.

LANGUAGE: kotlin
CODE:
fun main() {
    val myTrue: Boolean = true
    val myFalse: Boolean = false
    val boolNull: Boolean? = null

    println(myTrue || myFalse)
    // true
    println(myTrue && myFalse)
    // false
    println(!myTrue)
    // false
    println(boolNull)
    // null
}

----------------------------------------

TITLE: Comparing Maps in Kotlin
DESCRIPTION: This snippet demonstrates how two maps with the same key-value pairs are considered equal, regardless of the order of the pairs.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key4" to 1)
    val anotherMap = mapOf("key2" to 2, "key1" to 1, "key4" to 1, "key3" to 3)
    
    println("The maps are equal: ${numbersMap == anotherMap}")
}

----------------------------------------

TITLE: Default Function Parameters in Kotlin
DESCRIPTION: Shows how to define default values for function parameters in Kotlin.

LANGUAGE: kotlin
CODE:
fun foo(a: Int = 0, b: String = "") { ... }

----------------------------------------

TITLE: Writing Single-Expression Functions in Kotlin
DESCRIPTION: Demonstrates how to write concise single-expression functions in Kotlin, omitting curly braces and return type declaration.

LANGUAGE: kotlin
CODE:
fun double(x: Int): Int = x * 2

// Return type can be inferred:
fun double(x: Int) = x * 2

----------------------------------------

TITLE: Reverse Range Iteration with downTo
DESCRIPTION: Demonstrates how to iterate over ranges in reverse order using the downTo function.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 4 downTo 1) print(i)
    // 4321
}

----------------------------------------

TITLE: List Modification Operations in Kotlin
DESCRIPTION: Demonstrates various list modification operations including adding, updating, removing elements, and sorting the list in place.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf("one", "two", "three", "four")
    numbers.sort()
    println("Sort into ascending: $numbers")
    numbers.sortDescending()
    println("Sort into descending: $numbers")
    numbers.sortBy { it.length }
    println("Sort into ascending by length: $numbers")
    numbers.sortByDescending { it.last() }
    println("Sort into descending by the last letter: $numbers")
    numbers.sortWith(compareBy<String> { it.length }.thenBy { it })
    println("Sort by Comparator: $numbers")
    numbers.shuffle()
    println("Shuffle: $numbers")
    numbers.reverse()
    println("Reverse: $numbers")
}

----------------------------------------

TITLE: Implementing a Basic Delegated Property in Kotlin
DESCRIPTION: This snippet demonstrates the basic syntax for declaring a delegated property in Kotlin using a custom Delegate class.

LANGUAGE: kotlin
CODE:
class Example {
    var p: String by Delegate()
}

----------------------------------------

TITLE: Serializing a Kotlin Object to JSON
DESCRIPTION: Demonstrates how to serialize a Kotlin object into a JSON string using Json.encodeToString().

LANGUAGE: kotlin
CODE:
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString

@Serializable
data class Data(val a: Int, val b: String)

fun main() {
   val json = Json.encodeToString(Data(42, "str"))
}

----------------------------------------

TITLE: When Expression with Sealed Classes in Kotlin
DESCRIPTION: Shows how to use sealed classes with when expressions for exhaustive pattern matching.

LANGUAGE: kotlin
CODE:
sealed class Error {
    class FileReadError(val file: String): Error()
    class DatabaseError(val source: String): Error()
    object RuntimeError : Error()
}

fun log(e: Error) = when(e) {
    is Error.FileReadError -> println("Error while reading file ${e.file}")
    is Error.DatabaseError -> println("Error while reading from database ${e.source}")
    Error.RuntimeError -> println("Runtime error")
}

----------------------------------------

TITLE: Using Varargs in Kotlin Functions
DESCRIPTION: Shows how to define and use functions with a variable number of arguments (varargs) in Kotlin.

LANGUAGE: kotlin
CODE:
fun <T> asList(vararg ts: T): List<T> {
    val result = ArrayList<T>()
    for (t in ts) // ts is an Array
        result.add(t)
    return result
}

val list = asList(1, 2, 3)

val a = arrayOf(1, 2, 3)
val list = asList(-1, 0, *a, 4)

val a = intArrayOf(1, 2, 3) // IntArray is a primitive type array
val list = asList(-1, 0, *a.toTypedArray(), 4)

----------------------------------------

TITLE: Element Retrieval Operations in Kotlin Lists
DESCRIPTION: Demonstrates different ways to retrieve elements from a list using index access, including get(), getOrNull(), and getOrElse() functions to handle out-of-bounds cases safely.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(1, 2, 3, 4)
    println(numbers.get(0))
    println(numbers[0])
    //numbers.get(5)                         // exception!
    println(numbers.getOrNull(5))             // null
    println(numbers.getOrElse(5, {it}))        // 5
}

----------------------------------------

TITLE: Delegated Properties Behavior in Kotlin
DESCRIPTION: Illustrates the behavior of overridden properties in delegated implementations. Overridden properties in the derived class are not accessible from the delegate object's implementations.

LANGUAGE: kotlin
CODE:
interface Base {
    val message: String
    fun print()
}

class BaseImpl(x: Int) : Base {
    override val message = "BaseImpl: x = $x"
    override fun print() { println(message) }
}

class Derived(b: Base) : Base by b {
    // This property is not accessed from b's implementation of `print`
    override val message = "Message of Derived"
}

fun main() {
    val b = BaseImpl(10)
    val derived = Derived(b)
    derived.print()
    println(derived.message)
}

----------------------------------------

TITLE: Using when expression in Kotlin
DESCRIPTION: Example of using when as an expression to return a value based on different conditions.

LANGUAGE: kotlin
CODE:
fun main() {
    val obj = "Hello"    
    
    val result = when (obj) {
        // If obj equals "1", sets result to "one"
        "1" -> "One"
        // If obj equals "Hello", sets result to "Greeting"
        "Hello" -> "Greeting"
        // Sets result to "Unknown" if no previous condition is satisfied
        else -> "Unknown"
    }
    println(result)
    // Greeting
}

----------------------------------------

TITLE: Removing Elements from Mutable List in Kotlin
DESCRIPTION: Shows how to remove elements from a mutable list using the remove() function. The example demonstrates removing an existing element and attempting to remove a non-existent element.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf(1, 2, 3, 4, 3)
    numbers.remove(3)                    // removes the first `3`
    println(numbers)
    numbers.remove(5)                    // removes nothing
    println(numbers)
}

----------------------------------------

TITLE: Using Lambda Expressions with Higher-Order Functions in Kotlin
DESCRIPTION: This example shows how to use lambda expressions when calling higher-order functions in Kotlin. It demonstrates different ways of using the 'fold' function with lambda expressions and function references.

LANGUAGE: kotlin
CODE:
fun main() {
    val items = listOf(1, 2, 3, 4, 5)
    
    items.fold(0, { 
        acc: Int, i: Int -> 
        print("acc = $acc, i = $i, ") 
        val result = acc + i
        println("result = $result")
        result
    })
    
    val joinedToString = items.fold("Elements:", { acc, i -> acc + " " + i })
    
    val product = items.fold(1, Int::times)
    
    println("joinedToString = $joinedToString")
    println("product = $product")
}

----------------------------------------

TITLE: Arithmetic Operations on Numbers in Kotlin
DESCRIPTION: Demonstrates basic arithmetic operations on different number types.

LANGUAGE: kotlin
CODE:
fun main() {
    println(1 + 2)
    println(2_500_000_000L - 1L)
    println(3.14 * 2.71)
    println(10.0 / 3)
}

----------------------------------------

TITLE: Defining Function Parameters in Kotlin
DESCRIPTION: Illustrates how to define function parameters in Kotlin using Pascal notation and optional trailing commas.

LANGUAGE: kotlin
CODE:
fun powerOf(number: Int, exponent: Int): Int { /*...*/ }

fun powerOf(
    number: Int,
    exponent: Int, // trailing comma
) { /*...*/ }

----------------------------------------

TITLE: Using if statement in Kotlin
DESCRIPTION: Example of using an if statement to assign a value based on a condition.

LANGUAGE: kotlin
CODE:
fun main() {
    val d: Int
    val check = true

    if (check) {
        d = 1
    } else {
        d = 2
    }

    println(d)
    // 1
}

----------------------------------------

TITLE: Processing a Sequence with Lazy Evaluation in Kotlin
DESCRIPTION: Shows lazy execution of intermediate operations (filter and map) on a sequence, demonstrating how processing occurs only when the result is requested.

LANGUAGE: kotlin
CODE:
fun main() {
    val words = "The quick brown fox jumps over the lazy dog".split(" ")
    //convert the List to a Sequence
    val wordsSequence = words.asSequence()

    val lengthsSequence = wordsSequence.filter { println("filter: $it"); it.length > 3 }
        .map { println("length: ${it.length}"); it.length }
        .take(4)

    println("Lengths of first 4 words longer than 3 chars")
    // terminal operation: obtaining the result as a List
    println(lengthsSequence.toList())
}

----------------------------------------

TITLE: Accessing and Modifying Array Elements in Kotlin
DESCRIPTION: Shows how to access and modify array elements using indexed access operator.

LANGUAGE: kotlin
CODE:
fun main() {
    val simpleArray = arrayOf(1, 2, 3)
    val twoDArray = Array(2) { Array<Int>(2) { 0 } }

    simpleArray[0] = 10
    twoDArray[0][0] = 2

    println(simpleArray[0].toString())
    println(twoDArray[0][0].toString())
}

----------------------------------------

TITLE: Generic Constraints with Upper Bounds
DESCRIPTION: Shows how to apply constraints to generic type parameters using upper bounds and where clauses.

LANGUAGE: kotlin
CODE:
fun <T : Comparable<T>> sort(list: List<T>) { ... }

fun <T> copyWhenGreater(list: List<T>, threshold: T): List<String>
    where T : CharSequence,
          T : Comparable<T> {
    return list.filter { it > threshold }.map { it.toString() }
}

----------------------------------------

TITLE: Basic Exception Throwing in Kotlin
DESCRIPTION: Demonstrates how to throw exceptions with and without parameters in Kotlin

LANGUAGE: kotlin
CODE:
throw IllegalArgumentException()

val cause = IllegalStateException("Original cause: illegal state")

if (userInput < 0) {
    throw IllegalArgumentException("Input must be non-negative", cause)
}

----------------------------------------

TITLE: Creating Simple Arrays in Kotlin
DESCRIPTION: Shows different ways to create arrays using arrayOf(), arrayOfNulls(), and Array constructor.

LANGUAGE: kotlin
CODE:
fun main() {
    val simpleArray = arrayOf(1, 2, 3)
    println(simpleArray.joinToString())

    val nullArray: Array<Int?> = arrayOfNulls(3)
    println(nullArray.joinToString())

    val initArray = Array<Int>(3) { 0 }
    println(initArray.joinToString())

    val asc = Array(5) { i -> (i * i).toString() }
    asc.forEach { print(it) }
}

----------------------------------------

TITLE: Working with Nested Arrays in Kotlin
DESCRIPTION: Demonstrates creation and initialization of multidimensional arrays using nested Array constructors.

LANGUAGE: kotlin
CODE:
fun main() {
    val twoDArray = Array(2) { Array<Int>(2) { 0 } }
    println(twoDArray.contentDeepToString())

    val threeDArray = Array(3) { Array(3) { Array<Int>(3) { 0 } } }
    println(threeDArray.contentDeepToString())
}

----------------------------------------

TITLE: Interface Properties Implementation
DESCRIPTION: Shows how to declare and implement properties in Kotlin interfaces, including abstract properties and properties with custom getter implementations.

LANGUAGE: kotlin
CODE:
interface MyInterface {
    val prop: Int // abstract

    val propertyWithImplementation: String
        get() = "foo"

    fun foo() {
        print(prop)
    }
}

class Child : MyInterface {
    override val prop: Int = 29
}

----------------------------------------

TITLE: Adding Elements to Arrays in Kotlin
DESCRIPTION: Demonstrates how to add elements to an array using the += operator, which creates a new array with the additional element.

LANGUAGE: kotlin
CODE:
fun main() {
    var riversArray = arrayOf("Nile", "Amazon", "Yangtze")
    riversArray += "Mississippi"
    println(riversArray.joinToString())
}

----------------------------------------

TITLE: Using when statement in Kotlin
DESCRIPTION: Example of using when as a statement to execute code based on different conditions.

LANGUAGE: kotlin
CODE:
fun main() {
    val obj = "Hello"

    when (obj) {
        // Checks whether obj equals to "1"
        "1" -> println("One")
        // Checks whether obj equals to "Hello"
        "Hello" -> println("Greeting")
        // Default statement
        else -> println("Unknown")     
    }
    // Greeting
}

----------------------------------------

TITLE: Using Contracts for Variable Initialization Analysis
DESCRIPTION: Demonstrates how contracts can improve variable initialization analysis with higher-order functions.

LANGUAGE: kotlin
CODE:
fun synchronize(lock: Any?, block: () -> Unit) {
    // It tells the compiler:
    // "This function will invoke 'block' here and now, and exactly one time"
    contract { callsInPlace(block, EXACTLY_ONCE) }
}

fun foo() {
    val x: Int
    synchronize(lock) {
        x = 42 // Compiler knows that lambda passed to 'synchronize' is called
               // exactly once, so no reassignment is reported
    }
    println(x) // Compiler knows that lambda will be definitely called, performing
               // initialization, so 'x' is considered to be initialized here
}

----------------------------------------

TITLE: Basic Enum Declaration in Kotlin
DESCRIPTION: Demonstrates the simplest form of enum class declaration with direction constants.

LANGUAGE: kotlin
CODE:
enum class Direction {
    NORTH, SOUTH, WEST, EAST
}

----------------------------------------

TITLE: Printing Output in Kotlin
DESCRIPTION: Demonstrates using print() and println() functions to output text to the console in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    print("Hello ")
    print("world!")
}

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello world!")
    println(42)
}

----------------------------------------

TITLE: Defining Generic Functions in Kotlin
DESCRIPTION: Demonstrates how to define generic functions in Kotlin, allowing for type-safe operations on different types.

LANGUAGE: kotlin
CODE:
fun <T> singletonList(item: T): List<T> { /*...*/ }

----------------------------------------

TITLE: Basic Person Scope Function Example (Kotlin)
DESCRIPTION: Demonstrates basic usage of let scope function with a Person class to modify object properties without storing intermediate variables.

LANGUAGE: kotlin
CODE:
data class Person(var name: String, var age: Int, var city: String) {
    fun moveTo(newCity: String) { city = newCity }
    fun incrementAge() { age++ }
}

fun main() {
    Person("Alice", 20, "Amsterdam").let {
        println(it)
        it.moveTo("London")
        it.incrementAge()
        println(it)
    }
}

----------------------------------------

TITLE: Implementing Comparable for Custom Natural Order in Kotlin
DESCRIPTION: This snippet demonstrates how to implement the Comparable interface to define a natural order for a custom Version class. It compares versions based on major and minor version numbers.

LANGUAGE: kotlin
CODE:
class Version(val major: Int, val minor: Int): Comparable<Version> {
    override fun compareTo(other: Version): Int = when {
        this.major != other.major -> this.major compareTo other.major // compareTo() in the infix form 
        this.minor != other.minor -> this.minor compareTo other.minor
        else -> 0
    }
}

fun main() {    
    println(Version(1, 2) > Version(1, 3))
    println(Version(2, 0) > Version(1, 5))
}

----------------------------------------

TITLE: Overriding Properties in Primary Constructor in Kotlin
DESCRIPTION: Demonstrates how to use the 'override' keyword in a primary constructor to override properties from an interface or superclass.

LANGUAGE: kotlin
CODE:
interface Shape {
    val vertexCount: Int
}

class Rectangle(override val vertexCount: Int = 4) : Shape // Always has 4 vertices

class Polygon : Shape {
    override var vertexCount: Int = 0  // Can be set to any number later
}

----------------------------------------

TITLE: Demonstrating List Operations in Kotlin
DESCRIPTION: This snippet shows basic List operations such as getting the size, accessing elements by index, and finding the index of an element.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    println("Number of elements: ${numbers.size}")
    println("Third element: ${numbers.get(2)}")
    println("Fourth element: ${numbers[3]}")
    println("Index of element \"two\" ${numbers.indexOf("two")}")
}

----------------------------------------

TITLE: Demonstrating Kotlin Character Usage
DESCRIPTION: Example showing basic character declaration, printing characters including special characters, and Unicode character representation. Demonstrates the use of Char type and escape sequences in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    val aChar: Char = 'a'
 
    println(aChar)
    println('\n') // Prints an extra newline character
    println('\uFF00')
}

----------------------------------------

TITLE: Implementing Lazy Properties in Kotlin
DESCRIPTION: This snippet demonstrates how to use the lazy() function to create a lazy property that computes its value only on first access.

LANGUAGE: kotlin
CODE:
val lazyValue: String by lazy {
    println("computed!")
    "Hello"
}

fun main() {
    println(lazyValue)
    println(lazyValue)
}

----------------------------------------

TITLE: Advanced Summation with sumOf() in Kotlin Collections
DESCRIPTION: This snippet illustrates the usage of the sumOf() function, which allows for custom summation logic to be applied to collection elements, supporting different numeric return types.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(5, 42, 10, 4)
    println(numbers.sumOf { it * 2 })
    println(numbers.sumOf { it.toDouble() / 2 })
}

----------------------------------------

TITLE: Creating and Using Sets in Kotlin
DESCRIPTION: Shows how to create read-only and mutable sets, and perform basic operations.

LANGUAGE: kotlin
CODE:
fun main() {
    // Read-only set
    val readOnlyFruit = setOf("apple", "banana", "cherry", "cherry")
    // Mutable set with explicit type declaration
    val fruit: MutableSet<String> = mutableSetOf("apple", "banana", "cherry", "cherry")
    
    println(readOnlyFruit)
    // [apple, banana, cherry]
}

----------------------------------------

TITLE: Demonstrating Stdlib Contracts Usage
DESCRIPTION: Shows how stdlib functions use contracts to improve smartcast analysis.

LANGUAGE: kotlin
CODE:
fun bar(x: String?) {
    if (!x.isNullOrEmpty()) {
        println("length of '$x' is ${x.length}") // Yay, smartcast to not-null!
    }
}

fun main() {
    bar(null)
    bar("42")
}

----------------------------------------

TITLE: Implementing Kotlin Interface
DESCRIPTION: Demonstrates how to implement an interface in a Kotlin class using the override keyword to provide implementation for abstract methods.

LANGUAGE: kotlin
CODE:
class Child : MyInterface {
    override fun bar() {
        // body
    }
}

----------------------------------------

TITLE: Using Guard Conditions in When Expressions in Kotlin
DESCRIPTION: Demonstrates the use of guard conditions in when expressions, allowing for more complex conditional logic within when branches.

LANGUAGE: kotlin
CODE:
sealed interface Animal {
    data class Cat(val mouseHunter: Boolean) : Animal
    data class Dog(val breed: String) : Animal
}

fun feedAnimal(animal: Animal) {
    when (animal) {
        is Animal.Dog -> feedDog()
        is Animal.Cat if !animal.mouseHunter -> feedCat()
        else -> println("Unknown animal")
    }
}

----------------------------------------

TITLE: Importing a Single Name in Kotlin
DESCRIPTION: This snippet shows how to import a single name from a package in Kotlin, making it accessible without qualification.

LANGUAGE: kotlin
CODE:
import org.example.Message // Message is now accessible without qualification

----------------------------------------

TITLE: Iterating Over Ranges with For Loop
DESCRIPTION: Shows how to use ranges in for loops for simple iteration over a sequence of numbers.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 1..4) print(i)
    // 1234
}

----------------------------------------

TITLE: Demonstrating Fold and Reduce Operations in Kotlin Collections
DESCRIPTION: This code shows the difference between fold() and reduce() operations, highlighting how fold() uses an initial value while reduce() starts with the first two elements of the collection.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(5, 2, 10, 4)

    val simpleSum = numbers.reduce { sum, element -> sum + element }
    println(simpleSum)
    val sumDoubled = numbers.fold(0) { sum, element -> sum + element * 2 }
    println(sumDoubled)

    //incorrect: the first element isn't doubled in the result
    //val sumDoubledReduce = numbers.reduce { sum, element -> sum + element * 2 } 
    //println(sumDoubledReduce)
}

----------------------------------------

TITLE: Custom Property Setter Implementation
DESCRIPTION: Shows how to implement a custom setter for string representation of an object.

LANGUAGE: kotlin
CODE:
var stringRepresentation: String
    get() = this.toString()
    set(value) {
        setDataFromString(value) // parses the string and assigns values to other properties
    }

----------------------------------------

TITLE: Destructuring in For Loops
DESCRIPTION: Example of using destructuring declarations within for-loops to iterate over collections.

LANGUAGE: kotlin
CODE:
for ((a, b) in collection) { ... }

----------------------------------------

TITLE: Defining Basic Kotlin Interface
DESCRIPTION: Shows how to declare a basic interface in Kotlin with abstract and implemented methods. Demonstrates the interface keyword and method declarations with optional implementation bodies.

LANGUAGE: kotlin
CODE:
interface MyInterface {
    fun bar()
    fun foo() {
      // optional body
    }
}

----------------------------------------

TITLE: Context Object Reference Example (Kotlin)
DESCRIPTION: Shows how scope functions reference context objects using this and it keywords, demonstrating the difference between receiver and argument contexts.

LANGUAGE: kotlin
CODE:
fun main() {
    val str = "Hello"
    // this
    str.run {
        println("The string's length: $length")
    }

    // it
    str.let {
        println("The string's length is ${it.length}")
    }
}

----------------------------------------

TITLE: Declaring Default Inheritance from Any in Kotlin
DESCRIPTION: Demonstrates that all Kotlin classes implicitly inherit from the 'Any' superclass, which provides basic methods like equals(), hashCode(), and toString().

LANGUAGE: kotlin
CODE:
class Example // Implicitly inherits from Any

----------------------------------------

TITLE: Creating Interactive Kotlin Console Application
DESCRIPTION: Basic Kotlin console application that prompts for user input and displays a personalized greeting. Uses string templates and the readln() function for input handling.

LANGUAGE: kotlin
CODE:
fun main() {
    println("What's your name?")
    val name = readln()
    println("Hello, $name!")

    // ...
}

----------------------------------------

TITLE: Chunking Collections in Kotlin
DESCRIPTION: Demonstrates the chunked() function, which breaks a collection into parts of a given size. It also shows how to apply a transformation to the resulting chunks.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = (0..13).toList()
    println(numbers.chunked(3))
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = (0..13).toList() 
    println(numbers.chunked(3) { it.sum() })  // `it` is a chunk of the original collection
}

----------------------------------------

TITLE: Kotlin Interface Inheritance
DESCRIPTION: Illustrates interface inheritance in Kotlin, showing how interfaces can extend other interfaces and how classes can implement inherited interface members.

LANGUAGE: kotlin
CODE:
interface Named {
    val name: String
}

interface Person : Named {
    val firstName: String
    val lastName: String
    
    override val name: String get() = "$firstName $lastName"
}

data class Employee(
    // implementing 'name' is not required
    override val firstName: String,
    override val lastName: String,
    val position: Position
) : Person

----------------------------------------

TITLE: Declaring Custom Contracts
DESCRIPTION: Illustrates how to declare custom contracts for functions using the contract DSL.

LANGUAGE: kotlin
CODE:
fun String?.isNullOrEmpty(): Boolean {
    contract {
        returns(false) implies (this@isNullOrEmpty != null)
    }
    return this == null || isEmpty()
}

----------------------------------------

TITLE: Handling Multiple Inheritance in Kotlin
DESCRIPTION: Illustrates how to handle multiple inheritance in Kotlin when a class inherits multiple implementations of the same member, using super qualified by the supertype name.

LANGUAGE: kotlin
CODE:
open class Rectangle {
    open fun draw() { /* ... */ }
}

interface Polygon {
    fun draw() { /* ... */ } // interface members are 'open' by default
}

class Square() : Rectangle(), Polygon {
    // The compiler requires draw() to be overridden:
    override fun draw() {
        super<Rectangle>.draw() // call to Rectangle.draw()
        super<Polygon>.draw() // call to Polygon.draw()
    }
}

----------------------------------------

TITLE: Backing Field Usage in Kotlin Properties
DESCRIPTION: Demonstrates the use of backing fields in property accessors with validation logic.

LANGUAGE: kotlin
CODE:
var counter = 0
    set(value) {
        if (value >= 0)
            field = value
    }

----------------------------------------

TITLE: Custom Equality Implementation for Point Class
DESCRIPTION: Shows how to override equals() function to implement custom structural equality for a Point class.

LANGUAGE: kotlin
CODE:
class Point(val x: Int, val y: Int) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is Point) return false

        // Compares properties for structural equality
        return this.x == other.x && this.y == other.y
    }
}

----------------------------------------

TITLE: Backing Property Implementation
DESCRIPTION: Shows how to implement a backing property with lazy initialization and null safety checks.

LANGUAGE: kotlin
CODE:
private var _table: Map<String, Int>? = null
public val table: Map<String, Int>
    get() {
        if (_table == null) {
            _table = HashMap()
        }
        return _table ?: throw AssertionError("Set to null by another thread")
    }

----------------------------------------

TITLE: Mapping Collections in Kotlin
DESCRIPTION: Shows how to create new collections by applying transformations to elements of existing collections using map and mapIndexed functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf(1, 2, 3)
    println(numbers.map { it * 3 })
    println(numbers.mapIndexed { idx, value -> value * idx })
}

----------------------------------------

TITLE: Resolving Name Clashes with 'as' Keyword in Kotlin Imports
DESCRIPTION: This snippet illustrates how to use the 'as' keyword to resolve name clashes when importing in Kotlin by locally renaming the clashing entity.

LANGUAGE: kotlin
CODE:
import org.example.Message // Message is accessible
import org.test.Message as TestMessage // TestMessage stands for 'org.test.Message'

----------------------------------------

TITLE: Calling Java Collections from Kotlin
DESCRIPTION: Demonstrates how to use Java collections in Kotlin, including for-loops and operator conventions.

LANGUAGE: kotlin
CODE:
import java.util.*

fun demo(source: List<Int>) {
    val list = ArrayList<Int>()
    // 'for'-loops work for Java collections:
    for (item in source) {
        list.add(item)
    }
    // Operator conventions work as well:
    for (i in 0..source.size - 1) {
        list[i] = source[i] // get and set are called
    }
}

----------------------------------------

TITLE: Basic Property Declaration in Kotlin
DESCRIPTION: Demonstrates how to declare basic mutable properties in a Kotlin class using the var keyword.

LANGUAGE: kotlin
CODE:
class Address {
    var name: String = "Holmes, Sherlock"
    var street: String = "Baker"
    var city: String = "London"
    var state: String? = null
    var zip: String = "123456"
}

----------------------------------------

TITLE: Complete Spring Boot Application with Controller
DESCRIPTION: Full implementation of the Spring Boot application including data class and REST controller for handling messages.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.data.annotation.Id
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RestController

@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
    runApplication<DemoApplication>(*args)
}

@RestController
class MessageResource {
    @GetMapping("/")
    fun index(): List<Message> = listOf(
        Message("1", "Hello!"),
        Message("2", "Bonjour!"),
        Message("3", "Privet!"),
    )
}

data class Message(val id: String?, val text: String)

----------------------------------------

TITLE: Property Access and Copy Function in Kotlin
DESCRIPTION: Shows how to access and copy properties between objects in Kotlin without using the 'new' keyword.

LANGUAGE: kotlin
CODE:
fun copyAddress(address: Address): Address {
    val result = Address() // there's no 'new' keyword in Kotlin
    result.name = address.name // accessors are called
    result.street = address.street
    // ...
    return result
}

----------------------------------------

TITLE: Secondary Constructors in Kotlin
DESCRIPTION: Demonstrates the implementation of secondary constructors in Kotlin classes and their interaction with primary constructors.

LANGUAGE: kotlin
CODE:
class Person(val pets: MutableList<Pet> = mutableListOf())

class Pet {
    constructor(owner: Person) {
        owner.pets.add(this) // adds this pet to the list of its owner's pets
    }
}

----------------------------------------

TITLE: Map Iterator Extensions in Kotlin
DESCRIPTION: Extension functions that enable map destructuring functionality.

LANGUAGE: kotlin
CODE:
operator fun <K, V> Map<K, V>.iterator(): Iterator<Map.Entry<K, V>> = entrySet().iterator()
operator fun <K, V> Map.Entry<K, V>.component1() = getKey()
operator fun <K, V> Map.Entry<K, V>.component2() = getValue()

----------------------------------------

TITLE: Writing Documentation Comments in Kotlin
DESCRIPTION: Guidelines for writing clear and concise documentation comments in Kotlin.

LANGUAGE: kotlin
CODE:
/**
 * This is a documentation comment
 * on multiple lines.
 */

/** This is a short documentation comment. */

/**
 * Returns the absolute value of the given [number].
 */
fun abs(number: Int): Int { /*...*/ }

----------------------------------------

TITLE: Element Existence Checking in Kotlin Collections
DESCRIPTION: Shows how to check for element existence using contains(), containsAll(), isEmpty(), and isNotEmpty() functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five", "six")
    println(numbers.contains("four"))
    println("zero" in numbers)
    
    println(numbers.containsAll(listOf("four", "two")))
    println(numbers.containsAll(listOf("one", "zero")))
}

----------------------------------------

TITLE: Enum Class with Constructor Parameters
DESCRIPTION: Shows how to create an enum class with constructor parameters, using RGB color values as an example.

LANGUAGE: kotlin
CODE:
enum class Color(val rgb: Int) {
    RED(0xFF0000),
    GREEN(0x00FF00),
    BLUE(0x0000FF)
}

----------------------------------------

TITLE: Defining Extension Properties in Kotlin
DESCRIPTION: Demonstrates how to create an extension property 'lastIndex' for List<T>. Extension properties cannot have initializers and must explicitly define getters/setters.

LANGUAGE: kotlin
CODE:
val <T> List<T>.lastIndex: Int
    get() = size - 1

----------------------------------------

TITLE: Calling Superclass Implementation in Kotlin
DESCRIPTION: Shows how to call superclass implementations of functions and property accessors using the 'super' keyword in Kotlin.

LANGUAGE: kotlin
CODE:
open class Rectangle {
    open fun draw() { println("Drawing a rectangle") }
    val borderColor: String get() = "black"
}

class FilledRectangle : Rectangle() {
    override fun draw() {
        super.draw()
        println("Filling the rectangle")
    }

    val fillColor: String get() = super.borderColor
}

----------------------------------------

TITLE: Custom Step Ranges in Kotlin
DESCRIPTION: Shows how to iterate over ranges with custom step values using the step() function.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 0..8 step 2) print(i)
    println()
    // 02468
    for (i in 0..<8 step 2) print(i)
    println()
    // 0246
    for (i in 8 downTo 0 step 2) print(i)
    // 86420
}

----------------------------------------

TITLE: Using compareBy() for Custom Sorting in Kotlin
DESCRIPTION: This snippet demonstrates the use of compareBy() function to create a custom comparator for sorting strings by their length. It's a more concise way to define a Comparator.

LANGUAGE: kotlin
CODE:
fun main() {
    println(listOf("aaa", "bb", "c").sortedWith(compareBy { it.length }))
}

----------------------------------------

TITLE: Mutable Map Operations in Kotlin
DESCRIPTION: Demonstrates write operations on mutable maps including adding, updating, and removing entries using various methods and operators.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mutableMapOf("one" to 1, "two" to 2)
    numbersMap["three"] = 3     // calls numbersMap.put("three", 3)
    numbersMap += mapOf("four" to 4, "five" to 5)
    println(numbersMap)
}

----------------------------------------

TITLE: Initialization Order Demo in Kotlin
DESCRIPTION: Demonstrates the order of execution for initializer blocks and property initialization in a Kotlin class.

LANGUAGE: kotlin
CODE:
class InitOrderDemo(name: String) {
    val firstProperty = "First property: $name".also(::println)
    
    init {
        println("First initializer block that prints $name")
    }
    
    val secondProperty = "Second property: ${name.length}".also(::println)
    
    init {
        println("Second initializer block that prints ${name.length}")
    }
}

----------------------------------------

TITLE: Demonstrating Inline Function Usage in Kotlin
DESCRIPTION: Shows how to define and use an inline function with a lambda parameter, and how the compiler inlines the code at the call site.

LANGUAGE: kotlin
CODE:
inline fun <T> lock(lock: Lock, body: () -> T): T { ... }

LANGUAGE: kotlin
CODE:
lock(l) { foo() }

LANGUAGE: kotlin
CODE:
l.lock()
try {
    foo()
} finally {
    l.unlock()
}

----------------------------------------

TITLE: Defining IntPredicate Functional Interface
DESCRIPTION: Shows the implementation of a functional interface that accepts an integer parameter and returns a boolean value.

LANGUAGE: kotlin
CODE:
fun interface IntPredicate {
   fun accept(i: Int): Boolean
}

----------------------------------------

TITLE: Initialization Order Demo in Kotlin
DESCRIPTION: Demonstrates the order of execution for initializer blocks and property initialization in a Kotlin class.

LANGUAGE: kotlin
CODE:
class InitOrderDemo(name: String) {
    val firstProperty = "First property: $name".also(::println)
    
    init {
        println("First initializer block that prints $name")
    }
    
    val secondProperty = "Second property: ${name.length}".also(::println)
    
    init {
        println("Second initializer block that prints ${name.length}")
    }
}

----------------------------------------

TITLE: Type Alias Alternative Implementation
DESCRIPTION: Shows how to achieve similar functionality using type aliases instead of functional interfaces.

LANGUAGE: kotlin
CODE:
typealias IntPredicate = (i: Int) -> Boolean

val isEven: IntPredicate = { it % 2 == 0 }

fun main() {
   println("Is 7 even? - ${isEven(7)}")
}

----------------------------------------

TITLE: Overriding Properties in Kotlin
DESCRIPTION: Shows how to override properties in Kotlin, including the ability to override a 'val' property with a 'var' property.

LANGUAGE: kotlin
CODE:
open class Shape {
    open val vertexCount: Int = 0
}

class Rectangle : Shape() {
    override val vertexCount = 4
}

----------------------------------------

TITLE: Checking Lateinit Var Initialization (Kotlin)
DESCRIPTION: Shows how to use the new isInitialized property to check whether a lateinit var has been initialized, providing a way to safely interact with lateinit properties.

LANGUAGE: kotlin
CODE:
class Foo {
    lateinit var lateinitVar: String

    fun initializationLogic() {
        println("isInitialized before assignment: " + this::lateinitVar.isInitialized)
        lateinitVar = "value"
        println("isInitialized after assignment: " + this::lateinitVar.isInitialized)
    }
}

fun main(args: Array<String>) {
	Foo().initializationLogic()
}

----------------------------------------

TITLE: Iterating a List using forEach in Kotlin
DESCRIPTION: Demonstrates the use of the forEach function to iterate over a list. This method provides a concise way to perform an action on each element.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    numbers.forEach {
        println(it)
    }
}

----------------------------------------

TITLE: Enum with Anonymous Classes
DESCRIPTION: Demonstrates implementing abstract methods in enum constants using anonymous classes.

LANGUAGE: kotlin
CODE:
enum class ProtocolState {
    WAITING {
        override fun signal() = TALKING
    },

    TALKING {
        override fun signal() = WAITING
    };

    abstract fun signal(): ProtocolState
}

----------------------------------------

TITLE: Inline Class Implementing Interface
DESCRIPTION: Shows how inline classes can implement interfaces while maintaining their value-based characteristics.

LANGUAGE: kotlin
CODE:
interface Printable {
    fun prettyPrint(): String
}

@JvmInline
value class Name(val s: String) : Printable {
    override fun prettyPrint(): String = "Let's $s!"
}

----------------------------------------

TITLE: Declaring Basic Sealed Classes and Interfaces in Kotlin
DESCRIPTION: Demonstrates the basic declaration of sealed classes and interfaces with implementation examples.

LANGUAGE: kotlin
CODE:
sealed interface Error

sealed class IOError(): Error

class FileReadError(val file: File): IOError()
class DatabaseError(val source: DataSource): IOError()

object RuntimeError : Error

----------------------------------------

TITLE: Basic Type Checking with is/!is Operators in Kotlin
DESCRIPTION: Demonstrates how to use the 'is' and '!is' operators to check object types at runtime.

LANGUAGE: kotlin
CODE:
if (obj is String) {
    print(obj.length)
}

if (obj !is String) { // Same as !(obj is String)
    print("Not a String")
} else {
    print(obj.length)
}

----------------------------------------

TITLE: Merging Sets with Union Operation in Kotlin
DESCRIPTION: Demonstrates the use of the union() function to merge two sets. Shows how the order of operands affects the result in ordered collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf("one", "two", "three")

    // output according to the order
    println(numbers union setOf("four", "five"))
    // [one, two, three, four, five]
    println(setOf("four", "five") union numbers)
    // [four, five, one, two, three]
}

----------------------------------------

TITLE: Using For Loops in Kotlin
DESCRIPTION: Illustrates various ways to use for loops in Kotlin, including iterating over ranges, arrays, and using the withIndex() function.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 1..3) {
        print(i)
    }
    for (i in 6 downTo 0 step 2) {
        print(i)
    }
    // 1236420

    val array = arrayOf("a", "b", "c")
    for (i in array.indices) {
        print(array[i])
    }
    // abc

    for ((index, value) in array.withIndex()) {
        println("the element at $index is $value")
    }
    // the element at 0 is a
    // the element at 1 is b
    // the element at 2 is c
}

----------------------------------------

TITLE: Data Object Declaration Example
DESCRIPTION: Shows how to use the new data object feature for improved string representations

LANGUAGE: kotlin
CODE:
sealed class ReadResult {
    data class Number(val value: Int) : ReadResult()
    data class Text(val value: String) : ReadResult()
    data object EndOfFile : ReadResult()
}

----------------------------------------

TITLE: Derived Class Initialization Order in Kotlin
DESCRIPTION: Illustrates the initialization order of base and derived classes in Kotlin, showing how base class initialization occurs before derived class initialization.

LANGUAGE: kotlin
CODE:
open class Base(val name: String) {

    init { println("Initializing a base class") }

    open val size: Int = 
        name.length.also { println("Initializing size in the base class: $it") }
}

class Derived(
    name: String,
    val lastName: String,
) : Base(name.replaceFirstChar { it.uppercase() }.also { println("Argument for the base class: $it") }) {

    init { println("Initializing a derived class") }

    override val size: Int =
        (super.size + lastName.length).also { println("Initializing size in the derived class: $it") }
}

fun main() {
    println("Constructing the derived class(\"hello\", \"world\")")
    Derived("hello", "world")
}

----------------------------------------

TITLE: Returning Multiple Values with Data Class
DESCRIPTION: Demonstrates how to return multiple values from a function using a data class and destructuring.

LANGUAGE: kotlin
CODE:
data class Result(val result: Int, val status: Status)
fun function(...): Result {
    // computations
    
    return Result(result, status)
}

// Now, to use this function:
val (result, status) = function(...)

----------------------------------------

TITLE: Preventing Method Re-overriding in Kotlin
DESCRIPTION: Demonstrates how to use the 'final' keyword to prevent a method from being overridden in subclasses.

LANGUAGE: kotlin
CODE:
open class Rectangle() : Shape() {
    final override fun draw() { /*...*/ }
}

----------------------------------------

TITLE: Complete Gradle Build Configuration
DESCRIPTION: Full build.gradle.kts configuration including Kotlin plugin, dependencies, and test setup

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kotlinVersion%"
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
}

tasks.test {
    useJUnitPlatform()
}

----------------------------------------

TITLE: Updating MessageService to Use CrudRepository in Kotlin
DESCRIPTION: Modifies the MessageService class to use MessageRepository instead of JdbcTemplate for database operations.

LANGUAGE: kotlin
CODE:
// MessageService.kt
package demo

import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Service

@Service
class MessageService(private val db: MessageRepository) {
    fun findMessages(): List<Message> = db.findAll().toList()

    fun findMessageById(id: String): Message? = db.findByIdOrNull(id)

    fun save(message: Message): Message = db.save(message)
}

----------------------------------------

TITLE: Enum Utility Methods Usage
DESCRIPTION: Demonstrates the use of built-in enum utility methods entries and valueOf().

LANGUAGE: kotlin
CODE:
enum class RGB { RED, GREEN, BLUE }

fun main() {
    for (color in RGB.entries) println(color.toString())
    println("The first color is: ${RGB.valueOf("RED")}")
}

----------------------------------------

TITLE: Creating a Custom Delegate Class in Kotlin
DESCRIPTION: This code shows how to implement a custom Delegate class with getValue() and setValue() functions for property delegation.

LANGUAGE: kotlin
CODE:
import kotlin.reflect.KProperty

class Delegate {
    operator fun getValue(thisRef: Any?, property: KProperty<*>): String {
        return "$thisRef, thank you for delegating '${property.name}' to me!"
    }
 
    operator fun setValue(thisRef: Any?, property: KProperty<*>, value: String) {
        println("$value has been assigned to '${property.name}' in $thisRef.")
    }
}

----------------------------------------

TITLE: Demonstrating Equality Comparisons in Kotlin
DESCRIPTION: Shows different equality comparisons including null values and string references.

LANGUAGE: kotlin
CODE:
fun main() {
    var a = "hello"
    var b = "hello"
    var c = null
    var d = null
    var e = d

    println(a == b)
    // true
    println(a == c)
    // false
    println(c == e)
    // true
}

----------------------------------------

TITLE: Using filterIndexed() and filterNot() in Kotlin
DESCRIPTION: Shows the usage of filterIndexed() to filter based on both index and value, and filterNot() to filter elements that don't match the predicate.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    
    val filteredIdx = numbers.filterIndexed { index, s -> (index != 0) && (s.length < 5)  }
    val filteredNot = numbers.filterNot { it.length <= 3 }

    println(filteredIdx)
    println(filteredNot)
}

----------------------------------------

TITLE: Sealed Class with Enum Integration in Kotlin
DESCRIPTION: Demonstrates how to combine sealed classes with enums for error severity handling.

LANGUAGE: kotlin
CODE:
enum class ErrorSeverity { MINOR, MAJOR, CRITICAL }

sealed class Error(val severity: ErrorSeverity) {
    class FileReadError(val file: File): Error(ErrorSeverity.MAJOR)
    class DatabaseError(val source: DataSource): Error(ErrorSeverity.CRITICAL)
    object RuntimeError : Error(ErrorSeverity.CRITICAL)
}

----------------------------------------

TITLE: Smart Cast Example in Kotlin
DESCRIPTION: Shows how Kotlin compiler automatically casts objects after type checks without explicit cast operators.

LANGUAGE: kotlin
CODE:
fun demo(x: Any) {
    if (x is String) {
        print(x.length) // x is automatically cast to String
    }
}

----------------------------------------

TITLE: Using Collection Builder Function in Kotlin
DESCRIPTION: Demonstrates the use of the buildMap function to create a map. This function creates a mutable map, populates it, and returns a read-only map.

LANGUAGE: kotlin
CODE:
val map = buildMap { // this is MutableMap<String, Int>, types of key and value are inferred from the `put()` calls below
    put("a", 1)
    put("b", 0)
    put("c", 4)
}

println(map) // {a=1, b=0, c=4}

----------------------------------------

TITLE: Control Flow Smart Casting in Kotlin
DESCRIPTION: Demonstrates smart casting in when expressions with different type checks.

LANGUAGE: kotlin
CODE:
when (x) {
    is Int -> print(x + 1)
    is String -> print(x.length + 1)
    is IntArray -> print(x.sum())
}

----------------------------------------

TITLE: Using ListIterator for Backward Iteration in Kotlin
DESCRIPTION: Illustrates how to use ListIterator to iterate over a list in reverse order. It demonstrates the use of hasPrevious(), previous(), and previousIndex() methods.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    val listIterator = numbers.listIterator()
    while (listIterator.hasNext()) listIterator.next()
    println("Iterating backwards:")
    while (listIterator.hasPrevious()) {
        print("Index: ${listIterator.previousIndex()}")
        println(", value: ${listIterator.previous()}")
    }
}

----------------------------------------

TITLE: Producing Sequence Elements with yield() and yieldAll() in Kotlin
DESCRIPTION: Demonstrates using the sequence() function with yield() and yieldAll() to produce sequence elements one by one or in chunks.

LANGUAGE: kotlin
CODE:
fun main() {
    val oddNumbers = sequence {
        yield(1)
        yieldAll(listOf(3, 5))
        yieldAll(generateSequence(7) { it + 2 })
    }
    println(oddNumbers.take(5).toList())
}

----------------------------------------

TITLE: Color Representation with Unsigned Integers
DESCRIPTION: Demonstrates using unsigned integers to represent color values in AARRGGBB format.

LANGUAGE: kotlin
CODE:
data class Color(val representation: UInt)

val yellow = Color(0xFFCC00CCu)

----------------------------------------

TITLE: Data Class Property Comparison Example in Kotlin
DESCRIPTION: Demonstrates how properties declared in the class body are excluded from equality comparisons and string representation.

LANGUAGE: kotlin
CODE:
data class Person(val name: String) {
    var age: Int = 0
}
fun main() {
    val person1 = Person("John")
    val person2 = Person("John")
    person1.age = 10
    person2.age = 20

    println("person1 == person2: ${person1 == person2}")
    println("person1 with age ${person1.age}: ${person1}")
    println("person2 with age ${person2.age}: ${person2}")
}

----------------------------------------

TITLE: Using guard conditions in when expressions
DESCRIPTION: Demonstrates how to use guard conditions in when expressions with subjects, allowing for more complex control flows.

LANGUAGE: kotlin
CODE:
sealed interface Animal {
    data class Cat(val mouseHunter: Boolean) : Animal {
        fun feedCat() {}
    }

    data class Dog(val breed: String) : Animal {
        fun feedDog() {}
    }
}

fun feedAnimal(animal: Animal) {
    when (animal) {
        // Branch with only the primary condition. Returns `feedDog()` when `Animal` is `Dog`
        is Animal.Dog -> animal.feedDog()
        // Branch with both primary and guard conditions. Returns `feedCat()` when `Animal` is `Cat` and is not `mouseHunter`
        is Animal.Cat if !animal.mouseHunter -> animal.feedCat()
        // Returns "Unknown animal" if none of the above conditions match
        else -> println("Unknown animal")
    }
}

----------------------------------------

TITLE: Filtering Maps in Kotlin
DESCRIPTION: Demonstrates various map filtering operations including filtering by both key and value, and separate filtering of keys and values.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("key1" to 1, "key2" to 2, "key3" to 3, "key11" to 11)
    val filteredMap = numbersMap.filter { (key, value) -> key.endsWith("1") && value > 10}
    println(filteredMap)
}

----------------------------------------

TITLE: Safe Element Retrieval with Null Handling in Kotlin
DESCRIPTION: Demonstrates safe element retrieval using elementAtOrNull() and elementAtOrElse() to handle out-of-bounds access.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")
    println(numbers.elementAtOrNull(5))
    println(numbers.elementAtOrElse(5) { index -> "The value for index $index is undefined"})
}

----------------------------------------

TITLE: Importing All Contents of a Package in Kotlin
DESCRIPTION: This example demonstrates how to import all accessible contents of a package in Kotlin using the wildcard (*).

LANGUAGE: kotlin
CODE:
import org.example.* // everything in 'org.example' becomes accessible

----------------------------------------

TITLE: Declaration-site Variance Example
DESCRIPTION: Demonstrates how to use the 'out' modifier for covariance in generic interfaces.

LANGUAGE: kotlin
CODE:
interface Source<out T> {
    fun nextT(): T
}

fun demo(strs: Source<String>) {
    val objects: Source<Any> = strs // This is OK, since T is an out-parameter
}

----------------------------------------

TITLE: String Formatting in Kotlin with String.format()
DESCRIPTION: Demonstrates various string formatting techniques using String.format() function.

LANGUAGE: kotlin
CODE:
fun main() { 
    val integerNumber = String.format("%07d", 31416)
    println(integerNumber)
    val floatNumber = String.format("%+.4f", 3.141592)
    println(floatNumber)
    val helloString = String.format("%S %S", "hello", "world")
    println(helloString)
    val negativeNumberInParentheses = String.format("%(d means %1\$d", -31416)
    println(negativeNumberInParentheses)
}

----------------------------------------

TITLE: Comparing Lists with Custom Objects in Kotlin
DESCRIPTION: This snippet demonstrates how lists of custom objects are compared for equality, and how modifying an object in the list affects the comparison.

LANGUAGE: kotlin
CODE:
data class Person(var name: String, var age: Int)

fun main() {
    val bob = Person("Bob", 31)
    val people = listOf(Person("Adam", 20), bob, bob)
    val people2 = listOf(Person("Adam", 20), Person("Bob", 31), bob)
    println(people == people2)
    bob.age = 32
    println(people == people2)
}

----------------------------------------

TITLE: Using String Templates in Kotlin
DESCRIPTION: Demonstration of string templates in Kotlin. It shows how to include variable values in strings and how to evaluate expressions within string templates.

LANGUAGE: kotlin
CODE:
fun main() { 
    val customers = 10
    println("There are $customers customers")
    // There are 10 customers
    
    println("There are ${customers + 1} customers")
    // There are 11 customers
}

----------------------------------------

TITLE: Implementation by Delegation Example
DESCRIPTION: Shows how to use the new implementation by delegation feature with inline classes

LANGUAGE: kotlin
CODE:
interface Bar {
    fun foo() = "foo"
}

@JvmInline
value class BarWrapper(val bar: Bar): Bar by bar

fun main() {
    val bw = BarWrapper(object: Bar {})
    println(bw.foo())
}

----------------------------------------

TITLE: Filtering Non-null Elements with filterNotNull() in Kotlin
DESCRIPTION: Shows how to use filterNotNull() to filter out null elements from a list and work with the resulting non-nullable elements.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(null, "one", "two", null)
    numbers.filterNotNull().forEach {
        println(it.length)   // length is unavailable for nullable Strings
    }
}

----------------------------------------

TITLE: List Filtering in Kotlin
DESCRIPTION: Demonstrates two ways to filter lists in Kotlin using lambda expressions.

LANGUAGE: kotlin
CODE:
val positives = list.filter { x -> x > 0 }

LANGUAGE: kotlin
CODE:
val positives = list.filter { it > 0 }

----------------------------------------

TITLE: Using noinline Modifier in Kotlin Inline Functions
DESCRIPTION: Demonstrates how to use the noinline modifier to prevent specific lambda parameters from being inlined in an inline function.

LANGUAGE: kotlin
CODE:
inline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) { ... }

----------------------------------------

TITLE: Handling Java Varargs in Kotlin
DESCRIPTION: Demonstrates how to pass arguments to Java methods with varargs in Kotlin using the spread operator.

LANGUAGE: kotlin
CODE:
val javaObj = JavaArrayExample()
val array = intArrayOf(0, 1, 2, 3)
javaObj.removeIndicesVarArg(*array)

----------------------------------------

TITLE: Extension Function vs Member Function Precedence in Kotlin
DESCRIPTION: Shows that member functions take precedence over extension functions with the same name and signature.

LANGUAGE: kotlin
CODE:
fun main() {
    class Example {
        fun printFunctionType() { println("Class method") }
    }
    
    fun Example.printFunctionType() { println("Extension function") }
    
    Example().printFunctionType()
}

----------------------------------------

TITLE: Demonstrating Running Fold and Reduce in Kotlin Collections
DESCRIPTION: This snippet illustrates the use of runningReduce() and runningFold() functions, which provide intermediate results of fold and reduce operations on collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(0, 1, 2, 3, 4, 5)
    val runningReduceSum = numbers.runningReduce { sum, item -> sum + item }
    val runningFoldSum = numbers.runningFold(10) { sum, item -> sum + item }

    val transform = { index: Int, element: Int -> "N = ${index + 1}: $element" }
    println(runningReduceSum.mapIndexed(transform).joinToString("\n", "Sum of first N elements with runningReduce:\n"))
    println(runningFoldSum.mapIndexed(transform).joinToString("\n", "Sum of first N elements with runningFold:\n"))
}

----------------------------------------

TITLE: SAM Conversions Example
DESCRIPTION: Demonstrates the new SAM (Single Abstract Method) conversion feature for Kotlin interfaces in 1.4.0

LANGUAGE: kotlin
CODE:
fun interface IntPredicate {
    fun accept(i: Int): Boolean
}

val isEven = IntPredicate { it % 2 == 0 }

fun main() { 
    println("Is 7 even? - ${isEven.accept(7)}")
}

----------------------------------------

TITLE: Creating a Serializable Kotlin Class
DESCRIPTION: Defines a data class annotated with @Serializable to make it serializable.

LANGUAGE: kotlin
CODE:
import kotlinx.serialization.Serializable

@Serializable
data class Data(val a: Int, val b: String)

----------------------------------------

TITLE: Using Java Getters and Setters in Kotlin
DESCRIPTION: Shows how Java getters and setters are represented as properties in Kotlin, including Boolean accessors.

LANGUAGE: kotlin
CODE:
import java.util.Calendar

fun calendarDemo() {
    val calendar = Calendar.getInstance()
    if (calendar.firstDayOfWeek == Calendar.SUNDAY) { // call getFirstDayOfWeek()
        calendar.firstDayOfWeek = Calendar.MONDAY // call setFirstDayOfWeek()
    }
    if (!calendar.isLenient) { // call isLenient()
        calendar.isLenient = true // call setLenient()
    }
}

----------------------------------------

TITLE: Using Predicates with Take and Drop Functions in Kotlin
DESCRIPTION: Illustrates the use of takeWhile(), takeLastWhile(), dropWhile(), and dropLastWhile() functions, which use predicates to determine the number of elements to take or drop from a collection.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five", "six")
    println(numbers.takeWhile { !it.startsWith('f') })
    println(numbers.takeLastWhile { it != "three" })
    println(numbers.dropWhile { it.length == 3 })
    println(numbers.dropLastWhile { it.contains('i') })
}

----------------------------------------

TITLE: Using Default Arguments in Kotlin Functions
DESCRIPTION: Demonstrates how to use default arguments in Kotlin functions to reduce the number of overloads.

LANGUAGE: kotlin
CODE:
fun read(
    b: ByteArray,
    off: Int = 0,
    len: Int = b.size,
) { /*...*/ }

----------------------------------------

TITLE: Creating Type Aliases for Function Types in Kotlin
DESCRIPTION: This example shows how to define type aliases for function types, providing more descriptive names for complex function signatures.

LANGUAGE: kotlin
CODE:
typealias MyHandler = (Int, String, Any) -> Unit

typealias Predicate<T> = (T) -> Boolean

----------------------------------------

TITLE: Using Null-Safe Collection Operations in Kotlin
DESCRIPTION: This Kotlin snippet shows how to use null-safe collection operations like firstOrNull() and getOrNull() to handle potential null values.

LANGUAGE: kotlin
CODE:
// Kotlin
val numbers = listOf(1, 2)

println(numbers[0])  // Can throw IndexOutOfBoundsException if the collection is empty
//numbers.get(5)     // Exception!

// More abilities:
println(numbers.firstOrNull())
println(numbers.getOrNull(5)) // null

----------------------------------------

TITLE: Building Sequences with Coroutines
DESCRIPTION: Demonstrates using coroutines to create lazily generated sequences with yield and yieldAll functions

LANGUAGE: kotlin
CODE:
val seq = buildSequence {
    for (i in 1..5) {
        yield(i * i)
    }
    yieldAll(26..28)
}

println(seq.toList())

----------------------------------------

TITLE: Symmetric Difference of Sets in Kotlin
DESCRIPTION: Demonstrates how to find elements present in either of two collections but not in their intersection, using a combination of subtract and union operations.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf("one", "two", "three")
    val numbers2 = setOf("three", "four")

    // merge differences 
    println((numbers - numbers2) union (numbers2 - numbers))
    // [one, two, four]
}

----------------------------------------

TITLE: Hard Keywords in Kotlin
DESCRIPTION: Core keywords that cannot be used as identifiers in Kotlin, such as as, break, class, continue, etc. These keywords have fixed meanings and functionalities in the language.



----------------------------------------

TITLE: Using compareBy() and thenBy() for Multi-Criteria Sorting in Kotlin
DESCRIPTION: This snippet demonstrates how to use compareBy() and thenBy() functions to sort strings by length first and then alphabetically. It provides a more concise way to define multi-criteria sorting.

LANGUAGE: kotlin
CODE:
fun main() {
    val sortedStrings = listOf("aaa", "bb", "c", "b", "a", "aa", "ccc")
        .sortedWith(compareBy<String> { it.length }.thenBy { it })

    println(sortedStrings)
    // [a, b, c, aa, bb, aaa, ccc]
}

----------------------------------------

TITLE: Stable Duration API example
DESCRIPTION: Demonstrates the usage of the stable Duration API in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
import kotlin.time.Duration.Companion.seconds

fun main() {
    val duration = 10000
    println("There are ${duration.seconds.inWholeMinutes} minutes in $duration seconds")
    // There are 166 minutes in 10000 seconds
}

----------------------------------------

TITLE: Defining Inline Properties in Kotlin
DESCRIPTION: Demonstrates how to define inline properties and inline individual property accessors in Kotlin.

LANGUAGE: kotlin
CODE:
val foo: Foo
    inline get() = Foo()

var bar: Bar
    get() = ...
    inline set(v) { ... }

inline var bar: Bar
    get() = ...
    set(v) { ... }

----------------------------------------

TITLE: Handling Java Null-Safety in Kotlin
DESCRIPTION: Explains how Kotlin handles null-safety for Java types, including platform types and nullability annotations.

LANGUAGE: kotlin
CODE:
val list = ArrayList<String>() // non-null (constructor result)
list.add("Item")
val size = list.size // non-null (primitive int)
val item = list[0] // platform type inferred (ordinary Java object)

item.substring(1) // allowed, throws an exception if item == null

val nullable: String? = item // allowed, always works
val notNull: String = item // allowed, may fail at runtime

----------------------------------------

TITLE: Using multi-dollar string interpolation
DESCRIPTION: Demonstrates how to use multi-dollar string interpolation to handle dollar signs within string literals more effectively.

LANGUAGE: kotlin
CODE:
val KClass<*>.jsonSchema : String
    get() = $$"""
    {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "https://example.com/product.schema.json",
      "$dynamicAnchor": "meta"
      "title": "$${simpleName ?: qualifiedName ?: "unknown"}",
      "type": "object"
    }
    """

----------------------------------------

TITLE: Generating an Infinite Sequence in Kotlin
DESCRIPTION: Demonstrates creating an infinite sequence of odd numbers using generateSequence() function. The sequence generation continues indefinitely.

LANGUAGE: kotlin
CODE:
fun main() {
    val oddNumbers = generateSequence(1) { it + 2 } // `it` is the previous element
    println(oddNumbers.take(5).toList())
    //println(oddNumbers.count())     // error: the sequence is infinite
}

----------------------------------------

TITLE: Initializing Number Variables in Kotlin
DESCRIPTION: Demonstrates different ways to initialize number variables in Kotlin using type inference and explicit type declarations.

LANGUAGE: kotlin
CODE:
val one = 1 // Int
val threeBillion = 3000000000 // Long
val oneLong = 1L // Long
val oneByte: Byte = 1

----------------------------------------

TITLE: Using Named Arguments in Kotlin Function Calls
DESCRIPTION: Demonstrates how to use named arguments when calling Kotlin functions, allowing for more readable and flexible function calls.

LANGUAGE: kotlin
CODE:
fun reformat(
    str: String,
    normalizeCase: Boolean = true,
    upperCaseFirstLetter: Boolean = true,
    divideByCamelHumps: Boolean = false,
    wordSeparator: Char = ' ',
) { /*...*/ }

reformat(
    "String!",
    false,
    upperCaseFirstLetter = false,
    divideByCamelHumps = true,
    '_'
)

reformat("This is a long String!")

reformat("This is a short String!", upperCaseFirstLetter = false, wordSeparator = '_')

----------------------------------------

TITLE: Using Java Annotations in Kotlin
DESCRIPTION: This example demonstrates how Java annotations can be used in Kotlin code, showing full compatibility between the two languages.

LANGUAGE: kotlin
CODE:
import org.junit.Test
import org.junit.Assert.*
import org.junit.Rule
import org.junit.rules.*

class Tests {
    // apply @Rule annotation to property getter
    @get:Rule val tempFolder = TemporaryFolder()

    @Test fun simple() {
        val f = tempFolder.newFile()
        assertEquals(42, getTheAnswer())
    }
}

----------------------------------------

TITLE: Illustrating Loss of Smartcasts with Separate Functions
DESCRIPTION: Demonstrates how smartcasts are lost when type checks are extracted into separate functions.

LANGUAGE: kotlin
CODE:
fun String?.isNotNull(): Boolean = this != null

fun foo(s: String?) {
    if (s.isNotNull()) s.length // No smartcast :(
}

----------------------------------------

TITLE: Reversing Collections in Kotlin
DESCRIPTION: This example shows how to use reversed() and asReversed() functions to reverse the order of elements in a collection. It also demonstrates the difference between these two functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    println(numbers.reversed())

    val reversedNumbers = numbers.asReversed()
    println(reversedNumbers)

    val mutableNumbers = mutableListOf("one", "two", "three", "four")
    val reversedMutableNumbers = mutableNumbers.asReversed()
    println(reversedMutableNumbers)
    mutableNumbers.add("five")
    println(reversedMutableNumbers)
}

----------------------------------------

TITLE: Declaring a Basic Annotation in Kotlin
DESCRIPTION: This snippet demonstrates how to declare a simple annotation class in Kotlin.

LANGUAGE: kotlin
CODE:
annotation class Fancy

----------------------------------------

TITLE: Zipping Collections in Kotlin
DESCRIPTION: Shows how to use zip() function to combine elements from two collections, including with a custom transformation function. Also demonstrates unzip() for reversing the process.

LANGUAGE: kotlin
CODE:
fun main() {
    val colors = listOf("red", "brown", "grey")
    val animals = listOf("fox", "bear", "wolf")
    println(colors zip animals)

    val twoAnimals = listOf("fox", "bear")
    println(colors.zip(twoAnimals))
}

LANGUAGE: kotlin
CODE:
fun main() {
    val colors = listOf("red", "brown", "grey")
    val animals = listOf("fox", "bear", "wolf")
    
    println(colors.zip(animals) { color, animal -> "The ${animal.replaceFirstChar { it.uppercase() }} is $color"})
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numberPairs = listOf("one" to 1, "two" to 2, "three" to 3, "four" to 4)
    println(numberPairs.unzip())
}

----------------------------------------

TITLE: Using associateWith Function
DESCRIPTION: Shows how to use the new associateWith function to create maps from keys.

LANGUAGE: kotlin
CODE:
fun main() {
    val keys = 'a'..'f'
    val map = keys.associateWith { it.toString().repeat(5).capitalize() }
    map.forEach { println(it) }
}

----------------------------------------

TITLE: Configuring Gradle Build Script for Kotlin/JVM Project
DESCRIPTION: Basic Gradle Kotlin build script (build.gradle.kts) that sets up a Kotlin JVM project with necessary plugins, dependencies, and test configuration. Includes Maven Central repository setup and JUnit test platform configuration.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kotlinVersion%" // Kotlin version to use
}

group = "org.example" // A company name, for example, `org.jetbrains`
version = "1.0-SNAPSHOT" // Version to assign to the built artifact

repositories { // Sources of dependencies. See 1️⃣
    mavenCentral() // Maven Central Repository. See 2️⃣
}

dependencies { // All the libraries you want to use. See 3️⃣
    // Copy dependencies' names after you find them in a repository
    testImplementation(kotlin("test")) // The Kotlin test library
}

tasks.test { // See 4️⃣
    useJUnitPlatform() // JUnitPlatform for tests. See 5️⃣
}

----------------------------------------

TITLE: Atomic Types Usage Example
DESCRIPTION: Example demonstrating usage of new common atomic types for thread-safe operations in Kotlin.

LANGUAGE: kotlin
CODE:
@OptIn(ExperimentalAtomicApi::class)
suspend fun main() {
    var processedItems = AtomicInt(0)
    val totalItems = 100
    val items = List(totalItems) { "item$it" }
    val chunkSize = 20
    val itemChunks = items.chunked(chunkSize)
    coroutineScope {
        for (chunk in itemChunks) {
            launch {
                for (item in chunk) {
                    println("Processing $item in thread ${Thread.currentThread()}")
                    processedItems += 1
                }
            }
         }
    }
    println("Total processed items: ${processedItems.load()}")
}

----------------------------------------

TITLE: Intersect and Subtract Operations on Sets in Kotlin
DESCRIPTION: Shows how to use intersect() to find common elements between two sets and subtract() to remove elements from a set that are present in another set.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf("one", "two", "three")

    // same output
    println(numbers intersect setOf("two", "one"))
    // [one, two]
    println(numbers subtract setOf("three", "four"))
    // [one, two]
    println(numbers subtract setOf("four", "three"))
    // [one, two]
}

----------------------------------------

TITLE: Working with Primitive Arrays in Kotlin
DESCRIPTION: Shows how to create and work with primitive type arrays to avoid boxing overhead.

LANGUAGE: kotlin
CODE:
fun main() {
    val exampleArray = IntArray(5)
    println(exampleArray.joinToString())
}

----------------------------------------

TITLE: Custom Sorting with sortedBy() and sortedByDescending() in Kotlin
DESCRIPTION: This snippet demonstrates the use of sortedBy() and sortedByDescending() functions to sort a collection of strings based on custom criteria, such as string length and last character.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")

    val sortedNumbers = numbers.sortedBy { it.length }
    println("Sorted by length ascending: $sortedNumbers")
    val sortedByLast = numbers.sortedByDescending { it.last() }
    println("Sorted by the last letter descending: $sortedByLast")
}

----------------------------------------

TITLE: Associating Collections in Kotlin
DESCRIPTION: Demonstrates creating a map from a list by associating each element with its length using the associateWith function.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    println(numbers.associateWith { it.length })
}

----------------------------------------

TITLE: Configuring Gradle Build Script for Kotlin/JVM
DESCRIPTION: Gradle build script configuration showing the required Kotlin JVM plugin setup. This snippet demonstrates how to properly configure the build.gradle.kts file for a Kotlin console application.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kotlinVersion%"
    application
}

----------------------------------------

TITLE: Configuring Java toolchain in Kotlin DSL
DESCRIPTION: Demonstrates how to set up a Java toolchain for Kotlin compilation in a Gradle build script using Kotlin DSL. This allows specifying the JDK version to use for compilation.

LANGUAGE: kotlin
CODE:
kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>))
    }
    // Or shorter:
    jvmToolchain(<MAJOR_JDK_VERSION>)
    // For example:
    jvmToolchain(%jvmLTSVersionSupportedByKotlin%)
}

----------------------------------------

TITLE: Property Declaration in Kotlin Constructors
DESCRIPTION: Shows various ways to declare and initialize properties in Kotlin class constructors, including default values and trailing commas.

LANGUAGE: kotlin
CODE:
class Person(val firstName: String, val lastName: String, var age: Int)

LANGUAGE: kotlin
CODE:
class Person(val firstName: String, val lastName: String, var isEmployed: Boolean = true)

LANGUAGE: kotlin
CODE:
class Person(
    val firstName: String,
    val lastName: String,
    var age: Int, // trailing comma
) { /*...*/ }

----------------------------------------

TITLE: Demonstrating Set Operations in Kotlin
DESCRIPTION: This snippet shows basic Set operations such as checking the size, testing for element presence, and comparing sets with different element orders.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = setOf(1, 2, 3, 4)
    println("Number of elements: ${numbers.size}")
    if (numbers.contains(1)) println("1 is in the set")

    val numbersBackwards = setOf(4, 3, 2, 1)
    println("The sets are equal: ${numbers == numbersBackwards}")
}

----------------------------------------

TITLE: Kotlin Class Reference Example
DESCRIPTION: Demonstrates how to obtain a reference to a Kotlin class using the class literal syntax

LANGUAGE: kotlin
CODE:
val c = MyClass::class

----------------------------------------

TITLE: Filtering Collections in Kotlin
DESCRIPTION: Demonstrates creating a new list by filtering elements from an existing list based on a condition.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")  
    val longerThan3 = numbers.filter { it.length > 3 }
    println(longerThan3)
}

----------------------------------------

TITLE: Sublist Creation in Kotlin
DESCRIPTION: Shows how to create a view of a specific range of list elements using the subList() function.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = (0..13).toList()
    println(numbers.subList(3, 6))
}

----------------------------------------

TITLE: Using minusAssign Operator for Removing Elements in Kotlin
DESCRIPTION: Shows the use of the -= operator (minusAssign) to remove elements from a mutable list. The example demonstrates removing both single elements and collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf("one", "two", "three", "three", "four")
    numbers -= "three"
    println(numbers)
    numbers -= listOf("four", "five")    
    //numbers -= listOf("four")    // does the same as above
    println(numbers)    
}

----------------------------------------

TITLE: Using data objects
DESCRIPTION: Shows examples of using the new data object feature, which provides singleton semantics and clean toString() representation.

LANGUAGE: kotlin
CODE:
package org.example
object MyObject
data object MyDataObject

fun main() {
    println(MyObject) // org.example.MyObject@1f32e575
    println(MyDataObject) // MyDataObject
}

LANGUAGE: kotlin
CODE:
sealed interface ReadResult
data class Number(val number: Int) : ReadResult
data class Text(val text: String) : ReadResult
data object EndOfFile : ReadResult

fun main() {
    println(Number(7)) // Number(number=7)
    println(EndOfFile) // EndOfFile
}

----------------------------------------

TITLE: Linear Search Operations in Kotlin Lists
DESCRIPTION: Demonstrates finding element positions using indexOf() and lastIndexOf() functions, as well as predicate-based searches with indexOfFirst() and indexOfLast().

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(1, 2, 3, 4, 2, 5)
    println(numbers.indexOf(2))
    println(numbers.lastIndexOf(2))
}

----------------------------------------

TITLE: String Immutability and Transformation in Kotlin
DESCRIPTION: Shows the immutability of strings and how operations create new String objects.

LANGUAGE: kotlin
CODE:
fun main() {
    val str = "abcd"
    println(str.uppercase())
    println(str) 
}

----------------------------------------

TITLE: Applying the Kotlin JVM plugin in Groovy DSL
DESCRIPTION: Shows how to apply the Kotlin JVM plugin in a Gradle build script using Groovy DSL. The plugin is applied using the plugins block with the id function.

LANGUAGE: groovy
CODE:
plugins {
    id "org.jetbrains.kotlin.jvm" version "%kotlinVersion%"
}

----------------------------------------

TITLE: Java-style Progression Loop
DESCRIPTION: Demonstrates the equivalent Java-style for loop implementation of a progression.

LANGUAGE: java
CODE:
for (int i = first; i <= last; i += step) {
  // ...
}

----------------------------------------

TITLE: Spring Boot Main Application in Kotlin
DESCRIPTION: Basic Spring Boot application setup with main entry point using Kotlin.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
    runApplication<DemoApplication>(*args)
}

----------------------------------------

TITLE: Demonstrating Mutability in Kotlin
DESCRIPTION: Shows Kotlin's compile-time enforcement of collection mutability through explicit mutable and immutable collection types.

LANGUAGE: kotlin
CODE:
val numbers = mutableListOf("one", "two", "three", "four")
numbers.add("five")            // This is OK
val immutableNumbers = listOf("one", "two")
//immutableNumbers.add("five") // Compilation error

----------------------------------------

TITLE: Performing Mutable Map Operations in Kotlin
DESCRIPTION: This snippet shows operations on a MutableMap, including adding new key-value pairs and updating existing values.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mutableMapOf("one" to 1, "two" to 2)
    numbersMap.put("three", 3)
    numbersMap["one"] = 11

    println(numbersMap)
}

----------------------------------------

TITLE: Kotlin Property Reference Example
DESCRIPTION: Demonstrates how to use property references with both read-only and mutable properties

LANGUAGE: kotlin
CODE:
var y = 1

fun main() {
    ::y.set(2)
    println(y)
}

----------------------------------------

TITLE: Promise-based Implementation in Kotlin
DESCRIPTION: Demonstrates using promises/futures for handling asynchronous operations with method chaining pattern.

LANGUAGE: kotlin
CODE:
fun postItem(item: Item) {
    preparePostAsync() 
        .thenCompose { token -> 
            submitPostAsync(token, item)
        }
        .thenAccept { post -> 
            processPost(post)
        }
         
}

fun preparePostAsync(): Promise<Token> {
    // makes request and returns a promise that is completed later
    return promise 
}

----------------------------------------

TITLE: Configuring Dependencies in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to declare dependencies for different source sets in a Kotlin Multiplatform project.

LANGUAGE: Kotlin
CODE:
kotlin {
    sourceSets {
        val commonMain by getting {
            dependencies {
                api("com.example:foo-metadata:1.0")
            }
        }
        val jvmMain by getting {
            dependencies {
                implementation("com.example:foo-jvm:1.0")
            }
        }
    }
}

LANGUAGE: Groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                api 'com.example:foo-metadata:1.0'
            }
        }
        jvmMain {
            dependencies {
                implementation 'com.example:foo-jvm:1.0'
            }
        }
    }
}

----------------------------------------

TITLE: Using zipWithNext Function on Collections in Kotlin
DESCRIPTION: Demonstrates the zipWithNext() function, which creates pairs of adjacent elements in a collection. It also shows how to apply a transformation to the resulting pairs.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")    
    println(numbers.zipWithNext())
    println(numbers.zipWithNext() { s1, s2 -> s1.length > s2.length})
}

----------------------------------------

TITLE: Documenting Kotlin Class Using KDoc
DESCRIPTION: Example showing how to document a generic class using KDoc syntax. Demonstrates usage of block tags for class description, type parameters, properties, and methods.

LANGUAGE: kotlin
CODE:
/**
 * A group of *members*.
 *
 * This class has no useful logic; it's just a documentation example.
 *
 * @param T the type of a member in this group.
 * @property name the name of this group.
 * @constructor Creates an empty group.
 */
class Group<T>(val name: String) {
    /**
     * Adds a [member] to this group.
     * @return the new size of the group.
     */
    fun add(member: T): Int { ... }
}

----------------------------------------

TITLE: Package-Level Functions Example
DESCRIPTION: Demonstrates how Kotlin package-level functions are compiled to static methods in a Java class.

LANGUAGE: kotlin
CODE:
// app.kt
package org.example

class Util

fun getTime() { /*...*/ }

LANGUAGE: java
CODE:
// Java
new org.example.Util();
org.example.AppKt.getTime();

----------------------------------------

TITLE: Declaring a Package in Kotlin
DESCRIPTION: This snippet demonstrates how to declare a package in a Kotlin source file. It shows that all contents of the file are included in the declared package.

LANGUAGE: kotlin
CODE:
package org.example

fun printMessage() { /*...*/ }
class Message { /*...*/ }

// ...

----------------------------------------

TITLE: Declaring Basic Inline Value Class
DESCRIPTION: Shows the basic syntax for declaring an inline value class using the 'value' modifier.

LANGUAGE: kotlin
CODE:
value class Password(private val s: String)

----------------------------------------

TITLE: Adding Elements to Mutable List in Kotlin
DESCRIPTION: Demonstrates how to add a single element to a mutable list using the add() function. The example creates a list of numbers and appends a new number to the end.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf(1, 2, 3, 4)
    numbers.add(5)
    println(numbers)
}

----------------------------------------

TITLE: Declaring Kotlin Multiplatform Targets in Gradle
DESCRIPTION: Example of how to declare multiple platform targets in a Kotlin Multiplatform project's Gradle configuration.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm() // Declares a JVM target
    iosArm64() // Declares a target that corresponds to 64-bit iPhones
}

----------------------------------------

TITLE: Underscore for Unused Variables
DESCRIPTION: Shows how to skip unused variables in destructuring declarations using underscore.

LANGUAGE: kotlin
CODE:
val (_, status) = getResult()

----------------------------------------

TITLE: Associating Collections in Kotlin
DESCRIPTION: Demonstrates associateWith(), associateBy(), and associate() functions for creating maps from collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    println(numbers.associateWith { it.length })
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")

    println(numbers.associateBy { it.first().uppercaseChar() })
    println(numbers.associateBy(keySelector = { it.first().uppercaseChar() }, valueTransform = { it.length }))
}

LANGUAGE: kotlin
CODE:
fun main() {
data class FullName (val firstName: String, val lastName: String)

fun parseFullName(fullName: String): FullName {
    val nameParts = fullName.split(" ")
    if (nameParts.size == 2) {
        return FullName(nameParts[0], nameParts[1])
    } else throw Exception("Wrong name format")
}

    val names = listOf("Alice Adams", "Brian Brown", "Clara Campbell")
    println(names.associate { name -> parseFullName(name).let { it.lastName to it.firstName } })  
}

----------------------------------------

TITLE: Setting Default Values in Java
DESCRIPTION: This Java code demonstrates how to check for null and set a default value if the check is successful.

LANGUAGE: java
CODE:
// Java
Order order = findOrder();
if (order == null) {
    order = new Order(new Customer("Antonio"))
}

----------------------------------------

TITLE: Checking Collection Emptiness in Kotlin
DESCRIPTION: Demonstrates the use of any() and none() without predicates to check if a collection is empty or not.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    val empty = emptyList<String>()

    println(numbers.any())
    println(empty.any())
    
    println(numbers.none())
    println(empty.none())
}

----------------------------------------

TITLE: Defining Nested Classes in Kotlin
DESCRIPTION: Demonstrates how to define a nested class within an outer class in Kotlin. The nested class can be accessed using the outer class name.

LANGUAGE: kotlin
CODE:
class Outer {
    private val bar: Int = 1
    class Nested {
        fun foo() = 2
    }
}

val demo = Outer.Nested().foo() // == 2

----------------------------------------

TITLE: Callback Implementation in Kotlin
DESCRIPTION: Shows how to implement asynchronous operations using callbacks, demonstrating the nested callback pattern that can lead to callback hell.

LANGUAGE: kotlin
CODE:
fun postItem(item: Item) {
    preparePostAsync { token -> 
        submitPostAsync(token, item) { post -> 
            processPost(post)
        }
    }
}

fun preparePostAsync(callback: (Token) -> Unit) {
    // make request and return immediately 
    // arrange callback to be invoked later
}

----------------------------------------

TITLE: Implementing Function Finder Processor
DESCRIPTION: Example implementation of a KSP processor that finds all top-level functions and non-local functions in top-level classes using a visitor pattern.

LANGUAGE: kotlin
CODE:
class HelloFunctionFinderProcessor : SymbolProcessor() {
    // ...
    val functions = mutableListOf<KSClassDeclaration>()
    val visitor = FindFunctionsVisitor()

    override fun process(resolver: Resolver) {
        resolver.getAllFiles().forEach { it.accept(visitor, Unit) }
    }

    inner class FindFunctionsVisitor : KSVisitorVoid() {
        override fun visitClassDeclaration(classDeclaration: KSClassDeclaration, data: Unit) {
            classDeclaration.getDeclaredFunctions().forEach { it.accept(this, Unit) }
        }

        override fun visitFunctionDeclaration(function: KSFunctionDeclaration, data: Unit) {
            functions.add(function)
        }

        override fun visitFile(file: KSFile, data: Unit) {
            file.declarations.forEach { it.accept(this, Unit) }
        }
    }
    // ...
    
    class Provider : SymbolProcessorProvider {
        override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor = TODO()
    }
}

----------------------------------------

TITLE: Iterating a List using For Loop in Kotlin
DESCRIPTION: Shows how to use a for loop to iterate over a list in Kotlin. This method implicitly obtains an iterator.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    for (item in numbers) {
        println(item)
    }
}

----------------------------------------

TITLE: Custom Java Class Name for Kotlin File
DESCRIPTION: Shows how to customize the generated Java class name using @JvmName annotation.

LANGUAGE: kotlin
CODE:
@file:JvmName("DemoUtils")

package org.example

class Util

fun getTime() { /*...*/ }

LANGUAGE: java
CODE:
// Java
new org.example.Util();
org.example.DemoUtils.getTime();

----------------------------------------

TITLE: Handling List Elements Safely in Java
DESCRIPTION: This Java code demonstrates the need for careful handling of list elements to avoid IndexOutOfBoundsException.

LANGUAGE: java
CODE:
// Java
var numbers = new ArrayList<Integer>();
numbers.add(1);
numbers.add(2);

System.out.println(numbers.get(0));
//numbers.get(5) // Exception!

----------------------------------------

TITLE: Enum Implementing Interfaces
DESCRIPTION: Shows how to implement interfaces in enum classes with specific implementations for each constant.

LANGUAGE: kotlin
CODE:
enum class IntArithmetics : BinaryOperator<Int>, IntBinaryOperator {
    PLUS {
        override fun apply(t: Int, u: Int): Int = t + u
    },
    TIMES {
        override fun apply(t: Int, u: Int): Int = t * u
    };
    
    override fun applyAsInt(t: Int, u: Int) = apply(t, u)
}

----------------------------------------

TITLE: Illustrating Class Member Visibility in Kotlin
DESCRIPTION: This code demonstrates how visibility modifiers affect class members in Kotlin. It shows the usage of private, protected, internal, and public modifiers within a class hierarchy.

LANGUAGE: kotlin
CODE:
open class Outer {
    private val a = 1
    protected open val b = 2
    internal open val c = 3
    val d = 4  // public by default
    
    protected class Nested {
        public val e: Int = 5
    }
}

class Subclass : Outer() {
    // a is not visible
    // b, c and d are visible
    // Nested and e are visible

    override val b = 5   // 'b' is protected
    override val c = 7   // 'c' is internal
}

class Unrelated(o: Outer) {
    // o.a, o.b are not visible
    // o.c and o.d are visible (same module)
    // Outer.Nested is not visible, and Nested::e is not visible either 
}

----------------------------------------

TITLE: Enabling Kotlin Maven Plugin
DESCRIPTION: Basic configuration to enable the Kotlin Maven plugin in the project build process.

LANGUAGE: xml
CODE:
<plugins>
    <plugin>
        <artifactId>kotlin-maven-plugin</artifactId>
        <groupId>org.jetbrains.kotlin</groupId>
        <version>%kotlinVersion%</version>
    </plugin>
</plugins>

----------------------------------------

TITLE: Sorting Collection Elements in Kotlin
DESCRIPTION: Demonstrates sorting elements using a custom selector function.

LANGUAGE: kotlin
CODE:
@GetMapping("/sortByLastLetter")
fun sortByLastLetter(): List<Message> {
    val messages = service.findMessages()
    return messages.sortedBy { it.text.last() }
}

----------------------------------------

TITLE: Data Class Destructuring Declaration in Kotlin
DESCRIPTION: Demonstrates how to use destructuring declarations with data classes using the auto-generated componentN() functions.

LANGUAGE: kotlin
CODE:
val jane = User("Jane", 35)
val (name, age) = jane
println("$name, $age years of age")

----------------------------------------

TITLE: Configuring Task Level Compiler Options in Kotlin
DESCRIPTION: Demonstrates how to configure compiler options for a specific compilation task using KotlinJvmCompile.

LANGUAGE: kotlin
CODE:
tasks.named<KotlinJvmCompile>("compileKotlin"){
    compilerOptions {
        optIn.add("kotlin.RequiresOptIn")
    }
}

----------------------------------------

TITLE: Implementing a Singleton using Object Declaration in Kotlin
DESCRIPTION: Demonstrates how to create a singleton object to manage data providers. The object includes methods for registering providers and retrieving all registered providers.

LANGUAGE: kotlin
CODE:
object DataProviderManager {
    private val providers = mutableListOf<DataProvider>()

    fun registerDataProvider(provider: DataProvider) {
        providers.add(provider)
    }

    val allDataProviders: Collection<DataProvider> 
        get() = providers
}

----------------------------------------

TITLE: Collections API Examples
DESCRIPTION: Demonstrates new collection functions added in Kotlin 1.4.0 like setOfNotNull() and shuffled()

LANGUAGE: kotlin
CODE:
fun main() {
    val set = setOfNotNull(null, 1, 2, 0, null)
    println(set)
    
    val numbers = (0 until 50).asSequence()
    val result = numbers.map { it * 2 }.shuffled().take(5)
    println(result.toList())
}

----------------------------------------

TITLE: Set Operations on Lists in Kotlin
DESCRIPTION: Illustrates how set operations (union, intersect, subtract) can be applied to lists, resulting in a Set where duplicate elements are merged.

LANGUAGE: kotlin
CODE:
fun main() {
    val list1 = listOf(1, 1, 2, 3, 5, 8, -1)
    val list2 = listOf(1, 1, 2, 2, 3, 5)

    // result of intersecting two lists is a Set
    println(list1 intersect list2)
    // [1, 2, 3, 5]

    // equal elements are merged into one
    println(list1 union list2)
    // [1, 2, 3, 5, 8, -1]
}

----------------------------------------

TITLE: Using Annotations in Kotlin
DESCRIPTION: This snippet demonstrates how to apply annotations to various Kotlin code elements including classes, functions, and expressions.

LANGUAGE: kotlin
CODE:
@Fancy class Foo {
    @Fancy fun baz(@Fancy foo: Int): Int {
        return (@Fancy 1)
    }
}

----------------------------------------

TITLE: Using Reduce Operation in Kotlin
DESCRIPTION: Demonstrates using reduce() to find an element with specific criteria.

LANGUAGE: kotlin
CODE:
@GetMapping("findTheLongestMessage")
fun reduce(): Message {
    val messages = service.findMessages()
    return messages.reduce { first, second ->
        if (first.text.length > second.text.length) first else second
    }
}

----------------------------------------

TITLE: Inline Class with Members and Constructors
DESCRIPTION: Example showing an inline class with properties, functions, init block, and secondary constructors.

LANGUAGE: kotlin
CODE:
@JvmInline
value class Person(private val fullName: String) {
    init {
        require(fullName.isNotEmpty()) {
            "Full name shouldn't be empty"
        }
    }

    constructor(firstName: String, lastName: String) : this("$firstName $lastName") {
        require(lastName.isNotBlank()) {
            "Last name shouldn't be empty"
        }
    }

    val length: Int
        get() = fullName.length

    fun greet() {
        println("Hello, $fullName")
    }
}

----------------------------------------

TITLE: Defining Expected Annotation Classes in Kotlin Multiplatform
DESCRIPTION: Illustrates how to declare expected annotation classes and implement them using existing platform-specific annotations.

LANGUAGE: kotlin
CODE:
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.RUNTIME)
expect annotation class XmlSerializable()

@XmlSerializable
class Person(val name: String, val age: Int)

LANGUAGE: kotlin
CODE:
import javax.xml.bind.annotation.XmlRootElement

actual typealias XmlSerializable = XmlRootElement

----------------------------------------

TITLE: Using groupingBy() and eachCount() for Lazy Grouping in Kotlin
DESCRIPTION: This snippet shows how to use groupingBy() to lazily group a list of strings by their first letter, and then use eachCount() to count the elements in each group. It also demonstrates iterating through the resulting map.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")

    // Groups the strings by their first letter using groupingBy() and counts the elements in each group
    val grouped = numbers.groupingBy { it.first() }.eachCount()

    // Iterates through each group and prints the key and its associated values
    for ((key, count) in grouped) {
        println("Key: $key, Count: $count")
        // Key: o, Count: 1
        // Key: t, Count: 2
        // Key: f, Count: 2
    }
}

----------------------------------------

TITLE: Using Annotations as Parameters in Other Annotations in Kotlin
DESCRIPTION: This example shows how to use one annotation as a parameter in another annotation in Kotlin.

LANGUAGE: kotlin
CODE:
annotation class ReplaceWith(val expression: String)

annotation class Deprecated(
        val message: String,
        val replaceWith: ReplaceWith = ReplaceWith(""))

@Deprecated("This function is deprecated, use === instead", ReplaceWith("this === other"))

----------------------------------------

TITLE: Configuring JUnit Platform in Gradle
DESCRIPTION: Setting up the test task to use JUnit Platform for test execution

LANGUAGE: kotlin
CODE:
tasks.test {
    useJUnitPlatform()
}

LANGUAGE: groovy
CODE:
test {
    useJUnitPlatform()
}

----------------------------------------

TITLE: Utility Functions for Input Reading
DESCRIPTION: Helper functions to simplify reading different types of input in competitive programming.

LANGUAGE: kotlin
CODE:
private fun readStr() = readln() // string line
private fun readInt() = readStr().toInt() // single int
private fun readStrings() = readStr().split(" ") // list of strings
private fun readInts() = readStrings().map { it.toInt() } // list of ints

----------------------------------------

TITLE: Destructuring Maps in Kotlin
DESCRIPTION: Shows how to iterate over maps using destructuring declarations.

LANGUAGE: kotlin
CODE:
for ((key, value) in map) {
   // do something with the key and the value
}

----------------------------------------

TITLE: Configuring Kotlin Version in Maven
DESCRIPTION: Defines the Kotlin version to be used throughout the Maven project using properties.

LANGUAGE: xml
CODE:
<properties>
    <kotlin.version>%kotlinVersion%</kotlin.version>
</properties>

----------------------------------------

TITLE: Defining Kotlin/Native Library
DESCRIPTION: Kotlin code defining a simple extension property for the String class to be compiled into a library.

LANGUAGE: kotlin
CODE:
package kotlinizer
val String.kotlinized
    get() = "Kotlin $this"

----------------------------------------

TITLE: Using Multiplatform Random
DESCRIPTION: Shows how to use the new multiplatform Random class introduced in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
import kotlin.random.Random

fun main() {
    val number = Random.nextInt(42)  // number is in range [0, limit)
    println(number)
}

----------------------------------------

TITLE: Map Plus and Minus Operations in Kotlin
DESCRIPTION: Shows how to use plus and minus operators with maps to add or remove entries, including handling of duplicate keys and multiple operations.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("one" to 1, "two" to 2, "three" to 3)
    println(numbersMap + Pair("four", 4))
    println(numbersMap + Pair("one", 10))
    println(numbersMap + mapOf("five" to 5, "one" to 11))
}

----------------------------------------

TITLE: Naming Conventions for Functions and Variables
DESCRIPTION: Examples of proper naming for Kotlin functions and variables using camel case.

LANGUAGE: kotlin
CODE:
fun processDeclarations() { /*...*/ }
var declarationCount = 1

----------------------------------------

TITLE: Safe Input Handling
DESCRIPTION: Shows safe input handling techniques using toIntOrNull() and readlnOrNull() functions to handle invalid inputs and end-of-input scenarios.

LANGUAGE: kotlin
CODE:
// Returns null if the input is invalid. For example: Hello!
val wrongInt = readln().toIntOrNull()
println(wrongInt)
// null

// Converts a valid input from a string to an integer. For example: 13
val correctInt = readln().toIntOrNull()
println(correctInt)
// 13

----------------------------------------

TITLE: String Concatenation in Kotlin
DESCRIPTION: Demonstrates string concatenation using the + operator with different types.

LANGUAGE: kotlin
CODE:
fun main() {
    val s = "abc" + 1
    println(s + "def")
}

----------------------------------------

TITLE: Grouping and Transforming Lists with groupBy() in Kotlin
DESCRIPTION: This snippet demonstrates how to use groupBy() to group a list of strings by their first letter, iterate through the groups, and transform the values to uppercase. It showcases both single and double lambda usage of groupBy().

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")

    // Groups the strings by their first letter using groupBy()
    val groupedByFirstLetter = numbers.groupBy { it.first().uppercase() }
    println(groupedByFirstLetter)
    // {O=[one], T=[two, three], F=[four, five]}

    // Iterates through each group and prints the key and its associated values
    for ((key, value) in groupedByFirstLetter) {
        println("Key: $key, Values: $value")
    }
    // Key: O, Values: [one]
    // Key: T, Values: [two, three]
    // Key: F, Values: [four, five]

    // Groups the strings by their first letter and transforms the values to uppercase
    val groupedAndTransformed = numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.uppercase() })
    println(groupedAndTransformed)
    // {o=[ONE], t=[TWO, THREE], f=[FOUR, FIVE]}
}

----------------------------------------

TITLE: Initial React Component Setup
DESCRIPTION: Basic React component setup in Kotlin/JS showing root component rendering.

LANGUAGE: kotlin
CODE:
import kotlinx.browser.document
import react.*
import react.dom.client.createRoot

fun main() {
    val container = document.getElementById("root") ?: error("Couldn't find root container!")
    createRoot(container).render(Fragment.create {
        h1 {
            +"Hello, React+Kotlin/JS!"
        }
    })
}

----------------------------------------

TITLE: Implementing Inner Classes in Kotlin
DESCRIPTION: Illustrates how to create an inner class in Kotlin using the 'inner' keyword. Inner classes can access members of their outer class.

LANGUAGE: kotlin
CODE:
class Outer {
    private val bar: Int = 1
    inner class Inner {
        fun foo() = bar
    }
}

val demo = Outer().Inner().foo() // == 1

----------------------------------------

TITLE: Retrieving Member Functions using KSP in Kotlin
DESCRIPTION: Extension function to get all declared functions from a KSClassDeclaration by filtering declarations for KSFunctionDeclaration instances.

LANGUAGE: kotlin
CODE:
fun KSClassDeclaration.getDeclaredFunctions(): Sequence<KSFunctionDeclaration> =
    declarations.filterIsInstance<KSFunctionDeclaration>()

----------------------------------------

TITLE: Destructuring in Lambdas
DESCRIPTION: Examples of using destructuring declarations in lambda expressions with different parameter configurations.

LANGUAGE: kotlin
CODE:
map.mapValues { entry -> "${entry.value}!" }
map.mapValues { (key, value) -> "$value!" }

LANGUAGE: kotlin
CODE:
{ a -> ... } // one parameter
{ a, b -> ... } // two parameters
{ (a, b) -> ... } // a destructured pair
{ (a, b), c -> ... } // a destructured pair and another parameter

LANGUAGE: kotlin
CODE:
map.mapValues { (_, value) -> "$value!" }

LANGUAGE: kotlin
CODE:
map.mapValues { (_, value): Map.Entry<Int, String> -> "$value!" }

map.mapValues { (_, value: String) -> "$value!" }

----------------------------------------

TITLE: Apple-Specific UUID Generation
DESCRIPTION: Example of using Apple platform-specific APIs to generate UUIDs in an intermediate source set.

LANGUAGE: kotlin
CODE:
import platform.Foundation.NSUUID

fun randomUuidString(): String {
    // You want to access Apple-specific APIs
    return NSUUID().UUIDString()
}

----------------------------------------

TITLE: Configuring Dependencies in Gradle
DESCRIPTION: Gradle build configuration showing required dependencies for React, Emotion CSS, video player, share buttons, and serialization.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation(enforcedPlatform("org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom:1.0.0-pre.430"))
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-react-dom")
    implementation("org.jetbrains.kotlin-wrappers:kotlin-emotion")
    implementation(npm("react-player", "2.12.0"))
    implementation(npm("react-share", "4.4.1"))
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.0")
}

----------------------------------------

TITLE: Using Base64 encoding and decoding
DESCRIPTION: Shows examples of using the new Base64 encoding and decoding functionality in Kotlin.

LANGUAGE: kotlin
CODE:
val foBytes = "fo".map { it.code.toByte() }.toByteArray()
Base64.Default.encode(foBytes) // "Zm8="
// Alternatively:
// Base64.encode(foBytes)

val foobarBytes = "foobar".map { it.code.toByte() }.toByteArray()
Base64.UrlSafe.encode(foobarBytes) // "Zm9vYmFy"

Base64.Default.decode("Zm8=") // foBytes
// Alternatively:
// Base64.decode("Zm8=")

Base64.UrlSafe.decode("Zm9vYmFy") // foobarBytes

----------------------------------------

TITLE: Creating Collection References in Kotlin
DESCRIPTION: Demonstrates creating new references to existing collections and how changes through one reference affect all references.

LANGUAGE: kotlin
CODE:
fun main() {
    val sourceList = mutableListOf(1, 2, 3)
    val referenceList = sourceList
    referenceList.add(4)
    println("Source size: ${sourceList.size}")
}

----------------------------------------

TITLE: Formatting Kotlin Class Headers
DESCRIPTION: Examples of how to format Kotlin class headers for better readability.

LANGUAGE: kotlin
CODE:
class Person(
    id: Int,
    name: String,
    surname: String
) : Human(id, name) { /*...*/ }

class MyFavouriteVeryLongClassHolder :
    MyLongHolder<MyFavouriteVeryLongClass>(),
    SomeOtherInterface,
    AndAnotherOne {

    fun foo() { /*...*/ }
}

----------------------------------------

TITLE: Implementing Basic KSP Processor with Dependency Tracking
DESCRIPTION: Example showing how to implement a KSP processor that generates output files while properly tracking dependencies between source files. The processor reads class A which extends B, demonstrating automatic dependency detection.

LANGUAGE: kotlin
CODE:
// A.kt
@Interesting
class A : B()

// B.kt
open class B

// Example1Processor.kt
class Example1Processor : SymbolProcessor {
    override fun process(resolver: Resolver) {
        val declA = resolver.getSymbolsWithAnnotation("Interesting").first() as KSClassDeclaration
        val declB = declA.superTypes.first().resolve().declaration
        // B.kt isn't required, because it can be deduced as a dependency by KSP
        val dependencies = Dependencies(aggregating = true, declA.containingFile!!)
        // outputForA.kt
        val outputName = "outputFor${declA.simpleName.asString()}"
        // outputForA depends on A.kt and B.kt
        val output = codeGenerator.createNewFile(dependencies, "com.example", outputName, "kt")
        output.write("// $declA : $declB\n".toByteArray())
        output.close()
    }
    // ...
}

----------------------------------------

TITLE: Adding JSON Serialization Dependency (Kotlin DSL)
DESCRIPTION: Adds the kotlinx-serialization-json library dependency to the project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:%serializationVersion%")
}

----------------------------------------

TITLE: Sealed Interface Implementation Example
DESCRIPTION: Demonstrates usage of sealed interfaces for creating restricted class hierarchies with exhaustive when expressions.

LANGUAGE: kotlin
CODE:
sealed interface Polygon

class Rectangle(): Polygon
class Triangle(): Polygon

// when() is exhaustive: no other polygon implementations can appear
// after the module is compiled
fun draw(polygon: Polygon) = when (polygon) {
    is Rectangle -> // ...
    is Triangle -> // ...
}

----------------------------------------

TITLE: Filtering Short Words Using MutableList in Kotlin
DESCRIPTION: This snippet shows how to create an extension function on List<String> that filters short words into a MutableList and removes articles.

LANGUAGE: kotlin
CODE:
fun List<String>.getShortWordsTo(shortWords: MutableList<String>, maxLength: Int) {
    this.filterTo(shortWords) { it.length <= maxLength }
    // throwing away the articles
    val articles = setOf("a", "A", "an", "An", "the", "The")
    shortWords -= articles
}

fun main() {
    val words = "A long time ago in a galaxy far far away".split(" ")
    val shortWords = mutableListOf<String>()
    words.getShortWordsTo(shortWords, 3)
    println(shortWords)
}

----------------------------------------

TITLE: HTTP Client Test Requests
DESCRIPTION: HTTP requests for testing the REST API endpoints including POST and GET operations.

LANGUAGE: http
CODE:
### Post 'Hello!"
POST http://localhost:8080/
Content-Type: application/json

{
  "text": "Hello!"
}

### Post "Bonjour!"

POST http://localhost:8080/
Content-Type: application/json

{
  "text": "Bonjour!"
}

### Post "Privet!"

POST http://localhost:8080/
Content-Type: application/json

{
  "text": "Privet!"
}

### Get all the messages
GET http://localhost:8080/

----------------------------------------

TITLE: Using the AutoCloseable interface
DESCRIPTION: Demonstrates how to use the new AutoCloseable interface and use() extension function for resource management.

LANGUAGE: kotlin
CODE:
interface XMLWriter : AutoCloseable {
    fun document(encoding: String, version: String, content: XMLWriter.() -> Unit)
    fun element(name: String, content: XMLWriter.() -> Unit)
    fun attribute(name: String, value: String)
    fun text(value: String)
}

fun writeBooksTo(writer: XMLWriter) {
    writer.use { xml ->
        xml.document(encoding = "UTF-8", version = "1.0") {
            element("bookstore") {
                element("book") {
                    attribute("category", "fiction")
                    element("title") { text("Harry Potter and the Prisoner of Azkaban") }
                    element("author") { text("J. K. Rowling") }
                    element("year") { text("1999") }
                    element("price") { text("29.99") }
                }
                element("book") {
                    attribute("category", "programming")
                    element("title") { text("Kotlin in Action") }
                    element("author") { text("Dmitry Jemerov") }
                    element("author") { text("Svetlana Isakova") }
                    element("year") { text("2017") }
                    element("price") { text("25.19") }
                }
            }
        }
    }
}

----------------------------------------

TITLE: Using Type Aliases for Inner and Nested Classes in Kotlin
DESCRIPTION: This snippet illustrates how to create type aliases for inner and nested classes, simplifying references to these types in code.

LANGUAGE: kotlin
CODE:
class A {
    inner class Inner
}
class B {
    inner class Inner
}

typealias AInner = A.Inner
typealias BInner = B.Inner

----------------------------------------

TITLE: Configuring KSP for Kotlin Multiplatform Project
DESCRIPTION: This snippet demonstrates how to set up a Kotlin Multiplatform project with KSP. It shows the plugin configuration, target setup, and how to add KSP dependencies for different source sets and targets.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform")
    id("com.google.devtools.ksp")
}

kotlin {
    jvm {
        withJava()
    }
    linuxX64() {
        binaries {
            executable()
        }
    }
    sourceSets {
        val commonMain by getting
        val linuxX64Main by getting
        val linuxX64Test by getting
    }
}

dependencies {
    add("kspCommonMainMetadata", project(":test-processor"))
    add("kspJvm", project(":test-processor"))
    add("kspJvmTest", project(":test-processor")) // Not doing anything because there's no test source set for JVM
    // There is no processing for the Linux x64 main source set, because kspLinuxX64 isn't specified
    add("kspLinuxX64Test", project(":test-processor"))
}

----------------------------------------

TITLE: Basic Input Reading with readln()
DESCRIPTION: Demonstrates basic usage of readln() function to read string input from standard input stream. Shows both storing input in a variable and direct printing.

LANGUAGE: kotlin
CODE:
// Reads and stores the user input in a variable. For example: Hi there!
val myInput = readln()

println(myInput)
// Hi there!

// Reads and prints the user input without storing it in a variable. For example: Hi, Kotlin!
println(readln())
// Hi, Kotlin!

----------------------------------------

TITLE: Configuring GC Logging in Gradle
DESCRIPTION: Gradle configuration for enabling garbage collection logging to stderr

LANGUAGE: none
CODE:
-Xruntime-logs=gc=info

----------------------------------------

TITLE: Using Safe Call and Let in Kotlin
DESCRIPTION: This Kotlin snippet shows how to use the safe call operator (?.) in combination with the let function to handle potentially null values.

LANGUAGE: kotlin
CODE:
// Kotlin
val order = findOrder()

order?.let {
    processCustomer(it.customer)
}

----------------------------------------

TITLE: Configuring Kotlin Multiplatform with Java Source Sets
DESCRIPTION: Example showing how to configure a Kotlin Multiplatform project with JVM target and Java source sets using withJava() function.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm {
        withJava()
    }
}

----------------------------------------

TITLE: Conditional Element Retrieval in Kotlin Collections
DESCRIPTION: Shows how to use first() and last() with predicates to find elements matching specific conditions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five", "six")
    println(numbers.first { it.length > 3 })
    println(numbers.last { it.startsWith("f") })
}

----------------------------------------

TITLE: Conditional Element Retrieval in Kotlin Collections
DESCRIPTION: Shows how to use first() and last() with predicates to find elements matching specific conditions.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five", "six")
    println(numbers.first { it.length > 3 })
    println(numbers.last { it.startsWith("f") })
}

----------------------------------------

TITLE: JDK 17 Configuration
DESCRIPTION: Configuration settings required for using JDK 17 with Kotlin Maven projects.

LANGUAGE: none
CODE:
--add-opens=java.base/java.lang=ALL-UNNAMED
--add-opens=java.base/java.io=ALL-UNNAMED

----------------------------------------

TITLE: Full Gradle Build Script Example in Groovy
DESCRIPTION: This snippet provides a complete Groovy-based Gradle build script example for setting up KSP. It includes plugin configuration, repository setup, and dependencies.

LANGUAGE: groovy
CODE:
plugins {
    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'
    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:%kotlinVersion%'
    implementation 'com.google.dagger:dagger-compiler:2.51.1'
    ksp 'com.google.dagger:dagger-compiler:2.51.1'
}

----------------------------------------

TITLE: Testing Predicates on Collections in Kotlin
DESCRIPTION: Shows the usage of any(), none(), and all() functions to test predicates against collection elements, including the concept of vacuous truth.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")

    println(numbers.any { it.endsWith("e") })
    println(numbers.none { it.endsWith("a") })
    println(numbers.all { it.endsWith("e") })

    println(emptyList<Int>().all { it > 5 })   // vacuous truth
}

----------------------------------------

TITLE: Basic Kotlin/JS Hello World Program
DESCRIPTION: A simple Kotlin/JS program that logs a message to the console. This demonstrates the basic structure of a Kotlin/JS application.

LANGUAGE: kotlin
CODE:
fun main() {
    console.log("Hello, Kotlin/JS!")
}

----------------------------------------

TITLE: Testing Kotlin/Wasm Applications Across VMs
DESCRIPTION: Commands to run tests for the Kotlin/Wasm application on Node.js, Deno, and WasmEdge virtual machines.

LANGUAGE: bash
CODE:
./gradlew wasmWasiNodeTest
./gradlew wasmWasiDenoTest
./gradlew wasmWasiWasmEdgeTest

----------------------------------------

TITLE: Creating a Finite Sequence with generateSequence() in Kotlin
DESCRIPTION: Shows how to create a finite sequence using generateSequence() by providing a function that returns null after the last desired element.

LANGUAGE: kotlin
CODE:
fun main() {
    val oddNumbersLessThan10 = generateSequence(1) { if (it < 8) it + 2 else null }
    println(oddNumbersLessThan10.count())
}

----------------------------------------

TITLE: Configuring dependsOn Relation in Kotlin Multiplatform
DESCRIPTION: Example of how to configure the dependsOn relation between source sets in a Kotlin Multiplatform project using the Kotlin DSL in Gradle.

LANGUAGE: kotlin
CODE:
kotlin {
    // Targets declaration
    sourceSets {
        // Example of configuring the dependsOn relation 
        iosArm64Main.dependsOn(commonMain)
    }
}

----------------------------------------

TITLE: Splitting and Processing Multiple Inputs
DESCRIPTION: Demonstrates reading multiple input elements separated by delimiters using split() function and converting them to specific types using map().

LANGUAGE: kotlin
CODE:
// Reads the input, assuming the elements are separated by spaces, and converts them into integers. For example: 1 2 3 
val numbers = readln().split(' ').map { it.toInt() }
println(numbers)
//[1, 2, 3] 

// Reads the input, assuming the elements are separated by commas, and converts them into doubles. For example: 4,5,6
val doubles = readln().split(',').map { it.toDouble() }
println(doubles)
//[4.0, 5.0, 6.0]

----------------------------------------

TITLE: Configuring Node.js settings for Kotlin/JS
DESCRIPTION: Illustrates how to configure Node.js settings for Kotlin/JS projects in the Gradle build script for both Kotlin and Groovy DSL.

LANGUAGE: kotlin
CODE:
project.plugins.withType<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin> {
    project.the<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec>().version = "your Node.js version"
}

LANGUAGE: groovy
CODE:
project.plugins.withType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsPlugin) {
    project.extensions.getByType(org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsEnvSpec).version = "your Node.js version"
}

----------------------------------------

TITLE: Demonstrating Type Alias Interchangeability in Kotlin
DESCRIPTION: This example shows how type aliases are interchangeable with their underlying types, using a Predicate type alias in various contexts including function parameters and lambda expressions.

LANGUAGE: kotlin
CODE:
typealias Predicate<T> = (T) -> Boolean

fun foo(p: Predicate<Int>) = p(42)

fun main() {
    val f: (Int) -> Boolean = { it > 0 }
    println(foo(f)) // prints "true"

    val p: Predicate<Int> = { it > 0 }
    println(listOf(1, -2).filter(p)) // prints "[1]"
}

----------------------------------------

TITLE: Using @JvmDefault Annotation
DESCRIPTION: Demonstrates the usage of @JvmDefault annotation to generate default methods for JVM.

LANGUAGE: kotlin
CODE:
interface Foo {
    // Will be generated as 'default' method
    @JvmDefault
    fun foo(): Int = 42
}

----------------------------------------

TITLE: Last Element Calculation in Progressions
DESCRIPTION: Shows how the last element is calculated in progressions with custom steps.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 1..9 step 3) print(i) // the last element is 7
    // 147
}

----------------------------------------

TITLE: Homebrew Kotlin Installation
DESCRIPTION: Commands to install Kotlin compiler using Homebrew package manager on macOS

LANGUAGE: bash
CODE:
brew update
brew install kotlin

----------------------------------------

TITLE: Configuring Target-Specific Compiler Options
DESCRIPTION: Shows how to configure compiler options for a specific target (JVM in this case) in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_1_8)
        }
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    jvm {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_1_8
        }
    }
}

----------------------------------------

TITLE: Local Return with Implicit Label in Kotlin Lambda
DESCRIPTION: Shows how to use an implicit label for a local return in a Kotlin lambda. The implicit label has the same name as the function to which the lambda is passed.

LANGUAGE: kotlin
CODE:
fun foo() {
    listOf(1, 2, 3, 4, 5).forEach {
        if (it == 3) return@forEach // local return to the caller of the lambda - the forEach loop
        print(it)
    }
    print(" done with implicit label")
}

fun main() {
    foo()
}

----------------------------------------

TITLE: Configuring K2 Compiler in Gradle
DESCRIPTION: Shows how to enable the K2 compiler preview by adding a Gradle property

LANGUAGE: shell
CODE:
./gradlew assemble -Pkotlin.experimental.tryK2=true

----------------------------------------

TITLE: Using Lambda Expressions for Functional Interfaces in Kotlin
DESCRIPTION: Shows how to create an instance of a functional Java interface using a lambda expression in Kotlin. This is specific to JVM implementations.

LANGUAGE: kotlin
CODE:
val listener = ActionListener { println("clicked") }

----------------------------------------

TITLE: Using Argument File for Kotlin Compiler Options
DESCRIPTION: Example content of an argument file for the Kotlin compiler, specifying options and source files to compile.

LANGUAGE: text
CODE:
-include-runtime -d hello.jar hello.kt

----------------------------------------

TITLE: Enabling Kotlin K2 compiler in Gradle
DESCRIPTION: Shows how to enable the new Kotlin K2 compiler by setting the language version to 2.0 in the Gradle build file.

LANGUAGE: kotlin
CODE:
kotlin {
   sourceSets.all {
       languageSettings {
           languageVersion = "2.0"
       }
   }
}

----------------------------------------

TITLE: Using Labeled Break in Nested Loops
DESCRIPTION: Demonstrates how to use a labeled break statement to exit from an outer loop in Kotlin. This is useful when working with nested loops and you need to break out of multiple levels.

LANGUAGE: kotlin
CODE:
loop@ for (i in 1..100) {
    for (j in 1..100) {
        if (...) break@loop
    }
}

----------------------------------------

TITLE: Using Expected and Actual Objects in Kotlin Multiplatform
DESCRIPTION: Shows how to define an expected object and implement it as actual objects in platform-specific source sets.

LANGUAGE: kotlin
CODE:
// In commonMain
expect object IdentityBuilder {
    fun build(): Identity
}

class Identity(
    val userName: String,
    val processID: Long
)

LANGUAGE: kotlin
CODE:
// In jvmMain
actual object IdentityBuilder {
    actual fun build() = Identity(
        System.getProperty("user.name") ?: "none",
        ProcessHandle.current().pid()
    )
}

LANGUAGE: kotlin
CODE:
// In nativeMain
actual object IdentityBuilder {
    actual fun build() = Identity(
        getlogin()?.toKString() ?: "None",
        getpid().toLong()
    )
}

----------------------------------------

TITLE: Measuring Code Execution Time in Kotlin
DESCRIPTION: Demonstrates how to measure code execution time using measureTime and measureTimedValue functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val timeTaken = measureTime {
        Thread.sleep(100)
    }
    println(timeTaken) // e.g. 103 ms
}

----------------------------------------

TITLE: Customizing package.json for Kotlin/JS projects
DESCRIPTION: Shows how to add custom entries to the package.json file for Kotlin/JS projects using the Gradle DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    js {
        compilations["main"].packageJson {
            customField("hello", mapOf("one" to 1, "two" to 2))
        }
    }
}

----------------------------------------

TITLE: Defining Type Aliases for Collection Types in Kotlin
DESCRIPTION: This snippet demonstrates how to create type aliases for complex collection types, shortening long generic type names for improved readability.

LANGUAGE: kotlin
CODE:
typealias NodeSet = Set<Network.Node>

typealias FileTable<K> = MutableMap<K, MutableList<File>>

----------------------------------------

TITLE: Memory Leak Detection Example
DESCRIPTION: Kotlin code demonstrating how to detect memory leaks using GC metrics in unit tests

LANGUAGE: kotlin
CODE:
import kotlin.native.internal.*
import kotlin.test.*

class Resource

val global = mutableListOf<Resource>()

@OptIn(ExperimentalStdlibApi::class)
fun getUsage(): Long {
    GC.collect()
    return GC.lastGCInfo!!.memoryUsageAfter["heap"]!!.totalObjectsSizeBytes
}

fun run() {
    global.add(Resource())
    // The test will fail if you remove the next line
    global.clear()
}

@Test
fun test() {
    val before = getUsage()
    // A separate function is used to ensure that all temporary objects are cleared
    run()
    val after = getUsage()
    assertEquals(before, after)
}

----------------------------------------

TITLE: Defining Expected and Actual Properties in Kotlin Multiplatform
DESCRIPTION: Illustrates how to use expected and actual properties to store platform-specific Identity instances.

LANGUAGE: kotlin
CODE:
// In commonMain
expect val identity: Identity

interface Identity {
    val userName: String
    val processID: Long
}

LANGUAGE: kotlin
CODE:
// In jvmMain
actual val identity: Identity = JVMIdentity()

class JVMIdentity(
    override val userName: String = System.getProperty("user.name") ?: "none",
    override val processID: Long = ProcessHandle.current().pid()
) : Identity

LANGUAGE: kotlin
CODE:
// In nativeMain
actual val identity: Identity = NativeIdentity()

class NativeIdentity(
    override val userName: String = getlogin()?.toKString() ?: "None",
    override val processID: Long = getpid().toLong()
) : Identity

----------------------------------------

TITLE: Using the new Duration API
DESCRIPTION: Example of using the experimental Duration API to represent and manipulate time durations.

LANGUAGE: kotlin
CODE:
import kotlin.time.Duration
import kotlin.time.ExperimentalTime

@ExperimentalTime
fun main() {
    val duration = Duration.milliseconds(120000)
    println("There are ${duration.inWholeSeconds} seconds in ${duration.inWholeMinutes} minutes")
}

----------------------------------------

TITLE: Declaring Android Dependencies in androidTarget Block - Kotlin
DESCRIPTION: Demonstrates how to add Android dependencies within the androidTarget block using Kotlin DSL, which provides better organization and clarity for Android-specific dependencies.

LANGUAGE: kotlin
CODE:
androidTarget {
    //...
    dependencies {
        implementation("com.example.android:app-magic:12.3")
    }
}

----------------------------------------

TITLE: Declaring a sealed interface in Kotlin
DESCRIPTION: Example of defining a sealed interface, which allows all implementations to be known at compile time.

LANGUAGE: kotlin
CODE:
sealed interface Polygon

----------------------------------------

TITLE: Configuring KSP Processor Module in Groovy
DESCRIPTION: This snippet demonstrates how to set up a Gradle module for hosting a KSP processor using Groovy DSL. It includes plugin application and KSP API dependency.

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.jvm' version '%kotlinVersion%'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.devtools.ksp:symbol-processing-api:%kspSupportedKotlinVersion%-%kspVersion%'
}

----------------------------------------

TITLE: Setting Kotlin Daemon JVM Args for Specific Task in Kotlin
DESCRIPTION: Example of specifying JVM arguments for the Kotlin daemon for a specific task in a Kotlin DSL build script.

LANGUAGE: Kotlin
CODE:
tasks.withType<CompileUsingKotlinDaemon>().configureEach {
    kotlinDaemonJvmArguments.set(listOf("-Xmx486m", "-Xms256m", "-XX:+UseParallelGC"))
}

----------------------------------------

TITLE: Local Development Server URL
DESCRIPTION: URL to access the local development server running the Kotlin/Wasm application

LANGUAGE: bash
CODE:
http://localhost:8080/

----------------------------------------

TITLE: Configuring cinterop for iOS Library in Groovy DSL
DESCRIPTION: This snippet shows how to configure cinterop for an iOS library in the Groovy DSL build script. It includes setting up the definition file, include directories, and linker options.

LANGUAGE: groovy
CODE:
kotlin {
    iosArm64 {
        compilations.main {
            cinterops {
                DateTools {
                    // Path to the .def file
                    definitionFile = project.file("src/nativeInterop/cinterop/DateTools.def")

                    // Directories for header search (an analogue of the -I<path> compiler option)
                    includeDirs("include/this/directory", "path/to/another/directory")
                }
                anotherInterop { /* ... */ }
            }
        }

        binaries.all {
            // Linker options required to link to the library.
            linkerOpts "-L/path/to/library/binaries", "-lbinaryname"
        }
    }
}

----------------------------------------

TITLE: Complete HTML DSL Implementation in Kotlin
DESCRIPTION: Full implementation of the HTML DSL package including all element types and rendering logic

LANGUAGE: kotlin
CODE:
package com.example.html

interface Element {
    fun render(builder: StringBuilder, indent: String)
}

class TextElement(val text: String) : Element {
    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent$text\n")
    }
}

@DslMarker
annotation class HtmlTagMarker

@HtmlTagMarker
abstract class Tag(val name: String) : Element {
    val children = arrayListOf<Element>()
    val attributes = hashMapOf<String, String>()

    protected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }

    override fun render(builder: StringBuilder, indent: String) {
        builder.append("$indent<$name${renderAttributes()}>\n")
        for (c in children) {
            c.render(builder, indent + "  ")
        }
        builder.append("$indent</$name>\n")
    }

    private fun renderAttributes(): String {
        val builder = StringBuilder()
        for ((attr, value) in attributes) {
            builder.append(" $attr=\"$value\"")
        }
        return builder.toString()
    }

    override fun toString(): String {
        val builder = StringBuilder()
        render(builder, "")
        return builder.toString()
    }
}

----------------------------------------

TITLE: Snap Kotlin Installation
DESCRIPTION: Command to install Kotlin compiler using Snap package manager on Ubuntu

LANGUAGE: bash
CODE:
sudo snap install --classic kotlin

----------------------------------------

TITLE: Advanced Element Removal in Mutable Collections in Kotlin
DESCRIPTION: Demonstrates various methods for removing multiple elements from mutable collections, including removeAll(), retainAll(), and clear(). Also shows removing elements from a set.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf(1, 2, 3, 4)
    println(numbers)
    numbers.retainAll { it >= 3 }
    println(numbers)
    numbers.clear()
    println(numbers)

    val numbersSet = mutableSetOf("one", "two", "three", "four")
    numbersSet.removeAll(setOf("one", "two"))
    println(numbersSet)
}

----------------------------------------

TITLE: Using firstOrNull with Default Value in Kotlin
DESCRIPTION: Demonstrates safe element retrieval using firstOrNull() with a fallback default value.

LANGUAGE: kotlin
CODE:
@GetMapping("/retrieveFirstMessageLongerThan10")
fun firstMessageOrNull(): Message {
    val messages = service.findMessages()
    return messages.firstOrNull { 
        it.text.length > 10 
    } ?: Message(null, "Default message")
}

----------------------------------------

TITLE: Reading Input with Kotlin's readln()
DESCRIPTION: Demonstrates the usage of Kotlin's native readln() function for reading input, including string reading and type conversion examples.

LANGUAGE: kotlin
CODE:
// Reads a string. For example: Charlotte
val name = readln()

// Reads a string and converts it into an integer. For example: 43
val age = readln().toInt()

println("Hello, $name! You are $age years old.")
// Hello, Charlotte! You are 43 years old.

----------------------------------------

TITLE: Defining a JVM record class in Kotlin
DESCRIPTION: Example of creating a data class marked with @JvmRecord to be used as a record in Java code.

LANGUAGE: kotlin
CODE:
@JvmRecord
data class User(val name: String, val age: Int)

----------------------------------------

TITLE: Installing Ruby and CocoaPods with RVM
DESCRIPTION: Commands for installing Ruby version manager (RVM), a specific Ruby version, and CocoaPods using RVM.

LANGUAGE: bash
CODE:
rvm install ruby 3.0.0
sudo gem install -n /usr/local/bin cocoapods

----------------------------------------

TITLE: Demonstrating Smartcasts in Kotlin
DESCRIPTION: Shows how the Kotlin compiler performs automatic smartcasts based on type checks.

LANGUAGE: kotlin
CODE:
fun foo(s: String?) {
    if (s != null) s.length // Compiler automatically casts 's' to 'String'
}

----------------------------------------

TITLE: Adding CocoaPods Dependency from Repository in Kotlin
DESCRIPTION: This snippet demonstrates how to add a dependency on a Pod library from the CocoaPods repository in a Kotlin project's build.gradle.kts file. It shows how to specify the library name, version, and deployment target.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()

    cocoapods {
        version = "2.0"
        ios.deploymentTarget = "16.0"

        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"

        pod("SDWebImage") {
            version = "5.20.0"
        }
    }
}

----------------------------------------

TITLE: Specifying Constructor Visibility in Kotlin
DESCRIPTION: This snippet shows how to specify the visibility of a primary constructor in Kotlin. It demonstrates making a constructor private.

LANGUAGE: kotlin
CODE:
class C private constructor(a: Int) { ... }

----------------------------------------

TITLE: Configuring cinterop for iOS Framework in Kotlin DSL
DESCRIPTION: This code snippet demonstrates how to configure cinterop for an iOS framework in the Kotlin DSL build script. It includes setting up the definition file and compiler options for the framework.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64() {
        compilations.getByName("main") {
            val DateTools by cinterops.creating {
                // Path to the .def file
                definitionFile.set(project.file("src/nativeInterop/cinterop/DateTools.def"))

                compilerOpts("-framework", "MyFramework", "-F/path/to/framework/")
            }
            val anotherInterop by cinterops.creating { /* ... */ }
        }

        binaries.all {
            // Tell the linker where the framework is located.
            linkerOpts("-framework", "MyFramework", "-F/path/to/framework/")
        }
   }
}

----------------------------------------

TITLE: Suspending functions as supertypes example
DESCRIPTION: Shows how to use suspending functional types as supertypes in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
class MyClickAction : suspend () -> Unit {
    override suspend fun invoke() { TODO() }
}

fun launchOnClick(action: suspend () -> Unit) {}

// Usage
launchOnClick(MyClickAction())

----------------------------------------

TITLE: Adding Multiple Elements to Mutable List in Kotlin
DESCRIPTION: Shows how to add multiple elements to a mutable list using addAll(). The example adds elements from an array and a set to a list, demonstrating insertion at a specific position.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf(1, 2, 5, 6)
    numbers.addAll(arrayOf(7, 8))
    println(numbers)
    numbers.addAll(2, setOf(3, 4))
    println(numbers)
}

----------------------------------------

TITLE: Installing Ruby and CocoaPods with Rbenv
DESCRIPTION: Steps for installing Ruby using Rbenv, setting the Ruby version, and installing CocoaPods.

LANGUAGE: bash
CODE:
rbenv install 3.0.0
rbenv global 3.0.0
sudo gem install -n /usr/local/bin cocoapods

----------------------------------------

TITLE: Complete SAM Conversion Example
DESCRIPTION: Full example showing functional interface definition, implementation, and usage with SAM conversion.

LANGUAGE: kotlin
CODE:
fun interface IntPredicate {
   fun accept(i: Int): Boolean
}

val isEven = IntPredicate { it % 2 == 0 }

fun main() {
   println("Is 7 even? - ${isEven.accept(7)}")
}

----------------------------------------

TITLE: Adding Kotlinx Coroutines EAP Dependency in Gradle (Groovy DSL)
DESCRIPTION: Shows how to add a compatible EAP version of the kotlinx.coroutines library as a dependency in a Gradle build using Groovy DSL.

LANGUAGE: groovy
CODE:
dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesEapVersion%"
}

----------------------------------------

TITLE: Retrieving Elements by Position in Kotlin Collections
DESCRIPTION: Demonstrates using elementAt() function to retrieve elements from LinkedSet and SortedSet collections by their position index.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = linkedSetOf("one", "two", "three", "four", "five")
    println(numbers.elementAt(3))    

    val numbersSortedSet = sortedSetOf("one", "two", "three", "four")
    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order
}

----------------------------------------

TITLE: Creating an Anonymous Object Expression in Kotlin
DESCRIPTION: Demonstrates how to create an anonymous object expression that inherits from a class and implements an interface. It shows how to override methods and add new properties.

LANGUAGE: kotlin
CODE:
open class BankAccount(initialBalance: Int) {
    open val balance: Int = initialBalance
}

interface Transaction {
    fun execute()
}

fun specialTransaction(account: BankAccount) {
    val temporaryAccount = object : BankAccount(account.balance), Transaction {
        override val balance = account.balance + 500

        override fun execute() {
            println("Executing special transaction. New balance is $balance.")
        }
    }
    temporaryAccount.execute()
}

----------------------------------------

TITLE: Suspend conversions example
DESCRIPTION: Demonstrates the stable suspend conversions in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
fun getSuspending(suspending: suspend () -> Unit) {}

fun suspending() {}

fun test(regular: () -> Unit) {
    getSuspending { }           // OK
    getSuspending(::suspending) // OK
    getSuspending(regular)      // OK
}

----------------------------------------

TITLE: Configuring CocoaPods in Kotlin Gradle for iOS
DESCRIPTION: This snippet shows how to configure CocoaPods in a Kotlin Gradle file for an iOS project. It sets up the CocoaPods DSL, specifies the iOS deployment target, adds a pod dependency, and links to the Podfile.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()

    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"
        ios.deploymentTarget = "16.0"
        pod("SDWebImage") {
            version = "5.20.0"
        }
        podfile = project.file("../ios-app/Podfile")
    }
}

----------------------------------------

TITLE: New Standard Library Functions for Collections Processing (Kotlin)
DESCRIPTION: Demonstrates new extension functions added to the standard library for processing collections, including chunked, windowed, and zipWithNext, which enable more efficient and expressive collection transformations.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    val items = (1..9).map { it * it }

    val chunkedIntoLists = items.chunked(4)
    val points3d = items.chunked(3) { (x, y, z) -> Triple(x, y, z) }
    val windowed = items.windowed(4)
    val slidingAverage = items.windowed(4) { it.average() }
    val pairwiseDifferences = items.zipWithNext { a, b -> b - a }

    println("items: $items\n")

    println("chunked into lists: $chunkedIntoLists")
    println("3D points: $points3d")
    println("windowed by 4: $windowed")
    println("sliding average by 4: $slidingAverage")
    println("pairwise differences: $pairwiseDifferences")
}

----------------------------------------

TITLE: Spring Boot Application Setup
DESCRIPTION: Demonstrates a basic Spring Boot application setup with a REST controller implementation.

LANGUAGE: kotlin
CODE:
package com.example.demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
    runApplication<DemoApplication>(*args)
}

@RestController
class MessageController {
    @GetMapping("/")
    fun index(@RequestParam("name") name: String) = "Hello, $name!"
}

----------------------------------------

TITLE: Defining C Struct and Union Types
DESCRIPTION: C code defining a struct type MyStruct and a union type MyUnion along with functions that take these types as parameters by value and by pointer.

LANGUAGE: c
CODE:
typedef struct {
  int a;
  double b;
} MyStruct;

void struct_by_value(MyStruct s) {}
void struct_by_pointer(MyStruct* s) {}

typedef union {
  int a;
  MyStruct b;
  float c;
} MyUnion;

void union_by_value(MyUnion u) {}
void union_by_pointer(MyUnion* u) {}

----------------------------------------

TITLE: Demonstrating Plus and Minus Operators in Kotlin Collections
DESCRIPTION: Example showing how to use the plus (+) operator to add elements and minus (-) operator to remove elements from collections. The plus operator adds a single element or collection, while minus removes either the first occurrence of an element or all occurrences of elements from a collection.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")

    val plusList = numbers + "five"
    val minusList = numbers - listOf("three", "four")
    println(plusList)
    println(minusList)
}

----------------------------------------

TITLE: Configuring Framework in CocoaPods Block
DESCRIPTION: This snippet shows how to configure the framework block within the cocoapods block. It sets the framework name, linking type, and export options.

LANGUAGE: kotlin
CODE:
kotlin {
    cocoapods {
        version = "2.0"
        framework {
            baseName = "MyFramework"
            isStatic = false
            export(project(":anotherKMMModule"))
            transitiveExport = true
        }
    }
}

----------------------------------------

TITLE: Configuring Kotlin Serialization Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Adds the Kotlin serialization Gradle plugin to the project using the Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kotlinVersion%"
    kotlin("plugin.serialization") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Enabling Kotlin/Wasm in Gradle
DESCRIPTION: Shows how to enable and configure Kotlin/Wasm support in a Gradle build file.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "1.8.20"
}

kotlin {
    wasm {
        binaries.executable()
        browser {
        }
    }
    sourceSets {
        val commonMain by getting
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
            }
        }
        val wasmMain by getting
        val wasmTest by getting
    }
}

----------------------------------------

TITLE: Nesting Classes and Interfaces in Kotlin
DESCRIPTION: Shows various combinations of nesting classes and interfaces within each other in Kotlin.

LANGUAGE: kotlin
CODE:
interface OuterInterface {
    class InnerClass
    interface InnerInterface
}

class OuterClass {
    class InnerClass
    interface InnerInterface
}

----------------------------------------

TITLE: Creating a Data Object in Kotlin
DESCRIPTION: Shows how to create a data object, which is a singleton with auto-generated toString(), equals(), and hashCode() methods. It demonstrates the behavior of these methods.

LANGUAGE: kotlin
CODE:
data object MyDataObject {
    val number: Int = 3
}

fun main() {
    println(MyDataObject) 
    // MyDataObject
}

----------------------------------------

TITLE: Enabling K2 Compiler in Maven
DESCRIPTION: Configuration to enable the K2 compiler in Maven builds by setting the language version property

LANGUAGE: xml
CODE:
<properties>
    <kotlin.compiler.languageVersion>2.0</kotlin.compiler.languageVersion>
</properties>

----------------------------------------

TITLE: Basic PNG Library Definition File Configuration
DESCRIPTION: Example .def file configuration for generating Kotlin bindings for the PNG C library, including header specifications and platform-specific compiler/linker options.

LANGUAGE: properties
CODE:
headers = png.h
headerFilter = png.h
package = png

compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu
linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/png/lib -lpng
linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lpng

----------------------------------------

TITLE: Defining a Companion Object with Factory Method in Kotlin
DESCRIPTION: Illustrates how to create a companion object within a class to provide a factory method for creating instances of the class. This demonstrates class-level functions and properties.

LANGUAGE: kotlin
CODE:
class User(val name: String) {
    companion object Factory {
        fun create(name: String): User = User(name)
    }
}

fun main(){
    val userInstance = User.create("John Doe")
    println(userInstance.name)
    // John Doe
}

----------------------------------------

TITLE: Building Strings with StringBuilder and buildString()
DESCRIPTION: Shows how to construct strings programmatically using Java's StringBuilder versus Kotlin's buildString() function with lambda expressions.

LANGUAGE: java
CODE:
StringBuilder countDown = new StringBuilder();
for (int i = 5; i > 0; i--) {
    countDown.append(i);
    countDown.append("\n");
}
System.out.println(countDown);

LANGUAGE: kotlin
CODE:
val countDown = buildString {
    for (i in 5 downTo 1) {
        append(i)
        appendLine()
    }
}
println(countDown)

----------------------------------------

TITLE: Type Conversion of Input
DESCRIPTION: Shows how to convert string input to different data types using conversion functions like toInt(), toDouble(), and toBoolean().

LANGUAGE: kotlin
CODE:
// Converts the input from a string to an integer value. For example: 12
val myNumber = readln().toInt()
println(myNumber)
// 12

// Converts the input from a string to a double value. For example: 345 
val myDouble = readln().toDouble()
println(myDouble)
// 345.0

// Converts the input from a string to a boolean value. For example: true
val myBoolean = readln().toBoolean()
println(myBoolean)
// true

----------------------------------------

TITLE: Computing Aggregate Values in Kotlin
DESCRIPTION: Shows how to perform aggregate operations on collections using average().

LANGUAGE: kotlin
CODE:
@GetMapping("/averageMessageLength")
fun averageMessageLength(): Double {
    val messages = service.findMessages()
    return messages.map { it.text.length }.average()
}

----------------------------------------

TITLE: Declaring JVM Record in Kotlin
DESCRIPTION: Example of declaring a record class in Kotlin using the @JvmRecord annotation with a data class. Requires -Xjvm-enable-preview and -language-version 1.5 compiler options.

LANGUAGE: kotlin
CODE:
@JvmRecord
data class User(val name: String, val age: Int)

----------------------------------------

TITLE: Applying kapt Gradle Plugin in Kotlin DSL
DESCRIPTION: Shows how to apply the kapt Gradle plugin using Kotlin DSL in the build script.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("kapt") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Enhanced Kotlin/Native Program with Name Analysis
DESCRIPTION: Extended version of the basic program that includes name input processing and character counting functionality.

LANGUAGE: kotlin
CODE:
fun String.countDistinctCharacters() = lowercase().toList().distinct().count()

fun main() {
    println("Hello, enter your name:")
    val name = readln()
    name.replace(" ", "").let {
        println("Your name contains ${it.length} letters")
        println("Your name contains ${it.countDistinctCharacters()} unique letters")
    }
}

----------------------------------------

TITLE: Demonstrating Kotlin/JS Reflection Features
DESCRIPTION: This snippet showcases various reflection features in Kotlin/JS, including class references, type checking, casting, and reified type arguments. It demonstrates the usage of simpleName, isInstance(), cast(), js property, and typeOf() functions.

LANGUAGE: kotlin
CODE:
open class Shape
class Rectangle : Shape()

inline fun <reified T> accessReifiedTypeArg() =
    println(typeOf<T>().toString())

fun main() {
    val s = Shape()
    val r = Rectangle()

    println(r::class.simpleName) // Prints "Rectangle"
    println(Shape::class.simpleName) // Prints "Shape"
    println(Shape::class.js.name) // Prints "Shape"

    println(Shape::class.isInstance(r)) // Prints "true"
    println(Rectangle::class.isInstance(s)) // Prints "false"
    val rShape = Shape::class.cast(r) // Casts a Rectangle "r" to Shape

    accessReifiedTypeArg<Rectangle>() // Accesses the type via typeOf(). Prints "Rectangle"
}

----------------------------------------

TITLE: Using the new enum entries property
DESCRIPTION: Demonstrates how to use the new entries property on enum classes, which returns an immutable list of enum constants.

LANGUAGE: kotlin
CODE:
enum class Color(val colorName: String, val rgb: String) {
    RED("Red", "#FF0000"),
    ORANGE("Orange", "#FF7F00"),
    YELLOW("Yellow", "#FFFF00")
}

@OptIn(ExperimentalStdlibApi::class)
fun findByRgb(rgb: String): Color? = Color.entries.find { it.rgb == rgb }

----------------------------------------

TITLE: Building Universal Frameworks in Kotlin/Native
DESCRIPTION: Demonstrates how to create a fat framework task to merge multiple platform-specific frameworks into a single universal binary.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

kotlin {
    // Create and configure the targets.
    val watchos32 = watchosArm32("watchos32")
    val watchos64 = watchosArm64("watchos64")
    configure(listOf(watchos32, watchos64)) {
        binaries.framework {
            baseName = "my_framework"
        }
    }
    // Create a task to build a fat framework.
    tasks.register<FatFrameworkTask>("debugFatFramework") {
        // The fat framework must have the same base name as the initial frameworks.
        baseName = "my_framework"
        // The default destination directory is "<build directory>/fat-framework".
        destinationDir = buildDir.resolve("fat-framework/debug")
        // Specify the frameworks to be merged.
        from(
            watchos32.binaries.getFramework("DEBUG"),
            watchos64.binaries.getFramework("DEBUG")
        )
    }
}

LANGUAGE: groovy
CODE:
import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

kotlin {
    // Create and configure the targets.
    targets {
        watchosArm32("watchos32")
        watchosArm64("watchos64")
        configure([watchos32, watchos64]) {
            binaries.framework {
                baseName = "my_framework"
            }
        }
    }
    // Create a task building a fat framework.
    tasks.register("debugFatFramework", FatFrameworkTask) {
        // The fat framework must have the same base name as the initial frameworks.
        baseName = "my_framework"
        // The default destination directory is "<build directory>/fat-framework".
        destinationDir = file("$buildDir/fat-framework/debug")
        // Specify the frameworks to be merged.
        from(
            targets.watchos32.binaries.getFramework("DEBUG"),
            targets.watchos64.binaries.getFramework("DEBUG")
        )
    }
}

----------------------------------------

TITLE: HTML Tag Implementation with DSL Marker in Kotlin
DESCRIPTION: Base implementation of HTML tags with DSL marker annotation for scope control

LANGUAGE: kotlin
CODE:
@DslMarker
annotation class HtmlTagMarker

@HtmlTagMarker
abstract class Tag(val name: String) : Element {
    val children = arrayListOf<Element>()
    val attributes = hashMapOf<String, String>()

    protected fun <T : Element> initTag(tag: T, init: T.() -> Unit): T {
        tag.init()
        children.add(tag)
        return tag
    }
}

----------------------------------------

TITLE: New List Manipulation Functions (Kotlin)
DESCRIPTION: Shows the usage of new extension functions added for manipulating lists, including fill, replaceAll, and shuffle for MutableList, and shuffled for read-only List.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    val items = (1..5).toMutableList()
    
    items.shuffle()
    println("Shuffled items: $items")
    
    items.replaceAll { it * 2 }
    println("Items doubled: $items")
    
    items.fill(5)
    println("Items filled with 5: $items")
}

----------------------------------------

TITLE: Compiling Kotlin/Native Library
DESCRIPTION: Command to compile a Kotlin file into a Kotlin/Native library (.klib) using the Kotlin/Native compiler.

LANGUAGE: bash
CODE:
$ kotlinc-native foo.kt -p library -o bar

----------------------------------------

TITLE: Using String Templates in Kotlin
DESCRIPTION: Demonstrates the use of string templates for simple variable references and arbitrary expressions in Kotlin.

LANGUAGE: kotlin
CODE:
fun main() {
    var a = 1
    val s1 = "a is $a" 
    
    a = 2
    val s2 = "${s1.replace("is", "was")}, but now is $a"
    println(s2)
}

----------------------------------------

TITLE: Subclassing Objective-C classes in Kotlin
DESCRIPTION: Example of subclassing an Objective-C class (UIViewController) in Kotlin

LANGUAGE: kotlin
CODE:
class ViewController : UIViewController {
    @OverrideInit constructor(coder: NSCoder) : super(coder)

    ...
}

----------------------------------------

TITLE: Implementing Kotlin Library for Framework
DESCRIPTION: Defines a Kotlin library with various types and functions that will be exposed to Swift/Objective-C through the framework.

LANGUAGE: kotlin
CODE:
package example

object Object {
    val field = "A"
}

interface Interface {
    fun iMember() {}
}

class Clazz : Interface {
    fun member(p: Int): ULong? = 42UL
}

fun forIntegers(b: Byte, s: UShort, i: Int, l: ULong?) { }
fun forFloats(f: Float, d: Double?) { }

fun strings(str: String?) : String {
    return "That is '$str' from C"
}

fun acceptFun(f: (String) -> String?) = f("Kotlin/Native rocks!")
fun supplyFun() : (String) -> String? = { "$it is cool!" }

----------------------------------------

TITLE: Definitely Non-nullable Types Example
DESCRIPTION: Shows how to use the new definitely non-nullable types feature that allows marking generic type parameters as non-nullable using T & Any syntax.

LANGUAGE: kotlin
CODE:
fun <T> elvisLike(x: T, y: T & Any): T & Any = x ?: y

fun main() {
    // OK
    elvisLike<String>("", "").length
    // Error: 'null' cannot be a value of a non-null type
    elvisLike<String>("", null).length

    // OK
    elvisLike<String?>(null, "").length
    // Error: 'null' cannot be a value of a non-null type
    elvisLike<String?>(null, null).length
}

----------------------------------------

TITLE: Changing declaration names for Objective-C/Swift
DESCRIPTION: Example of using @ObjCName annotation to specify custom names for Kotlin declarations in Objective-C/Swift

LANGUAGE: kotlin
CODE:
@ObjCName(swiftName = "MySwiftArray")
class MyKotlinArray {
    @ObjCName("index")
    fun indexOf(@ObjCName("of") element: String): Int = TODO()
}

LANGUAGE: swift
CODE:
let array = MySwiftArray()
let index = array.index(of: "element")

----------------------------------------

TITLE: External Interface Implementation
DESCRIPTION: Shows how to create and use external interfaces to describe JavaScript objects and their expected methods.

LANGUAGE: kotlin
CODE:
external interface JQueryAjaxSettings {
    var async: Boolean
    var cache: Boolean
    var complete: (JQueryXHR, String) -> Unit
    // etc
}

----------------------------------------

TITLE: Generating TypeScript Declarations in Kotlin/JS Gradle Build
DESCRIPTION: Demonstrates how to enable TypeScript declaration file generation in a Kotlin/JS project using the Gradle build script.

LANGUAGE: kotlin
CODE:
kotlin {
    js {
        binaries.executable()
        browser {
        }
        generateTypeScriptDefinitions()
    }
}

----------------------------------------

TITLE: JavaScript Class Extension
DESCRIPTION: Demonstrates how to extend JavaScript classes in Kotlin while maintaining proper inheritance and method overriding.

LANGUAGE: kotlin
CODE:
open external class Foo {
    open fun run()
    fun stop()
}

class Bar : Foo() {
    override fun run() {
        window.alert("Running!")
    }

    fun restart() {
        window.alert("Restarting")
    }
}

----------------------------------------

TITLE: Long Number Problem Solution
DESCRIPTION: Functional solution to the Long Number problem using collection transformations and elvis operator.

LANGUAGE: kotlin
CODE:
fun main() {
    // read input
    val n = readln().toInt()
    val s = readln()
    val fl = readln().split(" ").map { it.toInt() }
    // define local function f
    fun f(c: Char) = '0' + fl[c - '1']
    // greedily find first and last indices
    val i = s.indexOfFirst { c -> f(c) > c }
        .takeIf { it >= 0 } ?: s.length
    val j = s.withIndex().indexOfFirst { (j, c) -> j > i && f(c) < c }
        .takeIf { it >= 0 } ?: s.length
    // compose and write the answer
    val ans =
        s.substring(0, i) +
        s.substring(i, j).map { c -> f(c) }.joinToString("") +
        s.substring(j)
    println(ans)
}

----------------------------------------

TITLE: Configuring Kotlin source directories in Kotlin DSL
DESCRIPTION: Demonstrates how to configure custom source directories for Kotlin files in a Gradle build script using Kotlin DSL. This is useful when Kotlin and Java sources are not stored in the default locations.

LANGUAGE: kotlin
CODE:
sourceSets.main {
    java.srcDirs("src/main/myJava", "src/main/myKotlin")
}

----------------------------------------

TITLE: Java/Kotlin Property Resolution Example
DESCRIPTION: Example showing resolution behavior between Java fields and Kotlin properties

LANGUAGE: java
CODE:
public class Base {
    public String a = "a";
    public String b = "b";
}

LANGUAGE: kotlin
CODE:
class Derived : Base() {
    val a = "aa"
    val b get() = "bb"
}

fun main() {
    println(a)
    println(b)
}

----------------------------------------

TITLE: Accessing top-level Kotlin functions from Swift
DESCRIPTION: Example of how top-level Kotlin functions are accessed from Swift

LANGUAGE: kotlin
CODE:
// MyLibraryUtils.kt
package my.library

fun foo() {}

LANGUAGE: swift
CODE:
MyLibraryUtilsKt.foo()

----------------------------------------

TITLE: Simulating Break with Non-Local Return in Kotlin
DESCRIPTION: Shows how to simulate a break statement in Kotlin using a non-local return from a nested lambda. This technique can be used when a direct break is not possible.

LANGUAGE: kotlin
CODE:
fun foo() {
    run loop@{
        listOf(1, 2, 3, 4, 5).forEach {
            if (it == 3) return@loop // non-local return from the lambda passed to run
            print(it)
        }
    }
    print(" done with nested loop")
}

fun main() {
    foo()
}

----------------------------------------

TITLE: Using ES2015 Modules in Kotlin/JS
DESCRIPTION: Configuration for enabling ES2015 modules and classes in Kotlin/JS Gradle builds

LANGUAGE: kotlin
CODE:
kotlin { 
    js(IR) { 
        useEsModules() // Enables ES2015 modules
        browser()
        }
    }

// Enables ES2015 classes generation
tasks.withType<KotlinJsCompile>().configureEach {
    kotlinOptions {
        useEsClasses = true
    }
}

----------------------------------------

TITLE: Repository Declaration in Maven
DESCRIPTION: Example of declaring additional Maven repositories for accessing project dependencies.

LANGUAGE: xml
CODE:
<repositories>
    <repository>
        <id>spring-repo</id>
        <url>https://repo.spring.io/release</url>
    </repository>
</repositories>

----------------------------------------

TITLE: Updating Podfile for Xcode Integration
DESCRIPTION: Example of updating a Podfile to include a local Pod dependency and specify a custom Podspec repository.

LANGUAGE: ruby
CODE:
source 'https://github.com/Kotlin/kotlin-cocoapods-spec.git'

target 'kotlin-cocoapods-xcproj' do
    pod 'podspecWithFilesExample', :path => 'cocoapods/externalSources/url/podspecWithFilesExample'
    pod 'example'
end

----------------------------------------

TITLE: Configuring Power-assert Plugin in Kotlin Build Script
DESCRIPTION: Shows how to add and configure the Power-assert plugin in a Kotlin build script using the plugins block and powerAssert configuration.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "2.0.0"
    kotlin("plugin.power-assert") version "2.0.0"
}

----------------------------------------

TITLE: Local Return in Kotlin Anonymous Function
DESCRIPTION: Demonstrates how to use a return statement within an anonymous function in Kotlin. The return statement here returns from the anonymous function itself, not the outer function.

LANGUAGE: kotlin
CODE:
fun foo() {
    listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) {
        if (value == 3) return  // local return to the caller of the anonymous function - the forEach loop
        print(value)
    })
    print(" done with anonymous function")
}

fun main() {
    foo()
}

----------------------------------------

TITLE: Mapping Kotlin enums to Swift
DESCRIPTION: Example of how Kotlin enums are represented and used in Swift

LANGUAGE: kotlin
CODE:
enum class Colors {
    RED, GREEN, BLUE
}

LANGUAGE: swift
CODE:
Colors.red
Colors.green
Colors.blue

switch color {
    case .red: print("It's red")
    case .green: print("It's green")
    case .blue: print("It's blue")
    default: fatalError("No such color")
}

----------------------------------------

TITLE: Calling Kotlin Function from JavaScript (Plain Module)
DESCRIPTION: Demonstrates how to call a Kotlin function from JavaScript when using the 'plain' module system. The Kotlin function is wrapped in a module object.

LANGUAGE: kotlin
CODE:
fun foo() = "Hello"

LANGUAGE: javascript
CODE:
alert(myModule.foo());

----------------------------------------

TITLE: Creating Custom Source Sets in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to create a custom intermediate source set and set up dependsOn relations for sharing code between specific targets in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm()
    js()
    linuxX64()

    sourceSets {
        // Create a source set named "jvmAndJs"
        val jvmAndJsMain by creating {
            // Don't forget to add dependsOn to commonMain
            dependsOn(commonMain.get())
        }

        jvmMain {
            dependsOn(jvmAndJsMain)
        }

        jsMain {
            dependsOn(jvmAndJsMain)
        }
    }
}

----------------------------------------

TITLE: Enabling Kotlin/JS IR Compiler in Gradle
DESCRIPTION: Demonstrates how to enable the Kotlin/JS IR compiler in a Gradle build script using the 'js' function with different compiler types.

LANGUAGE: groovy
CODE:
kotlin {
    js(IR) { // or: LEGACY, BOTH
        // ...
        binaries.executable() // not applicable to BOTH, see details below
    }
}

----------------------------------------

TITLE: Implementing Function f Imperatively in Kotlin
DESCRIPTION: An imperative implementation of the number transformation function using a while loop and mutable variable.

LANGUAGE: kotlin
CODE:
fun f(x: Int): Int {
    var cur = x + 1
    while (cur % 10 == 0) cur /= 10
    return cur
}

----------------------------------------

TITLE: Declaring Targets in Kotlin Multiplatform Project
DESCRIPTION: Demonstrates how to declare Android and iOS targets in a Kotlin Multiplatform project using the Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    androidTarget()
    iosArm64()
    iosSimulatorArm64()
}

----------------------------------------

TITLE: Configuring Power-assert Plugin in Groovy Build Script
DESCRIPTION: Shows how to add and configure the Power-assert plugin in a Groovy build script.

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '2.0.0'
    id 'org.jetbrains.kotlin.plugin.power-assert' version '2.0.0'
}

----------------------------------------

TITLE: Using Konan_DebugPrint for Variable Inspection in Kotlin/Native
DESCRIPTION: Demonstrates how to use the built-in runtime function Konan_DebugPrint for variable inspection in both LLDB and GDB for Kotlin/Native programs.

LANGUAGE: bash
CODE:
0:b-debugger-fixes:minamoto@unit-703(0)# cat ../debugger-plugin/1.kt | nl -p
     1  fun foo(a:String, b:Int) = a + b
     2  fun one() = 1
     3  fun main(arg:Array<String>) {
     4    var a_variable = foo("(a_variable) one is ", 1)
     5    var b_variable = foo("(b_variable) two is ", 2)
     6    var c_variable = foo("(c_variable) two is ", 3)
     7    var d_variable = foo("(d_variable) two is ", 4)
     8    println(a_variable)
     9    println(b_variable)
    10    println(c_variable)
    11    println(d_variable)
    12  }
0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o 'b -f 1.kt -l 9' -o r
(lldb) target create "./program.kexe"
Current executable set to './program.kexe' (x86_64).
(lldb) b -f 1.kt -l 9
Breakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 463 at 1.kt:9, address = 0x0000000100000dbf
(lldb) r
(a_variable) one is 1
Process 80496 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array<kotlin.String>) at 1.kt:9
   6      var c_variable = foo("(c_variable) two is ", 3)
   7      var d_variable = foo("(d_variable) two is ", 4)
   8      println(a_variable)
-> 9      println(b_variable)
   10     println(c_variable)
   11     println(d_variable)
   12   }

Process 80496 launched: './program.kexe' (x86_64)
(lldb) expression -- (int32_t)Konan_DebugPrint(a_variable)
(a_variable) one is 1(int32_t) $0 = 0
(lldb)

----------------------------------------

TITLE: Returning Labeled Value in Kotlin
DESCRIPTION: Demonstrates the syntax for returning a labeled value in Kotlin. This snippet shows that the parser gives preference to the qualified return over a labeled expression.

LANGUAGE: kotlin
CODE:
return@a 1

----------------------------------------

TITLE: Generating TypeScript definitions in Kotlin/JS
DESCRIPTION: Shows how to enable generation of TypeScript definition files for Kotlin/JS projects in Gradle.

LANGUAGE: kotlin
CODE:
kotlin {
    js {
        binaries.executable()
        browser {
        }
        generateTypeScriptDefinitions()
    }
}

----------------------------------------

TITLE: Setting Lombok configuration file path in Gradle (Kotlin DSL)
DESCRIPTION: Configure the path to the lombok.config file in the build.gradle.kts file for the Kotlin Lombok plugin.

LANGUAGE: kotlin
CODE:
kotlinLombok {
    lombokConfigurationFile(file("lombok.config"))
}

----------------------------------------

TITLE: Support for Java toolchains in Kotlin Gradle plugin
DESCRIPTION: Example showing how to set up Java toolchains for Kotlin/JVM compilation tasks.

LANGUAGE: kotlin
CODE:
kotlin {
    jvmToolchain {
        (this as JavaToolchainSpec).languageVersion.set(JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)) // "8"
    }
}

----------------------------------------

TITLE: Inline JavaScript in Kotlin
DESCRIPTION: Demonstrates how to use the js() function to inline JavaScript code within Kotlin. Shows proper usage with string constants and type handling.

LANGUAGE: kotlin
CODE:
fun jsTypeOf(o: Any): String {
    return js("typeof o")
}

----------------------------------------

TITLE: Declaring Dynamic Type Variable in Kotlin
DESCRIPTION: Shows basic declaration of a dynamic type variable in Kotlin. The dynamic type allows for loose typing when interoperating with JavaScript.

LANGUAGE: kotlin
CODE:
val dyn: dynamic = ...

----------------------------------------

TITLE: Declaring Dependencies in Kotlin Multiplatform
DESCRIPTION: Shows how to declare dependencies in a Kotlin Multiplatform project, including platform-specific dependencies and common dependencies that propagate to all source sets.

LANGUAGE: kotlin
CODE:
kotlin {
    // Targets declaration
    sourceSets {
        jvmMain.dependencies {
            // This is jvmMain's dependencies, so it's OK to add a JVM-specific dependency
            implementation("com.google.guava:guava:32.1.2-jre")
        }
    }
}

LANGUAGE: kotlin
CODE:
kotlin {
    androidTarget()     // Android
    iosArm64()          // iPhone devices 
    iosSimulatorArm64() // iPhone simulator on Apple Silicon Mac

    sourceSets {
        commonMain.dependencies {
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
        }
    }
}

----------------------------------------

TITLE: Applying the Kotlin Multiplatform Gradle Plugin
DESCRIPTION: Shows how to apply the Kotlin Multiplatform Gradle plugin in Kotlin and Groovy build scripts.

LANGUAGE: Kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

LANGUAGE: Groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'
}

----------------------------------------

TITLE: Reading C String in Kotlin
DESCRIPTION: Kotlin function showing how to read a C string returned from a C function and convert it to a Kotlin String using toKString() extension function.

LANGUAGE: Kotlin
CODE:
fun passStringToC() {
    val stringFromC = return_string()?.toKString()

    println("Returned from C: $stringFromC")
}

----------------------------------------

TITLE: Adding Multiplatform Library Dependency in Kotlin Build Script
DESCRIPTION: Demonstrates how to add a multiplatform library dependency to common and platform-specific source sets in a Kotlin Multiplatform project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonMain.dependencies {
            implementation("io.ktor:ktor-client-core:%ktorVersion%")
        }
        androidMain.dependencies {
            // dependency to a platform part of ktor-client will be added automatically
        }
    }
}

----------------------------------------

TITLE: Implementing Soft Assertions
DESCRIPTION: Shows how to implement soft assertions that collect multiple failures before reporting.

LANGUAGE: kotlin
CODE:
fun <R> assertSoftly(block: AssertScope.() -> R): R {
    val scope = AssertScopeImpl()
    val result = scope.block()
    if (scope.errors.isNotEmpty()) {
        throw AssertionError(scope.errors.joinToString("\n"))
    }
    return result
}

interface AssertScope {
    fun assert(assertion: Boolean, message: (() -> String)? = null)
}

class AssertScopeImpl : AssertScope {
    val errors = mutableListOf<String>()
    override fun assert(assertion: Boolean, message: (() -> String)?) {
        if (!assertion) {
            errors.add(message?.invoke() ?: "Assertion failed")
        }
    }
}

----------------------------------------

TITLE: Configuring Kotlin/JS Output Granularity in Gradle
DESCRIPTION: Demonstrates how to configure the output granularity for Kotlin/JS compilation in the gradle.properties file.

LANGUAGE: properties
CODE:
kotlin.js.ir.output.granularity=whole-program // 'per-module' is the default

----------------------------------------

TITLE: Labeling Expressions in Kotlin
DESCRIPTION: Shows how to label a for loop in Kotlin. Labels are identifiers followed by the '@' sign and can be used to qualify break or continue statements.

LANGUAGE: kotlin
CODE:
loop@ for (i in 1..100) {
    // ...
}

----------------------------------------

TITLE: Enabling Concurrent Marking GC
DESCRIPTION: Gradle property configuration to enable experimental concurrent marking garbage collection

LANGUAGE: none
CODE:
kotlin.native.binary.gc=cms

----------------------------------------

TITLE: Adding Test Dependencies in Kotlin Build Script
DESCRIPTION: Demonstrates how to add test dependencies to all source sets in a Kotlin Multiplatform project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonTest.dependencies {
            implementation(kotlin("test")) // Brings all the platform dependencies automatically
        }
    }
}

----------------------------------------

TITLE: Converting 2D Data to Map for Lets-Plot in Kotlin
DESCRIPTION: This code converts the generated 2D data points into a Map format suitable for use with Lets-Plot for Kotlin.

LANGUAGE: kotlin
CODE:
val data = mapOf(
    "x" to (xy0.map { it[0] } + xy1.map { it[0] } + xy2.map { it[0] }).toList(),
    "y" to (xy0.map { it[1] } + xy1.map { it[1] } + xy2.map { it[1] }).toList()
)

----------------------------------------

TITLE: Configuring SAM-with-receiver Plugin in Maven
DESCRIPTION: Demonstrates how to add and configure the SAM-with-receiver plugin in a Maven pom.xml file.

LANGUAGE: xml
CODE:
<plugin>
    <artifactId>kotlin-maven-plugin</artifactId>
    <groupId>org.jetbrains.kotlin</groupId>
    <version>${kotlin.version}</version>

    <configuration>
        <compilerPlugins>
            <plugin>sam-with-receiver</plugin>
        </compilerPlugins>

        <pluginOptions>
            <option>
                sam-with-receiver:annotation=com.my.SamWithReceiver
            </option>
        </pluginOptions>
    </configuration>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-sam-with-receiver</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
    </dependencies>
</plugin>

----------------------------------------

TITLE: Using @JsName Annotation in Kotlin
DESCRIPTION: Shows how to use the @JsName annotation to control the generated names of Kotlin functions in JavaScript, particularly useful for handling overloads.

LANGUAGE: kotlin
CODE:
// Module 'kjs'
class Person(val name: String) {
    fun hello() {
        println("Hello $name!")
    }

    @JsName("helloWithGreeting")
    fun hello(greeting: String) {
        println("$greeting $name!")
    }
}

LANGUAGE: javascript
CODE:
var person = new kjs.Person("Dmitry");   // refers to module 'kjs'
person.hello();                          // prints "Hello Dmitry!"
person.helloWithGreeting("Servus");      // prints "Servus Dmitry!"

----------------------------------------

TITLE: Enabling ES Modules in Kotlin/JS Gradle Build
DESCRIPTION: Shows how to enable ES modules support in a Kotlin/JS project using the Gradle build script.

LANGUAGE: kotlin
CODE:
// build.gradle.kts
kotlin {
    js(IR) {
        useEsModules() // Enables ES2015 modules
        browser()
    }
}

----------------------------------------

TITLE: Defining KSP File Structure Schema
DESCRIPTION: Shows the hierarchical structure of how KSP views source files, including file, class, function, and property declarations with their respective attributes.

LANGUAGE: text
CODE:
KSFile
  packageName: KSName
  fileName: String
  annotations: List<KSAnnotation>  (File annotations)
  declarations: List<KSDeclaration>
    KSClassDeclaration // class, interface, object
      simpleName: KSName
      qualifiedName: KSName
      containingFile: String
      typeParameters: KSTypeParameter
      parentDeclaration: KSDeclaration
      classKind: ClassKind
      primaryConstructor: KSFunctionDeclaration
      superTypes: List<KSTypeReference>
      // contains inner classes, member functions, properties, etc.
      declarations: List<KSDeclaration>
    KSFunctionDeclaration // top level function
      simpleName: KSName
      qualifiedName: KSName
      containingFile: String
      typeParameters: KSTypeParameter
      parentDeclaration: KSDeclaration
      functionKind: FunctionKind
      extensionReceiver: KSTypeReference?
      returnType: KSTypeReference
      parameters: List<KSValueParameter>
      // contains local classes, local functions, local variables, etc.
      declarations: List<KSDeclaration>
    KSPropertyDeclaration // global variable
      simpleName: KSName
      qualifiedName: KSName
      containingFile: String
      typeParameters: KSTypeParameter
      parentDeclaration: KSDeclaration
      extensionReceiver: KSTypeReference?
      type: KSTypeReference
      getter: KSPropertyGetter
        returnType: KSTypeReference
      setter: KSPropertySetter
        parameter: KSValueParameter

----------------------------------------

TITLE: Declaring Targets in Kotlin Multiplatform Project (Groovy)
DESCRIPTION: Demonstrates how to declare Android and iOS targets in a Kotlin Multiplatform project using the Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    androidTarget()
    iosArm64()
    iosSimulatorArm64()
}

----------------------------------------

TITLE: Implementing Version Catalog Dependencies
DESCRIPTION: Shows how to use version catalog dependencies in a Gradle build file using Kotlin DSL.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation(libs.kotlinxCoroutines)
}

----------------------------------------

TITLE: Receiving C String Bytes in Kotlin
DESCRIPTION: Kotlin function demonstrating how to receive C string bytes into a Kotlin ByteArray and convert it to a Kotlin String.

LANGUAGE: Kotlin
CODE:
fun sendString() {
    val buf = ByteArray(255)
    buf.usePinned { pinned ->
        if (copy_string(pinned.addressOf(0), buf.size - 1) != 0) {
            throw Error("Failed to read string from C")
        }
    }

    val copiedStringFromC = buf.decodeToString()
    println("Message from C: $copiedStringFromC")
}

----------------------------------------

TITLE: Adding Source Set-Specific Dependencies in Kotlin Build Script
DESCRIPTION: Demonstrates how to add dependencies to specific source sets in a Kotlin Multiplatform project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonMain.dependencies {
            // kotlinx.coroutines will be available in all source sets
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%")
        }
        androidMain.dependencies {

        }
        iosMain.dependencies {
            // SQLDelight will be available only in the iOS source set, but not in Android or common
            implementation("com.squareup.sqldelight:native-driver:%sqlDelightVersion%")
        }
    }
}

----------------------------------------

TITLE: Command-line Compiler Configuration
DESCRIPTION: Shows how to use the all-open plugin with the command-line Kotlin compiler, including setting plugin options and presets.

LANGUAGE: bash
CODE:
-Xplugin=$KOTLIN_HOME/lib/allopen-compiler-plugin.jar

# The plugin option format is: "-P plugin:<plugin id>:<key>=<value>". 
# Options can be repeated.

-P plugin:org.jetbrains.kotlin.allopen:annotation=com.my.Annotation
-P plugin:org.jetbrains.kotlin.allopen:preset=spring

----------------------------------------

TITLE: Converting functions with receivers to regular functions in Kotlin/JS
DESCRIPTION: Demonstrates how to convert functions with receivers in external interfaces to regular functions by adding the receiver object as an argument.

LANGUAGE: kotlin
CODE:
// Replace this
external interface ButtonProps : Props {
   var inside: StyledDOMBuilder<BUTTON>.() -> Unit
}

LANGUAGE: kotlin
CODE:
external interface ButtonProps : Props {
   var inside: (StyledDOMBuilder<BUTTON>) -> Unit
}

----------------------------------------

TITLE: Blocking Thread Example in Kotlin
DESCRIPTION: Demonstrates a blocking implementation of posting an item that would freeze the UI thread during long-running operations.

LANGUAGE: kotlin
CODE:
fun postItem(item: Item) {
    val token = preparePost()
    val post = submitPost(token, item)
    processPost(post)
}

fun preparePost(): Token {
    // makes a request and consequently blocks the main thread
    return token
}

----------------------------------------

TITLE: Defining SAM-with-receiver Interface in Java
DESCRIPTION: Example of how to define a Java interface annotated with @SamWithReceiver for use with the SAM-with-receiver plugin.

LANGUAGE: java
CODE:
public @interface SamWithReceiver {}

@SamWithReceiver
public interface TaskRunner {
    void run(Task task);
}

----------------------------------------

TITLE: Main Solution Implementation for Reachable Numbers
DESCRIPTION: Complete solution implementing the main logic using HashSet to track visited numbers.

LANGUAGE: kotlin
CODE:
fun main() {
    var n = readln().toInt() // read integer from the input
    val reached = HashSet<Int>() // a mutable hash set 
    while (reached.add(n)) n = f(n) // iterate function f
    println(reached.size) // print answer to the output
}

----------------------------------------

TITLE: Initializing Base Class with Secondary Constructors in Kotlin
DESCRIPTION: Shows how to initialize a base class using secondary constructors in a derived class when there's no primary constructor.

LANGUAGE: kotlin
CODE:
class MyView : View {
    constructor(ctx: Context) : super(ctx)

    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)
}

----------------------------------------

TITLE: Declaring repositories in Kotlin DSL
DESCRIPTION: Demonstrates how to declare repositories for dependency resolution in a Gradle build script using Kotlin DSL. This example shows adding the Maven Central repository.

LANGUAGE: kotlin
CODE:
repositories {
    mavenCentral()
}

----------------------------------------

TITLE: Implementing KSP SymbolProcessor Interface
DESCRIPTION: Shows the core interfaces required for implementing a KSP processor including SymbolProcessorProvider and SymbolProcessor.

LANGUAGE: kotlin
CODE:
interface SymbolProcessorProvider {
    fun create(environment: SymbolProcessorEnvironment): SymbolProcessor
}

LANGUAGE: kotlin
CODE:
interface SymbolProcessor {
    fun process(resolver: Resolver): List<KSAnnotated> // Let's focus on this
    fun finish() {}
    fun onError() {}
}

----------------------------------------

TITLE: Specifying CocoaPods Installation Path
DESCRIPTION: Adding the CocoaPods installation path to the local.properties file to resolve build errors in Xcode.

LANGUAGE: text
CODE:
kotlin.apple.cocoapods.bin=/Users/Jane.Doe/.rbenv/shims/pod

----------------------------------------

TITLE: Excluding Standard Kotlin Libraries in Maven
DESCRIPTION: This XML snippet demonstrates how to exclude standard Kotlin libraries from external dependencies in a Maven project. It uses a wildcard exclusion for all artifacts with the 'org.jetbrains.kotlin' group ID.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>some.group.id</groupId>
    <artifactId>some.library</artifactId>
    <version>some.library.version</version>

    <exclusions>
        <exclusion>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>*</artifactId>
        </exclusion>
    </exclusions>
</dependency>

----------------------------------------

TITLE: Accessing Outer Class Superclass in Inner Class in Kotlin
DESCRIPTION: Demonstrates how to access the superclass of an outer class from within an inner class using the 'super@Outer' syntax in Kotlin.

LANGUAGE: kotlin
CODE:
open class Rectangle {
    open fun draw() { println("Drawing a rectangle") }
    val borderColor: String get() = "black"
}

class FilledRectangle: Rectangle() {
    override fun draw() {
        val filler = Filler()
        filler.drawAndFill()
    }
    
    inner class Filler {
        fun fill() { println("Filling") }
        fun drawAndFill() {
            super@FilledRectangle.draw() // Calls Rectangle's implementation of draw()
            fill()
            println("Drawn a filled rectangle with color ${super@FilledRectangle.borderColor}") // Uses Rectangle's implementation of borderColor's get()
        }
    }
}

fun main() {
    val fr = FilledRectangle()
        fr.draw()
}

----------------------------------------

TITLE: Configuring IntelliJ IDEA for KSP in Gradle Plugin (Groovy)
DESCRIPTION: This snippet demonstrates how to configure IntelliJ IDEA to recognize KSP generated sources in a Gradle plugin project using Groovy DSL.

LANGUAGE: groovy
CODE:
plugins {
    id 'idea'
}

idea {
    module {
        sourceDirs = sourceDirs + file('build/generated/ksp/main/kotlin')
        testSourceDirs = testSourceDirs + file('build/generated/ksp/test/kotlin')
        generatedSourceDirs = generatedSourceDirs + file('build/generated/ksp/main/kotlin') + file('build/generated/ksp/test/kotlin')
    }
}

----------------------------------------

TITLE: Configuring kapt to keep Java annotation processors in Gradle
DESCRIPTION: Set up kapt to keep javac's annotation processors working alongside Lombok in the build.gradle file.

LANGUAGE: groovy
CODE:
kapt {
    keepJavacAnnotationProcessors = true
}

----------------------------------------

TITLE: Setting Gradle JVM Arguments
DESCRIPTION: Example of setting JVM arguments for the Gradle daemon in the gradle.properties file.

LANGUAGE: Properties
CODE:
org.gradle.jvmargs=-Xmx1500m -Xms500m -XX:MaxMetaspaceSize=1g

----------------------------------------

TITLE: In-Place vs Return-New Collection Operations
DESCRIPTION: Illustrates the difference between operations that modify collections in-place (sort) versus those that return new collections (sorted).

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf("one", "two", "three", "four")
    val sortedNumbers = numbers.sorted()
    println(numbers == sortedNumbers)  // false
    numbers.sort()
    println(numbers == sortedNumbers)  // true
}

----------------------------------------

TITLE: Kotlin External Module Declaration
DESCRIPTION: Kotlin declaration for importing an external JavaScript module using @JsModule annotation.

LANGUAGE: kotlin
CODE:
@JsModule("hello")
external fun sayHello(name: String)

----------------------------------------

TITLE: Configuring Kotlin Plugin Version in Root Project (Kotlin)
DESCRIPTION: This snippet shows how to specify the Kotlin plugin version in the root project's build script for use in other project modules using Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kspSupportedKotlinVersion%" apply false
}

buildscript {
    dependencies {
        classpath(kotlin("gradle-plugin", version = "%kspSupportedKotlinVersion%"))
    }
}

----------------------------------------

TITLE: Configuring Webpack Module Output in Kotlin/JS
DESCRIPTION: Gradle configuration for specifying CommonJS as the module output type for browser targets using webpack.

LANGUAGE: groovy
CODE:
kotlin {
    js {
        browser {
            webpackTask {
                output.libraryTarget = "commonjs2"
            }
        }
        binaries.executable()
    }
}

----------------------------------------

TITLE: Using Lombok compiler plugin with command-line Kotlin compiler
DESCRIPTION: Attach the Lombok compiler plugin JAR to the Kotlin compiler using the Xplugin option.

LANGUAGE: bash
CODE:
-Xplugin=$KOTLIN_HOME/lib/lombok-compiler-plugin.jar

----------------------------------------

TITLE: Using Java Records in Kotlin
DESCRIPTION: This snippet demonstrates how to use a Java record class in Kotlin code. It shows creating a new Person record and accessing its components.

LANGUAGE: kotlin
CODE:
val newPerson = Person("Kotlin", 10)
val firstName = newPerson.name

----------------------------------------

TITLE: Configuring Kotlin Daemon JVM Args in Groovy DSL
DESCRIPTION: Example of specifying JVM arguments for the Kotlin daemon using the kotlin extension in a Groovy DSL build script.

LANGUAGE: Groovy
CODE:
kotlin {
    kotlinDaemonJvmArgs = ["-Xmx486m", "-Xms256m", "-XX:+UseParallelGC"]
}

----------------------------------------

TITLE: Checking Local Scope of Declarations in KSP
DESCRIPTION: Extension function that determines if a declaration is local by checking if it has a parent declaration that is not a class declaration.

LANGUAGE: kotlin
CODE:
fun KSDeclaration.isLocal(): Boolean =
    parentDeclaration != null && parentDeclaration !is KSClassDeclaration

----------------------------------------

TITLE: Specifying Framework Name for CocoaPods Integration
DESCRIPTION: Kotlin code snippet showing how to specify a framework name explicitly when the Pod name doesn't match.

LANGUAGE: kotlin
CODE:
pod("SDWebImage/MapKit") {
    moduleName = "SDWebImageMapKit"
}

----------------------------------------

TITLE: Configuring Native Language Interop
DESCRIPTION: Demonstrates how to configure interoperability with native languages like C and Objective-C in Kotlin Multiplatform projects.

LANGUAGE: kotlin
CODE:
kotlin {
    linuxX64 {
        compilations.getByName("main") {
            val myInterop by cinterops.creating {
                definitionFile.set(project.file("def-file.def"))
                packageName("org.sample")
                compilerOpts("-Ipath/to/headers")
                includeDirs.apply {
                    allHeaders("path1", "path2")
                    headerFilterOnly("path1", "path2")
                }
                includeDirs("include/directory", "another/directory")
            }
        }
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    linuxX64 {
        compilations.main {
            cinterops {
                myInterop {
                    definitionFile = project.file("def-file.def")
                    packageName 'org.sample'
                    compilerOpts '-Ipath/to/headers'
                    includeDirs.allHeaders("path1", "path2")
                    includeDirs.headerFilterOnly("path1", "path2")
                    includeDirs("include/directory", "another/directory")
                }
            }
        }
    }
}

----------------------------------------

TITLE: Using Java Annotations with Named Arguments in Kotlin
DESCRIPTION: This snippet shows how to use Java annotations in Kotlin code using named arguments syntax.

LANGUAGE: kotlin
CODE:
@Ann(intValue = 1, stringValue = "abc") class C

@AnnWithValue("abc") class C

----------------------------------------

TITLE: Enabling Gradle Configuration Cache in gradle.properties
DESCRIPTION: Add this line to your gradle.properties file to enable Gradle's configuration cache, which can improve build startup time.

LANGUAGE: properties
CODE:
org.gradle.configuration-cache=true

----------------------------------------

TITLE: Disabling Member Name Minification in Kotlin/JS
DESCRIPTION: Shows how to disable member name minification in Kotlin/JS production builds using a compiler option in the Gradle build script.

LANGUAGE: kotlin
CODE:
kotlin {
    js(IR) {
        compilations.all {
            compileTaskProvider.configure {
                compilerOptions.freeCompilerArgs.add("-Xir-minimized-member-names=false")
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Target Level Compiler Options in Kotlin
DESCRIPTION: Shows how to configure compiler options for a specific JVM/Android target using the compilerOptions block inside the target block.

LANGUAGE: kotlin
CODE:
kotlin {
    target { 
        compilerOptions {
            optIn.add("kotlin.RequiresOptIn")
        }
    }
}

----------------------------------------

TITLE: Using foldRight() for Right-to-Left Aggregation in Kotlin
DESCRIPTION: This snippet demonstrates the use of foldRight() function, which performs the folding operation from right to left on the collection elements.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(5, 2, 10, 4)
    val sumDoubledRight = numbers.foldRight(0) { element, sum -> sum + element * 2 }
    println(sumDoubledRight)
}

----------------------------------------

TITLE: Object Chain Memory Management
DESCRIPTION: Demonstrates complex object relationship handling between Kotlin and Swift, showing how object chains are garbage collected across language boundaries.

LANGUAGE: kotlin
CODE:
interface Storage {
    fun store(arg: Any)
}

class KotlinStorage(var field: Any? = null) : Storage {
    override fun store(arg: Any) {
        field = arg
    }
}

class KotlinExample {
    fun action(firstSwiftStorage: Storage, secondSwiftStorage: Storage) {
        val firstKotlinStorage = KotlinStorage()
        firstKotlinStorage.store(firstSwiftStorage)
        val secondKotlinStorage = KotlinStorage()
        firstSwiftStorage.store(secondKotlinStorage)
        secondKotlinStorage.store(secondSwiftStorage)
    }
}

LANGUAGE: swift
CODE:
class SwiftStorage : Storage {
    let name: String
    var field: Any? = nil

    init(_ name: String) {
        self.name = name
    }

    func store(arg: Any) {
        field = arg
    }

    deinit {
        print("deinit SwiftStorage \(name)")
    }
}

----------------------------------------

TITLE: Configuring Kotlin Style in IntelliJ IDEA
DESCRIPTION: Steps to apply the Kotlin style guide in IntelliJ IDEA or Android Studio.

LANGUAGE: plaintext
CODE:
1. Go to Settings/Preferences | Editor | Code Style | Kotlin.
2. Click Set from...
3. Select Kotlin style guide.

----------------------------------------

TITLE: Using Indexed Fold Operations in Kotlin Collections
DESCRIPTION: This code showcases the usage of foldIndexed() and foldRightIndexed() functions, which allow access to element indices during the folding operation.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(5, 2, 10, 4)
    val sumEven = numbers.foldIndexed(0) { idx, sum, element -> if (idx % 2 == 0) sum + element else sum }
    println(sumEven)

    val sumEvenRight = numbers.foldRightIndexed(0) { idx, element, sum -> if (idx % 2 == 0) sum + element else sum }
    println(sumEvenRight)
}

----------------------------------------

TITLE: Using Multiple Argument Files with Kotlin Compiler (Bash)
DESCRIPTION: Example of using multiple argument files with the Kotlin compiler to separate compiler options from source files.

LANGUAGE: bash
CODE:
$ kotlinc @compiler.options @classes

----------------------------------------

TITLE: Adding KSP Gradle Plugin in Kotlin
DESCRIPTION: This snippet shows how to add the KSP Gradle plugin to a Kotlin-based build script. It specifies the plugin ID and version.

LANGUAGE: kotlin
CODE:
plugins {
    id("com.google.devtools.ksp") version "%kspSupportedKotlinVersion%-%kspVersion%"
}

----------------------------------------

TITLE: Multi-Module XCFramework Configuration
DESCRIPTION: Gradle configuration for combining multiple Kotlin modules into a single XCFramework export. Shows how to export dependencies and configure module relationships.

LANGUAGE: kotlin
CODE:
kotlin {
    val frameworkName = "together"
    val xcf = XCFramework(frameworkName)

    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach { iosTarget ->
        // Same as in the example above,
        // with added export calls for dependencies
        iosTarget.binaries.framework {
            export(projects.network)
            export(projects.database)

            baseName = frameworkName
            xcf.add(this)
        }
    }

    // Dependencies set as "api" (as opposed to "implementation") to export underlying modules
    sourceSets {
        commonMain.dependencies {
            api(projects.network)
            api(projects.database)
        }
    }
}

----------------------------------------

TITLE: Enum Properties Access
DESCRIPTION: Shows how to access built-in enum properties name and ordinal.

LANGUAGE: kotlin
CODE:
enum class RGB { RED, GREEN, BLUE }

fun main() {
    println(RGB.RED.name)    // prints RED
    println(RGB.RED.ordinal) // prints 0
}

----------------------------------------

TITLE: Accessing Annotation Properties in Kotlin
DESCRIPTION: This snippet shows how to access properties of an annotation instance in Kotlin code.

LANGUAGE: kotlin
CODE:
fun foo(ann: Ann) {
    val i = ann.value
}

----------------------------------------

TITLE: Configuring Karma for browser tests
DESCRIPTION: Shows how to configure Karma test runner options for browser tests in the Gradle build script.

LANGUAGE: groovy
CODE:
kotlin {
    js {
        browser {
            testTask {
                useKarma {
                    useIe()
                    useSafari()
                    useFirefox()
                    useChrome()
                    useChromeCanary()
                    useChromeHeadless()
                    usePhantomJS()
                    useOpera()
                }
            }
        }
        binaries.executable()
        // ...
    }
}

----------------------------------------

TITLE: Making boolean properties nullable in external interfaces for Kotlin/JS
DESCRIPTION: Shows how to make boolean properties in external interfaces nullable to handle potential null or undefined values from JavaScript.

LANGUAGE: kotlin
CODE:
// Replace this
external interface SomeExternal {
    var visible: Boolean
}

LANGUAGE: kotlin
CODE:
// With this
external interface SomeExternal {
    var visible: Boolean?
}

----------------------------------------

TITLE: Excluding Transitive Kotlin Test Dependency in Gradle
DESCRIPTION: This snippet demonstrates how to exclude a transitive Kotlin test dependency (in this case, JUnit 4) in Gradle. This can be used to resolve conflicts between different testing frameworks in Kotlin 1.5.

LANGUAGE: groovy
CODE:
configurations { 
    testImplementation.get().exclude("org.jetbrains.kotlin", "kotlin-test-junit")
}

----------------------------------------

TITLE: Passing Arguments to Annotation Processors
DESCRIPTION: Shows how to pass arguments to annotation processors using the kapt configuration block in Gradle.

LANGUAGE: groovy
CODE:
kapt {
    arguments {
        arg("key", "value")
    }
}

----------------------------------------

TITLE: Configuring Privacy Manifest Plugin in Gradle
DESCRIPTION: Gradle configuration using the apple-privacy-manifests plugin to bundle PrivacyInfo.xcprivacy file with Kotlin artifacts.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform")
    kotlin("apple-privacy-manifests") version "1.0.0"
}

kotlin {
    privacyManifest {
        embed(
            privacyManifest = layout.projectDirectory.file("PrivacyInfo.xcprivacy").asFile,
        )
    }
}

----------------------------------------

TITLE: Configuring webpack settings in Gradle
DESCRIPTION: Demonstrates how to configure common webpack settings for Kotlin/JS projects in the Gradle build script.

LANGUAGE: groovy
CODE:
webpackTask {
    outputFileName = "mycustomfilename.js"
    output.libraryTarget = "commonjs2"
}

----------------------------------------

TITLE: Importing Kotlin DataFrame Library in Kotlin Notebook
DESCRIPTION: Imports the Kotlin DataFrame library for use in a Kotlin Notebook. This should be run at the start of the notebook before any other DataFrame operations.

LANGUAGE: kotlin
CODE:
%use dataframe

----------------------------------------

TITLE: HTML Template Setup
DESCRIPTION: Basic HTML template for the React application with root div and script reference.

LANGUAGE: html
CODE:
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello, Kotlin/JS!</title>
</head>
<body>
    <div id="root"></div>
    <script src="confexplorer.js"></script>
</body>
</html>

----------------------------------------

TITLE: Exporting Kotlin/Wasm Function to JavaScript
DESCRIPTION: This snippet illustrates how to make a Kotlin/Wasm function available to JavaScript code using the @JsExport annotation.

LANGUAGE: kotlin
CODE:
@JsExport
fun addOne(x: Int): Int = x + 1

----------------------------------------

TITLE: Specifying Kotlin API Version Compatibility
DESCRIPTION: Command-line switch to set compatibility mode for a specific Kotlin API version. It reports errors for code using newer APIs from the Kotlin Standard Library, including compiler-generated code.

LANGUAGE: kotlin
CODE:
-api-version X.Y

----------------------------------------

TITLE: Configuring Targets in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to configure different targets like JVM, JS, and Native in a Kotlin Multiplatform project.

LANGUAGE: Groovy
CODE:
kotlin {
    jvm()
    iosArm64()
    macosX64()
    js().browser()
}

----------------------------------------

TITLE: Running Kotlin/Wasm Browser Development Server
DESCRIPTION: Command to start the development server for the Kotlin/Wasm application using Gradle

LANGUAGE: bash
CODE:
./gradlew wasmJsBrowserRun -t

----------------------------------------

TITLE: Configuring Gradle to use the old JVM backend
DESCRIPTION: Gradle configuration to opt-out of the new IR backend and use the old JVM backend.

LANGUAGE: kotlin
CODE:
tasks.withType<org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile> {
  kotlinOptions.useOldBackend = true
}

----------------------------------------

TITLE: Enabling Both Compiler Modes for Kotlin/JS Libraries
DESCRIPTION: Shows how to enable both the IR and legacy compiler modes for Kotlin/JS libraries to maintain compatibility with different compiler backends.

LANGUAGE: groovy
CODE:
kotlin {
    js(BOTH) {
        // ...
    }
}

----------------------------------------

TITLE: Cloning Kotlin/Wasm WASI Template Repository
DESCRIPTION: Command to clone the Kotlin/Wasm WASI template repository from GitHub.

LANGUAGE: bash
CODE:
git clone git@github.com:Kotlin/kotlin-wasm-wasi-template.git

----------------------------------------

TITLE: Type Checking with Logical OR Operator in K2
DESCRIPTION: Example demonstrating improved type checking behavior with OR operator in K2

LANGUAGE: kotlin
CODE:
interface Status {
    fun signal() {}
}

interface Ok : Status
interface Postponed : Status
interface Declined : Status

fun signalCheck(signalStatus: Any) {
    if (signalStatus is Postponed || signalStatus is Declined) {
        signalStatus.signal()
    }
}

----------------------------------------

TITLE: Object pinning using refTo in Kotlin/Native
DESCRIPTION: Demonstrates an alternative way to pin Kotlin objects in memory using refTo for use with C functions in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*
import platform.posix.*
  
@OptIn(ExperimentalForeignApi::class)
fun readData(fd: Int) { 
    val buffer = ByteArray(1024)
    while (true) {
        val length = recv(fd, buffer.refTo(0), buffer.size.convert(), 0).toInt()

        if (length <= 0) {
            break
        }
        // Now `buffer` has raw data obtained from the `recv()` call.
    }
}

----------------------------------------

TITLE: Using the Path API
DESCRIPTION: Examples of using the newly stable Path API for working with filesystem paths.

LANGUAGE: kotlin
CODE:
// construct path with the div (/) operator
val baseDir = Path("/base")
val subDir = baseDir / "subdirectory"

// list files in a directory
val kotlinFiles: List<Path> = Path("/home/user").listDirectoryEntries("*.kt")

----------------------------------------

TITLE: Declaring Executable Binaries in Kotlin/Native
DESCRIPTION: Shows how to declare debug and release executable binaries for a Linux X64 target using Kotlin DSL in Gradle.

LANGUAGE: kotlin
CODE:
kotlin {
    linuxX64 { // Define your target instead.
        binaries {
            executable {
                // Binary configuration.
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Database Connection in Kotlin Notebook
DESCRIPTION: This snippet demonstrates how to set up database connection parameters using the DatabaseConfiguration class in Kotlin Notebook.

LANGUAGE: kotlin
CODE:
val URL = "YOUR_URL"
val USER_NAME = "YOUR_USERNAME"
val PASSWORD = "YOUR_PASSWORD"

val dbConfig = DatabaseConfiguration(URL, USER_NAME, PASSWORD)

----------------------------------------

TITLE: Using SAM-with-receiver in Kotlin
DESCRIPTION: Demonstrates how to use the SAM-with-receiver interface in Kotlin, where 'this' becomes an instance of 'Task' within the lambda.

LANGUAGE: kotlin
CODE:
fun test(context: TaskContext) {
    val runner = TaskRunner {
        // Here 'this' is an instance of 'Task'

        println("$name is started")
        context.executeTask(this)
        println("$name is finished")
    }
}

----------------------------------------

TITLE: Configuring Language Settings in Kotlin Multiplatform
DESCRIPTION: Shows how to configure language settings like language version, API version, and experimental features for source sets in a Kotlin Multiplatform project.

LANGUAGE: Kotlin
CODE:
kotlin {
    sourceSets.all {
        languageSettings.apply {
            languageVersion = "%languageVersion%" // possible values: '1.8', '1.9', `2.0`, `2.1`
            apiVersion = "%apiVersion%" // possible values: '1.8', '1.9', `2.0`, `2.1`
            enableLanguageFeature("InlineClasses") // language feature name
            optIn("kotlin.ExperimentalUnsignedTypes") // annotation FQ-name
            progressiveMode = true // false by default
        }
    }
}

LANGUAGE: Groovy
CODE:
kotlin {
    sourceSets.all {
        languageSettings {
            languageVersion = '%languageVersion%' // possible values: '1.8', '1.9', `2.0`, `2.1`
            apiVersion = '%apiVersion%' // possible values: '1.8', '1.9', `2.0`, `2.1`
            enableLanguageFeature('InlineClasses') // language feature name
            optIn('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
            progressiveMode = true // false by default
        }
    }
}

----------------------------------------

TITLE: Running Kotlin/Wasm Applications with Different VMs
DESCRIPTION: Commands to run the Kotlin/Wasm application using Node.js, Deno, and WasmEdge virtual machines via Gradle.

LANGUAGE: bash
CODE:
./gradlew wasmWasiNodeRun
./gradlew wasmWasiDenoRun
./gradlew wasmWasiWasmEdgeRun

----------------------------------------

TITLE: Declaring an inline class
DESCRIPTION: Example of declaring an inline class using the new 'value' modifier and @JvmInline annotation.

LANGUAGE: kotlin
CODE:
@JvmInline
value class Password(val s: String)

----------------------------------------

TITLE: Allocating native memory in Kotlin/Native
DESCRIPTION: Demonstrates how to allocate and free native memory using nativeHeap in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*

@OptIn(kotlinx.cinterop.ExperimentalForeignApi::class)
fun main() {
    val size: Long = 0
    val buffer = nativeHeap.allocArray<ByteVar>(size)
    nativeHeap.free(buffer)
}

----------------------------------------

TITLE: Wrapping and unwrapping Kotlin references for C callbacks in Kotlin/Native
DESCRIPTION: Shows how to wrap and unwrap Kotlin references for use in C callbacks using StableRef in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*

@OptIn(ExperimentalForeignApi::class)
val stableRef = StableRef.create(kotlinReference)
val voidPtr = stableRef.asCPointer()

// Later...
@OptIn(ExperimentalForeignApi::class)
val stableRef = voidPtr.asStableRef<KotlinClass>()
val kotlinReference = stableRef.get()

// Don't forget to dispose
stableRef.dispose()

----------------------------------------

TITLE: Building Kotlin/Wasm Distribution
DESCRIPTION: Command to generate production-ready artifacts for the Kotlin/Wasm application using Gradle

LANGUAGE: bash
CODE:
./gradlew wasmJsBrowserDistribution

----------------------------------------

TITLE: Complete Build Script Configuration Example
DESCRIPTION: Shows a complete build.gradle.kts configuration including plugin setup, dependencies, and power-assert configuration.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi

plugins {
    kotlin("jvm") version "%kotlinVersion%"
    kotlin("plugin.power-assert") version "%kotlinVersion%"
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
}

tasks.test {
    useJUnitPlatform()
}

@OptIn(ExperimentalKotlinGradlePluginApi::class)
powerAssert {
    functions = listOf("kotlin.assert", "kotlin.test.assertEquals", "kotlin.test.assertTrue", "kotlin.test.assertNull", "kotlin.require", "org.example.AssertScope.assert")
}

----------------------------------------

TITLE: Accessing and Modifying DOM Elements in Kotlin/JS
DESCRIPTION: Illustrates how to access a DOM element by ID, cast it to the appropriate type, and modify its properties in Kotlin/JS.

LANGUAGE: kotlin
CODE:
val email = document.getElementById("email") as HTMLInputElement
email.value = "hadi@jetbrains.com"

----------------------------------------

TITLE: Improvements to type inference for recursive generic types
DESCRIPTION: Example showing improved type inference for recursive generic types in Kotlin 1.5.30.

LANGUAGE: kotlin
CODE:
// Kotlin 1.5.20
val containerA = PostgreSQLContainer<Nothing>(DockerImageName.parse("postgres:13-alpine")).apply {
    withDatabaseName("db")
    withUsername("user")
    withPassword("password")
    withInitScript("sql/schema.sql")
}

// Kotlin 1.5.30
val containerB = PostgreSQLContainer(DockerImageName.parse("postgres:13-alpine"))
    .withDatabaseName("db")
    .withUsername("user")
    .withPassword("password")
    .withInitScript("sql/schema.sql")

----------------------------------------

TITLE: Handling null pointers in Kotlin/Native C interop
DESCRIPTION: Demonstrates how to handle null pointers when working with C interop in Kotlin/Native, using null-safety operators.

LANGUAGE: kotlin
CODE:
val path = getenv("PATH")?.toKString() ?: ""

----------------------------------------

TITLE: Accessing Kotlin singletons from Swift
DESCRIPTION: Example of how Kotlin object and companion object declarations are accessed from Swift

LANGUAGE: kotlin
CODE:
object MyObject {
    val x = "Some value"
}

class MyClass {
    companion object {
        val x = "Some value"
    }
}

LANGUAGE: swift
CODE:
MyObject.shared
MyObject.shared.x
MyClass.companion
MyClass.Companion.shared

----------------------------------------

TITLE: Importing Lets-Plot and DataFrame Libraries in Kotlin Notebook
DESCRIPTION: This snippet shows how to import the Lets-Plot for Kotlin and Kotlin DataFrame libraries in a Kotlin Notebook.

LANGUAGE: kotlin
CODE:
%use lets-plot
%use dataframe

----------------------------------------

TITLE: Configuring multiple stability configuration files for Compose compiler
DESCRIPTION: Demonstrates how to use the new stabilityConfigurationFiles option to specify multiple stability configuration files for the Compose compiler.

LANGUAGE: kotlin
CODE:
composeCompiler {
    stabilityConfigurationFiles.addAll(
        project.layout.projectDirectory.file("configuration-file1.conf"),
        project.layout.projectDirectory.file("configuration-file2.conf"),
    )
}

----------------------------------------

TITLE: Configuring Lombok plugin in Maven
DESCRIPTION: Add the Lombok compiler plugin to the Maven pom.xml file, including the plugin configuration and dependencies.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.jetbrains.kotlin</groupId>
    <artifactId>kotlin-maven-plugin</artifactId>
    <version>${kotlin.version}</version>
    <configuration>
        <compilerPlugins>
            <plugin>lombok</plugin>
        </compilerPlugins>
        <pluginOptions>
            <option>lombok:config=${project.basedir}/lombok.config</option>
        </pluginOptions>
    </configuration>
    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-lombok</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>
</plugin>

----------------------------------------

TITLE: Using Type Aliases to Satisfy Actual Declarations in Kotlin Multiplatform
DESCRIPTION: Shows how to use type aliases to connect expected declarations with platform-specific types.

LANGUAGE: kotlin
CODE:
expect enum class Month {
    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY,
    AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER
}

expect class MyDate {
    fun getYear(): Int
    fun getMonth(): Month
    fun getDayOfMonth(): Int
}

LANGUAGE: kotlin
CODE:
actual typealias Month = java.time.Month
actual typealias MyDate = java.time.LocalDate

----------------------------------------

TITLE: Handling JavaScript Exceptions in Kotlin/Wasm
DESCRIPTION: This example demonstrates how to catch and handle JavaScript exceptions in Kotlin/Wasm code using try-catch and the JsException type.

LANGUAGE: kotlin
CODE:
external object JSON {
    fun <T: JsAny> parse(json: String): T
}

fun main() {
    try {
        JSON.parse("an invalid JSON")
    } catch (e: JsException) {
        println("Thrown value is: ${e.thrownValue}")
        println("Message: ${e.message}")
        println("Stacktrace:")
        e.printStackTrace()
    }
}

----------------------------------------

TITLE: Inheriting from multiple sealed interfaces
DESCRIPTION: Example showing how a class can inherit from multiple sealed interfaces.

LANGUAGE: kotlin
CODE:
class FilledRectangle: Polygon, Fillable

----------------------------------------

TITLE: Using JNI with Kotlin
DESCRIPTION: Shows how to declare functions and properties implemented in native code using the 'external' modifier in Kotlin.

LANGUAGE: kotlin
CODE:
external fun foo(x: Int): Double

var myProperty: String
    external get
    external set

----------------------------------------

TITLE: Configuring Test Dependencies in Kotlin build.gradle.kts
DESCRIPTION: Shows how to add test dependencies to all source sets including JavaScript target using Kotlin DSL in Gradle build script.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
         commonTest.dependencies {
            implementation(kotlin("test")) // This makes test annotations and functionality available in JS
        }
    }
}

----------------------------------------

TITLE: Creating a Box Plot with Lets-Plot for Kotlin
DESCRIPTION: This snippet demonstrates how to create a box plot using Lets-Plot for Kotlin, including customization of colors and plot size.

LANGUAGE: kotlin
CODE:
val boxPlot = ggplot(data) { x = "City"; y = "Temperature" } + ggsize(700, 500) + geomBoxplot { fill = "City" } +
    scaleFillManual(values = listOf("light_yellow", "light_magenta", "light_green"))
boxPlot

----------------------------------------

TITLE: Adding JSON Serialization Dependency (Groovy)
DESCRIPTION: Adds the kotlinx-serialization-json library dependency to the project using Groovy DSL.

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:%serializationVersion%'
}

----------------------------------------

TITLE: Filtering Collection Elements in Kotlin
DESCRIPTION: Shows how to filter elements from a collection based on a condition.

LANGUAGE: kotlin
CODE:
@GetMapping("/filterMessagesLongerThan10")
fun filterMessagesLongerThan10(): List<Message> {
    val messages = service.findMessages()
    return messages.filter { it.text.length > 10 }
}

----------------------------------------

TITLE: Bit rotation operations example
DESCRIPTION: Demonstrates the usage of bit rotation operations in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
fun main() {
    val number: Short = 0b10001
    println(number
        .rotateRight(2)
        .toString(radix = 2)) // 100000000000100
    println(number
        .rotateLeft(2)
        .toString(radix = 2))  // 1000100
}

----------------------------------------

TITLE: Using a sealed interface in an exhaustive when expression
DESCRIPTION: Example of using a sealed interface in a when expression without needing an else branch, since all cases are covered.

LANGUAGE: kotlin
CODE:
fun draw(polygon: Polygon) = when (polygon) {
   is Rectangle -> // ...
   is Triangle -> // ...
   // else is not needed - all possible implementations are covered
}

----------------------------------------

TITLE: Number Boxing and Referential Equality in Kotlin
DESCRIPTION: Shows how numbers are boxed and cached in the JVM, affecting referential equality checks.

LANGUAGE: kotlin
CODE:
fun main() {
    val a: Int = 100
    val boxedA: Int? = a
    val anotherBoxedA: Int? = a
    
    println(boxedA === anotherBoxedA) // true
}

----------------------------------------

TITLE: Adding kapt Dependencies in Groovy DSL
DESCRIPTION: Demonstrates how to add dependencies for kapt using Groovy DSL in the Gradle build script.

LANGUAGE: groovy
CODE:
dependencies {
    kapt 'groupId:artifactId:version'
}

----------------------------------------

TITLE: Configuring Named Library Binary
DESCRIPTION: Shows how to create a library binary with a custom name using the kotlinArtifacts DSL.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.Library("mylib") {
        // Binary configuration
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.Library("mylib") {
        // Binary configuration
    }
}

----------------------------------------

TITLE: Importing Kotlin Webpack Configuration in Gradle
DESCRIPTION: This code snippet imports the KotlinWebpackConfig class for use in the Gradle build file.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig

----------------------------------------

TITLE: Using the new firstNotNullOf collection function
DESCRIPTION: Example of using the new firstNotNullOf and firstNotNullOfOrNull collection functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val data = listOf("Kotlin", "1.5")
    println(data.firstNotNullOf(String::toDoubleOrNull))
    println(data.firstNotNullOfOrNull(String::toIntOrNull))
}

----------------------------------------

TITLE: Disabling granular workspaces for Kotlin/JS in Gradle
DESCRIPTION: Shows how to disable granular workspaces for Kotlin/JS projects to resolve potential conflicts in parallel Gradle process execution.

LANGUAGE: kotlin
CODE:
rootProject.plugins.withType<YarnPlugin> {
    rootProject.the<YarnRootExtension>().disableGranularWorkspaces()
}

----------------------------------------

TITLE: Saving and Exporting Refined DataFrame in Kotlin
DESCRIPTION: Demonstrates how to filter a DataFrame, remove a column, save the refined data to a JSON file, and open an HTML table in the browser. This snippet shows various data export techniques in Kotlin DataFrame.

LANGUAGE: kotlin
CODE:
val moviesDf = DataFrame.read("movies.csv")

val actionMoviesDf = moviesDf.filter { genres.equals("Action") }

val refinedMoviesDf = actionMoviesDf.remove { movieId }
refinedMoviesDf

refinedMoviesDf.writeJson("movies.json")

refinedMoviesDf.toStandaloneHTML(DisplayConfiguration(rowsLimit = null)).openInBrowser()

----------------------------------------

TITLE: Importing Required Libraries for SQL Database Connectivity in Kotlin
DESCRIPTION: This code snippet shows the necessary import statements for using the Kotlin DataFrame library and Java SQL libraries in a Kotlin Notebook.

LANGUAGE: kotlin
CODE:
%use dataframe
import java.sql.DriverManager
import java.util.*

----------------------------------------

TITLE: Configuring kapt in Maven POM
DESCRIPTION: Demonstrates how to configure kapt for use with Maven in the project's pom.xml file.

LANGUAGE: xml
CODE:
<execution>
    <id>kapt</id>
    <goals>
        <goal>kapt</goal>
    </goals>
    <configuration>
        <sourceDirs>
            <sourceDir>src/main/kotlin</sourceDir>
            <sourceDir>src/main/java</sourceDir>
        </sourceDirs>
        <annotationProcessorPaths>
            <annotationProcessorPath>
                <groupId>com.google.dagger</groupId>
                <artifactId>dagger-compiler</artifactId>
                <version>2.9</version>
            </annotationProcessorPath>
        </annotationProcessorPaths>
    </configuration>
</execution>

----------------------------------------

TITLE: Component Functions Implementation in Kotlin
DESCRIPTION: Shows how destructuring declarations are compiled into component function calls.

LANGUAGE: kotlin
CODE:
val name = person.component1()
val age = person.component2()

----------------------------------------

TITLE: Underscore Type Arguments Example
DESCRIPTION: Demonstrates usage of the new underscore operator for type argument inference

LANGUAGE: kotlin
CODE:
abstract class SomeClass<T> {
    abstract fun execute(): T
}

class SomeImplementation : SomeClass<String>() {
    override fun execute(): String = "Test"
}

class OtherImplementation : SomeClass<Int>() {
    override fun execute(): Int = 42
}

object Runner {
    inline fun <reified S: SomeClass<T>, T> run(): T {
        return S::class.java.getDeclaredConstructor().newInstance().execute()
    }
}

fun main() {
    val s = Runner.run<SomeImplementation, _>()
    assert(s == "Test")
    val n = Runner.run<OtherImplementation, _>()
    assert(n == 42)
}

----------------------------------------

TITLE: Creating BufferedImage Graphics in Kotlin Notebook
DESCRIPTION: Demonstrates how to create and display a BufferedImage with custom graphics and styling.

LANGUAGE: kotlin
CODE:
import java.awt.Color
import java.awt.image.BufferedImage

val width = 300
val height = width

val image = BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)

val graphics = image.createGraphics()
graphics.background = Color.BLACK
graphics.clearRect(0, 0, width, height)
graphics.setRenderingHint(
    java.awt.RenderingHints.KEY_ANTIALIASING,
    java.awt.RenderingHints.VALUE_ANTIALIAS_ON
)
graphics.color = Color.WHITE
graphics.fillRect(width / 10, height * 8 / 10, width * 10 / 20, height / 10)
graphics.dispose()

----------------------------------------

TITLE: Using ifEmpty and ifBlank Functions
DESCRIPTION: Demonstrates the usage of new ifEmpty and ifBlank functions for collections and strings.

LANGUAGE: kotlin
CODE:
fun main() {
    fun printAllUppercase(data: List<String>) {
        val result = data
            .filter { it.all { c -> c.isUpperCase() } }
            .ifEmpty { listOf("<no uppercase>") }
        result.forEach { println(it) }
    }
    
    printAllUppercase(listOf("foo", "Bar"))
    printAllUppercase(listOf("FOO", "BAR"))

    val s = "    \n"
    println(s.ifBlank { "<blank>" })
    println(s.ifBlank { null })
}

----------------------------------------

TITLE: Declaring a Java Record
DESCRIPTION: This snippet shows how to declare a simple record class in Java. Records are classes for storing immutable data with a concise syntax.

LANGUAGE: java
CODE:
// Java
public record Person (String name, int age) {}

----------------------------------------

TITLE: Configure All-open Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Shows how to add and configure the all-open plugin in a Gradle build script using Kotlin DSL. Demonstrates setting up annotations that will make classes open.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.allopen") version "%kotlinVersion%"
}

allOpen {
    annotation("com.my.Annotation")
    // annotations("com.another.Annotation", "com.third.Annotation")
}

----------------------------------------

TITLE: Adding JDBC Driver Dependency in Kotlin Notebook
DESCRIPTION: This snippet demonstrates how to add a dependency for a JDBC driver in a Kotlin Notebook. It uses the MariaDB JDBC driver as an example.

LANGUAGE: kotlin
CODE:
USE {
   dependencies("org.mariadb.jdbc:mariadb-java-client:$version")
}

----------------------------------------

TITLE: Configuring Framework Binary
DESCRIPTION: Shows configuration of an iOS framework with debug and release modes.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.Framework("myframe") {
        modes(DEBUG, RELEASE)
        target = iosArm64
        isStatic = false
        kotlinOptions {
            verbose = false
        }
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.Framework("myframe") {
        modes(DEBUG, RELEASE)
        target = iosArm64
        it.static = false
        kotlinOptions {
            verbose = false
        }
    }
}

----------------------------------------

TITLE: Displaying Data from JSON File in Kotlin Notebook
DESCRIPTION: Reads data from a JSON file into a DataFrame and displays it. This snippet demonstrates how to load and view data in a Kotlin Notebook.

LANGUAGE: kotlin
CODE:
val dfJson = DataFrame.read("jsonFile.json")
dfJson

----------------------------------------

TITLE: Using Unsigned Integer Types
DESCRIPTION: Shows examples of using the new unsigned integer types introduced in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
fun main() {
    // You can define unsigned types using literal suffixes
    val uint = 42u 
    val ulong = 42uL
    val ubyte: UByte = 255u

    // You can convert signed types to unsigned and vice versa via stdlib extensions:
    val int = uint.toInt()
    val byte = ubyte.toByte()
    val ulong2 = byte.toULong()

    // Unsigned types support similar operators:
    val x = 20u + 22u
    val y = 1u shl 8
    val z = "128".toUByte()
    val range = 1u..5u

    println("ubyte: $ubyte, byte: $byte, ulong2: $ulong2")
    println("x: $x, y: $y, z: $z, range: $range")
}

----------------------------------------

TITLE: Customizing package.json for Kotlin/JS in Gradle
DESCRIPTION: Shows how to add custom fields to the generated package.json file for a Kotlin/JS project using the Gradle DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    js(BOTH) {
        compilations["main"].packageJson {
            customField("hello", mapOf("one" to 1, "two" to 2))
        }
    }
}

----------------------------------------

TITLE: Creating a Points Chart with Kandy in Kotlin
DESCRIPTION: Generates a points (scatter) chart using the Kandy library to visualize temperature data for different cities over months.

LANGUAGE: kotlin
CODE:
df.plot {
    points {
        x(Month) { axis.name = "Month" }
        y(Temperature) { axis.name = "Temperature" }
        size = 5.5
        color(City) {
            scale = categorical("Berlin" to Color.LIGHT_GREEN, "Madrid" to Color.BLACK, "Caracas" to Color.YELLOW)
        }
    }
    layout.title = "Temperature per month"
}

----------------------------------------

TITLE: Creating SQL Schema for Messages Table
DESCRIPTION: Defines the SQL schema for creating the messages table in the database. It includes columns for id and text, matching the structure of the Message class.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS messages (
id       VARCHAR(60)  PRIMARY KEY,
text     VARCHAR      NOT NULL
);

----------------------------------------

TITLE: KDoc External Link Syntax
DESCRIPTION: Shows how to create external links in KDoc using Markdown syntax.

LANGUAGE: text
CODE:
For more information about KDoc syntax, see [KDoc](<example-URL>).

----------------------------------------

TITLE: Meta-annotation Example in Kotlin
DESCRIPTION: Demonstrates how all-open works with meta-annotations to make classes open.

LANGUAGE: kotlin
CODE:
@com.my.Annotation
annotation class MyFrameworkAnnotation

@MyFrameworkAnnotation
class MyClass // will be all-open

----------------------------------------

TITLE: Enabling enum entries property in Gradle
DESCRIPTION: Shows how to enable the new enum entries property by setting the language version to 1.9 in the Gradle build file.

LANGUAGE: kotlin
CODE:
tasks
    .withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask<*>>()
    .configureEach {
        compilerOptions
            .languageVersion
            .set(
                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9
            )
    }

LANGUAGE: groovy
CODE:
tasks
    .withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask.class)
    .configureEach {
        compilerOptions.languageVersion =
            org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9
    }

----------------------------------------

TITLE: Configuring MIME Type Mapping in Kotlin Notebook
DESCRIPTION: Demonstrates how to manually set up MIME type mapping for cell outputs using MimeTypedResult.

LANGUAGE: kotlin
CODE:
MimeTypedResult(
    mapOf(
        "text/plain" to "123",
        "text/markdown" to "# HEADER",
        //other mime:value pairs
    )
)

----------------------------------------

TITLE: Configuring Source Sets with Dependencies in Kotlin Multiplatform (Groovy)
DESCRIPTION: Shows how to configure source sets and add dependencies in a Kotlin Multiplatform project using the Groovy DSL. It also demonstrates accessing a source set without declaring the corresponding target.

LANGUAGE: groovy
CODE:
kotlin {
    androidTarget()
    iosArm64()
    iosSimulatorArm64()

    sourceSets {
        iosMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'
            }
        }
        // Warning: accessing source set without declaring the target
        linuxX64Main { }
    }
}

----------------------------------------

TITLE: Running Gradle Task for Kotlin/Wasm Browser Application
DESCRIPTION: This command runs the Gradle task to build and run a Kotlin/Wasm browser application.

LANGUAGE: bash
CODE:
./gradlew wasmJsBrowserRun

----------------------------------------

TITLE: Configuring XCFramework
DESCRIPTION: Shows setup of an XCFramework for multiple iOS targets with module configuration.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.XCFramework("sdk") {
        targets(iosX64, iosArm64, iosSimulatorArm64)
        setModules(
            project(":shared"),
            project(":lib")
        )
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.XCFramework("sdk") {
        targets(iosX64, iosArm64, iosSimulatorArm64)
        setModules(
            project(":shared"), 
            project(":lib")
        )
    }
}

----------------------------------------

TITLE: Exploring DataFrame Structure in Kotlin
DESCRIPTION: Displays the first four rows of the created DataFrame to explore its structure.

LANGUAGE: kotlin
CODE:
df.head(4)

----------------------------------------

TITLE: Parameterless Main Function
DESCRIPTION: Shows the new simplified main function without parameters introduced in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello, world!")
}

----------------------------------------

TITLE: Linking Kotlin/Native Library
DESCRIPTION: Command to compile a Kotlin file and link it with a previously created Kotlin/Native library.

LANGUAGE: bash
CODE:
$ kotlinc-native qux.kt -l bar

----------------------------------------

TITLE: Configuring Custom Gradle Configuration Attributes in Kotlin
DESCRIPTION: This snippet demonstrates how to configure attributes for a custom Gradle configuration to resolve Kotlin Gradle plugin variants correctly. It sets usage, category, and optionally specifies a Gradle API version.

LANGUAGE: kotlin
CODE:
configurations {
    customConfiguration {
        attributes {
            attribute(
                Usage.USAGE_ATTRIBUTE,
                project.objects.named(Usage.class, Usage.JAVA_RUNTIME)
            )
            attribute(
                Category.CATEGORY_ATTRIBUTE,
                project.objects.named(Category.class, Category.LIBRARY)
            )
            // If you want to depend on a specific KGP variant:
            attribute(
                GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,
                project.objects.named("7.0")
            )
        }
    }
}

----------------------------------------

TITLE: Configuring Spring Boot Application Properties
DESCRIPTION: Sets up the application properties for the Spring Boot application, including database connection details and schema initialization settings.

LANGUAGE: properties
CODE:
spring.application.name=demo
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:file:./data/testdb
spring.datasource.username=name
spring.datasource.password=password
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.mode=always

----------------------------------------

TITLE: Implementing Concurrent Countdown with Kotlin Coroutines
DESCRIPTION: Creates a coroutine scope that launches 10 concurrent tasks with decreasing delays, simulating a countdown sequence. Each coroutine prints its number along with timing and thread information. The main function is suspended until all coroutines complete.

LANGUAGE: kotlin
CODE:
import kotlinx.coroutines.*

suspend fun main() {                                // A function that can be suspended and resumed later
    val start = System.currentTimeMillis()
    coroutineScope {                                // Create a scope for starting coroutines
        for (i in 1..10) {
            launch {                                // Start 10 concurrent tasks
                delay(3000L - i * 300)              // Pause their execution
                log(start, "Countdown: $i")
            }
        }
    }
    // Execution continues when all coroutines in the scope have finished
    log(start, "Liftoff!")
}

fun log(start: Long, msg: String) {
    println("$msg " +
            "(on ${Thread.currentThread().name}) " +
            "after ${(System.currentTimeMillis() - start)/1000F}s")
}

----------------------------------------

TITLE: Logical Operators with Smart Casting in Kotlin
DESCRIPTION: Demonstrates how smart casting works with logical operators && and ||.

LANGUAGE: kotlin
CODE:
if (x !is String || x.length == 0) return

if (x is String && x.length > 0) {
    print(x.length) // x is automatically cast to String
}

----------------------------------------

TITLE: Data Cleaning and Refinement
DESCRIPTION: Demonstrates data cleaning by selecting specific columns and removing nulls from the DataFrame.

LANGUAGE: kotlin
CODE:
val videos = items.dropNulls { id.videoId }
    .select { id.videoId named "id" and snippet }
    .distinct()

----------------------------------------

TITLE: Setting Kotlin Daemon JVM Args for Specific Task in Groovy
DESCRIPTION: Example of specifying JVM arguments for the Kotlin daemon for a specific task in a Groovy DSL build script.

LANGUAGE: Groovy
CODE:
tasks.withType(CompileUsingKotlinDaemon).configureEach { task ->
    task.kotlinDaemonJvmArguments = ["-Xmx1g", "-Xms512m"]
}

----------------------------------------

TITLE: Using new character category functions
DESCRIPTION: Examples of using the new multiplatform character category functions.

LANGUAGE: kotlin
CODE:
fun main() {
    val chars = listOf('a', '1', '+')
    val (letterOrDigitList, notLetterOrDigitList) = chars.partition { it.isLetterOrDigit() }
    println(letterOrDigitList) // [a, 1]
    println(notLetterOrDigitList) // [+]
}

LANGUAGE: kotlin
CODE:
fun main() {
    val chars = listOf('ǅ', 'ǈ', 'ǋ', 'ǲ', '1', 'A', 'a', '+')
    val (titleCases, notTitleCases) = chars.partition { it.isTitleCase() }
    println(titleCases) // [ǅ, ǈ, ǋ, ǲ]
    println(notTitleCases) // [1, A, a, +]
}

----------------------------------------

TITLE: Configuring Debug Symbols in Kotlin Build Script
DESCRIPTION: Kotlin build script configuration to enable or disable debug symbol generation using the -Xadd-light-debug compiler flag for native targets.

LANGUAGE: kotlin
CODE:
kotlin {
    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
        binaries.all {
            freeCompilerArgs += "-Xadd-light-debug={enable|disable}"
        }
    }
}

----------------------------------------

TITLE: Running Gradle in Continuous Mode for Kotlin/JS
DESCRIPTION: Command to run Gradle in continuous mode, which watches for changes and automatically recompiles the Kotlin/JS project.

LANGUAGE: bash
CODE:
./gradlew run --continuous

----------------------------------------

TITLE: Single JVM Target Configuration
DESCRIPTION: Example showing the recommended approach of using a single JVM target in a Gradle project.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm()
    
    sourceSets {
        jvmMain {
            // Copy the configuration of jvmCommonMain here
        }
    }
}

----------------------------------------

TITLE: Preparing Data for 2D Density Plot in Kotlin
DESCRIPTION: This snippet generates random samples from three multivariate normal distributions to be used in a 2D density plot.

LANGUAGE: kotlin
CODE:
val cov0: Array<DoubleArray> = arrayOf(
    doubleArrayOf(1.0, -.8),
    doubleArrayOf(-.8, 1.0)
)

val cov1: Array<DoubleArray> = arrayOf(
    doubleArrayOf(1.0, .8),
    doubleArrayOf(.8, 1.0)
)

val cov2: Array<DoubleArray> = arrayOf(
    doubleArrayOf(10.0, .1),
    doubleArrayOf(.1, .1)
)

val n = 400

val means0: DoubleArray = doubleArrayOf(-2.0, 0.0)
val means1: DoubleArray = doubleArrayOf(2.0, 0.0)
val means2: DoubleArray = doubleArrayOf(0.0, 1.0)

val xy0 = MultivariateNormalDistribution(means0, cov0).sample(n)
val xy1 = MultivariateNormalDistribution(means1, cov1).sample(n)
val xy2 = MultivariateNormalDistribution(means2, cov2).sample(n)

----------------------------------------

TITLE: Capturing when Subject in a Variable
DESCRIPTION: Demonstrates the new feature of capturing the when subject into a variable in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
fun Request.getBody() =
        when (val response = executeRequest()) {
            is Success -> response.body
            is HttpError -> throw HttpException(response.status)
        }

----------------------------------------

TITLE: Configuring Source Sets for Generated Code in Groovy
DESCRIPTION: This snippet demonstrates how to configure Kotlin source sets to include KSP generated code directories in a Groovy-based build script.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'
        test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
    }
}

----------------------------------------

TITLE: Configuring Kotlin Daemon JVM Args in Kotlin DSL
DESCRIPTION: Example of specifying JVM arguments for the Kotlin daemon using the kotlin extension in a Kotlin DSL build script.

LANGUAGE: Kotlin
CODE:
kotlin {
    kotlinDaemonJvmArgs = listOf("-Xmx486m", "-Xms256m", "-XX:+UseParallelGC")
}

----------------------------------------

TITLE: Configuring Static Framework in Kotlin Build Script
DESCRIPTION: Kotlin build script configuration to set frameworks as static, which is necessary when rebuilding from bitcode to ensure proper symbolication.

LANGUAGE: kotlin
CODE:
kotlin {
    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
        binaries.withType<org.jetbrains.kotlin.gradle.plugin.mpp.Framework> {
            isStatic = true
        }
    }
}

----------------------------------------

TITLE: Project Structure for Modularization
DESCRIPTION: Illustrates the directory structure for a modularized Gradle project with root and subprojects.

LANGUAGE: text
CODE:
.
└── root-project/
    ├── settings.gradle.kts
    ├── app subproject/
    │   └── build.gradle.kts
    └── lib subproject/
        └── build.gradle.kts

----------------------------------------

TITLE: Data Manipulation and Filtering in Kotlin DataFrame
DESCRIPTION: This code snippet shows how to manipulate and filter data in a DataFrame, including filling missing values, converting data types, and applying filters based on conditions.

LANGUAGE: kotlin
CODE:
val df = dfTarantinoMovies
    .fillNA { year }.with { 0 }
    .convert { year }.toInt()
    .filter { year > 2000 }
df

----------------------------------------

TITLE: Creating Bar Chart with Kandy Library in Kotlin
DESCRIPTION: This snippet demonstrates how to use the Kandy library to create a bar chart visualization of the distribution of TV shows and movies in the DataFrame. It uses the .plot method to configure the chart's appearance and layout.

LANGUAGE: kotlin
CODE:
rawDf
    .valueCounts(sort = false) { type }
    .plot {
        bars {
            x(type)
            y("count")
            fillColor(type) {
                scale = categorical(range = listOf(Color.hex("#00BCD4"), Color.hex("#009688")))
            }
        }

        layout {
            title = "Count of TV Shows and Movies"
            size = 900 to 550
        }
    }

----------------------------------------

TITLE: Using @SubclassOptInRequired for Inheritance Opt-in in Kotlin
DESCRIPTION: This example shows how to use the @SubclassOptInRequired annotation to require opt-in for extending a class or implementing an interface. It defines an interface that requires opt-in to extend.

LANGUAGE: kotlin
CODE:
// Library code
@RequiresOptIn(
 level = RequiresOptIn.Level.WARNING,
 message = "Interfaces in this library are experimental"
)
annotation class UnstableApi()

@SubclassOptInRequired(UnstableApi::class)
// An interface requiring opt-in to extend
interface CoreLibraryApi

----------------------------------------

TITLE: Passing C array literals in Kotlin/Native
DESCRIPTION: Demonstrates how to pass C array literals to C functions in Kotlin/Native without explicit memory allocation.

LANGUAGE: kotlin
CODE:
foo(cValuesOf(1, 2, 3), 3)

----------------------------------------

TITLE: Creating and Visualizing DataFrames in Kotlin Notebook
DESCRIPTION: Shows how to create a DataFrame with sales data and visualize it using the Kotlin DataFrame library.

LANGUAGE: kotlin
CODE:
val months = listOf(
    "January", "February",
    "March", "April", "May",
    "June", "July", "August",
    "September", "October", "November",
    "December"
)

val salesLaptop = listOf(120, 130, 150, 180, 200, 220, 240, 230, 210, 190, 160, 140)
val salesSmartphone = listOf(90, 100, 110, 130, 150, 170, 190, 180, 160, 140, 120, 100)
val salesTablet = listOf(60, 70, 80, 90, 100, 110, 120, 110, 100, 90, 80, 70)
 
val dfSales = dataFrameOf(
    "Month" to months + months + months,
    "Sales" to salesLaptop + salesSmartphone + salesTablet,
    "Product" to List(12) { "Laptop" } + List(12) { "Smartphone" } + List(12) { "Tablet" },
)

----------------------------------------

TITLE: Configuring webpack for Kotlin/JS in Gradle
DESCRIPTION: Demonstrates how to enable CSS support for webpack tasks in a Kotlin/JS project using the new commonWebpackConfig block in the Gradle build script.

LANGUAGE: groovy
CODE:
browser {
    commonWebpackConfig {
        cssSupport.enabled = true
    }
    binaries.executable()
}

----------------------------------------

TITLE: Configuring KSP Consumer Module in Groovy
DESCRIPTION: This snippet demonstrates how to set up a Gradle module that uses a custom KSP processor using Groovy DSL. It includes plugin application and processor dependency.

LANGUAGE: groovy
CODE:
plugins {
    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version'
    implementation project(':test-processor')
    ksp project(':test-processor')
}

----------------------------------------

TITLE: Configuring No-arg Plugin in Maven
DESCRIPTION: Sets up the no-arg compiler plugin in a Maven project with optional JPA support and initializer configuration.

LANGUAGE: xml
CODE:
<plugin>
    <artifactId>kotlin-maven-plugin</artifactId>
    <groupId>org.jetbrains.kotlin</groupId>
    <version>${kotlin.version}</version>

    <configuration>
        <compilerPlugins>
            <!-- Or "jpa" for JPA support -->
            <plugin>no-arg</plugin>
        </compilerPlugins>

        <pluginOptions>
            <option>no-arg:annotation=com.my.Annotation</option>
            <!-- Call instance initializers in the synthetic constructor -->
            <!-- <option>no-arg:invokeInitializers=true</option> -->
        </pluginOptions>
    </configuration>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
    </dependencies>
</plugin>

----------------------------------------

TITLE: Using Kotlin/Native Library
DESCRIPTION: Kotlin code demonstrating the usage of the previously created 'kotlinizer' library.

LANGUAGE: kotlin
CODE:
import kotlinizer.*

fun main(args: Array<String>) {
    println("Hello, ${"world".kotlinized}!")
}

----------------------------------------

TITLE: Spring Boot Application Main Class
DESCRIPTION: Main application class with Spring Boot configuration and application entry point.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
class DemoApplication

fun main(args: Array<String>) {
    runApplication<DemoApplication>(*args)
}

----------------------------------------

TITLE: Configuring No-arg Annotations in Gradle
DESCRIPTION: Specifies which annotations should trigger no-arg constructor generation in Gradle build script.

LANGUAGE: groovy
CODE:
noArg {
    annotation("com.my.Annotation")
}

----------------------------------------

TITLE: KSP Version Error Message Example
DESCRIPTION: Example error message shown when KSP version is incompatible with the Kotlin compiler version being used.

LANGUAGE: text
CODE:
ksp-a.b.c is too old for kotlin-x.y.z. Please upgrade ksp or downgrade kotlin-gradle-plugin

----------------------------------------

TITLE: Creating Static Library in Kotlin/Native with Gradle
DESCRIPTION: Shows the Gradle configuration for creating a static library for iOS ARM64 platform. This produces a platform-specific static object and C language header.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64("mylib") {
        binaries.staticLib()
    }
}

----------------------------------------

TITLE: Complex JavaScript Module Export
DESCRIPTION: Example of a JavaScript module exporting nested package hierarchies.

LANGUAGE: javascript
CODE:
module.exports = {
  mylib: {
    pkg1: {
      foo: function () { /* some code here */ },
      bar: function () { /* some code here */ }
    },
    pkg2: {
      baz: function () { /* some code here */ }
    }
  }
}

----------------------------------------

TITLE: Object pinning using usePinned in Kotlin/Native
DESCRIPTION: Shows how to pin Kotlin objects in memory for safe use with C functions using usePinned in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*
import platform.posix.*

@OptIn(ExperimentalForeignApi::class)
fun readData(fd: Int) {
    val buffer = ByteArray(1024)
    buffer.usePinned { pinned ->
        while (true) {
            val length = recv(fd, pinned.addressOf(0), buffer.size.convert(), 0).toInt()
            if (length <= 0) {
                break
            }
            // Now `buffer` has raw data obtained from the `recv()` call.
        }
    }
}

----------------------------------------

TITLE: Defining and Using Variables in Kotlin Notebook
DESCRIPTION: These snippets illustrate how to define a variable and use it across different code cells in a Kotlin Notebook. It showcases the persistence of variables between cells.

LANGUAGE: kotlin
CODE:
val a = 100

LANGUAGE: kotlin
CODE:
println(a * a)

----------------------------------------

TITLE: Importing POSIX Platform Library in Kotlin/Native
DESCRIPTION: This snippet demonstrates how to import the POSIX platform library in a Kotlin/Native project. The POSIX library provides bindings to the platform's implementation following the POSIX standard.

LANGUAGE: kotlin
CODE:
import platform.posix.*

----------------------------------------

TITLE: Configuring Android Instrumented Test Dependency in Kotlin Multiplatform
DESCRIPTION: This snippet demonstrates how to manually declare a dependency relationship between androidInstrumentedTest and commonTest source sets in a Kotlin multiplatform project's build.gradle.kts file.

LANGUAGE: kotlin
CODE:
kotlin {
// ...
    sourceSets {
        val commonTest by getting
        val androidInstrumentedTest by getting {
            dependsOn(commonTest)
        }
    }
}

----------------------------------------

TITLE: Swift Framework Usage Example
DESCRIPTION: Demonstrates how to use the generated Kotlin framework from Swift code, showing idiomatic Swift syntax for framework interactions.

LANGUAGE: swift
CODE:
import Foundation
import Demo

let kotlinObject = Object.shared

let field = Object.shared.field

let clazz = Clazz()
clazz.member(p: 42)

LibKt.forIntegers(b: 1, s: 2, i: 3, l: 4)
LibKt.forFloats(f: 2.71, d: nil)

let ret = LibKt.acceptFun { "\($0) Kotlin is fun" }
if (ret != nil) {
    print(ret!)
}

----------------------------------------

TITLE: Creating MessageRepository Interface in Kotlin
DESCRIPTION: Defines a MessageRepository interface that extends CrudRepository for working with Message entities.

LANGUAGE: kotlin
CODE:
// MessageRepository.kt
package demo

import org.springframework.data.repository.CrudRepository

interface MessageRepository : CrudRepository<Message, String>

----------------------------------------

TITLE: Checking for Contravariant Type Argument in KSP
DESCRIPTION: Shows how to check if a type argument is contravariant (super bound) in KSP, equivalent to Java's getSuperBound() method.

LANGUAGE: kotlin
CODE:
if (ksTypeArgument.variance == Variance.CONTRAVARIANT) ksTypeArgument.type else null

----------------------------------------

TITLE: Configuring Debug Symbols in Groovy Build Script
DESCRIPTION: Groovy build script configuration to enable or disable debug symbol generation using the -Xadd-light-debug compiler flag for native targets.

LANGUAGE: groovy
CODE:
kotlin {
    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {
        binaries.all {
            freeCompilerArgs += "-Xadd-light-debug={enable|disable}"
        }
    }
}

----------------------------------------

TITLE: Kotlin Script Example
DESCRIPTION: Example Kotlin script that lists folders in a specified directory path

LANGUAGE: kotlin
CODE:
import java.io.File

// Get the passed in path, i.e. "-d some/path" or use the current path.
val path = if (args.contains("-d")) args[1 + args.indexOf("-d")]
           else "."

val folders = File(path).listFiles { file -> file.isDirectory() }
folders?.forEach { folder -> println(folder) }

----------------------------------------

TITLE: Setting Breakpoints in LLDB for Kotlin/Native
DESCRIPTION: Shows various methods to set breakpoints in LLDB for Kotlin/Native programs, including by name, location, address, and regex.

LANGUAGE: bash
CODE:
(lldb) b -n kfun:main(kotlin.Array<kotlin.String>)
Breakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4

(lldb) b -f hello.kt -l 1
Breakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4

(lldb) b -a 0x00000001000012e4
Breakpoint 2: address = 0x00000001000012e4

(lldb) rb main(
3: regex = 'main\(', locations = 1
  3.1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0

----------------------------------------

TITLE: Implementing MessageService with JDBC Template in Kotlin
DESCRIPTION: Creates a MessageService class to handle database operations using Spring's JdbcTemplate. It includes methods for finding all messages, saving a new message, and generating UUIDs for new message IDs.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.stereotype.Service
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.core.query
import java.util.UUID

@Service
class MessageService(private val db: JdbcTemplate) {
    fun findMessages(): List<Message> = db.query("select * from messages") { response, _ ->
        Message(response.getString("id"), response.getString("text"))
    }

    fun save(message: Message): Message {
        val id = message.id ?: UUID.randomUUID().toString() // Generate new id if it is null
        db.update(
            "insert into messages values ( ?, ? )",
            id, message.text
        )
        return message.copy(id = id) // Return a copy of the message with the new id
   }
}

----------------------------------------

TITLE: Creating Shared Library in Kotlin/Native with Gradle
DESCRIPTION: Demonstrates how to configure a Gradle build file to create a shared library for iOS ARM64 platform. The resulting build produces platform-specific shared objects and C language headers.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64("mylib") {
        binaries.sharedLib()
    }
}

----------------------------------------

TITLE: Using invokeWhenCreated API for Android Flavor Source Sets in Kotlin
DESCRIPTION: This code shows how to use the new invokeWhenCreated() API in a build.gradle.kts file to work with Android flavor source sets in the new Android source set layout.

LANGUAGE: kotlin
CODE:
kotlin {
// ...
    @OptIn(ExperimentalKotlinGradlePluginApi::class)
    sourceSets.invokeWhenCreated("androidFreeDebug") {
// ...
    }
}

----------------------------------------

TITLE: Applying Kotlin CocoaPods Gradle Plugin in Module
DESCRIPTION: Adding the Kotlin CocoaPods Gradle plugin alias to a specific module's build.gradle.kts file.

LANGUAGE: kotlin
CODE:
plugins {
    alias(libs.plugins.kotlinCocoapods)
}

----------------------------------------

TITLE: Copying Elements Between Arrays
DESCRIPTION: Demonstrates the new copyInto function for copying elements between existing arrays.

LANGUAGE: kotlin
CODE:
fun main() {
    val sourceArr = arrayOf("k", "o", "t", "l", "i", "n")
    val targetArr = sourceArr.copyInto(arrayOfNulls<String>(6), 3, startIndex = 3, endIndex = 6)
    println(targetArr.contentToString())
    
    sourceArr.copyInto(targetArr, startIndex = 0, endIndex = 3)
    println(targetArr.contentToString())
}

----------------------------------------

TITLE: Checking for Deprecated Annotation in KSP
DESCRIPTION: Demonstrates how to check if a declaration is deprecated in KSP, equivalent to Java's isDeprecated() method.

LANGUAGE: kotlin
CODE:
KsDeclaration.annotations.any { 
    it.annotationType.resolve()!!.declaration.qualifiedName!!.asString() == Deprecated::class.qualifiedName
}

----------------------------------------

TITLE: Adding CocoaPods Dependency in Kotlin Project
DESCRIPTION: This example demonstrates how to add a CocoaPods dependency to a Kotlin project using the pod() function. It includes setting the version, source, and other options for the Pod.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()
    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"

        ios.deploymentTarget = "16.0"
      
        pod("pod_dependency") {
            version = "1.0"
            extraOpts += listOf("-compiler-option")
            linkOnly = true
            source = path(project.file("../pod_dependency"))
        }
    }
}

----------------------------------------

TITLE: Custom C Declarations in Definition File
DESCRIPTION: Example showing how to add custom C declarations directly in the .def file after the separator line, useful for adding macros or additional functions.

LANGUAGE: c
CODE:
headers = errno.h
---

static inline int getErrno() {
    return errno;
}

----------------------------------------

TITLE: Adding Custom Podspec Repository Dependency in Kotlin
DESCRIPTION: This snippet demonstrates how to add a dependency on a Pod library from a custom Podspec repository in a Kotlin project's build.gradle.kts file. It shows how to specify the custom repository URL and the library name.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()

    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"

        ios.deploymentTarget = "16.0"

        specRepos {
            url("https://github.com/Kotlin/kotlin-cocoapods-spec.git")
        }
        pod("example")
    }
}

----------------------------------------

TITLE: Platform-Specific File Operation Example
DESCRIPTION: Example showing how to use platform-specific APIs (Java File API) in JVM-specific source set.

LANGUAGE: kotlin
CODE:
fun jvmGreeting() {
    java.io.File("greeting.txt").writeText("Hello, Multiplatform!")
}

----------------------------------------

TITLE: Setting Breakpoints in GDB for Kotlin/Native
DESCRIPTION: Demonstrates various methods to set breakpoints in GDB for Kotlin/Native programs, including by regex, name, location, and address.

LANGUAGE: bash
CODE:
(gdb) rbreak main(
Breakpoint 1 at 0x1000109b4
struct ktype:kotlin.Unit &kfun:main(kotlin.Array<kotlin.String>);

(gdb) b kfun:main(kotlin.Array<kotlin.String>)
No source file named kfun.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (kfun:main(kotlin.Array<kotlin.String>)) pending

(gdb) b hello.kt:1
Breakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.

(gdb) b *0x100001704
Note: breakpoint 2 also set at pc 0x100001704.
Breakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.

----------------------------------------

TITLE: Updating MessageController for Database Operations in Kotlin
DESCRIPTION: Updates the MessageController class to use the new MessageService for handling HTTP GET and POST requests. It includes methods for listing all messages and creating new messages.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import java.net.URI


@RestController
@RequestMapping("/")
class MessageController(private val service: MessageService) {
    @GetMapping
    fun listMessages() = service.findMessages()

    @PostMapping
    fun post(@RequestBody message: Message): ResponseEntity<Message> {
        val savedMessage = service.save(message)
        return ResponseEntity.created(URI("/${savedMessage.id}")).body(savedMessage)
    }
}

----------------------------------------

TITLE: Configuring Kotlin/Native Project with Gradle
DESCRIPTION: Gradle build script for setting up a Kotlin/Native project with C interop, including multiplatform configuration and cinterop task.

LANGUAGE: Kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

repositories {
    mavenCentral()
}

kotlin {
    linuxX64("native") { // on Linux
        // macosX64("native") { // on x86_64 macOS
        // macosArm64("native") { // on Apple Silicon macOS
        // mingwX64("native") { // on Windows
        val main by compilations.getting
        val interop by main.cinterops.creating

        binaries {
            executable()
        }
    }
}

tasks.wrapper {
    gradleVersion = "%gradleVersion%"
    distributionType = Wrapper.DistributionType.BIN
}

----------------------------------------

TITLE: Configure All-open Plugin in Gradle (Groovy)
DESCRIPTION: Shows how to add and configure the all-open plugin in a Gradle build script using Groovy syntax.

LANGUAGE: groovy
CODE:
plugins {
    id "org.jetbrains.kotlin.plugin.allopen" version "%kotlinVersion%"
}

allOpen {
    annotation("com.my.Annotation")
    // annotations("com.another.Annotation", "com.third.Annotation")
}

----------------------------------------

TITLE: Importing CocoaPods Dependency in Kotlin
DESCRIPTION: This snippet shows how to import and use a CocoaPods dependency in Kotlin code after adding it to the project.

LANGUAGE: kotlin
CODE:
import cocoapods.SDWebImage.*

----------------------------------------

TITLE: Configuring CocoaPods in Kotlin Gradle for iOS and tvOS
DESCRIPTION: This Kotlin code configures CocoaPods for a multi-platform project targeting both iOS and tvOS. It sets up deployment targets for both platforms, adds a pod dependency, and links to the Podfile for a project with multiple targets.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()
    tvosArm64()

    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"
        ios.deploymentTarget = "16.0"
        tvos.deploymentTarget = "16.0"

        pod("SDWebImage") {
            version = "5.20.0"
        }
        podfile = project.file("../severalTargetsXcodeProject/Podfile") // specify the path to the Podfile
    }
}

----------------------------------------

TITLE: Specifying Custom Module Name for iOS Framework - Kotlin DSL
DESCRIPTION: Demonstrates how to set a custom Objective-C prefix/name for a Kotlin framework using the Kotlin DSL in Gradle.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64("myapp") {
        binaries.framework {
            freeCompilerArgs += listOf("-module-name", "TheName")
        }
    }
}

----------------------------------------

TITLE: Extracting Suppressed Names from File Annotations
DESCRIPTION: Extension function that processes file-level @Suppress annotations to extract the suppressed warning names specified in the annotation arguments.

LANGUAGE: kotlin
CODE:
fun KSFile.suppressedNames(): Sequence<String> = annotations
    .filter {
        it.shortName.asString() == "Suppress" &&
        it.annotationType.resolve().declaration.qualifiedName?.asString() == "kotlin.Suppress"
    }.flatMap {
        it.arguments.flatMap {
            (it.value as Array<String>).toList()
        }
    }

----------------------------------------

TITLE: Configuring maven-publish plugin for Kotlin Multiplatform
DESCRIPTION: This snippet demonstrates how to set up the maven-publish plugin in a Kotlin Multiplatform project's build.gradle.kts file. It includes specifying the group and version for the library, as well as configuring the publishing repositories.

LANGUAGE: kotlin
CODE:
plugins {
    // ...
    id("maven-publish")
}

group = "com.example"
version = "1.0"

publishing {
    repositories {
        maven {
            //...
        }
    }
}

----------------------------------------

TITLE: Configuring maven-publish plugin for Kotlin Multiplatform
DESCRIPTION: This snippet demonstrates how to set up the maven-publish plugin in a Kotlin Multiplatform project's build.gradle.kts file. It includes specifying the group and version for the library, as well as configuring the publishing repositories.

LANGUAGE: kotlin
CODE:
plugins {
    // ...
    id("maven-publish")
}

group = "com.example"
version = "1.0"

publishing {
    repositories {
        maven {
            //...
        }
    }
}

----------------------------------------

TITLE: Unsigned Long Literals in Kotlin
DESCRIPTION: Shows how to explicitly specify unsigned long literals using UL suffix.

LANGUAGE: kotlin
CODE:
val a = 1UL // ULong, even though no expected type provided and the constant fits into UInt

----------------------------------------

TITLE: Variable Inspection in LLDB for Kotlin/Native
DESCRIPTION: Shows how to inspect variables in LLDB for Kotlin/Native programs, including custom pretty printers for non-primitive types.

LANGUAGE: bash
CODE:
λ cat main.kt | nl
     1  fun main(args: Array<String>) {
     2      var x = 1
     3      var y = 2
     4      var p = Point(x, y)
     5      println("p = $p")
     6  }
       
     7  data class Point(val x: Int, val y: Int)

λ lldb ./program.kexe -o 'b main.kt:5' -o
(lldb) target create "./program.kexe"
Current executable set to './program.kexe' (x86_64).
(lldb) b main.kt:5
Breakpoint 1: where = program.kexe`kfun:main(kotlin.Array<kotlin.String>) + 289 at main.kt:5, address = 0x000000000040af11
(lldb) r
Process 4985 stopped
* thread #1, name = 'program.kexe', stop reason = breakpoint 1.1
    frame #0: program.kexe`kfun:main(kotlin.Array<kotlin.String>) at main.kt:5
   2        var x = 1
   3        var y = 2
   4        var p = Point(x, y)
-> 5        println("p = $p")
   6    }
   7   
   8    data class Point(val x: Int, val y: Int)

Process 4985 launched: './program.kexe' (x86_64)
(lldb) fr var
(int) x = 1
(int) y = 2
(ObjHeader *) p = 0x00000000007643d8
(lldb) command script import dist/tools/konan_lldb.py
(lldb) fr var
(int) x = 1
(int) y = 2
(ObjHeader *) p = [x: ..., y: ...]
(lldb) p p
(ObjHeader *) $2 = [x: ..., y: ...]
(lldb) script lldb.frame.FindVariable("p").GetChildMemberWithName("x").Dereference().GetValue()
'1'
(lldb)

----------------------------------------

TITLE: Implementing Message Retrieval by ID in Kotlin
DESCRIPTION: Extends the MessageService and MessageController classes to support retrieving individual messages by their ID. It includes error handling for non-existent messages.

LANGUAGE: kotlin
CODE:
// In MessageService.kt
fun findMessageById(id: String): Message? = db.query("select * from messages where id = ?", id) { response, _ ->
    Message(response.getString("id"), response.getString("text"))
}.singleOrNull()

// In MessageController.kt
@GetMapping("/{id}")
fun getMessage(@PathVariable id: String): ResponseEntity<Message> =
    service.findMessageById(id).toResponseEntity()

private fun Message?.toResponseEntity(): ResponseEntity<Message> =
    this?.let { ResponseEntity.ok(it) } ?: ResponseEntity.notFound().build()

----------------------------------------

TITLE: Implementing Kotlin Main Function
DESCRIPTION: Main Kotlin function demonstrating usage of imported C functions with primitive types.

LANGUAGE: kotlin
CODE:
import interop.*
import kotlinx.cinterop.ExperimentalForeignApi

@OptIn(ExperimentalForeignApi::class)
fun main() {
    println("Hello Kotlin/Native!")
  
    ints(1, 2, 3, 4)
    uints(5u, 6u, 7u, 8u)
    doubles(9.0f, 10.0)
}

----------------------------------------

TITLE: Applying kapt Gradle Plugin in Groovy DSL
DESCRIPTION: Shows how to apply the kapt Gradle plugin using Groovy DSL in the build script.

LANGUAGE: groovy
CODE:
plugins {
    id "org.jetbrains.kotlin.kapt" version "%kotlinVersion%"
}

----------------------------------------

TITLE: Configuring XCFramework in Kotlin Gradle
DESCRIPTION: Gradle configuration for setting up XCFramework generation from Kotlin Multiplatform iOS targets. Includes framework name specification and binary options configuration.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework

kotlin {
    // Other Kotlin Multiplatform targets
    // ...
    // Name of the module to be imported in the consumer project
    val xcframeworkName = "Shared"
    val xcf = XCFramework(xcframeworkName)

    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64(),
    ).forEach { 
        it.binaries.framework {
            baseName = xcframeworkName
            
            // Specify CFBundleIdentifier to uniquely identify the framework
            binaryOption("bundleId", "org.example.${xcframeworkName}")
            xcf.add(this)
            isStatic = true
        }
    }
    //...
}

----------------------------------------

TITLE: Using Local Swift Package in iOS App
DESCRIPTION: This Swift code shows how to import and use a local Swift package (which includes Kotlin code) in the main iOS app's ContentView.

LANGUAGE: swift
CODE:
import SwiftUI
import SpmLocalPackage

struct ContentView: View {
    var body: some View {
        Vstack {
            Image(systemName: "globe")
                .imageScale(.large)
                .foregroundStyle(.tint)
            Text(greetingsFromSpmLocalPackage())
        }
        .padding()
    }
}

#Preview {
    ContentView()
}

----------------------------------------

TITLE: Renaming iOS Framework in Kotlin/Native
DESCRIPTION: Shows how to customize the iOS framework name using the baseName option in Gradle configuration. This setting also affects the module name.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64("myapp") {
       binaries {
          framework {
              baseName = "TheName"
          }
       }
    }
}

----------------------------------------

TITLE: Adding KSP Gradle Plugin in Groovy
DESCRIPTION: This snippet demonstrates how to add the KSP Gradle plugin to a Groovy-based build script. It specifies the plugin ID and version.

LANGUAGE: groovy
CODE:
plugins {
    id 'com.google.devtools.ksp' version '%kspSupportedKotlinVersion%-%kspVersion%'
}

----------------------------------------

TITLE: Exporting Dependencies to Binaries in Kotlin/Native
DESCRIPTION: Shows how to export dependencies to Objective-C frameworks and native libraries in Kotlin and Groovy build scripts.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        macosMain.dependencies {
            // Will be exported.
            api(project(":dependency"))
            api("org.example:exported-library:1.0")
            // Will not be exported.
            api("org.example:not-exported-library:1.0")
        }
    }
    macosX64("macos").binaries {
        framework {
            export(project(":dependency"))
            export("org.example:exported-library:1.0")
        }
        sharedLib {
            // It's possible to export different sets of dependencies to different binaries.
            export(project(':dependency'))
        }
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        macosMain.dependencies {
            // Will be exported.
            api project(':dependency')
            api 'org.example:exported-library:1.0'
            // Will not be exported.
            api 'org.example:not-exported-library:1.0'
        }
    }
    macosX64("macos").binaries {
        framework {
            export project(':dependency')
            export 'org.example:exported-library:1.0'
        }
        sharedLib {
            // It's possible to export different sets of dependencies to different binaries.
            export project(':dependency')
        }
    }
}

----------------------------------------

TITLE: Adding Kotlin CocoaPods Gradle Plugin to Version Catalog
DESCRIPTION: Adding the Kotlin CocoaPods Gradle plugin declaration to the version catalog file.

LANGUAGE: toml
CODE:
[plugins]
kotlinCocoapods = { id = "org.jetbrains.kotlin.native.cocoapods", version.ref = "kotlin" }

----------------------------------------

TITLE: Disabling sources publication for specific target in Kotlin Multiplatform
DESCRIPTION: This snippet shows how to disable the publication of sources only for a specific target (JVM in this case) in a Kotlin Multiplatform project using the withSourcesJar() API.

LANGUAGE: kotlin
CODE:
kotlin {
     // Disable sources publication only for JVM:
    jvm {
        withSourcesJar(publish = false)
    }
    linuxX64()
}

----------------------------------------

TITLE: Converting between Kotlin and C strings in Kotlin/Native
DESCRIPTION: Shows how to manually convert between Kotlin strings and C strings in Kotlin/Native.

LANGUAGE: kotlin
CODE:
val cString = kotlinString.cstr.getPointer(nativeHeap)

----------------------------------------

TITLE: Creating C Interop Library with cinterop
DESCRIPTION: Command to create a Kotlin/Native library wrapper for a C library using the cinterop tool.

LANGUAGE: bash
CODE:
$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2

----------------------------------------

TITLE: Using Elvis Operator in Kotlin
DESCRIPTION: This Kotlin snippet shows how to use the Elvis operator (?:) to provide a default value when a nullable expression is null.

LANGUAGE: kotlin
CODE:
// Kotlin
val order = findOrder() ?: Order(Customer("Antonio"))

----------------------------------------

TITLE: Defining C Functions with Function Pointers
DESCRIPTION: C code defining functions that use function pointers, including a typedef for a function pointer type, a function accepting a function pointer, and a function returning a function pointer.

LANGUAGE: C
CODE:
int myFun(int i) {
  return i+1;
}

typedef int  (*MyFun)(int);

void accept_fun(MyFun f) {
  f(42);
}

MyFun supply_fun() {
  return myFun;
}

----------------------------------------

TITLE: Adding kapt Dependencies in Kotlin DSL
DESCRIPTION: Demonstrates how to add dependencies for kapt using Kotlin DSL in the Gradle build script.

LANGUAGE: kotlin
CODE:
dependencies {
    kapt("groupId:artifactId:version")
}

----------------------------------------

TITLE: Context Receivers Example
DESCRIPTION: Demonstrates the new context receivers feature that allows having multiple receivers for functions, properties and classes. The example shows a logging context implementation.

LANGUAGE: kotlin
CODE:
interface LoggingContext {
    val log: Logger // This context provides a reference to a logger 
}

context(LoggingContext)
fun startBusinessOperation() {
    // You can access the log property since LoggingContext is an implicit receiver
    log.info("Operation has started")
}

fun test(loggingContext: LoggingContext) {
    with(loggingContext) {
        // You need to have LoggingContext in a scope as an implicit receiver
        // to call startBusinessOperation()
        startBusinessOperation()
    }
}

----------------------------------------

TITLE: Adding Test Dependencies in Groovy Build Script
DESCRIPTION: Shows how to add test dependencies to all source sets in a Kotlin Multiplatform project using Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonTest {
            dependencies {
                implementation kotlin("test") // Brings all the platform dependencies automatically
            }
        }
    }
}

----------------------------------------

TITLE: Creating CValue Instances
DESCRIPTION: Demonstrates how to create CValue instances for struct and union types using the cValue function with initialization blocks.

LANGUAGE: kotlin
CODE:
import interop.*
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.cValue

@OptIn(ExperimentalForeignApi::class)
fun callValue() {
    val cStruct = cValue<MyStruct> {
        a = 42
        b = 3.14
    }
    struct_by_value(cStruct)

    val cUnion = cValue<MyUnion> {
        b.a = 5
        b.b = 2.7182
    }

    union_by_value(cUnion)
}

----------------------------------------

TITLE: Adding Processor Dependency in Groovy
DESCRIPTION: This code snippet demonstrates how to add a processor dependency (Dagger in this case) to a Groovy-based build script. It includes both implementation and KSP configurations.

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'com.google.dagger:dagger-compiler:2.51.1'
    ksp 'com.google.dagger:dagger-compiler:2.51.1'
}

----------------------------------------

TITLE: Registering Custom Gradle Configuration in Groovy
DESCRIPTION: This snippet shows how to register a custom Gradle configuration using Groovy DSL. It's equivalent to the Kotlin version and serves as a starting point for further configuration.

LANGUAGE: groovy
CODE:
configurations.register("customConfiguration") {
    // ...
}

----------------------------------------

TITLE: Executing SQL Query for Specific Data Retrieval in Kotlin Notebook
DESCRIPTION: This snippet demonstrates how to execute a complex SQL query to retrieve specific data (Quentin Tarantino's movies) from a database and create a DataFrame from the result set.

LANGUAGE: kotlin
CODE:
val props = Properties()
props.setProperty("user", USER_NAME)
props.setProperty("password", PASSWORD)

val TARANTINO_FILMS_SQL_QUERY = """
    SELECT name, year, rank, GROUP_CONCAT(genre) as "genres"
    FROM movies JOIN movies_directors ON movie_id = movies.id
    JOIN directors ON directors.id=director_id LEFT JOIN movies_genres ON movies.id = movies_genres.movie_id
    WHERE directors.first_name = "Quentin" AND directors.last_name = "Tarantino"
    GROUP BY name, year, rank
    ORDER BY year
    """

var dfTarantinoMovies: DataFrame<*>

DriverManager.getConnection(URL, props).use { connection ->
   connection.createStatement().use { st ->
      st.executeQuery(TARANTINO_FILMS_SQL_QUERY).use { rs ->
         val dfTarantinoFilmsSchema = DataFrame.getSchemaForResultSet(rs, connection)
         dfTarantinoFilmsSchema.print()

         dfTarantinoMovies = DataFrame.readResultSet(rs, connection)
         dfTarantinoMovies
      }
   }
}

----------------------------------------

TITLE: Configuring Gradle Build for Kotlin/Native (Groovy DSL)
DESCRIPTION: Gradle build configuration using Groovy DSL for setting up a Kotlin/Native project with multiplatform support.

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'
}

repositories {
    mavenCentral()
}

kotlin {
    macosArm64('native') {
        binaries {
            executable()
        }
    }
}

wrapper {
    gradleVersion = '%gradleVersion%'
    distributionType = 'BIN'
}

----------------------------------------

TITLE: Safe Type Casting in Kotlin
DESCRIPTION: This Kotlin snippet shows how to use the safe cast operator (as?) to perform type casting without throwing exceptions.

LANGUAGE: kotlin
CODE:
// Kotlin
fun main() {
    println(getStringLength(1)) // Prints `-1`
}

fun getStringLength(y: Any): Int {
    val x: String? = y as? String // null
    return x?.length ?: -1 // Returns -1 because `x` is null
}

----------------------------------------

TITLE: Defining KSFunctionDeclaration Interface in Kotlin
DESCRIPTION: Interface definition showing the relationship between function declarations and type references in KSP. Demonstrates how return types are represented as KSTypeReference objects.

LANGUAGE: kotlin
CODE:
interface KSFunctionDeclaration : ... {
  val returnType: KSTypeReference?
  // ...
}

interface KSTypeReference : KSAnnotated, KSModifierListOwner {
  val type: KSReferenceElement
}

----------------------------------------

TITLE: Checking for Covariant Type Argument in KSP
DESCRIPTION: Demonstrates how to check if a type argument is covariant (extends bound) in KSP, equivalent to Java's getExtendsBound() method.

LANGUAGE: kotlin
CODE:
if (ksTypeArgument.variance == Variance.COVARIANT) ksTypeArgument.type else null

----------------------------------------

TITLE: Enabling K2 Compiler in Gradle
DESCRIPTION: Configuration to enable the new K2 compiler in Gradle builds by setting the language version to 2.0

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets.all {
        languageSettings {
            languageVersion = "2.0"
        }
    }
}

----------------------------------------

TITLE: Adding Kotlinx Library Dependency in Kotlin Build Script
DESCRIPTION: Demonstrates how to add a kotlinx library dependency to the common source set in a Kotlin Multiplatform project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonMain.dependencies {
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%")
        }
    }
}

----------------------------------------

TITLE: Using C Function Pointers in Kotlin
DESCRIPTION: Kotlin code demonstrating how to pass a Kotlin function as a C function pointer and how to use a C function pointer in Kotlin.

LANGUAGE: Kotlin
CODE:
import interop.*
import kotlinx.cinterop.*

fun main() {
  println("Hello Kotlin/Native!")
 
  val cFunctionPointer = staticCFunction<Int, Int> { it + 1 }
  accept_fun(cFunctionPointer)

  val funFromC = supply_fun() ?: error("No function is returned")
  funFromC(42)
}

----------------------------------------

TITLE: Configuring IntelliJ IDEA for KSP in Gradle Plugin (Kotlin)
DESCRIPTION: This snippet shows how to configure IntelliJ IDEA to recognize KSP generated sources in a Gradle plugin project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    idea
}

idea {
    module {
        sourceDirs = sourceDirs + file("build/generated/ksp/main/kotlin")
        testSourceDirs = testSourceDirs + file("build/generated/ksp/test/kotlin")
        generatedSourceDirs = generatedSourceDirs + file("build/generated/ksp/main/kotlin") + file("build/generated/ksp/test/kotlin")
    }
}

----------------------------------------

TITLE: Using new TimeMarks functionality in Kotlin 1.8.0
DESCRIPTION: Demonstrates how to use the new comparable and subtractable TimeMarks feature to calculate time differences more accurately.

LANGUAGE: kotlin
CODE:
import kotlin.time.*
fun main() {
    val timeSource = TimeSource.Monotonic
    val mark1 = timeSource.markNow()
    Thread.sleep(500) // Sleep 0.5 seconds
    val mark2 = timeSource.markNow()

    // Since 1.8.0
    repeat(4) { n ->
        val mark3 = timeSource.markNow()
        val elapsed1 = mark3 - mark1
        val elapsed2 = mark3 - mark2

        println("Measurement 2.${n + 1}: elapsed1=$elapsed1, " +
                "elapsed2=$elapsed2, diff=${elapsed1 - elapsed2}")
    }
    // It's also possible to compare time marks with each other
    println(mark2 > mark1)
}

----------------------------------------

TITLE: Database Schema Creation SQL
DESCRIPTION: SQL script for creating the messages table with UUID primary key and text content.

LANGUAGE: sql
CODE:
CREATE TABLE IF NOT EXISTS messages (
  id                     VARCHAR(60)  DEFAULT RANDOM_UUID() PRIMARY KEY,
  text                   VARCHAR      NOT NULL
);

----------------------------------------

TITLE: Including Kotlin OSGi Bundle in Gradle (Kotlin DSL)
DESCRIPTION: This Kotlin snippet shows how to add the Kotlin OSGi bundle dependency to a Gradle project using the Kotlin DSL. It uses the 'kotlin' function to specify the 'osgi-bundle' module.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation(kotlin("osgi-bundle"))
}

----------------------------------------

TITLE: Creating External Declaration for NPM Module
DESCRIPTION: Shows how to create an external declaration file for the NPM module, providing type information for Kotlin/JS interoperability.

LANGUAGE: kotlin
CODE:
@JsModule("is-sorted")
@JsNonModule
external fun <T> sorted(a: Array<T>): Boolean

----------------------------------------

TITLE: Passing Kotlin String to C Function
DESCRIPTION: Kotlin function demonstrating how to pass a Kotlin String to a C function using the cstr extension property.

LANGUAGE: Kotlin
CODE:
fun passStringToC() {
    val str = "this is a Kotlin String"
    pass_string(str.cstr)
}

----------------------------------------

TITLE: Implementing C String Functions
DESCRIPTION: C function implementations for string operations, including a function that returns a static C string and a function that copies characters into a provided buffer.

LANGUAGE: C
CODE:
void pass_string(char* str) {
}

char* return_string() {
  return "C string";
}

int copy_string(char* str, int size) {
    *str++ = 'C';
    *str++ = ' ';
    *str++ = 'K';
    *str++ = '/';
    *str++ = 'N';
    *str++ = 0;
    return 0;
}

----------------------------------------

TITLE: Aggregate Operations in Java
DESCRIPTION: This Java code demonstrates how to use the Stream API to perform aggregate operations like finding the maximum value or null.

LANGUAGE: java
CODE:
// Java
var numbers = new ArrayList<Integer>();
var max = numbers.stream().max(Comparator.naturalOrder()).orElse(null);
System.out.println("Max: " + max);

----------------------------------------

TITLE: Filtering Interfaces from Supertypes in KSP
DESCRIPTION: Demonstrates how to filter interfaces from a class declaration's supertypes using KSP, equivalent to Java's getInterfaces() method.

LANGUAGE: kotlin
CODE:
ksClassDeclaration.superTypes
    .map { it.resolve() }
    .filter { (it?.declaration as? KSClassDeclaration)?.classKind == ClassKind.INTERFACE }

----------------------------------------

TITLE: Enabling K2 Compiler in Gradle (Kotlin DSL)
DESCRIPTION: Shows how to enable the new K2 compiler in a Kotlin project using Gradle Kotlin DSL

LANGUAGE: kotlin
CODE:
tasks.withType<KotlinCompile> {
    kotlinOptions.useK2 = true
}

----------------------------------------

TITLE: Including Kotlin OSGi Bundle in Gradle (Groovy DSL)
DESCRIPTION: This Groovy snippet demonstrates how to add the Kotlin OSGi bundle dependency to a Gradle project using the Groovy DSL. It specifies the full artifact coordinates for the 'kotlin-osgi-bundle'.

LANGUAGE: groovy
CODE:
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-osgi-bundle:%kotlinVersion%"
}

----------------------------------------

TITLE: Configuring Kotlin/Native Project with Gradle
DESCRIPTION: Gradle build script for setting up a Kotlin/Native project with C interop, including configuration for cinterop and executable compilation.

LANGUAGE: Kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

repositories {
    mavenCentral()
}

kotlin {
  linuxX64("native") { // on Linux
    val main by compilations.getting
    val interop by main.cinterops.creating
    
    binaries {
      executable()
    }
  }
}

tasks.wrapper {
  gradleVersion = "%gradleVersion%"
  distributionType = Wrapper.DistributionType.BIN
}

----------------------------------------

TITLE: Configuring Gradle Build for Kotlin/Native (Kotlin DSL)
DESCRIPTION: Gradle build configuration using Kotlin DSL for setting up a Kotlin/Native project with multiplatform support.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

repositories {
    mavenCentral()
}

kotlin {
    macosArm64("native") {
        binaries {
            executable()
        }
    }
}

tasks.withType<Wrapper> {
    gradleVersion = "%gradleVersion%"
    distributionType = Wrapper.DistributionType.BIN
}

----------------------------------------

TITLE: Configuring Kotlin Native Targets in Gradle
DESCRIPTION: Gradle configuration for setting up native platform targets and executable binary generation in Kotlin/Native project.

LANGUAGE: kotlin
CODE:
kotlin {
    val hostOs = System.getProperty("os.name")
    val isArm64 = System.getProperty("os.arch") == "aarch64"
    val isMingwX64 = hostOs.startsWith("Windows")
    val nativeTarget = when {
        hostOs == "Mac OS X" && isArm64 -> macosArm64("native")
        hostOs == "Mac OS X" && !isArm64 -> macosX64("native")
        hostOs == "Linux" && isArm64 -> linuxArm64("native")
        hostOs == "Linux" && !isArm64 -> linuxX64("native")
        isMingwX64 -> mingwX64("native")
        else -> throw GradleException("Host OS is not supported in Kotlin/Native.")
    }

    nativeTarget.apply {
        binaries {
            executable {
                entryPoint = "main"
            }
        }
    }
}

----------------------------------------

TITLE: Installing CocoaPods with Default Ruby
DESCRIPTION: Command for installing CocoaPods using the default Ruby installation on macOS.

LANGUAGE: bash
CODE:
sudo gem install cocoapods

----------------------------------------

TITLE: Calling methods with clashing signatures from Kotlin
DESCRIPTION: Example of calling Swift/Objective-C methods with clashing signatures from Kotlin using named arguments

LANGUAGE: swift
CODE:
[player moveTo:LEFT byMeters:17]
[player moveTo:UP byInches:42]

LANGUAGE: kotlin
CODE:
player.moveTo(LEFT, byMeters = 17)
player.moveTo(UP, byInches = 42)

----------------------------------------

TITLE: Defining C Header File Structure
DESCRIPTION: Header file containing C function declarations for primitive data type examples.

LANGUAGE: c
CODE:
#ifndef LIB2_H_INCLUDED
#define LIB2_H_INCLUDED

void ints(char c, short d, int e, long f);
void uints(unsigned char c, unsigned short d, unsigned int e, unsigned long f);
void doubles(float a, double b);

#endif

----------------------------------------

TITLE: Demonstrating NullPointerException in Java
DESCRIPTION: This Java code snippet shows how a method can throw a NullPointerException when called with a null argument, as Java doesn't have built-in null safety checks.

LANGUAGE: java
CODE:
// Java
int stringLength(String a) {
    return a.length();
}

void main() {
    stringLength(null); // Throws a `NullPointerException`
}

----------------------------------------

TITLE: Direct Compose Compiler Feature Flag Configuration
DESCRIPTION: Shows the command-line syntax for passing feature flags directly to the Compose compiler.

LANGUAGE: text
CODE:
-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=<flag name>

----------------------------------------

TITLE: Using Open-Ended Range Operator
DESCRIPTION: Demonstrates usage of the new ..< operator for creating open-ended ranges

LANGUAGE: kotlin
CODE:
when (value) {
    in 0.0..<0.25 -> // First quarter 
    in 0.25..<0.5 -> // Second quarter
    in 0.5..<0.75 -> // Third quarter
    in 0.75..1.0 ->  // Last quarter
}

----------------------------------------

TITLE: Compiling Kotlin to JavaScript with Metadata Generation using kotlin2js Ant Task
DESCRIPTION: Illustrates how to compile Kotlin to JavaScript while generating metadata for library distribution. It uses the metaInfo option to create an additional JS file with binary metadata.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <!-- out.meta.js will be created, which contains binary metadata -->
        <kotlin2js src="root1" output="out.js" metaInfo="true"/>
    </target>
</project>

----------------------------------------

TITLE: Configuring Gradle for Kotlin/Native Dynamic Library
DESCRIPTION: Gradle build script configuration for generating a Kotlin/Native dynamic library.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

repositories {
    mavenCentral()
}

kotlin {
    macosArm64("native") {    // macOS on Apple Silicon
    // macosX64("native") {   // macOS on x86_64 platforms
    // linuxArm64("native") { // Linux on ARM64 platforms
    // linuxX64("native") {   // Linux on x86_64 platforms
    // mingwX64("native") {   // Windows
        binaries {
            sharedLib {
                baseName = "native"       // macOS and Linux 
                // baseName = "libnative" // Windows
            }
        }
    }
}

tasks.wrapper {
    gradleVersion = "%gradleVersion%"
    distributionType = Wrapper.DistributionType.ALL
}

----------------------------------------

TITLE: Using memScoped for automatic memory management in Kotlin/Native
DESCRIPTION: Shows how to use memScoped for automatic freeing of allocated memory in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*
import platform.posix.*

@OptIn(ExperimentalForeignApi::class)
val fileSize = memScoped {
    val statBuf = alloc<stat>()
    val error = stat("/", statBuf.ptr)
    statBuf.st_size
}

----------------------------------------

TITLE: Using the new strict Boolean conversion functions
DESCRIPTION: Example of using the new strict Boolean conversion functions for strings.

LANGUAGE: kotlin
CODE:
fun main() {
    println("true".toBooleanStrict())
    println("1".toBooleanStrictOrNull())
    // println("1".toBooleanStrict()) // Exception
}

----------------------------------------

TITLE: Transforming Collection Elements in Kotlin
DESCRIPTION: Demonstrates transforming collection elements from one type to another using map().

LANGUAGE: kotlin
CODE:
@GetMapping("/transformMessagesToListOfStrings")
fun transformMessagesToListOfStrings(): List<String> {
    val messages = service.findMessages()
    return messages.map { "${it.id} ${it.text}" }
}

----------------------------------------

TITLE: Enabling Feature Flags in Compose Compiler
DESCRIPTION: Shows how to enable a feature flag that is disabled by default in the Compose compiler configuration.

LANGUAGE: kotlin
CODE:
featureFlags = setOf(ComposeFeatureFlag.OptimizeNonSkippingGroups)

----------------------------------------

TITLE: Custom Step Progression
DESCRIPTION: Demonstrates creating a progression with a custom step value.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 1..8 step 2) print(i)
    // 1357
}

----------------------------------------

TITLE: Specifying Custom Module Name for iOS Framework - Groovy DSL
DESCRIPTION: Shows how to set a custom Objective-C prefix/name for a Kotlin framework using the Groovy DSL in Gradle.

LANGUAGE: groovy
CODE:
kotlin {
    iosArm64("myapp") {
        binaries.framework {
            freeCompilerArgs += ["-module-name", "TheName"]
        }
    }
}

----------------------------------------

TITLE: Accessing C array elements in Kotlin/Native
DESCRIPTION: Shows how to access elements of a C array using index operator in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*

@OptIn(ExperimentalForeignApi::class)
fun shift(ptr: CPointer<ByteVar>, length: Int) {
    for (index in 0 .. length - 2) {
        ptr[index] = ptr[index + 1]
    }
}

----------------------------------------

TITLE: Java Synthetic Property References in Kotlin
DESCRIPTION: Demonstrates how to create references to Java synthetic properties in Kotlin, including how to enable this feature.

LANGUAGE: kotlin
CODE:
val persons = listOf(Person("Jack", 11), Person("Sofie", 12), Person("Peter", 11))
    persons
         // Call a reference to Java synthetic property:
        .sortedBy(Person::age)
         // Call Java getter via the Kotlin property syntax:
        .forEach { person -> println(person.name) }

----------------------------------------

TITLE: Configuring No-arg Plugin in Gradle (Groovy DSL)
DESCRIPTION: Adds the no-arg compiler plugin to a Kotlin project using Gradle's Groovy DSL.

LANGUAGE: groovy
CODE:
plugins {
    id "org.jetbrains.kotlin.plugin.noarg" version "%kotlinVersion%"
}

----------------------------------------

TITLE: Annotations on class type parameters example
DESCRIPTION: Demonstrates support for annotations on class type parameters in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
@Target(AnnotationTarget.TYPE_PARAMETER)
annotation class BoxContent

class Box<@BoxContent T> {}

----------------------------------------

TITLE: Adding Compose Compiler Plugin to Gradle Version Catalog
DESCRIPTION: This snippet shows how to add the Compose compiler Gradle plugin to the Gradle version catalog. It includes version definitions for Kotlin and plugin declarations for the Kotlin Android and Compose compiler plugins.

LANGUAGE: toml
CODE:
[versions]
# ...
kotlin = "%kotlinVersion%"

[plugins]
# ...
org-jetbrains-kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

----------------------------------------

TITLE: Creating Gradle Build Configuration
DESCRIPTION: Gradle build script for setting up a Kotlin Multiplatform project with C interop.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

repositories {
    mavenCentral()
}

kotlin {
    macosArm64("native") {
        val main by compilations.getting
        val interop by main.cinterops.creating
    
        binaries {
            executable()
        }
    }
}

tasks.wrapper {
    gradleVersion = "%gradleVersion%"
    distributionType = Wrapper.DistributionType.BIN
}

----------------------------------------

TITLE: Kotlin Main Function Template
DESCRIPTION: Initial Kotlin code template showing function calls that need to be implemented with proper struct and union parameters.

LANGUAGE: kotlin
CODE:
import interop.*
import kotlinx.cinterop.ExperimentalForeignApi

@OptIn(ExperimentalForeignApi::class)
fun main() {
    println("Hello Kotlin/Native!")

    struct_by_value(/* fix me*/)
    struct_by_pointer(/* fix me*/)
    union_by_value(/* fix me*/)
    union_by_pointer(/* fix me*/)
}

----------------------------------------

TITLE: Defining Non-Nullable Generic Types in Kotlin
DESCRIPTION: This Kotlin snippet shows how to override a Java method with @NotNull annotations using definitely non-nullable types in Kotlin.

LANGUAGE: kotlin
CODE:
interface ArcadeGame<T1> : Game<T1> {
  override fun save(x: T1): T1
  // T1 is definitely non-nullable
  override fun load(x: T1 & Any): T1 & Any
}

----------------------------------------

TITLE: Exhaustive when statements for sealed and Boolean subjects
DESCRIPTION: Example showing warnings for non-exhaustive when statements on sealed classes and Boolean values, which will become errors in future Kotlin versions.

LANGUAGE: kotlin
CODE:
sealed class Mode {
    object ON : Mode()
    object OFF : Mode()
}

fun main() {
    val x: Mode = Mode.ON
    when (x) { 
        Mode.ON -> println("ON")
    }
// WARNING: Non exhaustive 'when' statements on sealed classes/interfaces 
// will be prohibited in 1.7, add an 'OFF' or 'else' branch instead

    val y: Boolean = true
    when (y) {  
        true -> println("true")
    }
// WARNING: Non exhaustive 'when' statements on Booleans will be prohibited 
// in 1.7, add a 'false' or 'else' branch instead
}

----------------------------------------

TITLE: Running Required Reason Finder Script
DESCRIPTION: Shell command to execute the Required Reason Finder tool for detecting required reason API usage in Kotlin frameworks.

LANGUAGE: shell
CODE:
/usr/bin/python3 -c "$(curl -fsSL https://github.com/JetBrains/kotlin/raw/rrf_v0.0.1/libraries/tools/required-reason-finder/required_reason_finder.py)"

----------------------------------------

TITLE: Objective-C Framework Usage Example
DESCRIPTION: Shows how to use the generated Kotlin framework from Objective-C code, including object instantiation and function calls.

LANGUAGE: objective-c
CODE:
#import <Foundation/Foundation.h>
#import <Demo/Demo.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        [DemoObject.shared field];
        
        DemoClazz* clazz = [[ DemoClazz alloc] init];
        [clazz memberP:42];
        
        [DemoLibKt forIntegersB:1 s:1 i:3 l:[DemoULong numberWithUnsignedLongLong:4]];
        [DemoLibKt forIntegersB:1 s:1 i:3 l:nil];
        
        [DemoLibKt forFloatsF:2.71 d:[DemoDouble numberWithDouble:2.71]];
        [DemoLibKt forFloatsF:2.71 d:nil];
        
        NSString* ret = [DemoLibKt acceptFunF:^NSString * _Nullable(NSString * it) {
            return [it stringByAppendingString:@" Kotlin is fun"];
        }];
        
        NSLog(@"%@", ret);
        return 0;
    }
}

----------------------------------------

TITLE: Resolving Interface Implementation Conflicts
DESCRIPTION: Demonstrates how to resolve conflicts when implementing multiple interfaces that have overlapping method signatures, using super qualified expressions.

LANGUAGE: kotlin
CODE:
interface A {
    fun foo() { print("A") }
    fun bar()
}

interface B {
    fun foo() { print("B") }
    fun bar() { print("bar") }
}

class C : A {
    override fun bar() { print("bar") }
}

class D : A, B {
    override fun foo() {
        super<A>.foo()
        super<B>.foo()
    }

    override fun bar() {
        super<B>.bar()
    }
}

----------------------------------------

TITLE: Adding Common Dependency in Groovy Build Script
DESCRIPTION: Shows how to add a dependency shared for all source sets in a Kotlin Multiplatform project using Groovy DSL in the build script.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'com.example:my-library:1.0'
            }
        }
    }
}

----------------------------------------

TITLE: Specify JDK home with UsesKotlinJavaToolchain interface
DESCRIPTION: Example demonstrating how to specify the JDK home for Kotlin tasks using the UsesKotlinJavaToolchain interface.

LANGUAGE: kotlin
CODE:
project.tasks
    .withType<UsesKotlinJavaToolchain>()
    .configureEach {
        it.kotlinJavaToolchain.jdk.use(
            "/path/to/local/jdk",
            JavaVersion.<LOCAL_JDK_VERSION>
        )
    }

----------------------------------------

TITLE: Applying Compose Compiler Plugin to Module
DESCRIPTION: This snippet shows how to apply the Compose compiler plugin to a module that uses Jetpack Compose. It uses the alias function to reference the plugin from the version catalog.

LANGUAGE: kotlin
CODE:
plugins {
    // ...
    alias(libs.plugins.compose.compiler)
}

----------------------------------------

TITLE: Accessing Required Reason API Example in Kotlin
DESCRIPTION: Example showing how Kotlin code might access a required reason API (fstat) from platform.posix library.

LANGUAGE: kotlin
CODE:
import platform.posix.fstat

fun useRequiredReasonAPI() {
    fstat(...)
}

----------------------------------------

TITLE: Working with CValuesRef and Memory Scopes
DESCRIPTION: Shows how to work with struct and union types using CValuesRef within a memScoped block for proper memory management.

LANGUAGE: kotlin
CODE:
import interop.*
import kotlinx.cinterop.*

@OptIn(ExperimentalForeignApi::class)
fun callRef() {
    memScoped {
        val cStruct = alloc<MyStruct>()
        cStruct.a = 42
        cStruct.b = 3.14

        struct_by_pointer(cStruct.ptr)

        val cUnion = alloc<MyUnion>()
        cUnion.b.a = 5
        cUnion.b.b = 2.7182

        union_by_pointer(cUnion.ptr)
    }
}

----------------------------------------

TITLE: Specify Kotlin daemon JVM arguments in Gradle
DESCRIPTION: Examples showing different ways to specify JVM arguments for the Kotlin daemon in Gradle builds.

LANGUAGE: kotlin
CODE:
kotlin {
    kotlinDaemonJvmArgs = listOf("-Xmx486m", "-Xms256m", "-XX:+UseParallelGC")
}

LANGUAGE: kotlin
CODE:
tasks
    .matching { it.name == "compileKotlin" && it is CompileUsingKotlinDaemon }
    .configureEach {
        (this as CompileUsingKotlinDaemon).kotlinDaemonJvmArguments.set(listOf("-Xmx486m", "-Xms256m", "-XX:+UseParallelGC"))
    }

----------------------------------------

TITLE: Basic Unsigned Integer Usage in Kotlin
DESCRIPTION: Demonstrates the basic usage of unsigned integer literals with different type annotations and implicit type inference.

LANGUAGE: kotlin
CODE:
val b: UByte = 1u  // UByte, expected type provided
val s: UShort = 1u // UShort, expected type provided
val l: ULong = 1u  // ULong, expected type provided

val a1 = 42u // UInt: no expected type provided, constant fits in UInt
val a2 = 0xFFFF_FFFF_FFFFu // ULong: no expected type provided, constant doesn't fit in UInt

----------------------------------------

TITLE: Demonstrating Mutability in Java
DESCRIPTION: Shows how Java handles mutable and immutable collections, with runtime checks for modification attempts.

LANGUAGE: java
CODE:
List<String> numbers = Arrays.asList("one", "two", "three", "four");
numbers.add("five"); // Fails in runtime with UnsupportedOperationException

----------------------------------------

TITLE: Adding Common Dependency in Kotlin Build Script
DESCRIPTION: Demonstrates how to add a dependency shared for all source sets in a Kotlin Multiplatform project using Kotlin DSL in the build script.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonMain.dependencies {
            implementation("com.example:my-library:1.0") // library shared for all source sets
        }
    }
}

----------------------------------------

TITLE: Applying the Kotlin JVM plugin in Kotlin DSL
DESCRIPTION: Shows how to apply the Kotlin JVM plugin in a Gradle build script using Kotlin DSL. The plugin is applied using the plugins block with the kotlin function.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Calling Kotlin Function from JavaScript (UMD/CommonJS)
DESCRIPTION: Shows how to call a Kotlin function from JavaScript when using UMD or CommonJS module systems. The function is accessed through the require statement.

LANGUAGE: javascript
CODE:
alert(require('myModule').foo());

----------------------------------------

TITLE: Enabling Kotlin Build Reports
DESCRIPTION: Example of enabling Kotlin build reports and configuring various output options in the gradle.properties file.

LANGUAGE: Properties
CODE:
kotlin.build.report.output=file,single_file,http,build_scan,json
kotlin.build.report.single_file=some_filename
kotlin.build.report.json.directory=my/directory/path
kotlin.build.report.file.output_dir=kotlin-reports
kotlin.build.report.label=some_label

----------------------------------------

TITLE: Enabling K2 Compiler in Gradle (Groovy DSL)
DESCRIPTION: Shows how to enable the new K2 compiler in a Kotlin project using Gradle Groovy DSL

LANGUAGE: groovy
CODE:
compileKotlin {
    kotlinOptions.useK2 = true
}

----------------------------------------

TITLE: Using Contracts to Improve Smartcast Analysis
DESCRIPTION: Shows how contracts can be used to declare function behavior for improved compiler analysis.

LANGUAGE: kotlin
CODE:
fun require(condition: Boolean) {
    // This is a syntax form which tells the compiler:
    // "if this function returns successfully, then the passed 'condition' is true"
    contract { returns() implies condition }
    if (!condition) throw IllegalArgumentException(...)
}

fun foo(s: String?) {
    require(s is String)
    // s is smartcast to 'String' here, because otherwise
    // 'require' would have thrown an exception
}

----------------------------------------

TITLE: Null Checking Function Results in Java
DESCRIPTION: This Java code demonstrates how to check for null when obtaining a result from a function call before accessing its properties.

LANGUAGE: java
CODE:
// Java
Order order = findOrder();

if (order != null) {
    processCustomer(order.getCustomer());
}

----------------------------------------

TITLE: Declaring Named Binaries in Kotlin/Native
DESCRIPTION: Shows how to declare binaries with custom names using both Kotlin and Groovy DSL in Gradle.

LANGUAGE: kotlin
CODE:
binaries {
    executable("foo", listOf(DEBUG)) {
        // Binary configuration.
    }

    // It's possible to drop the list of build types
    // (in this case, all the available build types will be used).
    executable("bar") {
        // Binary configuration.
    }
}

LANGUAGE: groovy
CODE:
binaries {
    executable('foo', [DEBUG]) {
        // Binary configuration.
    }

    // It's possible to drop the list of build types
    // (in this case, all the available build types will be used).
    executable('bar') {
        // Binary configuration.
    }
}

----------------------------------------

TITLE: Compiling Kotlin/Native with Debug Info
DESCRIPTION: Demonstrates how to compile a Kotlin/Native program with debug information using the -g flag, and then debug it using LLDB.

LANGUAGE: bash
CODE:
0:b-debugger-fixes:minamoto@unit-703(0)# cat - > hello.kt
fun main(args: Array<String>) {
  println("Hello world")
  println("I need your clothes, your boots and your motocycle")
}
0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator
KtFile: hello.kt
0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe
(lldb) target create "terminator.kexe"
Current executable set to 'terminator.kexe' (x86_64).
(lldb) b kfun:main(kotlin.Array<kotlin.String>)
Breakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) + 4 at hello.kt:2, address = 0x00000001000012e4
(lldb) r
Process 28473 launched: '/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe' (x86_64)
Process 28473 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:2
   1    fun main(args: Array<String>) {
-> 2      println("Hello world")
   3      println("I need your clothes, your boots and your motocycle")
   4    }
(lldb) n
Hello world
Process 28473 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = step over
    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array<kotlin.String>) at hello.kt:3
   1    fun main(args: Array<String>) {
   2      println("Hello world")
-> 3      println("I need your clothes, your boots and your motocycle")
   4    }
(lldb)

----------------------------------------

TITLE: Adding Kotlin Gradle Plugin Dependency in Kotlin
DESCRIPTION: This code snippet demonstrates how to add a dependency on the Kotlin Gradle plugin to a custom configuration using Kotlin DSL. It uses a placeholder for the Kotlin version.

LANGUAGE: kotlin
CODE:
dependencies {
    customConfiguration("org.jetbrains.kotlin:kotlin-gradle-plugin:%kotlinVersion%")
}

----------------------------------------

TITLE: Splitting Regex into a sequence example
DESCRIPTION: Shows how to split a Regex into a sequence in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
fun main() {
    val colorsText = "green, red, brown&blue, orange, pink&green"
    val regex = "[,\\s]+".toRegex()
    val mixedColor = regex.splitToSequence(colorsText)
    // or
    // val mixedColor = colorsText.splitToSequence(regex)
        .onEach { println(it) }
        .firstOrNull { it.contains('&') }
    println(mixedColor) // "brown&blue"
}

----------------------------------------

TITLE: Configuring dependencies in Groovy DSL
DESCRIPTION: Shows how to add dependencies to a Kotlin project in a Gradle build script using Groovy DSL. This example demonstrates adding a dependency to the commonMain source set.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'com.example:my-library:1.0'
            }
        }
    }
}

----------------------------------------

TITLE: Setting Module Kind in Kotlin Build Script
DESCRIPTION: Gradle configuration examples for setting the JavaScript module kind in both Kotlin and Groovy DSL.

LANGUAGE: kotlin
CODE:
tasks.withType<org.jetbrains.kotlin.gradle.targets.js.ir.KotlinJsIrLink> {
    compilerOptions.moduleKind.set(org.jetbrains.kotlin.gradle.dsl.JsModuleKind.MODULE_COMMONJS)
}

LANGUAGE: groovy
CODE:
compileKotlinJs.compilerOptions.moduleKind = org.jetbrains.kotlin.gradle.dsl.JsModuleKind.MODULE_COMMONJS

----------------------------------------

TITLE: Static Resolution of Extension Functions in Kotlin
DESCRIPTION: Illustrates how extension functions are resolved statically based on the declared type of the receiver, not the runtime type.

LANGUAGE: kotlin
CODE:
fun main() {
    open class Shape
    class Rectangle: Shape()
    
    fun Shape.getName() = "Shape"
    fun Rectangle.getName() = "Rectangle"
    
    fun printClassName(s: Shape) {
        println(s.getName())
    }
    
    printClassName(Rectangle())
}

----------------------------------------

TITLE: Enabling K2 Compiler Example
DESCRIPTION: Shows how to enable the new K2 compiler preview using compiler options

LANGUAGE: bash
CODE:
-Xuse-k2

----------------------------------------

TITLE: Defining an Inline Class
DESCRIPTION: Demonstrates how to define and use an inline class in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
inline class Name(val s: String)

fun main() {
    // In the next line no constructor call happens, and
    // at the runtime 'name' contains just string "Kotlin"
    val name = Name("Kotlin")
    println(name.s) 
}

----------------------------------------

TITLE: Basic Progression Example
DESCRIPTION: Shows a simple progression implementation with default step value of 1.

LANGUAGE: kotlin
CODE:
fun main() {
    for (i in 1..10) print(i)
    // 12345678910
}

----------------------------------------

TITLE: Swift Package Manifest Configuration
DESCRIPTION: Package.swift manifest file configuration for exposing the XCFramework as a Swift package. Specifies package name, platforms, products and binary target with URL and checksum.

LANGUAGE: swift
CODE:
// swift-tools-version:5.3
import PackageDescription
 
let package = Package(
   name: "Shared",
   platforms: [
     .iOS(.v14),
   ],
   products: [
      .library(name: "Shared", targets: ["Shared"])
   ],
   targets: [
      .binaryTarget(
         name: "Shared",
         url: "<link to the uploaded XCFramework ZIP file>",
         checksum:"<checksum calculated for the ZIP file>")
   ]
)

----------------------------------------

TITLE: Disabling Garbage Collection
DESCRIPTION: Gradle property configuration to disable garbage collection for testing purposes

LANGUAGE: none
CODE:
kotlin.native.binary.gc=noop

----------------------------------------

TITLE: Smart Casts in Lambdas for Local Variables (Kotlin)
DESCRIPTION: Shows how smart casts now work in lambdas for local variables that are only modified before the lambda, allowing for more concise and type-safe code in closures.

LANGUAGE: kotlin
CODE:
fun main(args: Array<String>) {
    val flag = args.size == 0
    var x: String? = null
    if (flag) x = "Yahoo!"

    run {
        if (x != null) {
            println(x.length) // x is smart cast to String
        }
    }
}

----------------------------------------

TITLE: Grouping Android library variants by flavor in Kotlin Multiplatform
DESCRIPTION: This snippet illustrates how to enable grouping of published Android library variants by product flavor in a Kotlin Multiplatform project. This configuration places outputs of different build types in a single module.

LANGUAGE: kotlin
CODE:
kotlin {
    androidTarget {
        publishLibraryVariantsGroupedByFlavor = true
    }
}

----------------------------------------

TITLE: Adding Kotlin Reflect Dependency in Maven
DESCRIPTION: Shows how to add the kotlin-reflect dependency in a Maven pom.xml file

LANGUAGE: xml
CODE:
<dependencies>
  <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
  </dependency>
</dependencies>

----------------------------------------

TITLE: Enabling Safepoint Signposts for GC Monitoring
DESCRIPTION: Gradle property configuration to enable GC pause tracking through Xcode Instruments

LANGUAGE: none
CODE:
kotlin.native.binary.enableSafepointSignposts=true

----------------------------------------

TITLE: Declaring repositories in Groovy DSL
DESCRIPTION: Shows how to declare repositories for dependency resolution in a Gradle build script using Groovy DSL. This example demonstrates adding the Maven Central repository.

LANGUAGE: groovy
CODE:
repositories {
    mavenCentral()
}

----------------------------------------

TITLE: JavaScript Module Export Example
DESCRIPTION: Example of a JavaScript module exporting a function using CommonJS syntax.

LANGUAGE: javascript
CODE:
module.exports.sayHello = function (name) { alert("Hello, " + name); }

----------------------------------------

TITLE: Custom Exception Class Definition
DESCRIPTION: Shows how to create custom exception classes in Kotlin

LANGUAGE: kotlin
CODE:
class MyException: Exception("My message")

class NumberTooLargeException: ArithmeticException("My message")

----------------------------------------

TITLE: Configuring compiler options for JVM and Android projects
DESCRIPTION: Shows how to use the new KotlinBaseExtension to configure compiler options for both JVM and Android projects.

LANGUAGE: kotlin
CODE:
configure<KotlinBaseExtension> {
    if (this is HasConfigurableKotlinCompilerOptions<*>) {
        with(compilerOptions) {
            if (this is KotlinJvmCompilerOptions) {
                jvmTarget.set(JvmTarget.JVM_17)
            }
        }
    }
}

----------------------------------------

TITLE: Type Inference Constraints Processing Change
DESCRIPTION: Rollback of type inference constraints processing changes that were introduced in Kotlin 1.7.10. This change reverts to the 1.7.0 behavior to address problems introduced by the attempted fix.



----------------------------------------

TITLE: Demonstrating Qualified 'this' References in Kotlin
DESCRIPTION: Shows how to access 'this' from different scopes using label qualifiers within nested classes and function literals. Demonstrates various ways to reference current receivers in different contexts.

LANGUAGE: kotlin
CODE:
class A { // implicit label @A
    inner class B { // implicit label @B
        fun Int.foo() { // implicit label @foo
            val a = this@A // A's this
            val b = this@B // B's this

            val c = this // foo()'s receiver, an Int
            val c1 = this@foo // foo()'s receiver, an Int

            val funLit = lambda@ fun String.() {
                val d = this // funLit's receiver, a String
            }

            val funLit2 = { s: String ->
                // foo()'s receiver, since enclosing lambda expression
                // doesn't have any receiver
                val d1 = this
            }
        }
    }
}

----------------------------------------

TITLE: Custom Time Source Implementation in Kotlin
DESCRIPTION: Shows how to create a custom time source for specific platform requirements, using Android's SystemClock as an example.

LANGUAGE: kotlin
CODE:
object RealtimeMonotonicTimeSource : AbstractLongTimeSource(DurationUnit.NANOSECONDS) {
    override fun read(): Long = SystemClock.elapsedRealtimeNanos()
}

----------------------------------------

TITLE: Asynchronous Kotlin-Swift Integration
DESCRIPTION: Shows how completion handlers work with Kotlin suspending functions when called from Swift, demonstrating cross-thread execution patterns.

LANGUAGE: kotlin
CODE:
suspend fun asyncFunctionExample() = coroutineScope {
    launch {
        delay(1000L)
        println("World!")
    }
    println("Hello")
}

LANGUAGE: swift
CODE:
func test() {
    print("Running test on \(Thread.current)")
    PlatformKt.asyncFunctionExample(completionHandler: { _ in
        print("Running completion handler on \(Thread.current)")
    }
})

----------------------------------------

TITLE: Using scope-local pointers in Kotlin/Native
DESCRIPTION: Demonstrates the use of scope-local pointers with a lifetime bound to a MemScope in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*

@OptIn(kotlinx.cinterop.ExperimentalForeignApi::class)
memScoped {
    items = arrayOfNulls<CPointer<ITEM>?>(6)
    arrayOf("one", "two").forEachIndexed { index, value -> items[index] = value.cstr.ptr }
    menu = new_menu("Menu".cstr.ptr, items.toCValues().ptr)
    // ...
}

----------------------------------------

TITLE: Configuring Extension Level Compiler Options in Kotlin
DESCRIPTION: Demonstrates how to configure common compiler options for all targets and shared source sets at the extension level using the compilerOptions block.

LANGUAGE: kotlin
CODE:
kotlin {
    compilerOptions {
        optIn.add("kotlin.RequiresOptIn")
    }
}

----------------------------------------

TITLE: Disabling Daemon Fallback Strategy for Specific Task in Groovy
DESCRIPTION: Example of disabling the Kotlin daemon fallback strategy for a specific task in a Groovy DSL build script.

LANGUAGE: Groovy
CODE:
tasks.named("compileKotlin").configure {
    useDaemonFallbackStrategy = false
}

----------------------------------------

TITLE: HTML Builder Core Implementation in Kotlin
DESCRIPTION: Core function that implements the HTML builder pattern using function literals with receiver

LANGUAGE: kotlin
CODE:
fun html(init: HTML.() -> Unit): HTML {
    val html = HTML()
    html.init()
    return html
}

----------------------------------------

TITLE: Importing Dependencies for 2D Density Plot in Kotlin Notebook
DESCRIPTION: This code imports the necessary dependencies for creating a 2D density plot, including the Apache Commons Math library.

LANGUAGE: kotlin
CODE:
%use lets-plot

@file:DependsOn("org.apache.commons:commons-math3:3.6.1")
import org.apache.commons.math3.distribution.MultivariateNormalDistribution

----------------------------------------

TITLE: Importing Kandy and Kotlin DataFrame Libraries in Kotlin Notebook
DESCRIPTION: Imports the Kandy and Kotlin DataFrame libraries in a Kotlin Notebook environment.

LANGUAGE: kotlin
CODE:
%use kandy
%use dataframe

----------------------------------------

TITLE: Installing ki shell via Homebrew
DESCRIPTION: Command to install the Kotlin Interactive Shell (ki) using the Homebrew package manager on macOS

LANGUAGE: shell
CODE:
brew install ki

----------------------------------------

TITLE: Traditional Implementation of IntPredicate
DESCRIPTION: Demonstrates the verbose way of implementing a functional interface without using SAM conversion.

LANGUAGE: kotlin
CODE:
val isEven = object : IntPredicate {
   override fun accept(i: Int): Boolean {
       return i % 2 == 0
   }
}

----------------------------------------

TITLE: Creating Duration Objects in Kotlin
DESCRIPTION: Demonstrates how to create Duration objects using different time unit extension properties for Int, Long and Double types.

LANGUAGE: kotlin
CODE:
fun main() {
    val fiveHundredMilliseconds: Duration = 500.milliseconds
    val zeroSeconds: Duration = 0.seconds
    val tenMinutes: Duration = 10.minutes
    val negativeNanosecond: Duration = (-1).nanoseconds
    val infiniteDays: Duration = Double.POSITIVE_INFINITY.days
    val negativeInfiniteDays: Duration = Double.NEGATIVE_INFINITY.days

    println(fiveHundredMilliseconds) // 500ms
    println(zeroSeconds)             // 0s
    println(tenMinutes)              // 10m
    println(negativeNanosecond)      // -1ns
    println(infiniteDays)            // Infinity
    println(negativeInfiniteDays)    // -Infinity
}

----------------------------------------

TITLE: Hiding Kotlin declarations from Objective-C and Swift
DESCRIPTION: Example of using @HiddenFromObjC annotation to hide a Kotlin declaration from Objective-C and Swift

LANGUAGE: kotlin
CODE:
@HiddenFromObjC
fun hiddenFunction() {
  // Implementation
}

----------------------------------------

TITLE: Configuring Lombok plugin in Gradle (Kotlin DSL)
DESCRIPTION: Apply the kotlin-plugin-lombok Gradle plugin in the build.gradle.kts file. This snippet also includes the io.freefair.lombok plugin.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.lombok") version "%kotlinVersion%"
    id("io.freefair.lombok") version "8.10"
}

----------------------------------------

TITLE: Using type conversion for platform-dependent types in Kotlin/Native
DESCRIPTION: Demonstrates the use of the convert method for handling platform-dependent types in Kotlin/Native.

LANGUAGE: kotlin
CODE:
import kotlinx.cinterop.*
import platform.posix.*

@OptIn(ExperimentalForeignApi::class)
fun zeroMemory(buffer: COpaquePointer, size: Int) {
    memset(buffer, 0, size.convert<size_t>())
}

----------------------------------------

TITLE: SAM Conversion Implementation
DESCRIPTION: Shows how to implement the same functionality using a concise lambda expression with SAM conversion.

LANGUAGE: kotlin
CODE:
val isEven = IntPredicate { it % 2 == 0 }

----------------------------------------

TITLE: Running Tests via Gradle Command Line
DESCRIPTION: Command to execute Kotlin/JS browser tests using Gradle wrapper from command line.

LANGUAGE: bash
CODE:
./gradlew jsBrowserTest

----------------------------------------

TITLE: Adding Kotlin Gradle Plugin Dependency in Groovy
DESCRIPTION: This snippet shows how to add a dependency on the Kotlin Gradle plugin to a custom configuration using Groovy DSL. It uses a placeholder for the Kotlin version.

LANGUAGE: groovy
CODE:
dependencies {
    customConfiguration 'org.jetbrains.kotlin:kotlin-gradle-plugin:%kotlinVersion%'
}

----------------------------------------

TITLE: Script Definition Class
DESCRIPTION: Abstract class marked with @KotlinScript annotation defining the script type and its compilation configuration.

LANGUAGE: kotlin
CODE:
@KotlinScript(
    fileExtension = "scriptwithdeps.kts",
    compilationConfiguration = ScriptWithMavenDepsConfiguration::class
)
abstract class ScriptWithMavenDeps

object ScriptWithMavenDepsConfiguration: ScriptCompilationConfiguration()

----------------------------------------

TITLE: Importing CSV Data with Kotlin DataFrame
DESCRIPTION: This code snippet shows how to use the Kotlin DataFrame library to read data from a CSV file and display the raw DataFrame. It creates a DataFrame object from the 'netflix_titles.csv' file.

LANGUAGE: kotlin
CODE:
val rawDf = DataFrame.read("netflix_titles.csv")

rawDf

----------------------------------------

TITLE: Creating a DataFrame with Temperature Data in Kotlin
DESCRIPTION: Creates a DataFrame containing monthly average temperature data for Berlin, Madrid, and Caracas using the Kotlin DataFrame library.

LANGUAGE: kotlin
CODE:
val months = listOf(
    "January", "February",
    "March", "April", "May",
    "June", "July", "August",
    "September", "October", "November",
    "December"
)
val tempBerlin =
    listOf(-0.5, 0.0, 4.8, 9.0, 14.3, 17.5, 19.2, 18.9, 14.5, 9.7, 4.7, 1.0)
val tempMadrid =
    listOf(6.3, 7.9, 11.2, 12.9, 16.7, 21.1, 24.7, 24.2, 20.3, 15.4, 9.9, 6.6)
val tempCaracas =
    listOf(27.5, 28.9, 29.6, 30.9, 31.7, 35.1, 33.8, 32.2, 31.3, 29.4, 28.9, 27.6)

val df = dataFrameOf(
    "Month" to months + months + months,
    "Temperature" to tempBerlin + tempMadrid + tempCaracas,
    "City" to List(12) { "Berlin" } + List(12) { "Madrid" } + List(12) { "Caracas" }
)

----------------------------------------

TITLE: Specifying Lombok config file path for command-line Kotlin compiler
DESCRIPTION: Provide the path to the lombok.config file when using the Lombok compiler plugin with the command-line Kotlin compiler.

LANGUAGE: bash
CODE:
-P plugin:org.jetbrains.kotlin.lombok:config=<PATH_TO_CONFIG_FILE>

----------------------------------------

TITLE: Creating Empty Collections in Kotlin
DESCRIPTION: Shows how to create an empty collection using the emptyList function. When creating empty collections, the type of elements must be specified.

LANGUAGE: kotlin
CODE:
val empty = emptyList<String>()

----------------------------------------

TITLE: Duration Arithmetic Operations in Kotlin
DESCRIPTION: Shows basic arithmetic operations with Duration objects including addition, subtraction, multiplication, and division.

LANGUAGE: kotlin
CODE:
fun main() {
    val fiveSeconds: Duration = 5.seconds
    val thirtySeconds: Duration = 30.seconds

    println(fiveSeconds + thirtySeconds)
    println(thirtySeconds - fiveSeconds)
    println(fiveSeconds * 2)
    println(thirtySeconds / 2)
    println(thirtySeconds / fiveSeconds)
    println(-thirtySeconds)
    println((-thirtySeconds).absoluteValue)
}

----------------------------------------

TITLE: Configuring Karma Test Runner with Multiple Browsers
DESCRIPTION: Demonstrates how to configure the Karma test runner with Chrome Headless and Firefox browsers for Kotlin/JS tests.

LANGUAGE: kotlin
CODE:
kotlin {
    js {
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    useFirefox()
                }
            }
        }
    }
}

----------------------------------------

TITLE: Kotlin Standard Library Dependency
DESCRIPTION: Configuration for including the Kotlin standard library as a project dependency.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-stdlib</artifactId>
        <version>${kotlin.version}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Adding CocoaPods Dependency with Custom Cinterop Options in Kotlin
DESCRIPTION: This snippet demonstrates how to add a CocoaPods dependency with custom cinterop options in a Kotlin project's build.gradle.kts file. It shows how to specify extra compiler options and a custom package name for importing.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()

    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"

        ios.deploymentTarget = "16.0"

        pod("FirebaseAuth") {
            packageName = "FirebaseAuthWrapper"
            version = "11.7.0"
            extraOpts += listOf("-compiler-option", "-fmodules")
        }
    }
}

----------------------------------------

TITLE: Compiling Kotlin-only Source to JVM using kotlinc Ant Task
DESCRIPTION: Demonstrates how to use the kotlinc Ant task to compile Kotlin source code targeting the JVM. It defines the Kotlin Ant task and compiles a single Kotlin file into a JAR.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <kotlinc src="hello.kt" output="hello.jar"/>
    </target>
</project>

----------------------------------------

TITLE: Configuring SAM-with-receiver Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Shows how to add and configure the SAM-with-receiver plugin in a Gradle build script using Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.sam.with.receiver") version "%kotlinVersion%"
}

----------------------------------------

TITLE: API Key Configuration for YouTube Data API
DESCRIPTION: Sets up the API key for authentication with YouTube Data API.

LANGUAGE: kotlin
CODE:
val apiKey = "YOUR-API_KEY"

----------------------------------------

TITLE: Including Kotlin OSGi Bundle in Maven
DESCRIPTION: This XML snippet shows how to add the Kotlin OSGi bundle dependency to a Maven project. It specifies the group ID, artifact ID, and version of the bundle.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-osgi-bundle</artifactId>
        <version>${kotlin.version}</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: Type Resolution in KSP
DESCRIPTION: Example showing how to resolve a KSTypeReference to its corresponding KSType and access the original declaration. Demonstrates the type resolution process in KSP.

LANGUAGE: kotlin
CODE:
val ksType: KSType = ksTypeReference.resolve()
val ksDeclaration: KSDeclaration = ksType.declaration

----------------------------------------

TITLE: Creating Concrete Collection Types in Kotlin
DESCRIPTION: Shows how to create specific collection types like ArrayList or LinkedList using their constructors. Similar constructors are available for Set and Map implementations.

LANGUAGE: kotlin
CODE:
val linkedList = LinkedList<String>(listOf("one", "two", "three"))
val presizedSet = HashSet<Int>(32)

----------------------------------------

TITLE: Converting DataFrame to Map in Kotlin
DESCRIPTION: This snippet demonstrates how to convert a DataFrame to a Map, which is required for creating plots with Lets-Plot for Kotlin.

LANGUAGE: kotlin
CODE:
val data = df.toMap()

----------------------------------------

TITLE: HTML Template for Kotlin/JS Browser Application
DESCRIPTION: Basic HTML template required for running Kotlin/JS applications in the browser. It includes the necessary script tag to load the compiled JavaScript code.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JS Client</title>
</head>
<body>
<script src="js-tutorial.js"></script>
</body>
</html>

----------------------------------------

TITLE: External JavaScript Class Declaration
DESCRIPTION: Shows how to declare external JavaScript classes and their members in Kotlin using the external modifier.

LANGUAGE: kotlin
CODE:
external class Node {
    val firstChild: Node
    fun append(child: Node): Node
    fun removeChild(child: Node): Node
    // etc
}

----------------------------------------

TITLE: Configuring NPM Dependency in Gradle
DESCRIPTION: Demonstrates how to add an NPM package dependency in the Gradle build file using the npm function.

LANGUAGE: kotlin
CODE:
dependencies {
    // ...
    implementation(npm("is-sorted", "1.0.5"))
}

----------------------------------------

TITLE: Creating Anonymous Inner Classes in Kotlin
DESCRIPTION: Demonstrates the creation of anonymous inner class instances using object expressions in Kotlin. This example shows how to implement a MouseAdapter.

LANGUAGE: kotlin
CODE:
window.addMouseListener(object : MouseAdapter() {

    override fun mouseClicked(e: MouseEvent) { ... }

    override fun mouseEntered(e: MouseEvent) { ... }
})

----------------------------------------

TITLE: Defining libcurl C Interop Configuration
DESCRIPTION: Definition file for libcurl C library integration with Kotlin/Native, specifying headers and platform-specific compiler options.

LANGUAGE: c
CODE:
headers = curl/curl.h
headerFilter = curl/*

compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu
linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl
linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl

----------------------------------------

TITLE: Compiling Kotlin to JavaScript using kotlin2js Ant Task
DESCRIPTION: Demonstrates how to compile Kotlin source code to JavaScript using the kotlin2js Ant task. It specifies a single source folder and an output JavaScript file.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <kotlin2js src="root1" output="out.js"/>
    </target>
</project>

----------------------------------------

TITLE: Configuring HTTP-based Build Reports
DESCRIPTION: Example of configuring HTTP-based Kotlin build reports in the gradle.properties file.

LANGUAGE: Properties
CODE:
kotlin.build.report.http.url=http://127.0.0.1:8080
kotlin.build.report.http.user=someUser
kotlin.build.report.http.password=somePassword
kotlin.build.report.http.include_git_branch.name=true
kotlin.build.report.include_compiler_arguments=true

----------------------------------------

TITLE: Configuring Kotlin EAP in Maven
DESCRIPTION: Provides a sample Maven project configuration for using an EAP version of Kotlin, including property setting, repository configuration, and plugin setup.

LANGUAGE: xml
CODE:
<project ...>
    <properties>
        <kotlin.version>KOTLIN-EAP-VERSION</kotlin.version>
    </properties>

    <repositories>
        <repository>
           <id>mavenCentral</id>
           <url>https://repo1.maven.org/maven2/</url>
        </repository>
    </repositories>

    <pluginRepositories>
       <pluginRepository>
          <id>mavenCentral</id>
          <url>https://repo1.maven.org/maven2/</url>
       </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                ...
            </plugin>
        </plugins>
    </build>
</project>

----------------------------------------

TITLE: Using Array Literals in Annotations (Kotlin)
DESCRIPTION: Shows how to use the new array literal syntax for annotation arguments in Kotlin 1.2, which provides a more concise way to specify array values in annotations.

LANGUAGE: kotlin
CODE:
@CacheConfig(cacheNames = ["books", "default"])
public class BookRepositoryImpl {
    // ...
}

----------------------------------------

TITLE: Using NPM Module in Kotlin Code
DESCRIPTION: Example of using the imported NPM module function within Kotlin code with proper type checking.

LANGUAGE: kotlin
CODE:
console.log("Hello, Kotlin/JS!")
console.log(sorted(arrayOf(1,2,3)))
console.log(sorted(arrayOf(3,1,2)))

----------------------------------------

TITLE: Defining Unit-Returning Functions in Kotlin
DESCRIPTION: Shows how to define functions that don't return a useful value, using the Unit return type in Kotlin.

LANGUAGE: kotlin
CODE:
fun printHello(name: String?): Unit {
    if (name != null)
        println("Hello $name")
    else
        println("Hi there!")
    // `return Unit` or `return` is optional
}

// Equivalent to:
fun printHello(name: String?) { ... }

----------------------------------------

TITLE: Importing DataFrame Library in Kotlin Notebook
DESCRIPTION: Imports the DataFrame library for data manipulation in Kotlin Notebook environment.

LANGUAGE: kotlin
CODE:
%use dataframe

----------------------------------------

TITLE: Adding kotlinx.html Dependency in Gradle (Kotlin)
DESCRIPTION: This snippet shows how to add the kotlinx.html library dependency to a Kotlin/JS project using Gradle. It includes the necessary repository and dependency declarations.

LANGUAGE: kotlin
CODE:
repositories {
    // ...
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib-js"))
    implementation("org.jetbrains.kotlinx:kotlinx-html-js:0.8.0")
    // ...
}

----------------------------------------

TITLE: Configuring KSP Processor Module in Kotlin
DESCRIPTION: This snippet shows how to set up a Gradle module for hosting a KSP processor using Kotlin DSL. It includes plugin application and KSP API dependency.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("jvm")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.google.devtools.ksp:symbol-processing-api:%kspSupportedKotlinVersion%-%kspVersion%")
}

----------------------------------------

TITLE: Converting properties of external interfaces to var in Kotlin/JS
DESCRIPTION: Shows how to change read-only properties in external interfaces to mutable properties to allow assignment after object creation.

LANGUAGE: kotlin
CODE:
// Replace this
external interface CustomComponentState : State {
   val name: String
}

LANGUAGE: kotlin
CODE:
// With this
external interface CustomComponentState : State {
   var name: String
}

----------------------------------------

TITLE: Applying the Kotlin Multiplatform plugin in Gradle
DESCRIPTION: Shows how to apply the org.jetbrains.kotlin.multiplatform plugin in a Gradle build script for both Kotlin and Groovy DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'
}

----------------------------------------

TITLE: Configuring Version Catalog in TOML
DESCRIPTION: Demonstrates how to define versions and libraries in a version catalog using libs.versions.toml file for centralized dependency management.

LANGUAGE: toml
CODE:
[versions]
kotlinxCoroutines = "%coroutinesVersion%"

[libraries]
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }

----------------------------------------

TITLE: Configuring source map names policy in Gradle
DESCRIPTION: Shows how to configure the source map names policy for Kotlin/JS compilation in Gradle.

LANGUAGE: kotlin
CODE:
tasks.withType<org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile>().configureEach {
    compilercompileOptions.sourceMapNamesPolicy.set(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) // or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES
}

----------------------------------------

TITLE: Configuring Kotlin Multiplatform EAP in Gradle (Groovy DSL)
DESCRIPTION: Shows the Gradle configuration using Groovy DSL to set up an EAP version of Kotlin for a Multiplatform project, including plugin and repository setup.

LANGUAGE: groovy
CODE:
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.multiplatform' version 'KOTLIN-EAP-VERSION'
}

repositories {
    mavenCentral()
}

----------------------------------------

TITLE: Configuring source map names policy in Gradle
DESCRIPTION: Shows how to configure the source map names policy for Kotlin/JS compilation in Gradle.

LANGUAGE: kotlin
CODE:
tasks.withType<org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile>().configureEach {
    compilercompileOptions.sourceMapNamesPolicy.set(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) // or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES
}

----------------------------------------

TITLE: Using JavaScript Code in Kotlin/Wasm Function
DESCRIPTION: This example shows how to include a JavaScript code snippet directly in a Kotlin/Wasm function using the js() function.

LANGUAGE: kotlin
CODE:
fun getCurrentURL(): String =
    js("window.location.href")

----------------------------------------

TITLE: Deserializing JSON to a Kotlin Object
DESCRIPTION: Shows how to deserialize a JSON string into a Kotlin object using Json.decodeFromString().

LANGUAGE: kotlin
CODE:
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.decodeFromString

@Serializable
data class Data(val a: Int, val b: String)

fun main() {
   val obj = Json.decodeFromString<Data>("{\"a\":42, \"b\": \"str\"}")
}

----------------------------------------

TITLE: Dynamic Lambda Parameters in Kotlin
DESCRIPTION: Demonstrates how lambda parameters in dynamic calls automatically receive dynamic type.

LANGUAGE: kotlin
CODE:
dyn.foo {
    x -> x.bar() // x is dynamic
}

----------------------------------------

TITLE: Implementing REST Controller in Spring Boot
DESCRIPTION: REST controller implementation with a simple GET endpoint that accepts a name parameter and returns a greeting message.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

@RestController
class MessageController {
    @GetMapping("/")
    fun index(@RequestParam("name") name: String) = "Hello, $name!"
}

----------------------------------------

TITLE: Downloading Kotlin Compiler and KSP in Bash
DESCRIPTION: This script downloads and extracts the Kotlin compiler and KSP (Kotlin Symbol Processing) artifacts. It uses wget to download the files and unzip to extract them.

LANGUAGE: bash
CODE:
#!/bin/bash

# Kotlin compiler
wget https://github.com/JetBrains/kotlin/releases/download/v%kspSupportedKotlinVersion%/kotlin-compiler-%kspSupportedKotlinVersion%.zip
unzip kotlin-compiler-%kspSupportedKotlinVersion%.zip

# KSP
wget https://github.com/google/ksp/releases/download/%kspSupportedKotlinVersion%-%kspVersion%/artifacts.zip
unzip artifacts.zip

----------------------------------------

TITLE: Implementing Multiple Round Processing in KSP
DESCRIPTION: Example implementation of a Symbol Processor that uses multiple round processing by deferring invalid symbols. The processor filters symbols with a specific annotation and validates them before processing or deferring to the next round.

LANGUAGE: kotlin
CODE:
override fun process(resolver: Resolver): List<KSAnnotated> {
    val symbols = resolver.getSymbolsWithAnnotation("com.example.annotation.Builder")
    val result = symbols.filter { !it.validate() }
    symbols
        .filter { it is KSClassDeclaration && it.validate() }
        .map { it.accept(BuilderVisitor(), Unit) }
    return result
}

----------------------------------------

TITLE: Compiling Multiple Kotlin Source Roots to JVM using kotlinc Ant Task
DESCRIPTION: Shows how to compile Kotlin source code from multiple source roots using the kotlinc Ant task. It defines multiple src elements to specify different source directories.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <kotlinc output="hello.jar">
            <src path="root1"/>
            <src path="root2"/>
        </kotlinc>
    </target>
</project>

----------------------------------------

TITLE: Configuring Test Dependencies in Groovy build.gradle
DESCRIPTION: Shows how to add test dependencies to all source sets including JavaScript target using Groovy DSL in Gradle build script.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonTest {
            dependencies {
                implementation kotlin("test") // This makes test annotations and functionality available in JS
            }
        }
    }
}

----------------------------------------

TITLE: Using Interfaces with Expected and Actual Functions in Kotlin Multiplatform
DESCRIPTION: Shows how to define a common interface and implement it differently on different platforms using expected and actual functions.

LANGUAGE: kotlin
CODE:
// In commonMain
expect fun buildIdentity(): Identity

interface Identity {
    val userName: String
    val processID: Long
}

LANGUAGE: kotlin
CODE:
// In jvmMain
actual fun buildIdentity(): Identity = JVMIdentity()

class JVMIdentity(
    override val userName: String = System.getProperty("user.name") ?: "none",
    override val processID: Long = ProcessHandle.current().pid()
) : Identity

LANGUAGE: kotlin
CODE:
// In nativeMain
actual fun buildIdentity(): Identity = NativeIdentity()

class NativeIdentity(
    override val userName: String = getlogin()?.toKString() ?: "None",
    override val processID: Long = getpid().toLong()
) : Identity

----------------------------------------

TITLE: Disabling Default Feature Flags in Compose Compiler
DESCRIPTION: Demonstrates how to disable a feature flag that is enabled by default using the disabled() function.

LANGUAGE: kotlin
CODE:
featureFlags = setOf(ComposeFeatureFlag.StrongSkipping.disabled())

----------------------------------------

TITLE: Importing and Using Kotlin Module in Swift Package
DESCRIPTION: This Swift code demonstrates how to import the shared Kotlin module and define a function that uses Kotlin code within a local Swift package.

LANGUAGE: swift
CODE:
import Shared

public func greetingsFromSpmLocalPackage() -> String {
    return Greeting.greet()
}

----------------------------------------

TITLE: Python Package Dependencies Declaration
DESCRIPTION: Specifies required Python packages and their exact versions for project dependencies. Includes Flask web framework, static site generators, parsing utilities, geocoding service, and Algolia search integration.

LANGUAGE: text
CODE:
flask==2.3.3
flask-flatpages==0.7.3
frozen-flask==0.18
Pygments==2.12.0
python-frontmatter==1.0.0
beautifulsoup4==4.11.1
xmltodict==0.13.0
geocoder==1.38
ruamel.yaml==0.17.21
algoliasearch==1.20.0
Werkzeug==2.3.8

----------------------------------------

TITLE: JSpecify Nullability Annotations Example - Java and Kotlin
DESCRIPTION: Example showing how Kotlin handles JSpecify nullability annotations in Java interop. Demonstrates nullability warnings and strict mode options.

LANGUAGE: java
CODE:
@NullMarked
public class JavaClass {
  public String notNullableString() { return ""; }
  public @Nullable String nullableString() { return ""; }
}

LANGUAGE: kotlin
CODE:
fun kotlinFun() = with(JavaClass()) {
  notNullableString().length // OK
  nullableString().length    // Warning: receiver nullability mismatch
}

----------------------------------------

TITLE: Configuring Webpack DevServer for Kotlin/Wasm Debugging
DESCRIPTION: This code configures the Webpack DevServer to serve project sources, enabling debugging in the browser.

LANGUAGE: kotlin
CODE:
devServer = (devServer ?: KotlinWebpackConfig.DevServer()).apply {
    static = (static ?: mutableListOf()).apply {
        // Serve sources to debug inside browser
        add(project.rootDir.path)
        add(project.projectDir.path)
    }
}

----------------------------------------

TITLE: Time Tracking Functionality Example
DESCRIPTION: Example showing usage of new time tracking functionality in Kotlin standard library.

LANGUAGE: kotlin
CODE:
@OptIn(ExperimentalTime::class)
fun main() {
    val currentInstant = Clock.System.now()
    println("Current time: $currentInstant")

    val pastInstant = Instant.parse("2023-01-01T00:00:00Z")
    val duration = currentInstant - pastInstant

    println("Time elapsed since 2023-01-01: $duration")
}

----------------------------------------

TITLE: Changes for replace() and replaceFirst() in JS example
DESCRIPTION: Shows the changes in replace() and replaceFirst() functions for JS in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
fun main() {
    println(Regex("(.+)").replace("Kotlin", "\\$ $1")) // $ Kotlin
    println(Regex("(.+)").replaceFirst("1.6.0", "\\\ $1")) // \ 1.6.0
}

----------------------------------------

TITLE: Specifying Kotlin Language Version Compatibility
DESCRIPTION: Command-line switch to set compatibility mode for a specific Kotlin language version. It reports errors for language features introduced after the specified version.

LANGUAGE: kotlin
CODE:
-language-version X.Y

----------------------------------------

TITLE: Specifying Custom Podspec Repository in Podfile
DESCRIPTION: This Ruby snippet shows how to specify the location of a custom Podspec repository in a Podfile for correct Xcode integration.

LANGUAGE: ruby
CODE:
source 'https://github.com/Kotlin/kotlin-cocoapods-spec.git'

----------------------------------------

TITLE: Adding Compose Compiler Plugin to Root build.gradle.kts
DESCRIPTION: This code snippet demonstrates how to add the Compose compiler Gradle plugin to the root build.gradle.kts file. It uses the alias function to reference the plugin from the version catalog.

LANGUAGE: kotlin
CODE:
plugins {
    // ...
    alias(libs.plugins.compose.compiler) apply false
}

----------------------------------------

TITLE: Initializing Basic Kotlin/Native Program
DESCRIPTION: A simple Kotlin program that prints a greeting message and demonstrates basic input/output operations.

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello, Kotlin/Native!")
}

----------------------------------------

TITLE: New parameters for Kotlin/Native frameworks in CocoaPods Gradle plugin
DESCRIPTION: Example showing how to use the new DSL for configuring Kotlin/Native frameworks in the CocoaPods Gradle plugin.

LANGUAGE: kotlin
CODE:
cocoapods {
    frameworkName = "MyFramework" // This property is deprecated 
    // and will be removed in future versions
    // New DSL for framework configuration:
    framework {
        // All Framework properties are supported
        // Framework name configuration. Use this property instead of 
        // deprecated 'frameworkName'
        baseName = "MyFramework"
        // Dynamic framework support
        isStatic = false
        // Dependency export
        export(project(":anotherKMMModule"))
        transitiveExport = false // This is default.
        // Bitcode embedding
        embedBitcode(BITCODE)
    }
}

----------------------------------------

TITLE: Manual Configuration of Source Sets in Kotlin Multiplatform
DESCRIPTION: Shows how to manually configure source sets for desktop targets (Linux, Windows, macOS) in a Kotlin Multiplatform project using the Kotlin DSL. It demonstrates creating an intermediate source set and specifying the source set hierarchy.

LANGUAGE: kotlin
CODE:
kotlin {
    linuxX64()
    mingwX64()
    macosX64()

    sourceSets {
        val desktopMain by creating {
            dependsOn(commonMain.get())
        }

        linuxX64Main.get().dependsOn(desktopMain)
        mingwX64Main.get().dependsOn(desktopMain)
        macosX64Main.get().dependsOn(desktopMain)
    }
}

----------------------------------------

TITLE: Modifier Keywords in Kotlin
DESCRIPTION: Keywords used as declaration modifiers to specify visibility, behavior, and other attributes of classes, functions, and properties. Examples include abstract, actual, annotation, companion, etc.



----------------------------------------

TITLE: Using non-local break and continue in inline functions
DESCRIPTION: Shows how to use non-local break and continue jump expressions within lambdas passed as arguments to inline functions.

LANGUAGE: kotlin
CODE:
fun processList(elements: List<Int>): Boolean {
    for (element in elements) {
        val variable = element.nullableMethod() ?: run {
            log.warning("Element is null or invalid, continuing...")
            continue
        }
        if (variable == 0) return true // If variable is zero, return true
    }
    return false
}

----------------------------------------

TITLE: Hello World Application in Kotlin
DESCRIPTION: Basic Kotlin program that prints 'Hello, World!' to the console

LANGUAGE: kotlin
CODE:
fun main() {
    println("Hello, World!")
}

----------------------------------------

TITLE: Importing CocoaPods Dependency with Custom Package Name in Kotlin
DESCRIPTION: This snippet shows how to import a CocoaPods dependency using a custom package name specified in the build configuration.

LANGUAGE: kotlin
CODE:
import FirebaseAuthWrapper.Auth
import FirebaseAuthWrapper.User

----------------------------------------

TITLE: Verifying Code Style Compliance
DESCRIPTION: Steps to enable inspections for verifying code style compliance in IntelliJ IDEA or Android Studio.

LANGUAGE: plaintext
CODE:
1. Go to Settings/Preferences | Editor | Inspections | General.
2. Switch on Incorrect formatting inspection.

----------------------------------------

TITLE: Enabling JVM IR Backend in Gradle (Kotlin DSL)
DESCRIPTION: Configuration to enable the new JVM IR backend in a Gradle build using Kotlin DSL.

LANGUAGE: kotlin
CODE:
tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile::class) {
  kotlinOptions.useIR = true
}

----------------------------------------

TITLE: Manual Configuration of Source Sets in Kotlin Multiplatform (Groovy)
DESCRIPTION: Shows how to manually configure source sets for desktop targets (Linux, Windows, macOS) in a Kotlin Multiplatform project using the Groovy DSL. It demonstrates creating an intermediate source set and specifying the source set hierarchy.

LANGUAGE: groovy
CODE:
kotlin {
    linuxX64()
    mingwX64()
    macosX64()

    sourceSets {
        desktopMain {
            dependsOn(commonMain.get())
        }
        linuxX64Main {
            dependsOn(desktopMain)
        }
        mingwX64Main {
            dependsOn(desktopMain)
        }
        macosX64Main {
            dependsOn(desktopMain)
        }
    }
}

----------------------------------------

TITLE: Refining Movie Data in Kotlin DataFrame
DESCRIPTION: Processes movie data by extracting the release year, cleaning titles, and filtering movies. This snippet showcases data refinement techniques using Kotlin DataFrame operations.

LANGUAGE: kotlin
CODE:
val movies = DataFrame.read("movies.csv")

val moviesWithYear = movies
    .add("year") { 
        "\\d{4}".toRegex()
            .findAll(title)
            .lastOrNull()
            ?.value
            ?.toInt()
            ?: -1
    }

val moviesTitle = moviesWithYear
    .update("title") {
        "\\s*\\(\\d{4}\\)\\s*$".toRegex().replace(title, "")
    }

val moviesNew = moviesWithYear.filter { year >= 1996 }
moviesNew

----------------------------------------

TITLE: Adding CocoaPods Dependency in Kotlin DSL
DESCRIPTION: This snippet shows how to add a CocoaPods dependency (SDWebImage) to a Kotlin Multiplatform project using the Kotlin DSL build script.

LANGUAGE: kotlin
CODE:
kotlin {
    cocoapods {
        version = "2.0"
        //...
        pod("SDWebImage") {
            version = "5.20.0"
        }
    }
}

----------------------------------------

TITLE: SDKMAN! Kotlin Installation
DESCRIPTION: Command to install Kotlin compiler using SDKMAN! package manager

LANGUAGE: bash
CODE:
sdk install kotlin

----------------------------------------

TITLE: Creating Additional Source Sets in Kotlin Multiplatform (Groovy)
DESCRIPTION: Demonstrates how to create additional source sets in a Kotlin Multiplatform project using the Groovy DSL. It shows how to reapply the default hierarchy template and manually configure additional source sets.

LANGUAGE: groovy
CODE:
kotlin {
    jvm()
    macosArm64()
    iosArm64()
    iosSimulatorArm64()

    // Apply the default hierarchy again. It'll create, for example, the iosMain source set:
    applyDefaultHierarchyTemplate()

    sourceSets {
        // Create an additional jvmAndMacos source set:
        jvmAndMacos {
            dependsOn(commonMain.get())
        }
        macosArm64Main {
            dependsOn(jvmAndMacos.get())
        }
        jvmMain {
            dependsOn(jvmAndMacos.get())
        }
    } 
}

----------------------------------------

TITLE: Smart Cast Improvements for Safe Call Receivers (Kotlin)
DESCRIPTION: Illustrates enhanced smart cast behavior where the compiler can now apply smart casts to safe call receivers after null checks, improving type inference and reducing the need for explicit casts.

LANGUAGE: kotlin
CODE:
fun countFirst(s: Any): Int {
    val firstChar = (s as? CharSequence)?.firstOrNull()
    if (firstChar != null)
    return s.count { it == firstChar } // s: Any is smart cast to CharSequence

    val firstItem = (s as? Iterable<*>)?.firstOrNull()
    if (firstItem != null)
    return s.count { it == firstItem } // s: Any is smart cast to Iterable<*>
    return -1
}

fun main(args: Array<String>) {
  val string = "abacaba"
  val countInString = countFirst(string)
  println("called on \"$string\": $countInString")

  val list = listOf(1, 2, 3, 1, 2)
  val countInList = countFirst(list)
  println("called on $list: $countInList")
}

----------------------------------------

TITLE: Disabling sources publication for all targets except one in Kotlin Multiplatform
DESCRIPTION: This code example demonstrates how to disable the publication of sources for all targets except for a specific one (JVM in this case) in a Kotlin Multiplatform project using the withSourcesJar() API.

LANGUAGE: kotlin
CODE:
kotlin {
    // Disable sources publication for all targets except for JVM:
    withSourcesJar(publish = false)

    jvm {
        withSourcesJar(publish = true)
    }
    linuxX64()
}

----------------------------------------

TITLE: Configuring Kotlin JVM Compiler to Use Old Backend in Gradle (Groovy DSL)
DESCRIPTION: This snippet shows how to configure the Kotlin JVM compiler to use the old backend in Gradle using the Groovy DSL. This can be used as a temporary workaround for performance issues or changes in field sorting in Kotlin 1.5.

LANGUAGE: groovy
CODE:
tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {
  kotlinOptions.useOldBackend = true
}

----------------------------------------

TITLE: Configuring No-arg Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Adds the no-arg compiler plugin to a Kotlin project using Gradle's Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.noarg") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Implementing Async Overlay with Coroutines
DESCRIPTION: Example showing how to use coroutines with async/await pattern for background image processing

LANGUAGE: kotlin
CODE:
fun asyncOverlay() = async(CommonPool) {
    val original = asyncLoadImage("original")
    val overlay = asyncLoadImage("overlay")
    applyOverlay(original.await(), overlay.await())
}

launch(UI) {
    val image = asyncOverlay().await()
    showImage(image)
}

----------------------------------------

TITLE: CocoaPods Deintegration Command
DESCRIPTION: Command to remove CocoaPods integration from an iOS project during migration to direct integration.

LANGUAGE: bash
CODE:
pod deintegrate

----------------------------------------

TITLE: Using Annotation Use-site Targets in Kotlin
DESCRIPTION: These examples show how to specify annotation use-site targets in Kotlin to control where annotations are applied in the generated Java bytecode.

LANGUAGE: kotlin
CODE:
class Example(@field:Ann val foo,    // annotate Java field
              @get:Ann val bar,      // annotate Java getter
              @param:Ann val quux)   // annotate Java constructor parameter

@file:JvmName("Foo")

package org.jetbrains.demo

class Example {
     @set:[Inject VisibleForTesting]
     var collaborator: Collaborator
}

fun @receiver:Fancy String.myExtension() { ... }

----------------------------------------

TITLE: Using floored division and mod operators
DESCRIPTION: Demonstration of the new floored division and modulus operators compared to regular division and remainder.

LANGUAGE: kotlin
CODE:
fun main() {
    println("Floored division -5/3: ${(-5).floorDiv(3)}")
    println( "Modulus: ${(-5).mod(3)}")
    
    println("Truncated division -5/3: ${-5 / 3}")
    println( "Remainder: ${-5 % 3}")
}

----------------------------------------

TITLE: Accessing Compilations in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to access compilations for a specific target in a Kotlin Multiplatform project using the Kotlin DSL in Gradle.

LANGUAGE: kotlin
CODE:
kotlin {
    // Declare and configure the JVM target
    jvm {
        val mainCompilation: KotlinJvmCompilation = compilations.getByName("main")
    }
}

----------------------------------------

TITLE: Reading Input in Kotlin
DESCRIPTION: Shows how to read user input from the console using the readln() function in Kotlin.

LANGUAGE: kotlin
CODE:
println("Enter any word: ")
val yourWord = readln()
print("You entered the word: ")
print(yourWord)

----------------------------------------

TITLE: Requiring opt-in on implicit usages of experimental APIs
DESCRIPTION: Example demonstrating how the compiler now requires opt-in for implicit usages of experimental APIs.

LANGUAGE: kotlin
CODE:
// Library code

@RequiresOptIn(message = "This API is experimental.")
@Retention(AnnotationRetention.BINARY)
@Target(AnnotationTarget.CLASS)
annotation class MyDateTime // Opt-in requirement annotation

@MyDateTime
class DateProvider // A class requiring opt-in

// Client code

// Warning: experimental API usage
fun createDateSource(): DateProvider { /* ... */ }

fun getDate(): Date {
    val dateSource = createDateSource() // Also warning: experimental API usage
    // ... 
}

----------------------------------------

TITLE: Using @JvmStatic and @JvmField in Interface Companions
DESCRIPTION: Shows how to use @JvmStatic and @JvmField annotations in companion objects of interfaces in Kotlin 1.3.

LANGUAGE: kotlin
CODE:
interface Foo {
    companion object {
        @JvmField
        val answer: Int = 42

        @JvmStatic
        fun sayHello() {
            println("Hello, world!")
        }
    }
}

----------------------------------------

TITLE: Configuring Kotlin Plugin Version in Root Project (Groovy)
DESCRIPTION: This snippet demonstrates how to specify the Kotlin plugin version in the root project's build script for use in other project modules using Groovy DSL.

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.jvm' version '%kspSupportedKotlinVersion%' apply false
}

buildscript {
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:%kspSupportedKotlinVersion%'
    }
}

----------------------------------------

TITLE: Applying Annotations to Lambdas in Kotlin
DESCRIPTION: This snippet demonstrates how to apply annotations to lambdas in Kotlin, which are then applied to the generated invoke() method.

LANGUAGE: kotlin
CODE:
annotation class Suspendable

val f = @Suspendable { Fiber.sleep(10) }

----------------------------------------

TITLE: Type Alias Usage Example
DESCRIPTION: Shows how to define and use type aliases for complex types like Maps

LANGUAGE: kotlin
CODE:
typealias OscarWinners = Map<String, String>

fun countLaLaLand(oscarWinners: OscarWinners) =
        oscarWinners.count { it.value.contains("La La Land") }

fun checkLaLaLandIsTheBestMovie(oscarWinners: Map<String, String>) =
        oscarWinners["Best picture"] == "La La Land"

----------------------------------------

TITLE: Configuring Basic Library Binary with KotlinArtifacts DSL
DESCRIPTION: Demonstrates basic configuration of a native library using kotlinArtifacts DSL with debug and release modes.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.Library {
        target = iosX64 // Define your target instead
        modes(DEBUG, RELEASE)
        // Binary configuration
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.Library {
        target = iosX64 // Define your target instead
        modes(DEBUG, RELEASE)
        // Binary configuration
    }
}

----------------------------------------

TITLE: Defining a Customer Class in Java
DESCRIPTION: This Java class represents a Customer with name property and methods for getting, setting name, and placing an order.

LANGUAGE: java
CODE:
public class Customer {

    private String name;

    public Customer(String s){
        name = s;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
    
    public void placeOrder() {
        System.out.println("A new order is placed by " + name);
    }
}

----------------------------------------

TITLE: Enabling Constructor Initializers in Gradle
DESCRIPTION: Configures the no-arg plugin to run initialization logic in synthetic constructors.

LANGUAGE: groovy
CODE:
noArg {
    invokeInitializers = true
}

----------------------------------------

TITLE: Suspending functions as supertypes
DESCRIPTION: Example showing how to use a suspend functional type as a supertype in Kotlin 1.5.30.

LANGUAGE: kotlin
CODE:
class MyClass: suspend () -> Unit {
    override suspend fun invoke() { TODO() }
}

----------------------------------------

TITLE: Configuring KSP Consumer Module in Kotlin
DESCRIPTION: This snippet shows how to set up a Gradle module that uses a custom KSP processor using Kotlin DSL. It includes plugin application and processor dependency.

LANGUAGE: kotlin
CODE:
plugins {
    id("com.google.devtools.ksp") version "%kspSupportedKotlinVersion%-%kspVersion%"
}

dependencies {
    implementation(kotlin("stdlib-jdk8"))
    implementation(project(":test-processor"))
    ksp(project(":test-processor"))
}

----------------------------------------

TITLE: Instantiating Annotation Classes in Kotlin
DESCRIPTION: This example shows how to instantiate annotation classes in Kotlin code, which is an alternative to Java's annotation implementation mechanism.

LANGUAGE: kotlin
CODE:
annotation class InfoMarker(val info: String)

fun processInfo(marker: InfoMarker): Unit = TODO()

fun main(args: Array<String>) {
    if (args.isNotEmpty())
        processInfo(getAnnotationReflective(args))
    else
        processInfo(InfoMarker("default"))
}

----------------------------------------

TITLE: Enabling K2 for Kapt
DESCRIPTION: Properties to enable K2 compiler support for kapt annotation processing

LANGUAGE: text
CODE:
kotlin.experimental.tryK2=true
kapt.use.k2=true

----------------------------------------

TITLE: Sample Swift UI Implementation
DESCRIPTION: Example Swift code demonstrating how to import and use the exported Kotlin framework in a SwiftUI view.

LANGUAGE: swift
CODE:
import SwiftUI
import Shared

struct ContentView: View {
    var body: some View {
        VStack {
            Image(systemName: "globe")
                .imageScale(.large)
                .foregroundStyle(.tint)
            Text("Hello, world! \(Shared.Platform_iosKt.getPlatform().name)")
        }
        .padding()
    }
}

#Preview {
    ContentView()
}

----------------------------------------

TITLE: Specifying binaries.executable() in Kotlin/JS build script
DESCRIPTION: Demonstrates how to explicitly specify binaries.executable() in the build script to produce executable .js files with the IR compiler.

LANGUAGE: kotlin
CODE:
kotlin {
    js(IR) {
        browser {
        }
        binaries.executable()
    }
}

----------------------------------------

TITLE: Creating a Custom Comparator for String Length in Kotlin
DESCRIPTION: This example shows how to create a custom Comparator to sort strings by their length. It uses the Comparator interface and the sortedWith() function.

LANGUAGE: kotlin
CODE:
fun main() {
    val lengthComparator = Comparator { str1: String, str2: String -> str1.length - str2.length }
    println(listOf("aaa", "bb", "c").sortedWith(lengthComparator))
}

----------------------------------------

TITLE: Using inline classes with secondary constructors
DESCRIPTION: Demonstrates the new ability to use secondary constructors with bodies in inline classes.

LANGUAGE: kotlin
CODE:
@JvmInline
value class Person(private val fullName: String) {
    // Allowed since Kotlin 1.4.30:
    init { 
        check(fullName.isNotBlank()) {
            "Full name shouldn't be empty"
        }
    }

    // Preview available since Kotlin 1.8.20:
    constructor(name: String, lastName: String) : this("$name $lastName") {
        check(lastName.isNotBlank()) {
            "Last name shouldn't be empty"
        }
    }
}

----------------------------------------

TITLE: Configuring Source Sets for Generated Code in Kotlin
DESCRIPTION: This snippet shows how to configure Kotlin source sets to include KSP generated code directories in a Kotlin-based build script.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets.main {
        kotlin.srcDir("build/generated/ksp/main/kotlin")
    }
    sourceSets.test {
        kotlin.srcDir("build/generated/ksp/test/kotlin")
    }
}

----------------------------------------

TITLE: Operators and Special Symbols in Kotlin
DESCRIPTION: Comprehensive list of operators and special symbols used in Kotlin, including arithmetic operators, assignment operators, comparison operators, and special syntax elements.



----------------------------------------

TITLE: Aggregate Operations in Kotlin
DESCRIPTION: This Kotlin snippet shows how to use aggregate operations like maxOrNull() to find the maximum value or null in a collection.

LANGUAGE: kotlin
CODE:
// Kotlin
val numbers = listOf<Int>()
println("Max: ${numbers.maxOrNull()}")

----------------------------------------

TITLE: Configuring Kotlin source directories in Groovy DSL
DESCRIPTION: Shows how to configure custom source directories for Kotlin files in a Gradle build script using Groovy DSL. This is useful when Kotlin and Java sources are not stored in the default locations.

LANGUAGE: groovy
CODE:
sourceSets {
    main.kotlin.srcDirs += 'src/main/myKotlin'
    main.java.srcDirs += 'src/main/myJava'
}

----------------------------------------

TITLE: Resolving Type Aliases to Actual Class Declarations
DESCRIPTION: Recursive extension function that follows type alias chains to find the ultimate class or interface declaration being referenced.

LANGUAGE: kotlin
CODE:
fun KSTypeAlias.findActualType(): KSClassDeclaration {
    val resolvedType = this.type.resolve().declaration
    return if (resolvedType is KSTypeAlias) {
        resolvedType.findActualType()
    } else {
        resolvedType as KSClassDeclaration
    }
}

----------------------------------------

TITLE: New readline functions example
DESCRIPTION: Shows the usage of new readline functions introduced in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
println("What is your nickname?")
val nickname = readln()
println("Hello, $nickname!")

LANGUAGE: kotlin
CODE:
fun main() {
    var sum = 0
    while (true) {
        val nextLine = readlnOrNull().takeUnless { 
            it.isNullOrEmpty() 
        } ?: break
        sum += nextLine.toInt()
    }
    println(sum)
}

----------------------------------------

TITLE: Configuring Maven Central Repository
DESCRIPTION: Gradle settings configuration to use Maven Central for downloading Kotlin artifacts

LANGUAGE: kotlin
CODE:
pluginManagement {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

----------------------------------------

TITLE: Configuring Lombok plugin in Gradle (Groovy DSL)
DESCRIPTION: Apply the kotlin-plugin-lombok Gradle plugin in the build.gradle file. This snippet also includes the io.freefair.lombok plugin.

LANGUAGE: groovy
CODE:
plugins {
    id 'org.jetbrains.kotlin.plugin.lombok' version '%kotlinVersion%'
    id 'io.freefair.lombok' version '8.10'
}

----------------------------------------

TITLE: Implementing JavaScript-specific Socket and UUID Generation in Kotlin
DESCRIPTION: Provides JavaScript-specific implementations for UUID generation using the 'uuid' npm package and a placeholder for PlatformSocket using WebSockets.

LANGUAGE: kotlin
CODE:
// JS
// Use the `uuid` package from npm as dependency
actual fun randomUUID(): String = uuidv4() 

actual class PlatformSocket actual constructor(url: String) {
   // Implementation on top of WebSockets
}

----------------------------------------

TITLE: Creating a Custom Builder with Type Inference in Kotlin
DESCRIPTION: This example shows how to create a custom builder function that supports type inference. It demonstrates the requirements for the receiver type and how to use it in practice.

LANGUAGE: kotlin
CODE:
class ItemHolder<T> {
    private val items = mutableListOf<T>()

    fun addItem(x: T) {
        items.add(x)
    }

    fun getLastItem(): T? = items.lastOrNull()
}

fun <T> ItemHolder<T>.addAllItems(xs: List<T>) {
    xs.forEach { addItem(it) }
}

fun <T> itemHolderBuilder(builder: ItemHolder<T>.() -> Unit): ItemHolder<T> = 
    ItemHolder<T>().apply(builder)

fun test(s: String) {
    val itemHolder1 = itemHolderBuilder { // Type of itemHolder1 is ItemHolder<String>
        addItem(s)
    }
    val itemHolder2 = itemHolderBuilder { // Type of itemHolder2 is ItemHolder<String>
        addAllItems(listOf(s)) 
    }
    val itemHolder3 = itemHolderBuilder { // Type of itemHolder3 is ItemHolder<String?>
        val lastItem: String? = getLastItem()
        // ...
    }
}

----------------------------------------

TITLE: Configuring Java toolchain in Groovy DSL
DESCRIPTION: Shows how to set up a Java toolchain for Kotlin compilation in a Gradle build script using Groovy DSL. This allows specifying the JDK version to use for compilation.

LANGUAGE: groovy
CODE:
kotlin {
    jvmToolchain {
        languageVersion = JavaLanguageVersion.of(<MAJOR_JDK_VERSION>)
    }
    // Or shorter:
    jvmToolchain(<MAJOR_JDK_VERSION>)
    // For example:
    jvmToolchain(%jvmLTSVersionSupportedByKotlin%)
}

----------------------------------------

TITLE: Defining and Using Member Functions in Kotlin Classes
DESCRIPTION: Demonstrates how to define a member function within a Kotlin class and call it on an instance.

LANGUAGE: kotlin
CODE:
class Contact(val id: Int, var email: String) {
    fun printId() {
        println(id)
    }
}

fun main() {
    val contact = Contact(1, "mary@gmail.com")
    contact.printId()           
}

----------------------------------------

TITLE: Data Analysis with DataFrame Operations
DESCRIPTION: Shows how to analyze data using grouping, aggregation, and sorting operations.

LANGUAGE: kotlin
CODE:
val aggregated = channels.aggregate {
    viewCount.sum() into view
    val last = maxBy { publishedAt }
    last.title into "last title"
    last.publishedAt into "time"
    last.viewCount into "viewCount"
}.sortByDesc(view).flatten()

----------------------------------------

TITLE: Implementing Function f with Tail Recursion in Kotlin
DESCRIPTION: A functional implementation of the number transformation function using tail recursion to remove trailing zeros.

LANGUAGE: kotlin
CODE:
tailrec fun removeZeroes(x: Int): Int =
    if (x % 10 == 0) removeZeroes(x / 10) else x

fun f(x: Int) = removeZeroes(x + 1)

----------------------------------------

TITLE: Configuring Maven compiler plugin for Lombok with kapt
DESCRIPTION: Configure the Maven compiler plugin to use Lombok with Java's compiler when using kapt.

LANGUAGE: xml
CODE:
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.5.1</version>
    <configuration>
        <source>1.8</source>
        <target>1.8</target>
        <annotationProcessorPaths>
            <annotationProcessorPath>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </annotationProcessorPath>
        </annotationProcessorPaths>
    </configuration>
</plugin>

----------------------------------------

TITLE: Kotlin React Component Implementation
DESCRIPTION: Example of creating a React functional component using Kotlin wrappers. Implements a simple counter component with state management using React hooks.

LANGUAGE: kotlin
CODE:
import react.*
import react.dom.*
import kotlinx.html.js.onClickFunction

val counter = functionalComponent<Props> {
   val (count, setCount) = useState(0)
   button {
      attrs.onClickFunction = { setCount(count + 1) }
      +count.toString()
   }
}

----------------------------------------

TITLE: Setting Compiler Options via KotlinCompilation in Kotlin
DESCRIPTION: Shows how to access and configure compiler options at compilation unit level via KotlinCompilation.

LANGUAGE: kotlin
CODE:
kotlin {
    target {
        val main by compilations.getting {
            compileTaskProvider.configure {
                compilerOptions {

                }
            }
        }
    }
}

----------------------------------------

TITLE: Exhaustive when statements example
DESCRIPTION: Demonstrates the new exhaustive when statements for enum, sealed, and Boolean subjects in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
sealed class Contact {
    data class PhoneCall(val number: String) : Contact()
    data class TextMessage(val number: String) : Contact()
}

fun Contact.messageCost(): Int =
    when(this) { // Error: 'when' expression must be exhaustive
        is Contact.PhoneCall -> 42
    }

fun sendMessage(contact: Contact, message: String) {
    // Starting with 1.6.0

    // Warning: Non exhaustive 'when' statements on Boolean will be
    // prohibited in 1.7, add 'false' branch or 'else' branch instead 
    when(message.isEmpty()) {
        true -> return
    }
    // Warning: Non exhaustive 'when' statements on sealed class/interface will be
    // prohibited in 1.7, add 'is TextMessage' branch or 'else' branch instead
    when(contact) {
        is Contact.PhoneCall -> TODO()
    }
}

----------------------------------------

TITLE: Gradle Configuration for KDoc Export
DESCRIPTION: Gradle configuration to enable experimental KDoc comment export to Objective-C headers using -Xexport-kdoc compiler option.

LANGUAGE: kotlin
CODE:
kotlin {
    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
        compilations.get("main").kotlinOptions.freeCompilerArgs += "-Xexport-kdoc"
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {
        compilations.get("main").kotlinOptions.freeCompilerArgs += "-Xexport-kdoc"
    }
}

----------------------------------------

TITLE: Configuring JPA Plugin in Gradle (Kotlin DSL)
DESCRIPTION: Adds the JPA plugin wrapper for no-arg functionality using Gradle's Kotlin DSL.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("plugin.jpa") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Adding Kotlinx Library Dependency in Groovy Build Script
DESCRIPTION: Shows how to add a kotlinx library dependency to the common source set in a Kotlin Multiplatform project using Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'
            }
        }
    }
}

----------------------------------------

TITLE: Kotlin JavaScript Browser Integration
DESCRIPTION: Shows how to compile Kotlin to JavaScript and manipulate the browser DOM. Includes interval-based HTML updates and demonstrates browser API integration.

LANGUAGE: kotlin
CODE:
import kotlinx.browser.window

fun main() {
   val body = window.document.body

   body?.innerHTML += "<b>Hello, <i>Kotlin</i></b>"

   window.setInterval({
      body?.innerHTML += "!"
   }, 1000)
}

----------------------------------------

TITLE: Compiling Kotlin to JavaScript with Advanced Options using kotlin2js Ant Task
DESCRIPTION: Shows how to use advanced options when compiling Kotlin to JavaScript, including output prefix and postfix, and sourcemap generation.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <taskdef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <kotlin2js src="root1" output="out.js" outputPrefix="prefix" outputPostfix="postfix" sourcemap="true"/>
    </target>
</project>

----------------------------------------

TITLE: Configuring Custom Gradle Configuration Attributes in Groovy
DESCRIPTION: This snippet shows how to configure attributes for a custom Gradle configuration in Groovy to resolve Kotlin Gradle plugin variants correctly. It sets usage, category, and optionally specifies a Gradle API version.

LANGUAGE: groovy
CODE:
configurations {
    customConfiguration {
        attributes {
            attribute(
                Usage.USAGE_ATTRIBUTE,
                project.objects.named(Usage, Usage.JAVA_RUNTIME)
            )
            attribute(
                Category.CATEGORY_ATTRIBUTE,
                project.objects.named(Category, Category.LIBRARY)
            )
            // If you want to depend on a specific KGP variant:
            attribute(
                GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE,
                project.objects.named('7.0')
            )
        }
    }
}

----------------------------------------

TITLE: Enabling Incremental Compilation for Kotlin/Wasm Projects
DESCRIPTION: This configuration snippet shows how to enable incremental compilation for Kotlin/Wasm targets in the project's properties file. Incremental compilation can significantly reduce compilation time during development.

LANGUAGE: text
CODE:
kotlin.incremental.wasm=true

----------------------------------------

TITLE: Command-line Compiler Configuration
DESCRIPTION: Shows how to use the no-arg plugin with the Kotlin command-line compiler, including plugin path and annotation configuration.

LANGUAGE: bash
CODE:
-Xplugin=$KOTLIN_HOME/lib/noarg-compiler-plugin.jar
-P plugin:org.jetbrains.kotlin.noarg:annotation=com.my.Annotation
-P plugin:org.jetbrains.kotlin.noarg:preset=jpa

----------------------------------------

TITLE: Adding Dependency on Another Multiplatform Project in Kotlin Build Script
DESCRIPTION: Demonstrates how to add a dependency on another multiplatform project in a Kotlin Multiplatform project using Kotlin DSL.

LANGUAGE: kotlin
CODE:
kotlin {
    sourceSets {
        commonMain.dependencies {
            implementation(project(":some-other-multiplatform-module"))
        }
        androidMain.dependencies {
            // platform part of :some-other-multiplatform-module will be added automatically
        }
    }
}

----------------------------------------

TITLE: Analyzing Message Data with Kotlin Collections
DESCRIPTION: This snippet demonstrates how to use Kotlin's collection processing capabilities to analyze message data. It includes finding the most frequent sender, filtering unread messages with non-empty content, and extracting unique senders. The code showcases Kotlin's concise syntax for working with collections and data classes.

LANGUAGE: kotlin
CODE:
fun main() {
    // Who sent the most messages?
    val frequentSender = messages
        .groupBy(Message::sender)
        .maxByOrNull { (_, messages) -> messages.size }
        ?.key                                                 // Get their names
    println(frequentSender) // [Ma]

    // Who are the senders?
    val senders = messages
        .asSequence()                                         // Make operations lazy (for a long call chain)
        .filter { it.body.isNotBlank() && !it.isRead }        // Use lambdas...
        .map(Message::sender)                                 // ...or member references
        .distinct()
        .sorted()
        .toList()                                             // Convert sequence back to a list to get a result
    println(senders) // [Adam, Ma]
}

data class Message(                                           // Create a data class
    val sender: String,
    val body: String,
    val isRead: Boolean = false,                              // Provide a default value for the argument
)

val messages = listOf(                                        // Create a list
    Message("Ma", "Hey! Where are you?"),
    Message("Adam", "Everything going according to plan today?"),
    Message("Ma", "Please reply. I've lost you!"),
)

----------------------------------------

TITLE: Configuring Kotlin/Wasm Compiler for Custom Formatters
DESCRIPTION: This code adds a compiler argument to enable custom formatters for improved debugging experience in Kotlin/Wasm.

LANGUAGE: kotlin
CODE:
kotlin {
    wasmJs {
        // ...
        compilerOptions {
            freeCompilerArgs.add("-Xwasm-debugger-custom-formatters")
        }
    }
}

----------------------------------------

TITLE: Displaying Multiple Output Types in Kotlin Notebook
DESCRIPTION: Shows how to combine different output types using the DISPLAY() function to show HTML, LaTeX formulas, and plots.

LANGUAGE: kotlin
CODE:
DISPLAY(HTML("<h2>Gaussian distribution</h2>"))
DISPLAY(LATEX("f(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} \\cdot e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}"))

val experimentX = experimentData.map { it.key }
val experimentY = experimentData.map { it.value }

DISPLAY(plot {
    bars {
        x(experimentX)
        y(experimentY)
    }
})

----------------------------------------

TITLE: Adding Processor Dependency in Kotlin
DESCRIPTION: This code snippet shows how to add a processor dependency (Dagger in this case) to a Kotlin-based build script. It includes both implementation and KSP configurations.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("com.google.dagger:dagger-compiler:2.51.1")
    ksp("com.google.dagger:dagger-compiler:2.51.1")
}

----------------------------------------

TITLE: Safe Type Casting in Java
DESCRIPTION: This Java code demonstrates how to safely cast a type using the instanceof operator and perform a subsequent null check.

LANGUAGE: java
CODE:
// Java
int getStringLength(Object y) {
    return y instanceof String x ? x.length() : -1;
}

void main() {
    System.out.println(getStringLength(1)); // Prints `-1`
}

----------------------------------------

TITLE: Defining an Opt-in Requirement Annotation in Kotlin
DESCRIPTION: This snippet shows how to create an annotation class that serves as an opt-in requirement. It uses the @RequiresOptIn annotation and specifies retention and target.

LANGUAGE: kotlin
CODE:
@RequiresOptIn(message = "This API is experimental. It could change in the future without notice.")
@Retention(AnnotationRetention.BINARY)
@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)
annotation class MyDateTime

@MyDateTime
// A class requiring opt-in
class DateProvider

----------------------------------------

TITLE: Configuring Kotlin Multiplatform EAP in Gradle (Kotlin DSL)
DESCRIPTION: Demonstrates how to set up a Gradle build using Kotlin DSL to use an EAP version of Kotlin for a Multiplatform project. It includes setting the Kotlin plugin version and repository configuration.

LANGUAGE: kotlin
CODE:
plugins {
    java
    kotlin("multiplatform") version "KOTLIN-EAP-VERSION"
}

repositories {
    mavenCentral()
}

----------------------------------------

TITLE: Basic robots.txt Configuration for Kotlin Website
DESCRIPTION: Standard robots.txt directives that allow all user agents to crawl the site and specify the location of the XML sitemap. The configuration applies to the kotlinlang.org domain.

LANGUAGE: robots.txt
CODE:
User-agent: *
Host: kotlinlang.org

# Sitemaps
sitemap: https://kotlinlang.org/sitemap_index.xml

----------------------------------------

TITLE: Setting Kotlin Daemon JVM Arguments
DESCRIPTION: Example of setting JVM arguments for the Kotlin daemon using the kotlin.daemon.jvmargs property in the gradle.properties file.

LANGUAGE: Properties
CODE:
kotlin.daemon.jvmargs=-Xmx1500m -Xms500m

----------------------------------------

TITLE: Adding Dependencies in Kotlin Notebook
DESCRIPTION: This snippet demonstrates how to add the Kotlin DataFrame and Kandy libraries to a Kotlin Notebook using the %use statement. It ensures the latest library versions are used and imports the necessary dependencies.

LANGUAGE: kotlin
CODE:
%useLatestDescriptors

%use dataframe

%use kandy

----------------------------------------

TITLE: Sample Kotlin/JS Test Class
DESCRIPTION: Example test class showing both passing and failing test cases using kotlin.test framework.

LANGUAGE: kotlin
CODE:
import kotlin.test.Test
import kotlin.test.assertEquals

class AppTest {
    @Test
    fun thingsShouldWork() {
        assertEquals(listOf(1,2,3).reversed(), listOf(3,2,1))
    }

    @Test
    fun thingsShouldBreak() {
        assertEquals(listOf(1,2,3).reversed(), listOf(1,2,3))
    }
}

----------------------------------------

TITLE: Complete Kotlin/Native String Handling Example
DESCRIPTION: Full Kotlin code example demonstrating various string handling operations between Kotlin and C, including passing strings, reading strings, and receiving string bytes.

LANGUAGE: Kotlin
CODE:
import interop.*
import kotlinx.cinterop.*

fun main() {
    println("Hello Kotlin/Native!")

    val str = "this is a Kotlin String"
    pass_string(str.cstr)

    val useMe = return_string()?.toKString() ?: error("null pointer returned")
    println(useMe)

    val copyFromC = ByteArray(255).usePinned { pinned ->
        val useMe2 = copy_string(pinned.addressOf(0), pinned.get().size - 1)
        if (useMe2 != 0) throw Error("Failed to read string from C")
        pinned.get().decodeToString()
    }

    println(copyFromC)
}

----------------------------------------

TITLE: Using @OptIn Annotation for Local Opt-in in Kotlin
DESCRIPTION: This example demonstrates how to use the @OptIn annotation to opt in to using an API element that requires opt-in. It shows a function that uses the DateProvider class which requires opt-in.

LANGUAGE: kotlin
CODE:
// Client code
@OptIn(MyDateTime::class)

// Uses DateProvider
fun getDate(): Date {
    val dateProvider: DateProvider
    // ...
}

----------------------------------------

TITLE: Adding Kotlinx Coroutines EAP Dependency in Gradle (Kotlin DSL)
DESCRIPTION: Demonstrates how to add a compatible EAP version of the kotlinx.coroutines library as a dependency in a Gradle build using Kotlin DSL.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesEapVersion%")
}

----------------------------------------

TITLE: Parsing Duration from String
DESCRIPTION: Examples demonstrating how to parse Duration from various string formats using new functions in the Duration API.

LANGUAGE: kotlin
CODE:
import kotlin.time.Duration
import kotlin.time.ExperimentalTime

@ExperimentalTime
fun main() {
    val isoFormatString = "PT1H30M"
    val defaultFormatString = "1h 30m"
    val singleUnitFormatString = "1.5h"
    val invalidFormatString = "1 hour 30 minutes"
    println(Duration.parse(isoFormatString)) // "1h 30m"
    println(Duration.parse(defaultFormatString)) // "1h 30m"
    println(Duration.parse(singleUnitFormatString)) // "1h 30m"
    //println(Duration.parse(invalidFormatString)) // throws exception
    println(Duration.parseOrNull(invalidFormatString)) // "null"
}

LANGUAGE: kotlin
CODE:
import kotlin.time.Duration
import kotlin.time.ExperimentalTime

@ExperimentalTime
fun main() {
    val isoFormatString = "PT1H30M"
    val defaultFormatString = "1h 30m"
    println(Duration.parseIsoString(isoFormatString)) // "1h 30m"
    //println(Duration.parseIsoString(defaultFormatString)) // throws exception
    println(Duration.parseIsoStringOrNull(defaultFormatString)) // "null"
}

----------------------------------------

TITLE: Setting Kotlin Daemon JVM Options
DESCRIPTION: Example of setting JVM options for the Kotlin daemon using the kotlin.daemon.jvm.options system property in the gradle.properties file.

LANGUAGE: Properties
CODE:
org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m,Xms500m

----------------------------------------

TITLE: Invoking Function Type Instances in Kotlin
DESCRIPTION: This example demonstrates different ways to invoke function type instances in Kotlin, including using the invoke() operator and extension-like calls for function types with receivers.

LANGUAGE: kotlin
CODE:
fun main() {
    val stringPlus: (String, String) -> String = String::plus
    val intPlus: Int.(Int) -> Int = Int::plus
    
    println(stringPlus.invoke("<-", "->")
    println(stringPlus("Hello, ", "world!"))
    
    println(intPlus.invoke(1, 1))
    println(intPlus(1, 2))
    println(2.intPlus(3))
}

----------------------------------------

TITLE: Creating JavaScript Wrapper for Default Import in Kotlin/Wasm
DESCRIPTION: This snippet demonstrates how to create a JavaScript wrapper module to enable default import for Kotlin/Wasm code. It imports all named exports from the main .mjs file and re-exports them as a default export.

LANGUAGE: javascript
CODE:
// Specifies the path to the main .mjs file
import * as moduleExports from "./wasm-test.mjs";

export { moduleExports as default };

----------------------------------------

TITLE: Configuring Compose Compiler Options in Gradle
DESCRIPTION: Example showing how to configure basic compiler options and feature flags in the build.gradle.kts file. Demonstrates setting source information inclusion and feature flag configuration.

LANGUAGE: kotlin
CODE:
composeCompiler {
   includeSourceInformation = true

   featureFlags = setOf(
           ComposeFeatureFlag.StrongSkipping.disabled(),
           ComposeFeatureFlag.OptimizeNonSkippingGroups
   )
}

----------------------------------------

TITLE: Using KClass in Annotation Arguments in Kotlin
DESCRIPTION: This snippet demonstrates how to use KClass as an argument in Kotlin annotations, which allows for automatic conversion to Java classes.

LANGUAGE: kotlin
CODE:
import kotlin.reflect.KClass

annotation class Ann(val arg1: KClass<*>, val arg2: KClass<out Any>)

@Ann(String::class, Int::class) class MyClass

----------------------------------------

TITLE: Smart Cast Example with Local Variables
DESCRIPTION: Demonstrates improved smart cast behavior with local variables in Kotlin 2.0.0

LANGUAGE: kotlin
CODE:
class Cat {
    fun purr() {
        println("Purr purr")
    }
}

fun petAnimal(animal: Any) {
    val isCat = animal is Cat
    if (isCat) {
        animal.purr()
    }
}

fun main() {
    val kitty = Cat()
    petAnimal(kitty)
}

----------------------------------------

TITLE: Enabling JVM IR Backend in Maven
DESCRIPTION: Configuration to enable the new JVM IR backend in a Maven build using compiler arguments.

LANGUAGE: xml
CODE:
<configuration>
    <args>
        <arg>-Xuse-ir</arg>
    </args>
</configuration>

----------------------------------------

TITLE: Disabling Kotlin Daemon Fallback Strategy
DESCRIPTION: Example of disabling the Kotlin daemon fallback strategy using a Gradle property in the gradle.properties file.

LANGUAGE: Properties
CODE:
kotlin.daemon.useFallbackStrategy=false

----------------------------------------

TITLE: Demonstrating Referential Equality in Kotlin
DESCRIPTION: Illustrates referential equality (===) checks between string references.

LANGUAGE: kotlin
CODE:
fun main() {
    var a = "Hello"
    var b = a
    var c = "world"
    var d = "world"

    println(a === b)
    // true
    println(a === c)
    // false
    println(c === d)
    // true
}

----------------------------------------

TITLE: Adding Kotlin Reflect Dependency in Gradle (Groovy)
DESCRIPTION: Shows how to add the kotlin-reflect dependency in a Gradle build script using Groovy DSL

LANGUAGE: groovy
CODE:
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:%kotlinVersion%"
}

----------------------------------------

TITLE: Configuring SAM-with-receiver Plugin for Command-line Compiler
DESCRIPTION: Shows how to configure the SAM-with-receiver plugin when using the Kotlin command-line compiler.

LANGUAGE: bash
CODE:
-Xplugin=$KOTLIN_HOME/lib/sam-with-receiver-compiler-plugin.jar
-P plugin:org.jetbrains.kotlin.samWithReceiver:annotation=com.my.SamWithReceiver

----------------------------------------

TITLE: Gradle DSL Configuration Example
DESCRIPTION: Shows how to configure compiler options using the new Gradle DSL in Kotlin 2.0.0

LANGUAGE: kotlin
CODE:
kotlin {
    compilerOptions {
        allWarningsAsErrors.set(true)
    }
    jvm {
        compilerOptions {
            noJdk.set(true)
        }
    }
}

----------------------------------------

TITLE: Exporting KDoc comments to Objective-C headers
DESCRIPTION: Example of enabling KDoc comment export and the resulting Objective-C header

LANGUAGE: kotlin
CODE:
/**
 * Prints the sum of the arguments.
 * Properly handles the case when the sum doesn't fit in 32-bit integer.
 */
fun printSum(a: Int, b: Int) = println(a.toLong() + b)

LANGUAGE: objc
CODE:
/**
 * Prints the sum of the arguments.
 * Properly handles the case when the sum doesn't fit in 32-bit integer.
 */
+ (void)printSumA:(int32_t)a b:(int32_t)b __attribute__((swift_name("printSum(a:b:)")));

----------------------------------------

TITLE: Increasing Gradle Heap Size in gradle.properties
DESCRIPTION: Add this line to your gradle.properties file to increase the Gradle heap size to 3GB, which can improve build performance.

LANGUAGE: properties
CODE:
org.gradle.jvmargs=-Xmx3g

----------------------------------------

TITLE: Floating-Point Number Initialization in Kotlin
DESCRIPTION: Shows initialization of Double and Float variables and type inference behavior with fractional numbers.

LANGUAGE: kotlin
CODE:
val e = 2.7182818284          // Double
val eFloat = 2.7182818284f    // Float, actual value is 2.7182817

----------------------------------------

TITLE: Configuring Kotlin Code Style in Maven POM
DESCRIPTION: Sets the Kotlin code style to 'official' in a Maven project's pom.xml file. This property instructs the Kotlin plugin to use the official Kotlin coding conventions for formatting.

LANGUAGE: xml
CODE:
<properties>
  <kotlin.code.style>official</kotlin.code.style>
</properties>

----------------------------------------

TITLE: Naming Kotlin Source Files
DESCRIPTION: Guidelines for naming Kotlin source files based on their contents.

LANGUAGE: kotlin
CODE:
// File containing a single class
class ProcessDeclarations

// File name: ProcessDeclarations.kt

----------------------------------------

TITLE: Kotlin/Native CInterop Configuration
DESCRIPTION: Demonstrates the new definitionFile property usage for CInterop settings in Kotlin 2.0.0

LANGUAGE: kotlin
CODE:
kotlin {
    macosArm64("native") {
        compilations.getByName("main") {
            cinterops {
                val cinterop by creating {
                    definitionFile.set(project.file("def-file.def"))
                }
            }
        }
    }
}

----------------------------------------

TITLE: Enabling Gradle Build Cache in gradle.properties
DESCRIPTION: Add this line to your gradle.properties file to enable Gradle's build cache feature, which can speed up subsequent builds.

LANGUAGE: properties
CODE:
org.gradle.caching=true

----------------------------------------

TITLE: Gradle Daemon Stop Command
DESCRIPTION: Command to stop the Gradle daemon process when needed after disabling script sandboxing.

LANGUAGE: bash
CODE:
./gradlew --stop

----------------------------------------

TITLE: Sorting with Multiple Criteria in Kotlin
DESCRIPTION: This example shows how to sort strings by multiple criteria: first by length, then alphabetically. It uses a custom comparator with a when expression.

LANGUAGE: kotlin
CODE:
fun main() {
    val sortedStrings = listOf("aaa", "bb", "c", "b", "a", "aa", "ccc")
        .sortedWith { a, b -> 
           when (val compareLengths = a.length.compareTo(b.length)) {
             0 -> a.compareTo(b)
             else -> compareLengths
           }
         }

    println(sortedStrings)
    // [a, b, c, aa, bb, aaa, ccc]
}

----------------------------------------

TITLE: Setting Lombok configuration file path in Gradle (Groovy DSL)
DESCRIPTION: Configure the path to the lombok.config file in the build.gradle file for the Kotlin Lombok plugin.

LANGUAGE: groovy
CODE:
kotlinLombok {
    lombokConfigurationFile file("lombok.config")
}

----------------------------------------

TITLE: Naming Conventions for Constants
DESCRIPTION: Examples of proper naming for Kotlin constants using screaming snake case.

LANGUAGE: kotlin
CODE:
const val MAX_COUNT = 8
val USER_NAME_FIELD = "UserName"

----------------------------------------

TITLE: Using Kotlin/Native Dynamic Library from C
DESCRIPTION: Example C code demonstrating how to use the generated Kotlin/Native dynamic library.

LANGUAGE: c
CODE:
#include "libnative_api.h"
#include "stdio.h"

int main(int argc, char** argv) {
  // Obtain reference for calling Kotlin/Native functions
  libnative_ExportedSymbols* lib = libnative_symbols();

  lib->kotlin.root.example.forIntegers(1, 2, 3, 4);
  lib->kotlin.root.example.forFloats(1.0f, 2.0);

  // Use C and Kotlin/Native strings
  const char* str = "Hello from Native!";
  const char* response = lib->kotlin.root.example.strings(str);
  printf("in: %s\nout:%s\n", str, response);
  lib->DisposeString(response);

  // Create Kotlin object instance
  libnative_kref_example_Clazz newInstance = lib->kotlin.root.example.Clazz.Clazz();
  long x = lib->kotlin.root.example.Clazz.memberFunction(newInstance, 42);
  lib->DisposeStablePointer(newInstance.pinned);

  printf("DemoClazz returned %ld\n", x);

  return 0;
}

----------------------------------------

TITLE: Adding Dependency on Another Multiplatform Project in Groovy Build Script
DESCRIPTION: Shows how to add a dependency on another multiplatform project in a Kotlin Multiplatform project using Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation project(':some-other-multiplatform-module')
            }
        }
        androidMain {
            dependencies {
                // platform part of :some-other-multiplatform-module will be added automatically
            }
        }
    }
}

----------------------------------------

TITLE: Implementing Spring Boot Message Service
DESCRIPTION: Contains a Spring Service class implementation for handling messages with database operations using a repository pattern.

LANGUAGE: kotlin
CODE:
import java.util.*

@Service
class MessageService(val db: MessageRepository) {
    fun findMessages(): List<Message> = db.findAll().toList()

    fun findMessageById(id: String): List<Message> = db.findById(id).toList()

    fun save(message: Message) {
        db.save(message)
    }

    fun <T : Any> Optional<out T>.toList(): List<T> =
        if (isPresent) listOf(get()) else emptyList()
}

----------------------------------------

TITLE: Declaring Android Dependencies in Source Sets - Kotlin
DESCRIPTION: Shows how to add Android dependencies to a specific Android source set in a Kotlin Multiplatform project using Kotlin DSL in the build.gradle.kts file.

LANGUAGE: kotlin
CODE:
sourceSets {
    androidMain.dependencies {
        implementation("com.example.android:app-magic:12.3")
    }
}

----------------------------------------

TITLE: Retrieving Database Schema Information in Kotlin Notebook
DESCRIPTION: This code snippet shows how to fetch and display schema information for all tables in a connected database using the Kotlin DataFrame library.

LANGUAGE: kotlin
CODE:
val dataschemas = DataFrame.getSchemaForAllSqlTables(dbConfig)

dataschemas.forEach { 
    println("---Yet another table schema---")
    println(it)
    println()
}

----------------------------------------

TITLE: Using the stable cbrt() function in Kotlin 1.8.0
DESCRIPTION: Shows how to use the now-stable cbrt() function to compute the real cube root of a double or float.

LANGUAGE: kotlin
CODE:
import kotlin.math.*

fun main() {
    val num = 27
    val negNum = -num

    println("The cube root of ${num.toDouble()} is: " +
            cbrt(num.toDouble()))
    println("The cube root of ${negNum.toDouble()} is: " +
            cbrt(negNum.toDouble()))
}

----------------------------------------

TITLE: Running Gradle Task for Embedding Apple Framework in Xcode
DESCRIPTION: This Bash script navigates to the Kotlin Multiplatform project root and executes the Gradle task to embed and sign the Apple framework for Xcode. It should be added as a pre-action in the Xcode build settings.

LANGUAGE: bash
CODE:
cd "<Path to the root of the multiplatform project>"
./gradlew :<Shared module name>:embedAndSignAppleFrameworkForXcode

----------------------------------------

TITLE: Adding Platform-Specific Kotlinx Library Dependency in Groovy Build Script
DESCRIPTION: Shows how to add a kotlinx library dependency to a specific platform source set in a Kotlin Multiplatform project using Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'
            }
        }
    }
}

----------------------------------------

TITLE: Data Class Usage Example
DESCRIPTION: Shows how to use a Kotlin data class and demonstrates string representation using toString()

LANGUAGE: kotlin
CODE:
data class User(val name: String, val id: Int)

fun main() {
    val user = User("Alex", 1)
    
    //sampleStart
    // Automatically uses toString() function so that output is easy to read
    println(user)            
    // User(name=Alex, id=1)
    //sampleEnd
}

----------------------------------------

TITLE: Configuring K2 Kapt Plugin
DESCRIPTION: Configuration to revert to previous kapt plugin implementation in gradle.properties file.

LANGUAGE: kotlin
CODE:
kapt.use.k2=false

----------------------------------------

TITLE: Data Loading Function Implementation
DESCRIPTION: Creates a function to fetch data from YouTube API endpoints with pagination support.

LANGUAGE: kotlin
CODE:
fun load(path: String, maxPages: Int): AnyFrame {
    val rows = mutableListOf<AnyRow>()
    var pagePath = path
    do {
        val row = load(pagePath)
        rows.add(row)
        val next = row.getValueOrNull<String>("nextPageToken")
        pagePath = path + "&pageToken=" + next
    } while (next != null && rows.size < maxPages)
    return rows.concat()
}

----------------------------------------

TITLE: Stable typeOf() example
DESCRIPTION: Demonstrates the usage of the stable typeOf() function in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
inline fun <reified T> renderType(): String {
    val type = typeOf<T>()
    return type.toString()
}

fun main() {
    val fromExplicitType = typeOf<Int>()
    val fromReifiedType = renderType<List<Int>>()
}

----------------------------------------

TITLE: Configuring Static Library with Advanced Options
DESCRIPTION: Demonstrates configuration of a static library with detailed options including module addition and compiler settings.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.Library("myslib") {
        target = linuxX64
        isStatic = false
        modes(DEBUG)
        addModule(project(":lib"))
        kotlinOptions {
            verbose = false
            freeCompilerArgs += "-Xmen=pool"
        }
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.Library("myslib") {
        target = linuxX64
        it.static = false
        modes(DEBUG)
        addModule(project(":lib"))
        kotlinOptions {
            verbose = false
            freeCompilerArgs += "-Xmen=pool"
        }
    }
}

----------------------------------------

TITLE: Adding Multiplatform Library Dependency in Groovy Build Script
DESCRIPTION: Shows how to add a multiplatform library dependency to common and platform-specific source sets in a Kotlin Multiplatform project using Groovy DSL.

LANGUAGE: groovy
CODE:
kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'io.ktor:ktor-client-core:%ktorVersion%'
            }
        }
        androidMain {
            dependencies {
                // dependency to platform part of ktor-client will be added automatically
            }
        }
    }
}

----------------------------------------

TITLE: Implementing Expected Declarations in Multiplatform Projects (Kotlin)
DESCRIPTION: Demonstrates how to use expected and actual declarations in common and platform-specific code for multiplatform projects. This allows sharing of APIs across platforms while providing platform-specific implementations.

LANGUAGE: kotlin
CODE:
// expected platform-specific API:
expect fun hello(world: String): String

fun greet() {
    // usage of the expected API:
    val greeting = hello("multiplatform world")
    println(greeting)
}

expect class URL(spec: String) {
    open fun getHost(): String
    open fun getPath(): String
}

LANGUAGE: kotlin
CODE:
actual fun hello(world: String): String =
    "Hello, $world, on the JVM platform!"

// using existing platform-specific implementation:
actual typealias URL = java.net.URL

----------------------------------------

TITLE: Configuring JPA Plugin in Gradle (Groovy DSL)
DESCRIPTION: Adds the JPA plugin wrapper for no-arg functionality using Gradle's Groovy DSL.

LANGUAGE: groovy
CODE:
plugins {
    id "org.jetbrains.kotlin.plugin.jpa" version "%kotlinVersion%"
}

----------------------------------------

TITLE: Creating a Scatter Plot with Lets-Plot for Kotlin
DESCRIPTION: This code creates a scatter plot using the Lets-Plot for Kotlin library, specifying axes, categories, colors, and plot size.

LANGUAGE: kotlin
CODE:
val scatterPlot =
    letsPlot(data) { x = "Month"; y = "Temperature"; color = "City" } + ggsize(600, 500) + geomPoint(shape = 15)
scatterPlot

----------------------------------------

TITLE: Configuring Executable DSL for JVM Targets
DESCRIPTION: Example of using the new executable DSL to configure execution tasks and Gradle distributions for JVM targets in Kotlin Multiplatform.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm {
        @OptIn(ExperimentalKotlinGradlePluginApi::class)
        binaries {
            executable {
                mainClass.set("foo.MainKt")
            }

            executable(KotlinCompilation.MAIN_COMPILATION_NAME, "another") {
                mainClass.set("foo.MainAnotherKt")
            }

            executable(KotlinCompilation.TEST_COMPILATION_NAME) {
                mainClass.set("foo.MainTestKt")
            }

            executable(KotlinCompilation.TEST_COMPILATION_NAME, "another") {
                mainClass.set("foo.MainAnotherTestKt")
            }
        }
    }
}

----------------------------------------

TITLE: Configuring cinterop for iOS Library in Kotlin DSL
DESCRIPTION: This snippet demonstrates how to configure cinterop for an iOS library in the Kotlin DSL build script. It shows setting up the definition file, include directories, and linker options.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64() {
        compilations.getByName("main") {
            val DateTools by cinterops.creating {
                // Path to the .def file
                definitionFile.set(project.file("src/nativeInterop/cinterop/DateTools.def"))

                // Directories for header search (an analogue of the -I<path> compiler option)
                includeDirs("include/this/directory", "path/to/another/directory")
            }
            val anotherInterop by cinterops.creating { /* ... */ }
        }

        binaries.all {
            // Linker options required to link to the library.
            linkerOpts("-L/path/to/library/binaries", "-lbinaryname")
        }
    }
}

----------------------------------------

TITLE: Specifying Headers for CocoaPods Integration
DESCRIPTION: Kotlin code snippet demonstrating how to specify main headers explicitly for a Pod without a .modulemap file.

LANGUAGE: kotlin
CODE:
pod("NearbyMessages") {
    version = "1.1.1"
    headers = "GNSMessages.h"
}

----------------------------------------

TITLE: Inline Functions with Default Functional Parameters (Kotlin)
DESCRIPTION: Demonstrates the new ability to define inline functions with default values for inlined functional parameters, allowing for more flexible and reusable inline function definitions.

LANGUAGE: kotlin
CODE:
inline fun <E> Iterable<E>.strings(transform: (E) -> String = { it.toString() }) =
    map { transform(it) }

val defaultStrings = listOf(1, 2, 3).strings()
val customStrings = listOf(1, 2, 3).strings { "($it)" } 

fun main(args: Array<String>) {
    println("defaultStrings = $defaultStrings")
    println("customStrings = $customStrings")
}

----------------------------------------

TITLE: Basic Text Output in Kotlin Notebook
DESCRIPTION: Examples of basic text output using variables and string interpolation.

LANGUAGE: kotlin
CODE:
val a1: Int = 1
val a2: Int = 2
var a3: Int? = a1 + a2

"My answer is $a3"

----------------------------------------

TITLE: Printing Hello World in Kotlin Notebook
DESCRIPTION: This snippet demonstrates how to print a simple greeting message in a Kotlin Notebook. It's the first code example in the tutorial to familiarize users with running code cells.

LANGUAGE: kotlin
CODE:
println("Hello, this is a Kotlin Notebook!")

----------------------------------------

TITLE: Navigation Entry Format in YAML
DESCRIPTION: YAML structure showing how to define navigation entries with markdown source file, URL path and title.

LANGUAGE: yaml
CODE:
- md: IMMUTABILITY.md
  url: immutability.html
  title: "Immutability"

----------------------------------------

TITLE: Creating Additional Source Sets in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to create additional source sets in a Kotlin Multiplatform project using the Kotlin DSL. It shows how to reapply the default hierarchy template and manually configure additional source sets.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm()
    macosArm64()
    iosArm64()
    iosSimulatorArm64()

    // Apply the default hierarchy again. It'll create, for example, the iosMain source set:
    applyDefaultHierarchyTemplate()

    sourceSets {
        // Create an additional jvmAndMacos source set:
        val jvmAndMacos by creating {
            dependsOn(commonMain.get())
        }

        macosArm64Main.get().dependsOn(jvmAndMacos)
        jvmMain.get().dependsOn(jvmAndMacos)
    }
}

----------------------------------------

TITLE: Configuring Podfile for Kotlin Library in iOS and tvOS
DESCRIPTION: This Ruby code snippet shows how to set up a Podfile for a multi-target Xcode project, including a Kotlin library as a CocoaPods dependency for both iOS and tvOS targets. It specifies different platform versions for each target.

LANGUAGE: ruby
CODE:
target 'iosApp' do
  use_frameworks!
  platform :ios, '16.0'
  # Pods for iosApp
  pod 'kotlin_library', :path => '../kotlin-library'
end

target 'TVosApp' do
  use_frameworks!
  platform :tvos, '16.0'

  # Pods for TVosApp
  pod 'kotlin_library', :path => '../kotlin-library'
end

----------------------------------------

TITLE: KDoc Export to Objective-C Headers Example
DESCRIPTION: Demonstrates how KDoc comments in Kotlin code are exported to generated Objective-C headers using the experimental -Xexport-kdoc compiler option.

LANGUAGE: kotlin
CODE:
/**
 * Prints the sum of the arguments.
 * Properly handles the case when the sum doesn't fit in 32-bit integer.
 */
fun printSum(a: Int, b: Int) = println(a.toLong() + b)

LANGUAGE: objc
CODE:
/**
 * Prints the sum of the arguments.
 * Properly handles the case when the sum doesn't fit in 32-bit integer.
 */
+ (void)printSumA:(int32_t)a b:(int32_t)b __attribute__((swift_name("printSum(a:b:)")));

----------------------------------------

TITLE: Declaring Multiple JVM Targets (Deprecated)
DESCRIPTION: Example showing the deprecated approach of declaring multiple JVM targets in a single Gradle project.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm("jvmKtor") {
        attributes.attribute(/* ... */)
    }
    jvm("jvmOkHttp") {
        attributes.attribute(/* ... */)
    }

    sourceSets {
        val commonMain by getting
        val commonJvmMain by sourceSets.creating {
            dependsOn(commonMain)
            dependencies {
                // Shared dependencies
            }
        }
        val jvmKtorMain by getting {
            dependsOn(commonJvmMain)
            dependencies {
                // Ktor dependencies
            }
        }
        val jvmOkHttpMain by getting {
            dependsOn(commonJvmMain)
            dependencies {
                // OkHttp dependencies
            }
        }
    }
}

----------------------------------------

TITLE: Basic Kotlin Multiplatform Greeting Function
DESCRIPTION: Simple example of common code that can be shared across platforms using a basic greeting function.

LANGUAGE: kotlin
CODE:
fun greeting() {
    println("Hello, Kotlin Multiplatform!")
}

----------------------------------------

TITLE: Adding CocoaPods Dependency in Groovy DSL
DESCRIPTION: This snippet demonstrates how to add a CocoaPods dependency (SDWebImage) to a Kotlin Multiplatform project using the Groovy DSL build script.

LANGUAGE: groovy
CODE:
kotlin {
    cocoapods {
        version = '2.0'
        //...
        pod('SDWebImage') {
            version = '5.20.0'
        }
    }
}

----------------------------------------

TITLE: Instantiation of annotation classes
DESCRIPTION: Example showing how to instantiate annotation classes in Kotlin 1.5.30.

LANGUAGE: kotlin
CODE:
annotation class InfoMarker(val info: String)

fun processInfo(marker: InfoMarker) = ...

fun main(args: Array<String>) {
    if (args.size != 0)
        processInfo(getAnnotationReflective(args))
    else
        processInfo(InfoMarker("default"))
}

----------------------------------------

TITLE: Runtime Representation Examples
DESCRIPTION: Demonstrates different scenarios where inline classes are boxed or unboxed at runtime.

LANGUAGE: kotlin
CODE:
interface I

@JvmInline
value class Foo(val i: Int) : I

fun asInline(f: Foo) {}
fun <T> asGeneric(x: T) {}
fun asInterface(i: I) {}
fun asNullable(i: Foo?) {}

fun <T> id(x: T): T = x

----------------------------------------

TITLE: Configuring Individual Compilation Settings
DESCRIPTION: Demonstrates how to configure settings for a specific compilation within a target in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm {
        val main by compilations.getting {
            compileTaskProvider.configure {
                compilerOptions {
                    jvmTarget.set(JvmTarget.JVM_1_8)
                }
            }
        }
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    jvm {
        compilations.main {
            compileTaskProvider.configure {
                compilerOptions {
                    jvmTarget = JvmTarget.JVM_1_8
                }
            }
        }
    }
}

----------------------------------------

TITLE: Improved type inference for recursive generic types
DESCRIPTION: Shows the improvement in type inference for recursive generic types in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
val containerB = PostgreSQLContainer(DockerImageName.parse("postgres:13-alpine"))
  .withDatabaseName("db")
  .withUsername("user")
  .withPassword("password")
  .withInitScript("sql/schema.sql")

----------------------------------------

TITLE: Using Java Arrays in Kotlin
DESCRIPTION: Shows how to work with Java arrays in Kotlin, including passing primitive arrays and using array operations.

LANGUAGE: kotlin
CODE:
val javaObj = JavaArrayExample()
val array = intArrayOf(0, 1, 2, 3)
javaObj.removeIndices(array)  // passes int[] to method

val array = arrayOf(1, 2, 3, 4)
array[1] = array[1] * 2 // no actual calls to get() and set() generated
for (x in array) { // no iterator created
    print(x)
}

for (i in array.indices) { // no iterator created
    array[i] += 2
}

if (i in array.indices) { // same as (i >= 0 && i < array.size)
    print(array[i])
}

----------------------------------------

TITLE: Configuring Global Compiler Options in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to configure compiler options that apply across all targets in a Kotlin Multiplatform project.

LANGUAGE: kotlin
CODE:
kotlin {
    compilerOptions {
        allWarningsAsErrors.set(true)
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    compilerOptions {
        allWarningsAsErrors = true
    }
}

----------------------------------------

TITLE: Covariance Example in Java
DESCRIPTION: Demonstrates Java's approach to collection inheritance and covariance using wildcards.

LANGUAGE: java
CODE:
class Shape {}

class Rectangle extends Shape {}

public void doSthWithShapes(List<? extends Shape> shapes) {}

public void main() {
    var rectangles = List.of(new Rectangle(), new Rectangle());
    doSthWithShapes(rectangles);
}

----------------------------------------

TITLE: Enabling CocoaPods Plugin in Kotlin Gradle Project
DESCRIPTION: This snippet shows how to apply the CocoaPods plugin in a Kotlin multiplatform project's build.gradle.kts file. It includes the multiplatform plugin and the native.cocoapods plugin.

LANGUAGE: kotlin
CODE:
plugins {
   kotlin("multiplatform") version "%kotlinVersion%"
   kotlin("native.cocoapods") version "%kotlinVersion%"
}

----------------------------------------

TITLE: Building XCFrameworks in Kotlin/Native
DESCRIPTION: Shows how to create XCFrameworks for iOS targets using both Kotlin and Groovy DSL in Gradle.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework

plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
}

kotlin {
    val xcf = XCFramework()
    val iosTargets = listOf(iosX64(), iosArm64(), iosSimulatorArm64())
    
    iosTargets.forEach {
        it.binaries.framework {
            baseName = "shared"
            xcf.add(this)
        }
    }
}

LANGUAGE: groovy
CODE:
import org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '%kotlinVersion%'
}

kotlin {
    def xcf = new XCFrameworkConfig(project)
    def iosTargets = [iosX64(), iosArm64(), iosSimulatorArm64()]
    
    iosTargets.forEach {
        it.binaries.framework {
            baseName = 'shared'
            xcf.add(it)
        }
    }
}

----------------------------------------

TITLE: Using buildMap() with Builder Type Inference in Kotlin
DESCRIPTION: This snippet demonstrates how to use the buildMap() function with builder type inference. It shows how the compiler can infer type arguments based on the calls inside the lambda argument.

LANGUAGE: kotlin
CODE:
fun addEntryToMap(baseMap: Map<String, Number>, additionalEntry: Pair<String, Int>?) {
   val myMap = buildMap {
       putAll(baseMap)
       if (additionalEntry != null) {
           put(additionalEntry.first, additionalEntry.second)
       }
   }
}

----------------------------------------

TITLE: Full Gradle Build Script Example in Kotlin
DESCRIPTION: This snippet provides a complete Kotlin-based Gradle build script example for setting up KSP. It includes plugin configuration, repository setup, and dependencies.

LANGUAGE: kotlin
CODE:
plugins {
    id("com.google.devtools.ksp") version "%kspSupportedKotlinVersion%-%kspVersion%"
    kotlin("jvm")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib-jdk8"))
    implementation("com.google.dagger:dagger-compiler:2.51.1")
    ksp("com.google.dagger:dagger-compiler:2.51.1")
}

----------------------------------------

TITLE: Declaring Android Dependencies in Source Sets - Groovy
DESCRIPTION: Shows how to add Android dependencies to a specific Android source set in a Kotlin Multiplatform project using Groovy DSL in the build.gradle file.

LANGUAGE: groovy
CODE:
sourceSets {
    androidMain {
        dependencies {
            implementation 'com.example.android:app-magic:12.3'
        }
    }
}

----------------------------------------

TITLE: Class Layout in Kotlin
DESCRIPTION: Recommended order for organizing the contents of a Kotlin class.

LANGUAGE: plaintext
CODE:
1. Property declarations and initializer blocks
2. Secondary constructors
3. Method declarations
4. Companion object

----------------------------------------

TITLE: Lambda Expression Usage in Kotlin
DESCRIPTION: Shows how to create and use lambda expressions with collections and function types.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(1, -2, 3, -4, 5, -6)
    val positives = numbers.filter { x -> x > 0 }
    val negatives = numbers.filter { x: Int -> x < 0 }
    println(positives)
    // [1, 3, 5]
    println(negatives)
    // [-2, -4, -6]
}

----------------------------------------

TITLE: Declaring npm dependencies in Gradle
DESCRIPTION: Illustrates how to declare npm dependencies using the npm() function in the Gradle build script for both Kotlin and Groovy DSL.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation(npm("react", "> 14.0.0 <=16.9.0"))
}

LANGUAGE: groovy
CODE:
dependencies {
    implementation npm('react', '> 14.0.0 <=16.9.0')
}

----------------------------------------

TITLE: Installing Dependencies for Kotlin Website Local Development
DESCRIPTION: Commands for installing frontend and Python dependencies required to run the Kotlin website locally for development purposes.

LANGUAGE: shell
CODE:
# install frontend dependencies
yarn install

# at first start you need to build the static
yarn run next-build-static

# run NextJS server
yarn run next-dev

# run webpack dev server for everything else
yarn start

# install dependencies for the python server
pip  install --no-build-isolation -r requirements.txt

# run python server
python3 kotlin-website.py

----------------------------------------

TITLE: Using Array Parameters in Java Annotations in Kotlin
DESCRIPTION: These examples demonstrate how to use Java annotations with array parameters in Kotlin code.

LANGUAGE: kotlin
CODE:
@AnnWithArrayValue("abc", "foo", "bar") class C

@AnnWithArrayMethod(names = ["abc", "foo", "bar"]) 
class C

----------------------------------------

TITLE: Excluding Declarations from DCE in Kotlin/JS Gradle Configuration
DESCRIPTION: Gradle configuration to keep specific declarations from being eliminated during DCE. Uses the keep function to specify fully qualified names of declarations that should be preserved in the final JavaScript output.

LANGUAGE: groovy
CODE:
kotlin {
    js {
        browser {
            dceTask {
                keep("myKotlinJSModule.org.example.getName", "myKotlinJSModule.org.example.User" )
            }
            binaries.executable()
        }
    }
}

----------------------------------------

TITLE: Running Playwright Tests for Kotlin Website
DESCRIPTION: Commands for running various types of Playwright tests (e2e, visual, production) for the Kotlin website in different modes (headless, headed, debug).

LANGUAGE: shell
CODE:
# Run all tests in headless mode locally
yarn test

# Run e2e tests locally, including visual tests
yarn test:e2e

# Run e2e tests without visual tests locally
yarn test:e2e:skip-visual

# Run production subset of e2e tests locally
yarn test:production

# Run tests in CI environments
yarn run test:e2e:ci
yarn test:production:ci

# Run tests in headed mode locally
yarn test:e2e:headed
yarn test:production:headed

# Run e2e tests in headed mode with debug locally
yarn test:e2e:debug
yarn test:production:debug

# Generate test for user interactions
yarn test:e2e:new

# Update screenshots when page has changed intentionally
yarn test:e2e:update

----------------------------------------

TITLE: Dynamic Function Calls in Kotlin
DESCRIPTION: Demonstrates calling arbitrary functions on dynamic type variables, including spread operator usage. Shows how dynamic types allow calling undefined methods that will be passed through to JavaScript.

LANGUAGE: kotlin
CODE:
dyn.whatever(1, "foo", dyn) // 'whatever' is not defined anywhere
dyn.whatever(*arrayOf(1, 2, 3))

----------------------------------------

TITLE: Using Java Customer Class in Kotlin
DESCRIPTION: This Kotlin code demonstrates how to create an instance of the Java Customer class and use its methods.

LANGUAGE: kotlin
CODE:
val customer = Customer("Phase")
println(customer.name)
println(customer.placeOrder())

----------------------------------------

TITLE: Configuring Project-Level JVM Target
DESCRIPTION: Shows how to set JVM target version at project level using the new compilerOptions block

LANGUAGE: kotlin
CODE:
kotlin {
    compilerOptions {
        jvmTarget.set(JVM.Target_11)
    }
}

----------------------------------------

TITLE: Declaring and Using Annotation Constructors in Kotlin
DESCRIPTION: This snippet demonstrates how to declare an annotation with a constructor and use it in Kotlin code.

LANGUAGE: kotlin
CODE:
annotation class Special(val why: String)

@Special("example") class Foo {}

----------------------------------------

TITLE: Configuring Kotlin Test Dependencies in Gradle
DESCRIPTION: Adding required test dependencies to build.gradle.kts/build.gradle for kotlin.test and JUnit integration

LANGUAGE: kotlin
CODE:
dependencies {
    // Other dependencies.
    testImplementation(kotlin("test"))
}

LANGUAGE: groovy
CODE:
dependencies {
    // Other dependencies.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
}

----------------------------------------

TITLE: Annotating Constructors and Property Accessors in Kotlin
DESCRIPTION: These examples show how to annotate primary constructors and property accessors in Kotlin.

LANGUAGE: kotlin
CODE:
class Foo @Inject constructor(dependency: MyDependency) { ... }

class Foo {
    var x: MyDependency? = null
        @Inject set
}

----------------------------------------

TITLE: Implementing REST Controller with Kotlin Collections
DESCRIPTION: Creates a REST controller that returns a list of Message objects using Spring Boot annotations and Kotlin's listOf() function.

LANGUAGE: kotlin
CODE:
package demo

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

@RestController
@RequestMapping("/")
class MessageController {
    @GetMapping
    fun listMessages() = listOf(
        Message("1", "Hello!"),
        Message("2", "Bonjour!"),
        Message("3", "Privet!"),
    )
}

----------------------------------------

TITLE: String Concatenation in Java and Kotlin
DESCRIPTION: Demonstrates string concatenation using Java's + operator versus Kotlin's string templates with $ symbol interpolation.

LANGUAGE: java
CODE:
String name = "Joe";
System.out.println("Hello, " + name);
System.out.println("Your name is " + name.length() + " characters long");

LANGUAGE: kotlin
CODE:
val name = "Joe"
println("Hello, $name")
println("Your name is ${name.length} characters long")

----------------------------------------

TITLE: Markdown Title Comment for GSoC Documentation
DESCRIPTION: Hidden markdown comment specifying the page title for the documentation.

LANGUAGE: markdown
CODE:
[//]: # (title: Google Summer of Code with Kotlin)

----------------------------------------

TITLE: Using While and Do-While Loops in Kotlin
DESCRIPTION: Demonstrates the usage of while and do-while loops in Kotlin, showing the difference in condition checking time between the two.

LANGUAGE: kotlin
CODE:
while (x > 0) {
    x--
}

do {
    val y = retrieveData()
} while (y != null) // y is visible here!

----------------------------------------

TITLE: Updating Message Data Class for CrudRepository in Kotlin
DESCRIPTION: Modifies the Message data class to work with CrudRepository by adding @Table and @Id annotations, and adjusting the constructor parameters.

LANGUAGE: kotlin
CODE:
// Message.kt
package demo

import org.springframework.data.annotation.Id
import org.springframework.data.relational.core.mapping.Table

@Table("MESSAGES")
data class Message(val text: String, @Id val id: String? = null)

----------------------------------------

TITLE: Disabling DCE in Kotlin/JS Gradle Configuration
DESCRIPTION: Gradle configuration to completely disable dead code elimination by setting the devMode option to true in the dceTask block.

LANGUAGE: groovy
CODE:
kotlin {
    js {
        browser {
            dceTask {
                dceOptions.devMode = true
            }
        }
        binaries.executable()
    }
}

----------------------------------------

TITLE: Configuring Yarn dependency resolutions in Gradle
DESCRIPTION: Demonstrates how to configure Yarn's selective dependency resolutions for a Kotlin/JS project in the Gradle build script.

LANGUAGE: kotlin
CODE:
rootProject.plugins.withType<YarnPlugin> {
    rootProject.the<YarnRootExtension>().apply {
        resolution("react", "16.0.0")
        resolution("processor/decamelize", "3.0.0")
    }
}

----------------------------------------

TITLE: Writing Unit Tests in Kotlin with JUnit
DESCRIPTION: Demonstrates how to write unit tests in Kotlin using JUnit @Test annotations and Kotlin's assertion functions. Shows examples of testing a sum function and a computation with setup, including the use of backtick-quoted test names for better readability.

LANGUAGE: kotlin
CODE:
import org.junit.Test                   // Tests
import kotlin.test.*                    // The following example works for JVM only

class SampleTest {
    @Test
    fun `test sum`() {                  // Write test names with whitespaces in backticks
        val a = 1
        val b = 41
        assertEquals(42, sum(a, b), "Wrong result for sum($a, $b)")
    }

    @Test
    fun `test computation`() {
        assertTrue("Computation failed") {
            setup()                     // Use lambda returning the test subject
            compute()
        }
    }
}

----------------------------------------

TITLE: Adding Kotlin Reflect Dependency in Gradle (Kotlin DSL)
DESCRIPTION: Shows how to add the kotlin-reflect dependency in a Gradle build script using Kotlin DSL

LANGUAGE: kotlin
CODE:
dependencies {
    implementation(kotlin("reflect"))
}

----------------------------------------

TITLE: Using Windowed Function on Collections in Kotlin
DESCRIPTION: Shows the usage of windowed() function to retrieve all possible ranges of collection elements of a given size. It also demonstrates the use of optional parameters and transformations.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five")    
    println(numbers.windowed(3))
}

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = (1..10).toList()
    println(numbers.windowed(3, step = 2, partialWindows = true))
    println(numbers.windowed(3) { it.sum() })
}

----------------------------------------

TITLE: Accessing Map Keys and Values Collections in Kotlin
DESCRIPTION: Shows how to access all keys and values of a map using the keys and values properties.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbersMap = mapOf("one" to 1, "two" to 2, "three" to 3)
    println(numbersMap.keys)
    println(numbersMap.values)
}

----------------------------------------

TITLE: Creating Custom Compilation for Integration Tests
DESCRIPTION: Shows how to create and configure a custom compilation for integration tests, including setting up dependencies and test tasks.

LANGUAGE: kotlin
CODE:
kotlin {
    jvm() {
        compilations {
            val main by getting
            
            val integrationTest by compilations.creating {
                defaultSourceSet {
                    dependencies {
                        implementation(main.compileDependencyFiles + main.output.classesDirs)
                        implementation(kotlin("test-junit"))
                    }
                }
                
                tasks.register<Test>("integrationTest") {
                    classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs
                    testClassesDirs = output.classesDirs
                }
            }
        }
    }
}

LANGUAGE: groovy
CODE:
kotlin {
    jvm() {
        compilations.create('integrationTest') {
            defaultSourceSet {
                dependencies {
                    def main = compilations.main
                    implementation(main.compileDependencyFiles + main.output.classesDirs)
                    implementation kotlin('test-junit')
                }
            }
           
            tasks.register('jvmIntegrationTest', Test) {
                classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs
                testClassesDirs = output.classesDirs
            }
        }
    }
}

----------------------------------------

TITLE: Using Return in Kotlin Expressions
DESCRIPTION: Demonstrates how 'return' can be used as part of a larger expression in Kotlin. This snippet shows a null check with the Elvis operator, returning from the function if the name is null.

LANGUAGE: kotlin
CODE:
val s = person.name ?: return

----------------------------------------

TITLE: Adding Git-based CocoaPods Dependency in Kotlin
DESCRIPTION: This snippet shows how to add a dependency on a Pod library from a custom Git repository in a Kotlin project's build.gradle.kts file. It demonstrates specifying the library name, Git URL, and version using tag, branch, or commit.

LANGUAGE: kotlin
CODE:
kotlin {
    iosArm64()

    cocoapods {
        version = "2.0"
        summary = "CocoaPods test library"
        homepage = "https://github.com/JetBrains/kotlin"

        ios.deploymentTarget = "16.0"

        pod("SDWebImage") {
            source = git("https://github.com/SDWebImage/SDWebImage") {
                tag = "5.20.0"
            }
        }

        pod("JSONModel") {
            source = git("https://github.com/jsonmodel/jsonmodel.git") {
                branch = "key-mapper-class"
            }
        }

        pod("CocoaLumberjack") {
            source = git("https://github.com/CocoaLumberjack/CocoaLumberjack.git") {
                commit = "3e7f595e3a459c39b917aacf9856cd2a48c4dbf3"
            }
        }
    }
}

----------------------------------------

TITLE: Configuring cinterop for iOS Framework in Groovy DSL
DESCRIPTION: This snippet illustrates how to configure cinterop for an iOS framework in the Groovy DSL build script. It shows setting up the definition file and compiler options for the framework.

LANGUAGE: groovy
CODE:
kotlin {
    iosArm64 {
        compilations.main {
            cinterops {
                DateTools {
                    // Path to the .def file
                    definitionFile = project.file("src/nativeInterop/cinterop/MyFramework.def")

                    compilerOpts("-framework", "MyFramework", "-F/path/to/framework/")
                }
                anotherInterop { /* ... */ }
            }
        }

        binaries.all {
            // Tell the linker where the framework is located.
            linkerOpts("-framework", "MyFramework", "-F/path/to/framework/")
        }
    }
}

----------------------------------------

TITLE: Local Return with Explicit Label in Kotlin Lambda
DESCRIPTION: Illustrates how to use a labeled return statement within a lambda expression in Kotlin. This allows for a local return from the lambda rather than the entire function.

LANGUAGE: kotlin
CODE:
fun foo() {
    listOf(1, 2, 3, 4, 5).forEach lit@{
        if (it == 3) return@lit // local return to the caller of the lambda - the forEach loop
        print(it)
    }
    print(" done with explicit label")
}

fun main() {
    foo()
}

----------------------------------------

TITLE: Creating a DataFrame with Temperature Data in Kotlin
DESCRIPTION: This code creates a DataFrame containing monthly average temperature data for three cities using the Kotlin DataFrame library.

LANGUAGE: kotlin
CODE:
val months = listOf(
    "January", "February",
    "March", "April", "May",
    "June", "July", "August",
    "September", "October", "November",
    "December"
)
val tempBerlin =
    listOf(-0.5, 0.0, 4.8, 9.0, 14.3, 17.5, 19.2, 18.9, 14.5, 9.7, 4.7, 1.0)
val tempMadrid =
    listOf(6.3, 7.9, 11.2, 12.9, 16.7, 21.1, 24.7, 24.2, 20.3, 15.4, 9.9, 6.6)
val tempCaracas =
    listOf(27.5, 28.9, 29.6, 30.9, 31.7, 35.1, 33.8, 32.2, 31.3, 29.4, 28.9, 27.6)

val df = dataFrameOf(
    "Month" to months + months + months,
    "Temperature" to tempBerlin + tempMadrid + tempCaracas,
    "City" to List(12) { "Berlin" } + List(12) { "Madrid" } + List(12) { "Caracas" }
)
df.head(4)

----------------------------------------

TITLE: Configuring Kotlin/JS execution environment
DESCRIPTION: Demonstrates how to define the target execution environment (browser or Node.js) for a Kotlin/JS project in the Gradle build script.

LANGUAGE: groovy
CODE:
kotlin {
    js {
        browser {
        }
        binaries.executable()
    }
}

----------------------------------------

TITLE: Excluding Kotlin Libraries in Gradle (Groovy DSL)
DESCRIPTION: This Groovy snippet demonstrates how to exclude default Kotlin libraries from external dependencies in a Gradle project using the Groovy DSL. It uses the 'exclude' method with a map to specify the group to be excluded.

LANGUAGE: groovy
CODE:
dependencies {
    implementation('some.group.id:some.library:someversion') {
        exclude group: 'org.jetbrains.kotlin'
    }
}

----------------------------------------

TITLE: Enabling CSS support in Kotlin/JS
DESCRIPTION: Shows how to enable and configure CSS support for Kotlin/JS projects in the Gradle build script for both Kotlin and Groovy DSL.

LANGUAGE: kotlin
CODE:
browser {
    commonWebpackConfig {
        cssSupport {
            enabled.set(true)
        }
    }
}

LANGUAGE: groovy
CODE:
browser {
    commonWebpackConfig {
        cssSupport {
            it.enabled = true
        }
    }
}

----------------------------------------

TITLE: Using Custom Selectors and Comparators in Kotlin Aggregate Operations
DESCRIPTION: This code demonstrates the use of minByOrNull() and maxWithOrNull() functions, which utilize custom selector functions and comparators respectively for finding minimum and maximum values in collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf(5, 42, 10, 4)
    val min3Remainder = numbers.minByOrNull { it % 3 }
    println(min3Remainder)

    val strings = listOf("one", "two", "three", "four")
    val longestString = strings.maxWithOrNull(compareBy { it.length })
    println(longestString)
}

----------------------------------------

TITLE: Passing Raw Compiler Arguments in Kotlin Ant Tasks
DESCRIPTION: Demonstrates how to pass custom raw compiler arguments to Kotlin Ant tasks using the compilerarg element. This can be used with kotlinc, kotlin2js, and withKotlin tasks.

LANGUAGE: XML
CODE:
<kotlinc src="${test.data}/hello.kt" output="${temp}/hello.jar">
    <compilerarg value="-Xno-inline"/>
    <compilerarg line="-Xno-call-assertions -Xno-param-assertions"/>
    <compilerarg value="-Xno-optimize"/>
</kotlinc>

----------------------------------------

TITLE: Kotlin Package Import Declarations
DESCRIPTION: Kotlin declarations for importing nested JavaScript package hierarchies using @JsModule and @JsQualifier annotations.

LANGUAGE: kotlin
CODE:
@file:JsModule("extModule")
@file:JsQualifier("mylib.pkg1")

package extlib.pkg1

external fun foo()

external fun bar()

LANGUAGE: kotlin
CODE:
@file:JsModule("extModule")
@file:JsQualifier("mylib.pkg2")

package extlib.pkg2

external fun baz()

----------------------------------------

TITLE: Defining Expected and Actual Functions in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to declare an expected function in the common source set and implement actual functions in platform-specific source sets for JVM and Native targets.

LANGUAGE: kotlin
CODE:
// In commonMain
package identity

class Identity(val userName: String, val processID: Long)

expect fun buildIdentity(): Identity

LANGUAGE: kotlin
CODE:
// In jvmMain
package identity

import java.lang.System
import java.lang.ProcessHandle

actual fun buildIdentity() = Identity(
    System.getProperty("user.name") ?: "None",
    ProcessHandle.current().pid()
)

LANGUAGE: kotlin
CODE:
// In nativeMain
package identity

import kotlinx.cinterop.toKString
import platform.posix.getlogin
import platform.posix.getpid

actual fun buildIdentity() = Identity(
    getlogin()?.toKString() ?: "None",
    getpid().toLong()
)

----------------------------------------

TITLE: Declaring Android Dependencies in androidTarget Block - Groovy
DESCRIPTION: Demonstrates how to add Android dependencies within the androidTarget block using Groovy DSL, which provides better organization and clarity for Android-specific dependencies.

LANGUAGE: groovy
CODE:
androidTarget {
    //...
    dependencies {
        implementation 'com.example.android:app-magic:12.3'
    }
}

----------------------------------------

TITLE: Declaring an Annotation with Meta-annotations in Kotlin
DESCRIPTION: This example shows how to declare an annotation with meta-annotations to specify its properties such as target, retention, and documentation.

LANGUAGE: kotlin
CODE:
@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION,
        AnnotationTarget.TYPE_PARAMETER, AnnotationTarget.VALUE_PARAMETER, 
        AnnotationTarget.EXPRESSION)
@Retention(AnnotationRetention.SOURCE)
@MustBeDocumented
annotation class Fancy

----------------------------------------

TITLE: Using plusAssign Operator for Adding Elements in Kotlin
DESCRIPTION: Demonstrates the use of the += operator (plusAssign) to add elements to a mutable list. The example shows adding both single elements and collections.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = mutableListOf("one", "two")
    numbers += "three"
    println(numbers)
    numbers += listOf("four", "five")    
    println(numbers)
}

----------------------------------------

TITLE: Performing Basic Arithmetic in Kotlin Notebook
DESCRIPTION: This snippet shows how to perform a simple arithmetic operation in a Kotlin Notebook. It demonstrates that notebooks can be used for quick calculations.

LANGUAGE: kotlin
CODE:
10 + 10

----------------------------------------

TITLE: Using Safe Call Operator in Kotlin
DESCRIPTION: Demonstrates the use of the safe call operator (?.) to access properties and call functions on potentially null objects safely.

LANGUAGE: kotlin
CODE:
fun lengthString(maybeString: String?): Int? = maybeString?.length

fun main() { 
    val nullString: String? = null
    println(lengthString(nullString))
}

----------------------------------------

TITLE: Kotlin Function Reference Example
DESCRIPTION: Shows how to create and use function references with the :: operator

LANGUAGE: kotlin
CODE:
fun isOdd(x: Int) = x % 2 != 0

fun main() {
    val numbers = listOf(1, 2, 3)
    println(numbers.filter(::isOdd))
}

----------------------------------------

TITLE: Stable collection builders example
DESCRIPTION: Shows the usage of stable collection builders in Kotlin 1.6.0.

LANGUAGE: kotlin
CODE:
fun main() {
    val x = listOf('b', 'c')
    val y = buildList {
        add('a')
        addAll(x)
        add('d')
    }
    println(y)  // [a, b, c, d]
}

----------------------------------------

TITLE: Gradle Run Command for Kotlin/JS
DESCRIPTION: Command to run Kotlin/JS applications using the Gradle wrapper. This executes the jsRun task which builds and runs the JavaScript application.

LANGUAGE: bash
CODE:
./gradlew jsRun

----------------------------------------

TITLE: Creating Data Classes in Kotlin
DESCRIPTION: Demonstrates how to create a data class in Kotlin which automatically provides getters, setters, equals(), hashCode(), toString(), copy() and component functions.

LANGUAGE: kotlin
CODE:
data class Customer(val name: String, val email: String)

----------------------------------------

TITLE: Creating a 2D Density Plot with Lets-Plot for Kotlin
DESCRIPTION: This snippet creates a 2D density plot with a scatter plot background using Lets-Plot for Kotlin, including customization of colors and legend position.

LANGUAGE: kotlin
CODE:
val densityPlot = letsPlot(data) { x = "x"; y = "y" } + ggsize(600, 300) + geomPoint(
    color = "black",
    alpha = .1
) + geomDensity2D { color = "..level.." } +
        scaleColorGradient(low = "dark_green", high = "yellow", guide = guideColorbar(barHeight = 10, barWidth = 300)) +
        theme().legendPositionBottom()
densityPlot

----------------------------------------

TITLE: Handling forward declarations in Kotlin/Native
DESCRIPTION: Shows how to handle forward declarations from C libraries in Kotlin/Native using explicit casts.

LANGUAGE: kotlin
CODE:
fun test() {
    consumeStruct(produceStruct() as CPointer<cnames.structs.ForwardDeclaredStruct>)
}

----------------------------------------

TITLE: Lazy Initialization of Top-Level Properties in Kotlin/JS
DESCRIPTION: Shows an example of lazy initialization for top-level properties in Kotlin/JS, which improves application startup performance.

LANGUAGE: kotlin
CODE:
val a = run {
    val result = // intensive computations
    println(result)
    result
} // value is computed upon the first usage

----------------------------------------

TITLE: Creating a Sequence from Elements in Kotlin
DESCRIPTION: Demonstrates how to create a sequence using the sequenceOf() function, which lists elements as arguments.

LANGUAGE: kotlin
CODE:
val numbersSequence = sequenceOf("four", "three", "two", "one")

----------------------------------------

TITLE: Matching with Regex at a particular position
DESCRIPTION: Examples showing how to use the new Regex.matchAt() and Regex.matchesAt() functions to check for regex matches at specific positions in a string.

LANGUAGE: kotlin
CODE:
fun main(){
    val releaseText = "Kotlin 1.5.30 is released!"
    // regular expression: one digit, dot, one digit, dot, one or more digits
    val versionRegex = "\\d[.]\\d[.]\\d+".toRegex()
    println(versionRegex.matchesAt(releaseText, 0)) // "false"
    println(versionRegex.matchesAt(releaseText, 7)) // "true"
}

LANGUAGE: kotlin
CODE:
fun main(){
    val releaseText = "Kotlin 1.5.30 is released!"
    val versionRegex = "\\d[.]\\d[.]\\d+".toRegex()
    println(versionRegex.matchAt(releaseText, 0)) // "null"
    println(versionRegex.matchAt(releaseText, 7)?.value) // "1.5.30"
}

----------------------------------------

TITLE: Advanced Builder Inference Examples in Kotlin
DESCRIPTION: These snippets showcase advanced features of builder inference, including inferring multiple type arguments and working with interdependent lambdas.

LANGUAGE: kotlin
CODE:
fun <K, V> myBuilder(
    listBuilder: MutableList<V>.() -> Unit,
    mapBuilder: MutableMap<K, V>.() -> Unit
): Pair<List<V>, Map<K, V>> =
    mutableListOf<V>().apply(listBuilder) to mutableMapOf<K, V>().apply(mapBuilder)

fun main() {
    val result = myBuilder(
        { add(1) },
        { put("key", 2) }
    )
    // result has Pair<List<Int>, Map<String, Int>> type
}

LANGUAGE: kotlin
CODE:
fun <K, V> myBuilder1(
    mapBuilder: MutableMap<K, V>.() -> K
): Map<K, V> = mutableMapOf<K, V>().apply { mapBuilder() }

fun <K, V> myBuilder2(
    mapBuilder: MutableMap<K, V>.(K) -> Unit
): Map<K, V> = mutableMapOf<K, V>().apply { mapBuilder(2 as K) }

fun main() {
    // result1 has the Map<Long, String> type inferred
    val result1 = myBuilder1 {
        put(1L, "value")
        2
    }
    val result2 = myBuilder2 {
        put(1, "value 1")
        // You can use `it` as "postponed type variable" type
        put(it, "value 2")
    }
}

----------------------------------------

TITLE: Sample Test Using Power-assert
DESCRIPTION: Demonstrates a basic test case using the Power-assert plugin with string length comparison.

LANGUAGE: kotlin
CODE:
import kotlin.test.Test

class SampleTest {

    @Test
    fun testFunction() {
        val hello = "Hello"
        val world = "world!"
        assert(hello.length == world.substring(1, 4).length) { "Incorrect length" }
    }
}

----------------------------------------

TITLE: Background Test Launcher Implementation
DESCRIPTION: Kotlin implementation of a background test launcher for unit testing without main thread queue

LANGUAGE: kotlin
CODE:
package testlauncher

import platform.CoreFoundation.*
import kotlin.native.concurrent.*
import kotlin.native.internal.test.*
import kotlin.system.*

fun mainBackground(args: Array<String>) {
    val worker = Worker.start(name = "main-background")
    worker.execute(TransferMode.SAFE, { args.freeze() }) {
        val result = testLauncherEntryPoint(it)
        exitProcess(result)
    }
    CFRunLoopRun()
    error("CFRunLoopRun should never return")
}

----------------------------------------

TITLE: Creating a Line Chart with Kandy in Kotlin
DESCRIPTION: Generates a line chart using the Kandy library to visualize temperature data for different cities over months.

LANGUAGE: kotlin
CODE:
df.plot {
    line {
        x(Month)
        y(Temperature)
        color(City) {
            scale = categorical("Berlin" to Color.PURPLE, "Madrid" to Color.ORANGE, "Caracas" to Color.GREEN)
        }
        width = 1.5
    }
    layout.size = 1000 to 450
}

----------------------------------------

TITLE: Splitting Regex to a sequence
DESCRIPTION: Example demonstrating the new Regex.splitToSequence() function for lazy splitting of strings using regular expressions.

LANGUAGE: kotlin
CODE:
fun main(){
    val colorsText = "green, red , brown&blue, orange, pink&green"
    val regex = "[,\\s]+".toRegex()
    val mixedColor = regex.splitToSequence(colorsText)
        .onEach { println(it) }
        .firstOrNull { it.contains('&') }
    println(mixedColor) // "brown&blue"
}

----------------------------------------

TITLE: Disabling sources publication for all targets in Kotlin Multiplatform
DESCRIPTION: This code demonstrates how to disable the publication of sources for all targets in a Kotlin Multiplatform project using the withSourcesJar() API in the build.gradle.kts file.

LANGUAGE: kotlin
CODE:
kotlin {
    withSourcesJar(publish = false)

    jvm()
    linuxX64()
}

----------------------------------------

TITLE: Using If Expressions in Kotlin
DESCRIPTION: Demonstrates how to use if as an expression in Kotlin, including simple comparisons, with else clauses, and as part of variable assignments.

LANGUAGE: kotlin
CODE:
fun main() {
    val a = 2
    val b = 3

    var max = a
    if (a < b) max = b

    // With else
    if (a > b) {
      max = a
    } else {
      max = b
    }

    // As expression
    max = if (a > b) a else b

    // You can also use `else if` in expressions:
    val maxLimit = 1
    val maxOrLimit = if (maxLimit > a) maxLimit else if (a > b) a else b
  
    println("max is $max")
    // max is 3
    println("maxOrLimit is $maxOrLimit")
    // maxOrLimit is 3
}

----------------------------------------

TITLE: Compiling Mixed Kotlin and Java Source to JVM using withKotlin Ant Task
DESCRIPTION: Illustrates how to compile a project with both Kotlin and Java source code using the withKotlin Ant task. It combines the standard javac task with the withKotlin task to compile both languages.

LANGUAGE: XML
CODE:
<project name="Ant Task Test" default="build">
    <typedef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlin.lib}/kotlin-ant.jar"/>

    <target name="build">
        <delete dir="classes" failonerror="false"/>
        <mkdir dir="classes"/>
        <javac destdir="classes" includeAntRuntime="false" srcdir="src">
            <withKotlin/>
        </javac>
        <jar destfile="hello.jar">
            <fileset dir="classes"/>
        </jar>
    </target>
</project>

----------------------------------------

TITLE: Dynamic Method Chaining in Kotlin
DESCRIPTION: Shows how dynamic calls can be chained together, with each call returning another dynamic value.

LANGUAGE: kotlin
CODE:
dyn.foo().bar.baz()

----------------------------------------

TITLE: Installing CocoaPods with Homebrew
DESCRIPTION: Command for installing CocoaPods using the Homebrew package manager.

LANGUAGE: bash
CODE:
brew install cocoapods

----------------------------------------

TITLE: Basic Destructuring Declaration in Kotlin
DESCRIPTION: Shows how to destructure an object into individual variables using the component functions convention.

LANGUAGE: kotlin
CODE:
val (name, age) = person

----------------------------------------

TITLE: Using Path extensions in Kotlin JDK 7+
DESCRIPTION: Shows examples of using the new experimental extensions for java.nio.file.Path in Kotlin code.

LANGUAGE: kotlin
CODE:
// construct path with the div (/) operator
val baseDir = Path("/base")
val subDir = baseDir / "subdirectory" 

// list files in a directory
val kotlinFiles: List<Path> = Path("/home/user").listDirectoryEntries("*.kt")

----------------------------------------

TITLE: Declaring a Record Class in Kotlin
DESCRIPTION: This snippet shows how to declare a record class in Kotlin using the @JvmRecord annotation. It must be applied to a data class that meets specific requirements.

LANGUAGE: kotlin
CODE:
@JvmRecord
data class Person(val name: String, val age: Int)

----------------------------------------

TITLE: Using Reified Type Parameters in Kotlin Inline Functions
DESCRIPTION: Shows how to use reified type parameters in inline functions to access type information at runtime without reflection.

LANGUAGE: kotlin
CODE:
inline fun <reified T> TreeNode.findParentOfType(): T? {
    var p = parent
    while (p != null && p !is T) {
        p = p.parent
    }
    return p as T?
}

----------------------------------------

TITLE: Defining No-arg Annotation in Kotlin
DESCRIPTION: Creates a custom annotation that will trigger the no-arg constructor generation when applied to classes.

LANGUAGE: kotlin
CODE:
package com.my

annotation class Annotation

----------------------------------------

TITLE: Accessing Packaged Kotlin Function from JavaScript
DESCRIPTION: Demonstrates how to access a Kotlin function defined in a package from JavaScript, using both UMD/CommonJS and plain module systems.

LANGUAGE: kotlin
CODE:
package my.qualified.packagename

fun foo() = "Hello"

LANGUAGE: javascript
CODE:
alert(require('myModule').my.qualified.packagename.foo())

LANGUAGE: javascript
CODE:
alert(myModule.my.qualified.packagename.foo());

----------------------------------------

TITLE: Lateinit Top-Level Properties and Local Variables (Kotlin)
DESCRIPTION: Demonstrates the use of the lateinit modifier with top-level properties and local variables, allowing for delayed initialization of non-null properties.

LANGUAGE: kotlin
CODE:
class Node<T>(val value: T, val next: () -> Node<T>)

fun main(args: Array<String>) {
    // A cycle of three nodes:
    lateinit var third: Node<Int>

    val second = Node(2, next = { third })
    val first = Node(1, next = { second })

    third = Node(3, next = { first })

    val nodes = generateSequence(first) { it.next() }
    println("Values in the cycle: ${nodes.take(7).joinToString { it.value.toString() }}, ...")
}

----------------------------------------

TITLE: Generic Enum Access
DESCRIPTION: Demonstrates accessing enum values generically using enumEntries<T>().

LANGUAGE: kotlin
CODE:
enum class RGB { RED, GREEN, BLUE }

inline fun <reified T : Enum<T>> printAllValues() {
    println(enumEntries<T>().joinToString { it.name })
}

printAllValues<RGB>()

----------------------------------------

TITLE: Using Infix Notation for Kotlin Functions
DESCRIPTION: Demonstrates how to define and use infix functions in Kotlin, allowing for more readable function calls in certain situations.

LANGUAGE: kotlin
CODE:
infix fun Int.shl(x: Int): Int { ... }

// calling the function using the infix notation
1 shl 2

// is the same as
1.shl(2)

class MyStringCollection {
    infix fun add(s: String) { /*...*/ }
    
    fun build() {
        this add "abc"   // Correct
        add("abc")       // Correct
        //add "abc"        // Incorrect: the receiver must be specified
    }
}

----------------------------------------

TITLE: Converting Collection Types in Kotlin
DESCRIPTION: Shows how to convert between different collection types, such as creating a set from a list.

LANGUAGE: kotlin
CODE:
fun main() {
    val sourceList = mutableListOf(1, 2, 3)    
    val copySet = sourceList.toMutableSet()
    copySet.add(3)
    copySet.add(4)    
    println(copySet)
}

----------------------------------------

TITLE: Storing Properties in a Map in Kotlin
DESCRIPTION: This snippet demonstrates how to use a Map as a delegate for storing property values, useful for parsing JSON or other dynamic tasks.

LANGUAGE: kotlin
CODE:
class User(val map: Map<String, Any?>) {
    val name: String by map
    val age: Int     by map
}

fun main() {
    val user = User(mapOf(
        "name" to "John Doe",
        "age"  to 25
    ))
    println(user.name) // Prints "John Doe"
    println(user.age)  // Prints 25
}

----------------------------------------

TITLE: Collection Membership Check in Kotlin
DESCRIPTION: Shows how to check if an element exists in a collection using 'in' and '!in' operators.

LANGUAGE: kotlin
CODE:
if ("john@example.com" in emailsList) { ... }

if ("jane@example.com" !in emailsList) { ... }

----------------------------------------

TITLE: Gradle DSL Configuration Example
DESCRIPTION: Shows how to configure explicit API mode in Gradle build scripts for Kotlin libraries

LANGUAGE: kotlin
CODE:
kotlin {
    // for strict mode
    explicitApi()
    // or
    explicitApi = ExplicitApiMode.Strict
    
    // for warning mode 
    explicitApiWarning()
    // or
    explicitApi = ExplicitApiMode.Warning
}

----------------------------------------

TITLE: Support custom names for Xcode configuration in CocoaPods Gradle plugin
DESCRIPTION: Example demonstrating how to specify custom Xcode configuration names in the CocoaPods Gradle plugin.

LANGUAGE: kotlin
CODE:
cocoapods {
    // Maps custom Xcode configuration to NativeBuildType
    xcodeConfigurationToNativeBuildType["CUSTOM_DEBUG"] = NativeBuildType.DEBUG
    xcodeConfigurationToNativeBuildType["CUSTOM_RELEASE"] = NativeBuildType.RELEASE
}

----------------------------------------

TITLE: KDoc Parameter Documentation Syntax
DESCRIPTION: Shows the two equivalent syntaxes for documenting parameters in KDoc using the @param tag.

LANGUAGE: text
CODE:
@param name description.
@param[name] description.

----------------------------------------

TITLE: Configuring Source Sets in Kotlin Multiplatform
DESCRIPTION: Shows how to configure source sets, including predefined and custom source sets, in Kotlin and Groovy DSL.

LANGUAGE: Kotlin
CODE:
kotlin { 
    sourceSets { 
        val commonMain by getting { /* ... */ }
        val myMain by creating { /* ... */ }
    }
}

LANGUAGE: Groovy
CODE:
kotlin { 
    sourceSets { 
        commonMain { /* ... */ }
        myMain { /* ... */ }
    }
}

----------------------------------------

TITLE: Configuring Kotlin CocoaPods Gradle Plugin
DESCRIPTION: Full configuration of the Kotlin CocoaPods Gradle plugin in a project's build.gradle.kts file, including version, summary, homepage, and framework settings.

LANGUAGE: kotlin
CODE:
plugins {
    kotlin("multiplatform") version "%kotlinVersion%"
    kotlin("native.cocoapods") version "%kotlinVersion%"
}

kotlin {
    cocoapods {
        version = "1.0"
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
        name = "MyCocoaPod"

        framework {
            baseName = "MyFramework"
            isStatic = false
            transitiveExport = false
        }

        xcodeConfigurationToNativeBuildType["CUSTOM_DEBUG"] = NativeBuildType.DEBUG
        xcodeConfigurationToNativeBuildType["CUSTOM_RELEASE"] = NativeBuildType.RELEASE
    }
}

----------------------------------------

TITLE: Implementing Structural Equality in Kotlin
DESCRIPTION: Demonstrates how structural equality (==) is translated to equals() function calls with null handling.

LANGUAGE: kotlin
CODE:
a?.equals(b) ?: (b === null)

----------------------------------------

TITLE: Configuring Compilations in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to access and configure compilations, including custom compilations, in a Kotlin Multiplatform project.

LANGUAGE: Kotlin
CODE:
kotlin {
    jvm {
        val main by compilations.getting {
            output // get the main compilation output
        }
        compilations["test"].runtimeDependencyFiles // get the test runtime classpath
    }
}

LANGUAGE: Groovy
CODE:
kotlin {
    jvm {
        compilations.main.output // get the main compilation output
        compilations.test.runtimeDependencyFiles // get the test runtime classpath
    }
}

----------------------------------------

TITLE: Registering Custom Gradle Configuration in Kotlin
DESCRIPTION: This snippet demonstrates how to register a custom Gradle configuration using Kotlin DSL. It's a basic setup that can be expanded with additional configuration options.

LANGUAGE: kotlin
CODE:
configurations.register("customConfiguration") {
    // ...
}

----------------------------------------

TITLE: Collection Operations with Progressions
DESCRIPTION: Demonstrates using collection functions like filter with progressions.

LANGUAGE: kotlin
CODE:
fun main() {
    println((1..10).filter { it % 2 == 0 })
    // [2, 4, 6, 8, 10]
}

----------------------------------------

TITLE: Declaring JVM-Specific Inline Value Class
DESCRIPTION: Demonstrates how to declare an inline value class specifically for JVM backends using @JvmInline annotation.

LANGUAGE: kotlin
CODE:
@JvmInline
value class Password(private val s: String)

----------------------------------------

TITLE: Number Literal Constants in Kotlin
DESCRIPTION: Demonstrates various formats for numeric literals including underscore separators for readability.

LANGUAGE: kotlin
CODE:
val oneMillion = 1_000_000
val creditCardNumber = 1234_5678_9012_3456L
val socialSecurityNumber = 999_99_9999L
val hexBytes = 0xFF_EC_DE_5E
val bytes = 0b11010010_01101001_10010100_10010010
val bigFractional = 1_234_567.7182818284

----------------------------------------

TITLE: Slicing Collections in Kotlin
DESCRIPTION: Demonstrates the use of slice() function to retrieve specific elements from a collection using index ranges or sets of indices.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four", "five", "six")    
    println(numbers.slice(1..3))
    println(numbers.slice(0..4 step 2))
    println(numbers.slice(setOf(3, 5, 0)))    
}

----------------------------------------

TITLE: Configure All-open Plugin in Maven
DESCRIPTION: Shows how to configure the all-open plugin in a Maven pom.xml file, including plugin dependencies and annotation configuration.

LANGUAGE: xml
CODE:
<plugin>
    <artifactId>kotlin-maven-plugin</artifactId>
    <groupId>org.jetbrains.kotlin</groupId>
    <version>${kotlin.version}</version>

    <configuration>
        <compilerPlugins>
            <!-- Or "spring" for the Spring support -->
            <plugin>all-open</plugin>
        </compilerPlugins>

        <pluginOptions>
            <!-- Each annotation is placed on its own line -->
            <option>all-open:annotation=com.my.Annotation</option>
            <option>all-open:annotation=com.their.AnotherAnnotation</option>
        </pluginOptions>
    </configuration>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
    </dependencies>
</plugin>

----------------------------------------

TITLE: Kotlin Components Stability Table
DESCRIPTION: Markdown table showing the stability status of various Kotlin components, including their version of status entry and modes for sources and binaries.

LANGUAGE: markdown
CODE:
|**Component**|**Status Entered at version**|**Mode for Sources**|**Mode for Binaries**|
| --- | --- | --- | --- |
Kotlin/JVM|1.0|FS|FS|
kotlin-stdlib (JVM)|1.0|FS|FS
KDoc syntax|1.0|FS|N/A
Coroutines|1.3|FS|FS
kotlin-reflect (JVM)|1.0|SIR|SIR
Kotlin/JS|1.1|AIR|MF
Kotlin/Native|1.3|AIR|MF
Kotlin Scripts (*.kts)|1.2|AIR|MF
dokka|0.1|MF|N/A
Kotlin Scripting APIs|1.2|MF|MF
Compiler Plugin API|1.0|MF|MF
Serialization|1.3|MF|MF
Multiplatform Projects|1.2|MF|MF
Inline classes|1.3|MF|MF
Unsigned arithmetics|1.3|MF|MF
**All other experimental features, by default**|N/A|**MF**|**MF**

----------------------------------------

TITLE: Configuring External Repository in YAML
DESCRIPTION: YAML configuration block showing how to enable an external repository in data/_nav.yml. Defines path, navigation, base URL, branch and repository settings.

LANGUAGE: yaml
CODE:
  - title: Native
    external:
      path: kotlin-native
      nav: _nav_reference.yml
      base: /docs/reference/native
      branch: master
      repo: https://github.com/JetBrains/kotlin-native

----------------------------------------

TITLE: Declaring Explicit Supertype in Kotlin
DESCRIPTION: Demonstrates how to declare an explicit supertype for a class in Kotlin using a colon in the class header.

LANGUAGE: kotlin
CODE:
open class Base(p: Int)

class Derived(p: Int) : Base(p)

----------------------------------------

TITLE: Eliminating builder inference restrictions
DESCRIPTION: Example demonstrating the removal of builder inference restrictions in Kotlin 1.5.30.

LANGUAGE: kotlin
CODE:
@kotlin.ExperimentalStdlibApi
val list = buildList {
    add("a")
    add("b")
    set(1, null)
    val x = get(1)
    if (x != null) {
        removeAt(1)
    }
}

@kotlin.ExperimentalStdlibApi
val map = buildMap {
    put("a", 1)
    put("b", 1.1)
    put("c", 2f)
}

----------------------------------------

TITLE: Soft Keywords in Kotlin
DESCRIPTION: Keywords that act as modifiers in specific contexts but can be used as identifiers in other contexts, including by, catch, constructor, delegate, etc.



----------------------------------------

TITLE: Creating Strings from Collections
DESCRIPTION: Demonstrates transforming collections into strings using Java's Stream API versus Kotlin's joinToString() extension function.

LANGUAGE: java
CODE:
List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6);
String invertedOddNumbers = numbers
        .stream()
        .filter(it -> it % 2 != 0)
        .map(it -> -it)
        .map(Object::toString)
        .collect(Collectors.joining("; "));
System.out.println(invertedOddNumbers);

LANGUAGE: kotlin
CODE:
val numbers = listOf(1, 2, 3, 4, 5, 6)
val invertedOddNumbers = numbers
    .filter { it % 2 != 0 }
    .joinToString(separator = ";") {"${-it}"}
println(invertedOddNumbers)

----------------------------------------

TITLE: Sealed Class Constructor Implementation in Kotlin
DESCRIPTION: Shows how to implement constructors in sealed classes with inheritance and message handling.

LANGUAGE: kotlin
CODE:
sealed class Error(val message: String) {
    class NetworkError : Error("Network failure")
    class DatabaseError : Error("Database cannot be reached")
    class UnknownError : Error("An unknown error has occurred")
}

fun main() {
    val errors = listOf(Error.NetworkError(), Error.DatabaseError(), Error.UnknownError())
    errors.forEach { println(it.message) }
}

----------------------------------------

TITLE: Practice Exercise: String Templates in Kotlin
DESCRIPTION: An exercise for practicing string templates in Kotlin. The task is to complete the code to print 'Mary is 20 years old' using the given variables.

LANGUAGE: kotlin
CODE:
fun main() {
    val name = "Mary"
    val age = 20
    // Write your code here
}

----------------------------------------

TITLE: Creating Classes and Instances in Kotlin
DESCRIPTION: Shows how to define classes, declare properties, and create instances in Kotlin.

LANGUAGE: kotlin
CODE:
class Rectangle(val height: Double, val length: Double) {
    val perimeter = (height + length) * 2 
}

fun main() {
    val rectangle = Rectangle(5.0, 2.0)
    println("The perimeter is ${rectangle.perimeter}")
}

----------------------------------------

TITLE: Using Destructured Variables in Kotlin
DESCRIPTION: Demonstrates how to use variables created through destructuring independently.

LANGUAGE: kotlin
CODE:
println(name)
println(age)

----------------------------------------

TITLE: HTML Builder Usage Example in Kotlin
DESCRIPTION: Demonstrates how to use the HTML builder DSL to generate HTML markup with nested elements and attributes

LANGUAGE: kotlin
CODE:
import com.example.html.* // see declarations below

fun result() =
    html {
        head {
            title {+"XML encoding with Kotlin"}
        }
        body {
            h1 {+"XML encoding with Kotlin"}
            p  {+"this format can be used as an alternative markup to XML"}

            // an element with attributes and text content
            a(href = "https://kotlinlang.org") {+"Kotlin"}

            // mixed content
            p {
                +"This is some"
                b {+"mixed"}
                +"text. For more see the"
                a(href = "https://kotlinlang.org") {+"Kotlin"}
                +"project"
            }
            p {+"some text"}

            // content generated by
            p {
                for (arg in args)
                    +arg
            }
        }
    }

----------------------------------------

TITLE: Creating Observable Properties in Kotlin
DESCRIPTION: This code shows how to use Delegates.observable() to create a property that notifies listeners about changes to its value.

LANGUAGE: kotlin
CODE:
import kotlin.properties.Delegates

class User {
    var name: String by Delegates.observable("<no name>") {
        prop, old, new ->
        println("$old -> $new")
    }
}

fun main() {
    val user = User()
    user.name = "first"
    user.name = "second"
}

----------------------------------------

TITLE: Running Kotlin Compiler with Options (Bash)
DESCRIPTION: Example of running the Kotlin compiler from the command line with the -include-runtime and -d options to create a runnable JAR file.

LANGUAGE: bash
CODE:
$ kotlinc hello.kt -include-runtime -d hello.jar

----------------------------------------

TITLE: Accessing Binaries in Kotlin/Native Build Scripts
DESCRIPTION: Demonstrates different ways to access binaries in Kotlin and Groovy build scripts, including by name and using typed getters.

LANGUAGE: kotlin
CODE:
// Fails if there is no such binary.
binaries["fooDebugExecutable"]
binaries.getByName("fooDebugExecutable")

// Returns null if there is no such binary.
binaries.findByName("fooDebugExecutable")

// Fails if there is no such binary.
binaries.getExecutable("foo", DEBUG)
binaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn't set.
binaries.getExecutable("bar", "DEBUG") // You also can use a string for build type.

// Similar getters are available for other binary kinds:
// getFramework, getStaticLib and getSharedLib.

// Returns null if there is no such binary.
binaries.findExecutable("foo", DEBUG)

// Similar getters are available for other binary kinds:
// findFramework, findStaticLib and findSharedLib.

LANGUAGE: groovy
CODE:
// Fails if there is no such binary.
binaries['fooDebugExecutable']
binaries.fooDebugExecutable
binaries.getByName('fooDebugExecutable')

// Returns null if there is no such binary.
binaries.findByName('fooDebugExecutable')

// Fails if there is no such binary.
binaries.getExecutable('foo', DEBUG)
binaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn't set.
binaries.getExecutable('bar', 'DEBUG') // You also can use a string for build type.

// Similar getters are available for other binary kinds:
// getFramework, getStaticLib and getSharedLib.

// Returns null if there is no such binary.
binaries.findExecutable('foo', DEBUG)

// Similar getters are available for other binary kinds:
// findFramework, findStaticLib and findSharedLib.

----------------------------------------

TITLE: Using Elvis Operator in Kotlin
DESCRIPTION: Shows how to use the Elvis operator (?:) to provide default values when dealing with nullable types, preventing null pointer exceptions.

LANGUAGE: kotlin
CODE:
fun main() {
    val nullString: String? = null
    println(nullString?.length ?: 0)
}

----------------------------------------

TITLE: Creating plain JS objects for interoperability in Kotlin/JS
DESCRIPTION: Shows how to create plain JavaScript objects using js() or jso() functions to ensure property enumerability.

LANGUAGE: kotlin
CODE:
external interface AppProps { var name: String }
data class AppPropsImpl(override var name: String) : AppProps

LANGUAGE: kotlin
CODE:
// Replace this
val ktApp = AppPropsImpl("App1") // Kotlin object

LANGUAGE: kotlin
CODE:
// With this
val jsApp = js("{name: 'App1'}") as AppProps // or jso {}

LANGUAGE: kotlin
CODE:
// or with this
val jsonApp = kotlin.js.json(Pair("name", "App1")) as AppProps

----------------------------------------

TITLE: Text Replacement Configuration in YAML
DESCRIPTION: YAML configuration showing how to set up text replacements using regular expressions for content modification.

LANGUAGE: yaml
CODE:
  replace:
    - regex: '\[data class\]\(data-classes\)'
      with:  '[data class](\#data-classes)'

----------------------------------------

TITLE: Configuring Relative Paths in Kotlin/Native Libraries
DESCRIPTION: Gradle configuration to use relative paths in Kotlin/Native libraries using the -Xklib-relative-path-base compiler option.

LANGUAGE: kotlin
CODE:
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask
// ...

tasks.named<KotlinCompilationTask<*>>("compileKotlin").configure {
    // $base is a base path of source files
    compilerOptions.freeCompilerArgs.add("-Xklib-relative-path-base=$base")
}

----------------------------------------

TITLE: Declaring and Using Repeatable Annotations in Kotlin
DESCRIPTION: These examples demonstrate how to declare and use repeatable annotations in Kotlin, including custom naming for containing annotations.

LANGUAGE: kotlin
CODE:
@Repeatable
annotation class Tag(val name: String)

@JvmRepeatable(Tags::class)
annotation class Tag(val name: String)

annotation class Tags(val value: Array<Tag>)

----------------------------------------

TITLE: Defining C String Functions in Header File
DESCRIPTION: C header file containing function declarations for string operations, including passing a string, returning a string, and copying a string.

LANGUAGE: C
CODE:
#ifndef LIB2_H_INCLUDED
#define LIB2_H_INCLUDED

void pass_string(char* str);
char* return_string();
int copy_string(char* str, int size);

#endif

----------------------------------------

TITLE: Defining Expected and Actual Classes in Kotlin Multiplatform
DESCRIPTION: Demonstrates how to use expected and actual classes to implement platform-specific functionality.

LANGUAGE: kotlin
CODE:
// In commonMain
expect class Identity() {
    val userName: String
    val processID: Int
}

LANGUAGE: kotlin
CODE:
// In jvmMain
actual class Identity {
    actual val userName: String = System.getProperty("user.name") ?: "None"
    actual val processID: Long = ProcessHandle.current().pid()
}

LANGUAGE: kotlin
CODE:
// In nativeMain
actual class Identity {
    actual val userName: String = getlogin()?.toKString() ?: "None"
    actual val processID: Long = getpid().toLong()
}

----------------------------------------

TITLE: Partitioning Collections in Kotlin
DESCRIPTION: Demonstrates the use of partition() function to split a collection into two lists based on a predicate.

LANGUAGE: kotlin
CODE:
fun main() {
    val numbers = listOf("one", "two", "three", "four")
    val (match, rest) = numbers.partition { it.length > 3 }

    println(match)
    println(rest)
}

----------------------------------------

TITLE: Declaring Basic Functional Interface in Kotlin
DESCRIPTION: Demonstrates how to declare a simple functional interface using the 'fun' modifier in Kotlin. The interface contains a single abstract method 'invoke()'.

LANGUAGE: kotlin
CODE:
fun interface KRunnable {
   fun invoke()
}

----------------------------------------

TITLE: Implementing Null Safety Features in Kotlin
DESCRIPTION: Demonstrates key Kotlin null safety features including nullable return types, safe access operators, smart casting, and the Elvis operator combined with error handling. Shows how to properly handle potential null values and type checking in Kotlin.

LANGUAGE: kotlin
CODE:
fun reply(condition: Boolean): String? =          // Nullability is part of Kotlin's type system
   if (condition) "I'm fine" else null

fun error(): Nothing =                            // Always throw an exception
   throw IllegalStateException("Shouldn't be here")

fun main() {
   val condition = true                        // Try replacing `true` with `false` and run the sample!
   val message = reply(condition)              // The result is nullable
   // println(message.uppercase())             // This line doesn't compile
   println(message?.replace("fine", "okay"))   // Access a nullable value in a safe manner
   if (message != null) {                      // If you check that the type is right,
      println(message.uppercase())             // the compiler will smart-cast it for you
   }

   val nonNull: String =                             // If the null-case throws an error,
   reply(condition = true) ?: error()             // Kotlin can infer that the result is non-null
   println(nonNull)
}

----------------------------------------

TITLE: Unit Test Implementation
DESCRIPTION: JUnit test class demonstrating how to test the Sample class using kotlin.test assertions

LANGUAGE: kotlin
CODE:
import org.example.Sample
import org.junit.jupiter.api.Assertions.*
import kotlin.test.Test

class SampleTest {
    private val testSample: Sample = Sample()

    @Test
    fun testSum() {
        val expected = 42
        assertEquals(expected, testSample.sum(40, 2))
    }
}

----------------------------------------

TITLE: Configuring Fat Framework
DESCRIPTION: Demonstrates creation of a universal fat framework for multiple iOS targets.

LANGUAGE: kotlin
CODE:
kotlinArtifacts {
    Native.FatFramework("myfatframe") {
        targets(iosX32, iosX64)
        kotlinOptions {
            suppressWarnings = false
        }
    }
}

LANGUAGE: groovy
CODE:
kotlinArtifacts {
    it.native.FatFramework("myfatframe") {
        targets(iosX32, iosX64)
        kotlinOptions {
            suppressWarnings = false
        }
    }
}

----------------------------------------

TITLE: Configuring Per-File Output in Kotlin/JS
DESCRIPTION: Demonstrates how to configure per-file output granularity for Kotlin/JS compilation in the gradle.properties file.

LANGUAGE: properties
CODE:
# gradle.properties
kotlin.js.ir.output.granularity=per-file // `per-module` is the default

----------------------------------------

TITLE: Setting Background Color in Kotlin/JS
DESCRIPTION: Demonstrates how to set the background color of a webpage using the document object in Kotlin/JS.

LANGUAGE: kotlin
CODE:
document.bgColor = "FFAA12"

----------------------------------------

TITLE: Declaring Debug Executable in Kotlin/Native
DESCRIPTION: Demonstrates how to declare only a debug executable binary using Kotlin DSL in Gradle.

LANGUAGE: kotlin
CODE:
binaries {
    executable(listOf(DEBUG)) {
        // Binary configuration.
    }
}

LANGUAGE: groovy
CODE:
binaries {
    executable([DEBUG]) {
        // Binary configuration.
    }
}

----------------------------------------

TITLE: Gradle Dependencies Configuration
DESCRIPTION: Gradle build script configurations for both Kotlin and Groovy DSL showing required dependencies.

LANGUAGE: kotlin
CODE:
dependencies {
    implementation("org.jetbrains.kotlin:kotlin-scripting-common")
    implementation("org.jetbrains.kotlin:kotlin-scripting-jvm")
    implementation("org.jetbrains.kotlin:kotlin-scripting-dependencies")
    implementation("org.jetbrains.kotlin:kotlin-scripting-dependencies-maven")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%")
}

LANGUAGE: groovy
CODE:
dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-scripting-common'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-jvm'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-dependencies'
    implementation 'org.jetbrains.kotlin:kotlin-scripting-dependencies-maven'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:%coroutinesVersion%'
}