TITLE: Configuring ActiveMQ Broker with Spring XML
DESCRIPTION: Default ActiveMQ configuration example showing broker setup with Spring XML, including transport connectors, persistence adapters, and system usage settings. Uses XBean for XML processing and includes detailed comments for each major configuration section.

LANGUAGE: xml
CODE:
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    <!-- ... full configuration XML ... -->
</beans>

----------------------------------------

TITLE: Implementing ActiveMQ Hello World with Multiple Producers and Consumers in Java
DESCRIPTION: This code snippet demonstrates a complete ActiveMQ Hello World application. It creates multiple producer and consumer threads, establishes connections to an ActiveMQ broker, sends messages to a queue, and consumes messages from the same queue. The example uses non-persistent delivery mode and auto-acknowledge sessions.

LANGUAGE: Java
CODE:
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;

/**
 * Hello world!
 */
public class App {

    public static void main(String[] args) throws Exception {
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldProducer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
    }

    public static void thread(Runnable runnable, boolean daemon) {
        Thread brokerThread = new Thread(runnable);
        brokerThread.setDaemon(daemon);
        brokerThread.start();
    }

    public static class HelloWorldProducer implements Runnable {
        public void run() {
            try {
                // Create a ConnectionFactory
                ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");

                // Create a Connection
                Connection connection = connectionFactory.createConnection();
                connection.start();

                // Create a Session
                Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

                // Create the destination (Topic or Queue)
                Destination destination = session.createQueue("TEST.FOO");

                // Create a MessageProducer from the Session to the Topic or Queue
                MessageProducer producer = session.createProducer(destination);
                producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

                // Create a messages
                String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
                TextMessage message = session.createTextMessage(text);

                // Tell the producer to send the message
                System.out.println("Sent message: "+ message.hashCode() + " : " + Thread.currentThread().getName());
                producer.send(message);

                // Clean up
                session.close();
                connection.close();
            }
            catch (Exception e) {
                System.out.println("Caught: " + e);
                e.printStackTrace();
            }
        }
    }

    public static class HelloWorldConsumer implements Runnable, ExceptionListener {
        public void run() {
            try {

                // Create a ConnectionFactory
                ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");

                // Create a Connection
                Connection connection = connectionFactory.createConnection();
                connection.start();

                connection.setExceptionListener(this);

                // Create a Session
                Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

                // Create the destination (Topic or Queue)
                Destination destination = session.createQueue("TEST.FOO");

                // Create a MessageConsumer from the Session to the Topic or Queue
                MessageConsumer consumer = session.createConsumer(destination);

                // Wait for a message
                Message message = consumer.receive(1000);

                if (message instanceof TextMessage) {
                    TextMessage textMessage = (TextMessage) message;
                    String text = textMessage.getText();
                    System.out.println("Received: " + text);
                } else {
                    System.out.println("Received: " + message);
                }

                consumer.close();
                session.close();
                connection.close();
            } catch (Exception e) {
                System.out.println("Caught: " + e);
                e.printStackTrace();
            }
        }

        public synchronized void onException(JMSException ex) {
            System.out.println("JMS Exception occured.  Shutting down client.");
        }
    }
}

----------------------------------------

TITLE: Configuring ActiveMQ v5 Broker Using XML
DESCRIPTION: Complete XML configuration example for an ActiveMQ broker, including destination policies, JMX management, persistence settings, system usage limits, and transport connectors. The configuration uses Spring beans format and includes settings for memory usage, store limits, and multiple protocol support including OpenWire, AMQP, STOMP, MQTT, and WebSocket.

LANGUAGE: xml
CODE:
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>
   <!-- Allows accessing the server log -->
    <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery"
          lazy-init="false" scope="singleton"
          init-method="start" destroy-method="stop">
    </bean>
    <!--
        The <broker> element is used to configure the ActiveMQ Classic broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" >
                    <!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:
                         http://activemq.apache.org/components/classic/documentation/slow-consumer-handling
                    -->
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="1000"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>

        <!--
            The managementContext is used to configure how ActiveMQ Classic is exposed in
            JMX. By default, ActiveMQ Classic uses the MBean server that is started by
            the JVM. For more information, see:
            http://activemq.apache.org/components/classic/documentation/jmx
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>
        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:
            http://activemq.apache.org/components/classic/documentation/persistence
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>

          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before disabling caching and/or slowing down producers. For more information, see:
            http://activemq.apache.orgFeatures/components/classic/documentation/producer-flow-control
          -->
          <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="70" />
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="100 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
        <!--
            The transport connectors expose ActiveMQ Classic over a given protocol to
            clients and other brokers. For more information, see:
            http://activemq.apache.org/components/classic/documentation/configuring-transports
        -->
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
        </transportConnectors>
        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>
    </broker>
    <!--
        Enable web consoles, REST and Ajax APIs and demos
        The web consoles requires by default login, you can disable this in the jetty.xml file
        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="jetty.xml"/>
</beans>

----------------------------------------

TITLE: Configuring MySQL DataSource in ActiveMQ
DESCRIPTION: XML configuration for setting up a MySQL database connection in ActiveMQ using Apache Commons DBCP. Includes essential connection properties like driver class, URL, credentials, and connection pooling settings.

LANGUAGE: xml
CODE:
<bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
  <property name="url" value="jdbc:mysql://localhost/activemq"/>
  <property name="username" value="activemq"/>
  <property name="password" value="activemq"/>
  <property name="poolPreparedStatements" value="true"/>
</bean>

----------------------------------------

TITLE: Implementing JMS Server with Request-Response in Java
DESCRIPTION: This comprehensive example demonstrates a full JMS server implementation supporting request-response. It includes setting up an embedded broker, creating a message listener, and handling incoming messages.

LANGUAGE: java
CODE:
import org.apache.activemq.broker.BrokerService;
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.*;

public class Server implements MessageListener {
    private static int ackMode;
    private static String messageQueueName;
    private static String messageBrokerUrl;

    private Session session;
    private boolean transacted = false;
    private MessageProducer replyProducer;
    private MessageProtocol messageProtocol;

    static {
        messageBrokerUrl = "tcp://localhost:61616";
        messageQueueName = "client.messages";
        ackMode = Session.AUTO_ACKNOWLEDGE;
    }

    public Server() {
        try {
            //This message broker is embedded
            BrokerService broker = new BrokerService();
            broker.setPersistent(false);
            broker.setUseJmx(false);
            broker.addConnector(messageBrokerUrl);
            broker.start();
        } catch (Exception e) {
            //Handle the exception appropriately
        }

        //Delegating the handling of messages to another class, instantiate it before setting up JMS so it
        //is ready to handle messages
        this.messageProtocol = new MessageProtocol();
        this.setupMessageQueueConsumer();
    }

    private void setupMessageQueueConsumer() {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(messageBrokerUrl);
        Connection connection;
        try {
            connection = connectionFactory.createConnection();
            connection.start();
            this.session = connection.createSession(this.transacted, ackMode);
            Destination adminQueue = this.session.createQueue(messageQueueName);

            //Setup a message producer to respond to messages from clients, we will get the destination
            //to send to from the JMSReplyTo header field from a Message
            this.replyProducer = this.session.createProducer(null);
            this.replyProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

            //Set up a consumer to consume messages off of the admin queue
            MessageConsumer consumer = this.session.createConsumer(adminQueue);
            consumer.setMessageListener(this);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }

    public void onMessage(Message message) {
        try {
            TextMessage response = this.session.createTextMessage();
            if (message instanceof TextMessage) {
                TextMessage txtMsg = (TextMessage) message;
                String messageText = txtMsg.getText();
                response.setText(this.messageProtocol.handleProtocolMessage(messageText));
            }

            //Set the correlation ID from the received message to be the correlation id of the response message
            //this lets the client identify which message this is a response to if it has more than
            //one outstanding message to the server
            response.setJMSCorrelationID(message.getJMSCorrelationID());

            //Send the response to the Destination specified by the JMSReplyTo field of the received message,
            //this is presumably a temporary queue created by the client
            this.replyProducer.send(message.getJMSReplyTo(), response);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }

    public static void main(String[] args) {
        new Server();
    }
}

----------------------------------------

TITLE: Configuring Simple Authentication Plugin in ActiveMQ Classic XML
DESCRIPTION: Example of using SimpleAuthenticationPlugin to define users and groups directly in the broker's XML configuration. This plugin allows for quick setup of authentication for testing environments.

LANGUAGE: XML
CODE:
<simpleAuthenticationPlugin>
  <users>
    <authenticationUser username="system" password="manager" groups="users,admins"/>
    <authenticationUser username="user" password="password" groups="users"/>
    <authenticationUser username="guest" password="password" groups="guests"/>
  </users>
</simpleAuthenticationPlugin>

----------------------------------------

TITLE: Implementing Message Protocol Handler in Java
DESCRIPTION: This class demonstrates a simple message protocol handler used in the JMS request-response example. It processes incoming messages and generates appropriate responses based on the message content.

LANGUAGE: java
CODE:
public class MessageProtocol {
    public String handleProtocolMessage(String messageText) {
        String responseText;
        if ("MyProtocolMessage".equalsIgnoreCase(messageText)) {
            responseText = "I recognize your protocol message";
        } else {
            responseText = "Unknown protocol message: " + messageText;
        }
        
        return responseText;
    }
}

----------------------------------------

TITLE: Configuring Camel Component with Security Credentials
DESCRIPTION: Example of configuring the Camel ActiveMQ component to use security credentials when connecting to a secured broker.

LANGUAGE: XML
CODE:
<!-- configure the camel activemq component to use the current broker -->
<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent" >
  <property name="connectionFactory"> 
    <bean class="org.apache.activemq.ActiveMQConnectionFactory">
      <property name="brokerURL" value="vm://localhost?create=false&amp;waitForStart=10000" />
      <property name="userName" value="system"/> 
      <property name="password" value="manager"/>
    </bean>
  </property>
</bean>

----------------------------------------

TITLE: Implementing ActiveMQ Producer-Consumer Pattern in Java
DESCRIPTION: Complete implementation of a JMS application using ActiveMQ, demonstrating connection factory creation, session management, message production and consumption. The code includes both producer and consumer classes with proper connection lifecycle management and exception handling.

LANGUAGE: Java
CODE:
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.ExceptionListener;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;

/**
 * Hello world!
 */
public class App {

    public static void main(String[] args) throws Exception {
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldProducer(), false);
        Thread.sleep(1000);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldConsumer(), false);
        thread(new HelloWorldProducer(), false);
    }

    public static void thread(Runnable runnable, boolean daemon) {
        Thread brokerThread = new Thread(runnable);
        brokerThread.setDaemon(daemon);
        brokerThread.start();
    }

    public static class HelloWorldProducer implements Runnable {
        public void run() {
            try {
                // Create a ConnectionFactory
                ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");

                // Create a Connection
                Connection connection = connectionFactory.createConnection();
                connection.start();

                // Create a Session
                Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

                // Create the destination (Topic or Queue)
                Destination destination = session.createQueue("TEST.FOO");

                // Create a MessageProducer from the Session to the Topic or Queue
                MessageProducer producer = session.createProducer(destination);
                producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

                // Create a messages
                String text = "Hello world! From: " + Thread.currentThread().getName() + " : " + this.hashCode();
                TextMessage message = session.createTextMessage(text);

                // Tell the producer to send the message
                System.out.println("Sent message: "+ message.hashCode() + " : " + Thread.currentThread().getName());
                producer.send(message);

                // Clean up
                session.close();
                connection.close();
            }
            catch (Exception e) {
                System.out.println("Caught: " + e);
                e.printStackTrace();
            }
        }
    }

    public static class HelloWorldConsumer implements Runnable, ExceptionListener {
        public void run() {
            try {

                // Create a ConnectionFactory
                ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");

                // Create a Connection
                Connection connection = connectionFactory.createConnection();
                connection.start();

                connection.setExceptionListener(this);

                // Create a Session
                Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

                // Create the destination (Topic or Queue)
                Destination destination = session.createQueue("TEST.FOO");

                // Create a MessageConsumer from the Session to the Topic or Queue
                MessageConsumer consumer = session.createConsumer(destination);

                // Wait for a message
                Message message = consumer.receive(1000);

                if (message instanceof TextMessage) {
                    TextMessage textMessage = (TextMessage) message;
                    String text = textMessage.getText();
                    System.out.println("Received: " + text);
                } else {
                    System.out.println("Received: " + message);
                }

                consumer.close();
                session.close();
                connection.close();
            } catch (Exception e) {
                System.out.println("Caught: " + e);
                e.printStackTrace();
            }
        }

        public synchronized void onException(JMSException ex) {
            System.out.println("JMS Exception occured.  Shutting down client.");
        }
    }
}

----------------------------------------

TITLE: Configuring ActiveMQ Broker with XML
DESCRIPTION: Example XML configuration for an ActiveMQ broker showing basic setup with JMX, persistence, transport connectors, and network connectors. The configuration demonstrates how to set up journaled JDBC persistence, TCP transport, and multicast network connectivity.

LANGUAGE: xml
CODE:
<beans xmlns="http://activemq.org/config/1.0">

  <broker useJmx="true">
  
    <persistenceAdapter>
      <journaledJDBC journalLogFiles="5" dataDirectory="../data"/>
    </persistenceAdapter>
  
    <transportConnectors>
      <transportConnector uri="discovery:tcp://localhost:61616"/>
    </transportConnectors>
    
    <networkConnectors>
      <networkConnector uri="multicast"/>
    </networkConnectors>
    
  </broker>
  
</beans>

----------------------------------------

TITLE: Configuring LDAP Authentication and Authorization
DESCRIPTION: Example of configuring JAAS LDAPLoginModule and LDAPAuthorizationMap for LDAP-based authentication and authorization in ActiveMQ Classic.

LANGUAGE: XML
CODE:
<plugins> 
  <!-- use JAAS to authenticate using the login.config file on the classpath to configure JAAS --> 
  <jaasAuthenticationPlugin configuration="LdapConfiguration" /> 
  <!-- lets configure a destination based role/group authorization mechanism --> 
  <authorizationPlugin> 
    <map> 
      <bean xmlns="http://www.springframework.org/schema/beans" id="lDAPAuthorizationMap" class="org.apache.activemq.security.LDAPAuthorizationMap"> 
        <property name="initialContextFactory" value="com.sun.jndi.ldap.LdapCtxFactory"/> 
        <property name="connectionURL" value="ldap://ldap.acme.com:389"/> 
        <property name="authentication" value="simple"/> 
        <property name="connectionUsername" value="cn=mqbroker,ou=Services,dc=acme,dc=com"/> 
        <property name="connectionPassword" value="password"/> 
        <property name="connectionProtocol" value="s"/> 
        <property name="topicSearchMatching" value="cn={0},ou=Topic,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com"/> 
        <property name="topicSearchSubtreeBool" value="true"/> 
        <property name="queueSearchMatching" value="cn={0},ou=Queue,ou=Destination,ou=ActiveMQ,ou=systems,dc=acme,dc=com"/> 
        <property name="queueSearchSubtreeBool" value="true"/> 
        <property name="adminBase" value="(cn=admin)"/> 
        <property name="adminAttribute" value="member"/> 
        <property name="adminAttributePrefix" value="cn="/> 
        <property name="readBase" value="(cn=read)"/> 
        <property name="readAttribute" value="member"/> 
        <property name="readAttributePrefix" value="cn="/> 
        <property name="writeBase" value="(cn=write)"/> 
        <property name="writeAttribute" value="member"/> 
        <property name="writeAttributePrefix" value="cn="/> 
      </bean> 
    </map> 
  </authorizationPlugin> 
</plugins>

----------------------------------------

TITLE: Implementing Asynchronous Message Consumer with NMS for Apache ActiveMQ in C#
DESCRIPTION: This C# code demonstrates how to create an asynchronous message consumer using NMS with Apache ActiveMQ. It establishes a connection, creates a session, sets up a destination, produces a message, and consumes messages asynchronously. The example includes various connection string options and destination setup methods.

LANGUAGE: csharp
CODE:
using System;
using System.Threading;
using Apache.NMS;
using Apache.NMS.Util;

namespace Apache.NMS.ActiveMQ.Test
{
public class TestMain
{
    protected static AutoResetEvent semaphore = new AutoResetEvent(false);
    protected static ITextMessage message = null;
    protected static TimeSpan receiveTimeout = TimeSpan.FromSeconds(10);

    public static void Main(string[] args)
    {
        // Example connection strings:
        //    activemq:tcp://activemqhost:61616
        //    stomp:tcp://activemqhost:61613
        //    ems:tcp://tibcohost:7222
        //    msmq://localhost

        Uri connecturi = new Uri("activemq:tcp://activemqhost:61616");

        Console.WriteLine("About to connect to " + connecturi);

        // NOTE: ensure the nmsprovider-activemq.config file exists in the executable folder.
        IConnectionFactory factory = new NMSConnectionFactory(connecturi);

        using(IConnection connection = factory.CreateConnection())
        using(ISession session = connection.CreateSession())
        {
             // Examples for getting a destination:
             //
             // Hard coded destinations:
             //    IDestination destination = session.GetQueue("FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = session.GetTopic("FOO.BAR");
             //    Debug.Assert(destination is ITopic);
             //
             // Embedded destination type in the name:
             //    IDestination destination = SessionUtil.GetDestination(session, "queue://FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = SessionUtil.GetDestination(session, "topic://FOO.BAR");
             //    Debug.Assert(destination is ITopic);
             //
             // Defaults to queue if type is not specified:
             //    IDestination destination = SessionUtil.GetDestination(session, "FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //
             // .NET 3.5 Supports Extension methods for a simplified syntax:
             //    IDestination destination = session.GetDestination("queue://FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = session.GetDestination("topic://FOO.BAR");
             //    Debug.Assert(destination is ITopic);
            IDestination destination = SessionUtil.GetDestination(session, "queue://FOO.BAR");

            Console.WriteLine("Using destination: " + destination);

            // Create a consumer and producer
            using(IMessageConsumer consumer = session.CreateConsumer(destination))
            using(IMessageProducer producer = session.CreateProducer(destination))
            {
                // Start the connection so that messages will be processed.
                connection.Start();
		producer.DeliveryMode = MsgDeliveryMode.Persistent;
                producer.RequestTimeout = receiveTimeout;

                consumer.Listener += new MessageListener(OnMessage);

                // Send a message
                ITextMessage request = session.CreateTextMessage("Hello World!");
                request.NMSCorrelationID = "abc";
                request.Properties["NMSXGroupID"] = "cheese";
                request.Properties["myHeader"] = "Cheddar";

                producer.Send(request);

                // Wait for the message
                semaphore.WaitOne((int) receiveTimeout.TotalMilliseconds, true);

                if(message == null)
                {
                    Console.WriteLine("No message received!");
                }
                else
                {
                    Console.WriteLine("Received message with ID:   " + message.NMSMessageId);
                    Console.WriteLine("Received message with text: " + message.Text);
                }
            }
        }
    }

    protected static void OnMessage(IMessage receivedMsg)
    {
        message = receivedMsg as ITextMessage;
        semaphore.Set();
    }
}
}

----------------------------------------

TITLE: Removing Queue or Topic via BrokerViewMBean in ActiveMQ Classic
DESCRIPTION: These methods from the BrokerViewMBean interface allow for the deletion of queues and topics in Apache ActiveMQ Classic. The methods take a String parameter representing the name of the queue or topic to be removed.

LANGUAGE: java
CODE:
removeQueue(String)

LANGUAGE: java
CODE:
removeTopic(String)

----------------------------------------

TITLE: Generating SSL Certificates with Keytool
DESCRIPTION: Series of keytool commands to create and manage SSL certificates for broker and client authentication.

LANGUAGE: bash
CODE:
keytool -genkey -alias broker -keyalg RSA -keystore broker.ks

LANGUAGE: bash
CODE:
keytool -export -alias broker -keystore broker.ks -file broker_cert

LANGUAGE: bash
CODE:
keytool -genkey -alias client -keyalg RSA -keystore client.ks

LANGUAGE: bash
CODE:
keytool -import -alias broker -keystore client.ts -file broker_cert

----------------------------------------

TITLE: Complete ActiveMQ Broker Configuration Example
DESCRIPTION: Full example of broker configuration including destination policies, management context, persistence adapter, plugins, system usage, and transport connectors.

LANGUAGE: xml
CODE:
<?xml version="1.0"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd   
http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd      
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
  
  <broker xmlns="http://activemq.apache.org/schema/core" brokerName="brokerB1" destroyApplicationContextOnStop="true">
    
    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry queue=">" producerFlowControl="true" memoryLimit="5mb">
            <deadLetterStrategy>
              <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true"/>
            </deadLetterStrategy>
          </policyEntry>
        </policyEntries>
      </policyMap>
    </destinationPolicy>
    
    <managementContext>
      <managementContext createConnector="false"/>
    </managementContext>

    <persistenceAdapter>
      <kahaDB directory="${activemq.base}/data/kahadb" enableJournalDiskSyncs="false" indexWriteBatchSize="10000" indexCacheSize="1000"/>
    </persistenceAdapter>

    <plugins>
      <loggingBrokerPlugin/>
    </plugins>
    
    <systemUsage>
      <systemUsage>
        <memoryUsage>
          <memoryUsage limit="420 mb"/>
        </memoryUsage>
        <storeUsage>
          <storeUsage limit="1 gb"/>
        </storeUsage>
        <tempUsage>
          <tempUsage limit="250 mb"/>
        </tempUsage>
      </systemUsage>
    </systemUsage>
    
    <transportConnectors>
      <transportConnector name="tcp" uri="tcp://0.0.0.0:61616"/>
    </transportConnectors>
    
  </broker>
  
</beans>

----------------------------------------

TITLE: JMS Resource Management Pattern
DESCRIPTION: Demonstrates the recommended pattern of creating and reusing JMS objects like Connection, Session, MessageProducer, and MessageConsumer to optimize performance and reduce server round-trips.

LANGUAGE: java
CODE:
// Create once and reuse these objects
Connection connection;
Session session;
MessageProducer producer;
MessageConsumer consumer;

// Use null destination for flexible producer
MessageProducer producer = session.createProducer(null);
// Can send to different destinations using the same producer
producer.send(destination, message);

----------------------------------------

TITLE: Configuring NIO Transport in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure the NIO transport connector in an ActiveMQ Classic broker's XML configuration file. It uses the 'nio' scheme and binds to all network interfaces on port 61616.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Implementing BrokerPlugin Interface in Java
DESCRIPTION: Example of implementing the BrokerPlugin interface in Java to create a custom plugin for ActiveMQ Classic. The installPlugin method creates and returns a custom broker object.

LANGUAGE: java
CODE:
import org.apache.activemq.broker.Broker;
import org.apache.activemq.broker.BrokerPlugin;

public class MyPlugin implements BrokerPlugin {	
        
        public Broker installPlugin(Broker broker) throws Exception {            
             return new MyBroker(broker);
        }	

}

----------------------------------------

TITLE: Configuring ShiroPlugin with Embedded INI in ActiveMQ XML
DESCRIPTION: Example of configuring the ShiroPlugin in ActiveMQ's XML configuration using embedded Shiro INI configuration. Demonstrates setting up users, roles, and permissions.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <broker xmlns="http://activemq.apache.org/schema/core" ... other attributes here ...>
        <plugins>
            <bean id="shiroPlugin" class="org.apache.activemq.shiro.ShiroPlugin" xmlns="http://www.springframework.org/schema/beans">
                <property name="iniConfig"><value>

                [main]
                # Shiro object graph configuration here if desired/necessary

                [users]
                # users section format:
                #
                # username = password [, assignedRole1, assignedRole2, ..., assignedRoleN]
                #
                # for example:
                #
                # scott = tiger, advisory, users, administrators
                #
                # Roles and permissions assigned to roles are defined in the [roles] section
                # below. By transitive association, any user assigned a role is granted the
                # role's permissions.
                
                # ActiveMQ Classic System User
                # needed for in-VM/local connections when authentication is enabled:
                system = manager, system
                
                # Other users here.  You should almost always add the `advisory` role for each
                # user to make your life easy!  See the [roles] comments below for more info.
                # jsmith = jsmithsPassword, advisory
                # djones = djonesPassword, advisory, ...
                # etc.

                [roles]
                # roles section format:
                #
                # roleName = wildcardPermission1, wildcardPermission2, ..., wildcardPermissionN
                #
                # The 'system' role is assigned all permissions (*).  Be careful when assigning
                # this to actual users other than then system user:
                system = *

                # Full access rights should generally be given to the ActiveMQ.Advisory.*
                # destinations because by default an ActiveMQConnection uses advisory topics to
                # get early knowledge of temp destination creation and deletion. For more info:
                #
                #   http://activemq.apache.org/Features/security.md
                #
                # So we create an 'advisory' role here with a wildcard/catch-all permissions
                # for all advisory topics.  To make your life easy, ensure you assign this to
                # any/all users in the [users] section above, e.g.
                #
                #   jsmith = jsmithsPassword, advisory, ...

                advisory = topic:ActiveMQ.Advisory*

                </value></property>
            </bean>
        </plugins>
    </broker>
</beans>

----------------------------------------

TITLE: Configuring Topic Dispatch Policies in ActiveMQ
DESCRIPTION: Comprehensive XML configuration example showing different dispatch policies for various topics, including round-robin dispatch, strict order dispatch, and message recovery policies. Also includes configuration for pending message limits and advisory messages.

LANGUAGE: xml
CODE:
<destinationPolicy>
   <policyMap>
      <policyEntries>
         <policyEntry topic="FOO.>">
            <dispatchPolicy>
               <roundRobinDispatchPolicy />
            </dispatchPolicy>
            <subscriptionRecoveryPolicy>
               <lastImageSubscriptionRecoveryPolicy />
            </subscriptionRecoveryPolicy>
         </policyEntry>
         <policyEntry topic="ORDERS.>">
            <dispatchPolicy>
               <strictOrderDispatchPolicy />
            </dispatchPolicy>
            <!-- 1 minutes worth -->
            <subscriptionRecoveryPolicy>
               <timedSubscriptionRecoveryPolicy recoverDuration="60000" /> 
            </subscriptionRecoveryPolicy>
         </policyEntry>
         <policyEntry topic="PRICES.>">
            <!-- lets force old messages to be discarded for slow consumers --> 
            <pendingMessageLimitStrategy>
               <constantPendingMessageLimitStrategy limit="10"/>
            </pendingMessageLimitStrategy>
            <!-- 10 seconds worth -->
            <subscriptionRecoveryPolicy>
               <timedSubscriptionRecoveryPolicy recoverDuration="10000" />
            </subscriptionRecoveryPolicy>
         </policyEntry>
         <policyEntry tempTopic="true" advisoryForConsumed="true" />
         <policyEntry tempQueue="true" advisoryForConsumed="true" />
      </policyEntries>
   </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Configuring Global Virtual Topics in ActiveMQ XML
DESCRIPTION: This XML configuration snippet shows how to make all topics in ActiveMQ virtual topics. It uses a wildcard to match all topics and sets a prefix for consumer queues.

LANGUAGE: xml
CODE:
<destinationInterceptors> 
  <virtualDestinationInterceptor> 
    <virtualDestinations> 
      <virtualTopic name=">" prefix="VirtualTopicConsumers.*."
       selectorAware="false"/>   
    </virtualDestinations>
  </virtualDestinationInterceptor> 
</destinationInterceptors>

----------------------------------------

TITLE: Jakarta Messaging Package Imports
DESCRIPTION: Example of Jakarta Messaging package imports using jakarta.jms namespace

LANGUAGE: java
CODE:
import jakarta.jms.ConnectionFactory
import jakarta.jms.Message
import jakarta.jms...

----------------------------------------

TITLE: Implementing ActiveMQ-CPP Producer-Consumer Pattern in C++
DESCRIPTION: Complete implementation of a messaging system using ActiveMQ-CPP, featuring a HelloWorldProducer class that sends messages and a HelloWorldConsumer class that receives them asynchronously. The example demonstrates connection handling, session management, message production/consumption, and proper resource cleanup. It supports both Topics and Queues with configurable transaction handling.

LANGUAGE: C++
CODE:
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// START SNIPPET: demo

#include <activemq/library/ActiveMQCPP.h>
#include <decaf/lang/Thread.h>
#include <decaf/lang/Runnable.h>
#include <decaf/util/concurrent/CountDownLatch.h>
#include <decaf/lang/Integer.h>
#include <decaf/lang/Long.h>
#include <decaf/lang/System.h>
#include <activemq/core/ActiveMQConnectionFactory.h>
#include <activemq/util/Config.h>
#include <cms/Connection.h>
#include <cms/Session.h>
#include <cms/TextMessage.h>
#include <cms/BytesMessage.h>
#include <cms/MapMessage.h>
#include <cms/ExceptionListener.h>
#include <cms/MessageListener.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <memory>

using namespace activemq::core;
using namespace decaf::util::concurrent;
using namespace decaf::util;
using namespace decaf::lang;
using namespace cms;
using namespace std;

class HelloWorldProducer : public Runnable {
private:

    Connection* connection;
    Session* session;
    Destination* destination;
    MessageProducer* producer;
    int numMessages;
    bool useTopic;
    bool sessionTransacted;
    std::string brokerURI;

private:

    HelloWorldProducer(const HelloWorldProducer&);
    HelloWorldProducer& operator=(const HelloWorldProducer&);

public:

    HelloWorldProducer(const std::string& brokerURI, int numMessages, bool useTopic = false, bool sessionTransacted = false) :
        connection(NULL),
        session(NULL),
        destination(NULL),
        producer(NULL),
        numMessages(numMessages),
        useTopic(useTopic),
        sessionTransacted(sessionTransacted),
        brokerURI(brokerURI) {
    }

    virtual ~HelloWorldProducer(){
        cleanup();
    }

    void close() {
        this->cleanup();
    }

    virtual void run() {

        try {

            // Create a ConnectionFactory
            auto_ptr<ConnectionFactory> connectionFactory(
                ConnectionFactory::createCMSConnectionFactory(brokerURI));

            // Create a Connection
            connection = connectionFactory->createConnection();
            connection->start();

            // Create a Session
            if (this->sessionTransacted) {
                session = connection->createSession(Session::SESSION_TRANSACTED);
            } else {
                session = connection->createSession(Session::AUTO_ACKNOWLEDGE);
            }

            // Create the destination (Topic or Queue)
            if (useTopic) {
                destination = session->createTopic("TEST.FOO");
            } else {
                destination = session->createQueue("TEST.FOO");
            }

            // Create a MessageProducer from the Session to the Topic or Queue
            producer = session->createProducer(destination);
            producer->setDeliveryMode(DeliveryMode::NON_PERSISTENT);

            // Create the Thread Id String
            string threadIdStr = Long::toString(Thread::currentThread()->getId());

            // Create a messages
            string text = (string) "Hello world! from thread " + threadIdStr;

            for (int ix = 0; ix < numMessages; ++ix) {
                std::auto_ptr<TextMessage> message(session->createTextMessage(text));
                message->setIntProperty("Integer", ix);
                printf("Sent message #%d from thread %s\n", ix + 1, threadIdStr.c_str());
                producer->send(message.get());
            }

        } catch (CMSException& e) {
            e.printStackTrace();
        }
    }

private:

    void cleanup() {

        if (connection != NULL) {
            try {
                connection->close();
            } catch (cms::CMSException& ex) {
                ex.printStackTrace();
            }
        }

        // Destroy resources.
        try {
            delete destination;
            destination = NULL;
            delete producer;
            producer = NULL;
            delete session;
            session = NULL;
            delete connection;
            connection = NULL;
        } catch (CMSException& e) {
            e.printStackTrace();
        }
    }
};

class HelloWorldConsumer : public ExceptionListener,
                           public MessageListener,
                           public Runnable {

private:

    CountDownLatch latch;
    CountDownLatch doneLatch;
    Connection* connection;
    Session* session;
    Destination* destination;
    MessageConsumer* consumer;
    long waitMillis;
    bool useTopic;
    bool sessionTransacted;
    std::string brokerURI;

private:

    HelloWorldConsumer(const HelloWorldConsumer&);
    HelloWorldConsumer& operator=(const HelloWorldConsumer&);

public:

    HelloWorldConsumer(const std::string& brokerURI, int numMessages, bool useTopic = false, bool sessionTransacted = false, int waitMillis = 30000) :
        latch(1),
        doneLatch(numMessages),
        connection(NULL),
        session(NULL),
        destination(NULL),
        consumer(NULL),
        waitMillis(waitMillis),
        useTopic(useTopic),
        sessionTransacted(sessionTransacted),
        brokerURI(brokerURI) {
    }

    virtual ~HelloWorldConsumer() {
        cleanup();
    }

    void close() {
        this->cleanup();
    }

    void waitUntilReady() {
        latch.await();
    }

    virtual void run() {

        try {

            // Create a ConnectionFactory
            auto_ptr<ConnectionFactory> connectionFactory(
                ConnectionFactory::createCMSConnectionFactory(brokerURI));

            // Create a Connection
            connection = connectionFactory->createConnection();
            connection->start();
            connection->setExceptionListener(this);

            // Create a Session
            if (this->sessionTransacted == true) {
                session = connection->createSession(Session::SESSION_TRANSACTED);
            } else {
                session = connection->createSession(Session::AUTO_ACKNOWLEDGE);
            }

            // Create the destination (Topic or Queue)
            if (useTopic) {
                destination = session->createTopic("TEST.FOO");
            } else {
                destination = session->createQueue("TEST.FOO");
            }

            // Create a MessageConsumer from the Session to the Topic or Queue
            consumer = session->createConsumer(destination);

            consumer->setMessageListener(this);

            std::cout.flush();
            std::cerr.flush();

            // Indicate we are ready for messages.
            latch.countDown();

            // Wait while asynchronous messages come in.
            doneLatch.await(waitMillis);

        } catch (CMSException& e) {
            // Indicate we are ready for messages.
            latch.countDown();
            e.printStackTrace();
        }
    }

    // Called from the consumer since this class is a registered MessageListener.
    virtual void onMessage(const Message* message) {

        static int count = 0;

        try {
            count++;
            const TextMessage* textMessage = dynamic_cast<const TextMessage*> (message);
            string text = "";

            if (textMessage != NULL) {
                text = textMessage->getText();
            } else {
                text = "NOT A TEXTMESSAGE!";
            }

            printf("Message #%d Received: %s\n", count, text.c_str());

        } catch (CMSException& e) {
            e.printStackTrace();
        }

        // Commit all messages.
        if (this->sessionTransacted) {
            session->commit();
        }

        // No matter what, tag the count down latch until done.
        doneLatch.countDown();
    }

    // If something bad happens you see it here as this class is also been
    // registered as an ExceptionListener with the connection.
    virtual void onException(const CMSException& ex AMQCPP_UNUSED) {
        printf("CMS Exception occurred.  Shutting down client.\n");
        ex.printStackTrace();
        exit(1);
    }

private:

    void cleanup() {
        if (connection != NULL) {
            try {
                connection->close();
            } catch (cms::CMSException& ex) {
                ex.printStackTrace();
            }
        }

        // Destroy resources.
        try {
            delete destination;
            destination = NULL;
            delete consumer;
            consumer = NULL;
            delete session;
            session = NULL;
            delete connection;
            connection = NULL;
        } catch (CMSException& e) {
            e.printStackTrace();
        }
    }
};

int main(int argc AMQCPP_UNUSED, char* argv[] AMQCPP_UNUSED) {

    activemq::library::ActiveMQCPP::initializeLibrary();
    {
    std::cout << "=====================================================\n";
    std::cout << "Starting the example:" << std::endl;
    std::cout << "-----------------------------------------------------\n";


    // Set the URI to point to the IP Address of your broker.
    // add any optional params to the url to enable things like
    // tightMarshalling or tcp logging etc.  See the CMS web site for
    // a full list of configuration options.
    //
    //  http://activemq.apache.org/cms/
    //
    // Wire Format Options:
    // =========================
    // Use either stomp or openwire, the default ports are different for each
    //
    // Examples:
    //    tcp://127.0.0.1:61616                      default to openwire
    //    tcp://127.0.0.1:61613?wireFormat=stomp     use stomp instead
    //
    // SSL:
    // =========================
    // To use SSL you need to specify the location of the trusted Root CA or the
    // certificate for the broker you want to connect to.  Using the Root CA allows
    // you to use failover with multiple servers all using certificates signed by
    // the trusted root.  If using client authentication you also need to specify
    // the location of the client Certificate.
    //
    //     System::setProperty( "decaf.net.ssl.keyStore", "<path>/client.pem" );
    //     System::setProperty( "decaf.net.ssl.keyStorePassword", "password" );
    //     System::setProperty( "decaf.net.ssl.trustStore", "<path>/rootCA.pem" );
    //
    // The you just specify the ssl transport in the URI, for example:
    //
    //     ssl://localhost:61617
    //
    std::string brokerURI =
        "failover:(tcp://localhost:61616)";

    //============================================================
    // set to true to use topics instead of queues
    // Note in the code above that this causes createTopic or
    // createQueue to be used in both consumer an producer.
    //============================================================
    bool useTopics = true;
    bool sessionTransacted = false;
    int numMessages = 2000;

    long long startTime = System::currentTimeMillis();

    HelloWorldProducer producer(brokerURI, numMessages, useTopics);
        HelloWorldConsumer consumer(brokerURI, numMessages, useTopics, sessionTransacted);

    // Start the consumer thread.
    Thread consumerThread(&consumer);
    consumerThread.start();

    // Wait for the consumer to indicate that its ready to go.
    consumer.waitUntilReady();

    // Start the producer thread.
    Thread producerThread(&producer);
    producerThread.start();

    // Wait for the threads to complete.
    producerThread.join();
    consumerThread.join();

    long long endTime = System::currentTimeMillis();
    double totalTime = (double)(endTime - startTime) / 1000.0;

    consumer.close();
    producer.close();

    std::cout << "Time to completion = " << totalTime << " seconds." << std::endl;
    std::cout << "-----------------------------------------------------\n";
    std::cout << "Finished with the example." << std::endl;
    std::cout << "=====================================================\n";

    }
    activemq::library::ActiveMQCPP::shutdownLibrary();
}

// END SNIPPET: demo

----------------------------------------

TITLE: Running ActiveMQ 3.x with Custom Config
DESCRIPTION: Command line syntax for running ActiveMQ 3.x with a custom XML configuration file

LANGUAGE: shell
CODE:
activemq myconfig.xml

----------------------------------------

TITLE: Configuring JDBC Master Slave in ActiveMQ Classic
DESCRIPTION: XML configuration for setting up JDBC Master Slave in ActiveMQ Classic. This includes persistence adapter configuration, transport connectors, and optional database connection settings for various databases.

LANGUAGE: xml
CODE:
<beans>

  <!-- Allows us to use system properties as variables in this configuration file -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
  
  <broker xmlns="http://activemq.apache.org/schema/core">

    <destinationPolicy>
      <policyMap><policyEntries>
        
          <policyEntry topic="FOO.>">
            <dispatchPolicy>
              <strictOrderDispatchPolicy />
            </dispatchPolicy>
            <subscriptionRecoveryPolicy>
              <lastImageSubscriptionRecoveryPolicy />
            </subscriptionRecoveryPolicy>
          </policyEntry>

      </policyEntries></policyMap>
    </destinationPolicy>
  
  
    <persistenceAdapter>
        <jdbcPersistenceAdapter dataDirectory="${activemq.base}/activemq-data"/>

        <!-- 
        <jdbcPersistenceAdapter dataDirectory="activemq-data" dataSource="#oracle-ds"/>
        --> 
    </persistenceAdapter>
  
    <transportConnectors>
       <transportConnector name="default" uri="tcp://localhost:61616"/>
    </transportConnectors>
    
  </broker>
  
  <!--  This xbean configuration file supports all the standard spring xml configuration options -->
  
  <!-- Postgres DataSource Sample Setup -->
  <!-- 
  <bean id="postgres-ds" class="org.postgresql.ds.PGPoolingDataSource">
    <property name="serverName" value="localhost"/>
    <property name="databaseName" value="activemq"/>
    <property name="portNumber" value="0"/>
    <property name="user" value="activemq"/>
    <property name="password" value="activemq"/>
    <property name="dataSourceName" value="postgres"/>
    <property name="initialConnections" value="1"/>
    <property name="maxConnections" value="10"/>
  </bean>
  -->
  
  <!-- MySql DataSource Sample Setup -->
  <!-- 
  <bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true"/>
    <property name="username" value="activemq"/>
    <property name="password" value="activemq"/>
    <property name="poolPreparedStatements" value="true"/>
  </bean>
  -->  
   
  <!-- Oracle DataSource Sample Setup -->
  <!--
  <bean id="oracle-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
    <property name="url" value="jdbc:oracle:thin:@localhost:1521:AMQDB"/>
    <property name="username" value="scott"/>
    <property name="password" value="tiger"/>
    <property name="poolPreparedStatements" value="true"/>
  </bean>
  -->
      
  <!-- Embedded Derby DataSource Sample Setup -->
  <!-- 
  <bean id="derby-ds" class="org.apache.derby.jdbc.EmbeddedDataSource">
    <property name="databaseName" value="derbydb"/>
    <property name="createDatabase" value="create"/>
  </bean>
  -->  

</beans>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with XML
DESCRIPTION: This XML configuration demonstrates a default ActiveMQ Classic setup, including broker settings, destination policies, JMX management, persistence, system usage limits, and transport connectors. It uses Spring XML format with ActiveMQ-specific extensions.

LANGUAGE: xml
CODE:
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>

    <!--
        The <broker> element is used to configure the ActiveMQ Classic broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">

        <!--
            For better performances use VM cursor and small memory limit.
            For more information, see:

            http://activemq.apache.org/message-cursors.html

            Also, if your producer is "hanging", it's probably due to producer flow control.
            For more information, see:
            http://activemq.apache.org/producer-flow-control.html
        -->

        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true">
                    <!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:

                         http://activemq.apache.org/slow-consumer-handling.html

                    -->
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="1000"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">
                  <!-- Use VM cursor for better latency
                       For more information, see:

                       http://activemq.apache.org/message-cursors.html

                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>
                  -->
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>


        <!--
            The managementContext is used to configure how ActiveMQ Classic is exposed in
            JMX. By default, ActiveMQ Classic uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>


          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
            If using ActiveMQ Classic embedded - the following limits could safely be used:

        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="20 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
        -->
          <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="64 mb"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="100 gb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="50 gb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors expose ActiveMQ Classic over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
        </transportConnectors>

        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
        </shutdownHooks>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="jetty.xml"/>

</beans>

----------------------------------------

TITLE: Implementing ActiveMQ Performance Test Suite in Java
DESCRIPTION: This Java code snippet shows how to implement a performance test suite for ActiveMQ. It includes two test methods: one for small messages and another for large messages, demonstrating the use of a build queue to manage distributed tests.

LANGUAGE: java
CODE:
public class PerformanceTestSuite {
   public void testSmallMessages() {
   	  buildQueue.start("broker", "");
   	  buildQueue.start("consumer", "--messageCount=1000");
   	  buildQueue.start("producer", "--messageCount=1000");
   	  buildQueue.join(5 * MINUTES);
   }

   public void testLargeMessages() {
   	  buildQueue.start("broker", "");
   	  buildQueue.start("consumer", "--messageCount=1000 --messageSize=1M");
   	  buildQueue.start("producer", "--messageCount=1000 --messageSize=1M");
   	  buildQueue.join(10 * MINUTES);
   }
}

----------------------------------------

TITLE: Initializing JMS Client for Request-Response in Java
DESCRIPTION: This snippet demonstrates how to set up a JMS client for request-response communication. It creates a temporary queue for receiving responses and sets up a message producer for sending requests.

LANGUAGE: java
CODE:
// client side
Destination tempDest = session.createTemporaryQueue();
MessageConsumer responseConsumer = session.createConsumer(tempDest);
...

// send a request..
message.setJMSReplyTo(tempDest)
message.setJMSCorrelationID(myCorrelationID);

producer.send(message);

----------------------------------------

TITLE: Configuring ActiveMQ Camel Routes with JUEL and XPath Filters
DESCRIPTION: Comprehensive Spring XML configuration showing different routing patterns using Apache Camel with ActiveMQ. Includes examples of simple topic-to-queue bridging, JUEL-based filtering, XPath filtering for XML messages, choice-based routing, and nested filters. Requires camel-juel and JUEL implementation JARs in the ActiveMQ lib directory.

LANGUAGE: xml
CODE:
<beans>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0"
            brokerName="localhost" dataDirectory="${activemq.base}/data">
    </broker>

    <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">
        <!-- simple bridge from a topic to queue -->
        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming">
            <to   uri="activemq:queue:queue.HelloWorld">
        </route>

        <!-- Dependencies: camel-juel-[camel-n].jar, juel-[juel-n]-impl.jar, juel-[juel-n].jar must be in the activemq lib directory -->
        <!-- 2 separate JUEL based filters -->
        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel1">
            <filter>
                <el>${in.headers.JMSType.equals('foo')}</el>
                <filter>
                    <el>${in.headers.myHeaderField.equals('takeMe')}</el>
                    <to   uri="activemq:queue:queue.HelloWorld.camel1.fooMsgs">
                </filter>
            </filter>
            <filter>
                <el>${in.headers.JMSType.equals('bar')}</el>
                <filter>
                    <el>${in.headers.myHeaderField.equals('takeMe')}</el>
                    <filter>
                        <el>${in.headers.myOtherHeaderField.equals('3')}</el>
                        <to   uri="activemq:queue:queue.HelloWorld.camel1.fooMsgs.special">
                    </filter>
                </filter>
            </filter>
        </route>

        <!-- route using 2 separate xpath based filters, assuming the message has an XML body -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel2">
            <filter>
                <xpath>$JMSType = 'foo' and $myCustomHeader='takeMe'</xpath>
                <to   uri="activemq:queue:queue.HelloWorld.camel2.fooMsgs">
            </filter>
            <filter>
                <xpath>$JMSType = 'bar' and $myCustomHeader='takeMe'</xpath>
                <to   uri="activemq:queue:queue.HelloWorld.camel2.barMsgs">
            </filter>
        </route>

        <!-- route using choice route based on xpath -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel3">
            <choice>
                <when>
                    <xpath>$JMSType = 'foo'</xpath>
                    <to   uri="activemq:queue:queue.HelloWorld.camel3.fooMsgs">
                </when>
                <otherwise>
                    <to   uri="activemq:queue:queue.HelloWorld.camel3.nonFooMsgs">
                </otherwise>
            </choice>
        </route>

        <!-- route using choice route based on JUEL -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel4">
            <choice>
                <when>
                    <el>${in.headers.JMSType.equals('foo')}</el>
                    <to uri="activemq:queue:queue.HelloWorld.camel4.fooMsgs">
                </when>
            </choice>
        </route>

        <!-- route using nested JUEL based filters -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel5">
            <filter>
                <el>${in.headers.JMSType.equals('foo')}</el>
                <filter>
                    <el>${in.headers.OperationRequest.equals('foo1')}</el>
                    <to uri="activemq:queue:queue.HelloWorld.camel5.foo1Msgs">
                </filter>
                <filter>
                    <el>${in.headers.OperationRequest.equals('foo2')}</el>
                    <to uri="activemq:queue:queue.HelloWorld.camel5.foo2Msgs">
                </filter>
            </filter>
        </route>

        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml attribute -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel6">
            <filter>
                <el>${in.headers.JMSType.equals('foo')}</el>
                <filter>
                    <xpath>/rootXMLBodyNode/childXMLBodyNode[@myAttributeKey='myAttributeValue']</xpath>
                    <to uri="activemq:queue:queue.HelloWorld.camel6.fooMsgs">
                </filter>
            </filter>
        </route>

        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml value -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel7">
            <filter>
                <el>${in.headers.JMSType.equals('Tideworks.GateVision.XmlCmd')}</el>
                <filter>
                    <xpath>/rootXMLBodyNode/childXMLBodyNode/elementKey = 'elementValue'</xpath>
                    <to uri="activemq:queue:queue.HelloWorld.camel7.fooMsgs">
                </filter>
            </filter>
        </route>

        <!-- route using nested JUEL and xpath filters, including a filter which examines the message content for an xml attribute -->

        <route>
            <from uri="activemq:topic:topic.HelloWorld.incoming.camel8">
            <filter>
                <el>${in.headers.JMSType.equals('foo')}</el>
                <filter>
                    <xpath>/rootXMLBodyNode/childXMLBodyNode[@myAttributeKey='myAttributeValue']/grandchildXMLBodyNode[@myAttributeKey='myAttributeValue']</xpath>
                    <to uri="activemq:queue:queue.HelloWorld.camel8.fooMsgs">
                </filter>
            </filter>
        </route>
    </camelContext>
</beans>

----------------------------------------

TITLE: Configuring StatisticsPlugin in ActiveMQ XML
DESCRIPTION: XML configuration snippet to enable the StatisticsPlugin in ActiveMQ Classic. Add this to the broker configuration to activate the plugin.

LANGUAGE: xml
CODE:
<broker ...>
  <plugins>
    <statisticsBrokerPlugin/>
  </plugins>
</broker>

----------------------------------------

TITLE: Using XASession for XA Transactions in Java
DESCRIPTION: Illustrates the use of XASession, which acts as an XAResource for XA transactions in ActiveMQ Classic. This allows for distributed transactions across multiple resources.

LANGUAGE: java
CODE:
XASession xaSession = connection.createXASession();
XAResource xaResource = xaSession.getXAResource();

----------------------------------------

TITLE: Creating ConnectionFactory with Embedded Broker in Java
DESCRIPTION: This snippet demonstrates how to create a JMS ConnectionFactory with an embedded broker using ActiveMQ. It disables persistence for faster testing.

LANGUAGE: java
CODE:
ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");

----------------------------------------

TITLE: Implementing Duplicate Message Detection in Java with JMS
DESCRIPTION: This code snippet demonstrates a pseudocode approach for handling potential duplicate messages without using XA transactions. It uses a try-catch block to manage JMS and database transactions separately, with a check for previously processed messages.

LANGUAGE: java
CODE:
onMessage
try {
  if I have not processed this message successfully before {
    do some stuff in the database / with EJBs etc
    jdbc.commit() (unless auto-commit is enabled on the JDBC)
  }
  jms.commit()
} catch (Exception e) {
  jms.rollback()
}

----------------------------------------

TITLE: Configuring Failover Protocol URL for ActiveMQ Classic
DESCRIPTION: This code snippet demonstrates the URL format for configuring automatic reconnection using the failover protocol in ActiveMQ Classic. It specifies multiple host:port combinations for failover.

LANGUAGE: plaintext
CODE:
failover:tcp://host1:port1,tcp://host2:port2

----------------------------------------

TITLE: Configuring Broker with Network Connection in ActiveMQ Classic
DESCRIPTION: This example demonstrates how to create a Broker URI that starts a broker on localhost:61616 and establishes a network connection to remotehost:61616. It also shows how to set broker options like persistence and JMX.

LANGUAGE: plaintext
CODE:
broker:(tcp://localhost:61616,network:static:tcp://remotehost:61616)?persistent=false&useJmx=true

----------------------------------------

TITLE: Configuring Failover for JMS Client in ActiveMQ
DESCRIPTION: This code snippet demonstrates how to configure a failover transport for the JMS client in ActiveMQ. This allows automatic reconnection if the broker goes down.

LANGUAGE: text
CODE:
failover:tcp://host:port

----------------------------------------

TITLE: Configuring TimeStampPlugin in ActiveMQ Classic XML
DESCRIPTION: XML configuration example showing how to enable the TimeStampPlugin with ttlCeiling and zeroExpirationOverride settings set to one day (86,400,000 milliseconds).

LANGUAGE: xml
CODE:
<plugins>
  <!-- 86,400,000 ms = 1 day -->
  <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>
</plugins>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with Security (XML)
DESCRIPTION: Complete ActiveMQ broker configuration including queue setup, STOMP transport, authentication, and authorization. Defines three predefined queues, user authentication with different access levels, and secure JMX management setup. Assumes ActiveMQ Classic installation in /usr/local/activemq/.

LANGUAGE: xml
CODE:
<!--
  ActiveMQ Classic activemq.xml configuration file (/usr/local/activemq/conf/activemq.xml)

  * ActiveMQ Classic JVM Startup options are in /etc/activemq.conf

  * Uses the Sun JMX connector for remote management.  Point jconsole at:
    service:jmx:rmi:///jndi/rmi://myserver.domain.net:61616/jmxrmi

  * Uses Kaha persistence storage, stored in the "activemq-data" directory.
    "activemq-data" and "logs" sub-directories must be writable by the
    ActiveMQ Classic user.

  * Also see conf/log4j.properties for logging configuration
-->

<beans>
    <!-- Enables system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker xmlns="http://activemq.org/config/1.0" brokerName="SERVER1"
        populateJMSXUserID="true" useJmx="true" persistent="true">

    <!-- Queue setup.  Queues can be created on the fly by any user with
         admin rights, but it is not good to give every user admin rights.  -->
    <destinations>
        <queue physicalName="widgets" />
        <queue physicalName="spacecontrol" />
        <queue physicalName="displays" />
    </destinations>

    <!-- We only allow Stomp clients -->
    <transportConnectors>
        <transportConnector name="stomp" uri="stomp://localhost:61613"/>
    </transportConnectors>

    <!-- We don't have any other brokers to connect to -->
    <networkConnectors>
    </networkConnectors>

    <!-- Do not create an ActiveMQ JMX connector.  Use the Sun JMX connector
         instead, and hook ActiveMQ Classic to it. -->
    <managementContext>
        <managementContext createConnector="false" />
    </managementContext>

    <plugins>
        <simpleAuthenticationPlugin>
            <users>
                <authenticationUser username="sa" password="manager" groups="producers,consumers,admins" />
                <authenticationUser username="frontend" password="manager" groups="producers,consumers" />
                <authenticationUser username="backend" password="manager" groups="consumers" />
            </users>
        </simpleAuthenticationPlugin>
        <authorizationPlugin>
            <map>
                <authorizationMap>
                    <authorizationEntries>
                        <authorizationEntry queue=">" write="producers" read="consumers" admin="admins" />
                    </authorizationEntries>
                </authorizationMap>
            </map>
        </authorizationPlugin>
    </plugins>

    </broker>

    <!-- Do not create ActiveMQ.Agent topic, as it does not work if
         destination security is enabled -->
    <!-- <commandAgent xmlns="http://activemq.org/config/1.0"/> -->

    <!-- Web Console.  Auth is via JAAS.  Beware: jetty-plus-6.1.4.jar contains the
         JAAS classes, and is not included with ActiveMQ Classic.  You need to download
         separately.  Web Console queue browser will fail, as it tries to use JMS
         to browse the queue, and that requires a password.
    -->

    <jetty xmlns="http://mortbay.com/schemas/jetty/1.0">
        <connectors>
            <nioConnector port="8161" />
        </connectors>

        <userRealms>
            <!-- "name" must match the realm in web.xml, and "loginModuleName" must be defined in login.conf -->
            <jaasUserRealm name="ActiveMQ" loginModuleName="ActiveMQ"
                    callbackHandlerClass="org.mortbay.jetty.plus.jaas.callback.DefaultCallbackHandler" />
        </userRealms>

        <handlers>
            <webAppContext contextPath="/admin" resourceBase="${activemq.base}/webapps/admin" logUrlOnStart="true" />
        </handlers>
    </jetty>
</beans>

----------------------------------------

TITLE: Configuring ActiveMQConnectionFactory in Spring XML
DESCRIPTION: This snippet demonstrates how to create a JMS connection factory for ActiveMQ Classic in Spring XML, connecting to a remote broker on a specific host and port.

LANGUAGE: xml
CODE:
<bean id="jmsFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
  <property name="brokerURL">
    <value>tcp://localhost:61616</value>
  </property>
</bean>

----------------------------------------

TITLE: Message Processing Implementation with JMS and JDBC Operations
DESCRIPTION: Java implementation of a MessageListener that processes incoming JMS messages and performs both JMS and JDBC operations within a single transaction. The class receives messages, forwards them to another queue, and stores them in a database.

LANGUAGE: java
CODE:
public class EchoBean implements MessageListener {

    private Log log = LogFactory.getLog(getClass());

    private JdbcTemplate jdbcTemplate;
    private JmsTemplate jmsTemplate;

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void setJmsTemplate(JmsTemplate jmsTemplate) {
        this.jmsTemplate = jmsTemplate;
    }

    public void onMessage(Message message) {
        log.debug(message);
        if (message instanceof TextMessage) {
            try {
                String messageText = ((TextMessage)message).getText();
                log.debug("execute JMS operation");
                jmsTemplate.convertAndSend("messages.ouptut", messageText);
                log.debug("execute JDBC operation");
                jdbcTemplate.execute("insert into t1 values('"+messageText+"')");
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}

----------------------------------------

TITLE: MasterSlave Network Connector Configuration
DESCRIPTION: Configuration for connecting to master/slave broker pairs.

LANGUAGE: xml
CODE:
<networkConnectors>
  <networkConnector uri="masterslave:(tcp://host1:61616,tcp://host2:61616,tcp://..)"/>
</networkConnectors>

----------------------------------------

TITLE: Starting ActiveMQ Classic with Custom Configuration
DESCRIPTION: Commands to start ActiveMQ Classic using a custom configuration file. This example uses the activemq-demo.xml file which includes web demos.

LANGUAGE: bash
CODE:
bin/activemq console xbean:examples/conf/activemq-demo.xml

# OR

bin/activemq start xbean:examples/conf/activemq-demo.xml

----------------------------------------

TITLE: Configuring JMS Bridge with Local ActiveMQ Broker using Spring XML
DESCRIPTION: Spring XML configuration that sets up a JMS bridge with a local ActiveMQ broker. It defines inbound and outbound queue bridges with message selectors, and configures a local broker connection factory using vm transport protocol. The bridge connects queue.ping to queue.incomingMsgs.ping and then to queue.pong with JMSType filtering.

LANGUAGE: xml
CODE:
<beans>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0"
            brokerName="localhost" dataDirectory="${activemq.base}/data">
        <jmsBridgeConnectors>
            <jmsQueueConnector outboundQueueConnectionFactory="#localBroker">
                <inboundQueueBridges>
                    <inboundQueueBridge
                            inboundQueueName = "queue.ping"
                            localQueueName   = "queue.incomingMsgs.ping"
                            selector         = "JMSType LIKE 'foo%'"/>
                </inboundQueueBridges>
                <outboundQueueBridges>
                    <outboundQueueBridge
                            localQueueName    = "queue.incomingMsgs.ping"
                            outboundQueueName = "queue.pong"
                            selector          = "JMSType LIKE 'foo%'"/>
                </outboundQueueBridges>
            </jmsQueueConnector>
        </jmsBridgeConnectors>
    </broker>

    <!-- JMS ConnectionFactory to use for local bridging -->
    <bean id="localBroker" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="vm://localhost:61616" />
    </bean>
</beans>

----------------------------------------

TITLE: Multi-KahaDB Persistence Adapter Configuration
DESCRIPTION: Advanced configuration example showing how to set up multiple KahaDB instances with filtered persistence adapters and per-destination storage limits.

LANGUAGE: xml
CODE:
<broker brokerName="broker">

 <persistenceAdapter>
  <mKahaDB directory="${activemq.base}/data/kahadb">
    <filteredPersistenceAdapters>
      <!-- match all queues -->
      <filteredKahaDB queue=">">
        <usage>
         <storeUsage limit="1g" />
        </usage>
        <persistenceAdapter>
          <kahaDB journalMaxFileLength="32mb"/>
        </persistenceAdapter>
      </filteredKahaDB>
      
      <!-- match all destinations -->
      <filteredKahaDB>
        <persistenceAdapter>
          <kahaDB enableJournalDiskSyncs="false"/>
        </persistenceAdapter>
      </filteredKahaDB>
    </filteredPersistenceAdapters>
  </mKahaDB>
 </persistenceAdapter>

</broker>

----------------------------------------

TITLE: ActiveMQ Default Prefetch Size Configuration
DESCRIPTION: Default prefetch size values for different consumer types in ActiveMQ Classic. These values determine the maximum number of messages that ActiveMQ will push to a Consumer without processing.

LANGUAGE: markdown
CODE:
Consumer Type|Default Value
---|---
queue|`1000`
queue browser|`500`
topic|`32767`
durable topic|`1000`

----------------------------------------

TITLE: Configuring Failover Transport URL in ActiveMQ
DESCRIPTION: Example of configuring a failover transport URL to connect clients to master and slave brokers, with randomize disabled to prioritize master connection.

LANGUAGE: text
CODE:
failover://(tcp://masterhost:61616,tcp://slavehost:61616)?randomize=false

----------------------------------------

TITLE: Creating an Exclusive Consumer in ActiveMQ using Java
DESCRIPTION: This code snippet demonstrates how to create an Exclusive Consumer in ActiveMQ using Destination Options. It creates a queue with the 'consumer.exclusive=true' option and then creates a consumer for that queue.

LANGUAGE: java
CODE:
queue = new ActiveMQQueue("TEST.QUEUE?consumer.exclusive=true");
consumer = session.createConsumer(queue);

----------------------------------------

TITLE: Complete JMS Producer Implementation
DESCRIPTION: Full implementation of a JMS message producer using JNDI lookup for connection factory and destination, with proper connection handling and error management.

LANGUAGE: java
CODE:
/**
 * The SimpleQueueSender class consists only of a main method,
 * which sends several messages to a queue. 
 * 
 * Run this program in conjunction with SimpleQueueReceiver. 
 * Specify a queue name on the command line when you run the 
 * program. By default, the program sends one message. Specify 
 * a number after the queue name to send that number of messages. 
 */ 
 
package org.apache.activemq.demo; 

import javax.jms.Connection; 
import javax.jms.ConnectionFactory; 
import javax.jms.Destination; 
import javax.jms.JMSException; 
import javax.jms.MessageProducer; 
import javax.jms.Session; 
import javax.jms.TextMessage; 
import javax.naming.Context; 
import javax.naming.InitialContext; 
import javax.naming.NamingException; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
/**
 * A simple polymorphic JMS producer which can work with Queues or Topics which 
 * uses JNDI to lookup the JMS connection factory and destination.
 */ 
public final class SimpleProducer { 
   private static final Logger LOG = LoggerFactory.getLogger(SimpleProducer.class); 
   private SimpleProducer() {}  
  
   /**
    * @param args the destination name to send to and optionally, the number of 
    * messages to send 
    */ 
   public static void main(String[] args) { 
      Context jndiContext; 
      ConnectionFactory connectionFactory; 
      Connection connection; 
      Session session; 
      Destination destination; 
      MessageProducer producer; 
      String destinationName; 
      final int numMsgs;  
      
      if ((args.length < 1) || (args.length > 2)) { 
         LOG.info("Usage: java SimpleProducer <destination-name> [<number-of-messages>]"); System.exit(1); 
      }  
      
      destinationName = args[0]; 
      LOG.info("Destination name is " + destinationName); 
      
      if (args.length == 2) { 
         numMsgs = (new Integer(args[1])).intValue(); 
      } else { 
         numMsgs = 1; 
      } 
      
      /*
       * Create a JNDI API InitialContext object 
       */
      try { 
         jndiContext = new InitialContext(); 
      } catch (NamingException e) { 
         LOG.info("Could not create JNDI API context: " + e.toString()); 
         System.exit(1); 
      }
      
      /* 
       * Look up connection factory and destination. 
       */
      try { 
         connectionFactory = (ConnectionFactory)jndiContext.lookup("ConnectionFactory"); 
         destination = (Destination)jndiContext.lookup(destinationName); 
      } catch (NamingException e) { 
         LOG.info("JNDI API lookup failed: " + e); 
         System.exit(1); 
      }  
      
      /*
       * Create connection. Create session from connection; false means 
       * session is not transacted. Create sender and text message. Send 
       * messages, varying text slightly. Send end-of-messages message. 
       * Finally, close the connection. 
       */ 
      try { 
         connection = connectionFactory.createConnection(); 
         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); 
         producer = session.createProducer(destination); 
         TextMessage message = session.createTextMessage();  
         for (int i = 0; i < numMsgs; i++) { 
            message.setText("This is message " + (i + 1)); 
            LOG.info("Sending message: " + message.getText()); producer.send(message); 
         }  
         
         /*
          * Send a non-text control message indicating end of messages. 
          */ 
         producer.send(session.createMessage()); 
      } catch (JMSException e) { 
         LOG.info("Exception occurred: " + e); 
      } finally { 
         if (connection != null) { 
            try { 
               connection.close(); 
            } catch (JMSException ignored) {
            } 
         } 
      } 
   } 
}

----------------------------------------

TITLE: Configuring ActiveMQ and Camel for Oracle AQ Integration in XML
DESCRIPTION: This XML configuration sets up an ActiveMQ broker, defines Camel routes for reading messages from Oracle AQ queues and topics, and configures the necessary connection factories and credentials for Oracle AQ integration. It requires ojdbc.jar and aqjms.jar in the ActiveMQ lib directory.

LANGUAGE: xml
CODE:
<beans>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0"
            brokerName="localhost" dataDirectory="${activemq.base}/data" >
    </broker>

    <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">
        <!-- Dependencies: ojdbc.jar and aqjms.jar must be in the activemq lib directory -->

        <!-- this camel route will read incoming messages from Oracle -->
        <route>
            <from uri="oracleQueue:queue:ORACLE_QUEUE">
            <to   uri="activemq:queue:queue.inboundOracleAQqueue" >
        </route>
        <route>
            <!-- NOTE: I have had success with a topic using ActiveMQ Classic 5.3, but not 5.1 -->
            <from uri="oracleTopic:topic:ORACLE_TOPIC">
            <to   uri="activemq:queue:queue.inboundOracleAQtopic" >
        </route>

        <!-- these camel routes will log the messages to the console .... replace them with something more useful!!  -->
        <route>
            <from uri="activemq:queue:queue.inboundOracleAQqueue" >
            <to uri="log:oracleAQ.inbound.got_a_queue_message?level=ERROR">
        </route>
        <route>
            <from uri="activemq:queue:queue.inboundOracleAQtopic" >
            <to uri="log:oracleAQ.inbound.got_a_topic_message?level=ERROR">
        </route>
    </camelContext>

    <!-- without the following bean instantiation, we will get an oracle.jms.AQjmsException with each and every received message -->
    <bean id="requiredBeanForOracleAq" class="org.apache.activemq.ActiveMQConnectionFactory" />

    <bean id="connectionFactoryOracleAQQueue" class="oracle.jms.AQjmsFactory" factory-method="getQueueConnectionFactory">
        <constructor-arg index="0">
            <value>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST ....... (SERVICE_NAME = myDbService)))</value>
        </constructor-arg>
        <constructor-arg index="1" type="java.util.Properties">
            <value></value>
        </constructor-arg>
    </bean>

    <bean id="connectionFactoryOracleAQTopic" class="oracle.jms.AQjmsFactory"
                factory-method="getQueueConnectionFactory">
        <constructor-arg index="0">
            <value>jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST ....... (SERVICE_NAME = myDbService)))</value>
        </constructor-arg>
        <constructor-arg index="1" type="java.util.Properties">
            <value></value>
        </constructor-arg>
    </bean>

    <bean id="oracleQueueCredentials" class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter">
        <property name="targetConnectionFactory">
            <ref bean="connectionFactoryOracleAQQueue">
        </property>
        <property name="username">
            <value>foo</value>
        </property>
        <property name="password">
            <value>bar</value>
        </property>
    </bean>

    <bean id="oracleTopicCredentials" class="org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter">
        <property name="targetConnectionFactory">
            <ref bean="connectionFactoryOracleAQTopic">
        </property>
        <property name="username">
            <value>foo</value>
        </property>
        <property name="password">
            <value>bar</value>
        </property>
    </bean>

   <bean id="oracleQueue" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory" ref="oracleQueueCredentials">
   </bean>

   <bean id="oracleTopic" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory" ref="oracleTopicCredentials">
   </bean>
</beans>

----------------------------------------

TITLE: Configuring Composite Queue in ActiveMQ XML
DESCRIPTION: This XML configuration example demonstrates how to set up a composite queue in ActiveMQ. Messages sent to MY.QUEUE will be forwarded to the physical queue FOO and the topic BAR.

LANGUAGE: xml
CODE:
<destinationInterceptors>
 <virtualDestinationInterceptor> 
   <virtualDestinations> 
     <compositeQueue name="MY.QUEUE">
       <forwardTo>
         <queue physicalName="FOO" /> 
         <topic physicalName="BAR" />
       </forwardTo>
     </compositeQueue>
   </virtualDestinations>
 </virtualDestinationInterceptor>
</destinationInterceptors>

----------------------------------------

TITLE: Configuring ActiveMQ Classic network connection with inactivity timeout
DESCRIPTION: This XML configuration snippet demonstrates how to set up an ActiveMQ Classic broker with a network connector that disables the inactivity monitor. This is a workaround for the issue of large messages being dropped on slow networks.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://activemq.org/config/1.0">

  <broker brokerName="receiver">
    <transportConnectors>
      <transportConnector uri="tcp://localhost:62002"/>
    </transportConnectors>

    <networkConnectors>
      <networkConnector uri="static:(tcp://somehost:62001?wireFormat.maxInactivityDuration=0)"/>
    </networkConnectors>

    <persistenceAdapter>
      <memoryPersistenceAdapter/>
    </persistenceAdapter>
  </broker>

</beans>

----------------------------------------

TITLE: Configuring ActiveMQ Destination Policies Using Spring XML
DESCRIPTION: Example Spring XML configuration demonstrating various destination policies for different topics including dispatch policies, subscription recovery policies, and pending message limit strategies. Uses Spring beans and ActiveMQ schema definitions to configure broker behavior.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
 
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
 
  <broker persistent="false" 
          brokerName="${brokername}" 
          xmlns="http://activemq.apache.org/schema/core">
    
    <destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry topic="FOO.>">
            <dispatchPolicy>
              <roundRobinDispatchPolicy/>
            </dispatchPolicy>
            <subscriptionRecoveryPolicy>
              <lastImageSubscriptionRecoveryPolicy/>
            </subscriptionRecoveryPolicy>
          </policyEntry>
           
          <policyEntry topic="ORDERS.>">
            <dispatchPolicy>
              <strictOrderDispatchPolicy/>
            </dispatchPolicy>
 
            <!-- Recover 1 minute's worth -->
            <subscriptionRecoveryPolicy>
              <timedSubscriptionRecoveryPolicy recoverDuration="60000"/>
            </subscriptionRecoveryPolicy>
          </policyEntry>
     
          <policyEntry topic="PRICES.>">
            <!-- Force pending messages to be discarded for slow consumers -->
            <pendingMessageLimitStrategy>
              <constantPendingMessageLimitStrategy limit="10"/>
            </pendingMessageLimitStrategy>
 
            <!-- 10 seconds worth -->
            <subscriptionRecoveryPolicy>
              <timedSubscriptionRecoveryPolicy recoverDuration="10000"/>
            </subscriptionRecoveryPolicy>
             
          </policyEntry>
          <policyEntry tempTopic="true" advisoryForConsumed="true"/>
          <policyEntry tempQueue="true" advisoryForConsumed="true"/>
        </policyEntries>
      </policyMap>
    </destinationPolicy>
  </broker>
</beans>

----------------------------------------

TITLE: Configuring MQTT over NIO with SSL
DESCRIPTION: Configuration for enabling MQTT protocol over NIO transport with SSL encryption.

LANGUAGE: xml
CODE:
<transportConnector name="mqtt+nio" uri="mqtt+nio+ssl://localhost:1883"/>

----------------------------------------

TITLE: Spring Configuration for JMS-JDBC Transaction Integration
DESCRIPTION: Spring beans configuration that sets up ActiveMQ broker, Geronimo transaction manager, connection pools, and resource adapters for integrated JMS and JDBC operations. Includes configuration for transaction management, connection pooling, and resource adapter setup.

LANGUAGE: xml
CODE:
<beans>
    <!-- ActiveMQ Classic Broker -->
    <bean id="broker" class="org.apache.activemq.broker.BrokerService" init-method="start" destroy-method="stop">
        <property name="persistent" value="false"/>
        <property name="transportConnectorURIs">
            <list>
                <value>tcp://localhost:5000</value>
            </list>
        </property>
    </bean>

    <!-- Geronimo Transaction Manager -->
    <bean id="transactionContextManager" class="org.jencks.factory.TransactionContextManagerFactoryBean"/>
    <bean id="geronimo" class="org.jencks.factory.GeronimoTransactionManagerFactoryBean"/>
    <bean id="geronimoTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="userTransaction" ref="geronimo" />
    </bean>

    <!-- Jencks Connection Manager -->
    <bean id="connectionManager" class="org.jencks.factory.ConnectionManagerFactoryBean">
        <property name="transactionSupport">
            <bean class="org.jencks.factory.XATransactionFactoryBean">
                <property name="useTransactionCaching" value="true"/>
                <property name="useThreadCaching" value="false"/>
            </bean>
        </property>
        <property name="poolingSupport">
            <bean class="org.jencks.factory.SinglePoolFactoryBean">
                <property name="maxSize" value="2"/>
                <property name="minSize" value="1"/>
                <property name="blockingTimeoutMilliseconds" value="60"/>
                <property name="idleTimeoutMinutes" value="60"/>
                <property name="matchOne" value="true"/>
                <property name="matchAll" value="true"/>
                <property name="selectOneAssumeMatch" value="true"/>
            </bean>
        </property>
    </bean>

    <!-- ActiveMQ Classic Connection -->
    <bean id="jmsResourceAdapter" class="org.apache.activemq.ra.ActiveMQResourceAdapter" depends-on="broker">
        <property name="serverUrl">
            <value>tcp://localhost:5000</value>
        </property>
    </bean>
    <bean id="jmsManagedConnectionFactory" class="org.apache.activemq.ra.ActiveMQManagedConnectionFactory">
        <property name="resourceAdapter" ref="jmsResourceAdapter"/>
    </bean>
    <bean id="jmsConnectionFactory" class="org.springframework.jca.support.LocalConnectionFactoryBean">
        <property name="managedConnectionFactory" ref="jmsManagedConnectionFactory"/>
        <property name="connectionManager" ref="connectionManager"/>
    </bean>

    <!-- Enhydra JDBC Connection -->
    <bean id="enhydraDataSource" class="org.enhydra.jdbc.pool.StandardXAPoolDataSource" destroy-method="shutdown">
        <property name="dataSource">
            <bean class="org.enhydra.jdbc.standard.StandardXADataSource" destroy-method="shutdown">
                <property name="transactionManager" ref="geronimo" />
                <property name="driverName" value="org.postgresql.Driver" />
                <property name="url" value="jdbc:postgresql://ats-manager/activemq" />
            </bean>
        </property>
        <property name="user" value="activemq"/>
    </bean>

    <bean id="jencksJCAContainer" class="org.jencks.JCAContainer">
        <property name="bootstrapContext">
            <bean class="org.jencks.factory.BootstrapContextFactoryBean">
                <property name="threadPoolSize" value="25"/>
            </bean>
        </property>
        <property name="resourceAdapter" ref="jmsResourceAdapter"/>
    </bean>

    <bean id="inboundConnector" class="org.jencks.JCAConnector">
        <property name="jcaContainer" ref="jencksJCAContainer" />
        <property name="activationSpec">
            <bean class="org.apache.activemq.ra.ActiveMQActivationSpec">
                <property name="destination" value="messages.input"/>
                <property name="destinationType" value="javax.jms.Queue"/>
            </bean>
        </property>
        <property name="transactionManager" ref="geronimo"/>
        <property name="ref" value="echoBean"/>
    </bean>

    <bean id="echoBean" class="transactions.EchoBean">
        <property name="jdbcTemplate">
            <bean class="org.springframework.jdbc.core.JdbcTemplate">
                <property name="dataSource" ref="enhydraDataSource"/>
            </bean>
        </property>
        <property name="jmsTemplate">
            <bean class="org.springframework.jms.core.JmsTemplate">
                <property name="connectionFactory" ref="jmsConnectionFactory"/>
            </bean>
        </property>
    </bean>
</beans>

----------------------------------------

TITLE: Implementing Synchronous Message Consumer with NMS in C#
DESCRIPTION: Demonstrates how to create an NMS connection, create sessions, producers and consumers, and perform synchronous message sending and receiving. Shows handling of connection strings, destination creation, and message property manipulation. Includes examples of different destination types (queues and topics) and connection URI formats.

LANGUAGE: csharp
CODE:
using System;
using Apache.NMS;
using Apache.NMS.Util;

namespace Apache.NMS.ActiveMQ.Test
{
public class TestMain
{
    public static void Main(string[] args)
    {
        // Example connection strings:
        //    activemq:tcp://activemqhost:61616
        //    stomp:tcp://activemqhost:61613
        //    ems:tcp://tibcohost:7222
        //    msmq://localhost

        Uri connecturi = new Uri("activemq:tcp://activemqhost:61616");
        
        Console.WriteLine("About to connect to " + connecturi);

        // NOTE: ensure the nmsprovider-activemq.config file exists in the executable folder.
        IConnectionFactory factory = new NMSConnectionFactory(connecturi);

        using(IConnection connection = factory.CreateConnection())
        using(ISession session = connection.CreateSession())
        {
             // Examples for getting a destination:
             //
             // Hard coded destinations:
             //    IDestination destination = session.GetQueue("FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = session.GetTopic("FOO.BAR");
             //    Debug.Assert(destination is ITopic);
             //
             // Embedded destination type in the name:
             //    IDestination destination = SessionUtil.GetDestination(session, "queue://FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = SessionUtil.GetDestination(session, "topic://FOO.BAR");
             //    Debug.Assert(destination is ITopic);
             //
             // Defaults to queue if type is not specified:
             //    IDestination destination = SessionUtil.GetDestination(session, "FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //
             // .NET 3.5 Supports Extension methods for a simplified syntax:
             //    IDestination destination = session.GetDestination("queue://FOO.BAR");
             //    Debug.Assert(destination is IQueue);
             //    IDestination destination = session.GetDestination("topic://FOO.BAR");
             //    Debug.Assert(destination is ITopic);

            IDestination destination = SessionUtil.GetDestination(session, "queue://FOO.BAR");
            Console.WriteLine("Using destination: " + destination);

            // Create a consumer and producer
            using(IMessageConsumer consumer = session.CreateConsumer(destination))
            using(IMessageProducer producer = session.CreateProducer(destination))
            {
                // Start the connection so that messages will be processed.
                connection.Start();
				producer.DeliveryMode = MsgDeliveryMode.Persistent;
					
                // Send a message
                ITextMessage request = session.CreateTextMessage("Hello World!");
                request.NMSCorrelationID = "abc";
                request.Properties["NMSXGroupID"] = "cheese";
                request.Properties["myHeader"] = "Cheddar";

                producer.Send(request);

                // Consume a message
                ITextMessage message = consumer.Receive() as ITextMessage;
                if(message == null)
                {
                    Console.WriteLine("No message received!");
                }
                else
                {
                    Console.WriteLine("Received message with ID:   " + message.NMSMessageId);
                    Console.WriteLine("Received message with text: " + message.Text);
                }
            }
        }
    }
}
}

----------------------------------------

TITLE: Configuring log4j properties for JMS appender with ActiveMQ Classic
DESCRIPTION: This snippet shows how to configure log4j properties to use JMS appender with ActiveMQ Classic. It sets up console and JMS appenders, specifies the initial context factory, provider URL, and topic bindings.

LANGUAGE: properties
CODE:
log4j.rootLogger=INFO, stdout, jms

## Be sure that ActiveMQ Classic messages are not logged to 'jms' appender
log4j.logger.org.apache.activemq=INFO, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %-5p %c - %m%n

## Configure 'jms' appender. You'll also need jndi.properties file in order to make it work
log4j.appender.jms=org.apache.log4j.net.JMSAppender
log4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitialContextFactory
log4j.appender.jms.ProviderURL=tcp://localhost:61616
log4j.appender.jms.TopicBindingName=logTopic
log4j.appender.jms.TopicConnectionFactoryBindingName=ConnectionFactory

----------------------------------------

TITLE: Configuring ShiroPlugin in Java for ActiveMQ
DESCRIPTION: Example of programmatically configuring the ShiroPlugin in Java code for ActiveMQ. Demonstrates how to create and set up the plugin on a BrokerService instance.

LANGUAGE: java
CODE:
BrokerService brokerService = new BrokerService();

ShiroPlugin shiroPlugin = new ShiroPlugin();
//configure shiroPlugin via getters/setters here

broker.setPlugins(new BrokerPlugin[]{shiroPlugin});
//continue configuring the brokerService as necessary ...

----------------------------------------

TITLE: Creating an Embedded Broker with Java in ActiveMQ Classic
DESCRIPTION: This snippet demonstrates how to create and configure an embedded broker using explicit Java code. It shows how to add a connector and start the broker.

LANGUAGE: java
CODE:
BrokerService broker = new BrokerService();

// configure the broker
broker.addConnector("tcp://localhost:61616");

broker.start();

----------------------------------------

TITLE: Implementing JMS Client with Request-Response in Java
DESCRIPTION: This example shows a complete JMS client implementation supporting request-response. It includes creating a temporary queue for responses, sending messages with correlation IDs, and handling responses.

LANGUAGE: java
CODE:
import org.apache.activemq.ActiveMQConnectionFactory;

import javax.jms.*;
import java.util.Random;

public class Client implements MessageListener {
    private static int ackMode;
    private static String clientQueueName;

    private boolean transacted = false;
    private MessageProducer producer;

    static {
        clientQueueName = "client.messages";
        ackMode = Session.AUTO_ACKNOWLEDGE;
    }

    public Client() {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        Connection connection;
        try {
            connection = connectionFactory.createConnection();
            connection.start();
            Session session = connection.createSession(transacted, ackMode);
            Destination adminQueue = session.createQueue(clientQueueName);

            //Setup a message producer to send message to the queue the server is consuming from
            this.producer = session.createProducer(adminQueue);
            this.producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

            //Create a temporary queue that this client will listen for responses on then create a consumer
            //that consumes message from this temporary queue...for a real application a client should reuse
            //the same temp queue for each message to the server...one temp queue per client
            Destination tempDest = session.createTemporaryQueue();
            MessageConsumer responseConsumer = session.createConsumer(tempDest);

            //This class will handle the messages to the temp queue as well
            responseConsumer.setMessageListener(this);

            //Now create the actual message you want to send
            TextMessage txtMessage = session.createTextMessage();
            txtMessage.setText("MyProtocolMessage");

            //Set the reply to field to the temp queue you created above, this is the queue the server
            //will respond to
            txtMessage.setJMSReplyTo(tempDest);

            //Set a correlation ID so when you get a response you know which sent message the response is for
            //If there is never more than one outstanding message to the server then the
            //same correlation ID can be used for all the messages...if there is more than one outstanding
            //message to the server you would presumably want to associate the correlation ID with this
            //message somehow...a Map works good
            String correlationId = this.createRandomString();
            txtMessage.setJMSCorrelationID(correlationId);
            this.producer.send(txtMessage);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }

    private String createRandomString() {
        Random random = new Random(System.currentTimeMillis());
        long randomLong = random.nextLong();
        return Long.toHexString(randomLong);
    }

    public void onMessage(Message message) {
        String messageText = null;
        try {
            if (message instanceof TextMessage) {
                TextMessage textMessage = (TextMessage) message;
                messageText = textMessage.getText();
                System.out.println("messageText = " + messageText);
            }
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }

    public static void main(String[] args) {
        new Client();
    }
}

----------------------------------------

TITLE: Setting JMSXGroupID in Java for ActiveMQ Message Groups
DESCRIPTION: This Java code demonstrates how to set the JMSXGroupID property on a JMS message. This is used to assign a message to a specific group in ActiveMQ's Message Groups feature.

LANGUAGE: java
CODE:
Mesasge message = session.createTextMessage("<foo>hey</foo>");
message.setStringProperty("JMSXGroupID", "IBM\_NASDAQ\_20/4/05");
...
producer.send(message);

----------------------------------------

TITLE: Configuring TimedSubscriptionRecoveryPolicy in XML
DESCRIPTION: Maintains a time-based buffer of messages in memory. The recoverDuration parameter specifies the retention period in milliseconds.

LANGUAGE: xml
CODE:
<timedSubscriptionRecoveryPolicy recoverDuration="60000" />

----------------------------------------

TITLE: Configuring Message Eviction Strategies in ActiveMQ
DESCRIPTION: XML configurations for different message eviction strategies including oldest message, unique property, and oldest with lowest priority.

LANGUAGE: xml
CODE:
<oldestMessageEvictionStrategy/>

<uniquePropertyMessageEvictionStrategy propertyName="STOCK"/>

<oldestMessageWithLowestPriorityEvictionStrategy/>

----------------------------------------

TITLE: Injecting JMS Resources in Tomcat Servlet
DESCRIPTION: Demonstrates how to inject Topic, Queue, and ConnectionFactory resources into a Tomcat servlet using Java annotations. This code works out of the box with Apache TomEE, which has ActiveMQ Classic pre-integrated.

LANGUAGE: java
CODE:
import javax.annotation.Resource;
import javax.servlet.http.HttpServlet;
import javax.jms.Topic;
import javax.jms.Queue;
import javax.jms.ConnectionFactory;

public class MyServet extends HttpServlet {

    @Resource(name = "foo")
    private Topic fooTopic;

    @Resource(name = "bar")
    private Queue barQueue;

    @Resource
    private ConnectionFactory connectionFactory;

----------------------------------------

TITLE: Sample ActiveMQ Broker Properties Configuration File
DESCRIPTION: Example properties file showing basic broker configuration settings including JMX usage, persistence, and broker naming. This demonstrates the standard format for configuring an ActiveMQ broker through properties.

LANGUAGE: properties
CODE:
## ---------------------------------------------------------------------------
## Licensed to the Apache Software Foundation (ASF) under one or more
## contributor license agreements.  See the NOTICE file distributed with
## this work for additional information regarding copyright ownership.
## The ASF licenses this file to You under the Apache License, Version 2.0
## (the "License"); you may not use this file except in compliance with
## the License.  You may obtain a copy of the License at
## 
## http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
## ---------------------------------------------------------------------------
# START SNIPPET: example
useJmx = false
persistent = false
brokerName = Cheese
# END SNIPPET: example

----------------------------------------

TITLE: Configuring TCP Transport on Client Side in ActiveMQ Classic URI
DESCRIPTION: Example of configuring TCP transport options on the client side using a connection URI string. This snippet shows how to set thread name, tracing, and socket timeout options.

LANGUAGE: plaintext
CODE:
tcp://localhost:61616?threadName&trace=false&soTimeout=60000

----------------------------------------

TITLE: Configuring JBoss JCA for ActiveMQ Classic
DESCRIPTION: XML configuration for JBoss JCA to initialize and start ActiveMQ Classic

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE connection-factories
    PUBLIC "-//JBoss//DTD JBOSS JCA Config 1.5//EN"
    "http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd">

<connection-factories>

   <tx-connection-factory>
      <jndi-name>activemq/QueueConnectionFactory</jndi-name>
      <xa-transaction/>
      <track-connection-by-tx/>
      <rar-name>activemq-ra.rar</rar-name>
      <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>
      <ServerUrl>vm://localhost</ServerUrl>
      <min-pool-size>1</min-pool-size>
      <max-pool-size>200</max-pool-size>
      <blocking-timeout-millis>30000</blocking-timeout-millis>
      <idle-timeout-minutes>3</idle-timeout-minutes>
   </tx-connection-factory>

   <!-- Additional configuration omitted for brevity -->

</connection-factories>

----------------------------------------

TITLE: Complete ActiveMQ Broker Configuration with Slow Consumer Handling
DESCRIPTION: Comprehensive XML configuration example showing broker setup with different policies for various topics including FOO, ORDERS, and PRICES with specific handling for slow consumers.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:amq="http://activemq.apache.org/schema/core" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd 
                           http://activemq.apache.org/schema/core  
                           http://activemq.apache.org/schema/core/activemq-core.xsd"> 
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/> 
  <broker xmlns="http://activemq.apache.org/schema/core" persistent="false" brokerName="${brokername}"> 
    <!-- lets define the dispatch policy --> 
    <destinationPolicy> 
      <policyMap> 
        <policyEntries> 
          <policyEntry topic="FOO.>"> 
            <dispatchPolicy> 
              <roundRobinDispatchPolicy/> 
            </dispatchPolicy> 
            <subscriptionRecoveryPolicy> 
              <lastImageSubscriptionRecoveryPolicy/> 
            </subscriptionRecoveryPolicy>
          </policyEntry> 
          <policyEntry topic="ORDERS.>"> 
            <dispatchPolicy> 
              <strictOrderDispatchPolicy/> 
            </dispatchPolicy> 
            <!-- 1 minutes worth --> 
            <subscriptionRecoveryPolicy>
              <timedSubscriptionRecoveryPolicy recoverDuration="60000"/>
            </subscriptionRecoveryPolicy> 
          </policyEntry> 
          <policyEntry topic="PRICES.>"> 
          <!-- lets force old messages to be discarded for slow consumers --> 
            <pendingMessageLimitStrategy> 
              <constantPendingMessageLimitStrategy limit="10"/> 
            </pendingMessageLimitStrategy> 
            <!-- 10 seconds worth --> 
            <subscriptionRecoveryPolicy> 
              <timedSubscriptionRecoveryPolicy recoverDuration="10000"/> 
            </subscriptionRecoveryPolicy> 
          </policyEntry> 
          <policyEntry tempTopic="true" advisoryForConsumed="true"/> 
          <policyEntry tempQueue="true" advisoryForConsumed="true"/> 
        </policyEntries> 
      </policyMap> 
    </destinationPolicy> 
  </broker> 
</beans>

----------------------------------------

TITLE: Configuring ShiroPlugin with Encrypted Passwords in ActiveMQ XML
DESCRIPTION: Example of configuring the ShiroPlugin in ActiveMQ's XML configuration using encrypted passwords. Shows how to set up a PasswordMatcher and use hashed passwords for users.

LANGUAGE: xml
CODE:
<bean id="shiroPlugin" class="org.apache.activemq.shiro.ShiroPlugin" xmlns="http://www.springframework.org/schema/beans">
    <property name="iniConfig"><value>

    [main]
    # Shiro object graph configuration here
    passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
    iniRealm.credentialsMatcher = $passwordMatcher
 
    [users]
    scott = $shiro1$SHA-256$500000$eWpVX2tGX7WCP2J+jMCNqw==$it/NRclMOHrfOvhAEFZ0mxIZRdbcfqIBdwdwdDXW2dM=, advisory
    system = $shiro1$SHA-256$500000$eUyGwMGr9GYzB/gg/MoNgw==$WGc0yWFWv8+hLqjzVLgW7Hat2FQTywDXBl5izpqaLSY=, system

    [roles]
    system = *
    advisory = topic:ActiveMQ.Advisory*
    </value></property>
</bean>

----------------------------------------

TITLE: Configuring Pooled JMS Connection Factory with Spring JmsTemplate
DESCRIPTION: This example demonstrates how to configure a pooling-based JMS provider using PooledConnectionFactory and set up Spring's JmsTemplate for efficient JMS resource utilization.

LANGUAGE: xml
CODE:
<!-- a pooling based JMS provider -->
<bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
  <property name="connectionFactory">
    <bean class="org.apache.activemq.ActiveMQConnectionFactory">
      <property name="brokerURL">
        <value>tcp://localhost:61616</value>
      </property>
    </bean>
  </property>
</bean>

<!-- Spring JMS Template -->
<bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
  <property name="connectionFactory">
    <ref local="jmsFactory"/>
  </property>
</bean>

----------------------------------------

TITLE: Creating NMS Consumer with Custom Destination Options in C#
DESCRIPTION: Demonstrates how to create a queue consumer with specific dispatch and prefetch settings using URL query parameters. The example shows setting dispatchAsync to false and prefetchSize to 10 messages.

LANGUAGE: csharp
CODE:
var queue = session.GetQueue("TEST.QUEUE?consumer.dispatchAsync=false&consumer.prefetchSize=10");
var consumer = session.CreateConsumer(queue);

----------------------------------------

TITLE: Extending BrokerFilter for Custom Broker in Java
DESCRIPTION: Example of extending the BrokerFilter class to create a custom broker implementation in Java. It overrides the addConnection and addSession methods to intercept and customize these operations.

LANGUAGE: java
CODE:
import org.apache.activemq.broker.Broker;
import org.apache.activemq.broker.BrokerFilter;
import org.apache.activemq.broker.ConnectionContext;
import org.apache.activemq.command.ConnectionInfo;

public class MyBroker extends BrokerFilter {
    
     public MyBroker(Broker next) {
        super(next);                
    }

    public void addConnection(ConnectionContext context, ConnectionInfo info) 
            throws Exception {       
        
         // Your code goes here 

        // Then call your parent
        super.addConnection(context, info);
    }   

    public void addSession(ConnectionContext context, SessionInfo info) 
            throws Exception {       
        
         //  Your code goes here...

         // Then call your parent
         super.addSession(context, info);
    }	
}

----------------------------------------

TITLE: Basic JNDI Topic Connection Setup
DESCRIPTION: Sample code demonstrating how to create a JNDI initial context and set up a topic connection with subscriber in ActiveMQ.

LANGUAGE: java
CODE:
// Create a new intial context, which loads from jndi.properties file: 
javax.naming.Context ctx = new javax.naming.InitialContext(); 
// Lookup the connection factory: 
javax.jms.TopicConnectionFactory factory = (javax.jms.TopicConnectionFactory)ctx.lookup("ConnectionFactory"); 
// Create a new TopicConnection for pub/sub messaging: 
javax.jms.TopicConnection conn = factory.getTopicConnection(); 
// Lookup an existing topic: 
javax.jms.Topic mytopic = (javax.jms.Topic)ctx.lookup("MyTopic"); 
// Create a new TopicSession for the client: 
javax.jms.TopicSession session = conn.createTopicSession(false,TopicSession.AUTO_ACKNOWLEDGE); 
// Create a new subscriber to receive messages: 
javax.jms.TopicSubscriber subscriber = session.createSubscriber(mytopic);

----------------------------------------

TITLE: Configuring AUTO Protocol Detection over NIO in ActiveMQ Classic
DESCRIPTION: This XML configuration enables AUTO wire format protocol detection over an NIO TCP connection in ActiveMQ Classic. It sets up a transport connector named 'auto+nio' listening on localhost port 5671.

LANGUAGE: xml
CODE:
<transportConnector name="auto+nio" uri="auto+nio://localhost:5671"/>

----------------------------------------

TITLE: Spring XML Configuration for JCA Container
DESCRIPTION: Example Spring XML configuration showing how to deploy a POJO (EchoBean) on an inbound JMS subscription for a topic. The configuration demonstrates setting up JCAContainer instances, WorkManager configuration, and POJO pooling using Spring's targetSource.

LANGUAGE: xml
CODE:
<Note>Example XML configuration referenced but not shown in the original text</Note>

----------------------------------------

TITLE: Closing a Message Group in Java with ActiveMQ
DESCRIPTION: This Java code shows how to close a message group in ActiveMQ by setting a negative JMSXGroupSeq value. This allows reassignment of future messages with the same group ID to a new consumer.

LANGUAGE: java
CODE:
Mesasge message = session.createTextMessage("<foo>hey</foo>");
message.setStringProperty("JMSXGroupID", "IBM\_NASDAQ\_20/4/05");
message.setIntProperty("JMSXGroupSeq", -1);
...
producer.send(message);

----------------------------------------

TITLE: Enabling JMX in ActiveMQ Classic XML Configuration
DESCRIPTION: XML configuration snippet to enable JMX support in the ActiveMQ Classic broker by setting the useJmx property to true.

LANGUAGE: xml
CODE:
<broker useJmx="true" brokerName="BROKER1">
...
</broker>

----------------------------------------

TITLE: Starting ActiveMQ 4.x with Custom Config
DESCRIPTION: Commands for starting ActiveMQ 4.x broker with a custom XML configuration file, either from classpath or file system.

LANGUAGE: bash
CODE:
activemq xbean:myConfig.xml
activemq xbean:file:../conf/myConfig.xml

----------------------------------------

TITLE: Specifying Multiple URLs for High Availability in ActiveMQ Classic
DESCRIPTION: This example shows how to use the 'failover:' prefix to specify multiple URLs for high availability and auto-reconnection in ActiveMQ Classic. It provides a failover URL string with multiple TCP endpoints.

LANGUAGE: text
CODE:
failover:(tcp://foo:61699,tcp://bar:61617,tcp://whatnot:61698)

----------------------------------------

TITLE: Configuring Queue Strict Order Dispatch in ActiveMQ
DESCRIPTION: XML configuration for setting strict order dispatch behavior on queues. The strictOrderDispatch attribute determines whether messages are dispatched in round-robin fashion (false) or by exhausting one consumer's prefetch buffer before moving to the next (true).

LANGUAGE: xml
CODE:
<policyEntry queue=">" strictOrderDispatch="false" />

----------------------------------------

TITLE: Configuring AUTO Protocol Detection over SSL in ActiveMQ Classic
DESCRIPTION: This XML configuration enables AUTO wire format protocol detection over an SSL connection in ActiveMQ Classic. It sets up a transport connector named 'auto+ssl' listening on localhost port 5671.

LANGUAGE: xml
CODE:
<transportConnector name="auto+ssl" uri="auto+ssl://localhost:5671"/>

----------------------------------------

TITLE: Complex Message Scheduling with CRON and Repeat in NMS.ActiveMQ (C#)
DESCRIPTION: This snippet demonstrates a complex scheduling scenario where a message is delivered 10 times with a 1-second delay between each delivery, repeated every hour using both CRON and other scheduling properties.

LANGUAGE: C#
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
message.Properties["AMQ_SCHEDULED_CRON"] = "0 * * * *";
message.Properties["AMQ_SCHEDULED_DELAY"] = 1000;
message.Properties["AMQ_SCHEDULED_PERIOD"] = 1000;
message.Properties["AMQ_SCHEDULED_REPEAT"] = 9;
producer.Send(message);

----------------------------------------

TITLE: Scheduling Repeated Message Delivery with Initial Delay in ActiveMQ Classic (Java)
DESCRIPTION: This code schedules a message with an initial delay of 30 seconds, then repeats delivery 10 times with a 10-second interval between each delivery in ActiveMQ Classic.

LANGUAGE: java
CODE:
MessageProducer producer = session.createProducer(destination);
TextMessage message = session.createTextMessage("test msg");
long delay = 30 * 1000;
long period = 10 * 1000;
int repeat = 9;
message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, delay);
message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, period);
message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, repeat);
producer.send(message);

----------------------------------------

TITLE: Scheduling Message Delivery Using CRON in NMS.ActiveMQ (C#)
DESCRIPTION: This example illustrates how to schedule a message for delivery every hour using a CRON expression (AMQ_SCHEDULED_CRON property) in NMS.ActiveMQ.

LANGUAGE: C#
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
message.Properties["AMQ_SCHEDULED_CRON"] = "0 * * * *";
producer.Send(message);

----------------------------------------

TITLE: Configuring Startup Destinations in ActiveMQ XML
DESCRIPTION: XML configuration example showing how to define queues and topics that should be available when the ActiveMQ broker starts. This feature requires ActiveMQ 4.1 or newer versions.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.apache.org/schema/core">
    <destinations>
        <queue physicalName="FOO.BAR" />
        <topic physicalName="SOME.TOPIC" />
    </destinations>
</broker>

----------------------------------------

TITLE: Configuring JNDI Properties for ActiveMQ
DESCRIPTION: JNDI properties configuration file that specifies the initial context factory, connection settings, and queue/topic definitions for ActiveMQ Classic.

LANGUAGE: properties
CODE:
java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory

# use the following property to configure the default connector
java.naming.provider.url = vm://localhost

# use the following property to specify the JNDI name the connection factory
# should appear as. 
#connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactry

# register some queues in JNDI using the form
# queue.[jndiName] = [physicalName]
queue.MyQueue = example.MyQueue

# register some topics in JNDI using the form
# topic.[jndiName] = [physicalName]
topic.MyTopic = example.MyTopic

----------------------------------------

TITLE: Advanced ActiveMQ Consumer Examples
DESCRIPTION: Examples of consuming messages with transactions, client acknowledgment, and durable topic subscribers.

LANGUAGE: bash
CODE:
bin/activemq consumer --transacted true
bin/activemq consumer --ackMode CLIENT_ACKNOWLEDGE
bin/activemq consumer --durable true --clientId example --destination topic://TEST

----------------------------------------

TITLE: Configuring AMQP over SSL
DESCRIPTION: XML configuration for enabling AMQP over SSL connection on port 5671.

LANGUAGE: xml
CODE:
<transportConnector name="amqp+ssl" uri="amqp+ssl://localhost:5671"/>

----------------------------------------

TITLE: Configuring Mirrored Queues in ActiveMQ XML
DESCRIPTION: XML configuration snippet for enabling mirrored queues in ActiveMQ broker configuration. Sets up destination interceptors to create mirror topics with customizable prefix and postfix. The copyMessage attribute determines if messages should be copied to the mirror.

LANGUAGE: xml
CODE:
<destinationInterceptors>
    <mirroredQueue copyMessage = "true" postfix=".qmirror" prefix=""/>
</destinationInterceptors>

----------------------------------------

TITLE: Implementing JMS in a TomEE Servlet with ActiveMQ Classic
DESCRIPTION: This snippet demonstrates how to use JMS resources in a TomEE servlet, including injecting Topics, Queues, and ConnectionFactory, as well as sending a message to a Topic. It showcases the automatic resource creation feature of TomEE.

LANGUAGE: java
CODE:
import javax.annotation.Resource;
import javax.servlet.http.HttpServlet;
import javax.jms.Topic;
import javax.jms.Queue;
import javax.jms.ConnectionFactory;

public class MyServet extends HttpServlet {

    @Resource(name = "foo")
    private Topic fooTopic;

    @Resource(name = "bar")
    private Queue barQueue;

    @Resource
    private ConnectionFactory connectionFactory;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        //...

        Connection connection = connectionFactory.createConnection();
        connection.start();

        // Create a Session
        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        // Create a MessageProducer from the Session to the Topic or Queue
        MessageProducer producer = session.createProducer(fooTopic);
        producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

        // Create a message
        TextMessage message = session.createTextMessage("Hello World!");

        // Tell the producer to send the message
        producer.send(message);

        //...
    }
}

----------------------------------------

TITLE: Configuring Redelivery Policy per Destination in ActiveMQ using Java
DESCRIPTION: This code snippet demonstrates how to configure different Redelivery Policies for Topics and Queues in ActiveMQ. It sets up separate policies with custom parameters and applies them to all topics and queues using wildcards.

LANGUAGE: java
CODE:
ActiveMQConnection connection ...  // Create a connection

RedeliveryPolicy queuePolicy = new RedeliveryPolicy();
queuePolicy.setInitialRedeliveryDelay(0);
queuePolicy.setRedeliveryDelay(1000);
queuePolicy.setUseExponentialBackOff(false);
queuePolicy.setMaximumRedeliveries(2);

RedeliveryPolicy topicPolicy = new RedeliveryPolicy();
topicPolicy.setInitialRedeliveryDelay(0);
topicPolicy.setRedeliveryDelay(1000);
topicPolicy.setUseExponentialBackOff(false);
topicPolicy.setMaximumRedeliveries(3);

// Receive a message with the JMS API
RedeliveryPolicyMap map = connection.getRedeliveryPolicyMap();
map.put(new ActiveMQTopic(">"), topicPolicy);
map.put(new ActiveMQQueue(">"), queuePolicy);

----------------------------------------

TITLE: Configuring VM Transport URL in ActiveMQ Classic
DESCRIPTION: Shows how to set up the broker URL for in-memory messaging using the VM transport protocol. The VM transport enables messaging within the same JVM and classloader, with the ability to segment multiple logical brokers using different names after 'vm://'.

LANGUAGE: text
CODE:
vm://localhost

----------------------------------------

TITLE: Implementing Message Driven Bean with ActiveMQ Classic in JBoss
DESCRIPTION: This code snippet demonstrates how to create a Message Driven Bean (MDB) that integrates with ActiveMQ Classic in a JBoss environment. It shows the proper use of annotations for resource adapter configuration and message-driven bean activation.

LANGUAGE: Java
CODE:
import org.jboss.annotation.ejb.ResourceAdapter;

@MessageDriven(activationConfig = {  
   @ActivationConfigProperty(propertyName="destinationType", propertyValue="javax.jms.Queue"),  
   @ActivationConfigProperty(propertyName="destination", propertyValue="FOO.TEST"),  
   @ActivationConfigProperty(propertyName="acknowledgeMode", propertyValue="Auto-acknowledge")  
})  
@ResourceAdapter("activemq-rar-4.1.1.rar")  
public class TestBean implements MessageListener {

   public TestBean() {  
   }

   public void onMessage(Message message) {  
   }
}

----------------------------------------

TITLE: Setting Trusted Packages in ActiveMQConnectionFactory for Java Clients
DESCRIPTION: This Java code demonstrates how to set trusted packages for ObjectMessage deserialization in client applications using the ActiveMQConnectionFactory class.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
factory.setTrustedPackages(new ArrayList(Arrays.asList("org.apache.activemq.test,org.apache.camel.test".split(","))));

----------------------------------------

TITLE: Configuring AMQP with NIO Transport
DESCRIPTION: XML configuration for enabling AMQP with NIO transport for better scalability and performance.

LANGUAGE: xml
CODE:
<transportConnector name="amqp+nio" uri="amqp+nio://localhost:5672"/>

----------------------------------------

TITLE: Retrieving Broker Statistics Using Java JMS
DESCRIPTION: Java code example demonstrating how to retrieve broker statistics using JMS. It sends a message to 'ActiveMQ.Statistics.Broker' and processes the MapMessage response.

LANGUAGE: java
CODE:
Queue replyTo = session.createTemporaryQueue();
MessageConsumer consumer = session.createConsumer(replyTo);

String queueName = "ActiveMQ.Statistics.Broker";
Queue testQueue = session.createQueue(queueName);
MessageProducer producer = session.createProducer(testQueue);
Message msg = session.createMessage();
msg.setJMSReplyTo(replyTo);
producer.send(msg);

MapMessage reply = (MapMessage) consumer.receive();
assertNotNull(reply);

for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
  String name = e.nextElement().toString();
  System.out.println(name + "=" + reply.getObject(name));
}

----------------------------------------

TITLE: Configuring Destinations Plugin in ActiveMQ XML
DESCRIPTION: This XML snippet shows how to configure the Destinations Plugin in ActiveMQ. It specifies the location where destination information will be saved. The plugin exports destinations to this file when the broker stops and pre-creates destinations from this file when the broker starts.

LANGUAGE: xml
CODE:
<plugins>
    <destinationsPlugin location="/workspace/destinations"/>
</plugins>

----------------------------------------

TITLE: Configuring System Usage Limits in XML
DESCRIPTION: XML configuration to set memory, store, and temporary usage limits for the broker to control when producers are slowed down.

LANGUAGE: xml
CODE:
<systemUsage>
  <systemUsage>
    <memoryUsage>
      <memoryUsage limit="64 mb" />
    </memoryUsage>
    <storeUsage>
      <storeUsage limit="100 gb" />
    </storeUsage>
    <tempUsage>
      <tempUsage limit="10 gb" />
    </tempUsage>
  </systemUsage>
</systemUsage>

----------------------------------------

TITLE: Accessing Queue Statistics via JMX in ActiveMQ Classic
DESCRIPTION: This snippet lists the key attributes available through JMX MBeans for monitoring queue statistics in ActiveMQ Classic. These attributes provide information about message counts, queue size, and message lifecycle within the queue.

LANGUAGE: java
CODE:
"Enqueue Count - the total number of messages sent to the queue since the last restart\nDequeue Count - the total number of messages removed from the queue (ack'd by consumer) since last restart\nInflight Count - the number of messages sent to a consumer session and have not received an ack\nDispatch Count - the total number of messages sent to consumer sessions (Dequeue + Inflight)\nExpired Count - the number of messages that were not delivered because they were expired\nQueueSize - the total number of messages in the queue/store that have not been ack'd by a consumer"

----------------------------------------

TITLE: Basic Wildcard Pattern Examples
DESCRIPTION: Examples of destination patterns using wildcards for stock market price subscriptions. Shows how '.' separates path elements, '*' matches any name, and '>' matches recursively.

LANGUAGE: text
CODE:
PRICE.>
PRICE.STOCK.>
PRICE.STOCK.NASDAQ.*
PRICE.STOCK.*.IBM

----------------------------------------

TITLE: Enabling DEBUG Logging in log4j.properties
DESCRIPTION: This snippet shows how to modify the log4j.properties file to enable DEBUG level logging by commenting out INFO logging and uncommenting DEBUG logging.

LANGUAGE: properties
CODE:
#log4j.rootLogger=INFO, stdout, out
log4j.logger.org.apache.activemq.spring=WARN
log4j.logger.org.springframework=WARN
log4j.logger.org.apache.xbean.spring=WARN

# When debugging or reporting problems to the ActiveMQ team,
# comment out the above lines and uncomment the next.

log4j.rootLogger=DEBUG, out, stdout

----------------------------------------

TITLE: Configuring TCP Transport on Broker Side in ActiveMQ Classic XML
DESCRIPTION: Example of configuring a TCP transport connector on the broker side using XML. This snippet demonstrates setting thread name, tracing, and socket timeout options.

LANGUAGE: XML
CODE:
tcp://localhost:61616?transport.threadName&transport.trace=false&transport.soTimeout=60000

----------------------------------------

TITLE: Complex Message Scheduling with CRON and Repeat in ActiveMQ Classic (Java)
DESCRIPTION: This snippet demonstrates a complex scheduling scenario where a message is delivered 10 times with a one-second delay between each delivery, repeating this pattern every hour using both CRON and repeat properties in ActiveMQ Classic.

LANGUAGE: java
CODE:
MessageProducer producer = session.createProducer(destination);
TextMessage message = session.createTextMessage("test msg");
message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "0 * * * *");
message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, 1000);
message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 1000);
message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, 9);
producer.send(message);

----------------------------------------

TITLE: Configuring JMX Remote Access in ActiveMQ Classic
DESCRIPTION: XML configuration to disable ActiveMQ's default JMX connector and use the JVM's default connector for remote access.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.org/config/1.0" brokerName="localhost"useJmx="true">

  ...

  <managementContext>
     <managementContext createConnector="false"/>
  </managementContext>

  ...

</broker>

----------------------------------------

TITLE: Configuring Secure WebSocket Transport in ActiveMQ XML
DESCRIPTION: This XML snippet demonstrates how to set up a secure WebSocket (WSS) transport connector in ActiveMQ. It configures the connector to use port 61614 and accept connections from any IP address.

LANGUAGE: xml
CODE:
<transportConnectors>
  <transportConnector name="secure_websocket" uri="wss://0.0.0.0:61614"/>
</transportConnectors>

----------------------------------------

TITLE: Setting Message Time-to-Live in Java using JMS MessageProducer
DESCRIPTION: This snippet demonstrates two ways to set message expiration in JMS using the MessageProducer interface. The first method uses setTimeToLive() to set a default expiration for all messages, while the second method allows setting expiration for individual messages during the send operation.

LANGUAGE: java
CODE:
producer.setTimeToLive()

LANGUAGE: java
CODE:
producer.send(Destination, Message, int, int, long)

----------------------------------------

TITLE: Scheduling Message Delivery Using CRON in ActiveMQ Classic (Java)
DESCRIPTION: This example shows how to schedule a message for delivery every hour using a CRON expression in ActiveMQ Classic.

LANGUAGE: java
CODE:
MessageProducer producer = session.createProducer(destination);
TextMessage message = session.createTextMessage("test msg");
message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "0 * * * *");
producer.send(message);

----------------------------------------

TITLE: Encrypting Passwords Using ActiveMQ CLI
DESCRIPTION: Shows how to use the ActiveMQ command-line tool to encrypt passwords using the default PBEWithMD5AndDES algorithm.

LANGUAGE: bash
CODE:
$ bin/activemq encrypt --password activemq --input mypassword

----------------------------------------

TITLE: Implementing Advisory Message Consumer in ActiveMQ Classic 3
DESCRIPTION: Example implementation of an advisory message consumer that listens for producer information. Shows how to create an advisory destination, set up a message consumer, and process incoming ObjectMessages containing ProducerInfo.

LANGUAGE: java
CODE:
... 
String advisoryName = ActiveMQDestination.PRODUCER_ADVISORY_PREFIX + destination.getPhysicalName(); 
Destination advisoryDestination = ActiveMQDestination.createDestination(destination.getDestinationType(), advisoryName); 
MessageConsumer consumer = session.createConsumer(advisoryDestination); 
consumer.setMessageListener(this); 
.... 

public void onMessage(Message msg) {
   if (msg instanceof ObjectMessage) {
      try {
         ProducerInfo info = (ProducerInfo)((ObjectMessage)msg).getObject();
      } catch (JMSException e) {
         log.error("Failed to process message: " + msg); 
      } 
   }
}

----------------------------------------

TITLE: Retrieving Topics from JNDI in Spring
DESCRIPTION: Spring XML configuration for retrieving JMS Topics from the JNDI context. This example shows how to configure beans for two different topics using the JNDI template.

LANGUAGE: xml
CODE:
<bean id="weatherTopic"
	class="org.springframework.jndi.JndiObjectFactoryBean"
	singleton="true">
    <property name="jndiTemplate">
        <ref bean="jndiTemplate"/>
    </property>
    <property name="jndiName">
        <value>${jms.weatherTopic}</value>
    </property>
</bean>

<bean id="weatherRequestTopic"
	class="org.springframework.jndi.JndiObjectFactoryBean"
	singleton="true">
      <property name="jndiTemplate">
          <ref bean="jndiTemplate"/>
      </property>
      <property name="jndiName">
          <value>${jms.weatherRequestsTopic}</value>
      </property>
</bean>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with Spring Factory Bean
DESCRIPTION: This XML configuration shows how to use a Spring factory bean to refer to an external ActiveMQ Classic XML configuration file.

LANGUAGE: xml
CODE:
<bean id="broker" class="org.apache.activemq.xbean.BrokerFactoryBean">
  <property name="config" value="classpath:org/apache/activemq/xbean/activemq.xml" />
  <property name="start" value="true" />
</bean>

----------------------------------------

TITLE: Configuring Asynchronous Sending via Connection URI in ActiveMQ Classic
DESCRIPTION: This code snippet demonstrates how to enable asynchronous sending of persistent messages by setting the 'jms.useAsyncSend' parameter to true in the ActiveMQ Classic connection URI. This method allows for faster message streaming to the broker.

LANGUAGE: java
CODE:
tcp://localhost:61616?jms.useAsyncSend=true

----------------------------------------

TITLE: Configuring Composite Queue with Wire Tapping in ActiveMQ XML
DESCRIPTION: This XML configuration shows how to set up a composite queue with wire tapping functionality. Messages sent to IncomingOrders will be copied to Notifications topic and placed on the physical IncomingOrders queue.

LANGUAGE: xml
CODE:
<compositeQueue name="IncomingOrders" forwardOnly="false"> 
   <forwardTo>
    <topic physicalName="Notifications" />
   </forwardTo>
 </compositeQueue>

----------------------------------------

TITLE: Configuring NIO SSL Transport in ActiveMQ Classic XML
DESCRIPTION: This XML snippet shows how to set up the NIO SSL transport connector in an ActiveMQ Classic broker's configuration. It uses the 'nio+ssl' scheme and binds to all network interfaces on port 61616.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio+ssl" uri="nio+ssl://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Configuring Failover Transport for Auto Reconnection in Apache ActiveMQ Classic
DESCRIPTION: This code snippet demonstrates how to set up the connection URI for auto reconnection using the failover transport in Apache ActiveMQ Classic. It uses the ActiveMQConnectionFactory to configure the brokerURL.

LANGUAGE: java
CODE:
failover:tcp://host:port

----------------------------------------

TITLE: Efficient JMS Resource Handling Pattern in Java
DESCRIPTION: This code snippet demonstrates the recommended pattern for safely obtaining, using, and releasing JMS resources in a multi-threaded environment. It's suggested to use PooledConnectionFactory for thread-safe resource sharing.

LANGUAGE: java
CODE:
obtainJmsResource();

try
{
    useJmsResource()
} finally {
    releaseJmsResource();
}

----------------------------------------

TITLE: Creating Embedded Broker using ActiveMQConnectionFactory in ActiveMQ Classic
DESCRIPTION: This Java code demonstrates how to create an embedded broker using ActiveMQConnectionFactory with a vm connector URI. It also shows how to configure the broker using query parameters.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");

----------------------------------------

TITLE: Setting MessageTransformer in ActiveMQ Classic Java API
DESCRIPTION: This snippet demonstrates how to set a MessageTransformer on various ActiveMQ classes using the setTransformer() method. The transformer can be set on ConnectionFactory, Connection, Session, MessageConsumer, or MessageProducer objects.

LANGUAGE: Java
CODE:
// Setting transformer on ConnectionFactory
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
factory.setTransformer(new CustomMessageTransformer());

// Setting transformer on Connection
ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
connection.setTransformer(new CustomMessageTransformer());

// Setting transformer on Session
ActiveMQSession session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
session.setTransformer(new CustomMessageTransformer());

// Setting transformer on MessageConsumer
ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session.createConsumer(destination);
consumer.setTransformer(new CustomMessageTransformer());

// Setting transformer on MessageProducer
ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(destination);
producer.setTransformer(new CustomMessageTransformer());

----------------------------------------

TITLE: Starting ActiveMQ on Windows
DESCRIPTION: Commands to start the ActiveMQ broker on Windows systems from the installation directory.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
bin\activemq start

----------------------------------------

TITLE: Disabling Producer Flow Control for Specific Destinations in XML
DESCRIPTION: XML configuration to disable producer flow control for specific JMS topics using destination policies in the broker configuration.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry topic="FOO.>" producerFlowControl="false"/>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Creating and Using BlazeChannel for Broadcasting in Java
DESCRIPTION: This snippet demonstrates how to create a BlazeChannel, start it, send a message, and shut it down. It also shows how to create a receiver channel and add a listener for receiving messages on a specific topic.

LANGUAGE: Java
CODE:
import org.apache.activeblaze.*;
...
BlazeChannelFactory factory = new BlazeChannelFactory();
BlazeChannel sender = factory.createChannel();
//start the channel and send a message
sender.start();

String destination = "foo.bar";
BlazeMessage msg = new BlazeMessage("test payload");
sender.broadcast(destination,msg);
//shutdown the sender
sender.shutDown();

You can similarly subscribe to Topic messages by using a listener

BlazeChannel receiver = factory.createChannel();
receiver.start();

//add a listener

receiver.addBlazeTopicMessageListener(destination, new BlazeMessageListener() {
            public void onMessage(BlazeMessage msg) {
                System.out.println("Got a msg: " + msg);
            }
        });

receiver.shutDown();

----------------------------------------

TITLE: ActiveMQ Broker Configuration
DESCRIPTION: XML configuration for setting up the embedded ActiveMQ broker within JBoss

LANGUAGE: xml
CODE:
<beans xmlns="http://activemq.org/config/1.0">
  <broker useJmx="true" brokerName="bruce.broker1">
    <managementContext>
      <managementContext createConnector="false"/>
    </managementContext>
    <persistenceAdapter>
      <journaledJDBC journalLogFiles="5" dataDirectory="${jboss.server.data.dir}/activemq"/>
    </persistenceAdapter>
    <transportConnectors>
      <transportConnector name="bruce.broker1" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
    </transportConnectors>
  </broker>
</beans>

----------------------------------------

TITLE: Setting Message Durability in JMS MessageProducer
DESCRIPTION: Demonstrates how to configure a JMS MessageProducer to send durable messages by setting the delivery mode to PERSISTENT. By default, messages are durable if no delivery mode is specified.

LANGUAGE: java
CODE:
MessageProducer producer = ...;
producer.setDeliveryMode(DeliveryMode.PERSISTENT);

----------------------------------------

TITLE: Implementing Custom Message Authorization Policy in Java
DESCRIPTION: Example of creating a custom message authorization policy by implementing the MessageAuthorizationPolicy interface. This allows for message-level authorization in ActiveMQ Classic.

LANGUAGE: Java
CODE:
public boolean isAllowedToConsume(ConnectionContext context, Message message){...}

----------------------------------------

TITLE: Configuring JMS Bridge with Spring XML in ActiveMQ
DESCRIPTION: Example of using pure Spring XML configuration to set up a JMS to JMS bridge in ActiveMQ, including broker and bridge connector settings.

LANGUAGE: xml
CODE:
<!-- local broker with embedded Jms to Jms bridge (ok - it's contrived) -->
<bean id="localbroker" class="org.apache.activemq.broker.BrokerService"
  init-method="start">
  <property name="brokerName" value = "localBroker"/>
    <property name="persistent" value = "false"/>
  <property name="transportConnectorURIs">
    <list>
      <value>tcp://localhost:61234</value>
    </list>
  </property>
  <property name="jmsBridgeConnectors">
    <list>
      <ref bean="jmsConnector"/>
    </list>
  </property>
</bean>

<!-- JMS ConnectionFactory to use local broker (the one with the bridge) -->
<bean id="localFactory"
  class="org.apache.activemq.ActiveMQConnectionFactory">
  <property name="brokerURL" value="tcp://localhost:61234" />
</bean>

<!--JmsTopicConnector - the Jms bridge -->
<bean id="jmsConnector"
  class="org.apache.activemq.network.jms.JmsTopicConnector">
  <property name = "outboundTopicConnectionFactory" ref = "remoteFactory"/>

  <property name = "inboundTopicBridges">
    <list>
      <ref bean="InboundTopicBridge" />
    </list>
  </property>

</bean>

<bean id ="InboundTopicBridge" class="org.apache.activemq.network.jms.InboundTopicBridge">
  <property name = "inboundTopicName" value = "org.apache.activemq.network.jms.TopicBridgeSpringTest"/>
</bean>

----------------------------------------

TITLE: Stopping ActiveMQ on Unix
DESCRIPTION: Command to stop the ActiveMQ broker running as a background process on Unix systems.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]/bin
./activemq stop

----------------------------------------

TITLE: Configuring VM Transport with External Broker Configuration in ActiveMQ Classic
DESCRIPTION: Shows how to start an embedded broker using the VM transport and configure it using an external XML configuration file.

LANGUAGE: plaintext
CODE:
vm://localhost?brokerConfig=xbean:activemq.xml

----------------------------------------

TITLE: Configuring SQLServer 2005 Persistence Adapter in ActiveMQ XML
DESCRIPTION: This snippet shows the configuration for ActiveMQ persistence adapter and data source using SQLServer 2005 drivers. It uses the journaledJDBC adapter with an imageBasedJDBCAdaptor and a BasicDataSource bean.

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <journaledJDBC journalLogFiles="5" dataDirectory="../activemq-data" dataSource="#mssql-ds">
    <adapter><imageBasedJDBCAdaptor/></adapter>
  </journaledJDBC>
</persistenceAdapter>

<bean id="mssql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
  <property name="url" value="jdbc:sqlserver://HOST:PORT;databaseName=DBNAME;user=USER;password=PASSWORD"/>
  <property name="username" value="USER"/>
  <property name="password" value="PASSWORD"/>
</bean>

----------------------------------------

TITLE: Configuring Offline Durable Subscriber Management in ActiveMQ
DESCRIPTION: XML configuration for broker settings to manage offline durable subscribers. Sets up automatic removal of subscribers inactive for 24 hours (86400000 ms) with hourly checks (3600000 ms).

LANGUAGE: xml
CODE:
<broker name="localhost" offlineDurableSubscriberTimeout="86400000" offlineDurableSubscriberTaskSchedule="3600000">

----------------------------------------

TITLE: Creating Output Stream for JMS Message in ActiveMQ
DESCRIPTION: Demonstrates how to create and use an OutputStream to write large messages to an ActiveMQ destination. The code shows initialization of connection and destination, followed by stream creation and usage.

LANGUAGE: java
CODE:
ActiveMQConnection connection = ...;
Destination destination = new ActiveMQQueue("FOO.BAR");

OutputStream out = connection.createOutputStream(destination);

// write the file to out
out.close();

----------------------------------------

TITLE: Customizing EmbeddedActiveMQBroker in Java
DESCRIPTION: This snippet demonstrates how to customize the EmbeddedActiveMQBroker by extending the class and overriding the configure method.

LANGUAGE: java
CODE:
@Rule
EmbeddedActiveMQBroker customizedBroker = new EmbeddedActiveMQBroker() {
    @Override
    protected void configure() {
        // Perform additional configuration here...
    }
};

----------------------------------------

TITLE: Configuring AUTO Protocol Detection over TCP in ActiveMQ Classic
DESCRIPTION: This XML configuration enables AUTO wire format protocol detection over a TCP connection in ActiveMQ Classic. It sets up a transport connector named 'auto' listening on localhost port 5671.

LANGUAGE: xml
CODE:
<transportConnector name="auto" uri="auto://localhost:5671"/>

----------------------------------------

TITLE: Decrypting Passwords Using ActiveMQ CLI
DESCRIPTION: Demonstrates password decryption using the ActiveMQ command-line tool to verify encrypted values.

LANGUAGE: bash
CODE:
$ bin/activemq decrypt  --password activemq --input eeWjNyX6FY8Fjp3E+F6qTytV11bZItDp

----------------------------------------

TITLE: Configuring SSL Transport Options for ActiveMQ Classic Client
DESCRIPTION: Example of passing SSL transport options to the ActiveMQ Classic client, specifically setting enabled cipher suites.

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?socket.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA

----------------------------------------

TITLE: Configuring NIO Transport in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure the NIO transport connector in an ActiveMQ Classic broker's XML configuration file. It uses the 'nio' scheme and binds to all network interfaces on port 61616.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Creating an Exclusive Consumer in NMS.ActiveMQ using C#
DESCRIPTION: This snippet demonstrates how to create an Exclusive Consumer using ActiveMQ URI Configuration. It creates a queue with the 'consumer.exclusive=true' parameter and then creates a consumer for that queue.

LANGUAGE: csharp
CODE:
var queue = session.GetQueue("TEST.QUEUE?consumer.exclusive=true");
var consumer = session.CreateConsumer(queue);

----------------------------------------

TITLE: Configuring Web Console Security for ActiveMQ (XML)
DESCRIPTION: Web application security configuration snippet for ActiveMQ admin console. Implements HTTP Basic Authentication and restricts access to users with 'admins' role.

LANGUAGE: xml
CODE:
<security-constraint>
    <web-resource-collection>
        <web-resource-name>Web Console</web-resource-name>
        <url-pattern>/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>admins</role-name>
    </auth-constraint>
</security-constraint>

<login-config>
    <auth-method>BASIC</auth-method>
    <realm-name>ActiveMQ</realm-name>
</login-config>

----------------------------------------

TITLE: Configuring ActiveMQ Logging Interceptor with Spring XML
DESCRIPTION: Spring XML configuration example showing how to enable the logging interceptor plugin in ActiveMQ. This configuration enables all logging events while disabling connection event logging, and includes additional plugins like timestamping and trace broker path.

LANGUAGE: xml
CODE:
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
  <broker useJmx="false" persistent="false" xmlns="http://activemq.apache.org/schema/core">
    <plugins>
    
      <!-- lets enable detailed logging in the broker but ignore ConnectionEvents -->
      <loggingBrokerPlugin logAll="true" logConnectionEvents="false"/>
      
      <timeStampingBrokerPlugin zeroExpirationOverride="1000" ttlCeiling="60000" futureOnly="true"/>    
      <traceBrokerPathPlugin/>
      
    </plugins>
  </broker>
</beans>

----------------------------------------

TITLE: Configuring ActiveMQ Broker for Inactive Destination Deletion
DESCRIPTION: This XML configuration sets up the ActiveMQ broker to check for and delete inactive destinations. It schedules checks every 10 seconds and defines a policy to remove queues that have been inactive for more than 30 seconds.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.apache.org/schema/core" schedulePeriodForDestinationPurge="10000">

  <destinationPolicy>
     <policyMap>
        <policyEntries>
           <policyEntry queue=">" gcInactiveDestinations="true" inactiveTimoutBeforeGC="30000"/>
        </policyEntries>
     </policyMap>
  </destinationPolicy>
      
</broker>

----------------------------------------

TITLE: Configuring runtimeConfigurationPlugin in ActiveMQ Broker XML
DESCRIPTION: This XML snippet shows how to configure the runtimeConfigurationPlugin within the ActiveMQ broker configuration. The plugin allows for runtime changes to the broker configuration without requiring a restart. The checkPeriod attribute determines the frequency of checking for configuration updates.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.apache.org/schema/core" start="false" ... >
    <plugins>
      <runtimeConfigurationPlugin checkPeriod="1000" />
    </plugins>
    ...
</broker>

----------------------------------------

TITLE: Configuring Prefetch and Redelivery via Connection URI
DESCRIPTION: Example showing how to configure multiple nested properties including prefetch policy and redelivery settings in a single connection URI.

LANGUAGE: plaintext
CODE:
tcp://localhost:61616?jms.prefetchPolicy.all=100&jms.redeliveryPolicy.maximumRedeliveries=5

----------------------------------------

TITLE: Configuring Redelivery Policy in Java
DESCRIPTION: Demonstrates how to configure message redelivery settings using ActiveMQ's RedeliveryPolicy class. Sets initial delay, backoff multiplier, and maximum redelivery attempts.

LANGUAGE: java
CODE:
RedeliveryPolicy policy = connection.getRedeliveryPolicy();
policy.setInitialRedeliveryDelay(500);
policy.setBackOffMultiplier(2);
policy.setUseExponentialBackOff(true);
policy.setMaximumRedeliveries(2);

----------------------------------------

TITLE: Database Configuration with Encrypted Password
DESCRIPTION: Example of using an encrypted password in a database connection configuration.

LANGUAGE: xml
CODE:
<bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
  <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true"/>
  <property name="username" value="activemq"/>
  <property name="password" value="${jdbc.password}"/>
  <property name="maxActive" value="200"/>
  <property name="poolPreparedStatements" value="true"/>
</bean>

----------------------------------------

TITLE: Publishing a Message to ActiveMQ Topic in Java
DESCRIPTION: This Java code snippet demonstrates how to publish a test message to the MY.TEST.FOO Topic using the JNDI resources configured in Tomcat. It includes error handling for NamingException and JMSException.

LANGUAGE: Java
CODE:
try {
    InitialContext initCtx = new InitialContext();
    Context envContext = (Context) initCtx.lookup("java:comp/env");
    ConnectionFactory connectionFactory = (ConnectionFactory) envContext.lookup("jms/ConnectionFactory");
    Connection connection = connectionFactory.createConnection();
    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    MessageProducer producer = session.createProducer((Destination) envContext.lookup("jms/topic/MyTopic"));

    Message testMessage = session.createMessage();
    testMessage.setStringProperty("testKey", "testValue");
    producer.send(testMessage);
} catch (NamingException e) {
    // TODO handle exception
} catch (JMSException e) {
    // TODO handle exception
}

----------------------------------------

TITLE: Configuring Filtered Destinations in ActiveMQ XML
DESCRIPTION: This XML configuration demonstrates how to use selectors to define virtual destinations. Messages sent to MY.QUEUE will be forwarded to FOO and BAR if the specified selectors match.

LANGUAGE: xml
CODE:
<destinationInterceptors> <virtualDestinationInterceptor> <virtualDestinations> 
   <compositeQueue name="MY.QUEUE">
    <forwardTo>
     <filteredDestination selector="odd = 'yes'" queue="FOO"/>
     <filteredDestination selector="i = 5" topic="BAR"/>
    </forwardTo>
  </compositeQueue>
</virtualDestinations> </virtualDestinationInterceptor> </destinationInterceptors>

----------------------------------------

TITLE: Configuring NIO SSL Transport in ActiveMQ Broker
DESCRIPTION: XML configuration for setting up NIO+SSL transport connector in ActiveMQ broker configuration. Enables SSL over NIO for handling large numbers of SSL clients.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio+ssl" uri="nio+ssl://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Configuring NIO Transport in ActiveMQ Broker
DESCRIPTION: XML configuration example showing how to set up an NIO transport connector in the ActiveMQ broker configuration file. This enables NIO-based connections on port 61616.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Configuring ActiveMQ Broker in Spring 2.0 XML Schema
DESCRIPTION: This snippet illustrates how to configure an ActiveMQ broker and connection factory using Spring 2.0 XML Schema-based configuration, embedding ActiveMQ XML inside a regular Spring XML file.

LANGUAGE: xml
CODE:
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <amq:broker useJmx="false" persistent="false">
    <amq:transportConnectors>
      <amq:transportConnector uri="tcp://localhost:0" />
    </amq:transportConnectors>
  </amq:broker>

  <amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost"/>
</beans>

----------------------------------------

TITLE: Configuring Stomp Transport Connector in ActiveMQ
DESCRIPTION: XML configuration for enabling Stomp protocol support in ActiveMQ broker by adding a transport connector with the stomp:// URI scheme.

LANGUAGE: xml
CODE:
<transportConnectors>
   <transportConnector name="stomp" uri="stomp://localhost:61613"/>
</transportConnectors>

----------------------------------------

TITLE: Starting ActiveMQ Broker with Web Examples
DESCRIPTION: Command to start an ActiveMQ broker with web examples enabled using the activemq-demo.xml configuration file. This is required for versions 5.8 and later since demos are excluded from default configuration.

LANGUAGE: bash
CODE:
bin/activemq console xbean:examples/conf/activemq-demo.xml

----------------------------------------

TITLE: Spring Bean Configuration
DESCRIPTION: Spring bean definition for ActiveMQ ConnectionFactory that remains unchanged for Jakarta support

LANGUAGE: xml
CODE:
<bean class="org.apache.activemq.ActiveMQConnectionFactory">

----------------------------------------

TITLE: Mixed Queue and Topic Publishing
DESCRIPTION: Demonstrates how to send messages to both queues and topics in one operation using queue:// and topic:// prefixes.

LANGUAGE: java
CODE:
// send to queues and topic one logical operation
Queue queue = new ActiveMQQueue("FOO.A,topic://NOTIFY.FOO.A");
producer.send(queue, someMessage);

----------------------------------------

TITLE: Starting JMS Connection in Java
DESCRIPTION: This snippet demonstrates the crucial step of starting a JMS connection to enable message reception. Failing to call this method is a common cause of message reception issues in ActiveMQ.

LANGUAGE: java
CODE:
connection.start();

----------------------------------------

TITLE: Enumerating ActiveMQ Destinations using Advisory Messages in C#
DESCRIPTION: Demonstrates how to connect to an ActiveMQ broker and consume Advisory Messages to list all available queues, topics, and temporary destinations. The example uses the Apache.NMS.ActiveMQ client library and shows three different enumeration methods: listing only queues, only topics, or all destination types.

LANGUAGE: C#
CODE:
using System;
using Apache.NMS;
using Apache.NMS.Util;
using Apache.NMS.ActiveMQ;
using Apache.NMS.ActiveMQ.Commands;

namespace AdvisoryExample
{
    class AdvisoryExample
    {
        private IConnection connection;
        private ISession session;

        public const String QUEUE_ADVISORY_DESTINATION = "ActiveMQ.Advisory.Queue";
        public const String TOPIC_ADVISORY_DESTINATION = "ActiveMQ.Advisory.Topic";
        public const String TEMPQUEUE_ADVISORY_DESTINATION = "ActiveMQ.Advisory.TempQueue";
        public const String TEMPTOPIC_ADVISORY_DESTINATION = "ActiveMQ.Advisory.TempTopic";

        public const String ALLDEST_ADVISORY_DESTINATION = QUEUE_ADVISORY_DESTINATION + "," +
                                                           TOPIC_ADVISORY_DESTINATION + "," +
                                                           TEMPQUEUE_ADVISORY_DESTINATION + "," +
                                                           TEMPTOPIC_ADVISORY_DESTINATION;

        AdvisoryExample()
        {
            IConnectionFactory factory = new ConnectionFactory();

            connection = factory.CreateConnection();
            connection.Start();
            session = connection.CreateSession();
        }

        void EnumerateQueues()
        {
            Console.WriteLine("Listing all Queues on Broker:");

            IDestination dest = session.GetTopic(QUEUE_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            Console.WriteLine("   Queue: " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void EnumerateTopics()
        {
            Console.WriteLine("Listing all Topics on Broker:");

            IDestination dest = session.GetTopic(TOPIC_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            Console.WriteLine("   Topic: " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void EnumerateDestinations()
        {
            Console.WriteLine("Listing all Destinations on Broker:");

            IDestination dest = session.GetTopic(ALLDEST_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            string destType = info.Destination.IsTopic ? "Topic" : "Qeue";
                            destType = info.Destination.IsTemporary ? "Temporary" + destType : destType;
                            Console.WriteLine("   " + destType + ": " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void ShutDown()
        {
            session.Close();
            connection.Close();
        }

        public static void Main (string[] args)
        {
            AdvisoryExample ex = new AdvisoryExample();

            ex.EnumerateQueues();
            ex.EnumerateTopics();
            ex.EnumerateDestinations();
            ex.ShutDown();
        }
    }
}

----------------------------------------

TITLE: Configuring KahaDB Persistence Adapter for Shared File System
DESCRIPTION: XML configuration for setting up KahaDB persistence adapter to use a shared directory for Shared File System Master Slave.

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <kahaDB directory="/sharedFileSystem/sharedBrokerData"/>
</persistenceAdapter>

----------------------------------------

TITLE: Handling JMSXGroupFirstForConsumer in Java with ActiveMQ
DESCRIPTION: This Java snippet demonstrates how to check for the JMSXGroupFirstForConsumer property on a message. This can be used to detect ownership changes of message groups and flush caches for consistent state.

LANGUAGE: java
CODE:
String groupId = message.getStringProperty("JMSXGroupId");

if (message.getBooleanProperty("JMSXGroupFirstForConsumer")) {
   // flush cache for groupId
}

----------------------------------------

TITLE: Alternative Message Publishing Syntax
DESCRIPTION: Examples of sending messages using the destination parameter for both queues and topics

LANGUAGE: bash
CODE:
# Send to queue orders.input:
curl -XPOST -d "body=message" http://admin:admin@localhost:8161/api/message?destination=queue://orders.input

# Send to topic orders.input:
curl -XPOST -d "body=message" http://admin:admin@localhost:8161/api/message?destination=topic://orders.input

----------------------------------------

TITLE: Using JMS selectors with Ajax in ActiveMQ Classic
DESCRIPTION: JavaScript code showing how to use JMS selectors when subscribing to messages via Ajax in ActiveMQ Classic.

LANGUAGE: javascript
CODE:
amq.addListener( myId, myDestination, myHandler.rcvMessage, { selector:"identifier='TEST'" } );

----------------------------------------

TITLE: Trusting All Packages in ActiveMQConnectionFactory for Java Clients
DESCRIPTION: This Java code shows how to trust all packages for ObjectMessage deserialization in client applications, which is useful for testing but not recommended for production use.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
factory.setTrustAllPackages(true);

----------------------------------------

TITLE: Example AIO Server Transport Configuration in ActiveMQ Classic XML
DESCRIPTION: This XML snippet provides a concrete example of configuring AIO server transport with a specific IP address and port in the ActiveMQ Classic configuration file.

LANGUAGE: xml
CODE:
<connector>
 <serverTransport uri="activeio:aio://192.168.0.162:61616" />
</connector>

----------------------------------------

TITLE: Configuring Proxy Connector in ActiveMQ Classic XML
DESCRIPTION: This XML configuration demonstrates how to set up a Proxy Connector in ActiveMQ Classic. It shows a broker configuration that accepts normal connections on port 6001 and exposes port 6002, which is proxied using the fanout transport.

LANGUAGE: XML
CODE:
<beans xmlns="http://activemq.org/config/1.0">
  <broker>

    <persistenceAdapter>
      <journaledJDBC dataDirectory="../data"/>
    </persistenceAdapter>

    <transportConnectors>
      <transportConnector uri="tcp://localhost:6001"/>
    </transportConnectors>

    <proxyConnectors>
      <proxyConnector bind="tcp://localhost:6002" remote="fanout:static:(tcp://localhost:61616)"/>
    </proxyConnectors>

  </broker>
</beans>

----------------------------------------

TITLE: Configuring Shared File Locker with KahaDB
DESCRIPTION: Example configuration for KahaDB persistence adapter using shared file locking with customized lock acquisition interval and keep-alive period

LANGUAGE: xml
CODE:
<persistenceAdapter>
	<kahaDB directory="target/activemq-data" lockKeepAlivePeriod="10000">
		<locker>
			<shared-file-locker lockAcquireSleepInterval="5000"/>
		</locker>
	</kahaDB>
</persistenceAdapter>

----------------------------------------

TITLE: Queue Depth-Based Message Routing with Broker Component
DESCRIPTION: Advanced example showing how to route messages based on queue depth using the MessageBrokerView. Messages are redirected to a different queue when the source queue size reaches 100.

LANGUAGE: xml
CODE:
<camelContext id="camel" trace="false" xmlns="http://camel.apache.org/schema/spring">
  <route id="routeAboveQueueLimitTest">
    <from uri="broker:queue:test.broker.queue"/>
    <choice>
      <when>
        <spel>#{@destinationView.queueSize >= 100}</spel>
        <to uri="broker:queue:test.broker.processLater"/>
      </when>
      <otherwise>
        <to uri="broker:queue:test.broker.queue"/>
      </otherwise>
    </choice>
  </route>
</camelContext>

<bean id="brokerView" class="org.apache.activemq.broker.view.MessageBrokerView">
  <constructor-arg value="testBroker"/>
</bean>

<bean id="destinationView" factory-bean="brokerView" factory-method="getDestinationView">
  <constructor-arg value="test.broker.component.route"/>
</bean>

----------------------------------------

TITLE: Configuring JMS Bridge with XBean in ActiveMQ
DESCRIPTION: Example of using XBean configuration to set up a JMS to JMS bridge in ActiveMQ, including broker and connection factory settings.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.apache.org/schema/core" id="localbroker"
  brokerName="localBroker" persistent="false">
  <jmsBridgeConnectors>
    <jmsQueueConnector
      outboundQueueConnectionFactory="#remoteFactory">
      <inboundQueueBridges>
        <inboundQueueBridge
          inboundQueueName="org.apache.activemq.network.jms.QueueBridgeXBeanTest" />
      </inboundQueueBridges>
    </jmsQueueConnector>
  </jmsBridgeConnectors>
  <transportConnectors>
    <transportConnector uri="tcp://localhost:61234" />
  </transportConnectors>
</broker>
<!-- JMS ConnectionFactory to use remote -->
<bean id="remoteFactory"
  class="org.apache.activemq.ActiveMQConnectionFactory">
  <property name="brokerURL" value="tcp://localhost:61666" />
</bean>

----------------------------------------

TITLE: Receiving JMS messages via Ajax in ActiveMQ Classic
DESCRIPTION: JavaScript code demonstrating how to define a message handler and register it to receive messages from ActiveMQ Classic via Ajax.

LANGUAGE: javascript
CODE:
var myHandler =
{
  rcvMessage: function(message)
  {
     alert("received "+message);
  }
};

amq.addListener(myId,myDestination,myHandler.rcvMessage);

----------------------------------------

TITLE: Network Connector Using Multicast Discovery
DESCRIPTION: XML configuration for a network connector using multicast discovery to dynamically detect other brokers.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://activemq.org/config/1.0">

  <broker name="sender" persistent="false" useJmx="false">  
    <networkConnectors>
      <networkConnector uri="multicast://default"/>
    </networkConnectors>

    <persistenceAdapter>
      <memoryPersistenceAdapter/>
    </persistenceAdapter>

  <transportConnectors>
      <transportConnector uri="tcp://localhost:0" discoveryUri="multicast://default"/>
    </transportConnectors>
  </broker>

</beans>

----------------------------------------

TITLE: Defining VM Protocol URI in ActiveMQ
DESCRIPTION: Demonstrates the syntax for specifying a VM Protocol URI in ActiveMQ. The 'logicalname' parameter represents a unique identifier for the connection within the JVM.

LANGUAGE: java
CODE:
vm://logicalname

----------------------------------------

TITLE: Enabling Command Agent in ActiveMQ XML Configuration
DESCRIPTION: This XML snippet shows how to enable the Command Agent in the ActiveMQ broker configuration. It includes setting up the management context and adding the command agent element.

LANGUAGE: xml
CODE:
<beans>
  <broker useJmx="true" xmlns="http://activemq.apache.org/schema/core">
    ...
        <managementContext>
            <managementContext createConnector="true"/>
        </managementContext>
    ...
  </broker>

  <commandAgent xmlns="http://activemq.apache.org/schema/core"/>
  ...
</beans>

----------------------------------------

TITLE: Configuring AjaxServlet in web.xml for ActiveMQ Classic
DESCRIPTION: XML configuration to install the AjaxServlet in a web application to support JMS over Ajax.

LANGUAGE: xml
CODE:
<servlet>
  <servlet-name>AjaxServlet</servlet-name>
  <servlet-class>org.apache.activemq.web.AjaxServlet</servlet-class>
</servlet>
...
<servlet-mapping>
  <servlet-name>AjaxServlet</servlet-name>
  <url-pattern>/amq/*</url-pattern>
</servlet-mapping>

----------------------------------------

TITLE: Configuring ActiveMQ Classic XML for Web Console
DESCRIPTION: XML configuration snippet for enabling the Web Console in ActiveMQ Classic. It includes property placeholder configuration and Jetty import.

LANGUAGE: xml
CODE:
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<property name="locations">
<value>file:${activemq.base}/conf/credentials.properties</value>
</property>
</bean>

<!-- your broker config goes here -->

<import resource="${activemq.base}/conf/jetty.xml" />

----------------------------------------

TITLE: Creating Input Stream for JMS Message in ActiveMQ
DESCRIPTION: Shows how to create and use an InputStream to read large messages from an ActiveMQ destination. The code demonstrates connection and destination setup, followed by stream creation and consumption.

LANGUAGE: java
CODE:
ActiveMQConnection connection = ...;
Destination destination = new ActiveMQQueue("FOO.BAR");

InputStream in = connection.createInputStream(destination)

// read the stream...
in.close();

----------------------------------------

TITLE: Configuring ActiveMQ Classic with Spring 2.0
DESCRIPTION: This XML configuration shows how to embed the ActiveMQ Classic broker XML inside a regular Spring 2.0 XML file, including broker configuration, destinations, and JMS templates.

LANGUAGE: xml
CODE:
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
  
  <!--  lets create an embedded ActiveMQ Classic Broker -->
  <amq:broker useJmx="false" persistent="false">
    <amq:transportConnectors>
      <amq:transportConnector uri="tcp://localhost:0" />
    </amq:transportConnectors>
  </amq:broker>

   <!--  ActiveMQ Classic destinations to use  -->
  <amq:queue id="destination"  physicalName="org.apache.activemq.spring.Test.spring.embedded"/>

  <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
  <amq:connectionFactory id="jmsFactory" brokerURL="vm://localhost"/>
  

  <!-- Spring JMS Template -->
  <bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    <property name="connectionFactory">
      <!-- lets wrap in a pool to avoid creating a connection per send -->
      <bean class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory">
          <ref local="jmsFactory" />
        </property>
      </bean>
    </property>
  </bean>

  <bean id="consumerJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
    <property name="connectionFactory" ref="jmsFactory"/>
  </bean>

  <!-- a sample POJO which uses a Spring JmsTemplate -->
  <bean id="producer" class="org.apache.activemq.spring.SpringProducer">
    <property name="template">
      <ref bean="myJmsTemplate"></ref>
    </property>

    <property name="destination">
      <ref bean="destination" />
    </property>

    <property name="messageCount">
      <value>10</value>
    </property>
  </bean>

  <!-- a sample POJO consumer -->
  <bean id="consumer" class="org.apache.activemq.spring.SpringConsumer">
    <property name="template" ref="consumerJmsTemplate"/>
    <property name="destination" ref="destination"/>
  </bean>

</beans>

----------------------------------------

TITLE: Scheduling Repeated Message Delivery with Delay in NMS.ActiveMQ (C#)
DESCRIPTION: This code shows how to schedule a message with an initial delay, followed by 10 repeated deliveries at 10-second intervals using AMQ_SCHEDULED_DELAY, AMQ_SCHEDULED_PERIOD, and AMQ_SCHEDULED_REPEAT properties.

LANGUAGE: C#
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
long delay = 30 * 1000;
long period = 10 * 1000;
int repeat = 9;
message.Properties["AMQ_SCHEDULED_DELAY"] = delay;
message.Properties["AMQ_SCHEDULED_PERIOD"] = period;
message.Properties["AMQ_SCHEDULED_REPEAT"] = repeat;
producer.Send(message);

----------------------------------------

TITLE: Broker Configuration Properties
DESCRIPTION: Configuration properties for the ActiveMQ broker in Karaf, defined in org.apache.activemq.server-default.cfg.

LANGUAGE: properties
CODE:
broker-name=amq-broker
data=${karaf.data}/${broker-name}
config=${karaf.base}/etc/activemq.xml

----------------------------------------

TITLE: Initializing Ajax support in JavaScript for ActiveMQ Classic
DESCRIPTION: JavaScript code to include required scripts and initialize the amq object for Ajax communication with ActiveMQ Classic.

LANGUAGE: javascript
CODE:
<script type="text/javascript" src="js/jquery-1.4.2.min.js"></script>
<script type="text/javascript" src="js/amq_jquery_adapter.js"></script>
<script type="text/javascript" src="js/amq.js"></script>
<script type="text/javascript">
  var amq = org.activemq.Amq;
  amq.init({ 
    uri: 'amq', 
    logging: true,
    timeout: 20
  });
</script>

----------------------------------------

TITLE: Configuring Selective MBean Registration in ActiveMQ Classic
DESCRIPTION: XML configuration to selectively suppress registration of certain MBean types in ActiveMQ Classic for improved scalability.

LANGUAGE: xml
CODE:
<managementContext>
  <managementContext suppressMBean="endpoint=dynamicProducer,endpoint=Consumer,connectionName=*,destinationName=ActiveMQ.Advisory.*"/>
</managementContext>

----------------------------------------

TITLE: Sending a JMS message via Ajax in ActiveMQ Classic
DESCRIPTION: JavaScript code snippet showing how to send a JMS message from a JavaScript client using the amq object.

LANGUAGE: javascript
CODE:
amq.sendMessage(myDestination,myMessage);

----------------------------------------

TITLE: Consuming Producer Advisory Messages in Java
DESCRIPTION: This snippet demonstrates how to create a consumer for producer advisory messages and process them using a message listener.

LANGUAGE: java
CODE:
Destination advisoryDestination = AdvisorySupport.getProducerAdvisoryTopic(destination)
MessageConsumer consumer = session.createConsumer(advisoryDestination);
consumer.setMessageListener(this);

public void onMessage(Message msg){
    if(msg instanceof ActiveMQMessage) {
        try {
             ActiveMQMessage aMsg = (ActiveMQMessage)msg;
             ProducerInfo prod = (ProducerInfo) aMsg.getDataStructure();
        } 
        catch(JMSException e) {
            log.error("Failed to process message: " + msg);
        }
    }
}

----------------------------------------

TITLE: Configuring Client-Side Exceptions for System Usage in XML
DESCRIPTION: XML configuration to throw a ResourceAllocationException on the client-side when no space is available on the broker, instead of indefinitely blocking the send() operation.

LANGUAGE: xml
CODE:
<systemUsage>
 <systemUsage sendFailIfNoSpace="true">
   <memoryUsage>
     <memoryUsage limit="20 mb"/>
   </memoryUsage>
 </systemUsage>
</systemUsage>

----------------------------------------

TITLE: ActiveMQ 5.x Persistence Configuration
DESCRIPTION: XML configuration example showing journal and JDBC persistence setup for ActiveMQ 5.x

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:amq="http://activemq.apache.org/schema/core" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
                           http://activemq.apache.org/schema/core 
                           http://activemq.apache.org/schema/core/activemq-core.xsd"> 
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/> 
  <broker useJmx="true" xmlns="http://activemq.apache.org/schema/core"> 
    <networkConnectors> 
      <!-- <networkConnector uri="multicast://default?initialReconnectDelay=100" /> <networkConnector uri="static://(tcp://localhost:61616)" /> --> 
    </networkConnectors> 
    <persistenceFactory>
      <journalPersistenceAdapterFactory journalLogFiles="5" dataDirectory="${basedir}/target" /> 
      <!-- To use a different dataSource, use the following syntax : --> 
      <!-- <journalPersistenceAdapterFactory journalLogFiles="5" dataDirectory="${basedir}/activemq-data" dataSource="#mysql-ds"/> --> 
    </persistenceFactory> 
    <transportConnectors> 
      <transportConnector uri="tcp://localhost:61636" /> 
    </transportConnectors> 
  </broker> 
  <!-- MySql DataSource Sample Setup --> 
  <!-- 
  <bean id="mysql-ds" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"> 
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/> 
    <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true"/> 
    <property name="username" value="activemq"/> 
    <property name="password" value="activemq"/> 
    <property name="poolPreparedStatements" value="true"/> 
  </bean> 
  --> 
</beans>

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.24.0 Release Details in YAML
DESCRIPTION: YAML configuration block defining the release parameters for ActiveMQ Artemis 2.24.0, including version number, release date, documentation version and Java version requirements. Includes a short description about eliminating page caches.

LANGUAGE: yaml
CODE:
version: 2.24.0
release_date: 2022-08-04
title: ActiveMQ Artemis 2.24.0
shortDescription: Eliminating Page Caches on ARTEMIS-3850
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.24.0
java_version: 11+

----------------------------------------

TITLE: Configuring Basic AMQP Transport Connector in ActiveMQ
DESCRIPTION: XML configuration for enabling basic AMQP protocol support on port 5672.

LANGUAGE: xml
CODE:
<transportConnectors>
   <transportConnector name="amqp" uri="amqp://0.0.0.0:5672"/>
</transportConnectors>

----------------------------------------

TITLE: Configuring Basic NIO Transport URI
DESCRIPTION: Basic syntax for configuring NIO transport connection URI in ActiveMQ Classic. Uses hostname and port with optional key-value parameters.

LANGUAGE: properties
CODE:
nio://hostname:port?key=value

----------------------------------------

TITLE: Configuring OpenWire Wire Format in Spring for ActiveMQ Classic
DESCRIPTION: This XML snippet shows how to configure the OpenWire wire format options in a Spring bean definition for ActiveMQConnectionFactory. It demonstrates setting the brokerURL with failover transport and wire format options.

LANGUAGE: xml
CODE:
<bean class="org.apache.activemq.ActiveMQConnectionFactory">
  <property name="brokerURL" value="failover:(tcp://localhost:61616?jms.optimizeAcknowledge=false&wireFormat.maxInactivityDuration=30000)"/>
  <!-- other options... -->
</bean>

----------------------------------------

TITLE: Creating ActiveMQ Queue with Consumer Options in Java
DESCRIPTION: This snippet demonstrates how to create an ActiveMQ queue with custom consumer options. It sets the dispatch mode to synchronous and the prefetch size to 10 messages.

LANGUAGE: java
CODE:
queue = new ActiveMQQueue("TEST.QUEUE?consumer.dispatchAsync=false&consumer.prefetchSize=10");
consumer = session.createConsumer(queue);

----------------------------------------

TITLE: Configuring Hostname Validation for ActiveMQ Classic Client
DESCRIPTION: Examples of disabling hostname validation on the client side in ActiveMQ Classic.

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?socket.verifyHostName=false

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?verifyHostName=false

----------------------------------------

TITLE: Scheduling Message Delivery with Delay in NMS.ActiveMQ (C#)
DESCRIPTION: This snippet demonstrates how to schedule a message for delivery after a 60-second delay using the AMQ_SCHEDULED_DELAY property in NMS.ActiveMQ.

LANGUAGE: C#
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
long time = 60 * 1000;
message.Properties["AMQ_SCHEDULED_DELAY"] = time;
producer.Send(message);

----------------------------------------

TITLE: Failover Configuration with Host-Specific Options
DESCRIPTION: Advanced failover configuration example showing how to apply specific transport and AMQP options to individual hosts.

LANGUAGE: plaintext
CODE:
failover:(amqp://host1:5672?amqp.option=value,amqp://host2:5672?transport.option=value)?nms.clientId=foo

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.18.0 Release Details in YAML
DESCRIPTION: YAML configuration block specifying the release metadata for ActiveMQ Artemis version 2.18.0. Includes version number, release date, documentation version, and Java compatibility requirements. Also contains a summary of changes including new features, bug fixes, dependency upgrades, and enhancements.

LANGUAGE: yaml
CODE:
version: 2.18.0
release_date: 2021-08-12
title: ActiveMQ Artemis 2.18.0
shortDescription: Includes 12 new features, 79 bug fixes, 19 dependency upgrades, and 46 enhancements.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.18.0
java_version: 8

----------------------------------------

TITLE: Configuring AsyncSend via Connection URI
DESCRIPTION: Example of setting the useAsyncSend property on an ActiveMQ connection URI to enable asynchronous message sending.

LANGUAGE: plaintext
CODE:
tcp://localhost:61616?jms.useAsyncSend=true

----------------------------------------

TITLE: Checking ActiveMQ Port on Windows
DESCRIPTION: Command to check if ActiveMQ is listening on its default port (61616) on Windows using netstat.

LANGUAGE: bash
CODE:
netstat -an|find "61616"

----------------------------------------

TITLE: Creating Retroactive Consumer in ActiveMQ
DESCRIPTION: Demonstrates how to create a retroactive consumer by setting the consumer.retroactive parameter to true when creating an ActiveMQTopic. This configuration enables the consumer to receive past messages that were sent before the subscription was created.

LANGUAGE: java
CODE:
topic = new ActiveMQTopic("TEST.Topic?consumer.retroactive=true");
consumer = session.createConsumer(topic);

----------------------------------------

TITLE: Using EmbeddedActiveMQBroker JUnit Rule in Java
DESCRIPTION: This code shows how to use the EmbeddedActiveMQBroker JUnit Rule to automatically start and stop an embedded ActiveMQ broker for each test.

LANGUAGE: java
CODE:
@Rule
public EmbeddedActiveMQBroker broker = new EmbeddedActiveMQBroker();

----------------------------------------

TITLE: Configuring TomEE to Connect to an External ActiveMQ Classic Broker
DESCRIPTION: This XML configuration demonstrates how to set up TomEE to connect to an external ActiveMQ Classic broker. It defines a resource adapter pointing to the external broker and a connection factory for JMS connections.

LANGUAGE: xml
CODE:
<tomee>
    <Resource id="MyJmsResourceAdapter" type="ActiveMQResourceAdapter">
        BrokerXmlConfig =
        ServerUrl       =  tcp://someHostName:61616
    </Resource>

    <Resource id="MyJmsConnectionFactory" type="javax.jms.ConnectionFactory">
        ResourceAdapter = MyJmsResourceAdapter
    </Resource>
</tomee>

----------------------------------------

TITLE: Configuring FixedSizedSubscriptionRecoveryPolicy in XML
DESCRIPTION: Defines a fixed-size memory buffer for message history that evicts messages in time order. The maximumSize parameter specifies the memory limit in bytes.

LANGUAGE: xml
CODE:
<fixedSizedSubscriptionRecoveryPolicy maximumSize="1024"/>

----------------------------------------

TITLE: Configuring QueueConnectionFactory in ra.xml
DESCRIPTION: Resource adapter configuration for defining the ActiveMQ QueueConnectionFactory implementation.

LANGUAGE: xml
CODE:
<outbound-resourceadapter>
   ...
   <connection-definition>
      ...
      <connectionfactory-interface>javax.jms.QueueConnectionFactory</connectionfactory-interface>
      <connectionfactory-impl-class>org.activemq.ra.ActiveMQConnectionFactory</connectionfactory-impl-class>
      <connection-interface>javax.jms.QueueConnection</connection-interface>
      ...
   </connection-definition>
   ...
</outbound-resourceadapter>

----------------------------------------

TITLE: Configuring Async Dispatch at ConnectionFactory Level in Java
DESCRIPTION: This snippet shows how to set dispatchAsync to false at the ConnectionFactory level. This configuration affects all connections created from this factory.

LANGUAGE: java
CODE:
((ActiveMQConnectionFactory)connectionFactory).setDispatchAsync(false);

----------------------------------------

TITLE: Advanced ActiveMQ Producer Examples
DESCRIPTION: Examples of sending custom text messages, byte messages, and URL content using ActiveMQ producer.

LANGUAGE: bash
CODE:
bin/activemq producer --message "My message" --messageCount 1
bin/activemq producer --messageSize 100 --messageCount 1
bin/activemq producer --payloadUrl http://activemq.apache.org/schema/core/activemq-core.xsd --messageCount 1

----------------------------------------

TITLE: Starting ActiveMQ Broker with Classpath XML Configuration
DESCRIPTION: This snippet demonstrates how to start an ActiveMQ broker using an XML configuration file named 'activemq.xml' that is located on the classpath.

LANGUAGE: plaintext
CODE:
xbean:activemq.xml

----------------------------------------

TITLE: Extracting ActiveMQ Classic Files on Unix
DESCRIPTION: Command to extract ActiveMQ Classic files from a gzip archive on a Unix system.

LANGUAGE: bash
CODE:
tar zxvf activemq-x.x.x.tar.gz

----------------------------------------

TITLE: Demonstrating Virtual Topic Usage in Apache ActiveMQ Classic
DESCRIPTION: Shows an example of a Virtual Topic named 'VirtualTopic.Orders' and how a new consumer queue can be dynamically created and subscribed to it at runtime.

LANGUAGE: plaintext
CODE:
VirtualTopic.Orders

LANGUAGE: plaintext
CODE:
Consumer.FOO.VirtualTopic.Orders

----------------------------------------

TITLE: Scheduling Message Delivery with 60-Second Delay in ActiveMQ Classic (Java)
DESCRIPTION: This snippet demonstrates how to schedule a message for delivery after a 60-second delay using the AMQ_SCHEDULED_DELAY property in ActiveMQ Classic.

LANGUAGE: java
CODE:
MessageProducer producer = session.createProducer(destination);
TextMessage message = session.createTextMessage("test msg");
long time = 60 * 1000;
message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
producer.send(message);

----------------------------------------

TITLE: Configuring In-Memory Queue Cursor with Flow Control in XML
DESCRIPTION: XML configuration to keep non-persistent queue messages in memory with a 1MB limit per queue, using vmQueueCursor and enabling producer flow control.

LANGUAGE: xml
CODE:
<policyEntry queue=">" producerFlowControl="true" memoryLimit="1mb">    
  <pendingQueuePolicy>
    <vmQueueCursor/>
  </pendingQueuePolicy>
</policyEntry>

----------------------------------------

TITLE: Shutting Down and Reconfiguring Blaze Channel in Java
DESCRIPTION: Demonstrates how to shut down a Blaze Channel, change its configuration, and restart it. This shows the 'shut down' state and how to apply configuration changes.

LANGUAGE: java
CODE:
BlazeChannelFactory factory = new BlazeChannelFactory();
BlazeChannel channel = factory.createChannel();
channel.shutDown();
// change the congiguration
channel.getConfiguration().setBroadcastURI("tcp://localhost:60661");
//re-start
channel.start();

----------------------------------------

TITLE: Message Consumption with Session Management
DESCRIPTION: Example of consuming messages while maintaining session cookies

LANGUAGE: bash
CODE:
wget --user admin --password admin --save-cookies cookies.txt --load-cookies cookies.txt --keep-session-cookies  http://localhost:8161/api/message/TEST1?type=queue

----------------------------------------

TITLE: Configuring AMQP JMS Transformer
DESCRIPTION: XML configuration for setting up JMS message transformation strategy for AMQP messages.

LANGUAGE: xml
CODE:
<transportConnector name="amqp" uri="amqp://localhost:5672?transport.transformer=jms"/>

----------------------------------------

TITLE: Setting Structured Properties in JMS Messages
DESCRIPTION: ActiveMQ extends JMS Message and MapMessage interfaces to support Map and List values in properties. The feature allows arbitrary nesting of Maps, Lists and primitive values for structured data transfer.

LANGUAGE: Java
CODE:
Message.setObjectProperty(key, value);
MapMessage.setObject(key, value);

----------------------------------------

TITLE: Stopping ActiveMQ Classic on Unix (Background Process)
DESCRIPTION: Commands to find and kill the ActiveMQ Classic process if it was started in the background on a Unix system.

LANGUAGE: bash
CODE:
ps -ef|grep activemq
kill [PID]

----------------------------------------

TITLE: Configuring Virtual Topics in ActiveMQ XML
DESCRIPTION: XML configuration for making all topics virtual topics using destinationInterceptors. Includes options for prefix configuration and selector awareness.

LANGUAGE: XML
CODE:
<destinationInterceptors>
  <virtualDestinationInterceptor>
    <virtualDestinations>
      <virtualTopic name=">" prefix="VirtualTopicConsumers.*.*" selectorAware="false"/>
    </virtualDestinations>
  </virtualDestinationInterceptor>
</destinationInterceptors>

----------------------------------------

TITLE: Configuring SQLServer 2000 Persistence Adapter in ActiveMQ XML
DESCRIPTION: This snippet demonstrates how to configure the ActiveMQ persistence adapter and data source for SQLServer 2000. It uses the journaledJDBC adapter with an imageBasedJDBCAdaptor and a BasicDataSource bean.

LANGUAGE: xml
CODE:
<persistenceAdapter>
     <journaledJDBC journalLogFiles="5"
dataDirectory="../activemq-data" dataSource="#mssql-ds">
      <adapter><imageBasedJDBCAdaptor/></adapter>
     </journaledJDBC>
</persistenceAdapter>


 <bean id="mssql-ds" class="org.apache.commons.dbcp.BasicDataSource"
destroy-method="close">
   <property name="driverClassName"
value="com.microsoft.jdbc.sqlserver.SQLServerDriver"/>
   <property name="url" value="jdbc:microsoft:sqlserver://HOSTNAME
\\\INSTANCE;DataBaseName=DBNAME"/>
   <property name="username" value="sa"/>
   <property name="password" value="password"/>
 </bean>

----------------------------------------

TITLE: Retrieving Destination Statistics Using Java JMS
DESCRIPTION: Java code example showing how to retrieve statistics for a specific destination. It sends a message to 'ActiveMQ.Statistics.Destination.TEST.FOO' and processes the MapMessage response.

LANGUAGE: java
CODE:
Queue replyTo = session.createTemporaryQueue();
MessageConsumer consumer = session.createConsumer(replyTo);

Queue testQueue = session.createQueue("TEST.FOO");
MessageProducer producer = session.createProducer(null);

String queueName = "ActiveMQ.Statistics.Destination." + testQueue.getQueueName()
Queue query = session.createQueue(queueName);

Message msg = session.createMessage();

producer.send(testQueue, msg) 
msg.setJMSReplyTo(replyTo);
producer.send(query, msg);
MapMessage reply = (MapMessage) consumer.receive();
assertNotNull(reply);
assertTrue(reply.getMapNames().hasMoreElements());
        
for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
    String name = e.nextElement().toString();
    System.err.println(name + "=" + reply.getObject(name));
}

----------------------------------------

TITLE: Building ActiveMQ from Source on Unix
DESCRIPTION: Commands to build ActiveMQ from source code on Unix systems using Maven. Includes steps to set memory options and generate IDE project files.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
mvn clean install # add "-Dmaven.test.skip=true" if tests are failing on your system (should not happen)

export MAVEN_OPTS="-Xmx512M"

mvn eclipse:eclipse

mvn idea:idea

----------------------------------------

TITLE: Remote Broker Configuration
DESCRIPTION: Commands to configure producer and consumer to connect to remote broker

LANGUAGE: bash
CODE:
mvn activemq-perf:consumer -Dfactory.brokerURL=tcp://host:port
mvn activemq-perf:producer -Dfactory.brokerURL=tcp://host:port

----------------------------------------

TITLE: Duplex Network Connector with Topic Filtering
DESCRIPTION: Example of configuring multiple duplex network connectors with topic filtering.

LANGUAGE: xml
CODE:
<networkConnectors>
        <networkConnector name="SYSTEM1" duplex="true" uri="static:(tcp://10.x.x.x:61616)">
                <dynamicallyIncludedDestinations>
                        <topic physicalName="outgoing.System1" />
                </dynamicallyIncludedDestinations>
        </networkConnector>
        <networkConnector name="SYSTEM2" duplex="true" uri="static:(tcp://10.x.x.x:61616)">
                <dynamicallyIncludedDestinations>
                        <topic physicalName="outgoing.System2"/>
                </dynamicallyIncludedDestinations>
        </networkConnector>
  </networkConnectors>

----------------------------------------

TITLE: Configuring MQTT Transport Connector in ActiveMQ
DESCRIPTION: Basic XML configuration to enable MQTT protocol support in ActiveMQ Classic broker by adding a transport connector with MQTT URL.

LANGUAGE: xml
CODE:
<transportConnectors>
   <transportConnector name="mqtt" uri="mqtt://localhost:1883"/>
</transportConnectors>

----------------------------------------

TITLE: Configuring Queue Admin Object in ra.xml
DESCRIPTION: Resource adapter configuration for defining the ActiveMQ Queue implementation.

LANGUAGE: xml
CODE:
<adminobject>
   <adminobject-interface>javax.jms.Queue</adminobject-interface>
   <adminobject-class>org.activemq.message.ActiveMQQueue</adminobject-class>
   <config-property>
      <config-property-name>PhysicalName</config-property-name>
      <config-property-type>java.lang.String</config-property-type>
   </config-property>
</adminobject>

----------------------------------------

TITLE: JMS Specification Compliant JNDI Setup
DESCRIPTION: Example showing the JMS specification recommended approach for creating an initial context using Properties.

LANGUAGE: java
CODE:
javaProperties props = new Properties(); 
props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.activemq.jndi.ActiveMQInitialContextFactory"); 
props.setProperty(Context.PROVIDER_URL, "tcp://hostname:61616"); 
javax.naming.Context ctx = new InitialContext(props);

----------------------------------------

TITLE: Configuring ActiveMQ XML Settings
DESCRIPTION: This XML snippet shows a basic configuration for ActiveMQ. It demonstrates the structure of an XML configuration file for ActiveMQ settings.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Selecting Specific Message Using JMSMessageID in ActiveMQ
DESCRIPTION: SQL-like selector syntax for consuming a specific message from an ActiveMQ queue using the message's JMSMessageID. This selector can be used when creating a message consumer to filter for specific messages.

LANGUAGE: sql
CODE:
JMSMessageID = 'abc'

----------------------------------------

TITLE: Using a Custom Transport URI in ActiveMQ Classic
DESCRIPTION: This example shows how to use a custom transport URI in ActiveMQ Classic. It demonstrates the format for a hypothetical 'foo' transport with a parameter.

LANGUAGE: plaintext
CODE:
foo://localhost?myParam=bar

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.5.0 from SVN
DESCRIPTION: This command allows users to check out the specific tag for Apache.NMS.ActiveMQ version 1.5.0 from the Apache Subversion repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.0/

----------------------------------------

TITLE: Configuring AMQ Persistence Adapter in ActiveMQ Classic (XML)
DESCRIPTION: This XML snippet demonstrates how to explicitly configure the AMQ Store through its amqPersistenceAdapter in ActiveMQ Classic. It sets the directory for storing message data and log files, and specifies the maximum file length for data logs.

LANGUAGE: xml
CODE:
<broker brokerName="broker" persistent="true" useShutdownHook="false">
  <persistenceAdapter>
    <amqPersistenceAdapter directory="${activemq.base}/activemq-data" maxFileLength="32mb"/>
  </persistenceAdapter>
  <transportConnectors>
    <transportConnector uri="tcp://localhost:61616"/>
  </transportConnectors>
</broker>

----------------------------------------

TITLE: Stomp Debug Logging Configuration
DESCRIPTION: Log4j configuration for enabling detailed Stomp protocol debugging and packet tracing.

LANGUAGE: properties
CODE:
log4j.logger.org.apache.activemq.transport.stomp=TRACE

log4j.appender.stomp=org.apache.log4j.RollingFileAppender
log4j.appender.stomp.file=${activemq.base}/data/stomp.log
log4j.appender.stomp.maxFileSize=1024KB
log4j.appender.stomp.maxBackupIndex=5
log4j.appender.stomp.append=true
log4j.appender.stomp.layout=org.apache.log4j.PatternLayout
log4j.appender.stomp.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n

----------------------------------------

TITLE: Configuring periodic disk usage check in ActiveMQ broker XML
DESCRIPTION: This XML snippet demonstrates how to configure the ActiveMQ broker to periodically check disk usage. It sets the 'schedulePeriodForDiskUsageCheck' attribute to 60000 milliseconds (60 seconds), enabling the broker to check store and temporary disk limits every minute.

LANGUAGE: XML
CODE:
<broker xmlns="http://activemq.apache.org/schema/core" schedulePeriodForDiskUsageCheck="60000">
  ...
</broker>

----------------------------------------

TITLE: Configuring AUTO Protocol Detection over NIO SSL in ActiveMQ Classic
DESCRIPTION: This XML configuration enables AUTO wire format protocol detection over an NIO SSL connection in ActiveMQ Classic. It sets up a transport connector named 'auto+nio+ssl' listening on localhost port 5671.

LANGUAGE: xml
CODE:
<transportConnector name="auto+nio+ssl" uri="auto+nio+ssl://localhost:5671"/>

----------------------------------------

TITLE: Setting Consumer Priority in ActiveMQ Classic (Java)
DESCRIPTION: This code snippet demonstrates how to set the priority for a consumer using Destination Options in ActiveMQ Classic. It creates a queue with a specific consumer priority and then creates a consumer for that queue.

LANGUAGE: java
CODE:
queue = new ActiveMQQueue("TEST.QUEUE?consumer.priority=10");
consumer = session.createConsumer(queue);

----------------------------------------

TITLE: Installing ActiveMQ via Homebrew on macOS
DESCRIPTION: Command to install ActiveMQ using the Homebrew package manager on macOS systems.

LANGUAGE: bash
CODE:
$ brew install apache-activemq

----------------------------------------

TITLE: Checking Out Apache.NMS.ActiveMQ v1.4.0 from SVN
DESCRIPTION: SVN command to checkout the tagged version 1.4.0 of Apache.NMS.ActiveMQ from the Apache repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.4.0/

----------------------------------------

TITLE: Configuring FixedCountSubscriptionRecoveryPolicy in XML
DESCRIPTION: Maintains a fixed number of most recent messages. The maximumSize parameter specifies how many messages to retain.

LANGUAGE: xml
CODE:
<fixedCountSubscriptionRecoveryPolicy maximumSize="100"/>

----------------------------------------

TITLE: Specifying JDBC Adapter in ActiveMQ 3.x XML Configuration
DESCRIPTION: This example shows how to specify the JDBC adapter class in the ActiveMQ 3.x XML configuration.

LANGUAGE: xml
CODE:
<jdbcPersistence adapterClass="org.activemq.store.jdbc.adapter.ImageBasedJDBCAdaptor">
    ...
</jdbcPersistence>

----------------------------------------

TITLE: Starting ActiveMQ Classic 5 Broker
DESCRIPTION: Commands to navigate to the ActiveMQ binary directory and start the broker from command line. The broker can be configured using an XML configuration file passed as a parameter.

LANGUAGE: bash
CODE:
cd bin
activemq

----------------------------------------

TITLE: Running ActiveMQ Broker with XML Configuration using Java
DESCRIPTION: This command runs the ActiveMQ broker with a custom XML configuration using Java.

LANGUAGE: bash
CODE:
java org.activemq.spring.Main src/sample-conf/default.xml

----------------------------------------

TITLE: Configuring Non-Persistent Broker in ActiveMQ XML
DESCRIPTION: Sets the persistent flag to false in the broker element of ActiveMQ XML configuration to disable message persistence. This is one of the recommended approaches for disabling persistence system-wide.

LANGUAGE: xml
CODE:
<broker persistent="false"/>

----------------------------------------

TITLE: Lazily Binding Transport Connector in ActiveMQ Classic Broker
DESCRIPTION: This code snippet shows how to lazily bind a transport connector as part of the broker start process, which is useful when start() will block pending a store lock.

LANGUAGE: java
CODE:
BrokerService broker = new BrokerService();

TransportConnector connector = new TransportConnector();
connector.setUri(new URI("tcp://localhost:61616"));
broker.addConnector(connector);
broker.start();

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with Plugin in XML
DESCRIPTION: Example of configuring an ActiveMQ Classic broker with a custom plugin in the XML configuration file. It demonstrates how to define the broker, transport connectors, and reference a custom plugin along with other Spring beans.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:amq="http://activemq.org/config/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.org/config/1.0 
http://activemq.apache.org/schema/activemq-core.xsd http://activemq.apache.org/camel/schema/spring  http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

<!-- Allows us to use system properties as variables in this configuration file -->
<bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />

  <broker xmlns="http://activemq.org/config/1.0" brokerName="localhost" dataDirectory="${activemq.base}/data" plugins="#myPlugin">

    <!-- The transport connectors ActiveMQ Classic will listen to -->
    <transportConnectors>
      <transportConnector name="openwire" uri="tcp://localhost:61616" />
    </transportConnectors>

  </broker>

  <bean id="myPlugin" class="org.myorg.MyPlugin">
    <!-- You can reference one or more Spring beans in this file -->
    <property name="myMgr" ref="myManager"/>		 
  </bean>

  <bean id="myManager" class="org.myorg.MyManager">
    <property name="fooList">
      <list>
        <value>foo</value>
        <value>foo2</value>
      </list>
    </property>
  </bean>

</beans>

----------------------------------------

TITLE: Demonstrating STOMP Transaction and Message Acknowledgment in Java
DESCRIPTION: Example showing STOMP message handling with transactions and acknowledgments using ActiveMQ. The code demonstrates how transaction abort affects message acknowledgment and how prefetch limits impact message delivery.

LANGUAGE: java
CODE:
StompConnection connection = new StompConnection();
connection.open("localhost", 61613);
		
connection.connect("system", "manager");
		
connection.send("/queue/test", "message 1");
connection.send("/queue/test", "message 2");
connection.send("/queue/test", "message 3");
		
HashMap<String, String> headers = new HashMap<String, String>();
headers.put("activemq.prefetchSize", "1");
connection.subscribe("/queue/test", "client", headers);
		
connection.begin("tx1");
StompFrame frame = connection.receive();
System.out.println(frame.getBody());
connection.ack(frame, "tx1");
connection.abort("tx1");
		
connection.begin("tx2");
connection.ack(frame, "tx2");        //sending the ack again
frame = connection.receive();
System.out.println(frame.getBody());
connection.ack(frame, "tx2");
connection.commit("tx2");
		
connection.begin("tx3");
frame = connection.receive();
System.out.println(frame.getBody());
connection.ack(frame, "tx3");
connection.commit("tx3");

LANGUAGE: text
CODE:
message 1
message 2
message 3

----------------------------------------

TITLE: Configuring Stomp Wire Format Size Limits
DESCRIPTION: Example of configuring maximum frame size for Stomp wire format to prevent potential DOS attacks.

LANGUAGE: xml
CODE:
<transportConnector name="stomp+ssl" uri="stomp+ssl://localhost:61612?wireFormat.maxFrameSize=1000000"/>

----------------------------------------

TITLE: Installing ActiveMQ Feature in ServiceMix
DESCRIPTION: Commands for adding ServiceMix features URL and installing ActiveMQ Classic bundles in the OSGi container.

LANGUAGE: bash
CODE:
features/addUrl mvn:org.apache.servicemix/apache-servicemix/4.0.0/xml/features
features/install activemq

----------------------------------------

TITLE: Configuring a Basic ActiveMQ Broker in XML
DESCRIPTION: Example of configuring a basic ActiveMQ broker with some common elements

LANGUAGE: XML
CODE:
<broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">

  <persistenceAdapter>
    <kahaDB directory="${activemq.data}/kahadb"/>
  </persistenceAdapter>

  <transportConnectors>
    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
  </transportConnectors>

</broker>

----------------------------------------

TITLE: Configuring Sybase DataSource in ActiveMQ
DESCRIPTION: XML configuration for setting up a Sybase ASE database connection using either jConnect or JTDS drivers. Includes basic connection pool settings and credentials configuration.

LANGUAGE: xml
CODE:
<bean id="sybase-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">

    <!-- using jConnect -->
    <property name="driverClassName" value="com.sybase.jdbc4.jdbc.SybDriver"/>
    <property name="url" value="jdbc:sybase:Tds:localhost:4000/activemq"/>
    <!-- using JTDS -->
    <!-- <property name="driverClassName" value="net.sourceforge.jtds.jdbc.Driver"/> -->
    <!-- <property name="url" value="jdbc:jtds:sybase://localhost:4000/activemq"/> -->

    <property name="username" value="XXX" />
    <property name="password" value="YYY" />
    <!-- and so on with pool config -->
  </bean>

----------------------------------------

TITLE: Configuring Dispatch Policy in ActiveMQ 4.x XML
DESCRIPTION: XML configuration example showing how to set up a strict order dispatch policy for topics matching the pattern 'COMMAND.>' in ActiveMQ 4.x. This configuration is placed in the activemq.xml file to define message dispatch behavior and subscription recovery policies.

LANGUAGE: xml
CODE:
<destinationPolicy>
   <policyMap><policyEntries> 
      <policyEntry topic="COMMAND.>">
         <dispatchPolicy>
           <strictOrderDispatchPolicy />
         </dispatchPolicy>
         <subscriptionRecoveryPolicy>
            <noSubscriptionRecoveryPolicy />
         </subscriptionRecoveryPolicy>
      </policyEntry>
   </policyEntries></policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Configuring MessageGroupHashBucket in ActiveMQ XML
DESCRIPTION: This XML snippet configures the MessageGroupHashBucket for all queues in ActiveMQ, with a cache size of 1024. This strategy keeps track of every group with bounded memory use.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue=">">
          <messageGroupMapFactory>
            <messageGroupHashBucked cachedSize=1024 />
          </messageGroupMapFactory>
      </policyEntry>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Java Stomp Client Example
DESCRIPTION: Example Java code demonstrating usage of the ActiveMQ Stomp client API for sending and receiving messages with transactions.

LANGUAGE: java
CODE:
StompConnection connection = new StompConnection();
connection.open("localhost", 61613);
		
connection.connect("system", "manager");
StompFrame connect = connection.receive();

if(!connect.getAction().equals(Stomp.Responses.CONNECTED)) {
	throw new Exception ("Not connected");
}
		
connection.begin("tx1");
connection.send("/queue/test", "message1", "tx1", null);
connection.send("/queue/test", "message2", "tx1", null);
connection.commit("tx1");
	
connection.subscribe("/queue/test", Subscribe.AckModeValues.CLIENT);
	
connection.begin("tx2");
	
StompFrame message = connection.receive();
System.out.println(message.getBody());
connection.ack(message, "tx2");
	
message = connection.receive();
System.out.println(message.getBody());
connection.ack(message, "tx2");
	
connection.commit("tx2");
		
connection.disconnect();

----------------------------------------

TITLE: Performance Settings for ActiveMQ Resource Adapter
DESCRIPTION: Performance-related configuration properties including various prefetch values for different messaging patterns (topics, queues, durable topics, input streams).

LANGUAGE: properties
CODE:
AllPrefetchValues=
DurableTopicPrefetch=100
QueuePrefetch=1000
InputStreamPrefetch=100
TopicPrefetch=32766

----------------------------------------

TITLE: Setting ActiveMQ JVM Options for Task Runner Configuration
DESCRIPTION: Command to set JVM options for ActiveMQ to disable dedicated task runners, reducing thread usage for better scalability when handling many queues.

LANGUAGE: bash
CODE:
ACTIVEMQ_OPTS="-Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=false"

----------------------------------------

TITLE: Quick Build with Maven 3
DESCRIPTION: Command to perform a clean install of ActiveMQ Classic while skipping tests. Uses Maven 3 build system with flags to bypass test execution.

LANGUAGE: bash
CODE:
mvn -Dtest=false -DfailIfNoTests=false clean install

----------------------------------------

TITLE: Configuring TCP Server Transport in ActiveMQ Classic XML
DESCRIPTION: This XML snippet shows the default TCP server transport configuration in the ActiveMQ Classic broker configuration file (activemq.xml).

LANGUAGE: xml
CODE:
<!-- ==================================================================== -->
<!-- ActiveMQ Classic Broker Configuration -->
<!-- ==================================================================== -->
<broker>
 <connector>
  <tcpServerTransport uri="tcp://localhost:61616" backlog="1000" useAsyncSend="true" maxOutstandingMessages="50"/>
 </connector>
    .
    .
</broker>

----------------------------------------

TITLE: Configuring JMS Bridge with Remote ActiveMQ Broker in XML
DESCRIPTION: This XML configuration sets up a JMS Bridge using a BridgeConnector to connect to a remote ActiveMQ Classic broker. It defines inbound and outbound queue bridges with specific selectors and establishes a connection factory for the remote broker.

LANGUAGE: xml
CODE:
<beans>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0"
            brokerName="localhost" dataDirectory="${activemq.base}/data">
        <jmsBridgeConnectors>
            <jmsQueueConnector outboundQueueConnectionFactory="#remoteBroker">
                <inboundQueueBridges>
                    <inboundQueueBridge
                            inboundQueueName = "queue.ping"
                            localQueueName   = "queue.incomingMsgs.ping"
                            selector         = "JMSType LIKE 'foo%'"/>
                </inboundQueueBridges>
                <outboundQueueBridges>
                    <outboundQueueBridge
                            outboundQueueName = "queue.pong"
                            localQueueName    = "queue.incomingMsgs.ping"
                            selector          = "JMSType LIKE 'foo%'"/>
                </outboundQueueBridges>
            </jmsQueueConnector>
        </jmsBridgeConnectors>
    </broker>

    <!-- JMS ConnectionFactory to use for remote bridging -->
    <bean id="remoteBroker" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://remote_activemq:61616)" />
    </bean>
</beans>

----------------------------------------

TITLE: Spring XML Configuration with ActiveMQ 5.2 Namespace
DESCRIPTION: Example of configuring Spring beans with ActiveMQ 5.2 using the apache.org/schema/core namespace.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:amq="http://activemq.apache.org/schema/core"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.2.0.xsd
    ">
</beans>

----------------------------------------

TITLE: Configuring OpenWire Wire Format in Java for ActiveMQ Classic
DESCRIPTION: This snippet demonstrates how to configure the OpenWire wire format options when creating an ActiveMQConnectionFactory in Java. It shows how to disable caching and tight encoding using URI parameters.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("tcp://localhost:61616?wireFormat.cacheEnabled=false&wireFormat.tightEncodingEnabled=false");

----------------------------------------

TITLE: Installing ActiveMQ Binary on Unix
DESCRIPTION: Commands to download and install the ActiveMQ binary distribution on a Unix system using wget and tar.

LANGUAGE: bash
CODE:
wget http://activemq.apache.org/path/tofile/apache-activemq-x.x.x-bin.tar.gz
cd [activemq_install_dir]
tar zxvf activemq-x.x.x-bin.tar.gz

----------------------------------------

TITLE: Configuring Total Ordering with strictOrderDispatchPolicy in ActiveMQ Classic XML
DESCRIPTION: This XML configuration snippet demonstrates how to enable Total Ordering for all topics in ActiveMQ Classic using the strictOrderDispatchPolicy. It's applied through the destinationPolicy and policyMap elements.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry topic=">">
        <dispatchPolicy>
          <strictOrderDispatchPolicy/>
        </dispatchPolicy>
      </policyEntry>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Configuring UDP Transport URI in ActiveMQ
DESCRIPTION: Basic syntax for configuring UDP transport connection. The URI format specifies the hostname and port with optional transport options.

LANGUAGE: text
CODE:
udp://hostname:port?transportOptions

----------------------------------------

TITLE: Starting ActiveMQ Classic with Custom Configuration
DESCRIPTION: Demonstrates how to start the ActiveMQ Classic broker in the background using a custom configuration file.

LANGUAGE: bash
CODE:
bin/activemq start xbean:conf/activemq-stomp.xml

----------------------------------------

TITLE: Disabling Asynchronous Session Processing
DESCRIPTION: Demonstrates how to completely eliminate additional threads by disabling asynchronous session processing. While this reduces thread usage, it may impact system performance.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
connectionFactory.setAlwaysSessionAsync(false);
Connection conn = connectionFactory.createConnection();
conn.start();

----------------------------------------

TITLE: Disabling Embedded Broker Creation in ActiveMQ Classic VM Transport (Java)
DESCRIPTION: This code snippet demonstrates how to configure an ActiveMQConnectionFactory to use the VM transport without automatically creating an embedded broker. It sets the 'create' property to false in the connection URL.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");

----------------------------------------

TITLE: Configuring Consumer Count and Dispatch Delay in ActiveMQ XML
DESCRIPTION: This XML snippet configures ActiveMQ to wait for two consumers or two seconds before starting message dispatch. This helps ensure equal message group distribution when adding new consumers.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue=">" consumersBeforeDispatchStarts="2" timeBeforeDispatchStarts="2000"/>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Configuring Async Send using Connection URI in ActiveMQ Classic
DESCRIPTION: This snippet demonstrates how to enable async sends using the Connection Configuration URI. It creates a new ActiveMQConnectionFactory with the useAsyncSend parameter set to true.

LANGUAGE: java
CODE:
cf = new ActiveMQConnectionFactory("tcp://locahost:61616?jms.useAsyncSend=true");

----------------------------------------

TITLE: Configuring Network Connector with Authentication
DESCRIPTION: Example of setting up a network connector with authentication credentials to connect to a secured broker. This is used in broker-to-broker communication when authentication is enabled.

LANGUAGE: XML
CODE:
<networkConnectors> 
  <networkConnector name="brokerAbridge" userName="user" password="password" uri="static://(tcp://brokerA:61616)"/> 
</networkConnectors>

----------------------------------------

TITLE: Checking out CMS 3.0.1 from SVN
DESCRIPTION: SVN command to check out the tagged version 3.0.1 of ActiveMQ C++ library from Apache's repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.0.1/

----------------------------------------

TITLE: Configuring AIO Server Transport in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to modify the ActiveMQ Classic configuration to use AIO server transport instead of TCP server transport.

LANGUAGE: xml
CODE:
<connector>
 <serverTransport uri="activeio:aio://<ip address>:<port>" />
</connector>

----------------------------------------

TITLE: Configuring AMQP with Prefetch Size
DESCRIPTION: XML configuration for AMQP transport with custom prefetch size and frame size settings.

LANGUAGE: xml
CODE:
<transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.prefetch=10"/>

----------------------------------------

TITLE: Static Transport URI Format
DESCRIPTION: Basic syntax for configuring static transport URIs in ActiveMQ Classic. The format allows specifying multiple URIs separated by commas with optional configuration parameters.

LANGUAGE: plaintext
CODE:
static:(uri1,uri2,uri3,...)?options

----------------------------------------

TITLE: Web Console Configuration Properties
DESCRIPTION: System properties configuration for connecting the web console to an external ActiveMQ broker.

LANGUAGE: properties
CODE:
webconsole.type=properties
webconsole.jms.url=tcp://localhost:61616
webconsole.jmx.url=service:jmx:rmi:///jndi/rmi://localhost:1099/karaf-root
webconsole.jmx.user=karaf
webconsole.jmx.password=karaf

----------------------------------------

TITLE: Failover Transport Configuration Example
DESCRIPTION: Example showing failover configuration between local and remote hosts with initial reconnect delay setting.

LANGUAGE: text
CODE:
failover:(tcp://localhost:61616,tcp://remotehost:61616)?initialReconnectDelay=100

----------------------------------------

TITLE: Setting Maximum Thread Pool Size in ActiveMQ Connection Factory
DESCRIPTION: Demonstrates how to limit the maximum number of threads that a session can use by configuring the connection factory's thread pool size. This helps prevent out-of-memory issues in scenarios with many busy sessions.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
connectionFactory.setMaxThreadPoolSize(10);
Connection conn = connectionFactory.createConnection();
conn.start();

----------------------------------------

TITLE: Configuring invoker-proxy-binding in jboss.xml
DESCRIPTION: XML configuration in jboss.xml to set up an invoker-proxy-binding for ActiveMQ MDBs. It specifies the proxy factory class for message endpoint creation.

LANGUAGE: XML
CODE:
<invoker-proxy-binding>
   <name>activemq-message-driven-bean</name>
   <invoker-mbean>default</invoker-mbean>
   <proxy-factory>org.jboss.ejb.plugins.inflow.JBossMessageEndpointFactory</proxy-factory>
   ...
</invoker-proxy-binding>

----------------------------------------

TITLE: Starting ActiveMQ Classic on Windows
DESCRIPTION: Commands to start ActiveMQ Classic from the installation directory on a Windows system.

LANGUAGE: shell
CODE:
cd [activemq_install_dir]
bin\activemq

----------------------------------------

TITLE: Configuring QueryBasedSubscriptionRecoveryPolicy in XML
DESCRIPTION: Implements a custom query-based recovery mechanism using message selectors to filter which messages to recover.

LANGUAGE: xml
CODE:
<queryBasedSubscriptionRecoveryPolicy query="JMSType = 'car' AND color = 'blue'"/>

----------------------------------------

TITLE: Checking Out ActiveMQ CMS 3.2.3 Source from SVN
DESCRIPTION: Command to checkout the specific tagged version 3.2.3 of ActiveMQ CMS from Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.3/

----------------------------------------

TITLE: Generate IntelliJ IDEA Project Files (Maven 1)
DESCRIPTION: Maven 1 command to generate IntelliJ IDEA IDE project files for older versions of ActiveMQ Classic.

LANGUAGE: bash
CODE:
maven idea

----------------------------------------

TITLE: Broker XML Configuration with Discovery
DESCRIPTION: XML configuration example showing how to enable multicast discovery in an ActiveMQ broker using the discoveryUri attribute.

LANGUAGE: xml
CODE:
<broker name="foo">
  <transportConnectors>
    <transportConnector uri="tcp://localhost:0" discoveryUri="multicast://default"/>
  </transportConnectors>

  ...
</broker>

----------------------------------------

TITLE: Enabling JMSXUserID via Java Code in ActiveMQ
DESCRIPTION: This snippet demonstrates how to enable JMSXUserID population in ActiveMQ using Java code. It creates a BrokerService instance and sets the populateJMSXUserID property to true before starting the broker.

LANGUAGE: java
CODE:
BrokerService broker = new BrokerService();
broker.setPopulateJMSXUserID(true);
broker.start();

----------------------------------------

TITLE: Configuring Topic Subscriber Cursors in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure different cursor policies for durable and transient topic subscribers in ActiveMQ Classic. It sets up a VM cursor for pending subscribers and a VM durable cursor for pending durable subscribers.

LANGUAGE: xml
CODE:
<destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry topic="org.apache.>" producerFlowControl="false" memoryLimit="1mb">
            <dispatchPolicy>
              <strictOrderDispatchPolicy />
            </dispatchPolicy>
            <deadLetterStrategy>
              <individualDeadLetterStrategy  topicPrefix="Test.DLQ." />
            </deadLetterStrategy>
            <pendingSubscriberPolicy>
            	<vmCursor />
            </pendingSubscriberPolicy>
            <pendingDurableSubscriberPolicy>
                <vmDurableCursor/>
            </pendingDurableSubscriberPolicy>
          </policyEntry>
        </policyEntries>
      </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Configuring ProducerWindowSize in Java
DESCRIPTION: Sets the ProducerWindowSize on an ActiveMQConnectionFactory to enable flow control for async message producers. The window size determines the maximum bytes of data sent before waiting for broker acknowledgment.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory connctionFactory = connctionFactory.setProducerWindowSize(1024000);

----------------------------------------

TITLE: Disabling Auto-Creation of Embedded Broker in ActiveMQ Classic
DESCRIPTION: This Java code shows how to turn off auto-creation of the embedded broker by setting the 'create' property on the VM Transport to false.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");

----------------------------------------

TITLE: Error Response Example
DESCRIPTION: Example of an error response from the API when using invalid query syntax

LANGUAGE: HTTP
CODE:
HTTP/1.1 400 Bad Request
Content-Type: application/json
Transfer-Encoding: chunked

{"message":"Unable to find function (method): \"foo(java.lang.Boolean)\" in any user-defined function handlers or the default function handler"}

----------------------------------------

TITLE: Configuring Constant Pending Message Limit Strategy in ActiveMQ
DESCRIPTION: XML configuration for setting a constant limit of pending messages for all consumers above their prefetch size.

LANGUAGE: xml
CODE:
<constantPendingMessageLimitStrategy limit="50"/>

----------------------------------------

TITLE: Starting ActiveMQ Broker with File System XML Configuration
DESCRIPTION: This example shows how to start an ActiveMQ broker using an XML configuration file named 'activemq.xml' that is located in the current directory on the file system.

LANGUAGE: plaintext
CODE:
xbean:file:./activemq.xml

----------------------------------------

TITLE: Configuring NIO Transport in ActiveMQ Broker
DESCRIPTION: XML configuration for setting up NIO transport connector in ActiveMQ broker configuration. Uses port 61616 and binds to all network interfaces.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio" uri="nio://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Creating CMS ConnectionFactory and Connection
DESCRIPTION: Demonstrates how to create a ConnectionFactory and establish a connection to an ActiveMQ broker using the CMS API.

LANGUAGE: C++
CODE:
std::auto_ptr<cms::ConnectionFactory> connectionFactory(
    cms::ConnectionFactory::createCMSConnectionFactory( "tcp://127.0.0.1:61616" ) );

std::auto_ptr<cms::Connection> connection( connectionFactory->createConnection() );

----------------------------------------

TITLE: Configuring Camel Route for JMS Bridge in Spring XML
DESCRIPTION: Example of using Apache Camel to create a simple JMS bridge between MQSeries and ActiveMQ in a Spring XML configuration.

LANGUAGE: xml
CODE:
<camelContext xmlns="http://camel.apache.org/schema/spring">
  <route>
    <from uri="mqseries:Foo.Bar"/>
    <to uri="activemq:Cheese"/>
  </route>
</camelContext>

----------------------------------------

TITLE: Configuring JNDI for ActiveMQ in Properties File
DESCRIPTION: This snippet shows the contents of a jndi.properties file used to configure JNDI for ActiveMQ. It sets up a non-persistent VM-based broker.

LANGUAGE: properties
CODE:
java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory
java.naming.provider.url = vm://localhost?broker.persistent=false

----------------------------------------

TITLE: Configuring RetainedMessageSubscriptionRecoveryPolicy in XML
DESCRIPTION: Keeps only messages that have the ActiveMQ.Retain property set to true.

LANGUAGE: xml
CODE:
<retainedMessageSubscriptionRecoveryPolicy/>

----------------------------------------

TITLE: Setting ActiveMQ Data Directory in XML
DESCRIPTION: XML configuration example showing how to set the data directory for ActiveMQ broker using the dataDirectory attribute.

LANGUAGE: xml
CODE:
<broker dataDirectory="foo">...

----------------------------------------

TITLE: Uninstalling ActiveMQ Windows Service
DESCRIPTION: Batch command to remove the ActiveMQ Windows NT service by running UninstallService.bat.

LANGUAGE: batch
CODE:
UninstallService.bat

----------------------------------------

TITLE: Defining ActiveMQ Performance Test Report Structure in XML
DESCRIPTION: This XML snippet outlines the structure for an ActiveMQ performance test report. It includes sections for system settings, test properties, performance data, and a performance summary. The structure allows for detailed reporting of test environments, parameters, and results.

LANGUAGE: xml
CODE:
<testResult>
  <property name='systemSettings'>
    <props>
      <prop key='java.runtime.name'>Java(TM) 2 Runtime Environment, Standard Edition</prop>
      <prop key='java.vm.version'>1.4.2_10-b03</prop>
                     .
                     .
                     .
      <prop key='os.arch'>x86</prop>
      <prop key='os.name'>Windows XP</prop>
      <prop key='sun.cpu.isalist'>pentium i486 i386</prop>
    </props>
  </property>

  <property name='testProperties'>
    <props>
      <prop key='sysTest.numClients'>5</prop>
                     .
                     .
                     .
      <prop key='sysTest.destDistro'>all</prop>
      <prop key='sysTest.totalDests'>2</prop>
    </props>
  </property>

  <property name='performanceData'>
    <list>
      <value index='0' clientName='TestProducer0'>1035</value>
      <value index='0' clientName='TestProducer3'>255</value>
      <value index='0' clientName='TestProducer4'>727</value>
      <value index='0' clientName='TestProducer2'>347</value>
      <value index='0' clientName='TestProducer1'>527</value>
      <value index='1' clientName='TestProducer0'>947</value>
      <value index='1' clientName='TestProducer3'>615</value>
      <value index='1' clientName='TestProducer4'>712</value>
      <value index='1' clientName='TestProducer2'>864</value>
      <value index='1' clientName='TestProducer1'>187</value>
                     .
                     .
                     .
      <value index='171' clientName='TestProducer0'>1364</value>
      <value index='171' clientName='TestProducer3'>395</value>
      <value index='171' clientName='TestProducer4'>716</value>
      <value index='171' clientName='TestProducer2'>377</value>
      <value index='171' clientName='TestProducer1'>515</value>
    </list>
  </property>

  <property name='perfSummary'>
    <props>
      <prop key='SystemTotalTP'>552114</prop>
      <prop key='SystemTotalClients'>5</prop>
      <prop key='SystemAveTP'>3209.9651162790697</prop>
      <prop key='SystemAveEMMTP'>3161.9651162790697</prop>
      <prop key='SystemAveClientTP'>641.9930232558139</prop>
      <prop key='SystemAveClientEMMTP'>632.3930232558139</prop>
      <prop key='MinClientTP'>clientName=TestProducer4,value=36</prop>
      <prop key='MaxClientTP'>clientName=TestProducer4,value=1764</prop>
      <prop key='MinClientTotalTP'>clientName=TestProducer1,value=107409</prop>
      <prop key='MaxClientTotalTP'>clientName=TestProducer0,value=116751</prop>
      <prop key='MinClientAveTP'>clientName=TestProducer1,value=624.4709302325581</prop>
      <prop key='MaxClientAveTP'>clientName=TestProducer0,value=678.7848837209302</prop>
      <prop key='MinClientAveEMMTP'>clientName=TestProducer1,value=615.2732558139535</prop>
      <prop key='MaxClientAveEMMTP'>clientName=TestProducer0,value=668.9418604651163</prop>
    </props>
  </property>
</testResult>

----------------------------------------

TITLE: Configuring JMSXUserID via XML in ActiveMQ
DESCRIPTION: This XML configuration snippet shows how to enable JMSXUserID population in ActiveMQ using the broker element. It sets the populateJMSXUserID attribute to true within the broker configuration.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.org/config/1.0" populateJMSXUserID="true">
   ...
</broker>

----------------------------------------

TITLE: Trusting All Packages in Camel XML Configuration
DESCRIPTION: This XML configuration shows how to trust all packages for ObjectMessage deserialization in a Camel context using Spring XML configuration, which is useful for testing but not recommended for production use.

LANGUAGE: xml
CODE:
<bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616"/>
<property name="trustAllPackages" value="true"/>
</bean>
<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
    <property name="connectionFactory" ref="connectionFactory"/>
</bean>
<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="configuration" ref="jmsConfig"/>
</bean>

----------------------------------------

TITLE: Deploying Topics and ConnectionFactory in Geronimo
DESCRIPTION: XML configuration for deploying two topics (weatherTopic and weatherRequestsTopic) and a ConnectionFactory in Apache Geronimo. This deployment descriptor sets up the ActiveMQ Classic resource adapter with necessary connection and pool settings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<connector xmlns="http://geronimo.apache.org/xml/ns/j2ee/connector"
    version="1.5"
    configId="weather/Topics"
    parentId="org/apache/geronimo/SystemJMS">
    <resourceadapter>
        <resourceadapter-instance>
            <resourceadapter-name>ActiveMQ Classic RA</resourceadapter-name>
            <config-property-setting name="ServerUrl">tcp://localhost:61616</config-property-setting>
            <config-property-setting name="UserName">geronimo</config-property-setting>
            <config-property-setting name="Password">geronimo</config-property-setting>
            <workmanager>
                <gbean-link>DefaultWorkManager</gbean-link>
            </workmanager>
        </resourceadapter-instance>
        <outbound-resourceadapter>
            <connection-definition>

<connectionfactory-interface>javax.jms.ConnectionFactory</connectionfactory-interface>
                <connectiondefinition-instance>
                    <name>ConnectionFactory</name>

<implemented-interface>javax.jms.QueueConnectionFactory</implemented-interface>

<implemented-interface>javax.jms.TopicConnectionFactory</implemented-interface>
                    <connectionmanager>
                        <xa-transaction>
                            <transaction-caching/>
                        </xa-transaction>
                        <single-pool>
                            <max-size>10</max-size>

<blocking-timeout-milliseconds>5000</blocking-timeout-milliseconds>
                            <match-one/>
                        </single-pool>
                    </connectionmanager>
                    <global-jndi-name>ConnectionFactory</global-jndi-name>
                    <!--
<credential-interface>javax.resource.spi.security.PasswordCredential</credential-interface>
-->
                </connectiondefinition-instance>
            </connection-definition>
        </outbound-resourceadapter>
    </resourceadapter>
    <adminobject>
        <adminobject-interface>javax.jms.Topic</adminobject-interface>

<adminobject-class>org.codehaus.activemq.message.ActiveMQTopic</adminobject-class>
        <adminobject-instance>
            <message-destination-name>weatherTopic</message-destination-name>
            <config-property-setting
name="PhysicalName">weatherTopic</config-property-setting>
        </adminobject-instance>
    </adminobject>
    <adminobject>
        <adminobject-interface>javax.jms.Topic</adminobject-interface>

<adminobject-class>org.codehaus.activemq.message.ActiveMQTopic</adminobject-class>
        <adminobject-instance>

<message-destination-name>weatherRequestsTopic</message-destination-name>
            <config-property-setting
name="PhysicalName">weatherRequestsTopic</config-property-setting>
        </adminobject-instance>
    </adminobject>

</connector>

----------------------------------------

TITLE: Setting ACTIVEMQ_OPTS to Disable Dedicated Task Runner in ActiveMQ Classic
DESCRIPTION: This bash command sets the ACTIVEMQ_OPTS environment variable to disable the dedicated task runner in ActiveMQ Classic. It also sets the maximum heap size to 512MB. This configuration helps reduce the number of threads used by the broker.

LANGUAGE: bash
CODE:
ACTIVEMQ_OPTS="-Xmx512M -Dorg.apache.activemq.UseDedicatedTaskRunner=false"

----------------------------------------

TITLE: ActiveMQ Failover Connection URI
DESCRIPTION: URI syntax for configuring automatic failover and reconnection capabilities in ActiveMQ.

LANGUAGE: uri
CODE:
failover:tcp://host:port

----------------------------------------

TITLE: Building ActiveMQ Classic with Maven on Windows
DESCRIPTION: Commands to build ActiveMQ Classic using Maven and Java 1.5 on a Windows system. This includes steps for cleaning, testing, and skipping tests if necessary.

LANGUAGE: shell
CODE:
cd [activemq_install_dir]
maven clean test

# If the above build fails on some tests, use:
cd [activemq_install_dir]
maven -Dmaven.test.skip=true

----------------------------------------

TITLE: ActiveMQ Resource Adapter Configuration
DESCRIPTION: XML configuration for the ActiveMQ JCA resource adapter defining connection factories and destinations

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE connection-factories
    PUBLIC "-//JBoss//DTD JBOSS JCA Config 1.5//EN"
    "http://www.jboss.org/j2ee/dtd/jboss-ds_1_5.dtd">

<connection-factories>
   <tx-connection-factory>
      <jndi-name>activemq/QueueConnectionFactory</jndi-name>
      <xa-transaction/>
      <track-connection-by-tx/>
      <rar-name>activemq-ra.rar</rar-name>
      <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>
      <ServerUrl>vm://localhost</ServerUrl>
      <min-pool-size>1</min-pool-size>
      <max-pool-size>200</max-pool-size>
      <blocking-timeout-millis>30000</blocking-timeout-millis>
      <idle-timeout-minutes>3</idle-timeout-minutes>
   </tx-connection-factory>
</connection-factories>

----------------------------------------

TITLE: Securing JMSXUserID for Anonymous Access in ActiveMQ
DESCRIPTION: This configuration snippet demonstrates how to secure JMSXUserID when allowing anonymous access in ActiveMQ. It sets the useAuthenticatedPrincipalForJMSXUserID attribute to true on the broker element to prevent identity spoofing.

LANGUAGE: xml
CODE:
useAuthenticatedPrincipalForJMSXUserID="true"

----------------------------------------

TITLE: Sending to Multiple Queues
DESCRIPTION: Shows how to send a message to three different queues in one logical operation using composite destinations.

LANGUAGE: java
CODE:
// send to 3 queues as one logical operation
Queue queue = new ActiveMQQueue("FOO.A,FOO.B,FOO.C");
producer.send(queue, someMessage);

----------------------------------------

TITLE: Deploying ActiveMQ Resource Adapter in Glassfish
DESCRIPTION: Command to deploy the ActiveMQ resource adapter RAR file in Glassfish using the asadmin utility. This step is crucial for enabling JMS connectivity between Glassfish and ActiveMQ.

LANGUAGE: bash
CODE:
bin/asadmin deploy --type rar --name activemq-rar /tmp/activemq-rar-5.11.1.rar

----------------------------------------

TITLE: Configuring ActiveMQ Classic for Kaffe JVM in XML
DESCRIPTION: This XML configuration disables the Journal, Multicast discovery, and JMX to make ActiveMQ Classic compatible with Kaffe JVM. It sets up a persistence adapter without journaling and defines transport connectors for default and STOMP protocols.

LANGUAGE: xml
CODE:
<beans>
 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

 <broker useJmx="false" xmlns="http://activemq.org/config/1.0">

  <persistenceAdapter>
     <journaledJDBC useJournal="false" dataDirectory="activemq-data"/>
  </persistenceAdapter>

  <transportConnectors>
     <transportConnector name="default" uri="tcp://localhost:61616"/>
     <transportConnector name="stomp"   uri="stomp://localhost:61613"/>
  </transportConnectors>

 </broker>

</beans>

----------------------------------------

TITLE: Defining MDB container configuration in jboss.xml
DESCRIPTION: XML configuration in jboss.xml to set up a container configuration for ActiveMQ MDBs. It specifies the container name and links to the previously defined invoker-proxy-binding.

LANGUAGE: XML
CODE:
<container-configuration>
   <container-name>ActiveMQ Classic Message Driven Bean</container-name>
   <call-logging>false</call-logging>
   <invoker-proxy-binding-name>activemq-message-driven-bean</invoker-proxy-binding-name>
   ...
</container-configuration>

----------------------------------------

TITLE: Defining XML-based EIP Routes in ActiveMQ
DESCRIPTION: Example of defining a simple route using Camel's Spring XML format within the camelContext. The route forwards messages from one ActiveMQ queue to another.

LANGUAGE: xml
CODE:
<camelContext xmlns="http://activemq.apache.org/camel/schema/spring">
  <route>
    <from uri="activemq:com.acme.MyQueue"/>
    <to uri="activemq:com.acme.SomeOtherQueue"/>
  </route>
</camelContext>

----------------------------------------

TITLE: Message Size Configuration
DESCRIPTION: Web.xml configuration to modify the maximum allowed message size

LANGUAGE: xml
CODE:
<servlet>
    <servlet-name>MessageServlet</servlet-name>
    <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>

    <init-param>
        <param-name>maxMessageSize</param-name>
        <param-value>-1</param-value>
    </init-param>
</servlet>

----------------------------------------

TITLE: Enabling Audit Logging in ActiveMQ Classic
DESCRIPTION: Shows how to enable audit logging by setting the org.apache.activemq.audit system property in the ActiveMQ startup script. The property can be set to 'true', 'entry', 'exit', or 'all'.

LANGUAGE: bash
CODE:
ACTIVEMQ_OPTS="$ACTIVEMQ_OPTS -Dorg.apache.activemq.audit=true"

----------------------------------------

TITLE: Generating IDE Project Files for ActiveMQ Classic
DESCRIPTION: Maven commands to generate project files for Eclipse and IntelliJ IDEA IDEs when working with ActiveMQ Classic source code.

LANGUAGE: shell
CODE:
maven eclipse
# or
maven idea

----------------------------------------

TITLE: Listing ActiveMQ Brokers
DESCRIPTION: Lists all running ActiveMQ brokers in the specified JMX context.

LANGUAGE: Bash
CODE:
activemq-admin list

LANGUAGE: Bash
CODE:
activemq-admin list --jmxurl service:jmx:rmi:///jndi/rmi://remotehost:1099/jmxrmi

----------------------------------------

TITLE: Configuring Custom IOException Handler in ActiveMQ XML
DESCRIPTION: Example configuration for implementing and configuring a custom IOException handler. Shows how to integrate a custom handler class with the broker configuration.

LANGUAGE: xml
CODE:
<bean id="ioExceptionHandler" class="com.mycompany.MyIOExceptionHandler">
  <property name="ignoreAllErrors"><value>true</value></property>
</bean>

<broker xmlns="http://activemq.apache.org/schema/core" ioExceptionHandler="#ioExceptionHandler">
  ...
</broker>

----------------------------------------

TITLE: Spring 2 XML Configuration with ActiveMQ and Jencks
DESCRIPTION: Example of a Spring 2 XML configuration that combines ActiveMQ, ActiveMQ Resource Adapter, and Jencks using XSD validation.

LANGUAGE: xml
CODE:
http://svn.codehaus.org/jencks/trunk/jencks/src/test/resources/org/jencks/xbean/xbean-validating.xml

----------------------------------------

TITLE: Configuring Queue Cursors in ActiveMQ Classic XML
DESCRIPTION: This XML configuration snippet shows how to set up a VM queue cursor for pending queue messages in ActiveMQ Classic. It also configures a dead letter strategy for queues with names starting with 'org.apache.'.

LANGUAGE: xml
CODE:
<destinationPolicy>
      <policyMap>
        <policyEntries>
          <policyEntry queue="org.apache.>">
            <deadLetterStrategy>
              <individualDeadLetterStrategy queuePrefix="Test.DLQ."/>
            </deadLetterStrategy>
            <pendingQueuePolicy>
            	<vmQueueCursor />
            </pendingQueuePolicy>
          </policyEntry>
        </policyEntries>
      </policyMap>
 </destinationPolicy>

----------------------------------------

TITLE: Configuring ConversionPattern for MDC Logging in ActiveMQ Classic
DESCRIPTION: This snippet shows how to configure a log appender's ConversionPattern to include MDC information from ActiveMQ Classic. It includes placeholders for the broker name, connector address, and destination name.

LANGUAGE: properties
CODE:
log4j.appender.stdout.layout.ConversionPattern=%d [%-15.15t] - %-5p %-30.30c{1} - %-10.10X{activemq.broker} %-20.20X{activemq.connector} %-20.20X{activemq.destination} - %m%n

----------------------------------------

TITLE: Broker Transport Connector Configuration
DESCRIPTION: XML configuration example for broker transport connector with cluster update settings.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" updateClusterClients="true" updateClusterFilter=".*A.*,.*B.*"/>
  </transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Enabling Authentication in ActiveMQ Classic Web Console
DESCRIPTION: XML configuration to enable basic authentication for the ActiveMQ Classic Web Console. This is done by modifying the 'authenticate' property in jetty.xml.

LANGUAGE: xml
CODE:
<property name="authenticate" value="true" />

----------------------------------------

TITLE: Running ActiveMQ Broker with Maven Plugin
DESCRIPTION: This snippet demonstrates how to run an ActiveMQ broker using the ActiveMQ Startup Maven Plugin. It requires Maven to be installed and a pom.xml file in the current directory.

LANGUAGE: shell
CODE:
mvn org.apache.activemq.tooling:maven-activemq-plugin:5.0-SNAPSHOT:run

----------------------------------------

TITLE: Committer Discussion Template
DESCRIPTION: Template for initiating discussion about potential new committer candidates on the private mailing list.

LANGUAGE: plaintext
CODE:
To: private@activemq.apache.org
Subject: [DISCUSS] Invite <CANDIDATE> to become an ActiveMQ committer

Considering <CANDIDATE>'s contributions to the ActiveMQ project...<INSERT EVIDENCE HERE>

Based on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.

Please remember that this is not a vote for this person to become a committer, at this point it is only a discussion.

----------------------------------------

TITLE: Configuring ActiveMQ Classic 3.x Queues and Connection Factory in JNDI
DESCRIPTION: This snippet shows how to configure ActiveMQ Classic 3.x queues and a connection factory in a .binding file for JNDI. It includes definitions for multiple queues and a QueueConnectionFactory with various properties, including some specific to version 3.x.

LANGUAGE: properties
CODE:
Archive/ClassName=org.activemq.message.ActiveMQQueue
Archive/FactoryName=org.activemq.jndi.JNDIReferenceFactory
Archive/RefAddr/0/Type=physicalName
Archive/RefAddr/0/Content=Archive
Archive/RefAddr/0/Encoding=String

GateIn/ClassName=org.activemq.message.ActiveMQQueue
GateIn/FactoryName=org.activemq.jndi.JNDIReferenceFactory
GateIn/RefAddr/0/Type=physicalName
GateIn/RefAddr/0/Content=GateIn
GateIn/RefAddr/0/Encoding=String

ProviderIn/ClassName=org.activemq.message.ActiveMQQueue
ProviderIn/FactoryName=org.activemq.jndi.JNDIReferenceFactory
ProviderIn/RefAddr/0/Type=physicalName
ProviderIn/RefAddr/0/Content=ProviderIn
ProviderIn/RefAddr/0/Encoding=String

ProviderOut/ClassName=org.activemq.message.ActiveMQQueue
ProviderOut/FactoryName=org.activemq.jndi.JNDIReferenceFactory
ProviderOut/RefAddr/0/Type=physicalName
ProviderOut/RefAddr/0/Content=ProviderOut
ProviderOut/RefAddr/0/Encoding=String

QueueConnectionFactory/ClassName=org.activemq.ActiveMQConnectionFactory
QueueConnectionFactory/FactoryName=org.activemq.jndi.JNDIReferenceFactory
QueueConnectionFactory/RefAddr/0/Type=brokerURL
QueueConnectionFactory/RefAddr/0/Content=vm\\://localhost
QueueConnectionFactory/RefAddr/0/Encoding=String
QueueConnectionFactory/RefAddr/1/Type=brokerName
QueueConnectionFactory/RefAddr/1/Content=ID\\:zdv-1189-1098562819250-0\\:0
QueueConnectionFactory/RefAddr/1/Encoding=String
QueueConnectionFactory/RefAddr/2/Type=password
QueueConnectionFactory/RefAddr/2/Content=defaultPassword
QueueConnectionFactory/RefAddr/2/Encoding=String
QueueConnectionFactory/RefAddr/3/Type=useEmbeddedBroker
QueueConnectionFactory/RefAddr/3/Content=true
QueueConnectionFactory/RefAddr/3/Encoding=String
QueueConnectionFactory/RefAddr/4/Type=userName
QueueConnectionFactory/RefAddr/4/Content=defaultUser
QueueConnectionFactory/RefAddr/4/Encoding=String
QueueConnectionFactory/RefAddr/5/Type=useAsyncSend
QueueConnectionFactory/RefAddr/5/Content=true
QueueConnectionFactory/RefAddr/5/Encoding=String

----------------------------------------

TITLE: Configuring MySQL DataSource with relaxAutoCommit in Spring XML
DESCRIPTION: This snippet shows how to configure a MySQL DataSource with the relaxAutoCommit flag set to true using Spring XML configuration.

LANGUAGE: xml
CODE:
<bean id="mysql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
  <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
  <property name="url" value="jdbc:mysql://localhost/activemq?relaxAutoCommit=true"/>
  <property name="username" value="activemq"/>
  <property name="password" value="activemq"/>
  <property name="poolPreparedStatements" value="true"/>
</bean>

----------------------------------------

TITLE: Advanced Priority Queue Configuration in ActiveMQ XML
DESCRIPTION: Enhanced XML configuration for priority queues with disabled caching, message expiration, and modified prefetch settings to ensure strict priority ordering at the cost of performance.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue=">" prioritizedMessages="true" useCache="false" expireMessagesPeriod="0" queuePrefetch="1" />
      ...

----------------------------------------

TITLE: Basic Non-REST Message Operations in ActiveMQ
DESCRIPTION: Demonstrates basic message sending and consuming operations using HTTP methods. This approach is noted as non-idempotent for GET requests, which can cause issues with caching proxies.

LANGUAGE: http
CODE:
POST /queue/Destination

LANGUAGE: http
CODE:
GET /queue/Destination

LANGUAGE: http
CODE:
GET /queue/Destination?jsessionId=....

----------------------------------------

TITLE: Configuring NIO SSL Transport in ActiveMQ Broker
DESCRIPTION: XML configuration example demonstrating the setup of an NIO+SSL transport connector in the ActiveMQ broker for handling large numbers of SSL clients on a single broker instance.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="nio+ssl" uri="nio+ssl://0.0.0.0:61616"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Declaring ActiveMQ Dependency in Maven POM
DESCRIPTION: XML snippet for declaring a dependency on ActiveMQ 5.14.5 in a Maven project's POM file. This dependency includes the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.14.5</version>
</dependency>

----------------------------------------

TITLE: Updating Schema Site in SVN
DESCRIPTION: Shell commands to update the schema site in SVN with the new release artifacts and symlinks.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/infra/websites/production/activemq/content
cd content/schema/core
curl --remote-name-all https://repository.apache.org/content/repositories/releases/org/apache/activemq/activemq-spring/<version>/activemq-spring-<version>{-schema.html,.xsd}{.asc,.asc.md5,.asc.sha1,.sha1,.md5,}
for i in activemq-spring-5.9.0*; do mv -- "$i" "${i//spring/core}"; done;
svn add activemq-core-5.9.0*
svn rm activemq-core.xsd
ln -s activemq-core-5.9.0.xsd activemq-core.xsd
svn add activemq-core.xsd

----------------------------------------

TITLE: Configuring InactivityMonitor in Transport Connector XML
DESCRIPTION: XML configuration example showing how to set InactivityMonitor parameters in the broker's transport connector configuration.

LANGUAGE: xml
CODE:
<transportConnectors>
  <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?wireFormat.maxInactivityDuration=30000&amp;wireFormat.maxInactivityDurationInitalDelay=10000"/>
</transportConnectors>

----------------------------------------

TITLE: Configuring JMX Connector in ActiveMQ Classic Startup Script (Unix)
DESCRIPTION: Unix-specific configuration for enabling the Java 1.5+ JMX connector in the ActiveMQ Classic startup script.

LANGUAGE: bash
CODE:
ACTIVEMQ_SUNJMX_START="-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.password.file=${ACTIVEMQ_BASE}/conf/jmx.password \
  -Dcom.sun.management.jmxremote.access.file=${ACTIVEMQ_BASE}/conf/jmx.access"

----------------------------------------

TITLE: Configuring Async Send at Connection Level in ActiveMQ Classic
DESCRIPTION: This snippet illustrates how to enable async sends at the Connection level, which overrides the settings at the connection factory level. It sets the useAsyncSend property to true on the ActiveMQConnection object.

LANGUAGE: java
CODE:
((ActiveMQConnection)connection).setUseAsyncSend(true);

----------------------------------------

TITLE: Disabling stdout Logging in log4j.properties
DESCRIPTION: This snippet demonstrates how to disable stdout logging by modifying the rootLogger configuration in the log4j.properties file.

LANGUAGE: properties
CODE:
log4j.rootLogger=INFO, out

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration showing how to include ActiveMQ as a dependency in a Maven project using the activemq-all uber jar.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.12.0</version>
</dependency>

----------------------------------------

TITLE: Configuring Database Locker with JDBC
DESCRIPTION: Example configuration for JDBC persistence adapter using database locking with customized lock acquisition interval and keep-alive period

LANGUAGE: xml
CODE:
<persistenceAdapter>
    <jdbcPersistenceAdapter dataDirectory="${activemq.data}" dataSource="#mysql-ds" lockKeepAlivePeriod="10000">
        <locker>
            <database-locker lockAcquireSleepInterval="5000"/>
        </locker>
    </jdbcPersistenceAdapter>
</persistenceAdapter>

----------------------------------------

TITLE: Configuring Java-based EIP Routes in ActiveMQ
DESCRIPTION: Example of configuring the camelContext in activemq.xml to scan for Java-based routing rules in a specific package. The packages attribute specifies which package to scan for route definitions.

LANGUAGE: xml
CODE:
<camelContext xmlns="http://activemq.apache.org/camel/schema/spring">
 <package>org.acme.cheese</package>
</camelContext>

----------------------------------------

TITLE: Generating Apollo Dependency Graph using Maven
DESCRIPTION: This command generates a dependency graph for the Apollo project using Maven. It hides test scopes, transitive dependencies, external dependencies, versions, group IDs, and types. The resulting graph is then copied to the project's website directory.

LANGUAGE: bash
CODE:
mvn -P graph graph:reactor -Dhide-scope=test -Dhide-transitive=true -Dhide-external=true -Dgraph.label= -Dhide-version=true -Dhide-group-id=true -Dhide-type=true
cp target/reactor-graph.png apollo-website/src/images/module-deps-graph.png

----------------------------------------

TITLE: Configuring MQTT Virtual Topic Subscriptions
DESCRIPTION: Configuration to use virtual topics for MQTT subscriptions instead of default durable topic subscribers.

LANGUAGE: xml
CODE:
<transportConnector name="mqtt" uri="mqtt://localhost:1883?transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"/>

----------------------------------------

TITLE: Configuring Lease Database Locker with KahaDB
DESCRIPTION: Example configuration showing KahaDB persistence adapter using lease database locking with custom statements and lock table configuration

LANGUAGE: xml
CODE:
<persistenceAdapter>
	<kahaDB directory="target/activemq-data" lockKeepAlivePeriod="5000">
		<locker>
            <lease-database-locker lockAcquireSleepInterval="10000" dataSource="#mysql-ds">
                <statements>
                    <statements lockTableName="activemq_lock"/>
                </statements>
            </lease-database-locker>
		</locker>
	</kahaDB>
</persistenceAdapter>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with XBean
DESCRIPTION: This XML configuration demonstrates how to use XBean to configure an ActiveMQ Classic broker, including persistence, JMX, and transport connectors.

LANGUAGE: xml
CODE:
<beans 
  xmlns="http://www.springframework.org/schema/beans" 
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

  <broker useJmx="true" xmlns="http://activemq.apache.org/schema/core">

    <persistenceFactory>
      <kahaDB directory="${basedir}/target" />
    </persistenceFactory>

    <transportConnectors>
      <transportConnector uri="tcp://localhost:61636" />
    </transportConnectors>

  </broker>
</beans>

----------------------------------------

TITLE: Adding a TransportConnector in Java for ActiveMQ Classic
DESCRIPTION: This snippet demonstrates how to programmatically add a TransportConnector to the BrokerService in ActiveMQ Classic. It uses the addConnector() method of the BrokerService class.

LANGUAGE: java
CODE:
BrokerService.addConnector(org.apache.activemq.broker.TransportConnector)

----------------------------------------

TITLE: Batch Message REST Operations in ActiveMQ
DESCRIPTION: Demonstrates a RESTful approach for handling messages in batches, including locking multiple messages, retrieving individual messages, and acknowledging them. This method is more efficient for processing multiple messages.

LANGUAGE: http
CODE:
POST lockNextMessage/consumerId?max=10

LANGUAGE: http
CODE:
GET message/consumerId/messageId

LANGUAGE: http
CODE:
DELETE /consumerId/messages/messageId

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet for including ActiveMQ 5.15.9 as a dependency in Maven projects.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.9</version>
</dependency>

----------------------------------------

TITLE: Purging Messages from ActiveMQ Classic Queue
DESCRIPTION: Demonstrates how to delete selected destination's messages that match a message selector.

LANGUAGE: bash
CODE:
bin/activemq purge FOO.BAR # use jmx access data from configuration
bin/activemq purge --jmxurl service:jmx:rmi:///jndi/rmi://127.0.0.1:11098/jmxrmi --jmxuser controlRole --jmxpassword abcd1234 FOO.BAR

----------------------------------------

TITLE: Configuring ActiveMQ Classic 4.x Queues and Connection Factory in JNDI
DESCRIPTION: This snippet demonstrates how to configure ActiveMQ Classic 4.x queues and a connection factory in a .binding file for JNDI. It includes definitions for multiple queues and a QueueConnectionFactory with various properties.

LANGUAGE: properties
CODE:
Archive/ClassName=org.apache.activemq.command.ActiveMQQueue
Archive/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory
Archive/RefAddr/0/Type=physicalName
Archive/RefAddr/0/Content=Archive
Archive/RefAddr/0/Encoding=String

GateIn/ClassName=org.apache.activemq.command.ActiveMQQueue
GateIn/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory
GateIn/RefAddr/0/Type=physicalName
GateIn/RefAddr/0/Content=GateIn
GateIn/RefAddr/0/Encoding=String

ProviderIn/ClassName=org.apache.activemq.command.ActiveMQQueue
ProviderIn/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory
ProviderIn/RefAddr/0/Type=physicalName
ProviderIn/RefAddr/0/Content=ProviderIn
ProviderIn/RefAddr/0/Encoding=String

ProviderOut/ClassName=org.apache.activemq.command.ActiveMQQueue
ProviderOut/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory
ProviderOut/RefAddr/0/Type=physicalName
ProviderOut/RefAddr/0/Content=ProviderOut
ProviderOut/RefAddr/0/Encoding=String

QueueConnectionFactory/ClassName=org.apache.activemq.ActiveMQConnectionFactory
QueueConnectionFactory/FactoryName=org.apache.activemq.jndi.JNDIReferenceFactory
QueueConnectionFactory/RefAddr/0/Type=brokerURL
QueueConnectionFactory/RefAddr/0/Content=vm\\://localhost
QueueConnectionFactory/RefAddr/0/Encoding=String
QueueConnectionFactory/RefAddr/1/Type=brokerName
QueueConnectionFactory/RefAddr/1/Content=ID\\:zdv-1189-1098562819250-0\\:0
QueueConnectionFactory/RefAddr/1/Encoding=String
QueueConnectionFactory/RefAddr/2/Type=password
QueueConnectionFactory/RefAddr/2/Content=defaultPassword
QueueConnectionFactory/RefAddr/2/Encoding=String
QueueConnectionFactory/RefAddr/3/Type=userName
QueueConnectionFactory/RefAddr/3/Content=defaultUser
QueueConnectionFactory/RefAddr/3/Encoding=String

----------------------------------------

TITLE: Advanced Maven POM with ActiveMQ Plugin Configuration
DESCRIPTION: Extended POM configuration with plugin settings, system properties, and dependencies for spring support, jetty webconsole, and embedded camel.

LANGUAGE: xml
CODE:
 <build>    
    <plugins>
      <plugin>
        <groupId>org.apache.activemq.tooling</groupId>
        <artifactId>maven-activemq-plugin</artifactId>
        <version>5.7.0</version>
        <configuration>
          <configUri>xbean:file:../conf/activemq.xml</configUri>
          <fork>false</fork>
          <systemProperties>
            <property>
              <name>javax.net.ssl.keyStorePassword</name>
              <value>password</value>
            </property>
            <property>
              <name>org.apache.activemq.default.directory.prefix</name>
              <value>./target/</value>
            </property>
          </systemProperties>
        </configuration>
        <dependencies>
			  <dependency>
		      <groupId>org.springframework</groupId>
			    <artifactId>spring</artifactId>
		      <version>2.5.5</version>
			  </dependency>
			  <dependency>
		      <groupId>org.mortbay.jetty</groupId>
		      <artifactId>jetty-xbean</artifactId>
		      <version>6.1.11</version>
		    </dependency> 	
		    <dependency>
		      <groupId>org.apache.camel</groupId>
		      <artifactId>camel-activemq</artifactId>
		      <version>1.1.0</version>
        </dependency>
      </dependencies>			
    </plugin>
  </plugins>
</build>

----------------------------------------

TITLE: Using Broker URI Properties in VM Transport for ActiveMQ Classic
DESCRIPTION: This snippet illustrates how to use Broker URI properties within a VM Transport URL. It shows how to set the persistence option for a broker running in VM transport.

LANGUAGE: plaintext
CODE:
vm://localhost?broker.persistent=false

----------------------------------------

TITLE: Enabling SSL Debug Information for ActiveMQ Classic
DESCRIPTION: Command-line option to enable SSL debug information for troubleshooting SSL connections in ActiveMQ Classic.

LANGUAGE: plaintext
CODE:
-Djavax.net.debug=ssl

----------------------------------------

TITLE: Checking ActiveMQ Classic Port on Unix
DESCRIPTION: Command to check if ActiveMQ Classic is listening on its default port (61616) on a Unix system.

LANGUAGE: bash
CODE:
netstat -an|grep 61616

----------------------------------------

TITLE: Message Acknowledgment in JMS
DESCRIPTION: Demonstrates the explicit message acknowledgment method in JMS, which is one of the approaches for handling message consumption. This is contrasted with transactional approaches.

LANGUAGE: java
CODE:
Message.acknowledge()

----------------------------------------

TITLE: Per-Destination KahaDB Configuration
DESCRIPTION: Configuration example for automatically creating separate KahaDB instances for each destination using perDestination flag.

LANGUAGE: xml
CODE:
<broker brokerName="broker">

 <persistenceAdapter>
  <mKahaDB directory="${activemq.base}/data/kahadb">
    <filteredPersistenceAdapters>
      <!-- kahaDB per destinations -->
      <filteredKahaDB perDestination="true">
        <persistenceAdapter>
          <kahaDB journalMaxFileLength="32mb"/>
        </persistenceAdapter>
      </filteredKahaDB>
    </filteredPersistenceAdapters>
  </mKahaDB>
 </persistenceAdapter>

</broker>

----------------------------------------

TITLE: Fixed-Size Byte Array Encoding in OpenWire V2
DESCRIPTION: Illustrates the encoding of fixed-size byte arrays, which are always N octets in length and cannot be null.

LANGUAGE: text
CODE:
+-----------+
| data      |
+-----------+
| N octects |
+-----------+

----------------------------------------

TITLE: Starting ActiveMQ from Source Build on Windows
DESCRIPTION: Commands to start ActiveMQ after building from source on Windows. Includes steps to unzip the built package and launch the broker.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]\assembly\target
unzip activemq-x.x-SNAPSHOT.zip
cd activemq-x.x-SNAPSHOT
bin\activemq

----------------------------------------

TITLE: Encrypted Credentials Properties File
DESCRIPTION: Example of credentials-enc.properties file showing how to store encrypted passwords using ENC() wrapper.

LANGUAGE: properties
CODE:
activemq.username=system
activemq.password=ENC(mYRkg+4Q4hua1kvpCCI2hg==)
guest.password=ENC(Cf3Jf3tM+UrSOoaKU50od5CuBa8rxjoL)
jdbc.password=ENC(eeWjNyX6FY8Fjp3E+F6qTytV11bZItDp)

----------------------------------------

TITLE: Starting ActiveMQ Classic from Command Line
DESCRIPTION: This bash command shows how to start the ActiveMQ Classic binary from a terminal, which displays the default INFO level logging output.

LANGUAGE: bash
CODE:
$ ./bin/activemq

----------------------------------------

TITLE: Verifying ActiveMQ Downloads Using GPG
DESCRIPTION: Commands for verifying ActiveMQ download signatures using GPG (GNU Privacy Guard). Requires KEYS file and .asc signature file.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Creating and Managing Group Membership with ActiveBlaze in Java
DESCRIPTION: This code snippet demonstrates how to create a GroupChannel, join a group, and listen for member changes using ActiveBlaze. It utilizes the BlazeGroupChannelFactory to create a channel, adds the channel to a group, and sets up a listener for member events.

LANGUAGE: java
CODE:
import org.apache.activeblaze.group.*;

...
BlazeGroupChannelFactory factory = new BlazeGroupChannelFactory();

BlazeGroupChannel channel = factory.createGroupChannel("My Channel");
//join a group
channel.addToGroup("test");
channel.start();

//listen for other members

channel.addMemberChangedListener(new MemberChangedListener(){

     public void memberStarted(Member member) {
         System.out.println("Member started");
     }

     public void memberStopped(Member member) {
         System.out.println("Member stopped");
     }
            
 });

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using pgpk
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using the pgpk tool. This process involves importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Nested Command Encoding in OpenWire V2
DESCRIPTION: Shows the encoding structure for nested command fields, including null handling and type identification.

LANGUAGE: text
CODE:
             [=If not-null is 1===================]
+----------+ [ +------+-------------------------+ ]
| not-null | [ | type | command-specific-fields | ]
+----------+ [ +------+-------------------------+ ]
| byte     | [ | byte | variable sized          | ]
+----------+ [ +------+-------------------------+ ]
             [====================================]

----------------------------------------

TITLE: Configuring LDAP Network Connector with TTL for srv-a.mydomain.com
DESCRIPTION: XML configuration for an LDAP network connector with a specific network TTL in ActiveMQ Classic 5. This example demonstrates how to set up message flow between specific brokers.

LANGUAGE: xml
CODE:
<broker brokerName="srv-a.mydomain.com" ...>
   ...

   <networkConnectors>
      <ldapNetworkConnector uri="ldap://myldap.mydomain.com:389"
                            base="dc=brokers-for-srv-a,dc=mydomain,dc=com"
                            anonymousAuthentication="true"
                            searchFilter="(cn=*)"
                            searchScope="SUBTREE_SCOPE"
                            networkTTL="2"
                            />
      <!-- networkTTL=2 since we want messages to flow from srv-a to srv-c -->
   </networkConnectors>

   ...
</broker>

----------------------------------------

TITLE: Using Client Acknowledgment with ActiveMQ Consumer
DESCRIPTION: Command to use client acknowledgment mode with the ActiveMQ consumer tool.

LANGUAGE: bash
CODE:
bin/activemq consumer --ackMode CLIENT_ACKNOWLEDGE

----------------------------------------

TITLE: Configuring an Embedded ActiveMQ Classic Broker in TomEE
DESCRIPTION: This XML configuration snippet shows how to set up an embedded ActiveMQ Classic broker within TomEE. It defines a resource adapter for the broker and a connection factory for JMS connections.

LANGUAGE: xml
CODE:
<tomee>
    <Resource id="MyJmsResourceAdapter" type="ActiveMQResourceAdapter">
        BrokerXmlConfig =  broker:(tcp://someHostName:61616)
        ServerUrl       =  vm://localhost
    </Resource>

    <Resource id="MyJmsConnectionFactory" type="javax.jms.ConnectionFactory">
        ResourceAdapter = MyJmsResourceAdapter
    </Resource>
</tomee>

----------------------------------------

TITLE: Multicast Discovery Configuration in ActiveMQ Classic XML
DESCRIPTION: Example of multicast discovery configuration in ActiveMQ Classic XML that may need to be commented out when using SSL to prevent self-connection issues.

LANGUAGE: xml
CODE:
<networkConnector uri="multicast://default"/>

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a class, likely related to ActiveMQ initialization or usage. It demonstrates object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using pgp
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using pgp. This snippet shows how to import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Maven Dependency Changes for ActiveMQ 5.8
DESCRIPTION: Updates to Maven dependencies where activemq-core has been split into activemq-client and activemq-broker modules. Message stores now have separate activemq-xx-store modules.

LANGUAGE: xml
CODE:
activemq-core has been replaced with activemq-client and activemq-broker

----------------------------------------

TITLE: Complete Fanout Transport Example
DESCRIPTION: Comprehensive example showing Fanout transport configuration with static TCP endpoints and custom reconnect delay.

LANGUAGE: plaintext
CODE:
fanout:(static:(tcp://localhost:61616,tcp://remotehost:61616))?initialReconnectDelay=100

----------------------------------------

TITLE: Byte Array Encoding in OpenWire V2
DESCRIPTION: Shows the encoding structure for byte array fields, including null handling and array size representation.

LANGUAGE: text
CODE:
             [=If not-null is 1========]
+----------+ [ +------+--------------+ ]
| not-null | [ | size | data         | ]
+----------+ [ +------+--------------+ ]
| byte     | [ | int  | size octects | ]
+----------+ [ +------+--------------+ ]
             [=========================]

----------------------------------------

TITLE: Setting up JMeter Test Components
DESCRIPTION: This section describes the three main components of the JMeter System Test Module: Producer System Test Sampler for sending messages, Consumer System Test Sampler for receiving messages, and Producer System Test Listener for monitoring test results. Each component includes configurable parameters for customizing test behavior.



----------------------------------------

TITLE: XBean Plugin Class Definition in Java
DESCRIPTION: Example of how to annotate a plugin class with XBean to enable custom XML mapping. The @XBean annotation in javadoc specifies how the POJO should be mapped to XML elements.

LANGUAGE: java
CODE:
/**
 * @org.apache.xbean.XBean element="foo"
 */
public class MyExtension {
...
}

----------------------------------------

TITLE: Advanced Encryption with Custom Algorithm
DESCRIPTION: Example of using a more secure encryption algorithm (PBEWITHHMACSHA256ANDAES_256) for password encryption.

LANGUAGE: bash
CODE:
$ bin/activemq encrypt --password activemq --input mypassword --algorithm PBEWITHHMACSHA256ANDAES_256

----------------------------------------

TITLE: Basic Composite Queue Definition
DESCRIPTION: Demonstrates the basic syntax for defining multiple destination queues using comma separation.

LANGUAGE: text
CODE:
FOO.A,FOO.B,FOO.C

----------------------------------------

TITLE: Running ActiveMQ Broker from Source Code using Maven
DESCRIPTION: This command runs the ActiveMQ broker from source code using Maven.

LANGUAGE: bash
CODE:
cd modules/assembly
maven server

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project. Uses the activemq-all artifact which is an uber jar containing all ActiveMQ components.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.10.1</version>
</dependency>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using gpg
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using gpg. This snippet illustrates how to import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Running Maven in Offline Mode (Shell)
DESCRIPTION: This command runs Maven in offline mode, preventing it from downloading new snapshot JARs. It's particularly useful when working with projects that use Geronimo JARs.

LANGUAGE: shell
CODE:
maven -o

----------------------------------------

TITLE: Configuring MDB Activation Spec in ejb-jar.xml
DESCRIPTION: Example XML configuration for setting up an Activation Spec in the ejb-jar.xml deployment descriptor. This snippet shows how to configure destination and destinationType properties for a JMS Queue.

LANGUAGE: xml
CODE:
<activation-config>
    <activation-config-property>
       <activation-config-property-name>destination</activation-config-property-name>
       <activation-config-property-value>queue.testQueue</activation-config-property-value>
    </activation-config-property>
    <activation-config-property>
       <activation-config-property-name>destinationType</activation-config-property-name>
       <activation-config-property-value>javax.jms.Queue</activation-config-property-value>
    </activation-config-property>
</activation-config>

----------------------------------------

TITLE: Configuring Discovery Transport for ActiveMQ Client
DESCRIPTION: This XML snippet demonstrates how to configure a client-side transport connector using the 'discovery' protocol, which utilizes multicast for broker discovery.

LANGUAGE: xml
CODE:
<transportConnectors>
    <transportConnector name="default" uri="discovery:(multicast://default)"/>
</transportConnectors>

----------------------------------------

TITLE: Configuring SSL Transport URI in ActiveMQ Classic
DESCRIPTION: Examples of SSL transport URIs for ActiveMQ Classic, including basic configuration and setting SSLServerSocket options.

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?trace=false

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?transport.needClientAuth=true

----------------------------------------

TITLE: Discovery Transport URI Syntax
DESCRIPTION: Basic syntax for configuring Discovery transport URIs in ActiveMQ. Can be used with or without transport options.

LANGUAGE: plaintext
CODE:
discovery:(discoveryAgentURI)?transportOptions

LANGUAGE: plaintext
CODE:
discovery:discoveryAgentURI

----------------------------------------

TITLE: Encoding Primitive Types in OpenWire V2
DESCRIPTION: Demonstrates the encoding of various primitive data types in OpenWire, showing their respective sizes in octets.

LANGUAGE: text
CODE:
             |               |               |               |               |               |               
+----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ 
| byte     | | | char      | | | short     | | | int       | | | long      | | | float     | | | double    | 
+----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ 
| 1 octect | | | 2 octects | | | 2 octects | | | 4 octects | | | 8 octects | | | 4 octects | | | 8 octects | 
+----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ | +-----------+ 
             |               |               |               |               |               |               

----------------------------------------

TITLE: Configuring Multiple ActiveMQ Broker URLs
DESCRIPTION: Demonstrates the syntax for specifying multiple broker URLs using the list: prefix. The client will attempt to connect to each URL randomly until successful, with retry logic implemented for failed connection attempts.

LANGUAGE: text
CODE:
list:tcp://localhost:61699,tcp://localhost:61617,tcp://localhost:61698

----------------------------------------

TITLE: Configuring Log4j Properties for ActiveMQ 4.x Logging
DESCRIPTION: This snippet shows how to configure log4j.properties to enable tracing of ActiveMQ Classic code in version 4.x. It sets the logging level for ActiveMQ to INFO and ActiveMQ Spring to WARN.

LANGUAGE: properties
CODE:
log4j.logger.org.apache.activemq=INFO
log4j.logger.org.apache.activemq.spring=WARN

----------------------------------------

TITLE: Declaring ActiveMQ Classic SNAPSHOT Dependency in Maven POM
DESCRIPTION: This XML snippet demonstrates how to declare a dependency on a SNAPSHOT version of ActiveMQ Classic in a Maven POM file. It specifies the groupId, artifactId, and version for the activemq-broker artifact.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-broker</artifactId>
  <version>5.14.0-SNAPSHOT</version>
</dependency>

----------------------------------------

TITLE: Installing ActiveMQ Classic as Unix Daemon
DESCRIPTION: Demonstrates the steps to install ActiveMQ Classic as a Unix daemon to be run as the 'activemq' user.

LANGUAGE: bash
CODE:
useradd -m activemq -d /srv/activemq
cd /srv/activemq
tar zxvf apache-activemq-<version>-bin.tar.gz$ ln -snf apache-activemq-<version> current
chown -R activemq:users apache-activemq-<version>

cp apache-activemq-<version>/bin/env /etc/default/activemq
sed -i '~s/^ACTIVEMQ\_USER=""/ACTIVEMQ\_USER="activemq"/' /etc/default/activemq
vim /etc/default/activemq
chmod 644 /etc/default/activemq

ln -snf  /srv/activemq/current/bin/activemq /etc/init.d/activemq

----------------------------------------

TITLE: Creating Broker using BrokerFactory in ActiveMQ Classic
DESCRIPTION: This code demonstrates how to use the BrokerFactory helper class to create a broker via URI for configuration.

LANGUAGE: java
CODE:
BrokerService broker = BrokerFactory.createBroker(new URI(someURI));

----------------------------------------

TITLE: Configuring Failover Transport in ActiveMQ 4.0
DESCRIPTION: Example of how to configure the failover transport in ActiveMQ 4.0. The 'reliable' transport has been renamed to 'failover' for clarity. This configuration allows connecting to multiple URIs for redundancy.

LANGUAGE: text
CODE:
failover:tcp://host1:port1,tcp://host2:port2

----------------------------------------

TITLE: Configuring JMS Bridge to Provider Without URL Setter in ActiveMQ
DESCRIPTION: Example of XBean configuration for setting up a JMS bridge to a provider that doesn't expose a URL setter, such as WebLogic, using JNDI.

LANGUAGE: xml
CODE:
<beans>
  <!-- Allows us to use system properties as variables in this configuration file -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

  <broker useJmx="true" xmlns="http://activemq.org/config/1.0">
    <persistenceAdapter>
        <journaledJDBC journalLogFiles="5" dataDirectory="${activemq.home}/activemq-data"/>
    </persistenceAdapter>

    <transportConnectors>
       <transportConnector name="default" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
       <transportConnector name="stomp"   uri="stomp://localhost:61613"/>
    </transportConnectors>

    <networkConnectors>
      <networkConnector name="default" uri="multicast://default"/>
    </networkConnectors>

    <jmsBridgeConnectors>
     <jmsQueueConnector name="JreportRequestBridge-Inbound"
        jndiOutboundTemplate="#remoteJndi"
        outboundQueueConnectionFactoryName="jms/ConnectionFactory"
        localQueueConnectionFactory="#localFactory">
        <inboundQueueBridges>
          <inboundQueueBridge inboundQueueName="jms/queue/jreport/request"/>
        </inboundQueueBridges>
      </jmsQueueConnector>
    </jmsBridgeConnectors>
  </broker>

    <!-- Set up the template for connecting to Weblogic -->
    <bean id="remoteJndi" class="org.springframework.jndi.JndiTemplate">
        <property name="environment">
                <props>
                        <prop key="java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop>
                        <prop key="java.naming.provider.url">t3://<your ip here>:7001</prop>
                </props>
        </property>
    </bean>

  <bean id="localFactory"
    class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616" />
  </bean>

  <bean id="localQueue" class="org.apache.activemq.command.ActiveMQQueue">
    <constructor-arg value="dynamic/jms.queue.jreport.request"/>
  </bean>
</beans>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using Command Line
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg on the command line. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying PGP signatures of ActiveMQ downloads using different PGP/GPG tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Running Performance Tests
DESCRIPTION: Commands to run broker, producer and consumer performance tests

LANGUAGE: bash
CODE:
mvn activemq-perf:broker -Durl=broker:tcp://localhost:61616
mvn activemq-perf:consumer
mvn activemq-perf:producer

----------------------------------------

TITLE: Static Network Connector with Multiple URIs
DESCRIPTION: Configuration showing how to connect to multiple brokers using static network connector.

LANGUAGE: xml
CODE:
<networkConnectors>
  <networkConnector uri="static:(tcp://host1:61616,tcp://host2:61616,tcp://..)"/>
</networkConnectors>

----------------------------------------

TITLE: Example Peer Transport URI in ActiveMQ Classic
DESCRIPTION: An example URI for configuring the Peer Transport in ActiveMQ Classic. This specific example sets up a broker named 'broker1' in the 'groupa' peer group with persistence disabled.

LANGUAGE: plaintext
CODE:
peer://groupa/broker1?persistent=false

----------------------------------------

TITLE: Configuring Connection Dot File Plugin in ActiveMQ XML
DESCRIPTION: This snippet shows how to configure the connectionDotFilePlugin in ActiveMQ's XML configuration to generate DOT files for visualizing connections.

LANGUAGE: xml
CODE:
<connectionDotFilePlugin/>

----------------------------------------

TITLE: Configuring Maven SNAPSHOT Repository for ActiveMQ Classic in XML
DESCRIPTION: This XML snippet adds the Apache Development Snapshot Repository to a Maven POM file. It enables SNAPSHOT versions and disables releases from this repository.

LANGUAGE: XML
CODE:
<repository>
  <id>apache.snapshots</id>
  <name>Apache Development Snapshot Repository</name>
  <url>https://repository.apache.org/content/repositories/snapshots/</url>
  <releases>
    <enabled>false</enabled>
  </releases>
  <snapshots>
    <enabled>true</enabled>
  </snapshots>
</repository>

----------------------------------------

TITLE: Configuring TCP Transport Connection in ActiveMQ-CPP
DESCRIPTION: Demonstrates how to create an ActiveMQ connection factory using TCP transport with specific wire format options.

LANGUAGE: cpp
CODE:
cf = new ActiveMQConnectionFactory("tcp://localhost:61616?wireFormat=openwire&wireFormat.tightEncodingEnabled=true");

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.5.1
DESCRIPTION: Maven POM dependency configuration for including ActiveMQ Core 5.5.1 in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.5.1</version>
</dependency>

----------------------------------------

TITLE: Sending Custom Byte Message with ActiveMQ Producer
DESCRIPTION: Command to send a byte message of custom length using the ActiveMQ producer tool.

LANGUAGE: bash
CODE:
bin/activemq producer --messageSize 100 --messageCount 1

----------------------------------------

TITLE: Configuring Dispatch Async at Consumer Level using Destination URI in Java
DESCRIPTION: This code demonstrates how to set dispatchAsync to false for a specific consumer using Destination Options. This setting overrides the configurations at the connection and connection factory levels.

LANGUAGE: java
CODE:
queue = new ActiveMQQueue("TEST.QUEUE?consumer.dispatchAsync=false");
consumer = session.createConsumer(queue);

----------------------------------------

TITLE: Sending Messages to Multiple Destinations with Single Producer in ActiveMQ
DESCRIPTION: Creates a MessageProducer with null destination parameter, allowing messages to be sent to different destinations using the same producer instance. The destination is specified during the send operation rather than producer creation.

LANGUAGE: java
CODE:
MessageProducer producer = session.createProducer(null);
...
producer.send(someDestination, message);
...
producer.send(anotherDestination, message);

----------------------------------------

TITLE: Configuring OpenWire Transport with Status Monitor
DESCRIPTION: XML configuration example showing how to enable status monitoring on an OpenWire transport connector in the ActiveMQ broker configuration.

LANGUAGE: xml
CODE:
<broker>
  ...
  <transportConnectors>
    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" enableStatusMonitor="true"/>  
  </<transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Configuring Peer Transport URI in ActiveMQ Classic
DESCRIPTION: The configuration syntax for the Peer Transport in ActiveMQ Classic. It shows the general structure of the URI, including the peer group and broker name, along with optional broker options.

LANGUAGE: plaintext
CODE:
peer://peer-group/brokerName?brokerOptions

----------------------------------------

TITLE: Basic Plugin Configuration in ActiveMQ XML
DESCRIPTION: Example of configuring a plugin using standard Spring bean syntax, referenced in the broker's plugins attribute. This approach is used when the plugin doesn't implement custom XML.

LANGUAGE: xml
CODE:
<broker useJmx="true" xmlns="http://activemq.apache.org/schema/core" plugins="#loggingPlugin">
 ...
</broker>

<bean id="loggingPlugin" 
      class="org.apache.activemq.broker.util.LoggingBrokerPlugin"
/>

----------------------------------------

TITLE: Starting a Server with Maven in Offline Mode (Shell)
DESCRIPTION: This command runs Maven in offline mode to start a server. It should be executed from the 'assembly' module directory. This prevents Maven from downloading new JARs while initiating the server.

LANGUAGE: shell
CODE:
maven -o server

----------------------------------------

TITLE: Retrieving ConnectionFactory from JNDI in Spring
DESCRIPTION: Spring XML configuration for retrieving the JMS ConnectionFactory from the JNDI context. This bean uses the previously defined JNDI template.

LANGUAGE: xml
CODE:
<bean id="internalJmsQueueConnectionFactory"
    class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiTemplate">
        <ref bean="jndiTemplate"/>
    </property>
    <property name="jndiName">
        <value>${jms.connectionFactoryName}</value>
    </property>
</bean>

----------------------------------------

TITLE: Sample Audit Log Entries in ActiveMQ Classic
DESCRIPTION: Demonstrates example audit log entries for various actions performed through the Web Console and JMX interfaces. Entries include user information, operation details, parameters, and IP addresses.

LANGUAGE: text
CODE:
2010-12-22 12:12:07,225 | INFO  | admin requested /admin/createDestination.action [JMSDestination='test' JMSDestinationType='queue' secret='4eb0bc3e-9d7a-4256-844c-24f40fda98f1' ] from 127.0.0.1 | qtp12205619-39
2010-12-22 12:12:14,512 | INFO  | admin requested /admin/purgeDestination.action [JMSDestination='test' JMSDestinationType='queue' secret='eff6a932-1b58-45da-a64a-1b30b246cfc9' ] from 127.0.0.1 | qtp12205619-36
2010-12-22 12:12:17,802 | INFO  | admin requested /admin/sendMessage.action [JMSTimeToLive='' JMSXGroupSeq='' AMQ_SCHEDULED_DELAY='' JMSType='' JMSMessageCountHeader='JMSXMessageCounter' JMSXGroupID='' JMSReplyTo='' JMSDestination='test' AMQ_SCHEDULED_PERIOD='' JMSText='Enter some text 
here for the message body...' JMSDestinationType='queue' AMQ_SCHEDULED_CRON='' JMSCorrelationID='' AMQ_SCHEDULED_REPEAT='' JMSMessageCount='1' secret='a0e1df62-14d6-4425-82a2-17aa01a16e7d' JMSPriority='' ] from 127.0.0.1 | qtp12205619-37
...
2010-12-22 12:12:57,553 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.purge[] | RMI TCP Connection(8)-192.168.1.107
2010-12-22 12:13:21,976 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.resetStatistics[] | RMI TCP Connection(8)-192.168.1.107
2010-12-22 12:13:32,457 | INFO  | admin called org.apache.activemq.broker.jmx.QueueView.sendTextMessage[message] | RMI TCP Connection(6)-192.168.1.107

----------------------------------------

TITLE: SVN Tag Checkout Command for ActiveMQ 5.3.1
DESCRIPTION: Subversion checkout command to retrieve the source code for ActiveMQ 5.3.1 from the Apache SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.1

----------------------------------------

TITLE: Retrieving ActiveMQ Destinations using Java API
DESCRIPTION: Demonstrates two Java API methods for accessing ActiveMQ destinations: getDestinations() for getting active destinations and getDestinationMap() for retrieving a map of Destination objects indexed by ActiveMQDestination. These methods provide access to queue details including depths and other metrics.

LANGUAGE: java
CODE:
getDestinations()

LANGUAGE: java
CODE:
getDestinationMap()

----------------------------------------

TITLE: Creating JMX Access Control Files for ActiveMQ Classic
DESCRIPTION: Sample content for JMX access and password files to secure JMX connections in ActiveMQ Classic.

LANGUAGE: properties
CODE:
# conf/jmx.access:
monitorRole readonly
controlRole readwrite

# conf/jmx.password:
monitorRole abc123
controlRole abcd1234

----------------------------------------

TITLE: Creating ConnectionFactory for Embedded Broker in Java
DESCRIPTION: This code demonstrates how to create a ConnectionFactory for an embedded ActiveMQ broker using the VM transport.

LANGUAGE: java
CODE:
ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://embedded-broker?create=false");

----------------------------------------

TITLE: Configuring Sybase Persistence Adapter with Lock DataSource
DESCRIPTION: XML configuration for setting up a JDBC persistence adapter with separate data sources for data persistence and lock management to prevent transaction log issues.

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <jdbcPersistenceAdapter dataSource="#sybase-ds" lockDataSource="#another-sybase-ds"/>
</persistenceAdapter>

----------------------------------------

TITLE: Starting ActiveMQ with Maven
DESCRIPTION: Command for running ActiveMQ broker using Maven with a specific configuration file.

LANGUAGE: bash
CODE:
maven server -Dconfig=xbean:file:src/release/conf/activemq.xml

----------------------------------------

TITLE: Configuring Log4j for Non-Persistent Message Cleanup
DESCRIPTION: Log4j configuration for monitoring cleanup of non-persistent messages in temp storage. This setup includes both KahaDB and temp storage logging while limiting verbose cleanup task output.

LANGUAGE: properties
CODE:
log4j.appender.kahadb=org.apache.log4j.RollingFileAppender
log4j.appender.kahadb.file=${activemq.base}/data/kahadb.log
log4j.appender.kahadb.maxFileSize=1024KB
log4j.appender.kahadb.maxBackupIndex=5
log4j.appender.kahadb.append=true
log4j.appender.kahadb.layout=org.apache.log4j.PatternLayout
log4j.appender.kahadb.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n
log4j.logger.org.apache.activemq.store.kahadb=TRACE, kahadb
log4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=INFO, kahadb

----------------------------------------

TITLE: Consuming Messages in Transaction with ActiveMQ Consumer
DESCRIPTION: Command to consume messages in a transaction using the ActiveMQ consumer tool.

LANGUAGE: bash
CODE:
bin/activemq consumer --transacted true

----------------------------------------

TITLE: Configuring ActiveMQ Destination in CPP
DESCRIPTION: Creates a topic destination with consumer prefetch size and noLocal settings. Shows how to configure consumer behavior through destination URI parameters.

LANGUAGE: cpp
CODE:
d = session->createTopic("com.foo?consumer.prefetchSize=2000&consumer.noLocal=true");

----------------------------------------

TITLE: Configuring Empty Network Connectors for srv-b.mydomain.com
DESCRIPTION: XML configuration for a broker without network connectors in ActiveMQ Classic 5. This example shows how to set up a broker that doesn't actively discover other brokers.

LANGUAGE: xml
CODE:
<broker brokerName="srv-b.mydomain.com" ...>
   ...

   <networkConnectors/>
      <!-- NO NETWORK CONNECTORS -->
   </networkConnectors>

   ...
</broker>

----------------------------------------

TITLE: Enabling Optimized Acknowledgement at Connection Level in ActiveMQ
DESCRIPTION: Enables optimized acknowledgement by setting the property directly on an ActiveMQConnection instance. Requires casting the connection to ActiveMQConnection.

LANGUAGE: java
CODE:
((ActiveMQConnection)connection).setOptimizeAcknowledge(true);

----------------------------------------

TITLE: Web Console Configuration
DESCRIPTION: Configuration properties for the ActiveMQ web console, including JMS and JMX connection settings.

LANGUAGE: properties
CODE:
webconsole.jms.url=tcp://localhost:61616
webconsole.jmx.url=service:jmx:rmi:///jndi/rmi://localhost:1099/karaf-root
webconsole.jmx.user=karaf
webconsole.jmx.password=karaf

LANGUAGE: properties
CODE:
webconsole.jms.user=system
webconsole.jms.password=manager

----------------------------------------

TITLE: Setting Async Send on ConnectionFactory in C#
DESCRIPTION: Shows how to enable asynchronous sending at the ConnectionFactory level by setting the AsyncSend property. This configuration affects all connections created from this factory.

LANGUAGE: csharp
CODE:
((ConnectionFactory)connectionFactory).AsyncSend = true;

----------------------------------------

TITLE: Configuring Debug Logging in ActiveMQ using log4j.properties
DESCRIPTION: Sets the logging level to DEBUG for the org.apache.activemq package by adding a configuration line to the log4j.properties file located in the conf directory.

LANGUAGE: properties
CODE:
log4j.logger.org.apache.activemq=DEBUG

----------------------------------------

TITLE: Priority Backup Configuration
DESCRIPTION: Example showing priority backup configuration with local and remote brokers.

LANGUAGE: text
CODE:
failover:(tcp://local:61616,tcp://remote:61616)?randomize=false&priorityBackup=true

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ-CPP 3.4.0
DESCRIPTION: Command to checkout the specific tagged version 3.4.0 of ActiveMQ-CPP from Apache SVN repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.0/

----------------------------------------

TITLE: Configuring Spring JNDI Template for ActiveMQ Classic
DESCRIPTION: Spring XML configuration for setting up a JNDI template specific to ActiveMQ Classic. It includes the JNDI context factory, broker URL, and topic registrations.

LANGUAGE: xml
CODE:
<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
    <property name="environment">
        <props>
            <prop key="java.naming.factory.initial">${jms.jndiContextFactory}</prop>

			<!-- Specific to ActiveMQ Classic -->

			<!-- the address of the ActiveMQ Classic broker -->
            <prop key="brokerURL">${jms.jndiProviderUrl}</prop>
			<!-- Some Topics Registration, since we are using a fake JNDI implementation -->
            <prop key="topic.${jms.weatherTopic}">${jms.weatherTopic}</prop>
            <prop key="topic.${jms.weatherRequestsTopic}">${jms.weatherRequestsTopic}</prop>
		</props>
    </property>
</bean>

----------------------------------------

TITLE: Defining ActiveMQ ResourceAdapter in ra.xml
DESCRIPTION: XML configuration in ra.xml file to define the inbound resource adapter for ActiveMQ. It specifies the activation spec class and required config properties for destination and destination type.

LANGUAGE: XML
CODE:
<inbound-resourceadapter>
  ...
     <activationspec>
        <activationspec-class>org.activemq.ra.ActiveMQActivationSpec</activationspec-class>
        <required-config-property>
           <config-property-name>Destination</config-property-name>
        </required-config-property>
        <required-config-property>
           <config-property-name>DestinationType</config-property-name>
        </required-config-property>
     </activationspec>
  ...
</inbound-resourceadapter>

----------------------------------------

TITLE: Installing ActiveMQ Features in Karaf
DESCRIPTION: Commands for adding and viewing ActiveMQ features in Karaf environment.

LANGUAGE: bash
CODE:
karaf@root> features:chooseurl activemq 5.9.0

----------------------------------------

TITLE: ActiveMQ HTTP/HTTPS URI Examples
DESCRIPTION: Example URIs demonstrating the syntax for HTTP and HTTPS transport configuration in ActiveMQ Classic. Shows both standard HTTP and secure HTTPS connection strings.

LANGUAGE: plaintext
CODE:
http://localhost
https://localhost:8080

----------------------------------------

TITLE: Starting ActiveMQ from Command Line
DESCRIPTION: Java command to start ActiveMQ broker directly from the command line with a configuration file.

LANGUAGE: bash
CODE:
java org.apache.activemq.broker.Main xbean:file:src/release/conf/activemq.xml

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.6.0 from SVN
DESCRIPTION: This command checks out the source code for ActiveMQ-CPP version 3.6.0 from the Apache Subversion repository. It retrieves the specific tagged version of the project.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.6.0/

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ CMS 2.2.3
DESCRIPTION: Command to check out the source code for ActiveMQ CMS 2.2.3 from Apache SVN repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.3/

----------------------------------------

TITLE: Cloning ActiveMQ Artemis Repository
DESCRIPTION: Git command to clone the Apache ActiveMQ Artemis source code repository from GitHub.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/activemq-artemis

----------------------------------------

TITLE: Running ActiveMQ Classic with JZOS on z/OS
DESCRIPTION: JCL script to execute ActiveMQ Classic using JZOS on z/OS. It sets up the necessary environment variables, classpath, and JVM options.

LANGUAGE: JCL
CODE:
//ACTIVEMQ JOB   (),
//         CLASS=A,                                                    
//         MSGCLASS=X,                                                 
//         MSGLEVEL=(1,1),                                             
//         NOTIFY=&SYSUID,                                             
//         REGION=0M,                                                  
//         TIME=1440                                                   
//PROCLIB JCLLIB ORDER=<JZOS.SYS1.PROCLIB>
//*                                                                    
//********************************************************************
//*                                                                    
//* Batch job to run Tomcat under JZOS                                 
//*                                                                    
//* Tailor the proc and job for your installation:                     
//* 1.) Modify the Job card per your installation's requirements       
//* 2.) Modify the PROCLIB card to point to JZOS proclib               
//* 3.) Set VERSION='14' for Java 1.4 or VERSION='50' for Java 5       
//* 4.) Set JAVA_HOME to point the location of the Java SDK            
//* 5.) Set CATALINA_HOME to point to the shared Tomcat install dir    
//* 6.) (Optional) set CATALINA_BASE to point to instance specific     
//*     Tomcat base dir                                                
//*                                                                    
//********************************************************************
//*                                                                    
//JAVA EXEC PROC=JVMPRC50,                                             
// LOGLVL='+D',
// JAVACLS='org.apache.activemq.console.Main',
// ARGS='start'
//STDENV DD *

LANGUAGE: Shell
CODE:
# This is a shell script which configures
# any environment variables for the Java JVM.
# Variables must be exported to be seen by the launcher.
. /etc/profile
export JAVA_HOME=/space/javaV5_31/J5.0 
AMQ_HOME=/home/user/activemq/amq
ACTIVEMQ_BASE="$AMQ_HOME"

export PATH=/bin:"${JAVA_HOME}"/bin:

LIBPATH=/lib:/usr/lib:"${JAVA_HOME}"/bin
LIBPATH="$LIBPATH":"${JAVA_HOME}"/bin/classic
export LIBPATH="$LIBPATH":

CLASSPATH="${JAVA_HOME}/lib/tools.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/conf"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/activemq-all-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/bin/run.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/bin/wrapper.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activation-1.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activemq-console-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activemq-core-5.0.0-tests.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activemq-core-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activemq-jaas-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/activemq-web-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/camel-core-1.2.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/camel-jms-1.2.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/camel-spring-1.2.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/commons-logging-1.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/geronimo-j2ee-management_1.0_spec-1.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/geronimo-jms_1.1_spec-1.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/geronimo-jta_1.0.1B_spec-1.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/jaxb-api-2.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/jaxb-impl-2.0.3.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/stax-1.2.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/stax-api-1.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/spring-2.0.6.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/xbean.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/jetty-6.1.4.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/jetty-util-6.1.4.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/activeio-core-3.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/geronimo-j2ee-connector.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/activeio-core-tests.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/geronimo-j2ee-jacc.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/activemq-optional-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/activemq-xmpp-5.0.0.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/jmdns-1.0-RC2.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/commons-beanutils-1.6.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/log4j-1.2.14.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/commons-collections-3.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/servlet-api-2.5-6.1.4.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/commons-dbcp-1.2.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/commons-httpclient-2.0.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/commons-pool-1.2.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/xmlpull-1.1.3.4d_b4_min.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/derby-10.1.3.1.jar"
CLASSPATH="$CLASSPATH":"$AMQ_HOME/lib/opt/xstream-1.1.2.jar"
export CLASSPATH="$CLASSPATH":

# Set JZOS specific options
# Use this variable to specify encoding for DD STDOUT and STDERR
#export JZOS_OUTPUT_ENCODING=IBM-1047
# Use this variable to prevent JZOS from handling MVS operator commands
#export JZOS_ENABLE_MVS_COMMANDS=false
# Use this variable to supply additional arguments to main
#export JZOS_MAIN_ARGS=""

# Configure JVM options
# Note that ActiveMQ Classic requires default ASCII file.encoding
IJO="-Xms64m -Xmx512m"
IJO="$IJO -Dfile.encoding=ISO8859-1"
IJO="$IJO -Dcom.sun.management.jmxremote"
IJO="$IJO -Dorg.apache.activemq.UseDedicatedTaskRunner=true"
IJO="$IJO -Dderby.system.home=${ACTIVEMQ_BASE}/data"
IJO="$IJO -Dderby.storage.fileSyncTransactionLog=true"
IJO="$IJO -Djavax.net.ssl.keyStorePassword=password"
IJO="$IJO -Djavax.net.ssl.trustStorePassword=password"
IJO="$IJO -Djavax.net.ssl.keyStore=${ACTIVEMQ_BASE}/conf/broker.ks"
IJO="$IJO -Djavax.net.ssl.trustStore=${ACTIVEMQ_BASE}/conf/broker.ts"
IJO="$IJO -Dactivemq.classpath=${CLASSPATH}"
IJO="$IJO -Dactivemq.base=${ACTIVEMQ_BASE}"
IJO="$IJO -Dactivemq.home=${AMQ_HOME}"
IJO="$IJO -Djava.io.tmpdir=${ACTIVEMQ_BASE}/temp"

# Configure SDK5.0 to use shared classes (at group level)
# You must comment this out if you are not running SDK 5
groupname=`id -gn`
IJO="$IJO -Xshareclasses:name=$groupname,groupAccess"
export IBM_JAVA_OPTIONS="$IJO "

export JAVA_DUMP_HEAP=false
export JAVA_PROPAGATE=NO
export IBM_JAVA_ZOS_TDUMP=NO

----------------------------------------

TITLE: Configuring Hostname Validation for ActiveMQ Classic Server
DESCRIPTION: Example of enabling hostname validation on the server side for 2-way SSL in ActiveMQ Classic.

LANGUAGE: plaintext
CODE:
ssl://localhost:61616?transport.verifyHostName=true

----------------------------------------

TITLE: Initializing ActiveMQ Connection Factory with Direct Implementation
DESCRIPTION: Example showing how to create a ConnectionFactory instance using the Apache.NMS.ActiveMQ implementation directly with configuration parameters.

LANGUAGE: csharp
CODE:
var cf = new Apache.NMS.ActiveMQ.ConnectionFactory("tcp://localhost:61616?wireFormat.tightEncodingEnabled=true");

----------------------------------------

TITLE: Rolling Back JMS Transactions in Java
DESCRIPTION: Shows how to roll back a JMS transaction using the rollback() method on a Session object. This is similar to rolling back a transaction on a JDBC connection.

LANGUAGE: java
CODE:
session.rollback();

----------------------------------------

TITLE: Configuring Individual Dead Letter Strategy
DESCRIPTION: XML configuration for setting up individual dead letter queues with custom prefixes for different destinations using wildcards.

LANGUAGE: xml
CODE:
<broker>
  <destinationPolicy>
    <policyMap>
      <policyEntries>
        <!-- Set the following policy on all queues using the '>' wildcard -->
        <policyEntry queue=">">
          <deadLetterStrategy>
            <!--
              Use the prefix 'DLQ.' for the destination name, and make
              the DLQ a queue rather than a topic
            -->
            <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true"/>
          </deadLetterStrategy>
        </policyEntry>
      </policyEntries>
    </policyMap>
  </destinationPolicy>
</broker>

----------------------------------------

TITLE: Configuring Consumer Dispatch Async via Destination URI in C#
DESCRIPTION: Creates a queue consumer with dispatch async disabled using destination options in the queue URI. This setting overrides both Connection and ConnectionFactory levels.

LANGUAGE: csharp
CODE:
var queue = new ActiveMQQueue("TEST.QUEUE?consumer.dispatchAsync=false");
var consumer = session.CreateConsumer(queue);

----------------------------------------

TITLE: Configuring Log4j Properties for ActiveMQ 3.x Logging
DESCRIPTION: This snippet demonstrates how to configure log4j.properties to enable tracing of ActiveMQ code in version 3.x. It sets the logging level for ActiveMQ to TRACE.

LANGUAGE: properties
CODE:
log4j.logger.org.activemq=TRACE

----------------------------------------

TITLE: Configuring JMS Bridge for Sending Messages to External ActiveMQ Destination
DESCRIPTION: Example of Spring XML configuration and Java code for setting up a JMS bridge to send messages from one ActiveMQ broker to another.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <bean id="mainBroker" class="org.apache.activemq.broker.BrokerService" init-method="start" destroy-method="stop">
    <property name="brokerName" value = "mainBroker"/>
    <property name="persistent" value="false"/>
    <property name="transportConnectorURIs">
      <list>
        <value>tcp://localhost:7000</value>
      </list>
    </property>
  </bean>

  <bean id="bridgedBroker" class="org.apache.activemq.broker.BrokerService" init-method="start" destroy-method="stop">
    <property name="brokerName" value = "bridgedBroker"/>
    <property name="persistent" value="false"/>
    <property name="transportConnectorURIs">
      <list>
        <value>tcp://localhost:7001</value>
      </list>
    </property>
    <property name="jmsBridgeConnectors">
      <list>
        <bean class="org.apache.activemq.network.jms.JmsQueueConnector">
          <property name="outboundQueueConnectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
              <property name="brokerURL" value="tcp://localhost:7000" />
            </bean>
          </property>
          <property name="outboundQueueBridges">
            <list>
              <bean class="org.apache.activemq.network.jms.OutboundQueueBridge">
                <constructor-arg value="messages.input"/>
              </bean>
            </list>
          </property>
        </bean>
      </list>
    </property>
  </bean>

</beans>

LANGUAGE: java
CODE:
public class BridgeTest {

  public BridgeTest() throws Exception {

      Log log = LogFactory.getLog(getClass());

      new ClassPathXmlApplicationContext("bridge/context-bridge.xml");

      ActiveMQConnection connection = ActiveMQConnection.makeConnection("tcp://localhost:7001");
      connection.start();
      Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      Destination destination = session.createQueue("messages.input");
      MessageProducer producer = session.createProducer(destination);
      producer.send(session.createTextMessage("Test Message"));
      log.debug("send message");
      session.close();
      connection.close();

      connection = ActiveMQConnection.makeConnection("tcp://localhost:7000");
      connection.start();
      session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      destination = session.createQueue("messages.input");
      MessageConsumer consumer = session.createConsumer(destination);
      log.debug("receive message");
      Message message = consumer.receive(5000);
      log.debug("Received: " + message);
      session.close();
      connection.close();
  }

  public static void main(String[] args) throws Exception {
    new BridgeTest();
  }

}

----------------------------------------

TITLE: Configuring JMS Bridge for Sending Messages to External ActiveMQ Destination
DESCRIPTION: Example of Spring XML configuration and Java code for setting up a JMS bridge to send messages from one ActiveMQ broker to another.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <bean id="mainBroker" class="org.apache.activemq.broker.BrokerService" init-method="start" destroy-method="stop">
    <property name="brokerName" value = "mainBroker"/>
    <property name="persistent" value="false"/>
    <property name="transportConnectorURIs">
      <list>
        <value>tcp://localhost:7000</value>
      </list>
    </property>
  </bean>

  <bean id="bridgedBroker" class="org.apache.activemq.broker.BrokerService" init-method="start" destroy-method="stop">
    <property name="brokerName" value = "bridgedBroker"/>
    <property name="persistent" value="false"/>
    <property name="transportConnectorURIs">
      <list>
        <value>tcp://localhost:7001</value>
      </list>
    </property>
    <property name="jmsBridgeConnectors">
      <list>
        <bean class="org.apache.activemq.network.jms.JmsQueueConnector">
          <property name="outboundQueueConnectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
              <property name="brokerURL" value="tcp://localhost:7000" />
            </bean>
          </property>
          <property name="outboundQueueBridges">
            <list>
              <bean class="org.apache.activemq.network.jms.OutboundQueueBridge">
                <constructor-arg value="messages.input"/>
              </bean>
            </list>
          </property>
        </bean>
      </list>
    </property>
  </bean>

</beans>

LANGUAGE: java
CODE:
public class BridgeTest {

  public BridgeTest() throws Exception {

      Log log = LogFactory.getLog(getClass());

      new ClassPathXmlApplicationContext("bridge/context-bridge.xml");

      ActiveMQConnection connection = ActiveMQConnection.makeConnection("tcp://localhost:7001");
      connection.start();
      Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      Destination destination = session.createQueue("messages.input");
      MessageProducer producer = session.createProducer(destination);
      producer.send(session.createTextMessage("Test Message"));
      log.debug("send message");
      session.close();
      connection.close();

      connection = ActiveMQConnection.makeConnection("tcp://localhost:7000");
      connection.start();
      session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
      destination = session.createQueue("messages.input");
      MessageConsumer consumer = session.createConsumer(destination);
      log.debug("receive message");
      Message message = consumer.receive(5000);
      log.debug("Received: " + message);
      session.close();
      connection.close();
  }

  public static void main(String[] args) throws Exception {
    new BridgeTest();
  }

}

----------------------------------------

TITLE: SVN Checkout Command for CMS 2.1.1
DESCRIPTION: Command to checkout the specific tag for CMS version 2.1.1 from Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.1/

----------------------------------------

TITLE: Setting ActiveMQ Data Directory in Java
DESCRIPTION: Java code example showing how to set the data directory for ActiveMQ broker using the setDataDirectory method. This creates a directory for the broker to write its files.

LANGUAGE: java
CODE:
File dir = new File("foo");
dir.mkdir();
broker.setDataDirectory(dir);

----------------------------------------

TITLE: Initializing ActiveMQ and Chat Application in JavaScript
DESCRIPTION: This code snippet demonstrates how to initialize the ActiveMQ connection and the Chat application on page load. It uses the org.activemq.Amq.init method to set up the connection with specific parameters, and then initializes the Chat application.

LANGUAGE: javascript
CODE:
// Note, normally you wouldn't just add an onload function in this 
// manner. In fact, you typically want to fire this method on the 
// document.onready event, however this type of functionality is verbose // and best left to the domain of your favorite js library. 
// 
// For example, in jQuery the following onload would be replaced with: 
// jQuery(function() { 
// org.activemq.Amq.init({ uri: 'amq' }); 
// org.activemq.Chat.init(); 
// } window.onload = function() { org.activemq.Amq.init({ uri: 'amq', logging: true, timeout: 45, clientId:(new Date()).getTime().toString() }); org.activemq.Chat.init(); };

----------------------------------------

TITLE: Running JConsole to Monitor ActiveMQ Classic
DESCRIPTION: Command to launch JConsole for monitoring the ActiveMQ Classic broker via JMX.

LANGUAGE: bash
CODE:
$ jconsole

----------------------------------------

TITLE: Basic Network Connector Using Static URIs
DESCRIPTION: XML configuration for a basic network connector using static URIs to connect brokers.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://activemq.org/config/1.0">

  <broker brokerName="receiver" persistent="false" useJmx="false">  
    <networkConnectors>
      <networkConnector uri="static:(tcp://localhost:62001)"/>
    </networkConnectors>

    <persistenceAdapter>
      <memoryPersistenceAdapter/>
    </persistenceAdapter>

   <transportConnectors>
      <transportConnector uri="tcp://localhost:62002"/>
    </transportConnectors>
  </broker>

</beans>

----------------------------------------

TITLE: Configuring OpenWire Protocol Options in Apollo XML
DESCRIPTION: Example of configuring OpenWire protocol options in the Apollo XML configuration file. Shows how to set attributes like tight_encoding and tcp_no_delay.

LANGUAGE: XML
CODE:
<connector id="tcp" bind="tcp://0.0.0.0:61613">
  <openwire tight_encoding="false" tcp_no_delay="true"/>
</connector>

----------------------------------------

TITLE: Configuring Embedded Broker and Connection Factory in Spring XML
DESCRIPTION: Demonstrates how to configure an embedded broker and a connection factory using Spring XML, ensuring the broker starts before the connection factory is created.

LANGUAGE: xml
CODE:
<bean id="broker" class="org.apache.activemq.xbean.BrokerFactoryBean">
    <property name="config" value="classpath:org/apache/activemq/xbean/activemq.xml" />
    <property name="start" value="true" />
  </bean>

  <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="broker">
    <property name="brokerURL" value="vm://localhost"/>
  </bean>

----------------------------------------

TITLE: Configuring Embedded Broker and Connection Factory in Spring XML
DESCRIPTION: Demonstrates how to configure an embedded broker and a connection factory using Spring XML, ensuring the broker starts before the connection factory is created.

LANGUAGE: xml
CODE:
<bean id="broker" class="org.apache.activemq.xbean.BrokerFactoryBean">
    <property name="config" value="classpath:org/apache/activemq/xbean/activemq.xml" />
    <property name="start" value="true" />
  </bean>

  <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory" depends-on="broker">
    <property name="brokerURL" value="vm://localhost"/>
  </bean>

----------------------------------------

TITLE: Configuring Kaha Persistence Adapter in ActiveMQ Classic 4.1 and Earlier
DESCRIPTION: XML configuration for setting up Kaha Persistence Adapter in ActiveMQ Classic version 4.1 and earlier. It specifies the persistence directory and maximum data file length using slightly different attribute names.

LANGUAGE: XML
CODE:
<broker brokerName="broker" persistent="true" useShutdownHook="false">
  <transportConnectors>
    <transportConnector uri="tcp://localhost:61616"/>
  </transportConnectors>
  <persistenceAdapter>
    <kahaPersistenceAdapter dir="activemq-data" maxDataFileLength="33554432"/>
  </persistenceAdapter>
</broker>

----------------------------------------

TITLE: Example UDP Transport URI Configuration
DESCRIPTION: A concrete example showing how to configure UDP transport to connect to localhost on port 8123.

LANGUAGE: text
CODE:
udp://localhost:8123

----------------------------------------

TITLE: Configuring BrokerXmlConfig in WebLogic Resource Adapter
DESCRIPTION: XML configuration for specifying the broker configuration file location in the resource adapter deployment. This allows setting an absolute file path to the broker-config.xml file instead of relying on classpath resolution.

LANGUAGE: xml
CODE:
<config-property>
  <description>
    Sets the XML configuration file used to configure the ActiveMQ Classic broker via
    Spring if using embedded mode.

    BrokerXmlConfig is the filename which is assumed to be on the classpath unless
    a URL is specified. So a value of foo/bar.xml would be assumed to be on the
    classpath whereas file:dir/file.xml would use the file system.
    Any valid URL string is supported.
  </description>
  <config-property-name>BrokerXmlConfig</config-property-name>
  <config-property-type>java.lang.String</config-property-type>
  <config-property-value>xbean:file:C:\\broker-config.xml</config-property-value>
</config-property>

----------------------------------------

TITLE: Simple Jasypt Configuration with Inline Password
DESCRIPTION: Alternative XML configuration with the encryption password stored directly in the configuration file.

LANGUAGE: xml
CODE:
<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
  <property name="algorithm" value="PBEWithMD5AndDES"/>
  <property name="password" value="activemq"/>
</bean>

----------------------------------------

TITLE: Enumerating ActiveMQ Destinations using Advisory Messages in C#
DESCRIPTION: This C# code demonstrates how to connect to an ActiveMQ broker and consume advisory messages to enumerate queues, topics, and all destinations. It uses the Apache.NMS.ActiveMQ library to create a connection, session, and message consumers for different advisory topics. The code processes the received advisory messages to extract and display destination information.

LANGUAGE: C#
CODE:
using System;
using Apache.NMS;
using Apache.NMS.Util;
using Apache.NMS.ActiveMQ;
using Apache.NMS.ActiveMQ.Commands;

namespace AdvisoryExample
{
    class AdvisoryExample
    {
        private IConnection connection;
        private ISession session;

        public const String QUEUE_ADVISORY_DESTINATION = "ActiveMQ.Advisory.Queue";
        public const String TOPIC_ADVISORY_DESTINATION = "ActiveMQ.Advisory.Topic";
        public const String TEMPQUEUE_ADVISORY_DESTINATION = "ActiveMQ.Advisory.TempQueue";
        public const String TEMPTOPIC_ADVISORY_DESTINATION = "ActiveMQ.Advisory.TempTopic";

        public const String ALLDEST_ADVISORY_DESTINATION = QUEUE_ADVISORY_DESTINATION + "," +
                                                           TOPIC_ADVISORY_DESTINATION + "," +
                                                           TEMPQUEUE_ADVISORY_DESTINATION + "," +
                                                           TEMPTOPIC_ADVISORY_DESTINATION;

        AdvisoryExample()
        {
            IConnectionFactory factory = new ConnectionFactory();

            connection = factory.CreateConnection();
            connection.Start();
            session = connection.CreateSession();
        }

        void EnumerateQueues()
        {
            Console.WriteLine("Listing all Queues on Broker:");

            IDestination dest = session.GetTopic(QUEUE_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            Console.WriteLine("   Queue: " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void EnumerateTopics()
        {
            Console.WriteLine("Listing all Topics on Broker:");

            IDestination dest = session.GetTopic(TOPIC_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            Console.WriteLine("   Topic: " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void EnumerateDestinations()
        {
            Console.WriteLine("Listing all Destinations on Broker:");

            IDestination dest = session.GetTopic(ALLDEST_ADVISORY_DESTINATION);

            using(IMessageConsumer consumer = session.CreateConsumer(dest))
            {
                IMessage advisory;

                while((advisory = consumer.Receive(TimeSpan.FromMilliseconds(2000))) != null)
                {
                    ActiveMQMessage amqMsg = advisory as ActiveMQMessage;

                    if(amqMsg.DataStructure != null)
                    {
                        DestinationInfo info = amqMsg.DataStructure as DestinationInfo;
                        if(info != null)
                        {
                            string destType = info.Destination.IsTopic ? "Topic" : "Qeue";
                            destType = info.Destination.IsTemporary ? "Temporary" + destType : destType;
                            Console.WriteLine("   " + destType + ": " + info.Destination.ToString() );
                        }
                    }
                }
            }
            Console.WriteLine("Listing Complete.");
        }

        void ShutDown()
        {
            session.Close();
            connection.Close();
        }

        public static void Main (string[] args)
        {
            AdvisoryExample ex = new AdvisoryExample();

            ex.EnumerateQueues();
            ex.EnumerateTopics();
            ex.EnumerateDestinations();
            ex.ShutDown();
        }
    }
}

----------------------------------------

TITLE: Configuring Zeroconf Discovery for ActiveMQ in Spring XML
DESCRIPTION: This example shows how to use Zeroconf to discover available ActiveMQ brokers for connection in a Spring XML configuration.

LANGUAGE: xml
CODE:
<bean id="jmsFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
  <property name="brokerURL">
    <value>zeroconf://_activemq.broker.development.</value>
  </property>
</bean>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker with Plugin Element in XML
DESCRIPTION: Alternative example of configuring an ActiveMQ Classic broker with a custom plugin using the <plugins> element within the broker configuration in XML.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:amq="http://activemq.org/config/1.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.org/config/1.0 
http://activemq.apache.org/schema/activemq-core.xsd http://activemq.apache.org/camel/schema/spring
http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">

 <!-- Allows us to use system properties as variables in this configuration file -->
 <bean  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />

 <broker xmlns="http://activemq.org/config/1.0" brokerName="localhost" dataDirectory="${activemq.base}/data">

  <!-- The transport connectors ActiveMQ Classic will listen to -->
  <transportConnectors>
     <transportConnector name="openwire" uri="tcp://localhost:61616" />
  </transportConnectors>

  <plugins>
      <bean xmlns="http://www.springframework.org/schema/beans" id="myPlugin" class="org.myorg.MyPlugin"/>    
  </plugins>

 </broker>
 
</beans>

----------------------------------------

TITLE: Configuring jTDS Driver Data Source in ActiveMQ XML
DESCRIPTION: This snippet demonstrates how to configure a data source bean using the jTDS driver for SQLServer in ActiveMQ. It uses the JtdsDataSource class to set up the connection properties.

LANGUAGE: xml
CODE:
<bean id="mssql-ds" class="net.sourceforge.jtds.jdbcx.JtdsDataSource">
   <property name="serverName" value="SERVERNAME"/>
   <property name="portNumber" value="PORTNUMBER"/>
   <property name="databaseName" value="DATABASENAME"/>
   <property name="user" value="USER"/>
   <property name="password" value="PASSWORD"/>
 </bean>

----------------------------------------

TITLE: Checking out CMS 1.0 from SVN
DESCRIPTION: Command to checkout the CMS 1.0 release tag from Apache SVN repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.0/

----------------------------------------

TITLE: Creating CMS Session and Destination
DESCRIPTION: Shows how to create a CMS Session and Topic destination for messaging.

LANGUAGE: C++
CODE:
std::auto_ptr<cms::Session> session( connection->createSession() );

std::auto_ptr<cms::Topic> myTopic( session->createTopic( "EXAMPLE-TOPIC" ) );

----------------------------------------

TITLE: Building ActiveMQ from Source on Windows
DESCRIPTION: Commands to build ActiveMQ from source code on Windows using Maven. Includes optional flags for skipping tests and generating IDE project files.

LANGUAGE: bash
CODE:
REM add "-Dmaven.test.skip=true" if tests are failing on your system (should not happen)
mvn clean install

mvn eclipse:eclipse

mvn idea:idea

----------------------------------------

TITLE: Basic Maven POM Configuration for ActiveMQ
DESCRIPTION: Minimal POM.xml configuration required to run an ActiveMQ broker using Maven.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.acme</groupId>
  <artifactId>run-amq</artifactId>
  <version>1.0-SNAPSHOT</version>
</project>

----------------------------------------

TITLE: Configuring Dispatch Delay in ActiveMQ XML
DESCRIPTION: This XML configuration sets a dispatch delay of 200ms for all queues in ActiveMQ. This can help ensure equal message group distribution when adding new consumers.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue=">" timeBeforeDispatchStarts="200"/>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: URI Syntax Examples for ActiveMQ Broker Properties
DESCRIPTION: Examples demonstrating different ways to reference property files using the properties URI scheme in ActiveMQ Classic. Shows how to reference local files, classpath resources, and remote URLs.

LANGUAGE: plaintext
CODE:
properties:/foo/bar.properties
properties:foo.properties
properties:http://foo.com/foo.properties

----------------------------------------

TITLE: Configuring Transport Connector with Server-side Options in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure a transport connector with server-side options in ActiveMQ Classic. It sets up an OpenWire connector on port 61616 with status monitoring enabled.

LANGUAGE: xml
CODE:
<broker>
   <!-- ... -->

   <transportConnectors>
     <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" enableStatusMonitor="true"/> 
   </<transportConnectors>

   <!-- ... -->
</broker>

----------------------------------------

TITLE: Configuring Transport Connector with Server-side Options in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure a transport connector with server-side options in ActiveMQ Classic. It sets up an OpenWire connector on port 61616 with status monitoring enabled.

LANGUAGE: xml
CODE:
<broker>
   <!-- ... -->

   <transportConnectors>
     <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" enableStatusMonitor="true"/> 
   </<transportConnectors>

   <!-- ... -->
</broker>

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a Java class, possibly related to ActiveMQ initialization or usage. It demonstrates object instantiation syntax in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Running ActiveMQ Producer and Consumer via Command Line
DESCRIPTION: Basic commands to run the ActiveMQ producer and consumer from command line interface.

LANGUAGE: bash
CODE:
${ACTIVEMQ_HOME}/bin/activemq producer
${ACTIVEMQ_HOME}/bin/activemq consumer

----------------------------------------

TITLE: Installing ActiveMQ Windows Service
DESCRIPTION: Batch commands to install ActiveMQ as a Windows NT service by running InstallService.bat from the win32 directory.

LANGUAGE: batch
CODE:
InstallService.bat

----------------------------------------

TITLE: Subscribing to Composite Advisory Topics in ActiveMQ C++
DESCRIPTION: Shows how to subscribe to multiple advisory topics using a composite topic name.

LANGUAGE: C++
CODE:
std::auto_ptr<cms::Topic> advisories( session->createTopic(
    "ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.TempQueue" ) );

std::auto_ptr<cms::MessageConsumer> consumer;
consumer.reset( session->createConsumer( advisories.get() ) );
consumer->setMessageListener( this );

----------------------------------------

TITLE: Configuring Lease Database Locker with JDBC
DESCRIPTION: Example configuration for JDBC persistence adapter using lease database locking with customized intervals for lock acquisition and keep-alive

LANGUAGE: xml
CODE:
<persistenceAdapter>
	<jdbcPersistenceAdapter dataDirectory="${activemq.data}" dataSource="#mysql-ds" lockKeepAlivePeriod="5000">
		<locker>
			<lease-database-locker lockAcquireSleepInterval="10000"/>
		</locker>
	</jdbcPersistenceAdapter>
</persistenceAdapter>

----------------------------------------

TITLE: Cloning ActiveMQ Classic Repository
DESCRIPTION: Git command to clone the Apache ActiveMQ Classic source code repository from the ASF Git server.

LANGUAGE: shell
CODE:
git clone https://git-wip-us.apache.org/repos/asf/activemq.git

----------------------------------------

TITLE: Compilation Shell Script for JAR Processing
DESCRIPTION: Shell script that creates a classmap database and compiles JAR files into shared libraries using GCJ. Processes all JAR files in the current directory.

LANGUAGE: bash
CODE:
#!/bin/sh

# Create new classmap database
gcj-dbtool -n classmap.db

for JAR_FILE in `find -iname "*.jar"`
do
    echo "Compiling ${JAR_FILE} to native"
    gcj -shared -findirect-dispatch -fjni -fPIC -Wl,-symbolic -o ${JAR_FILE}.so ${JAR_FILE}
    gcj-dbtool -a classmap.db ${JAR_FILE} ${JAR_FILE}.so
done

----------------------------------------

TITLE: Running Discovery Test Environment
DESCRIPTION: Commands for setting up a test environment with two auto-discovering brokers and two clients using fixed URLs.

LANGUAGE: text
CODE:
maven -o server -Dconfig=src/test/org/activemq/usecases/receiver-zeroconf.xml
maven -o server -Dconfig=src/test/org/activemq/usecases/sender-zeroconf.xml
maven -o consumer -Durl=tcp://localhost:62002
maven -o producer -Durl=tcp://localhost:62001

----------------------------------------

TITLE: Starting ActiveMQ Unix Daemon
DESCRIPTION: Shell command to start the ActiveMQ broker as a daemon process on Linux or Mac OS X systems.

LANGUAGE: batch
CODE:
./activemq start

----------------------------------------

TITLE: Configuring Protocol-Specific NIO Transport
DESCRIPTION: Example of configuring protocol-specific NIO transport using the +nio suffix with MQTT protocol.

LANGUAGE: properties
CODE:
mqtt+nio://localhost:1883

----------------------------------------

TITLE: Configuring ActiveMQ XML Settings
DESCRIPTION: This XML snippet shows a basic configuration structure for ActiveMQ. It demonstrates the root XML element that would typically contain various ActiveMQ settings.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Creating Consumer for Advisory Messages in ActiveMQ C++ Client
DESCRIPTION: Shows how to create a MessageConsumer for advisory messages and set up an asynchronous listener.

LANGUAGE: C++
CODE:
std::auto_ptr<cms::MessageConsumer> consumer;
consumer.reset( session->createConsumer( advisories.get() ) );
consumer->setMessageListener( this );

----------------------------------------

TITLE: Cloning ActiveMQ Classic 5 Git Repository
DESCRIPTION: Command to clone the ActiveMQ Classic 5 Git repository. Only project developers can commit to this repo via this method. SSH must be installed on the client machine.

LANGUAGE: bash
CODE:
git clone https://git-wip-us.apache.org/repos/asf/activemq.git

----------------------------------------

TITLE: Configuring BLOB Transfer Policy in ActiveMQ Connection URI
DESCRIPTION: This example demonstrates how to configure the BLOB transfer policy, specifically setting the upload URL, using the Connection Configuration URI.

LANGUAGE: java
CODE:
tcp://localhost:61616?jms.blobTransferPolicy.uploadUrl=http://foo.com

----------------------------------------

TITLE: Initializing Blaze Channel in Java
DESCRIPTION: Demonstrates how to create and initialize a Blaze Channel using BlazeChannelFactory. This puts the channel in the 'initialized' state.

LANGUAGE: java
CODE:
BlazeChannelFactory factory = new BlazeChannelFactory();
BlazeChannel channel = factory.createChannel();
channel.init();

----------------------------------------

TITLE: Zeroconf Transport URL Format
DESCRIPTION: Syntax definition for Zeroconf transport URLs, showing the required format with service name patterns.

LANGUAGE: text
CODE:
zeroconf:<serviceName>

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.34.0 Release Parameters in YAML
DESCRIPTION: YAML configuration block specifying the release details for ActiveMQ Artemis 2.34.0, including version, release date, documentation version, and Java compatibility. The configuration includes metadata for documentation subdirectory naming and minimum Java version requirements.

LANGUAGE: yaml
CODE:
version: 2.34.0
release_date: 2024-06-03
title: ActiveMQ Artemis 2.34.0
shortDescription: Hardening on mirroring, and bug fixes
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.34.0
java_version: 11+

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.34.0 Release Parameters in YAML
DESCRIPTION: YAML configuration block specifying the release details for ActiveMQ Artemis 2.34.0, including version, release date, documentation version, and Java compatibility. The configuration includes metadata for documentation subdirectory naming and minimum Java version requirements.

LANGUAGE: yaml
CODE:
version: 2.34.0
release_date: 2024-06-03
title: ActiveMQ Artemis 2.34.0
shortDescription: Hardening on mirroring, and bug fixes
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.34.0
java_version: 11+

----------------------------------------

TITLE: Configuring Simple VM Transport URI in ActiveMQ Classic
DESCRIPTION: Demonstrates the basic syntax for creating a VM connection in ActiveMQ Classic. This format allows for limited configuration of the embedded broker.

LANGUAGE: plaintext
CODE:
vm://brokerName?transportOptions

----------------------------------------

TITLE: JMS Package Imports - Legacy javax.jms
DESCRIPTION: Example of traditional JMS package imports using javax.jms namespace

LANGUAGE: java
CODE:
import javax.jms.ConnectionFactory
import javax.jms.Message
import javax.jms...

----------------------------------------

TITLE: Initializing NMSConnectionFactory with ActiveMQ URI
DESCRIPTION: Creates a new NMS connection factory instance configured to connect to an ActiveMQ broker running on localhost port 61616 using TCP transport.

LANGUAGE: csharp
CODE:
cf = new NMSConnectionFactory("activemq:tcp://localhost:61616");

----------------------------------------

TITLE: Sample MDC Logging Output in ActiveMQ Classic
DESCRIPTION: This snippet demonstrates the log output format when using MDC logging in ActiveMQ Classic. It shows how the broker name, connector address, and destination name are included in the log entries for various operations.

LANGUAGE: text
CODE:
2011-03-23 13:51:04,919 [127.0.0.1:58146] - TRACE Queue                          - broker-3B  tcp://localhost:6111                      - Message ID:dejan-bosanacs-macbook-pro....
2011-03-23 13:51:04,935 [oker-3B] Task-1] - DEBUG Queue                          - broker-3B  tcp://localhost:6111 PROD.FUSESOURCE.3.B  - PROD.FUSESOURCE.3.B toPageIn: 1, Inflight...
2011-03-23 13:51:04,763 [oker-2A] Task-1] - TRACE AbstractStoreCursor            - broker-2A  vm://broker-2A       PROD.FUSESOURCE.3.B  - QueueStorePrefetch611939300 - fillBatch
2011-03-23 13:51:04,759 [127.0.0.1:58118] - TRACE Queue                          - broker-3A  tcp://localhost:6110                      - Message ID:dejan-bosanacs-macbook-pro.l...
2011-03-23 13:51:04,937 [oker-2A] Task-1] - TRACE NetworkBridgeFilter            - broker-2A  vm://broker-2A       PROD.FUSESOURCE.3.B  - Message all ready routed once through t...
2011-03-23 13:51:04,936 [oker-3B] Task-1] - TRACE AbstractStoreCursor            - broker-3B  tcp://localhost:6111 PROD.FUSESOURCE.3.B  - QueueStorePrefetch2047424752 - fillBatch
2011-03-23 13:51:04,941 [oker-2A] Task-2] - DEBUG DemandForwardingBridgeSupport  - broker-2A                                            - bridging (broker-2A -> broker-1B, consu...

----------------------------------------

TITLE: Java ActiveMQ Adapter Implementation
DESCRIPTION: Java class that handles ActiveMQ connection management, message sending, and JMS operations. Provides a clean interface for the C++ code to interact with ActiveMQ.

LANGUAGE: java
CODE:
import org.activemq.*;
import java.util.Hashtable ;
import javax.jms.*;
import javax.naming.*;

public class MQAdapter
{
    private InitialContext         jndiContext ;
    private QueueConnectionFactory factory ;
    private QueueConnection        connection ;
    private QueueSession           session ;
    private QueueSender            sender ;
    private Queue                  queue ;

    public MQAdapter()
    {
    }

    public void start()
    {
        try
        {
            Hashtable props = new Hashtable() ;
            props.put(Context.INITIAL_CONTEXT_FACTORY, "org.activemq.jndi.ActiveMQInitialContextFactory") ;
            props.put(Context.PROVIDER_URL, "tcp://localhost:61616") ;
            props.put("queue.MyQueue", "example.MyQueue") ;

            jndiContext = new InitialContext(props) ;
        
            // Create and configure JMS connection factory
            factory = (QueueConnectionFactory)jndiContext.lookup("ConnectionFactory") ;

            // Lookup Queue
            queue = (Queue)jndiContext.lookup("MyQueue") ;

            // Create a JMS connection
            connection = (QueueConnection)factory.createQueueConnection() ;
            System.out.println("Created connection: " + connection) ;

            // Create a JMS session
            session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE) ;
            System.out.println("Created session: " + session) ;

            // Create JMS sender
            sender  = session.createSender(queue) ;
        }
        catch( Exception e )
        {
            e.printStackTrace() ;

            try
            {
                if( connection != null )
                    connection.close() ;
            } catch( JMSException jmse )
            { /* ignore */ }
        }
    }

    public void stop()
    {
        try
        {
            if( connection != null )
                connection.close() ;
        } catch( JMSException e )
        { /* ignore */ }
    }

    public void send(String msg)
    {
        TextMessage message ;

        try
        {
            message = session.createTextMessage(msg) ;
            sender.send(message) ;
        }
        catch( JMSException e )
        {
            e.printStackTrace() ;
        }
    }
}

----------------------------------------

TITLE: Using XPath Selector for XML Message Filtering
DESCRIPTION: Demonstrates how to use an XPath selector to filter messages with XML content in ActiveMQ Classic.

LANGUAGE: XML
CODE:
XPATH '//title[@lang=''eng'']'

----------------------------------------

TITLE: Stopping ActiveMQ Unix Daemon
DESCRIPTION: Shell command to stop the ActiveMQ daemon process on Linux or Mac OS X systems.

LANGUAGE: batch
CODE:
./activemq stop

----------------------------------------

TITLE: Disabling Advisory Support in ActiveMQ Broker Configuration
DESCRIPTION: This XML configuration snippet demonstrates how to disable advisory support in the ActiveMQ broker configuration.

LANGUAGE: xml
CODE:
<broker advisorySupport="false">

----------------------------------------

TITLE: ActiveMQ Special Message Properties Documentation
DESCRIPTION: Describes three special message properties (_AMQ_ORIG_ADDRESS, _AMQ_ORIG_QUEUE, _AMQ_ORIG_MESSAGE_ID) that are preserved when messages are copied during various broker operations. These properties maintain the original message context after operations like message diversion, expiry processing, dead-letter handling, and administrative moves.

LANGUAGE: properties
CODE:
_AMQ_ORIG_ADDRESS
_AMQ_ORIG_QUEUE
_AMQ_ORIG_MESSAGE_ID

----------------------------------------

TITLE: Combining CRON and Repeated Delivery in ActiveMQ with C#
DESCRIPTION: Shows how to combine CRON scheduling with repeated delivery, scheduling 10 messages with 1-second intervals every hour.

LANGUAGE: csharp
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
message.Properties["AMQ_SCHEDULED_CRON"] = "0 * * * *";
message.Properties["AMQ_SCHEDULED_DELAY"] = 1000;
message.Properties["AMQ_SCHEDULED_PERIOD"] = 1000;
message.Properties["AMQ_SCHEDULED_REPEAT"] = 9;
producer.Send(message);

----------------------------------------

TITLE: Running ActiveMQ Classic Broker with Default Configuration
DESCRIPTION: This command runs an ActiveMQ Classic Broker using the out-of-the-box configuration.

LANGUAGE: bash
CODE:
activemq

----------------------------------------

TITLE: Specifying JDBC Adapter in ActiveMQ XML Configuration
DESCRIPTION: This snippet shows how to explicitly specify the JDBC adapter using its xbean identifier in the ActiveMQ XML configuration file.

LANGUAGE: xml
CODE:
<jdbcPersistenceAdapter adapter="postgresql-jdbc-adapter"/>

----------------------------------------

TITLE: Configuring Advanced VM Transport URI with Broker Options in ActiveMQ Classic
DESCRIPTION: Illustrates the advanced syntax for VM connection, allowing more extensive broker configuration using a Broker Configuration URI.

LANGUAGE: plaintext
CODE:
vm:(broker:(tcp://localhost)?brokerOptions)?transportOptions

----------------------------------------

TITLE: Running ActiveMQ Tools in Karaf
DESCRIPTION: Commands to run the ActiveMQ producer and consumer tools within an OSGi Karaf environment.

LANGUAGE: bash
CODE:
activemq:producer
activemq:consumer

----------------------------------------

TITLE: Intercepting and Routing Messages with Broker Camel Component
DESCRIPTION: Example of intercepting messages from a topic, setting JMS priority to 9, and redirecting them to a queue. Demonstrates basic message interception and transformation using the broker component.

LANGUAGE: xml
CODE:
<route id="setPriority">
   <from uri="broker:topic:test.broker.>"/>
      <setHeader headerName="JMSPriority">
         <constant>9</constant>
      </setHeader>
   <to uri="broker:queue:test.broker.component.queue"/>
</route>

----------------------------------------

TITLE: Intercepting and Routing Messages with Broker Camel Component
DESCRIPTION: Example of intercepting messages from a topic, setting JMS priority to 9, and redirecting them to a queue. Demonstrates basic message interception and transformation using the broker component.

LANGUAGE: xml
CODE:
<route id="setPriority">
   <from uri="broker:topic:test.broker.>"/>
      <setHeader headerName="JMSPriority">
         <constant>9</constant>
      </setHeader>
   <to uri="broker:queue:test.broker.component.queue"/>
</route>

----------------------------------------

TITLE: Configuring ActiveMQ XML Settings
DESCRIPTION: This XML snippet demonstrates a basic configuration structure for ActiveMQ. It includes a root 'xml' element with some content.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Virtual Threads Initialization Log Message
DESCRIPTION: Example log message confirming successful initialization of Virtual Thread Executor in ActiveMQ broker.

LANGUAGE: plaintext
CODE:
INFO | VirtualThreadExecutor initialized name:ActiveMQ BrokerService[localhost] Task

----------------------------------------

TITLE: Configuring Discovery for ZeroConf in ActiveMQ Broker XML
DESCRIPTION: Shows how to enable discovery in an ActiveMQ broker's XML configuration to allow ZeroConf to find brokers. This snippet configures a transport connector with a discovery URI using ZeroConf.

LANGUAGE: xml
CODE:
<broker name="foo">
  <transportConnectors>
    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" discoveryUri="zeroconf:_activemq_development. />
  </transportConnectors>
  ...
</broker>

----------------------------------------

TITLE: Creating a Retroactive Consumer in NMS.ActiveMQ
DESCRIPTION: This code snippet demonstrates how to create a retroactive consumer in NMS.ActiveMQ. It uses a session to create a topic with the 'consumer.retroactive=true' parameter, which marks the consumer as retroactive.

LANGUAGE: csharp
CODE:
var topic = session.GetTopic("TEST.Topic?consumer.retroactive=true");
var consumer = session.CreateConsumer(topic);

----------------------------------------

TITLE: C++ Bootstrap Implementation with CNI
DESCRIPTION: Main C++ entry point that creates JVM, initializes ActiveMQ adapter, sends a test message, and handles cleanup. Uses GCJ's CNI (Compiled Native Interface) for Java integration.

LANGUAGE: cpp
CODE:
#include <gcj/cni.h>
#include <iostream>
#include <java/lang/System.h>
#include <java/lang/Throwable.h>
#include <java/io/PrintStream.h>
#include "MQAdapter.h"

using namespace std;

int main(int argc, char* argv[])
{
    cout << "Entering main" << endl;
    using namespace java::lang;

    try
    {
        // Create and startup Java VM
        JvCreateJavaVM(NULL) ;
        JvAttachCurrentThread(NULL, NULL) ;

        System::out->println(JvNewStringLatin1("Java println")) ;

        // Start ActiveMQ Classic
        MQAdapter* pAdapter = new MQAdapter() ;
        pAdapter->start() ;

        // Send a message
        pAdapter->send(JvNewStringLatin1("Hello World!")) ;

        // Shutdown ActiveMQ Classic
        pAdapter->stop() ;
     
        JvDetachCurrentThread() ;
    }
    catch( Throwable *t )
    {
        System::err->println(JvNewStringLatin1("Exception")) ;
        t->printStackTrace() ;
    }
}

----------------------------------------

TITLE: Running ActiveMQ Broker with Custom Configuration
DESCRIPTION: Runs an ActiveMQ broker using a custom XML configuration file located in the classpath.

LANGUAGE: Bash
CODE:
activemq xbean:myconfig.xml

----------------------------------------

TITLE: Initializing NMS Connection Factory with Generic Implementation
DESCRIPTION: Example showing how to create an NMSConnectionFactory instance using the generic implementation with URI configuration parameters.

LANGUAGE: csharp
CODE:
var cf = new NMSConnectionFactory("activemq:tcp://localhost:61616?wireFormat.tightEncodingEnabled=true");

----------------------------------------

TITLE: Configuring TCP Protocol in ActiveMQ
DESCRIPTION: Demonstrates the configuration of TCP protocol for client-server communication in ActiveMQ.

LANGUAGE: plaintext
CODE:
tcp://somehost:port

----------------------------------------

TITLE: Restarting ActiveMQ Embedded Broker via Re-instantiation
DESCRIPTION: The recommended approach to restart an embedded broker by creating a new instance. This method prevents potential state corruption by fully recreating the broker service.

LANGUAGE: java
CODE:
BrokerService service = BrokerFactory.createBroker("xbean:activemq.xml");
service.start();
service.waitUntilStarted();

service.stop();
service.waitUntilStopped();

service = BrokerFactory.createBroker("xbean:activemq.xml");
service.start();

----------------------------------------

TITLE: Exporting ActiveMQ Classic Broker Data
DESCRIPTION: Shows how to export a stopped broker's data files to an archive file for importing to other brokers like ActiveMQ Artemis.

LANGUAGE: bash
CODE:
$ bin/activemq export --file=archivefile

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Example of creating a new Java object instance

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the NMS providers documentation page, specifying layout, title and page type.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Other NMS Proviers
title-class: page-title-nms
type: nms
---

----------------------------------------

TITLE: Running ActiveMQ Broker with URI Configuration
DESCRIPTION: Runs an ActiveMQ broker using a URI configuration to specify transport connectors and other options.

LANGUAGE: Bash
CODE:
activemq broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true

LANGUAGE: Bash
CODE:
activemq broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false

----------------------------------------

TITLE: Staging Release Artifacts in SVN
DESCRIPTION: Shell commands to stage the official release artifacts in the SVN dist dev area for testing and voting.

LANGUAGE: shell
CODE:
svn co https://dist.apache.org/repos/dist/dev/activemq/activemq/
cd activemq
./prepare-release.sh <nexus-staging-repo-url> <version>
svn add <version>

----------------------------------------

TITLE: Configuring Wire Format Options for All Protocols in ActiveMQ Classic
DESCRIPTION: This XML configuration sets a maximum frame size of 1000 bytes for all wire formats in the AUTO transport connector. This option applies to all supported protocols (OpenWire, STOMP, AMQP, and MQTT).

LANGUAGE: xml
CODE:
<transportConnector name="auto" uri="auto://localhost:5671?wireFormat.maxFrameSize=1000"/>

----------------------------------------

TITLE: Sending Message with URL Content using ActiveMQ Producer
DESCRIPTION: Command to send a text message with content obtained from a URL using the ActiveMQ producer tool.

LANGUAGE: bash
CODE:
bin/activemq producer --payloadUrl http://activemq.apache.org/schema/core/activemq-core.xsd --messageCount 1

----------------------------------------

TITLE: Configuring WebSocket Transport in ActiveMQ XML
DESCRIPTION: This XML snippet shows how to configure a WebSocket transport connector in the ActiveMQ configuration file. It sets up a WebSocket endpoint on port 61614 that accepts connections from any IP address.

LANGUAGE: xml
CODE:
<transportConnectors>
  <transportConnector name="websocket" uri="ws://0.0.0.0:61614"/>
</transportConnectors>

----------------------------------------

TITLE: Configuring JNDI properties for ActiveMQ Classic log topic
DESCRIPTION: This snippet shows the JNDI configuration required for the log4j JMS appender to find the appropriate topic for sending log messages.

LANGUAGE: properties
CODE:
topic.logTopic=logTopic

----------------------------------------

TITLE: ActiveMQ SSL Certificate Unknown Error Stack Trace
DESCRIPTION: Stack trace showing a JMSException caused by an SSL handshake failure due to an untrusted certificate when attempting to establish an SSL connection to ActiveMQ broker.

LANGUAGE: java
CODE:
javax.jms.JMSException: start failed: Received fatal alert: certificate_unknown
       at org.activemq.transport.tcp.TcpTransportChannel.start(TcpTransportChannel.java:200)
       at org.activemq.broker.impl.BrokerConnectorImpl.addClient(BrokerConnectorImpl.java:308)
       at org.activemq.transport.TransportServerChannelSupport.addClient(TransportServerChannelSupp
       at org.activemq.transport.tcp.TcpTransportServerChannel.run(TcpTransportServerChannel.java:1
       at java.lang.Thread.run(Unknown Source)
Caused by: javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown
       at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Unknown Source)
       at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Unknown Source)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(Unknown Source)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(Unknown Source)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(Unknown Source)
       at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readDataRecord(Unknown Source)
       at com.sun.net.ssl.internal.ssl.AppInputStream.read(Unknown Source)
       at java.io.BufferedInputStream.fill(Unknown Source)

----------------------------------------

TITLE: NMS Downloads Page Structure in Markdown
DESCRIPTION: Markdown structure defining a page with Jekyll front matter and download link navigation

LANGUAGE: markdown
CODE:
---
layout: default_md
title: NMS Downloads 
title-class: page-title-nms
type: nms
---

* [NMS API Downloads](nms-api-downloads)
* Providers
  * [AMQP](providers/amqp/downloads)
  * [ActiveMQ (OpenWire)](providers/activemq/downloads)

----------------------------------------

TITLE: Configuring Microsoft SQL Server DataSource in ActiveMQ 3.x
DESCRIPTION: XML configuration for setting up a Microsoft SQL Server database connection in ActiveMQ 3.x using Apache Commons DBCP. Specifies connection details including driver class, server URL, authentication, and statement pooling.

LANGUAGE: xml
CODE:
<bean id="mssql-ds" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName">
        <value>com.microsoft.jdbc.sqlserver.SQLServerDriver</value>
    </property>
    <property name="url">
        <value>jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=activedb</value>
    </property>
    <property name="username">
        <value>sa</value>
    </property>
    <property name="password">
        <value></value>
    </property>
    <property name="poolPreparedStatements">
        <value>true</value>
    </property>
</bean>

----------------------------------------

TITLE: Basic Fanout Transport URI Syntax
DESCRIPTION: Shows the two basic syntax patterns for configuring Fanout transport URIs in ActiveMQ.

LANGUAGE: plaintext
CODE:
fanout:(discoveryURI)?transportOptions

LANGUAGE: plaintext
CODE:
fanout:discoveryURI

----------------------------------------

TITLE: Starting ActiveMQ Classic on Unix
DESCRIPTION: Commands to start ActiveMQ Classic from the installation directory on a Unix system, including options for running in the background and redirecting output.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
bin/activemq
# OR
bin/activemq > /tmp/smlog 2>&1 &
# OR
nohup bin/activemq > /tmp/smlog 2>&1 &

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.16.0 Release Details in YAML
DESCRIPTION: YAML configuration block defining version metadata for ActiveMQ Artemis 2.16.0 including release date, documentation version and Java compatibility. This configuration is used to manage version-specific documentation and release information.

LANGUAGE: yaml
CODE:
version: 2.16.0
release_date: 2020-11-10
title: ActiveMQ Artemis 2.16.0
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.16.0
java_version: 8

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.16.0 Release Details in YAML
DESCRIPTION: YAML configuration block defining version metadata for ActiveMQ Artemis 2.16.0 including release date, documentation version and Java compatibility. This configuration is used to manage version-specific documentation and release information.

LANGUAGE: yaml
CODE:
version: 2.16.0
release_date: 2020-11-10
title: ActiveMQ Artemis 2.16.0
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.16.0
java_version: 8

----------------------------------------

TITLE: Configuring ActiveMQ XML
DESCRIPTION: This XML snippet demonstrates a basic ActiveMQ configuration. It shows the structure of an XML file used for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Checking out NMS Vendor Dependencies
DESCRIPTION: SVN command to check out the vendor dependencies required for building NMS.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/vendor/

----------------------------------------

TITLE: Configuring MQTT Subscription Prefetch
DESCRIPTION: Setting custom prefetch size for MQTT subscriptions using transport options.

LANGUAGE: xml
CODE:
<transportConnector name="mqtt" uri="mqtt://localhost:1883?transport.activeMQSubscriptionPrefetch=32766"/>

----------------------------------------

TITLE: Configuring ActiveMQ with Broker URI
DESCRIPTION: Command to start ActiveMQ with custom broker configuration using URI syntax, specifying transport protocols and broker options.

LANGUAGE: bash
CODE:
bin/activemq console broker:(tcp://localhost:61616,network:static:tcp://remotehost:61616)?persistent=false&useJmx=true

----------------------------------------

TITLE: Configuring Failover Transport URL
DESCRIPTION: Example of a failover transport URL configuration for connecting clients to broker nodes in the replication cluster.

LANGUAGE: text
CODE:
failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)

----------------------------------------

TITLE: Configuring Protocol Detection Timeout in ActiveMQ Classic
DESCRIPTION: This XML configuration sets up an AUTO transport connector with a custom protocol detection timeout of 5 seconds (5000 milliseconds). This limits the time allowed for protocol detection before the connection times out.

LANGUAGE: xml
CODE:
<transportConnector name="auto" uri="auto://localhost:5671?protocolDetectionTimeOut=5000"/>

----------------------------------------

TITLE: Enabling Optimized Acknowledgement via Connection URI in ActiveMQ
DESCRIPTION: Creates a new ActiveMQConnectionFactory with optimized acknowledgement enabled through the connection URI parameter. Uses the tcp protocol with localhost:61616 as the broker address.

LANGUAGE: java
CODE:
cf = new ActiveMQConnectionFactory("tcp://locahost:61616?jms.optimizeAcknowledge=true");

----------------------------------------

TITLE: XML Structure Example
DESCRIPTION: Simple XML element example showing basic structure

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Redelivery Configuration for ActiveMQ Resource Adapter
DESCRIPTION: Redelivery configuration properties including initial delay, maximum redeliveries, backoff multiplier, and exponential backoff settings.

LANGUAGE: properties
CODE:
InitialRedeliveryDelay=1000
MaximumRedeliveries=5
RedeliveryBackOffMultiplier=5
RedeliveryUseExponentialBackOff=false

----------------------------------------

TITLE: Configuring Slave Authentication in ActiveMQ XML
DESCRIPTION: XML configuration example showing how to set up authentication credentials for a slave broker connecting to a master.

LANGUAGE: xml
CODE:
<broker brokerName="slave" useJmx="false"  deleteAllMessagesOnStartup="true"  xmlns="http://activemq.apache.org/schema/core">
  <services>
    <masterConnector remoteURI= "tcp://localhost:62001" userName="James" password="Cheese"/>
  </services>

  <transportConnectors>
    <transportConnector uri="tcp://localhost:62002"/>
  </transportConnectors>
</broker>

----------------------------------------

TITLE: Defining Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and describes three special properties that are added to messages when they are copied within the ActiveMQ broker. These properties preserve the original address, queue, and message ID of the copied message.

LANGUAGE: plaintext
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Configuring Timed Client-Side Exceptions for System Usage in XML
DESCRIPTION: XML configuration to throw an exception on the client-side after waiting for a specified timeout when no space is available on the broker.

LANGUAGE: xml
CODE:
<systemUsage>
 <systemUsage sendFailIfNoSpaceAfterTimeout="3000">
   <memoryUsage>
     <memoryUsage limit="20 mb"/>
   </memoryUsage>
 </systemUsage>
</systemUsage>

----------------------------------------

TITLE: Deploying ActiveMQ Web Console
DESCRIPTION: Commands for installing and starting the ActiveMQ web console WAR in the OSGi container.

LANGUAGE: bash
CODE:
osgi/install war:mvn:org.apache.activemq/activemq-web-console/5.3-SNAPSHOT/war?Webapp-Context=activemqweb
osgi/start 84

----------------------------------------

TITLE: Markdown Layout Configuration
DESCRIPTION: YAML frontmatter configuration defining the page layout and title settings for a documentation page.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Design Documents 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Configuring LDAP Network Connector for srv-a.mydomain.com
DESCRIPTION: XML configuration for setting up an LDAP network connector in ActiveMQ Classic 5. This snippet shows how to configure a broker to discover other brokers using an LDAP server.

LANGUAGE: xml
CODE:
<broker brokerName="srv-a.mydomain.com" ...>
   ...

   <networkConnectors>
      <ldapNetworkConnector uri="ldap://myldap.mydomain.com:389"
                            base="dc=brokers,dc=mydomain,dc=com"
                            anonymousAuthentication="true"
                            searchFilter="(cn=*)"
                            searchScope="SUBTREE_SCOPE"
                            />
   </networkConnectors>

   ...
</broker>

----------------------------------------

TITLE: Preparing and Performing Maven Release
DESCRIPTION: Shell commands to prepare and perform the Maven release, creating tags and deploying to staging repository.

LANGUAGE: shell
CODE:
mvn release:prepare
cd ..
cp -r activemq-release activemq-release-prepared
cd activemq-release
mvn release:perform

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ 5.7.0 Downloads
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ 5.7.0 downloaded files using pgpk, pgp, or gpg.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring Failover Transport in ActiveMQ-CPP
DESCRIPTION: Shows how to configure a failover transport with multiple broker URIs for enhanced reliability and async send enabled.

LANGUAGE: cpp
CODE:
cf = new ActiveMQConnectionFactory("failover://(tcp://localhost:61616,tcp://anotherhost:61616)?connection.useAsyncSend=true");

----------------------------------------

TITLE: Documenting Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and explains the special properties added to messages when they are copied within the ActiveMQ broker. These properties preserve important information from the original message, including the original address, queue, and message ID.

LANGUAGE: markdown
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Maven Command for Running Configured ActiveMQ
DESCRIPTION: Command to run the ActiveMQ broker using the configured plugin in POM.

LANGUAGE: bash
CODE:
mvn activemq:run

----------------------------------------

TITLE: Adding ActiveMQ JUnit Dependencies in Maven POM
DESCRIPTION: This XML snippet shows how to add the necessary dependencies for using the ActiveMQ JUnit Rule in a Maven project's pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.activemq.tooling</groupId>
    <artifactId>activemq-junit</artifactId>
    <version>${activemq-junit-version}</version>
    <scope>test</scope>
</dependency> 

<dependency>
    <groupId>org.apache.activemq</groupId>
    <artifactId>activemq-broker</artifactId>
    <version>${activemq-version}</version>
    <scope>test</scope>
</dependency>

----------------------------------------

TITLE: Defining JMS Selector with SQL 92 Syntax
DESCRIPTION: Example of a JMS selector using SQL 92 syntax to filter messages based on JMS headers and custom properties.

LANGUAGE: SQL
CODE:
JMSType = 'car' AND color = 'blue' AND weight > 2500

----------------------------------------

TITLE: Configuring SSL for ActiveMQ Classic Web Console
DESCRIPTION: XML configuration for enabling SSL connector in ActiveMQ Classic Web Console. This includes settings for both standard and secure connectors.

LANGUAGE: xml
CODE:
<property name="connectors">
    <list>
        <bean id="Connector" class="org.eclipse.jetty.server.nio.SelectChannelConnector">
            <property name="port" value="8161" />
        </bean>
        <bean id="SecureConnector" class="org.eclipse.jetty.server.ssl.SslSelectChannelConnector">
            <property name="port" value="8162" />
            <property name="keystore" value="file:${activemq.conf}/broker.ks" />
            <property name="password" value="password" />
        </bean>
    </list>
</property>

----------------------------------------

TITLE: Querying Broker Status
DESCRIPTION: Commands for listing and querying ActiveMQ broker status in Karaf.

LANGUAGE: bash
CODE:
karaf@root> activemq:list --jmxlocal
BrokerName = mybroker

LANGUAGE: bash
CODE:
karaf@root> activemq:query --jmxlocal

----------------------------------------

TITLE: Connecting to Zeroconf Broker
DESCRIPTION: Example of connecting to an ActiveMQ broker using Zeroconf discovery protocol. The URL format uses the zeroconf protocol identifier followed by the service name.

LANGUAGE: text
CODE:
zeroconf:_activemq_development.

----------------------------------------

TITLE: Configuring Custom Path Separator Plugin in ActiveMQ XML
DESCRIPTION: This XML snippet shows how to configure the destinationPathSeparatorPlugin in ActiveMQ. This plugin allows clients to use custom path separators in destination names, such as '/' instead of '.'. The plugin should be added as the last item in the plugins section for proper functionality with other plugins.

LANGUAGE: xml
CODE:
<plugins>
   .....
   <destinationPathSeparatorPlugin/>
</plugins>

----------------------------------------

TITLE: Initializing Java Object for ActiveMQ
DESCRIPTION: Example of Java object instantiation in ActiveMQ context.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Running ActiveMQ 4.x with Custom Config
DESCRIPTION: Command line syntax for running ActiveMQ 4.x with a custom XML configuration file

LANGUAGE: shell
CODE:
activemq xbean:file:myconfig.xml

----------------------------------------

TITLE: Checking ActiveMQ Port on Unix
DESCRIPTION: Command to check if ActiveMQ is listening on its default port (61616) on Unix systems using netstat.

LANGUAGE: bash
CODE:
netstat -nl|grep 61616

----------------------------------------

TITLE: Linking MDB to ActiveMQ ResourceAdapter in jboss.xml
DESCRIPTION: XML configuration in jboss.xml to link the TopicDurableMDB to the ActiveMQ resource adapter and assign it to the appropriate container configuration.

LANGUAGE: XML
CODE:
<message-driven>
   <ejb-name>TopicDurableMDB</ejb-name>
   <resource-adapter-name>activemq-ra-1.2-SNAPSHOT.rar</resource-adapter-name>
   <configuration-name>ActiveMQ Classic Message Driven Bean</configuration-name>
</message-driven>

----------------------------------------

TITLE: Configuring Local Maven Settings for Release and Staging Plugins
DESCRIPTION: XML configuration for ~/.m2/settings.xml to set up GPG signing information for release and staging plugins.

LANGUAGE: xml
CODE:
<settings>
    <profiles>
        <profile>
          <id>apache-release</id>
          <properties>
             <gpg.passphrase>secretPhrase</gpg.passphrase>
         </properties>
        </profile>
    </profiles>
 ...</settings>

----------------------------------------

TITLE: Starting ActiveMQ Classic Broker
DESCRIPTION: Commands to navigate to the binary directory and start the ActiveMQ Classic broker from the command line after installation. The broker can be configured using an XML configuration file as a parameter.

LANGUAGE: bash
CODE:
cd bin
activemq

----------------------------------------

TITLE: Starting ActiveMQ Classic Broker
DESCRIPTION: Commands to navigate to the binary directory and start the ActiveMQ Classic broker from the command line after installation. The broker can be configured using an XML configuration file as a parameter.

LANGUAGE: bash
CODE:
cd bin
activemq

----------------------------------------

TITLE: Configuring Topic Consumer with Parameters in ActiveMQ-CPP
DESCRIPTION: Example of creating a topic destination with specific consumer preferences like prefetch size and noLocal settings.

LANGUAGE: cpp
CODE:
d = session->createTopic("com.foo?consumer.prefetchSize=2000&consumer.noLocal=true");

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Simple Java code example demonstrating object instantiation.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring VirtualSelectorCacheBrokerPlugin in ActiveMQ XML
DESCRIPTION: This XML configuration snippet shows how to add the VirtualSelectorCacheBrokerPlugin to ActiveMQ. This plugin provides a cache that tracks selectors associated with destinations by consumers.

LANGUAGE: xml
CODE:
<plugins>
 <virtualSelectorCacheBrokerPlugin persistFile="<some path>/selectorcache.data" />
</plugins>

----------------------------------------

TITLE: Starting ActiveMQ Classic on Unix
DESCRIPTION: Commands to start ActiveMQ Classic on a Unix system. Includes options for running in the background and redirecting output to a log file.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
bin/activemq start

# OR

bin/activemq start > /tmp/smlog  2>&1 &

----------------------------------------

TITLE: Disabling Topic Advisories in Java ActiveMQConnectionFactory
DESCRIPTION: This Java code snippet demonstrates how to disable topic advisories when creating an ActiveMQConnectionFactory programmatically.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
factory.setWatchTopicAdvisories(false);

----------------------------------------

TITLE: Example ZeroConf Client URI for ActiveMQ Classic
DESCRIPTION: Demonstrates an example client URI for connecting to an ActiveMQ broker using the ZeroConf transport. The service name follows the required format with an underscore prefix and a dot suffix.

LANGUAGE: plaintext
CODE:
zeroconf:_activemq_development.

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.8.2 Tag from Git
DESCRIPTION: Git commands to clone the ActiveMQ-CPP repository and checkout the 3.8.2 release tag. This allows developers to access the exact source code for this specific release version.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/activemq-cpp-3.8.2

----------------------------------------

TITLE: Configuring ActiveMQ-CPP build on Unix
DESCRIPTION: Runs the configure script to set up the build environment for ActiveMQ-CPP on Unix-like systems. This detects available libraries and customizes the build process.

LANGUAGE: bash
CODE:
./configure

----------------------------------------

TITLE: Exporting Apollo Broker Data (Bash)
DESCRIPTION: Command to export broker instance data to an archive file. This step is required if data export/import is necessary for the migration.

LANGUAGE: bash
CODE:
${broker-path}/bin/apollo-broker store-export /tmp/broker-export.tgz

----------------------------------------

TITLE: Failover Configuration Basic Example
DESCRIPTION: Example URI showing basic failover configuration with multiple hosts and client ID setting.

LANGUAGE: plaintext
CODE:
failover:(amqp://host1:5672,amqp://host2:5672)?nms.clientId=foo&failover.maxReconnectAttempts=20

----------------------------------------

TITLE: Initializing Java Object in ActiveMQ
DESCRIPTION: Example of Java object instantiation in ActiveMQ context.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Setting Permissions for ActiveMQ Classic Start-up Script on Unix
DESCRIPTION: Commands to change permissions of the ActiveMQ Classic start-up script to make it executable on Unix systems.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]/bin
chmod 755 activemq

----------------------------------------

TITLE: Running NMS Unit Tests with NAnt
DESCRIPTION: Command to run unit tests for an NMS provider module using NAnt.

LANGUAGE: bash
CODE:
nant test

----------------------------------------

TITLE: Custom Virtual Host DTO Definition
DESCRIPTION: XML DTO class definition for configuring a custom virtual host implementation.

LANGUAGE: scala
CODE:
package example;
@XmlRootElement(name = "my_virtual_host")
@XmlAccessorType(XmlAccessType.FIELD)
class MyVirtualHostDTO extends VirtualHostDTO {
  @XmlAttribute(name="trace")
  public Boolean trace;
}

----------------------------------------

TITLE: Configuring Default IOException Handler in ActiveMQ XML
DESCRIPTION: Example configuration of DefaultIOExceptionHandler bean and broker setup in ActiveMQ. Shows how to set basic error handling properties through XML configuration.

LANGUAGE: xml
CODE:
<bean id="ioExceptionHandler" class="org.apache.activemq.util.DefaultIOExceptionHandler">
  <property name="ignoreAllErrors"><value>true</value></property>
</bean>

<broker xmlns="http://activemq.apache.org/schema/core" ioExceptionHandler="#ioExceptionHandler">
  ...
</broker>

----------------------------------------

TITLE: Verifying License Headers with Apache RAT
DESCRIPTION: Shell commands to check for proper license headers in project files using the Apache RAT tool.

LANGUAGE: shell
CODE:
mvn -e apache-rat:check
grep -e ' !?????' target/rat.txt -- will show any files without licenses

----------------------------------------

TITLE: Starting ActiveMQ 3.x with Config File
DESCRIPTION: Command for starting ActiveMQ 3.x broker with a configuration file.

LANGUAGE: bash
CODE:
activemq myConfig.xml
activemq

----------------------------------------

TITLE: Stopping and Restarting Blaze Channel in Java
DESCRIPTION: Illustrates how to stop a Blaze Channel, temporarily halting communication, and then restart it later. This demonstrates the 'stopped' state and transition back to 'started'.

LANGUAGE: java
CODE:
BlazeChannelFactory factory = new BlazeChannelFactory();
BlazeChannel channel = factory.createChannel();
channel.stop();
// do something else
...
//re-start
channel.start();

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration showing how to include ActiveMQ 5.14.2 as a dependency in a Maven project using the activemq-all artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.14.2</version>
</dependency>

----------------------------------------

TITLE: Running ActiveMQ-CPP unit tests
DESCRIPTION: Builds and runs the suite of unit tests for ActiveMQ-CPP. This verifies the library's functionality on the target platform and generates the integration tests binary.

LANGUAGE: bash
CODE:
make check

----------------------------------------

TITLE: Purging ActiveMQ Destinations
DESCRIPTION: Deletes messages from selected ActiveMQ destinations that match a given message selector.

LANGUAGE: Bash
CODE:
activemq-admin purge FOO.BAR

LANGUAGE: Bash
CODE:
activemq-admin purge --msgsel "JMSMessageID='*:10',JMSPriority>5" FOO.*

----------------------------------------

TITLE: Configuring Failover Transport for Client Connections
DESCRIPTION: Example URL configuration for clients to use the Failover Transport to connect to available brokers in a Shared File System Master Slave setup.

LANGUAGE: text
CODE:
failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)

----------------------------------------

TITLE: Custom Multicast Address Configuration
DESCRIPTION: Demonstrates how to specify a custom IP address and port for multicast transport.

LANGUAGE: plaintext
CODE:
multicast://224.1.2.3:6255

----------------------------------------

TITLE: ActiveMQ Web Application Configuration
DESCRIPTION: Core web.xml and applicationContext.xml files required to deploy ActiveMQ as a WebLogic web application

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" >
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
</web-app>

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>
    <bean id="brokerService" class="org.apache.activemq.xbean.BrokerFactoryBean">
        <property name="config" value="classpath:activemq-config.xml"/>
    </bean>
</beans>

----------------------------------------

TITLE: Configuring Self-Advertisement for ActiveMQ Broker
DESCRIPTION: This XML configuration enables the ActiveMQ broker to advertise itself on a multicast address, allowing other brokers to discover it.

LANGUAGE: xml
CODE:
<transportConnectors>
    <transportConnector name="default" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
</transportConnectors>

----------------------------------------

TITLE: Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: When messages are copied during broker operations, three special properties are used to preserve the original message information: _AMQ_ORIG_ADDRESS for the original address, _AMQ_ORIG_QUEUE for the original queue, and _AMQ_ORIG_MESSAGE_ID for the original message ID. These properties contain information from the most recent copying operation when multiple operations occur.

LANGUAGE: properties
CODE:
_AMQ_ORIG_ADDRESS
_AMQ_ORIG_QUEUE
_AMQ_ORIG_MESSAGE_ID

----------------------------------------

TITLE: Defining ActiveMQ Dependency in Maven POM
DESCRIPTION: XML snippet for including ActiveMQ 5.14.1 as a dependency in a Maven project's POM file. This dependency includes the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.14.1</version>
</dependency>

----------------------------------------

TITLE: Configuring Multi-Protocol Detection in Apollo XML
DESCRIPTION: XML configuration for setting up protocol detection between MQTT and OpenWire protocols.

LANGUAGE: xml
CODE:
<connector id="tcp" bind="tcp://0.0.0.0:61613">
  <detect protocols="mqtt openwire" />
</connector>

----------------------------------------

TITLE: Generate IntelliJ IDEA Project Files
DESCRIPTION: Maven command to generate IntelliJ IDEA IDE project files for ActiveMQ Classic development.

LANGUAGE: bash
CODE:
mvn idea:idea

----------------------------------------

TITLE: Building ActiveMQ Site from Release Tag
DESCRIPTION: Shell commands to build the ActiveMQ site from the release tag created during the release process.

LANGUAGE: shell
CODE:
cd target/checkout
mvn site -Prelease

----------------------------------------

TITLE: Running ActiveMQ Classic Broker with Custom XML Configuration
DESCRIPTION: This command runs an ActiveMQ Classic Broker using a specific XML configuration file.

LANGUAGE: bash
CODE:
activemq foo.xml

----------------------------------------

TITLE: Discovery Transport URI Example with Parameters
DESCRIPTION: Example URI showing how to configure the Discovery transport with specific reconnect delay parameters.

LANGUAGE: plaintext
CODE:
discovery:(multicast://default)?initialReconnectDelay=100

----------------------------------------

TITLE: Disabling IPv6 in Linux Configuration
DESCRIPTION: Linux configuration entry to disable IPv6 support at the system level by adding an alias directive to the modprobe configuration file.

LANGUAGE: bash
CODE:
alias net-pf-10 off # disable IPV6

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying PGP signatures of downloaded ActiveMQ distributions using different PGP tools (pgpk, pgp, or gpg).

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Complete Message Producer Example
DESCRIPTION: Full implementation of a message producer using the CMS API.

LANGUAGE: C++
CODE:
class SimpleProducer : public Runnable {
    // ... [Full implementation code shown in original text]
};

----------------------------------------

TITLE: Default Multicast Configuration
DESCRIPTION: Shows how to use the default multicast configuration with the default group name.

LANGUAGE: plaintext
CODE:
multicast://default

----------------------------------------

TITLE: Configuring Multicast Network Connector in ActiveMQ Broker XML
DESCRIPTION: This XML snippet shows how to configure a network connector in the ActiveMQ broker to use multicast for automatic discovery of other brokers.

LANGUAGE: xml
CODE:
<networkConnectors>
  <networkConnector name="default" uri="multicast://default"/>
</networkConnectors>

----------------------------------------

TITLE: Setting JMX Options for Tomcat
DESCRIPTION: Shell command for setting CATALINA_OPTS to enable JMX remote management in Tomcat, allowing connection via JConsole to view JMX MBeans.

LANGUAGE: shell
CODE:
CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=1099 \
    -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"

----------------------------------------

TITLE: Adding TransportListener to ActiveMQConnection in Java
DESCRIPTION: This snippet demonstrates how to add a TransportListener to an ActiveMQConnection to monitor the connection status with the broker. The TransportListener interface provides methods for connection establishment and disconnection notifications.

LANGUAGE: Java
CODE:
ActiveMQConnection connection = // ... obtain connection
connection.addTransportListener(new TransportListener() {
    // Implement TransportListener methods
});

----------------------------------------

TITLE: Running ActiveMQ Console in Foreground
DESCRIPTION: Basic command to start an ActiveMQ broker using default configuration in console mode.

LANGUAGE: bash
CODE:
bin/activemq console

----------------------------------------

TITLE: Configuring ActiveMQ Resource Adapter with Failover in Glassfish
DESCRIPTION: Command to configure the ActiveMQ resource adapter with failover support in Glassfish. It sets up multiple broker URLs, reconnection delay, and compression settings.

LANGUAGE: bash
CODE:
bin/asadmin create-resource-adapter-config --property ServerUrl='failover:(tcp://broker-c1.foobar.local:61616,tcp://broker-c2.foobar.local:61616,tcp://broker-c3.foobar.local:61616)?initialReconnectDelay=2000&jms.useCompression=true':UserName='admin':Password='admin' activemq-rar

----------------------------------------

TITLE: Configuring VM Protocol in ActiveMQ
DESCRIPTION: Demonstrates how to configure VM protocol for single JVM communication in ActiveMQ. Used primarily for unit testing to limit JMS communication within a single Java Virtual Machine.

LANGUAGE: plaintext
CODE:
vm://localhost

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ 5.11.3 as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.11.3</version>
</dependency>

----------------------------------------

TITLE: Defining Page Layout and Metadata in Markdown
DESCRIPTION: This snippet sets up the page layout, title, and type using YAML front matter in Markdown. It specifies a default layout, sets the page title to 'Community', applies a classic page title class, and defines the page type as classic.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Community
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Creating Topic with Consumer Configuration
DESCRIPTION: Example demonstrating how to create a Topic with specific consumer configuration parameters like prefetch size and noLocal settings.

LANGUAGE: csharp
CODE:
d = session.CreateTopic("com.foo?consumer.prefetchSize=2000&consumer.noLocal=true");

----------------------------------------

TITLE: XML Configuration Example for ActiveMQ
DESCRIPTION: Basic XML configuration snippet showing simple XML structure

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Building ActiveMQ Resource Adapter
DESCRIPTION: Commands to build the ActiveMQ Classic Resource Adapter which provides transaction management, connection pooling and security features when used with EJBs.

LANGUAGE: bash
CODE:
cd activemq-ra
maven rar:install-snapshot

----------------------------------------

TITLE: JDBC Persistence Configuration Without Journaling - AMQ 4.x
DESCRIPTION: XML configuration for enabling JDBC persistence without journaling in ActiveMQ 4.x

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <jdbcPersistenceAdapter dataSource="#my-ds"/> 
</persistenceAdapter>

----------------------------------------

TITLE: Cloning ActiveMQ CPP Repository from Github
DESCRIPTION: This command clones the ActiveMQ CPP repository from Github, allowing access to the latest source code. It's used for obtaining the bleeding edge version of ActiveMQ CPP.

LANGUAGE: bash
CODE:
git checkout https://github.com/apache/activemq-cpp.git

----------------------------------------

TITLE: Checking out Apache.NMS.Stomp v1.5.0 from SVN
DESCRIPTION: This command checks out the Apache.NMS.Stomp v1.5.0 tag from the Apache Subversion repository. It allows developers to access the exact source code used for this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.0/

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads (Bash)
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: AMQP Connection URI Format
DESCRIPTION: Basic connection URI format for establishing AMQP connections with optional SSL/TLS support.

LANGUAGE: plaintext
CODE:
amqp[s]://hostname:port[?option=value[&option2=value...]]

----------------------------------------

TITLE: Disabling Persistence Configuration
DESCRIPTION: XML configuration example showing how to disable persistence in ActiveMQ

LANGUAGE: xml
CODE:
<broker persistent="false"> </broker>

----------------------------------------

TITLE: Configuring SSL Protocol in ActiveMQ
DESCRIPTION: Shows how to configure SSL protocol for secure client-server communication in ActiveMQ.

LANGUAGE: plaintext
CODE:
ssl://somehost:port

----------------------------------------

TITLE: Retrieving User Principals
DESCRIPTION: Example of retrieving the principals associated with the authenticated user

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker/whoami.json

----------------------------------------

TITLE: Configuring Destination Dot File Plugin in ActiveMQ XML
DESCRIPTION: This snippet demonstrates the configuration of the destinationDotFilePlugin in ActiveMQ's XML configuration for generating DOT files to visualize destinations.

LANGUAGE: xml
CODE:
<destinationDotFilePlugin/>

----------------------------------------

TITLE: Retrieving Connection Status
DESCRIPTION: Example of retrieving status for a specific connection

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker/connections/108.json

----------------------------------------

TITLE: Running ActiveMQ with XML Configuration
DESCRIPTION: Command to start ActiveMQ using an XML configuration file for custom broker settings.

LANGUAGE: bash
CODE:
bin/activemq console xbean:foo.xml

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Defining Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and explains the special properties added to messages when they are copied within the ActiveMQ broker. These properties preserve important original message data such as the original address, queue, and message ID.

LANGUAGE: markdown
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Configuring XML Structure in ActiveMQ
DESCRIPTION: Basic XML configuration structure example for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring MQTT Wire Format Parameters
DESCRIPTION: Example of configuring MQTT wire format parameters, specifically setting the maximum frame size to prevent OOM DOS attacks.

LANGUAGE: xml
CODE:
<transportConnector name="mqtt" uri="mqtt://localhost:61612?wireFormat.maxFrameSize=100000"/>

----------------------------------------

TITLE: Configuring Replicated LevelDB Store in ActiveMQ
DESCRIPTION: XML configuration example showing how to set up a Replicated LevelDB Store as a persistence adapter in ActiveMQ, including replication settings, ZooKeeper connection details, and broker properties.

LANGUAGE: xml
CODE:
<broker brokerName="broker" ... >
  ...
  <persistenceAdapter>
    <replicatedLevelDB
      directory="activemq-data"
      replicas="3"
      bind="tcp://0.0.0.0:0"
      zkAddress="zoo1.example.org:2181,zoo2.example.org:2181,zoo3.example.org:2181"
      zkPassword="password"
      zkPath="/activemq/leveldb-stores"
      hostname="broker1.example.org"
      />
  </persistenceAdapter>
  ...
</broker>

----------------------------------------

TITLE: Defining Broker URI Syntax in ActiveMQ Classic
DESCRIPTION: This snippet shows the basic syntax for constructing a Broker URI in ActiveMQ Classic. It includes placeholders for transport URI, network URI, broker name, and broker options.

LANGUAGE: plaintext
CODE:
broker:(transportURI,network:networkURI)/brokerName?brokerOptions

----------------------------------------

TITLE: Checking out Apache.NMS.Stomp v1.3.0 from SVN
DESCRIPTION: SVN command to checkout the tagged 1.3.0 release version of Apache.NMS.Stomp from the Apache repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.3.0/

----------------------------------------

TITLE: Checking Out ActiveMQ 5.7.0 Source from SVN
DESCRIPTION: SVN command to check out the source code for ActiveMQ 5.7.0 from the Apache repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.7.0

----------------------------------------

TITLE: Looking Up Dynamic Destinations in JNDI with Java
DESCRIPTION: This code demonstrates how to look up dynamic destinations in JNDI when using ActiveMQ for JMS testing.

LANGUAGE: java
CODE:
context.lookup("dynamicQueues/FOO.BAR");

----------------------------------------

TITLE: Basic Failover Transport URI Syntax
DESCRIPTION: Shows the basic syntax patterns for configuring failover transport URIs with optional transport and nested URI options.

LANGUAGE: text
CODE:
failover:(uri1,...,uriN)?transportOptions&nestedURIOptions

----------------------------------------

TITLE: Retrieving Connector Status
DESCRIPTION: Example of retrieving status for a specific connector

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker/connectors/tcp.json

----------------------------------------

TITLE: Basic KahaDB Persistence Configuration in ActiveMQ
DESCRIPTION: Basic XML configuration for setting up KahaDB as the broker's persistence adapter with directory and journal file size settings.

LANGUAGE: xml
CODE:
<broker brokerName="broker">
    <persistenceAdapter>
      <kahaDB directory="activemq-data" journalMaxFileLength="32mb"/>
    </persistenceAdapter>
</broker>

----------------------------------------

TITLE: Basic KahaDB Persistence Configuration in ActiveMQ
DESCRIPTION: Basic XML configuration for setting up KahaDB as the broker's persistence adapter with directory and journal file size settings.

LANGUAGE: xml
CODE:
<broker brokerName="broker">
    <persistenceAdapter>
      <kahaDB directory="activemq-data" journalMaxFileLength="32mb"/>
    </persistenceAdapter>
</broker>

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.ActiveMQ v1.3.0
DESCRIPTION: Command to check out the version 1.3.0 tag from the Apache ActiveMQ .NET SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.ActiveMQ/tags/1.3.0/

----------------------------------------

TITLE: Configuring Web Administration in Apollo
DESCRIPTION: Example of configuring the web-based administration interface in Apollo.

LANGUAGE: XML
CODE:
<broker xmlns="http://activemq.apache.org/schema/activemq/apollo">
  ...
  <web_admin bind="http://0.0.0.0:61680"/>
  <web_admin bind="https://0.0.0.0:61681"/>
  ...
</broker>

----------------------------------------

TITLE: Allowing All Packages for ObjectMessage Deserialization in ActiveMQ Classic
DESCRIPTION: This configuration option allows all packages to be trusted for ObjectMessage deserialization, which can be useful for testing but is not recommended for production use due to security risks.

LANGUAGE: bash
CODE:
-Dorg.apache.activemq.SERIALIZABLE_PACKAGES=*

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.5.0
DESCRIPTION: Maven POM dependency configuration to include ActiveMQ Core 5.5.0 in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.5.0</version>
</dependency>

----------------------------------------

TITLE: Identifying Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and explains the special properties added to copied messages in ActiveMQ. These properties preserve important information from the original message, including the original address, queue, and message ID.

LANGUAGE: plaintext
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.9.1 from Git
DESCRIPTION: This snippet shows how to clone the ActiveMQ-CPP repository and checkout the 3.9.1 release tag using Git. It's useful for developers who want to work with the source code of this specific version.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.1

----------------------------------------

TITLE: XML Configuration Example for ActiveMQ
DESCRIPTION: Basic XML configuration structure example for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring Spring Bean for Property Placeholder
DESCRIPTION: Spring XML configuration for loading the bootstrap.properties file. This bean allows the use of property placeholders in the Spring configuration.

LANGUAGE: xml
CODE:
<bean id="placeholderConfig" 
      class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location"><value>classpath:/bootstrap.properties</value></property>
</bean>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Broker in broker-config.xml
DESCRIPTION: XML configuration for the ActiveMQ Classic broker, including persistence adapter and transport connectors

LANGUAGE: XML
CODE:
<beans xmlns="http://activemq.org/config/1.0">

  <broker useJmx="true" brokerName="bruce.broker1">
  ...
    <persistenceAdapter>
      <journaledJDBC journalLogFiles="5" dataDirectory="${jboss.server.data.dir}/activemq"/>
    </persistenceAdapter>

    <transportConnectors>
      <transportConnector name="bruce.broker1" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
    </transportConnectors>

    <networkConnectors>
      <networkConnector uri="multicast://default"/>
    </networkConnectors>

  </broker>

</beans>

----------------------------------------

TITLE: Running Producer and Consumer Examples with Ant
DESCRIPTION: Commands to run producer and consumer examples using Ant in older versions of ActiveMQ Classic.

LANGUAGE: bash
CODE:
ant producer
ant consumer

----------------------------------------

TITLE: Markdown Front Matter Configuration for ActiveMQ Report Page
DESCRIPTION: YAML front matter configuration block defining the page layout, title and type settings for the ActiveMQ board report page.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Apache ActiveMQ Board Report - April 2008 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.1.0 from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.1.0 of ActiveMQ-CPP from the Apache repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.0/

----------------------------------------

TITLE: Configuring NoSubscriptionRecoveryPolicy in XML
DESCRIPTION: Disables the message recovery functionality completely.

LANGUAGE: xml
CODE:
<noSubscriptionRecoveryPolicy/>

----------------------------------------

TITLE: Excluding Virtual Topic Consumer Queues in Network Connector Configuration
DESCRIPTION: This XML configuration example shows how to exclude virtual topic consumer queues from a network connector configuration to avoid duplicate messages in a network of brokers.

LANGUAGE: xml
CODE:
<networkConnectors> <networkConnector uri="static://([tcp://localhost:61617](tcp://localhost:61617))">
 <excludedDestinations> 
 <queue physicalName="Consumer.*.VirtualTopic.>"/> 
 </excludedDestinations> 
</networkConnector> </networkConnectors>

----------------------------------------

TITLE: Configuring Queue in JBoss Data Source
DESCRIPTION: JBoss-specific configuration for exposing the ActiveMQ Queue via JNDI.

LANGUAGE: xml
CODE:
<mbean code="org.jboss.resource.deployment.AdminObject" name="activemq.queue:name=outboundQueue">
   <attribute name="JNDIName">activemq/queue/outbound</attribute>
   <depends optional-attribute-name="RARName">jboss.jca:service=RARDeployment,name='activemq-ra-1.2-SNAPSHOT.rar'</depends>
   <attribute name="Type">javax.jms.Queue</attribute>
   <attribute name="Properties">
      PhysicalName=queue.outbound
   </attribute>
</mbean>

----------------------------------------

TITLE: Including Verification Instructions in Markdown
DESCRIPTION: This snippet includes a separate Markdown file containing instructions for verifying the integrity of downloaded files.

LANGUAGE: markdown
CODE:
--------------------------------------
#### Verify the Integrity of Downloads

{% include verify_download.md %}

----------------------------------------

TITLE: Starting Blaze Channel in Java
DESCRIPTION: Shows how to create and start a Blaze Channel, which implicitly initializes it and begins communication with peers. This puts the channel in the 'started' state.

LANGUAGE: java
CODE:
BlazeChannelFactory factory = new BlazeChannelFactory();
BlazeChannel channel = factory.createChannel();
channel.start();

----------------------------------------

TITLE: Generate Eclipse Project Files
DESCRIPTION: Maven command to generate Eclipse IDE project files for ActiveMQ Classic development.

LANGUAGE: bash
CODE:
mvn eclipse:eclipse

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: This code snippet demonstrates how to verify the integrity of downloaded ActiveMQ files using GPG and PGP signatures. It includes steps to import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring ActiveMQ XML Settings
DESCRIPTION: XML configuration snippet for ActiveMQ. This example shows a basic XML structure that could be used to configure various ActiveMQ settings.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: XML Structure Example
DESCRIPTION: Basic XML element structure demonstration

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Querying ActiveMQ Classic Broker Components
DESCRIPTION: Shows how to display selected broker component's attributes and statistics using the query command.

LANGUAGE: bash
CODE:
bin/activemq query # use jmx access data from configuration
bin/activemq query --jmxurl service:jmx:rmi:///jndi/rmi://127.0.0.1:11098/jmxrmi --jmxuser controlRole --jmxpassword abcd1234

----------------------------------------

TITLE: Defining ActiveMQ Classic Documentation Structure in Markdown
DESCRIPTION: This markdown snippet defines the structure and layout of the ActiveMQ Classic documentation page. It includes YAML front matter for page metadata and a hierarchical list of documentation sections with hyperlinks.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: ActiveMQ Classic Documentation
title-class: page-title-classic
type: classic
---

*   [Overview](overview)
    *   [New Features](new-features)
    *   [Getting Started](getting-started)
    *   [FAQ](faq)
    *   [Articles](articles)
    *   [Books](books)
    *   [License](http://www.apache.org/licenses/)
    *   [Latest Javadoc](maven/apidocs/)
*   [Community](community)
*   [Features](features)
*   [Connectivity](connectivity)
*   [Using ActiveMQ Classic](using-activemq-classic-5)
*   [Tools](tools)
*   [Support]({{project.base}}/support)
*   [Developers](developers)
*   Tests
    *   [Maven2 Performance Plugin](activemq-classic-performance-module-users-manual)
    *   [Benchmark Tests](benchmark-tests)
    *   [JMeter System Tests](jmeter-system-tests)
    *   [JMeter Performance Tests](jmeter-performance-tests)
    *   [Integration Tests](integration-tests)
*   Project Reports
    *   [JUnit Reports](junit-reports)
    *   [Source XRef](source-xref)
    *   [Test Source XRef](test-source-xref)
    *   [Xml Reference](xml-reference)

----------------------------------------

TITLE: Configuring Priority Messages in ActiveMQ XML
DESCRIPTION: XML configuration to enable prioritized messages for all queues using destination policies. This is the basic configuration required to enable priority queue support in ActiveMQ 5.4+.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue=">" prioritizedMessages="true"/>
      ...

----------------------------------------

TITLE: Configuring AMQP Producer Credit
DESCRIPTION: XML configuration for AMQP transport with custom producer credit settings for handling incoming messages.

LANGUAGE: xml
CODE:
<transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;transport.producerCredit=10000"/>

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.1.0
DESCRIPTION: XML configuration for including ActiveMQ Core 5.1.0 as a dependency in Maven projects.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.1.0</version>
</dependency>

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.1.1 from SVN
DESCRIPTION: This command allows users to check out the specific tag for ActiveMQ-CPP version 3.1.1 from the Apache Subversion repository. It's useful for developers who want to access the exact source code of this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.1/

----------------------------------------

TITLE: ActiveMQ Connection Pool Log Example
DESCRIPTION: Sample log output showing the connection lifecycle messages that occur when connections are being pooled. The repeated add/remove client messages with reused client IDs indicate proper connection pooling behavior.

LANGUAGE: log
CODE:
16:43:07 INFO  Adding new client: ID:localhost-58375-1120682586690-1:0 on transport: TcpTransportChannel: Socket[addr=/127.0.0.1,port=58376,localport=61616]
16:43:08 INFO  Removing client: ID:localhost-58375-1120682586690-1:0 on transport: TcpTransportChannel: Socket[addr=/127.0.0.1,port=58376,localport=61616]

----------------------------------------

TITLE: Receiving BlobMessages in ActiveMQ
DESCRIPTION: This snippet shows how to implement a MessageListener to receive and process BlobMessages, demonstrating how to access the input stream of the received blob.

LANGUAGE: java
CODE:
public class MyListener implements MessageListener {
  public void onMessage(Message message) {
    if (message instanceof BlobMessage) {
      BlobMessage blobMessage = (BlobMessage) message;
      InputStream in = blobMessage.getInputStream();

      // process the stream...
    }
  }
}

----------------------------------------

TITLE: Configuring Resource References in jboss.xml
DESCRIPTION: JBoss-specific deployment descriptor linking EJB resources to JNDI names.

LANGUAGE: xml
CODE:
<enterprise-beans>
   <session>
      <ejb-name>SenderEJB</ejb-name>
      <resource-ref>
         <res-ref-name>jms/MyQueueConnectionFactory</res-ref-name>
         <resource-name>queuefactoryref</resource-name>
      </resource-ref>
   </session>
   ...
</enterprise-beans>

----------------------------------------

TITLE: Configuring VM Transport with Broker Options in ActiveMQ Classic
DESCRIPTION: Shows an example of configuring a VM transport connection with specific options for marshalling and broker persistence.

LANGUAGE: plaintext
CODE:
vm://broker1?marshal=false&broker.persistent=false

----------------------------------------

TITLE: Configuring Jekyll Layout for ActiveMQ Artemis Migration Guide
DESCRIPTION: YAML front matter configuration for a Jekyll page that embeds migration documentation in an iframe. Specifies the layout type, page title, iframe source, and custom title styling class.

LANGUAGE: yaml
CODE:
---
layout: iframe
title: Apache ActiveMQ Artemis Migration Guide
iframe: migration-documentation
title-class: page-title-artemis
---

----------------------------------------

TITLE: Running ActiveMQ Performance Tests with Maven Commands
DESCRIPTION: This snippet demonstrates how to run ActiveMQ performance tests using Maven commands. It includes starting a broker, a producer, and a consumer with specific parameters.

LANGUAGE: shell
CODE:
mvn activemq:broker
mvn activemq:perf-producer -Dmessage-count=5000 -Dqueue=true -Ddestination=org.foo.bar -Durl=tcp://$hostA:61616
mvn activemq:perf-consumer -Dmessage-count=5000 -Dqueue=true -Ddestination=org.foo.bar -Durl=tcp://$hostA:61616

----------------------------------------

TITLE: Sending BlobMessages with Local File in ActiveMQ
DESCRIPTION: This code shows how to create and send a BlobMessage using a local file as the source.

LANGUAGE: java
CODE:
BlobMessage message = session.createBlobMessage(new File("/foo/bar");
producer.send(message);

----------------------------------------

TITLE: Verifying PGP Signatures in Bash
DESCRIPTION: Commands for verifying the PGP signatures of downloaded ActiveMQ distributions using different PGP tools (pgpk, pgp, or gpg).

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Initializing ActiveMQ Connection in Java
DESCRIPTION: Java code snippet demonstrating how to create an instance of a class, possibly related to establishing a connection with ActiveMQ. This is a basic example and may need to be expanded for actual use.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Checking out ActiveMQ CMS 2.2.1 from SVN
DESCRIPTION: This command checks out the source code for ActiveMQ CMS 2.2.1 from the Apache Subversion repository. It retrieves the specific tagged version of the project.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.1/

----------------------------------------

TITLE: Implementing Custom Virtual Host in Scala
DESCRIPTION: Example of creating a custom virtual host implementation by extending the base VirtualHost class.

LANGUAGE: scala
CODE:
package example;
class MyVirtualHost(broker: Broker, id:String) extends VirtualHost(broker, id) {
  // ... todo: override
}

----------------------------------------

TITLE: Encrypting Text in ActiveMQ Classic
DESCRIPTION: Demonstrates how to encrypt given text using the ActiveMQ Classic encrypt command.

LANGUAGE: bash
CODE:
bin/activemq encrypt --password TESTPASSWORD --input FOOBAR

----------------------------------------

TITLE: Configuring Async Send via Connection URI in C#
DESCRIPTION: Demonstrates how to enable asynchronous message sending using the Connection Configuration URI. This approach allows setting the async send parameter directly in the connection string.

LANGUAGE: csharp
CODE:
var cf = new ConnectionFactory("tcp://locahost:61616?nms.AsyncSend=true");

----------------------------------------

TITLE: Customizing SQL DDL in ActiveMQ XML Configuration
DESCRIPTION: This example demonstrates how to configure SQL data types and column sizes using the statements element in the ActiveMQ XML configuration.

LANGUAGE: xml
CODE:
<broker useJmx="false">

  <persistenceAdapter>
    <journaledJDBC useJournal="false">
      <statements>
        <statements stringIdDataType ="VARCHAR(128)"/>
      </statements>
    </journaledJDBC>
  </persistenceAdapter>

</broker>

----------------------------------------

TITLE: Release Information Template in Markdown
DESCRIPTION: Markdown template used to display release information including version number, date, documentation links, and download options with checksums and signatures

LANGUAGE: markdown
CODE:
#### ActiveMQ Artemis ${version} (${date})
[Release Notes](release-notes-${version}) | [Documentation](../documentation/${version}): [HTML](../documentation/${version}) / [PDF](../documentation/${version}/book.pdf) | Java compatibility: **${java_version}**

tar.gz:|[apache-artemis-${version}-bin.tar.gz](${download_url})|[SHA512](${sha_url})|[GPG Signature](${sig_url})
ZIP:|[apache-artemis-${version}-bin.zip](${download_url})|[SHA512](${sha_url})|[GPG Signature](${sig_url})
Source Distribution:|[apache-artemis-${version}-source-release.tar.gz](${download_url})|[SHA512](${sha_url})|[GPG Signature](${sig_url})|

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.8</version>
</dependency>

----------------------------------------

TITLE: Checking ActiveMQ Classic Port on Windows
DESCRIPTION: Command to check if ActiveMQ Classic is listening on its default port (61616) on a Windows system.

LANGUAGE: shell
CODE:
netstat -an|find "61616"

----------------------------------------

TITLE: Jasypt Encryption Configuration with Environment Variable
DESCRIPTION: XML configuration for setting up Jasypt encryption using an environment variable for the encryption password.

LANGUAGE: xml
CODE:
<bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
  <property name="algorithm" value="PBEWithMD5AndDES" />
  <property name="passwordEnvName" value="ACTIVEMQ\_ENCRYPTION\_PASSWORD" />
</bean>

<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
  <property name="config" ref="environmentVariablesConfiguration" />
</bean> 
    
<bean id="propertyConfigurer" class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer"> 
  <constructor-arg ref="configurationEncryptor" /> 
  <property name="location" value="file:${activemq.base}/conf/credentials-enc.properties"/> 
</bean>

----------------------------------------

TITLE: Checking Java Version
DESCRIPTION: Command to verify the installed Java version meets the 1.5+ requirement

LANGUAGE: bash
CODE:
$ java -version
java version "1.5.0_06"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_06-112)
Java HotSpot(TM) Client VM (build 1.5.0_06-64, mixed mode, sharing)

----------------------------------------

TITLE: Java Initialization Example
DESCRIPTION: Simple Java instantiation example showing object creation

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring ActiveMQ-CPP build with custom OpenSSL location
DESCRIPTION: This command configures the ActiveMQ-CPP build process to use a custom OpenSSL installation location. It's useful when OpenSSL is installed in a non-standard directory and the automatic detection fails.

LANGUAGE: bash
CODE:
./configure --with-openssl=/opt/special/openssl

----------------------------------------

TITLE: Stopping ActiveMQ Broker
DESCRIPTION: Stops a running ActiveMQ broker using the activemq-admin command. Requires JMX to be enabled.

LANGUAGE: Bash
CODE:
activemq-admin stop

LANGUAGE: Bash
CODE:
activemq-admin stop --jmxurl service:jmx:rmi:///jndi/rmi://remotehost:1099/jmxrmi --all

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.38.0 Release Information in YAML
DESCRIPTION: This YAML snippet defines key information for the ActiveMQ Artemis 2.38.0 release. It specifies the version number, release date, title, short description of features, documentation version, and required Java version.

LANGUAGE: yaml
CODE:
version: 2.38.0
release_date: 2024-10-25
title: ActiveMQ Artemis 2.38.0
shortDescription: Support for WebSocket compression, management API improvements, bug fixes, dependency upgrades, and more.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.38.0
java_version: 11+

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a class, possibly related to ActiveMQ initialization or usage in a Java application.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Retrieving Broker Status
DESCRIPTION: Example of retrieving general broker status information

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker.json

----------------------------------------

TITLE: Setting Up Multiple ActiveMQ Classic Instances
DESCRIPTION: Shows how to set up and configure multiple ActiveMQ Classic instances on the same operating system.

LANGUAGE: bash
CODE:
mkdir /srv/activemq/instance1
cp -av /srv/activemq/current/conf/ /srv/activemq/instance1/
mkdir /srv/activemq/instance1/{data,tmp}
ln -snf  /srv/activemq/current/bin/activemq /etc/init.d/activemq-instance-test1
cp /srv/activemq/install/bin/env /etc/default/activemq-instance-instance-test1

----------------------------------------

TITLE: Configuring Composite Queues in ActiveMQ XML
DESCRIPTION: XML configuration for setting up composite queues that forward messages to multiple destinations. Shows forwarding to both queues and topics.

LANGUAGE: XML
CODE:
<destinationInterceptors>
  <virtualDestinationInterceptor>
    <virtualDestinations>
      <compositeQueue name="MY.QUEUE">
        <forwardTo>
          <queue physicalName="FOO" />
          <topic physicalName="BAR" />
        </forwardTo>
      </compositeQueue>
    </virtualDestinations>
  </virtualDestinationInterceptor>
</destinationInterceptors>

----------------------------------------

TITLE: Configuring Slave Broker in ActiveMQ XML
DESCRIPTION: XML configuration example for setting up a slave broker with journaled JDBC persistence and transport connectors.

LANGUAGE: xml
CODE:
<broker masterConnectorURI="tcp://masterhost:62001" shutdownOnMasterFailure="false">
  <persistenceAdapter>
      <journaledJDBC journalLogFiles="5" dataDirectory="${activemq.base}/data/broker2" />
    </persistenceAdapter>

    <transportConnectors>
	  <transportConnector uri="tcp://slavehost:61616"/>
   </transportConnectors>
</broker>

----------------------------------------

TITLE: Liquid Template for Release Processing
DESCRIPTION: Template logic that processes and displays past releases of ActiveMQ Artemis Console. It filters current releases and generates a list of historical versions.

LANGUAGE: liquid
CODE:
{% assign reversed_releases = site["artemis_console_releases"] | reverse %}
{% assign current_releases = "" | split: ',' %}
{% assign no_past_releases = true %}

{% for current_release_prefix in site.data.current_releases["artemis_console"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
            {% assign current_releases = current_releases | push: release.version %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.26.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.26.0 release. It includes version information, release date, title, a short description of improvements, documentation version, and the required Java version.

LANGUAGE: yaml
CODE:
version: 2.26.0
release_date: 2022-09-28
title: ActiveMQ Artemis 2.26.0
shortDescription: Bug fixes and improvements. Paging improved on Horizontal Scale.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.26.0
java_version: 11+

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the integrity of downloaded ActiveMQ files using GPG and the provided KEYS file.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring Sun JNDI Initial Context Factory
DESCRIPTION: This snippet shows how to set the initial context factory for Sun JNDI in a jndi.properties file. It specifies the use of RefFSContextFactory for file system-based JNDI lookups.

LANGUAGE: properties
CODE:
java.naming.factory.initial = com.sun.jndi.fscontext.RefFSContextFactory

----------------------------------------

TITLE: Configuring JMX Connector in ActiveMQ Classic Startup Script (Windows)
DESCRIPTION: Windows-specific configuration for enabling the Java 1.5+ JMX connector in the ActiveMQ Classic startup script.

LANGUAGE: properties
CODE:
ACTIVEMQ_SUNJMX_START=-Dcom.sun.management.jmxremote.port=1616 -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.password.file=%ACTIVEMQ_BASE%/conf/jmx.password \
  -Dcom.sun.management.jmxremote.access.file=%ACTIVEMQ_BASE%/conf/jmx.access

----------------------------------------

TITLE: Configuring MQTT Settings in Apollo XML
DESCRIPTION: XML configuration for tuning MQTT-specific settings like message length limits in Apollo broker.

LANGUAGE: xml
CODE:
<connector id="tcp" bind="tcp://0.0.0.0:61613">
  <mqtt max_message_length="1000" />
</connector>

----------------------------------------

TITLE: Configuring Trusted Packages for ObjectMessage in ActiveMQ Classic
DESCRIPTION: This snippet shows how to configure trusted packages for ObjectMessage serialization using the org.apache.activemq.SERIALIZABLE_PACKAGES system property. It allows specifying which packages are safe to deserialize.

LANGUAGE: bash
CODE:
-Dorg.apache.activemq.SERIALIZABLE_PACKAGES=java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper,com.mycompany.myapp

----------------------------------------

TITLE: Spring XML Configuration with ActiveMQ 5.0 Namespace
DESCRIPTION: Example of configuring Spring beans with ActiveMQ 5.0 using the legacy activemq.org/config/1.0 namespace.

LANGUAGE: xml
CODE:
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:amq="http://activemq.org/config/1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://activemq.org/config/1.0
        http://activemq.apache.org/schema/core/activemq-core-5.0.0.xsd
    ">
</beans>

----------------------------------------

TITLE: Markdown Frontmatter Configuration
DESCRIPTION: YAML frontmatter configuration for the page layout and metadata, defining the page title, layout template, and styling classes.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Release Info 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Sending Custom Text Message with ActiveMQ Producer
DESCRIPTION: Command to send a custom text message using the ActiveMQ producer tool.

LANGUAGE: bash
CODE:
bin/activemq producer --message "My message" --messageCount 1

----------------------------------------

TITLE: SVN Checkout for Apache.NMS.ActiveMQ v1.6.5
DESCRIPTION: Command to checkout the SVN tag for Apache.NMS.ActiveMQ version 1.6.5 from the Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.5/

----------------------------------------

TITLE: Initializing ActiveMQ Java Object
DESCRIPTION: This Java code snippet shows the creation of a new object, likely related to ActiveMQ functionality. It demonstrates object instantiation syntax in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.15.1
DESCRIPTION: Maven POM configuration showing how to include ActiveMQ 5.15.1 as a dependency in a Maven project. This uses the activemq-all artifact which is an uber jar containing all ActiveMQ components.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.1</version>
</dependency>

----------------------------------------

TITLE: Retrieving Topic Status
DESCRIPTION: Example of retrieving status for a specific topic on a virtual host

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker/virtual-hosts/default/topics/example-2.json?producers=true&consumers=true

----------------------------------------

TITLE: EJB Deployment Descriptor Configuration
DESCRIPTION: XML configuration for sun-ejb-jar.xml defining MDB connection properties and resource adapter settings.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sun-ejb-jar
  PUBLIC "-//Sun Microsystems, Inc.//DTD Application Server 8.1 EJB 2.1//EN"
    "http://www.sun.com/software/appserver/dtds/sun-ejb-jar\_2\_1-1.dtd">
<sun-ejb-jar>
  <enterprise-beans>
    <ejb>
      <ejb-name>TestingMessageDrivenBean</ejb-name>
      <mdb-connection-factory>
        <jndi-name>jms/SimpleQueueConnectionFactory</jndi-name>
      </mdb-connection-factory>
      <mdb-resource-adapter>
        <resource-adapter-mid>myapp#genericra</resource-adapter-mid>
        <activation-config>
          <activation-config-property>
            <activation-config-property-name>DestinationType</activation-config-property-name>
            <activation-config-property-value>javax.jms.Queue</activation-config-property-value>
          </activation-config-property>
          <activation-config-property>
            <activation-config-property-name>DestinationProperties</activation-config-property-name>
            <activation-config-property-value>PhysicalName=Foo.Bar</activation-config-property-value>
          </activation-config-property>
        </activation-config>
      </mdb-resource-adapter>
    </ejb>
  </enterprise-beans>
</sun-ejb-jar>

----------------------------------------

TITLE: TCP Transport Configuration Example
DESCRIPTION: Example URI demonstrating TCP transport configuration options for socket behavior.

LANGUAGE: plaintext
CODE:
amqp://localhost:5672?nms.clientId=foo&transport.receiveBufferSize=30000

----------------------------------------

TITLE: Connecting to ActiveMQ using JXTA Protocol in Java
DESCRIPTION: Demonstrates how to connect to ActiveMQ using the JXTA protocol. This is used for creating peer-based JMS networks, especially useful for negotiating NAT and firewalls.

LANGUAGE: java
CODE:
jxta://hostname:port

----------------------------------------

TITLE: Custom Path Separator Configuration in ActiveMQ
DESCRIPTION: XML configuration for enabling custom path separators in destination names. Allows using alternative separators like '/' instead of the default '.'.

LANGUAGE: xml
CODE:
    <plugins>
       .....
       <destinationPathSeparatorPlugin/>
    </plugins>

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.5.3 from SVN
DESCRIPTION: SVN command to checkout the tagged version 1.5.3 of Apache.NMS.ActiveMQ from the Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.3/

----------------------------------------

TITLE: Verifying PGP Signatures using pgpk in Bash
DESCRIPTION: Commands to verify the PGP signatures of downloaded ActiveMQ files using pgpk.

LANGUAGE: Bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Running ActiveMQ Broker with File Path Configuration
DESCRIPTION: Runs an ActiveMQ broker using a configuration file specified by a relative or absolute file path.

LANGUAGE: Bash
CODE:
activemq xbean:file:./conf/broker1.xml

LANGUAGE: Bash
CODE:
activemq xbean:file:C:/ActiveMQ/conf/broker2.xml

----------------------------------------

TITLE: Defining Maven Dependency for ActiveMQ 5.14.3
DESCRIPTION: XML snippet for including ActiveMQ 5.14.3 as a dependency in a Maven POM file. This dependency uses the 'activemq-all' artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.14.3</version>
</dependency>

----------------------------------------

TITLE: JMX MBean ObjectName Mapping Changes
DESCRIPTION: Updated mapping structure for JMX MBean ObjectNames showing the transition from old naming convention to new naming that includes type=Broker attribute for all beans.

LANGUAGE: text
CODE:
Broker: Type=Broker -> type=Broker
Destination: Type=Queue|Topic,Destination=<destination identifier> -> type=Broker,destinationType=Queue|Topic,destinationName=<destination identifier>
Connector: Type=Connector -> type=Broker,connector=clientConnectors
NetworkConnector: Type=NetworkConnector -> type=Broker,connector=networkConnectors
Connection: Type=Connection -> type=Broker,connector=*,connectionViewType=remoteAddress|clientId

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using GPG. This process involves importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Connecting to ActiveMQ using VM Protocol in Java
DESCRIPTION: Demonstrates how to connect to ActiveMQ using the VM protocol for in-JVM communication. This is useful for unit testing or when segmenting different JMS networks within the same JVM.

LANGUAGE: java
CODE:
vm://localhost

LANGUAGE: java
CODE:
vm://localhost/foo

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.9.4 from Git
DESCRIPTION: This snippet shows how to clone the ActiveMQ-CPP repository and checkout the 3.9.4 release tag using Git. It requires Git to be installed on the system.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.4

----------------------------------------

TITLE: Java Implementation Example for ActiveMQ
DESCRIPTION: Simple Java code showing object instantiation

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Creating Topic with Consumer Configuration
DESCRIPTION: Example of creating a topic with specific consumer preferences like prefetch size and noLocal settings.

LANGUAGE: csharp
CODE:
d = session.CreateTopic("com.foo?consumer.prefetchSize=2000&consumer.noLocal=true");

----------------------------------------

TITLE: Queue Default Configuration XML
DESCRIPTION: Web.xml configuration to set queue as the default destination type instead of topic

LANGUAGE: xml
CODE:
<servlet>
  <servlet-name>MessageServlet</servlet-name>  
  <servlet-class>org.apache.activemq.web.MessageServlet</servlet-class>
  <load-on-startup>1</load-on-startup>
  <init-param>
     <param-name>topic</param-name>
     <param-value>false</param-value>
  </init-param>
</servlet>

----------------------------------------

TITLE: Running ActiveMQ-CPP integration tests
DESCRIPTION: Executes the integration tests for ActiveMQ-CPP against a real AMQ broker. These tests validate the distribution against an actual broker instance.

LANGUAGE: bash
CODE:
cd src/test-integration
./activemq-test-integration

----------------------------------------

TITLE: Creating Resource Adapter Config for ActiveMQ
DESCRIPTION: Command to create resource adapter configuration with ActiveMQ-specific properties using SJSAS asadmin tool.

LANGUAGE: bash
CODE:
asadmin create-resource-adapter-config --property SupportsXA=false:RMPolicy=OnePerPhysicalConnection:ProviderIntegrationMode=javabean:ConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory:QueueConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory:TopicConnectionFactoryClassName=org.apache.activemq.ActiveMQConnectionFactory:XAConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory:XAQueueConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory:XATopicConnectionFactoryClassName=org.apache.activemq.ActiveMQXAConnectionFactory:UnifiedDestinationClassName=org.apache.activemq.command.ActiveMQDestination:QueueClassName=org.apache.activemq.command.ActiveMQQueue:TopicClassName=org.apache.activemq.command.ActiveMQTopic:ConnectionFactoryProperties=brokerURL\\=tcp\\://127.0.0.1\\:61616:LogLevel=FINE myapp#genericra

----------------------------------------

TITLE: Configuring SSL Context for Secure WebSockets in ActiveMQ XML
DESCRIPTION: This XML snippet shows how to configure the SSL context for secure WebSockets in ActiveMQ. It specifies the locations and passwords for the keystore and truststore files used for SSL/TLS encryption.

LANGUAGE: xml
CODE:
<sslContext>
    <sslContext keyStore="file:${activemq.conf}/broker.ks"
                keyStorePassword="password" trustStore="file:${activemq.conf}/broker.ts"
                trustStorePassword="password"
    />
</sslContext>

----------------------------------------

TITLE: Checking Out ActiveMQ CMS 2.1.2 from SVN
DESCRIPTION: SVN command to checkout the specific tagged version 2.1.2 of ActiveMQ CMS from the Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.2/

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads in Bash
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg in a Unix-like environment. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring Message Destination in jboss.xml
DESCRIPTION: JBoss-specific configuration linking message destination to global JNDI name.

LANGUAGE: xml
CODE:
<assembly-descriptor>
   <message-destination>
      <message-destination-name>LoggingQueue</message-destination-name>
      <jndi-name>activemq/queue/outbound</jndi-name>
   </message-destination>
</assembly-descriptor>

----------------------------------------

TITLE: Declaring ActiveMQ Dependency in Maven POM
DESCRIPTION: XML snippet for declaring a dependency on ActiveMQ 5.14.4 in a Maven project's POM file.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.14.4</version>
</dependency>

----------------------------------------

TITLE: Importing Apollo Broker Data (Bash)
DESCRIPTION: Command to import broker instance data from the archive file. This step is performed after installing the new Apollo version if data export/import is required.

LANGUAGE: bash
CODE:
${broker-path}/bin/apollo-broker store-import /tmp/broker-export.tgz

----------------------------------------

TITLE: Fanout Transport with Custom MinAckCount
DESCRIPTION: Example showing how to configure Fanout transport with a custom minimum acknowledgment count.

LANGUAGE: plaintext
CODE:
fanout:(multicast://default)?minAckCount=1

----------------------------------------

TITLE: Configuring Virtual Threads in ActiveMQ Broker XML
DESCRIPTION: XML configuration to enable Virtual Threads in ActiveMQ broker by setting the virtualThreadTaskRunner attribute to true in the broker element.

LANGUAGE: xml
CODE:
<broker ... virtualThreadTaskRunner="true" .. >

----------------------------------------

TITLE: Connecting to ActiveMQ Broker using TCP and SSL Protocols in Java
DESCRIPTION: Shows how to connect to an ActiveMQ broker using TCP or SSL protocols. These are typically used for client-server communication in production environments.

LANGUAGE: java
CODE:
tcp://somehost:port

LANGUAGE: java
CODE:
ssl://somehost:port

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.30.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.30.0 release. It includes version number, release date, title, short description, documentation version, and Java version requirement. This information is likely used for release management and documentation purposes.

LANGUAGE: yaml
CODE:
version: 2.30.0
release_date: 2023-07-26
title: ActiveMQ Artemis 2.30.0
shortDescription: Bug-fix release with a few small improvements and a handful of dependency upgrades
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.29.0
java_version: 11+

----------------------------------------

TITLE: Cleaning Jekyll Build Cache and Output
DESCRIPTION: These commands remove Jekyll metadata, cache, and build output directories to ensure a clean state for rebuilding the site.

LANGUAGE: bash
CODE:
rm -rf src/.jekyll-*
rm -rf _site

----------------------------------------

TITLE: Java Class Instantiation
DESCRIPTION: Basic Java code showing class instantiation

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project. This demonstrates the use of the activemq-all uber jar dependency.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.11.0</version>
</dependency>

----------------------------------------

TITLE: Running ActiveMQ Broker with XML Configuration using Maven
DESCRIPTION: This command runs the ActiveMQ broker with a custom XML configuration using Maven.

LANGUAGE: bash
CODE:
maven server -Dconfig=src/sample-conf/default.xml

----------------------------------------

TITLE: Basic Message Publishing with REST
DESCRIPTION: Example of publishing a message to a queue using HTTP POST with curl

LANGUAGE: bash
CODE:
curl -u admin:admin -d "body=message" http://localhost:8161/api/message/TEST?type=queue

----------------------------------------

TITLE: Generating configure script for ActiveMQ-CPP on Unix
DESCRIPTION: Runs the autogen.sh script to generate the configure script needed for building ActiveMQ-CPP on Unix-like systems. This step is required before running configure and make.

LANGUAGE: bash
CODE:
./autogen.sh

----------------------------------------

TITLE: Setting Default MQTT Keep Alive
DESCRIPTION: Configuration for setting a server-side default keep-alive value for MQTT connections in milliseconds.

LANGUAGE: xml
CODE:
<transportConnector name="mqtt" uri="mqtt://localhost:1883?transport.defaultKeepAlive=60000"/>

----------------------------------------

TITLE: Verifying ActiveMQ Downloads Using Legacy PGP
DESCRIPTION: Alternative commands for verifying ActiveMQ download signatures using legacy PGP command syntax. Requires KEYS file and .asc signature file.

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM dependency configuration for including ActiveMQ in a project. Uses the activemq-all artifact which is an uber jar containing all ActiveMQ components.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.10.2</version>
</dependency>

----------------------------------------

TITLE: Disabling Topic Advisories in ActiveMQ Connection Factory URL
DESCRIPTION: This example shows how to disable topic advisories in the ActiveMQ connection factory URL.

LANGUAGE: java
CODE:
tcp://localhost:61616?jms.watchTopicAdvisories=false

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.13.0</version>
</dependency>

----------------------------------------

TITLE: Sending to Multiple Destinations with OpenWire in Java
DESCRIPTION: Demonstrates how to send a single message to multiple destinations using composite destinations with the OpenWire protocol in Java.

LANGUAGE: Java
CODE:
Destination destination = session.createQueue("test-queue,test-queue-foo");
MessageProducer producer = session.createProducer(destination);
TextMessage message = session.createTextMessage("Message #" + i);
producer.send(message);

----------------------------------------

TITLE: Configuring Destination Policy for Network Bridge Filtering in ActiveMQ
DESCRIPTION: XML configuration for enabling message replay functionality in a network of brokers. This configuration disables audit and enables message replay when there are no consumers, which helps handle orphaned messages when durable subscribers reconnect to different brokers.

LANGUAGE: xml
CODE:
<destinationPolicy>
  <policyMap>
    <policyEntries>
      <policyEntry queue="TEST.>" enableAudit="false">
        <conditionalNetworkBridgeFilterFactory replayWhenNoConsumers="true"/>
      </policyEntry>
    </policyEntries>
  </policyMap>
</destinationPolicy>

----------------------------------------

TITLE: Fanout Transport with Static Discovery
DESCRIPTION: Example of Fanout transport configuration using static TCP endpoints for multiple brokers.

LANGUAGE: plaintext
CODE:
fanout:(static:(tcp://localhost:61629,tcp://localhost:61639,tcp://localhost:61649))

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.33.0 Release Details in YAML
DESCRIPTION: This YAML configuration specifies the release details for ActiveMQ Artemis version 2.33.0. It includes the version number, release date, title, a short description of improvements, documentation version, and the required Java version.

LANGUAGE: yaml
CODE:
version: 2.33.0
release_date: 2024-03-22
title: ActiveMQ Artemis 2.33.0
shortDescription: Lots of improvments, bug fixes, and dependency upgrades 
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.33.0
java_version: 11+

----------------------------------------

TITLE: Initializing Java Object for ActiveMQ
DESCRIPTION: This Java code snippet shows the creation of a new object, likely related to ActiveMQ functionality. It demonstrates basic object instantiation syntax.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring Local Address and Port in ActiveMQ Classic URI for SSL
DESCRIPTION: This snippet demonstrates how to specify the local address and local port in the URI for SSL connections in ActiveMQ Classic. The local address and port are defined in the path part of the URI, following a forward slash.

LANGUAGE: plaintext
CODE:
ssl://localhost:5666/localhost:60606

----------------------------------------

TITLE: Verifying ActiveMQ Downloads Using PGP
DESCRIPTION: Commands for verifying ActiveMQ download signatures using PGP. Requires KEYS file and .asc signature file.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Cloning ActiveMQ-CPP Git Repository
DESCRIPTION: Git command to clone the ActiveMQ-CPP repository. Note that only project developers can commit to the Git tree using this method.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git

----------------------------------------

TITLE: Setting NIO Thread Pool Parameters
DESCRIPTION: Configuration example for setting NIO transport thread pool parameters in ActiveMQ startup script. Configures core pool size, maximum pool size, and work queue capacity.

LANGUAGE: bash
CODE:
ACTIVEMQ_OPTS="$ACTIVEMQ_OPTS -Dorg.apache.activemq.transport.nio.SelectorManager.corePoolSize=2000 -Dorg.apache.activemq.transport.nio.SelectorManager.maximumPoolSize=2000 -Dorg.apache.activemq.transport.nio.SelectorManager.workQueueCapacity=1024"

----------------------------------------

TITLE: Creating a New ActiveMQ Classic Instance
DESCRIPTION: Shows how to create a new ActiveMQ Classic instance with a separate ACTIVEMQ_BASE directory.

LANGUAGE: bash
CODE:
bin/activemq create /path/to/brokers/mybroker

----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ 5.9.0 Dependency
DESCRIPTION: XML snippet for including ActiveMQ 5.9.0 as a dependency in a Maven project's POM file. This configuration specifies the group ID, artifact ID, and version for the activemq-all package.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.9.0</version>
</dependency>

----------------------------------------

TITLE: Configuring ActiveMQ Build Without SSL Support
DESCRIPTION: Command to run the configure script with the --disable-ssl option, which prevents OpenSSL support from being included in the build configuration.

LANGUAGE: bash
CODE:
./configure --disable-ssl

----------------------------------------

TITLE: ActiveMQ Maven Dependency Configuration (XML)
DESCRIPTION: Maven POM configuration for including ActiveMQ 5.9.1 as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.9.1</version>
</dependency>

----------------------------------------

TITLE: Mixed Plugin Configuration with XBean and Spring Beans
DESCRIPTION: Example showing how to configure both XBean-based plugins and standard Spring beans together within the plugins tag. Includes authentication plugin configuration alongside a logging plugin.

LANGUAGE: xml
CODE:
<plugins>
    <simpleAuthenticationPlugin>
      <users>
        <authenticationUser username="system" password="manager"
          groups="users,admins"/>
        <authenticationUser username="user" password="password"
          groups="users"/>
        <authenticationUser username="guest" password="password" groups="guests"/>
      </users>
    </simpleAuthenticationPlugin>  
    <bean xmlns="http://www.springframework.org/schema/beans" 
          id="loggingPlugin" 
          class="org.apache.activemq.broker.util.LoggingBrokerPlugin"
    />
</plugins>

----------------------------------------

TITLE: Configuring Failover Transport in ActiveMQ Classic
DESCRIPTION: Example of configuring the Failover Transport for client connections in ActiveMQ Classic. This configuration allows clients to connect to multiple brokers for improved availability.

LANGUAGE: text
CODE:
failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)

----------------------------------------

TITLE: Static Transport Example URI
DESCRIPTION: Example of a static transport URI configuration that includes multiple connection endpoints with various options including TCP and VM protocols.

LANGUAGE: plaintext
CODE:
static:(tcp://localhost:61616,tcp://remotehost:61617?trace=false,vm://localbroker)?initialReconnectDelay=100

----------------------------------------

TITLE: Installing Web Console Dependencies
DESCRIPTION: Commands for installing and configuring the web container and required Pax Web bundles.

LANGUAGE: bash
CODE:
features/install web
osgi/uninstall 44
osgi/uninstall 45
osgi/uninstall 46
osgi/uninstall 47
osgi/install mvn:org.ops4j.pax.web/pax-web-bundle/0.6.0
osgi/install mvn:org.ops4j.pax.web/pax-web-jsp/0.6.0
osgi/install mvn:org.ops4j.pax.web-extender/pax-web-ex-war/0.5.1
osgi/install mvn:org.ops4j.pax.web-extender/pax-web-ex-whiteboard/0.5.1

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.27.1 Release Metadata in YAML
DESCRIPTION: This YAML snippet defines key metadata for the ActiveMQ Artemis 2.27.1 release, including version number, release date, title, short description, documentation version, and Java version requirement.

LANGUAGE: yaml
CODE:
version: 2.27.1
release_date: 2022-12-01
title: ActiveMQ Artemis 2.27.1
shortDescription: Bug fixes, component updates, & new logging implementation
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.27.1
java_version: 11+

----------------------------------------

TITLE: Java Initialization Example for ActiveMQ
DESCRIPTION: Simple Java initialization code showing object instantiation for ActiveMQ implementation.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Using JMS Selector with Group ID
DESCRIPTION: Example of implementing message filtering using a JMS selector with JMSXGroupID header. This demonstrates how to manually filter messages for specific consumers using selector expressions.

LANGUAGE: java
CODE:
JMXGroupID = 'A'

----------------------------------------

TITLE: Configuring Ivy for ActiveMQ Classic
DESCRIPTION: This XML snippet shows an Ivy configuration file (ivyconf) for use with ActiveMQ Classic. It defines resolvers, module rules, and artifact patterns for dependency management.

LANGUAGE: xml
CODE:
<ivyconf>
        <!--loads properties file as ivy variables, 0..n-->
        <properties file="${ivy.conf.dir}/ivyconf-file.properties" />
        <!--configures ivy with some defaults, 0..1-->
        <conf defaultResolver="localChain" checkUpToDate="false" />

        <!--typedef:defines new types in ivy-->
        <!--latest-strategies: defines latest strategies-->
        <!--conflict-managers: defines conflicts managers-->

        <!--defines dependency resolvers-->
        <resolvers>
             <chain name="localChain" returnFirst="false">
                 <filesystem name="internal" latest="latest-revision">
                        <ivy pattern="${repository.dir}/[organisation]/[module]/[type]s/ivy-[revision].xml" />
                        <artifact pattern="${repository.dir}/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]" />
                </filesystem>
                <ivyrep name="ivyrep"/>
             </chain>
             <ibiblio name="ibiblio" pattern="[organisation]/jars/[module]-[revision].[ext]"/>
        </resolvers>

        <!--defines rules between modules and dependency resolvers-->
        <modules>
                <module organisation="verticon" name=".*" resolver="internal" />
                <module organisation="mandarax" name=".*" resolver="internal" />
                <module organisation="geronimo-spec" name=".*" resolver="ibiblio" />
                <module organisation="tomcat" name=".*" resolver="ibiblio" />
        </modules>

</ivyconf>

----------------------------------------

TITLE: Building NMS API and Provider Libraries with NAnt
DESCRIPTION: A series of commands to build the main NMS module and all provider modules using NAnt.

LANGUAGE: bash
CODE:
cd activemq-dotnet
cd Apache.NMS\trunk
nant

cd ..\..\Apache.NMS.ActiveMQ\trunk
nant

cd ..\..\Apache.NMS.AMQP\trunk
nant

cd ..\..\Apache.NMS.EMS\trunk
nant

cd ..\..\Apache.NMS.MQTT\trunk
nant

cd ..\..\Apache.NMS.MSMQ\trunk
nant

cd ..\..\Apache.NMS.Stomp\trunk
nant

cd ..\..\Apache.NMS.WCF\trunk
nant

cd ..\..\Apache.NMS.ZMQ\trunk
nant

----------------------------------------

TITLE: Configuring ActiveMQSslConnectionFactory in Spring XML
DESCRIPTION: Spring XML configuration for JMS clients using ActiveMQSslConnectionFactory to connect to an SSL-enabled ActiveMQ broker. Includes settings for truststore, keystore, and broker URL.

LANGUAGE: xml
CODE:
<bean id="AMQJMSConnectionFactory" class="org.apache.activemq.ActiveMQSslConnectionFactory">
  <property name="trustStore" value="/path/to/truststore.ts" />
  <property name="trustStorePassword" value="password" />
  <property name="keyStore" value="/path/to/keystore.ks" />
  <property name="keyStorePassword" value="password" />
  <property name="brokerURL" value="ssl://localhost:61616" />
  <property name="userName" value="admin" /> 
  <property name="password" value="admin" />
</bean>

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 2.1.3 from SVN
DESCRIPTION: This command checks out the ActiveMQ-CPP 2.1.3 release tag from the Apache Subversion repository. It allows developers to access the exact source code for this specific version.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1.3/

----------------------------------------

TITLE: Configuring ActiveMQSslConnectionFactory in Spring XML
DESCRIPTION: Spring XML configuration for JMS clients using ActiveMQSslConnectionFactory to connect to an SSL-enabled ActiveMQ broker. Includes settings for truststore, keystore, and broker URL.

LANGUAGE: xml
CODE:
<bean id="AMQJMSConnectionFactory" class="org.apache.activemq.ActiveMQSslConnectionFactory">
  <property name="trustStore" value="/path/to/truststore.ts" />
  <property name="trustStorePassword" value="password" />
  <property name="keyStore" value="/path/to/keystore.ks" />
  <property name="keyStorePassword" value="password" />
  <property name="brokerURL" value="ssl://localhost:61616" />
  <property name="userName" value="admin" /> 
  <property name="password" value="admin" />
</bean>

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.39.0 Release Parameters in YAML
DESCRIPTION: YAML configuration specifying version 2.39.0 release details including release date, Java version requirement (17+), documentation version, and release description. Notable change includes the upgrade to requiring Java 17 or higher.

LANGUAGE: yaml
CODE:
version: 2.39.0
release_date: 2024-12-19
title: ActiveMQ Artemis 2.39.0
shortDescription: <strong>Java 17+ is now required</strong> plus a handful of improvements, bug fixes, and dependency upgrades 
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.39.0
java_version: 17+

----------------------------------------

TITLE: Running Log4j JMS Appender example with Apache Ant
DESCRIPTION: This snippet shows the command to run the Log4j JMS Appender example using Apache Ant, which is included in the ActiveMQ Classic distribution since version 5.3.

LANGUAGE: bash
CODE:
ant log4j-jms

----------------------------------------

TITLE: Building ActiveMQ Classic with Maven on Windows
DESCRIPTION: Commands to build ActiveMQ Classic from source using Maven on a Windows system. This process requires Java 7 and Maven 3.0 or greater.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
mvn clean install

----------------------------------------

TITLE: Configuring Wire Format Options for OpenWire in ActiveMQ Classic
DESCRIPTION: This XML configuration sets a maximum frame size of 1000 bytes specifically for the OpenWire format in the AUTO transport connector. This option only applies to OpenWire connections.

LANGUAGE: xml
CODE:
<transportConnector name="auto" uri="auto://localhost:5671?wireFormat.default.maxFrameSize=1000"/>

----------------------------------------

TITLE: Verifying PGP Signatures using gpg in Bash
DESCRIPTION: Commands to verify the PGP signatures of downloaded ActiveMQ files using gpg.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Primary-Secondary Broker Configuration
DESCRIPTION: Configuration example showing how to set up primary and secondary brokers with disabled randomization.

LANGUAGE: text
CODE:
failover:(tcp://primary:61616,tcp://secondary:61616)?randomize=false

----------------------------------------

TITLE: Configuring ActiveMQ 6.1.2 Release Details in YAML
DESCRIPTION: YAML configuration defining the release parameters for ActiveMQ Classic 6.1.2 including version number, release notes URL, release date, Java version requirement, and short description.

LANGUAGE: yaml
CODE:
version: 6.1.2
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12354480
release_date: 2024-04-15
title: ActiveMQ Classic 6.1.2 Release
java_version: 17+
shortDescription: Classic 6.1.2 is a maintanance release for ActiveMQ Classic, on the 6.1.x series.
redirect_from:
- /../../../activemq-6000102-release

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a Java class, possibly related to ActiveMQ initialization or usage. It demonstrates the basic syntax for object creation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Simple Java code showing object instantiation of SomeJava class

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Creating NAnt Wrapper Script for macOS
DESCRIPTION: A shell script to wrap the NAnt executable for use on macOS systems with Mono.

LANGUAGE: bash
CODE:
#!/bin/sh
exec /usr/bin/mono /path/to/nant/NAnt.exe "$@"

----------------------------------------

TITLE: Running Integration Tests
DESCRIPTION: Commands to build and execute the integration test suite.

LANGUAGE: bash
CODE:
cd systest/itests/client
maven

----------------------------------------

TITLE: Release Display Template Loop
DESCRIPTION: Iterates through releases and displays past versions while excluding current releases. Includes conditional logic for handling cases with no past releases.

LANGUAGE: liquid
CODE:
{% for release in reversed_releases %}
    {% unless current_releases contains release.version %}
{% assign no_past_releases = false %}
{% include artemis_console_release.md release=release is_current_release=false %}
<br/>
    {% endunless %}
{% endfor %}

----------------------------------------

TITLE: Configuring LevelDB Persistence Adapter for Shared File System
DESCRIPTION: XML configuration for setting up LevelDB persistence adapter to use a shared directory for Shared File System Master Slave.

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <levelDB directory="/sharedFileSystem/sharedBrokerData"/>
</persistenceAdapter>

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.ActiveMQ v1.6.0
DESCRIPTION: SVN command to check out the tagged version 1.6.0 of Apache.NMS.ActiveMQ from the Apache repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.0/

----------------------------------------

TITLE: Setting Java IPv4 Preference Flag
DESCRIPTION: JVM argument to force the Java Runtime to use IPv4 stack instead of IPv6 for network communications. This setting is crucial when the network infrastructure doesn't support IPv6 properly.

LANGUAGE: java
CODE:
-Djava.net.preferIPv4Stack=true

----------------------------------------

TITLE: Starting ActiveMQ on Unix
DESCRIPTION: Commands to start the ActiveMQ broker on Unix systems, both as a foreground process and as a daemon.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]/bin
./activemq console

cd [activemq_install_dir]/bin
./activemq start

----------------------------------------

TITLE: Configuring Enabled Wire Protocols in ActiveMQ Classic
DESCRIPTION: This XML configuration enables only OpenWire and STOMP protocols for the AUTO transport connector. Other protocols like AMQP and MQTT will not be available on this connector.

LANGUAGE: xml
CODE:
<transportConnector name="auto" uri="auto://localhost:5671?auto.protocols=default,stomp"/>

----------------------------------------

TITLE: Custom Path Separator Examples
DESCRIPTION: Examples showing the usage of custom path separators in destination patterns, demonstrating how forward slashes can be used instead of dots.

LANGUAGE: text
CODE:
FOO.BAR.*
FOO/BAR/*

----------------------------------------

TITLE: Configuring AMQ Persistence Adapter for Shared File System
DESCRIPTION: XML configuration for setting up AMQ persistence adapter to use a shared directory for Shared File System Master Slave.

LANGUAGE: xml
CODE:
<persistenceAdapter>
  <amqPersistenceAdapter directory="/sharedFileSystem/sharedBrokerData"/>
</persistenceAdapter>

----------------------------------------

TITLE: Creating Community Navigation Links in Markdown
DESCRIPTION: This snippet creates a navigation structure for the Community section using Markdown syntax. It includes links to various resources such as articles, books, contributing guidelines, and FAQs, with some items having nested sub-categories.

LANGUAGE: markdown
CODE:
[Community](community)

*   [Articles](articles)
*   [Books](books)
*   [Contributing](../../../contributing)
*   [FAQ](faq)
    *   [Configuration](faq#configuration)
    *   [Developing ActiveMQ Classic](faq#developing-activemq-classic)
    *   [Errors](faq#errors)
    *   [General](faq#general)
    *   [JMS](faq#jms)
    *   [Persistence Questions](faq#persistence-questions)
    *   [Terminology](faq#terminology)
    *   [Using Apache ActiveMQ Classic](using-activemq-classic-5)
*   [PMC Templates](../../../pmc-templates)
*   [Privacy Policy](../../../privacy-policy)
*   [Projects Using ActiveMQ Classic](projects-using-activemq-classic)

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.27.0 Release Metadata in YAML
DESCRIPTION: This YAML configuration defines the metadata for ActiveMQ Artemis version 2.27.0 release. It specifies the version number, release date, title, short description, documentation version, and required Java version.

LANGUAGE: yaml
CODE:
version: 2.27.0
release_date: 2022-11-14
title: ActiveMQ Artemis 2.27.0
shortDescription: Bug fixes, component updates, & new logging implementation
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.27.1
java_version: 11+

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.36.0 Release Information in YAML
DESCRIPTION: This YAML snippet defines key information about the ActiveMQ Artemis 2.36.0 release, including version number, release date, title, short description, documentation version, and Java version requirement.

LANGUAGE: yaml
CODE:
version: 2.36.0
release_date: 2024-07-29
title: ActiveMQ Artemis 2.36.0
shortDescription: Stability improvement on Journal NIO, concurrency issue with Stomp processing, bug fixes and version upgrades.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.36.0
java_version: 11+

----------------------------------------

TITLE: Checking out Apache.NMS.Stomp v1.5.3 from SVN
DESCRIPTION: This command checks out the Apache.NMS.Stomp v1.5.3 tag from the Apache Subversion repository. It allows developers to access the exact source code used for this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.3/

----------------------------------------

TITLE: Signing Distribution Files with GPG
DESCRIPTION: These commands create detached signature files (.asc) for both tar.gz and zip distribution files using GPG.

LANGUAGE: bash
CODE:
gpg --armor --output foo.tar.gz.asc --detach-sig foo.tar.gz
gpg --armor --output foo.zip.asc --detach-sig foo.zip

----------------------------------------

TITLE: Initializing Java Object for ActiveMQ
DESCRIPTION: Java code example showing object instantiation using the new keyword.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Retrieving Subscription Statistics Using Java JMS
DESCRIPTION: Java code example demonstrating how to retrieve statistics for all subscriptions. It sends a message to 'ActiveMQ.Statistics.Subscription' and processes the MapMessage response.

LANGUAGE: java
CODE:
Queue replyTo = session.createTemporaryQueue();
MessageConsumer consumer = session.createConsumer(replyTo);

String queueName = "ActiveMQ.Statistics.Subscription";
Queue testQueue = session.createQueue(queueName);
MessageProducer producer = session.createProducer(testQueue);
Message msg = session.createMessage();
msg.setJMSReplyTo(replyTo);
producer.send(msg);

MapMessage reply = (MapMessage) consumer.receive();
assertNotNull(reply);

for (Enumeration e = reply.getMapNames();e.hasMoreElements();) {
  String name = e.nextElement().toString();
  System.out.println(name + "=" + reply.getObject(name));
}

----------------------------------------

TITLE: Configuring Anonymous Access in SimpleAuthenticationPlugin
DESCRIPTION: Example of enabling anonymous access to the broker using the SimpleAuthenticationPlugin. This configuration allows clients to connect without providing a username and password.

LANGUAGE: XML
CODE:
<simpleAuthenticationPlugin anonymousAccessAllowed="true"> <users> <authenticationUser username="system" password="manager" groups="users,admins"/> <authenticationUser username="user" password="password" groups="users"/> <authenticationUser username="guest" password="password" groups="guests"/> </users> </simpleAuthenticationPlugin>

----------------------------------------

TITLE: Basic XML Structure Example
DESCRIPTION: Simple XML code example showing basic XML element structure.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Maven Command for Running ActiveMQ Broker
DESCRIPTION: Command to run the ActiveMQ broker using Maven with version 5.1 of the plugin.

LANGUAGE: bash
CODE:
mvn org.apache.activemq.tooling:maven-activemq-plugin:5.1:run

----------------------------------------

TITLE: Running ActiveMQ Tools with JAR File
DESCRIPTION: Commands to run the ActiveMQ producer and consumer tools using the activemq-all JAR file.

LANGUAGE: bash
CODE:
java -jar activemq-all-5.x.x.jar producer
java -jar activemq-all-5.x.x.jar consumer

----------------------------------------

TITLE: Implementing Custom DTO Module in Scala
DESCRIPTION: Example of implementing a custom DTO module class to extend Apollo's XML configuration model with new JAXB objects.

LANGUAGE: scala
CODE:
package org.example
import org.apache.activemq.apollo.util.DtoModule

class Module extends DtoModule {
  def dto_package = "org.apache.activemq.apollo.broker.store.leveldb.dto"
  def extension_classes = Array(classOf[LevelDBStoreDTO], classOf[LevelDBStoreStatusDTO])
}

----------------------------------------

TITLE: Decrypting Text in ActiveMQ Classic
DESCRIPTION: Shows how to decrypt given text using the ActiveMQ Classic decrypt command.

LANGUAGE: bash
CODE:
bin/activemq decrypt --input 'BkiT42A0CZfL1SanJIgxvQ==' --password asdasdasdasd

----------------------------------------

TITLE: Verifying PGP Signatures in Unix/Linux
DESCRIPTION: Commands for verifying PGP signatures of downloaded ActiveMQ distributions using pgpk, pgp, or gpg tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.35.0 Release Parameters in YAML
DESCRIPTION: YAML configuration block defining version number, release date, Java requirements and documentation details for ActiveMQ Artemis 2.35.0. This release includes bug fixes and a Junit upgrade, requiring Java 11 or higher.

LANGUAGE: yaml
CODE:
version: 2.35.0
release_date: 2024-06-16
title: ActiveMQ Artemis 2.35.0
shortDescription: Bug fix release. Junit Upgrade.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.35.0
java_version: 11+

----------------------------------------

TITLE: Setting Custom Message Store Directory for Embedded ActiveMQ Broker in Java
DESCRIPTION: This command demonstrates how to set the 'activemq.store.dir' system property when launching a Java application to specify a custom directory for the ActiveMQ message store. The example uses '/temp' as the custom directory path.

LANGUAGE: java
CODE:
java -Dactivemq.store.dir=/temp your.Application

----------------------------------------

TITLE: Removing SVN Directories in Unix for Distribution Preparation
DESCRIPTION: This command removes all .svn directories from the current directory and its subdirectories, which is necessary before creating distribution archives.

LANGUAGE: bash
CODE:
rm -rf `find . -type d -name .svn`

----------------------------------------

TITLE: Configuring XML Structure for ActiveMQ
DESCRIPTION: Basic XML structure example showing XML element configuration.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: PMC Member Discussion Template
DESCRIPTION: Template for initiating discussion about potential new PMC member candidates on the private mailing list.

LANGUAGE: plaintext
CODE:
To: private@activemq.apache.org
Subject: [DISCUSS] Invite <CANDIDATE> to join ActiveMQ PMC

Considering <CANDIDATE>'s contributions to the ActiveMQ project as a committer...

<INSERT EVIDENCE HERE>

Based on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.

Please remember that this is not a vote for this person to become a committer, at this point it is only a discussion.

----------------------------------------

TITLE: Initializing Java Object for ActiveMQ
DESCRIPTION: This Java code snippet shows the creation of a new object of type 'SomeJava'. It demonstrates object instantiation in the context of the ActiveMQ project.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Setting java.rmi.server.hostname for ActiveMQ on Windows
DESCRIPTION: This snippet demonstrates how to set the java.rmi.server.hostname property for ActiveMQ on Windows systems. It appends the property to the ACTIVEMQ_OPTS environment variable before launching ActiveMQ.

LANGUAGE: batch
CODE:
SET ACTIVEMQ_OPTS=%ACTIVEMQ_OPTS% -Djava.rmi.server.hostname=<hostname> 
activemq

----------------------------------------

TITLE: Starting ActiveMQ Classic Broker
DESCRIPTION: Command to start the ActiveMQ Classic broker in console mode.

LANGUAGE: bash
CODE:
bin/activemq console

----------------------------------------

TITLE: Setting Solaris CC Compiler Environment Variables
DESCRIPTION: Essential environment variable configuration for using the Solaris CC compiler with ActiveMQ-CPP. These settings ensure proper compiler selection and STLPort library usage.

LANGUAGE: shell
CODE:
CC = cc
CXX = CC

----------------------------------------

TITLE: Running Camel Load Test for ActiveMQ
DESCRIPTION: Command to execute a parallel producer load test using Maven. The test is configured through LocalBrokerParallelProducerLoadTest-context.xml file.

LANGUAGE: shell
CODE:
activemq/activemq-camel-loadtest> mvn test -Dtest=LocalBrokerParallelProducerLoadTest

----------------------------------------

TITLE: Configuring LastImageSubscriptionRecoveryPolicy in XML
DESCRIPTION: Retains only the most recent message for recovery. Useful for scenarios where only the latest state is relevant.

LANGUAGE: xml
CODE:
<lastImageSubscriptionRecoveryPolicy/>

----------------------------------------

TITLE: HTML Warning Notice for ActiveMQ 5.16.x End of Life
DESCRIPTION: HTML alert block displaying a warning message about this being the final release in the ActiveMQ Classic 5.16.x stream, advising users to upgrade to the current stream.

LANGUAGE: html
CODE:
<div class="alert alert-warning">
This is the last intended Classic 5.16.x release. Users should upgrade to the current stream for ongoing releases, as noted in May 2022.
</div>

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.31.1 Release Metadata in YAML
DESCRIPTION: YAML configuration block specifying the version number, release date, title, description, documentation version and Java version requirements for ActiveMQ Artemis 2.31.1. This metadata file defines key release information used for documentation and release management.

LANGUAGE: yaml
CODE:
version: 2.31.1
release_date: 2023-10-25
title: ActiveMQ Artemis 2.31.1
shortDescription: Bug fixes and component upgrades.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.31.1
java_version: 11+

----------------------------------------

TITLE: Configuring XML Structure for ActiveMQ
DESCRIPTION: Basic XML configuration structure example for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Displaying Destination Statistics
DESCRIPTION: Displays useful statistics for destinations on an ActiveMQ broker.

LANGUAGE: Bash
CODE:
activemq-admin dstat

LANGUAGE: Bash
CODE:
activemq-admin dstat topics

----------------------------------------

TITLE: Configuring ActiveMQ with XML
DESCRIPTION: This XML snippet demonstrates a basic configuration structure for Apache ActiveMQ. It shows how to define XML elements for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Initializing ActiveMQ Java Object
DESCRIPTION: This Java code snippet demonstrates the creation of a new instance of a class, likely related to ActiveMQ functionality. It shows the basic syntax for object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring Kaha Persistence Adapter in ActiveMQ Classic 5.0+
DESCRIPTION: XML configuration for setting up Kaha Persistence Adapter in ActiveMQ Classic version 5.0 and above. It specifies the persistence directory and maximum data file length.

LANGUAGE: XML
CODE:
<broker brokerName="broker" persistent="true" useShutdownHook="false">
  <transportConnectors>
    <transportConnector uri="tcp://localhost:61616"/>
  </transportConnectors>
  <persistenceAdapter>
    <kahaPersistenceAdapter directory="activemq-data" maxDataFileLength="33554432"/>
  </persistenceAdapter>
</broker>

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure example showing nested XML tags.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Setting java.rmi.server.hostname for ActiveMQ on Unix Systems
DESCRIPTION: This snippet shows how to set the java.rmi.server.hostname property for ActiveMQ on Unix-based systems (OS X, Linux, Solaris). It adds the property to the ACTIVEMQ_OPTS environment variable before starting ActiveMQ.

LANGUAGE: bash
CODE:
export ACTIVEMQ_OPTS=$ACTIVEMQ_OPTS -Djava.rmi.server.hostname=<hostname> 
activemq

----------------------------------------

TITLE: Using Durable Topic Subscribers with ActiveMQ Consumer
DESCRIPTION: Command to use durable topic subscribers with the ActiveMQ consumer tool.

LANGUAGE: bash
CODE:
bin/activemq consumer --durable true --clientId example --destination topic://TEST

----------------------------------------

TITLE: Legacy ActiveMQ Ant Examples
DESCRIPTION: Ant commands for running producer and consumer examples in older versions of ActiveMQ Classic.

LANGUAGE: ant
CODE:
ant producer
ant consumer

----------------------------------------

TITLE: Setting Consumer Priority in NMS.ActiveMQ
DESCRIPTION: This snippet demonstrates how to set the priority for a consumer using Destination Options in NMS.ActiveMQ. It creates a queue with a specified consumer priority and then creates a consumer for that queue.

LANGUAGE: csharp
CODE:
var queue = session.GetQueue("TEST.QUEUE?consumer.priority=10");
var consumer = session.CreateConsumer(queue);

----------------------------------------

TITLE: Verifying PGP Signatures using pgp in Bash
DESCRIPTION: Commands to verify the PGP signatures of downloaded ActiveMQ files using pgp.

LANGUAGE: Bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.19.0 Release Details in YAML
DESCRIPTION: YAML configuration block defining metadata for ActiveMQ Artemis version 2.19.0 release. Specifies version number, release date, title, documentation version, Java version requirement, and includes a summary of changes including bug fixes and enhancements.

LANGUAGE: yaml
CODE:
version: 2.19.0
release_date: 2021-10-18
title: ActiveMQ Artemis 2.19.0
shortDescription: Includes 3 new features, 36 bug fixes, 8 dependency upgrades, and 18 enhancements.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.19.0
java_version: 8

----------------------------------------

TITLE: Building and Deploying Integration Test EAR
DESCRIPTION: Commands to package the Resource Adapter and Integration Test EJBs into a deployable EAR file. Requires Geronimo home directory to be specified.

LANGUAGE: bash
CODE:
cd systest/itests/ear
maven -Dgeronimo.home=geronimo-home

----------------------------------------

TITLE: Defining XML Structure in ActiveMQ
DESCRIPTION: This XML snippet demonstrates the basic structure of an XML element in the ActiveMQ project. It includes a root element named 'xml' with some content inside.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Defining Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and describes the special properties used to preserve important data when messages are copied in ActiveMQ. These properties store the original address, queue, and message ID of the copied message.

LANGUAGE: plaintext
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Slow File System Access Log Example
DESCRIPTION: Example log output showing slow KahaDB access diagnostic message when operations exceed configured threshold.

LANGUAGE: plaintext
CODE:
Slow KahaDB access: cleanup took 1277 | org.apache.activemq.store.kahadb.MessageDatabase | ActiveMQ Classic Journal Checkpoint Worker

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure demonstration

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Running ActiveMQ Broker with Custom URL using Maven
DESCRIPTION: This command runs the ActiveMQ broker with a custom URL using Maven.

LANGUAGE: bash
CODE:
maven server -Durl=tcp://localhost:61626

----------------------------------------

TITLE: Listing Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and explains the special properties that are added to copied messages in ActiveMQ. These properties preserve important information from the original message that would otherwise be lost during the copying process.

LANGUAGE: markdown
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: Running ActiveMQ via Maven Short Command
DESCRIPTION: Shortened Maven command to run ActiveMQ broker after plugin configuration in pom.xml.

LANGUAGE: bash
CODE:
mvn activemq:run

----------------------------------------

TITLE: Configuring ActiveMQ-TIBCO Bridge Using Spring XML
DESCRIPTION: Spring XML configuration that sets up a JMS bridge connector between ActiveMQ and TIBCO EMS. It defines inbound and outbound queue bridges with message filtering capabilities and establishes connection to a remote TIBCO broker. Requires tibjms.jar in the ActiveMQ lib directory.

LANGUAGE: xml
CODE:
<beans>
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

    <broker useJmx="true" persistent="false" xmlns="http://activemq.org/config/1.0"
            brokerName="localhost" dataDirectory="${activemq.base}/data">

        <!-- Dependencies: tibjms.jar must be in the activemq lib directory -->

        <!-- bridging definitions for traffic to/from remote activemq instance -->
        <jmsBridgeConnectors>
            <jmsQueueConnector outboundQueueConnectionFactory="#tibco">
                <inboundQueueBridges>
                    <inboundQueueBridge
                            inboundQueueName = "queue.ping"
                            localQueueName   = "queue.incomingMsgs.ping"
                            selector         = "JMSType LIKE 'foo%'"/>
                </inboundQueueBridges>
                <outboundQueueBridges>
                    <outboundQueueBridge
                            outboundQueueName = "queue.pong"
                            localQueueName    = "queue.incomingMsgs.ping"
                            selector          = "JMSType LIKE 'foo%'"/>
                 </outboundQueueBridges>
            </jmsQueueConnector>
        </jmsBridgeConnectors>
    </broker>

    <!-- JMS ConnectionFactory to use for local bridging -->
    <bean id="tibco" class="com.tibco.tibjms.TibjmsQueueConnectionFactory">
        <property name="serverUrl" value="tcp://remote_tibco:7222" />
    </bean>
</beans>

----------------------------------------

TITLE: Configuring ConnectionFactory Dispatch Async in C#
DESCRIPTION: Sets the dispatch async property at the ConnectionFactory level to disable asynchronous message dispatch.

LANGUAGE: csharp
CODE:
connectionFactory.DispatchAsync = false;

----------------------------------------

TITLE: Verifying PGP Signatures in Unix/Linux
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using different PGP/GPG tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring ActiveMQ Classic 5.15.11 Release Documentation in YAML
DESCRIPTION: YAML configuration block defining metadata for ActiveMQ Classic 5.15.11 release documentation. Specifies version number, Java 8 requirement, release notes URL, and redirect paths for documentation routing.

LANGUAGE: yaml
CODE:
version: 5.15.11
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12345958
title: ActiveMQ Classic 5.15.11 Release
java_version: 8
redirect_from:
- /../../../activemq-51511-release
- /../../../activemq-5015011-release

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Example of creating a new Java object instance

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Maven Plugin Configuration
DESCRIPTION: Maven plugin configuration needed in pom.xml to enable performance testing

LANGUAGE: xml
CODE:
<plugin>
  <groupId>org.apache.activemq.tooling</groupId>
  <artifactId>activemq-perf-maven-plugin</artifactId>
  <version>${activemq-version}</version>
</plugin>

----------------------------------------

TITLE: Configuring ActiveMQ XML
DESCRIPTION: This XML snippet shows a basic configuration for ActiveMQ. It demonstrates how to structure the XML for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Initializing Java Object in ActiveMQ
DESCRIPTION: Example of Java object instantiation in ActiveMQ implementation.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring ActiveMQ Classic in ra.xml
DESCRIPTION: XML configuration for ActiveMQ Classic in the ra.xml file, specifying the server URL and broker configuration

LANGUAGE: XML
CODE:
<config-property>
    <description>
      The URL to the ActiveMQ Classic server that you want this connection to connect to.  If using
      an embedded broker, this value should be 'vm://localhost'.
    </description>
    <config-property-name>ServerUrl</config-property-name>
    <config-property-type>java.lang.String</config-property-type>
    <!-- <config-property-value>tcp://localhost:61616</config-property-value> -->
    <config-property-value>vm://localhost</config-property-value>
  </config-property>

----------------------------------------

TITLE: Configuring ActiveMQ using XML
DESCRIPTION: This XML snippet demonstrates a basic configuration structure for ActiveMQ. It shows how to define XML elements for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Running ActiveMQ via Maven Plugin
DESCRIPTION: Command to run ActiveMQ broker using Maven plugin directly.

LANGUAGE: bash
CODE:
mvn org.apache.activemq.tooling:maven-activemq-plugin:5.0-SNAPSHOT:run

----------------------------------------

TITLE: Running ActiveMQ with Properties File
DESCRIPTION: Command to start ActiveMQ using a properties file for configuration, avoiding Spring and XML dependencies.

LANGUAGE: bash
CODE:
bin/activemq console properties:foo.properties

----------------------------------------

TITLE: WebLogic Security Integration Classes
DESCRIPTION: Custom Java classes for integrating ActiveMQ security with WebLogic security realms

LANGUAGE: Java
CODE:
public class ActiveMQToWebLogicSecurity implements BrokerPlugin {
    private String authorizedGroup;

    public Broker installPlugin(Broker broker) {
        Broker first = new ActiveMQWebLogicAuthenticationFilter(broker);
        AuthorizationEntry entry = new AuthorizationEntry();
        Set acls = new HashSet();
        acls.add(new WLSGroupImpl(authorizedGroup));
        entry.setAdminACLs(acls);
        entry.setReadACLs(acls); 
        entry.setWriteACLs(acls);
        DefaultAuthorizationMap map = new DefaultAuthorizationMap();
        map.setDefaultEntry(entry);
        Broker second = new AuthorizationBroker(first, map);
        return second;
    }

    public String getAuthorizedGroup() {
        return authorizedGroup;
    }

    public void setAuthorizedGroup(String authorizedGroup) {
        this.authorizedGroup = authorizedGroup;
    }
}

----------------------------------------

TITLE: Scheduling Delayed Message Delivery in ActiveMQ with C#
DESCRIPTION: Demonstrates how to schedule a message for delivery after a 60-second delay using the AMQ_SCHEDULED_DELAY property.

LANGUAGE: csharp
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
long time = 60 * 1000;
message.Properties["AMQ_SCHEDULED_DELAY"] = time;
producer.Send(message);

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration showing how to include ActiveMQ as a dependency in a Maven project using the activemq-all uber jar.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.5</version>
</dependency>

----------------------------------------

TITLE: Adding ActiveMQ Dependency in Maven POM (XML)
DESCRIPTION: XML snippet for adding the ActiveMQ dependency to a Maven project's POM file. This dependency includes the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.10</version>
</dependency>

----------------------------------------

TITLE: Customizing EmbeddedActiveMQBroker with XML in Java
DESCRIPTION: This code shows how to customize the EmbeddedActiveMQBroker using an XML configuration file.

LANGUAGE: java
CODE:
@Rule
EmbeddedActiveMQBroker customizedBroker = new EmbeddedActiveMQBroker("bean:customize-activemq.xml");

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: XML configuration snippet showing basic XML structure

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Initializing ActiveMQ Object in Java
DESCRIPTION: This Java code snippet shows how to create a new instance of a class, likely related to ActiveMQ configuration or usage. It demonstrates object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring Markdown Front Matter for ActiveMQ Documentation
DESCRIPTION: YAML front matter configuration for the page layout, title and styling classes used in ActiveMQ documentation.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: In Progress 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Listing AMQP Example Directories in ActiveMQ Artemis
DESCRIPTION: Displays the directory structure for AMQP examples included in the Apache ActiveMQ Artemis distribution. These examples demonstrate AMQP usage in different programming languages and frameworks.

LANGUAGE: markdown
CODE:
- .NET: 
 * ./examples/protocols/amqp/dotnet

- ProtonCPP
 * ./examples/protocols/amqp/proton-cpp
 
- Ruby
 * ./examples/protocols/amqp/proton-ruby
 
- Java (Using the qpid JMS Client)
 * ./examples/protocols/amqp/queue

----------------------------------------

TITLE: Initializing Ajax with unique clientId in ActiveMQ Classic
DESCRIPTION: JavaScript code demonstrating how to initialize the amq object with a unique clientId to support multiple browser windows.

LANGUAGE: javascript
CODE:
org.activemq.Amq.init({
  uri: 'amq', 
  logging: true, 
  timeout: 45, 
  clientId:(new Date()).getTime().toString() 
});

----------------------------------------

TITLE: Custom Group Name Configuration
DESCRIPTION: Shows how to configure a multicast connection with a custom group name parameter.

LANGUAGE: plaintext
CODE:
multicast://224.1.2.3:6255?group=mygroupname

----------------------------------------

TITLE: ActiveMQ Broker Configuration
DESCRIPTION: XML configuration files for setting up single and networked ActiveMQ brokers in WebLogic

LANGUAGE: XML
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://activemq.org/config/1.0">
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>
  
  <broker useJmx="true" brokerName="MyBroker" useShutdownHook="false" plugins="#WebLogicSecurity">
    <managementContext>
      <managementContext>
          <MBeanServer>
             <bean class="org.springframework.jndi.JndiObjectFactoryBean" xmlns="">
                <property name="jndiName" value="java:comp/env/jmx/runtime" />
                <property name="lookupOnStartup" value="true" />
                <property name="expectedType" value="javax.management.MBeanServer" />
             </bean>
          </MBeanServer>
      </managementContext>
    </managementContext>

    <persistenceAdapter>
        <journaledJDBC journalLogFiles="5" dataDirectory="/server/bea/weblogic920/domains/jms/activemq-data"/>
    </persistenceAdapter>
  
    <transportConnectors>
        <transportConnector name="MyBrokerTCP" uri="tcp://0.0.0.0:61616" />
    </transportConnectors>
  </broker>

  <bean id="WebLogicSecurity" class="com.example.activemq.weblogic.ActiveMQToWebLogicSecurity">
      <property name="authorizedGroup" value="ActiveMQUsers" />
  </bean>
</beans>

----------------------------------------

TITLE: Removing Network Connector for Multicast Discovery in ActiveMQ XML
DESCRIPTION: This snippet demonstrates how to remove the networkConnector element to disable multicast-based broker networking.

LANGUAGE: xml
CODE:
<networkConnector name="default-nc" uri="multicast://default"/>

----------------------------------------

TITLE: Verifying PGP Signatures in Unix/Linux
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ files using PGP or GPG signatures.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.13.4</version>
</dependency>

----------------------------------------

TITLE: XML Configuration for ActiveMQ
DESCRIPTION: Basic XML configuration structure for ActiveMQ setup

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Getting ConnectionFactory from EmbeddedActiveMQBroker in Java
DESCRIPTION: This snippet shows how to obtain a ConnectionFactory directly from an EmbeddedActiveMQBroker instance.

LANGUAGE: java
CODE:
ConnectionFactory connectionFactory = embeddedBroker.createConnectionFactory();

----------------------------------------

TITLE: Jekyll Front Matter Configuration for Artemis Download Page
DESCRIPTION: Defines the page metadata and layout configuration using Jekyll front matter.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Download ActiveMQ Artemis
title-class: page-title-artemis
type: artemis
---

----------------------------------------

TITLE: Java Object Initialization
DESCRIPTION: Example of instantiating a Java object of type SomeJava.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: OCSP Configuration
DESCRIPTION: Configuration settings for Online Certificate Status Protocol (OCSP) in ActiveMQ Classic.

LANGUAGE: bash
CODE:
ACTIVEMQ_SSL_OPTS="-Djava.security.properties=$ACTIVEMQ_CONF/java.security"

LANGUAGE: bash
CODE:
ocsp.enable=true ocsp.responderURL=<http://ocsp.example.net:80>

----------------------------------------

TITLE: Configuring ActiveMQ XML
DESCRIPTION: This XML snippet demonstrates a basic ActiveMQ configuration. It shows the structure of an XML configuration file used for setting up ActiveMQ.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Maven Dependency for Jakarta Transition Client
DESCRIPTION: Maven dependency configuration for ActiveMQ Classic Jakarta transition client

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-client-jakarta</artifactId>
  <version>${activemq.version}</version>
</dependency>

----------------------------------------

TITLE: Browsing ActiveMQ Destinations
DESCRIPTION: Browses messages in selected ActiveMQ destinations with optional filtering.

LANGUAGE: Bash
CODE:
activemq-admin browse --amqurl tcp://localhost:61616 TEST.FOO

LANGUAGE: Bash
CODE:
activemq-admin browse --amqurl tcp://localhost:61616 -Vheader,body TEST.FOO

LANGUAGE: Bash
CODE:
activemq-admin browse --amqurl tcp://localhost:61616 --msgsel "JMSMessageID='*:10',JMSPriority>5" TEST.FOO

----------------------------------------

TITLE: Java Object Instantiation Example
DESCRIPTION: Basic Java code showing object instantiation of SomeJava class.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Retrieving Apache.NMS.AMQP Source Code from Git
DESCRIPTION: Command to clone the Apache.NMS.AMQP source code repository from GitHub. This allows developers to access and contribute to the project's codebase.

LANGUAGE: markdown
CODE:
[https://github.com/apache/activemq-nms-amqp](https://github.com/apache/activemq-nms-amqp)

----------------------------------------

TITLE: Building Integration Test EJB Module
DESCRIPTION: Commands to build the EJB module containing the test cases.

LANGUAGE: bash
CODE:
cd systest/itests/ejb
maven

----------------------------------------

TITLE: Declaring Maven Dependency for ActiveMQ 5.12.1
DESCRIPTION: XML snippet for declaring a Maven dependency on the ActiveMQ 5.12.1 all-in-one JAR in a project's POM file. This includes the groupId, artifactId, and version for the dependency.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.12.1</version>
</dependency>

----------------------------------------

TITLE: Implementing CMS MessageListener
DESCRIPTION: Example of implementing the MessageListener interface for asynchronous message consumption.

LANGUAGE: C++
CODE:
class SimpleListener : public cms::MessageListener {

    virtual void onMessage( const Message* message ) {
        const TextMessage* textMessage =
            dynamic_cast< const TextMessage* >( message );
        string text = "";

        if( textMessage != NULL ) {
            text = textMessage->getText();
        } else {
            text = "NOT A TEXTMESSAGE!";
        }

        printf( "Message Received: %s\n", text.c_str() );
    }
};

----------------------------------------

TITLE: Markdown Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the download page, specifying layout, title and content type.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Download ActiveMQ Artemis Native
title-class: page-title-artemis
type: artemis
---

----------------------------------------

TITLE: Configuring ActiveMQ with XML
DESCRIPTION: XML configuration snippet for ActiveMQ. This code block demonstrates a basic XML structure that might be used for configuring ActiveMQ settings.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring SSL System Properties
DESCRIPTION: Environment variable configuration for SSL properties in ActiveMQ Classic broker.

LANGUAGE: bash
CODE:
export ACTIVEMQ_SSL_OPTS = -Djavax.net.ssl.keyStore=/path/to/broker.ks -Djavax.net.ssl.keyStorePassword=password

----------------------------------------

TITLE: Java Instance Creation
DESCRIPTION: Java code snippet demonstrating object instantiation

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring XML Broker Path - File System Example
DESCRIPTION: Example showing how to specify an XML configuration file path from the filesystem for the brokerXmlConfig option.

LANGUAGE: plaintext
CODE:
file:dir/file.xml

----------------------------------------

TITLE: Displaying Broker Statistics
DESCRIPTION: Displays useful statistics for ActiveMQ brokers using the bstat command.

LANGUAGE: Bash
CODE:
activemq-admin bstat

LANGUAGE: Bash
CODE:
activemq-admin bstat localhost

----------------------------------------

TITLE: Configuring ActiveMQ XML Settings
DESCRIPTION: This XML snippet demonstrates how to configure ActiveMQ settings. It shows a basic XML structure that could be part of a larger configuration file.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Disabling ActiveMQ INFO Logging in log4j.properties
DESCRIPTION: This snippet shows how to disable INFO level logging for ActiveMQ by adding a configuration line to the log4j.properties file.

LANGUAGE: properties
CODE:
log4j.logger.org.apache.activemq=WARN

----------------------------------------

TITLE: Installing NUnit Framework with NAnt
DESCRIPTION: Commands to navigate to the NUnit directory and install it using NAnt.

LANGUAGE: bash
CODE:
cd ./activemq-dotnet/vendor/NUnit/2.5.8
nant install

----------------------------------------

TITLE: Configuring XML Structure for ActiveMQ
DESCRIPTION: Basic XML configuration structure example for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the integrity of ActiveMQ downloads using GPG and PGP signatures. This snippet demonstrates importing keys and verifying the signature of a downloaded file.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Example of creating a new Java object instance.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Expected output from Log4j JMS Appender example
DESCRIPTION: This snippet shows the expected console output when running the Log4j JMS Appender example, demonstrating successful sending and receiving of a log message.

LANGUAGE: text
CODE:
log4j-jms:
     [echo] Running a Log4j JMS Appender example
     [java] 2009-08-11 13:58:46,767 INFO  Log4jJMSAppenderExample - Test log
     [java] Received log [INFO]: Test log
     [java] Java Result: 1

----------------------------------------

TITLE: Configuring Jetty Context for ActiveMQ Artemis Console
DESCRIPTION: XML configuration for setting up the ActiveMQ Artemis Console in Jetty. It specifies the context path and WAR file location.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Configure PUBLIC "-//Jetty//Configure//EN" "https://jetty.org/configure_10_0.dtd">

<Configure class="org.eclipse.jetty.ee10.webapp.WebAppContext"> 
  <Set name="contextPath">/console</Set> 
  <Set name="war">/myapps/artemis-console-war.war</Set> 
</Configure>

----------------------------------------

TITLE: Instantiating a Java Object in ActiveMQ
DESCRIPTION: This Java code snippet shows how to create a new instance of a class called 'SomeJava'. It demonstrates object instantiation in the context of ActiveMQ usage.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Building ActiveMQ with Disabled Tests using Maven
DESCRIPTION: Maven command to build and install ActiveMQ while skipping unit test execution. Uses the maven.test.skip property to bypass all test compilation and execution.

LANGUAGE: shell
CODE:
mvn install -Dmaven.test.skip=true

----------------------------------------

TITLE: Generating Release Information with Liquid Templating
DESCRIPTION: This snippet uses Liquid templating to dynamically generate release information for past NMS API versions. It filters out current releases and formats the output for each historical release.

LANGUAGE: liquid
CODE:
{% assign reversed_releases = site["nms_api_releases"] | reverse %}
{% assign current_releases = "" | split: ',' %}

{% for current_release_prefix in site.data.current_releases["nms_api"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
            {% assign current_releases = current_releases | push: release.version %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

{% for release in reversed_releases %}
    {% unless current_releases contains release.version %}
#### NMS API {{release.version}} ({{release.release_date | date_to_string: "ordinal", "US"}})
{{ release.shortDescription }}

{% include nms_api_download_links.md release=release is_current_release=false %}

###### Changelog

For a detailed view of new features and bug fixes, see the [Release Notes]({{ release.release_notes }})

<br/>
    {% endunless %}
{% endfor %}

----------------------------------------

TITLE: Configuring XML Broker Path - Classpath Example
DESCRIPTION: Example showing how to specify an XML configuration file path from the classpath for the brokerXmlConfig option.

LANGUAGE: plaintext
CODE:
foo/bar.xml

----------------------------------------

TITLE: Managing ActiveMQ Broker via Command Line
DESCRIPTION: Commands for creating and destroying an ActiveMQ broker instance in the OSGi environment.

LANGUAGE: bash
CODE:
activemq/create-broker
activemq/destroy-broker

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure demonstration within ActiveMQ context

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: HTML Layout for NMS Project Page
DESCRIPTION: HTML markup defining the layout and content structure for the NMS project documentation page. Uses Bootstrap cards and grid system to present information about different NMS providers.

LANGUAGE: html
CODE:
---
layout: project_default
project_name: NMS Clients
project_info: .NET Messaging API
project_class: nms
project_color: orange
---

<div class="row project-narative">
  <div class="col-12">
    <div class="container">
      <!-- Narative 2 -->
      <div class="row">
        <div class="col-12">
          <div class="card card-orange">
            <div class="card-body">
              <div class="row">
                <div class="col-sm-12 col-md-8">
                  <div class="card">
                    <div class="card-body">
                      <h5 class="card-title text-orange">Messaging for .NET</h5>
                      <h6>Simple Messaging API for .NET</h6>
                      <p>The NMS API allows you to build .NET applications in C#, VB, or any other .NET language, using a single API to connect to multiple different providers using a JMS style API.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Example of creating a new Java object instance

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ Classic 5.8.0 Dependency
DESCRIPTION: XML snippet for adding the ActiveMQ Classic 5.8.0 dependency to a Maven project's POM file. This configuration allows developers to easily integrate ActiveMQ into their Maven-based projects.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.8.0</version>
</dependency>

----------------------------------------

TITLE: Basic Multicast Transport URI Syntax
DESCRIPTION: Demonstrates the basic syntax for configuring a Multicast transport connection URI in ActiveMQ Classic.

LANGUAGE: plaintext
CODE:
multicast://address:port?transportOptions

----------------------------------------

TITLE: Complete Asynchronous Consumer Example
DESCRIPTION: Full implementation of an asynchronous message consumer using the CMS API.

LANGUAGE: C++
CODE:
class SimpleAsyncConsumer : public ExceptionListener,
                            public MessageListener,
                            public DefaultTransportListener {
    // ... [Full implementation code shown in original text]
};

----------------------------------------

TITLE: Configuring ActiveMQ with XML
DESCRIPTION: This XML snippet demonstrates a basic configuration for ActiveMQ. It shows the structure of an XML configuration file used to set up ActiveMQ components.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring ActiveMQ Classic Client Properties
DESCRIPTION: Properties file (bootstrap.properties) for configuring the ActiveMQ Classic client. It specifies the connection factory, broker URL, JNDI context factory, and topic names.

LANGUAGE: properties
CODE:
jms.connectionFactoryName=ConnectionFactory  
jms.jndiProviderUrl=tcp://localhost:61616  
jms.jndiContextFactory=org.activemq.jndi.ActiveMQInitialContextFactory

jms.weatherTopic=weatherTopic  
jms.weatherRequestsTopic=weatherRequestsTopic

----------------------------------------

TITLE: Liquid Template for Processing NMS AMQP Releases
DESCRIPTION: Liquid template logic that processes and displays past releases of NMS AMQP, excluding current releases based on version prefixes.

LANGUAGE: liquid
CODE:
{% assign reversed_releases = site["nms_amqp_releases"] | reverse %}
{% assign current_releases = "" | split: ',' %}

{% for current_release_prefix in site.data.current_releases["nms_amqp"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
            {% assign current_releases = current_releases | push: release.version %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

{% for release in reversed_releases %}
    {% unless current_releases contains release.version %}
#### NMS AMQP {{release.version}} ({{release.release_date | date_to_string: "ordinal", "US"}})
[Release Notes]({{ release.release_notes }}) | [Release Page]({{release.url}})

{% include nms_amqp_download_links.md release=release is_current_release=false %}

<br/>
    {% endunless %}
{% endfor %}

----------------------------------------

TITLE: Service Configuration XML Example
DESCRIPTION: Example of configuring a custom service in Apollo's XML configuration.

LANGUAGE: xml
CODE:
<service id='myservice' kind='org.example.MyService'>
  <options xmlns="http://example.org/myservice">
    <search>google.com</search>
  </options>
</service>

----------------------------------------

TITLE: Deploying ActiveMQ Classic Resource Adapter in Geronimo
DESCRIPTION: Command to deploy the ActiveMQ Classic resource adapter using Geronimo's deploy tool. This step is necessary after creating the deployment descriptor XML.

LANGUAGE: bash
CODE:
D:\\geronimo>java -jar bin\\deployer.jar deploy d:\\projects\\weather\\src\\resources\
geronimo-activemq.xml repository\\activemq\\rars\\activemq-ra-3.1-SNAPSHOT.rar
Username: system
Password: manager
Deployed weather/Topics

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure example showing a simple XML element

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Virtual Host Factory Implementation
DESCRIPTION: Factory class for instantiating custom virtual host implementations based on configuration.

LANGUAGE: scala
CODE:
package example;
object MyVirtualHostFactory extends VirtualHostFactory {
  def create(broker: Broker, dto: VirtualHostDTO): VirtualHost = dto match {
    case dto:MyVirtualHostDTO =>
      val rc = new MyVirtualHostDTO(broker, dto.id)
      rc.config = dto
      rc
    case _ => null
  }
}

----------------------------------------

TITLE: Processing Advisory Messages with Embedded Command Objects in ActiveMQ C++
DESCRIPTION: Demonstrates how to handle advisory messages containing embedded command objects, specifically for temporary destination creation and destruction.

LANGUAGE: C++
CODE:
void TempDestinationAdvisoryConsumer::onMessage( const cms::Message* message ) {

    if( message->getCMSType() == "Advisory" ) {

        std::cout << "Received an Advisory Message!" << std::endl;

        const ActiveMQMessage* amqMessage =
            dynamic_cast<const ActiveMQMessage*>( message );

        if( amqMessage != NULL && amqMessage->getDataStructure() != NULL ) {
            std::cout << "Advisory Message contains a Command Object!" << std::endl;

            try {

                Pointer<DestinationInfo> info =
                    amqMessage->getDataStructure().dynamicCast<DestinationInfo>();

                unsigned char operationType = info->getOperationType();

                if( operationType == ActiveMQConstants::DESTINATION_REMOVE_OPERATION ) {
                    std::cout << "Temporary Destination {"
                              << info->getDestination()->getPhysicalName()
                              << "} Removed."
                              << std::endl;
                } else if( operationType == ActiveMQConstants::DESTINATION_ADD_OPERATION ) {
                    std::cout << "Temporary Destination {"
                              << info->getDestination()->getPhysicalName()
                              << "} Added."
                              << std::endl;
                } else {
                    std::cout << "ERROR: I have no Idea what just happened!"
                              << std::endl;
                }

            } catch( ClassCastException& ex ) {
                std::cout << "ERROR: Expected the Command to be a DestinationInfo, "
                          << "it wasn't so PANIC!!"
                          << std::endl;
            }
        }

    } else {
        std::cout << "Received a Non-Advisory Message!" << std::endl;
    }
}

----------------------------------------

TITLE: Configuring XML in ActiveMQ
DESCRIPTION: XML configuration snippet demonstrating basic XML structure in ActiveMQ.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ 5.7.0 Dependency
DESCRIPTION: XML snippet for including ActiveMQ 5.7.0 as a dependency in a Maven project's POM file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.7.0</version>
</dependency>

----------------------------------------

TITLE: Initializing OpenLDAP with ActiveMQ Configuration
DESCRIPTION: Command to initialize OpenLDAP with ActiveMQ LDAP configuration using ldapadd utility.

LANGUAGE: bash
CODE:
ldapadd -x -D "cn=admin,dc=activemq,dc=apache,dc=org" -w sunflower -f activemq-openldap.ldif

----------------------------------------

TITLE: ActiveMQ Log Output for Deleted Inactive Queue
DESCRIPTION: This snippet shows the log message that ActiveMQ generates when it removes an inactive queue. It includes the queue name and the inactivity duration threshold.

LANGUAGE: plaintext
CODE:
INFO  Queue                          - TEST.QUEUE Inactive for longer than 30000 ms - removing ...

----------------------------------------

TITLE: Creating Advisory Topic Subscription in C++ for ActiveMQ
DESCRIPTION: Demonstrates how to create a Topic object for subscribing to advisory messages about producers on a specific topic.

LANGUAGE: C++
CODE:
std::auto_ptr<cms::Topic> advisories( session->createTopic(
    "ActiveMQ.Advisory.Producer.Topic.TOPIC.FOO" ) );

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a class, possibly related to ActiveMQ initialization or configuration. It demonstrates object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Authentication Plugin Configuration with Encrypted Passwords
DESCRIPTION: Example of using encrypted passwords in the ActiveMQ authentication plugin configuration.

LANGUAGE: xml
CODE:
<simpleAuthenticationPlugin>
  <users>
    <authenticationUser username="system" password="${activemq.password}"
      groups="users,admins"/>
    <authenticationUser username="user" password="${guest.password}"
      groups="users"/>
    <authenticationUser username="guest" password="${guest.password}" groups="guests"/>
  </users>
</simpleAuthenticationPlugin>

----------------------------------------

TITLE: Basic ActiveMQ LDAP Authorization Configuration
DESCRIPTION: Simple XML configuration for Apache DS embedded server integration with ActiveMQ authorization plugin.

LANGUAGE: xml
CODE:
<authorizationPlugin>
    <map>
        <cachedLDAPAuthorizationMap/>
    </map>
</authorizationPlugin>

----------------------------------------

TITLE: Removing Multicast Discovery from Transport Connector in ActiveMQ XML
DESCRIPTION: This snippet shows how to remove the discoveryUri attribute from the transportConnector element to stop advertising the connection URI on the multicast network.

LANGUAGE: xml
CODE:
<transportConnector name="openwire" uri="tcp://localhost:61616" />

----------------------------------------

TITLE: Running Apollo Listener Script (Windows)
DESCRIPTION: Commands to navigate to the Ruby examples directory and run the listener script on Windows systems.

LANGUAGE: batch
CODE:
cd %APOLLO_HOME%\examples\stomp\ruby
ruby listener.rb

----------------------------------------

TITLE: Initializing ActiveMQ Java Object
DESCRIPTION: This Java code snippet demonstrates how to create a new instance of a Java class related to ActiveMQ. It shows the basic syntax for object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Browsing ActiveMQ-CPP Git Repository via Web
DESCRIPTION: URL for web-based browsing of the ActiveMQ-CPP Git repository.

LANGUAGE: bash
CODE:
https://gitbox.apache.org/repos/asf?p=activemq-cpp.git

----------------------------------------

TITLE: Sample XML Configuration
DESCRIPTION: Example XML structure showing basic element nesting

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.4.1
DESCRIPTION: Maven POM dependency configuration to use ActiveMQ 5.4.1 in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.4.1</version>
</dependency>

----------------------------------------

TITLE: Discovery-based Client Configuration
DESCRIPTION: Commands for running producer and consumer clients using Zeroconf discovery to locate brokers automatically.

LANGUAGE: text
CODE:
maven -o consumer -Durl=zeroconf:_activemq.broker.development.
maven -o producer  -Durl=zeroconf:_activemq.broker.development.

----------------------------------------

TITLE: Jekyll Page Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the Jekyll page defining layout, title and page type.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Apache.NMS.AMQP Past Releases
title-class: page-title-nms
type: nms
---

----------------------------------------

TITLE: XML Configuration Example for ActiveMQ
DESCRIPTION: Basic XML configuration structure example for ActiveMQ setup

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring OpenLDAP Base Configuration
DESCRIPTION: Basic OpenLDAP configuration snippet showing suffix, root DN, and password settings required for ActiveMQ LDAP integration.

LANGUAGE: text
CODE:
suffix          "dc=activemq,dc=apache,dc=org"
rootdn          "cn=admin,dc=activemq,dc=apache,dc=org"
# Cleartext passwords, especially for the rootdn, should
# be avoid.  See slappasswd(8) and slapd.conf(5) for details.
# Use of strong authentication encouraged.
rootpw          {SSHA}lfAYn54xCFghgQv5B2Kqn3d3eLojqxtS

----------------------------------------

TITLE: Extended ActiveMQ LDAP Authorization Configuration
DESCRIPTION: Detailed XML configuration for OpenLDAP integration with ActiveMQ authorization plugin, including connection settings and search bases.

LANGUAGE: xml
CODE:
<authorizationPlugin>
    <map>
        <cachedLDAPAuthorizationMap
            connectionURL="ldap://localhost:389"
            connectionUsername="cn=admin,dc=activemq,dc=apache,dc=org"
            connectionPassword="sunflower"
            queueSearchBase="ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
            topicSearchBase="ou=Topic,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
            tempSearchBase="ou=Temp,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org"
            refreshInterval="300000"
            legacyGroupMapping="false"
        />
    </map>
</authorizationPlugin>

----------------------------------------

TITLE: Package Distribution Table in ActiveMQ Artemis Modules
DESCRIPTION: A table showing the distribution of Java packages across different Artemis modules, highlighting split package issues that need to be resolved for proper OSGi support. This includes core client, server, commons, and protocol-specific modules.

LANGUAGE: markdown
CODE:
Package|Modules
---|---
org/apache/activemq/artemis/uri|artemis-core-client, artemis-jms-client, artemis-server
org/apache/activemq/artemis/core/protocol/core/impl/wireformat|artemis-core-client, artemis-server
org/apache/activemq/artemis/spi/core/protocol    |artemis-core-client, artemis-server
org/apache/activemq/artemis/core/protocol/core/impl|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/transaction/impl|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/security|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/protocol|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/buffers/impl|artemis-commons, artemis-core-client
org/apache/activemq/artemis/core/server/management|artemis-core-client, artemis-server
org/apache/activemq/artemis/api/core/management|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/server|artemis-commons (1 class), artemis-core-client (1 class), artemis-server
org/apache/activemq/artemis/spi/core/remoting|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/protocol/core|artemis-core-client, artemis-server
org/apache/activemq/artemis/utils|artemis-commons, artemis-core-client, artemis-server
org/apache/activemq/artemis/api/core|artemis-commons, artemis-core-client
org/apache/activemq/artemis/core/remoting/impl/netty|artemis-core-client, artemis-server
org/apache/activemq/artemis/core/settings|artemis-core-client, artemis-server

LANGUAGE: markdown
CODE:
Package|Modules
---|---
org/apache/activemq/artemis/core/protocol/stomp|artemis-protocols/artemis-stomp-protocol, artemis-server
org/apache/activemq/artemis/core/protocol/hornetqartemis-protocols/artemis-hornetq-protocol, artemis-protocols/artemis-hqclient-protocol

----------------------------------------

TITLE: Running Apollo Listener Script (Unix/Linux/OS X)
DESCRIPTION: Commands to navigate to the Ruby examples directory and run the listener script on Unix-based systems.

LANGUAGE: bash
CODE:
cd ${APOLLO_HOME}/examples/stomp/ruby
ruby listener.rb

----------------------------------------

TITLE: Java Object Initialization
DESCRIPTION: Creates a new instance of SomeJava class

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Sending BlobMessages with URL in ActiveMQ
DESCRIPTION: This snippet demonstrates how to create and send a BlobMessage using a URL that points to a shared file or web server location.

LANGUAGE: java
CODE:
BlobMessage message = session.createBlobMessage(new URL("http://some.shared.site.com");
producer.send(message);

----------------------------------------

TITLE: Generating Doxygen documentation for ActiveMQ-CPP
DESCRIPTION: Creates API documentation for ActiveMQ-CPP using Doxygen. This command generates HTML documentation from the source code comments.

LANGUAGE: bash
CODE:
make doxygen-run

----------------------------------------

TITLE: Java Instance Creation in ActiveMQ
DESCRIPTION: Example of instantiating a Java class in ActiveMQ context

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads in Bash
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg in a Unix-like environment. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Application Deployment Descriptor
DESCRIPTION: XML configuration for application.xml defining EAR structure with MDB and resource adapter modules.

LANGUAGE: xml
CODE:
<?xml version="1.0" encoding="UTF-8"?>
<application
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/application_5.xsd"
    version="5">
  <description>Example DD</description>
  <display-name>sample app with amq and genericra</display-name>
  <module>
    <ejb>mymodules.jar</ejb>
  </module>
  <module>
    <connector>genericra.rar</connector>
  </module>
</application>

----------------------------------------

TITLE: Starting JBoss Application Server
DESCRIPTION: Commands to start the JBoss application server

LANGUAGE: bash
CODE:
$ cd jboss-4.0.4.GA
$ ./bin/run.sh -c default

----------------------------------------

TITLE: Initializing NMS Connection Factory with Basic Configuration
DESCRIPTION: Demonstrates how to create a basic NMS connection factory using both generic and Stomp-specific implementations.

LANGUAGE: csharp
CODE:
var cf = new NMSConnectionFactory("stomp:tcp://localhost:61613");

LANGUAGE: csharp
CODE:
var cf = new Apache.NMS.Stomp.ConnectionFactory("tcp://localhost:61613");

----------------------------------------

TITLE: Java Implementation Example for ActiveMQ
DESCRIPTION: Basic Java instantiation example showing object creation

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring JNDI Resources for ActiveMQ in Tomcat context.xml
DESCRIPTION: This XML configuration sets up JNDI resources for ActiveMQ in Tomcat's context.xml file. It defines a ConnectionFactory, a Topic, and a Queue for use with ActiveMQ.

LANGUAGE: XML
CODE:
<Context antiJARLocking="true">
    <Resource
        name="jms/ConnectionFactory"
        auth="Container"
        type="org.apache.activemq.ActiveMQConnectionFactory"
        description="JMS Connection Factory"
        factory="org.apache.activemq.jndi.JNDIReferenceFactory"
        brokerURL="tcp://localhost:61616"
        brokerName="LocalActiveMQBroker"
        useEmbeddedBroker="false"/>

    <Resource name="jms/topic/MyTopic"
        auth="Container"
        type="org.apache.activemq.command.ActiveMQTopic"
        factory="org.apache.activemq.jndi.JNDIReferenceFactory"
        physicalName="MY.TEST.FOO"/>
    <Resource name="jms/queue/MyQueue"
        auth="Container"
        type="org.apache.activemq.command.ActiveMQQueue"
        factory="org.apache.activemq.jndi.JNDIReferenceFactory"
        physicalName="MY.TEST.FOO.QUEUE"/>
</Context>

----------------------------------------

TITLE: Markdown Page Structure
DESCRIPTION: Jekyll/Markdown front matter and page structure for the ActiveMQ documentation site defining the page layout, title and type.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: New Features in ActiveMQ Classic
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: JMS Connection Factory Error Example
DESCRIPTION: Error stack trace showing AbstractMethodError when attempting to create a connection using JMS 1.1 methods with JMS 1.0.2b API on classpath

LANGUAGE: java
CODE:
java.lang.AbstractMethodError: 
javax.jms.ConnectionFactory.createConnection()Ljavax/jms/Connection;

----------------------------------------

TITLE: Browsing Messages in ActiveMQ Classic Queue
DESCRIPTION: Demonstrates how to display selected messages in a specified destination using the browse command.

LANGUAGE: bash
CODE:
bin/activemq browse FOO.BAR # use broker connection from configuration
bin/activemq browse --amqurl tcp://localhost:61616 FOO.BAR

----------------------------------------

TITLE: Configuring Connection Details for Artemis Console
DESCRIPTION: This snippet demonstrates how to configure the connection details for the Artemis Console based on the startup message. It includes the host, port, and path information.

LANGUAGE: plaintext
CODE:
Host: localhost
Port: 8161
Path: /console/jolokia

----------------------------------------

TITLE: XML Element Example
DESCRIPTION: Basic XML structure demonstration with a root element

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet demonstrates how to initialize an ActiveMQ object. It shows the basic syntax for creating a new instance of a Java class related to ActiveMQ.

LANGUAGE: java
CODE:
 Somejava s = new SomeJava();

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Running ActiveMQ Classic Producer
DESCRIPTION: Commands to run the ActiveMQ Classic producer example

LANGUAGE: bash
CODE:
$ cd /opt/incubator-activemq-4.0.2/examples
$ ant producer

----------------------------------------

TITLE: Starting Geronimo with Test Configuration
DESCRIPTION: Commands to start the Geronimo application server with the integration test EAR configuration.

LANGUAGE: bash
CODE:
cd geronimo-home
java -jar bin/server.jar org/activemq/ear/itest

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Basic Java code showing object instantiation of SomeJava class.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Setting Consumer-Specific Prefetch Size
DESCRIPTION: Example showing how to set prefetch size for a specific consumer using Destination Options when creating a new ActiveMQ queue consumer.

LANGUAGE: java
CODE:
queue = new ActiveMQQueue("TEST.QUEUE?consumer.prefetchSize=10");
consumer = session.createConsumer(queue);

----------------------------------------

TITLE: Defining Markdown Page Layout for ActiveMQ Documentation
DESCRIPTION: YAML front matter configuration for a documentation page about horizontal scaling in ActiveMQ. Sets up the default markdown layout with classic page styling.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Horizontal Scaling 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Creating JMS Destinations in Tomcat 5.5+
DESCRIPTION: XML configuration for creating JMS Topic and Queue destinations as JNDI resources in Tomcat 5.5 or later versions. This configuration is untested but should work.

LANGUAGE: xml
CODE:
<Context>
    ...
  <Resource name="jms/someTopic" auth="Container" type="org.apache.activemq.command.ActiveMQTopic" description="my Topic"
        factory="org.apache.activemq.jndi.JNDIReferenceFactory" physicalName="FOO.BAR"/>

  <Resource name="jms/aQueue" auth="Container" type="org.apache.activemq.command.ActiveMQQueue" description="my Queue"
        factory="org.apache.activemq.jndi.JNDIReferenceFactory" physicalName="FOO.BAR"/>
    ....
</Context>

----------------------------------------

TITLE: Building WAR Distribution for Servlet Engine Deployment
DESCRIPTION: These commands build a WAR file for deploying the broker in a servlet engine.

LANGUAGE: bash
CODE:
cd example
ant war

----------------------------------------

TITLE: Building ActiveMQ-CPP on Unix
DESCRIPTION: Compiles the ActiveMQ-CPP source code on Unix-like systems using the make command. This builds all core components of the library.

LANGUAGE: bash
CODE:
make

----------------------------------------

TITLE: Configuring XMPP Transport Connector in ActiveMQ Broker
DESCRIPTION: XML configuration snippet showing how to add XMPP transport connector to ActiveMQ broker configuration. The configuration includes OpenWire, STOMP, and XMPP transport connectors with their respective URIs and ports.

LANGUAGE: xml
CODE:
<broker xmlns="http://activemq.org/config/1.0">
  <transportConnectors>
     <transportConnector name="openwire" uri="tcp://localhost:61616" discoveryUri="multicast://default"/>
     <transportConnector name="stomp"    uri="stomp://localhost:61613"/>
     <transportConnector name="xmpp"     uri="xmpp://localhost:61222"/>
  </transportConnectors>
</broker>

----------------------------------------

TITLE: Configuring ActiveMQ XML Structure
DESCRIPTION: This snippet demonstrates a basic XML structure for ActiveMQ configuration. It shows the root element of an XML configuration file.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Running ActiveMQ in Karaf
DESCRIPTION: Commands to run ActiveMQ producer and consumer within an OSGi Karaf environment.

LANGUAGE: bash
CODE:
activemq:producer
activemq:consumer

----------------------------------------

TITLE: SVN Tag Checkout Command for ActiveMQ 5.1.0
DESCRIPTION: Command to check out the source code for ActiveMQ 5.1.0 from SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.1.0

----------------------------------------

TITLE: Markdown Page Front Matter Configuration
DESCRIPTION: YAML front matter configuration for the page layout, title, and type settings.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Thanks
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Configuring Access Rules in Apollo
DESCRIPTION: Example of setting up access control rules for user authorization in Apollo.

LANGUAGE: XML
CODE:
<broker>
  <access_rule deny="guest" action="send"/>
  <access_rule allow="*"    action="send"/>
  <access_rule allow="app1" action="receive"/>
</broker>

----------------------------------------

TITLE: Querying Connections Data
DESCRIPTION: Example of querying the connections data with field selection and filtering

LANGUAGE: bash
CODE:
curl -u "admin:password" \
'http://localhost:61680/broker/connections.json?f=id&f=read_counter'

LANGUAGE: bash
CODE:
curl -u "admin:password" \
'http://localhost:61680/broker/connections.json?q=remote_address%20LIKE%20"/127.0.0.1:%"'

LANGUAGE: bash
CODE:
curl -u "admin:password" \
'http://localhost:61680/broker/connections.json?o=write_counter%20DESC&o=id'

----------------------------------------

TITLE: Configuring Maven Dependency for ActiveMQ 5.4.3
DESCRIPTION: XML configuration for including ActiveMQ 5.4.3 as a dependency in a Maven project. This snippet shows the proper groupId, artifactId, and version to use in the project's POM file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.4.3</version>
</dependency>

----------------------------------------

TITLE: Displaying IOException for Missing Resource in ActiveMQ Classic
DESCRIPTION: This code snippet shows the exception message that occurs when ActiveMQ Classic cannot find a class for a specific resource. The error indicates that the META-INF/services directory is missing from the classpath.

LANGUAGE: java
CODE:
Reason:  java.io.exception : could not find class for resource: META-INF/services/org/apache/activemq/transport/tcp

----------------------------------------

TITLE: Jekyll Front Matter Configuration for ActiveMQ Overview Page
DESCRIPTION: YAML front matter configuration block that sets up the page template and metadata for an ActiveMQ documentation page. Defines the layout, title, title styling class and page type.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Overview
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Configuring Resource Managers in jboss.xml
DESCRIPTION: JBoss-specific configuration linking local resource names to global JNDI names.

LANGUAGE: xml
CODE:
<resource-managers>
   <resource-manager>
      <res-name>queuefactoryref</res-name>
      <res-jndi-name>java:/activemq/QueueConnectionFactory</res-jndi-name>
   </resource-manager>
   ...
</resource-managers>

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.37.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.37.0 release. It includes the version number, release date, title, a short description indicating it's a bug fix release, documentation version, and the required Java version of 11 or higher.

LANGUAGE: yaml
CODE:
version: 2.37.0
release_date: 2024-08-21
title: ActiveMQ Artemis 2.37.0
shortDescription: Bug fix release.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.37.0
java_version: 11+

----------------------------------------

TITLE: Rendering Jekyll News Post Layout in Markdown
DESCRIPTION: Template for rendering news posts in Jekyll using Markdown layout with navigation breadcrumbs and injected content. Uses Liquid templating syntax for dynamic content.

LANGUAGE: markdown
CODE:
---
layout: default_md
---

[News](/news) > [{{page.title}}]({{page.url}})

{{content}}

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure example showing XML tag usage.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configure Command for Static Library Build
DESCRIPTION: Command to configure the build process to use only static libraries as a workaround for unresolved shared library dependencies.

LANGUAGE: shell
CODE:
./configure --enable-shared=no

----------------------------------------

TITLE: Checking out ActiveMQ 5.0.0 Source from SVN
DESCRIPTION: This command demonstrates how to check out the ActiveMQ 5.0.0 source code from the Apache Subversion repository. It uses the svn co command to retrieve the specific tag for version 5.0.0.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.0.0

----------------------------------------

TITLE: Encrypting Passwords for Apollo Configuration
DESCRIPTION: Commands to encrypt passwords for use in Apollo configuration files.

LANGUAGE: Bash
CODE:
$ export APOLLO_ENCRYPTION_PASSWORD='keepmesafe'
$ apollo encrypt open
ENC(6r7HKCib0H8S+OuSfV+muQ==)
$ apollo encrypt sesame
ENC(FP+H2FIg++sSaOxg/ISknw==)

----------------------------------------

TITLE: Configuring MQTT Protocol Connector in Apollo XML
DESCRIPTION: XML configuration for setting up a dedicated MQTT protocol connector in Apollo broker.

LANGUAGE: xml
CODE:
<connector id="tcp" bind="tcp://0.0.0.0:61613" protocol="mqtt"/>

----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ Core Dependency
DESCRIPTION: This XML snippet shows the proper dependency configuration to use ActiveMQ 5.4.2 in a Maven project. It specifies the groupId, artifactId, and version for the activemq-core dependency.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.4.2</version>
</dependency>

----------------------------------------

TITLE: Authenticating API Requests with cURL
DESCRIPTION: Example of how to authenticate API requests using HTTP basic auth with cURL

LANGUAGE: bash
CODE:
$ curl -u "admin:password" http://localhost:61680/broker

----------------------------------------

TITLE: Creating Markdown Table for WCF Downloads in Apache.NMS
DESCRIPTION: This snippet defines a markdown table structure for listing WCF downloads. It includes columns for description, release date, and NMS API revision.

LANGUAGE: markdown
CODE:
|Description|Release Date|NMS API Rev|
|[Apache.NMS.WCF v1.1.0](apachenmswcf-v110)|07/12/2009|v1.1.0|

----------------------------------------

TITLE: Starting ActiveMQ Classic on Windows
DESCRIPTION: Commands to start ActiveMQ Classic on a Windows system. The exact command depends on the version of ActiveMQ Classic being used.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
bin\activemq start

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.21.0 Release in YAML
DESCRIPTION: This YAML configuration defines the metadata for the ActiveMQ Artemis 2.21.0 release. It specifies the version, release date, title, short description, documentation version, and required Java version.

LANGUAGE: yaml
CODE:
version: 2.21.0
release_date: 2022-03-28
title: ActiveMQ Artemis 2.21.0
shortDescription: Max message count for paging, MQTT5, bug fixes and more!
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.21.0
java_version: 11+

----------------------------------------

TITLE: Configuring Maven Dependency for ActiveMQ
DESCRIPTION: This XML snippet shows how to include Apache ActiveMQ as a dependency in a Maven project. It specifies the groupId, artifactId, and version for the activemq-all uber jar.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>{{page.version}}</version>
</dependency>

----------------------------------------

TITLE: Configuring Message Expiry Check Period in ActiveMQ
DESCRIPTION: XML configuration for setting the message expiry check period for topics. This example sets the check period to 5 minutes (300000 milliseconds) for all topics.

LANGUAGE: xml
CODE:
<policyEntry topic=">" expireMessagesPeriod="300000"/>

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: This Java code snippet shows how to create an instance of a class, potentially related to ActiveMQ initialization or usage. It demonstrates object instantiation in Java.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: 32-bit libstdc++.la Configuration File
DESCRIPTION: Configuration file for 32-bit libstdc++ library on Solaris 10, specifying library names, dependencies, and installation parameters. File should be placed at /usr/sfw/lib/libstdc++.la.

LANGUAGE: config
CODE:
# libstdc++.la - a libtool library file
# Generated by ltmain.sh - GNU libtool 1.4a-GCC3.0 (1.641.2.256 2001/05/28 20:09:07 with GCC-local changes)
#
# Please DO NOT delete this file!
# It is necessary for linking the library.

# The name that we can dlopen(3).
dlname='libstdc++.so.6'

# Names of this library.
library_names='libstdc++.so.6.0.3 libstdc++.so.6 libstdc++.so'

# The name of the static archive.
old_library='libstdc++.a'

# Libraries that this one depends upon.
dependency_libs='-lc -lm -L/usr/sfw/lib -lgcc_s'

# Version information for libstdc++.
current=6
age=0
revision=3

# Is this an already installed library?
installed=yes

# Files to dlopen/dlpreopen
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='/usr/sfw/lib'

----------------------------------------

TITLE: Checking out CMS 1.1 from SVN
DESCRIPTION: Command to check out the CMS 1.1 tag from Apache SVN repository. This allows developers to access the exact source code for this release.

LANGUAGE: SVN
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.1/

----------------------------------------

TITLE: Markdown Front Matter and Link Definition
DESCRIPTION: YAML front matter configuration for a Jekyll page and a markdown link to an advisory messages example.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Apache.NMS.ActiveMQ Examples
title-class: page-title-nms
type: nms
---

* [ActiveMQ Enumerate Destination using Advisory Messages](activemq-enumerate-destination-using-advisory-messages)

----------------------------------------

TITLE: Initializing ActiveMQ in Java
DESCRIPTION: Java code snippet for initializing an ActiveMQ-related object. This code demonstrates the creation of a new instance of a class, likely related to ActiveMQ functionality.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Page Layout Configuration in Markdown
DESCRIPTION: Markdown frontmatter configuration defining the page layout, title, and type settings for the ActiveMQ download page.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Download
title-class: page-title-main
type: main
---

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.15.0 Release Metadata in YAML
DESCRIPTION: This YAML configuration specifies the version, release date, title, documentation version, and required Java version for ActiveMQ Artemis 2.15.0. It's likely used for generating documentation or release notes.

LANGUAGE: yaml
CODE:
version: 2.15.0
release_date: 2020-08-31
title: ActiveMQ Artemis 2.15.0
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.15.0
java_version: 8

----------------------------------------

TITLE: Configuring Log4j for KahaDB Cleanup Debugging
DESCRIPTION: Log4j configuration to enable TRACE level logging for KahaDB message database to debug cleanup process. This configuration creates a rolling log file with specific pattern layout and size limitations.

LANGUAGE: properties
CODE:
log4j.appender.kahadb=org.apache.log4j.RollingFileAppender
log4j.appender.kahadb.file=${activemq.base}/data/kahadb.log
log4j.appender.kahadb.maxFileSize=1024KB
log4j.appender.kahadb.maxBackupIndex=5
log4j.appender.kahadb.append=true
log4j.appender.kahadb.layout=org.apache.log4j.PatternLayout
log4j.appender.kahadb.layout.ConversionPattern=%d [%-15.15t] %-5p %-30.30c{1} - %m%n
log4j.logger.org.apache.activemq.store.kahadb.MessageDatabase=TRACE, kahadb

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.5.0 from SVN
DESCRIPTION: Command to checkout the specific tagged version 3.5.0 of ActiveMQ-CPP from Apache SVN repository

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.5.0/

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.20.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.20.0 release. It includes version number, release date, Java version requirement, and a brief description of changes. The configuration also defines documentation versioning information.

LANGUAGE: yaml
CODE:
version: 2.20.0
release_date: 2021-12-21
title: ActiveMQ Artemis 2.20.0
shortDescription: Requires Java 11+. Includes a few bug fixes. There's a known issue, look at the release notes.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.20.0
java_version: 11+

----------------------------------------

TITLE: Initializing Java Object in ActiveMQ
DESCRIPTION: This Java code snippet shows the creation of a new object of the SomeJava class. It demonstrates object instantiation in the context of the ActiveMQ project.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Running ActiveMQ via JAR File
DESCRIPTION: Commands to run ActiveMQ producer and consumer using the activemq-all JAR file.

LANGUAGE: bash
CODE:
java -jar activemq-all-5.x.x.jar producer
java -jar activemq-all-5.x.x.jar consumer

----------------------------------------

TITLE: Checking out CMS 3.9.0 from Git
DESCRIPTION: This snippet shows how to clone the ActiveMQ-CPP repository and checkout the 3.9.0 release tag using Git. It requires Git to be installed on the system.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.0

----------------------------------------

TITLE: High Priority Message Selector
DESCRIPTION: JMS selector expression for filtering high priority messages with priority greater than 6.

LANGUAGE: sql
CODE:
JMSPriority > 6

----------------------------------------

TITLE: Generating SHA-384 Integrity Hash for JavaScript Files
DESCRIPTION: Command to generate a base64-encoded SHA-384 hash for JavaScript files. This hash is used in the integrity attribute of script tags for security verification.

LANGUAGE: shell
CODE:
openssl dgst -sha384 -binary FILE.js | openssl base64 -A

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.14.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.14.0 release. It includes the version number, release date, title, documentation version, and required Java version. This information is likely used for generating documentation or managing the release process.

LANGUAGE: yaml
CODE:
version: 2.14.0
release_date: 2020-07-20
title: ActiveMQ Artemis 2.14.0
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.14.0
java_version: 8

----------------------------------------

TITLE: Starting ActiveMQ with HA Configuration
DESCRIPTION: Command to start ActiveMQ broker with the high-availability configuration file.

LANGUAGE: bash
CODE:
prompt> $ACTIVEMQ_HOME/bin/activemq xbean:ha.xml

----------------------------------------

TITLE: Checking Ant Version
DESCRIPTION: Command to verify the installed Ant version

LANGUAGE: bash
CODE:
$ ant -version

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.9.2 from Git
DESCRIPTION: Git commands to clone the ActiveMQ-CPP repository and checkout the 3.9.2 release tag. This allows developers to access the exact source code for this release version.

LANGUAGE: git
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.2

----------------------------------------

TITLE: Configuring YAML Release Metadata for Apache NMS.AMQP
DESCRIPTION: YAML configuration block defining release metadata for Apache NMS.AMQP 2.0.0, including version number, release date, release notes URL, and description.

LANGUAGE: yaml
CODE:
version: 2.0.0
release_date: 2021-10-27
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311201&version=12349544
title: Apache.NMS.AMQP 2.0.0 Release
shortDescription: NMS 2.0 implementation.

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.7</version>
</dependency>

----------------------------------------

TITLE: Starting ActiveMQ with KahaDB HA Configuration
DESCRIPTION: Command to start an ActiveMQ broker using the high-availability configuration file (ha.xml) located in the ActiveMQ home directory.

LANGUAGE: shell
CODE:
prompt> $ACTIVEMQ_HOME/bin/activemq xbean:ha.xml

----------------------------------------

TITLE: Java Object Initialization in ActiveMQ
DESCRIPTION: Example of instantiating a Java object in ActiveMQ context

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Jekyll Template for ActiveMQ Classic Archives
DESCRIPTION: Jekyll front matter and template code for rendering the ActiveMQ Classic archives page. Uses site.classic_releases collection to generate links to previous release pages.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: ActiveMQ Classic Download Archives 
title-class: page-title-classic
type: classic
---

{% for release in site["classic_releases"] reversed %}
*   [{{release.title}}]({{release.url}}){% endfor %}

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.7.1 from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.7.1 of ActiveMQ-CPP from Apache's source repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.7.1/

----------------------------------------

TITLE: Setting PKG_CONFIG_PATH for Mono on macOS
DESCRIPTION: Sets the PKG_CONFIG_PATH environment variable to include the Mono framework path on macOS systems.

LANGUAGE: bash
CODE:
export PKG_CONFIG_PATH="/Library/Frameworks/Mono.framework/Versions/Current/lib/pkgconfig/:${PKG_CONFIG_PATH}"

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the PGP signatures of downloaded ActiveMQ files using GPG. This process involves importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: SVN Repository Checkout Command
DESCRIPTION: Command to checkout the v1.7.0 tag from Apache ActiveMQ .NET SVN repository

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.0/

----------------------------------------

TITLE: Configuring Prefetch Limit via Connection URI
DESCRIPTION: Examples showing how to configure prefetch limits using ActiveMQ connection URIs. Demonstrates setting global and queue-specific prefetch values.

LANGUAGE: text
CODE:
tcp://localhost:61616?jms.prefetchPolicy.all=50

LANGUAGE: text
CODE:
tcp://localhost:61616?jms.prefetchPolicy.queuePrefetch=1

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.1.3 Source from SVN
DESCRIPTION: SVN command to checkout the tagged version of ActiveMQ-CPP 3.1.3 source code from Apache's repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.0/

----------------------------------------

TITLE: Configuring Apache.NMS.API Release Details in YAML
DESCRIPTION: YAML configuration block specifying metadata for Apache.NMS.API version 1.8.1 release including version number, release date, release notes URL, title and short description.

LANGUAGE: yaml
CODE:
version: 1.8.1
release_date: 2022-05-29
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311201&version=12349546
title: Apache.NMS.API 1.8.1 Release
shortDescription: Maintenance release.

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ 5.15.4 as a dependency in a Maven project using the activemq-all artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.4</version>
</dependency>

----------------------------------------

TITLE: XML Configuration for ActiveMQ
DESCRIPTION: Basic XML configuration example for ActiveMQ settings

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Building ActiveMQ Classic with Maven on Unix
DESCRIPTION: Commands to build ActiveMQ Classic using Maven and Java 5 on a Unix system, including steps for cleaning, testing, and skipping tests if necessary.

LANGUAGE: bash
CODE:
cd [activemq_install_dir]
maven clean test

# If the above build fails on some tests, use:
cd [activemq_install_dir]
maven m:clean
maven -Dmaven.test.skip=true

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.4.4 from SVN
DESCRIPTION: SVN command to checkout the specific tagged version 3.4.4 of ActiveMQ-CPP from the Apache repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.4/

----------------------------------------

TITLE: Visualizing Command Structure in OpenWire V2
DESCRIPTION: Illustrates the basic structure of commands in the OpenWire protocol, showing how multiple commands are transmitted sequentially without delimiters.

LANGUAGE: text
CODE:
+---------+  +---------+      +---------+
| command |  | command | .... | command |
+---------+  +---------+      +---------+

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ files using PGP or GPG signatures. These commands demonstrate different methods of signature verification using pgpk, pgp, or gpg.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.ActiveMQ v1.5.4
DESCRIPTION: Command to checkout the source code for Apache.NMS.ActiveMQ version 1.5.4 from the Apache Subversion repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.4/

----------------------------------------

TITLE: Creating and Setting Values in BlazeMessage (Java)
DESCRIPTION: Demonstrates how to create a BlazeMessage object and set a float value using the setFloatValue method. This snippet shows the basic usage of BlazeMessage for storing key-value pairs.

LANGUAGE: Java
CODE:
import org.apache.activeblaze.*;
...

BlazeMessage msg = new BlazeMessage();
msg.setFloatValue("rate",0.94f);

----------------------------------------

TITLE: Verifying PGP Signatures with Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ distributions using PGP or GPG signatures.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Throwable Encoding in OpenWire V2
DESCRIPTION: Demonstrates the encoding structure for Throwable fields, including optional stack trace information.

LANGUAGE: text
CODE:
             [=If not-null is 1===========================================================================]
             [                               [=If StackTraceEnabled option is enabled.==================] ]
             [                               [             [=Repeated size times======================] ] ]
+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]
| not-null | [ | exception-name | message |  [ | size  | [ | class  | method | file   | line-number | ] ] ]
+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]
| byte     | [ | string         | string  |  [ | short | [ | string | string | string | int         | ] ] ]
+----------+ [ +----------------+---------+  [ +-------+ [ +--------+--------+--------+-------------+ ] ] ]
             [                               [           [============================================] ] ]
             [                               [==========================================================] ]
             [============================================================================================]

----------------------------------------

TITLE: Adding ActiveMQ Dependency to Maven POM (XML)
DESCRIPTION: XML snippet for adding the ActiveMQ dependency to a Maven project's POM file. This includes the groupId, artifactId, and version for the activemq-all uber jar.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.0</version>
</dependency>

----------------------------------------

TITLE: Configuring XML for ActiveMQ
DESCRIPTION: This XML snippet demonstrates a basic configuration structure for ActiveMQ. It includes a root 'xml' element with some content.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Running ActiveMQ Broker with Custom URL using Java
DESCRIPTION: This command runs the ActiveMQ broker with a custom URL using Java.

LANGUAGE: bash
CODE:
java org.activemq.broker.impl.Main tcp://localhost:61626

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.4.1 Source from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.4.1 of ActiveMQ-CPP from the Apache repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.1/

----------------------------------------

TITLE: Wire Format Negotiation in OpenWire V2
DESCRIPTION: Shows the initial exchange of WIREFORMAT_INFO command followed by subsequent commands in an OpenWire session.

LANGUAGE: text
CODE:
+-------------------------+ +---------+  +---------+      +---------+
| WIREFORMAT_INFO command | | command |  | command | .... | command |
+-------------------------+ +---------+  +---------+      +---------+

----------------------------------------

TITLE: Verifying PGP Signatures using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ files using PGP or GPG signatures. Shows three different verification methods using pgpk, pgp, or gpg.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ 1.4.0 from SVN
DESCRIPTION: Command to check out the Apache.NMS.ActiveMQ 1.4.0 tag from the Apache Subversion repository. This allows developers to access the exact source code used for the 1.4.0 release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.4.0/

----------------------------------------

TITLE: Verifying PGP Signatures using gpg
DESCRIPTION: Commands for verifying PGP signatures of downloaded ActiveMQ distributions using gpg utility

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Cached Nested Command Encoding in OpenWire V2
DESCRIPTION: Illustrates the encoding structure for cached nested commands, which can reduce wire size for repeated objects.

LANGUAGE: text
CODE:
[=If CacheEnabled option is enabled=====================]
[                       [=If new-value is 1===========] ]
[ +-----------+-------+ [ +-------------------------+ ] ]
[ | new-value | key   | [ | command-specific-fields | ] ]
[ +-----------+-------+ [ +-------------------------+ ] ]
[ | byte      | short | [ | nested-object           | ] ]
[ +-----------+-------+ [ +-------------------------+ ] ]
[                       [=============================] ]
[=====================================================] ]

[=If CacheEnabled option is disabled =]
[ +-------------------------+         ]
[ | command-specific-fields |         ]
[ +-------------------------+         ]
[ | nested-object           |         ]
[ +-------------------------+         ]
[=====================================]

----------------------------------------

TITLE: Defining Maven Dependency for ActiveMQ 5.13.2
DESCRIPTION: XML snippet for including ActiveMQ 5.13.2 as a dependency in a Maven POM file. This uses the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.13.2</version>
</dependency>

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure example showing generic XML element.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Configuring Reliable Transport for ActiveMQ Connection
DESCRIPTION: This URI configuration enables automatic reconnection in case of broker failure.

LANGUAGE: bash
CODE:
reliable:tcp://host:port

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.ActiveMQ v1.6.2
DESCRIPTION: Command to checkout the specific version tag from Apache SVN repository for Apache.NMS.ActiveMQ version 1.6.2.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.2/

----------------------------------------

TITLE: Implementing Repeated Message Delivery in ActiveMQ with C#
DESCRIPTION: Shows how to schedule a message with an initial delay of 30 seconds, followed by 9 repeated deliveries with 10-second intervals between each delivery.

LANGUAGE: csharp
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
long delay = 30 * 1000;
long period = 10 * 1000;
int repeat = 9;
message.Properties["AMQ_SCHEDULED_DELAY"] = delay;
message.Properties["AMQ_SCHEDULED_PERIOD"] = period;
message.Properties["AMQ_SCHEDULED_REPEAT"] = repeat;
producer.Send(message);

----------------------------------------

TITLE: Verifying PGP Signatures in Bash
DESCRIPTION: Commands for verifying PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.9.5 from Git
DESCRIPTION: These commands clone the ActiveMQ-CPP repository and checkout the 3.9.5 release tag. This allows developers to access the exact source code for this specific version.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.5

----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ 5.4.0 Dependency
DESCRIPTION: XML snippet for including ActiveMQ 5.4.0 as a dependency in a Maven project's POM file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.4.0</version>
</dependency>

----------------------------------------

TITLE: Command Encoding Structure in OpenWire V2
DESCRIPTION: Illustrates the structure of encoded commands, including an optional size prefix and the command type identifier.

LANGUAGE: text
CODE:
[=If SizePrefixDisabled =] 
[ option is not enabled. ]
[ +------+               ] +------+-------------------------+
[ | size |               ] | type | command-specific-fields |
[ +------+               ] +------+-------------------------+
[ | int  |               ] | byte | (size-1) octects        |
[ +------+               ] +------+-------------------------+
[========================]

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using GPG. This includes importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: SVN Tag Checkout for Apache.NMS.WCF v1.1.0
DESCRIPTION: Command to checkout the SVN tag for Apache.NMS.WCF version 1.1.0 from the Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.WCF/tags/1.1.0/

----------------------------------------

TITLE: Displaying ActiveMQ Classic Packet Reader Error
DESCRIPTION: This code snippet shows the error message that occurs when there's a mismatch in ActiveMQ Classic versions between client and broker.

LANGUAGE: plaintext
CODE:
Could not find PacketReader for packet type: UNKNOWN PACKET TYPE: -102

----------------------------------------

TITLE: SVN Checkout for Apache.NMS ActiveMQ v1.1.0
DESCRIPTION: Command to checkout the tagged version 1.1.0 of Apache.NMS.ActiveMQ from SVN repository. This allows developers to access the exact source code for this release.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.ActiveMQ/tags/1.1.0/

----------------------------------------

TITLE: Using CRON Scheduling in ActiveMQ with C#
DESCRIPTION: Demonstrates how to schedule message delivery using CRON expression for hourly delivery.

LANGUAGE: csharp
CODE:
IMessageProducer producer = session.CreateProducer(destination);
ITextMessage message = session.CreateTextMessage("test msg");
message.Properties["AMQ_SCHEDULED_CRON"] = "0 * * * *";
producer.Send(message);

----------------------------------------

TITLE: Declaring ActiveMQ Dependency in Maven POM
DESCRIPTION: XML snippet for declaring a dependency on ActiveMQ 5.13.3 in a Maven project's POM file. This dependency includes the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.13.3</version>
</dependency>

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 3.9.3 from Git
DESCRIPTION: Commands to clone the ActiveMQ-CPP repository and checkout version 3.9.3 tag. This allows developers to access the exact source code for this release.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.9.3

----------------------------------------

TITLE: Declaring Maven Dependency for ActiveMQ 5.15.3
DESCRIPTION: XML snippet for including ActiveMQ 5.15.3 as a dependency in a Maven POM file.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.3</version>
</dependency>

----------------------------------------

TITLE: Advisory Destination Constants in ActiveMQ Classic 3
DESCRIPTION: Constants for different types of advisory message destinations in ActiveMQ, including consumer, producer, connection, and temporary destination prefixes.

LANGUAGE: java
CODE:
ActiveMQDestination.CONSUMER_ADVISORY_PREFIX
ActiveMQDestination.PRODUCER_ADVISORY_PREFIX
ActiveMQDestination.CONNECTION_ADVISORY_PREFIX
ActiveMQDestination.TEMP_DESTINATION_ADVISORY_PREFIX

----------------------------------------

TITLE: Verifying PGP Signatures using pgpk
DESCRIPTION: Commands for verifying PGP signatures of downloaded ActiveMQ distributions using pgpk utility

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out Apache.NMS.MSMQ v1.1.0 from SVN
DESCRIPTION: This command allows developers to check out the Apache.NMS.MSMQ v1.1.0 tag from the Apache Subversion repository. It retrieves the specific version of the source code associated with this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.MSMQ/tags/1.1.0/

----------------------------------------

TITLE: Generate Eclipse Project Files (Maven 1)
DESCRIPTION: Maven 1 command to generate Eclipse IDE project files for older versions of ActiveMQ Classic.

LANGUAGE: bash
CODE:
maven eclipse

----------------------------------------

TITLE: Configuring Apache NMS API Release Details in YAML
DESCRIPTION: YAML configuration block defining metadata for Apache.NMS.API version 2.0.0 release including version number, release date, release notes URL and description.

LANGUAGE: yaml
CODE:
version: 2.0.0
release_date: 2021-07-03
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311201&version=12349543
title: Apache.NMS.API 2.0.0 Release
shortDescription: This release brings NMS 2.0 support.

----------------------------------------

TITLE: Compiling ActiveMQ-CPP example on Unix
DESCRIPTION: Demonstrates how to manually compile an example application using ActiveMQ-CPP on Unix-like systems. This command links against the necessary libraries and includes.

LANGUAGE: bash
CODE:
g++ -o main -pthread -I ../main main.cpp ../../src/main/.libs/libactivemq-cpp.a -luuid -I /usr/include/apr-1.0/ -lssl -lcrypto -lapr-1

----------------------------------------

TITLE: SVN Source Code Checkout Command
DESCRIPTION: Command to check out the ActiveMQ 5.6.0 source code from SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.6.0

----------------------------------------

TITLE: Generating ActiveMQ Artemis Release Info with Liquid Templates
DESCRIPTION: Liquid template that renders release information including version, date, documentation links, and download URLs with verification files. The template handles both current and archived releases with conditional logic.

LANGUAGE: liquid
CODE:
{% assign docs_version = include.release.docs_version %}
{% assign java_version = include.release.java_version %}
{% if include.latest_docs %}
  {% assign docs_version = "latest" %}
{% endif %}
#### ActiveMQ Artemis {{include.release.version}}  ({{include.release.release_date | date_to_string: "ordinal", "US"}})
[Release Notes](release-notes-{{include.release.version}}) | [Git Report](commit-report-{{include.release.version}}) | [Documentation:](../documentation/{{docs_version}}) [HTML](../documentation/{{docs_version}}) / [PDF](../documentation/{{docs_version}}/book.pdf) |{% if include.examples_link %} [Examples](https://github.com/apache/activemq-artemis-examples/) |{% endif %} Java compatibility: **{{java_version}}**

{% if include.is_current_release %}
tar.gz:|[apache-artemis-{{include.release.version}}-bin.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.asc)
ZIP:|[apache-artemis-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.asc)
Source Distribution:|[apache-artemis-{{include.release.version}}-source-release.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz&action=download)|[SHA512](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.sha512)|[GPG Signature](https://downloads.apache.org/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.asc)|
{% else %}
tar.gz:|[apache-artemis-{{include.release.version}}-bin.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.tar.gz.asc)
ZIP:|[apache-artemis-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-bin.zip.asc)
Source Distribution:|[apache-artemis-{{include.release.version}}-source-release.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz)|[SHA512](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.sha512)|[GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis/{{include.release.version}}/apache-artemis-{{include.release.version}}-source-release.tar.gz.asc)|
{% endif %}

----------------------------------------

TITLE: Checking Out ActiveMQ 5.2.0 Source from SVN
DESCRIPTION: SVN command to check out the source code for ActiveMQ 5.2.0 from the Apache SVN repository. This command retrieves the tagged version of the source code.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.2.0

----------------------------------------

TITLE: Disabling ObjectMessage Serialization in ActiveMQ Classic 4.x
DESCRIPTION: This code snippet demonstrates how to disable automatic serialization of ObjectMessage payloads in ActiveMQ Classic 4.x. It sets the objectMessageSerializationDefered flag to true on the ActiveMQConnectionFactory.

LANGUAGE: java
CODE:
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
factory.setObjectMessageSerializationDefered(true);

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ files using PGP or GPG signatures. Shows three different approaches using pgpk, pgp, and gpg commands.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.EMS v1.1.0
DESCRIPTION: SVN command to check out the tagged v1.1.0 release of Apache.NMS.EMS from the Apache repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-net/Apache.NMS.EMS/tags/1.1.0/

----------------------------------------

TITLE: Configuring NMS Connection Factory with Failover Support
DESCRIPTION: Shows how to configure connection factory with failover transport option for improved reliability.

LANGUAGE: csharp
CODE:
var cf = new NMSConnectionFactory("stomp:failover:tcp://localhost:61613");

LANGUAGE: csharp
CODE:
var cf = new Apache.NMS.Stomp.ConnectionFactory("failover:tcp://localhost:61613");

----------------------------------------

TITLE: Generating ActiveMQ Artemis Console Release Information in Markdown
DESCRIPTION: This snippet generates a markdown table with download links, checksums, and signatures for the ActiveMQ Artemis Console release. It uses Jekyll/Liquid templating to dynamically insert version numbers and release dates, and conditionally displays different download links based on whether it's the current release or an archived version.

LANGUAGE: markdown
CODE:
#### ActiveMQ Artemis Console {{include.release.version}}  ({{include.release.release_date | date_to_string: "ordinal", "US"}})
[Release Notes](release-notes-{{include.release.version}}) | [Documentation](../documentation/)

{% if include.is_current_release %}
tar.gz | [apache-artemis-console-{{include.release.version}}-bin.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.asc)|
ZIP | [apache-artemis-console-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.asc)|
Source tar.gz | [apache-artemis-console-{{include.release.version}}-source-release.tar.gz](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.asc)|
Source ZIP | [apache-artemis-console-{{include.release.version}}-source-release.zip](https://www.apache.org/dyn/closer.cgi?filename=activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip&action=download) | [SHA512](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.sha512) | [GPG Signature](https://downloads.apache.org/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.asc)|
{% else %}
tar.gz | [apache-artemis-console-{{include.release.version}}-bin.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.tar.gz.asc) |
ZIP | [apache-artemis-console-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-bin.zip.asc) |
Source tar.gz | [apache-artemis-console-{{include.release.version}}-source-release.tar.gz](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.tar.gz.asc) |
Source ZIP | [apache-artemis-console-{{include.release.version}}-source-release.zip](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip) | [SHA512](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.sha512) | [GPG Signature](https://archive.apache.org/dist/activemq/activemq-artemis-console/{{include.release.version}}/apache-artemis-console-{{include.release.version}}-source-release.zip.asc)|
{% endif %}

----------------------------------------

TITLE: Configuring Tomcat Context for ActiveMQ Artemis Console
DESCRIPTION: XML configuration snippet for setting up the ActiveMQ Artemis Console context in Tomcat's server.xml file.

LANGUAGE: xml
CODE:
<Context path="/console" docBase="/myapps/artemis-console-war.war"/>

----------------------------------------

TITLE: Verifying PGP Signatures in Unix/Linux
DESCRIPTION: Commands for verifying the PGP signatures of downloaded ActiveMQ distributions using pgpk, pgp, or gpg tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Rendering Dynamic Release Cards with Jekyll/Liquid
DESCRIPTION: Template that generates a card-based layout for displaying the latest 3 releases of ActiveMQ components. It handles different component types (Artemis, Artemis Console, NMS API, NMS AMQP) with specific routing logic for each type. Each card includes the release title, short description, and release date.

LANGUAGE: html
CODE:
{% assign releases = site.documents %} {% assign releases = releases | sort: "release_date" | reverse %}
<div class="row align-middle">
{% assign i = 0 %}
<div class="card-group w-100">
{% for release in releases %} {% if i > 2 %} {% break %} {% endif %}
<div class="card card-grey-small">
<div class="card-body ml-0 p-2">
{% if release.collection contains "artemis_console" %}
    <h6 class="card-title"><a class="text-blue" href="{{site.baseurl}}/components/artemis-console/download/">{{release.title}}</a></h6>
{% elsif release.collection contains "artemis" %}
    <h6 class="card-title"><a class="text-blue" href="{{site.baseurl}}/components/artemis/download/">{{release.title}}</a></h6>
{% elsif release.collection contains "nms_api" %}
    <h6 class="card-title"><a class="text-blue" href="{{site.baseurl}}/components/nms/nms-api-downloads">{{release.title}}</a></h6>
{% elsif release.collection contains "nms_amqp" %}
    <h6 class="card-title"><a class="text-blue" href="{{site.baseurl}}/components/nms/providers/amqp/downloads/">{{release.title}}</a></h6>
{% else %}
    <h6 class="card-title"><a class="text-blue" href="{{release.url}}">{{release.title}}</a></h6>
{% endif %}

{% if release.collection contains "artemis_console" %}
    {{release.shortDescription }}<a style="display: unset;" class="nav-link pl-0 ml-0" href="{{site.baseurl}}/components/artemis-console/download/">...more</a>
{% elsif release.collection contains "artemis" %}
    {{release.shortDescription }}<a style="display: unset;" class="nav-link pl-0 ml-0" href="{{site.baseurl}}/components/artemis/download/">...more</a>
{% elsif release.collection contains "nms_api" %}
    {{release.shortDescription }}<a style="display: unset;" class="nav-link pl-0 ml-0" href="{{site.baseurl}}/components/nms/nms-api-downloads">...more</a>
{% elsif release.collection contains "nms_amqp" %}
    {{release.shortDescription }}<a style="display: unset;" class="nav-link pl-0 ml-0" href="{{site.baseurl}}/components/nms/providers/amqp/downloads/">...more</a>
{% else %}
    {{release.shortDescription }}<a style="display: unset;" class="nav-link pl-0 ml-0" href="{{release.url}}">...more</a>
{% endif %}
    <p class="small text-muted text-right font-italic mb-0">{{release.release_date | date_to_string: "ordinal", "US" }}</p>
</div>
</div>
{% assign i = i | plus:1 %}
{% endfor %}
</div>
</div>

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ distributions using PGP or GPG signatures.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Log4j Missing Appenders Error Message
DESCRIPTION: Standard warning message that appears when Log4j is not properly initialized in an ActiveMQ application. This typically occurs when no log4j.properties file is present in the classpath.

LANGUAGE: text
CODE:
log4j:WARN No appenders could be found for logger\n(org.activemq.transport.tcp.TcpTransportChannel).\nlog4j:WARN Please initialize the log4j system properly.

----------------------------------------

TITLE: Verifying PGP Signatures using Command Line Tools
DESCRIPTION: Commands for verifying PGP signatures of ActiveMQ distributions using pgpk, pgp, or gpg tools. These commands help ensure the integrity of downloaded files.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.7.0 Source from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.7.0 of ActiveMQ-CPP from Apache's SVN repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.7.0/

----------------------------------------

TITLE: Creating an Apollo Broker Instance
DESCRIPTION: Command to create a new Apollo broker instance in a specified directory.

LANGUAGE: Bash
CODE:
cd /var/lib
apollo create mybroker

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG/PGP
DESCRIPTION: This snippet demonstrates the commands to verify PGP signatures for ActiveMQ downloads using GPG or PGP. It includes steps to import the KEYS file and verify the signature of the downloaded file.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify <file-name>.asc <file-name>

$ pgpk -a KEYS
$ pgpv <file-name>.asc

$ pgp -ka KEYS
$ pgp <file-name>.asc

----------------------------------------

TITLE: Declaring Maven Dependency for ActiveMQ 5.15.2
DESCRIPTION: XML snippet for declaring a Maven dependency on the ActiveMQ 5.15.2 release. This dependency includes the activemq-all artifact, which is an uber jar containing all ActiveMQ components.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.2</version>
</dependency>

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ 5.3.0 Source
DESCRIPTION: Subversion command to check out the source code for ActiveMQ 5.3.0 from the Apache SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.3.0

----------------------------------------

TITLE: Verifying SHA-512 Checksum for ActiveMQ Downloads
DESCRIPTION: This snippet shows how to verify the SHA-512 checksum of a downloaded ActiveMQ file using the sha512sum command. It compares the calculated checksum with the provided checksum file.

LANGUAGE: bash
CODE:
$ sha512sum -c <file-name>.sha512

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ CMS 2.2.6
DESCRIPTION: Command to check out the specific version tag for ActiveMQ CMS 2.2.6 from Apache SVN repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.6/

----------------------------------------

TITLE: JMS Session Creation Error Example
DESCRIPTION: Error stack trace showing NoSuchMethodError when attempting to create a consumer using JMS 1.1 methods with JMS 1.0.2b API on classpath

LANGUAGE: java
CODE:
java.lang.NoSuchMethodError:
javax.jms.Session.createConsumer(Ljavax/jms/Destination;)Ljavax/jms/MessageConsumer;

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads (Bash)
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ download files using pgpk, pgp, or gpg on Unix-like systems.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.4.5 Source from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.4.5 of ActiveMQ-CPP source code from Apache's SVN repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.5/

----------------------------------------

TITLE: Requesting JSON Response with cURL
DESCRIPTION: Examples of how to request JSON responses from the API using cURL

LANGUAGE: bash
CODE:
$ curl -H "Accept: application/json" -u "admin:password" \
http://localhost:61680/broker

LANGUAGE: bash
CODE:
$ curl -u "admin:password" http://localhost:61680/broker.json

----------------------------------------

TITLE: Conditional Version Warning Display
DESCRIPTION: HTML alert that displays a warning message for older release versions, including a link to the current release download page. Only shown when isCurrentRelease is false.

LANGUAGE: liquid
CODE:
{% unless isCurrentRelease %}
<div class="alert alert-warning">
  This is an older release. To get the current release, please see the <a href="{{site.baseurl}}/components/nms/providers/amqp/downloads" class="alert-link">download page</a>.
</div>
{% endunless %}

----------------------------------------

TITLE: Declaring Maven Dependency for ActiveMQ 5.13.1
DESCRIPTION: XML snippet for declaring a Maven dependency on the ActiveMQ 5.13.1 all-in-one JAR. This dependency can be used in a Maven POM file to include ActiveMQ in a project.

LANGUAGE: XML
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.13.1</version>
</dependency>

----------------------------------------

TITLE: Checking out Apache.NMS.Stomp v1.2.0 from SVN
DESCRIPTION: This command allows users to check out the Apache.NMS.Stomp v1.2.0 source code from the Apache Subversion repository. It retrieves the specific tagged version of the library.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.2.0/

----------------------------------------

TITLE: Vulnerable Method Reference in JMS Specification
DESCRIPTION: The vulnerable method getObject() from javax.jms.ObjectMessage interface that allows potentially unsafe deserialization of objects from untrusted input.

LANGUAGE: java
CODE:
readObject(java.io.ObjectInputStream in)

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ CMS 2.0.1
DESCRIPTION: This command allows developers to check out the source code for ActiveMQ CMS 2.0.1 from the Apache Subversion repository. It retrieves the specific tagged version of the code.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.0.1/

----------------------------------------

TITLE: JBoss Resource Adapter Deployment Error in ActiveMQ 3.0
DESCRIPTION: Stack trace showing the NoSuchMethodException that occurs when JBoss attempts to set the UseEmbeddedBroker property on the ActiveMQ Resource Adapter. This error indicates incompatibility with ActiveMQ version 3.0.

LANGUAGE: java
CODE:
2005-08-14 17:18:45,618 ERROR [org.jboss.resource.deployment.RARDeployment] Starting failed jboss.jca:service=RARDeployment,name='activemq-ra-3.0.rar' org.jboss.deployment.DeploymentException: Error for resource adapter class org.activemq.ra.ActiveMQResourceAdapter accessing property setter ConfigPropertyMetaData@e62121[name=UseEmbeddedBroker type=java.lang.Boolean value=false descriptions=[DescriptionMetaData@1ad093c[language=en description=Boolean to configure if the connector should create an embedded broker.]]]; - nested throwable: (java.lang.NoSuchMethodException: org.activemq.ra.ActiveMQResourceAdapter.setUseEmbeddedBroker(java.lang.Boolean))
        at org.jboss.deployment.DeploymentException.rethrowAsDeploymentException(DeploymentException.java:39)
        at org.jboss.resource.deployment.ResourceAdapterFactory.createResourceAdapter(ResourceAdapterFactory.java:90)
        at org.jboss.resource.deployment.RARDeployment.startService(RARDeployment.java:101)
        at org.jboss.system.ServiceMBeanSupport.jbossInternalStart(ServiceMBeanSupport.java:272)
        at org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:222)
        at org.jboss.system.ServiceDynamicMBeanSupport.invoke(ServiceDynamicMBeanSupport.java:110)
        at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:150)
        at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:644)
        at org.jboss.system.ServiceController$ServiceProxy.invoke(ServiceController.java:897)

----------------------------------------

TITLE: Checking Out ActiveMQ Classic 5.8.0 Source from SVN
DESCRIPTION: SVN command to check out the source code for ActiveMQ Classic 5.8.0 from the Apache Subversion repository. This allows developers to access and work with the source code directly.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.8.0

----------------------------------------

TITLE: Checking out CMS 3.2.5 from SVN
DESCRIPTION: Command to checkout the CMS 3.2.5 release tag from Apache Subversion (SVN) repository. This allows developers to access the exact source code for this specific release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.5/

----------------------------------------

TITLE: Retrieving Virtual Host Queue Status
DESCRIPTION: Example of retrieving status for a specific queue on a virtual host

LANGUAGE: bash
CODE:
curl -u "admin:password" http://localhost:61680/broker/virtual-hosts/default/queues/example-5.json?producers=true&consumers=true

----------------------------------------

TITLE: Displaying Current ActiveMQ Artemis Console Release in Markdown/Liquid
DESCRIPTION: This snippet iterates through the current releases and displays information for the latest ActiveMQ Artemis Console release using a custom include file.

LANGUAGE: markdown
CODE:
{% assign reversed_releases = site["artemis_console_releases"] | reverse %}
{% if reversed_releases.size > 1 %}
This is the current ActiveMQ Artemis Console release. For prior releases, please see the <a href="past_releases">past releases</a> page.

{% endif %}
It is important to [verify the integrity](#verify-the-integrity-of-downloads) of the files you download.

{% for current_release_prefix in site.data.current_releases["artemis_console"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
{% include artemis_console_release.md release=release is_current_release=true %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

----------------------------------------

TITLE: Configuring ActiveMQ 5.3.2 Dependency in Maven POM
DESCRIPTION: XML snippet for including ActiveMQ 5.3.2 as a dependency in a Maven project's POM file. This configuration specifies the group ID, artifact ID, and version for the ActiveMQ core library.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.3.2</version>
</dependency>

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.Stomp v1.5.2
DESCRIPTION: Command to checkout the specific 1.5.2 tagged version of Apache.NMS.Stomp from the Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.2/

----------------------------------------

TITLE: Template: PMC Member Invitation Email
DESCRIPTION: Template for inviting approved candidates to join the ActiveMQ Project Management Committee

LANGUAGE: email
CODE:
To: <INVITEE EMAIL>\nCc: [private@activemq.apache.org]\nSubject: Invitation to join the Apache ActiveMQ Project Management Committee\n\n<INVITEE>,\nIn recognition of your continued contributions to the project, the Apache ActiveMQ PMC has voted to offer you membership to the PMC. I am writing on behalf of the PMC to give you the opportunity to either accept or reject this offer by replying to [private@activemq.apache.org].\n\nIn making your decision, please see the following URL for more information on PMCs:\n\n[https://www.apache.org/dev/pmc.html]\n\nIf you have questions before making a decision, please let us know.

----------------------------------------

TITLE: Checking out ActiveMQ C++ 2.2 from SVN
DESCRIPTION: Command to checkout the tagged version 2.2 of ActiveMQ C++ from Apache SVN repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2/

----------------------------------------

TITLE: Configuring Usage Manager in ActiveMQ XML Configuration
DESCRIPTION: Example reference to XML configuration for adjusting the usage manager settings to prevent producer blocking. The default memory limit is 20MB and can be increased to larger values like 512MB to accommodate more in-transit messages.

LANGUAGE: xml
CODE:
<usageManager>
    <!-- Configure memory settings here -->
</usageManager>

----------------------------------------

TITLE: Configuring Maven Dependency for ActiveMQ 5.2.0
DESCRIPTION: XML configuration for including ActiveMQ 5.2.0 as a dependency in a Maven project's POM file. This snippet specifies the groupId, artifactId, and version for the activemq-core artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.2.0</version>
</dependency>

----------------------------------------

TITLE: Checking out ActiveMQ-CPP 2.2.2 from SVN
DESCRIPTION: This command allows users to check out the ActiveMQ-CPP 2.2.2 source code from the Apache Subversion repository. It retrieves the specific tagged version of the project.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.2/

----------------------------------------

TITLE: Installing Ruby Stomp Client via RubyGems
DESCRIPTION: Command to install the Ruby Stomp client package using the RubyGems package manager.

LANGUAGE: shell
CODE:
gem install stomp

----------------------------------------

TITLE: Setting Tomcat Options for ActiveMQ Artemis Console
DESCRIPTION: Shell command to set Tomcat options, disabling Hawtio authentication for the ActiveMQ Artemis Console.

LANGUAGE: shell
CODE:
export CATALINA_OPTS="-Dhawtio.authenticationEnabled=false"

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.15.6</version>
</dependency>

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.2.0 from SVN
DESCRIPTION: Command to checkout the Apache.NMS.ActiveMQ v1.2.0 tag from the Apache Subversion repository. This allows developers to access the exact source code used for the 1.2.0 release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.2.0/

----------------------------------------

TITLE: Template: Committer Vote Email
DESCRIPTION: Template for formal voting on new committer invitation after discussion period

LANGUAGE: email
CODE:
To: [private@activemq.apache.org]\nSubject: [VOTE] Offer <CANDIDATE> to become an ActiveMQ committer\n\nAfter positive discussion about <CANDIDATE>'s contributions to the project, I would like to initiate a formal vote.\n\nConsidering <INSERT EVIDENCE HERE> as raised in the discussion thread...\n\nThis vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)The vote will be open for 72 hours.\n\n[ ] +1 Accept <CANDIDATE> as a committer of Apache ActiveMQ\n[ ] +0\n[ ] -1 Do not accept at this time because...

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ CMS 2.0
DESCRIPTION: Command to checkout the specific tag for ActiveMQ CMS 2.0 from Apache SVN repository

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.0/

----------------------------------------

TITLE: Note on Creating ActiveMQ Destinations
DESCRIPTION: The content provides text explanations about destination creation but does not contain any actual code snippets. It describes conceptual information about how ActiveMQ Classic handles destination creation automatically.



----------------------------------------

TITLE: Configuring Maven POM for ActiveMQ 5.0.0 Dependency
DESCRIPTION: This XML snippet shows how to add the ActiveMQ 5.0.0 dependency to a Maven project's POM file. It specifies the groupId, artifactId, and version for the activemq-core artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.0.0</version>
</dependency>

----------------------------------------

TITLE: Checking out ActiveMQ CMS 1.1 from SVN
DESCRIPTION: This command checks out the source code for ActiveMQ CMS 1.1 from the Apache Subversion repository. It retrieves the tagged version corresponding to the 1.1 release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-1.1/

----------------------------------------

TITLE: Running Apollo Publisher Script (Unix/Linux/OS X)
DESCRIPTION: Commands to navigate to the Ruby examples directory and run the publisher script on Unix-based systems.

LANGUAGE: bash
CODE:
cd ${APOLLO_HOME}/examples/stomp/ruby
ruby publisher.rb

----------------------------------------

TITLE: Running Apollo Publisher Script (Windows)
DESCRIPTION: Commands to navigate to the Ruby examples directory and run the publisher script on Windows systems.

LANGUAGE: batch
CODE:
cd %APOLLO_HOME%\examples\stomp\ruby
ruby publisher.rb

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.6.0
DESCRIPTION: XML configuration for including ActiveMQ Core 5.6.0 as a dependency in Maven projects.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.6.0</version>
</dependency>

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.7.1 from SVN
DESCRIPTION: Command to checkout the SVN tag for Apache.NMS.ActiveMQ version 1.7.1 from the Apache repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.7.1/

----------------------------------------

TITLE: Template: Committer Discussion Email
DESCRIPTION: Template for initiating discussion about inviting a new committer to the ActiveMQ project

LANGUAGE: email
CODE:
To: [private@activemq.apache.org]\nSubject: [DISCUSS] Invite <CANDIDATE> to become an ActiveMQ committer\n\nConsidering <CANDIDATE>'s contributions to the ActiveMQ project...<INSERT EVIDENCE HERE>\n\nBased on this person's contributions above, I think we should invite <CANDIDATE> to become a committer.\n\nPlease remember that this is not a vote for this person to become a committer, at this point it is only a discussion.

----------------------------------------

TITLE: Checking out CMS 3.2.2 from SVN
DESCRIPTION: Command to checkout the CMS 3.2.2 release tag from Apache Subversion (SVN) repository. This allows developers to access the exact source code used for the 3.2.2 release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.2/

----------------------------------------

TITLE: Defining Page Layout in Markdown
DESCRIPTION: Front matter configuration for a documentation page that defines the layout, title and page type for running an ActiveMQ broker.

LANGUAGE: markdown
CODE:
---
layout: default_md
title: Running a broker 
title-class: page-title-classic
type: classic
---

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.29.0 Release Details in YAML
DESCRIPTION: YAML configuration block specifying version number, release date, documentation version, and Java requirements for ActiveMQ Artemis 2.29.0. Includes a short description highlighting bug fixes and improvements to Large Message handling.

LANGUAGE: yaml
CODE:
version: 2.29.0
release_date: 2023-06-19
title: ActiveMQ Artemis 2.29.0
shortDescription: Bug fixes, enhancements. Large Message handling improved a lot!
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.29.0
java_version: 11+

----------------------------------------

TITLE: Configuring ActiveMQ 5.16.6 Release Details in YAML
DESCRIPTION: YAML configuration block defining the release specifications for ActiveMQ Classic 5.16.6, including version number, release notes URL, release date, Java version requirements, and description.

LANGUAGE: yaml
CODE:
version: 5.16.6
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12351793
release_date: 2023-02-16
title: ActiveMQ Classic 5.16.6 Release
java_version: 8+
shortDescription: Important release, including several improvements, fixes, and dependency updates.
redirect_from:
- /../../../activemq-5016006-release

----------------------------------------

TITLE: Creating Connector Connection Pool for ActiveMQ in Glassfish
DESCRIPTION: Command to create a connector connection pool for ActiveMQ in Glassfish. This pool is used for managing connections to the ActiveMQ broker.

LANGUAGE: bash
CODE:
bin/asadmin create-connector-connection-pool \
  --raname activemq-rar \
  --connectiondefinition javax.jms.ConnectionFactory \
  --ping true --isconnectvalidatereq true \
  jms/myConnectionPool

----------------------------------------

TITLE: Running ActiveMQ Producer and Consumer Tools
DESCRIPTION: Commands to run the ActiveMQ producer and consumer tools from the command line.

LANGUAGE: bash
CODE:
${ACTIVEMQ_HOME}/bin/activemq producer
${ACTIVEMQ_HOME}/bin/activemq consumer

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads (Bash)
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ downloads using pgpk, pgp, or gpg. These commands import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: SVN Checkout for Apache.NMS.ActiveMQ v1.5.6
DESCRIPTION: Command to checkout the specific version tag from Apache SVN repository for Apache.NMS.ActiveMQ version 1.5.6

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.6/

----------------------------------------

TITLE: Sorting and Displaying ActiveMQ News Items with Jekyll and Liquid
DESCRIPTION: This snippet sorts documents by release date in reverse order, then iterates through them to display news items. It includes logic for handling different types of releases (Artemis, NMS, etc.) and generates appropriate 'Read More' links.

LANGUAGE: liquid
CODE:
{% assign documents = site.documents %}
{% assign documents = documents | sort: "release_date" | reverse %}
{% for document in documents %}
{% if document.release_date == nil or document.release_date == "" %}
{% continue %}
{% endif %}
### {{ document.title }} 
<span class="text-secondary"> {{ document.release_date | date_to_string: "ordinal", "US"}}</span>

{{document.shortDescription}}

{% if document.collection contains "artemis_console" %}
[Read More]({{site.baseurl}}/components/artemis-console/download/)
{% elsif document.collection contains "artemis" %}
[Read More]({{site.baseurl}}/components/artemis/download/)
{% elsif document.collection contains "nms_api" %}
[Read More]({{site.baseurl}}/components/nms/nms-api-downloads)
{% elsif document.collection contains "nms_amqp" %}
[Read More]({{site.baseurl}}/components/nms/providers/amqp/downloads/)
{% elsif document.collection contains "classic" %}
[Read More]({{site.baseurl}}/components/classic/download/)
{% else %}
[Read More]({{document.url}})
{% endif %}
{% endfor %}

----------------------------------------

TITLE: XML Configuration Example
DESCRIPTION: Basic XML structure example, likely used for ActiveMQ configuration

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Exploit Steps via FlightRecorderMXBeanImpl
DESCRIPTION: Steps to exploit the vulnerability using jdk.management.jfr.FlightRecorderMXBeanImpl on Java 11+ to achieve remote code execution and deploy a webshell.

LANGUAGE: java
CODE:
1. newRecording()
2. setConfiguration() // Hide webshell data
3. startRecording()
4. copyTo() // Write webshell to .jsp file

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.25.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies details for the ActiveMQ Artemis 2.25.0 release. It includes version number, release date, title, short description, documentation version, and Java version requirement. The configuration is used to manage release information and documentation.

LANGUAGE: yaml
CODE:
version: 2.25.0
release_date: 2022-09-08
title: ActiveMQ Artemis 2.25.0
shortDescription: Further improvements with paging flowing control messages into queues.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.25.0
java_version: 11+

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ distributions using PGP or GPG signatures with different verification tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Force Starting ActiveMQ Embedded Broker (v5.3+)
DESCRIPTION: Alternative method available in ActiveMQ 5.3+ that allows force starting a stopped broker using the force parameter. While possible, this method is less reliable than full re-instantiation.

LANGUAGE: java
CODE:
BrokerService.start(boolean force);

LANGUAGE: java
CODE:
BrokerService service = BrokerFactory.createBroker("xbean:activemq.xml");
service.start();
service.waitUntilStarted();

service.stop();
service.waitUntilStopped();

service.start(true);

----------------------------------------

TITLE: Running ActiveMQ Classic Consumer
DESCRIPTION: Commands to run the ActiveMQ Classic consumer example

LANGUAGE: bash
CODE:
$ cd /opt/incubator-activemq-4.0.2/examples
$ ant consumer

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using gpg
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using the gpg tool. This process involves importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out CMS 3.8.3 from Git
DESCRIPTION: Commands to clone the ActiveMQ-CPP repository and checkout the 3.8.3 release tag from Git.

LANGUAGE: shell
CODE:
git clone https://git-wip-us.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.8.3

----------------------------------------

TITLE: Configuring XML for ActiveMQ
DESCRIPTION: This XML snippet demonstrates a basic XML structure, likely used for configuration in the ActiveMQ project. It includes a root 'xml' element with content 'somexml'.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Initializing Java Object in ActiveMQ
DESCRIPTION: Java code showing object instantiation for ActiveMQ implementation.

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.23.1 Release Details in YAML
DESCRIPTION: YAML configuration block that defines the release parameters for ActiveMQ Artemis version 2.23.1. Specifies version number, release date, Java version requirement (11+), and documentation versioning details. Includes a reference to bug fix ARTEMIS-3856.

LANGUAGE: yaml
CODE:
version: 2.23.1
release_date: 2022-06-21
title: ActiveMQ Artemis 2.23.1
shortDescription: Bug fixing, addressing ARTEMIS-3856
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.23.1
java_version: 11+

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Command line instructions for verifying PGP signatures of downloaded ActiveMQ files using different PGP/GPG tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Markdown Table of Apache.NMS.Stomp Releases
DESCRIPTION: A markdown formatted table displaying Apache.NMS.Stomp version history with release dates and NMS API compatibility information. Includes versions from 1.2.0 through 1.5.4 released between 2010 and 2013.

LANGUAGE: markdown
CODE:
|Description|Release Date|NMS API Rev|
|---|---|---|
|[Apache.NMS.Stomp v1.5.4](apachenmsstomp-v154)|10/26/2013|v1.5.1|
|[Apache.NMS.Stomp v1.5.3](apachenmsstomp-v153)|08/30/2012|v1.5.1|
|[Apache.NMS.Stomp v1.5.2](apachenmsstomp-v152)|11/19/2011|v1.5.0|
|[Apache.NMS.Stomp v1.5.1](apachenmsstomp-v151)|01/31/2011|v1.5.0|
|[Apache.NMS.Stomp v1.5.0](apachenmsstomp-v150)|01/14/2011|v1.5.0|
|[Apache.NMS.Stomp v1.4.0](apachenmsstomp-v140)|09/23/2010|v1.4.0|
|[Apache.NMS.Stomp v1.3.0](apachenmsstomp-v130)|05/27/2010|v1.3.0|
|[Apache.NMS.Stomp v1.2.0](apachenmsstomp-v120)|02/07/2010|v1.2.0|

----------------------------------------

TITLE: Configuring MDB in ejb-jar.xml for ActiveMQ Classic Topic
DESCRIPTION: XML configuration in ejb-jar.xml to declare a TopicDurableMDB for receiving messages from an ActiveMQ Classic Topic. It specifies the destination and destination type using activation-config-property elements.

LANGUAGE: XML
CODE:
<message-driven>
   ...
   <ejb-name>TopicDurableMDB</ejb-name>
   <ejb-class>com.panacya.platform.service.bus.mdb.SimpleMessageReceiverBean</ejb-class>
   <messaging-type>javax.jms.MessageListener</messaging-type>
   ...
   <activation-config>
      <activation-config-property>
         <activation-config-property-name>Destination</activation-config-property-name>
         <activation-config-property-value>topic.testTopic</activation-config-property-value>
      </activation-config-property>
      <activation-config-property>
         <activation-config-property-name>DestinationType</activation-config-property-name>
         <activation-config-property-value>javax.jms.Topic</activation-config-property-value>
      </activation-config-property>
      ...
   </activation-config>
   ...
</message-driven>

----------------------------------------

TITLE: SVN Source Code Checkout Command
DESCRIPTION: Subversion command to checkout the source code for ActiveMQ 5.5.0 from the Apache SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.5.0

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.31.0 Release Metadata in YAML
DESCRIPTION: This YAML snippet defines key information for the ActiveMQ Artemis 2.31.0 release. It includes the version number, release date, title, a short description of new features, documentation version, and the required Java version.

LANGUAGE: yaml
CODE:
version: 2.31.0
release_date: 2023-09-19
title: ActiveMQ Artemis 2.31.0
shortDescription: New CLI, AMQP Federation, Improved JDBC and a lot more!
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.31.0
java_version: 11+

----------------------------------------

TITLE: Configuring ActiveMQ XML
DESCRIPTION: This XML snippet demonstrates a basic ActiveMQ configuration. It shows the structure of an XML file used for ActiveMQ setup.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: Java Object Instantiation
DESCRIPTION: Basic Java code showing object instantiation of SomeJava class

LANGUAGE: java
CODE:
Somejava s = new SomeJava();

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.23.0 Release Details in YAML
DESCRIPTION: YAML configuration block specifying version information, release date, documentation version and Java compatibility requirements for ActiveMQ Artemis 2.23.0 release. Includes metadata for documentation subdirectory naming conventions.

LANGUAGE: yaml
CODE:
version: 2.23.0
release_date: 2022-06-13
title: ActiveMQ Artemis 2.23.0
shortDescription: Bug fixes and improvements
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.23.1
java_version: 11+

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet for including ActiveMQ in a Maven project using the activemq-all uber jar

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.11.1</version>
</dependency>

----------------------------------------

TITLE: Markdown Table for MSMQ Download Information
DESCRIPTION: A markdown table showing the version, release date and NMS API revision for Apache.NMS.MSMQ downloads.

LANGUAGE: markdown
CODE:
|Description|Release Date|NMS API Rev|
|[Apache.NMS MSMQ v1.1.0](apachenms-msmq-v110)|07/12/2009|v1.1.0|

----------------------------------------

TITLE: Configuring QueueConnectionFactory in JBoss Data Source
DESCRIPTION: JBoss-specific configuration for exposing the ActiveMQ QueueConnectionFactory via JNDI.

LANGUAGE: xml
CODE:
<tx-connection-factory>
   <jndi-name>activemq/QueueConnectionFactory</jndi-name>
   <xa-transaction/>
   <rar-name>activemq-ra-1.2-SNAPSHOT.rar</rar-name>
   <connection-definition>javax.jms.QueueConnectionFactory</connection-definition>
   <security-domain-and-application>JmsXARealm</security-domain-and-application>
</tx-connection-factory>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using pgpk
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using pgpk. This snippet demonstrates how to import the KEYS file and verify the signature of the downloaded archive.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.22.0 Release Configuration in YAML
DESCRIPTION: This YAML configuration specifies the details for the ActiveMQ Artemis 2.22.0 release. It includes the version number, release date, title, short description, documentation version, and required Java version.

LANGUAGE: yaml
CODE:
version: 2.22.0
release_date: 2022-05-05
title: ActiveMQ Artemis 2.22.0
shortDescription: Bug fixes and improvements
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.22.0
java_version: 11+

----------------------------------------

TITLE: YAML Configuration for Apache NMS.AMQP 2.2.0 Release
DESCRIPTION: YAML frontmatter configuration defining version, release date, release notes URL, title and short description for Apache NMS.AMQP 2.2.0 release documentation.

LANGUAGE: yaml
CODE:
version: 2.2.0
release_date: 2023-05-14
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311201&version=12353210
title: Apache.NMS.AMQP 2.2.0 Release
shortDescription: Message acknowledgement enhancements with support for multiple AckTypes.

----------------------------------------

TITLE: Basic XML Structure Example
DESCRIPTION: Simple XML code block demonstrating basic XML element structure.

LANGUAGE: xml
CODE:
<xml>somexml</xml>

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.Stomp v1.5.1
DESCRIPTION: Command to checkout the specific version tag (1.5.1) of Apache.NMS.Stomp from the Apache Subversion repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.5.1/

----------------------------------------

TITLE: Verifying PGP Signatures using pgp
DESCRIPTION: Commands for verifying PGP signatures of downloaded ActiveMQ distributions using pgp utility

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Jekyll Release List Generation
DESCRIPTION: Liquid template code that generates the download section by iterating through current releases and displaying version information, release notes, and download links.

LANGUAGE: liquid
CODE:
{% assign reversed_releases = site["nms_amqp_releases"] | reverse %}

{% for current_release_prefix in site.data.current_releases["nms_amqp"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
#### NMS AMQP {{release.version}} ({{release.release_date | date_to_string: "ordinal", "US"}})
[Release Notes]({{ release.release_notes }}) | [Release Page]({{release.url}})

            {% include nms_amqp_download_links.md release=release is_current_release=true %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of ActiveMQ downloads using PGP or GPG signatures. Shows three different verification methods using pgpk, pgp, and gpg tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Configuring Assembly Descriptor in ejb-jar.xml
DESCRIPTION: XML configuration for declaring message destination in the assembly descriptor section.

LANGUAGE: xml
CODE:
<assembly-descriptor>
   ...
   <message-destination>
      <message-destination-name>LoggingQueue</message-destination-name>
   </message-destination>
   ...
</assembly-descriptor>

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of ActiveMQ downloads using PGP or GPG signatures. Shows three different verification methods using pgpk, pgp, and gpg tools.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Defining YAML Configuration for ActiveMQ Artemis Console Release
DESCRIPTION: This YAML snippet specifies the version, release date, title, and a short description for the ActiveMQ Artemis Console release. It highlights that this is version 1.0.0, uses Hawtio 4 with React and Patternfly, and is described as the next generation Artemis Console.

LANGUAGE: yaml
CODE:
version: 1.0.0
release_date: 2024-10-08
title: ActiveMQ Artemis Console 1.0.0
shortDescription: Next generation Artemis Console using Hawtio 4 with React + Patternfly.

----------------------------------------

TITLE: Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: These properties are automatically added to copied messages to preserve original message metadata. They include the original address (_AMQ_ORIG_ADDRESS), original queue (_AMQ_ORIG_QUEUE), and original message ID (_AMQ_ORIG_MESSAGE_ID). These properties contain the information from the most recent operation when multiple copying operations occur.

LANGUAGE: properties
CODE:
_AMQ_ORIG_ADDRESS
_AMQ_ORIG_QUEUE
_AMQ_ORIG_MESSAGE_ID

----------------------------------------

TITLE: Building Jekyll Site without Serving
DESCRIPTION: This command builds the Jekyll site without serving it locally, generating the static site files in the '_site' output directory.

LANGUAGE: ruby
CODE:
bundle exec jekyll build

----------------------------------------

TITLE: SVN Checkout Command for Apache.NMS.ActiveMQ v1.6.4
DESCRIPTION: Command to checkout the v1.6.4 tag from Apache SVN repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.6.4/

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration showing how to include ActiveMQ as a dependency in a Maven project using the activemq-all uber jar.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.10.0</version>
</dependency>

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ CMS 2.2.5
DESCRIPTION: Command to check out the tagged version 2.2.5 of ActiveMQ CMS from Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.5/

----------------------------------------

TITLE: Configuring Session Bean Declaration in ejb-jar.xml
DESCRIPTION: XML configuration for declaring a SenderEJB with JMS queue connection factory and message destination references.

LANGUAGE: xml
CODE:
<session>
   ...
   <ejb-name>SenderEJB</ejb-name>
   ...
   <ejb-class>com.panacya.platform.service.bus.sender.SenderBean</ejb-class>
   ...
   <resource-ref>
      <res-ref-name>jms/MyQueueConnectionFactory</res-ref-name>
      <res-type>javax.jms.QueueConnectionFactory</res-type>
      ...
   </resource-ref>
   <message-destination-ref>
      <message-destination-ref-name>jms/LogQueue</message-destination-ref-name>
      <message-destination-type>javax.jms.Queue</message-destination-type>
      ...
      <message-destination-link>LoggingQueue</message-destination-link>
   </message-destination-ref>
</session>

----------------------------------------

TITLE: Checking out ActiveMQ CMS 2.2.4 from SVN
DESCRIPTION: This command allows users to check out the source code for ActiveMQ CMS 2.2.4 from the Apache Subversion repository. It retrieves the specific tagged version of the code.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.2.4/

----------------------------------------

TITLE: Installing Stomp Gem for Ruby
DESCRIPTION: Command to install the 'stomp' Ruby gem, which is required for running the verification examples.

LANGUAGE: bash
CODE:
gem install stomp

----------------------------------------

TITLE: Quick Build with Maven 1
DESCRIPTION: Command to build ActiveMQ Classic 4.0.x and earlier versions using Maven 1, skipping test execution.

LANGUAGE: bash
CODE:
maven -Dmaven.test.skip.exec=true

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using GPG
DESCRIPTION: Commands to verify the integrity of ActiveMQ downloads using GPG and the KEYS file.

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.5.1 from SVN
DESCRIPTION: Command to check out the Apache.NMS.ActiveMQ v1.5.1 tag from the Apache Subversion repository. This allows developers to access the exact source code for this release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.1/

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ 5.5.1 Source
DESCRIPTION: Subversion checkout command to retrieve the source code for ActiveMQ 5.5.1 from the Apache SVN repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.5.1

----------------------------------------

TITLE: Checking out ActiveMQ CMS 3.1.3 from SVN
DESCRIPTION: Command to checkout the specific tagged version 3.1.3 of ActiveMQ C++ library from Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.1.3/

----------------------------------------

TITLE: Cloning ActiveMQ Artemis Git Repository from Github
DESCRIPTION: Command to clone the ActiveMQ Artemis Git repository from Github. This is the preferred method for contributors to access the source code.

LANGUAGE: bash
CODE:
git clone https://github.com/apache/activemq-artemis

----------------------------------------

TITLE: Checking Out ActiveMQ 5.4.3 Source from SVN
DESCRIPTION: Command to check out the ActiveMQ 5.4.3 source code from the Apache Subversion repository. This allows developers to access the exact source code used for the 5.4.3 release.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.3

----------------------------------------

TITLE: Copying Release Files to SVN Dist Release Folder
DESCRIPTION: Shell command to copy the staged release files from the SVN dist dev folder to the SVN dist release folder after a successful vote.

LANGUAGE: shell
CODE:
svn cp -m "add files for activemq-<version>" https://dist.apache.org/repos/dist/dev/activemq/activemq/<version> https://dist.apache.org/repos/dist/release/activemq/<version>

----------------------------------------

TITLE: Moving Apollo Broker Data Directory (Bash)
DESCRIPTION: Command to move the old data directory out of the way. This is done after exporting data and before installing the new Apollo version.

LANGUAGE: bash
CODE:
mv ${broker-path}/data /tmp/broker-data

----------------------------------------

TITLE: Checking Out ActiveMQ 5.4.0 Source from SVN
DESCRIPTION: SVN command to check out the source code for ActiveMQ 5.4.0 from the Apache repository.

LANGUAGE: bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.0

----------------------------------------

TITLE: Cloning and Checking Out CMS 3.8.1 Tag from Git
DESCRIPTION: Commands to clone the ActiveMQ-CPP repository and checkout the specific tag for version 3.8.1. This allows developers to access the exact source code for this release.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/activemq-cpp-3.8.1

----------------------------------------

TITLE: Checking Out ActiveMQ 5.4.2 Source from SVN
DESCRIPTION: This command demonstrates how to check out the source code for ActiveMQ 5.4.2 from the Apache Subversion repository using the svn command-line tool.

LANGUAGE: Bash
CODE:
svn co http://svn.apache.org/repos/asf/activemq/tags/activemq-5.4.2

----------------------------------------

TITLE: Checking Out CMS 3.2.1 from SVN
DESCRIPTION: Command to checkout the specific version tag of ActiveMQ-CPP 3.2.1 from Apache SVN repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.1/

----------------------------------------

TITLE: Referencing ResponseCorrelator in Java for ActiveMQ
DESCRIPTION: This snippet shows the import statement for the ResponseCorrelator class used in ActiveMQ for correlating requests and responses in multi-threaded clients.

LANGUAGE: java
CODE:
import org.apache.activemq.transport.ResponseCorrelator;

----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.19.1 Release Metadata in YAML
DESCRIPTION: This YAML snippet defines the metadata for ActiveMQ Artemis version 2.19.1. It specifies the version number, release date, title, a short description of the release, documentation version, and the required Java version.

LANGUAGE: yaml
CODE:
version: 2.19.1
release_date: 2022-02-01
title: ActiveMQ Artemis 2.19.1
shortDescription: Maintenance release of 2.19.0 containing cherry picks from 2.20.0 and 2.21.0.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.19.0
java_version: 8+

----------------------------------------

TITLE: Configuring Security Constraints in ActiveMQ Jetty XML
DESCRIPTION: XML configuration snippet for adding authentication requirements to ActiveMQ's Jetty configuration. This configuration secures the API web context by adding a security constraint mapping for all paths.

LANGUAGE: xml
CODE:
<bean id="securityConstraintMapping" class="org.eclipse.jetty.security.ConstraintMapping">
  <property name="constraint" ref="securityConstraint" />
  <property name="pathSpec" value="/" />
</bean>

----------------------------------------

TITLE: Configuring Maven Settings for ActiveMQ Release
DESCRIPTION: XML configuration for ~/.m2/settings.xml to set up server credentials and file permissions for Maven deployments.

LANGUAGE: xml
CODE:
<settings>
  ...
  <servers>

    <server>
      <id>apache.snapshots.https</id>
      <username>dejanb</username>
    </server>
    <!-- To publish a website of some part of Maven -->
    <server>
      <id>apache.website</id>
      <username>dejanb</username>
      <filePermissions>664</filePermissions>
      <directoryPermissions>775</directoryPermissions>
    </server>
    <!-- To stage a release of some part of Maven -->
    <server>
      <id>apache.releases.https</id>
      <username>dejanb</username>
    </server>
    <!-- To stage a website of some part of Maven -->
    <server>
      <id>stagingSite</id> <!-- must match hard-coded repository identifier in site:stage-deploy -->
      <username>dejanb</username>
      <filePermissions>664</filePermissions>
      <directoryPermissions>775</directoryPermissions>
    </server>

  </servers>
  ...
</settings>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Classic 5.8.0 Downloads
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ Classic 5.8.0 downloads using pgpk, pgp, or gpg. These commands help ensure the integrity and authenticity of the downloaded files.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.8.0 Source Code Using Git
DESCRIPTION: Git commands to clone the ActiveMQ-CPP repository and checkout the specific 3.8.0 release tag. This allows developers to access the exact source code for this version.

LANGUAGE: git
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/activemq-cpp-3.8.0

----------------------------------------

TITLE: Verifying PGP Signatures in Unix/Linux
DESCRIPTION: Commands for verifying the PGP signatures of downloaded ActiveMQ distributions using pgpk, pgp, or gpg.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ v1.5.5 from SVN
DESCRIPTION: Command to checkout the Apache.NMS.ActiveMQ v1.5.5 tag from the Apache Subversion repository. This allows developers to access the exact source code for this release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.5/

----------------------------------------

TITLE: Nested URI Options Configuration
DESCRIPTION: Example demonstrating the use of nested URI options for common configuration parameters across multiple brokers.

LANGUAGE: text
CODE:
failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)?nested.wireFormat.maxInactivityDuration=1000

----------------------------------------

TITLE: Checking Out ActiveMQ CPP 1.0 from SVN
DESCRIPTION: SVN command to checkout the tagged version 1.0 of ActiveMQ CPP from Apache's repository.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-1.0/

----------------------------------------

TITLE: Vulnerable Jolokia Request Flow
DESCRIPTION: The sequence of Jolokia request handling that enables the vulnerability, involving JMX request creation and reflection-based execution through HttpRequestHandler and ExecHandler.

LANGUAGE: java
CODE:
org.jolokia.http.AgentServlet // Handles /api/jolokia requests
org.jolokia.http.HttpRequestHandler#handlePostRequest
org.jolokia.http.HttpRequestHandler#executeRequest
org.jolokia.handler.ExecHandler#doHandleRequest

----------------------------------------

TITLE: Running ActiveMQ Broker with Default Configuration
DESCRIPTION: Runs an ActiveMQ broker using the default 'xbean:activemq.xml' as the broker configuration file.

LANGUAGE: Bash
CODE:
activemq

----------------------------------------

TITLE: Verifying PGP Signatures in Bash
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ distributions using PGP or GPG signatures. These commands demonstrate different methods of importing keys and verifying signatures.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Generating Download Links for Apache.NMS.AMQP Releases using Liquid
DESCRIPTION: This snippet uses Liquid templating to conditionally display download links for Apache.NMS.AMQP releases. It checks if the release is current or archived and generates appropriate links for source code, binary assemblies, and NuGet packages.

LANGUAGE: liquid
CODE:
{% if include.is_current_release %}
|Apache.NMS.AMQP Source code|[Apache.NMS.AMQP-{{include.release.version}}-src.zip](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.asc)|
|Apache.NMS.AMQP Binary Assemblies|[Apache.NMS.AMQP-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.asc)|
|Apache.NMS.AMQP Nuget Package|[Apache.NMS.AMQP.{{include.release.version}}.nupkg](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.asc)|
{% else %}
|Apache.NMS.AMQP Source code|[Apache.NMS.AMQP-{{include.release.version}}-src.zip](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.asc)|
|Apache.NMS.AMQP Binary Assemblies|[Apache.NMS.AMQP-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.asc)|
|Apache.NMS.AMQP Nuget Package|[Apache.NMS.AMQP.{{include.release.version}}.nupkg](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{release.version}}/Apache.NMS.AMQP.{{release.version}}.nupkg.asc)|
{% endif %}

----------------------------------------

TITLE: Generating Download Links for Apache.NMS.AMQP Releases using Liquid
DESCRIPTION: This snippet uses Liquid templating to conditionally display download links for Apache.NMS.AMQP releases. It checks if the release is current or archived and generates appropriate links for source code, binary assemblies, and NuGet packages.

LANGUAGE: liquid
CODE:
{% if include.is_current_release %}
|Apache.NMS.AMQP Source code|[Apache.NMS.AMQP-{{include.release.version}}-src.zip](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.asc)|
|Apache.NMS.AMQP Binary Assemblies|[Apache.NMS.AMQP-{{include.release.version}}-bin.zip](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.asc)|
|Apache.NMS.AMQP Nuget Package|[Apache.NMS.AMQP.{{include.release.version}}.nupkg](https://www.apache.org/dyn/closer.lua?filename=/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg&action=download)|[SHA512](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.sha512)|[PGP Signature](https://downloads.apache.org/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.asc)|
{% else %}
|Apache.NMS.AMQP Source code|[Apache.NMS.AMQP-{{include.release.version}}-src.zip](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-src.zip.asc)|
|Apache.NMS.AMQP Binary Assemblies|[Apache.NMS.AMQP-{{include.release.version}}-bin.zip](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP-{{include.release.version}}-bin.zip.asc)|
|Apache.NMS.AMQP Nuget Package|[Apache.NMS.AMQP.{{include.release.version}}.nupkg](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg)|[SHA512](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{include.release.version}}/Apache.NMS.AMQP.{{include.release.version}}.nupkg.sha512)|[PGP Signature](https://archive.apache.org/dist/activemq/apache-nms-amqp/{{release.version}}/Apache.NMS.AMQP.{{release.version}}.nupkg.asc)|
{% endif %}

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ 5.3.0
DESCRIPTION: XML snippet showing the proper Maven dependency configuration for including ActiveMQ 5.3.0 in a project's POM file.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-core</artifactId>
  <version>5.3.0</version>
</dependency>

----------------------------------------

TITLE: Checking out Apache.NMS.Stomp v1.4.0 from SVN
DESCRIPTION: Command to checkout the Apache.NMS.Stomp v1.4.0 tag from the Apache Subversion repository. This allows developers to access the exact source code for this release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.Stomp/tags/1.4.0/

----------------------------------------

TITLE: Timeout Configuration Example
DESCRIPTION: Example showing how to configure connection timeout for failover transport.

LANGUAGE: text
CODE:
failover:(tcp://primary:61616)?timeout=3000

----------------------------------------

TITLE: Configuring ActiveMQ 5.18.6 Release Details in YAML
DESCRIPTION: YAML configuration block defining the release details for ActiveMQ Classic 5.18.6, including version number, release date, Java version requirements, and related metadata.

LANGUAGE: yaml
CODE:
---
version: 5.18.6
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12354938
release_date: 2024-10-02
title: ActiveMQ Classic 5.18.6 Release
java_version: 11+
shortDescription: Maintenance release on Classic 5.18.x series.
redirect_from:
- /../../../activemq-5018006-release
---

----------------------------------------

TITLE: Removing ActiveMQ Fileserver Configuration in Jetty XML
DESCRIPTION: XML configuration block that should be removed or commented out from conf/jetty.xml to disable the vulnerable Fileserver web application. This mitigation step helps prevent potential remote code execution attacks.

LANGUAGE: xml
CODE:
<bean class="org.eclipse.jetty.webapp.WebAppContext">
    <property name="contextPath" value="/fileserver" />
    <property name="resourceBase" value="${activemq.home}/webapps/fileserver" />
    <property name="logUrlOnStart" value="true" />
    <property name="parentLoaderPriority" value="true" />
</bean>

----------------------------------------

TITLE: Installing Bundler for Ruby Dependency Management
DESCRIPTION: This command installs the Bundler tool, which is used to manage Ruby dependencies for the ActiveMQ website project.

LANGUAGE: ruby
CODE:
gem install bundler

----------------------------------------

TITLE: Verifying PGP Signatures in Bash
DESCRIPTION: Commands for verifying the PGP signatures of ActiveMQ distribution files using different PGP tools (pgpk, pgp, or gpg).

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: No explicit code snippets available
DESCRIPTION: This documentation page contains explanatory text about exception handling but no actual code snippets.



----------------------------------------

TITLE: Defining ActiveMQ Artemis 2.32.0 Release Configuration in YAML
DESCRIPTION: YAML configuration block specifying release details for ActiveMQ Artemis 2.32.0. Includes version number, release date, documentation version, and Java version requirement of 11 or higher.

LANGUAGE: yaml
CODE:
version: 2.32.0
release_date: 2024-01-30
title: ActiveMQ Artemis 2.32.0
shortDescription: Mirror Improvements, bug fixes
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.32.0
java_version: 11+

----------------------------------------

TITLE: Starting Jetty with ActiveMQ Artemis Console
DESCRIPTION: Shell command to start Jetty with Hawtio authentication disabled for the ActiveMQ Artemis Console.

LANGUAGE: shell
CODE:
java -Dhawtio.authenticationEnabled=false -jar $JETTY_HOME/start.jar

----------------------------------------

TITLE: Disabling Async Dispatch on Broker's Transport Connector in XML
DESCRIPTION: This XML configuration shows how to disable async dispatch on a specific transport connector using the disableAsyncDispatch property. When disabled at this level, it cannot be enabled by individual clients.

LANGUAGE: xml
CODE:
<transportConnector name="openwire" uri="tcp://0.0.0.0:61616" disableAsyncDispatch="true"/>

----------------------------------------

TITLE: Configuring ActiveMQ 6.0.0 Release Details in YAML
DESCRIPTION: YAML configuration file defining the release details for ActiveMQ Classic 6.0.0, including version number, release date, Java compatibility, and documentation routing information.

LANGUAGE: yaml
CODE:
version: 6.0.0
release_notes: https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311210&version=12352570
release_date: 2023-11-17
title: ActiveMQ Classic 6.0.0 Release
java_version: 17+
shortDescription: Classic 6.0.0 is a major release for ActiveMQ Classic, starting the 6.x series.
redirect_from:
- /../../../activemq-6000000-release

----------------------------------------

TITLE: Removing FileServer Configuration from ActiveMQ Jetty XML
DESCRIPTION: XML configuration block that should be removed or commented out from conf/jetty.xml to disable the vulnerable fileserver functionality as a mitigation for CVE-2015-1830.

LANGUAGE: xml
CODE:
<bean class="org.eclipse.jetty.webapp.WebAppContext">
    <property name="contextPath" value="/fileserver" />
    <property name="resourceBase" value="${activemq.home}/webapps/fileserver" />
    <property name="logUrlOnStart" value="true" />
    <property name="parentLoaderPriority" value="true" />
</bean>

----------------------------------------

TITLE: Installing Project Dependencies with Bundler
DESCRIPTION: This command uses Bundler to install all required dependencies for the ActiveMQ website project as specified in the Gemfile.

LANGUAGE: ruby
CODE:
bundle install

----------------------------------------

TITLE: Maven Dependency Configuration for ActiveMQ
DESCRIPTION: Maven POM configuration snippet showing how to include ActiveMQ as a dependency in a Maven project using the activemq-all artifact.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.activemq</groupId>
  <artifactId>activemq-all</artifactId>
  <version>5.12.2</version>
</dependency>

----------------------------------------

TITLE: Querying ActiveMQ Broker Information
DESCRIPTION: Queries the JMX context for ActiveMQ broker attributes and information.

LANGUAGE: Bash
CODE:
activemq-admin query

LANGUAGE: Bash
CODE:
activemq-admin query -QTopic=TEST.FOO

LANGUAGE: Bash
CODE:
activemq-admin query -QQueue=* --view Type,BrokerName,EnqueueCount,DequeueCount

----------------------------------------

TITLE: Configuring ActiveMQ Artemis Release Details in YAML
DESCRIPTION: YAML configuration block defining version information, release date, documentation paths and Java requirements for ActiveMQ Artemis 2.31.2. Specifies the bug fix release details and minimum Java version requirement of 11+.

LANGUAGE: yaml
CODE:
version: 2.31.2
release_date: 2023-10-27
title: ActiveMQ Artemis 2.31.2
shortDescription: Bug fix release.
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.31.2
java_version: 11+

----------------------------------------

TITLE: Displaying Artemis Jolokia REST API Endpoint
DESCRIPTION: This snippet shows a console message displaying the Artemis Jolokia REST API endpoint during broker startup. It provides the necessary connection details for configuring the console.

LANGUAGE: plaintext
CODE:
AMQ241002: Artemis Jolokia REST API available at http://localhost:8161/console/jolokia

----------------------------------------

TITLE: Setting up Oracle AQ Queues with SQL
DESCRIPTION: This SQL code demonstrates how to set up Oracle AQ queues. It creates a queue table, creates a queue, and starts the queue. This is necessary for preparing the Oracle database to work with the ActiveMQ and Camel configuration.

LANGUAGE: sql
CODE:
BEGIN
 DBMS_AQADM.CREATE_QUEUE_TABLE( queue_table => 'queue_message_table', queue_payload_type => 'SYS.AQ$_JMS_TEXT_MESSAGE');
END;        

BEGIN
  DBMS_AQADM.CREATE_QUEUE( queue_name => 'ORACLE_QUEUE', queue_table => 'queue_message_table');
END;

BEGIN
  DBMS_AQADM.START_QUEUE(queue_name => 'ORACLE_QUEUE');
END;

----------------------------------------

TITLE: Liquid Template Logic for Release Display
DESCRIPTION: Liquid templating logic that iterates through Artemis releases and displays the current versions using include templates.

LANGUAGE: liquid
CODE:
{% assign reversed_releases = site["artemis_releases"] | reverse %}
{% assign latest_docs = true %}

{% for current_release_prefix in site.data.current_releases["artemis"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
            {% include artemis_release.md release=release is_current_release=true examples_link=true latest_docs=latest_docs %}
            {% assign latest_docs = false %}
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

----------------------------------------

TITLE: Configuring JNDI Mapping for ActiveMQ Queue in Glassfish
DESCRIPTION: Command to create an admin object in Glassfish, which sets up a JNDI mapping for an ActiveMQ queue. This allows applications to look up the queue using JNDI.

LANGUAGE: bash
CODE:
bin/asadmin create-admin-object \
	--raname activemq-rar \
  --restype javax.jms.Queue \
  --property PhysicalName=MY.MAGIC.OUT \
  jms/queue/MY.MAGIC.OUT

----------------------------------------

TITLE: Serving Jekyll Site Locally with Live Reload
DESCRIPTION: This command builds the Jekyll site, serves it locally, and enables live reloading for development purposes. It should be run from the 'src' directory.

LANGUAGE: ruby
CODE:
bundle exec jekyll serve --livereload

----------------------------------------

TITLE: Verifying PGP Signatures Using Command Line Tools
DESCRIPTION: Commands for verifying the integrity of downloaded ActiveMQ distributions using PGP or GPG signatures.

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Committer Vote Template
DESCRIPTION: Template for formal voting process to accept a new committer, requiring at least three binding +1 votes and no vetoes within 72 hours.

LANGUAGE: plaintext
CODE:
To: private@activemq.apache.org
Subject: [VOTE] Offer <CANDIDATE> to become an ActiveMQ committer

After positive discussion about <CANDIDATE>'s contributions to the project, I would like to initiate a formal vote.

Considering <INSERT EVIDENCE HERE> as raised in the discussion thread...

This vote will follow the ASF process for committer votes and consensus approval (at least three binding +1 votes and no vetoes)The vote will be open for 72 hours.

[ ] +1 Accept <CANDIDATE> as a committer of Apache ActiveMQ
[ ] +0
[ ] -1 Do not accept at this time because...

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.28.0 Release Parameters in YAML
DESCRIPTION: YAML configuration that specifies the release metadata for ActiveMQ Artemis version 2.28.0. Defines version number, release date, title, short description of key features, documentation version, and Java version requirement.

LANGUAGE: yaml
CODE:
version: 2.28.0
release_date: 2023-02-03
title: ActiveMQ Artemis 2.28.0
shortDescription: Sync Disaster Recovery over AMQP, Paging Improvements
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.28.0
java_version: 11+

----------------------------------------

TITLE: HTML Alert Warning Component
DESCRIPTION: Bootstrap alert component that notifies users about older releases and provides a link to the current release download page.

LANGUAGE: html
CODE:
<div class="alert alert-warning">
  These are older releases. To get the current release, please see the <a href="{{site.baseurl}}/components/artemis-console/download" class="alert-link">download page</a>.
</div>

----------------------------------------

TITLE: Configuring OpenWire Transport with Status Monitor in ActiveMQ Classic XML
DESCRIPTION: This XML snippet demonstrates how to configure the OpenWire transport connector with status monitoring enabled in an ActiveMQ Classic broker's XML configuration file. It uses the 'tcp' scheme, binds to all network interfaces on port 61616, and enables the status monitor.

LANGUAGE: xml
CODE:
<broker>
   <!-- ... -->

   <transportConnectors>
     <transportConnector name="openwire" uri="tcp://0.0.0.0:61616" enableStatusMonitor="true"/> 
   </<transportConnectors>

   <!-- ... -->
</broker>

----------------------------------------

TITLE: Displaying Current NMS API Release in Markdown with Liquid
DESCRIPTION: This snippet uses Liquid templating to iterate through releases and display information for the current NMS API release, including version, release date, description, and download links.

LANGUAGE: markdown
CODE:
{% assign reversed_releases = site["nms_api_releases"] | reverse %}

{% for current_release_prefix in site.data.current_releases["nms_api"] %}
    {% for release in reversed_releases %}
        {% if release.version contains current_release_prefix %}
#### NMS API {{release.version}} ({{release.release_date | date_to_string: "ordinal", "US"}})
{{ release.shortDescription }}

            {% include nms_api_download_links.md release=release is_current_release=true %}
###### Changelog

For a detailed view of new features and bug fixes, see the [Release Notes]({{ release.release_notes }})

<br/>
            {% break %}
        {% endif %}
    {% endfor %}
{% endfor %}

----------------------------------------

TITLE: Configuring Prefetch Rate Pending Message Limit Strategy in ActiveMQ
DESCRIPTION: XML configuration for calculating maximum pending messages using a multiplier of the consumer's prefetch size.

LANGUAGE: xml
CODE:
<prefetchRatePendingMessageLimitStrategy multiplier="2.5"/>

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads using pgp
DESCRIPTION: Commands to verify the PGP signatures of ActiveMQ downloads using the pgp tool. This process involves importing the KEYS file and verifying the signature of the downloaded archive.

LANGUAGE: Bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Checking Java Version
DESCRIPTION: Command to verify the installed Java version

LANGUAGE: bash
CODE:
$ java -version

----------------------------------------

TITLE: Configuring ActiveMQ Artemis 2.17.0 Version Details in YAML
DESCRIPTION: YAML configuration block that defines core metadata for ActiveMQ Artemis version 2.17.0, including release date (February 16, 2021), documentation versioning, and Java 8 requirement.

LANGUAGE: yaml
CODE:
version: 2.17.0
release_date: 2021-02-16
title: ActiveMQ Artemis 2.17.0
# Docs subdir name for past-releases and previous-docs pages, 'latest' is always used on the main download page.
docs_version: 2.17.0
java_version: 8

----------------------------------------

TITLE: Processing Advisory Messages in ActiveMQ C++ Client
DESCRIPTION: Demonstrates how to handle incoming advisory messages, checking the message type and extracting relevant properties.

LANGUAGE: C++
CODE:
void AdvisoryProducer::onMessage( const cms::Message* message ) {

   if( message->getCMSType() == "Advisory" ) {

       std::cout << "Received an Advisory Message!" << std::endl;

       if( message->propertyExists( "consumerCount" ) ) {

           std::string consumerCount = message->getStringProperty( "consumerCount" );
           std::cout << "Number of Consumers = " << consumerCount << std::endl;

           // Do Something Meaningful here....
       }

   } else {
       std::cout << "Received a Non-Advisory Message!" << std::endl;
   }
}

----------------------------------------

TITLE: Logging Output of InactivityMonitor Debug Messages
DESCRIPTION: Example debug log output showing the InactivityMonitor detecting an inactive connection and throwing an InactivityIOException after the default 30-second timeout period.

LANGUAGE: log
CODE:
2012-06-26 17:13:55,712 | DEBUG | 30000 ms elapsed since last read check. | org.apache.activemq.transport.AbstractInactivityMonitor | InactivityMonitor ReadCheck
2012-06-26 17:13:55,712 | DEBUG | No message received since last read check for tcp:///127.0.0.1:52659! Throwing InactivityIOException. | org.apache.activemq.transport.AbstractInactivityMonitor | InactivityMonitor ReadCheck
2012-06-26 17:13:55,714 | DEBUG | Transport Connection to: tcp://127.0.0.1:52659 failed: 
org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://127.0.0.1:52659 |
org.apache.activemq.broker.TransportConnection.Transport | InactivityMonitor Async Task: 
java.util.concurrent.ThreadPoolExecutor$Worker@6a346239
org.apache.activemq.transport.InactivityIOException: Channel was inactive for too (>30000) long: tcp://127.0.0.1:52659
    at org.apache.activemq.transport.AbstractInactivityMonitor$4.run(AbstractInactivityMonitor.java:187)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
    at java.lang.Thread.run(Thread.java:680)

----------------------------------------

TITLE: Jekyll Front Matter Configuration
DESCRIPTION: Jekyll page configuration defining the layout, title and page type for the NMS AMQP downloads page.

LANGUAGE: yaml
CODE:
---
layout: default_md
title: Apache.NMS.AMQP Downloads 
title-class: page-title-nms
type: nms
---

----------------------------------------

TITLE: Verifying PGP Signatures for ActiveMQ Downloads
DESCRIPTION: Shell commands for verifying the PGP signatures of ActiveMQ distribution files using different PGP tools (pgpk, pgp, or gpg).

LANGUAGE: bash
CODE:
$ pgpk -a KEYS
$ pgpv apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ pgp -ka KEYS
$ pgp apache-activemq-<version>-bin.tar.gz.asc

LANGUAGE: bash
CODE:
$ gpg --import KEYS
$ gpg --verify apache-activemq-<version>-bin.tar.gz.asc

----------------------------------------

TITLE: Disabling Advisory Support in Java BrokerService
DESCRIPTION: This Java code snippet shows how to disable advisory support when creating a BrokerService programmatically.

LANGUAGE: java
CODE:
BrokerService broker = new BrokerService();
broker.setAdvisorySupport(false);
// ...
broker.start();

----------------------------------------

TITLE: Committing JMS Transactions in Java
DESCRIPTION: Demonstrates how to commit a JMS transaction using the commit() method on a Session object. This is analogous to committing a transaction on a JDBC connection.

LANGUAGE: java
CODE:
session.commit();

----------------------------------------

TITLE: Release Version Check with Liquid Template Logic
DESCRIPTION: Liquid template code that checks if the current page represents the latest release version by comparing against site configuration data. Sets a boolean flag isCurrentRelease used to conditionally display version warnings.

LANGUAGE: liquid
CODE:
{% assign releases = site["nms_amqp_releases"] | reverse %}
{% assign isCurrentRelease = false %}

{% for current_release in site.data.current_releases["nms_amqp"] %}
    {% for release in releases %}
        {% if release.version contains current_release %}
                    {% if release.version == page.version %}
                        {% assign isCurrentRelease = true %}
                    {% endif %}
            {% break %}
        {% endif %}
    {% endfor %}
    {% if isCurrentRelease %} {% break %} {% endif %}
{% endfor %}

----------------------------------------

TITLE: SVN Checkout for ActiveMQ-CPP 3.4.2
DESCRIPTION: Command to checkout the ActiveMQ-CPP 3.4.2 tag from the Apache SVN repository. This allows developers to access the exact source code for this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.2/

----------------------------------------

TITLE: Sending BlobMessages with InputStream in ActiveMQ
DESCRIPTION: This example illustrates how to create and send a BlobMessage using an InputStream as the source.

LANGUAGE: java
CODE:
InputStream in = ...;
BlobMessage message = session.createBlobMessage(in);
producer.send(message);

----------------------------------------

TITLE: Listing Special Properties for Copied Messages in ActiveMQ
DESCRIPTION: This snippet lists and describes the special properties added to messages when they are copied within the ActiveMQ broker. These properties preserve important information from the original message.

LANGUAGE: plaintext
CODE:
- `_AMQ_ORIG_ADDRESS`

  a String property containing the *original address* of the message

- `_AMQ_ORIG_QUEUE`

  a String property containing the *original queue* of the message

- `_AMQ_ORIG_MESSAGE_ID`

  a String property containing the *original message ID* of the message

----------------------------------------

TITLE: SVN Checkout Command for ActiveMQ-CPP 3.2.4
DESCRIPTION: Command to checkout the tagged version 3.2.4 of ActiveMQ-CPP from Apache SVN repository.

LANGUAGE: svn
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.2.4/

----------------------------------------

TITLE: Configuring Segmented VM Protocol in ActiveMQ
DESCRIPTION: Shows how to configure segmented VM protocol for creating logically separate JMS networks within the same JVM using different URIs.

LANGUAGE: plaintext
CODE:
vm://localhost/foo

----------------------------------------

TITLE: Message Properties for Copied Messages in ActiveMQ
DESCRIPTION: Special properties that ActiveMQ adds to copied messages to preserve original message information. These properties include _AMQ_ORIG_ADDRESS for the original address, _AMQ_ORIG_QUEUE for the original queue, and _AMQ_ORIG_MESSAGE_ID for the original message ID. These properties reflect the most recent operation when multiple copy operations occur.

LANGUAGE: properties
CODE:
_AMQ_ORIG_ADDRESS
_AMQ_ORIG_QUEUE
_AMQ_ORIG_MESSAGE_ID

----------------------------------------

TITLE: SVN Checkout for ActiveMQ-CPP 3.0
DESCRIPTION: Command to checkout the ActiveMQ-CPP 3.0 source code from the Apache Subversion repository. This allows developers to access the exact version of the source code used for the 3.0 release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-library-3.0/

----------------------------------------

TITLE: Deleting ActiveMQ Destination using NMS.ActiveMQ Client in C#
DESCRIPTION: Demonstrates how to delete a destination (queue) from an ActiveMQ broker using the NMS.ActiveMQ client. This is useful during testing to ensure a destination starts in a known state. The code creates a connection, establishes a session, retrieves a queue reference, and then deletes it from the broker.

LANGUAGE: C#
CODE:
protected static void DeleteDestination() 
{ 
    IConnectionFactory factory = new ConnectionFactory(ReplaceEnvVar(connectionURI)); 
    using (Connection connection = factory.CreateConnection() as Connection) 
    { 
        using (ISession session = connection.CreateSession()) 
        { 
            IQueue queue = session.GetQueue(testQueueName); 
            try 
            { 
                connection.DeleteDestination(queue); 
            } 
            catch 
            { 
            } 
        } 
    } 
} 

----------------------------------------

TITLE: 64-bit libstdc++.la Configuration File
DESCRIPTION: Configuration file for 64-bit libstdc++ library on Solaris 10, specifying library names, dependencies, and installation parameters. File should be placed at /usr/sfw/lib/64/libstdc++.la.

LANGUAGE: config
CODE:
# libstdc++.la - a libtool library file
# Generated by ltmain.sh - GNU libtool 1.4a-GCC3.0 (1.641.2.256 2001/05/28 20:09:07 with GCC-local changes)
#
# Please DO NOT delete this file!
# It is necessary for linking the library.

# The name that we can dlopen(3).
dlname='libstdc++.so.6'

# Names of this library.
library_names='libstdc++.so.6.0.3 libstdc++.so.6 libstdc++.so'

# The name of the static archive.
old_library='libstdc++.a'

# Libraries that this one depends upon.
dependency_libs='-L/lib/64 -lc -lm -L/usr/sfw/lib/64 -lgcc_s'

# Version information for libstdc++.
current=6
age=0
revision=3

# Is this an already installed library?
installed=yes

# Files to dlopen/dlpreopen
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='/usr/sfw/lib/64'

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.4.3 from SVN
DESCRIPTION: SVN command to checkout the tagged version 3.4.3 of ActiveMQ-CPP from the Apache SVN repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-3.4.3/

----------------------------------------

TITLE: Configuration Properties for ActiveMQ Resource Adapter
DESCRIPTION: Core configuration properties including ServerUrl, UserName, Password, ClientId, UseInboundSession, and BrokerXmlConfig used to establish and configure connections to the ActiveMQ broker.

LANGUAGE: properties
CODE:
ServerUrl=tcp://localhost:61616
UserName=defaultUser
Password=defaultPassword
Clientid=null
UseInboundSession=false
BrokerXmlConfig=xbean:activemq.xml

----------------------------------------

TITLE: Checking Out ActiveMQ-CPP 3.8.4 from Git
DESCRIPTION: Commands to clone the ActiveMQ-CPP repository and checkout the 3.8.4 release tag from Git.

LANGUAGE: bash
CODE:
git clone https://gitbox.apache.org/repos/asf/activemq-cpp.git
cd activemq-cpp
git checkout tags/3.8.4

----------------------------------------

TITLE: Checking out CMS 2.1 from SVN
DESCRIPTION: SVN command to checkout the tagged version 2.1 of ActiveMQ-CPP from Apache's repository.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/activemq-cpp-2.1/

----------------------------------------

TITLE: Checking out CMS 1.2 from SVN
DESCRIPTION: Command to checkout the CMS 1.2 tag from Apache SVN repository. This allows developers to access the exact source code for this release.

LANGUAGE: bash
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-cpp/tags/cms-1.2/

----------------------------------------

TITLE: Checking out Apache.NMS.ActiveMQ 1.5.2 from SVN
DESCRIPTION: Command to check out the Apache.NMS.ActiveMQ 1.5.2 tag from the Apache Subversion repository. This allows developers to access the exact source code for this release.

LANGUAGE: shell
CODE:
svn co https://svn.apache.org/repos/asf/activemq/activemq-dotnet/Apache.NMS.ActiveMQ/tags/1.5.2/