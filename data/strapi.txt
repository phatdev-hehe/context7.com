TITLE: Setting up Strapi Documentation Project Locally
DESCRIPTION: Terminal commands for cloning the repository, installing dependencies, and starting the local development server. Requires Node.js 16.14+ and yarn package manager.

LANGUAGE: shell
CODE:
git clone [access-path-to-your-forked-repository]
cd documentation/docusaurus
git checkout main && git pull
yarn && yarn dev

----------------------------------------

TITLE: Installing Strapi Project with NPM
DESCRIPTION: Command to create a new Strapi project using NPM package manager.

LANGUAGE: bash
CODE:
npx create-strapi@latest my-strapi-project

----------------------------------------

TITLE: Configuring Strapi Server Environment Variables
DESCRIPTION: Server configuration using environment variables with host and port settings. This allows flexible configuration based on different deployment environments.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
});

----------------------------------------

TITLE: Configuring Global Middlewares in Strapi
DESCRIPTION: Example of configuring the global middlewares array in the Strapi configuration file, showing the loading order and syntax for both internal and custom middlewares.

LANGUAGE: javascript
CODE:
module.exports = [
  'strapi::logger',
  'strapi::errors',
  'strapi::security',
  'strapi::cors',
  'global::my-custom-node-module', 
  {
    name: 'my-custom-node-module',
    config: {
      foo: 'bar',
    },
  },
  {
    resolve: '../some-dir/custom-middleware',
    config: {
      foo: 'bar',
    },
  },
  {
    name: 'strapi::poweredBy',
    config: {
      poweredBy: 'Some awesome company',
    },
  },
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];

LANGUAGE: typescript
CODE:
export default [
  'strapi::logger',
  'strapi::cors',
  'strapi::body',
  'strapi::errors',
  'my-custom-node-module',
  {
    name: 'my-custom-node-module',
    config: {
      foo: 'bar',
    },
  },
  {
    resolve: '../some-dir/custom-middleware',
    config: {
      foo: 'bar',
    },
  },
];

----------------------------------------

TITLE: Implementing Custom Email Service in Strapi (TypeScript)
DESCRIPTION: Shows how to create a custom email service in Strapi using TypeScript and Nodemailer, including a method to send newsletters.

LANGUAGE: typescript
CODE:
import { factories } from '@strapi/strapi'; 
const nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)

// Create reusable transporter object using SMTP transport.
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: 'user@gmail.com',
    pass: 'password',
  },
});

export default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) => ({
  sendNewsletter(from, to, subject, text) {
    // Setup e-mail data. 
    const options = {
      from,
      to,
      subject,
      text,
    };

    // Return a promise of the function that sends the email.
    return transporter.sendMail(options);
  },
}));

----------------------------------------

TITLE: Creating New Strapi TypeScript Project with Yarn
DESCRIPTION: Command to create a new Strapi project with TypeScript support using Yarn package manager. This command initializes a new Strapi application with TypeScript configuration.

LANGUAGE: bash
CODE:
yarn create strapi-app my-project --typescript

----------------------------------------

TITLE: Configuring Admin Panel Options in Strapi (JavaScript)
DESCRIPTION: Example configuration for customizing various aspects of the Strapi admin panel, including logos, favicon, locales, translations, theme, and feature toggles.

LANGUAGE: javascript
CODE:
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    auth: {
      logo: AuthLogo,
    },
    head: {
      favicon: favicon,
    },
    locales: ["fr", "de"],
    menu: {
      logo: MenuLogo,
    },
    theme: {
      light: {
        colors: {
          primary100: "#f6ecfc",
          primary200: "#e0c1f4",
          primary500: "#ac73e6",
          primary600: "#9736e8",
          primary700: "#8312d1",
          danger700: "#b72b1a",
        },
      },
      dark: {
        // ...
      },
    },
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        Id: "ID french",
      },
    },
    tutorials: false,
    notifications: { releases: false },
  },

  bootstrap() {},
};

----------------------------------------

TITLE: Configuring PostgreSQL Database Connection in Strapi
DESCRIPTION: Example configuration for connecting to a PostgreSQL database in Strapi, including host, port, credentials, and SSL settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      host: env('DATABASE_HOST', '127.0.0.1'),
      port: env.int('DATABASE_PORT', 5432),
      database: env('DATABASE_NAME', 'strapi'),
      user: env('DATABASE_USERNAME', 'strapi'),
      password: env('DATABASE_PASSWORD', 'strapi'),
      schema: env('DATABASE_SCHEMA', 'public'), // Not required
      ssl: {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
      },
    },
    debug: false,
  },
});

----------------------------------------

TITLE: Configuring Authentication with API Token
DESCRIPTION: Setting up authentication using API tokens in Strapi Client.

LANGUAGE: javascript
CODE:
const client = strapi({
  baseURL: 'http://localhost:1337/api',
  auth: 'your-api-token-here',
});

----------------------------------------

TITLE: Configuring Query Parameters in JavaScript for Strapi's REST API
DESCRIPTION: This code snippet demonstrates how to structure query parameters for Strapi's REST API. It includes sorting, filtering, population of related fields, field selection, pagination, status, and locale options.

LANGUAGE: javascript
CODE:
{
  sort: ['title:asc'],
  filters: {
    title: {
      $eq: 'hello',
    },
  },
  populate: {
    author: {
      fields: ['firstName', 'lastName']
    }
  },
  fields: ['title'],
  pagination: {
    pageSize: 10,
    page: 1,
  },
  status: 'published',
  locale: 'en',
}

----------------------------------------

TITLE: Querying Articles with Filters and Population in Strapi Query Engine API (JavaScript)
DESCRIPTION: Demonstrates how to use the Strapi Query Engine API to find multiple articles with specific title filters and populate a related category. This snippet shows the basic usage of the Query Engine through strapi.db.query.

LANGUAGE: javascript
CODE:
strapi.db.query('api::blog.article').findMany({ // uid syntax: 'api::api-name.content-type-name'
  where: {
    title: {
      $startsWith: '2021',
      $endsWith: 'v4',
    },
  },
  populate: {
    category: true,
  },
});

----------------------------------------

TITLE: Setting Database Environment Variables for MySQL/MariaDB
DESCRIPTION: Example of environment variables for configuring a MySQL or MariaDB database connection in Strapi.

LANGUAGE: bash
CODE:
# Database
DATABASE_CLIENT=mysql
DATABASE_HOST=127.0.0.1
DATABASE_PORT=3306
DATABASE_NAME=strapi
DATABASE_USERNAME=strapi
DATABASE_PASSWORD=strap1
DATABASE_SSL=false

----------------------------------------

TITLE: Implementing Custom Controller with Factory - JavaScript
DESCRIPTION: Example of creating a custom controller using createCoreController factory function, demonstrating 3 methods: custom action, wrapping core action, and replacing core action with sanitization.

LANGUAGE: JavaScript
CODE:
const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  async exampleAction(ctx) {
    try {
      ctx.body = 'ok';
    } catch (err) {
      ctx.body = err;
    }
  },

  async find(ctx) {
    ctx.query = { ...ctx.query, local: 'en' }
    const { data, meta } = await super.find(ctx);
    meta.date = Date.now()
    return { data, meta };
  },

  async find(ctx) {
    await this.validateQuery(ctx);
    const sanitizedQueryParams = await this.sanitizeQuery(ctx);
    const { results, pagination } = await strapi.service('api::restaurant.restaurant').find(sanitizedQueryParams);
    const sanitizedResults = await this.sanitizeOutput(results, ctx);
    return this.transformResponse(sanitizedResults, { pagination });
  }
}));

----------------------------------------

TITLE: Testing Authentication Endpoints in Strapi
DESCRIPTION: Write tests for user authentication and protected routes in Strapi.

LANGUAGE: javascript
CODE:
const request = require('supertest');

const mockUserData = {
  username: "tester",
  email: "tester@strapi.com",
  provider: "local",
  password: "1234abc",
  confirmed: true,
  blocked: null,
};

it("should login user and return jwt token", async () => {
  await strapi.plugins["users-permissions"].services.user.add({
    ...mockUserData,
  });

  await request(strapi.server.httpServer)
    .post("/api/auth/local")
    .set("accept", "application/json")
    .set("Content-Type", "application/json")
    .send({
      identifier: mockUserData.email,
      password: mockUserData.password,
    })
    .expect("Content-Type", /json/)
    .expect(200)
    .then((data) => {
      expect(data.body.jwt).toBeDefined();
    });
});

it('should return users data for authenticated user', async () => {
  const defaultRole = await strapi.query('plugin::users-permissions.role').findOne({}, []);

  const role = defaultRole ? defaultRole.id : null;

  const user = await strapi.plugins['users-permissions'].services.user.add({
    ...mockUserData,
    username: 'tester2',
    email: 'tester2@strapi.com',
    role,
  });

  const jwt = strapi.plugins['users-permissions'].services.jwt.issue({
    id: user.id,
  });

  await request(strapi.server.httpServer)
    .get('/api/users/me')
    .set('accept', 'application/json')
    .set('Content-Type', 'application/json')
    .set('Authorization', 'Bearer ' + jwt)
    .expect('Content-Type', /json/)
    .expect(200)
    .then(data => {
      expect(data.body).toBeDefined();
      expect(data.body.id).toBe(user.id);
      expect(data.body.username).toBe(user.username);
      expect(data.body.email).toBe(user.email);
    });
});

----------------------------------------

TITLE: Model Attributes with Validations
DESCRIPTION: Example showing model attributes with various validations like minLength, maxLength, required etc.

LANGUAGE: json
CODE:
{
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true
    },
    "slug": {
      "type": "uid",
      "targetField": "title"
    }
  }
}

----------------------------------------

TITLE: Using onCommit and onRollback Hooks in Strapi Transactions
DESCRIPTION: Demonstrates how to use onCommit and onRollback hooks to execute code after a transaction is committed or rolled back in Strapi.

LANGUAGE: javascript
CODE:
await strapi.db.transaction(async ({ onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();

  onCommit(() => {
    // This will be executed after the transaction is committed
  });

  onRollback(() => {
    // This will be executed after the transaction is rolled back
  });
});

----------------------------------------

TITLE: Configuring Minimal Strapi Admin Settings in TypeScript
DESCRIPTION: TypeScript version of the basic configuration for Strapi admin panel including essential settings for API tokens, audit logs, authentication, and transfer tokens.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
  auditLogs: {
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
  },
  auth: {
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    }
  },
});

----------------------------------------

TITLE: Custom Review Controller in Strapi
DESCRIPTION: A custom controller that extends the core controller to handle review creation and email notification

LANGUAGE: javascript
CODE:
const { createCoreController } = require('@strapi/strapi').factories;

module.exports = createCoreController('api::review.review', ({ strapi }) => ({
  async create(ctx) {
    const newReview = await strapi.service('api::review.review').create(ctx);

    if (newReview.restaurant?.owner) {
      await strapi.service('api::email.email').send({
        to: newReview.restaurant.owner.email,
        subject: 'You have a new review!',
        html: `You've received a ${newReview.note} star review: ${newReview.content}`,
      });
    }

    const sanitizedReview = await this.sanitizeOutput(newReview, ctx);

    ctx.body = sanitizedReview;
  },
}));

----------------------------------------

TITLE: Finding a Single Entry with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the findOne() method to retrieve a single article entry with specified fields and populated category.

LANGUAGE: javascript
CODE:
const entry = await strapi.entityService.findOne('api::article.article', 1, {
  fields: ['title', 'description'],
  populate: { category: true },
});

----------------------------------------

TITLE: Finding Multiple Entries with Strapi Query Engine API
DESCRIPTION: Uses the findMany() method to retrieve multiple entries matching specified parameters. It supports selecting attributes, filtering, ordering, limiting results, and populating relations.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::blog.article').findMany({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  orderBy: { publishedAt: 'DESC' },
  populate: { category: true },
});

----------------------------------------

TITLE: Publishing All Locale Versions of a Document in Strapi
DESCRIPTION: Use the publish() method with the '*' wildcard to publish all language versions of a document. This example publishes all locales of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi
  .documents('api::restaurant.restaurant')
  .publish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });

----------------------------------------

TITLE: Creating Custom Policy for Review Submission in Strapi
DESCRIPTION: This code creates a custom policy to prevent restaurant owners from submitting reviews for their own restaurants. It uses the Entity Service API to check the restaurant owner and compares it with the authenticated user.

LANGUAGE: javascript
CODE:
module.exports = async (policyContext, config, { strapi }) => {
  const { body } = policyContext.request;
  const { user } = policyContext.state;

  if (!user) {
    return false;
  }

  const [restaurant] = await strapi.entityService.findMany(
    'api::restaurant.restaurant',
    {
      filters: {
        slug: body.restaurant,
      },
      populate: ['owner'],
    }
  );
  if (!restaurant) {
    return false;
  }

  if (user.id === restaurant.owner.id) {
    return false;
  }

  return true;
};

----------------------------------------

TITLE: Ordering Results with Strapi Entity Service API in JavaScript
DESCRIPTION: Demonstrates how to order query results using the sort parameter in Strapi's Entity Service API. It shows single field sorting, multiple field sorting, and relational sorting.

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  sort: 'id',
});

// single with direction
strapi.entityService.findMany('api::article.article', {
  sort: { id: 'desc' },
});

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  sort: ['publishDate', 'name'],
});

// multiple with direction
strapi.entityService.findMany('api::article.article', {
  sort: [{ title: 'asc' }, { publishedAt: 'desc' }],
});

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  sort: {
    author: {
      name: 'asc',
    },
  },
});

----------------------------------------

TITLE: Sending Basic Email with send() Function in Strapi
DESCRIPTION: Example of using the send() function in a Strapi controller or service to send a basic email. Demonstrates all available email properties including to, from, cc, bcc, replyTo, subject, text, and html content.

LANGUAGE: javascript
CODE:
await strapi.plugins['email'].services.email.send({
  to: 'valid email address',
  from: 'your verified email address',
  cc: 'valid email address',
  bcc: 'valid email address',
  replyTo: 'valid email address',
  subject: 'The Strapi Email plugin worked successfully',
  text: 'Hello world!',
  html: 'Hello world!',
})

----------------------------------------

TITLE: Creating a New Restaurant Document with GraphQL Mutation
DESCRIPTION: GraphQL mutation to create a new restaurant document, demonstrating how to use the createRestaurant mutation.

LANGUAGE: graphql
CODE:
mutation CreateRestaurant($data: RestaurantInput!) {
  createRestaurant(data: {
    name: "Pizzeria Arrivederci"
  }) {
    name
    documentId
  }
}

----------------------------------------

TITLE: Installing Strapi Client with Package Managers
DESCRIPTION: Instructions for installing the Strapi Client library using different package managers (Yarn, NPM, pnpm).

LANGUAGE: bash
CODE:
yarn add @strapi/client

LANGUAGE: bash
CODE:
npm install @strapi/client

LANGUAGE: bash
CODE:
pnpm add @strapi/client

----------------------------------------

TITLE: Basic Entity Service Usage in Strapi
DESCRIPTION: Demonstrates how to use the Entity Service API to find a single article entry with populated relations. The API is accessed through the global strapi.entityService object.

LANGUAGE: javascript
CODE:
const entry = await strapi.entityService.findOne('api::article.article', 1, {
  populate: { someRelation: true },
});

----------------------------------------

TITLE: Querying Restaurants with Related Categories in GraphQL
DESCRIPTION: GraphQL query to fetch all restaurant documents and their associated categories, demonstrating how to include relation data in queries.

LANGUAGE: graphql
CODE:
{
  restaurants {
    documentId
    name
    description
    # categories is a many-to-many relation
    categories {
      documentId
      name
    }
  }
}

----------------------------------------

TITLE: Custom Controller with Sanitization Example
DESCRIPTION: Example of implementing a custom controller with proper query sanitization and validation using Strapi's contentAPI utilities.

LANGUAGE: JavaScript
CODE:
const { sanitize, validate } = strapi.contentApi;

module.exports = {
  async findCustom(ctx) {
    const contentType = strapi.contentType('api::test.test');
    await validate.query(ctx.query, contentType, { auth: ctx.state.auth });
    const sanitizedQueryParams = await sanitize.query(ctx.query, contentType, { auth: ctx.state.auth });

    const documents = await strapi.documents(contentType.uid).findMany(sanitizedQueryParams);

    return await sanitize.output(documents, contentType, { auth: ctx.state.auth });
  }
}

----------------------------------------

TITLE: Implementing Asynchronous Lifecycle Functions in Strapi
DESCRIPTION: This snippet shows how to implement asynchronous register, bootstrap, and destroy functions in Strapi. These async functions allow for more complex operations that may require waiting for results.

LANGUAGE: javascript
CODE:
module.exports = {
  async register() {
    // some async code
  },
  async bootstrap() {
    // some async code
  },
  async destroy() {
    // some async code
  }
};

LANGUAGE: typescript
CODE:
export default {
  async register() {
    // some async code
  },
  async bootstrap() {
    // some async code
  },
  async destroy() {
    // some async code
  }
};

----------------------------------------

TITLE: Configuring Minimal Strapi Admin Settings in JavaScript
DESCRIPTION: Basic configuration for Strapi admin panel including essential settings for API tokens, audit logs, authentication, and transfer tokens. Uses environment variables for sensitive values.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
  auditLogs: {
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
  },
  auth: {
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    }
  },
});

----------------------------------------

TITLE: Configuring MySQL/MariaDB Database Connection in Strapi
DESCRIPTION: Example configuration for connecting to a MySQL or MariaDB database in Strapi, including host, port, credentials, and SSL settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  connection: {
    client: 'mysql',
    connection: {
      host: env('DATABASE_HOST', '127.0.0.1'),
      port: env.int('DATABASE_PORT', 3306),
      database: env('DATABASE_NAME', 'strapi'),
      user: env('DATABASE_USERNAME', 'strapi'),
      password: env('DATABASE_PASSWORD', 'strapi'),
      ssl: {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
      },
    },
    debug: false,
  },
});

----------------------------------------

TITLE: File Upload Implementation Examples
DESCRIPTION: Examples showing how to implement file uploads using both browser-based and Node.js approaches.

LANGUAGE: html
CODE:
<form>\n  <input type=\"file\" name=\"files\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n<script type=\"text/javascript\">\n  const form = document.querySelector('form');\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    await fetch('/api/upload', {\n      method: 'post',\n      body: new FormData(e.target)\n    });\n  });\n</script>

LANGUAGE: javascript
CODE:
import { FormData } from 'formdata-node';\nimport fetch, { blobFrom } from 'node-fetch';\n\nconst file = await blobFrom('./1.png', 'image/png');\nconst form = new FormData();\n\nform.append('files', file, \"1.png\");\n\nconst response = await fetch('http://localhost:1337/api/upload', {\n  method: 'post',\n  body: form,\n});

----------------------------------------

TITLE: Registering a Custom Field in the Strapi Admin Panel
DESCRIPTION: Example of registering a 'color' custom field in the Strapi admin panel using the app.customFields.register() method. This code should be placed in the plugin's admin registration file.

LANGUAGE: jsx
CODE:
import ColorPickerIcon from "./components/ColorPicker/ColorPickerIcon";

export default {
  register(app) {
    app.customFields.register({
      name: "color",
      pluginId: "color-picker",
      type: "string",
      intlLabel: {
        id: "color-picker.color.label",
        defaultMessage: "Color",
      },
      intlDescription: {
        id: "color-picker.color.description",
        defaultMessage: "Select any color",
      },
      icon: ColorPickerIcon,
      components: {
        Input: async () =>
          import(
            /* webpackChunkName: "input-component" */ "./components/Input"
          ),
      },
      options: {
        // declare options here
      },
    });
  },
};

----------------------------------------

TITLE: Creating Login Form with JWT Authentication in Next.js
DESCRIPTION: Implementation of a login page component that handles user authentication through Strapi's /auth/local endpoint. The component uses Formik for form handling, sends authentication requests to Strapi, and stores the received JWT token in localStorage. Requires the formik package and NextUI components.

LANGUAGE: jsx
CODE:
import React from 'react';
import { useFormik } from 'formik';
import { Button, Input } from '@nextui-org/react';
import Layout from '@/components/layout';
import { getStrapiURL } from '@/utils';

const Login = () => {
  const { handleSubmit, handleChange } = useFormik({
    initialValues: {
      identifier: '',
      password: '',
    },
    onSubmit: async (values) => {
      const res = await fetch(getStrapiURL('/auth/local'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });
      const { jwt } = await res.json();
      localStorage.setItem('token', jwt); 
    },
  });
  return (
    <Layout>
      <div className="h-full w-full flex justify-center items-center my-24">
        <form onSubmit={handleSubmit} className="flex flex-col gap-y-6 w-4/12 ">
          <h1 className="font-bold text-3xl mb-6">Login</h1>
          <Input
            onChange={handleChange}
            type="email"
            name="identifier"
            label="Email"
            placeholder="Enter your email"
          />
          <Input
            type="password"
            name="password"
            label="Password"
            placeholder="Enter your password"
            onChange={handleChange}
          />
          <Button type="submit" className="bg-primary rounded-md text-muted">
            Login
          </Button>
        </form>
      </div>
    </Layout>
  );
};

export default Login;

----------------------------------------

TITLE: Finding Single Document - Document Service API
DESCRIPTION: Example of using findOne() to retrieve a single document by ID, returning draft version in default locale

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm'
})

----------------------------------------

TITLE: Extending Plugin Backend in JavaScript/TypeScript
DESCRIPTION: Demonstrates how to extend a Strapi plugin's backend by modifying controllers, policies, and routes within the strapi-server.js|ts file.

LANGUAGE: javascript
CODE:
module.exports = (plugin) => {
  plugin.controllers.controllerA.find = (ctx) => {};

  plugin.policies[newPolicy] = (ctx) => {};

  plugin.routes['content-api'].routes.push({
    method: 'GET',
    path: '/route-path',
    handler: 'controller.action',
  });

  return plugin;
};

----------------------------------------

TITLE: Creating Custom Upload Provider in TypeScript
DESCRIPTION: Template for creating a custom upload provider in TypeScript, including methods for upload, delete, and optional features like signed URLs and privacy settings.

LANGUAGE: typescript
CODE:
export default {
  init(providerOptions) {
    // init your provider if necessary

    return {
      upload(file) {
        // upload the file in the provider
        // file content is accessible by `file.buffer`
      },
      uploadStream(file) {
        // upload the file in the provider
        // file content is accessible by `file.stream`
      },
      delete(file) {
        // delete the file in the provider
      },
      checkFileSize(file, { sizeLimit }) {
        // (optional)
        // implement your own file size limit logic
      },
      getSignedUrl(file) {
        // (optional)
        // Generate a signed URL for the given file.
        // The signed URL allows secure access to the file.
        // Only Content Manager assets will be signed.
        // Returns an object {url: string}.
      },
      isPrivate() {
        // (optional)
        // if it is private, file urls will be signed
        // Returns a boolean
      },
    };
  },
};

----------------------------------------

TITLE: Strapi REST API Parameters Table
DESCRIPTION: A markdown table listing all available API parameters for Strapi REST API, including their types and descriptions. Parameters include populate, fields, filters, locale, status, sort, and pagination options.

LANGUAGE: markdown
CODE:
| Operator           | Type          | Description                                           |
| ------------------ | ------------- | ----------------------------------------------------- |
| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/dev-docs/api/rest/populate-select#population) |
| `fields`           | Array         | [Select only specific fields to display](/dev-docs/api/rest/populate-select#field-selection) |
| `filters`          | Object        | [Filter the response](/dev-docs/api/rest/filters-locale-publication#filtering) |
| `locale`           | String        | [Select a locale](/dev-docs/i18n#rest) |
| `status`           | String        | [Select the Draft & Publish status](/dev-docs/api/rest/filters-locale-publication#status) |
| `sort`             | String or Array  | [Sort the response](/dev-docs/api/rest/sort-pagination.md#sorting) |
| `pagination`       | Object        | [Page through entries](/dev-docs/api/rest/sort-pagination.md#pagination) |

----------------------------------------

TITLE: Login Authentication with Axios
DESCRIPTION: Example of how to authenticate a user using the local authentication strategy with Axios

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .post('http://localhost:1337/api/auth/local', {
    identifier: 'user@strapi.io',
    password: 'strapiPassword',
  })
  .then(response => {
    console.log('Well done!');
    console.log('User profile', response.data.user);
    console.log('User token', response.data.jwt);
  })
  .catch(error => {
    console.log('An error occurred:', error.response);
  });

----------------------------------------

TITLE: Creating Custom Email Provider in TypeScript
DESCRIPTION: Template for creating a custom email provider in TypeScript, including the init function and send method.

LANGUAGE: typescript
CODE:
export {
  init: (providerOptions = {}, settings = {}) => {
    return {
      send: async options => {},
    };
  },
};

----------------------------------------

TITLE: Finding Multiple Entries with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the findMany() method to retrieve multiple article entries with filters, sorting, and populated category.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  fields: ['title', 'description'],
  filters: { title: 'Hello World' },
  sort: { createdAt: 'DESC' },
  populate: { category: true },
});

----------------------------------------

TITLE: Configuring the Security Middleware in Strapi
DESCRIPTION: Example of custom configuration for the security middleware, which is based on koa-helmet and sets various security-related HTTP headers.

LANGUAGE: javascript
CODE:
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]

LANGUAGE: typescript
CODE:
export default [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
]

----------------------------------------

TITLE: Configuring Full Strapi Server Settings in JavaScript
DESCRIPTION: Complete server configuration example including all optional parameters like socket, proxy settings, CRON jobs, and logging configurations.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
  socket: '/tmp/nginx.socket',
  emitErrors: false,
  url: env('PUBLIC_URL', 'https://api.example.com'),
  proxy: env.bool('IS_PROXIED', true),
  cron: {
    enabled: env.bool('CRON_ENABLED', false),
  },
  transfer: {
    remote: {
      enabled: false,
    },
  },
  logger: {
    updates: {
      enabled: false,
    },
    startup: {
      enabled: false,
    },
  },
});

----------------------------------------

TITLE: Configuring Upload Provider in TypeScript
DESCRIPTION: Example configuration for AWS S3 upload provider in the plugins.ts file, including provider options and parameters.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3', // For community providers pass the full package name (e.g. provider: 'strapi-provider-upload-google-cloud-storage')
      providerOptions: {
        accessKeyId: env('AWS_ACCESS_KEY_ID'),
        secretAccessKey: env('AWS_ACCESS_SECRET'),
        region: env('AWS_REGION'),
        params: {
          ACL: env('AWS_ACL', 'public-read'), // 'private' if you want to make the uploaded files private
          Bucket: env('AWS_BUCKET'),
        },
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: REST API Error Response Format
DESCRIPTION: Standard JSON structure for REST API error responses in Strapi, including status, name, message and details.

LANGUAGE: json
CODE:
{
  "data": null,
  "error": {
    "status": "",
    "name": "",
    "message": "",
    "details": {
    }
  }
}

----------------------------------------

TITLE: Vue.js Component for Creating Restaurants with Strapi API
DESCRIPTION: Example Vue.js component that allows creating new restaurants using a form and sending a POST request to the Strapi API using Axios.

LANGUAGE: javascript
CODE:
<template>
<div id="app">
  <div v-if="error">
    {{ error }}
  </div>

  <form id="form" v-on:submit="handleSubmit" v-else>
    <label for="name">Name</label>
    <input id="name" v-model="modifiedData.name" type="text" name="name">

    <label for="description">Description</label>
    <input id="description" v-model="modifiedData.description" type="text" name="description">

    <div>
      <br />
      Select categories
      <div v-for="category in allCategories" :key="category.id">
        <label>{{ category.name }}</label>
        <input
          type="checkbox"
          :value="category.id"
          v-model="modifiedData.categories"
          name="categories"
          :id="category.id"
        />
      </div>
    </div>

    <input type="submit" value="Submit">
  </form>

</div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'App',
  data() {
    return {
      allCategories: [],
      modifiedData: {
        name: '',
        description: '',
        categories: [],
      },
      error: null
    }
  },
  async mounted() {
    try {
      const response = await axios.get('http://localhost:1337/api/categories')
      this.allCategories = response.data;
    } catch (error) {
      this.error = error;
    }
  },
  methods: {
    handleSubmit: async function(e) {
      e.preventDefault();

      try {
        const response = await axios.post('http://localhost:1337/api/restaurants', this.modifiedData)
        console.log(response);
      } catch(error) {
        this.error = error;
      }
    }
  }
}
</script>

----------------------------------------

TITLE: PUT Request to Strapi API using Fetch in Vue.js
DESCRIPTION: Example of making a PUT request to update a restaurant's category in the Strapi API using Fetch.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants/2', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    categories: [2],
  }),
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  });

----------------------------------------

TITLE: Updating Dynamic Zone with Entity Service in Strapi
DESCRIPTION: Updates a dynamic zone's components within an entry. Components with IDs are updated, while those without IDs result in deletion of old components and creation of new ones.

LANGUAGE: javascript
CODE:
strapi.entityService.update('api::article.article', 1, {
  data: {
    myDynamicZone: [
      {
        // will update
        id: 2,
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        // will add a new & delete old ones
        __component: 'compo.type2',
        foo: 'bar2',
      },
    ],
  },
});

----------------------------------------

TITLE: Configuring Amazon S3 Upload Provider (JavaScript)
DESCRIPTION: This code snippet shows how to configure the Amazon S3 upload provider for Strapi Cloud in JavaScript. It includes the necessary configuration options and environment variables for S3 integration.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3',
      providerOptions: {
        baseUrl: env('CDN_URL'),
        rootPath: env('CDN_ROOT_PATH'),
        s3Options: {
          accessKeyId: env('AWS_ACCESS_KEY_ID'),
          secretAccessKey: env('AWS_ACCESS_SECRET'),
          region: env('AWS_REGION'),
          params: {
            ACL: env('AWS_ACL', 'public-read'),
            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),
            Bucket: env('AWS_BUCKET'),
          },
        },
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Configuring API Parameters in Strapi
DESCRIPTION: Configuration example showing how to set up API responses and REST endpoints in Strapi. Demonstrates setting private attributes, API prefix, and pagination limits. The configuration includes response privacy settings and REST API limits for pagination control.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  rest: {
    prefix: '/v1',
    defaultLimit: 100,
    maxLimit: 250,
  },
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  responses: {
    privateAttributes: ['_v', 'id', 'created_at'],
  },
  rest: {
    prefix: '/v1',
    defaultLimit: 100,
    maxLimit: 250,
  },
});

----------------------------------------

TITLE: Updating Component with Entity Service in Strapi
DESCRIPTION: Updates an existing component within an entry. When an ID is provided, the component is updated; without an ID, the old component is deleted and a new one is created.

LANGUAGE: javascript
CODE:
strapi.entityService.update('api::article.article', 1, {
  data: {
    myComponent: {
      id: 1, // will update component with id: 1 (if not specified, would have deleted it and created a new one)
      foo: 'bar',
    },
  },
});

----------------------------------------

TITLE: Working with Collection Types
DESCRIPTION: Examples of CRUD operations using the collection() method for managing collection-type resources.

LANGUAGE: javascript
CODE:
const articles = client.collection('articles');

// Fetch all english articles sorted by title
const allArticles = await articles.find({
  locale: 'en',
  sort: 'title',
});

// Fetch a single article
const singleArticle = await articles.findOne('article-document-id');

// Create a new article
const newArticle = await articles.create({ title: 'New Article', content: '...' });

// Update an existing article
const updatedArticle = await articles.update('article-document-id', { title: 'Updated Title' });

// Delete an article
await articles.delete('article-id');

----------------------------------------

TITLE: Implementing REST API Middleware in Strapi (JavaScript)
DESCRIPTION: Basic structure for implementing a REST API middleware in Strapi using JavaScript. The middleware function takes config and strapi as parameters and returns a function that handles the context and next middleware.

LANGUAGE: javascript
CODE:
module.exports = (config, { strapi })=> {
  return (context, next) => {};
};

----------------------------------------

TITLE: Configuring Middlewares in Strapi Routes (TypeScript)
DESCRIPTION: Example of configuring middlewares for routes in Strapi using TypeScript. It shows how to add middlewares to a route, including referencing registered middlewares and inline middleware implementations.

LANGUAGE: typescript
CODE:
import { factories } from '@strapi/strapi';

export default factories.createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      middlewares: [
        // point to a registered middleware
        'middleware-name', 

        // point to a registered middleware with some custom configuration
        { name: 'middleware-name', config: {} }, 

        // pass a middleware implementation directly
        (ctx, next) => {
          return next();
        },
      ]
    }
  }
});

----------------------------------------

TITLE: Creating Custom Strapi Service in TypeScript
DESCRIPTION: Shows how to implement a custom Strapi service using TypeScript, including methods for creating new services, wrapping core services, and replacing core services.

LANGUAGE: typescript
CODE:
import { factories } from '@strapi/strapi'; 

export default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely custom service
  async exampleService(...args) {
    let response = { okay: true }

    if (response.okay === false) {
      return { response, error: true }
    }

    return response
  },

  // Method 2: Wrapping a core service (leaves core logic in place)
  async find(...args) {  
    // Calling the default core controller
    const { results, pagination } = await super.find(...args);

    // some custom logic
    results.forEach(result => {
      result.counter = 1;
    });

    return { results, pagination };
  },

  // Method 3: Replacing a core service
  async findOne(documentId, params = {}) {
     return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));
  }
}));

----------------------------------------

TITLE: Paginating Results in Strapi Query Engine API (JavaScript)
DESCRIPTION: Shows how to implement pagination in queries using Strapi's Query Engine API. It uses the 'offset' and 'limit' parameters to control the number and position of returned results.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  offset: 15, 
  limit: 10,
});

----------------------------------------

TITLE: Finding Users with Simple Filter in Strapi REST API
DESCRIPTION: Example showing how to find users with a specific username using the $eq operator with both direct URL query and qs library implementation.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  filters: {
    username: {
      $eq: 'John',
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/users?${query}`);

----------------------------------------

TITLE: Custom Review Service in Strapi
DESCRIPTION: A custom service that handles review creation using Strapi's Entity Service API to find restaurants and create reviews

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::review.review', ({ strapi }) => ({
  async create(ctx) {
    const user = ctx.state.user;
    const { body } = ctx.request;

    const restaurants = await strapi.entityService.findMany(
      'api::restaurant.restaurant',
      {
        filters: {
          slug: body.restaurant,
        },
      }
    );

    const newReview = await strapi.entityService.create('api::review.review', {
      data: {
        note: body.note,
        content: body.content,
        restaurant: restaurants[0].id,
        author: user.id,
      },
      populate: ['restaurant.owner'],
    });

    return newReview;
  },
}));

----------------------------------------

TITLE: Development Dockerfile for Strapi with Yarn
DESCRIPTION: Development Dockerfile configuration for Strapi using Yarn package manager. Sets up Node.js Alpine environment with necessary dependencies and builds the application.

LANGUAGE: dockerfile
CODE:
FROM node:18-alpine3.18
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev nasm bash vips-dev git
ARG NODE_ENV=development
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json yarn.lock ./
RUN yarn global add node-gyp
RUN yarn config set network-timeout 600000 -g && yarn install
ENV PATH=/opt/node_modules/.bin:$PATH

WORKDIR /opt/app
COPY . .
RUN chown -R node:node /opt/app
USER node
RUN ["yarn", "build"]
EXPOSE 1337
CMD ["yarn", "develop"]

----------------------------------------

TITLE: Creating Strapi Project with Template using NPM
DESCRIPTION: Command to create a new Strapi project from a template using NPM package manager. The command requires specifying a project name and template source.

LANGUAGE: sh
CODE:
npx create-strapi-app@latest my-project --template <template-name-or-url>

----------------------------------------

TITLE: Creating Strapi Project with Template using Yarn
DESCRIPTION: Command to create a new Strapi project from a template using Yarn package manager. The command requires specifying a project name and template source.

LANGUAGE: sh
CODE:
yarn create strapi-app my-project --template <template-name-or-url>

----------------------------------------

TITLE: Configuring Admin Panel Settings Files
DESCRIPTION: Two main configuration files control admin panel customization: config/admin.ts|js for host/port/path settings and src/admin/app.ts|js for UI customization like logos, themes, and translations.

LANGUAGE: typescript
CODE:
config/admin.ts|js

LANGUAGE: typescript
CODE:
src/admin/app.ts|js

----------------------------------------

TITLE: Basic Migration File Template in JavaScript
DESCRIPTION: Template for creating a new migration file in Strapi. It exports an 'up' function that receives a Knex instance for running database queries.

LANGUAGE: javascript
CODE:
'use strict'

async function up(knex) {}

module.exports = { up };

----------------------------------------

TITLE: Using Logical Operators in Strapi Filters
DESCRIPTION: Examples of using logical operators ($and, $or) to combine multiple filter conditions.

LANGUAGE: javascript
CODE:
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

LANGUAGE: javascript
CODE:
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

----------------------------------------

TITLE: Configuring Full Strapi Admin Settings in JavaScript
DESCRIPTION: Complete configuration example for Strapi admin panel including all available options such as authentication events, rate limiting, custom URLs, and server settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
  auditLogs: {
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
    retentionDays: 120,
  },
  auth: {
    events: {
      onConnectionSuccess(e) {
        console.log(e.user, e.provider);
      },
      onConnectionError(e) {
        console.error(e.error, e.provider);
      },
    },
    options: {
      expiresIn: '7d',
    },
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  url: env('PUBLIC_ADMIN_URL', '/dashboard'),
  autoOpen: false,
  watchIgnoreFiles: [
    './my-custom-folder',
    './scripts/someScript.sh',
  ],
  host: 'localhost',
  port: 8003,
  serveAdminPanel: env.bool('SERVE_ADMIN', true),
  forgotPassword: {
    from: 'no-reply@example.com',
    replyTo: 'no-reply@example.com',
  },
  rateLimit: {
    interval: { hour: 1, min: 30 },
    timeWait: 3*1000,
    max: 10,
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    }
  },
});

----------------------------------------

TITLE: Implementing a Global Authentication Policy in Strapi
DESCRIPTION: Creates a global policy named 'is-authenticated' that checks if a user session is open before allowing access to a route.

LANGUAGE: javascript
CODE:
module.exports = (policyContext, config, { strapi }) => {
  if (policyContext.state.user) { // if a session is open
    // go to next policy or reach the controller's action
    return true;
  }

  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};

LANGUAGE: typescript
CODE:
export default (policyContext, config, { strapi }) => {
  if (policyContext.state.user) { // if a session is open
    // go to next policy or reach the controller's action
    return true;
  }

  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};

----------------------------------------

TITLE: Configuring Email Provider in TypeScript
DESCRIPTION: Example configuration for Sendgrid email provider in the plugins.ts file, including provider options and settings.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'juliasedefdjian@strapi.io',
        defaultReplyTo: 'juliasedefdjian@strapi.io',
        testAddress: 'juliasedefdjian@strapi.io',
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Advanced Populating with Entity Service API in Strapi (JavaScript)
DESCRIPTION: Shows how to use an object for more advanced populating, including nested relations, filters, sorting, and field selection.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: true,
    repeatableComponent: {
      fields: ['fieldA'],
      filters: {},
      sort: 'fieldA:asc',
      populate: {
        relationB: true,
      },
    },
  },
});

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: {
      filters: {
        name: {
          $contains: 'Strapi',
        },
      },
    },

    repeatableComponent: {
      fields: ['someAttributeName'],
      sort: ['someAttributeName'],
      populate: {
        componentRelationA: true,
      },
    },
  },
});

----------------------------------------

TITLE: Pagination by Page Implementation
DESCRIPTION: Shows how to implement page-based pagination with page number and page size parameters using the qs library.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  pagination: {
    page: 1,
    pageSize: 10,
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);

----------------------------------------

TITLE: Sending Emails via Lifecycle Hooks in JavaScript
DESCRIPTION: Implementation of email sending using afterCreate lifecycle hook in JavaScript. Triggers email notification when new content is created in the admin panel.

LANGUAGE: javascript
CODE:
module.exports = {
    async afterCreate(event) {
        const { result } = event;

        try{
            await strapi.plugin('email').service('email').send({
              to: 'valid email address',
              from: 'your verified email address',
              cc: 'valid email address',
              bcc: 'valid email address',
              replyTo: 'valid email address',
              subject: 'The Strapi Email plugin worked successfully',
              text: '${fieldName}',
              html: 'Hello world!', 
                
            })
        } catch(err) {
            console.log(err);
        }
    }
}

----------------------------------------

TITLE: Sorting Multiple Fields with qs Library
DESCRIPTION: Example showing how to sort API results using multiple fields with the qs library for query string generation.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  sort: ['Description', 'Name'],
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);

----------------------------------------

TITLE: Example Migration File Using Knex.js in JavaScript
DESCRIPTION: Demonstrates various database operations in a Strapi migration file using Knex.js. It includes examples of renaming tables and columns, and updating data.

LANGUAGE: javascript
CODE:
module.exports = {
  async up(knex) {
    // You have full access to the Knex.js API with an already initialized connection to the database

    // Example: renaming a table
    await knex.schema.renameTable('oldName', 'newName');

    // Example: renaming a column
    await knex.schema.table('someTable', table => {
      table.renameColumn('oldName', 'newName');
    });

    // Example: updating data
    await knex.from('someTable').update({ columnName: 'newValue' }).where({ columnName: 'oldValue' });
  },
};

----------------------------------------

TITLE: Implementing Plugin Register Function
DESCRIPTION: Example of implementing the register lifecycle function for a plugin which is called before bootstrap to load plugin configurations.

LANGUAGE: javascript
CODE:
'use strict';

const register = ({ strapi }) => {
  // execute some register code
};

module.exports = register;

LANGUAGE: typescript
CODE:
import type { Core } from '@strapi/strapi';

const register = ({ strapi }: { strapi: Core.Strapi }) => {
  // execute some register code
};

export default register;

----------------------------------------

TITLE: Initializing Strapi Client with Base Configuration
DESCRIPTION: Basic setup of the Strapi Client with base URL configuration using ES modules.

LANGUAGE: javascript
CODE:
import { strapi } from '@strapi/client';

const client = strapi({ baseURL: 'http://localhost:1337/api' });

----------------------------------------

TITLE: Creating Custom Strapi Service in JavaScript
DESCRIPTION: Demonstrates how to create a custom Strapi service using JavaScript, including methods for creating new services, wrapping core services, and replacing core services.

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({
  // Method 1: Creating an entirely new custom service
  async exampleService(...args) {
    let response = { okay: true }

    if (response.okay === false) {
      return { response, error: true }
    }

    return response
  },

  // Method 2: Wrapping a core service (leaves core logic in place)
  async find(...args) {  
    // Calling the default core controller
    const { results, pagination } = await super.find(...args);

    // some custom logic
    results.forEach(result => {
      result.counter = 1;
    });

    return { results, pagination };
  },

  // Method 3: Replacing a core service
  async findOne(documentId, params = {}) {
    return strapi.documents('api::restaurant.restaurant').findOne(documentId, this.getFetchParams(params));
  }
}));

----------------------------------------

TITLE: Creating Localized Content with GraphQL
DESCRIPTION: Example of how to create a new localized document for a specific locale using GraphQL. The locale argument is passed in the mutation.

LANGUAGE: graphql
CODE:
mutation CreateRestaurant($data: RestaurantInput!, $locale: I18NLocaleCode) {
  createRestaurant(
    data: {
      name: "Brasserie Bonjour",
      description: "Description in French goes here"
    },
    locale: "fr"
  ) {
  documentId
  name
  description
  locale
}

----------------------------------------

TITLE: Consuming API Data in React Component
DESCRIPTION: Demonstrates how to use the API request handler within a React component using useEffect to fetch and store the data in component state.

LANGUAGE: javascript
CODE:
import foobarRequests from "../../api/foobar";
const [foobar, setFoobar] = useState([]);

// …
useEffect(() => {
  foobarRequests.getFoobar().then(res => {
    setSchemas(res.data);
  });
}, [setFoobar]);
// …

----------------------------------------

TITLE: Create Document Request Example in JSON
DESCRIPTION: Example JSON request body for a POST request to create a new document (restaurant). Shows how to structure the request data, including rich text fields.

LANGUAGE: json
CODE:
{ 
  "data": {
    "Name": "Restaurant D",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Configuring Minimal Strapi Server Settings in JavaScript
DESCRIPTION: Basic server configuration including required host, port and app keys settings. Uses environment variables with fallback values.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
});

----------------------------------------

TITLE: Configuring Full Strapi Admin Settings in TypeScript
DESCRIPTION: TypeScript version of the complete configuration for Strapi admin panel with all available options including authentication events, rate limiting, custom URLs, and server settings.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'someRandomLongString'),
  },
  auditLogs: {
    enabled: env.bool('AUDIT_LOGS_ENABLED', true),
    retentionDays: 120,
  },
  auth: {
    events: {
      onConnectionSuccess(e) {
        console.log(e.user, e.provider);
      },
      onConnectionError(e) {
        console.error(e.error, e.provider);
      },
    },
    options: {
      expiresIn: '7d',
    },
    secret: env('ADMIN_JWT_SECRET', 'someSecretKey'),
  },
  url: env('PUBLIC_ADMIN_URL', '/dashboard'),
  autoOpen: false,
  watchIgnoreFiles: [
    './my-custom-folder',
    './scripts/someScript.sh',
  ],
  host: 'localhost',
  port: 8003,
  serveAdminPanel: env.bool('SERVE_ADMIN', true),
  forgotPassword: {
    from: 'no-reply@example.com',
    replyTo: 'no-reply@example.com',
  },
  rateLimit: {
    interval: { hour: 1, min: 30 },
    timeWait: 3*1000,
    max: 10,
  },
  transfer: {
    token: {
      salt: env('TRANSFER_TOKEN_SALT', 'anotherRandomLongString'),
    }
  },
});

----------------------------------------

TITLE: Configuring SQLite Database Connection in Strapi (TypeScript)
DESCRIPTION: Example configuration for connecting to a SQLite database in Strapi using TypeScript.

LANGUAGE: typescript
CODE:
import path from 'path';
export default ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(
        __dirname,
        '..',
        '..',
        env('DATABASE_FILENAME', path.join('.tmp', 'data.db'))
      ),
    },
    useNullAsDefault: true,
  },
});

----------------------------------------

TITLE: Implementing Custom Controller in Strapi Plugin
DESCRIPTION: Creates a basic controller that returns a simple text response when the custom admin route is accessed.

LANGUAGE: javascript
CODE:
'use strict';

module.exports = {
  async index(ctx) {
    ctx.body = 'You are in the my-plugin-content-type controller!';
  }
}

----------------------------------------

TITLE: Using Comparison Operators in Strapi Query Engine API
DESCRIPTION: This snippet showcases the use of comparison operators ($lt, $lte, $gt, $gte) to filter articles based on their rating.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lt: 10,
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lte: 10,
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gt: 5,
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gte: 5,
    },
  },
});

----------------------------------------

TITLE: Implementing Preview Handler in Strapi
DESCRIPTION: Complete configuration for the Preview feature in Strapi, including URL generation and handler logic for Next.js draft mode.

LANGUAGE: typescript
CODE:
const getPreviewPathname = (uid, { locale, document }): string => {
  // … as defined in step 2
};

export default ({ env }) => {
  const clientUrl = env("CLIENT_URL");
  const previewSecret = env("PREVIEW_SECRET");

  return {
    preview: {
      enabled: true,
      config: {
        allowedOrigins: clientUrl,
        async handler(uid, { documentId, locale, status }) {
          const document = await strapi.documents(uid).findOne({ documentId });
          
          const pathname = getPreviewPathname(uid, { locale, document });

          if (!pathname) {
            return null;
          }

          const urlSearchParams = new URLSearchParams({
            url: pathname,
            secret: previewSecret,
            status,
          });
          return `${clientUrl}/api/preview?${urlSearchParams}`;
        },
      },
    },
  };
};

----------------------------------------

TITLE: Using Null Check Operators in Strapi Query Engine API
DESCRIPTION: This example shows how to use $null and $notNull operators to filter articles based on whether their title is null or not.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $null: true,
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notNull: true,
    },
  },
});

----------------------------------------

TITLE: Registering a Custom Field on the Strapi Server
DESCRIPTION: Example of registering a 'color' custom field on the Strapi server using the strapi.customFields.register() method. This code should be placed in the plugin's server registration file.

LANGUAGE: javascript
CODE:
"use strict";

module.exports = ({ strapi }) => {
  strapi.customFields.register({
    name: "color",
    plugin: "color-picker",
    type: "string",
    inputSize: {
      // optional
      default: 4,
      isResizable: true,
    },
  });
};

----------------------------------------

TITLE: Filtering with $or Operator in Strapi Query Engine API
DESCRIPTION: This example demonstrates the use of the $or logical operator to find articles that match either of two conditions: a specific title or creation date.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

----------------------------------------

TITLE: Docker Compose Configuration for Strapi with MySQL
DESCRIPTION: Docker Compose setup for Strapi with MySQL database, including network configuration and volume management. Defines services for both Strapi application and MySQL database.

LANGUAGE: yaml
CODE:
version: "3"
services:
  strapi:
    container_name: strapi
    build: .
    image: strapi:latest
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: strapiDB
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./.env:/opt/app/.env
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - strapi
    depends_on:
      - strapiDB

----------------------------------------

TITLE: Pulling Data from Remote Strapi Instance
DESCRIPTION: CLI command to initiate a data transfer from a remote Strapi instance to a local instance using yarn or npm.

LANGUAGE: bash
CODE:
yarn strapi transfer --from remoteURL

LANGUAGE: bash
CODE:
npm run strapi transfer -- --from remoteURL

----------------------------------------

TITLE: Configuring GraphQL Plugin in JavaScript
DESCRIPTION: Example configuration for the GraphQL plugin including endpoint, shadow CRUD, and Apollo Server settings.

LANGUAGE: javascript
CODE:
module.exports = {
  graphql: {
    config: {
      endpoint: '/graphql',
      shadowCRUD: true,
      landingPage: false,
      depthLimit: 7,
      amountLimit: 100,
      apolloServer: {
        tracing: false,
      },
    },
  },
};

----------------------------------------

TITLE: Configuring Strapi Plugins in JavaScript
DESCRIPTION: Example of a basic custom configuration for Strapi plugins using JavaScript. It demonstrates how to enable, disable, and configure various plugins, including a custom local plugin.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // enable a plugin that doesn't require any configuration
  i18n: true,

  // enable a custom plugin
  myplugin: {
    // my-plugin is going to be the internal name used for this plugin
    enabled: true,
    resolve: './src/plugins/my-local-plugin',
    config: {
      // user plugin config goes here
    },
  },

  // disable a plugin
  'my-other-plugin': {
    enabled: false, // plugin installed but disabled
  },
});

----------------------------------------

TITLE: Registering Custom WYSIWYG Editor in Strapi Admin Panel (JavaScript)
DESCRIPTION: This code snippet demonstrates how to register a custom WYSIWYG editor component in Strapi's admin panel using JavaScript. It imports a custom WYSIWYG component and uses the app.addFields() function to declare the new field.

LANGUAGE: javascript
CODE:
// The following file contains the logic for your new WYSIWYG editor👇
import MyNewWYSIGWYG from "./extensions/components/MyNewWYSIGWYG";

export default {
  bootstrap(app) {
    app.addFields({ type: "wysiwyg", Component: MyNewWYSIGWYG });
  },
};

----------------------------------------

TITLE: Sorting on Multiple Fields with Strapi Document Service API in JavaScript
DESCRIPTION: This example shows how to sort results based on multiple fields using the Document Service API. It sorts articles first by title in ascending order, then by slug in descending order.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  sort: [{ title: "asc" }, { slug: "desc" }],
});

----------------------------------------

TITLE: Custom Email Service in Strapi
DESCRIPTION: A custom service that handles email sending functionality using Strapi's Email plugin and Entity Service API

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::email.email', ({ strapi }) => ({
  async send({ to, subject, html }) {
    const emailConfig = await strapi.entityService.findOne(
      'api::email.email',
      1
    );

    await strapi.plugins['email'].services.email.send({
      to,
      subject,
      html,
      from: emailConfig.from,
    });
  },
}));

----------------------------------------

TITLE: Population with Filtering Query
DESCRIPTION: Shows how to combine populate and filters parameters to fetch and filter related data using the qs library.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify(
  {
    populate: {
      categories: {
        sort: ['name:asc'],
        filters: {
          name: {
            $eq: 'Cars',
          },
        },
      },
    },
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/articles?${query}`);

----------------------------------------

TITLE: Using $and Logical Operator with Entity Service API
DESCRIPTION: Example of using the $and logical operator to filter results where all nested conditions must be true. Can be explicit or implicit.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

----------------------------------------

TITLE: Registering Documentation Override in Strapi Plugin
DESCRIPTION: JavaScript code showing how to register an override for the generated documentation in a Strapi plugin, including version-specific overrides and exclusions.

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    if (strapi.plugin('documentation')) {
      const override = {
        // Only run this override for version 1.0.0
        info: { version: '1.0.0' },
        paths: {
          '/answer-to-everything': {
            get: {
              responses: { 200: { description: "*" }}
            }
          }
        }
      }

      strapi
        .plugin('documentation')
        .service('override')
        .registerOverride(override, {
          // Specify the origin in case the user does not want this plugin documented
          pluginOrigin: 'upload',
          // The override provides everything don't generate anything
          excludeFromGeneration: ['upload'],
        });
    }
  },
}

----------------------------------------

TITLE: Mutating Generated Documentation in Strapi Config
DESCRIPTION: JavaScript code demonstrating how to use the mutateDocumentation function to modify the generated documentation draft in Strapi configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  documentation: {
    config: {
      "x-strapi-config": {
        mutateDocumentation: (generatedDocumentationDraft) => {
          generatedDocumentationDraft.paths[
            "/answer-to-everything" // must be an existing path
          ].get.responses["200"].description = "*";
        },
      },
    },
  },
};

----------------------------------------

TITLE: Installing Sentry Plugin with Package Managers
DESCRIPTION: Commands to install the Strapi Sentry plugin using either yarn or npm package managers.

LANGUAGE: bash
CODE:
yarn add @strapi/plugin-sentry

LANGUAGE: bash
CODE:
npm install @strapi/plugin-sentry

----------------------------------------

TITLE: Finding a Single Entry with Strapi Query Engine API
DESCRIPTION: Uses the findOne() method to retrieve a single entry matching specified parameters. It allows selecting specific attributes, applying filters, and populating relations.

LANGUAGE: javascript
CODE:
const entry = await strapi.db.query('api::blog.article').findOne({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  populate: { category: true },
});

----------------------------------------

TITLE: Finding First Document with Selected Fields using findFirst()
DESCRIPTION: Example of using findFirst() with the fields parameter to retrieve specific fields from the first matching restaurant document.

LANGUAGE: javascript
CODE:
const document = await strapi.documents("api::restaurant.restaurant").findFirst({
  fields: ["name", "description"],
});

----------------------------------------

TITLE: Paginating Restaurant Results by Offset in GraphQL
DESCRIPTION: GraphQL query demonstrating pagination by offset for restaurant results, including page information in the response.

LANGUAGE: graphql
CODE:
{
  restaurants_connection(pagination: { start: 10, limit: 19 }) {
    nodes {
      documentId
      name
    }
    pageInfo {
      page
      pageSize
      pageCount
      total
    }
  }
}

----------------------------------------

TITLE: CRUD Operations Example
DESCRIPTION: Complete example of a Nuxt application implementing CRUD operations with Strapi, including list view, create, update, and delete functionality.

LANGUAGE: html
CODE:
<template>
  <div>
    <ul>
      <li v-for="restaurant in restaurants?.data" :key="restaurant.id">
        {{ restaurant.attributes.name }}
        <button @click="$router.push(`${$route.path}/restaurant/${restaurant.id}`)">Edit</button>
        <button @click="deleteRestaurant(restaurant.id)">Delete</button>
      </li>
    </ul>
    
    <nuxt-link :to="`${$route.path}/restaurant/create`">Create</nuxt-link>
  </div>
</template>

<script setup lang="ts">
import type { Restaurant } from '~/types'
const { find, delete: remove } = useStrapi()
const { data: restaurants, refresh } = await useAsyncData(
  'restaurants',
  () => find<Restaurant>('restaurants')
)

const deleteRestaurant = async (restaurantId: number) => {
  await remove<Restaurant>("restaurants", restaurantId);
  refresh()
};
</script>

----------------------------------------

TITLE: Creating Multiple Entries with createMany()
DESCRIPTION: Creates multiple database entries at once using the createMany() method. Returns an object containing count of created entries and array of their IDs. Note that MySQL only returns the last inserted ID.

LANGUAGE: javascript
CODE:
await strapi.db.query("api::blog.article").createMany({
  data: [
    {
      title: "ABCD",
    },
    {
      title: "EFGH",
    },
  ],
});

// { count: 2 , ids: [1,2]}

----------------------------------------

TITLE: Implementing Document Service Middleware with Filters
DESCRIPTION: Example showing how to implement a Document Service middleware with content type and action filtering, including data transformation and result modification.

LANGUAGE: javascript
CODE:
const applyTo = ['api::article.article'];

strapi.documents.use(async (context, next) => {
  // Only run for certain content types
  if (!applyTo.includes(context.uid)) {
    return next();
  }

  // Only run for certain actions
  if (['create', 'update'].includes(context.action)) {
    context.params.data.fullName = `${context.params.data.firstName} ${context.params.data.lastName}`;
  }

  const result = await next();

  // Modify the result as necessary before returning it
  result.retrievedAt = Date.now();

  return result;
});

----------------------------------------

TITLE: Configuring Strapi Plugins in TypeScript
DESCRIPTION: Example of a basic custom configuration for Strapi plugins using TypeScript. It demonstrates how to enable, disable, and configure various plugins, including a custom local plugin.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  // enable a plugin that doesn't require any configuration
  i18n: true,

  // enable a custom plugin
  myplugin: {
    // my-plugin is going to be the internal name used for this plugin
    enabled: true,
    resolve: './src/plugins/my-local-plugin',
    config: {
      // user plugin config goes here
    },
  },

  // disable a plugin
  'my-other-plugin': {
    enabled: false, // plugin installed but disabled
  },
});

----------------------------------------

TITLE: Configuring Full Strapi Server Settings in TypeScript
DESCRIPTION: TypeScript version of the complete server configuration including all optional parameters and environment variable handling.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
  socket: '/tmp/nginx.socket',
  emitErrors: false,
  url: env('PUBLIC_URL', 'https://api.example.com'),
  proxy: env.bool('IS_PROXIED', true),
  cron: {
    enabled: env.bool('CRON_ENABLED', false),
  },
  transfer: {
    remote: {
      enabled: false,
    },
  },
  logger: {
    updates: {
      enabled: false,
    },
    startup: {
      enabled: false,
    },
  },
});

----------------------------------------

TITLE: Paginating Restaurant Results by Page in GraphQL
DESCRIPTION: GraphQL query demonstrating pagination by page for restaurant results, including page information in the response.

LANGUAGE: graphql
CODE:
{
  restaurants_connection(pagination: { page: 1, pageSize: 10 }) {
    nodes {
      documentId
      name
    }
    pageInfo {
      page
      pageSize
      pageCount
      total
    }
  }
}

----------------------------------------

TITLE: Querying Media Fields for Restaurants in GraphQL
DESCRIPTION: GraphQL query to fetch the documentId and URL of images associated with restaurant documents.

LANGUAGE: graphql
CODE:
{
  restaurants {
    images {
      documentId
      url
    }
  }
}

----------------------------------------

TITLE: Deleting a Restaurant Document with GraphQL Mutation
DESCRIPTION: GraphQL mutation to delete a restaurant document, demonstrating how to use the deleteRestaurant mutation.

LANGUAGE: graphql
CODE:
mutation DeleteRestaurant {
  deleteRestaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl") {
    documentId
  }
}

----------------------------------------

TITLE: Implementing an API-Specific Policy in Strapi
DESCRIPTION: Creates an 'is-admin' policy specific to the restaurant API that checks if the user has an Administrator role.

LANGUAGE: javascript
CODE:
module.exports = async (policyContext, config, { strapi }) => {
  if (policyContext.state.user.role.name === 'Administrator') {
    // Go to next policy or will reach the controller's action.
    return true;
  }

  return false;
};

LANGUAGE: typescript
CODE:
export default (policyContext, config, { strapi }) => {
  if (policyContext.state.user.role.name === 'Administrator') {
    // Go to next policy or will reach the controller's action.
    return true;
  }

  return false;
};

----------------------------------------

TITLE: Creating Angular App with CLI
DESCRIPTION: Initialize a new Angular application using the Angular CLI tool.

LANGUAGE: bash
CODE:
npx -p @angular/cli ng new angular-app

----------------------------------------

TITLE: Complex Population with Filters in Strapi
DESCRIPTION: Demonstrates complex population patterns including where filters, nested relations, and component ordering.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  populate: {
    relationA: {
      where: {
        name: {
          $contains: 'Strapi',
        },
      },
    },

    repeatableComponent: {
      select: ['someAttributeName'],
      orderBy: ['someAttributeName'],
      populate: {
        componentRelationA: true,
      },
    },

    dynamiczoneA: true,
  },
});

----------------------------------------

TITLE: Get Single Document Response Example in JSON
DESCRIPTION: Example JSON response for a GET request to retrieve a single document by its documentId. Demonstrates the structure of a single document response in Strapi 5.

LANGUAGE: json
CODE:
{
  "data": {
    "id": 6,
    "documentId": "znrlzntu9ei5onjvwfaalu2v",
    "Name": "Biscotte Restaurant",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine bassics, such as 4 Formaggi or Calzone, and our original creations such as Do Luigi or Nduja."
          }
        ]
      }
    ],
    "createdAt": "2024-02-27T10:19:04.953Z",
    "updatedAt": "2024-03-05T15:52:05.591Z",
    "publishedAt": "2024-03-05T15:52:05.600Z",
    "locale": "en"
  },
  "meta": {}
}

----------------------------------------

TITLE: POST Request Implementation
DESCRIPTION: Example of making POST request to create a new restaurant in Strapi using Angular HttpClient.

LANGUAGE: typescript
CODE:
this.http
  .post("http://localhost:1337/api/restaurants", {
    data: {
      name: "Dolemon Sushi",
      description: "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",
      categories: [3],
    },
  })
  .subscribe((response) => {
    console.log(response);
  });

----------------------------------------

TITLE: Using Custom Service in Strapi Controller (JavaScript)
DESCRIPTION: Illustrates how to use a custom service within a Strapi controller, specifically for user signup and sending a welcome email.

LANGUAGE: javascript
CODE:
module.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({
  // GET /hello
  async signup(ctx) {
    const { userData } = ctx.body;

    // Store the new user in database.
    const user = await strapi.service('plugin::users-permissions.user').add(userData);

    // Send an email to validate his subscriptions.
    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');

    // Send response to the server.
    ctx.send({
      ok: true,
    });
  },
}));

----------------------------------------

TITLE: Applying a Global Policy to a Route in Strapi
DESCRIPTION: Demonstrates how to apply a global 'is-authenticated' policy to a GET route for retrieving restaurants.

LANGUAGE: javascript
CODE:
module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          Before executing the find action in the Restaurant.js controller,
          we call the global 'is-authenticated' policy,
          found at ./src/policies/is-authenticated.js.
         */
        policies: ['global::is-authenticated']
      }
    }
  ]
}

LANGUAGE: typescript
CODE:
export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          Before executing the find action in the Restaurant.js controller,
          we call the global 'is-authenticated' policy,
          found at ./src/policies/is-authenticated.js.
         */
        policies: ['global::is-authenticated']
      }
    }
  ]
}

----------------------------------------

TITLE: Ordering Results with Single Attribute in Strapi Query Engine API (JavaScript)
DESCRIPTION: Demonstrates how to order query results based on a single attribute using Strapi's Query Engine API. It shows both simple ordering and ordering with a specified direction.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  orderBy: 'id',
});

// single with direction
strapi.db.query('api::article.article').findMany({
  orderBy: { id: 'asc' },
});

----------------------------------------

TITLE: Analytics Middleware Implementation for Strapi
DESCRIPTION: Custom middleware implementation that tracks restaurant page views and updates analytics in Google Sheets. Handles both existing and new restaurant entries.

LANGUAGE: javascript
CODE:
'use strict';

const { createGoogleSheetClient } = require('./utils');

const serviceAccountKeyFile = './gs-keys.json';
const sheetId = '1P7Oeh84c18NlHp1Zy-5kXD8zgpoA1WmvYL62T4GWpfk';
const tabName = 'Restaurants';
const range = 'A2:C';

const VIEWS_CELL = 'C';

const transformGSheetToObject = (response) =>
  response.reduce(
    (acc, restaurant) => ({
      ...acc,
      [restaurant[0]]: {
        id: restaurant[0],
        name: restaurant[1],
        views: restaurant[2],
        cellNum: Object.keys(acc).length + 2
      },
    }),
    {}
  );

module.exports = (config, { strapi }) => {
  return async (context, next) => {
    const { readGoogleSheet, updateoogleSheet, writeGoogleSheet } =
      await createGoogleSheetClient({
        keyFile: serviceAccountKeyFile,
        range,
        sheetId,
        tabName,
      });
    
    const restaurantId = context.params.id;
    const restaurant = await strapi.entityService.findOne(
      'api::restaurant.restaurant',
      restaurantId
    );

    const restaurantAnalytics = await readGoogleSheet();
    
    const requestedRestaurant =
      transformGSheetToObject(restaurantAnalytics)[restaurantId];

    if (requestedRestaurant) {
      await updateoogleSheet(
        `${VIEWS_CELL}${requestedRestaurant.cellNum}:${VIEWS_CELL}${requestedRestaurant.cellNum}`,
        [[Number(requestedRestaurant.views) + 1]]
      );
    } else {
      const newRestaurant = [[restaurant.id, restaurant.name, 1]];
      await writeGoogleSheet(newRestaurant);
    }
  
    await next();
  };
};

----------------------------------------

TITLE: Installing 11ty Dependencies
DESCRIPTION: Commands to initialize a new project and install the Eleventy static site generator.

LANGUAGE: bash
CODE:
yarn init -y
yarn add @11ty/eleventy

----------------------------------------

TITLE: Working with Single Types
DESCRIPTION: Examples of operations using the single() method for managing single-type resources.

LANGUAGE: javascript
CODE:
const homepage = client.single('homepage');

// Fetch the default homepage content
const defaultHomepage = await homepage.find();

// Fetch the Spanish version of the homepage
const spanishHomepage = await homepage.find({ locale: 'es' });

// Update the homepage draft content
const updatedHomepage = await homepage.update(
  { title: 'Updated Homepage Title' },
  { status: 'draft' }
);

// Delete the homepage content
await homepage.delete();

----------------------------------------

TITLE: Restaurant List Template
DESCRIPTION: Markdown template for rendering the list of restaurants with front matter configuration.

LANGUAGE: markdown
CODE:
---
title: Restaurants
layout: default.liquid
pagination:
  data: restaurants.data
  size: 100
  alias: restaurants
---

# Restaurants

<ul>
{%- for restaurant in restaurants -%}
  <li><a href="/restaurants/{{ restaurant.id }}/">{{ restaurant.attributes.name }}</a></li>
{%- endfor -%}
</ul>

----------------------------------------

TITLE: Sending Templated Email in Strapi
DESCRIPTION: Example of using sendTemplatedEmail() function to send template-based emails. Shows how to define email templates with Lodash string templates and pass user data for dynamic content generation.

LANGUAGE: javascript
CODE:
const emailTemplate = {
  subject: 'Welcome <%= user.firstname %>',
  text: `Welcome to mywebsite.fr!
    Your account is now linked with: <%= user.email %>.`,
  html: `<h1>Welcome to mywebsite.fr!</h1>
    <p>Your account is now linked with: <%= user.email %>.<p>`,
};

await strapi.plugins['email'].services.email.sendTemplatedEmail(
  {
    to: user.email,
    // from: is not specified, the defaultFrom is used.
  },
    emailTemplate,
  {
    user: _.pick(user, ['username', 'email', 'firstname', 'lastname']),
  }
);

----------------------------------------

TITLE: Implementing Draft-Aware Data Fetching in Next.js
DESCRIPTION: Utility function for fetching content from Strapi, considering draft mode status in Next.js.

LANGUAGE: typescript
CODE:
import { draftMode } from "next/headers";
import qs from "qs";

export default async function fetchContentType(
  contentType: string,
  params: Record = {}
): Promise {
  const { isEnabled: isDraftMode } = draftMode();
  
  try {
    const queryParams = { ...params };
    if (isDraftMode) {
      queryParams.status = "draft";
    }
    
    const url = `${baseURL}/${contentType}?${qs.stringify(queryParams)}`;
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(
        `Failed to fetch data from Strapi (url=${url}, status=${response.status})`
      );
    }
    return await response.json();
  } catch (error) {
    console.error("Error fetching content:", error);
    throw error;
  }
}

----------------------------------------

TITLE: GET Request Implementation
DESCRIPTION: Examples of making GET requests to Strapi API using both Axios and Fetch to retrieve restaurant data

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.get('http://localhost:1337/api/restaurants').then(response => {
  console.log(response.data);
});

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
  },
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Populating All Relations One Level Deep
DESCRIPTION: Example of using wildcard (*) to populate all relations one level deep in a query to find multiple articles.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  populate: "*",
});

----------------------------------------

TITLE: POST Request Implementation
DESCRIPTION: Examples of making POST requests to create new restaurant entries in Strapi using Axios and Fetch

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .post('http://localhost:1337/api/restaurants/?populate=categories', {
    data: {
      name: 'Dolemon Sushi',
      description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
      categories: [3],
    },
  })
  .then(response => {
    console.log(response);
  });

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants/?populate=categories', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    data: {
      name: 'Dolemon Sushi',
      description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
      categories: [3],
    },
  }),
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Settings API Configuration
DESCRIPTION: Example showing how to create and configure settings section with links

LANGUAGE: jsx
CODE:
const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

export default {
  register(app) {
    app.createSettingSection(
      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create
      [
        // links
        {
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
        },
      ]
    );
  },
};

----------------------------------------

TITLE: Deep Population of Nested Relations
DESCRIPTION: Shows how to populate nested relations multiple levels deep using object notation.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  populate: {
    categories: {
      populate: ["articles"],
    },
  },
});

----------------------------------------

TITLE: Using String Matching Operators in Strapi Query Engine API
DESCRIPTION: This snippet demonstrates various string matching operators ($contains, $containsi, $startsWith, $endsWith) to filter articles based on their titles.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $contains: 'Hello',
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $containsi: 'hello',
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});

const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});

----------------------------------------

TITLE: Configuring Core Router in Strapi (JavaScript)
DESCRIPTION: Example of configuring a core router in Strapi using JavaScript. It demonstrates how to use the createCoreRouter function to set up routes with custom prefixes, specific actions, and configurations for policies and middlewares.

LANGUAGE: javascript
CODE:
const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  prefix: '',
  only: ['find', 'findOne'],
  except: [],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    },
    findOne: {},
    create: {},
    update: {},
    delete: {},
  },
});

----------------------------------------

TITLE: Customizing Theme Colors in Strapi Admin Panel
DESCRIPTION: Example of how to customize theme colors for the Strapi admin panel, specifically changing primary and button colors to red.

LANGUAGE: typescript
CODE:
import type { StrapiApp } from "@strapi/strapi/admin";

export default {
  config: {
    theme: {
      light: {
        colors: {
          primary600: "red",
          buttonPrimary500: "red",
          buttonPrimary600: "red",
        },
      };
    },
  },
  bootstrap (app: StrapiApp) {},
}

----------------------------------------

TITLE: Updating Favicon in Strapi Admin Panel
DESCRIPTION: Example of how to replace the favicon in the Strapi admin panel.

LANGUAGE: javascript
CODE:
import favicon from "./extensions/favicon.png";

export default {
  config: {
    head: {
      favicon: favicon,
    },
  },
};

----------------------------------------

TITLE: PUT Request to Strapi API using Axios in Vue.js
DESCRIPTION: Example of making a PUT request to update a restaurant's category in the Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .put('http://localhost:1337/api/restaurants/2', {
    categories: [2],
  })
  .then(response => {
    console.log(response);
  });

----------------------------------------

TITLE: Extending Translations in Strapi Admin Panel (TypeScript)
DESCRIPTION: Example of how to extend translations for the Strapi admin panel and plugins using TypeScript.

LANGUAGE: typescript
CODE:
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        Id: "ID french",
        "content-type-builder.plugin.name": "Constructeur de Type-Contenu",
      },
    },
  },
  bootstrap() {},
};

----------------------------------------

TITLE: Configuring Upload Plugin in TypeScript
DESCRIPTION: Example of a custom configuration for the Upload plugin in Strapi using TypeScript. It demonstrates how to set various options such as provider options, size limit, and breakpoints for responsive images.

LANGUAGE: typescript
CODE:
export default () => ({
  upload: {
    config: {
      providerOptions: {
        localServer: {
          maxage: 300000
        },
      },
      sizeLimit: 250 * 1024 * 1024, // 256mb in bytes
      breakpoints: {
        xlarge: 1920,
        large: 1000,
        medium: 750,
        small: 500,
        xsmall: 64
      },
    },
  },
})

----------------------------------------

TITLE: Creating Localized Content with REST API
DESCRIPTION: Example of how to create a new localized document for a specific locale using the REST API. The locale is specified in the request body.

LANGUAGE: json
CODE:
{
  "data": {
    "Name": "She's Cake",
    "locale": "fr"
  }
}

----------------------------------------

TITLE: Paginating Results with Strapi Entity Service API in JavaScript
DESCRIPTION: Shows how to paginate query results using the Entity Service API. It demonstrates two methods: using start/limit parameters and using page/pageSize parameters.

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  start: 10,
  limit: 15,
});

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  page: 1,
  pageSize: 15,
});

----------------------------------------

TITLE: GET Request Implementation
DESCRIPTION: Example of making GET request to fetch restaurants data from Strapi API using Angular HttpClient.

LANGUAGE: typescript
CODE:
this.http
  .get("http://localhost:1337/api/restaurants", {
    params: { populate: "*" },
  })
  .subscribe((response) => {
    console.log(response);
  });

----------------------------------------

TITLE: Category Template Component
DESCRIPTION: React template component for rendering individual category pages with associated restaurants

LANGUAGE: javascript
CODE:
import React from 'react';
import { graphql } from 'gatsby';

export const query = graphql`
  query Category($name: String!) {
    category: strapiCategory(name: { eq: $name }) {
      name
      restaurants {
        id
        name
      }
    }
  }
`;

const Category = ({ data }) => {
  const restaurants = data.category.restaurants;
  const category = data.category.name;

  return (
    <div>
      <h1>{category}</h1>
      <ul>
        {restaurants.map(restaurant => {
          return <li key={restaurant.id}>{restaurant.name}</li>;
        })}
      </ul>
    </div>
  );
};

export default Category;

----------------------------------------

TITLE: Configuring Documentation Plugin in Strapi
DESCRIPTION: JavaScript configuration object for the Documentation plugin, including OpenAPI specification details, server information, and plugin-specific settings.

LANGUAGE: javascript
CODE:
module.exports = {
  documentation: {
    enabled: true,
    config: {
      openapi: '3.0.0',
      info: {
        version: '1.0.0',
        title: 'DOCUMENTATION',
        description: '',
        termsOfService: 'YOUR_TERMS_OF_SERVICE_URL',
        contact: {
          name: 'TEAM',
          email: 'contact-email@something.io',
          url: 'mywebsite.io'
        },
        license: {
          name: 'Apache 2.0',
          url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
        },
      },
      'x-strapi-config': {
        plugins: [ 'upload', 'users-permissions'],
        path: '/documentation',
      },
      servers: [{ url: 'http://localhost:1337/api', description: 'Development server' }],
      externalDocs: {
        description: 'Find out more',
        url: 'https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html'
      },
      security: [ { bearerAuth: [] } ]
    }
  }
}

----------------------------------------

TITLE: Configuring Vite for Strapi Admin Panel
DESCRIPTION: Configuration setup for Vite bundler in Strapi 5 admin panel. Shows how to extend the default Vite configuration by adding custom alias resolvers.

LANGUAGE: javascript
CODE:
const { mergeConfig } = require("vite");

module.exports = (config) => {
  // Important: always return the modified config
  return mergeConfig(config, {
    resolve: {
      alias: {
        "@": "/src",
      },
    },
  });
};

LANGUAGE: typescript
CODE:
import { mergeConfig } from "vite";

export default (config) => {
  // Important: always return the modified config
  return mergeConfig(config, {
    resolve: {
      alias: {
        "@": "/src",
      },
    },
  });
};

----------------------------------------

TITLE: Update Document Request Example in JSON
DESCRIPTION: Example JSON request body for a PUT request to update an existing document. Shows how to structure the request data for partial updates, including unchanged fields.

LANGUAGE: json
CODE:
{ 
  "data": {
    "Name": "BMK Paris Bamako",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: Executing Database Transactions in Strapi
DESCRIPTION: Demonstrates how to use strapi.db.transaction to wrap multiple operations in a single transaction. The handler function receives an object with transaction-related properties.

LANGUAGE: javascript
CODE:
await strapi.db.transaction(async ({ trx, rollback, commit, onCommit, onRollback }) => {
  // It will implicitly use the transaction
  await strapi.entityService.create();
  await strapi.entityService.create();
});

----------------------------------------

TITLE: Creating Dart Project Files
DESCRIPTION: Commands to create a new Dart project directory and main file.

LANGUAGE: bash
CODE:
take dart-app
touch main.dart

----------------------------------------

TITLE: PUT Request to Update Restaurant
DESCRIPTION: Performs a PUT request to update the category of a restaurant in the Strapi API.

LANGUAGE: python
CODE:
requests.put(
    "http://localhost:1337/api/restaurants/2",
    params={"populate": "categories"},
    headers={"Content-Type": "application/json"},
    data=json.dumps(
        {
            "data": {
                "categories": [2],
            }
        }
    ),
)

----------------------------------------

TITLE: Making GET Request to Strapi API in Dart
DESCRIPTION: Dart code snippet for making a GET request to fetch restaurants from a Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.get(
  'http://localhost:1337/restaurants',
  headers: headers
);

print(response.body)

----------------------------------------

TITLE: Installing Requests Library
DESCRIPTION: Installs the Requests HTTP library for Python using pip.

LANGUAGE: bash
CODE:
python -m pip install requests

----------------------------------------

TITLE: Restaurant Class with POST Method
DESCRIPTION: Extends the Restaurant class with a method to create a new restaurant in the Strapi API.

LANGUAGE: python
CODE:
import json
import requests

class Restaurant:
    def __init__(self):
        self.api_url = "http://localhost:1337/api"

    def all(self):
        r = requests.get(self.api_url + "/restaurants")
        return r.json()

    def create(self, params):
        r = requests.post(
            self.api_url + "/restaurants",
            headers={"Content-Type": "application/json"},
            data=json.dumps(
                {
                    "data": {
                        "name": params["name"],
                        "description": params["description"],
                        "categories": params["categories"],
                    }
                }
            ),
        )
        return r.json()


restaurant = Restaurant()
print(
    restaurant.create(
        {
            "name": "Dolemon Sushi",
            "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",
            "categories": [3],
        }
    )
)

----------------------------------------

TITLE: Fetching Localized Content with REST API
DESCRIPTION: Example of how to fetch all documents in a specific locale using the REST API. The locale parameter is added to the query string to specify the desired language.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 5,
      "documentId": "h90lgohlzfpjf3bvan72mzll",
      "Title": "Meilleures pizzas",
      "Body": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "On déguste les meilleures pizzas de la ville à la Pizzeria Arrivederci."
            }
          ]
        }
      ],
      "createdAt": "2024-03-06T22:08:59.643Z",
      "updatedAt": "2024-03-06T22:10:21.127Z",
      "publishedAt": "2024-03-06T22:10:21.130Z",
      "locale": "fr"
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 1
    }
  }
}

----------------------------------------

TITLE: Implementing Restaurant Class with GET Request in Dart
DESCRIPTION: Full Dart implementation of a Restaurant class with a method to fetch all restaurants from a Strapi API.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;
import 'dart:convert';

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map<String,String> headers = {
    'Content-Type':'application/json',
    'Accept': 'application/json'
  };

  void all() async {
    var response = await http.get('${api_url}/restaurants', headers: headers);
    print(response.body);
  }
}

void main() {
  var restaurant = Restaurant();
  restaurant.all();
}

----------------------------------------

TITLE: GET Request Implementation for Restaurants
DESCRIPTION: PHP function to fetch all restaurants from Strapi API using cURL

LANGUAGE: php
CODE:
<?php
function getRestaurants(){
    $curl = curl_init(); //Initializes curl
    curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json'
    ]); // Sets header information for authenticated requests

    $res = curl_exec($curl);
    curl_close($curl);
    print_r($res);
}

getRestaurants();

----------------------------------------

TITLE: Populate Fragments for Polymorphic Data in Strapi (JavaScript)
DESCRIPTION: Illustrates the use of populate fragments for better granularity when dealing with polymorphic data structures like dynamic zones and polymorphic relations.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          fields: ['title'],
          filters: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          fields: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          fields: ['username'],
        },
        'api::author.author': {
          fields: ['name'],
        },
      },
    },
  },
});

----------------------------------------

TITLE: Querying Multiple Restaurant Documents with Relay-style Query in GraphQL
DESCRIPTION: GraphQL query to fetch multiple restaurant documents using a Relay-style query structure, returning document details and pagination information.

LANGUAGE: graphql
CODE:
{
  restaurants_connection {
    nodes {
      documentId
      name
    }
    pageInfo {
      pageSize
      page
      pageCount
      total
    }
  }
}

----------------------------------------

TITLE: Creating a Custom Input Component for a Custom Field
DESCRIPTION: Example of creating a custom text input component for use with a custom field in Strapi. This component receives props from the Content Manager and handles input changes.

LANGUAGE: jsx
CODE:
import * as React from "react";

import { useIntl } from "react-intl";

const Input = React.forwardRef((props, ref) => {
  const { attribute, disabled, intlLabel, name, onChange, required, value } =
    props;

  const { formatMessage } = useIntl();

  const handleChange = (e) => {
    onChange({
      target: { name, type: attribute.type, value: e.currentTarget.value },
    });
  };

  return (
    <label>
      {formatMessage(intlLabel)}
      <input
        ref={ref}
        name={name}
        disabled={disabled}
        value={value}
        required={required}
        onChange={handleChange}
      />
    </label>
  );
});

export default Input;

----------------------------------------

TITLE: Comparing JSON Response Structure Between Strapi v4 and v5
DESCRIPTION: Example showing the difference between v4's id-based and v5's documentId-based response formats in the Content API. V4 uses numeric ids while v5 uses string-based documentIds and includes additional system fields.

LANGUAGE: json
CODE:
{
  "data": {
    // system fields
    "id": 14,
    "attributes": {
      // user fields
      "title": "Article A"
      "relation": {
        "data": {
          "id": "clkgylw7d000108lc4rw1bb6s"
          "name": "Category A"
        }
      }
    }
  }
  "meta": {
    // …
  }
}

LANGUAGE: json
CODE:
{
  "data": {
    // system fields
    "documentId": "clkgylmcc000008lcdd868feh",
    "locale": "en",
    // user fields
    "title": "Article A"
    "relation": {
      // system fields
      "documentId": "clkgylw7d000108lc4rw1bb6s"
      // user fields
      "name": "Category A"
    }
  }
  "meta": {
    // …
  }
}

----------------------------------------

TITLE: Basic Data Import with Yarn
DESCRIPTION: Demonstrates the minimum command required to import data from a file in the Strapi project root using Yarn.

LANGUAGE: bash
CODE:
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc

----------------------------------------

TITLE: Data Import with Encryption Key using Yarn
DESCRIPTION: Shows how to import encrypted data by providing an encryption key using Yarn.

LANGUAGE: bash
CODE:
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key

----------------------------------------

TITLE: Eleventy Configuration File
DESCRIPTION: Configuration for Eleventy including template formats, plugins, and directory structures.

LANGUAGE: javascript
CODE:
const HtmlMin = require('html-minifier');
const ErrorOverlay = require('eleventy-plugin-error-overlay');

module.exports = eleventyConfig => {
  eleventyConfig.setTemplateFormats(['md']);
  eleventyConfig.addPlugin(ErrorOverlay);
  eleventyConfig.addTransform('htmlmin', (content, outputPath) => {
    if (outputPath.endsWith('.html')) {
      let minified = HtmlMin.minify(content, {
        useShortDoctype: true,
        removeComments: true,
        collapseWhitespace: true,
      });
      return minified;
    }
    return content;
  });
  return {
    dir: {
      input: 'src',
      output: 'dist',
      includes: '_templates',
      data: '_data',
    },
    jsDataFileSuffix: '.data',
  };
};

----------------------------------------

TITLE: GET Request to Strapi API using Axios
DESCRIPTION: Execute a GET request to fetch all restaurants from the Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.get('http://localhost:1337/api/restaurants').then(response => {
  console.log(response);
});

----------------------------------------

TITLE: Publishing Laravel-Strapi Configuration
DESCRIPTION: Artisan command to publish the configuration file for the Laravel-Strapi package.

LANGUAGE: bash
CODE:
php artisan vendor:publish --provider="Dbfx\LaravelStrapi\LaravelStrapiServiceProvider" --tag="strapi-config"

----------------------------------------

TITLE: Generating Encryption Keys (Mac/Linux)
DESCRIPTION: This command generates a strong encryption key using OpenSSL on Mac or Linux systems. It creates a 48-byte random key encoded in base64.

LANGUAGE: bash
CODE:
openssl rand -base64 48

----------------------------------------

TITLE: Installing GraphQL Plugin with Package Managers
DESCRIPTION: Commands for installing the GraphQL plugin using npm or yarn package managers.

LANGUAGE: bash
CODE:
yarn add @strapi/plugin-graphql

LANGUAGE: bash
CODE:
npm install @strapi/plugin-graphql

----------------------------------------

TITLE: Installing Axios in a Svelte Project
DESCRIPTION: Install the Axios HTTP client in your Svelte project using Yarn. This allows you to make HTTP requests to your Strapi API.

LANGUAGE: bash
CODE:
yarn add axios

----------------------------------------

TITLE: Fetching Category in React with Apollo Client
DESCRIPTION: React component using Apollo Client to fetch and display a specific category and its associated restaurants from the Strapi GraphQL API.

LANGUAGE: javascript
CODE:
import { gql, useQuery } from '@apollo/client';

function Category({ id }) {
  const { loading, error, data } = useQuery(
    gql`
      query Category($id: ID!) {
        category(id: $id) {
          id
          name
          restaurants {
            id
            name
            description
          }
        }
      }
    `,
    { variables: { id } }
  );

  if (loading) return 'Loading...';
  if (error) return `Error! ${error.message}`;

  return (
    <div>
      <h1>{data.category.name}</h1>
      <ul>
        {data.category.restaurants.map(restaurant => (
          <li key={restaurant.id}>{restaurant.name}</li>
        ))}
      </ul>
    </div>
  );
}

----------------------------------------

TITLE: Implementing Synchronous Lifecycle Functions in Strapi
DESCRIPTION: This snippet demonstrates how to implement synchronous register, bootstrap, and destroy functions in Strapi. These functions can be used to add dynamic and logic-based configurations to your Strapi application.

LANGUAGE: javascript
CODE:
module.exports = {
  register() {
    // some sync code
  },
  bootstrap() {
    // some sync code
  },
  destroy() {
    // some sync code
  }
};

LANGUAGE: typescript
CODE:
export default {
  register() {
    // some sync code
  },
  bootstrap() {
    // some sync code
  },
  destroy() {
    // some sync code
  }
};

----------------------------------------

TITLE: POST Request to Strapi API using Fetch in Vue.js
DESCRIPTION: Example of making a POST request to create a new restaurant in the Strapi API using Fetch.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'Dolemon Sushi',
    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
    categories: [3],
  }),
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Configuring the CORS Middleware in Strapi
DESCRIPTION: Example of custom configuration for the CORS middleware, which handles Cross-Origin Resource Sharing settings.

LANGUAGE: javascript
CODE:
module.exports = [
  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: ['https://example.com', 'https://subdomain.example.com', 'https://someotherwebsite.org'],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],
      keepHeaderOnError: true,
    },
  },
  // ...
]

LANGUAGE: typescript
CODE:
export default [
  // ...
  {
    name: 'strapi::cors',
    config: {
      origin: ['example.com', 'subdomain.example.com', 'someotherwebsite.org'],
      methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
      headers: ['Content-Type', 'Authorization', 'Origin', 'Accept'],
      keepHeaderOnError: true,
    },
  },
  // ...
]

----------------------------------------

TITLE: POST Request to Strapi API using Fetch
DESCRIPTION: Example of making a POST request to create a new restaurant in a Strapi API using Fetch API.

LANGUAGE: javascript
CODE:
fetch("http://localhost:1337/api/restaurants", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    data: {
      "Name": "Dolemon Sushi",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      categories: [3],
    },
  }),
})
  .then((response) => response.json())
  .then((data) => console.log(data));

----------------------------------------

TITLE: Configuring Local Server Upload Settings in Strapi
DESCRIPTION: Configuration for local server upload settings including maxage parameter for the upload plugin.

LANGUAGE: javascript
CODE:
module.exports = ({ env })=>({\n  upload: {\n    config: {\n      providerOptions: {\n        localServer: {\n          maxage: 300000\n        },\n      },\n    },\n  },\n});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({\n  upload: {\n    config: {\n      providerOptions: {\n        localServer: {\n          maxage: 300000\n        },\n      },\n    },\n  },\n});

----------------------------------------

TITLE: Fetching Restaurants in Vue.js with Apollo Client
DESCRIPTION: Vue.js component using Apollo Client to fetch and display a list of restaurants from the Strapi GraphQL API.

LANGUAGE: javascript
CODE:
<template>
  <div>
    <ul>
      <li v-for="restaurant in restaurants" :key="restaurant.id">
        {{ restaurant.name }}
      </li>
    </ul>
  </div>
</template>

<script>
import gql from "graphql-tag";

export default {
  data() {
    return {
      restaurants: []
    };
  },
  apollo: {
    restaurants: gql`
      query Restaurants {
        restaurants {
          id
          name
          description
          categories {
            name
          }
        }
      }`
  }
};
</script>

----------------------------------------

TITLE: Adding EditViewSidePanel in Strapi Plugin (JavaScript)
DESCRIPTION: Example of using the addEditViewSidePanel API to add a new panel to the Edit view sidebar in a Strapi plugin.

LANGUAGE: javascript
CODE:
app.getPlugin('content-manager').apis.addEditViewSidePanel([ReleasesPanel])

----------------------------------------

TITLE: Configuring Jekyll plugins in _config.yml
DESCRIPTION: YAML configuration to add jekyll-strapi to the list of Jekyll plugins in _config.yml.

LANGUAGE: yaml
CODE:
plugins:
  - jekyll-feed
  - jekyll-strapi

----------------------------------------

TITLE: Plugin Server Index Configuration
DESCRIPTION: Server-side index.js configuration for registering content-types and other plugin components

LANGUAGE: javascript
CODE:
'use strict';

const register = require('./register');
const bootstrap = require('./bootstrap');
const destroy = require('./destroy');
const config = require('./config');
const contentTypes = require('./content-types');
const controllers = require('./controllers');
const routes = require('./routes');
const middlewares = require('./middlewares');
const policies = require('./policies');
const services = require('./services');

module.exports = {
  register,
  bootstrap,
  destroy,
  config,
  controllers,
  routes,
  services,
  contentTypes,
  policies,
  middlewares,
};

----------------------------------------

TITLE: Relational Ordering in Strapi Query Engine API (JavaScript)
DESCRIPTION: Demonstrates how to perform relational ordering in queries using Strapi's Query Engine API. This example orders articles based on the name of their associated author.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  orderBy: {
    author: {
      name: 'asc',
    },
  },
});

----------------------------------------

TITLE: Using Sentry Service Methods
DESCRIPTION: Examples of using the global Sentry service methods including sendError and getInstance.

LANGUAGE: javascript
CODE:
try {
  // Your code here
} catch (error) {
  // Either send a simple error
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error);

  // Or send an error with a customized Sentry scope
  strapi
    .plugin('sentry')
    .service('sentry')
    .sendError(error, (scope, sentryInstance) => {
      // Customize the scope here
      scope.setTag('my_custom_tag', 'Tag value');
    });
  throw error;
}

LANGUAGE: javascript
CODE:
const sentryInstance = strapi
  .plugin('sentry')
  .service('sentry')
  .getInstance();

----------------------------------------

TITLE: Importing UID Namespace for Content Type Identifiers in TypeScript
DESCRIPTION: This snippet shows how to import the UID namespace from Strapi, which contains literal unions representing available resources in the application.

LANGUAGE: typescript
CODE:
import type { UID } from '@strapi/strapi';

----------------------------------------

TITLE: React Component for Fetching and Displaying Restaurants
DESCRIPTION: Example React component that fetches restaurants from a Strapi API and displays them, using either Axios or Fetch.

LANGUAGE: javascript
CODE:
import axios from "axios";
import { useEffect, useState } from "react";

const App = () => {
  const [error, setError] = useState(null);
  const [restaurants, setRestaurants] = useState([]);

  useEffect(() => {
    axios
      .get("http://localhost:1337/api/restaurants")
      .then(({ data }) => setRestaurants(data.data))
      .catch((error) => setError(error));
  }, []);

  if (error) {
    return <div>An error occured: {error.message}</div>;
  }

  return (
    <div className="App">
      <ul>
        {restaurants.map(({ id, attributes }) => (
          <li key={id}>{attributes.Name}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;

----------------------------------------

TITLE: Configuring Strapi Server for Separate Deployment (TypeScript)
DESCRIPTION: TypeScript configuration for the Strapi server when deploying the admin panel on a different server. This sets the host, port, and backend URL.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  url: "http://yourbackend.com",
});

----------------------------------------

TITLE: Configuring Strapi Macro for Laravel HTTP Client
DESCRIPTION: This snippet shows how to create a custom macro for Laravel's HTTP client to integrate with Strapi. It sets up headers and base URL for Strapi requests.

LANGUAGE: php
CODE:
use Illuminate\Support\Facades\Http;

/**
 * Bootstrap any application services.
 *
 * @return void
 */
public function boot()
{
    Http::macro('strapi', function () {
        return Http::withHeaders([
            'Authorization' => 'Bearer '. config('strapi.token'), #Token generated in the admin
        ])->baseUrl(config('strapi.url')); # Base url of your strapi app
    });
}

----------------------------------------

TITLE: Starting Strapi Development Server
DESCRIPTION: Command to start a Strapi application with auto-reloading enabled for development purposes.

LANGUAGE: bash
CODE:
yarn strapi develop
npm run strapi develop
options: [--no-build |--no-watch-admin |--browser |--debug |--silent]

----------------------------------------

TITLE: Validating Known Document Types in TypeScript with Strapi
DESCRIPTION: This function demonstrates how to work with known document types using parametrized Data.ContentType for better type safety and code completion.

LANGUAGE: typescript
CODE:
const ALL_CATEGORIES = ['food', 'tech', 'travel'];

function validateArticle(article: Data.ContentType<'api::article.article'>) {
  const { title, category } = article;
  //       ^?         ^?
  //       string     Data.ContentType<'api::category.category'>

  if (title.length < 5) {
    throw new Error('Title too short');
  }

  if (!ALL_CATEGORIES.includes(category.name)) {
    throw new Error(`Unknown category ${category.name}`);
  }
}

----------------------------------------

TITLE: Type Argument Inference for Content Types in TypeScript with Strapi
DESCRIPTION: This function demonstrates how to use type argument inference to bind and restrict entity types based on other function parameters.

LANGUAGE: typescript
CODE:
import type { UID } from '@strapi/strapi';

function display<T extends UID.ContentType>(
  uid: T,
  document: Data.ContentType<T>
) {
  switch (uid) {
    case 'api::article.article': {
      return document.title;
      //              ^? string
      //     ^? Data.ContentType<'api::article.article'>
    }
    case 'api::category.category': {
      return document.name;
      //              ^? string
      //     ^? Data.ContentType<'api::category.category'>
    }
    case 'api::account.account': {
      return document.email;
      //              ^? string
      //     ^? Data.ContentType<'api::account.account'>
    }
    default: {
      throw new Error(`unknown content-type uid: "${uid}"`);
    }
  }
}

----------------------------------------

TITLE: Updating Documentation Version in Strapi Config
DESCRIPTION: JavaScript code snippet to update the version of the documentation in the Strapi plugin configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  documentation: {
    enabled: true,
    config: {
      info: { version: "2.0.0" },
    },
  },
};

----------------------------------------

TITLE: Connecting Relations with i18n in Strapi Document Service API
DESCRIPTION: Example of connecting relations with internationalization enabled using the Document Service API. Shows how to connect categories to a restaurant while specifying a locale.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').update({ 
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
  data: { 
    category: {
      connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
    }
  }
})

----------------------------------------

TITLE: Configuring Plugin Default Settings
DESCRIPTION: Example of implementing plugin configuration with default values and validation.

LANGUAGE: javascript
CODE:
module.exports = {
  default: ({ env }) => ({ optionA: true }),
  validator: (config) => { 
    if (typeof config.optionA !== 'boolean') {
      throw new Error('optionA has to be a boolean');
    }
  },
};

LANGUAGE: typescript
CODE:
export default {
  default: ({ env }) => ({ optionA: true }),
  validator: (config) => { 
    if (typeof config.optionA !== 'boolean') {
      throw new Error('optionA has to be a boolean');
    }
  },
};

----------------------------------------

TITLE: Configuring TypeScript Autogeneration in Strapi (TypeScript)
DESCRIPTION: Example of a TypeScript configuration file (./config/typescript.ts) to enable automatic type generation on server restart in Strapi.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  autogenerate: true,
});

----------------------------------------

TITLE: Populating components in Strapi REST API
DESCRIPTION: Example of using populate[0]=seo&populate[1]=seo.metaSocial to include the seo component and its nested metaSocial component in a GET request to /api/articles.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 1,
      "documentId": "c2imt19iywk27hl2ftph7s",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "…",
      "seo": {
        "id": 1,
        "documentId": "e8cnux5ejxyqrejd5addfv",
        "metaTitle": "Articles - FoodAdvisor",
        "metaDescription": "Discover our articles about food, restaurants, bars and more! - FoodAdvisor",
        "keywords": "food",
        "metaRobots": null,
        "structuredData": null,
        "metaViewport": null,
        "canonicalURL": null,
        "metaSocial": [
          {
            "id": 1,
            "documentId": "ks7xsp9fewoi0qljcz9qa0",
            "socialNetwork": "Facebook",
            "title": "Browse our best articles about food and restaurants ",
            "description": "Discover our articles about food, restaurants, bars and more!"
          }
        ]
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}

----------------------------------------

TITLE: Displaying Extensions Folder Structure in Bash
DESCRIPTION: Shows the typical folder structure for Strapi plugin extensions, including the location of strapi-server.js|ts files and content-type model.json files.

LANGUAGE: bash
CODE:
/extensions
  /some-plugin-to-extend
    strapi-server.js|ts
    /content-types
      /some-content-type-to-extend
        model.json
      /another-content-type-to-extend
        model.json
  /another-plugin-to-extend
    strapi-server.js|ts

----------------------------------------

TITLE: Configuring TypeScript Autogeneration in Strapi (JavaScript)
DESCRIPTION: Example of a JavaScript configuration file (./config/typescript.js) to enable automatic type generation on server restart in Strapi.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  autogenerate: true,
});

----------------------------------------

TITLE: Lifecycle Hooks Implementation
DESCRIPTION: Example showing how to implement lifecycle hooks for a content type

LANGUAGE: javascript
CODE:
module.exports = {
  beforeCreate(event) {
    const { data, where, select, populate } = event.params;
    event.params.data.price = event.params.data.price * 0.8;
  },

  afterCreate(event) {
    const { result, params } = event;
    // do something to the result;
  },
};

----------------------------------------

TITLE: Advanced Object-based Population in Strapi
DESCRIPTION: Illustrates advanced population using an object configuration that allows for conditional population of relations.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  populate: {
    componentB: true,
    dynamiczoneA: true,
    relation: someLogic || true,
  },
});

----------------------------------------

TITLE: GET Request Implementation in Go
DESCRIPTION: Example of making a GET request to fetch all restaurants from the Strapi API. Uses the net/http package to perform the request and handle the response.

LANGUAGE: go
CODE:
package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

func main() {
	getD()
}

func getD() {
	fmt.Println("Getting data...")
	res, error := http.Get("http://localhost:1337/api/restaurants")
	if error != nil {
		fmt.Printf("The HTTP request failed with error %s\n", error)
	} else {
		data, _ := ioutil.ReadAll(res.Body)
		fmt.Println(string(data))
	}
}

----------------------------------------

TITLE: Querying Multiple Restaurant Documents with Flat Query in GraphQL
DESCRIPTION: GraphQL query to fetch multiple restaurant documents using a flat query structure, returning the documentId and title fields.

LANGUAGE: graphql
CODE:
restaurants {
  documentId
  title
}

----------------------------------------

TITLE: CRON Format Structure
DESCRIPTION: Demonstrates the standard CRON format pattern used for scheduling jobs, showing the position and meaning of each time unit.

LANGUAGE: text
CODE:
*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)

----------------------------------------

TITLE: Import Only Configuration with NPM
DESCRIPTION: Demonstrates how to import only the project configuration using NPM.

LANGUAGE: bash
CODE:
npm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config

----------------------------------------

TITLE: Creating Custom Router in Strapi (TypeScript)
DESCRIPTION: Example of creating a custom router in Strapi using TypeScript. It shows how to define custom routes with URL parameters and regular expressions for more complex routing scenarios.

LANGUAGE: typescript
CODE:
export default {
  routes: [
    { // Path defined with a URL parameter
      method: 'GET',
      path: '/restaurants/:category/:id',
      handler: 'Restaurant.findOneByCategory',
    },
    { // Path defined with a regular expression
      method: 'GET',
      path: '/restaurants/:region(\\d{2}|\\d{3})/:id', // Only match when the first parameter contains 2 or 3 digits.
      handler: 'Restaurant.findOneByRegion',
    }
  ]
}

----------------------------------------

TITLE: Configuring Route-specific Middleware in Strapi
DESCRIPTION: Example of configuring route-specific middleware in Strapi. This code snippet shows how to apply the 'is-owner' middleware to update and delete operations for a specific content type.

LANGUAGE: javascript
CODE:
/**
 * restaurant router
 */
  
const { createCoreRouter } = require("@strapi/strapi").factories;

module.exports = createCoreRouter("api::restaurant.restaurant", {
  config: {
    update: {
      middlewares: ["api::restaurant.is-owner"],
    },
    delete: {
      middlewares: ["api::restaurant.is-owner"],
    },
  },
});

----------------------------------------

TITLE: Building Strapi Admin Panel with Yarn
DESCRIPTION: Command to build the Strapi admin panel using Yarn package manager. This command replaces the content of the ./build folder.

LANGUAGE: shell
CODE:
yarn build

----------------------------------------

TITLE: Basic Equality Filtering in Strapi
DESCRIPTION: Shows how to filter articles using basic equality operators ($eq) with optional simplified syntax.

LANGUAGE: javascript
CODE:
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});

LANGUAGE: javascript
CODE:
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: 'Hello World',
  },
});

----------------------------------------

TITLE: Exporting Data Excluding Files and Content (Yarn)
DESCRIPTION: This command exports Strapi data excluding files and content using Yarn. It demonstrates the use of the '--exclude' option to specify which data types to exclude from the export.

LANGUAGE: bash
CODE:
yarn strapi export --exclude files,content

----------------------------------------

TITLE: Creating Middleware for Default Population in Strapi
DESCRIPTION: Implement a middleware function to automatically populate createdBy and updatedBy fields when no populate parameter is provided in the API request.

LANGUAGE: javascript
CODE:
"use strict";

module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    if (!ctx.query.populate) {
      ctx.query.populate = ["createdBy", "updatedBy"];
    }

    await next();
  };
};

----------------------------------------

TITLE: Defining EditViewSidePanel Component (TypeScript/JSX)
DESCRIPTION: Example of creating a panel component for the Edit view sidebar, including TypeScript interfaces for props and return value.

LANGUAGE: typescript
CODE:
import type { PanelComponent, PanelComponentProps } from '@strapi/content-manager/strapi-admin';

const Panel: PanelComponent = ({ 
  activeTab, 
  collectionType, 
  document, 
  documentId, 
  meta, 
  model 
}: PanelComponentProps) => {
  return {
    title: 'My Panel',
    content: <p>I'm on {activeTab}</p>
  }
}

----------------------------------------

TITLE: Configuring Future Flags in JavaScript
DESCRIPTION: Example of enabling the preview feature flag in a JavaScript configuration file. Shows how to use environment variables to control feature flag state.

LANGUAGE: javascript
CODE:
module.export = ({ env }) => ({
  future: {
    // You could also simply write: preview: true
    preview: env.bool('STRAPI_FUTURE_PREVIEW', false),
  },
})

----------------------------------------

TITLE: Installing Strapi Source Plugin
DESCRIPTION: Command to add the Gatsby source plugin for Strapi

LANGUAGE: bash
CODE:
yarn add gatsby-source-strapi

----------------------------------------

TITLE: Implementing Custom Email Service in Strapi (JavaScript)
DESCRIPTION: Demonstrates how to create a custom email service in Strapi using Nodemailer, including a method to send newsletters.

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;
const nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)

// Create reusable transporter object using SMTP transport.
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: 'user@gmail.com',
    pass: 'password',
  },
});

module.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) => ({
  sendNewsletter(from, to, subject, text) {
    // Setup e-mail data.
    const options = {
      from,
      to,
      subject,
      text,
    };

    // Return a promise of the function that sends the email.
    return transporter.sendMail(options);
  },
}));

----------------------------------------

TITLE: Register Multiple RBAC Conditions
DESCRIPTION: Example of registering multiple RBAC conditions using registerMany() in Strapi's bootstrap function.

LANGUAGE: javascript
CODE:
const conditions = [
  {
    displayName: "Entity has same name as user",
    name: "same-name-as-user",
    plugin: "name of a plugin if created in a plugin",
    handler: (user) => {
      return { name: user.name };
    },
  },
  {
    displayName: "Email address from strapi.io",
    name: "email-strapi-dot-io",
    async handler(user) {
      return user.email.includes('@strapi.io');
    },
  }
];

module.exports = {
  async bootstrap(/*{ strapi }*/) {
    await strapi.admin.services.permission.conditionProvider.registerMany(conditions);
  },
};

LANGUAGE: typescript
CODE:
const conditions = [
  {
    displayName: "Entity has same name as user",
    name: "same-name-as-user",
    plugin: "name of a plugin if created in a plugin"
    handler: (user) => {
      return { name: user.name };
    },
  },
  {
    displayName: "Email address from strapi.io",
    name: "email-strapi-dot-io",
    async handler(user) {
      return user.email.includes('@strapi.io');
    },
  }
];

export default async () => {
  await strapi.admin.services.permission.conditionProvider.registerMany(conditions);
};

----------------------------------------

TITLE: Basic Populating with Entity Service API in Strapi (JavaScript)
DESCRIPTION: Demonstrates how to populate all root level relations using '*' and how to populate specific component or relation fields using an array of attribute names.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: '*',
});

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: ['componentA', 'relationA'],
});

----------------------------------------

TITLE: Watching Strapi Plugin for Changes
DESCRIPTION: Watches the plugin source code for any changes and rebuilds it. Useful when implementing and testing the plugin in an application.

LANGUAGE: bash
CODE:
strapi-plugin watch

----------------------------------------

TITLE: Exporting Strapi Data Without Encryption (Yarn)
DESCRIPTION: This command exports Strapi data without encryption using Yarn. It demonstrates the use of the '--no-encrypt' option to disable data encryption.

LANGUAGE: bash
CODE:
yarn strapi export --no-encrypt

----------------------------------------

TITLE: Strapi Route Configuration with Analytics Middleware
DESCRIPTION: Configuration for Strapi routes to include the analytics middleware on restaurant page queries. Implements the middleware for the findOne operation.

LANGUAGE: javascript
CODE:
'use strict';

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    findOne: {
      auth: false,
      policies: [],
      middlewares: ['api::restaurant.analytics'],
    },
  },
});

----------------------------------------

TITLE: Creating and Publishing Document in Strapi
DESCRIPTION: Use the create() method of Strapi's Document Service API to create a new document and immediately publish it by including 'status: published' in the parameters.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').create({
  data: {
    name: "New Restaurant",
  },
  status: 'published',
})

----------------------------------------

TITLE: Generating TypeScript Types for Strapi Project
DESCRIPTION: Command to generate TypeScript typings for the project schemas.

LANGUAGE: bash
CODE:
yarn strapi ts:generate-types
npm run strapi ts:generate-types
options: [--debug | --silent | --out-dir <path>]

----------------------------------------

TITLE: Logging into Strapi Cloud with NPM
DESCRIPTION: Command to log into Strapi Cloud using NPM package manager. This command opens a browser window for authentication.

LANGUAGE: bash
CODE:
npx run strapi login

----------------------------------------

TITLE: Extending Translations in Strapi Admin Panel (JavaScript)
DESCRIPTION: Example of how to extend translations for the Strapi admin panel and plugins using JavaScript.

LANGUAGE: javascript
CODE:
export default {
  config: {
    locales: ["fr"],
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        Id: "ID french",
        "content-type-builder.plugin.name": "Constructeur de Type-Contenu",
      },
    },
  },
  bootstrap() {},
};

----------------------------------------

TITLE: Configuring Plugin Documentation Generation in Strapi
DESCRIPTION: JavaScript code examples showing how to configure which plugins should be included in documentation generation for Strapi.

LANGUAGE: javascript
CODE:
module.exports = {
  documentation: {
    enabled: true,
    config: {
      "x-strapi-config": {
        // Default
        plugins: ["upload", "users-permissions"],
        // Custom
        plugins: ["upload"],
        // Do not generate for plugins
        plugins: [],
      },
    },
  },
};

----------------------------------------

TITLE: Creating Gridsome App with CLI
DESCRIPTION: Command to create a basic Gridsome application using the Gridsome CLI.

LANGUAGE: bash
CODE:
gridsome create gridsome-app

----------------------------------------

TITLE: Handling Custom Errors in Next.js Front-end for Strapi
DESCRIPTION: This React component handles the submission of new reviews, including error handling for custom policy errors from Strapi. It uses React Hot Toast for displaying notifications.

LANGUAGE: jsx
CODE:
import { Button, Input, Textarea } from '@nextui-org/react';
import { useFormik } from 'formik';
import { useRouter } from 'next/router';
import React from 'react';
import { getStrapiURL } from '../../../../../utils';
import toast from 'react-hot-toast';

class UnauthorizedError extends Error {
  constructor(message) {
    super(message);
  }
}

const NewReview = () => {
  const router = useRouter();

  const { handleSubmit, handleChange, values } = useFormik({
    initialValues: {
      note: '',
      content: '',
    },
    onSubmit: async (values) => {
      try {
        const res = await fetch(getStrapiURL('/reviews'), {
          method: 'POST',
          body: JSON.stringify({
            restaurant: router.query.slug,
            ...values,
          }),
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json',
          },
        });

        const { data, error } = await res.json();
        if (error) {
          throw new UnauthorizedError(error.message);
        }
        toast.success('Review created!');
        return data;
      } catch (err) {
        toast.error(err.message);
        console.error(err);
      }
    },
  });

  return (
    <div className="my-6">
      <h1 className="font-bold text-2xl mb-3">Write your review</h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
        <Input
          onChange={handleChange}
          name="note"
          type="number"
          min={1}
          max={5}
          label="Stars"
        />
        <Textarea
          name="content"
          onChange={handleChange}
          placeholder="What do you think about this restaurant?"
        />
        <Button
          type="submit"
          className="bg-primary text-white rounded-md self-start"
        >
          Send
        </Button>
      </form>
    </div>
  );
};

export default NewReview;

----------------------------------------

TITLE: Setting Cache-Control Header in JavaScript for Strapi Cloud
DESCRIPTION: This snippet demonstrates how to set a Cache-Control header in a JavaScript HTTP response function to enable caching for 1 day (86400 seconds) in Strapi Cloud applications.

LANGUAGE: javascript
CODE:
function myHandler(req, res) {
  // Set the Cache-Control header to cache responses for 1 day
  res.setHeader('Cache-Control', 'max-age=86400');
  
  // Add your logic to generate the response here
}

----------------------------------------

TITLE: Starting Strapi Programmatically with TypeScript
DESCRIPTION: Examples of programmatically starting a Strapi instance in a TypeScript environment using createStrapi factory and compile function.

LANGUAGE: javascript
CODE:
const strapi = require('@strapi/strapi');
const app = strapi.createStrapi({ distDir: './dist' });
app.start();

LANGUAGE: javascript
CODE:
const strapi = require('@strapi/strapi');

strapi.compile().then((appContext) => strapi(appContext).start());

----------------------------------------

TITLE: Deploy Local Project to Strapi Cloud
DESCRIPTION: Command to deploy a local Strapi project (<100MB) to Strapi Cloud. Requires prior login and supports environment selection.

LANGUAGE: bash
CODE:
strapi deploy

----------------------------------------

TITLE: Model Information Configuration
DESCRIPTION: Example of configuring model info including display name, singular/plural names and description

LANGUAGE: json
CODE:
{
  "info": {
    "displayName": "Restaurant",
    "singularName": "restaurant",
    "pluralName": "restaurants",
    "description": ""
  }
}

----------------------------------------

TITLE: Rebuilding Strapi Admin Panel with Yarn
DESCRIPTION: This command rebuilds the Strapi admin panel using Yarn. It should be run in the project root directory.

LANGUAGE: bash
CODE:
yarn build

----------------------------------------

TITLE: Listing Cron Jobs in Strapi
DESCRIPTION: This snippet demonstrates how to access the list of all currently running cron jobs in a Strapi instance using the strapi.cron.jobs array.

LANGUAGE: javascript
CODE:
strapi.cron.jobs

----------------------------------------

TITLE: Using $not as an Attribute Operator in Strapi Query Engine API
DESCRIPTION: This example demonstrates how to use $not as an attribute operator to find articles whose titles do not contain a specific string.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});

----------------------------------------

TITLE: Security Configuration for Provider Logos
DESCRIPTION: Configuration to allow loading provider logos from external URLs in the admin panel

LANGUAGE: javascript
CODE:
module.exports = [
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'dl.airtable.com',
            'www.okta.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
];

----------------------------------------

TITLE: Referencing Admin Panel Extension File in JavaScript/TypeScript
DESCRIPTION: This code snippet shows the file path for extending the admin panel in a Strapi application. It can be either a JavaScript or TypeScript file, allowing developers to import custom extensions.

LANGUAGE: javascript
CODE:
/src/admin/app.[tsx|js]

----------------------------------------

TITLE: Initializing Strapi Types in TypeScript
DESCRIPTION: Demonstrates how to properly type the Strapi instance within the register method for TypeScript support and autocomplete functionality.

LANGUAGE: typescript
CODE:
import type { Core } from '@strapi/strapi';

export default {
  register({ strapi }: { strapi: Core.Strapi }) {
    // ...
  },
};

----------------------------------------

TITLE: REST API Request for Connecting Relations
DESCRIPTION: Example of a REST API request to connect relations using Node.js fetch. Shows how to connect categories to a restaurant using both shorthand and longhand syntax.

LANGUAGE: javascript
CODE:
const fetch = require('node-fetch');

const response = await fetch(
  'http://localhost:1337/api/restaurants/a1b2c3d4e5f6g7h8i9j0klm',
  {
    method: 'put',
    body: {
      data: {
        categories: {
          connect: ['z0y2x4w6v8u1t3s5r7q9onm', 'j9k8l7m6n5o4p3q2r1s0tuv']
        }
      }
    }
  }
);

----------------------------------------

TITLE: Configuring Strapi Admin for Separate Deployment (TypeScript)
DESCRIPTION: TypeScript configuration for the Strapi admin when deploying on a different server. This sets the admin URL and disables serving admin panel from the backend.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  /**
   * Note: The administration will be accessible from the root of the domain 
   * (ex: http://yourfrontend.com/)
   */ 
  url: "/",
  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files
});

----------------------------------------

TITLE: Get All Documents Response Example in JSON
DESCRIPTION: Example JSON response for a GET request to retrieve all documents of a collection type (restaurants). Shows the flattened response format in Strapi 5 with documents directly accessible in the data array.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 2,
      "documentId": "hgv1vny5cebq2l3czil1rpb3",
      "Name": "BMK Paris Bamako",
      "Description": null,
      "createdAt": "2024-03-06T13:42:05.098Z",
      "updatedAt": "2024-03-06T13:42:05.098Z",
      "publishedAt": "2024-03-06T13:42:05.103Z",
      "locale": "en"
    },
    {
      "id": 4,
      "documentId": "znrlzntu9ei5onjvwfaalu2v",
      "Name": "Biscotte Restaurant",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      "createdAt": "2024-03-06T13:43:30.172Z",
      "updatedAt": "2024-03-06T13:43:30.172Z",
      "publishedAt": "2024-03-06T13:43:30.175Z",
      "locale": "en"
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 2
    }
  }
}

----------------------------------------

TITLE: Accessing Container Methods in Strapi 5 (JavaScript)
DESCRIPTION: Example of how container methods are accessed directly from the strapi instance in Strapi 5. This demonstrates the simplified syntax for add and get methods.

LANGUAGE: javascript
CODE:
strapi.add(....)
strapi.get(...)

----------------------------------------

TITLE: Updating Admin Panel Host and Port in Strapi (TypeScript)
DESCRIPTION: This snippet demonstrates how to update the admin panel's host and port in Strapi's configuration file using TypeScript. It sets the host to 'my-host.com' and the port to 3000, with an optional commented-out URL path.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one 👇
  // url: '/dashboard'
});

----------------------------------------

TITLE: Executing Knex Queries within Strapi Transactions
DESCRIPTION: Shows how to use Knex queries within a Strapi transaction. The .transacting(trx) method must be explicitly called on Knex queries.

LANGUAGE: javascript
CODE:
await strapi.db.transaction(async ({ trx, rollback, commit }) => {
  await knex('users').where('id', 1).update({ name: 'foo' }).transacting(trx);
});

----------------------------------------

TITLE: Exporting Strapi Data with Custom Filename (Yarn)
DESCRIPTION: This command exports Strapi data with a custom filename using Yarn. It demonstrates the use of the '--file' option to specify the output filename.

LANGUAGE: bash
CODE:
yarn strapi export --file my-strapi-export

----------------------------------------

TITLE: Price Check RBAC Condition Handler
DESCRIPTION: RBAC condition that uses a query object to check if a price value is greater than 50.

LANGUAGE: javascript
CODE:
const condition = {
  displayName: 'price greater than 50',
  name: 'price-gt-50',
  async handler(user) {
    return { price: { $gt: 50 } };
  },
};

----------------------------------------

TITLE: Retrieving Published Document with findOne() in Strapi
DESCRIPTION: Use the findOne() method of Strapi's Document Service API to retrieve the published version of a specific document by passing 'status: published' in the query parameters.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  status: 'published'
});

----------------------------------------

TITLE: Counting Entries with count()
DESCRIPTION: Counts database entries that match specified criteria using the count() method. Returns the number of matching entries.

LANGUAGE: javascript
CODE:
const count = await strapi.db.query("api::blog.article").count({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// 12

----------------------------------------

TITLE: Implementing Private AWS S3 Provider in JavaScript
DESCRIPTION: Example of creating a private AWS S3 provider with isPrivate and getSignedUrl methods for secure asset access.

LANGUAGE: javascript
CODE:
// aws-s3 provider

module.exports = {
  init: (config) => {
    const s3 = new AWS.S3(config);

    return {
      async upload(file) {
        // code to upload file to S3
      },

      async delete(file) {
        // code to delete file from S3
      },

      async isPrivate() {
        return true;
      },

      async getSignedUrl(file) {
        const params = {
          Bucket: config.params.Bucket,
          Key: file.path,
          Expires: 60, // URL expiration time in seconds
        };

        const signedUrl = await s3.getSignedUrlPromise("getObject", params);
        return { url: signedUrl };
      },
    };
  },
};

----------------------------------------

TITLE: Package Manager Command Examples
DESCRIPTION: Examples showing how different package manager commands will result in their respective package managers being used for dependency installation in Strapi 5.

LANGUAGE: bash
CODE:
npx create-strapi-app
npm create strapi-app
yarn create strapi-app
yarn dlx …
pnpm create …
pnpm dlx …

----------------------------------------

TITLE: Testing Basic Endpoint in Strapi
DESCRIPTION: Write a test for a basic 'Hello World' endpoint in Strapi using Supertest.

LANGUAGE: javascript
CODE:
const request = require('supertest');

it("should return hello world", async () => {
  await request(strapi.server.httpServer)
    .get("/api/hello")
    .expect(200)
    .then((data) => {
      expect(data.text).toBe("Hello World!");
    });
});

----------------------------------------

TITLE: Server Configuration with CRON Tasks
DESCRIPTION: Demonstrates how to enable CRON jobs in the Strapi server configuration file and import defined tasks.

LANGUAGE: javascript
CODE:
const cronTasks = require("./cron-tasks");

module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  cron: {
    enabled: true,
    tasks: cronTasks,
  },
});

LANGUAGE: typescript
CODE:
import cronTasks from "./cron-tasks";

export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  cron: {
    enabled: true,
    tasks: cronTasks,
  },
});

----------------------------------------

TITLE: Importing Hot Reloading Component in Markdown
DESCRIPTION: This snippet demonstrates how to import a Markdown file containing hot reloading information for the admin panel. It's used to include external content within the documentation.

LANGUAGE: markdown
CODE:
import HotReloading from '/docs/snippets/hot-reloading-admin-panel.md'

----------------------------------------

TITLE: Creating Custom Upload Provider in JavaScript
DESCRIPTION: Template for creating a custom upload provider, including methods for upload, delete, and optional features like signed URLs and privacy settings.

LANGUAGE: javascript
CODE:
module.exports = {
  init(providerOptions) {
    // init your provider if necessary

    return {
      upload(file) {
        // upload the file in the provider
        // file content is accessible by `file.buffer`
      },
      uploadStream(file) {
        // upload the file in the provider
        // file content is accessible by `file.stream`
      },
      delete(file) {
        // delete the file in the provider
      },
      checkFileSize(file, { sizeLimit }) {
        // (optional)
        // implement your own file size limit logic
      },
      getSignedUrl(file) {
        // (optional)
        // Generate a signed URL for the given file.
        // The signed URL allows secure access to the file.
        // Only Content Manager assets will be signed.
        // Returns an object {url: string}.
      },
      isPrivate() {
        // (optional)
        // if it is private, file urls will be signed
        // Returns a boolean
      },
    };
  },
};

----------------------------------------

TITLE: Using Updated useRBAC Hook in Strapi 5 (TSX)
DESCRIPTION: This snippet illustrates how to use the updated useRBAC hook in Strapi 5, which no longer relies on the content-manager_rbacManager.

LANGUAGE: tsx
CODE:
const { allowedActions } = useRBAC([
  { action: 'admin::something.main', subject: null }
])

const canMain = allowedActions.canMain

----------------------------------------

TITLE: Migrating fetch timeout parameter in Strapi
DESCRIPTION: Example showing how to migrate the timeout parameter when making fetch requests from Strapi v4's node-fetch implementation to Strapi 5's native fetch API. The key change is replacing the timeout option with an AbortSignal.

LANGUAGE: typescript
CODE:
strapi.fetch(url, {
  method: 'POST',
  body,
  headers,
  timeout: 1000,
}); // accepts the type RequestInit from node-fetch

LANGUAGE: typescript
CODE:
strapi.fetch(url, {
  method: 'POST',
  body,
  headers,
  signal: AbortSignal.timeout(1000)
}); // accepts the type RequestInit native to Node

----------------------------------------

TITLE: Finding First Document - Document Service API
DESCRIPTION: Example of using findFirst() to get the first matching document with optional filters

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findFirst({
  filters: {
    name: {
      $startsWith: "Pizzeria"
    }
  }
})

----------------------------------------

TITLE: Migrating from injectContentManagerComponent() to getPlugin().injectComponent()
DESCRIPTION: These code snippets demonstrate the migration from using injectContentManagerComponent() in Strapi v4 to using getPlugin('content-manager').injectComponent() in Strapi 5.

LANGUAGE: js
CODE:
app.injectContentManagerComponent()

LANGUAGE: tsx
CODE:
app.getPlugin('content-manager').injectComponent()

----------------------------------------

TITLE: Configuring Base Settings for Relation Field
DESCRIPTION: Instructions for setting up the basic configuration of a Relation field in Strapi's Content-type Builder.

LANGUAGE: markdown
CODE:
Configuring the base settings of the Relation field consists in choosing with which existing content-type the relation should be established and the kind of relation. The edition window of the Relation field displays 2 grey boxes, each representing one of the content-types in relation. Between the grey boxes are displayed all possible relation types.

1. Click on the 2nd grey box to define the content-type B. It must be an already created collection type.
2. Click on the icon representing the relation to establish between the content-types.
3. Choose the *Field name* of the content-type A, meaning the name that will be used for the field in the content-type A.
4. (optional if disabled by the relation type) Choose the *Field name* of the content-type B.

----------------------------------------

TITLE: Counting Documents for a Specific Locale in Strapi
DESCRIPTION: Use the count() method with the locale parameter to count documents in a specific language. This example counts published French restaurant documents.

LANGUAGE: javascript
CODE:
strapi.documents('api::restaurant.restaurant').count({ locale: 'fr' });

----------------------------------------

TITLE: Filtering Provider Values in Strapi 5
DESCRIPTION: This snippet shows the new approach in Strapi 5 for filtering provider values. It uses the values() method to get all provider entries and then applies a filter with a custom predicate.

LANGUAGE: javascript
CODE:
const values = provider.values().filter(value => value.foo === 42 && value.bar === 'baz');

----------------------------------------

TITLE: Building Static Content for Strapi Website (Yarn)
DESCRIPTION: Generates static content for the Strapi website into the 'build' directory, which can then be served using any static content hosting service.

LANGUAGE: bash
CODE:
$ yarn build

----------------------------------------

TITLE: Configuring Preview Feature in Strapi
DESCRIPTION: Basic configuration for the Preview feature in Strapi's admin panel, including activation flag, allowed origins, and preview handler setup.

LANGUAGE: javascript
CODE:
export default ({ env }) => ({
  // Other admin-related configurations go here
  // (see docs.strapi.io/dev-docs/configurations/admin-panel)
  preview: {
    enabled: true,
    config: {
      allowedOrigins: env('CLIENT_URL'),
      async handler (uid, { documentId, locale, status }) {
        // Handler implementation coming in step 3
      },
    },
  },
});

----------------------------------------

TITLE: Data Interaction Examples
DESCRIPTION: Examples of using Entity Service API and Query Engine API to interact with plugin data

LANGUAGE: javascript
CODE:
// Using the Entity Service API
let data = await strapi.entityService.findMany('plugin::my-plugin.my-plugin-content-type');

// Using the Query Engine API
let data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();

----------------------------------------

TITLE: Configuring Webpack for Strapi Admin Panel
DESCRIPTION: Configuration setup for webpack bundler in Strapi 5 admin panel. Demonstrates how to extend the webpack configuration by adding custom plugins and modifications.

LANGUAGE: bash
CODE:
strapi develop --bundler=webpack

LANGUAGE: javascript
CODE:
module.exports = (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it

  // Perform customizations to webpack config
  config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));

  // Important: return the modified config
  return config;
};

LANGUAGE: typescript
CODE:
export default (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it

  // Perform customizations to webpack config
  config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));

  // Important: return the modified config
  return config;
};

----------------------------------------

TITLE: Writing Main Test File for Strapi
DESCRIPTION: Create the main test file that sets up and tears down the Strapi instance for all tests.

LANGUAGE: javascript
CODE:
const { setupStrapi, cleanupStrapi } = require("./helpers/strapi");

beforeAll(async () => {
  await setupStrapi();
});

afterAll(async () => {
  await cleanupStrapi();
});

it("strapi is defined", () => {
  expect(strapi).toBeDefined();
});

----------------------------------------

TITLE: PUT Request Implementation
DESCRIPTION: Examples of making PUT requests to update restaurant categories in Strapi using Axios and Fetch

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .put('http://localhost:1337/api/restaurants/2/?populate=categories', {
    data: {
      categories: [2],
    },
  })
  .then(response => {
    console.log(response);
  });

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants/2/?populate=categories', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    data: {
      categories: [2],
    },
  }),
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  });

----------------------------------------

TITLE: Using getWhere() Method in Strapi v4
DESCRIPTION: This snippet demonstrates how to use the getWhere() method to query provider's items in Strapi v4. It filters provider entries based on specified conditions.

LANGUAGE: javascript
CODE:
const values = provider.getWhere({ foo: 42, bar: 'baz' });

----------------------------------------

TITLE: Retrieving a Specific Locale with findOne() in Strapi's Document Service API
DESCRIPTION: Use the findOne() method to retrieve a document in a specific locale. This example fetches the French version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
});

----------------------------------------

TITLE: Configuring SQLite Database Connection in Strapi (JavaScript)
DESCRIPTION: Example configuration for connecting to a SQLite database in Strapi using JavaScript.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: env('DATABASE_FILENAME', '.tmp/data.db'),
    },
    useNullAsDefault: true,
    debug: false,
  },
});

----------------------------------------

TITLE: Creating API Request Handler in Admin Panel
DESCRIPTION: Implements an API request handler using Axios to fetch data from the custom admin route endpoint.

LANGUAGE: javascript
CODE:
import axios from 'axios';

const foobarRequests = {
  getFoobar: async () => {
    const data = await axios.get(`/my-plugin/pass-data`);
    return data;
  },
};
export default foobarRequests;

----------------------------------------

TITLE: Default Server Configuration in Strapi (JavaScript)
DESCRIPTION: This snippet shows the default server configuration for Strapi, setting the host and port. It uses environment variables with fallback values for flexibility.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
});

----------------------------------------

TITLE: Creating a Strapi Project with pnpm
DESCRIPTION: Command to create a new Strapi project using pnpm package manager.

LANGUAGE: bash
CODE:
pnpm create strapi

----------------------------------------

TITLE: Configuring Package.json for Strapi Testing
DESCRIPTION: Add test script and Jest configuration to package.json for running Strapi tests.

LANGUAGE: json
CODE:
"scripts": {
  "develop": "strapi develop",
  "start": "strapi start",
  "build": "strapi build",
  "strapi": "strapi",
  "test": "jest --forceExit --detectOpenHandles"
},
"jest": {
  "testPathIgnorePatterns": [
    "/node_modules/",
    ".tmp",
    ".cache"
  ]
}

----------------------------------------

TITLE: Finding the First Document in a Specific Locale with findFirst() in Strapi
DESCRIPTION: Use the findFirst() method to retrieve the first document matching the parameters in a specific locale. This example finds the first French article.

LANGUAGE: javascript
CODE:
const document = await strapi.documents('api::article.article').findFirst({
  locale: 'fr',
});

----------------------------------------

TITLE: Mailgun Email Provider Configuration
DESCRIPTION: Configuration example for setting up Mailgun as an email provider in Strapi Cloud, including API key, domain, and regional URL settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'),
        domain: env('MAILGUN_DOMAIN'),
        url: env('MAILGUN_URL', 'https://api.mailgun.net'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'),
        domain: env('MAILGUN_DOMAIN'),
        url: env('MAILGUN_URL', 'https://api.mailgun.net'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

----------------------------------------

TITLE: Configuring Upload Provider in Strapi Cloud (TypeScript)
DESCRIPTION: This code snippet shows how to configure a third-party upload provider in the Strapi Cloud production environment using TypeScript. It demonstrates the structure for adding upload configuration options to the plugins.ts file.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
// … some unrelated plugins configuration options
// highlight-start
upload: {
   config: {
      // … provider-specific upload configuration options go here
   }
// highlight-end
// … some other unrelated plugins configuration options
});

----------------------------------------

TITLE: Using $eq Operator in Strapi Query Engine API
DESCRIPTION: This snippet shows how to use the $eq operator to find articles with an exact title match. It also demonstrates that $eq can be omitted for simple equality checks.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $eq: 'Hello World',
    },
  },
});

// $eq can be omitted:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
  },
});

----------------------------------------

TITLE: Sending Emails via Lifecycle Hooks in TypeScript
DESCRIPTION: Implementation of email sending using afterCreate lifecycle hook in TypeScript. Triggers email notification when new content is created in the admin panel.

LANGUAGE: typescript
CODE:
export default {
    async afterCreate(event) {
        const { result } = event;

        try{
            await strapi.plugins['email'].services.email.send({
              to: 'valid email address',
              from: 'your verified email address',
              cc: 'valid email address',
              bcc: 'valid email address',
              replyTo: 'valid email address',
              subject: 'The Strapi Email plugin worked successfully',
              text: '${fieldName}',
              html: 'Hello world!', 
                
            })
        } catch(err) {
            console.log(err);
        }
    }
}

----------------------------------------

TITLE: Configuring Nginx for Strapi Data Transfer
DESCRIPTION: Nginx configuration to ensure proper header forwarding when using a proxy server with Strapi data transfer.

LANGUAGE: nginx
CODE:
server {
    listen 80;
    server_name <yourdomain>;
    location / {
        proxy_pass http://localhost:1337;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        include proxy_params;
    }
}

----------------------------------------

TITLE: Creating React App with create-react-app
DESCRIPTION: Commands to create a new React application using create-react-app with either yarn or npm.

LANGUAGE: bash
CODE:
yarn create react-app react-app

LANGUAGE: bash
CODE:
npx create-react-app react-app

----------------------------------------

TITLE: Exporting Strapi Data with Encryption Key (Yarn)
DESCRIPTION: This command exports Strapi data with a specified encryption key using Yarn. It demonstrates the use of the '--key' option to provide an encryption key.

LANGUAGE: bash
CODE:
yarn strapi export --key my-encryption-key

----------------------------------------

TITLE: Updating a Specific Locale Version of a Document in Strapi
DESCRIPTION: Use the update() method to modify a document for a specific locale. This example updates the Spanish version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').update({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'es',
  data: { name: 'Nuevo nombre del restaurante' },
});

----------------------------------------

TITLE: Setting up Ruby Project Structure
DESCRIPTION: Commands to create a new Ruby project directory and initial script file

LANGUAGE: bash
CODE:
mkdir ruby-app && cd ruby-app
touch script.rb

----------------------------------------

TITLE: SendGrid Email Provider Configuration
DESCRIPTION: Configuration example for setting up SendGrid as an email provider in Strapi Cloud, including API key configuration and default email settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  email: {
    config: {
      provider: 'sendgrid',
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  email: {
    config: {
      provider: 'sendgrid',
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

----------------------------------------

TITLE: Finding Multiple Documents with Selected Fields using findMany()
DESCRIPTION: Example of using findMany() with the fields parameter to retrieve specific fields from multiple restaurant documents.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::restaurant.restaurant").findMany({
  fields: ["name", "description"],
});

----------------------------------------

TITLE: Plugin Bootstrap Lifecycle Function
DESCRIPTION: Example of using the bootstrap lifecycle function to extend functionality of content-manager plugin

LANGUAGE: javascript
CODE:
module.exports = () => {
  return {
    // ...
    bootstrap(app) {
      // execute some bootstrap code
      app.getPlugin('content-manager').injectComponent('editView', 'right-links', { name: 'my-compo', Component: () => 'my-compo' })
    },
  };
};

----------------------------------------

TITLE: Building Strapi Admin Panel with NPM
DESCRIPTION: Command to build the Strapi admin panel using NPM package manager. This command replaces the content of the ./build folder.

LANGUAGE: shell
CODE:
npm run build

----------------------------------------

TITLE: Installing Dart Dependencies
DESCRIPTION: Command to install the project dependencies defined in pubspec.yaml.

LANGUAGE: bash
CODE:
dart pub get

----------------------------------------

TITLE: Deleting a Specific Locale Version of a Document in Strapi
DESCRIPTION: Use the delete() method with the locale parameter to remove a specific language version of a document. This example deletes the Spanish version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').delete({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'es',
});

----------------------------------------

TITLE: Configuring Dart Dependencies
DESCRIPTION: YAML configuration for Dart project dependencies, specifically the HTTP package.

LANGUAGE: yaml
CODE:
name: my_app
dependencies:
  http: ^0.12.2

----------------------------------------

TITLE: Registering Document Service Middleware for Plugin Developers
DESCRIPTION: Example showing how to register a Document Service middleware in a plugin's register() lifecycle method.

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};

----------------------------------------

TITLE: Implementing Promise-based Lifecycle Functions in Strapi
DESCRIPTION: This snippet illustrates how to implement register, bootstrap, and destroy functions that return promises in Strapi. This approach allows for complex asynchronous operations and better error handling.

LANGUAGE: javascript
CODE:
module.exports = {
  register() {
    return new Promise(/* some code */);
  },
  bootstrap() {
    return new Promise(/* some code */);
  },
  destroy() {
    return new Promise(/* some code */);
  }
};

LANGUAGE: typescript
CODE:
export default {
  register() {
    return new Promise(/* some code */);
  },
  bootstrap() {
    return new Promise(/* some code */);
  },
  destroy() {
    return new Promise(/* some code */);
  }
};

----------------------------------------

TITLE: Configuring Sentry Plugin in TypeScript
DESCRIPTION: TypeScript configuration for the Sentry plugin in Strapi, including DSN and metadata settings.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  // ...
  sentry: {
    enabled: true,
    config: {
      dsn: env('SENTRY_DSN'),
      sendMetadata: true,
    },
  },
  // ...
});

----------------------------------------

TITLE: Populating specific relations 1 level deep in Strapi REST API
DESCRIPTION: Example of using populate[0]=category to include the category relation 1 level deep in a GET request to /api/articles.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 1,
      "documentId": "w8r5k8o8v0t9l9e0d7y6vco",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "…",
      "category": {
        "data": {
          "id": 4,
          "documentId": "u6x8u7o7j5q1l5y3t8j9yxi",
          "name": "European",
          "slug": "european",
          "createdAt": "2021-11-09T13:33:20.123Z",
          "updatedAt": "2021-11-09T13:33:20.123Z"
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}

----------------------------------------

TITLE: Complete Restaurant Class with POST Implementation
DESCRIPTION: Full Restaurant class implementation including create method for POST requests

LANGUAGE: ruby
CODE:
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def initialize
    @options = {
      header: { 'Content-Type': 'application/json' },
      query: { 'populate': 'categories' }
    }
  end

  def all
    self.class.get('/restaurants')
  end

  def create(params)
    @options[:body] = {
      data: {
        name: params[:name],
        description: params[:description],
        categories: params[:categories]
      }
    }

    self.class.post('/restaurants', @options)
  end
end

restaurant = Restaurant.new
puts restaurant.create({
  name: 'Dolemon Sushi',
  description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
  categories: [3]
})

----------------------------------------

TITLE: Configuring 11ty Default Template
DESCRIPTION: HTML template defining the base layout structure for all pages.

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <title>
      {{ renderData.title }}
    </title>
  </head>

  <body>
    <a href="/">Home</a>
    {{ content }}
  </body>
</html>

----------------------------------------

TITLE: Unpublishing a Specific Locale Version of a Document in Strapi
DESCRIPTION: Use the unpublish() method with the locale parameter to unpublish a specific language version of a document. This example unpublishes the French version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi
  .documents('api::restaurant.restaurant')
  .unpublish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: 'fr' });

----------------------------------------

TITLE: Excluding APIs from Documentation Generation in Strapi
DESCRIPTION: JavaScript code demonstrating how to exclude specific APIs or plugins from documentation generation using the excludeFromGeneration function.

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration("restaurant");
    // or several
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration(["address", "upload"]);
  }
}

----------------------------------------

TITLE: Creating an Entry with Strapi Query Engine API
DESCRIPTION: Uses the create() method to create a new entry. It allows specifying the data for the new entry, selecting attributes to return, and populating relations.

LANGUAGE: javascript
CODE:
const entry = await strapi.db.query('api::blog.article').create({
  data: {
    title: 'My Article',
  },
});

----------------------------------------

TITLE: Using $in Operator in Strapi Query Engine API
DESCRIPTION: This example demonstrates how to use the $in operator to find articles with titles matching any value in a list. It also shows that $in can be omitted when passing an array of values.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});

// $in can be omitted when passing an array of values:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});

----------------------------------------

TITLE: Implementing Plugin Destroy Function
DESCRIPTION: Example of implementing the destroy lifecycle function for cleanup when the Strapi instance is destroyed.

LANGUAGE: javascript
CODE:
'use strict';

const destroy = ({ strapi }) => {
  // execute some destroy code
};

module.exports = destroy;

LANGUAGE: typescript
CODE:
import type { Core } from '@strapi/strapi';

const destroy = ({ strapi }: { strapi: Core.Strapi }) => {
  // destroy phase
};

export default destroy;

----------------------------------------

TITLE: Configuring Server Host in TypeScript
DESCRIPTION: Shows how to configure server host settings for different environments using TypeScript. The default configuration sets the host to '127.0.0.1', while the production configuration uses an environment variable with a fallback to '0.0.0.0'.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: '127.0.0.1',
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
});

----------------------------------------

TITLE: Installing Documentation Plugin with Package Managers
DESCRIPTION: Commands to install the Strapi Documentation plugin using yarn or npm package managers.

LANGUAGE: bash
CODE:
yarn add @strapi/plugin-documentation

LANGUAGE: bash
CODE:
npm install @strapi/plugin-documentation

----------------------------------------

TITLE: Installing Providers with Package Managers
DESCRIPTION: Examples of installing AWS S3 provider for Upload plugin and Sendgrid provider for Email plugin using yarn and npm.

LANGUAGE: bash
CODE:
yarn add @strapi/provider-upload-aws-s3

yarn add @strapi/provider-email-sendgrid --save

LANGUAGE: bash
CODE:
npm install @strapi/provider-upload-aws-s3 --save

npm install @strapi/provider-email-sendgrid --save

----------------------------------------

TITLE: Populating Specific Relations
DESCRIPTION: Demonstrates how to populate only specific relations by passing relation names in an array.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  populate: ["headerImage"],
});

----------------------------------------

TITLE: Inserting EditViewSidePanel at Specific Position (JavaScript)
DESCRIPTION: Demonstrates how to add a panel at a specific position in the Edit view sidebar using a function with the addEditViewSidePanel API.

LANGUAGE: javascript
CODE:
app.getPlugin('content-manager').apis.addEditViewSidePanel(
  (panels) => [SuperImportantPanel, ...panels]
)

----------------------------------------

TITLE: Creating Document with Selected Fields Response
DESCRIPTION: Example of using create() with the fields parameter to specify which fields should be returned in the response after creating a new restaurant document.

LANGUAGE: javascript
CODE:
const document = await strapi.documents("api::restaurant.restaurant").create({
  data: {
    name: "Restaurant B",
    description: "Description for the restaurant",
  },
  fields: ["name", "description"],
});

----------------------------------------

TITLE: Configuring TSConfig for Type Generation
DESCRIPTION: JSON configuration to exclude generated types from the build process to prevent Entity Service type conflicts.

LANGUAGE: json
CODE:
{
  "exclude": [
    "node_modules/",
    "build/",
    "dist/",
    ".cache/",
    ".tmp/",
    "src/admin/",
    "**/*.test.ts",
    "src/plugins/**",
    "types/generated/**"
  ]
}

----------------------------------------

TITLE: Password Validation Configuration
DESCRIPTION: Example of configuring custom password validation rules

LANGUAGE: javascript
CODE:
'users-permissions': {
    config: {
      validationRules: {
        validatePassword(value) {
          if (value.length < 8) {
            throw new Error('password should be more than 8 letters');
          }
          if (value.length > 24) {
            return false;
          }
          return true;
        },
      },
    },
  },

----------------------------------------

TITLE: Implementing Plugin Bootstrap Function
DESCRIPTION: Example of implementing the bootstrap lifecycle function for a plugin which is called after register to initialize plugin functionality.

LANGUAGE: javascript
CODE:
'use strict';

const bootstrap = ({ strapi }) => {
  // execute some bootstrap code
};

module.exports = bootstrap;

LANGUAGE: typescript
CODE:
import type { Core } from '@strapi/strapi';

const bootstrap = ({ strapi }: { strapi: Core.Strapi }) => {
  // execute some bootstrap code
};

export default bootstrap;

----------------------------------------

TITLE: Restaurant Index Page Component
DESCRIPTION: React component using StaticQuery to display restaurant data from Strapi

LANGUAGE: javascript
CODE:
import React from 'react';

import { StaticQuery, graphql } from 'gatsby';

const query = graphql`
  query {
    allStrapiRestaurant {
      edges {
        node {
          data {
            id
            attributes {
              name
              description
            }
          }
        }
      }
    }
  }
`;

const IndexPage = () => (
  <StaticQuery
    query={query}
    render={data => (
      <ul>
        {data.allStrapiRestaurant.edges[0].node.data.map(restaurant => (
          <li key={restaurant.id}>{restaurant.attributes.name}</li>
        ))}
      </ul>
    )}
  />
);

export default IndexPage;

----------------------------------------

TITLE: Populating Dynamic Zones
DESCRIPTION: Example of populating dynamic zones with component-specific populate queries using the 'on' property.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  populate: {
    testDZ: {
      on: {
        "test.test-compo": {
          fields: ["testString"],
          populate: ["testNestedCompo"],
        },
      },
    },
  },
});

----------------------------------------

TITLE: Content-Types Index Export
DESCRIPTION: Configuration for exporting content-types in the plugin

LANGUAGE: javascript
CODE:
'use strict';

module.exports = {
  "my-plugin-content-type": require('./my-plugin-content-type'),
};

----------------------------------------

TITLE: Pagination by Offset Implementation
DESCRIPTION: Demonstrates how to implement offset-based pagination using start and limit parameters with the qs library.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  pagination: {
    start: 0,
    limit: 10,
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);

----------------------------------------

TITLE: Updating Multiple Entries with updateMany()
DESCRIPTION: Updates multiple database entries that match specified criteria using updateMany() method. Returns an object containing count of updated entries.

LANGUAGE: javascript
CODE:
await strapi.db.query("api::shop.article").updateMany({
  where: {
    price: 20,
  },
  data: {
    price: 18,
  },
});

// { count: 42 }

----------------------------------------

TITLE: Handling Generic Documents in TypeScript with Strapi
DESCRIPTION: This function demonstrates how to work with generic documents using the non-parametrized form of Data.ContentType.

LANGUAGE: typescript
CODE:
async function save(name: string, document: Data.ContentType) {
  await writeCSV(name, document);
  //                    ^ {
  //                        id: Data.ID;
  //                        documentId: string;
  //                        createdAt?: DateTimeValue;
  //                        updatedAt?: DateTimeValue;
  //                        publishedAt?: DateTimeValue;
  //                        ...
  //                      }
}

----------------------------------------

TITLE: Register Single RBAC Condition
DESCRIPTION: Example of registering a single RBAC condition in Strapi's bootstrap function.

LANGUAGE: javascript
CODE:
module.exports = async () => {
  await strapi.admin.services.permission.conditionProvider.register({
    displayName: 'Billing amount under 10K',
    name: 'billing-amount-under-10k',
    plugin: 'admin',
    handler: { amount: { $lt: 10000 } },
  });
};

LANGUAGE: typescript
CODE:
export default async () => {
  await strapi.admin.services.permission.conditionProvider.register({
    displayName: 'Billing amount under 10K',
    name: 'billing-amount-under-10k',
    plugin: 'admin',
    handler: { amount: { $lt: 10000 } },
  });
};

----------------------------------------

TITLE: Plugin Content-Type Schema Configuration
DESCRIPTION: Example schema.json configuration for making a plugin content-type visible in the admin panel

LANGUAGE: json
CODE:
{
  "kind": "collectionType",
  "collectionName": "my_plugin_content_types",
  "info": {
    "singularName": "my-plugin-content-type",
    "pluralName": "my-plugin-content-types",
    "displayName": "My Plugin Content-Type"
  },
  "options": {
    "draftAndPublish": false,
    "comment": ""
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}

----------------------------------------

TITLE: Retrieving Published Document with findFirst() in Strapi
DESCRIPTION: Use the findFirst() method of Strapi's Document Service API to retrieve the published version of the first matching document by passing 'status: published' in the query parameters.

LANGUAGE: javascript
CODE:
const document = await strapi.documents("api::restaurant.restaurant").findFirst({
  status: 'published',
});

----------------------------------------

TITLE: Configuring Custom Admin Route in Strapi Plugin
DESCRIPTION: Defines a custom admin route configuration for handling data passing in a Strapi plugin. Sets up a GET endpoint at '/pass-data' that calls the myPluginContentType controller.

LANGUAGE: javascript
CODE:
module.exports = {
  'pass-data': {
    type: 'admin',
    routes: [
      {
        method: 'GET',
        path: '/pass-data',
        handler: 'myPluginContentType.index',
        config: {
          policies: [],
          auth: false,
        },
      },
    ]
  }
  // ...
};

----------------------------------------

TITLE: Using $not Operator in Strapi Document Service API
DESCRIPTION: Demonstrates how to use the $not operator to negate filter conditions when querying articles.

LANGUAGE: javascript
CODE:
const entries = await strapi.documents('api::article.article').findMany({
  filters: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});

----------------------------------------

TITLE: Updating Documents - Document Service API
DESCRIPTION: Example of using update() to modify an existing document

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').update({ 
    documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
    data: { name: "New restaurant name" }
})

----------------------------------------

TITLE: Creating New Strapi TypeScript Project with NPM
DESCRIPTION: Command to create a new Strapi project with TypeScript support using NPM package manager. This command initializes a new Strapi application with TypeScript configuration.

LANGUAGE: bash
CODE:
npx create-strapi-app@latest my-project --typescript

----------------------------------------

TITLE: Plugin Registration Example
DESCRIPTION: Example showing how to register a plugin with the admin panel including menu link setup

LANGUAGE: javascript
CODE:
// Auto-generated component
import PluginIcon from './components/PluginIcon';
import pluginId from './pluginId'

export default {
  register(app) {
    app.addMenuLink({
      to: `/plugins/${pluginId}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: 'My plugin',
      },
      Component: async () => {
        const component = await import(/* webpackChunkName: "my-plugin" */ './pages/App');

        return component;
      },
      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions
    });
    app.registerPlugin({
      id: pluginId,
      name,
    });
  },
};

----------------------------------------

TITLE: Object Configuration Export
DESCRIPTION: Example of exporting configuration as a simple object with a secret value.

LANGUAGE: javascript
CODE:
module.exports = {
  mySecret: 'someValue',
};

LANGUAGE: typescript
CODE:
export default {
  mySecret: 'someValue',
};

----------------------------------------

TITLE: Initializing Strapi Plugin with SDK
DESCRIPTION: Creates a new Strapi plugin at a specified path using the Plugin SDK. The command supports debug and silent modes.

LANGUAGE: bash
CODE:
npx @strapi/sdk-plugin init /path/to/my/plugin

----------------------------------------

TITLE: Retrieving Published Documents with findMany() in Strapi
DESCRIPTION: Use the findMany() method of Strapi's Document Service API to retrieve the published versions of multiple documents by passing 'status: published' in the query parameters.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::restaurant.restaurant").findMany({
  status: 'published'
});

----------------------------------------

TITLE: Vue.js Component for Displaying Restaurants from Strapi API
DESCRIPTION: Example Vue.js component that fetches and displays a list of restaurants from the Strapi API using Axios.

LANGUAGE: javascript
CODE:
<template>
  <div id="app">
    <div v-if="error">
      {{ error }}
    </div>
    <ul v-else>
      <li v-for="restaurant in restaurants" :key="restaurant.id">
        {{ restaurant.attributes.name }}
      </li>
    </ul>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'App',
  data () {
    return {
      restaurants: [],
      error: null
    }
  },
  async mounted () {
    try {
      const response = await axios.get('http://localhost:1337/api/restaurants')
      this.restaurants = response.data.data
    } catch (error) {
      this.error = error;
    }
  }
}
</script>

----------------------------------------

TITLE: Restaurant Class with GET Method
DESCRIPTION: Defines a Restaurant class with a method to fetch all restaurants from the Strapi API.

LANGUAGE: python
CODE:
import json
import requests

class Restaurant:
    def __init__(self):
        self.api_url = "http://localhost:1337/api"

    def all(self):
        r = requests.get(self.api_url + "/restaurants")
        return r.json()

restaurant = Restaurant()
print(restaurant.all())

----------------------------------------

TITLE: Counting Draft and Published Documents in Strapi
DESCRIPTION: Use the count() method of Strapi's Document Service API to count either draft or published documents by specifying the 'status' parameter.

LANGUAGE: javascript
CODE:
// Count draft documents (also actually includes published documents)
const draftsCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'draft'
});

LANGUAGE: javascript
CODE:
// Count only published documents
const publishedCount = await strapi.documents("api::restaurant.restaurant").count({
  status: 'published'
});

----------------------------------------

TITLE: Exporting Strapi Project Data
DESCRIPTION: Command to export project data, with options for encryption, compression, and file naming.

LANGUAGE: bash
CODE:
yarn strapi export
npm run strapi export
options: [--no-encrypt | --no-compress | -f <file> | -k <key> | --exclude <types> | --only <types>]

----------------------------------------

TITLE: Verifying Strapi Plugin Output
DESCRIPTION: Verifies the output of the plugin before publishing. Supports debug and silent modes for detailed or minimal logging.

LANGUAGE: bash
CODE:
strapi-plugin verify

----------------------------------------

TITLE: Configuring Angular HTTP Module
DESCRIPTION: Import and configure HttpClientModule in the Angular application module for making HTTP requests.

LANGUAGE: typescript
CODE:
import { NgModule } from "@angular/core";
import { BrowserModule } from "@angular/platform-browser";
import { HttpClientModule } from "@angular/common/http";

import { AppComponent } from "./app.component";

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}

----------------------------------------

TITLE: POST Request to Create Restaurant
DESCRIPTION: Performs a POST request to create a new restaurant in the Strapi API.

LANGUAGE: python
CODE:
requests.post(
    "http://localhost:1337/api/restaurants",
    headers={"Content-Type": "application/json"},
    params={"populate": "categories"},
    data=json.dumps(
        {
            "data": {
                "name": "Dolemon Sushi",
                "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",
                "categories": [3],
            }
        }
    ),
)

----------------------------------------

TITLE: Finding Single Document with Selected Fields using findOne()
DESCRIPTION: Example of using findOne() with the fields parameter to retrieve specific fields from a restaurant document.

LANGUAGE: javascript
CODE:
const document = await strapi.documents("api::restaurant.restaurant").findOne({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  fields: ["name", "description"],
});

----------------------------------------

TITLE: Filtering by Draft Status in Strapi
DESCRIPTION: Demonstrates how to query for draft versions of content using the status parameter.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  status: 'draft',
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);

----------------------------------------

TITLE: Running Strapi CLI Commands with Yarn and NPM
DESCRIPTION: Examples of how to run Strapi CLI commands using both Yarn and NPM package managers.

LANGUAGE: bash
CODE:
yarn strapi <command>
npm run strapi <command>

----------------------------------------

TITLE: Polymorphic Population with Fragments in Strapi
DESCRIPTION: Shows how to handle polymorphic data structures using populate fragments for dynamic zones and morphologic relations.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          select: ['title'],
          where: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          select: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          select: ['username'],
        },
        'api::author.author': {
          select: ['name'],
        },
      },
    },
  },
});

----------------------------------------

TITLE: Transferring Data Between Strapi Instances
DESCRIPTION: Command to transfer data between two Strapi instances, typically used for local to remote or remote to remote transfers.

LANGUAGE: bash
CODE:
yarn strapi transfer
npm run strapi transfer
options: [--to <url> | --to-token <token> | --from <url> | --from-token <token>]

----------------------------------------

TITLE: Development Server Commands
DESCRIPTION: Commands to rebuild admin panel and restart server after enabling feature flags

LANGUAGE: shell
CODE:
yarn develop

LANGUAGE: shell
CODE:
npm run develop

----------------------------------------

TITLE: Querying Draft Versions of Restaurant Documents in GraphQL
DESCRIPTION: GraphQL query to fetch draft versions of restaurant documents, demonstrating the use of the status parameter.

LANGUAGE: graphql
CODE:
query Query($status: PublicationStatus) {
  restaurants(status: DRAFT) {
    documentId
    name
    publishedAt # should return null
  }
}

----------------------------------------

TITLE: Generating Encryption Keys (Windows)
DESCRIPTION: This command generates a strong encryption key using Node.js crypto module on Windows systems. It creates a 48-byte random key encoded in base64.

LANGUAGE: bash
CODE:
node -p "require('crypto').randomBytes(48).toString('base64');"

----------------------------------------

TITLE: Registering Document Service Middleware for Users
DESCRIPTION: Example showing how to register a Document Service middleware in the general register() lifecycle method for users.

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    strapi.documents.use((context, next) => {
      // your logic
      return next();
    });
  },

  // bootstrap({ strapi }) {},
  // destroy({ strapi }) {},
};

----------------------------------------

TITLE: Querying Dynamic Zone Data for Restaurants in GraphQL
DESCRIPTION: GraphQL query demonstrating how to fetch data from a dynamic zone in restaurant documents, using fragments to specify component fields.

LANGUAGE: graphql
CODE:
{
  restaurants {
    dz {
      __typename
      ...on ComponentDefaultClosingperiod {
        # define which attributes to return for the component
        label
      }
    }
  }
}

----------------------------------------

TITLE: Running Strapi Dev Server with Yarn
DESCRIPTION: Command to start the Strapi development server using Yarn package manager

LANGUAGE: bash
CODE:
yarn develop

----------------------------------------

TITLE: Population with Publish Operation
DESCRIPTION: Shows how to populate fields when publishing documents using the publish() method.

LANGUAGE: javascript
CODE:
strapi.documents("api::article.article").publish({
  documentId: "cjld2cjxh0000qzrmn831i7rn",
  populate: ["headerImage"],
});

----------------------------------------

TITLE: Link Local Project to Strapi Cloud
DESCRIPTION: Command to connect local project with an existing Strapi Cloud project. Prompts for project selection from available options.

LANGUAGE: bash
CODE:
strapi link

----------------------------------------

TITLE: Vue Component for Displaying Category and Restaurants
DESCRIPTION: Vue component that queries and displays a specific category and its associated restaurants from Strapi.

LANGUAGE: vue
CODE:
<template>
<Layout>
  <h1>{{ $page.strapiCategory.name }}</h1>
  <ul>
    <li v-for="restaurant in $page.strapiCategory.restaurants" :key="restaurant.id">{{ restaurant.name }}</li>
  </ul>
</Layout>
</template>

<page-query>
  query  {
    strapiCategory(id: 1) {
      id
      name
      restaurants {
        name
        description
      }
    }
  }
</page-query>

----------------------------------------

TITLE: Querying a Single Restaurant Document in GraphQL
DESCRIPTION: GraphQL query to fetch a single restaurant document by its documentId, returning the name and description fields.

LANGUAGE: graphql
CODE:
{
  restaurant(documentId: "a1b2c3d4e5d6f7g8h9i0jkl") {
    name
    description
  }
}

----------------------------------------

TITLE: Updating an Entry with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the update() method to modify the title of an existing article entry.

LANGUAGE: javascript
CODE:
const entry = await strapi.entityService.update('api::article.article', 1, {
  data: {
    title: 'xxx',
  },
});

----------------------------------------

TITLE: Installing GraphQL Plugin for Strapi with NPM
DESCRIPTION: Command to install the GraphQL plugin for Strapi using NPM package manager.

LANGUAGE: sh
CODE:
npm install @strapi/plugin-graphql

----------------------------------------

TITLE: Deleting an Entry with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the delete() method to remove an article entry by its ID.

LANGUAGE: javascript
CODE:
const entry = await strapi.entityService.delete('api::article.article', 1);

----------------------------------------

TITLE: Sorting on a Single Field with Strapi Document Service API in JavaScript
DESCRIPTION: This snippet demonstrates how to sort results based on a single field using the Document Service API. It uses the 'sort' parameter to sort articles by title in ascending order.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  sort: "title:asc",
});

----------------------------------------

TITLE: List Strapi Cloud Environments
DESCRIPTION: Command to display all environments associated with the Strapi Cloud project.

LANGUAGE: bash
CODE:
strapi cloud environments

----------------------------------------

TITLE: Populating specific relations 2 levels deep in Strapi REST API
DESCRIPTION: Example of using populate[category][populate][0]=restaurants to include the category relation and its nested restaurants relation in a GET request to /api/articles.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 1,
      "documentId": "iy5ifm3xj8q0t8vlq6l23h",
      "attributes": {
        "title": "Here's why you have to try basque cuisine, according to a basque chef",
        "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
        "createdAt": "2021-11-09T13:33:19.948Z",
        "updatedAt": "2023-06-02T10:57:19.584Z",
        "publishedAt": "2022-09-22T09:30:00.208Z",
        "locale": "en",
        "ckeditor_content": "…",
        "category": {
          "data": {
            "id": 4,
            "name": "European",
            "slug": "european",
            "createdAt": "2021-11-09T13:33:20.123Z",
            "updatedAt": "2021-11-09T13:33:20.123Z",
            "restaurants": {
              "data": [
                {
                  "id": 1,
                  "documentId": "ozlqrdxpnjb7wtvf6lp74v",
                  "name": "Mint Lounge",
                  "slug": "mint-lounge",
                  "price": "p3",
                  "createdAt": "2021-11-09T14:07:47.125Z",
                  "updatedAt": "2021-11-23T16:41:30.504Z",
                  "publishedAt": "2021-11-23T16:41:30.501Z",
                  "locale": "en"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}

----------------------------------------

TITLE: Creating Gatsby Application
DESCRIPTION: Command to create a new Gatsby application using the Gatsby CLI

LANGUAGE: bash
CODE:
gatsby new gatsby-app

----------------------------------------

TITLE: Using Attribute Operators with Entity Service API
DESCRIPTION: Examples of using various attribute operators like $eq, $contains, $in for filtering specific field values.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});

----------------------------------------

TITLE: Populating all fields 1 level deep in Strapi REST API
DESCRIPTION: Example of using populate=* to include all relations, media fields, components, and dynamic zones 1 level deep in a GET request to /api/articles.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 1,
      "documentId": "t3q2i3v1z2j7o8p6d0o4xxg",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "// truncated content",
      "image": {
        "data": {
            "id": 12,
            "documentId": "o5d4b0l4p8l4o4k5n1l3rxa",
            "name": "Basque dish",
            "alternativeText": "Basque dish",
            "caption": "Basque dish",
            "width": 758,
            "height": 506,
            "formats": {
              "thumbnail": {
                "name": "thumbnail_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "thumbnail_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 234,
                "height": 156,
                "size": 11.31,
                "path": null,
                "url": "/uploads/thumbnail_basque_cuisine_17fa4567e0_f033424240.jpeg"
              },
              "medium": {
                "name": "medium_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "medium_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 750,
                "height": 501,
                "size": 82.09,
                "path": null,
                "url": "/uploads/medium_basque_cuisine_17fa4567e0_f033424240.jpeg"
              },
              "small": {
                "name": "small_https://4d40-2a01-cb00-c8b-1800-7cbb-7da-ea9d-2011.ngrok.io/uploads/basque_cuisine_17fa4567e0.jpeg",
                "hash": "small_basque_cuisine_17fa4567e0_f033424240",
                "ext": ".jpeg",
                "mime": "image/jpeg",
                "width": 500,
                "height": 334,
                "size": 41.03,
                "path": null,
                "url": "/uploads/small_basque_cuisine_17fa4567e0_f033424240.jpeg"
              }
            },
            "hash": "basque_cuisine_17fa4567e0_f033424240",
            "ext": ".jpeg",
            "mime": "image/jpeg",
            "size": 58.209999999999994,
            "url": "/uploads/basque_cuisine_17fa4567e0_f033424240.jpeg",
            "previewUrl": null,
            "provider": "local",
            "provider_metadata": null,
            "createdAt": "2021-11-23T14:05:33.460Z",
            "updatedAt": "2021-11-23T14:05:46.084Z"
            }
          }
        },
        "blocks": [
          {
            "id": 2,
            "__component": "blocks.related-articles"
          },
          {
            "id": 2,
            "documentId": "w8r5k8o8v0t9l9e0d7y6vco",
            "__component": "blocks.cta-command-line",
            "theme": "primary",
            "title": "Want to give a try to a Strapi starter?",
            "text": "❤️",
            "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
          }
        ],
        "seo": {
          "id": 1,
          "documentId": "h7c8d0u3i3q5v1j3j3r4cxf",
          "metaTitle": "Articles - FoodAdvisor",
          "metaDescription": "Discover our articles about food, restaurants, bars and more! - FoodAdvisor",
          "keywords": "food",
          "metaRobots": null,
          "structuredData": null,
          "metaViewport": null,
          "canonicalURL": null
        },
        "category": {
          "data": {
            "id": 4,
            "documentId": "t1t3d9k6n1k5a6r8l7f8rox",
            "name": "European",
            "slug": "european",
            "createdAt": "2021-11-09T13:33:20.123Z",
            "updatedAt": "2021-11-09T13:33:20.123Z"
          }
        },
        "localizations": {
          "data": [
            {
              "id": 10,
              "documentId": "h7c8d0u3i3q5v1j3j3r4cxf",
              "title": "Voici pourquoi il faut essayer la cuisine basque, selon un chef basque",
              "slug": "voici-pourquoi-il-faut-essayer-la-cuisine-basque-selon-un-chef-basque",
              "createdAt": "2021-11-18T13:33:19.948Z",
              "updatedAt": "2023-06-02T10:57:19.606Z",
              "publishedAt": "2022-09-22T13:00:00.069Z",
              "locale": "fr-FR",
              "ckeditor_content": "// truncated content"
            }
          ]
        }
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}

----------------------------------------

TITLE: Creating Dynamic Zone with Entity Service in Strapi
DESCRIPTION: Creates a dynamic zone containing multiple components while creating an entry. Each component in the dynamic zone requires a __component property to specify its type.

LANGUAGE: javascript
CODE:
strapi.entityService.create('api::article.article', {
  data: {
    myDynamicZone: [
      {
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        __component: 'compo.type2',
        foo: 'bar',
      },
    ],
  },
});

----------------------------------------

TITLE: Sorting with Order Specification
DESCRIPTION: Demonstrates how to sort API results by multiple fields while specifying ascending and descending order for each field.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  sort: ['Description:asc', 'Name:desc'],
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);

----------------------------------------

TITLE: Finding Multiple Records with $in Operator in Strapi
DESCRIPTION: Demonstrates how to fetch multiple restaurants by their IDs using the $in operator with both URL query and qs library approach.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  filters: {
    id: {
      $in: [3, 6, 8],
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);

----------------------------------------

TITLE: Logout from Strapi Cloud
DESCRIPTION: Command to log out from Strapi Cloud. Opens browser for confirmation and prevents further deployments until new login.

LANGUAGE: bash
CODE:
strapi logout

----------------------------------------

TITLE: Accessing Environment Variables in JavaScript Configuration
DESCRIPTION: Example of accessing an environment variable in a JavaScript configuration file using the env() utility.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  connections: {
    default: {
      settings: {
        password: env('DATABASE_PASSWORD'),
      },
    },
  },
});

----------------------------------------

TITLE: Discarding Draft for a Specific Locale Version in Strapi
DESCRIPTION: Use the discardDraft() method with the locale parameter to discard the draft of a specific language version. This example discards the French draft of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi
  .documents('api::restaurant.restaurant')
  .discardDraft({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: 'fr' });

----------------------------------------

TITLE: Creating a Flutter Application
DESCRIPTION: Commands to create a new Flutter application and navigate to its directory.

LANGUAGE: bash
CODE:
flutter create flutterapp
cd flutterapp

----------------------------------------

TITLE: Populating dynamic zones in Strapi REST API
DESCRIPTION: Example of using a detailed population strategy to populate specific components within a dynamic zone in a GET request to /api/articles.

LANGUAGE: json
CODE:
{
  "data": [
    {
      "id": 1,
      "documentId": "it9bbhcgc6mcfsqas7h1dp",
      "title": "Here's why you have to try basque cuisine, according to a basque chef",
      "slug": "here-s-why-you-have-to-try-basque-cuisine-according-to-a-basque-chef",
      "createdAt": "2021-11-09T13:33:19.948Z",
      "updatedAt": "2023-06-02T10:57:19.584Z",
      "publishedAt": "2022-09-22T09:30:00.208Z",
      "locale": "en",
      "ckeditor_content": "…",
      "blocks": [
        {
          "id": 2,
          "documentId": "e8cnux5ejxyqrejd5addfv",
          "__component": "blocks.related-articles",
          "articles": {
            "data": [
              {
                "id": 2,
                "documentId": "wkgojrcg5bkz8teqx1foz7",
                "title": "What are chinese hamburgers and why aren't you eating them?",
                "slug": "what-are-chinese-hamburgers-and-why-aren-t-you-eating-them",
                "createdAt": "2021-11-11T13:33:19.948Z",
                "updatedAt": "2023-06-01T14:32:50.984Z",
                "publishedAt": "2022-09-22T12:36:48.312Z",
                "locale": "en",
                "ckeditor_content": "…",
                "image": {
                  "data": {
                      "// ..."
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "id": 2,
          "__component": "blocks.cta-command-line",
          "theme": "primary",
          "title": "Want to give a try to a Strapi starter?",
          "text": "❤️",
          "commandLine": "git clone https://github.com/strapi/nextjs-corporate-starter.git"
        }
      ]
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 4
    }
  }
}

----------------------------------------

TITLE: Publishing a Specific Locale Version of a Document in Strapi
DESCRIPTION: Use the publish() method with the locale parameter to publish a specific language version of a document. This example publishes the French version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').publish({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: 'fr',
});

----------------------------------------

TITLE: Basic Model Schema for Strapi Content Type
DESCRIPTION: Example schema.json showing basic model settings and collection name configuration

LANGUAGE: json
CODE:
{
  "kind": "collectionType",
  "collectionName": "Restaurants_v1"
}

----------------------------------------

TITLE: Using $or Logical Operator with Entity Service API
DESCRIPTION: Example of using the $or logical operator where one or more nested conditions must be true.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

----------------------------------------

TITLE: Configuring Upload Provider in Strapi Cloud (JavaScript)
DESCRIPTION: This code snippet shows how to configure a third-party upload provider in the Strapi Cloud production environment using JavaScript. It demonstrates the structure for adding upload configuration options to the plugins.js file.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
// … some unrelated plugins configuration options
// highlight-start
upload: {
   config: {
      // … provider-specific upload configuration options go here
   }
// highlight-end
// … some other unrelated plugins configuration options
});

----------------------------------------

TITLE: Exporting Data Excluding Files and Content (npm)
DESCRIPTION: This command exports Strapi data excluding files and content using npm. It shows how to use the '--exclude' option with npm to specify which data types to exclude from the export.

LANGUAGE: bash
CODE:
npm run strapi export -- --exclude files,content

----------------------------------------

TITLE: Deleting All Locale Versions of a Document in Strapi
DESCRIPTION: Use the delete() method with the '*' wildcard to remove all language versions of a document. This example deletes all locales of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').delete({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  locale: '*',
});

----------------------------------------

TITLE: Finding Multiple Documents - Document Service API
DESCRIPTION: Example of using findMany() to retrieve multiple documents with filtering

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findMany({
  filters: {  
    name: {
      $startsWith: 'Pizzeria'
    }
  }
})

----------------------------------------

TITLE: Creating a Document for a Specific Locale in Strapi's Document Service API
DESCRIPTION: Use the create() method to create a document for a specific locale. This example creates a Spanish draft version of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').create({
  locale: 'es'
  data: { name: 'Restaurante B' }
})

----------------------------------------

TITLE: Configuring Server Host in JavaScript
DESCRIPTION: Demonstrates how to set up server host configuration for different environments using JavaScript. The default configuration sets the host to '127.0.0.1', while the production configuration uses an environment variable with a fallback to '0.0.0.0'.

LANGUAGE: javascript
CODE:
module.exports = {
  host: '127.0.0.1',
};

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
});

----------------------------------------

TITLE: Retrieving Multiple Documents in a Specific Locale with findMany() in Strapi
DESCRIPTION: Use the findMany() method to retrieve all documents available in a specific locale. This example fetches all restaurant documents in French.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').findMany({ locale: 'fr' });

----------------------------------------

TITLE: Upgrading Strapi Minor Version
DESCRIPTION: Command to upgrade to the latest minor and patch version within the current major version of Strapi.

LANGUAGE: bash
CODE:
npx @strapi/upgrade minor

----------------------------------------

TITLE: Exporting Strapi Data with Encryption Key (npm)
DESCRIPTION: This command exports Strapi data with a specified encryption key using npm. It shows how to use the '--key' option with npm to provide an encryption key.

LANGUAGE: bash
CODE:
npm run strapi export -- --key my-encryption-key

----------------------------------------

TITLE: Updating Document with Selected Fields Response
DESCRIPTION: Example of using update() with the fields parameter to specify which fields should be returned in the response after updating a restaurant document.

LANGUAGE: javascript
CODE:
const document = await strapi.documents("api::restaurant.restaurant").update({
  documentId: "fmtr6d7ktzpgrijqaqgr6vxs",
  data: {
    name: "Restaurant C",
  },
  fields: ["name"],
});

----------------------------------------

TITLE: Enabling populateCreatorFields in Strapi Schema JSON
DESCRIPTION: Add the 'populateCreatorFields' option to the content-type schema.json file to enable populating creator fields in the API response.

LANGUAGE: json
CODE:
"options": {
    "draftAndPublish": true,
    "populateCreatorFields": true
  },

----------------------------------------

TITLE: Default Server Configuration in Strapi (TypeScript)
DESCRIPTION: This snippet demonstrates the default server configuration for Strapi using TypeScript. It sets the host and port using environment variables with fallback values.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
});

----------------------------------------

TITLE: Creating Strapi Test Helper
DESCRIPTION: Define helper functions to set up and clean up a Strapi instance for testing.

LANGUAGE: javascript
CODE:
const Strapi = require("@strapi/strapi");
const fs = require("fs");

let instance;

async function setupStrapi() {
  if (!instance) {
    await Strapi.createStrapi().load();
    instance = strapi;
    
    await instance.server.mount();
  }
  return instance;
}

async function cleanupStrapi() {
  const dbSettings = strapi.config.get("database.connection");

  await strapi.server.httpServer.close();

  await strapi.db.connection.destroy();

  if (dbSettings && dbSettings.connection && dbSettings.connection.filename) {
    const tmpDbFile = dbSettings.connection.filename;
    if (fs.existsSync(tmpDbFile)) {
      fs.unlinkSync(tmpDbFile);
    }
  }
}

module.exports = { setupStrapi, cleanupStrapi };

----------------------------------------

TITLE: Configuring GraphQL Security Middleware
DESCRIPTION: Implementation of security middleware specifically for the GraphQL endpoint.

LANGUAGE: javascript
CODE:
module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    if (ctx.request.path === '/graphql') {
      ctx.set('Content-Security-Policy', "default-src 'self'; script-src 'self' 'unsafe-inline' cdn.jsdelivr.net apollo-server-landing-page.cdn.apollographql.com; connect-src 'self' https:; img-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; media-src 'self' data: blob: apollo-server-landing-page.cdn.apollographql.com; frame-src sandbox.embed.apollographql.com; manifest-src apollo-server-landing-page.cdn.apollographql.com;");
    }
    await next();
  };
};

----------------------------------------

TITLE: Upgrading to Latest Strapi Version
DESCRIPTION: Command to upgrade to the absolute latest available version of Strapi, regardless of current version.

LANGUAGE: bash
CODE:
npx @strapi/upgrade latest

----------------------------------------

TITLE: Custom Domain Configuration for SSO Cookies
DESCRIPTION: Configuration for setting custom domain for SSO cookies when deploying admin panel to different location

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  auth: {
    domain: env("ADMIN_SSO_DOMAIN", ".test.example.com"),
    providers: [
      // ...
    ],
  },
  url: env("ADMIN_URL", "http://admin.test.example.com"),
});

----------------------------------------

TITLE: Processing Known Component Types in TypeScript with Strapi
DESCRIPTION: This function shows how to process known component types using parametrized Data.Component for better type safety.

LANGUAGE: typescript
CODE:
function processUsageMetrics(
  id: string,
  metrics: Data.Component<'app.metrics'>
) {
  telemetry.send(id, { clicks: metrics.clicks, views: metrics.views });
}

----------------------------------------

TITLE: Complex Filtering with Multiple Conditions in Strapi
DESCRIPTION: Shows how to implement complex filtering using combinations of $or and $and operators to filter books by date and author.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  filters: {
    $or: [
      {
        date: {
          $eq: '2020-01-01',
        },
      },
      {
        date: {
          $eq: '2020-01-02',
        },
      },
    ],
    author: {
      name: {
        $eq: 'Kai doe',
      },
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/books?${query}`);

----------------------------------------

TITLE: Configuring Admin tsconfig.json for Strapi TypeScript Support
DESCRIPTION: This snippet shows the content of the tsconfig.json file to be added in the ./src/admin/ directory. It extends Strapi's TypeScript utils for the admin panel.

LANGUAGE: json
CODE:
{
    "extends": "@strapi/typescript-utils/tsconfigs/admin",
    "include": [
      "../plugins/**/admin/src/**/*",
      "./"
    ],
    "exclude": [
      "node_modules/",
      "build/",
      "dist/",
      "**/*.test.ts"
    ]
  }

----------------------------------------

TITLE: POST Request Implementation
DESCRIPTION: POST request to create a new restaurant with categories

LANGUAGE: ruby
CODE:
HTTParty.post(
  'http://localhost:1337/api/restaurants/',
  body: {
    data: {
      name: 'Dolemon Sushi',
      description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
      categories: [3]
    }
  },
  header: {
    'Content-Type': 'application/json'
  },
  query: {
    'populate': 'categories'
  }
)

----------------------------------------

TITLE: Updating Admin Panel Host and Port in Strapi (JavaScript)
DESCRIPTION: This snippet shows how to update the admin panel's host and port in Strapi's configuration file. It sets the host to 'my-host.com' and the port to 3000, with an optional commented-out URL path.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: "my-host.com",
  port: 3000,
  // Additionally you can define another path instead of the default /admin one 👇
  // url: '/dashboard' 
});

----------------------------------------

TITLE: Running Strapi Upgrade Tool for Major Version
DESCRIPTION: Command to execute the Strapi upgrade tool for a major version update, which updates dependencies and runs codemods to handle breaking changes.

LANGUAGE: bash
CODE:
npx @strapi/upgrade major

----------------------------------------

TITLE: GraphQL Query for Restaurants
DESCRIPTION: GraphQL query to fetch all restaurants from Strapi

LANGUAGE: graphql
CODE:
query {
  allStrapiRestaurant {
    edges {
      node {
        data {
          id
          attributes {
            name
            description
          }
        }
      }
    }
  }
}

----------------------------------------

TITLE: Filtering with $not Operator in Strapi Query Engine API
DESCRIPTION: This snippet shows how to use the $not logical operator to negate a condition, finding all articles that do not have the specified title.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $not: {
      title: 'Hello World',
    },
  },
});

----------------------------------------

TITLE: Configuring Minimal Strapi Server Settings in TypeScript
DESCRIPTION: TypeScript version of the basic server configuration with required host, port and app keys settings using environment variables.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
});

----------------------------------------

TITLE: Implementing a Configurable Policy in Strapi
DESCRIPTION: Creates a policy that checks if the user's role matches a specified role in the configuration.

LANGUAGE: javascript
CODE:
module.exports = (policyContext, config, { strapi }) => {
    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration
      return true;
    }

    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
};

LANGUAGE: typescript
CODE:
export default (policyContext, config, { strapi }) => {
    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration
      return true;
    }

    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
  };

----------------------------------------

TITLE: Enabling GraphQL v4 Compatibility Mode
DESCRIPTION: Configuration snippet to enable v4 compatibility mode for GraphQL in Strapi 5, allowing gradual migration of queries and mutations.

LANGUAGE: json
CODE:
{
  "graphql": {
    "config": {
      "v4CompatibilityMode": true
    }
  }
}

----------------------------------------

TITLE: Fetching Strapi Collection by Field in Laravel
DESCRIPTION: Example of fetching Strapi collection entries by a specific field using the Laravel-Strapi package.

LANGUAGE: php
CODE:
$strapi = new Dbfx\LaravelStrapi();
$entries = $strapi->entriesByField('restaurants', 'slug', 'test-restaurant-name');

----------------------------------------

TITLE: Refreshing Frontend on Strapi Updates
DESCRIPTION: React component that listens for Strapi update messages and refreshes the frontend using Next.js router.

LANGUAGE: typescript
CODE:
export default function MyClientComponent({
  //…
  const router = useRouter();

  useEffect(() => {
    const handleMessage = async (message: MessageEvent<any>) => {
      if (
        message.origin === process.env.NEXT_PUBLIC_API_URL &&
        message.data.type === "strapiUpdate"
      ) {
        router.refresh();
      }
    };

    window.addEventListener("message", handleMessage);

    return () => {
      window.removeEventListener("message", handleMessage);
    };
  }, [router]);

  // …
})

----------------------------------------

TITLE: Using $between Operator in Strapi Query Engine API
DESCRIPTION: This example shows how to use the $between operator to find articles with ratings within a specified range, inclusive of the boundaries.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $between: [1, 20],
    },
  },
});

----------------------------------------

TITLE: Listing Available Codemods for Strapi v5 Migration
DESCRIPTION: This command lists the available codemods that can be used to automate parts of the plugin migration process from Strapi v4 to v5.

LANGUAGE: bash
CODE:
npx @strapi/upgrade codemods ls

----------------------------------------

TITLE: Basic CRON Job Configuration - Object Format
DESCRIPTION: Shows how to create a basic CRON job using the object format, scheduled to run every Monday at 1am.

LANGUAGE: javascript
CODE:
module.exports = {
  myJob: {
    task: ({ strapi }) => {
      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
    },
    options: {
      rule: "0 0 1 * * 1",
    },
  },
};

LANGUAGE: typescript
CODE:
export default {
  myJob: {
    task: ({ strapi }) => {
      // Add your own logic here (e.g. send a queue of email, create a database backup, etc.).
    },
    options: {
      rule: "0 0 1 * * 1",
    },
  },
};

----------------------------------------

TITLE: Generating Preview URL in Strapi
DESCRIPTION: Function to generate preview pathname based on content type and document in Strapi's admin configuration.

LANGUAGE: typescript
CODE:
const getPreviewPathname = (uid, { locale, document }): string => {
  const { slug } = document;
  
  switch (uid) {
    case "api::page.page":
      switch (slug) {
        case "homepage":
          return `/${locale}`;
        case "pricing":
          return "/pricing";
        case "contact":
          return "/contact";
        case "faq":
          return "/faq";
      }
    case "api::product.product": {
      if (!slug) {
        return "/products";
      }
      return `/products/${slug}`;
    }
    case "api::article.article": {
      if (!slug) {
        return "/blog";
      }
      return `/blog/${slug}`;
    }
    default: {
      return null;
    }
  }
};

----------------------------------------

TITLE: Injecting Component into Content Manager in Strapi 5
DESCRIPTION: This code snippet shows how to inject a component into the Content Manager using the new getPlugin('content-manager').injectComponent() method in Strapi 5.

LANGUAGE: tsx
CODE:
app.getPlugin('content-manager').injectComponent('editView', 'right-links', {
    name: 'PreviewButton',
    Component: () => (
      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>
    ),
  });

----------------------------------------

TITLE: Accessing Strapi Single Type Items in Laravel
DESCRIPTION: Examples of fetching single type items from Strapi using the Laravel-Strapi package.

LANGUAGE: php
CODE:
$strapi = new Dbfx\LaravelStrapi();

// Fetch the full homepage array
$homepageArray = $strapi->single('homepage');

// Return just the ['content'] field from the homepage array
$homepageItem = $strapi->single('homepage', 'content');

----------------------------------------

TITLE: Converting count API Call in Strapi
DESCRIPTION: Demonstrates the migration of the count method for counting documents.

LANGUAGE: tsx
CODE:
strapi.documents(uid).count();

----------------------------------------

TITLE: Updating an Entry with Strapi Query Engine API
DESCRIPTION: Uses the update() method to modify an existing entry. It allows specifying the entry to update using filters, providing update data, selecting attributes to return, and populating relations.

LANGUAGE: javascript
CODE:
const entry = await strapi.db.query('api::blog.article').update({
  where: { id: 1 },
  data: {
    title: 'xxx',
  },
});

----------------------------------------

TITLE: Converting delete API Call in Strapi
DESCRIPTION: Shows the migration of the delete method for removing documents.

LANGUAGE: tsx
CODE:
strapi.documents(uid).delete({
  documentId: "__TODO__"
});

----------------------------------------

TITLE: Simple Time-Based RBAC Condition Handler
DESCRIPTION: Example of a basic RBAC condition handler that checks if the current server time is 5pm.

LANGUAGE: javascript
CODE:
handler: () => new Date().getHours() === 17;

----------------------------------------

TITLE: Configuring Strapi Admin for Separate Deployment (JavaScript)
DESCRIPTION: JavaScript configuration for the Strapi admin when deploying on a different server. This sets the admin URL and disables serving admin panel from the backend.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  /**
   * Note: The administration will be accessible from the root of the domain 
   * (ex: http://yourfrontend.com/)
   */ 
  url: "/",
  serveAdminPanel: false, // http://yourbackend.com will not serve any static admin files
});

----------------------------------------

TITLE: Replacing lockIcon with licenseOnly in Strapi 5 Admin Panel API
DESCRIPTION: Update plugin code to use licenseOnly instead of lockIcon when adding menu and settings links. This change affects the addMenuLink(), addSettingsLink(), and addSettingsLinks() methods.

LANGUAGE: javascript
CODE:
// Strapi v4
addMenuLink({
  lockIcon: true,
  // other properties
});

// Strapi 5
addMenuLink({
  licenseOnly: true,
  // other properties
});

----------------------------------------

TITLE: Creating Strapi Configuration File for Laravel
DESCRIPTION: This snippet creates a configuration file for Strapi in Laravel, defining the URL and token as environment variables.

LANGUAGE: php
CODE:
return [
    'url' => env('STRAPI_URL'),
    
    'token' => env('STRAPI_TOKEN', null),
];

----------------------------------------

TITLE: Converting create API Call in Strapi
DESCRIPTION: Shows the migration of the create method for creating new documents.

LANGUAGE: tsx
CODE:
strapi.documents(uid).create({
  data: {
    name: "John Doe",
    age: 30,
  },
});

----------------------------------------

TITLE: Deleting an Entry with Strapi Query Engine API
DESCRIPTION: Uses the delete() method to remove an entry. It allows specifying the entry to delete using filters, selecting attributes to return, and populating relations in the returned deleted entry.

LANGUAGE: javascript
CODE:
const entry = await strapi.db.query('api::blog.article').delete({
  where: { id: 1 },
});

----------------------------------------

TITLE: Configuring Public Routes in Strapi (JavaScript)
DESCRIPTION: Example of configuring a public route in Strapi using JavaScript. It demonstrates how to set the 'auth' parameter to false to make a route publicly accessible without authentication.

LANGUAGE: javascript
CODE:
const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      auth: false
    }
  }
});

----------------------------------------

TITLE: Population with Update Operation
DESCRIPTION: Demonstrates field population when updating existing documents using the update() method.

LANGUAGE: javascript
CODE:
strapi.documents("api::article.article").update({
  documentId: "cjld2cjxh0000qzrmn831i7rn",
  data: {
    title: "Test Article Update",
  },
  populate: ["headerImage"],
});

----------------------------------------

TITLE: Updating Locales in Strapi Admin Panel (TypeScript)
DESCRIPTION: Example of how to update the list of available locales in the Strapi admin panel using TypeScript.

LANGUAGE: typescript
CODE:
export default {
  config: {
    locales: ["ru", "zh"],
  },
  bootstrap() {},
};

----------------------------------------

TITLE: Comparing Strapi v4 and v5 JSON Response Formats
DESCRIPTION: Shows the difference between Strapi v4's nested attributes structure and Strapi 5's flattened response format. V4 wraps user fields in an attributes object while v5 places them at the root level and uses documentId instead of id.

LANGUAGE: json
CODE:
{
  "data": {
    "id": 14,
    "attributes": {
      "title": "Article A"
      "relation": {
        "data": {
          "id": "2"
          "name": "Category A"
        }
      }
    }
  }
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 10
    }
  }
}

LANGUAGE: json
CODE:
{
  "data": {
    "documentId": "clkgylmcc000008lcdd868feh",
    "locale": "en",
    "title": "Article A"
    "relation": {
      "documentId": "clkgylw7d000108lc4rw1bb6s"
      "name": "Category A"
    }
  }
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 10
    }
  }
}

----------------------------------------

TITLE: PUT Request to Strapi API using Axios
DESCRIPTION: Execute a PUT request to update a restaurant's category in the Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .put('http://localhost:1337/api/restaurants/2', {
    categories: [2],
  })
  .then(response => {
    console.log(response);
  });

----------------------------------------

TITLE: Implementing Custom Timer Middleware in Strapi (TypeScript)
DESCRIPTION: Example of a custom timer middleware in Strapi using TypeScript. This middleware measures the response time and sets it as an HTTP header.

LANGUAGE: typescript
CODE:
export default () => {
  return async (ctx, next) => {
    const start = Date.now();

    await next();

    const delta = Math.ceil(Date.now() - start);
    ctx.set('X-Response-Time', delta + 'ms');
  };
};

----------------------------------------

TITLE: Browser-based Strapi Client Setup
DESCRIPTION: Configuration for using Strapi Client in browser environments using script tags.

LANGUAGE: javascript
CODE:
<script src="https://cdn.jsdelivr.net/npm/@strapi/client"></script>

<script>
  const client = strapi.strapi({ baseURL: 'http://localhost:1337/api' });
</script>

----------------------------------------

TITLE: Implementing REST API Middleware in Strapi (TypeScript)
DESCRIPTION: Basic structure for implementing a REST API middleware in Strapi using TypeScript. The middleware function takes config and strapi as parameters and returns a function that handles the context and next middleware.

LANGUAGE: typescript
CODE:
export default (config, { strapi })=> {
  return (context, next) => {};
};

----------------------------------------

TITLE: Running Strapi in Development Mode with NPM
DESCRIPTION: Command to start the Strapi application in development mode using NPM package manager.

LANGUAGE: bash
CODE:
npm run develop

----------------------------------------

TITLE: Configuring Default Webhook Headers in TypeScript
DESCRIPTION: Example of setting default headers for webhook requests in Strapi server configuration using TypeScript.

LANGUAGE: typescript
CODE:
export default {
  webhooks: {
    defaultHeaders: {
      "Custom-Header": "my-custom-header",
    },
  },
};

----------------------------------------

TITLE: Configuring Server Proxy in Strapi 5
DESCRIPTION: Example of how to configure server proxy settings in Strapi 5 using the 'server.proxy' object in '/config/server.js' or '/config/server.ts'. This new structure replaces the separate 'globalProxy' and 'proxy' options from Strapi v4.

LANGUAGE: javascript
CODE:
// In /config/server.js or /config/server.ts
module.exports = ({ env }) => ({
  // ...
  proxy: {
    koa: true, // Replaces server.proxy
    global: {
      // Global proxy configuration
    },
    fetch: {
      // Proxy configuration for strapi.fetch
    }
  },
  // ...
});

----------------------------------------

TITLE: Creating a Sapper App with Degit
DESCRIPTION: Use Degit to create a basic Sapper application using webpack.

LANGUAGE: bash
CODE:
npx degit "sveltejs/sapper-template#webpack" sapper-app

----------------------------------------

TITLE: Configuring Custom Routes for Reviews in Strapi
DESCRIPTION: This code snippet shows how to create a custom route configuration for the 'Reviews' content-type. It bypasses the default Strapi authentication and applies a custom 'is-owner-review' policy for the create operation.

LANGUAGE: javascript
CODE:
'use strict';

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::review.review', {
  config: {
    create: {
      auth: false, // set the route to bypass the normal Strapi authentication system
      policies: ['is-owner-review'], // set the route to use a custom policy
      middlewares: [],
    },
  },
});

----------------------------------------

TITLE: Making Generic API Requests
DESCRIPTION: Using the fetch utility method for making generic API requests.

LANGUAGE: javascript
CODE:
const result = await client.fetch('articles', { method: 'GET' });

----------------------------------------

TITLE: Middleware Flow Control Example
DESCRIPTION: Demonstrates the basic flow control pattern used in Strapi middlewares to either continue request processing or return an immediate response.

LANGUAGE: javascript
CODE:
await next()

----------------------------------------

TITLE: JWT Plugin Configuration
DESCRIPTION: Configuration example for JWT settings in the Users & Permissions plugin

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  'users-permissions': {
    config: {
      jwt: {
        expiresIn: '7d',
      },
    },
  },
});

----------------------------------------

TITLE: Configuring File Size Limits in Strapi Middleware
DESCRIPTION: Configuration for maximum file size limits in Strapi's body middleware and upload plugin settings.

LANGUAGE: javascript
CODE:
module.exports = [\n  {\n    name: "strapi::body",\n    config: {\n      formLimit: "256mb",\n      jsonLimit: "256mb",\n      textLimit: "256mb",\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024,\n      },\n    },\n  },\n];

LANGUAGE: typescript
CODE:
export default [\n  {\n    name: "strapi::body",\n    config: {\n      formLimit: "256mb",\n      jsonLimit: "256mb",\n      textLimit: "256mb",\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024,\n      },\n    },\n  },\n];

----------------------------------------

TITLE: Replacing ApolloError with GraphQLError in Strapi 5
DESCRIPTION: Example of replacing the ApolloError import and usage with GraphQLError in Strapi 5 GraphQL resolvers or error handling code.

LANGUAGE: javascript
CODE:
// Old
const { ApolloError } = require('apollo-server-errors');
throw new ApolloError('Error message');

// New
const { GraphQLError } = require('graphql');
throw new GraphQLError('Error message');

----------------------------------------

TITLE: PUT Request to Strapi API using Axios
DESCRIPTION: Example of making a PUT request to update a restaurant's category in a Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from "axios";

axios
  .put("http://localhost:1337/api/restaurants/2", {
    data: {
      categories: [2],
    },
  })
  .then((response) => {
    console.log(response);
  });

----------------------------------------

TITLE: Filtering with $and Operator in Strapi Query Engine API
DESCRIPTION: This snippet demonstrates how to use the $and logical operator to filter query results. It finds articles with a specific title and creation date.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});

----------------------------------------

TITLE: Installing GraphQL Plugin for Strapi with Yarn
DESCRIPTION: Command to install the GraphQL plugin for Strapi using Yarn package manager.

LANGUAGE: sh
CODE:
yarn add @strapi/plugin-graphql

----------------------------------------

TITLE: Selective Population in Strapi
DESCRIPTION: Shows how to populate specific relations by passing an array of attribute names to the populate parameter.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  populate: ['componentA', 'relationA'],
});

----------------------------------------

TITLE: PUT Request Implementation in Go
DESCRIPTION: Example of making a PUT request to update an existing restaurant in Strapi. Shows how to create a custom HTTP request with headers and handle the response.

LANGUAGE: go
CODE:
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func main() {
	putD()
}

func putD() {
	putRest, _ := json.Marshal(map[string]string{
		"name": "Restaurant Homes",
	})
	client := &http.Client{}
	url := "http://localhost:1337/api/restaurants/1"
	req, error := http.NewRequest(http.MethodPut, url, bytes.NewBuffer(putRest))
	req.Header.Set("Content-Type", "application/json")
	if error != nil {
		log.Fatal(error)
	}
	resp, error := client.Do(req)
	if error != nil {
		log.Fatal(error)
	}
	defer resp.Body.Close()

	body, error := ioutil.ReadAll(resp.Body)
	if error != nil {
		log.Fatal(error)
	}
	fmt.Println(string(body))
}

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Structured documentation page using Markdown and custom documentation components to present Strapi's advanced features. Includes frontmatter metadata and organized content cards for different features.

LANGUAGE: markdown
CODE:
---
title: Advanced features
description: Learn more about Strapi 5 advanced features
displayed_sidebar: devDocsSidebar
pagination_prev: dev-docs/api/content-api
pagination_next: dev-docs/customization
tags:
- backend server
- database
- plugins
- typescript
---

# Advanced features

Strapi provides advanced built-in features for developers who'd like to get the best of the backend server, plugins, and database. Click on any of the following cards to read more about a specific feature:

<CustomDocCardsWrapper>

<CustomDocCard emoji="🌍" title="Internationalization (i18n)" description="The i18n feature allows creating, managing and distributing localized content in different languages." link="/dev-docs/i18n"/>

<CustomDocCard title="CLI reference" description="Control Strapi through the Command Line Interface (CLI)." link="/dev-docs/cli" />

<CustomDocCard title="TypeScript" description="Use TypeScript to develop your Strapi project." link="/dev-docs/typescript" />

<CustomDocCard title="Providers" description="Install, configure, and create providers to extend core capabilities of some plugins." link="/dev-docs/providers" />

<CustomDocCard title="Templates" description="Use and create pre-made Strapi applications designed for a specific purpose." link="/dev-docs/templates" />

<CustomDocCard title="Data management" description="Use Strapi's built-in data management system to import, export, or transfer data." link="/dev-docs/data-management" />

<CustomDocCard title="Database migrations" description="Manage database migrations operations." link="/dev-docs/database-migrations" />

<CustomDocCard title="Database transactions" description="Use an API to wrap a set of operations in a transaction that ensures the integrity of data." link="/dev-docs/database-transactions" />

<CustomDocCard title="Unit testing" description="Run basic unit tests for a Strapi project." link="/dev-docs/testing" />

<CustomDocCard title="Error handling" description="Handle errors received through REST and GraphQL requests, or throw errors through the backend server." link="/dev-docs/error-handling" />

:::tip
If the built-in advanced features of Strapi do not cover your use case, you might want to turn next to [plugins](/dev-docs/plugins) or [customization](/dev-docs/customization) possibilities.
:::

</CustomDocCardsWrapper>

----------------------------------------

TITLE: Connection-based GraphQL Query
DESCRIPTION: Query structure using _connection suffix for collection fields while maintaining v4 compatibility.

LANGUAGE: graphql
CODE:
{
  restaurants_connection {
    data {
      id
      attributes {
        title
        image {
          data {
            id
            attributes {
              url
            }
          }
        }
        images_connection {
          data {
            id
            attributes {
              url
            }
          }
        }
        xToOneRelation {
          data {
            id
            attributes {
              field
            }
          }
        }
        xToManyRelation_connection {
          data {
            id
            attributes {
              field
            }
          }
        }
      }
    }
    meta {
      pagination {
        page
        pageSize
      }
    }
  }
}

----------------------------------------

TITLE: GET Request to Strapi API using Fetch
DESCRIPTION: Example of making a GET request to fetch restaurants from a Strapi API using Fetch API.

LANGUAGE: javascript
CODE:
fetch("http://localhost:1337/api/restaurants", {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
  },
})
  .then((response) => response.json())
  .then((data) => console.log(data));

----------------------------------------

TITLE: Basic Relation Population in Strapi
DESCRIPTION: Demonstrates how to populate all root level relations using the populate: true parameter in a findMany query.

LANGUAGE: javascript
CODE:
strapi.db.query('api::article.article').findMany({
  populate: true,
});

----------------------------------------

TITLE: Querying and Sorting Restaurants by Multiple Fields in GraphQL
DESCRIPTION: GraphQL query demonstrating how to fetch and sort restaurants by multiple fields (name ascending, then average price descending).

LANGUAGE: graphql
CODE:
{
  restaurants(sort: ["name:asc", "averagePrice:desc"]) {
    documentId
    name
    averagePrice
  }
}

----------------------------------------

TITLE: POST Request to Strapi API using Axios
DESCRIPTION: Execute a POST request to create a new restaurant in the Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .post('http://localhost:1337/api/restaurants', {
    name: 'Dolemon Sushi',
    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
    categories: [3],
  })
  .then(response => {
    console.log(response);
  });

----------------------------------------

TITLE: Original V4 GraphQL Query Structure
DESCRIPTION: Example of the original GraphQL query structure in Strapi v4 showing nested data and attributes pattern.

LANGUAGE: graphql
CODE:
{
  restaurants {
    data {
      id
      attributes {
        title
        image {
          data {
            id
            attributes {
              url
            }
          }
        }
        images {
          data {
            id
            attributes {
              url
            }
          }
        }
        xToOneRelation {
          data {
            id
            attributes {
            
            }
        }
        xToManyRelation {
          data {
            id
            attributes {
              field
            }
          }
        }
      }
    }
    meta {
      pagination {
        page
        pageSize
      }
    }
  }	
}

----------------------------------------

TITLE: Simplified GraphQL Query Structure
DESCRIPTION: Streamlined query structure with removed attributes wrapper and simplified data access.

LANGUAGE: graphql
CODE:
{
  restaurants {
    id
    title
    image {
      id
      url
    }
    images {
      id
      url	
    }
    xToOneRelation {
      id
      field
    }
    xToManyRelation {
      id
      field
    }
  }
}

----------------------------------------

TITLE: GET Request to Strapi API using Axios
DESCRIPTION: Example of making a GET request to fetch restaurants from a Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from "axios";

axios.get("http://localhost:1337/api/restaurants").then((response) => {
  console.log(response);
});

----------------------------------------

TITLE: GraphQL API Error Response Format
DESCRIPTION: Standard JSON structure for GraphQL API error responses in Strapi, including message, extensions and error details.

LANGUAGE: json
CODE:
{ "errors": [
    {
      "message": "",
      "extensions": {
        "error": {
          "name": "",
          "message": "",
          "details": {},
        },
        "code": ""
      }
    }
  ],
  "data": {
    "graphQLQueryName": null
  }
}

----------------------------------------

TITLE: Configuring Admin Panel Options in Strapi (TypeScript)
DESCRIPTION: Example configuration for customizing various aspects of the Strapi admin panel using TypeScript, including logos, favicon, locales, translations, theme, and feature toggles.

LANGUAGE: typescript
CODE:
import AuthLogo from "./extensions/my-logo.png";
import MenuLogo from "./extensions/logo.png";
import favicon from "./extensions/favicon.png";

export default {
  config: {
    auth: {
      logo: AuthLogo,
    },
    head: {
      favicon: favicon, 
    },
    locales: ["fr", "de"],
    menu: {
      logo: MenuLogo,
    },
    theme: {
      colors: {
        primary100: "#f6ecfc",
        primary200: "#e0c1f4",
        primary500: "#ac73e6",
        primary600: "#9736e8",
        primary700: "#8312d1",
        danger700: "#b72b1a",
      },
    },
    translations: {
      fr: {
        "Auth.form.email.label": "test",
        Users: "Utilisateurs",
        City: "CITY (FRENCH)",
        Id: "ID french",
      },
    },
    tutorials: false,
    notifications: { releases: false },
  },

  bootstrap() {},
};

----------------------------------------

TITLE: Disabling Remote Data Transfer
DESCRIPTION: Command to disable remote data transfer using an environment variable when starting the Strapi server.

LANGUAGE: bash
CODE:
STRAPI_DISABLE_REMOTE_DATA_TRANSFER=true yarn start

----------------------------------------

TITLE: Displaying Restaurants in Svelte Component with Axios
DESCRIPTION: Svelte component that fetches restaurants from the Strapi API using Axios and displays them in a list. It also handles error states.

LANGUAGE: javascript
CODE:
<script>
import { onMount } from 'svelte';
import axios from 'axios'

let restaurants = [];
let error = null

onMount(async () => {
	try {
		const res = await axios.get('http://localhost:1337/api/restaurants');
		restaurants = res.data.data
	} catch (e) {
		error = e
	}
});

</script>

{#if error !== null}
  {error}
{:else}
  <ul>
  {#each restaurants as restaurant}
    <li>
  		{restaurant.attributes.name}
    </li>
  {/each}
  </ul>
{/if}

----------------------------------------

TITLE: REST API Population Query Example
DESCRIPTION: Demonstrates the required syntax for populating components and dynamic zones in Strapi 5 REST API calls using 'on' fragments. Shows both generic syntax pattern and a specific URL example.

LANGUAGE: text
CODE:
populate[dynamic-zone-name][on][component-category.component-name]=true

LANGUAGE: text
CODE:
/api/articles?populate[dynamic-zone-name][on][component-category.component-name]=true

----------------------------------------

TITLE: Updating Core Service Methods in Strapi 5
DESCRIPTION: Example of core service methods in Strapi 5 using the Document Service API. Methods like findOne, update, and delete now receive a documentId instead of an entityId.

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::address.address', {

  findOne(documentId, params) {
    // customization
    super.findOne(documentId, params);
    
    // or to show a bit more context
    strapi.documents(uid).findOne(documentId, params);
  },

  update(documentId, params) {
    // customization
    super.update(documentId, params);
  },

  delete(documentId, params) {
    // customization
    super.delete(documentId, params)
  }
});

----------------------------------------

TITLE: Installing Axios HTTP Client
DESCRIPTION: Commands to install the Axios HTTP client using either yarn or npm.

LANGUAGE: bash
CODE:
yarn add axios

LANGUAGE: bash
CODE:
npm install axios

----------------------------------------

TITLE: Updating Admin Panel Path in Strapi (JavaScript)
DESCRIPTION: This snippet demonstrates how to update the admin panel's path in the Strapi configuration file. It sets the 'url' property to '/dashboard' to make the admin panel accessible at 'http://localhost:1337/dashboard'.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // … other configuration properties
  url: "/dashboard",
});

----------------------------------------

TITLE: GET Request to Strapi API using Fetch
DESCRIPTION: Make a GET request to the Strapi API endpoint for restaurants using the Fetch API. This code fetches all restaurants from the API.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
  },
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Accessing Configuration in Strapi v5
DESCRIPTION: Demonstrates the new uid notation using '::' for accessing model configurations in Strapi v5, showing the updated syntax for get, has, and set operations.

LANGUAGE: jsx
CODE:
strapi.config.get('plugin::upload.somesetting');
if ( strapi.config.has('plugin::upload.somesetting') ) {
  strapi.config.set('plugin::upload.somesetting', false);
}

----------------------------------------

TITLE: Updating Server Configuration in JavaScript for Strapi 5
DESCRIPTION: This snippet shows how to update the /config/server.js file in Strapi 5 to replace previously used environment variables with new server configuration options.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // … other configuration options
  transfer: {
    remote: {
      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER
    },
  },
  logger: {
    updates: {
      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION
    },
    startup: {
      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE
    },
  },
});

----------------------------------------

TITLE: GET Request to Fetch Restaurants
DESCRIPTION: Performs a GET request to retrieve all restaurants from the Strapi API.

LANGUAGE: python
CODE:
requests.get("http://localhost:1337/api/restaurants")

----------------------------------------

TITLE: Configuring Strapi Server for Separate Deployment (JavaScript)
DESCRIPTION: JavaScript configuration for the Strapi server when deploying the admin panel on a different server. This sets the host, port, and backend URL.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env("HOST", "0.0.0.0"),
  port: env.int("PORT", 1337),
  url: "http://yourbackend.com",
});

----------------------------------------

TITLE: GET Request to Strapi API using Fetch in Vue.js
DESCRIPTION: Example of making a GET request to the Strapi API using Fetch in a Vue.js application.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
  },
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Handling File Properties in Custom Endpoints (Strapi 5)
DESCRIPTION: In Strapi 5, custom endpoints handle files using updated properties of the ctx.request.files object due to koa-body v6 and formidable v2 changes.

LANGUAGE: javascript
CODE:
const endpoint = (ctx) => {
  ctx.request.files.fileName.filepath
  ctx.request.files.fileName.originalFilename
  ctx.request.files.fileName.mimetype
}

----------------------------------------

TITLE: Migrating CheckPagePermissions Component in Strapi
DESCRIPTION: Example showing how to migrate from CheckPagePermissions to the new Page.Protect component from @strapi/strapi/admin

LANGUAGE: tsx
CODE:
// Before
import { CheckPagePermissions } from '@strapi/helper-plugin';

const MyProtectedPage = () => {
  return (
    <CheckPagePermissions
        permissions={[action: 'plugin::my-plugin.read']}
    >
      <MyPag />
    </CheckPagePermissions>
  );
};

// After
import { Page } from '@strapi/strapi/admin';

const MyProtectedPage = () => {
  return (
    <Page.Protect permissions={[action: 'plugin::my-plugin.read']}>
      <MyPage />
    </Page.Protect>
  );
};

----------------------------------------

TITLE: Vue Component for Displaying Restaurants
DESCRIPTION: Vue component that queries and displays a list of restaurants and their categories from Strapi.

LANGUAGE: vue
CODE:
<template>
<Layout>
  <ul>
    <li v-for="restaurant in $page.allStrapiRestaurant.edges" :key="restaurant.node.id">
      {{ restaurant.node.name }}
      <ul>
        <li v-for="category in restaurant.node.categories">
          <g-link :to="'categories/' + category.id">{{ category.name }}</g-link>
        </li>
      </ul>
    </li>
  </ul>
</Layout>
</template>

<page-query>
  query {
      allStrapiRestaurant {
        edges {
          node {
            id
            name
            categories {
              id
              name
            }
          }
        }
      }
    }
</page-query>

----------------------------------------

TITLE: Registering Custom WYSIWYG Editor in Strapi Admin Panel (TypeScript)
DESCRIPTION: This code snippet shows how to register a custom WYSIWYG editor component in Strapi's admin panel using TypeScript. It imports a custom WYSIWYG component and uses the app.addFields() function to declare the new field.

LANGUAGE: typescript
CODE:
// The following file contains the logic for your new WYSIWYG editor👇
import MyNewWYSIGWYG from "./extensions/components/MyNewWYSIGWYG";

export default {
  bootstrap(app) {
    app.addFields({ type: "wysiwyg", Component: MyNewWYSIGWYG });
  },
};

----------------------------------------

TITLE: Making PUT Request to Strapi API in Dart
DESCRIPTION: Dart code snippet for making a PUT request to update a restaurant's category in a Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.put(
  'http://localhost:1337/restaurants/2',
  headers: headers,
  body: jsonEncode({
    'categories': [2]
  });
);

----------------------------------------

TITLE: Migration Table - Helper Plugin Component Changes
DESCRIPTION: Table showing the mapping of helper-plugin components and utilities to their new locations in Strapi 5, primarily moved to @strapi/strapi/admin and @strapi/design-system packages.

LANGUAGE: markdown
CODE:
| Action                                      | Now handled in Strapi 5 by…                    |
|---------------------------------------------|-------------------------------|
| Change `AnErrorOccurred` import             | @strapi/strapi/admin           |
| Replace `AnErrorOccurred` with `Page.Error` | @strapi/strapi/admin           |
| Change `ConfirmDialog` import               | @strapi/strapi/admin           |
| Change `getFetchClient` import              | @strapi/strapi/admin           |
| Change `LoadingIndicatorPage` import        | @strapi/strapi/admin           |
| Replace `LoadingIndicatorPage` with `Page.Loading` | @strapi/strapi/admin     |
| Change `NoPermissions` import               | @strapi/strapi/admin           |
| Replace `NoPermissions` with `Page.NoPermissions` | @strapi/strapi/admin    |
| Change `translatedErrors` import            | @strapi/strapi/admin           |
| Change `useFetchClient` import              | @strapi/strapi/admin           |
| Change `useQueryParams` import              | @strapi/strapi/admin           |
| Change `SearchURLQuery` import              | @strapi/strapi/admin           |
| Change `DateTimePicker` import              | @strapi/design-system          |
| Change `Status` import                      | @strapi/design-system          |
| Change `useCallbackRef` import              | @strapi/design-system          |
| Change `useCollator` import                 | @strapi/design-system          |
| Change `useFilter` import                   | @strapi/design-system          |

----------------------------------------

TITLE: Casting Environment Variables in Strapi 5
DESCRIPTION: Examples of using the env() utility to cast environment variables to different types, including integer, float, boolean, JSON object, array, date, and oneOf union types.

LANGUAGE: javascript
CODE:
// Returns the env if defined without casting it
env('VAR', 'default');

// Cast to integer (using parseInt)
env.int('VAR', 0);

// Cast to float (using parseFloat)
env.float('VAR', 3.14);

// Cast to boolean (check if the value is equal to 'true')
env.bool('VAR', true);

// Cast to JS object (using JSON.parse)
env.json('VAR', { key: 'value' });

// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=["value1", "value2", "value3"])
env.array('VAR', [1, 2, 3]);

// Cast to date (using new Date(value))
env.date('VAR', new Date());

// Returns the env matching oneOf union types
env.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')

----------------------------------------

TITLE: Executing PUT Request in Flutter
DESCRIPTION: Dart code to perform a PUT request to update the category of a restaurant in the Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.put(
  'http://localhost:1337/api/restaurants/2',
  headers: headers,
  body: jsonEncode({
    'categories': [2]
  });
);

----------------------------------------

TITLE: Implementing 'Is-Owner' Middleware in Strapi
DESCRIPTION: Example of implementing an 'is-owner policy' middleware in Strapi. This middleware checks if the current user is the owner of the requested entry and restricts access if not.

LANGUAGE: javascript
CODE:
"use strict";

/**
 * `isOwner` middleware
 */

module.exports = (config, { strapi }) => {
  // Add your own logic here.
  return async (ctx, next) => {
    const user = ctx.state.user;
    const entryId = ctx.params.id ? ctx.params.id : undefined;
    let entry = {};

    /** 
     * Gets all information about a given entry,
     * populating every relations to ensure 
     * the response includes author-related information
     */
    if (entryId) {
      entry = await strapi.documents('api::restaurant.restaurant').findOne(
        entryId,
        { populate: "*" }
      );
    }

    /**
     * Compares user id and entry author id
     * to decide whether the request can be fulfilled
     * by going forward in the Strapi backend server
     */
    if (user.id !== entry.author.id) {
      return ctx.unauthorized("This action is unauthorized.");
    } else {
      return next();
    }
  };
};

----------------------------------------

TITLE: Unpublishing All Locale Versions of a Document in Strapi
DESCRIPTION: Use the unpublish() method with the '*' wildcard to unpublish all language versions of a document. This example unpublishes all locales of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi
  .documents('api::restaurant.restaurant')
  .unpublish({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });

----------------------------------------

TITLE: Importing and Initializing Strapi in v4
DESCRIPTION: Demonstrates how to import and initialize Strapi using the application init function in Strapi v4.

LANGUAGE: javascript
CODE:
import strapi from '@strapi/strapi'; 
// or
const strapi = require('@strapi/strapi');

strapi();

----------------------------------------

TITLE: Email Domain RBAC Condition Handler
DESCRIPTION: RBAC condition that verifies if a user's email address belongs to the strapi.io domain.

LANGUAGE: javascript
CODE:
const condition = {
  displayName: 'Email address from strapi.io',
  name: 'email-strapi-dot-io',
  async handler(user) {
    return user.email.includes('@strapi.io');
  },
};

----------------------------------------

TITLE: Fetching Category in Vue.js with Apollo Client
DESCRIPTION: Vue.js component using Apollo Client to fetch and display a specific category and its associated restaurants from the Strapi GraphQL API.

LANGUAGE: javascript
CODE:
<template>
  <div>
    <h1>{{ category.name }}
    <ul>
      <li v-for="restaurant in category.restaurants" :key="restaurant.id">
        {{ restaurant.name }}
      </li>
    </ul>
  </div>
</template>

<script>
import gql from "graphql-tag";

export default {
  data() {
    return {
      category: {},
      routeParam: this.$route.params.id
    };
  },
  apollo: {
    category: {
      query: gql`
      query Category($id: ID!) {
        category(id: $id) {
          id
          name
          restaurants {
            id
            name
            description
          }
        }
      }
      `,
      variables() {
        return {
          id: this.routeParam
        };
      }
    }
  }
};
</script>

----------------------------------------

TITLE: Configuring Policies in Strapi Routes (JavaScript)
DESCRIPTION: Example of configuring policies for routes in Strapi using JavaScript. It demonstrates different ways to add policies to a route, including referencing registered policies and inline policy implementations.

LANGUAGE: javascript
CODE:
const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::restaurant.restaurant', {
  config: {
    find: {
      policies: [
        // point to a registered policy
        'policy-name',

        // point to a registered policy with some custom configuration
        { name: 'policy-name', config: {} }, 
        
        // pass a policy implementation directly
        (policyContext, config, { strapi }) => {
          return true;
        },
      ]
    }
  }
});

----------------------------------------

TITLE: Updating and Publishing Document in Strapi
DESCRIPTION: Use the update() method of Strapi's Document Service API to update an existing document and publish the changes by including 'status: published' in the parameters.

LANGUAGE: javascript
CODE:
await strapi.documents('api::restaurant.restaurant').update({
  documentId: 'a1b2c3d4e5f6g7h8i9j0klm',
  data: {
    name: "Biscotte Restaurant (closed)",
  },
  status: 'published',
})

----------------------------------------

TITLE: Importing and Using Strapi Factories in v4
DESCRIPTION: Shows various ways to import and use Strapi factories in Strapi v4, including default import, named import, and require statements.

LANGUAGE: javascript
CODE:
import strapiDefault from '@strapi/strapi';
// or
import { factories } from '@strapi/strapi';
// or
const { factories } = require('@strapi/strapi');
// or
const { createCoreService } = require('@strapi/strapi').factories;
// or
const strapi = require('@strapi/strapi');

strapiDefault.factories.createCoreService(); // this is not possible anymore in v5
strapi.factories.createCoreService();
factories.createCoreService();
createCoreService();

----------------------------------------

TITLE: Adding a Cron Job in Strapi Plugin
DESCRIPTION: This snippet demonstrates how to add a cron job to a Strapi instance within a plugin's bootstrap function. The job runs every second and logs a message to the console.

LANGUAGE: javascript
CODE:
module.exports = () => ({
  bootstrap({ strapi }) {
    strapi.cron.add({
      // runs every second
      myJob: {
        task: ({ strapi }) => {
          console.log("hello from plugin");
        },
        options: {
          rule: "* * * * * *",
        },
      },
    });
  },
});

----------------------------------------

TITLE: Configuring Strapi endpoint and collections in _config.yml
DESCRIPTION: YAML configuration to set up Strapi endpoint and define collections for Jekyll-Strapi integration.

LANGUAGE: yaml
CODE:
strapi:
  # Your API endpoint (optional, default to http://localhost:1337)
  endpoint: http://localhost:1337
  collections:
    restaurants:
      type: restaurants

    categories:
      type: categories

----------------------------------------

TITLE: Applying a Plugin Policy to a Route in Strapi
DESCRIPTION: Shows how to use the 'isAuthenticated' policy from the Users & Permissions plugin on a GET route for restaurants.

LANGUAGE: javascript
CODE:
module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `isAuthenticated` policy prodived with the `users-permissions` plugin 
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['plugin::users-permissions.isAuthenticated']
      }
    }
  ]
}

LANGUAGE: typescript
CODE:
export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `isAuthenticated` policy prodived with the `users-permissions` plugin 
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['plugin::users-permissions.isAuthenticated']
      }
    }
  ]
}

----------------------------------------

TITLE: Implementing Restaurant Class with POST Request in Dart
DESCRIPTION: Full Dart implementation of a Restaurant class with methods to fetch all restaurants and create a new restaurant in a Strapi API.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;
import 'dart:convert';

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map<String,String> headers = {
    'Content-Type':'application/json',
    'Accept': 'application/json'
  };

  void all() async {
    var response = await http.get('${api_url}/restaurants', headers: headers);
    print(response.body);
  }

  void create(name, description, category) async {
    final data = jsonEncode({
      'name': name,
      'description': description,
      'categories': category
    });

    var response = await http.post(api_url, headers: headers, body: data);
  }
}

void main() {
  var restaurant = Restaurant();
  restaurant.create(
    'Dolemon Sushi',
    'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious.',
    [3]
  );
}

----------------------------------------

TITLE: Accessing Container Methods in Strapi v4 (JavaScript)
DESCRIPTION: Example of how container methods are accessed in Strapi version 4. This shows the use of the 'container' property to access register and get methods.

LANGUAGE: javascript
CODE:
strapi.container.register(....)
strapi.container.get(...)

----------------------------------------

TITLE: Removing a Cron Job in Strapi
DESCRIPTION: This snippet shows how to remove a previously added cron job using the strapi.cron.remove() function. It requires the key of the cron job to be removed.

LANGUAGE: javascript
CODE:
strapi.cron.remove("myJob");

----------------------------------------

TITLE: Bypassing Strapi Transfer Prompts
DESCRIPTION: CLI command to bypass all prompts during the Strapi transfer process using the --force flag and specifying the transfer token.

LANGUAGE: bash
CODE:
yarn strapi transfer --to https://example.com/admin --to-token my-transfer-token --force

LANGUAGE: bash
CODE:
npm run strapi transfer -- --to https://example.com/admin --to-token my-transfer-token --force

----------------------------------------

TITLE: Converting update API Call in Strapi
DESCRIPTION: Demonstrates how to migrate the update method for modifying existing documents.

LANGUAGE: tsx
CODE:
strapi.documents(uid).update({
  documentId: "__TODO__",
  data: {
    name: "John Doe",
    age: 30,
  }
});

----------------------------------------

TITLE: Creating Component with Entity Service in Strapi
DESCRIPTION: Creates a new component while creating an entry using Strapi's Entity Service API. The component is defined within the data object with its properties.

LANGUAGE: javascript
CODE:
strapi.entityService.create('api::article.article', {
  data: {
    myComponent: {
      foo: 'bar',
    },
  },
});

----------------------------------------

TITLE: Adding Session Middleware to Strapi Configuration
DESCRIPTION: Add the 'strapi::session' middleware to the array in the ./config/middlewares.js file. This is required for the login provider feature and password protection in the Documentation plugin.

LANGUAGE: javascript
CODE:
module.exports = [
  'strapi::errors',
  'strapi::security',
  'strapi::cors',
  'strapi::poweredBy',
  'strapi::logger',
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];

----------------------------------------

TITLE: Installing Test Dependencies for Strapi
DESCRIPTION: Install Jest, Supertest, and SQLite3 as dev dependencies for testing a Strapi application.

LANGUAGE: bash
CODE:
yarn add --dev jest supertest sqlite3

LANGUAGE: bash
CODE:
npm install jest supertest sqlite3 --save-dev

----------------------------------------

TITLE: Pushing Data to Remote Strapi Instance
DESCRIPTION: CLI command to initiate a data transfer from a local Strapi instance to a remote instance using yarn or npm.

LANGUAGE: bash
CODE:
yarn strapi transfer --to destinationURL

LANGUAGE: bash
CODE:
npm run strapi transfer -- --to destinationURL

----------------------------------------

TITLE: Using useRBAC Hook in Strapi v4 (TSX)
DESCRIPTION: This example shows how to use the useRBAC hook in Strapi v4 to check for allowed actions.

LANGUAGE: tsx
CODE:
const { allowedActions } = useRBAC({
	main: [{ action: 'admin::something.main', subject: null }]
})

const canMain = allowedActions.canMain

----------------------------------------

TITLE: Create Document Response Example in JSON
DESCRIPTION: Example JSON response for a POST request to create a new document. Demonstrates the structure of the created document response, including the automatically generated documentId.

LANGUAGE: json
CODE:
{
  "data": {
    "documentId": "bw64dnu97i56nq85106yt4du",
    "Name": "Restaurant D",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ],
    "createdAt": "2024-03-05T16:44:47.689Z",
    "updatedAt": "2024-03-05T16:44:47.689Z",
    "publishedAt": "2024-03-05T16:44:47.687Z",
    "locale": "en"
  },
  "meta": {}
}

----------------------------------------

TITLE: Using findMany() in Strapi v5
DESCRIPTION: Example of using the Document Service API's findMany() method for pagination in Strapi v5, which replaces the deprecated findPage() method.

LANGUAGE: jsx
CODE:
strapi.documents("api::article.article").findMany({
  limit: 10,
  start: 0,
});

----------------------------------------

TITLE: Data Import Excluding Files with Yarn
DESCRIPTION: Shows how to import data while excluding specific file assets using Yarn.

LANGUAGE: bash
CODE:
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files

----------------------------------------

TITLE: Implementing Nested Transactions in Strapi
DESCRIPTION: Shows how to create nested transactions within Strapi. Inner transactions implicitly use the outer transaction and are committed or rolled back with it.

LANGUAGE: javascript
CODE:
await strapi.db.transaction(async () => {
  // It will implicitly use the transaction
  await strapi.entityService.create();

  // Nested transactions will implicitly use the outer transaction
  await strapi.db.transaction(async ({}) => {
    await strapi.entityService.create();
  });
});

----------------------------------------

TITLE: Creating Custom Email Provider in JavaScript
DESCRIPTION: Template for creating a custom email provider in JavaScript, including the init function and send method.

LANGUAGE: javascript
CODE:
module.exports = {
  init: (providerOptions = {}, settings = {}) => {
    return {
      send: async options => {},
    };
  },
};

----------------------------------------

TITLE: Finding Strapi Version via CLI
DESCRIPTION: Commands to check the current Strapi version number using either yarn or npm from the project directory

LANGUAGE: bash
CODE:
yarn strapi version

LANGUAGE: bash
CODE:
npm run strapi version

----------------------------------------

TITLE: Disabling Strapi Telemetry Using Yarn
DESCRIPTION: Command to disable Strapi's telemetry data collection using Yarn package manager.

LANGUAGE: sh
CODE:
yarn strapi telemetry:disable

----------------------------------------

TITLE: Basic Data Import with NPM
DESCRIPTION: Demonstrates the minimum command required to import data from a file in the Strapi project root using NPM.

LANGUAGE: bash
CODE:
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc

----------------------------------------

TITLE: Fetching Localized Content with GraphQL
DESCRIPTION: Example of how to fetch all documents in a specific locale using GraphQL. The locale argument is passed to the query to specify the desired language.

LANGUAGE: graphql
CODE:
query {
  restaurants(locale: "fr") {
    documentId
    name
    locale
  }
}

----------------------------------------

TITLE: Configuring Email Provider in JavaScript
DESCRIPTION: Example configuration for Sendgrid email provider in the plugins.js file, including provider options and settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'sendgrid', // For community providers pass the full package name (e.g. provider: 'strapi-provider-email-mandrill')
      providerOptions: {
        apiKey: env('SENDGRID_API_KEY'),
      },
      settings: {
        defaultFrom: 'juliasedefdjian@strapi.io',
        defaultReplyTo: 'juliasedefdjian@strapi.io',
        testAddress: 'juliasedefdjian@strapi.io',
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Upgrading Strapi Major Version
DESCRIPTION: Command to upgrade Strapi to the next major version. Requires being on the latest minor/patch version of current major version first.

LANGUAGE: bash
CODE:
npx @strapi/upgrade major

----------------------------------------

TITLE: Configuring Upload Provider in JavaScript
DESCRIPTION: Example configuration for AWS S3 upload provider in the plugins.js file, including provider options and action options.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'aws-s3',
      providerOptions: {
        baseUrl: env('CDN_URL'),
        rootPath: env('CDN_ROOT_PATH'),
        s3Options: {
          credentials: {
            accessKeyId: env('AWS_ACCESS_KEY_ID'),
            secretAccessKey: env('AWS_ACCESS_SECRET'),
          },
          region: env('AWS_REGION'),
          params: {
            ACL: env('AWS_ACL', 'public-read'),
            signedUrlExpires: env('AWS_SIGNED_URL_EXPIRES', 15 * 60),
            Bucket: env('AWS_BUCKET'),
          },
        },
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Example Migration File Using Strapi Instance in JavaScript
DESCRIPTION: Shows how to use the Strapi instance for migrations, including creating new entries and using custom service methods. It emphasizes the importance of wrapping the code with strapi.db.transaction().

LANGUAGE: javascript
CODE:
module.exports = {
  async up() {
    await strapi.db.transaction(async () => {
      // Your migration code here

      // Example: creating new entries
      await strapi.documents('api::article.article').create({
        data: {
          title: 'My Article',
        },
      });

      // Example: custom service method
      await strapi.service('api::article.article').updateRelatedArticles();
    });
  },
};

----------------------------------------

TITLE: Error Handling in Controllers and Middlewares
DESCRIPTION: Examples of throwing errors in Strapi controllers and middlewares using the context object's error functions.

LANGUAGE: javascript
CODE:
module.exports = {
  renameDog: async (ctx, next) => {
    const newName = ctx.request.body.name;
    if (!newName) {
      return ctx.badRequest('name is missing', { foo: 'bar' })
    }
    ctx.body = strapi.service('api::dog.dog').rename(newName);
  }
}

LANGUAGE: typescript
CODE:
export default {
  renameDog: async (ctx, next) => {
    const newName = ctx.request.body.name;
    if (!newName) {
      return ctx.badRequest('name is missing', { foo: 'bar' })
    }
    ctx.body = strapi.service('api::dog.dog').rename(newName);
  }
}

----------------------------------------

TITLE: Upgrading Strapi Patch Version
DESCRIPTION: Command to upgrade to the latest patch version within the current minor and major version of Strapi.

LANGUAGE: bash
CODE:
npx @strapi/upgrade patch

----------------------------------------

TITLE: Deploying Strapi Project to Cloud
DESCRIPTION: Commands to deploy a Strapi project to Strapi Cloud using either Yarn or NPM.

LANGUAGE: bash
CODE:
yarn strapi deploy

LANGUAGE: bash
CODE:
npm run strapi deploy

----------------------------------------

TITLE: Implementing Private AWS S3 Provider in TypeScript
DESCRIPTION: Example of creating a private AWS S3 provider in TypeScript with isPrivate and getSignedUrl methods for secure asset access.

LANGUAGE: typescript
CODE:
// aws-s3 provider

export = {
  init: (config) => {
    const s3 = new AWS.S3(config);

    return {
      async upload(file) {
        // code to upload file to S3
      },

      async delete(file) {
        // code to delete file from S3
      },

      async isPrivate() {
        return true;
      },

      async getSignedUrl(file) {
        const params = {
          Bucket: config.params.Bucket,
          Key: file.path,
          Expires: 60, // URL expiration time in seconds
        };

        const signedUrl = await s3.getSignedUrlPromise("getObject", params);
        return { url: signedUrl };
      },
    };
  },
};

----------------------------------------

TITLE: Importing Data into Strapi Project
DESCRIPTION: Command to import data into a Strapi project, with options for specifying the file and encryption key.

LANGUAGE: bash
CODE:
yarn strapi import
npm run strapi import
options: [-k <key> | -f <file> | --force | --exclude <types> | --only <types>]

----------------------------------------

TITLE: Basic SSO Auth Configuration
DESCRIPTION: Base configuration structure for setting up SSO authentication providers in Strapi admin panel

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  auth: {
    providers: [], // The providers' configuration lives there
  },
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  auth: {
    providers: [], // The providers' configuration lives there
  },
});

----------------------------------------

TITLE: Updating Locales in Strapi Admin Panel (JavaScript)
DESCRIPTION: Example of how to update the list of available locales in the Strapi admin panel using JavaScript.

LANGUAGE: javascript
CODE:
export default {
  config: {
    locales: ["ru", "zh"],
  },
  bootstrap() {},
};

----------------------------------------

TITLE: Building Strapi Plugin for Publishing
DESCRIPTION: Bundles the Strapi plugin for publishing. Options include force mode, debug mode, silent mode, minification, and sourcemap generation.

LANGUAGE: bash
CODE:
strapi-plugin build

----------------------------------------

TITLE: Creating Review Form Component in React
DESCRIPTION: A React component that creates a form for submitting restaurant reviews, handling form submission and API calls to Strapi's REST endpoint

LANGUAGE: jsx
CODE:
import { Button, Input, Textarea } from '@nextui-org/react';
import { useFormik } from 'formik';
import { useRouter } from 'next/router';
import React from 'react';
import { getStrapiURL } from '../../../../../utils';

const NewReview = () => {
  const router = useRouter();

  const { handleSubmit, handleChange, values } = useFormik({
    initialValues: {
      note: '',
      content: '',
    },
    onSubmit: async (values) => {
      const res = await fetch(getStrapiURL('/reviews'), {
        method: 'POST',
        body: JSON.stringify({
          restaurant: router.query.slug,
          ...values,
        }),
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
      });
    },
  });
  return (
    <div className="my-6">
      <h1 className="font-bold text-2xl mb-3">Write your review</h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
        <Input
          onChange={handleChange}
          name="note"
          type="number"
          min={1}
          max={5}
          label="Stars"
        />
        <Textarea
          name="content"
          onChange={handleChange}
          placeholder="What do you think about this restaurant?"
        />
        <Button
          type="submit"
          className="bg-primary text-white rounded-md self-start"
        >
          Send
        </Button>
      </form>
    </div>
  );
};

export default NewReview;

----------------------------------------

TITLE: Using an API-Specific Policy in Another API in Strapi
DESCRIPTION: Shows how to use the 'is-admin' policy from the restaurant API in the category API's route configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/categories',
      handler: 'Category.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['api::restaurant.is-admin']
      }
    }
  ]
}

LANGUAGE: typescript
CODE:
export default {
  routes: [
    {
      method: 'GET',
      path: '/categories',
      handler: 'Category.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.ts`
          is executed before the `find` action in the `Restaurant.js` controller.
        */
        policies: ['api::restaurant.is-admin']
      }
    }
  ]
}

----------------------------------------

TITLE: Data Import with Encryption Key using NPM
DESCRIPTION: Shows how to import encrypted data by providing an encryption key using NPM.

LANGUAGE: bash
CODE:
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --key my-encryption-key

----------------------------------------

TITLE: Creating Go File with Bash
DESCRIPTION: Command to create a new Go file for the Strapi integration

LANGUAGE: bash
CODE:
touch strapi.go

----------------------------------------

TITLE: Update Document Response Example in JSON
DESCRIPTION: Example JSON response for a PUT request to update an existing document. Shows the structure of the updated document response, including the documentId and updated fields.

LANGUAGE: json
CODE:
{
  "data": {
    "id": 9,
    "documentId": "hgv1vny5cebq2l3czil1rpb3",
    "Name": "BMK Paris Bamako",
    "Description": [
      {
        "type": "paragraph",
        "children": [
          {
            "type": "text",
            "text": "A very short description goes here."
          }
        ]
      }
    ],
    "createdAt": "2024-03-06T13:42:05.098Z",
    "updatedAt": "2024-03-06T14:16:56.883Z",
    "publishedAt": "2024-03-06T14:16:56.895Z",
    "locale": "en"
  },
  "meta": {}
}

----------------------------------------

TITLE: Google Sheets Utility Functions Implementation in JavaScript
DESCRIPTION: Utility functions for reading, writing and updating Google spreadsheets using the Google Sheets API. Includes authentication setup and methods for spreadsheet manipulation.

LANGUAGE: javascript
CODE:
const { google } = require('googleapis');

const createGoogleSheetClient = async ({
  keyFile,
  sheetId,
  tabName,
  range,
}) => {
  async function getGoogleSheetClient() {
    const auth = new google.auth.GoogleAuth({
      keyFile,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    const authClient = await auth.getClient();
    return google.sheets({
      version: 'v4',
      auth: authClient,
    });
  }

  const googleSheetClient = await getGoogleSheetClient();

  const writeGoogleSheet = async (data) => {
    googleSheetClient.spreadsheets.values.append({
      spreadsheetId: sheetId,
      range: `${tabName}!${range}`,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        majorDimension: 'ROWS',
        values: data,
      },
    });
  };

  const updateoogleSheet = async (cell, data) => {
    googleSheetClient.spreadsheets.values.update({
      spreadsheetId: sheetId,
      range: `${tabName}!${cell}`,
      valueInputOption: 'USER_ENTERED',
      resource: {
        majorDimension: 'ROWS',
        values: data,
      },
    });
  };

  const readGoogleSheet = async () => {
    const res = await googleSheetClient.spreadsheets.values.get({
      spreadsheetId: sheetId,
      range: `${tabName}!${range}`,
    });

    return res.data.values;
  };

  return {
    writeGoogleSheet,
    updateoogleSheet,
    readGoogleSheet,
  };
};

module.exports = {
  createGoogleSheetClient,
};

----------------------------------------

TITLE: Applying an API-Specific Policy to a Route in Strapi
DESCRIPTION: Demonstrates how to apply the 'is-admin' policy from the restaurant API to a GET route for retrieving restaurants.

LANGUAGE: javascript
CODE:
module.exports = {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.js` controller.
         */
        policies: ['is-admin']
      }
    }
  ]
}

LANGUAGE: typescript
CODE:
export default {
  routes: [
    {
      method: 'GET',
      path: '/restaurants',
      handler: 'Restaurant.find',
      config: {
        /**
          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`
          is executed before the `find` action in the `Restaurant.ts` controller.
         */
        policies: ['is-admin']
      }
    }
  ]
}

----------------------------------------

TITLE: Forced Data Import with Yarn
DESCRIPTION: Demonstrates how to bypass confirmation prompts during import using the --force flag with Yarn.

LANGUAGE: bash
CODE:
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key

----------------------------------------

TITLE: Adjusting SQLite Database Configuration for TypeScript in Strapi
DESCRIPTION: This snippet demonstrates how to modify the database.ts configuration file for SQLite databases when adding TypeScript support. It adds an additional '..' to the filename property.

LANGUAGE: javascript
CODE:
const path = require('path');

module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: path.join(
        __dirname,
        "..",
        "..",
        env("DATABASE_FILENAME", ".tmp/data.db")
      ),
    },
    useNullAsDefault: true,
  },
});

----------------------------------------

TITLE: Generate Content-Type Using NPM
DESCRIPTION: Command to generate a new content-type using Strapi CLI with NPM package manager

LANGUAGE: bash
CODE:
npm run strapi generate content-type

----------------------------------------

TITLE: Adding API-level Middleware to Routes in Strapi
DESCRIPTION: Example of how to add API-level or plugin middlewares to specific routes in Strapi. This code snippet shows how to configure a middleware for a GET request to a collection.

LANGUAGE: javascript
CODE:
module.exports = {
  routes: [
    {
      method: "GET",
      path: "/[collection-name]",
      handler: "[controller].find",
      config: {
        middlewares: ["[middleware-name]"],
      },
    },
  ],
};

----------------------------------------

TITLE: Data Import Excluding Files with NPM
DESCRIPTION: Shows how to import data while excluding specific file assets using NPM.

LANGUAGE: bash
CODE:
npm strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --exclude files

----------------------------------------

TITLE: Configuring Security Middleware for Cloudinary (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure the Strapi security middleware to allow content from Cloudinary. It modifies the Content Security Policy settings in the middleware.js file.

LANGUAGE: javascript
CODE:
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'", 
            'data:', 
            'blob:', 
            'market-assets.strapi.io', 
            'res.cloudinary.com'
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'res.cloudinary.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];

----------------------------------------

TITLE: Installing Axios in Vue.js Project
DESCRIPTION: Command to add Axios HTTP client to a Vue.js project using Yarn.

LANGUAGE: bash
CODE:
yarn add axios

----------------------------------------

TITLE: Creating Nuxt 3 Application
DESCRIPTION: Initialize a new Nuxt 3 application using npx package runner.

LANGUAGE: bash
CODE:
npx nuxi init nuxt-app

----------------------------------------

TITLE: Configuring Core Router in Strapi (TypeScript)
DESCRIPTION: Example of configuring a core router in Strapi using TypeScript. It shows how to use the createCoreRouter function from @strapi/strapi factories to set up routes with custom configurations.

LANGUAGE: typescript
CODE:
import { factories } from '@strapi/strapi'; 

export default factories.createCoreRouter('api::restaurant.restaurant', {
  prefix: '',
  only: ['find', 'findOne'],
  except: [],
  config: {
    find: {
      auth: false,
      policies: [],
      middlewares: [],
    },
    findOne: {},
    create: {},
    update: {},
    delete: {},
  },
});

----------------------------------------

TITLE: Import Only Configuration with Yarn
DESCRIPTION: Demonstrates how to import only the project configuration using Yarn.

LANGUAGE: bash
CODE:
yarn strapi import -f /path/to/my/file/export_20221213105643.tar.gz.enc --only config

----------------------------------------

TITLE: Installing Upgraded Strapi with npm
DESCRIPTION: This snippet demonstrates how to install an upgraded version of Strapi using npm. It involves running the 'npm install' command in the project directory.

LANGUAGE: bash
CODE:
npm install

----------------------------------------

TITLE: Creating a Restaurant Form in Svelte with Axios
DESCRIPTION: Svelte component that creates a form for adding a new restaurant. It fetches categories from the API and submits the form data using Axios.

LANGUAGE: javascript
CODE:
<script>
import { onMount } from 'svelte';
import axios from 'axios'

let allCategories = [];
let restaurantName = "";
let restaurantDescription = "";
let restaurantCategories = [];
let error = null;

async function handleSubmit() {
	try {
		const response = await axios.post('http://localhost:1337/api/restaurants', {
			name: restaurantName,
			description: restaurantDescription,
			categories: restaurantCategories
		});
		console.log(response);
	} catch(e) {
		error = e
	}
}

onMount(async () => {
	try {
		const response = await axios.get('http://localhost:1337/api/categories');
		allCategories = response.data
	} catch(e) {
		error = e
	}
});

</script>

{#if error !== null}
  {error}
{:else}
	<label for="name">Name</label>
	<input id="name" bind:value={restaurantName} type="text" name="name">

	<label for="description">Description</label>
	<input id="description" bind:value={restaurantDescription} type="text" name="description">

	<div>
		<br />
		Select categories
		<br />
		{#each allCategories as category}
			<label>{ category.name }</label>
		  <input type="checkbox" bind:group={restaurantCategories} value={category} />
		{/each}
	</div>

	<input type="submit" value="Submit" on:click={handleSubmit} />
{/if}

----------------------------------------

TITLE: Creating a Vue.js App with Vue CLI
DESCRIPTION: Command to create a basic Vue.js application using Vue CLI.

LANGUAGE: bash
CODE:
vue create vue-app

----------------------------------------

TITLE: Exporting Strapi Data with Custom Filename (npm)
DESCRIPTION: This command exports Strapi data with a custom filename using npm. It shows how to use the '--file' option with npm to specify the output filename.

LANGUAGE: bash
CODE:
npm run strapi export -- --file my-strapi-export

----------------------------------------

TITLE: Forced Data Import with NPM
DESCRIPTION: Demonstrates how to bypass confirmation prompts during import using the --force flag with NPM.

LANGUAGE: bash
CODE:
npm run strapi import -- -f /path/to/my/file/export_20221213105643.tar.gz.enc --force --key my-encryption-key

----------------------------------------

TITLE: POST Request to Strapi API using Axios
DESCRIPTION: Make a POST request to create a new restaurant in the Strapi API using Axios. This example includes the restaurant name, description, and category.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .post('http://localhost:1337/api/restaurants', {
    name: 'Dolemon Sushi',
    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
    categories: [3],
  })
  .then(response => {
    console.log(response);
  });

----------------------------------------

TITLE: Installing GraphQL Plugin for Strapi
DESCRIPTION: Commands to install the GraphQL plugin in a Strapi project using either yarn or npm package managers.

LANGUAGE: bash
CODE:
yarn strapi install graphql

LANGUAGE: bash
CODE:
npm run strapi install graphql

----------------------------------------

TITLE: Extending Plugin Content-Type in JavaScript/TypeScript
DESCRIPTION: Shows how to extend a Strapi plugin's content-type by modifying attributes within the register function in the project's index.js|ts file.

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  
    contentTypeName.attributes = {
      // Spread previous defined attributes
      ...contentTypeName.attributes,
      // Add new, or override attributes
      'toto': {
        type: 'string',
      }
    }
  },
  bootstrap({ strapi }) {},
};

----------------------------------------

TITLE: Exporting Strapi Data Without Encryption (npm)
DESCRIPTION: This command exports Strapi data without encryption using npm. It shows how to use the '--no-encrypt' option with npm to disable data encryption.

LANGUAGE: bash
CODE:
npm run strapi export -- --no-encrypt

----------------------------------------

TITLE: Generating Content-Type Types with CLI
DESCRIPTION: CLI commands for generating TypeScript type definitions for Strapi content-types using npm or yarn.

LANGUAGE: shell
CODE:
npm run strapi ts:generate-types --debug

LANGUAGE: shell
CODE:
yarn strapi ts:generate-types --debug

----------------------------------------

TITLE: Complete Restaurant Class with All HTTP Methods
DESCRIPTION: Full Restaurant class implementation with GET, POST, and PUT functionality

LANGUAGE: ruby
CODE:
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def initialize
    @options = {
      header: { 'Content-Type': 'application/json' },
      query: { 'populate': 'categories' }
    }
  end

  def all
    self.class.get('/restaurants')
  end

  def create(params)
    @options[:body] = {
      data: {
        name: params[:name],
        description: params[:description],
        categories: params[:categories]
      }
    }

    self.class.post('/restaurants', @options)
  end

  def update(id, params)
    @options[:body] = {
      data: {
        categories: params[:categories]
      }
    }
    self.class.put("/restaurants/#{id}", @options)
  end
end

restaurant = Restaurant.new
puts restaurant.update(16, { categories: [2] })

----------------------------------------

TITLE: Fetching Restaurants in React with Apollo Client
DESCRIPTION: React component using Apollo Client to fetch and display a list of restaurants from the Strapi GraphQL API.

LANGUAGE: javascript
CODE:
import { gql, useQuery } from '@apollo/client';

function Restaurants() {
  const { loading, error, data } = useQuery(gql`
    query Restaurants {
      restaurants {
        id
        name
        description
        categories {
          name
        }
      }
    }
  `);

  if (loading) return 'Loading...';
  if (error) return `Error! ${error.message}`;

  return (
    <ul>
      {data.restaurants.map(restaurant => (
        <li key={restaurant.id}>{restaurant.name}</li>
      ))}
    </ul>
  );
}

----------------------------------------

TITLE: Configuring Sentry Plugin in JavaScript
DESCRIPTION: JavaScript configuration for the Sentry plugin in Strapi, including DSN and metadata settings.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // ...
  sentry: {
    enabled: true,
    config: {
      dsn: env('SENTRY_DSN'),
      sendMetadata: true,
    },
  },
  // ...
});

----------------------------------------

TITLE: Exporting Strapi Data Without Compression (Yarn)
DESCRIPTION: This command exports Strapi data without compression using Yarn. It demonstrates the use of the '--no-compress' option to disable data compression.

LANGUAGE: bash
CODE:
yarn strapi export --no-compress

----------------------------------------

TITLE: Population with Field Selection Query
DESCRIPTION: Demonstrates how to combine populate and fields parameters to fetch specific fields and related data using the qs library.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify(
  {
    fields: ['title', 'slug'],
    populate: {
      headerImage: {
        fields: ['name', 'url'],
      },
    },
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/articles?${query}`);

----------------------------------------

TITLE: PUT Request Implementation
DESCRIPTION: PUT request to update restaurant categories

LANGUAGE: ruby
CODE:
HTTParty.put(
  'http://localhost:1337/api/restaurants/2',
  body: {
    data: {
      categories: [2]
    }
  },
  header: {
    'Content-Type': 'application/json'
  },
  query: {
    'populate': 'categories'
  }
)

----------------------------------------

TITLE: Making Strapi API Requests with Laravel HTTP Client
DESCRIPTION: Examples of making GraphQL and REST API requests to Strapi using the configured macro in Laravel.

LANGUAGE: php
CODE:
# Access to GraphQL
$response = Http::strapi()->post('graphql', ['query' => $gqlQuery, 'variables' => $variables]); 
#Tip you might include a .gql file here using $gqlQuery = include('gqlQuery.gql')

# Access to Api Rest
$response = Http::strapi()->get('api/pages');

----------------------------------------

TITLE: Custom Provider Registration
DESCRIPTION: Example of adding a custom authentication provider to the Users & Permissions plugin

LANGUAGE: javascript
CODE:
module.exports = {
  register({ strapi }) {
    strapi
      .plugin("users-permissions")
      .service("providers-registry")
      .add("example-provider-name", {
        icon: "",
        enabled: true,
        grantConfig: {
          key: "",
          secret: "",
          callback: `${strapi.config.server.url}/auth/example-provider-name/callback`,
          scope: ["email"],
          authorize_url: "https://awesome.com/authorize",
          access_url: "https://awesome.com/token",
          oauth: 2,
        },
        async authCallback({ accessToken, providers, purest }) {
          return {
            username: "test",
            email: "test",
          };
        },
      });
  },
};

----------------------------------------

TITLE: Exporting Strapi Data Without Compression (npm)
DESCRIPTION: This command exports Strapi data without compression using npm. It shows how to use the '--no-compress' option with npm to disable data compression.

LANGUAGE: bash
CODE:
npm run strapi export -- --no-compress

----------------------------------------

TITLE: Authentication Implementation with JWT
DESCRIPTION: PHP implementation for authenticating with Strapi and obtaining JWT token

LANGUAGE: php
CODE:
<?php
function strapi_auth_curl($url, $auth){
    $curl = curl_init();
    curl_setopt_array($curl, array(
        CURLOPT_URL => $url.'/auth/local',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_POSTFIELDS =>json_encode($auth),
        CURLOPT_HTTPHEADER => array(
            'Content-Type: application/json'
        ),
    ));
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
}

----------------------------------------

TITLE: Complete GET Request Class Implementation
DESCRIPTION: Full Restaurant class implementation with GET request functionality

LANGUAGE: ruby
CODE:
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def all
    self.class.get('/restaurants')
  end
end

restaurant = Restaurant.new
puts restaurant.all

----------------------------------------

TITLE: Installing Laravel-Strapi Package
DESCRIPTION: Command to install the Laravel-Strapi package using Composer.

LANGUAGE: bash
CODE:
composer require dbfx/laravel-strapi

----------------------------------------

TITLE: Generate Content-Type Using Yarn
DESCRIPTION: Command to generate a new content-type using Strapi CLI with Yarn package manager

LANGUAGE: bash
CODE:
yarn strapi generate content-type

----------------------------------------

TITLE: Exporting Only Entities and Relations (Yarn)
DESCRIPTION: This command exports only the content (entities and relations) from Strapi using Yarn. It demonstrates the use of the '--only' option to specify which data types to export.

LANGUAGE: bash
CODE:
yarn strapi export --only content

----------------------------------------

TITLE: Fetching Single Item from Strapi Collection in Laravel
DESCRIPTION: Example of fetching a single item from a Strapi collection by ID using the Laravel-Strapi package.

LANGUAGE: php
CODE:
$strapi = new Dbfx\LaravelStrapi();
$entry = $strapi->entry('restaurants', $id = 5);

----------------------------------------

TITLE: Basic GET Request Implementation
DESCRIPTION: Simple GET request to fetch restaurants from Strapi API

LANGUAGE: ruby
CODE:
HTTParty.get('http://localhost:1337/api/restaurants/')

----------------------------------------

TITLE: Advanced Strapi Collection Fetching in Laravel
DESCRIPTION: Example of fetching a Strapi collection with additional parameters like sorting, limit, and offset.

LANGUAGE: php
CODE:
$restaurants = $strapi->collection('restaurants', $sortKey = 'id', $sortOrder = 'DESC', $limit = 20, $start = 0, $fullUrls = true);

----------------------------------------

TITLE: Validate and Sanitize Methods Migration in Strapi 5
DESCRIPTION: Demonstration of how validate and sanitize methods have been moved to become part of strapi.contentAPI functions, requiring the Strapi app context.

LANGUAGE: javascript
CODE:
// Strapi v4
import { validate, sanitize } from '@strapi/utils';

validate.contentAPI.xxx();
sanitize.contentAPI.xxx();

// Strapi 5
// Those methods require the strapi app context
strapi.contentAPI.sanitize.xxx();
strapi.contentAPI.validate.xxx();

----------------------------------------

TITLE: Exporting Only Entities and Relations (npm)
DESCRIPTION: This command exports only the content (entities and relations) from Strapi using npm. It shows how to use the '--only' option with npm to specify which data types to export.

LANGUAGE: bash
CODE:
npm run strapi export -- --only content

----------------------------------------

TITLE: Configuring Strapi Environment Variables in Laravel
DESCRIPTION: Example of setting Strapi URL and cache time in Laravel's .env file.

LANGUAGE: json
CODE:
STRAPI_URL=http://localhost:1337
STRAPI_CACHE_TIME=3600

----------------------------------------

TITLE: Configuring Gemfile Dependencies
DESCRIPTION: Gemfile configuration to include HTTParty dependency

LANGUAGE: ruby
CODE:
source "https://rubygems.org"

gem "httparty"

----------------------------------------

TITLE: POST Request Implementation in Go
DESCRIPTION: Implementation of a POST request to create a new restaurant in Strapi. Includes JSON encoding of request body and response handling.

LANGUAGE: go
CODE:
package main

import (
  "bytes"
  "encoding/json"
  "fmt"
  "io/ioutil"
  "log"
  "net/http"
)

func main() {
  postD()
}

func getD() {
  fmt.Println("Getting data...")
  resp, error := http.Get("http://localhost:1337/api/restaurants")
  if error != nil {
    fmt.Printf("The HTTP request failed with error %s\n", error)
  } else {
    data, _ := ioutil.ReadAll(resp.Body)
    fmt.Println(string(data))
  }
}

func postD() {
  fmt.Println("Posting  data...")
  postRest, _ := json.Marshal(map[string]string{
    "name":        "Nwanyi Igbo",
    "description": "This is a very nice place to eat native soup",
  })
  responseBody := bytes.NewBuffer(postRest)
  resp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)
  if error != nil {
    log.Fatalf("An Error Occurred %v", error)
  }
  defer resp.Body.Close()
  body, error := ioutil.ReadAll(resp.Body)
  if error != nil {
    log.Fatalln(error)
  }
  fmt.Println(string(body))
}

----------------------------------------

TITLE: Converting Query Parameters Update in Strapi 5
DESCRIPTION: Example showing how query parameter conversion has changed from Strapi v4 to Strapi 5. The individual conversion methods have been made private, and the main functionality is now accessed through a strapi service.

LANGUAGE: javascript
CODE:
// Strapi v4
import { convertQueryParams } from '@strapi/utils';

convertQueryParams.convertSortQueryParams(...); // now private function to simplify the api
convertQueryParams.convertStartQueryParams(...); // now private function to simplify the api
convertQueryParams.convertLimitQueryParams(...); // now private function to simplify the api
convertQueryParams.convertPopulateQueryParams(...); // now private function to simplify the api
convertQueryParams.convertFiltersQueryParams(...); // now private function to simplify the api
convertQueryParams.convertFieldsQueryParams(...); // now private function to simplify the api
convertQueryParams.convertPublicationStateParams(...); // now private function to simplify the api

convertQueryParams.transformParamsToQuery(...); // becomes the example below

// Strapi 5 
// Those utils required the strapi app context, so we decided to expose a strapi service for it
strapi.get('query-params').transform();

----------------------------------------

TITLE: Transferring Only Specific Data Types
DESCRIPTION: CLI command to transfer only specified data types (e.g., files) using the --only option.

LANGUAGE: bash
CODE:
yarn strapi transfer --to https://example.com/admin --only files

LANGUAGE: bash
CODE:
npm run strapi transfer -- --to https://example.com/admin --only files

----------------------------------------

TITLE: Securing Webhooks with Authorization Token
DESCRIPTION: Implementation of webhook security using an authorization token in the default headers configuration.

LANGUAGE: javascript
CODE:
module.exports = {
  webhooks: {
    defaultHeaders: {
      Authorization: "Bearer my-very-secured-token",
    },
  },
};

----------------------------------------

TITLE: Creating a Python File
DESCRIPTION: Creates a new Python file named script.py using the touch command.

LANGUAGE: bash
CODE:
touch script.py

----------------------------------------

TITLE: Configuring Gatsby Strapi Plugin
DESCRIPTION: Configuration for gatsby-source-strapi plugin in gatsby-config.js to connect with Strapi API

LANGUAGE: javascript
CODE:
{
  resolve: "gatsby-source-strapi",
  options: {
    apiURL: "http://localhost:1337",
    collectionTypes: [
      "restaurant",
      "category",
    ],
    queryLimit: 1000,
  },
}

----------------------------------------

TITLE: Configuring Server Log Level in Strapi 5 JavaScript Configuration
DESCRIPTION: This snippet shows how to configure the server log level in Strapi 5's server configuration file. The log level can be set to various values such as 'silly', 'debug', 'info', 'warn', or 'error'.

LANGUAGE: javascript
CODE:
{ logger: { config: { level: 'debug' } } }

----------------------------------------

TITLE: Excluding Data Types from Transfer
DESCRIPTION: CLI command to exclude specific data types (e.g., files) from the transfer process using the --exclude option.

LANGUAGE: bash
CODE:
yarn strapi transfer --to https://example.com/admin --exclude files

LANGUAGE: bash
CODE:
npm run strapi transfer -- --to https://example.com/admin --exclude files

----------------------------------------

TITLE: Setting Cache-Control Header in TypeScript for Strapi Cloud
DESCRIPTION: This snippet shows how to set a Cache-Control header in a TypeScript HTTP response function to enable caching for 1 day (86400 seconds) in Strapi Cloud applications, using typed Request and Response objects from Express.

LANGUAGE: typescript
CODE:
import { Request, Response } from 'express';

function myHandler(req: Request, res: Response) {
  // Set the Cache-Control header to cache responses for 1 day
  res.setHeader('Cache-Control', 'max-age=86400');
  
  // Add your logic to generate the response here
}

----------------------------------------

TITLE: Creating PHP File for Strapi Integration
DESCRIPTION: Basic setup to create a PHP file for Strapi integration

LANGUAGE: bash
CODE:
touch strapi.php

----------------------------------------

TITLE: Gatsby Node API Configuration
DESCRIPTION: Configuration in gatsby-node.js to programmatically create pages for each category

LANGUAGE: javascript
CODE:
exports.createPages = async ({ graphql, actions }) => {
  const { createPage } = actions;
  const result = await graphql(
    `
      {
        categories: allStrapiCategory {
          edges {
            node {
              name
            }
          }
        }
      }
    `
  );

  if (result.errors) {
    throw result.errors;
  }

  // Create blog articles pages.
  const categories = result.data.categories.edges;

  const CategoryTemplate = require.resolve('./src/templates/category.js');

  categories.forEach((category, index) => {
    createPage({
      path: `/category/${category.node.name}`,
      component: CategoryTemplate,
      context: {
        name: category.node.name,
      },
    });
  });
};

----------------------------------------

TITLE: Updating Server Configuration in TypeScript for Strapi 5
DESCRIPTION: This snippet demonstrates how to update the /config/server.ts file in Strapi 5 to replace previously used environment variables with new server configuration options using TypeScript.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  // … other configuration options
  transfer: {
    remote: {
      enabled: false, // disable remote data transfers instead of STRAPI_DISABLE_REMOTE_DATA_TRANSFER
    },
  },
  logger: {
    updates: {
      enabled: false, // disable update notification logging instead of STRAPI_DISABLE_UPDATE_NOTIFICATION
    },
    startup: {
      enabled: false, // disable startup message instead of STRAPI_HIDE_STARTUP_MESSAGE
    },
  },
});

----------------------------------------

TITLE: Creating a Strapi Project with Yarn
DESCRIPTION: Command to create a new Strapi project using Yarn. Note that Yarn does not support passing the version tag.

LANGUAGE: bash
CODE:
yarn create strapi

----------------------------------------

TITLE: Accessing Configuration Values
DESCRIPTION: Demonstrates how to access configuration values using the strapi.config.get method with dot notation and default values.

LANGUAGE: javascript
CODE:
strapi.config.get('server.host', 'defaultValueIfUndefined');

----------------------------------------

TITLE: Fetching Strapi Collection Type in Laravel
DESCRIPTION: Example of using the Laravel-Strapi package to fetch a collection type (restaurants) from Strapi.

LANGUAGE: php
CODE:
$strapi = new Dbfx\LaravelStrapi();
$restaurants = $strapi->collection('restaurants');

----------------------------------------

TITLE: GraphQL Query for Fetching Restaurants from Strapi
DESCRIPTION: GraphQL query to fetch all restaurants from Strapi, including their id, name, and description.

LANGUAGE: graphql
CODE:
query {
  allStrapiRestaurant {
    edges {
      node {
        id
        name
        description
      }
    }
  }
}

----------------------------------------

TITLE: Strapi 5 Redux Payload Format
DESCRIPTION: Example of the new flattened payload structure for SET_INIT_DATA action in Strapi 5, where attributes are no longer nested within a data object.

LANGUAGE: json
CODE:
{
  authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];
  authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];
  components: ContentManagerAppState['components'];
  contentTypeSchemas: ContentManagerAppState['models'];
  fieldSizes: ContentManagerAppState['fieldSizes'];
}

----------------------------------------

TITLE: Running Strapi in Development Mode with Yarn
DESCRIPTION: Command to start the Strapi application in development mode using Yarn package manager.

LANGUAGE: bash
CODE:
yarn develop

----------------------------------------

TITLE: Individual Content-Type Export
DESCRIPTION: Configuration for exporting an individual content-type schema

LANGUAGE: javascript
CODE:
'use strict';

const schema = require('./schema');

module.exports = {
  schema,
};

----------------------------------------

TITLE: Creating a layout for individual category pages
DESCRIPTION: HTML and Liquid template for displaying individual category pages with associated restaurants in Jekyll.

LANGUAGE: html
CODE:
<h1>{{ page.document.name }}</h1>
<ul>
  {%- for restaurant in page.document.restaurants -%}
  <li>
    {{ restaurant.name }}
  </li>
  {%- endfor -%}
</ul>

----------------------------------------

TITLE: Generating Pages for Categories in Gridsome
DESCRIPTION: Server-side code to generate pages for each category fetched from Strapi.

LANGUAGE: javascript
CODE:
module.exports = function(api) {
  api.createPages(async ({ graphql, createPage }) => {
    const { data } = await graphql(`
      {
        allStrapiCategory {
          edges {
            node {
              id
              name
            }
          }
        }
      }
    `);

    const categories = data.allStrapiCategory.edges;

    categories.forEach(category => {
      createPage({
        path: `/categories/${category.node.id}`,
        component: './src/templates/Category.vue',
        context: {
          id: category.node.id,
        },
      });
    });
  });
};

----------------------------------------

TITLE: Installing SQLite Dependencies for Strapi 5
DESCRIPTION: Terminal commands to remove sqlite3 package and install better-sqlite3 package for Strapi 5 compatibility.

LANGUAGE: bash
CODE:
yarn remove sqlite3

LANGUAGE: bash
CODE:
yarn add better-sqlite3

----------------------------------------

TITLE: Production Dockerfile for Strapi
DESCRIPTION: Multi-stage production Dockerfile for Strapi applications, optimized for production deployment with minimal image size and security considerations.

LANGUAGE: dockerfile
CODE:
FROM node:18-alpine as build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ENV NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json yarn.lock ./
RUN yarn global add node-gyp
RUN yarn config set network-timeout 600000 -g && yarn install --production
ENV PATH=/opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN yarn build

FROM node:18-alpine
RUN apk add --no-cache vips-dev
ENV NODE_ENV=production
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH=/opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["yarn", "start"]

----------------------------------------

TITLE: Installing Strapi Module
DESCRIPTION: Install and configure @nuxtjs/strapi module in Nuxt application.

LANGUAGE: bash
CODE:
yarn add --dev @nuxtjs/strapi

LANGUAGE: javascript
CODE:
modules: ['@nuxtjs/strapi'],
strapi: {
  url: 'http://localhost:1337'
},

----------------------------------------

TITLE: Fetching and displaying categories with restaurants in Jekyll layout
DESCRIPTION: HTML and Liquid template to fetch and display categories with associated restaurants from Strapi in a Jekyll layout.

LANGUAGE: html
CODE:
---
layout: default
---

<div class="home">
    {%- if strapi.collections.categories[0].restaurants.size > 0 -%}
    <h1 class="page-heading">{{ strapi.collections.categories[0].name }}</h1>
    <ul>
        {%- for restaurant in strapi.collections.categories[0].restaurants -%}
        <li>
            {{ restaurant.name }}
        </li>
        {%- endfor -%}
    </ul>
    {%- endif -%}
</div>

----------------------------------------

TITLE: Vue Template for Category Page
DESCRIPTION: Vue template file for displaying individual category pages with associated restaurants.

LANGUAGE: vue
CODE:
<template>
  <Layout>
    <div>
      <h1>{{ $page.category.name }}</h1>
      <ul>
        <li v-for="restaurant in $page.category.restaurants">{{ restaurant.name }}</li>
      </ul>
    </div>
  </Layout>
</template>

<page-query>
  query Category($id: ID!) {
      category: strapiCategory(id: $id) {
        name
        restaurants {
          id
          name
        }
      }
    }
</page-query>

----------------------------------------

TITLE: Accessing Configuration in Strapi v4
DESCRIPTION: Shows how model configurations were accessed using dot notation in Strapi v4, demonstrating get, has, and set operations.

LANGUAGE: jsx
CODE:
strapi.config.get('plugin.upload.somesetting');
if ( strapi.config.has('plugin.upload.somesetting') ) {
  strapi.config.set('plugin.upload.somesetting', false);
}

----------------------------------------

TITLE: Throwing Custom Errors in Strapi Policy
DESCRIPTION: This code updates the custom policy to throw a custom PolicyError instead of returning false. It provides more detailed error information when a restaurant owner attempts to submit a review.

LANGUAGE: javascript
CODE:
const { errors } = require('@strapi/utils');
const { PolicyError } = errors;

module.exports = async (policyContext, config, { strapi }) => {
  // ... (previous code)

  if (user.id === restaurant.owner.id) {
    throw new PolicyError('The owner of the restaurant cannot submit reviews', {
      errCode: 'RESTAURANT_OWNER_REVIEW',
    });
  }

  return true;
};

----------------------------------------

TITLE: Link to Specific Environment
DESCRIPTION: Command to set a default environment for deployments in Strapi Cloud project.

LANGUAGE: bash
CODE:
strapi cloud environment link

----------------------------------------

TITLE: Fetching and displaying restaurants in Jekyll layout
DESCRIPTION: HTML and Liquid template to fetch and display restaurants from Strapi in a Jekyll layout.

LANGUAGE: html
CODE:
---
layout: default
---

<div class="home">
  <h1 class="page-heading">Restaurants</h1>
  {%- if strapi.collections.restaurants.size > 0 -%}
  <ul>
    {%- for restaurant in strapi.collections.restaurants -%}
    <li>
      {{ restaurant.name }}
    </li>
    {%- endfor -%}
  </ul>
  {%- endif -%}
</div>

----------------------------------------

TITLE: PUT Request to Strapi API using Fetch
DESCRIPTION: Execute a PUT request to update a restaurant's category in the Strapi API using Fetch.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants/2', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    categories: [2],
  }),
})
  .then(response => response.json())
  .then(data => {
    console.log(data);
  });

----------------------------------------

TITLE: Handling File Properties in Custom Endpoints (Strapi v4)
DESCRIPTION: In Strapi v4, custom endpoints handle files using specific properties of the ctx.request.files object.

LANGUAGE: javascript
CODE:
const endpoint = (ctx) => {
    ctx.request.files.fileName.path
    ctx.request.files.fileName.name
    ctx.request.files.fileName.type
}

----------------------------------------

TITLE: Migration Example from Strapi v4 to Strapi 5
DESCRIPTION: This snippet provides a side-by-side comparison of how to migrate from using getWhere() in Strapi v4 to the new filtering approach in Strapi 5. It demonstrates the change in syntax and logic.

LANGUAGE: typescript
CODE:
// In Strapi v4
const values = provider.getWhere({ foo: 42, bar: 'baz' });

// In Strapi 5
const values = provider.values().filter(
  value => value.foo === 42 && value.bar === 'baz'
);

----------------------------------------

TITLE: Watching and Linking Strapi Plugin
DESCRIPTION: Recompiles the plugin automatically on changes and runs 'yalc push --publish'. Useful for testing the plugin in an existing application.

LANGUAGE: bash
CODE:
strapi-plugin watch:link

----------------------------------------

TITLE: Creating a new Jekyll application
DESCRIPTION: Command to create a new Jekyll application using the Jekyll CLI.

LANGUAGE: bash
CODE:
jekyll new jekyll-app

----------------------------------------

TITLE: Adding jekyll-strapi gem to Gemfile
DESCRIPTION: Configuration to add the jekyll-strapi gem to the Gemfile for Jekyll plugins.

LANGUAGE: ruby
CODE:
group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
  gem "jekyll-strapi"
end

----------------------------------------

TITLE: Injecting Component into Content Manager in Strapi v4
DESCRIPTION: This code snippet demonstrates how to inject a component into the Content Manager using the injectContentManagerComponent() method in Strapi v4.

LANGUAGE: tsx
CODE:
app.injectContentManagerComponent('editView', 'right-links', {
    name: 'PreviewButton',
    Component: () => (
      <Button onClick={() => window.alert('Not here, The preview is.')}>Preview</Button>
    ),
  });

----------------------------------------

TITLE: Comparing Sorting Methods Between Strapi v4 and v5
DESCRIPTION: Shows the difference between sorting entries chronologically in Strapi v4 using EntityService API with 'id' field versus Strapi v5 using DocumentService API with 'createdAt' field.

LANGUAGE: javascript
CODE:
strapi.entityService.findMany('api::article.article', {
  sort: 'id',
});

LANGUAGE: javascript
CODE:
strapi.documentService.findMany('api::article.article', {
  sort: 'createdAt',
});

----------------------------------------

TITLE: Configuring Apollo Server in Strapi 5
DESCRIPTION: Example of adding the csrfPrevention configuration option to the Apollo Server setup in the GraphQL plugin configuration for Strapi 5.

LANGUAGE: javascript
CODE:
{
  apolloServer: {
    csrfPrevention: false
  }
}

----------------------------------------

TITLE: GraphQL Query for Fetching Specific Category with Restaurants
DESCRIPTION: GraphQL query to fetch a specific category by ID, including associated restaurants.

LANGUAGE: graphql
CODE:
query {
  strapiCategory(id: 1) {
    id
    name
    restaurants {
      name
      description
    }
  }
}

----------------------------------------

TITLE: Installing gems with Bundler
DESCRIPTION: Command to install the required gems using Bundler.

LANGUAGE: bash
CODE:
bundle install

----------------------------------------

TITLE: Using DocumentID in GraphQL Queries
DESCRIPTION: Updated query structure using documentId instead of id for content type queries and mutations.

LANGUAGE: graphql
CODE:
{
  restaurants {
    data {
      documentId
      attributes {
        title
        image {
          data {
            documentId
            attributes {
              url
            }
          }
        }
        images {
          data {
            documentId
            attributes {
              url
            }
          }
        }
        xToOneRelation {
          data {
            documentId
            attributes {
            
            }
        }
        xToManyRelation {
          data {
            documentId
            attributes {
              field
            }
          }
        }
      }
    }
    meta {
      pagination {
        page
        pageSize
      }
    }
  }
}

----------------------------------------

TITLE: Basic Strapi Server Implementation
DESCRIPTION: Basic server.js implementation for starting a Strapi instance using Node.js directly instead of npm scripts.

LANGUAGE: javascript
CODE:
const strapi = require('@strapi/strapi');
strapi.createStrapi(/* {...} */).start();

----------------------------------------

TITLE: Strapi v4 Redux Payload Format
DESCRIPTION: Example of the payload structure for SET_INIT_DATA action in Strapi v4, where attributes are nested inside a data object.

LANGUAGE: json
CODE:
  data: {
    authorizedCollectionTypeLinks: ContentManagerAppState['collectionTypeLinks'];
    authorizedSingleTypeLinks: ContentManagerAppState['singleTypeLinks'];
    components: ContentManagerAppState['components'];
    contentTypeSchemas: ContentManagerAppState['models'];
    fieldSizes: ContentManagerAppState['fieldSizes'];
  };

----------------------------------------

TITLE: Configuring Gridsome for Strapi Integration
DESCRIPTION: Configuration in gridsome.config.js to set up the Strapi source plugin with API URL and content types.

LANGUAGE: javascript
CODE:
module.exports = {
  siteName: 'Gridsome',
  plugins: [
    {
      use: '@gridsome/source-strapi',
      options: {
        apiURL: `http://localhost:1337`,
        queryLimit: 1000, // Defaults to 100
        contentTypes: [`restaurant`, `category`],
      },
    },
  ],
};

----------------------------------------

TITLE: Running Jekyll application
DESCRIPTION: Command to run the Jekyll application with Bundler.

LANGUAGE: bash
CODE:
bundle exec jekyll serve

----------------------------------------

TITLE: Configuring Session Keys in Strapi Server Configuration
DESCRIPTION: Add the app.keys configuration to the ./config/server.js file. This sets up the session middleware keys, which should be stored in environment variables for security.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array("APP_KEYS"),
  },
  // ...
});

----------------------------------------

TITLE: Strapi Production Start Commands
DESCRIPTION: Commands for starting Strapi server in production mode using different package managers.

LANGUAGE: bash
CODE:
NODE_ENV=production yarn start

LANGUAGE: bash
CODE:
NODE_ENV=production npm run start

----------------------------------------

TITLE: Configuring Mailgun Provider in Strapi 5
DESCRIPTION: Example configuration for the Mailgun provider in the plugins configuration file for Strapi 5. It demonstrates the use of the new 'key' and 'url' variables instead of the deprecated 'apiKey' and 'host'.

LANGUAGE: jsx
CODE:
module.exports = ({ env }) => ({
  // ...
  email: {
    config: {
      provider: 'mailgun',
      providerOptions: {
        key: env('MAILGUN_API_KEY'), // Required
        domain: env('MAILGUN_DOMAIN'), // Required
        url: env('MAILGUN_URL', 'https://api.mailgun.net'), //Optional. If domain region is Europe use 'https://api.eu.mailgun.net'
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Installing Strapi Source Plugin for Gridsome
DESCRIPTION: Command to add the Strapi source plugin for Gridsome using Yarn.

LANGUAGE: bash
CODE:
yarn add @gridsome/source-strapi

----------------------------------------

TITLE: Paginating Results with Strapi Document Service API in JavaScript
DESCRIPTION: This snippet illustrates how to paginate results using the Document Service API. It uses the 'limit' and 'start' parameters to retrieve 10 articles starting from the first one.

LANGUAGE: javascript
CODE:
const documents = await strapi.documents("api::article.article").findMany({
  limit: 10,
  start: 0,
});

----------------------------------------

TITLE: Running Specific Codemod for Strapi v5 Migration
DESCRIPTION: This command runs a specific codemod to automate part of the plugin migration process from Strapi v4 to v5.

LANGUAGE: bash
CODE:
npx @strapi/upgrade codemods run

----------------------------------------

TITLE: Building Strapi Admin Panel
DESCRIPTION: Command to build the Strapi admin panel for production use.

LANGUAGE: bash
CODE:
yarn strapi build
npm run strapi build

----------------------------------------

TITLE: Migrating from isSupportedImage to isImage/isOptimizableImage in Strapi 5
DESCRIPTION: Replace deprecated isSupportedImage method with either isImage for general image file checking or isOptimizableImage for checking if an image can be optimized. The behavior of the old isSupportedImage is equivalent to isOptimizableImage in Strapi v4.

LANGUAGE: javascript
CODE:
// Before (Strapi v4)
file.isSupportedImage()

// After (Strapi 5)
file.isImage() // To check if file is an image
// or
file.isOptimizableImage() // To check if image can be optimized

----------------------------------------

TITLE: Querying Category Collection Type with GraphQL
DESCRIPTION: GraphQL query to fetch a specific category by ID, including associated restaurants, from the Strapi API.

LANGUAGE: graphql
CODE:
query Category {
  category(id: 1) {
    id
    name
    restaurants {
      id
      name
      description
    }
  }
}

----------------------------------------

TITLE: Discarding Drafts for All Locale Versions in Strapi
DESCRIPTION: Use the discardDraft() method with the '*' wildcard to discard drafts for all language versions. This example discards drafts for all locales of a restaurant document.

LANGUAGE: javascript
CODE:
await strapi
  .documents('api::restaurant.restaurant')
  .discardDraft({ documentId: 'a1b2c3d4e5f6g7h8i9j0klm', locale: '*' });

----------------------------------------

TITLE: Converting Entity Service Decorator to Document Service Middleware
DESCRIPTION: Shows how to migrate from Entity Service decorators to Document Service middlewares with an example of custom filtering.

LANGUAGE: tsx
CODE:
strapi.documents.use((ctx, next) => {
  if (ctx.uid !== "api::my-content-type.my-content-type") {
    return next();
  }
  
  if (ctx.action === 'findOne') {
    ctx.params.filters = { ...params.filters, deletedAt: { $notNull: true } } 
    const res = await next();
    return res;
  }
  
  return next();
});

----------------------------------------

TITLE: Environment Variables for Database Configuration
DESCRIPTION: Required environment variables for configuring an external database connection in Strapi Cloud. These variables must be set in the project settings to establish the database connection.

LANGUAGE: plaintext
CODE:
DATABASE_CLIENT=your_db
DATABASE_HOST=your_db_host
DATABASE_PORT=your_db_port
DATABASE_NAME=your_db_name
DATABASE_USERNAME=your_db_username
DATABASE_PASSWORD=your_db_password
DATABASE_SSL_REJECT_UNAUTHORIZED=false
DATABASE_SCHEMA=public

----------------------------------------

TITLE: Component Update Request Example in Strapi v4
DESCRIPTION: Example showing how component updates were handled in Strapi v4 using component IDs in REST API requests. The code demonstrates fetching a category and updating a specific component using its ID.

LANGUAGE: typescript
CODE:
// 1. GET /category/:id
category = fetch(...)

// 2. PUT /category/:id
{
data: {
  name: 'category-name',
  // Update component by its id
  component: {
    id: category.component.id // Use the id received in 1.
    value: 'value' 
  }
}
}

----------------------------------------

TITLE: Querying Restaurants Collection Type with GraphQL
DESCRIPTION: GraphQL query to fetch restaurant data including id, name, description, and associated categories from the Strapi API.

LANGUAGE: graphql
CODE:
query Restaurants {
  restaurants {
    id
    name
    description
    categories {
      name
    }
  }
}

----------------------------------------

TITLE: Deep Filtering on Related Fields in Strapi
DESCRIPTION: Example of deep filtering to find restaurants based on related chef's restaurant ratings using nested filters.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify({
  filters: {
    chef: {
      restaurants: {
        stars: {
          $eq: 5,
        },
      },
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/restaurants?${query}`);

----------------------------------------

TITLE: Converting findOne API Call in Strapi
DESCRIPTION: Shows how to migrate the findOne method from Entity Service API to Document Service API format.

LANGUAGE: tsx
CODE:
strapi.documents(uid).findOne({
  documentId: "__TODO__"
});

----------------------------------------

TITLE: Configuring Cloudinary Upload Provider (JavaScript)
DESCRIPTION: This code snippet demonstrates how to configure the Cloudinary upload provider for Strapi Cloud in JavaScript. It includes the necessary configuration options and environment variables for Cloudinary integration.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  // ...
  upload: {
    config: {
      provider: 'cloudinary',
      providerOptions: {
        cloud_name: env('CLOUDINARY_NAME'),
        api_key: env('CLOUDINARY_KEY'),
        api_secret: env('CLOUDINARY_SECRET'),
      },
      actionOptions: {
        upload: {},
        uploadStream: {},
        delete: {},
      },
    },
  },
  // ...
});

----------------------------------------

TITLE: Updating Core Service Methods in Strapi v4
DESCRIPTION: Example of core service methods in Strapi v4 using the Entity Service API. Methods like findOne, update, and delete receive an entityId.

LANGUAGE: javascript
CODE:
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::address.address', {

  findOne(entityId, params) {
    // customization
    super.findOne(entityId, params);
    
    // or to show a bit more context
    strapi.entityService.findOne(uid, entityId, params);
  },
  
  update(entityId, params) {
    // customization
    super.update(entityId, params);
  },
  
  delete(entityId, params) {
    // customization
    super.delete(entityId, params)
  }

});

----------------------------------------

TITLE: Disabling Strapi Telemetry Using NPM
DESCRIPTION: Command to disable Strapi's telemetry data collection using NPM package manager.

LANGUAGE: sh
CODE:
npm run strapi telemetry:disable

----------------------------------------

TITLE: Field Selection Query Using qs Library
DESCRIPTION: Example showing how to use the qs library to construct a query string for selecting specific fields from a Strapi API endpoint.

LANGUAGE: javascript
CODE:
const qs = require('qs');
const query = qs.stringify(
  {
    fields: ['name', 'description'],
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/users?${query}`);

----------------------------------------

TITLE: Configuring Security Middleware for Amazon S3 (JavaScript)
DESCRIPTION: This code snippet shows how to configure the Strapi security middleware to allow content from Amazon S3. It modifies the Content Security Policy settings in the middleware.js file, replacing placeholder values with actual S3 bucket information.

LANGUAGE: javascript
CODE:
module.exports = [
  // ...
  {
    name: 'strapi::security',
    config: {
      contentSecurityPolicy: {
        useDefaults: true,
        directives: {
          'connect-src': ["'self'", 'https:'],
          'img-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          'media-src': [
            "'self'",
            'data:',
            'blob:',
            'market-assets.strapi.io',
            'yourBucketName.s3.yourRegion.amazonaws.com',
          ],
          upgradeInsecureRequests: null,
        },
      },
    },
  },
  // ...
];

----------------------------------------

TITLE: Converting findMany API Call in Strapi
DESCRIPTION: Demonstrates migration of findMany method with fields, populate, and publication state parameters.

LANGUAGE: tsx
CODE:
strapi.documents(uid).findMany({
  fields: ["id", "name", "description"],
  populate: ["author", "comments"],
  status: "draft",
});

----------------------------------------

TITLE: Starting Strapi Production Server
DESCRIPTION: Command to start a Strapi application in production mode with auto-reloading disabled.

LANGUAGE: bash
CODE:
yarn strapi start
npm run strapi start

----------------------------------------

TITLE: Deleting Multiple Entries with deleteMany()
DESCRIPTION: Deletes multiple database entries that match specified criteria using deleteMany() method. Returns an object containing count of deleted entries.

LANGUAGE: javascript
CODE:
await strapi.db.query("api::blog.article").deleteMany({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// { count: 42 }

----------------------------------------

TITLE: List Strapi Cloud Projects
DESCRIPTION: Command to display all Strapi Cloud projects associated with the authenticated account.

LANGUAGE: bash
CODE:
strapi projects

----------------------------------------

TITLE: POST Request to Strapi API using Axios
DESCRIPTION: Example of making a POST request to create a new restaurant in a Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from "axios";

axios
  .post("http://localhost:1337/api/restaurants", {
    data: {
      "Name": "Dolemon Sushi",
      "Description": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "text": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."
            }
          ]
        }
      ],
      categories: [3],
    },
  })
  .then((response) => {
    console.log(response);
  });

----------------------------------------

TITLE: Accessing Environment Variables in TypeScript Configuration
DESCRIPTION: Example of accessing an environment variable in a TypeScript configuration file using the env() utility.

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  connections: {
    default: {
      settings: {
        password: env('DATABASE_PASSWORD'),
      },
    },
  },
});

----------------------------------------

TITLE: Implicit $and Operation in Strapi Query Engine API
DESCRIPTION: This snippet shows how $and is used implicitly when passing an object with nested conditions. It achieves the same result as the explicit $and example.

LANGUAGE: javascript
CODE:
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});

----------------------------------------

TITLE: Configuring Options for a Custom Field in Strapi
DESCRIPTION: Example of defining options for a 'color' custom field, including base settings, advanced settings, and a validator function. This configuration allows customization of the field in the Content-Type Builder.

LANGUAGE: jsx
CODE:
export default {
  register(app) {
    app.customFields.register({
      // ...
      options: {
        base: [
          {
            sectionTitle: {
              id: "color-picker.color.section.format",
              defaultMessage: "Format",
            },
            items: [
              {
                intlLabel: {
                  id: "color-picker.color.format.label",
                  defaultMessage: "Color format",
                },
                name: "options.format",
                type: "select",
                value: "hex",
                options: [
                  {
                    key: "hex",
                    defaultValue: "hex",
                    value: "hex",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.hex",
                        defaultMessage: "Hexadecimal",
                      },
                    },
                  },
                  {
                    key: "rgba",
                    value: "rgba",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.rgba",
                        defaultMessage: "RGBA",
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        advanced: [],
        validator: (args) => ({
          format: yup.string().required({
            id: "options.color-picker.format.error",
            defaultMessage: "The color format is required",
          }),
        }),
      },
    });
  },
};

----------------------------------------

TITLE: Fetching Restaurants from Strapi API
DESCRIPTION: JavaScript module to fetch restaurant data from Strapi API endpoint with error handling.

LANGUAGE: javascript
CODE:
const { default: axios } = require('axios');

module.exports = async () => {
  try {
    const res = await axios.get('http://localhost:1337/api/restaurants?populate=*');
    return res.data;
  } catch (error) {
    console.error(error);
  }
};

----------------------------------------

TITLE: Creating Entity Subsets in TypeScript with Strapi
DESCRIPTION: These type definitions demonstrate how to create subsets of entities using the second type parameter of Data.ContentType and Data.Component.

LANGUAGE: typescript
CODE:
type Credentials = Data.ContentType<'api::acount.acount', 'email' | 'password'>;
//   ^? { email: string; password: string }

type UsageMetrics = Data.Component<'app.metrics', 'clicks' | 'views'>;
//   ^? { clicks: number; views: number }

----------------------------------------

TITLE: Setting Custom .env File Path
DESCRIPTION: Command to set a custom path for the .env file using the ENV_PATH environment variable before starting the application.

LANGUAGE: shell
CODE:
ENV_PATH=/absolute/path/to/.env npm run start

----------------------------------------

TITLE: Creating an Entry with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the create() method to create a new article entry with a title.

LANGUAGE: javascript
CODE:
const entry = await strapi.entityService.create('api::article.article', {
  data: {
    title: 'My Article',
  },
});

----------------------------------------

TITLE: Defining Environment Variables in .env File
DESCRIPTION: Example of defining a database password in a .env file at the root of the Strapi application.

LANGUAGE: shell
CODE:
# path: .env

DATABASE_PASSWORD=acme

----------------------------------------

TITLE: PUT Request Implementation
DESCRIPTION: Example of making PUT request to update restaurant categories in Strapi using Angular HttpClient.

LANGUAGE: typescript
CODE:
this.http
  .put("http://localhost:1337/api/restaurants/2", {
    data: {
      categories: [2],
    },
  })
  .subscribe((response) => {
    console.log(response);
  });

----------------------------------------

TITLE: Configuring Strapi Route for Creator Field Population
DESCRIPTION: Modify the default route factory to apply the custom middleware for populating creator fields on specific routes.

LANGUAGE: javascript
CODE:
"use strict";

const { createCoreRouter } = require("@strapi/strapi").factories;

module.exports = createCoreRouter("api::test.test", {
  config: {
    find: {
      middlewares: ["api::test.default-test-populate"],
    },
    findOne: {
      middlewares: ["api::test.default-test-populate"],
    },
  },
});

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: YAML frontmatter and markdown structure for Strapi Cloud deployment documentation, including metadata, title, description, and navigation cards for different deployment methods.

LANGUAGE: markdown
CODE:
---
title: Project deployment
displayed_sidebar: cloudSidebar
description: Learn how to deploy your Strapi application on Strapi Cloud, via the Cloud dashboard or the CLI.
canonicalUrl: https://docs.strapi.io/cloud/getting-started/deployment-options.html
sidebar_position: 2
tags:
- Strapi Cloud
- deployment
---

# Project deployment with Strapi Cloud

You have 2 options to deploy your project with Strapi Cloud:

- either with the user interface (UI), meaning that you will perform all the actions directly on the Strapi Cloud dashboard,
- or using the Cloud Comment Line Interface (CLI), meaning that you will only interact with a terminal.

The guides below will guide you through all the steps for each of the deployment options. 

<CustomDocCardsWrapper>
  <CustomDocCard emoji="🖼️" title="Via the Cloud dashboard" description="Step-by-step guide to create and deploy a project via the user interface." link="/cloud/getting-started/deployment" />
  <CustomDocCard emoji="💻" title="Via the CLI" description="Step-by-step guide to create and deploy a project with the Cloud Command Line Interface." link="/cloud/getting-started/deployment-cli" />
</CustomDocCardsWrapper>

----------------------------------------

TITLE: Using findPage() in Strapi v4
DESCRIPTION: Example of using the Entity Service API's findPage() method for pagination in Strapi v4.

LANGUAGE: jsx
CODE:
strapi.entityService.findPage('api::article.article', {
  start: 10,
  limit: 15,
});

----------------------------------------

TITLE: Environment Variable Based Webhook Security
DESCRIPTION: Example of using environment variables to secure webhook endpoints with authentication tokens.

LANGUAGE: javascript
CODE:
module.exports = {
  webhooks: {
    defaultHeaders: {
      Authorization: `Bearer ${process.env.WEBHOOK_TOKEN}`,
    },
  },
};

----------------------------------------

TITLE: Making POST Request to Strapi API in Dart
DESCRIPTION: Dart code snippet for making a POST request to create a new restaurant in a Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.post(
  'http://localhost:1337/restaurants',
  headers: headers,
  body: jsonEncode({
    'name': 'Dolemon Sushi',
    'description': 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious.',
    'categories': [3]
  });
);

----------------------------------------

TITLE: Updating Logos in Strapi Admin Panel
DESCRIPTION: Example of how to update the authentication and menu logos in the Strapi admin panel.

LANGUAGE: javascript
CODE:
import AuthLogo from "./extensions/my-auth-logo.png";
import MenuLogo from "./extensions/my-menu-logo.png";

export default {
  config: {
    auth: {
      logo: AuthLogo,
    },
    menu: {
      logo: MenuLogo,
    },
  },
  bootstrap() {},
};

----------------------------------------

TITLE: Deploying Strapi Project with NPM
DESCRIPTION: Command to deploy a Strapi project to Strapi Cloud using NPM package manager. This initiates the deployment process and shows a progress bar in the terminal.

LANGUAGE: bash
CODE:
npx run strapi deploy

----------------------------------------

TITLE: Markdown Documentation Structure
DESCRIPTION: Frontmatter and markdown content defining the documentation page structure, including sidebar configuration, description, and navigation elements.

LANGUAGE: markdown
CODE:
---
sidebar_label: 'Introduction'
displayed_sidebar: cloudSidebar
description: The Strapi Cloud documentation contains all technical documentation related to the setup, deployment, update and customization of your Strapi Cloud account and applications.
slug: /cloud/intro
sidebar_position: 1
tags:
- introduction
- deployment
- Strapi Cloud
pagination_next: cloud/getting-started/cloud-fundamentals
---

----------------------------------------

TITLE: Configuring Default Webhook Headers in JavaScript
DESCRIPTION: Example of setting default headers for webhook requests in Strapi server configuration using JavaScript.

LANGUAGE: javascript
CODE:
module.exports = {
  webhooks: {
    defaultHeaders: {
      "Custom-Header": "my-custom-header",
    },
  },
};

----------------------------------------

TITLE: Implementing Restaurant Class with PUT Request in Dart
DESCRIPTION: Full Dart implementation of a Restaurant class with methods to fetch all restaurants, create a new restaurant, and update an existing restaurant in a Strapi API.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;
import 'dart:convert';

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map<String,String> headers = {
    'Content-Type':'application/json',
    'Accept': 'application/json'
  };

  void all() async {
    var response = await http.get('${api_url}/restaurants', headers: headers);
    print(response.body);
  }

  void create(name, description, category) async {
    final data = jsonEncode({
      'name': name,
      'description': description,
      'categories': category
    });

    var response = await http.post('${api_url}/restaurants', headers: headers, body: data);
  }

  void update(id, params) async {
    final data = jsonEncode({
      'categories': params['categories']
    });

    var response = await http.put("${api_url}/restaurants/${id}", headers: headers, body: data);
  }
}

void main() {
  var restaurant = Restaurant();
  restaurant.update(2, {'categories': [2]});
}

----------------------------------------

TITLE: Creating a Strapi Project with NPM
DESCRIPTION: Command to create a new Strapi project using NPM. This runs the latest version of the Strapi creation package.

LANGUAGE: bash
CODE:
npx create-strapi@latest

----------------------------------------

TITLE: Deploying Strapi Project with Yarn
DESCRIPTION: Command to deploy a Strapi project to Strapi Cloud using Yarn package manager. This initiates the deployment process and shows a progress bar in the terminal.

LANGUAGE: bash
CODE:
yarn strapi deploy

----------------------------------------

TITLE: Updating Strapi Dependencies in package.json
DESCRIPTION: Update the Strapi package versions to 4.0.6 in the package.json file. This includes @strapi/strapi, @strapi/plugin-users-permissions, and @strapi/plugin-i18n.

LANGUAGE: json
CODE:
{
  "dependencies": {
    "@strapi/strapi": "4.0.6",
    "@strapi/plugin-users-permissions": "4.0.6",
    "@strapi/plugin-i18n": "4.0.6",
    "sqlite3": "5.0.2"
  }
}

----------------------------------------

TITLE: Markdown Table for Breaking Changes Status
DESCRIPTION: A markdown table with two columns showing a question about breaking changes affecting plugins with a red-colored 'Yes' response. Uses HTML spans for styling the text weight and color.

LANGUAGE: markdown
CODE:
| <span style={{fontWeight: '700'}}>🔌 Is this breaking change affecting plugins?</span> | <span style={{color:'red'}}>Yes</span> |
|--|--|

----------------------------------------

TITLE: Installing Dependencies in Flutter
DESCRIPTION: Command to install the dependencies specified in the pubspec.yaml file.

LANGUAGE: bash
CODE:
flutter pub get

----------------------------------------

TITLE: Configuring Strapi collections for page generation in _config.yml
DESCRIPTION: YAML configuration to set up Strapi collections for generating individual pages for categories in Jekyll.

LANGUAGE: yaml
CODE:
strapi:
  # Your API endpoint (optional, default to http://localhost:1337)
  endpoint: http://localhost:1337
  # Collections, key is used to access in the strapi.collections
  # template variable
  collections:
    # Example for a "posts" collection
    restaurants:
      # Collection name (optional). Used to construct the url requested. Example: type `foo` would generate the following url `http://localhost:1337/foo`.
      type: restaurants

    categories:
      # Collection name (optional). Used to construct the url requested. Example: type `foo` would generate the following url `http://localhost:1337/foo`.
      type: categories
      permalink: categories/:name
      layout: category.html
      # Generate output files or not (default: false)
      output: true

----------------------------------------

TITLE: Logging into Strapi Cloud with Yarn
DESCRIPTION: Command to log into Strapi Cloud using Yarn package manager. This command opens a browser window for authentication.

LANGUAGE: bash
CODE:
yarn strapi login

----------------------------------------

TITLE: Setting Session Keys in .env File
DESCRIPTION: Example of how to set the APP_KEYS environment variable in a .env file. This is the recommended way to store session keys securely.

LANGUAGE: plaintext
CODE:
APP_KEYS=[someSecret, anotherSecret, additionalSecrets]

or

APP_KEYS=someSecret,anotherSecret,additionalSecrets

----------------------------------------

TITLE: Installing Upgraded Strapi with Yarn
DESCRIPTION: This snippet shows how to install an upgraded version of Strapi using Yarn. It simply requires running the 'yarn' command in the project directory.

LANGUAGE: bash
CODE:
yarn

----------------------------------------

TITLE: Executing GET Request in Flutter
DESCRIPTION: Dart code to perform a GET request to fetch all restaurants from the Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.get(
  'http://localhost:1337/api/restaurants',
  headers: headers
);

print(response.body)

----------------------------------------

TITLE: GET Request to Strapi API using Axios in Vue.js
DESCRIPTION: Example of making a GET request to the Strapi API using Axios in a Vue.js application.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.get('http://localhost:1337/api/restaurants').then(response => {
  console.log(response);
});

----------------------------------------

TITLE: Login to Strapi Cloud
DESCRIPTION: Command to authenticate with Strapi Cloud. Opens browser window for authentication via Google, GitHub or GitLab.

LANGUAGE: bash
CODE:
strapi login

----------------------------------------

TITLE: Running Strapi 5 RC Upgrade Commands
DESCRIPTION: Examples of how to run Strapi upgrade commands using the @rc tag for release candidate versions. Shows both minor and major upgrade command variations.

LANGUAGE: bash
CODE:
npx @strapi/upgrade@rc minor

LANGUAGE: bash
CODE:
npx @strapi/upgrade@rc major

----------------------------------------

TITLE: Using Type-Safe Content Type Functions in TypeScript with Strapi
DESCRIPTION: This code snippet demonstrates how to use the type-safe display function with different content types, showing both valid and invalid usage.

LANGUAGE: typescript
CODE:
declare const article: Data.Document<'api::article.article'>;
declare const category: Data.Document<'api::category.category'>;
declare const account: Data.Document<'api::account.account'>;

display('api::article.article', article);
display('api::category.category', category);
display('api::account.account', account);
// ^ ✅

display('api::article.article', category);
// ^ Error: "category" is not assignable to parameter of type ContentType<'api::article.article'>

----------------------------------------

TITLE: Executing POST Request in Flutter
DESCRIPTION: Dart code to perform a POST request to create a new restaurant in the Strapi API.

LANGUAGE: dart
CODE:
Map<String,String> headers = {
  'Content-Type':'application/json',
  'Accept': 'application/json'
};

var response = await http.post(
  'http://localhost:1337/api/restaurants',
  headers: headers,
  body: jsonEncode({
    'name': 'Dolemon Sushi',
    'description': 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious.',
    'categories': [3]
  });
);

----------------------------------------

TITLE: Retrieving Draft Entries with Strapi Entity Service API in JavaScript
DESCRIPTION: Uses the findMany() method with specific parameters to retrieve only draft article entries.

LANGUAGE: javascript
CODE:
const entries = await strapi.entityService.findMany('api::article.article', {
  publicationState: 'preview',
  filters: {
    publishedAt: {
      $null: true,
    },
  },
});

----------------------------------------

TITLE: Amazon SES Email Provider Configuration
DESCRIPTION: Configuration example for setting up Amazon SES as an email provider in Strapi Cloud, including AWS credentials and endpoint configuration.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  email: {
    config: {
      provider: 'amazon-ses',
      providerOptions: {
        key: env('AWS_SES_KEY'),
        secret: env('AWS_SES_SECRET'),
        amazon: 'https://email.us-east-1.amazonaws.com',
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  email: {
    config: {
      provider: 'amazon-ses',
      providerOptions: {
        key: env('AWS_SES_KEY'),
        secret: env('AWS_SES_SECRET'),
        amazon: 'https://email.us-east-1.amazonaws.com',
      },
      settings: {
        defaultFrom: 'myemail@protonmail.com',
        defaultReplyTo: 'myemail@protonmail.com',
      },
    },
  },
});

----------------------------------------

TITLE: Displaying Audit Logs Table in Markdown
DESCRIPTION: This snippet shows a markdown table listing the events and actions that are recorded in Strapi's audit logs. It includes content types, entries, media, authentication, roles/permissions, and user actions.

LANGUAGE: markdown
CODE:
| Event | Actions |
| --- | --- |
| Content Type | `create`, `update`, `delete` |
| Entry (draft/publish) | `create`, `update`, `delete`, `publish`, `unpublish` |
| Media | `create`, `update`, `delete` |
| Login / Logout | `success`, `fail` |
| Role / Permission | `create`, `update`, `delete` |
| User | `create`, `update`, `delete` |

----------------------------------------

TITLE: Rendering Generic Components in TypeScript with Strapi
DESCRIPTION: This function shows how to render generic components using the Data.Component type from Strapi.

LANGUAGE: typescript
CODE:
function renderComponent(parent: Node, component: Data.Component) {
  const elements: Element[] = [];
  const properties = Object.entries(component);

  for (const [name, value] of properties) {
    //        ^        ^
    //        string   any
    const paragraph = document.createElement('p');

    paragraph.textContent = `Key: ${name}, Value: ${value}`;

    elements.push(paragraph);
  }

  parent.append(...elements);
}

----------------------------------------

TITLE: GET Request Implementation
DESCRIPTION: Examples of fetching data from Strapi API using both @nuxtjs/strapi and $fetch methods.

LANGUAGE: javascript
CODE:
// @nuxtjs/strapi method
const response = await find<Restaurant>('restaurants')

// $fetch method
const response = $fetch("http://localhost:1337/api/restaurants")

----------------------------------------

TITLE: Running Strapi Codemods
DESCRIPTION: Commands for listing and running specific codemods for code transformation during upgrades.

LANGUAGE: bash
CODE:
npx @strapi/upgrade codemods ls

LANGUAGE: bash
CODE:
npx @strapi/upgrade codemods run

LANGUAGE: bash
CODE:
npx @strapi/upgrade codemods run 5.0.0-strapi-codemod-uid

----------------------------------------

TITLE: Configuring Email Provider Plugin Structure
DESCRIPTION: Basic plugin configuration structure for setting up email providers in Strapi Cloud. This shows the required file structure and base configuration object.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  email: {
    config: {
        // … provider-specific upload configuration options go here
    }
  }
});

LANGUAGE: typescript
CODE:
export default ({ env }) => ({
  email: {
    config: {
        // … provider-specific upload configuration options go here
    }
  }
});

----------------------------------------

TITLE: Running Local Development Server for Strapi Website (Yarn)
DESCRIPTION: Starts a local development server for the Strapi website, which opens a browser window and reflects most changes live without needing to restart the server.

LANGUAGE: bash
CODE:
$ yarn dev

----------------------------------------

TITLE: Importing Data Namespace for Entity Representation in TypeScript
DESCRIPTION: This code demonstrates importing the Data namespace from Strapi, which provides built-in types for entity representation.

LANGUAGE: typescript
CODE:
import type { Data } from '@strapi/strapi';

----------------------------------------

TITLE: POST Request Implementation for Restaurant Creation
DESCRIPTION: PHP function to create a new restaurant using Strapi API with cURL POST request

LANGUAGE: php
CODE:
<?php
function postRestaurant(){
    $restaurants = array(
        'name' => 'Calabar Kitchen',
        'description' => 'Omo, this is a place that varieties of soup with catfish🦈',
         'categories' => [2]
      );

      $curl = curl_init();
      curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($curl, CURLOPT_POST, true);
      curl_setopt($curl, CURLOPT_POSTFIELDS,  json_encode($restaurants));
      curl_setopt($curl, CURLOPT_HTTPHEADER, [
          'Content-Type: application/json'
      ]);
      $res = curl_exec($curl);
      curl_close($curl);
      print_r($res);
}

postRestaurant();

----------------------------------------

TITLE: GET Request to Strapi API using Axios
DESCRIPTION: Make a GET request to the Strapi API endpoint for restaurants using Axios. This code fetches all restaurants from the API.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios.get('http://localhost:1337/api/restaurants').then(response => {
  console.log(response);
});

----------------------------------------

TITLE: Constructing a JavaScript Query with qs Library in Strapi
DESCRIPTION: This snippet demonstrates how to build a JavaScript query using the qs library, which is commonly used in Strapi for query string manipulation. The query is likely used to filter or search data in a Strapi backend.

LANGUAGE: JavaScript
CODE:
JavaScript query (built with the qs library):

----------------------------------------

TITLE: Configuring Test Database for Strapi
DESCRIPTION: Set up a separate SQLite database configuration for the test environment in Strapi.

LANGUAGE: javascript
CODE:
module.exports = ({ env }) => ({
  connection: {
    client: 'sqlite',
    connection: {
      filename: env('DATABASE_FILENAME', '.tmp/test.db'),
    },
    useNullAsDefault: true,
    debug: false
  },
});

----------------------------------------

TITLE: POST Request to Strapi API using Fetch
DESCRIPTION: Execute a POST request to create a new restaurant in the Strapi API using Fetch.

LANGUAGE: javascript
CODE:
fetch('http://localhost:1337/api/restaurants', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'Dolemon Sushi',
    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
    categories: [3],
  }),
})
  .then(response => response.json())
  .then(data => console.log(data));

----------------------------------------

TITLE: Supported Media Types Table in Markdown
DESCRIPTION: A markdown table listing all supported file types and extensions for the Strapi Media Library, organized by media category including images, videos, audio, and general files.

LANGUAGE: markdown
CODE:
| Media type | Supported extensions                                            |
| ---------- | --------------------------------------------------------------- |
| Image      | - JPEG<br />- PNG<br />- GIF<br />- SVG<br />- TIFF<br />- ICO<br />- DVU   |
| Video      | - MPEG<br />- MP4<br />- MOV (Quicktime)<br />- WMV<br />- AVI<br />- FLV |
| Audio      | - MP3<br />- WAV<br />- OGG                                         |
| File       | - CSV<br />- ZIP<br />- PDF<br />- XLS, XLSX<br />- JSON                |

----------------------------------------

TITLE: Running Strapi Dev Server with NPM
DESCRIPTION: Command to start the Strapi development server using NPM package manager

LANGUAGE: bash
CODE:
npm run develop

----------------------------------------

TITLE: Setting up Preview Route in Next.js
DESCRIPTION: Implementation of the preview route handler in Next.js, enabling draft mode based on Strapi's preview request.

LANGUAGE: typescript
CODE:
import { draftMode } from "next/headers";
import { redirect } from "next/navigation";

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const secret = searchParams.get("secret");
  const url = searchParams.get("url");
  const status = searchParams.get("status");

  if (secret !== process.env.PREVIEW_SECRET) {
    return new Response("Invalid token", { status: 401 });
  }

  if (status === "published") {
    draftMode().disable();
  } else {
    draftMode().enable();
  }

  redirect(url || "/");
}

----------------------------------------

TITLE: Creating a Svelte Application with Degit
DESCRIPTION: Use Degit to create a basic Svelte application template. This command creates a new Svelte project using the official template.

LANGUAGE: bash
CODE:
npx degit sveltejs/template svelte-app

----------------------------------------

TITLE: API Token Settings Table Structure in Markdown
DESCRIPTION: Markdown table defining the configuration settings for creating a new API token, including name, description, duration and type options.

LANGUAGE: markdown
CODE:
| Setting name   | Instructions                                                             |
| -------------- | ------------------------------------------------------------------------ |
| Name           | Write the name of the API token.                                         |
| Description    | (optional) Write a description for the API token.                        |
| Token duration | Choose a token duration: *7 days*, *30 days*, *90 days*, or *Unlimited*. |
| Token type     | Choose a token type: *Read-only*, *Full access*, or *Custom*.            |

----------------------------------------

TITLE: Database Version Requirements Table
DESCRIPTION: Markdown table detailing the recommended and minimum versions for supported databases in Strapi. Includes version specifications for MySQL, MariaDB, PostgreSQL, and SQLite.

LANGUAGE: markdown
CODE:
| Database   | Recommended | Minimum |
| ---------- | ----------- | ------- |
| MySQL      | 8.0         | 8.0     |
| MariaDB    | 10.6        | 10.5    |
| PostgreSQL | 14.0        | 12.0    |
| SQLite     | 3           | 3       |

----------------------------------------

TITLE: Updating Apollo Server Configuration in Strapi 5
DESCRIPTION: Example of updating the Apollo Server configuration in Strapi 5, removing root-level options and using plugin hooks instead.

LANGUAGE: javascript
CODE:
// Old
module.exports = {
  formatResponse: (response) => {
    // Custom formatting
  },
  modules: [MyModule],
  debug: true
};

// New
module.exports = {
  plugins: [
    {
      async serverWillStart() {
        return {
          async responseForOperation({ response }) {
            // Custom formatting
            return response;
          }
        };
      }
    }
  ],
  typeDefs: [MyModuleTypeDefs],
  resolvers: [MyModuleResolvers],
  includeStacktraceInErrorResponses: true
};

----------------------------------------

TITLE: POST Request to Strapi API using Axios in Vue.js
DESCRIPTION: Example of making a POST request to create a new restaurant in the Strapi API using Axios.

LANGUAGE: javascript
CODE:
import axios from 'axios';

axios
  .post('http://localhost:1337/api/restaurants', {
    name: 'Dolemon Sushi',
    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
    categories: [3],
  })
  .then(response => {
    console.log(response);
  });

----------------------------------------

TITLE: Rebuilding Strapi Admin Panel with npm
DESCRIPTION: This command rebuilds the Strapi admin panel using npm. It should be run in the project root directory.

LANGUAGE: bash
CODE:
npm run build

----------------------------------------

TITLE: Importing and Using Strapi Factories in v5
DESCRIPTION: Demonstrates the updated methods for importing and using Strapi factories in Strapi 5, including the recommended approach.

LANGUAGE: javascript
CODE:
// Using the factories
import { factories } from '@strapi/strapi';
// or
const { factories } = require('@strapi/strapi');
// or
const { createCoreService } = require('@strapi/strapi').factories;
// or
const strapi = require('@strapi/strapi');

strapi.factories.createCoreService();
factories.createCoreService();
createCoreService();

// The recommended way is
const { factories } = require('@strapi/strapi');
import { factories } from '@strapi/strapi';

factories.createCoreService();

----------------------------------------

TITLE: Building Strapi Documentation Locally
DESCRIPTION: Command to build the documentation locally before submitting a pull request, ensuring the content renders properly and preventing deployment issues.

LANGUAGE: shell
CODE:
yarn build

----------------------------------------

TITLE: Password Change Configuration Fields
DESCRIPTION: Table detailing the fields required for changing an administrator's password in the Strapi admin panel.

LANGUAGE: markdown
CODE:
| Password modification | |
| --------------------- | ---------------------------------------------------------------------------------------------------------------- |
| Current password | Write your current password in the textbox. <br/> 💡 You can click on the <Icon name="eye" /> icon for the password to be shown. |
| Password | Write the new password in the textbox. <br/> 💡 You can click on the <Icon name="eye" /> icon for the password to be shown. |
| Password confirmation | Write the same new password in the textbox. <br/> 💡 You can click on the <Icon name="eye" /> icon for the password to be shown. |

----------------------------------------

TITLE: Importing and Initializing Strapi in v5
DESCRIPTION: Illustrates the new way to import and initialize Strapi using the application init function in Strapi 5.

LANGUAGE: javascript
CODE:
import { createStrapi } from '@strapi/strapi'; 
const { createStrapi } = require('@strapi/strapi');
const strapi = require('@strapi/strapi');

strapi.createStrapi();

----------------------------------------

TITLE: User Profile Configuration Fields
DESCRIPTION: Table showing the configurable fields for a Strapi administrator profile, including name, email, username, and interface preferences.

LANGUAGE: markdown
CODE:
| Profile & Experience | Instructions |
| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| First name | Write your first name in the textbox. |
| Last name | Write your last name in the textbox. |
| Email | Write your complete email address in the textbox. |
| Username | (optional) Write a username in the textbox. |
| Interface language | Among the drop-down list, choose a language for your Strapi application interface. |
| Interface mode | Among the drop-down list, choose a mode for your Strapi application interface: either "Light mode" or "Dark mode". Note that by default, the chosen mode for a Strapi application is based on the browser's mode. |

----------------------------------------

TITLE: Defining Advanced Settings for Text Field
DESCRIPTION: Example of advanced configuration options available for the Text field type in Strapi's Content-type Builder.

LANGUAGE: markdown
CODE:
| Setting name   | Instructions                                                                  |
|----------------|-------------------------------------------------------------------------------|
| Default value  | Write the default value of the Text field.                                    |
| RegExp pattern | Write a regular expression to make sure the value of the Text field matches a specific format. |
| Private field  | Tick to make the field private and prevent it from being found via the API.   |
| Enable localization for this field | (if [Internationalization](/user-docs/plugins/strapi-plugins#i18n) is enabled for the content-type) Allow the field to have a different value per locale. |
| Required field | Tick to prevent creating or saving an entry if the field is not filled in.    |
| Unique field   | Tick to prevent another field to be identical to this one.                    |
| Maximum length | Tick to define a maximum number of characters allowed.                        |
| Minimum length | Tick to define a minimum number of characters allowed.                        |

----------------------------------------

TITLE: Field Types Table in Markdown
DESCRIPTION: Table documenting various field types in Strapi and instructions for filling them

LANGUAGE: markdown
CODE:
| Field name  | Instructions |
| ----------- | ------------ |
| Text        | Write your content in the textbox. |
| Rich text (Markdown) | Write your textual content in the editor, in Markdown. Some basic formatting options available in top bar. |
| Rich text (Blocks) | Write and manage your content in the editor with live rendering. Paragraphs as blocks with reordering. |
| Number      | Write your number in the textbox. Use arrows to increase/decrease. |
| Date        | Click box and type or choose date/time from calendar. |
| Media       | Choose asset from Media Library or add new file. |
| Relation    | Choose entry from drop-down list. |
| Boolean     | Click TRUE or FALSE. |
| JSON        | Write content in JSON format. |
| Email       | Write valid email address. |
| Password    | Write password with show/hide option. |
| Enumeration | Choose entry from drop-down list. |
| UID         | Write unique identifier or auto-generate based on content type. |

----------------------------------------

TITLE: Setting Crawler Access Rules in robots.txt
DESCRIPTION: Defines web crawler access rules with specific instructions for Googlebot and a general rule for all other crawlers. Includes sitemap declaration for docs.strapi.io.

LANGUAGE: robots.txt
CODE:
User-agent: Googlebot
Disallow: /nogooglebot/

User-agent: *
Allow: /

Sitemap: https://docs.strapi.io/sitemap.xml

----------------------------------------

TITLE: Installing Dependencies for Strapi Website (Yarn)
DESCRIPTION: Installs the necessary dependencies for the Strapi website project using Yarn package manager.

LANGUAGE: bash
CODE:
$ yarn