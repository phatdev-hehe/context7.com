TITLE: RocketMQ Consumer Usage Pattern - Correct Implementation
DESCRIPTION: Demonstrates the recommended way to handle consumer lifecycle by creating a single reusable consumer instance. The consumer is built once and reused for multiple message receives, improving system efficiency.

LANGUAGE: java
CODE:
Consumer c = ConsumerBuilder.build();
for (int i =0;i<n;i++)
{
  Message m= c.receive();
  //process message
}
c.shutdown();

----------------------------------------

TITLE: Configuring Consistent Subscriptions in Java for Apache RocketMQ
DESCRIPTION: Demonstrates the correct way to configure consistent subscriptions for multiple consumers in the same consumer group. Both consumers subscribe to the same topic with the same tag filter.

LANGUAGE: java
CODE:
//Consumer c1
Consumer c1 = ConsumerBuilder.build(groupA);
c1.subscribe(topicA,"TagA");
//Consumer c2
Consumer c2 = ConsumerBuilder.build(groupA);
c2.subscribe(topicA,"TagA");

----------------------------------------

TITLE: Implementing Correct Producer Usage in Java
DESCRIPTION: Demonstrates the recommended way to create and use a producer by initializing once and reusing for multiple messages. This approach minimizes connection overhead and system load.

LANGUAGE: java
CODE:
Producer p = ProducerBuilder.build();
for (int i =0;i<n;i++)
{
  Message m= MessageBuilder.build();
  p.send(m);
}
p.shutdown();

----------------------------------------

TITLE: Synchronous Message Sending in RocketMQ with Java
DESCRIPTION: This code demonstrates how to send messages synchronously using RocketMQ. It includes creating a producer, setting the NameServer address, building messages, and sending them with error handling.

LANGUAGE: java
CODE:
public class SyncProducer {
  public static void main(String[] args) throws Exception {
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    for (int i = 0; i < 100; i++) {
      Message msg = new Message("TopicTest",
        "TagA",
        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET)
        );
      SendResult sendResult = producer.send(msg);
      System.out.printf("%s%n", sendResult);
    }
    producer.shutdown();
  }
}

----------------------------------------

TITLE: Implementing RocketMQ Transactional Message Producer
DESCRIPTION: Example implementation of a TransactionMQProducer that demonstrates how to send transactional messages and handle transaction status checks. Includes configuration of transaction listener and thread pool for status verification.

LANGUAGE: java
CODE:
public class TransactionProducer {
    public static void main(String[] args) throws MQClientException, InterruptedException {
        TransactionListener transactionListener = new TransactionListenerImpl();
        TransactionMQProducer producer = new TransactionMQProducer("please_rename_unique_group_name");
        ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {
            @Override
            public Thread newThread(Runnable r) {
                Thread thread = new Thread(r);
                thread.setName("client-transaction-msg-check-thread");
                return thread;
            }
        });

        producer.setExecutorService(executorService);
        producer.setTransactionListener(transactionListener);
        producer.start();

        String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};
        for (int i = 0; i < 10; i++) {
            try {
                Message msg =
                    new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));
                SendResult sendResult = producer.sendMessageInTransaction(msg, null);
                System.out.printf("%s%n", sendResult);

                Thread.sleep(10);
            } catch (MQClientException | UnsupportedEncodingException e) {
                e.printStackTrace();
            }
        }

        for (int i = 0; i < 100000; i++) {
            Thread.sleep(1000);
        }
        producer.shutdown();
    }

    static class TransactionListenerImpl implements TransactionListener {
        private AtomicInteger transactionIndex = new AtomicInteger(0);

        private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();

        @Override
        public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {
            int value = transactionIndex.getAndIncrement();
            int status = value % 3;
            localTrans.put(msg.getTransactionId(), status);
            return LocalTransactionState.UNKNOW;
        }

        @Override
        public LocalTransactionState checkLocalTransaction(MessageExt msg) {
            Integer status = localTrans.get(msg.getTransactionId());
            if (null != status) {
                switch (status) {
                    case 0:
                        return LocalTransactionState.UNKNOW;
                    case 1:
                        return LocalTransactionState.COMMIT_MESSAGE;
                    case 2:
                        return LocalTransactionState.ROLLBACK_MESSAGE;
                    default:
                        return LocalTransactionState.COMMIT_MESSAGE;
                }
            }
            return LocalTransactionState.COMMIT_MESSAGE;
        }
    }
}

----------------------------------------

TITLE: Implementing Ordered Message Producer in Java with RocketMQ
DESCRIPTION: Example implementation of a RocketMQ producer that sends ordered messages using MessageQueueSelector. The code demonstrates how to ensure messages with the same orderId are sent to the same queue, maintaining FIFO order.

LANGUAGE: java
CODE:
public class Producer {
    public static void main(String[] args) throws UnsupportedEncodingException {
        try {
            DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
            producer.start();

            String[] tags = new String[] {"TagA", "TagB", "TagC", "TagD", "TagE"};
            for (int i = 0; i < 100; i++) {
                int orderId = i % 10;
                Message msg =
                    new Message("TopicTest", tags[i % tags.length], "KEY" + i,
                        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET));
                SendResult sendResult = producer.send(msg, new MessageQueueSelector() {
                    @Override
                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
                        Integer id = (Integer) arg;
                        int index = id % mqs.size();
                        return mqs.get(index);
                    }
                }, orderId);

                System.out.printf("%s%n", sendResult);
            }

            producer.shutdown();
        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {
            e.printStackTrace();
        }
    }

----------------------------------------

TITLE: Java Implementation of FIFO Message Producer and Consumer
DESCRIPTION: Example code showing how to send and receive ordered messages in Java using RocketMQ. Includes message building, sending, and both PushConsumer and SimpleConsumer implementations.

LANGUAGE: java
CODE:
        MessageBuilder messageBuilder = null;
        Message message = messageBuilder.setTopic("topic")
                .setKeys("messageKey")
                .setTag("messageTag")
                .setMessageGroup("fifoGroup001")
                .setBody("messageBody".getBytes())
                .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            System.out.println(sendReceipt.getMessageId());
        } catch (ClientException e) {
            e.printStackTrace();
        }
        MessageListener messageListener = new MessageListener() {
            @Override
            public ConsumeResult consume(MessageView messageView) {
                System.out.println(messageView);
                return ConsumeResult.SUCCESS;
            }
        };
        List<MessageView> messageViewList = null;
        try {
            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
            messageViewList.forEach(messageView -> {
                System.out.println(messageView);
                try {
                    simpleConsumer.ack(messageView);
                } catch (ClientException e) {
                    e.printStackTrace();
                }
            });
        } catch (ClientException e) {
            e.printStackTrace();
        }

----------------------------------------

TITLE: Initializing and Using PushConsumer in Java
DESCRIPTION: This code snippet demonstrates how to initialize and use a PushConsumer in Apache RocketMQ. It shows setting up the consumer group, endpoint, subscription, and message listener.

LANGUAGE: java
CODE:
// Message consumption example: Use a PushConsumer consumer to consume messages. 
ClientServiceProvider provider = ClientServiceProvider.loadService();
String topic = "YourTopic";
FilterExpression filterExpression = new FilterExpression("YourFilterTag", FilterExpressionType.TAG);
PushConsumer pushConsumer = provider.newPushConsumerBuilder()
    // Configure consumer group. 
    .setConsumerGroup("YourConsumerGroup")
    // Specify the access point. 
    .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints("YourEndpoint").build())
    // Specify the pre-bound subscriptions. 
    .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
    // Set the message listener. 
    .setMessageListener(new MessageListener() {
        @Override
        public ConsumeResult consume(MessageView messageView) {
            // Consume the messages and return the consumption result. 
            return ConsumeResult.SUCCESS;
        }
    })
    .build();    

----------------------------------------

TITLE: Implementing Delay Message Handling in Java
DESCRIPTION: Complete Java example showing how to send and consume delay messages, including message building, delivery timestamp setting, and consumption handling using both push consumer and simple consumer approaches.

LANGUAGE: java
CODE:
        MessageBuilder messageBuilder = null;
        Long deliverTimeStamp = System.currentTimeMillis() + 10L * 60 * 1000;
        Message message = messageBuilder.setTopic("topic")
                .setKeys("messageKey")
                .setTag("messageTag")
                .setDeliveryTimestamp(deliverTimeStamp)
                .setBody("messageBody".getBytes())
                .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            System.out.println(sendReceipt.getMessageId());
        } catch (ClientException e) {
            e.printStackTrace();
        }
        MessageListener messageListener = new MessageListener() {
            @Override
            public ConsumeResult consume(MessageView messageView) {
                System.out.println(messageView.getDeliveryTimestamp());
                return ConsumeResult.SUCCESS;
            }
        };
        List<MessageView> messageViewList = null;
        try {
            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
            messageViewList.forEach(messageView -> {
                System.out.println(messageView);
                try {
                    simpleConsumer.ack(messageView);
                } catch (ClientException e) {
                    e.printStackTrace();
                }
            });
        } catch (ClientException e) {
            e.printStackTrace();
        }
    }

----------------------------------------

TITLE: Installing RocketMQ from Source
DESCRIPTION: Commands to download, extract, and compile RocketMQ from source code using Maven.

LANGUAGE: shell
CODE:
$ unzip rocketmq-all-4.9.4-source-release.zip
$ cd rocketmq-all-4.9.4-source-release/
$ mvn -Prelease-all -DskipTests clean install -U
$ cd distribution/target/rocketmq-4.9.4/rocketmq-4.9.4

----------------------------------------

TITLE: Implementing RocketMQ Consumer in Java
DESCRIPTION: Java code example for creating a RocketMQ consumer that subscribes to messages using the push consumption mode. Includes consumer initialization, topic subscription, and message processing.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
import org.apache.rocketmq.common.message.MessageExt;

import java.util.List;

public class ConsumerExample {
    public static void main(String[] args) throws Exception {
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
        consumer.setNamesrvAddr("localhost:9876");
        consumer.subscribe("TestTopic", "*");

        consumer.registerMessageListener(new MessageListenerConcurrently() {
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.println("Received message: " + new String(msg.getBody()));
                }
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });

        consumer.start();
        System.out.println("Consumer started.");
    }
}

----------------------------------------

TITLE: Asynchronous Message Sending in RocketMQ using Java
DESCRIPTION: This Java code illustrates asynchronous message sending in RocketMQ. It sets up a producer, defines a callback interface for handling send results, and sends messages asynchronously. It uses a CountDownLatch to wait for all messages to be sent before shutting down.

LANGUAGE: java
CODE:
public class AsyncProducer {
  public static void main(String[] args) throws Exception {
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    producer.setRetryTimesWhenSendAsyncFailed(0);
    int messageCount = 100;
    final CountDownLatch countDownLatch = new CountDownLatch(messageCount);
    for (int i = 0; i < messageCount; i++) {
      try {
        final int index = i;
        Message msg = new Message("TopicTest",
          "TagA",
          "Hello world".getBytes(RemotingHelper.DEFAULT_CHARSET));
        producer.send(msg, new SendCallback() {
          @Override
          public void onSuccess(SendResult sendResult) {
            System.out.printf("%-10d OK %s %n", index, sendResult.getMsgId());
            countDownLatch.countDown();
          }
          @Override
          public void onException(Throwable e) {
            System.out.printf("%-10d Exception %s %n", index, e);
            e.printStackTrace();
            countDownLatch.countDown();
          }
        });
      } catch (Exception e) {
        e.printStackTrace();
        countDownLatch.countDown();
      }
    }
    countDownLatch.await(5, TimeUnit.SECONDS);
    producer.shutdown();
  }
}

----------------------------------------

TITLE: Initializing and Using SimpleConsumer in Java
DESCRIPTION: This code snippet shows how to initialize and use a SimpleConsumer in Apache RocketMQ. It demonstrates setting up the consumer, receiving messages, and acknowledging consumption.

LANGUAGE: java
CODE:
// Consumption example: When a SimpleConsumer consumer consumes normal messages, the consumer obtain messages and commit message consumption results. 
ClientServiceProvider provider = ClientServiceProvider.loadService();
String topic = "YourTopic";
FilterExpression filterExpression = new FilterExpression("YourFilterTag", FilterExpressionType.TAG);
SimpleConsumer simpleConsumer = provider.newSimpleConsumerBuilder()
        // Configure consumer group.
        .setConsumerGroup("YourConsumerGroup")
        // Specify the access point. 
        .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints("YourEndpoint").build())
        // Specify the pre-bound subscriptions. 
        .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
        // Specify the max await time when receive messages from the server.
        .setAwaitDuration(Duration.ofSeconds(1))
        .build();
try {
    // A SimpleConsumer consumer must obtain and process messages. 
    List<MessageView> messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
    messageViewList.forEach(messageView -> {
        System.out.println(messageView);
        // After consumption is complete, the consumer must invoke ACK to submit the consumption result. 
        try {
            simpleConsumer.ack(messageView);
        } catch (ClientException e) {
            logger.error("Failed to ack message, messageId={}", messageView.getMessageId(), e);
        }
    });
} catch (ClientException e) {
    // If the pull fails due to system traffic throttling or other reasons, the consumer must re-initiate the request to obtain the message. 
    logger.error("Failed to receive message", e);
}

----------------------------------------

TITLE: Basic Push Consumer Implementation in Java
DESCRIPTION: Demonstrates how to initialize and configure a basic RocketMQ push consumer with message listener implementation. Includes consumer group setup, NameServer configuration, and topic subscription.

LANGUAGE: java
CODE:
public class Consumer {
  public static void main(String[] args) throws InterruptedException, MQClientException {
    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
    consumer.setNamesrvAddr("localhost:9876");
    consumer.subscribe("TopicTest", "*");
    consumer.registerMessageListener(new MessageListenerConcurrently() {
      @Override
      public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
        System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
      }
    });
    consumer.start();
    System.out.printf("Consumer Started.%n");
  }
}

----------------------------------------

TITLE: Initializing RocketMQ Push Consumer - Java
DESCRIPTION: Basic implementation of RocketMQ Push Consumer showing initialization, topic subscription, and message handling through callback interface. Demonstrates concurrent message consumption pattern.

LANGUAGE: java
CODE:
public class Consumer {
  public static void main(String[] args) throws InterruptedException, MQClientException {
    // Initialize Consumer and set Consumer Goup Name
    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
   
    // Set the address of NameServer 
    consumer.setNamesrvAddr("localhost:9876");
    // Subscribe One or more of topics，and specify the tag filtering conditions, here specify * means receive all tag messages
    consumer.subscribe("TopicTest", "*");
    // Register a callback interface to handle messages received from the Broker
    consumer.registerMessageListener(new MessageListenerConcurrently() {
      @Override
      public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
        System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
        // Return to the message consumption status, ConsumeConcurrentlyStatus.CONSUME_SUCCESS for successful consumption
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
      }
    });
    // Start Consumer
    consumer.start();
    System.out.printf("Consumer Started.%n");
  }
}

----------------------------------------

TITLE: Asynchronous Message Sending in RocketMQ with Java
DESCRIPTION: This code shows how to send messages asynchronously using RocketMQ. It includes creating a producer, setting up a callback interface, and handling success and exception scenarios.

LANGUAGE: java
CODE:
public class AsyncProducer {
  public static void main(String[] args) throws Exception {
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    producer.setRetryTimesWhenSendAsyncFailed(0);
    int messageCount = 100;
    final CountDownLatch countDownLatch = new CountDownLatch(messageCount);
    for (int i = 0; i < messageCount; i++) {
      try {
          final int index = i;
          Message msg = new Message("TopicTest",
            "TagA",
            "Hello world".getBytes(RemotingHelper.DEFAULT_CHARSET));
          producer.send(msg, new SendCallback() {
            @Override
            public void onSuccess(SendResult sendResult) {
              System.out.printf("%-10d OK %s %n", index,
                sendResult.getMsgId());
              countDownLatch.countDown();
            }
            @Override
            public void onException(Throwable e) {
              System.out.printf("%-10d Exception %s %n", index, e);
              e.printStackTrace();
              countDownLatch.countDown();
            }
          });
        } catch (Exception e) {
            e.printStackTrace();
            countDownLatch.countDown();
        }
    }
    countDownLatch.await(5, TimeUnit.SECONDS);
    producer.shutdown();
  }
}

----------------------------------------

TITLE: Implementing Message-Based Load Balancing for Simple Consumers in Java
DESCRIPTION: This code snippet demonstrates how to implement message-based load balancing for simple consumers in Apache RocketMQ. It shows two consumption examples: one using a message listener for push consumers, and another for simple consumers to receive and acknowledge messages.

LANGUAGE: java
CODE:
        SimpleConsumer simpleConsumer = null;
        // Consumption example 1: When push consumers consume normal messages, they need only to process messages on a message listener and do not need to consider load balancing. 
        MessageListener messageListener = new MessageListener() {
            @Override
            public ConsumeResult consume(MessageView messageView) {
                System.out.println(messageView);
                // Return the status based on the consumption result. 
                return ConsumeResult.SUCCESS;
            }
        };
        // Consumption example 2: When simple consumers consume normal messages, they obtain and submit messages. The consumers obtain messages based on the subscribed topic and do not need to consider load balancing. 
        List<MessageView> messageViewList = null;
        try {
            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
            messageViewList.forEach(messageView -> {
                System.out.println(messageView);
                // After consumption is complete, consumers must invoke ACK to submit the consumption result. 
                try {
                    simpleConsumer.ack(messageView);
                } catch (ClientException e) {
                    e.printStackTrace();
                }
            });
        } catch (ClientException e) {
            // If the pull fails due to system traffic throttling or other reasons, consumers must re-initiate the request to obtain the message. 
            e.printStackTrace();
        }

----------------------------------------

TITLE: Implementing PushConsumer Retry Logic in Java
DESCRIPTION: Example showing how to implement message retry logic using a PushConsumer with a MessageListener. The consumer is configured to retry failed messages until the maximum retry limit is reached.

LANGUAGE: java
CODE:
        SimpleConsumer simpleConsumer = null;
        // Consumption example: Consume normal messages as a push consumer and trigger a message retry by using a consumption failure. 
        MessageListener messageListener = new MessageListener() {
            @Override
            public ConsumeResult consume(MessageView messageView) {
                System.out.println(messageView);
                // Retry the message until the maximum number of retries is reached. 
                return ConsumeResult.FAILURE;
            }
        };

----------------------------------------

TITLE: RocketMQ Order Consumption Implementation - Java
DESCRIPTION: Implementation of ordered message consumption using MessageListenerOrderly interface. Shows how to handle messages in sequence with different consumption statuses.

LANGUAGE: java
CODE:
consumer.registerMessageListener(new MessageListenerOrderly() {
            AtomicLong consumeTimes = new AtomicLong(0);
            @Override
            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {
                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                this.consumeTimes.incrementAndGet();
                if ((this.consumeTimes.get() % 2) == 0) {
                    return ConsumeOrderlyStatus.SUCCESS;
                } else if ((this.consumeTimes.get() % 5) == 0) {
                    context.setSuspendCurrentQueueTimeMillis(3000);
                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;
                }
                return ConsumeOrderlyStatus.SUCCESS;
            }
        });

----------------------------------------

TITLE: Implementing RocketMQ Producer in Java
DESCRIPTION: This Java code snippet shows how to implement a RocketMQ producer using the Java SDK. It demonstrates configuring the client, building a message, and sending it to a specified topic. The code includes error handling and logging.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProducerExample {
    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);

    public static void main(String[] args) throws ClientException {
        String endpoint = "localhost:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
            .setTopics(topic)
            .setClientConfiguration(configuration)
            .build();
        Message message = provider.newMessageBuilder()
            .setTopic(topic)
            .setKeys("messageKey")
            .setTag("messageTag")
            .setBody("messageBody".getBytes())
            .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            logger.info("Send message successfully, messageId={}", sendReceipt.getMessageId());
        } catch (ClientException e) {
            logger.error("Failed to send message", e);
        }
        // producer.close();
    }
}

----------------------------------------

TITLE: Subscribing to a Single Topic and Tag in RocketMQ (Java)
DESCRIPTION: This code snippet demonstrates how to create a consumer that subscribes to a single topic ('TopicA') and tag ('Tag1') in RocketMQ. It sets up the consumer properties, creates the consumer instance, and defines a message listener for processing received messages.

LANGUAGE: java
CODE:
    Properties properties = new Properties();
    properties.put(PropertyKeyConst.GROUP_ID, "GID_test_1");
    Consumer consumer = ONSFactory.createConsumer(properties);
    consumer.subscribe("TopicA", "Tag1", new MessageListener() {
        public Action consume(Message message, ConsumeContext context) {
            System.out.println(message.getMsgID());
            return Action.CommitMessage;
        }
    });

----------------------------------------

TITLE: Implementing SimpleConsumer Retry Logic in Java
DESCRIPTION: Example demonstrating message retry handling with a SimpleConsumer that allows messages to timeout naturally for automatic retry by the broker.

LANGUAGE: java
CODE:
 // Consumption example: Consume normal messages as a simple consumer. If you want a message to be retried, do not process the message. Wait for it to time out, and the broker retries it automatically. 
        List<MessageView> messageViewList = null;
        try {
            messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
            messageViewList.forEach(messageView -> {
                System.out.println(messageView);
                // If you want a message to be retried after it fails to be consumed, ignore the failure and wait for the message to be visible. Then try to obtain it again from the broker. 
            });
        } catch (ClientException e) {
            // If the message fails to be pulled due to throttling or other reasons, you must re-initiate the request to obtain the message. 
            e.printStackTrace();
        }

----------------------------------------

TITLE: Implementing RocketMQ Push Consumer in Java
DESCRIPTION: This Java code snippet demonstrates how to implement a RocketMQ push consumer using the Java SDK. It shows client configuration, setting up subscription expressions, and implementing a message listener for processing received messages.

LANGUAGE: java
CODE:
import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.consumer.ConsumeResult;
import org.apache.rocketmq.client.apis.consumer.FilterExpression;
import org.apache.rocketmq.client.apis.consumer.FilterExpressionType;
import org.apache.rocketmq.client.apis.consumer.PushConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushConsumerExample {
    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);

    private PushConsumerExample() {
    }

    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "localhost:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
            .setEndpoints(endpoints)
            .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "YourConsumerGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
            .setClientConfiguration(clientConfiguration)
            .setConsumerGroup(consumerGroup)
            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
            .setMessageListener(messageView -> {
                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());
                return ConsumeResult.SUCCESS;
            })
            .build();
        Thread.sleep(Long.MAX_VALUE);
        // pushConsumer.close();
    }
}

----------------------------------------

TITLE: Sending Messages with RocketMQ Java SDK
DESCRIPTION: Java code example demonstrating how to send messages using the RocketMQ Java client SDK.

LANGUAGE: java
CODE:
import java.io.IOException;
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProducerExample {
    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);

    public static void main(String[] args) throws ClientException, IOException {
        String endpoint = "localhost:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
            .setTopics(topic)
            .setClientConfiguration(configuration)
            .build();
        Message message = provider.newMessageBuilder()
            .setTopic(topic)
            .setKeys("messageKey")
            .setTag("messageTag")
            .setBody("messageBody".getBytes())
            .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            logger.info("Send message successfully, messageId={}", sendReceipt.getMessageId());
        } catch (ClientException e) {
            logger.error("Failed to send message", e);
        }
        // producer.close();
    }
}

----------------------------------------

TITLE: Implementing Word Count Stream Processing with RocketMQ Streams in Java
DESCRIPTION: This Java code demonstrates how to create a word count stream processing application using RocketMQ Streams. It sets up a stream builder, defines the processing logic, and configures the RocketMQ connection. The program reads from a source topic, splits messages into words, counts their occurrences, and prints the results.

LANGUAGE: java
CODE:
public class WordCount {
    public static void main(String[] args) {
        StreamBuilder builder = new StreamBuilder("wordCount");

        builder.source("sourceTopic", total -> {
                    String value = new String(total, StandardCharsets.UTF_8);
                    return new Pair<>(null, value);
                })
                .flatMap((ValueMapperAction<String, List<String>>) value -> {
                    String[] splits = value.toLowerCase().split("\\W+");
                    return Arrays.asList(splits);
                })
                .keyBy(value -> value)
                .count()
                .toRStream()
                .print();

        TopologyBuilder topologyBuilder = builder.build();

        Properties properties = new Properties();
        properties.put(MixAll.NAMESRV_ADDR_PROPERTY, "127.0.0.1:9876");

        RocketMQStream rocketMQStream = new RocketMQStream(topologyBuilder, properties);

        final CountDownLatch latch = new CountDownLatch(1);

        Runtime.getRuntime().addShutdownHook(new Thread("wordcount-shutdown-hook") {
            @Override
            public void run() {
                rocketMQStream.stop();
                latch.countDown();
            }
        });

        try {
            rocketMQStream.start();
            latch.await();
        } catch (final Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}

----------------------------------------

TITLE: Consuming Messages with RocketMQ Java SDK
DESCRIPTION: Java code example demonstrating how to consume messages using the RocketMQ Java client SDK with a PushConsumer.

LANGUAGE: java
CODE:
import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.consumer.ConsumeResult;
import org.apache.rocketmq.client.apis.consumer.FilterExpression;
import org.apache.rocketmq.client.apis.consumer.FilterExpressionType;
import org.apache.rocketmq.client.apis.consumer.PushConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushConsumerExample {
    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);

    private PushConsumerExample() {
    }

    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "localhost:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
            .setEndpoints(endpoints)
            .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "YourConsumerGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
            .setClientConfiguration(clientConfiguration)
            .setConsumerGroup(consumerGroup)
            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
            .setMessageListener(messageView -> {
                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());
                return ConsumeResult.SUCCESS;
            })
            .build();
        Thread.sleep(Long.MAX_VALUE);
        // pushConsumer.close();
    }
}

----------------------------------------

TITLE: Implementing Word Count Stream Processing with RocketMQ Streams
DESCRIPTION: This Java code demonstrates how to create a word count stream processing application using RocketMQ Streams. It sets up a stream builder, defines the processing logic, and configures the RocketMQ connection properties. The program reads from a source topic, splits the input into words, counts their occurrences, and prints the results.

LANGUAGE: java
CODE:
public class WordCount {
    public static void main(String[] args) {
        StreamBuilder builder = new StreamBuilder("wordCount");

        builder.source("sourceTopic", total -> {
                    String value = new String(total, StandardCharsets.UTF_8);
                    return new Pair<>(null, value);
                })
                .flatMap((ValueMapperAction<String, List<String>>) value -> {
                    String[] splits = value.toLowerCase().split("\\W+");
                    return Arrays.asList(splits);
                })
                .keyBy(value -> value)
                .count()
                .toRStream()
                .print();

        TopologyBuilder topologyBuilder = builder.build();

        Properties properties = new Properties();
        properties.put(MixAll.NAMESRV_ADDR_PROPERTY, "127.0.0.1:9876");

        RocketMQStream rocketMQStream = new RocketMQStream(topologyBuilder, properties);

        final CountDownLatch latch = new CountDownLatch(1);

        Runtime.getRuntime().addShutdownHook(new Thread("wordcount-shutdown-hook") {
            @Override
            public void run() {
                rocketMQStream.stop();
                latch.countDown();
            }
        });

        try {
            rocketMQStream.start();
            latch.await();
        } catch (final Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}

----------------------------------------

TITLE: Sending and Receiving Normal Messages in Apache RocketMQ using Java
DESCRIPTION: This code snippet illustrates how to send and receive normal messages in Apache RocketMQ using Java. It covers message creation, sending, and two consumption examples using push consumer and simple consumer.

LANGUAGE: java
CODE:
// Send a normal message. 
  MessageBuilder messageBuilder = new MessageBuilder();
  Message message = messageBuilder.setTopic("topic")
  // Specify the message index key so that you can accurately search for the message by using a keyword.
  .setKeys("messageKey")
  // Specify the message tag so that the consumer can filter the message based on the specified tag.
  .setTag("messageTag")
  // Message body. 
  .setBody("messageBody".getBytes())
  .build();
  try {
    // Send the message. You need to pay attention to the sending result and capture exceptions such as failures. 
    SendReceipt sendReceipt = producer.send(message);
    System.out.println(sendReceipt.getMessageId());
  } catch (ClientException e) {
      e.printStackTrace();
  }
  // Consumption example 1: When you consume a normal message as a push consumer, you need only to process the message in the message listener. 
  MessageListener messageListener = new MessageListener() {
      @Override
      public ConsumeResult consume(MessageView messageView) {
          System.out.println(messageView);
          // Return the status based on the consumption result. 
          return ConsumeResult.SUCCESS;
      }
  };
  // Consumption example 2: When you consume a normal message as a simple consumer, you must obtain and consume the message, and submit the consumption result. 
  List<MessageView> messageViewList = null;
  try {
      messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));
      messageViewList.forEach(messageView -> {
          System.out.println(messageView);
          // After consumption is complete, you must invoke ACK to submit the consumption result. 
          try {
              simpleConsumer.ack(messageView);
          } catch (ClientException e) {
              e.printStackTrace();
          }
      });
      } catch (ClientException e) {
      // If the pull fails due to system traffic throttling or other reasons, you must re-initiate the request to obtain the message. 
      e.printStackTrace();
  }

----------------------------------------

TITLE: Setting NameServer Address for RocketMQ Clients (Java)
DESCRIPTION: Shows how to set the NameServer address for RocketMQ producers and consumers in Java code. This is essential for clients to locate brokers.

LANGUAGE: java
CODE:
producer.setNamesrvAddr("192.168.0.1:9876;192.168.0.2:9876");  

consumer.setNamesrvAddr("192.168.0.1:9876;192.168.0.2:9876");

----------------------------------------

TITLE: Starting Multiple Master RocketMQ Deployment
DESCRIPTION: Commands for deploying a multiple master RocketMQ cluster setup. This configuration provides better availability and performance compared to single master mode.

LANGUAGE: bash
CODE:
### Start Name Server first
$ nohup sh mqnamesrv &
 
### Verify if the Name Server has started successfully
$ tail -f ~/logs/rocketmqlogs/namesrv.log

LANGUAGE: bash
CODE:
### On machine A, start the first Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties &
 
### On machine B, start the second Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties &

----------------------------------------

TITLE: Setting Name Server Address in Java Code for RocketMQ Clients
DESCRIPTION: Demonstrates how to specify the Name Server address directly in Java code for both producers and consumers. Multiple addresses can be provided, separated by semicolons.

LANGUAGE: java
CODE:
producer.setNamesrvAddr("192.168.0.1:9876;192.168.0.2:9876");  

consumer.setNamesrvAddr("192.168.0.1:9876;192.168.0.2:9876");

----------------------------------------

TITLE: One-Way Message Sending in RocketMQ with Java
DESCRIPTION: This code demonstrates how to send messages using the one-way method in RocketMQ. It includes creating a producer and sending messages without waiting for a response or handling callbacks.

LANGUAGE: java
CODE:
public class OnewayProducer {
  public static void main(String[] args) throws Exception{
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    for (int i = 0; i < 100; i++) {
      Message msg = new Message("TopicTest",
        "TagA",
        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET)
      );
      producer.sendOneway(msg);
    }
     producer.shutdown();
  }
}

----------------------------------------

TITLE: Handling Message Accumulation in RocketMQ Consumer (Java)
DESCRIPTION: Demonstrates a strategy to handle message accumulation by skipping non-important messages when the queue offset difference exceeds a threshold.

LANGUAGE: java
CODE:
    public ConsumeConcurrentlyStatus consumeMessage(
            List<MessageExt> msgs,
            ConsumeConcurrentlyContext context) {
        long offset = msgs.get(0).getQueueOffset();
        String maxOffset =
                msgs.get(0).getProperty(Message.PROPERTY_MAX_OFFSET);
        long diff = Long.parseLong(maxOffset) - offset;
        if (diff > 100000) {
            // TODO Special handling of message stacking cases
            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
        }
        // TODO Normal consumption process
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
    }    

----------------------------------------

TITLE: Starting Master-Slave Sync RocketMQ Deployment
DESCRIPTION: Commands for deploying a master-slave RocketMQ cluster with synchronous dual writes. This configuration ensures highest data consistency but with slightly lower performance.

LANGUAGE: bash
CODE:
### Start Name Server first
$ nohup sh mqnamesrv &
 
### Verify that the Name Server has started successfully.
$ tail -f ~/logs/rocketmqlogs/namesrv.log

LANGUAGE: bash
CODE:
### On machine A, start the first Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a.properties &
 
### On machine A, start the second Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b.properties &
 
### On machine C, start the first slave
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a-s.properties &
 
### On machine D, start the second slave
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b-s.properties &

----------------------------------------

TITLE: Configuring RocketMQ Services with Docker Compose
DESCRIPTION: This YAML configuration defines three services for RocketMQ: namesrv (name server), broker, and proxy. It specifies the Docker image, container names, port mappings, network settings, and environment variables for each service.

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  namesrv:
    image: apache/rocketmq:5.3.1
    container_name: rmqnamesrv
    ports:
      - 9876:9876
    networks:
      - rocketmq
    command: sh mqnamesrv
  broker:
    image: apache/rocketmq:5.3.1
    container_name: rmqbroker
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
    depends_on:
      - namesrv
    networks:
      - rocketmq
    command: sh mqbroker
  proxy:
    image: apache/rocketmq:5.3.1
    container_name: rmqproxy
    networks:
      - rocketmq
    depends_on:
      - broker
      - namesrv
    ports:
      - 8080:8080
      - 8081:8081
    restart: on-failure
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
    command: sh mqproxy
networks:
  rocketmq:
    driver: bridge

----------------------------------------

TITLE: Configuring Broker Properties for ACL in RocketMQ
DESCRIPTION: This snippet shows the configuration properties for enabling ACL on a RocketMQ Broker. It includes settings for cluster name, broker details, and the crucial 'aclEnable' flag.

LANGUAGE: properties
CODE:
brokerClusterName=DefaultCluster
brokerName=broker-a
brokerId=0
deleteWhen=04
fileReservedTime=48
brokerRole=ASYNC_MASTER
flushDiskType=ASYNC_FLUSH
storePathRootDir=/data/rocketmq/rootdir-a-m
storePathCommitLog=/data/rocketmq/commitlog-a-m
autoCreateSubscriptionGroup=true
## if acl is open,the flag will be true
aclEnable=true
listenPort=10911
brokerIP1=XX.XX.XX.XX1
namesrvAddr=XX.XX.XX.XX:9876

----------------------------------------

TITLE: Sending Scheduled Messages with Apache RocketMQ in Java
DESCRIPTION: This code demonstrates how to send scheduled messages using Apache RocketMQ. It creates a producer, sends 100 messages with a 10-second delay, and then shuts down the producer. The delay is set using the setDelayTimeLevel method.

LANGUAGE: java
CODE:
public class ScheduledMessageProducer {
    public static void main(String[] args) throws Exception {
        // Instantiate a producer to send scheduled messages
        DefaultMQProducer producer = new DefaultMQProducer("ExampleProducerGroup");
        // Launch producer
        producer.start();
        int totalMessagesToSend = 100;
        for (int i = 0; i < totalMessagesToSend; i++) {
            Message message = new Message("TestTopic", ("Hello scheduled message " + i).getBytes());
            // This message will be delivered to consumer 10 seconds later.
            message.setDelayTimeLevel(3);
            // Send the message
            producer.send(message);
        }
        
        // Shutdown producer after use.
        producer.shutdown();
    }
    
}

----------------------------------------

TITLE: Implementing Word Count with RocketMQ Streams in Java
DESCRIPTION: This Java code demonstrates a word count application using RocketMQ Streams. It processes input from a source topic, splits text into words, counts their occurrences, and prints the results. The program also includes shutdown handling and error management.

LANGUAGE: java
CODE:
public class WordCount {
    public static void main(String[] args) {
        StreamBuilder builder = new StreamBuilder("wordCount");

        builder.source("sourceTopic", total -> {
                    String value = new String(total, StandardCharsets.UTF_8);
                    return new Pair<>(null, value);
                })
                .flatMap((ValueMapperAction<String, List<String>>) value -> {
                    String[] splits = value.toLowerCase().split("\\W+");
                    return Arrays.asList(splits);
                })
                .keyBy(value -> value)
                .count()
                .toRStream()
                .print();

        TopologyBuilder topologyBuilder = builder.build();

        Properties properties = new Properties();
        properties.put(MixAll.NAMESRV_ADDR_PROPERTY, "127.0.0.1:9876");

        RocketMQStream rocketMQStream = new RocketMQStream(topologyBuilder, properties);

        final CountDownLatch latch = new CountDownLatch(1);

        Runtime.getRuntime().addShutdownHook(new Thread("wordcount-shutdown-hook") {
            @Override
            public void run() {
                rocketMQStream.stop();
                latch.countDown();
            }
        });

        try {
            rocketMQStream.start();
            latch.await();
        } catch (final Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }
}

----------------------------------------

TITLE: MessageListenerConcurrently Interface Definition - Java
DESCRIPTION: Interface definition for concurrent message consumption in RocketMQ, showing the contract for handling asynchronously delivered messages.

LANGUAGE: java
CODE:
public interface MessageListenerConcurrently extends MessageListener {
    ConsumeConcurrentlyStatus consumeMessage(final List<MessageExt> msgs,
        final ConsumeConcurrentlyContext context);
}

----------------------------------------

TITLE: Creating a Topic with Message Type in Apache RocketMQ 5.0
DESCRIPTION: This command uses the mqadmin tool to create or update a topic in Apache RocketMQ 5.0. It demonstrates how to specify a message type for the topic, which is a new feature in version 5.0. The message type can be set to Normal, FIFO, Delay, or Transaction.

LANGUAGE: shell
CODE:
sh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=<message_type>

----------------------------------------

TITLE: Logging Consumed Messages in RocketMQ Java Consumer
DESCRIPTION: This snippet demonstrates how to implement a MessageListener that logs consumed messages. It's recommended for debugging and troubleshooting, especially when dealing with a small number of messages or investigating slow consumption issues.

LANGUAGE: java
CODE:
new MessageListener() {
    @Override
    public ConsumeResult consume(MessageView messageView) {
        LOGGER.info("Consume message={}", messageView);
        //Do your consume process
        return ConsumeResult.SUCCESS;
    }
}

----------------------------------------

TITLE: Sending Transactional Messages in Java with Apache RocketMQ
DESCRIPTION: This Java code example demonstrates how to send transactional messages using Apache RocketMQ. It includes setting up a transaction checker, creating a producer, sending a half message, and handling the local transaction execution.

LANGUAGE: java
CODE:
    // The demo is used to simulate the order table query service to check whether the order transaction is submitted. 
    private static boolean checkOrderById(String orderId) {
        return true;
    }
    // The demo is used to simulate the execution result of a local transaction. 
    private static boolean doLocalTransaction() {
        return true;
    }
    public static void main(String[] args) throws ClientException {
        ClientServiceProvider provider = new ClientServiceProvider();
        MessageBuilder messageBuilder = new MessageBuilder();
        // Build a transaction producer: The transactional message requires the producer to build a transaction checker to check the intermediate status of an exceptional half message. 
        Producer producer = provider.newProducerBuilder()
                .setTransactionChecker(messageView -> {
                    /**
                     * The transaction checker checks whether the local transaction is correctly committed or rolled back based on the business ID, for example, an order ID. 
                     * If this order is found in the order table, the order insertion action is committed correctly by the local transaction. If no order is found in the order table, the local transaction has been rolled back. 
                     */
                    final String orderId = messageView.getProperties().get("OrderId");
                    if (Strings.isNullOrEmpty(orderId)) {
                        // Message error. Rollback is returned. 
                        return TransactionResolution.ROLLBACK;
                    }
                    return checkOrderById(orderId) ? TransactionResolution.COMMIT : TransactionResolution.ROLLBACK;
                })
                .build();
        // Create a transaction branch. 
        final Transaction transaction;
        try {
            transaction = producer.beginTransaction();
        } catch (ClientException e) {
            e.printStackTrace();
            // If the transaction branch fails to be created, the transaction is terminated. 
            return;
        }
        Message message = messageBuilder.setTopic("topic")
                // Specify the message index key so that the system can use a keyword to accurately locate the message. 
                .setKeys("messageKey")
                // Specify the message tag so that consumers can use the tag to filter the message. 
                .setTag("messageTag")
                // For transactional messages, a unique ID associated with the local transaction is created to verify the query of the local transaction status. 
                .addProperty("OrderId", "xxx")
                // Message body. 
                .setBody("messageBody".getBytes())
                .build();
        // Send a half message.
        final SendReceipt sendReceipt;
        try {
            sendReceipt = producer.send(message, transaction);
        } catch (ClientException e) {
            // If the half message fails to be sent, the transaction can be terminated and the message is rolled back. 
            return;
        }
        /**
         * Execute the local transaction and check the execution result. 
         * 1. If the result is Commit, deliver the message. 
         * 2. If the result is Rollback, roll back the message. 
         * 3. If an unknown exception occurs, no action is performed until a response is obtained from a half message status query. 
         *
         */
        boolean localTransactionOk = doLocalTransaction();
        if (localTransactionOk) {
            try {
                transaction.commit();
            } catch (ClientException e) {
                // You can determine whether to retry the message based on your business requirements. If you do not want to retry the message, you can use the half message status query to submit the transaction status. 
                e.printStackTrace();
            }
        } else {
            try {
                transaction.rollback();
            } catch (ClientException e) {
                // We recommend that you record the exception information. This enables you to submit the transaction status based on the half message status query in the event of a rollback exception. Otherwise, you have to retry the message. 
                e.printStackTrace();
            }
        }
    }

----------------------------------------

TITLE: Logging Consumed Messages in RocketMQ Java Consumer
DESCRIPTION: This snippet demonstrates how to implement a MessageListener that logs consumed messages. It's recommended for debugging and troubleshooting, especially when dealing with a small number of messages or investigating slow consumption issues.

LANGUAGE: java
CODE:
new MessageListener() {
    @Override
    public ConsumeResult consume(MessageView messageView) {
        LOGGER.info("Consume message={}", messageView);
        //Do your consume process
        return ConsumeResult.SUCCESS;
    }
}

----------------------------------------

TITLE: Starting Master-Slave Async RocketMQ Deployment
DESCRIPTION: Commands for setting up a master-slave RocketMQ cluster with asynchronous replication. This configuration provides high availability with minimal message delay.

LANGUAGE: bash
CODE:
### Start Name Server first
$ nohup sh mqnamesrv &
 
### Verify that the Name Server has started successfully.
$ tail -f ~/logs/rocketmqlogs/namesrv.log

LANGUAGE: bash
CODE:
### On machine A, start the first Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties &
 
### On machine B, start the second Master
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties &
 
### On machine C, start the first slave
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties &
 
### On machine D, start the second slave
$ nohup sh mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties &

----------------------------------------

TITLE: Starting RocketMQ Broker and Proxy
DESCRIPTION: Commands for configuring and starting RocketMQ Broker and Proxy containers on Linux and Windows.

LANGUAGE: shell
CODE:
echo "brokerIP1=127.0.0.1" > broker.conf

docker run -d \
--name rmqbroker \
--network rocketmq \
-p 10912:10912 -p 10911:10911 -p 10909:10909 \
-p 8080:8080 -p 8081:8081 \
-e "NAMESRV_ADDR=rmqnamesrv:9876" \
-v ./broker.conf:/home/rocketmq/rocketmq-5.3.1/conf/broker.conf \
apache/rocketmq:5.3.1 sh mqbroker --enable-proxy \
-c /home/rocketmq/rocketmq-5.3.1/conf/broker.conf

docker exec -it rmqbroker bash -c "tail -n 10 /home/rocketmq/logs/rocketmqlogs/proxy.log"

----------------------------------------

TITLE: RocketMQ Message Producer Example
DESCRIPTION: Java code example for implementing a RocketMQ message producer.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProducerExample {
    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);

    public static void main(String[] args) throws ClientException {
        String endpoint = "localhost:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
            .setTopics(topic)
            .setClientConfiguration(configuration)
            .build();
        Message message = provider.newMessageBuilder()
            .setTopic(topic)
            .setKeys("messageKey")
            .setTag("messageTag")
            .setBody("messageBody".getBytes())
            .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            logger.info("Send message successfully, messageId={}", sendReceipt.getMessageId());
        } catch (ClientException e) {
            logger.error("Failed to send message", e);
        }
    }

----------------------------------------

TITLE: Subscribing to Tagged Messages in RocketMQ
DESCRIPTION: Shows how to subscribe to messages with specific tags in RocketMQ using FilterExpression. Includes examples for single tag, multiple tags, and wildcard subscriptions.

LANGUAGE: java
CODE:
String topic = "Your Topic";
FilterExpression filterExpression = new FilterExpression("TagA", FilterExpressionType.TAG);
pushConsumer.subscribe(topic, filterExpression);

LANGUAGE: java
CODE:
String topic = "Your Topic";
FilterExpression filterExpression = new FilterExpression("TagA||TagB||TagC", FilterExpressionType.TAG);
pushConsumer.subscribe(topic, filterExpression);

LANGUAGE: java
CODE:
String topic = "Your Topic";
FilterExpression filterExpression = new FilterExpression("*", FilterExpressionType.TAG);
pushConsumer.subscribe(topic, filterExpression);

----------------------------------------

TITLE: Building RocketMQ with DLedger Support (Shell)
DESCRIPTION: Commands to clone the RocketMQ repository, checkout the DLedger branch, and build it using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/apache/rocketmq.git
$ cd rocketmq
$ git checkout -b store_with_dledger origin/store_with_dledger
$ mvn -Prelease-all -DskipTests clean install -U

----------------------------------------

TITLE: Implementing RocketMQ Message Producer
DESCRIPTION: Java implementation of a RocketMQ message producer that demonstrates how to configure the client and send messages to a topic.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.apis.*;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProducerExample {
    private static final Logger logger = LoggerFactory.getLogger(ProducerExample.class);

    public static void main(String[] args) throws ClientException {
        String endpoint = "localhost:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
            .setTopics(topic)
            .setClientConfiguration(configuration)
            .build();
        Message message = provider.newMessageBuilder()
            .setTopic(topic)
            .setKeys("messageKey")
            .setTag("messageTag")
            .setBody("messageBody".getBytes())
            .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            logger.info("Send message successfully, messageId={}", sendReceipt.getMessageId());
        } catch (ClientException e) {
            logger.error("Failed to send message", e);
        }
    }
}

----------------------------------------

TITLE: Message Filtering Examples - Java
DESCRIPTION: Examples of implementing message filtering using Tags and SQL92 expressions in RocketMQ consumer.

LANGUAGE: java
CODE:
// Tag filtering
consumer.subscribe("TagFilterTest", "TagA");

// SQL92 filtering
Message msg = new Message("topic", "tagA", "Hello MQ".getBytes());
msg.putUserProperties("a", "1");

consumer.subscribe("SqlFilterTest",
    MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))" +
        "and (a is not null and a between 0 and 3)"));

----------------------------------------

TITLE: Configuring Basic JVM Memory Settings for RocketMQ
DESCRIPTION: Basic JVM server configuration with heap memory settings. Sets equal Xms and Xmx values to prevent heap size adjustments, with 8GB total heap and 4GB young generation.

LANGUAGE: text
CODE:
-server -Xms8g -Xmx8g -Xmn4g

----------------------------------------

TITLE: Setting Message Tag and Sending Message in RocketMQ
DESCRIPTION: Demonstrates how to set a tag for a message before sending it in RocketMQ. The example shows setting topic, keys, tag and message body.

LANGUAGE: java
CODE:
Message message = messageBuilder.setTopic("topic")
.setKeys("messageKey")
.setTag("TagA")
.setBody("messageBody".getBytes())
.build();

----------------------------------------

TITLE: Stopping RocketMQ DLedger Cluster
DESCRIPTION: Command to quickly stop the RocketMQ cluster with DLedger.

LANGUAGE: shell
CODE:
$ sh bin/dledger/fast-try.sh stop

----------------------------------------

TITLE: Updating ACL Configuration with mqadmin in RocketMQ
DESCRIPTION: This shell command demonstrates how to update the 'account' attribute in the ACL configuration file using the mqadmin tool. It specifies various parameters including access key, secret key, and permissions for topics and groups.

LANGUAGE: shell
CODE:
$ sh mqadmin updateAclConfig -n 192.168.1.2:9876 -b 192.168.12.134:10911 -a RocketMQ -s 1234567809123 -t topicA=DENY,topicD=SUB -g groupD=DENY,groupB=SUB

----------------------------------------

TITLE: Setting RocketMQ Consumer Load Balancing Strategy - Java
DESCRIPTION: Code example showing how to configure the message queue allocation strategy for a RocketMQ consumer. This snippet demonstrates setting the default average allocation strategy which distributes queues evenly across consumers in a consumer group.

LANGUAGE: java
CODE:
consumer.setAllocateMessageQueueStrategy(new AllocateMessageQueueAveragely());

----------------------------------------

TITLE: Implementing Pull Consumer in RocketMQ (Java)
DESCRIPTION: Demonstrates how to initialize a DefaultMQPullConsumer, construct a MessageQueue, pull messages, and update the consumption offset. It also shows how to handle different PullStatus results.

LANGUAGE: java
CODE:
public class PullConsumerTest {
  public static void main(String[] args) throws MQClientException {
    DefaultMQPullConsumer consumer = new DefaultMQPullConsumer("please_rename_unique_group_name_5");
    consumer.setNamesrvAddr("127.0.0.1:9876");
    consumer.start();
    try {
      MessageQueue mq = new MessageQueue();
      mq.setQueueId(0);
      mq.setTopic("TopicTest");
      mq.setBrokerName("jinrongtong-MacBook-Pro.local");
      long offset = 26;
      PullResult pullResult = consumer.pull(mq, "*", offset, 32);
      if (pullResult.getPullStatus().equals(PullStatus.FOUND)) {
        System.out.printf("%s%n", pullResult.getMsgFoundList());
        consumer.updateConsumeOffset(mq, pullResult.getNextBeginOffset());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    consumer.shutdown();
  }
}

----------------------------------------

TITLE: Setting Message Keys in Java for RocketMQ
DESCRIPTION: Demonstrates how to set a unique key for a RocketMQ message in Java, using an order ID as an example. This allows for easier message tracking and problem diagnosis.

LANGUAGE: java
CODE:
   // Order Id
   String orderId = "20034568923546";
   message.setKeys(orderId);

----------------------------------------

TITLE: Starting RocketMQ NameServer
DESCRIPTION: Commands to start and verify RocketMQ NameServer container.

LANGUAGE: shell
CODE:
docker run -d --name rmqnamesrv -p 9876:9876 --network rocketmq apache/rocketmq:5.3.1 sh mqnamesrv

docker logs -f rmqnamesrv

----------------------------------------

TITLE: Adding RocketMQ Java Client Dependency
DESCRIPTION: Maven dependency configuration for including the RocketMQ Java client library in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>${rocketmq-client-java-version}</version>
</dependency>

----------------------------------------

TITLE: Implementing Lite Pull Consumer with Assign Mode
DESCRIPTION: Demonstrates using Lite Pull Consumer in Assign mode with manual queue assignment and offset management. Includes examples of queue fetching and seeking to specific offsets.

LANGUAGE: java
CODE:
public class LitePullConsumerAssign {
    public static volatile boolean running = true;
    public static void main(String[] args) throws Exception {
        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("please_rename_unique_group_name");
        litePullConsumer.setAutoCommit(false);
        litePullConsumer.start();
        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues("TopicTest");
        List<MessageQueue> list = new ArrayList<>(mqSet);
        List<MessageQueue> assignList = new ArrayList<>();
        for (int i = 0; i < list.size() / 2; i++) {
            assignList.add(list.get(i));
        }
        litePullConsumer.assign(assignList);
        litePullConsumer.seek(assignList.get(0), 10);
        try {
            while (running) {
                List<MessageExt> messageExts = litePullConsumer.poll();
                System.out.printf("%s %n", messageExts);
                litePullConsumer.commitSync();
            }
        } finally {
            litePullConsumer.shutdown();
        }
    }
}

----------------------------------------

TITLE: RStream Operations API
DESCRIPTION: Basic stream processing operations available in RocketMQ Streams including transformations, filtering, and joining.

LANGUAGE: java
CODE:
<K> GroupedStream<K, T> keyBy(selectAction)
<O> RStream<O> map(mapperAction)
RStream<T> filter(predictor)
<VR> RStream<T> flatMap(mapper)
<T2> JoinedStream<T, T2> join(rightStream)
sink(topicName, serializer)

----------------------------------------

TITLE: Configuring G1 Garbage Collector Settings
DESCRIPTION: G1 garbage collector configuration optimized for RocketMQ production environments, including heap region size, reserve percentage, and occupancy threshold settings.

LANGUAGE: text
CODE:
-XX:+UseG1GC
-XX:G1HeapRegionSize=16m
-XX:G1ReservePercent=25
-XX:InitiatingHeapOccupancyPercent=30

----------------------------------------

TITLE: Queue Fetching in RocketMQ Pull Consumer
DESCRIPTION: Shows how to fetch all message queues for a specific topic using the fetchSubscribeMessageQueues method.

LANGUAGE: java
CODE:
Set<MessageQueue> queueSet =  consumer.fetchSubscribeMessageQueues("TopicTest");

----------------------------------------

TITLE: Adding RocketMQ Client Dependency in Gradle
DESCRIPTION: This snippet shows how to add the RocketMQ client dependency to a Java application using Gradle.

LANGUAGE: gradle
CODE:
compile 'org.apache.rocketmq:rocketmq-client:4.9.4'

----------------------------------------

TITLE: Starting RocketMQ Broker and Proxy
DESCRIPTION: Commands to start the RocketMQ Broker and Proxy in local deployment mode, and verify successful startup by checking the log file.

LANGUAGE: shell
CODE:
### start broker
$ nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &

### verify broker
$ tail -f ~/logs/rocketmqlogs/proxy.log 
The broker[broker-a,192.169.1.2:10911] boot success...

----------------------------------------

TITLE: GroupedStream Operations API
DESCRIPTION: Operations available for grouped streams including aggregations, windowing, and custom transformations.

LANGUAGE: java
CODE:
<OUT> GroupedStream<K, Integer> count(selectAction)
GroupedStream<K, V> min(selectAction)
GroupedStream<K, V> max(selectAction)
GroupedStream<K, ? extends Number> sum(selectAction)
GroupedStream<K, V> filter(predictor)
<OUT> GroupedStream<K, OUT> map(valueMapperAction)
<OUT> GroupedStream<K, OUT> aggregate(accumulator)
WindowStream<K, V> window(windowInfo)
GroupedStream<K, V> addGraphNode(name, supplier)
RStream<V> toRStream()
sink(topicName, serializer)

----------------------------------------

TITLE: Implementing RocketMQ Message Consumer
DESCRIPTION: Java implementation of a RocketMQ push consumer that demonstrates how to configure the client and consume messages from a topic.

LANGUAGE: java
CODE:
import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.*;
import org.apache.rocketmq.client.apis.consumer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushConsumerExample {
    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);

    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "localhost:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
            .setEndpoints(endpoints)
            .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "YourConsumerGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
            .setClientConfiguration(clientConfiguration)
            .setConsumerGroup(consumerGroup)
            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
            .setMessageListener(messageView -> {
                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());
                return ConsumeResult.SUCCESS;
            })
            .build();
        Thread.sleep(Long.MAX_VALUE);
    }
}

----------------------------------------

TITLE: Subscribing to a Single Topic with Multiple Tags in RocketMQ (Java)
DESCRIPTION: This code snippet shows how to create a consumer that subscribes to a single topic ('TopicB') with multiple tags ('Tag2' and 'Tag3') in RocketMQ. It sets up the consumer properties, creates the consumer instance, and defines a message listener for processing messages with either of the specified tags.

LANGUAGE: java
CODE:
    Properties properties = new Properties();
    properties.put(PropertyKeyConst.GROUP_ID, "GID_test_2");
    Consumer consumer = ONSFactory.createConsumer(properties);
    consumer.subscribe("TopicB", "Tag2||Tag3", new MessageListener() {
        public Action consume(Message message, ConsumeContext context) {
            System.out.println(message.getMsgID());
            return Action.CommitMessage;
        }
    });

----------------------------------------

TITLE: Topic Not Exist Error in RocketMQ
DESCRIPTION: Example of error message when attempting to access a non-existent topic in RocketMQ.

LANGUAGE: java
CODE:
topic[xxx] not exist, apply first please!

----------------------------------------

TITLE: Implementing RocketMQ Message Consumer
DESCRIPTION: Java implementation of a RocketMQ push consumer that demonstrates how to configure the client and consume messages from a topic.

LANGUAGE: java
CODE:
import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.*;
import org.apache.rocketmq.client.apis.consumer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushConsumerExample {
    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);

    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "localhost:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
            .setEndpoints(endpoints)
            .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "YourConsumerGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
            .setClientConfiguration(clientConfiguration)
            .setConsumerGroup(consumerGroup)
            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
            .setMessageListener(messageView -> {
                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());
                return ConsumeResult.SUCCESS;
            })
            .build();
        Thread.sleep(Long.MAX_VALUE);
    }
}

----------------------------------------

TITLE: Compiling RocketMQ from Source in Linux
DESCRIPTION: Commands to download, extract, and compile RocketMQ 5.3.1 from source code in a Linux environment.

LANGUAGE: shell
CODE:
$ unzip rocketmq-all-5.3.1-source-release.zip
$ cd rocketmq-all-5.3.1-source-release/
$ mvn -Prelease-all -DskipTests -Dspotbugs.skip=true clean install -U
$ cd distribution/target/rocketmq-5.3.1/rocketmq-5.3.1

----------------------------------------

TITLE: WindowStream Operations API
DESCRIPTION: Window-based operations for processing time-based or count-based grouped data streams.

LANGUAGE: java
CODE:
WindowStream<K, Integer> count()
WindowStream<K, V> filter(predictor)
<OUT> WindowStream<K, OUT> map(mapperAction)
<OUT> WindowStream<K, OUT> aggregate(aggregateAction)
<OUT> WindowStream<K, OUT> aggregate(accumulator)
void sink(topicName, serializer)

----------------------------------------

TITLE: Enabling Message Tracing for RocketMQ Producer in Java
DESCRIPTION: This Java code snippet demonstrates how to enable message tracing when sending messages using a DefaultMQProducer. It includes setting up the producer with tracing enabled and sending a sample message.

LANGUAGE: java
CODE:
DefaultMQProducer producer = new DefaultMQProducer("ProducerGroupName",true);
producer.setNamesrvAddr("XX.XX.XX.XX1");
producer.start();
    try {
        {
            Message msg = new Message("TopicTest",
                "TagA",
                "OrderID188",
                "Hello world".getBytes(RemotingHelper.DEFAULT_CHARSET));
            SendResult sendResult = producer.send(msg);
            System.out.printf("%s%n", sendResult);
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

----------------------------------------

TITLE: Handling SUBSCRIPTION_GROUP_NOT_EXIST Exception in Java
DESCRIPTION: This exception occurs when a Consumer Group or DelayQueue encounters an error while getting subscription information. It indicates that the subscription group does not exist on the server.

LANGUAGE: java
CODE:
subscription group not exist

----------------------------------------

TITLE: Enabling Message Tracing for RocketMQ Consumer in Java
DESCRIPTION: This Java code snippet shows how to enable message tracing when subscribing to messages using a DefaultMQPushConsumer. It includes setting up the consumer with tracing enabled and registering a message listener.

LANGUAGE: java
CODE:
DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("CID_JODIE_1",true);
consumer.subscribe("TopicTest", "*");
consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
consumer.setConsumeTimestamp("20181109221800");
consumer.registerMessageListener(new MessageListenerConcurrently() {
    @Override
    public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
        System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
    }
});
consumer.start();
System.out.printf("Consumer Started.%n");

----------------------------------------

TITLE: Configuring RocketMQ-MQTT
DESCRIPTION: Key configuration settings for RocketMQ-MQTT, including authentication, NAMESRV access point, and retry topics. These settings are crucial for proper operation of the MQTT service.

LANGUAGE: text
CODE:
username=xxx    // Authorization verification account configuration
secretKey=xxx    // Authorization verification account configuration
NAMESRV_ADDR=xxx  //namesrv access point
eventNotifyRetryTopic=xx   //notify retry topic, created in advance
clientRetryTopic=xx  //Client message retry topic, created in advance

----------------------------------------

TITLE: Subscribing to Multiple Topics with Different Tag Configurations in RocketMQ (Java)
DESCRIPTION: This code snippet demonstrates how to create a consumer that subscribes to multiple topics ('TopicA' and 'TopicB') with different tag configurations in RocketMQ. For 'TopicA', it subscribes to all tags using '*', while for 'TopicB', it subscribes to specific tags ('Tag2' and 'Tag3').

LANGUAGE: java
CODE:
    Properties properties = new Properties();
    properties.put(PropertyKeyConst.GROUP_ID, "GID_test_3");
    Consumer consumer = ONSFactory.createConsumer(properties);
    consumer.subscribe("TopicA", "*", new MessageListener() {
        public Action consume(Message message, ConsumeContext context) {
            System.out.println(message.getMsgID());
            return Action.CommitMessage;
        }
    });     
    consumer.subscribe("TopicB", "Tag2||Tag3", new MessageListener() {
        public Action consume(Message message, ConsumeContext context) {
            System.out.println(message.getMsgID());
            return Action.CommitMessage;
        }
    });

----------------------------------------

TITLE: RocketMQ Network Configuration Properties
DESCRIPTION: Extensive network-related configuration parameters including broker settings, client management, and performance tuning options.

LANGUAGE: markdown
CODE:
| Name                                   | Description                                                  | Parameter type | Default value | Effective value | Importance |
[...truncated for brevity...]

----------------------------------------

TITLE: Handling UNKNOWN_HOST_EXCEPTION in Java
DESCRIPTION: This exception occurs when there's an issue resolving the local host address. It can happen when a host has multiple network interfaces or IP addresses.

LANGUAGE: java
CODE:
InetAddress java.net.InetAddress.getLocalHost() throws UnknownHostException

----------------------------------------

TITLE: StreamBuilder API Methods
DESCRIPTION: Core methods for building and configuring stream processing instances in RocketMQ Streams.

LANGUAGE: java
CODE:
StreamBuilder(jobId)
<OUT> RStream<OUT> source(topicName, deserializer)

----------------------------------------

TITLE: Configuring Broker for Message Tracing in RocketMQ
DESCRIPTION: This snippet shows the content of a properties configuration file for enabling the message trace feature on a RocketMQ Broker. It includes essential settings such as cluster name, broker details, and the traceTopicEnable flag.

LANGUAGE: properties
CODE:
brokerClusterName=DefaultCluster
brokerName=broker-a
brokerId=0
deleteWhen=04
fileReservedTime=48
brokerRole=ASYNC_MASTER
flushDiskType=ASYNC_FLUSH
storePathRootDir=/data/rocketmq/rootdir-a-m
storePathCommitLog=/data/rocketmq/commitlog-a-m
autoCreateSubscriptionGroup=true
## if msg tracing is open,the flag will be true
traceTopicEnable=true
listenPort=10911
brokerIP1=XX.XX.XX.XX1
namesrvAddr=XX.XX.XX.XX:9876

----------------------------------------

TITLE: Incorrect Subscription to Different Tags for Same Topic in RocketMQ (Java)
DESCRIPTION: These code snippets demonstrate an incorrect implementation where consumer instances with the same Group ID subscribe to the same topic but with different tags. This violates the principle of consistent subscription relationships and can lead to message consumption issues.

LANGUAGE: java
CODE:
      Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_2");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicA", "Tag1", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

LANGUAGE: java
CODE:
      Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_2");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicA", "Tag2", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

LANGUAGE: java
CODE:
      Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_2");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicA", "Tag2", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

----------------------------------------

TITLE: Starting Broker+Proxy Cluster in Multiple Node Multiple Replica Mode (Asynchronous Replication)
DESCRIPTION: Commands to start a Broker+Proxy cluster with multiple nodes and replicas using asynchronous replication. This configuration provides high availability and fault tolerance.

LANGUAGE: bash
CODE:
### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties --enable-proxy &
 
### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties --enable-proxy &
 
### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties --enable-proxy &
 
### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties --enable-proxy &

----------------------------------------

TITLE: Building RocketMQ from Source
DESCRIPTION: Steps to clone the RocketMQ repository, checkout the develop branch, and build it using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/apache/rocketmq.git
$ cd rocketmq
$ git checkout -b develop origin/develop
$ mvn -Prelease-all -DskipTests clean install -U

----------------------------------------

TITLE: MessageQueueSelector Interface Definition in RocketMQ
DESCRIPTION: Interface definition for MessageQueueSelector used in RocketMQ to implement custom queue selection logic for ordered messages.

LANGUAGE: java
CODE:
public interface MessageQueueSelector {
    MessageQueue select(final List<MessageQueue> mqs, final Message msg, final Object arg);
}

----------------------------------------

TITLE: PullStatus Enum Definition in RocketMQ
DESCRIPTION: Defines the possible status values returned by a pull operation in RocketMQ, including FOUND, NO_NEW_MSG, NO_MATCHED_MSG, and OFFSET_ILLEGAL.

LANGUAGE: java
CODE:
public enum PullStatus {
    /**
     * Founded
     */
    FOUND,
    /**
     * No new message can be pull
     */
    NO_NEW_MSG,
    /**
     * Filtering results can not match
     */
    NO_MATCHED_MSG,
    /**
     * Illegal offset,may be too big or too small
     */
    OFFSET_ILLEGAL
}

----------------------------------------

TITLE: Starting Broker+Proxy Cluster in Multiple Node Multiple Replica Mode (Synchronous Dual Write)
DESCRIPTION: Commands to start a Broker+Proxy cluster with multiple nodes and replicas using synchronous dual write. This configuration ensures the highest level of data consistency and availability.

LANGUAGE: bash
CODE:
### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a.properties --enable-proxy &
 
### On machine B, start the second Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b.properties --enable-proxy &
 
### On machine C, start the first slave, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a-s.properties --enable-proxy &
 
### On machine D, start the second slave, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b-s.properties --enable-proxy &

----------------------------------------

TITLE: Quick Deployment of RocketMQ with DLedger
DESCRIPTION: Commands to start a RocketMQ cluster with DLedger support using the fast-try script.

LANGUAGE: shell
CODE:
#{rocketmq-version} replace with rocketmq actual version. example: 5.1.0
$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}
$ sh bin/dledger/fast-try.sh start

----------------------------------------

TITLE: Running RocketMQ Dashboard in Docker Container
DESCRIPTION: Command to run the RocketMQ Dashboard in a Docker container, specifying the nameserver address and port mapping.

LANGUAGE: shell
CODE:
docker run -d --name rocketmq-dashboard -e "JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876" -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest

----------------------------------------

TITLE: Starting Broker+Proxy Cluster in Multiple Node Single Replica Mode
DESCRIPTION: Commands to start multiple Broker+Proxy nodes in a cluster configuration without slave replicas. This setup provides better availability than a single node.

LANGUAGE: bash
CODE:
### On machine A, start the first Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties --enable-proxy &
 
### On machine A, start the second Master, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties --enable-proxy &

----------------------------------------

TITLE: Implementing Lite Pull Consumer with Subscribe Mode
DESCRIPTION: Shows how to implement a Lite Pull Consumer using Subscribe mode, which provides automatic load balancing and simpler offset management.

LANGUAGE: java
CODE:
public class LitePullConsumerSubscribe {
    public static volatile boolean running = true;
    public static void main(String[] args) throws Exception {
        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("lite_pull_consumer_test");
        litePullConsumer.subscribe("TopicTest", "*");
        litePullConsumer.setPullBatchSize(20);
        litePullConsumer.start();
        try {
            while (running) {
                List<MessageExt> messageExts = litePullConsumer.poll();
                System.out.printf("%s%n", messageExts);
            }
        } finally {
            litePullConsumer.shutdown();
        }
    }
}

----------------------------------------

TITLE: Starting Broker in Cluster Mode (Multiple Configurations)
DESCRIPTION: Commands to start Broker nodes in various cluster configurations, including single node, multiple node single replica, and multiple node multiple replica modes with both asynchronous and synchronous replication.

LANGUAGE: bash
CODE:
### Single node single replica mode
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 &

### Multiple node single replica mode
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-a.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-noslave/broker-b.properties &

### Multiple node multiple replica mode - Asynchronous Replication
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-a-s.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-async/broker-b-s.properties &

### Multiple node multiple replica mode - Synchronous Dual Write
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-a-s.properties &
$ nohup sh bin/mqbroker -n 192.168.1.1:9876 -c $ROCKETMQ_HOME/conf/2m-2s-sync/broker-b-s.properties &

----------------------------------------

TITLE: Setting up PostgreSQL Database in Docker
DESCRIPTION: Docker commands to set up a PostgreSQL database instance for testing.

LANGUAGE: shell
CODE:
# starting a pg instance
docker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=start_data_engineer -e POSTGRES_PASSWORD=password debezium/postgres:14

# bash into postgres instance
docker exec -ti postgres /bin/bash

----------------------------------------

TITLE: Basic Command Structure
DESCRIPTION: The basic structure for executing RocketMQ admin commands with NameServer configuration

LANGUAGE: bash
CODE:
./mqadmin {command} {args} -n nameserver_ip:port

----------------------------------------

TITLE: Starting Broker+Proxy in Single Node Single Replica Mode
DESCRIPTION: Command to start a single Broker+Proxy node. This configuration is not recommended for production environments due to lack of redundancy.

LANGUAGE: bash
CODE:
$ nohup sh bin/mqbroker -n localhost:9876 --enable-proxy &

### Verify that the Broker has started successfully, for example, the broker IP is 192.168.1.2, and the name is broker-A
$ tail -f ~/logs/rocketmqlogs/broker_default.log 
The broker[xxx, 192.169.1.2:10911] boot success...

----------------------------------------

TITLE: Testing RocketMQ Message Sending and Receiving
DESCRIPTION: Shell commands to test RocketMQ message sending and receiving using the provided tools. Sets the NameServer address and runs producer and consumer examples.

LANGUAGE: shell
CODE:
export NAMESRV_ADDR=localhost:9876
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer

----------------------------------------

TITLE: Starting Proxy in Cluster Mode
DESCRIPTION: Commands to start multiple Proxy instances on different machines in cluster mode. This setup allows for load balancing and improved scalability.

LANGUAGE: bash
CODE:
### On machine A start the first Proxy, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &

### On machine B start the second Proxy, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &

### On machine C start the third Proxy, for example, the IP of the NameServer is: 192.168.1.1
$ nohup sh bin/mqproxy -n 192.168.1.1:9876 &

### custom config file
$ nohup sh bin/mqproxy -n 192.168.1.1:9876 -pc /path/to/proxyConfig.json &

----------------------------------------

TITLE: Rejecting PR
DESCRIPTION: Commands for rejecting a pull request without merging.

LANGUAGE: shell
CODE:
$ git commit --allow-empty -m "RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*"
$ git push apache develop

----------------------------------------

TITLE: RocketMQ Connect Runtime Configuration
DESCRIPTION: Configuration settings for RocketMQ Connect standalone mode including plugin paths and connection settings.

LANGUAGE: shell
CODE:
workerId=standalone-worker
storePathRootDir=/tmp/storeRoot
httpPort=8082
namesrvAddr=localhost:9876
aclEnable=false
accessKey=rocketmq
secretKey=12345678
autoCreateGroupEnable=false
clusterName="DefaultCluster"
pluginPaths=/usr/local/connector-plugins

----------------------------------------

TITLE: Starting NameServer in Apache RocketMQ 5.0
DESCRIPTION: Commands to start the NameServer component and verify its successful startup. This is the first step in deploying RocketMQ.

LANGUAGE: bash
CODE:
### Start Name Server first
$ nohup sh mqnamesrv &
 
### Verify that the Name Server has started successfully.
$ tail -f ~/logs/rocketmqlogs/namesrv.log
The Name Server boot success...

----------------------------------------

TITLE: Starting RocketMQ Connect Worker in Standalone Mode
DESCRIPTION: Shell command to start the RocketMQ Connect worker in standalone mode using the specified configuration file.

LANGUAGE: shell
CODE:
sh bin/connect-standalone.sh -c conf/connect-standalone.conf &

----------------------------------------

TITLE: Starting Single Master RocketMQ Deployment
DESCRIPTION: Commands for starting a single master RocketMQ setup with NameServer and Broker components. This configuration is suitable for testing but not recommended for production use.

LANGUAGE: bash
CODE:
### Start Name Server first
$ nohup sh mqnamesrv &
 
### Verify if the Name Server has started successfully
$ tail -f ~/logs/rocketmqlogs/namesrv.log

LANGUAGE: bash
CODE:
### Start Broker
$ nohup sh bin/mqbroker -n localhost:9876 &

### Verify that the Broker has started successfully
$ tail -f ~/logs/rocketmqlogs/Broker.log

----------------------------------------

TITLE: JVM Pre-Touch Configuration
DESCRIPTION: Optional setting to pre-touch Java heap memory during JVM initialization for better memory allocation.

LANGUAGE: text
CODE:
-XX:+AlwaysPreTouch

----------------------------------------

TITLE: Handling Metrics HTTP Response in Java
DESCRIPTION: Method to handle HTTP metrics requests by collecting metrics into a StringWriter and sending the response with appropriate headers.

LANGUAGE: java
CODE:
private void metrics(HttpServletResponse response) throws IOException {
    StringWriter writer = new StringWriter();
    metricsService.metrics(writer);
    response.setHeader("Content-Type", "text/plain; version=0.0.4; charset=utf-8");
    response.getOutputStream().print(writer.toString());
}

----------------------------------------

TITLE: Configuring RocketMQ for MQTT Support
DESCRIPTION: Essential configuration settings for enabling MQTT support in RocketMQ. These settings must be enabled in RocketMQ version 4.9.3 or later.

LANGUAGE: text
CODE:
enableLmq = true 
enableMultiDispatch = true

----------------------------------------

TITLE: Creating and Starting File Source Connector
DESCRIPTION: Curl command to create and start a file source connector that reads data from a specified file and sends it to a RocketMQ topic.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/fileSourceConnector -d '{
	"connector.class": "org.apache.rocketmq.connect.file.FileSourceConnector",
	"filename": "/Users/YourUsername/rocketmqconnect/test-source-file.txt",
	"connect.topicname": "fileTopic"
}'

----------------------------------------

TITLE: Configuring Broker Properties with ACL Enabled
DESCRIPTION: Configuration properties for enabling ACL on a RocketMQ broker, including cluster settings, storage paths, and ACL activation flag.

LANGUAGE: properties
CODE:
brokerClusterName=DefaultCluster
brokerName=broker-a
brokerId=0
deleteWhen=04
fileReservedTime=48
brokerRole=ASYNC_MASTER
flushDiskType=ASYNC_FLUSH
storePathRootDir=/data/rocketmq/rootdir-a-m
storePathCommitLog=/data/rocketmq/commitlog-a-m
autoCreateSubscriptionGroup=true
aclEnable=true
listenPort=10911
brokerIP1=XX.XX.XX.XX1
namesrvAddr=XX.XX.XX.XX:9876

----------------------------------------

TITLE: Release Download Links
DESCRIPTION: Download links for RocketMQ 5.3.0 source and binary releases with corresponding PGP and SHA512 verification files.

LANGUAGE: markdown
CODE:
- Source: [rocketmq-all-5.3.0-source-release.zip](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-source-release.zip) [[PGP](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-source-release.zip.asc)] [[SHA512](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-source-release.zip.sha512)]
- Binary: [rocketmq-all-5.3.0-bin-release.zip](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-bin-release.zip) [[PGP](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-bin-release.zip.asc)] [[SHA512](https://dist.apache.org/repos/dist/release/rocketmq/5.3.0/rocketmq-all-5.3.0-bin-release.zip.sha512)]

----------------------------------------

TITLE: Deploying RocketMQ with Helm in Bash
DESCRIPTION: Commands to install RocketMQ using Helm and verify the deployment status.

LANGUAGE: bash
CODE:
$ helm install rocketmq-demo ./rocketmq

#查看pod状态
#若参数正常，则表明部署成功
$ kubectl get pods -o wide -n default

----------------------------------------

TITLE: RocketMQ Connect Configuration Example
DESCRIPTION: Sample configuration file for RocketMQ Connect showing key settings like workerId, httpPort, and namesrvAddr.

LANGUAGE: shell
CODE:
#current cluster node uniquely identifies
workerId=DEFAULT_WORKER_1

# Http prot for user to access REST API
httpPort=8082

# Local file dir for config store
storePathRootDir=/Users/YourUsername/rocketmqconnect/storeRoot

#You need to modify it to your own rocketmq nameserver endpoint.
# RocketMQ namesrvAddr
namesrvAddr=127.0.0.1:9876  

# Plugin path for loading Source/Sink Connectors
# The rocketmq-connect project already includes the rocketmq-connect-sample module by default, so no configuration is needed here.
pluginPaths=

----------------------------------------

TITLE: Stopping RocketMQ Connect Worker
DESCRIPTION: Shell command to stop the RocketMQ Connect worker process.

LANGUAGE: shell
CODE:
cd $RMQ_CONNECT_HOME/distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT
sh bin/connectshutdown.sh

----------------------------------------

TITLE: Retrieving Full ACL Configuration in RocketMQ
DESCRIPTION: This shell command demonstrates how to query the entire contents of the ACL configuration file of the cluster Broker using the mqadmin tool. It requires specifying the namesrv address and cluster name.

LANGUAGE: shell
CODE:
sh mqadmin getAccessConfigSubCommand -n 192.168.1.2:9876 -c DefaultCluster

----------------------------------------

TITLE: Configuring RocketMQ Connect Standalone in Shell
DESCRIPTION: Commands to build RocketMQ Connect and modify its configuration file for standalone mode.

LANGUAGE: shell
CODE:
cd  rocketmq-connect

mvn -Prelease-connect -DskipTests clean install -U

$ cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT
$ vim conf/connect-standalone.conf

----------------------------------------

TITLE: Implementing RocketMQ Producer in Java
DESCRIPTION: Java code for creating a RocketMQ producer, configuring the client, and sending a message. Requires RocketMQ client library.

LANGUAGE: java
CODE:
package com.rocketmq.producer;

import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;

public class ProducerDemo {
    public static void main(String[] args) throws ClientException {
        String endpoint = "192.168.85.227:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
            .setTopics(topic)
            .setClientConfiguration(configuration)
            .build();
        Message message = provider.newMessageBuilder()
            .setTopic(topic)
            .setKeys("messageKey")
            .setTag("messageTag")
            .setBody("messageBody".getBytes())
            .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            System.out.println("Send message successfully, messageId=" + sendReceipt.getMessageId());
        } catch (ClientException e) {
        }
    }
}

----------------------------------------

TITLE: JDBC Sink Connector Configuration
DESCRIPTION: REST API call to configure JDBC sink connector for writing data to target MySQL database.

LANGUAGE: bash
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest1000 -d '{
  "connector.class": "org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector",
  "max.task": "2",
  "connect.topicnames": "debezium-source-topic1000",
  "connection.url": "jdbc:mysql://database ip:3306/bank1",
  "connection.user": "root",
  "connection.password": "debezium"
}'

----------------------------------------

TITLE: Executing RocketMQ Admin Commands
DESCRIPTION: Basic syntax for executing RocketMQ admin commands, including specifying the NameServer address.

LANGUAGE: shell
CODE:
./mqadmin {command} {args}

LANGUAGE: shell
CODE:
./mqadmin {command} -n {nameserver_address} {other_args}

----------------------------------------

TITLE: Configuring EventBridge Properties in application.properties
DESCRIPTION: This snippet shows the configuration settings for EventBridge in the application.properties file. It includes database connection details, RocketMQ settings, and logging configuration.

LANGUAGE: properties
CODE:
# Mysql database address
spring.datasource.url=jdbc:mysql://xxxx:3306/xxxx?characterEncoding=utf8
spring.datasource.username=xxx
spring.datasource.password=xxxx

# RocketMQ nameserver address
rocketmq.namesrvAddr=xxxxx:9876

# RocketMQ cluster name
rocketmq.cluster.name=DefaultCluster

# RocketMQ Connect address
rocketmq.connect.endpoint=xxxxxx:8082

# log default configuration
log.path=～
log.level=INFO
app.name=rocketmq-eventbridge

----------------------------------------

TITLE: Delete ACL Account Configuration Command
DESCRIPTION: Shell command for removing an account from the ACL configuration file using access key as identifier.

LANGUAGE: shell
CODE:
$ sh mqadmin deleteAccessConfig -n 192.168.1.2:9876 -c DefaultCluster -a RocketMQ

----------------------------------------

TITLE: Sending Event to EventBus via HTTP POST Request
DESCRIPTION: This API call sends a CloudEvent to the EventBus, which can then be processed by the configured rules and targets.

LANGUAGE: json
CODE:
POST /putEvents HTTP/1.1
Host: demo.eventbridge.com
Content-Type:"application/cloudevents+json; charset=UTF-8"
{
  "specversion" : "1.0",
  "type" : "com.github.pull_request.opened",
  "source" : "https://github.com/cloudevents/spec/pull",
  "subject" : "123",
  "id" : "A234-1234-1234",
  "time" : "2018-04-05T17:31:00Z",
  "datacontenttype" : "application/json",
  "data" : {
    "body":"demo"
  },
  "aliyuneventbusname":"demo-bus"
}

----------------------------------------

TITLE: Sample DLedger Broker Configuration
DESCRIPTION: Example configuration file for a DLedger-enabled RocketMQ broker, including key settings for DLedger integration.

LANGUAGE: shell
CODE:
brokerClusterName = RaftCluster
brokerName=RaftNode00
listenPort=30911
namesrvAddr=127.0.0.1:9876
storePathRootDir=/tmp/rmqstore/node00
storePathCommitLog=/tmp/rmqstore/node00/commitlog
enableDLegerCommitLog=true
dLegerGroup=RaftNode00
dLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913
## must be unique
dLegerSelfId=n0
sendMessageThreadPoolNums=16

----------------------------------------

TITLE: MySQL Debezium Source Connector Configuration
DESCRIPTION: REST API call to configure Debezium MySQL source connector for capturing database changes.

LANGUAGE: bash
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/MySQLCDCSource1000 -d '{
"connector.class": "org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector",
"max.task": "1",
"connect.topicname": "debezium-source-topic1000",
"database.hostname": "database ip",
"database.port": 3306,
"database.user": "debezium",
"database.password": "dbz",
"table.include.list": "bank.user"
}'

----------------------------------------

TITLE: Installing RocketMQ Dashboard Docker Image
DESCRIPTION: Commands to pull the RocketMQ Dashboard Docker image and run it in a container. The nameserver address and port need to be configured.

LANGUAGE: shell
CODE:
docker pull apacherocketmq/rocketmq-dashboard:latest

LANGUAGE: shell
CODE:
docker run -d --name rocketmq-dashboard -e "JAVA_OPTS=-Drocketmq.namesrv.addr=127.0.0.1:9876" -p 8080:8080 -t apacherocketmq/rocketmq-dashboard:latest

----------------------------------------

TITLE: Creating Event Bus with HTTP POST Request
DESCRIPTION: This HTTP POST request creates an event bus named 'demo-bus' with a description.

LANGUAGE: json
CODE:
POST /bus/createEventBus HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
"eventBusName":"demo-bus",
"description":"a demo bus."
}

----------------------------------------

TITLE: Sample DLedger Broker Configuration
DESCRIPTION: Example configuration file for a DLedger-enabled RocketMQ broker, including key settings for DLedger integration.

LANGUAGE: shell
CODE:
brokerClusterName = RaftCluster
brokerName=RaftNode00
listenPort=30911
namesrvAddr=127.0.0.1:9876
storePathRootDir=/tmp/rmqstore/node00
storePathCommitLog=/tmp/rmqstore/node00/commitlog
enableDLegerCommitLog=true
dLegerGroup=RaftNode00
dLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913
## must be unique
dLegerSelfId=n0
sendMessageThreadPoolNums=16

----------------------------------------

TITLE: Compiling Debezium RocketMQ Connector
DESCRIPTION: Commands to compile the Debezium connector plugins for MySQL and PostgreSQL integration with RocketMQ.

LANGUAGE: bash
CODE:
cd rocketmq-connect/connectors/rocketmq-connect-debezium/
mvn clean package -Dmaven.test.skip=true

----------------------------------------

TITLE: Adding RocketMQ Client Dependency in Maven
DESCRIPTION: This snippet shows how to add the RocketMQ client dependency to a Java application using Maven.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.rocketmq</groupId>
  <artifactId>rocketmq-client</artifactId>
  <version>4.9.4</version>
</dependency>

----------------------------------------

TITLE: Implementing RocketMQ Producer in Java
DESCRIPTION: Java code example for creating a RocketMQ producer that sends a message synchronously. Includes producer initialization, message creation, and sending process.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.common.message.Message;

public class ProducerExample {
    public static void main(String[] args) throws Exception {
        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
        producer.setNamesrvAddr("localhost:9876");
        producer.start();

        try {
            Message msg = new Message("TestTopic", "TagA", ("Hello RocketMQ").getBytes());
            SendResult sendResult = producer.send(msg);
            System.out.println("Message sent: " + new String(msg.getBody()));
            System.out.println("Send result: " + sendResult);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Message sending failed.");
        } finally {
            producer.shutdown();
        }
    }
}

----------------------------------------

TITLE: Creating Event Bus via HTTP POST Request
DESCRIPTION: This API call creates a new event bus in EventBridge with a specified name and description.

LANGUAGE: json
CODE:
POST /bus/createEventBus HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
"eventBusName":"demo-bus",
"description":"a demo bus."
}

----------------------------------------

TITLE: Cloning RocketMQ Repository in Shell
DESCRIPTION: Command to clone the forked RocketMQ repository to the local machine. The URL should be replaced with the user's forked repository URL.

LANGUAGE: shell
CODE:
git clone https://github.com/cuser/rocketmq.git # git clone [repo url]

----------------------------------------

TITLE: Compiling JDBC Connector
DESCRIPTION: Commands to compile the JDBC Connector and move it to the plugin directory.

LANGUAGE: Shell
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/
$ mvn clean package -Dmaven.test.skip=true
cp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins

----------------------------------------

TITLE: Specifying Name Server Address in Java Startup Parameters for RocketMQ
DESCRIPTION: Shows how to set the Name Server address using Java system properties when starting the application.

LANGUAGE: text
CODE:
-Drocketmq.namesrv.addr=192.168.0.1:9876;192.168.0.2:9876  

----------------------------------------

TITLE: Docker Compose Configuration for RocketMQ
DESCRIPTION: Docker Compose configuration that defines a RocketMQ cluster with namesrv and broker services.

LANGUAGE: text
CODE:
version: '3.8'

services:
  namesrv:
    image: apache/rocketmq:4.9.6
    container_name: rmqnamesrv
    ports:
      - 9876:9876
    networks:
      - rocketmq
    command: sh mqnamesrv

  broker:
    image: apache/rocketmq:4.9.6
    container_name: rmqbroker
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
    volumes:
      - ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf
    depends_on:
      - namesrv
    networks:
      - rocketmq
    command: sh mqbroker -c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf

networks:
  rocketmq:
    driver: bridge

----------------------------------------

TITLE: Creating Event Rules with HTTP POST Request
DESCRIPTION: This HTTP POST request creates an event rule named 'demo-rule' for the 'demo-bus' event bus with an empty filter pattern.

LANGUAGE: json
CODE:
POST /rule/createEventRule HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
  "eventBusName":"demo-bus",
  "eventRuleName":"demo-rule",
  "description":"A demo rule.",
  "filterPattern":"{}"
}

----------------------------------------

TITLE: Adding RocketMQ Java Client SDK Dependency
DESCRIPTION: XML snippet to add the RocketMQ Java client SDK dependency to a Maven pom.xml file.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>${rocketmq-client-java-version}</version>
</dependency>

----------------------------------------

TITLE: Setting up MySQL Database in Docker
DESCRIPTION: Docker command to set up a MySQL database instance for testing.

LANGUAGE: shell
CODE:
docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9

----------------------------------------

TITLE: Update ACL Configuration Command
DESCRIPTION: Shell command example for updating account attributes in the ACL configuration file, including access keys and permissions.

LANGUAGE: shell
CODE:
$ sh mqadmin updateAclConfig -n 192.168.1.2:9876 -b 192.168.12.134:10911 -a RocketMQ -s 1234567809123 -t topicA=DENY,topicD=SUB -g groupD=DENY,groupB=SUB

----------------------------------------

TITLE: Starting RocketMQ Services
DESCRIPTION: Commands to start RocketMQ services using Docker Compose for both Linux and Windows environments.

LANGUAGE: code
CODE:
docker-compose up -d

LANGUAGE: code
CODE:
docker-compose -p rocketmq_project up -d

----------------------------------------

TITLE: Creating DingTalk Target via HTTP POST Request
DESCRIPTION: This API call creates a new event target in EventBridge that delivers notifications to a DingTalk robot.

LANGUAGE: json
CODE:
POST /target/createEventTargets HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
    "eventBusName":"demo-bus",
    "eventRuleName":"demo-rule",
    "eventTargets":[
        {
            "eventTargetName":"dingtalk-target",
            "className":"acs.dingtalk",
            "config":{
            "WebHook":"https://oapi.dingtalk.com/robot/send?access_token=b43a54b702314415c2acdae97eda1e092528b7a9dddb31510a5b4430be2ef867",
            "SecretKey":"SEC53483bf496b8f9e0b4ab0ab669d422208e6ccfaedfd5120ea6b8426b9ecd47aa",
            "Body":"{\"template\":\"{\\\"text\\\":{\\\"content\\\":\\\"${content}\\\"},\\\"msgtype\\\":\\\"text\\\"}\",\"form\":\"TEMPLATE\",\"value\":\"{\\\"content\\\":\\\"$.data.body\\\"}\"}"}
        }
    ]
}

----------------------------------------

TITLE: Starting RocketMQ Producer and Consumer
DESCRIPTION: Commands to test RocketMQ setup by running example producer and consumer applications

LANGUAGE: shell
CODE:
#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7
$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4

$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: PostgreSQL Source Table Creation
DESCRIPTION: SQL commands to create and populate the source database table in PostgreSQL for data synchronization.

LANGUAGE: sql
CODE:
CREATE SCHEMA bank;
SET search_path TO bank,public;
create table bank.user
(
    id       integer not null
        constraint user_pkey
            primary key,
    user_id          integer,
    name    varchar(8),
    age integer,
    birthday date,
    datetime_created timestamp(3),
    datetime_updated timestamp(3),
    height           numeric(11, 2)
);

----------------------------------------

TITLE: Query ACL Configuration Version Command
DESCRIPTION: Shell command for querying the ACL configuration file version information from cluster brokers.

LANGUAGE: shell
CODE:
sh mqadmin clusterAclConfigVersion -n 192.168.1.2:9876 -c DefaultCluster

----------------------------------------

TITLE: RocketMQ Message Testing Commands
DESCRIPTION: Shell commands to test message production and consumption using RocketMQ tools within the broker container.

LANGUAGE: shell
CODE:
# Enter the broker container
$ docker exec -it rmqbroker bash

$ sh tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: Building RocketMQ Connect Runtime
DESCRIPTION: Shell commands to clone the RocketMQ Connect repository, set the environment variable, and build the project using Maven.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/rocketmq-connect.git
cd  rocketmq-connect
export RMQ_CONNECT_HOME=`pwd`
mvn -Prelease-connect -Dmaven.test.skip=true clean install -U

----------------------------------------

TITLE: PostgreSQL Database Schema Setup
DESCRIPTION: SQL commands to create and populate the source PostgreSQL database schema

LANGUAGE: sql
CODE:
CREATE SCHEMA bank;
SET search_path TO bank,public;
create table bank.user
(
    id       integer not null
        constraint user_pkey
            primary key,
    user_id          integer,
    name    varchar(8),
    age integer,
    birthday date,
    datetime_created timestamp(3),
    datetime_updated timestamp(3),
    height           numeric(11, 2)
);

----------------------------------------

TITLE: Update Global Whitelist Command
DESCRIPTION: Shell command for updating the global IP whitelist in the ACL configuration file.

LANGUAGE: shell
CODE:
sh mqadmin updateGlobalWhiteAddr -n 192.168.1.2:9876 -b 192.168.12.134:10911 -g 10.10.154.1,10.10.154.2

----------------------------------------

TITLE: Adding RocketMQ Client Dependency in XML
DESCRIPTION: Maven dependency configuration for including the RocketMQ Java client library in a project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>5.0.7</version>
</dependency>

----------------------------------------

TITLE: Compiling JDBC Connector in Java
DESCRIPTION: Commands to compile the JDBC Connector plugin and move it to the connector plugins directory.

LANGUAGE: shell
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-jdbc/
$ mvn clean package -Dmaven.test.skip=true
cp rocketmq-connect-jdbc/target/rocketmq-connect-jdbc-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins

----------------------------------------

TITLE: Collecting Topic Offset Metrics in Java
DESCRIPTION: Java code snippet showing how topic offset metrics are collected from the RocketMQ cluster.

LANGUAGE: java
CODE:
TopicList topicList = null;
try {  
    topicList = mqAdminExt.fetchAllTopicList();
} catch (Exception ex) {
        log.error(String.format("collectTopicOffset-exception comes getting topic list from namesrv, address is %s",
            JSON.toJSONString(mqAdminExt.getNameServerAddressList())));
        return;
}

----------------------------------------

TITLE: Creating Source Database and Table
DESCRIPTION: SQL commands to create the source database and table for testing.

LANGUAGE: SQL
CODE:
CREATE database inventory;

use inventory;
CREATE TABLE `employee` (
`id` bigint NOT NULL AUTO_INCREMENT,
`name` varchar(128) DEFAULT NULL,
`howold` int DEFAULT NULL,
`male` int DEFAULT NULL,
`company` varchar(128) DEFAULT NULL,
`money` double DEFAULT NULL,
`begin_time` datetime DEFAULT NULL,
`modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'modify time',
`decimal_test` decimal(11,2) DEFAULT NULL COMMENT 'test decimal type',
PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Configuring Log4j2 for RocketMQ Client
DESCRIPTION: XML configuration for setting up Log4j2 with RocketMQ client, including appender settings and pattern layout.

LANGUAGE: xml
CODE:
<RocketMQ name="rocketmqAppender" producerGroup="yourLogGroup" nameServerAddress="yourRocketmqNameserverAddress"
     topic="yourLogTopic" tag="yourTag">
    <PatternLayout pattern="%d [%p] hahahah %c %m%n"/>
</RocketMQ>

----------------------------------------

TITLE: Releasing RocketMQ Resources in Bash
DESCRIPTION: Command to uninstall and release all RocketMQ resources deployed via Helm.

LANGUAGE: bash
CODE:
$ helm uninstall rocketmq-demo

----------------------------------------

TITLE: Starting RocketMQ Connect Standalone in Shell
DESCRIPTION: Command to start RocketMQ Connect in standalone mode using the configured settings.

LANGUAGE: shell
CODE:
cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT

sh bin/connect-standalone.sh -c conf/connect-standalone.conf &

----------------------------------------

TITLE: File Path Reference for Apache License Configuration
DESCRIPTION: Reference to the location of Apache license XML file in the RocketMQ project structure.

LANGUAGE: plaintext
CODE:
rocketmq/style/copyright/Apache.xml

----------------------------------------

TITLE: Building DLedger from Source
DESCRIPTION: Commands to clone the DLedger repository and build it using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/openmessaging/dledger.git
$ cd dledger
$ mvn clean install -DskipTests

----------------------------------------

TITLE: Handling SEND_MSG_FAILED Exception in Java
DESCRIPTION: This exception is thrown when a producer fails to send a message after multiple attempts. It provides information about the number of attempts, time taken, and the topic involved.

LANGUAGE: java
CODE:
Send [xxx] times, still failed, cost [xxx]ms, Topic: xxx, BrokersSent ...

----------------------------------------

TITLE: Building DLedger from Source (Shell)
DESCRIPTION: Commands to clone the DLedger repository and build it using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/openmessaging/dledger.git
$ cd dledger
$ mvn clean install -DskipTests

----------------------------------------

TITLE: Creating and Starting File Sink Connector
DESCRIPTION: Curl command to create and start a file sink connector that reads messages from a RocketMQ topic and writes them to a specified file.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/fileSinkConnector -d '{
	"connector.class": "org.apache.rocketmq.connect.file.FileSinkConnector",
	"filename": "/Users/YourUsername/rocketmqconnect/test-sink-file.txt",
	"connect.topicnames": "fileTopic"
}'

----------------------------------------

TITLE: Example Metric Format in Prometheus
DESCRIPTION: Example of how a metric is formatted when collected by Prometheus.

LANGUAGE: javascript
CODE:
rocketmq_group_diff{group="rmq_group_test_20220114",topic="fusion_console_tst",countOfOnlineConsumers="0",msgModel="1",} 23.0

----------------------------------------

TITLE: Writing and Querying Test Data in Elasticsearch
DESCRIPTION: Elasticsearch commands to write test data to the source Elasticsearch instance and query it.

LANGUAGE: json
CODE:
POST /_bulk
{ "index" : { "_index" : "connect_es" } }
{ "id": "1", "field1": "value1", "field2": "value2" }
{ "index" : { "_index" : "connect_es" } }
{ "id": "2", "field1": "value3", "field2": "value4" }

GET /connect_es/_search
{
  "size": 100
}

----------------------------------------

TITLE: Handling NO_TOPIC_ROUTE_INFO Exception in Java
DESCRIPTION: This exception occurs when attempting to send a message to a topic that is not available to the producer. It indicates that no route information is available for the specified topic.

LANGUAGE: java
CODE:
No route info of this topic:

----------------------------------------

TITLE: Quick Deployment of RocketMQ with DLedger (Shell)
DESCRIPTION: Commands to start a RocketMQ cluster with DLedger using the fast-try script.

LANGUAGE: shell
CODE:
#{rocketmq-version} replace with rocketmq actual version. example: 4.9.4
$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}
$ sh bin/dledger/fast-try.sh start

----------------------------------------

TITLE: Stopping RocketMQ Connect Connectors
DESCRIPTION: Curl commands to stop the file source and sink connectors using the RESTful API.

LANGUAGE: shell
CODE:
curl http://127.0.0.1:8082/connectors/fileSinkConnector/stop
curl http://127.0.0.1:8082/connectors/fileSourceConnector/stop

----------------------------------------

TITLE: Creating EventBridge Target with HTTP POST Request
DESCRIPTION: This HTTP POST request creates an event target that delivers to EventBridge in the cloud for the 'demo-rule' in the 'demo-bus' event bus.

LANGUAGE: json
CODE:
POST /target/createEventTargets HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
    "eventBusName":"demo-bus",
    "eventRuleName":"demo-rule",
    "eventTargets":[
            {
            "eventTargetName":"eventbridge-target",
            "className":"acs.eventbridge",
                "config":{
                "RegionId":"cn-hangzhou",
                "AliyunEventBus":"rocketmq-eventbridge"
                }
            }
        ]
}

----------------------------------------

TITLE: Building RocketMQ Connect Runtime
DESCRIPTION: Commands to clone and build the RocketMQ Connect runtime environment

LANGUAGE: shell
CODE:
git clone https://github.com/apache/rocketmq-connect.git

cd  rocketmq-connect

export RMQ_CONNECT_HOME=`pwd`

mvn -Prelease-connect -Dmaven.test.skip=true clean install -U

----------------------------------------

TITLE: Handling CLIENT_SERVICE_NOT_OK Exception in Java
DESCRIPTION: This exception is thrown when attempting to start multiple Producer/Consumer instances in the same JVM using the same Producer/Consumer Group. It indicates that the client service state is not OK.

LANGUAGE: java
CODE:
The xxx service state not OK, maybe started once

----------------------------------------

TITLE: DLedger Broker Configuration Example
DESCRIPTION: Example configuration file for a DLedger-enabled RocketMQ broker, including key settings for DLedger integration.

LANGUAGE: plaintext
CODE:
brokerClusterName = RaftCluster
brokerName=RaftNode00
listenPort=30911
namesrvAddr=127.0.0.1:9876
storePathRootDir=/tmp/rmqstore/node00
storePathCommitLog=/tmp/rmqstore/node00/commitlog
enableDLegerCommitLog=true
dLegerGroup=RaftNode00
dLegerPeers=n0-127.0.0.1:40911;n1-127.0.0.1:40912;n2-127.0.0.1:40913
## must be unique
dLegerSelfId=n0
sendMessageThreadPoolNums=16

----------------------------------------

TITLE: Building RocketMQ Connect Runtime
DESCRIPTION: Commands to clone and build the RocketMQ Connect project from source.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/rocketmq-connect.git

cd rocketmq-connect

export RMQ_CONNECT_HOME=`pwd`

mvn -Prelease-connect -Dmaven.test.skip=true clean install -U

----------------------------------------

TITLE: RocketMQ Basic Setup and Testing
DESCRIPTION: Commands to set up and test RocketMQ messaging functionality using Producer and Consumer examples.

LANGUAGE: shell
CODE:
#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7
$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4

$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: Configuring Debezium Source Connector
DESCRIPTION: REST API call to configure the Debezium source connector for MySQL CDC

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/MySQLCDCSource -d '{
"connector.class": "org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector",
"max.task": "1",
"connect.topicname": "debezium-mysql-source-topic",
"kafka.transforms": "Unwrap",
"kafka.transforms.Unwrap.delete.handling.mode": "none",
"kafka.transforms.Unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
"kafka.transforms.Unwrap.add.headers": "op,source.db,source.table",
"database.history.skip.unparseable.ddl": true,
"database.history.name.srv.addr": "localhost:9876",
"database.history.rocketmq.topic": "db-history-debezium-topic",
"database.history.store.only.monitored.tables.ddl": true,
"include.schema.changes": false,
"database.server.name": "dbserver1",
"database.port": 3306,
"database.hostname": "database ip",
"database.connectionTimeZone": "UTC",
"database.user": "debezium",
"database.password": "dbz",
"table.include.list": "inventory.employee",
"max.batch.size": 50,
"database.include.list": "inventory",
"snapshot.mode": "when_needed",
"database.server.id": "184054",
"key.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
"value.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"}'

----------------------------------------

TITLE: Configuring Consumer Threads in RocketMQ
DESCRIPTION: Shows how to set the minimum and maximum number of consumer threads when starting a RocketMQ consumer.

LANGUAGE: java
CODE:
consumer.setConsumeThreadMin(20);
consumer.setConsumeThreadMax(20);

----------------------------------------

TITLE: Starting RocketMQ Brokers with DLedger (Shell)
DESCRIPTION: Commands to start multiple RocketMQ brokers with DLedger configurations.

LANGUAGE: shell
CODE:
nohup sh bin/mqbroker -c conf/dledger/xxx-n0.conf & 
nohup sh bin/mqbroker -c conf/dledger/xxx-n1.conf & 
nohup sh bin/mqbroker -c conf/dledger/xxx-n2.conf & 

----------------------------------------

TITLE: Elasticsearch Docker Setup
DESCRIPTION: Docker commands to set up two Elasticsearch instances for source and destination.

LANGUAGE: shell
CODE:
docker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.1

docker run --name es1 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" \
-v /Users/YourUsername/rocketmqconnect/es/es1_data:/usr/share/elasticsearch/data \
-d docker.elastic.co/elasticsearch/elasticsearch:7.15.1 

docker run --name es2 -p 9201:9200 -p 9301:9300 -e "discovery.type=single-node" -e "ES_JAVA_OPTS=-Xms1g -Xmx1g" \
-v /Users/YourUsername/rocketmqconnect/es/es2_data:/usr/share/elasticsearch/data \
-d docker.elastic.co/elasticsearch/elasticsearch:7.15.1

----------------------------------------

TITLE: Building RocketMQ MQTT from Source
DESCRIPTION: Commands to clone and build the RocketMQ MQTT project from source code using Maven.

LANGUAGE: text
CODE:
git clone https://github.com/apache/rocketmq-mqtt
cd rocketmq-mqtt 
mvn -Prelease-all -DskipTests clean install -U 
cd distribution/target/

----------------------------------------

TITLE: Generating GPG Keys for Release Signing
DESCRIPTION: Shell commands to generate a new GPG key pair with 4096-bit RSA encryption for signing Apache RocketMQ releases.

LANGUAGE: shell
CODE:
gpg --gen-key
# Set key type to RSA and RSA
# Set key size to 4096 bits
# Set key to never expire

----------------------------------------

TITLE: Message Filter Configuration
DESCRIPTION: Examples of implementing message filtering using Tags and SQL92 expressions in RocketMQ.

LANGUAGE: java
CODE:
consumer.subscribe("TagFilterTest", "TagA");

LANGUAGE: java
CODE:
Message msg = new Message("topic", "tagA", "Hello MQ".getBytes());
msg.putUserProperties("a", "1");

LANGUAGE: java
CODE:
consumer.subscribe("SqlFilterTest",
    MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))" +
        "and (a is not null and a between 0 and 3)"));

----------------------------------------

TITLE: HTTP Response Format for RocketMQ Name Server Addresses
DESCRIPTION: Shows the expected format of the response from the HTTP static server used for Name Server addressing in RocketMQ.

LANGUAGE: text
CODE:
192.168.0.1:9876;192.168.0.2:9876   

----------------------------------------

TITLE: Configuring Elasticsearch Source Connector
DESCRIPTION: REST API call to configure and start the Elasticsearch source connector.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/elasticsearchSourceConnector -d  '{
  "connector.class":"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSourceConnector",
    "elasticsearchHost":"localhost",
    "elasticsearchPort":9200,
    "index":{
        "connect_es": {
            "primaryShards":1,
            "id":1
        }
    },
    "max.tasks":2,
    "connect.topicname":"ConnectEsTopic",
    "value.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
    "key.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Synchronous Message Sending in RocketMQ using Java
DESCRIPTION: This Java code demonstrates synchronous message sending in RocketMQ. It initializes a producer, sets the NameServer address, creates messages with topic and tag, and sends them synchronously. It also handles the send result and exceptions.

LANGUAGE: java
CODE:
public class SyncProducer {
  public static void main(String[] args) throws Exception {
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    for (int i = 0; i < 100; i++) {
      Message msg = new Message("TopicTest",
        "TagA",
        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET)
      );
      SendResult sendResult = producer.send(msg);
      System.out.printf("%s%n", sendResult);
    }
    producer.shutdown();
  }
}

----------------------------------------

TITLE: Pushing Changes to Remote Repository
DESCRIPTION: Commands for pushing local changes to the remote repository and setting up upstream tracking.

LANGUAGE: shell
CODE:
git push --set-upstream apache RocketMQ-Vxx.0

----------------------------------------

TITLE: Ordered Message Consumption Implementation
DESCRIPTION: Demonstrates how to implement ordered message consumption using MessageListenerOrderly interface.

LANGUAGE: java
CODE:
consumer.registerMessageListener(new MessageListenerOrderly() {
            AtomicLong consumeTimes = new AtomicLong(0);
            @Override
            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {
                System.out.printf("%s Receive New Messages: %s %n", Thread.currentThread().getName(), msgs);
                this.consumeTimes.incrementAndGet();
                if ((this.consumeTimes.get() % 2) == 0) {
                    return ConsumeOrderlyStatus.SUCCESS;
                } else if ((this.consumeTimes.get() % 5) == 0) {
                    context.setSuspendCurrentQueueTimeMillis(3000);
                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;
                }
                return ConsumeOrderlyStatus.SUCCESS;
            }
        });

----------------------------------------

TITLE: Modifying /etc/hosts for RocketMQ HTTP Static Server Addressing
DESCRIPTION: Demonstrates how to modify the /etc/hosts file to change the IP address associated with the default HTTP static server used for Name Server addressing in RocketMQ.

LANGUAGE: text
CODE:
10.232.22.67    jmenv.taobao.net   

----------------------------------------

TITLE: MySQL Database Schema Setup
DESCRIPTION: SQL commands to create and populate the source MySQL database schema

LANGUAGE: sql
CODE:
create database bank;
use bank;

create table bank.user
(
    id       bigint NOT NULL AUTO_INCREMENT,
    user_id          integer,
    name    varchar(8),
    age integer,
    birthday date,
    datetime_created timestamp(3),
    datetime_updated timestamp(3),
    height           decimal(11, 2) null,
    PRIMARY KEY (`id`)
);

insert into bank.user values (1003, 1, 'lilei2', 10, now(), now(), now(), 1.72);
update bank.user set user_id = 1003 where id = 1003;

----------------------------------------

TITLE: RocketMQ Java Client Maven Dependency
DESCRIPTION: Maven dependency configuration for RocketMQ Java client SDK.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>${rocketmq-client-java-version}</version>
</dependency>

----------------------------------------

TITLE: Creating and Managing Development Branches
DESCRIPTION: Commands for creating new branches, adding files, and committing changes to the local repository.

LANGUAGE: shell
CODE:
git checkout -b RocketMQ-Vxx.0
git add /rocketmq/pom.xml
git commit -a -m "pom"

----------------------------------------

TITLE: MessageListenerConcurrently Interface Implementation
DESCRIPTION: Shows the interface definition for concurrent message consumption in RocketMQ, used for asynchronous message processing.

LANGUAGE: java
CODE:
public interface MessageListenerConcurrently extends MessageListener {
    ConsumeConcurrentlyStatus consumeMessage(final List<MessageExt> msgs,
        final ConsumeConcurrentlyContext context);
}

----------------------------------------

TITLE: Defining Events in RocketMQ EventBridge
DESCRIPTION: This snippet provides the definition of events used in RocketMQ EventBridge. It emphasizes that events refer to important things that have already occurred.

LANGUAGE: text
CODE:
Events refer to things that have already happened, especially important things.

----------------------------------------

TITLE: Starting RocketMQ NameServer
DESCRIPTION: Commands to start the RocketMQ NameServer and verify its successful startup by checking the log file.

LANGUAGE: shell
CODE:
### start namesrv
$ nohup sh bin/mqnamesrv &
 
### verify namesrv 
$ tail -f ~/logs/rocketmqlogs/namesrv.log
The Name Server boot success...

----------------------------------------

TITLE: Installing Helm via Curl in Bash
DESCRIPTION: Downloads and installs Helm 3 using a curl command if not already installed.

LANGUAGE: bash
CODE:
$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

----------------------------------------

TITLE: Merging Committer PR
DESCRIPTION: Commands for committers to merge their own pull requests.

LANGUAGE: shell
CODE:
$ git checkout develop
$ git pull apache develop
$ git merge --squash RocketMQ-Vxx.0

----------------------------------------

TITLE: Implementing Lite Pull Consumer with Assign Mode in RocketMQ (Java)
DESCRIPTION: Illustrates the usage of DefaultLitePullConsumer in Assign mode, including manual queue assignment, offset seeking, and manual offset commitment. It demonstrates how to fetch message queues, assign specific queues, and poll messages.

LANGUAGE: java
CODE:
public class LitePullConsumerAssign {
    public static volatile boolean running = true;
    public static void main(String[] args) throws Exception {
        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("please_rename_unique_group_name");
        litePullConsumer.setAutoCommit(false);
        litePullConsumer.start();
        Collection<MessageQueue> mqSet = litePullConsumer.fetchMessageQueues("TopicTest");
        List<MessageQueue> list = new ArrayList<>(mqSet);
        List<MessageQueue> assignList = new ArrayList<>();
        for (int i = 0; i < list.size() / 2; i++) {
            assignList.add(list.get(i));
        }
        litePullConsumer.assign(assignList);
        litePullConsumer.seek(assignList.get(0), 10);
        try {
            while (running) {
                List<MessageExt> messageExts = litePullConsumer.poll();
                System.out.printf("%s %n", messageExts);
                litePullConsumer.commitSync();
            }
        } finally {
            litePullConsumer.shutdown();
        }
    }
}

----------------------------------------

TITLE: Defining Event Ordering in RocketMQ EventBridge
DESCRIPTION: This snippet explains the natural ordering and uniqueness of events within the same entity.

LANGUAGE: text
CODE:
The same entity cannot have both A and B occur at the same time, there must be a temporal relationship; if so, these two events must belong to different event types.

----------------------------------------

TITLE: Compiling Debezium RocketMQ Connector in Java
DESCRIPTION: Commands to compile the Debezium RocketMQ Connector plugin and move it to the connector plugins directory.

LANGUAGE: shell
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/
$ mvn clean package -Dmaven.test.skip=true

mkdir -p /usr/local/connector-plugins
cp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins

----------------------------------------

TITLE: Sending and Receiving Messages with RocketMQ Tools
DESCRIPTION: Commands to set the NameServer address and use RocketMQ tools to send and receive messages for testing purposes.

LANGUAGE: shell
CODE:
$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: Compiling Debezium RocketMQ Connector in Java
DESCRIPTION: Commands to compile the Debezium RocketMQ Connector plugin and move it to the connector plugins directory.

LANGUAGE: shell
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/
$ mvn clean package -Dmaven.test.skip=true

mkdir -p /usr/local/connector-plugins
cp rocketmq-connect-debezium-postgresql/target/rocketmq-connect-debezium-postgresql-0.0.1-SNAPSHOT-jar-with-dependencies.jar /usr/local/connector-plugins

----------------------------------------

TITLE: Finalizing PR Merge
DESCRIPTION: Commands for completing the PR merge process and pushing to remote.

LANGUAGE: shell
CODE:
$ git commit --author="contributor_name <contributor_email>" -a -m "RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ"
$ git push apache develop
$ git push origin develop

----------------------------------------

TITLE: G1 Garbage Collector Configuration
DESCRIPTION: G1 garbage collector settings optimized for RocketMQ production environments, including heap region size and occupancy thresholds.

LANGUAGE: text
CODE:
-XX:+UseG1GC
-XX:G1HeapRegionSize=16m
-XX:G1ReservePercent=25
-XX:InitiatingHeapOccupancyPercent=30

----------------------------------------

TITLE: Describing Event Details in RocketMQ EventBridge
DESCRIPTION: This snippet outlines the typical details included in an event to provide a comprehensive record.

LANGUAGE: text
CODE:
When did the event occur?
Who generated it?
What type of event is it?
What is the content of the event? What is the structure of the content?
... ...

----------------------------------------

TITLE: Creating Docker Network
DESCRIPTION: Creates a shared Docker network for RocketMQ containers to communicate.

LANGUAGE: shell
CODE:
docker network create rocketmq

----------------------------------------

TITLE: Querying ACL Configuration Version in RocketMQ
DESCRIPTION: This shell command shows how to query the ACL configuration file version information of the cluster Broker using the mqadmin tool. It requires specifying the namesrv address and cluster name.

LANGUAGE: shell
CODE:
sh mqadmin clusterAclConfigVersion -n 192.168.1.2:9876 -c DefaultCluster

----------------------------------------

TITLE: Basic JVM Memory Configuration for RocketMQ
DESCRIPTION: Core JVM settings for server mode and heap memory allocation. Sets equal Xms and Xmx values to prevent heap resizing.

LANGUAGE: text
CODE:
-server -Xms8g -Xmx8g

----------------------------------------

TITLE: Starting EventBridge Service via Shell Script
DESCRIPTION: This command starts the EventBridge service using the provided shell script.

LANGUAGE: shell
CODE:
sh bin/eventbridge.sh start

----------------------------------------

TITLE: RocketMQ Topic Creation
DESCRIPTION: Shell commands to create a RocketMQ topic using mqadmin tool.

LANGUAGE: shell
CODE:
docker exec -it rmqbroker bash
sh mqadmin updatetopic -t TestTopic -c DefaultCluster

----------------------------------------

TITLE: Building and Installing SFTP Connector Plugin
DESCRIPTION: Commands to build the SFTP connector plugin and install it in the plugins directory

LANGUAGE: shell
CODE:
cd $RMQ_CONNECT_HOME/connectors/rocketmq-connect-sftp/

mvn clean package -Dmaven.test.skip=true

mkdir -p /Users/YourUsername/rocketmqconnect/connector-plugins
cp target/rocketmq-connect-sftp-0.0.1-SNAPSHOT-jar-with-dependencies.jar /Users/YourUsername/rocketmqconnect/connector-plugins

----------------------------------------

TITLE: Pushing Merged Changes to Remote Repository in Git
DESCRIPTION: Commands to push the merged changes to the Apache RocketMQ repository and update the personal GitHub repository.

LANGUAGE: shell
CODE:
$ git push apache develop
$ git push origin develop

----------------------------------------

TITLE: Creating EventBridge Target via HTTP POST Request
DESCRIPTION: This API call creates a new event target in EventBridge that delivers events to EventBridge in the cloud.

LANGUAGE: json
CODE:
POST /target/createEventTargets HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
    "eventBusName":"demo-bus",
    "eventRuleName":"demo-rule",
    "eventTargets":[
            {
            "eventTargetName":"eventbridge-target",
            "className":"acs.eventbridge",
                "config":{
                "RegionId":"cn-hangzhou",
                "AliyunEventBus":"rocketmq-eventbridge"
                }
            }
        ]
}

----------------------------------------

TITLE: Installing Helm 3 in Bash
DESCRIPTION: Curl command to download and install Helm 3 on the system.

LANGUAGE: bash
CODE:
$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

----------------------------------------

TITLE: Installing Helm 3 in Bash
DESCRIPTION: Curl command to download and install Helm 3 on the system.

LANGUAGE: bash
CODE:
$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

----------------------------------------

TITLE: Handling APPLY_TOPIC_URL Exception in Java
DESCRIPTION: This snippet shows the exception message when a topic doesn't exist and needs to be created before use. It's thrown when a Producer sends or a Consumer tries to consume from a non-existent topic.

LANGUAGE: java
CODE:
topic[xxx] not exist, apply first please!

----------------------------------------

TITLE: Merging Contributor Pull Request in Git
DESCRIPTION: Commands for a committer to merge a contributor's pull request. This includes updating the local develop branch and merging the contributor's changes.

LANGUAGE: shell
CODE:
$ git checkout develop	# switch to local develop branch
$ git pull apache develop	# fast-forward to current remote HEAD
$ git pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0  # merge to branch

----------------------------------------

TITLE: Creating DingTalk Target with HTTP POST Request
DESCRIPTION: This HTTP POST request creates an event target that delivers notifications to a DingTalk robot for the 'demo-rule' in the 'demo-bus' event bus.

LANGUAGE: json
CODE:
POST /target/createEventTargets HTTP/1.1
Host: demo.eventbridge.com
Content-Type: application/json; charset=utf-8
{
    "eventBusName":"demo-bus",
    "eventRuleName":"demo-rule",
    "eventTargets":[
        {
            "eventTargetName":"dingtalk-target",
            "className":"acs.dingtalk",
            "config":{
            "WebHook":"https://oapi.dingtalk.com/robot/send?access_token=b43a54b702314415c2acdae97eda1e092528b7a9dddb31510a5b4430be2ef867",
            "SecretKey":"SEC53483bf496b8f9e0b4ab0ab669d422208e6ccfaedfd5120ea6b8426b9ecd47aa",
            "Body":"{\"template\":\"{\\\"text\\\":{\\\"content\\\":\\\"${content}\\\"},\\\"msgtype\\\":\\\"text\\\"}\",\"form\":\"TEMPLATE\",\"value\":\"{\\\"content\\\":\\\"$.data.body\\\"}\"}"}
        }
    ]
}

----------------------------------------

TITLE: Configuring RocketMQ Deployment in YAML
DESCRIPTION: YAML configuration for adjusting memory resources in the RocketMQ Helm chart values file.

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: 2
    memory: 10Gi
  requests:
    cpu: 2
    memory: 10Gi

----------------------------------------

TITLE: Testing Message Sending and Receiving with RocketMQ Tools
DESCRIPTION: Commands to enter the broker container and use RocketMQ tools to test message production and consumption.

LANGUAGE: shell
CODE:
# Enter broker container
docker exec -it rmqbroker bash

# Test message production
sh tools.sh org.apache.rocketmq.example.quickstart.Producer

# Test message consumption
sh tools.sh org.apache.rocketmq.example.quickstart.Consumer

----------------------------------------

TITLE: Pushing Branch for Pull Request in Git
DESCRIPTION: Commands to switch to the branch for the pull request and push it to the remote repository. This prepares the branch for creating a pull request on GitHub.

LANGUAGE: shell
CODE:
$ git checkout new-official-website	# git checkout -b new-official-website
$ git push origin new-official-website	# push to https://github.com/cuser/rocketmq-site.git

----------------------------------------

TITLE: Configuring RocketMQ Core Settings
DESCRIPTION: Essential configuration settings that must be enabled in RocketMQ 4.9.3+ to support MQTT functionality.

LANGUAGE: text
CODE:
enableLmq = true 
enableMulitDispatch = true

----------------------------------------

TITLE: Creating Topic and Consumer Group in Bash
DESCRIPTION: Commands to create a topic and consumer group using the mqadmin tool inside the RocketMQ broker pod.

LANGUAGE: bash
CODE:
$ kubectl exec -ti rocketmq-demo-broker-0  -- /bin/bash

$ sh mqadmin updatetopic  -t TestTopic -c DefaultCluster

$ sh mqadmin updateSubGroup -c DefaultCluster -g TestGroup

----------------------------------------

TITLE: RocketMQ Push Consumer Example
DESCRIPTION: Java code example for implementing a RocketMQ push consumer.

LANGUAGE: java
CODE:
import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.consumer.ConsumeResult;
import org.apache.rocketmq.client.apis.consumer.FilterExpression;
import org.apache.rocketmq.client.apis.consumer.FilterExpressionType;
import org.apache.rocketmq.client.apis.consumer.PushConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PushConsumerExample {
    private static final Logger logger = LoggerFactory.getLogger(PushConsumerExample.class);

    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "localhost:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
            .setEndpoints(endpoints)
            .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "YourConsumerGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
            .setClientConfiguration(clientConfiguration)
            .setConsumerGroup(consumerGroup)
            .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
            .setMessageListener(messageView -> {
                logger.info("Consume message successfully, messageId={}", messageView.getMessageId());
                return ConsumeResult.SUCCESS;
            })
            .build();
        Thread.sleep(Long.MAX_VALUE);
    }

----------------------------------------

TITLE: Creating and Switching to New Branch in Git
DESCRIPTION: Commands to create a new branch for development, add changes, and commit them. This isolates the changes for the pull request.

LANGUAGE: shell
CODE:
$ git checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]
$ git add /rocketmq/pom.xml # git add [dir/file]
$ git commit -a -m "pom"	# git commit [-all] [-msg] [message]

----------------------------------------

TITLE: MQTT Service Configuration
DESCRIPTION: Configuration settings for MQTT service including authorization, namesrv access point, and retry topics.

LANGUAGE: text
CODE:
username=xxx    // Authorization verification account configuration
secretKey=xxx    // Authorization verification account configuration
NAMESRV_ADDR=xxx  //namesrv access point
eventNotifyRetryTopic=xx   //notify retry topic, created in advance
clientRetryTopic=xx  //Client message retry topic, created in advance

----------------------------------------

TITLE: Topic Offset Collection in Java
DESCRIPTION: Code demonstrating how to collect topic offset information using MQAdminExt including initialization, topic stats examination, and metric collection.

LANGUAGE: java
CODE:
TopicList topicList = null;
try {  
    topicList = mqAdminExt.fetchAllTopicList();
} catch (Exception ex) {
        log.error(String.format("collectTopicOffset-exception comes getting topic list from namesrv, address is %s",
            JSON.toJSONString(mqAdminExt.getNameServerAddressList())));
        return;
}

LANGUAGE: java
CODE:
Set < String > topicSet = topicList != null ? topicList.getTopicList() : null;
for (String topic: topicSet) {
     TopicStatsTable topicStats = null;
     try {
         topicStats = mqAdminExt.examineTopicStats(topic);
     } catch (Exception ex) {
         log.error(String.format("collectTopicOffset-getting topic(%s) stats error. the namesrv address is %s",
             topic,
             JSON.toJSONString(mqAdminExt.getNameServerAddressList())));
         continue;}

LANGUAGE: java
CODE:
Set<Map.Entry<MessageQueue, TopicOffset>> topicStatusEntries = topicStats.getOffsetTable().entrySet();
HashMap<String, Long> brokerOffsetMap = new HashMap<>();
HashMap<String, Long> brokerUpdateTimestampMap = new HashMap<>();
for (Map.Entry<MessageQueue, TopicOffset> topicStatusEntry : topicStatusEntries) {
    MessageQueue q = topicStatusEntry.getKey();
    TopicOffset offset = topicStatusEntry.getValue();
    if (brokerOffsetMap.containsKey(q.getBrokerName())) {
        brokerOffsetMap.put(q.getBrokerName(), brokerOffsetMap.get(q.getBrokerName()) + offset.getMaxOffset());
    } else {
        brokerOffsetMap.put(q.getBrokerName(), offset.getMaxOffset());
    }
    if (brokerUpdateTimestampMap.containsKey(q.getBrokerName())) {
        if (offset.getLastUpdateTimestamp() > brokerUpdateTimestampMap.get(q.getBrokerName())) {
            brokerUpdateTimestampMap.put(q.getBrokerName(), offset.getLastUpdateTimestamp());
        }
    } else {
        brokerUpdateTimestampMap.put(q.getBrokerName(),
        offset.getLastUpdateTimestamp());
    }
}

----------------------------------------

TITLE: Rebasing Local Branch in Git
DESCRIPTION: Command to rebase the local branch with the latest changes from the develop branch of the origin repository. This ensures the local branch is up-to-date before making changes.

LANGUAGE: shell
CODE:
$ git rebase origin/develop # git rebase [branch]

----------------------------------------

TITLE: Available Example Classes
DESCRIPTION: List of example Java classes demonstrating MQTT and RocketMQ client implementations for publishing and subscribing to messages.

LANGUAGE: text
CODE:
MqttConsumer.java  // MQTT client initiates subscription message
MqttProducer.java   // MQTT client starts publishing messages
RocketMQConsumer.java // RocketMQ client starts subscription message
RocketMQProducer.java  // RocketMQ client starts publishing messages

----------------------------------------

TITLE: Uninstalling RocketMQ Deployment in Bash
DESCRIPTION: Command to release all RocketMQ resources deployed with Helm.

LANGUAGE: bash
CODE:
$ helm uninstall rocketmq-demo

----------------------------------------

TITLE: Sending Batch Messages with Apache RocketMQ in Java
DESCRIPTION: This code snippet demonstrates how to create a DefaultMQProducer, prepare a batch of messages, and send them together. It illustrates the process of grouping multiple messages with the same topic into a single batch for efficient sending.

LANGUAGE: java
CODE:
public class SimpleBatchProducer {

    public static void main(String[] args) throws Exception {
        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName");
        producer.start();

        //If you just send messages of no more than 1MiB at a time, it is easy to use batch
        //Messages of the same batch should have: same topic, same waitStoreMsgOK and no schedule support
        String topic = "BatchTest";
        List<Message> messages = new ArrayList<>();
        messages.add(new Message(topic, "Tag", "OrderID001", "Hello world 0".getBytes()));
        messages.add(new Message(topic, "Tag", "OrderID002", "Hello world 1".getBytes()));
        messages.add(new Message(topic, "Tag", "OrderID003", "Hello world 2".getBytes()));

        producer.send(messages);
    }
}

----------------------------------------

TITLE: Sending Batch Messages with Apache RocketMQ in Java
DESCRIPTION: This code snippet demonstrates how to create a DefaultMQProducer, prepare a batch of messages, and send them together. It illustrates the process of grouping multiple messages with the same topic into a single batch for efficient sending.

LANGUAGE: java
CODE:
public class SimpleBatchProducer {

    public static void main(String[] args) throws Exception {
        DefaultMQProducer producer = new DefaultMQProducer("BatchProducerGroupName");
        producer.start();

        //If you just send messages of no more than 1MiB at a time, it is easy to use batch
        //Messages of the same batch should have: same topic, same waitStoreMsgOK and no schedule support
        String topic = "BatchTest";
        List<Message> messages = new ArrayList<>();
        messages.add(new Message(topic, "Tag", "OrderID001", "Hello world 0".getBytes()));
        messages.add(new Message(topic, "Tag", "OrderID002", "Hello world 1".getBytes()));
        messages.add(new Message(topic, "Tag", "OrderID003", "Hello world 2".getBytes()));

        producer.send(messages);
    }
}

----------------------------------------

TITLE: Creating Docker Network for RocketMQ
DESCRIPTION: Command to create a Docker network for RocketMQ containers to communicate with each other.

LANGUAGE: shell
CODE:
docker network create rocketmq

----------------------------------------

TITLE: Compiling Debezium Connector
DESCRIPTION: Commands to compile the Debezium RocketMQ Connector and move it to the plugins directory

LANGUAGE: shell
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/
$ mvn clean package -Dmaven.test.skip=true

----------------------------------------

TITLE: Pulling RocketMQ Docker Image
DESCRIPTION: Command to pull the RocketMQ 4.9.6 Docker image from Docker Hub.

LANGUAGE: shell
CODE:
docker pull apache/rocketmq:4.9.6

----------------------------------------

TITLE: Creating and Testing SFTP Source Files
DESCRIPTION: Commands to create and verify test data files for SFTP transfer

LANGUAGE: shell
CODE:
mkdir -p /Users/YourUsername/rocketmqconnect/sftp-test/

cd /Users/YourUsername/rocketmqconnect/sftp-test/

touch source.txt

echo 'John Doe|100000202211290001|20221129001|30000.00|2022-11-28|03:00:00|7.00
Jane Smith|100000202211290002|20221129002|40000.00|2022-11-28|04:00:00|9.00
Bob Johnson|100000202211290003|20221129003|50000.00|2022-11-28|05:00:00|12.00' >> source.txt

----------------------------------------

TITLE: Adding RocketMQ Client Dependency in Java Projects
DESCRIPTION: These snippets show how to add the RocketMQ client dependency to Java projects using Maven or Gradle build systems. The dependency is 'org.apache.rocketmq:rocketmq-client' with version 4.9.4.

LANGUAGE: xml
CODE:
<dependency>
  <groupId>org.apache.rocketmq</groupId>
  <artifactId>rocketmq-client</artifactId>
  <version>4.9.4</version>
</dependency>

LANGUAGE: gradle
CODE:
compile 'org.apache.rocketmq:rocketmq-client:4.9.4'

----------------------------------------

TITLE: Configuring RocketMQ Connect Standalone
DESCRIPTION: Configuration settings for RocketMQ Connect standalone mode

LANGUAGE: shell
CODE:
workerId=standalone-worker
storePathRootDir=/tmp/storeRoot
httpPort=8082
namesrvAddr=localhost:9876
aclEnable=false
accessKey=rocketmq
secretKey=12345678
autoCreateGroupEnable=false
clusterName="DefaultCluster"
pluginPaths=/usr/local/connector-plugins

----------------------------------------

TITLE: Starting RocketMQ Broker (Windows)
DESCRIPTION: Commands to configure and start the RocketMQ Broker container on Windows, including setting the broker IP and verifying successful startup.

LANGUAGE: shell
CODE:
# Configure Broker IP address
echo "brokerIP1=127.0.0.1" >broker.conf

# Start Broker
docker run -d ^
--name rmqbroker ^
--net rocketmq ^
-p 10912:10912 -p 10911:10911 -p 10909:10909 ^
-e "NAMESRV_ADDR=rmqnamesrv:9876" ^
-v %cd%\broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf ^
apache/rocketmq:4.9.6 sh mqbroker ^
-c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf

# Verify Broker startup
docker logs rmqbroker

----------------------------------------

TITLE: RocketMQ NameServer Configuration Parameters
DESCRIPTION: Configuration table detailing core NameServer settings including RocketMQ home directory, address settings, and basic operational flags.

LANGUAGE: markdown
CODE:
| Name               | Description                                                  | Parameter type | Default value | Effective value | Importance |
| ------------------ | ------------------------------------------------------------ | -------------- | ------------- | --------------- | ---------- |
| rocketmqHome       | RocketMQ main directory, default user main directory         | String         |               |                 |            |
| namesrvAddr        | NameServer address                                           | String         |               |                 |            |
| kvConfigpath       | KV configuration file path, including configuration information for ordered message topics | String         |               |                 |            |
| configStorePath    | NameServer configuration file path, it is recommended to use the -c option to specify the NameServer configuration file path | String         |               |                 |            |
| clusterTest        | Whether or not cluster testing is supported, default is false | boolean        |               |                 |            |
| orderMessageEnable | Whether or not ordered messages are supported, default is false | boolean        |               |                 |            |

----------------------------------------

TITLE: Pushing Merged Branch to Remote in Shell
DESCRIPTION: Commands to push the merged branch to the Apache RocketMQ remote repository and update the personal GitHub repository.

LANGUAGE: shell
CODE:
git push apache develop
git push origin develop

----------------------------------------

TITLE: PostgreSQL Schema Setup
DESCRIPTION: SQL commands to create and populate the source PostgreSQL database schema and tables.

LANGUAGE: sql
CODE:
CREATE SCHEMA bank;
SET search_path TO bank,public;
CREATE TABLE bank.holding (
    holding_id int,
    user_id int,
    holding_stock varchar(8),
    holding_quantity int,
    datetime_created timestamp,
    datetime_updated timestamp,
    primary key(holding_id)
);
ALTER TABLE bank.holding replica identity FULL;

----------------------------------------

TITLE: Implementing RocketMQ Producer in Java
DESCRIPTION: Java code for creating a RocketMQ producer and sending a message to a specified topic.

LANGUAGE: java
CODE:
package com.rocketmq.producer;

import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;


public class ProducerDemo {
    public static void main(String[] args) throws ClientException {
        String endpoint = "192.168.85.227:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
                .setTopics(topic)
                .setClientConfiguration(configuration)
                .build();
        Message message = provider.newMessageBuilder()
                .setTopic(topic)
                .setKeys("messageKey")
                .setTag("messageTag")
                .setBody("messageBody".getBytes())
                .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            System.out.println("Send message successfully, messageId="+sendReceipt.getMessageId());
        } catch (ClientException e) {

        }
    }
}

----------------------------------------

TITLE: Starting RocketMQ NameServer
DESCRIPTION: Commands to start the NameServer service and verify its successful launch by checking the log file.

LANGUAGE: shell
CODE:
### Start the namesrv service
$ nohup sh bin/mqnamesrv &
 
### Verify that the namesrv service is started successfully
$ tail -f ~/logs/rocketmqlogs/namesrv.log
The Name Server boot success...

----------------------------------------

TITLE: Implementing RocketMQ Producer in Java
DESCRIPTION: Java code for creating a RocketMQ producer and sending a message to a specified topic.

LANGUAGE: java
CODE:
package com.rocketmq.producer;

import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientConfigurationBuilder;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.message.Message;
import org.apache.rocketmq.client.apis.producer.Producer;
import org.apache.rocketmq.client.apis.producer.SendReceipt;


public class ProducerDemo {
    public static void main(String[] args) throws ClientException {
        String endpoint = "192.168.85.227:8081";
        String topic = "TestTopic";
        ClientServiceProvider provider = ClientServiceProvider.loadService();
        ClientConfigurationBuilder builder = ClientConfiguration.newBuilder().setEndpoints(endpoint);
        ClientConfiguration configuration = builder.build();
        Producer producer = provider.newProducerBuilder()
                .setTopics(topic)
                .setClientConfiguration(configuration)
                .build();
        Message message = provider.newMessageBuilder()
                .setTopic(topic)
                .setKeys("messageKey")
                .setTag("messageTag")
                .setBody("messageBody".getBytes())
                .build();
        try {
            SendReceipt sendReceipt = producer.send(message);
            System.out.println("Send message successfully, messageId="+sendReceipt.getMessageId());
        } catch (ClientException e) {

        }
    }
}

----------------------------------------

TITLE: MySQL Schema Setup
DESCRIPTION: SQL commands to create the target MySQL database schema and tables.

LANGUAGE: sql
CODE:
create database bank1;
CREATE TABLE holding (
    holding_id int,
    user_id int,
    holding_stock varchar(8),
    holding_quantity int,
    datetime_created bigint,
    datetime_updated bigint,
    primary key(holding_id)
);

----------------------------------------

TITLE: Pulling RocketMQ Docker Image
DESCRIPTION: Command to pull RocketMQ 4.9.6 Docker image from Docker Hub.

LANGUAGE: shell
CODE:
docker pull apache/rocketmq:4.9.6

----------------------------------------

TITLE: Configuring RocketMQ Deployment in YAML
DESCRIPTION: Modifies the values.yaml file to configure RocketMQ deployment parameters such as resource limits and image version.

LANGUAGE: yaml
CODE:
  resources:
    limits:
      cpu: 2
      memory: 10Gi
    requests:
      cpu: 2
      memory: 10Gi

----------------------------------------

TITLE: Merging Committer PR in Shell
DESCRIPTION: Commands for a committer to merge their own pull request, including updating the local branch and squashing commits.

LANGUAGE: shell
CODE:
git checkout develop      # switch to local develop branch
git pull apache develop   # fast-forward to current remote HEAD
git merge --squash RocketMQ-Vxx.0	# merge to branch

----------------------------------------

TITLE: Compiling Debezium Connector Plugin
DESCRIPTION: Commands to compile and install the Debezium connector plugins for MySQL and PostgreSQL

LANGUAGE: bash
CODE:
$ cd rocketmq-connect/connectors/rocketmq-connect-debezium/
$ mvn clean package -Dmaven.test.skip=true

----------------------------------------

TITLE: Starting RocketMQ NameServer
DESCRIPTION: Commands to start and verify RocketMQ NameServer container.

LANGUAGE: shell
CODE:
# Start NameServer
docker run -d --name rmqnamesrv -p 9876:9876 --net rocketmq apache/rocketmq:4.9.6 sh mqnamesrv

# Verify if NameServer started successfully
docker logs -f rmqnamesrv

----------------------------------------

TITLE: Creating Target Table in MySQL
DESCRIPTION: SQL commands to create a database and table in the MySQL database for syncing data.

LANGUAGE: sql
CODE:
create database bank1;
CREATE TABLE holding (
                          holding_id int,
                          user_id int,
                          holding_stock varchar(8),
                          holding_quantity int,
                          datetime_created bigint,
                          datetime_updated bigint,
                          primary key(holding_id)
);

----------------------------------------

TITLE: Building RocketMQ Connect Runtime
DESCRIPTION: Commands to clone and build the RocketMQ Connect runtime environment

LANGUAGE: shell
CODE:
git clone https://github.com/apache/rocketmq-connect.git

cd  rocketmq-connect

export RMQ_CONNECT_HOME=`pwd`

mvn -Prelease-connect -Dmaven.test.skip=true clean install -U

----------------------------------------

TITLE: SFTP Sink Connector Configuration
DESCRIPTION: Curl command to configure and start the SFTP sink connector for writing data to a file

LANGUAGE: shell
CODE:
curl -X POST --location "http://localhost:8082/connectors/SftpSinkConnector" --http1.1 \
    -H "Host: localhost:8082" \
    -H "Content-Type: application/json" \
    -d '{
          "connector.class": "org.apache.rocketmq.connect.http.sink.SftpSinkConnector",
          "host": "127.0.0.1",
          "port": 22,
          "username": "YourUsername",
          "password": "yourPassword",
          "filePath": "/Users/YourUsername/rocketmqconnect/sftp-test/sink.txt",
          "connect.topicnames": "sftpTopic",
          "fieldSeparator": "|",
          "fieldSchema": "username|idCardNo|orderNo|orderAmount|trxDate|trxTime|profit"
        }'

----------------------------------------

TITLE: RocketMQ Java SDK Maven Dependency
DESCRIPTION: Maven dependency configuration for RocketMQ Java client.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client</artifactId>
    <version>4.9.6</version>
</dependency>

----------------------------------------

TITLE: Starting Debezium Source Connector via REST API
DESCRIPTION: cURL command to start the Debezium source connector for PostgreSQL using the RocketMQ Connect REST API.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/postgres-connector -d  '{
  "connector.class": "org.apache.rocketmq.connect.debezium.postgres.DebeziumPostgresConnector",
  "max.task": "1",
  "connect.topicname": "debezium-postgres-source-01",
  "kafka.transforms": "Unwrap",
  "kafka.transforms.Unwrap.delete.handling.mode": "none",
  "kafka.transforms.Unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
  "kafka.transforms.Unwrap.add.headers": "op,source.db,source.table",
  "database.history.skip.unparseable.ddl": true,
  "database.server.name": "bankserver1",
  "database.port": 5432,
  "database.hostname": "database ip",
  "database.connectionTimeZone": "UTC",
  "database.user": "start_data_engineer",
  "database.dbname": "start_data_engineer",
  "database.password": "password",
  "table.whitelist": "bank.holding",
  "key.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
  "value.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Testing RocketMQ Message Flow
DESCRIPTION: Commands to test basic RocketMQ message sending and receiving functionality using the provided tools

LANGUAGE: shell
CODE:
#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7
$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4

$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: Starting Elasticsearch Source and Sink Connectors
DESCRIPTION: cURL commands to start the Elasticsearch source and sink connectors using the RocketMQ Connect REST API.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/elasticsearchSourceConnector -d  '{
  "connector.class":"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSourceConnector",
    "elasticsearchHost":"localhost",
    "elasticsearchPort":9200,
    "index":{
        "connect_es": {
            "primaryShards":1,
            "id":1
        }
    },
    "max.tasks":2,
    "connect.topicname":"ConnectEsTopic",
    "value.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
    "key.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/elasticsearchSinkConnector -d '{
  "connector.class":"org.apache.rocketmq.connect.elasticsearch.connector.ElasticsearchSinkConnector",
    "elasticsearchHost":"localhost",
    "elasticsearchPort":9201,
    "max.tasks":2,
    "connect.topicnames":"ConnectEsTopic",
    "value.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
    "key.converter":"org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Configuring RocketMQ Broker IP
DESCRIPTION: Sets up the broker configuration file with the local IP address.

LANGUAGE: shell
CODE:
echo "brokerIP1=127.0.0.1" > broker.conf

----------------------------------------

TITLE: Stopping RocketMQ Docker Containers
DESCRIPTION: Commands to stop the RocketMQ NameServer and Broker containers after completing experiments.

LANGUAGE: shell
CODE:
# Stop NameServer container
docker stop rmqnamesrv

# Stop Broker container
docker stop rmqbroker

----------------------------------------

TITLE: Creating a Transaction Topic with Detailed Parameters
DESCRIPTION: This command demonstrates how to create a transaction topic with specific parameters including cluster name, topic name, nameserver address, and the transaction message type attribute.

LANGUAGE: bash
CODE:
./bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster -a +message.type=TRANSACTION

----------------------------------------

TITLE: Creating MySQL Source Table Schema
DESCRIPTION: SQL commands to create the source database schema and insert test data for CDC

LANGUAGE: sql
CODE:
CREATE database inventory;

use inventory;
CREATE TABLE `employee` (
`id` bigint NOT NULL AUTO_INCREMENT,
`name` varchar(128) DEFAULT NULL,
`howold` int DEFAULT NULL,
`male` int DEFAULT NULL,
`company` varchar(128) DEFAULT NULL,
`money` double DEFAULT NULL,
`begin_time` datetime DEFAULT NULL,
`modify_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'modify time',
`decimal_test` decimal(11,2) DEFAULT NULL COMMENT 'test decimal type',
PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

----------------------------------------

TITLE: Pushing Changes to Remote Repository in Shell
DESCRIPTION: Command to push the new branch to the remote repository and set the upstream.

LANGUAGE: shell
CODE:
git push --set-upstream apache RocketMQ-Vxx.0	# push branch to https://github.com/cuser/rocketmq-site.git

----------------------------------------

TITLE: RocketMQ Java Producer Implementation
DESCRIPTION: Java code example demonstrating synchronous message sending using RocketMQ Java SDK.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.common.message.Message;

public class ProducerExample {
    public static void main(String[] args) throws Exception {
        // Create producer instance and set the producer group name
        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
        // Set the Name Server address (replace with actual Name Server address)
        producer.setNamesrvAddr("localhost:9876");
        producer.start();

        try {
            // Create a message instance, specifying the topic, tag, and message body
            Message msg = new Message("TestTopic", "TagA", ("Hello RocketMQ").getBytes());
            // Send the message and get the send result
            SendResult sendResult = producer.send(msg);
            System.out.println("Message sent: " + new String(msg.getBody()));
            System.out.println("Send result: " + sendResult);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Message sending failed.");
        } finally {
            // Shutdown the producer
            producer.shutdown();
        }
    }
}

----------------------------------------

TITLE: Creating a Transaction Topic with Detailed Parameters
DESCRIPTION: This command demonstrates how to create a transaction topic with specific parameters including cluster name, topic name, nameserver address, and the transaction message type attribute.

LANGUAGE: bash
CODE:
./bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster -a +message.type=TRANSACTION

----------------------------------------

TITLE: Incorrect Tag Subscription Example in RocketMQ Java
DESCRIPTION: Examples demonstrating incorrect implementation where consumers in the same group subscribe to different tags, violating the consistency principle.

LANGUAGE: java
CODE:
PushConsumer consumer1 = provider.newPushConsumerBuilder().setConsumerGroup("GroupA").build();
consumer1.subscribe("TopicA", new FilterExpression("Tag1", FilterExpressionType.TAG));

LANGUAGE: java
CODE:
PushConsumer consumer2 = provider.newPushConsumerBuilder().setConsumerGroup("GroupA").build();
consumer2.subscribe("TopicA", new FilterExpression("Tag2", FilterExpressionType.TAG));

LANGUAGE: java
CODE:
PushConsumer consumer3 = provider.newPushConsumerBuilder().setConsumerGroup("GroupA").build();
consumer3.subscribe("TopicA", new FilterExpression("Tag2", FilterExpressionType.TAG));

----------------------------------------

TITLE: Switching and Pushing to New Branch in Shell
DESCRIPTION: Commands to switch to a new branch and push it to the remote repository.

LANGUAGE: shell
CODE:
git checkout new-official-website	# git checkout -b new-official-website
git push origin new-official-website	# push to https://github.com/cuser/rocketmq-site.git

----------------------------------------

TITLE: Deploying RocketMQ with Helm in Bash
DESCRIPTION: Uses Helm to install RocketMQ and checks the status of the deployed pods.

LANGUAGE: bash
CODE:
$ helm install rocketmq-demo ./rocketmq
# Check pod status
# If the parameters are normal, it indicates successful deployment
$ kubectl get pods -o wide -n default

----------------------------------------

TITLE: Starting RocketMQ Broker
DESCRIPTION: Commands to configure and start RocketMQ Broker container with necessary port mappings and volume mounts.

LANGUAGE: shell
CODE:
# Configure the broker's IP address
echo "brokerIP1=127.0.0.1" >broker.conf

# Start Broker
docker run -d \
--name rmqbroker \
--net rocketmq \
-p 10912:10912 -p 10911:10911 -p 10909:10909 \
-e "NAMESRV_ADDR=rmqnamesrv:9876" \
-v ./broker.conf:/home/rocketmq/rocketmq-4.9.6/conf/broker.conf \
apache/rocketmq:4.9.6 sh mqbroker \
-c /home/rocketmq/rocketmq-4.9.6/conf/broker.conf

# Verify if Broker started successfully
docker logs rmqbroker

----------------------------------------

TITLE: Committing Merged Changes in Shell
DESCRIPTION: Command to commit the merged changes, including the contributor's information and closing the related issue.

LANGUAGE: shell
CODE:
git commit --author="contributor_name <contributor_email>" -a -m "RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ"

----------------------------------------

TITLE: Configuring In-Memory GC Logging
DESCRIPTION: Configuration to redirect garbage collection logs to in-memory file system to reduce I/O latency impact.

LANGUAGE: text
CODE:
-Xloggc:/dev/shm/mq_gc_%p.log123

----------------------------------------

TITLE: Committing Merged Changes in Shell
DESCRIPTION: Command to commit the merged changes, including the contributor's information and closing the related issue.

LANGUAGE: shell
CODE:
git commit --author="contributor_name <contributor_email>" -a -m "RocketMQ-Vxx.0 description closes apache/rocketmq#ZZ"

----------------------------------------

TITLE: Pulling RocketMQ Dashboard Docker Image
DESCRIPTION: Command to pull the latest RocketMQ Dashboard Docker image from the official repository.

LANGUAGE: shell
CODE:
docker pull apacherocketmq/rocketmq-dashboard:latest

----------------------------------------

TITLE: Creating FIFO Topic in RocketMQ using mqadmin
DESCRIPTION: Command to create a topic with FIFO message type using the mqadmin tool. Requires nameserver address, topic name, and cluster name parameters.

LANGUAGE: shell
CODE:
sh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=FIFO

----------------------------------------

TITLE: Deleting ACL Access Configuration in RocketMQ
DESCRIPTION: This shell command shows how to delete a corresponding 'account' in the ACL configuration file using the mqadmin tool. It requires specifying the namesrv address, cluster name, and the Access Key to identify the account.

LANGUAGE: shell
CODE:
$ sh mqadmin deleteAccessConfig -n 192.168.1.2:9876 -c DefaultCluster -a RocketMQ

----------------------------------------

TITLE: Managing Feature Branch for PR
DESCRIPTION: Commands for checking out and pushing a feature branch for pull request submission.

LANGUAGE: shell
CODE:
git checkout new-official-website
git push origin new-official-website

----------------------------------------

TITLE: Compiling and Running RocketMQ Dashboard from Source
DESCRIPTION: Commands to compile the RocketMQ Dashboard source code and run the resulting JAR file. Maven is required for compilation.

LANGUAGE: shell
CODE:
mvn clean package -Dmaven.test.skip=true

LANGUAGE: shell
CODE:
java -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar

----------------------------------------

TITLE: Configuring RocketMQ Docker Compose Setup
DESCRIPTION: Docker Compose configuration for deploying a RocketMQ cluster with namesrv, broker, and proxy services. Defines network settings, port mappings, and service dependencies.

LANGUAGE: yaml
CODE:
version: '3.8'
services:
  namesrv:
    image: apache/rocketmq:5.3.1
    container_name: rmqnamesrv
    ports:
      - 9876:9876
    networks:
      - rocketmq
    command: sh mqnamesrv
  broker:
    image: apache/rocketmq:5.3.1
    container_name: rmqbroker
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
    depends_on:
      - namesrv
    networks:
      - rocketmq
    command: sh mqbroker
  proxy:
    image: apache/rocketmq:5.3.1
    container_name: rmqproxy
    networks:
      - rocketmq
    depends_on:
      - broker
      - namesrv
    ports:
      - 8080:8080
      - 8081:8081
    restart: on-failure
    environment:
      - NAMESRV_ADDR=rmqnamesrv:9876
    command: sh mqproxy
networks:
  rocketmq:
    driver: bridge

----------------------------------------

TITLE: Checking RocketMQ Cluster Status
DESCRIPTION: Command to list the cluster nodes and their status using the mqadmin tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin clusterList -n 127.0.0.1:9876

----------------------------------------

TITLE: Pushing New Branch to Remote Repository in Git
DESCRIPTION: Command to push the newly created branch to the remote repository. This makes the branch available on GitHub for creating a pull request.

LANGUAGE: shell
CODE:
$ git push --set-upstream apache RocketMQ-Vxx.0	# push branch to https://github.com/cuser/rocketmq-site.git

----------------------------------------

TITLE: Rebasing Local Branch with Remote Develop Branch in Shell
DESCRIPTION: Command to rebase the local branch with the latest code from the remote develop branch.

LANGUAGE: shell
CODE:
git rebase origin/develop # git rebase [branch]

----------------------------------------

TITLE: Pulling RocketMQ Docker Image
DESCRIPTION: Command to pull RocketMQ 5.3.1 Docker image from Docker Hub.

LANGUAGE: shell
CODE:
docker pull apache/rocketmq:5.3.1

----------------------------------------

TITLE: Building RocketMQ with DLedger Support
DESCRIPTION: Steps to clone the RocketMQ repository, checkout the DLedger branch, and build using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/apache/rocketmq.git
$ cd rocketmq
$ git checkout -b store_with_dledger origin/store_with_dledger
$ mvn -Prelease-all -DskipTests clean install -U

----------------------------------------

TITLE: Merging Committer Pull Request in Git
DESCRIPTION: Commands for a committer to merge their own pull request. This includes updating the local develop branch and merging the changes.

LANGUAGE: shell
CODE:
$ git checkout develop      # switch to local develop branch
$ git pull apache develop   # fast-forward to current remote HEAD
$ git merge --squash RocketMQ-Vxx.0	# merge to branch

----------------------------------------

TITLE: Creating and Switching to a New Branch in Shell
DESCRIPTION: Commands to create a new branch, add changes, and commit them with a message.

LANGUAGE: shell
CODE:
git checkout -b RocketMQ-Vxx.0 # git checkout [-b] [new-branch]
git add /rocketmq/pom.xml # git add [dir/file]
git commit -a -m "pom"	# git commit [-all] [-msg] [message]

----------------------------------------

TITLE: Creating Delay Topic with mqadmin
DESCRIPTION: Command to create a topic with delay message support using the mqadmin tool. Requires setting the message type as a property parameter.

LANGUAGE: shell
CODE:
sh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=Delay

----------------------------------------

TITLE: SQL-Based Message Filtering in RocketMQ
DESCRIPTION: Demonstrates SQL-based attribute filtering in RocketMQ, including setting custom properties and creating SQL filter expressions.

LANGUAGE: java
CODE:
Message message = messageBuilder.setTopic("topic")
.setKeys("messageKey")
.setTag("messageTag")
.addProperty("Region", "Hangzhou")
.setBody("messageBody".getBytes())
.build();

LANGUAGE: java
CODE:
String topic = "topic";
FilterExpression filterExpression = new FilterExpression("Region IS NOT NULL AND Region='Hangzhou'", FilterExpressionType.SQL92);
simpleConsumer.subscribe(topic, filterExpression);

LANGUAGE: java
CODE:
String topic = "topic";
FilterExpression filterExpression = new FilterExpression("Region IS NOT NULL AND price IS NOT NULL AND Region = 'Hangzhou' AND price > 30", FilterExpressionType.SQL92);
simpleConsumer.subscribe(topic, filterExpression);

LANGUAGE: java
CODE:
String topic = "topic";
FilterExpression filterExpression = new FilterExpression("True", FilterExpressionType.SQL92);
simpleConsumer.subscribe(topic, filterExpression);

----------------------------------------

TITLE: Merging Contributor PR
DESCRIPTION: Commands for committers to merge contributor pull requests.

LANGUAGE: shell
CODE:
$ git checkout develop
$ git pull apache develop
$ git pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0

----------------------------------------

TITLE: Merging Pull Requests as Contributor
DESCRIPTION: Commands for merging PR changes as a contributor, including updating local branch and squashing commits.

LANGUAGE: shell
CODE:
git checkout develop
git pull apache develop
git pull --squash https://github.com/cuser/rocketmq.git RocketMQ-Vxx.0

----------------------------------------

TITLE: WindowStream Operations in RocketMQ Streams
DESCRIPTION: Methods for processing windowed data streams, including counting, filtering, and aggregation operations.

LANGUAGE: java
CODE:
WindowStream<K, Integer> count()
WindowStream<K, V> filter(predictor)
<OUT> WindowStream<K, OUT> map(mapperAction)
<OUT> WindowStream<K, OUT> aggregate(aggregateAction)
<OUT> WindowStream<K, OUT> aggregate(accumulator)
void sink(topicName, serializer)

----------------------------------------

TITLE: Configuring Maven Parent POM for Apache Release
DESCRIPTION: XML configuration to add Apache parent POM inheritance settings for release deployment

LANGUAGE: XML
CODE:
<parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>XX</version>
</parent>

----------------------------------------

TITLE: Cloning RocketMQ Repository in Git
DESCRIPTION: Command to clone the forked RocketMQ repository to the local machine. This creates a local copy of the repository for development.

LANGUAGE: shell
CODE:
$ git clone https://github.com/cuser/rocketmq.git # git clone [repo url]

----------------------------------------

TITLE: Creating DELAY Topic with Specific Parameters
DESCRIPTION: Detailed example of creating a delay topic using mqadmin with specific cluster, topic, and nameserver settings.

LANGUAGE: bash
CODE:
/bin/mqadmin updateTopic -c DefaultCluster -t DelayTopic -n 127.0.0.1:9876 -a +message.type=DELAY

----------------------------------------

TITLE: Configuring Inconsistent Subscriptions in Java for Apache RocketMQ (Incorrect Usage)
DESCRIPTION: Illustrates an incorrect way to configure subscriptions for consumers in the same group. This example shows inconsistent tag filters, which can lead to consumption conflicts.

LANGUAGE: java
CODE:
//Consumer c1
Consumer c1 = ConsumerBuilder.build(groupA);
c1.subscribe(topicA,"TagA");
//Consumer c2Consumer 
c2 = ConsumerBuilder.build(groupA);
c2.subscribe(topicA,"TagB");

----------------------------------------

TITLE: Setting Maven Release Profile Configuration
DESCRIPTION: Maven settings.xml configuration for signed releases with Apache credentials and GPG settings

LANGUAGE: XML
CODE:
<settings>
    <profiles>
        <profile>
            <id>signed_release</id>
            <properties>
                <mavenExecutorId>forked-path</mavenExecutorId>
                <gpg.keyname>yourKeyName</gpg.keyname>
                <deploy.url>https://dist.apache.org/repos/dist/dev/rocketmq/</deploy.url>
            </properties>
        </profile>
    </profiles>
    <servers>
        <server>
            <id>apache.snapshots.https</id>
            <username>yourApacheID</username>
            <password>yourApachePassword</password>
        </server>
        <server>
            <id>apache.releases.https</id>
            <username>yourApacheID</username>
            <password>yourApachePassword</password>
        </server>
        <server>
            <id>gpg.passphrase</id>
            <passphrase>yourKeyPassword</passphrase>
        </server>
    </servers>
</settings>

----------------------------------------

TITLE: Rejecting Pull Request in Git
DESCRIPTION: Commands to reject a pull request by creating an empty commit with a rejection message and closing the associated pull request on GitHub.

LANGUAGE: shell
CODE:
$ git commit --allow-empty -m "RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*"
$ git push apache develop

----------------------------------------

TITLE: Managing Development Branch
DESCRIPTION: Commands for creating and updating development branches in RocketMQ.

LANGUAGE: shell
CODE:
$ git rebase origin/develop
$ git checkout -b RocketMQ-Vxx.0
$ git add /rocketmq/pom.xml
$ git commit -a -m "pom"

----------------------------------------

TITLE: Deploying RocketMQ using Helm in Bash
DESCRIPTION: Commands to install RocketMQ using Helm and check the status of deployed pods.

LANGUAGE: bash
CODE:
$ helm install rocketmq-demo ./rocketmq
$ kubectl get pods -o wide -n default

----------------------------------------

TITLE: Checking Helm Version in Bash
DESCRIPTION: Command to verify the installed version of Helm on the system.

LANGUAGE: bash
CODE:
$ helm version

----------------------------------------

TITLE: Rejecting PR in Shell
DESCRIPTION: Commands to reject a pull request by submitting an empty commit with a rejection message and closing the PR.

LANGUAGE: shell
CODE:
git commit --allow-empty -m "RocketMQ-Vxx.0 closes apache/rocketmq#ZZ *Won't fix*"
git push apache develop

----------------------------------------

TITLE: Installing Helm in Bash
DESCRIPTION: Commands to check Helm version and install Helm 3 if not present. Requires curl to be installed.

LANGUAGE: bash
CODE:
$ helm version

LANGUAGE: bash
CODE:
$ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

----------------------------------------

TITLE: Configuring RocketMQ Deployment in YAML
DESCRIPTION: YAML configuration for RocketMQ deployment, specifying resource limits and requests for the broker.

LANGUAGE: yaml
CODE:
resources:
  limits:
    cpu: 2
    memory: 10Gi
  requests:
    cpu: 2
    memory: 10Gi

----------------------------------------

TITLE: Setting RocketMQ Version Constant
DESCRIPTION: Java code to set the current RocketMQ version number

LANGUAGE: Java
CODE:
public static final int CURRENT_VERSION = Version.V4_5_0.ordinal();

----------------------------------------

TITLE: Creating RocketMQ Topic with Admin CLI
DESCRIPTION: Command to create a new topic in RocketMQ using the mqadmin CLI tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin updatetopic -n localhost:9876 -t TestTopic -c DefaultCluster

----------------------------------------

TITLE: Downloading RocketMQ Helm Chart in Bash
DESCRIPTION: Commands to pull the RocketMQ Helm chart from Docker registry and extract it.

LANGUAGE: bash
CODE:
$ helm pull oci://registry-1.docker.io/apache/rocketmq --version 0.0.1
$ tar -zxvf rocketmq-0.0.1.tgz

----------------------------------------

TITLE: Creating Topic in RocketMQ Cluster using Shell Command
DESCRIPTION: This snippet demonstrates how to create a topic named 'TopicTest' in the RocketMQ cluster using the mqadmin command-line tool. It creates 8 read and write queues with RW- permissions.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin updateTopic -c DefaultCluster -t TopicTest -n 127.0.0.1:9876

----------------------------------------

TITLE: RocketMQ Version Configuration
DESCRIPTION: Java code snippet showing how to set the RocketMQ version number in the codebase.

LANGUAGE: java
CODE:
public static final int CURRENT_VERSION = Version.V4_5_0.ordinal();

----------------------------------------

TITLE: Adding RocketMQ Java Client Dependency in XML
DESCRIPTION: Maven dependency configuration for including the RocketMQ Java client library in the project.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>5.0.7</version>
</dependency>

----------------------------------------

TITLE: Building DLedger from Source
DESCRIPTION: Commands to clone the DLedger repository and build it using Maven.

LANGUAGE: shell
CODE:
$ git clone https://github.com/openmessaging/dledger.git
$ cd dledger
$ mvn clean install -DskipTests

----------------------------------------

TITLE: Maven Settings Configuration for Release
DESCRIPTION: XML configuration for Maven settings.xml to enable signed releases and repository deployment.

LANGUAGE: xml
CODE:
<settings>
    <profiles>
        <profile>
            <id>signed_release</id>
            <properties>
                <mavenExecutorId>forked-path</mavenExecutorId>
                <gpg.keyname>yourKeyName</gpg.keyname>
                <deploy.url>https://dist.apache.org/repos/dist/dev/rocketmq/</deploy.url>
            </properties>
        </profile>
    </profiles>
    <servers>
        <server>
            <id>apache.snapshots.https</id>
            <username>yourApacheID</username>
            <password>yourApachePassword</password>
        </server>
        <server>
            <id>apache.releases.https</id>
            <username>yourApacheID</username>
            <password>yourApachePassword</password>
        </server>
        <server>
            <id>gpg.passphrase</id>
            <passphrase>yourKeyPassword</passphrase>
        </server>
    </servers>
</settings>

----------------------------------------

TITLE: Quick Deployment of RocketMQ with DLedger
DESCRIPTION: Commands to navigate to the built RocketMQ directory and start a quick deployment using the fast-try script.

LANGUAGE: shell
CODE:
$ cd distribution/target/rocketmq-{rocketmq-version}/rocketmq-{rocketmq-version}

$ sh bin/dledger/fast-try.sh start

----------------------------------------

TITLE: JVM Biased Locking Configuration
DESCRIPTION: Setting to disable biased locking for reduced JVM pauses.

LANGUAGE: text
CODE:
-XX:-UseBiasedLocking

----------------------------------------

TITLE: Apache Release POM Configuration
DESCRIPTION: XML configuration for the Maven POM file to deploy releases to ASF Nexus repository.

LANGUAGE: xml
CODE:
<parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>XX</version>
</parent>

----------------------------------------

TITLE: Stopping RocketMQ Quick Deployment
DESCRIPTION: Command to stop the quickly deployed RocketMQ cluster.

LANGUAGE: shell
CODE:
$ sh bin/dledger/fast-try.sh stop

----------------------------------------

TITLE: GC Log File Path Configuration
DESCRIPTION: Configuration for redirecting GC log files to memory filesystem to reduce I/O impact.

LANGUAGE: text
CODE:
-Xloggc:/dev/shm/mq_gc_%p.log123

----------------------------------------

TITLE: File Path Reference for Code Style Configuration
DESCRIPTION: XML file paths for RocketMQ code style and Apache license configuration in the project structure.

LANGUAGE: plaintext
CODE:
rocketmq/style/rmq_codestyle.xml

LANGUAGE: plaintext
CODE:
rocketmq/style/copyright/Apache.xml

----------------------------------------

TITLE: Starting RocketMQ-on-DLedger Brokers
DESCRIPTION: Commands to start multiple RocketMQ brokers configured with DLedger in the background.

LANGUAGE: shell
CODE:
$ nohup sh bin/mqbroker -c conf/dledger/xxx-n0.conf & 
$ nohup sh bin/mqbroker -c conf/dledger/xxx-n1.conf & 
$ nohup sh bin/mqbroker -c conf/dledger/xxx-n2.conf & 

----------------------------------------

TITLE: Defining RocketMQ Client Logger Configuration Constants
DESCRIPTION: Java code snippet defining static variables for RocketMQ client logger configuration, including log file paths, sizes, and levels.

LANGUAGE: java
CODE:
public static final String CLIENT_LOG_USESLF4J = "rocketmq.client.logUseSlf4j";
public static final String CLIENT_LOG_ROOT = "rocketmq.client.logRoot";
public static final String CLIENT_LOG_MAXINDEX = "rocketmq.client.logFileMaxIndex";
public static final String CLIENT_LOG_FILESIZE = "rocketmq.client.logFileMaxSize";
public static final String CLIENT_LOG_LEVEL = "rocketmq.client.logLevel";
public static final String CLIENT_LOG_ADDITIVE = "rocketmq.client.log.additive";
public static final String CLIENT_LOG_FILENAME = "rocketmq.client.logFileName";
public static final String CLIENT_LOG_ASYNC_QUEUESIZE = "rocketmq.client.logAsyncQueueSize";
public static final String ROCKETMQ_CLIENT_APPENDER_NAME = "RocketmqClientAppender";

private static final InternalLogger CLIENT_LOGGER;

private static final boolean CLIENT_USE_SLF4J;

//private static Appender rocketmqClientAppender = null;

static {
    CLIENT_USE_SLF4J = Boolean.parseBoolean(System.getProperty(CLIENT_LOG_USESLF4J, "false"));
    if (!CLIENT_USE_SLF4J) {
        InternalLoggerFactory.setCurrentLoggerType(InnerLoggerFactory.LOGGER_INNER);
        CLIENT_LOGGER = createLogger(LoggerName.CLIENT_LOGGER_NAME);
        createLogger(LoggerName.COMMON_LOGGER_NAME);
        createLogger(RemotingHelper.ROCKETMQ_REMOTING);
    } else {
        CLIENT_LOGGER = InternalLoggerFactory.getLogger(LoggerName.CLIENT_LOGGER_NAME);
    }
}

----------------------------------------

TITLE: MySQL Source Table Creation
DESCRIPTION: SQL commands to create and populate the source database table in MySQL for data synchronization.

LANGUAGE: sql
CODE:
create database bank;
use bank;

create table bank.user
(
    id       bigint NOT NULL AUTO_INCREMENT,
    user_id          integer,
    name    varchar(8),
    age integer,
    birthday date,
    datetime_created timestamp(3),
    datetime_updated timestamp(3),
    height           decimal(11, 2) null,
    PRIMARY KEY (`id`)
);

insert into bank.user values (1003, 1, 'lilei2', 10, now(), now(), now(), 1.72);
update bank.user set user_id = 1003 where id = 1003;

----------------------------------------

TITLE: GC Log Rotation Configuration
DESCRIPTION: Settings for GC log file rotation to manage garbage collection logging.

LANGUAGE: text
CODE:
-XX:+UseGCLogFileRotation
-XX:NumberOfGCLogFiles=5
-XX:GCLogFileSize=30m

----------------------------------------

TITLE: Handling NAME_SERVER_ADDR_NOT_EXIST_URL Exception in Java
DESCRIPTION: These exceptions occur when there's an error in obtaining the NameServer address information for a Producer or Consumer. It indicates that the NameServer address is not set or cannot be resolved.

LANGUAGE: java
CODE:
No name server address, please set it

LANGUAGE: java
CODE:
connect to xxx failed, maybe the domain name xxx not bind in /etc/hosts

----------------------------------------

TITLE: Starting JDBC Sink Connector via REST API
DESCRIPTION: cURL command to start the JDBC sink connector for MySQL using the RocketMQ Connect REST API.

LANGUAGE: shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest201 -d '{
  "connector.class": "org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector",
  "max.task": "2",
  "connect.topicnames": "debezium-postgres-source-01",
  "connection.url": "jdbc:mysql://database ip:3306/bank1",
  "connection.user": "root",
  "connection.password": "debezium",
  "pk.fields": "holding_id",
  "table.name.from.header": "true",
  "pk.mode": "record_key",
  "insert.mode": "UPSERT",
  "db.timezone": "UTC",
  "table.types": "TABLE",
  "errors.deadletterqueue.topic.name": "dlq-topic",
  "errors.log.enable": "true",
  "errors.tolerance": "ALL",
  "delete.enabled": "true",
  "key.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
  "value.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Compiling RocketMQ Dashboard from Source
DESCRIPTION: Maven command to compile the RocketMQ Dashboard from source, skipping tests.

LANGUAGE: shell
CODE:
mvn clean package -Dmaven.test.skip=true

----------------------------------------

TITLE: Handling GROUP_NAME_DUPLICATE_URL Exception in Java
DESCRIPTION: This exception is thrown when attempting to create a producer group with a name that already exists. It indicates that a unique name should be specified for the producer group.

LANGUAGE: java
CODE:
The producer group[xxx] has been created before, specify another name please.

----------------------------------------

TITLE: Creating Test Data in PostgreSQL
DESCRIPTION: SQL commands to create a schema, table, and insert test data in the PostgreSQL database.

LANGUAGE: sql
CODE:
CREATE SCHEMA bank;
SET search_path TO bank,public;
CREATE TABLE bank.holding (
                              holding_id int,
                              user_id int,
                              holding_stock varchar(8),
                              holding_quantity int,
                              datetime_created timestamp,
                              datetime_updated timestamp,
                              primary key(holding_id)
);
ALTER TABLE bank.holding replica identity FULL;
insert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());
\q
insert into bank.holding values (1000, 1, 'VFIAX', 10, now(), now());
insert into bank.holding values (1001, 2, 'SP500', 1, now(), now());
insert into bank.holding values (1003, 3, 'SP500', 1, now(), now());
update bank.holding set holding_quantity = 300 where holding_id=1000;

----------------------------------------

TITLE: Running Compiled RocketMQ Dashboard JAR
DESCRIPTION: Java command to run the compiled RocketMQ Dashboard JAR file.

LANGUAGE: shell
CODE:
java -jar target/rocketmq-dashboard-1.0.1-SNAPSHOT.jar

----------------------------------------

TITLE: Handling SAME_GROUP_DIFFERENT_TOPIC Exception in Java
DESCRIPTION: This exception is thrown when a consumer's subscription to a topic does not exist. It indicates that either the consumer group or the subscribed topic does not exist.

LANGUAGE: java
CODE:
the consumer's group info/subscription not exist

----------------------------------------

TITLE: Starting JDBC Sink Connector
DESCRIPTION: cURL command to start the JDBC sink connector for MySQL.

LANGUAGE: Shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/jdbcmysqlsinktest -d '{
  "connector.class": "org.apache.rocketmq.connect.jdbc.connector.JdbcSinkConnector",
  "max.task": "2",
  "connect.topicnames": "debezium-mysql-source",
  "connection.url": "jdbc:mysql://database ip:3306/inventory_2",
  "connection.user": "root",
  "connection.password": "debezium",
  "pk.fields": "id",
  "table.name.from.header": "true",
  "pk.mode": "record_key",
  "insert.mode": "UPSERT",
  "db.timezone": "UTC",
  "table.types": "TABLE",
  "errors.deadletterqueue.topic.name": "dlq-topic",
  "errors.log.enable": "true",
  "errors.tolerance": "ALL",
  "delete.enabled": "true",
  "key.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
  "value.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Configuring Log4j Dependencies for RocketMQ Java Client
DESCRIPTION: XML configuration for adding Log4j dependencies to a Maven project for use with RocketMQ Java client logging.

LANGUAGE: xml
CODE:
<dependency> 
  <groupId>org.slf4j</groupId> 
  <artifactId>jcl-over-slf4j</artifactId> 
  <version>1.7.7</version>
</dependency> 
<dependency>
  <groupId>org.slf4j</groupId>
  <artifactId>slf4j-log4j12</artifactId>
  <version>1.7.7</version>
</dependency> 
<dependency>
  <groupId>log4j</groupId> 
  <artifactId>log4j</artifactId>
  <version>1.2.17</version> 
</dependency>

----------------------------------------

TITLE: Examples of Command Requests in RocketMQ EventBridge
DESCRIPTION: This snippet provides examples of command requests, which represent operation requests where the outcome is uncertain.

LANGUAGE: text
CODE:
* Turning on the kitchen lights
* Someone pressed the doorbell
* Account A received 100,000.

----------------------------------------

TITLE: Starting Debezium Source Connector
DESCRIPTION: cURL command to start the Debezium source connector for MySQL CDC.

LANGUAGE: Shell
CODE:
curl -X POST -H "Content-Type: application/json" http://127.0.0.1:8082/connectors/MySQLCDCSource -d '{
"connector.class": "org.apache.rocketmq.connect.debezium.mysql.DebeziumMysqlConnector",
"max.task": "1",
"connect.topicname": "debezium-mysql-source-topic",
"kafka.transforms": "Unwrap",
"kafka.transforms.Unwrap.delete.handling.mode": "none",
"kafka.transforms.Unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
"kafka.transforms.Unwrap.add.headers": "op,source.db,source.table",
"database.history.skip.unparseable.ddl": true,
"database.history.name.srv.addr": "localhost:9876",
"database.history.rocketmq.topic": "db-history-debezium-topic",
"database.history.store.only.monitored.tables.ddl": true,
"include.schema.changes": false,
"database.server.name": "dbserver1",
"database.port": 3306,
"database.hostname": "database ip",
"database.connectionTimeZone": "UTC",
"database.user": "debezium",
"database.password": "dbz",
"table.include.list": "inventory.employee",
"max.batch.size": 50,
"database.include.list": "inventory",
"snapshot.mode": "when_needed",
"database.server.id": "184054",
"key.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter",
"value.converter": "org.apache.rocketmq.connect.runtime.converter.record.json.JsonConverter"
}'

----------------------------------------

TITLE: Configuring Log4j Properties for RocketMQ Client
DESCRIPTION: Properties file configuration for setting up Log4j with RocketMQ client, including appender settings and layout pattern.

LANGUAGE: properties
CODE:
log4j.appender.mq=org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender 
log4j.appender.mq.Tag=yourTag 
log4j.appender.mq.Topic=yourLogTopic 
log4j.appender.mq.ProducerGroup=yourLogGroup 
log4j.appender.mq.NameServerAddress=yourRocketmqNameserverAddress 
log4j.appender.mq.layout=org.apache.log4j.PatternLayout 
log4j.appender.mq.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-4r [%t] (%F:%L) %-5p - %m%n 

----------------------------------------

TITLE: Examples of Events in RocketMQ EventBridge
DESCRIPTION: This snippet provides examples of events, which are clear occurrences that have already happened.

LANGUAGE: text
CODE:
* The kitchen light being turned on
* Someone pressing the doorbell
* Account A receiving 100,000

----------------------------------------

TITLE: Setting up MySQL Docker Container
DESCRIPTION: Docker command to set up a MySQL database for testing.

LANGUAGE: Shell
CODE:
docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw quay.io/debezium/example-mysql:1.9

----------------------------------------

TITLE: Configuring Log4j XML for RocketMQ Client with Async Appender
DESCRIPTION: XML configuration for Log4j setup with RocketMQ client, including an asynchronous appender for improved performance.

LANGUAGE: xml
CODE:
<appender name="mqAppender1" class="org.apache.rocketmq.logappender.log4j.RocketmqLog4jAppender">
    <param name="Tag" value="yourTag" />
    <param name="Topic" value="yourLogTopic" />
    <param name="ProducerGroup" value="yourLogGroup" />
    <param name="NameServerAddress" value="yourRocketmqNameserverAddress"/>
    <layout class="org.apache.log4j.PatternLayout">
        <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss}-%p %t %c - %m%n" />
    </layout>
</appender>

<appender name="mqAsyncAppender1" class="org.apache.log4j.AsyncAppender">
    <param name="BufferSize" value="1024" />
    <param name="Blocking" value="false" />
    <appender-ref ref="mqAppender1"/>
</appender>

----------------------------------------

TITLE: Event Definition Examples
DESCRIPTION: Code examples demonstrating the difference between command operations and actual events in a system.

LANGUAGE: text
CODE:
* Turning on the kitchen lights
* Someone pressed the doorbell
* Account A received 100,000.

----------------------------------------

TITLE: Starting Connect Runtime
DESCRIPTION: Command to start the Connect Runtime in standalone mode.

LANGUAGE: Shell
CODE:
cd distribution/target/rocketmq-connect-0.0.1-SNAPSHOT/rocketmq-connect-0.0.1-SNAPSHOT

sh bin/connect-standalone.sh -c conf/connect-standalone.conf &

----------------------------------------

TITLE: Configuring Logback Dependencies for RocketMQ Java Client
DESCRIPTION: XML configuration for adding Logback dependencies to a Maven project for use with RocketMQ Java client logging.

LANGUAGE: xml
CODE:
<dependency> 
  <groupId>ch.qos.logback</groupId> 
  <artifactId>logback-core</artifactId> 
  <version>1.1.2</version>
</dependency> 
<dependency>
  <groupId>ch.qos.logback</groupId>
  <artifactId>logback-classic</artifactId> 
  <version>1.1.2</version> 
</dependency>

----------------------------------------

TITLE: Event Characteristics Definition
DESCRIPTION: Definition explaining how events objectively describe system state changes without making handling expectations.

LANGUAGE: text
CODE:
An event is an objective description of a change in the state or attribute value of a thing, but it does not make any expectations about how to handle the event itself. In contrast, both Command and Query have expectations, they hope the system will make changes or return results, but the Event is just an objective description of a change in the system.

----------------------------------------

TITLE: Source File Creation and Testing
DESCRIPTION: Commands to create and populate a test source file for the connector demo.

LANGUAGE: shell
CODE:
mkdir -p /Users/YourUsername/rocketmqconnect/
cd /Users/YourUsername/rocketmqconnect/
touch test-source-file.txt

echo "Hello \r\nRocketMQ\r\n Connect" >> test-source-file.txt

----------------------------------------

TITLE: Event Metadata Structure
DESCRIPTION: Description of the essential metadata fields that should be included in event records.

LANGUAGE: text
CODE:
When did the event occur?
Who generated it?
What type of event is it?
What is the content of the event? What is the structure of the content?
... ...

----------------------------------------

TITLE: NameServer Connection Errors in RocketMQ
DESCRIPTION: Examples of error messages when there are issues connecting to RocketMQ NameServer.

LANGUAGE: java
CODE:
No name server address, please set it

----------------------------------------

TITLE: Event Metadata Structure
DESCRIPTION: Description of the essential metadata fields that should be included in event records.

LANGUAGE: text
CODE:
When did the event occur?
Who generated it?
What type of event is it?
What is the content of the event? What is the structure of the content?
... ...

----------------------------------------

TITLE: Building RocketMQ Connect Runtime
DESCRIPTION: Commands to clone and build the RocketMQ Connect project using Maven.

LANGUAGE: shell
CODE:
git clone https://github.com/apache/rocketmq-connect.git

cd  rocketmq-connect

export RMQ_CONNECT_HOME=`pwd`

mvn -Prelease-connect -Dmaven.test.skip=true clean install -U

----------------------------------------

TITLE: Duplicate Producer Group Error in RocketMQ
DESCRIPTION: Error message when attempting to create a producer group that already exists.

LANGUAGE: java
CODE:
The producer group[xxx] has been created before, specify another name please.

----------------------------------------

TITLE: Starting EventBridge via Shell Command
DESCRIPTION: This shell command starts the EventBridge service using the provided script.

LANGUAGE: shell
CODE:
sh bin/eventbridge.sh start

----------------------------------------

TITLE: Testing RocketMQ Setup with Producer and Consumer
DESCRIPTION: Commands to test RocketMQ message sending and receiving using the tools provided, setting NAMESRV_ADDR environment variable.

LANGUAGE: shell
CODE:
#$ cd distribution/target/rocketmq-4.9.7/rocketmq-4.9.7
$ cd distribution/target/rocketmq-5.1.4/rocketmq-5.1.4

$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: RocketMQ TransactionListener Interface Definition
DESCRIPTION: Interface definition for TransactionListener showing the required methods for handling local transaction execution and transaction status checks.

LANGUAGE: java
CODE:
public interface TransactionListener {
    /**
     * When send transactional prepare(half) message succeed, this method will be invoked to execute local transaction.
     *
     * @param msg Half(prepare) message
     * @param arg Custom business parameter
     * @return Transaction state
     */
    LocalTransactionState executeLocalTransaction(final Message msg, final Object arg);

    /**
     * When no response to prepare(half) message. broker will send check message to check the transaction status, and this
     * method will be invoked to get local transaction status.
     *
     * @param msg Check message
     * @return Transaction state
     */
    LocalTransactionState checkLocalTransaction(final MessageExt msg);
}

----------------------------------------

TITLE: StreamBuilder API Methods in RocketMQ Streams
DESCRIPTION: Core methods for instantiating and configuring a StreamBuilder, including creation and source definition.

LANGUAGE: java
CODE:
StreamBuilder(jobId)
<OUT> RStream<OUT> source(topicName, deserializer)

----------------------------------------

TITLE: Adding RocketMQ Streams Dependency in Maven POM
DESCRIPTION: This XML snippet shows how to add the RocketMQ Streams dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the RocketMQ Streams library.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.rocketmq</groupId>
        <artifactId>rocketmq-streams</artifactId>
            <!-- Modify as needed -->
        <version>1.1.0</version>
    </dependency>
</dependencies>

----------------------------------------

TITLE: GroupedStream Operations in RocketMQ Streams
DESCRIPTION: Operations for processing grouped data streams, including aggregations and window operations.

LANGUAGE: java
CODE:
<OUT> GroupedStream<K, Integer> count(selectAction)
GroupedStream<K, V> min(selectAction)
GroupedStream<K, V> max(selectAction)
GroupedStream<K, ? extends Number> sum(selectAction)
GroupedStream<K, V> filter(predictor)
<OUT> GroupedStream<K, OUT> map(valueMapperAction)
<OUT> GroupedStream<K, OUT> aggregate(accumulator)
WindowStream<K, V> window(windowInfo)
GroupedStream<K, V> addGraphNode(name, supplier)
RStream<V> toRStream()
sink(topicName, serializer)

----------------------------------------

TITLE: RocketMQ-MQTT Example Files
DESCRIPTION: List of example Java files provided in the project for demonstrating MQTT and RocketMQ client operations such as publishing and subscribing to messages.

LANGUAGE: text
CODE:
MqttConsumer.java  // MQTT client initiates subscription message
MqttProducer.java   // MQTT client starts publishing messages
RocketMQConsumer.java // RocketMQ client starts subscription message
RocketMQProducer.java  // RocketMQ client starts publishing messages

----------------------------------------

TITLE: One-way Message Sending in RocketMQ using Java
DESCRIPTION: This Java code shows one-way message sending in RocketMQ. It initializes a producer, creates messages, and sends them using the sendOneway method. This mode doesn't wait for any response from the server and is suitable for scenarios where high reliability is not required.

LANGUAGE: java
CODE:
public class OnewayProducer {
  public static void main(String[] args) throws Exception{
    DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
    producer.setNamesrvAddr("localhost:9876");
    producer.start();
    for (int i = 0; i < 100; i++) {
      Message msg = new Message("TopicTest",
        "TagA",
        ("Hello RocketMQ " + i).getBytes(RemotingHelper.DEFAULT_CHARSET)
      );
      producer.sendOneway(msg);
    }
    producer.shutdown();
  }
}

----------------------------------------

TITLE: Configuring Ordered Topic in RocketMQ using Shell Command
DESCRIPTION: Shell command to create or update a topic with ordered message support in RocketMQ using mqadmin tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin updateTopic -c DefaultCluster -t TopicTest -o true -n 127.0.0.1:9876

----------------------------------------

TITLE: Deploying RocketMQ-MQTT from Source
DESCRIPTION: Bash commands for cloning the RocketMQ-MQTT repository, building the project from source, and starting the MQTT service.

LANGUAGE: bash
CODE:
git clone https://github.com/apache/rocketmq-mqtt
cd rocketmq-mqtt 
mvn -Prelease-all -DskipTests clean install -U 
cd distribution/target/ 
cd bin
sh mqtt.sh start

----------------------------------------

TITLE: Consumer Mode Configuration
DESCRIPTION: Examples of setting consumer modes (clustering or broadcasting) in RocketMQ.

LANGUAGE: java
CODE:
consumer.setMessageModel(MessageModel.CLUSTERING);

LANGUAGE: java
CODE:
consumer.setMessageModel(MessageModel.BROADCASTING);

----------------------------------------

TITLE: Starting RocketMQ Documentation Local Development Server
DESCRIPTION: Command to initiate a local development server for previewing documentation changes. The server provides live reloading functionality, automatically reflecting most content updates without requiring server restart.

LANGUAGE: bash
CODE:
$ npm start

----------------------------------------

TITLE: Creating Topic in RocketMQ Cluster using Shell Command
DESCRIPTION: This snippet demonstrates how to create a topic named 'TopicTest' with 8 read and write queues using the RocketMQ Admin tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin updateTopic -c DefaultCluster -t TopicTest -n 127.0.0.1:9876

----------------------------------------

TITLE: Implementing Connection Backoff Algorithm in Java
DESCRIPTION: Algorithm for implementing exponential backoff with jitter for connection retries. Uses parameters like INITIAL_BACKOFF, MULTIPLIER, JITTER, MAX_BACKOFF, and MIN_CONNECT_TIMEOUT to control retry behavior in case of throttling.

LANGUAGE: java
CODE:
ConnectWithBackoff()
    current_backoff = INITIAL_BACKOFF
    current_deadline = now() + INITIAL_BACKOFF
    while (TryConnect(Max(current_deadline, now() + MIN_CONNECT_TIMEOUT))!= SUCCESS)
      SleepUntil(current_deadline)
      current_backoff = Min(current_backoff * MULTIPLIER, MAX_BACKOFF)
      current_deadline = now() + current_backoff + UniformRandom(-JITTER * current_backoff, JITTER * current_backoff)

----------------------------------------

TITLE: Checking RocketMQ Cluster Status (Shell)
DESCRIPTION: Command to check the status of the RocketMQ cluster using the mqadmin tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin clusterList -n 127.0.0.1:9876

----------------------------------------

TITLE: Importing React Components in Markdown
DESCRIPTION: Imports Tabs and TabItem components from the theme, likely used for creating tabbed content in documentation.

LANGUAGE: jsx
CODE:
import Tabs from '@theme/Tabs';

import TabItem from '@theme/TabItem';

----------------------------------------

TITLE: Incorrect Subscription to Different Topics in RocketMQ (Java)
DESCRIPTION: These code snippets demonstrate an incorrect implementation where consumer instances with the same Group ID subscribe to different topics. This violates the principle of consistent subscription relationships and can lead to message consumption issues.

LANGUAGE: java
CODE:
      Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_1");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicA", "*", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

LANGUAGE: java
CODE:
  Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_1");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicB", "*", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

LANGUAGE: java
CODE:
      Properties properties = new Properties();
      properties.put(PropertyKeyConst.GROUP_ID, "GID_test_1");
      Consumer consumer = ONSFactory.createConsumer(properties);
      consumer.subscribe("TopicC", "*", new MessageListener() {
          public Action consume(Message message, ConsumeContext context) {
              System.out.println(message.getMsgID());
              return Action.CommitMessage;
          }
      });

----------------------------------------

TITLE: Prometheus Metric Format Example
DESCRIPTION: Example showing the format of metrics as collected by Prometheus, including metric name, labels and value.

LANGUAGE: javascript
CODE:
<metric name>{<label name>=<label value>, ...} <metric value>

LANGUAGE: javascript
CODE:
rocketmq_group_diff{group="rmq_group_test_20220114",topic="fusion_console_tst",countOfOnlineConsumers="0",msgModel="1",} 23.0

----------------------------------------

TITLE: Starting RocketMQ Broker
DESCRIPTION: Commands to start the Broker service connected to the NameServer and verify its successful launch through logs.

LANGUAGE: shell
CODE:
### Start the broker service
$ nohup sh bin/mqbroker -n localhost:9876 &

### Verify that the broker service is started successfully, for example, the broker's ip is 192.168.1.2 and the name is broker-a
$ tail -f ~/logs/rocketmqlogs/broker.log 
The broker[broker-a,192.169.1.2:10911] boot success...

----------------------------------------

TITLE: Fetching Message Queues in RocketMQ Pull Consumer (Java)
DESCRIPTION: Shows how to fetch all message queues for a specific topic using the fetchSubscribeMessageQueues method in RocketMQ Pull Consumer.

LANGUAGE: java
CODE:
Set<MessageQueue> queueSet =  consumer.fetchSubscribeMessageQueues("TopicTest");

----------------------------------------

TITLE: Uninstalling RocketMQ from Kubernetes in Bash
DESCRIPTION: Removes all RocketMQ resources from the Kubernetes cluster using Helm.

LANGUAGE: bash
CODE:
#Release all RocketMQ resources
$ helm uninstall rocketmq-demo

----------------------------------------

TITLE: RocketMQ Consumer Implementation in Java
DESCRIPTION: Example implementation of a push consumer using RocketMQ Java SDK.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
import org.apache.rocketmq.common.message.MessageExt;

import java.util.List;

public class ConsumerExample {
    public static void main(String[] args) throws Exception {
        // Create consumer instance and set the consumer group name
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
        // Set the Name Server address (replace with actual Name Server address)
        consumer.setNamesrvAddr("localhost:9876");
        // Subscribe to the specified topic and tag (* means all tags)
        consumer.subscribe("TestTopic", "*");

        // Register message listener
        consumer.registerMessageListener(new MessageListenerConcurrently() {
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.println("Received message: " + new String(msg.getBody()));
                }
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });

        // Start the consumer
        consumer.start();
        System.out.println("Consumer started.");
    }
}

----------------------------------------

TITLE: Implementing Lite Pull Consumer with Subscribe Mode in RocketMQ (Java)
DESCRIPTION: Demonstrates how to use DefaultLitePullConsumer in Subscribe mode, including initialization, topic subscription, and message polling. It also shows how to set the pull batch size and handle the polled messages.

LANGUAGE: java
CODE:
public class LitePullConsumerSubscribe {
    public static volatile boolean running = true;
    public static void main(String[] args) throws Exception {
        DefaultLitePullConsumer litePullConsumer = new DefaultLitePullConsumer("lite_pull_consumer_test");
        litePullConsumer.subscribe("TopicTest", "*");
        litePullConsumer.setPullBatchSize(20);
        litePullConsumer.start();
        try {
            while (running) {
                List<MessageExt> messageExts = litePullConsumer.poll();
                System.out.printf("%s%n", messageExts);
            }
        } finally {
            litePullConsumer.shutdown();
        }
    }
}

----------------------------------------

TITLE: RocketMQ Java Consumer Implementation
DESCRIPTION: Java code example showing message consumption using RocketMQ Push Consumer pattern.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
import org.apache.rocketmq.common.message.MessageExt;

import java.util.List;

public class ConsumerExample {
    public static void main(String[] args) throws Exception {
        // Create consumer instance and set the consumer group name
        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer("please_rename_unique_group_name");
        // Set the Name Server address (replace with actual Name Server address)
        consumer.setNamesrvAddr("localhost:9876");
        // Subscribe to the specified topic and tag (* means all tags)
        consumer.subscribe("TestTopic", "*");

        // Register message listener
        consumer.registerMessageListener(new MessageListenerConcurrently() {
            @Override
            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {
                for (MessageExt msg : msgs) {
                    System.out.println("Received message: " + new String(msg.getBody()));
                }
                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
            }
        });

        // Start the consumer
        consumer.start();
        System.out.println("Consumer started.");
    }
}

----------------------------------------

TITLE: Stopping RocketMQ Containers
DESCRIPTION: Commands to stop the RocketMQ NameServer and Broker containers.

LANGUAGE: shell
CODE:
# Stop the NameServer container
docker stop rmqnamesrv

# Stop the Broker container
docker stop rmqbroker

----------------------------------------

TITLE: Message Re-initialization Example in Java
DESCRIPTION: Demonstrates the correct way to re-initialize and send a message in RocketMQ, following the immutability principle.

LANGUAGE: java
CODE:
Message m = Consumer.receive();
Message m2= MessageBuilder.buildFrom(m);
Producer.send(m2);

----------------------------------------

TITLE: RocketMQ Producer Implementation in Java
DESCRIPTION: Example implementation of a synchronous message producer using RocketMQ Java SDK.

LANGUAGE: java
CODE:
import org.apache.rocketmq.client.producer.DefaultMQProducer;
import org.apache.rocketmq.client.producer.SendResult;
import org.apache.rocketmq.common.message.Message;

public class ProducerExample {
    public static void main(String[] args) throws Exception {
        // Create producer instance and set the producer group name
        DefaultMQProducer producer = new DefaultMQProducer("please_rename_unique_group_name");
        // Set the Name Server address (replace with actual Name Server address)
        producer.setNamesrvAddr("localhost:9876");
        producer.start();

        try {
            // Create a message instance, specifying the topic, tag, and message body
            Message msg = new Message("TestTopic", "TagA", ("Hello RocketMQ").getBytes());
            // Send the message and get the send result
            SendResult sendResult = producer.send(msg);
            System.out.println("Message sent: " + new String(msg.getBody()));
            System.out.println("Send result: " + sendResult);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Message sending failed.");
        } finally {
            // Shutdown the producer
            producer.shutdown();
        }
    }
}

----------------------------------------

TITLE: Downloading RocketMQ Helm Chart in Bash
DESCRIPTION: Pulls the RocketMQ Helm chart from a Docker registry and extracts it.

LANGUAGE: bash
CODE:
$ helm pull oci://registry-1.docker.io/apache/rocketmq --version 0.0.1 
$ tar -zxvf rocketmq-0.0.1.tgz

----------------------------------------

TITLE: Incorrect Message Modification Example in Java
DESCRIPTION: Shows an incorrect approach to message handling that violates the immutability principle by directly modifying a received message.

LANGUAGE: java
CODE:
Message m = Consumer.receive();
m.update()；
Producer.send(m);

----------------------------------------

TITLE: Creating Docker Network for RocketMQ
DESCRIPTION: Creates a shared Docker network for RocketMQ container communication.

LANGUAGE: shell
CODE:
docker network create rocketmq

----------------------------------------

TITLE: Testing RocketMQ Message Sending and Receiving in Bash
DESCRIPTION: Demonstrates how to create a topic, send a message, and receive a message using RocketMQ tools within a Kubernetes pod.

LANGUAGE: bash
CODE:
# Log into the pod (requires management tools), or you can execute on the host
$ kubectl exec -ti rocketmq-demo-broker-0  -- /bin/bash

# Create Topic via mqadmin
$ sh mqadmin updatetopic -t TopicTest -c DefaultCluster

# Send message (execute within the pod)
$ sh tools.sh org.apache.rocketmq.example.quickstart.Producer

# Receive message (execute within the pod)
$ sh tools.sh org.apache.rocketmq.example.quickstart.Consumer

----------------------------------------

TITLE: Implementing Incorrect Producer Usage in Java
DESCRIPTION: Shows an anti-pattern where producers are created and destroyed in a loop, leading to excessive connection overhead and potential system performance issues.

LANGUAGE: java
CODE:
for (int i =0;i<n;i++)
{
  Producer p = ProducerBuilder.build();
  Message m= MessageBuilder.build();
  p.send(m);
  p.shutdown();
}

----------------------------------------

TITLE: Shutting Down RocketMQ Services
DESCRIPTION: Commands to safely shutdown both the Broker and NameServer services.

LANGUAGE: shell
CODE:
$ sh bin/mqshutdown broker
The mqbroker(36695) is running...
Send shutdown request to mqbroker(36695) OK

$ sh bin/mqshutdown namesrv
The mqnamesrv(36664) is running...
Send shutdown request to mqnamesrv(36664) OK

----------------------------------------

TITLE: Stopping RocketMQ Containers
DESCRIPTION: Commands to stop the RocketMQ containers after usage.

LANGUAGE: shell
CODE:
docker stop rmqnamesrv

docker stop rmqbroker

----------------------------------------

TITLE: Typical Command Example
DESCRIPTION: Example of a complete command with arguments for updating a topic

LANGUAGE: bash
CODE:
./mqadmin updateTopic -n localhost:9876 -t TestTopic -c DefaultCluster -r 8 -w 8 -p 6

----------------------------------------

TITLE: Sending and Receiving Messages in RocketMQ
DESCRIPTION: Commands to set up the NameServer address and run example producer and consumer clients.

LANGUAGE: shell
CODE:
$ export NAMESRV_ADDR=localhost:9876
$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer
 SendResult [sendStatus=SEND_OK, msgId= ...

$ sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer
 ConsumeMessageThread_%d Receive New Messages: [MessageExt...

----------------------------------------

TITLE: Query Full ACL Configuration Command
DESCRIPTION: Shell command for retrieving the complete contents of the ACL configuration file from cluster brokers.

LANGUAGE: shell
CODE:
sh mqadmin getAccessConfigSubCommand -n 192.168.1.2:9876 -c DefaultCluster

----------------------------------------

TITLE: Implementing RocketMQ Consumer in Java
DESCRIPTION: Java code for creating a RocketMQ push consumer and subscribing to messages from a specified topic.

LANGUAGE: java
CODE:
package com.rocketmq.consumer;

import java.io.IOException;
import java.util.Collections;
import org.apache.rocketmq.client.apis.ClientConfiguration;
import org.apache.rocketmq.client.apis.ClientException;
import org.apache.rocketmq.client.apis.ClientServiceProvider;
import org.apache.rocketmq.client.apis.consumer.ConsumeResult;
import org.apache.rocketmq.client.apis.consumer.FilterExpression;
import org.apache.rocketmq.client.apis.consumer.FilterExpressionType;
import org.apache.rocketmq.client.apis.consumer.PushConsumer;

import java.util.List;

public class Consumer {
    public static void main(String[] args) throws ClientException, IOException, InterruptedException {
        final ClientServiceProvider provider = ClientServiceProvider.loadService();
        String endpoints = "192.168.85.227:8081";
        ClientConfiguration clientConfiguration = ClientConfiguration.newBuilder()
                .setEndpoints(endpoints)
                .build();
        String tag = "*";
        FilterExpression filterExpression = new FilterExpression(tag, FilterExpressionType.TAG);
        String consumerGroup = "TestGroup";
        String topic = "TestTopic";
        PushConsumer pushConsumer = provider.newPushConsumerBuilder()
                .setClientConfiguration(clientConfiguration)
                .setConsumerGroup(consumerGroup)
                .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))
                .setMessageListener(messageView -> {
                    System.out.println("Consume message successfully, messageId="+ messageView.getMessageId());
                    return ConsumeResult.SUCCESS;
                })
                .build();
        Thread.sleep(Long.MAX_VALUE);
    }
}

----------------------------------------

TITLE: RocketMQ Consumer Usage Pattern - Incorrect Implementation
DESCRIPTION: Shows an anti-pattern that should be avoided where consumers are repeatedly created and destroyed in a loop. This approach creates unnecessary overhead and can impact system performance.

LANGUAGE: java
CODE:
for (int i =0;i<n;i++)
{
  Consumer c = ConsumerBuilder.build();
  Message m= c.receive();
  //process message
  c.shutdown();
}

----------------------------------------

TITLE: Adding RocketMQ Java Client Dependency in Maven
DESCRIPTION: This XML snippet shows how to add the RocketMQ Java client dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the RocketMQ client library.

LANGUAGE: xml
CODE:
<dependency>
    <groupId>org.apache.rocketmq</groupId>
    <artifactId>rocketmq-client-java</artifactId>
    <version>${rocketmq-client-java-version}</version>
</dependency>

----------------------------------------

TITLE: Stopping RocketMQ Services with Docker Compose
DESCRIPTION: This shell command demonstrates how to stop and remove all services defined in the docker-compose.yml file, effectively shutting down the RocketMQ cluster.

LANGUAGE: shell
CODE:
docker-compose down

----------------------------------------

TITLE: Creating Subscription Group for FIFO Messages
DESCRIPTION: Command to create a subscription group for ordered messages using mqadmin tool, with the ordered flag set to true.

LANGUAGE: shell
CODE:
sh mqadmin updateSubGroup -c <cluster_name> -g <consumer_group_name> -n <nameserver_address> -o true

----------------------------------------

TITLE: Creating a Transaction Topic in Apache RocketMQ
DESCRIPTION: This command creates a topic that supports transactional messages using the mqadmin tool. It sets the message type to 'Transaction' as a property parameter.

LANGUAGE: shell
CODE:
sh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=Transaction

----------------------------------------

TITLE: Starting RocketMQ Cluster with Docker Compose
DESCRIPTION: These shell commands demonstrate how to start the RocketMQ cluster using Docker Compose on Linux and Windows platforms. The commands use the docker-compose.yml file to bring up all defined services in detached mode.

LANGUAGE: shell
CODE:
docker-compose up -d

LANGUAGE: shell
CODE:
docker-compose -p rockermq_project up -d

----------------------------------------

TITLE: Creating a Transaction Topic in Apache RocketMQ
DESCRIPTION: This command creates a topic that supports transactional messages using the mqadmin tool. It sets the message type to 'Transaction' as a property parameter.

LANGUAGE: shell
CODE:
sh mqadmin updateTopic -n <nameserver_address> -t <topic_name> -c <cluster_name> -a +message.type=Transaction

----------------------------------------

TITLE: Checking RocketMQ Cluster Status
DESCRIPTION: Command to list the cluster status using the mqadmin tool.

LANGUAGE: shell
CODE:
$ sh bin/mqadmin clusterList -n 127.0.0.1:9876

----------------------------------------

TITLE: Event State Change Examples
DESCRIPTION: Examples showing how events represent actual completed state changes rather than commands.

LANGUAGE: text
CODE:
* The kitchen light being turned on
* Someone pressing the doorbell
* Account A receiving 100,000

----------------------------------------

TITLE: Pushing Changes to Remote
DESCRIPTION: Commands for pushing local changes to the remote repository.

LANGUAGE: shell
CODE:
$ git push --set-upstream apache RocketMQ-Vxx.0
$ git checkout new-official-website
$ git push origin new-official-website

----------------------------------------

TITLE: Disabling JVM Biased Locking
DESCRIPTION: JVM configuration to disable biased locking, which can help reduce JVM pauses in certain scenarios.

LANGUAGE: text
CODE:
-XX:-UseBiasedLocking

----------------------------------------

TITLE: File Path Reference for Code Style Configuration
DESCRIPTION: Reference to the location of code style XML file in the RocketMQ project structure.

LANGUAGE: plaintext
CODE:
rocketmq/style/rmq_codestyle.xml

----------------------------------------

TITLE: Handling LOAD_JSON_EXCEPTION in Java
DESCRIPTION: This exception occurs in broadcast mode when consumers have an error loading the local offsets.json file. It can also be caused by a damaged fastjson file.

LANGUAGE: java
CODE:
readLocalOffset Exception

----------------------------------------

TITLE: Configuring Maven Dependencies for RocketMQ Streams
DESCRIPTION: This XML snippet shows how to add the RocketMQ Streams dependency to a Maven project's pom.xml file. It specifies the groupId, artifactId, and version for the rocketmq-streams library.

LANGUAGE: xml
CODE:
<dependencies>
    <dependency>
        <groupId>org.apache.rocketmq</groupId>
        <artifactId>rocketmq-streams</artifactId>
            <!-- 根据需要修改 -->
        <version>1.1.0</version>
    </dependency>
</dependencies>