TITLE: Implementing Custom Storage Adapter in JavaScript
DESCRIPTION: Base implementation of a custom storage adapter class showing required method structure and inheritance from ghost-storage-base.

LANGUAGE: javascript
CODE:
'use strict';

var BaseAdapter = require('ghost-storage-base');

class MyCustomAdapter extends BaseAdapter{
  constructor() {
    super();
  }
}

module.exports = MyCustomAdapter;

LANGUAGE: javascript
CODE:
'use strict';

var BaseAdapter = require('ghost-storage-base');

class MyCustomAdapter extends BaseAdapter{
  constructor() {
    super();
  }
  
  exists() {

  }

  save() {

  }

  serve() {
    return function customServe(req, res, next) {
      next();
    }
  }

  delete() {

  }

  read() {

  }
}

module.exports = MyCustomAdapter;

----------------------------------------

TITLE: Implementing Custom Scheduling Adapter in Ghost
DESCRIPTION: This code snippet demonstrates how to create a custom scheduling adapter for Ghost CMS. It includes the required functions to implement, such as schedule, reschedule, and unschedule. The adapter extends the SchedulingBase class and provides a template for handling scheduling operations.

LANGUAGE: javascript
CODE:
var util = require('util');

// If this require does not work, then your content folder structure is different
// So change the require path so that your adapter can import the scheduling base.
var SchedulingBase = require('../../core/server/adapters/scheduling/SchedulingBase');

function MyAdapter(options) {
    SchedulingBase.call(this, options);
}

util.inherits(MyAdapter, SchedulingBase);

// required functions you need to implement
MyAdapter.prototype.schedule = function(object) {
    // when the job should be executed (time is a UTC timestamp)
    var time = object.time;

    // the url you need to execute when the time is reached
    var url = object.url;

    // the HTTP method you need to use
    var httpMethod = object.extra.httpMethod;
};

MyAdapter.prototype.reschedule = function(object) {
    // see MyAdapter.prototype.schedule

    // the time when the url was scheduled before (oldTime is a UTC timestamp)
    var oldTime = object.extra.oldTime;
};

MyAdapter.prototype.unschedule = function(object) {
    // see MyAdapter.prototype.schedule
};

//this function is called on server bootstrap
MyAdapter.prototype.run = function() {};

module.exports = MyAdapter;

----------------------------------------

TITLE: Installing Ghost
DESCRIPTION: Command to start the Ghost installation process using Ghost-CLI. This will prompt for various configuration options.

LANGUAGE: bash
CODE:
ghost install

----------------------------------------

TITLE: MySQL Database Configuration - JSON
DESCRIPTION: Standard MySQL database configuration for Ghost including connection details.

LANGUAGE: json
CODE:
{
  "client": "mysql",
  "connection": {
    "host": "127.0.0.1",
    "port": 3306,
    "user": "your_database_user",
    "password": "your_database_password",
    "database": "your_database_name"
  }
}

----------------------------------------

TITLE: Setting up Ghost Development Environment
DESCRIPTION: Run initial setup and start Ghost in development mode.

LANGUAGE: bash
CODE:
yarn setup

LANGUAGE: bash
CODE:
grunt dev

----------------------------------------

TITLE: Configuring Storage Adapter in Ghost
DESCRIPTION: JSON configuration block needed to enable and configure a custom storage adapter in Ghost's configuration file.

LANGUAGE: json
CODE:
storage: {
    active: 'my-module',
    'my-module': {
        key: 'abcdef'
    }
}

----------------------------------------

TITLE: Installing Ghost-CLI globally using npm
DESCRIPTION: This command installs the latest version of Ghost-CLI globally on the local machine using npm. Ghost-CLI is a command-line tool for installing and managing Ghost instances.

LANGUAGE: bash
CODE:
npm install ghost-cli@latest -g

----------------------------------------

TITLE: Running Ghost in Production Environment - Bash
DESCRIPTION: Command to start Ghost in production environment using NODE_ENV variable.

LANGUAGE: bash
CODE:
NODE_ENV=production node index.js

----------------------------------------

TITLE: Installing Node.js on Ubuntu
DESCRIPTION: Commands to install a supported version of Node.js on Ubuntu using the NodeSource repository.

LANGUAGE: bash
CODE:
# Add the NodeSource APT repository for Node 10
curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash

# Install Node.js
sudo apt-get install -y nodejs

----------------------------------------

TITLE: Installing Global Dependencies for Ghost Development
DESCRIPTION: Install required global packages using Yarn package manager.

LANGUAGE: bash
CODE:
yarn global add knex-migrator grunt-cli ember-cli bower

----------------------------------------

TITLE: Retrieving Author Data from Ghost Content API (JSON)
DESCRIPTION: This snippet demonstrates the structure of an author object returned by the Ghost Content API. It includes details such as the author's name, slug, profile image, and associated metadata.

LANGUAGE: json
CODE:
{
  "authors": [
    {
      "id": "5951f5fca366002ebd5dbef7",
      "name": "Ghost",
      "slug": "ghost",
      "profile_image": "https://demo.ghost.io/content/images/2017/07/ghost-icon.png",
      "cover_image": null,
      "bio": "The professional publishing platform",
      "website": "https://ghost.org",
      "location": null,
      "facebook": "ghost",
      "twitter": "@tryghost",
      "meta_title": null,
      "meta_description": null,
      "url": "https://demo.ghost.io/author/ghost/"
    }
  ]
}

----------------------------------------

TITLE: Retrieving Post Data from Ghost Content API
DESCRIPTION: This JSON snippet demonstrates the structure of a post object returned by the Ghost Content API. It includes various post properties such as ID, title, slug, HTML content, feature image, and metadata.

LANGUAGE: json
CODE:
{
  "posts": [
    {
      "id": "5c7ece47da174000c0c5c6d7",
      "uuid": "7f1f20ff-46dc-4eeb-86d3-293dab7084f1",
      "title": "Welcome to Ghost",
      "slug": "welcome",
      "html": "<p>ðŸ‘‹ Welcome, it's great to have you here.</p><p>We know that first impressions are important, so we've populated your new site with some initial <strong>getting started</strong> posts that will help you get familiar with everything in no time. This is the first one!</p><h2 id=\"a-few-things-you-should-know\">A few things you should know</h2><ol><li>Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. </li><li>The entire platform can be modified and customized to suit your needs. It's very powerful, but does require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog. </li><li>For the best experience we recommend downloading the <a href=\"https://ghost.org/downloads/\">Ghost Desktop App</a> for your computer, which is the best way to access your Ghost site on a desktop device.</li></ol><h2 id=\"getting-started\">Getting Started</h2><p>So now you're in, here are a few things you should know to get started with Ghost.</p><ol><li>Ghost uses something called <strong>Markdown</strong> for writing. Essentially, it's a shorthand way to manage your post formatting as you write!</li><li>You can use the toolbar at the bottom of the editor to access formatting options, or you can learn more about <a href=\"https://docs.ghost.org/publishing/the-editor/\">using Markdown</a> directly.</li><li>Ghost has a tagging system and tools for adding custom-fields to your content. You can read more about these <a href=\"https://docs.ghost.org/reference/content/\">content features</a> for setting up your site just the way you want.</li><li>If you get stuck, there's always <a href=\"https://docs.ghost.org\">helpful docs</a> and <a href=\"https://forum.ghost.org\">our support forums</a>.</li></ol><h2 id=\"next-up-apps-integrations\">Next up, Apps &amp; Integrations</h2><p>There are a huge range of integrations available for Ghost, including tools for automating your social media, mailing lists, backups, and much more. You can browse these in the <a href=\"https://ghost.org/integrations/\">Marketplace</a>.</p><p>Good luck with your new site!</p>",
      "comment_id": "5c7ece47da174000c0c5c6d7",
      "feature_image": "https://casper.ghost.org/v2.0.0/images/welcome-to-ghost.jpg",
      "featured": false,
      "visibility": "public",
      "send_email_when_published": false,
      "created_at": "2019-03-05T19:30:15.000+00:00",
      "updated_at": "2019-03-05T19:30:15.000+00:00",
      "published_at": "2019-03-05T19:30:16.000+00:00",
      "custom_excerpt": "Welcome, it's great to have you here. We know that first impressions are important, so we've populated your new site with some initial getting started posts that will help you get familiar with everything in no time.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "url": "https://demo.ghost.io/welcome/",
      "excerpt": "Welcome, it's great to have you here. We know that first impressions are important, so we've populated your new site with some initial getting started posts that will help you get familiar with everything in no time.",
      "reading_time": 2,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "email_subject": null
    }
  ]
}

----------------------------------------

TITLE: Configuring Custom Scheduler in Ghost
DESCRIPTION: This JSON snippet shows how to configure Ghost to use a custom scheduling adapter. The 'active' property should be set to the name of the custom adapter file (without the .js extension) placed in the content/scheduling/ directory.

LANGUAGE: json
CODE:
"scheduling": {
  "active": "my-adapter"
}

----------------------------------------

TITLE: Database Management Commands
DESCRIPTION: Commands for managing Ghost database using knex-migrator.

LANGUAGE: bash
CODE:
knex-migrator reset
knex-migrator init

----------------------------------------

TITLE: Mailgun Email Configuration - JSON
DESCRIPTION: Email configuration using Mailgun as the SMTP service provider.

LANGUAGE: json
CODE:
{
    "transport": "SMTP",
    "options": {
        "service": "Mailgun",
        "auth": {
            "user": "postmaster@example.mailgun.org",
            "pass": "1234567890"
        }
    }
}

----------------------------------------

TITLE: Ghost Development Commands
DESCRIPTION: Various development utility commands for running tests, building packages, and managing the database.

LANGUAGE: bash
CODE:
grunt dev
grunt dev --server
grunt dev --no-server-watch
grunt build
grunt prod

----------------------------------------

TITLE: UFW Firewall Configuration
DESCRIPTION: Recommended UFW firewall rules for securing a Ghost installation by allowing only essential services (SSH, Nginx, HTTP, HTTPS).

LANGUAGE: bash
CODE:
ufw allow ssh
ufw allow nginx
ufw allow http
ufw allow https

----------------------------------------

TITLE: Installing NGINX on Ubuntu
DESCRIPTION: Commands to install NGINX web server and configure the firewall to allow HTTP and HTTPS connections.

LANGUAGE: bash
CODE:
# Install NGINX
sudo apt-get install nginx

# Open Firewall
sudo ufw allow 'Nginx Full'

----------------------------------------

TITLE: Installing MySQL on Ubuntu
DESCRIPTION: Commands to install MySQL database server. For Ubuntu 18.04, additional steps are provided to set a root password for compatibility with Ghost-CLI.

LANGUAGE: bash
CODE:
# Install MySQL
sudo apt-get install mysql-server

# For Ubuntu 18.04 only:
# To set a password, run
sudo mysql

# Now update your user with this password
# Replace 'password' with your password, but keep the quote marks!
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';

# Then exit MySQL
quit

# and login to your Ubuntu user again
su - <user>

----------------------------------------

TITLE: SQLite3 Database Configuration - JSON
DESCRIPTION: Alternative SQLite3 database configuration for Ghost.

LANGUAGE: json
CODE:
{
  "client": "sqlite3",
  "connection": {
    "filename": "content/data/ghost-test.db"
  },
  "useNullAsDefault": true,
  "debug": false
}

----------------------------------------

TITLE: Installing Ghost locally using Ghost-CLI
DESCRIPTION: This command uses Ghost-CLI to install a local instance of Ghost in the current directory. It sets up Ghost in development mode with SQLite3 as the database.

LANGUAGE: bash
CODE:
ghost install local

----------------------------------------

TITLE: Cloning Ghost Repository
DESCRIPTION: Clone the Ghost repository with submodules and configure remote repositories.

LANGUAGE: bash
CODE:
git clone --recurse-submodules git@github.com:TryGhost/Ghost && cd Ghost

LANGUAGE: bash
CODE:
git remote rename origin upstream
git remote add origin git@github.com:<YourUsername>/Ghost.git

----------------------------------------

TITLE: Handlebars Template Examples for Ghost Pages
DESCRIPTION: Examples of possible Handlebars template files that can be used for custom page layouts in Ghost themes. Shows both generic and page-specific template naming conventions.

LANGUAGE: handlebars
CODE:
page.hbs
page-wide.hbs
page-about.hbs

----------------------------------------

TITLE: Ghost API Tag Object Example
DESCRIPTION: Sample JSON response from the Ghost Content API showing the structure of a tag object with its properties and metadata.

LANGUAGE: json
CODE:
{
  "tags": [{
    "id": "5ddc9063c35e7700383b27e0",
    "name": "Getting Started",
    "slug": "getting-started",
    "description": "Testing, testing, is this thing on?",
    "feature_image": "https://demo.ghost.io/content/images/2019/11/getting-started.png",
    "visibility": "public",
    "meta_title": "Getting Started - Testing, testing, is this thing on?",
    "meta_description": null,
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "canonical_url": null,
    "accent_color": null,
    "url": "https://demo.ghost.io/tag/getting-started/"
  }]
}

----------------------------------------

TITLE: Server Testing Commands
DESCRIPTION: Commands for running various types of server tests.

LANGUAGE: bash
CODE:
grunt test-all
grunt test-unit
grunt test-acceptance
grunt test-regression
grunt test:path/to/test.js
grunt lint

----------------------------------------

TITLE: Installing GScan globally for theme validation
DESCRIPTION: This command installs GScan, a tool for validating Ghost themes, globally on the local machine using npm. GScan checks themes for compatibility with the latest versions of Ghost.

LANGUAGE: bash
CODE:
npm install gscan -g

----------------------------------------

TITLE: Installing Ghost-CLI
DESCRIPTION: Command to install the Ghost-CLI tool globally using npm. This tool is essential for installing and managing Ghost.

LANGUAGE: bash
CODE:
sudo npm install ghost-cli@latest -g

----------------------------------------

TITLE: Preparing Directory for Ghost Installation
DESCRIPTION: Commands to create a directory for Ghost installation, set proper ownership and permissions, and navigate to the directory.

LANGUAGE: bash
CODE:
# We'll name ours 'ghost' in this example; you can use whatever you want
sudo mkdir -p /var/www/ghost

# Replace <user> with the name of your user who will own this directory
sudo chown <user>:<user> /var/www/ghost

# Set the correct permissions
sudo chmod 775 /var/www/ghost

# Then navigate into it
cd /var/www/ghost

----------------------------------------

TITLE: Debugging Ghost Configuration - Bash
DESCRIPTION: Command to start Ghost with debugging enabled for configuration troubleshooting.

LANGUAGE: bash
CODE:
DEBUG=ghost:*,ghost-config node index.js

----------------------------------------

TITLE: Running GScan to validate a Ghost theme directory
DESCRIPTION: This command uses GScan to scan and validate a Ghost theme located in a specific directory. It checks the theme for compatibility with the latest Ghost versions.

LANGUAGE: bash
CODE:
gscan /path/to/ghost/content/themes/casper

----------------------------------------

TITLE: Client Testing Commands
DESCRIPTION: Commands for running Ghost client tests using Ember.

LANGUAGE: bash
CODE:
ember test
ember test --server
ember test -f 'gh-my-component'
ember test --launch=chrome
ember test -s -f 'Acceptance: Settings - General' --launch=chrome

----------------------------------------

TITLE: Running MySQL Security Installation
DESCRIPTION: Command to improve MySQL database security after initial setup by running the secure installation script.

LANGUAGE: bash
CODE:
mysql_secure_installation

----------------------------------------

TITLE: Updating Ubuntu Packages
DESCRIPTION: Commands to update package lists and installed packages on Ubuntu. This ensures the system is up-to-date before installing Ghost.

LANGUAGE: bash
CODE:
# Update package lists
sudo apt-get update

# Update installed packages
sudo apt-get upgrade

----------------------------------------

TITLE: Configuring Ghost-Admin Repository
DESCRIPTION: Navigate to Ghost-Admin directory and configure its Git remotes.

LANGUAGE: bash
CODE:
cd core/client
git remote rename origin upstream
git remote add origin git@github.com:<YourUsername>/Ghost-Admin.git
git checkout master && git pull upstream master
cd ../../

----------------------------------------

TITLE: Running GScan to validate a Ghost theme zip file
DESCRIPTION: This command uses GScan to scan and validate a Ghost theme provided as a zip file. It checks the zipped theme for compatibility with the latest Ghost versions.

LANGUAGE: bash
CODE:
gscan -z /path/to/downloads/theme.zip

----------------------------------------

TITLE: Creating a New User in Ubuntu
DESCRIPTION: Commands to create a new user, add them to the sudo group, and log in as the new user. This is important for security and to avoid conflicts with Ghost-CLI.

LANGUAGE: bash
CODE:
# Login via SSH
ssh root@your_server_ip

# Create a new user and follow prompts
adduser <user>

# Add user to superuser group to unlock admin privileges
usermod -aG sudo <user>

# Then log in as the new user
su - <user>

----------------------------------------

TITLE: Ghost(Pro) vs Self-Hosting Comparison Table
DESCRIPTION: HTML table structure comparing features and benefits between Ghost(Pro) managed hosting and self-hosted installations

LANGUAGE: html
CODE:
<table class="ghostpro-comparison">
    <thead>
        <tr>
            <th></th>
            <th>Ghost(Pro)</th>
            <th>Self-Hosting</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>ðŸŽ› Product features</td>
            <td>Identical</td>
            <td>Identical</td>
        </tr>
        <!-- Additional rows omitted for brevity -->
    </tbody>
</table>

----------------------------------------

TITLE: Setting Universal Web Crawler Permissions
DESCRIPTION: Configures universal access rules for web crawlers using robots.txt syntax. Allows all user agents (*) complete access to all directories and files on the website.

LANGUAGE: robots.txt
CODE:
User-agent: *
Allow: /

----------------------------------------

TITLE: Styling Ghost(Pro) Comparison Table
DESCRIPTION: CSS styling for a comparison table between Ghost(Pro) and self-hosted options, centering content and adding background highlighting for specific columns.

LANGUAGE: css
CODE:
.ghostpro-comparison th:not(:first-child),
.ghostpro-comparison td:not(:first-child) {
    text-align: center;
}
.ghostpro-comparison td:nth-child(1) {
    font-weight: 500;
}
.ghostpro-comparison td:nth-child(2) {
    background: #f7fcf3;
}

----------------------------------------

TITLE: Styling Features Comparison Table in HTML/CSS
DESCRIPTION: CSS styles for formatting a feature comparison table between Ghost and other publishing platforms. Sets text alignment and background colors for specific table cells.

LANGUAGE: html
CODE:
<style>
.features-comparison th:not(:first-child),
.features-comparison td:not(:first-child) {
    text-align: center;
}
.features-comparison td:nth-child(1) {
    font-weight: 500;
}
.features-comparison td:nth-child(2) {
    background: #f7fcf3;
}
</style>

----------------------------------------

TITLE: Displaying Bitcoin Donation Address in Markdown
DESCRIPTION: This snippet demonstrates how to display a Bitcoin donation address using Markdown syntax. It includes an image of a QR code and the text representation of the Bitcoin address.

LANGUAGE: markdown
CODE:
<div style="text-align:center">
<img src="/images/concepts/btc-wallet.png" style="max-height:170px" alt="Ghost BTC Address" />

**Ghost BTC Address:**<br>
`3CrQfpWaZPFfD4kAT7kh6avbW7bGBHiBq9`

</div>