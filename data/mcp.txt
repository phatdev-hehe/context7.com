TITLE: Installing MCP Atlassian Server
DESCRIPTION: Various methods to install the MCP Atlassian server using uv, pip, or Docker.

LANGUAGE: bash
CODE:
# Using uv (recommended)
brew install uv
uvx mcp-atlassian

# Using pip
pip install mcp-atlassian

# Using Docker
git clone https://github.com/sooperset/mcp-atlassian.git
cd mcp-atlassian
docker build -t mcp/atlassian .

----------------------------------------

TITLE: Documenting Python Functions with Google-style Docstrings
DESCRIPTION: This example demonstrates the correct format for documenting Python functions using Google-style docstrings, including type annotations, parameter descriptions, return values, and potential exceptions.

LANGUAGE: python
CODE:
def function_name(param1: str, param2: int) -> bool:
    """Summary of function purpose.

    More detailed description if needed.

    Args:
        param1: Description of param1
        param2: Description of param2

    Returns:
        Description of return value

    Raises:
        ValueError: When and why this exception is raised
    """

----------------------------------------

TITLE: Configuring MCP Server for Atlassian Cloud
DESCRIPTION: Command line configuration for setting up MCP server with Atlassian Cloud services.

LANGUAGE: bash
CODE:
uvx mcp-atlassian \
  --confluence-url https://your-company.atlassian.net/wiki \
  --confluence-username your.email@company.com \
  --confluence-token your_api_token \
  --jira-url https://your-company.atlassian.net \
  --jira-username your.email@company.com \
  --jira-token your_api_token

----------------------------------------

TITLE: Configuring MCP Server for Atlassian Server/Data Center
DESCRIPTION: Command line configuration for setting up MCP server with Atlassian Server/Data Center deployment.

LANGUAGE: bash
CODE:
uvx mcp-atlassian \
  --confluence-url https://confluence.your-company.com \
  --confluence-personal-token your_token \
  --jira-url https://jira.your-company.com \
  --jira-personal-token your_token

----------------------------------------

TITLE: Configuring VSCode Settings for Python Development
DESCRIPTION: This JSON configuration sets up VSCode for Python development, specifying the Python interpreter path and configuring the Ruff formatter for automatic formatting on save.

LANGUAGE: json
CODE:
{
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
    "[python]": {
      "editor.defaultFormatter": "charliermarsh.ruff",
      "editor.formatOnSave": true
    }
}

----------------------------------------

TITLE: Running Tests with Pytest in Python
DESCRIPTION: These commands show how to run tests using pytest, including an option to generate a coverage report for the mcp_atlassian package.

LANGUAGE: bash
CODE:
uv run pytest

# With coverage
uv run pytest --cov=mcp_atlassian

----------------------------------------

TITLE: Claude Desktop MCP Configuration for Cloud
DESCRIPTION: JSON configuration for setting up MCP server in Claude Desktop with Cloud deployment.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mcp-atlassian": {
      "command": "uvx",
      "args": [
        "mcp-atlassian",
        "--confluence-url=https://your-company.atlassian.net/wiki",
        "--confluence-username=your.email@company.com",
        "--confluence-token=your_api_token",
        "--jira-url=https://your-company.atlassian.net",
        "--jira-username=your.email@company.com",
        "--jira-token=your_api_token"
      ]
    }
  }
}

----------------------------------------

TITLE: Cursor IDE SSE Transport Configuration
DESCRIPTION: JSON configuration for setting up SSE transport in Cursor IDE.

LANGUAGE: json
CODE:
{
  "mcpServers": {
    "mcp-atlassian-sse": {
      "url": "http://localhost:9000/sse",
      "env": {
        "CONFLUENCE_URL": "https://your-company.atlassian.net/wiki",
        "CONFLUENCE_USERNAME": "your.email@company.com",
        "CONFLUENCE_API_TOKEN": "your_api_token",
        "JIRA_URL": "https://your-company.atlassian.net",
        "JIRA_USERNAME": "your.email@company.com",
        "JIRA_API_TOKEN": "your_api_token"
      }
    }
  }
}

----------------------------------------

TITLE: Setting Up Pre-commit Hooks in Bash
DESCRIPTION: This command installs pre-commit hooks to enforce code quality checks before commits are made.

LANGUAGE: bash
CODE:
pre-commit install

----------------------------------------

TITLE: Running Pre-commit Checks in Bash
DESCRIPTION: This command runs all pre-commit hooks on all files in the repository, ensuring code quality standards are met before committing changes.

LANGUAGE: bash
CODE:
pre-commit run --all-files

----------------------------------------

TITLE: Installing Dependencies with UV in Bash
DESCRIPTION: This command uses the UV package manager to synchronize project dependencies, including all extras and development dependencies, based on a frozen lockfile.

LANGUAGE: bash
CODE:
uv sync --frozen --all-extras --dev

----------------------------------------

TITLE: Creating a Feature Branch in Git
DESCRIPTION: These Git commands demonstrate how to create a new branch for feature development or bug fixing, following a consistent naming convention.

LANGUAGE: bash
CODE:
git checkout -b feature/your-feature-name
# or
git checkout -b fix/issue-description

----------------------------------------

TITLE: Copying Environment Variables in Bash
DESCRIPTION: This command creates a new .env file by copying the contents of the .env.example file, which typically contains template environment variables.

LANGUAGE: bash
CODE:
cp .env.example .env