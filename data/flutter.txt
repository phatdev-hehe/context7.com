TITLE: Implementing Gemini AI Chat Interface
DESCRIPTION: Example implementation of a chat interface using Google Gemini AI provider. Requires a Gemini API key and model selection.

LANGUAGE: dart
CODE:
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:flutter_ai_toolkit/flutter_ai_toolkit.dart';

// ... app stuff here

class ChatPage extends StatelessWidget {
  const ChatPage({super.key});

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(title: const Text(App.title)),
        body: LlmChatView(
          provider: GeminiProvider(
            model: GenerativeModel(
              model: 'gemini-1.5-flash',
              apiKey: 'GEMINI-API-KEY',
            ),
          ),
        ),
      );
}

----------------------------------------

TITLE: Defining a View Widget in Flutter MVVM Architecture
DESCRIPTION: This code shows how to define a view widget in Flutter using MVVM architecture. It demonstrates the basic structure of a view that takes a view model as a parameter.

LANGUAGE: dart
CODE:
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key, required this.viewModel});

  final HomeViewModel viewModel;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ...
    );
  }
}

----------------------------------------

TITLE: Implementing SharedPreferencesService in Flutter
DESCRIPTION: This snippet demonstrates the SharedPreferencesService class, which wraps the SharedPreferences plugin functionality to store and retrieve the dark mode setting. It encapsulates the third-party dependency from the rest of the application.

LANGUAGE: dart
CODE:
class SharedPreferencesService {
  static const String _kDartMode = 'darkMode';

  Future<void> setDarkMode(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_kDartMode, value);
  }

  Future<bool> isDarkMode() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_kDartMode) ?? false;
  }
}

----------------------------------------

TITLE: Displaying Fetched Data with FutureBuilder
DESCRIPTION: Use FutureBuilder to handle the asynchronous state and display the fetched data or loading/error states in the UI.

LANGUAGE: dart
CODE:
FutureBuilder<Album>(
  future: futureAlbum,
  builder: (context, snapshot) {
    if (snapshot.hasData) {
      return Text(snapshot.data!.title);
    } else if (snapshot.hasError) {
      return Text('${snapshot.error}');
    }

    // By default, show a loading spinner.
    return const CircularProgressIndicator();
  },
)

----------------------------------------

TITLE: Implementing CartModel with ChangeNotifier in Dart
DESCRIPTION: This snippet shows how to create a CartModel class that extends ChangeNotifier to manage the state of a shopping cart. It includes methods for adding items and removing all items, notifying listeners of changes.

LANGUAGE: dart
CODE:
class CartModel extends ChangeNotifier {
  final List<Item> _items = [];

  UnmodifiableListView<Item> get items => UnmodifiableListView(_items);

  int get totalPrice => _items.length * 42;

  void add(Item item) {
    _items.add(item);
    notifyListeners();
  }

  void removeAll() {
    _items.clear();
    notifyListeners();
  }
}

----------------------------------------

TITLE: Creating an Icon List with Multiple Columns in Flutter
DESCRIPTION: Shows how to create an icon list with multiple columns, each containing an icon and two lines of text.

LANGUAGE: dart
CODE:
const descTextStyle = TextStyle(
  color: Colors.black,
  fontWeight: FontWeight.w800,
  fontFamily: 'Roboto',
  letterSpacing: 0.5,
  fontSize: 18,
  height: 2,
);

final iconList = DefaultTextStyle.merge(
  style: descTextStyle,
  child: Container(
    padding: const EdgeInsets.all(20),
    child: Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: [
        Column(
          children: [
            Icon(Icons.kitchen, color: Colors.green[500]),
            const Text('PREP:'),
            const Text('25 min'),
          ],
        ),
        Column(
          children: [
            Icon(Icons.timer, color: Colors.green[500]),
            const Text('COOK:'),
            const Text('1 hr'),
          ],
        ),
        Column(
          children: [
            Icon(Icons.restaurant, color: Colors.green[500]),
            const Text('FEEDS:'),
            const Text('4-6'),
          ],
        ),
      ],
    ),
  ),
);

----------------------------------------

TITLE: Creating a TextEditingController in Flutter
DESCRIPTION: This snippet demonstrates how to create a TextEditingController for a TextField in a StatefulWidget. It includes the necessary setup and disposal of the controller.

LANGUAGE: dart
CODE:
// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

// Define a corresponding State class.
// This class holds data related to the Form.
class _MyCustomFormState extends State<MyCustomForm> {
  // Create a text controller. Later, use it to retrieve the
  // current value of the TextField.
  final myController = TextEditingController();

  @override
  void dispose() {
    // Clean up the controller when the widget is removed from the
    // widget tree.
    myController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Fill this out in the next step.
  }
}

----------------------------------------

TITLE: Creating a Custom Widget in Dart
DESCRIPTION: This code defines a custom StatelessWidget called MyWidget that displays a title and message. It's the widget that will be tested in the example.

LANGUAGE: dart
CODE:
class MyWidget extends StatelessWidget {
  const MyWidget({super.key, required this.title, required this.message});

  final String title;
  final String message;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      home: Scaffold(
        appBar: AppBar(title: Text(title)),
        body: Center(child: Text(message)),
      ),
    );
  }
}

----------------------------------------

TITLE: Using Named Routes for Navigation in Flutter
DESCRIPTION: This example shows how to use named routes for navigation in Flutter. It demonstrates pushing a new route using Navigator.pushNamed() method, which is typically used with routes defined in MaterialApp.routes.

LANGUAGE: dart
CODE:
child: const Text('Open second screen'),
onPressed: () {
  Navigator.pushNamed(context, '/second');
},

----------------------------------------

TITLE: Expanding Widgets to Fill Available Space in Flutter
DESCRIPTION: Demonstrates how to make widgets expand to fill available space in a Row using the Expanded widget in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return const Row(
    children: [
      Expanded(
        child: BorderedImage(width: 150, height: 150),
      ),
      Expanded(
        child: BorderedImage(width: 150, height: 150),
      ),
      Expanded(
        child: BorderedImage(width: 150, height: 150),
      ),
    ],
  );
}

----------------------------------------

TITLE: Implementing ApiClient Service in Flutter
DESCRIPTION: A service class that handles CRUD operations with a client-facing server. Shows method signatures for fetching continents, destinations, activities, bookings and user data.

LANGUAGE: dart
CODE:
class ApiClient {
  // Some code omitted for demo purposes.

  Future<Result<List<ContinentApiModel>>> getContinents() async { /* ... */ }

  Future<Result<List<DestinationApiModel>>> getDestinations() async { /* ... */ }

  Future<Result<List<ActivityApiModel>>> getActivityByDestination(String ref) async { /* ... */ }

  Future<Result<List<BookingApiModel>>> getBookings() async { /* ... */ }

  Future<Result<BookingApiModel>> getBooking(int id) async { /* ... */ }

  Future<Result<BookingApiModel>> postBooking(BookingApiModel booking) async { /* ... */ }

  Future<Result<void>> deleteBooking(int id) async { /* ... */ }

  Future<Result<UserApiModel>> getUser() async { /* ... */ }
}

----------------------------------------

TITLE: Using Consumer widget to access CartModel in Flutter
DESCRIPTION: This example shows how to use the Consumer widget to access and display data from the CartModel in a Flutter widget.

LANGUAGE: dart
CODE:
return Consumer<CartModel>(
  builder: (context, cart, child) {
    return Text('Total price: ${cart.totalPrice}');
  },
);

----------------------------------------

TITLE: Creating a Basic Flutter App with Widgets
DESCRIPTION: This snippet demonstrates how to create a simple Flutter app using various widgets like MaterialApp, Scaffold, AppBar, and ElevatedButton. It shows the widget hierarchy and basic UI composition.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp( // Root widget
      home: Scaffold(
        appBar: AppBar(
          title: const Text('My Home Page'),
        ),
        body: Center(
          child: Builder(
            builder: (context) {
              return Column(
                children: [
                  const Text('Hello, World!'),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      print('Click!');
                    },
                    child: const Text('A button'),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing Efficient Build Methods in Flutter
DESCRIPTION: Best practices for implementing build() methods in Flutter widgets to optimize performance by minimizing expensive operations and controlling rebuild frequency.



----------------------------------------

TITLE: Basic Flutter App Initialization in Dart
DESCRIPTION: This snippet shows the main entry point for a starter Flutter app. It demonstrates how to run the app by calling the runApp() function with the root widget.

LANGUAGE: dart
CODE:
void main() {
  runApp(const MyApp());
}

----------------------------------------

TITLE: Complete Flutter Form Validation Example
DESCRIPTION: A complete working example that combines all the components into a functional form validation implementation with Material Design styling.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Form Validation Demo';

    return MaterialApp(
      title: appTitle,
      home: Scaffold(
        appBar: AppBar(title: const Text(appTitle)),
        body: const MyCustomForm(),
      ),
    );
  }
}

// Create a Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  MyCustomFormState createState() {
    return MyCustomFormState();
  }
}

// Create a corresponding State class.
// This class holds data related to the form.
class MyCustomFormState extends State<MyCustomForm> {
  // Create a global key that uniquely identifies the Form widget
  // and allows validation of the form.
  //
  // Note: This is a GlobalKey<FormState>,
  // not a GlobalKey<MyCustomFormState>.
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    // Build a Form widget using the _formKey created above.
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          TextFormField(
            // The validator receives the text that the user has entered.
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Please enter some text';
              }
              return null;
            },
          ),
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 16),
            child: ElevatedButton(
              onPressed: () {
                // Validate returns true if the form is valid, or false otherwise.
                if (_formKey.currentState!.validate()) {
                  // If the form is valid, display a snackbar. In the real world,
                  // you'd often call a server or save the information in a database.
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Processing Data')),
                  );
                }
              },
              child: const Text('Submit'),
            ),
          ),
        ],
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing MVVM Pattern with Flutter
DESCRIPTION: Complete implementation of Model-View-ViewModel pattern for managing application state.

LANGUAGE: dart
CODE:
class CounterViewModel extends ChangeNotifier {
  final CounterModel model;
  int? count;
  String? errorMessage;
  CounterViewModel(this.model);

  Future<void> init() async {
    try {
      count = (await model.loadCountFromServer()).count;
    } catch (e) {
      errorMessage = 'Could not initialize counter';
    }
    notifyListeners();
  }

  Future<void> increment() async {
    final currentCount = count;
    if (currentCount == null) {
      throw('Not initialized');
    }
    try {
      final incrementedCount = currentCount + 1;
      await model.updateCountOnServer(incrementedCount);
      count = incrementedCount;
    } catch(e) {
      errorMessage = 'Count not update count';
    }
    notifyListeners();
  }
}

----------------------------------------

TITLE: Conditionally Rendering Widgets Based on Command State in Flutter
DESCRIPTION: This snippet demonstrates how to conditionally render different widgets based on the state of a Command object in a Flutter view. It shows how to handle loading, error, and completed states.

LANGUAGE: dart
CODE:
// ...
child: ListenableBuilder(
  listenable: viewModel.load,
  builder: (context, child) {
    if (viewModel.load.running) {
      return const Center(child: CircularProgressIndicator());
    }

    if (viewModel.load.error) {
      return ErrorIndicator(
        title: AppLocalization.of(context).errorWhileLoadingHome,
        label: AppLocalization.of(context).tryAgain,
          onPressed: viewModel.load.execute,
        );
     }

    // The command has completed without error.
    // Return the main view widget.
    return child!;
  },
),

// ...

----------------------------------------

TITLE: Navigating to Second Route using Navigator.push() (Cupertino Design)
DESCRIPTION: Implements navigation to the second route using Navigator.push() with CupertinoPageRoute in the onPressed callback of the FirstRoute widget.

LANGUAGE: dart
CODE:
// Within the `FirstRoute` widget:
onPressed: () {
  Navigator.push(
    context,
    CupertinoPageRoute(builder: (context) => const SecondRoute()),
  );
}

----------------------------------------

TITLE: Navigating to Second Route using Navigator.push() (Material Design)
DESCRIPTION: Implements navigation to the second route using Navigator.push() with MaterialPageRoute in the onPressed callback of the FirstRoute widget.

LANGUAGE: dart
CODE:
// Within the `FirstRoute` widget:
onPressed: () {
  Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => const SecondRoute()),
  );
}

----------------------------------------

TITLE: Creating Custom InheritedWidget for State Management
DESCRIPTION: Implementation of a custom InheritedWidget to efficiently share state across the widget tree.

LANGUAGE: dart
CODE:
class MyState extends InheritedWidget {
  const MyState({
    super.key,
    required this.data,
    required super.child,
  });

  final String data;

  static MyState of(BuildContext context) {
    final result = context.dependOnInheritedWidgetOfExactType<MyState>();
    assert(result != null, 'No MyState found in context');
    return result!;
  }

  @override
  bool updateShouldNotify(MyState oldWidget) => data != oldWidget.data;
}

----------------------------------------

TITLE: Implementing Basic StatefulWidget Counter in Flutter
DESCRIPTION: Basic example of state management using StatefulWidget to create a counter with increment functionality.

LANGUAGE: dart
CODE:
class MyCounter extends StatefulWidget {
  const MyCounter({super.key});

  @override
  State<MyCounter> createState() => _MyCounterState();
}

class _MyCounterState extends State<MyCounter> {
  int count = 0;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text('Count: $count'),
        TextButton(
          onPressed: () {
            setState(() {
              count++;
            });
          },
          child: Text('Increment'),
        )
      ],
    );
  }
}

----------------------------------------

TITLE: Creating a Grid Layout with Images in Flutter
DESCRIPTION: Demonstrates how to create a grid layout with images using GridView.extent.

LANGUAGE: dart
CODE:
Widget _buildGrid() => GridView.extent(
  maxCrossAxisExtent: 150,
  padding: const EdgeInsets.all(4),
  mainAxisSpacing: 4,
  crossAxisSpacing: 4,
  children: _buildGridTileList(30),
);

List<Widget> _buildGridTileList(int count) =>
    List.generate(count, (i) => Image.asset('images/pic$i.jpg'));

----------------------------------------

TITLE: Testing Flutter ViewModel with Fake Repositories
DESCRIPTION: Demonstrates unit testing of a HomeViewModel using fake repositories to verify booking loading functionality. Shows how to mock dependencies and test business logic.

LANGUAGE: dart
CODE:
void main() {
  group('HomeViewModel tests', () {
    test('Load bookings', () {
      // HomeViewModel._load is called in the constructor of HomeViewModel.
      final viewModel = HomeViewModel(
        bookingRepository: FakeBookingRepository()
          ..createBooking(kBooking),
        userRepository: FakeUserRepository(),
      );

      expect(viewModel.bookings.isNotEmpty, true);
    });
  });
}

----------------------------------------

TITLE: Returning to First Route using Navigator.pop()
DESCRIPTION: Implements navigation back to the first route using Navigator.pop() in the onPressed callback of the SecondRoute widget.

LANGUAGE: dart
CODE:
// Within the SecondRoute widget
onPressed: () {
  Navigator.pop(context);
}

----------------------------------------

TITLE: Creating a Stateful Widget with Counter
DESCRIPTION: This snippet demonstrates how to create a stateful widget with a counter. It shows the separation of the widget and its state, and how to use setState to update the UI when the state changes.

LANGUAGE: dart
CODE:
class CounterWidget extends StatefulWidget {
  @override
  State<CounterWidget> createState() => _CounterWidgetState();
}

class _CounterWidgetState extends State<CounterWidget> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }
  
  @override
  Widget build(BuildContext context) {
    return Text('$_counter');
  }
}

----------------------------------------

TITLE: Creating a User model class for JSON serialization in Dart
DESCRIPTION: Defines a User class with fromJson constructor and toJson method for manual JSON serialization.

LANGUAGE: dart
CODE:
class User {
  final String name;
  final String email;

  User(this.name, this.email);

  User.fromJson(Map<String, dynamic> json)
    : name = json['name'] as String,
      email = json['email'] as String;

  Map<String, dynamic> toJson() => {'name': name, 'email': email};
}

----------------------------------------

TITLE: Complete SharedPreferences Example in Flutter
DESCRIPTION: A full Flutter application demonstrating the use of SharedPreferences for persisting and retrieving a counter value. Includes initialization, incrementing, and displaying the counter value.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Shared preferences demo',
      home: MyHomePage(title: 'Shared preferences demo'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  @override
  void initState() {
    super.initState();
    _loadCounter();
  }

  /// Load the initial counter value from persistent storage on start,
  /// or fallback to 0 if it doesn't exist.
  Future<void> _loadCounter() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _counter = prefs.getInt('counter') ?? 0;
    });
  }

  /// After a click, increment the counter state and
  /// asynchronously save it to persistent storage.
  Future<void> _incrementCounter() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _counter = (prefs.getInt('counter') ?? 0) + 1;
      prefs.setInt('counter', _counter);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Text('You have pushed the button this many times: '),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}

----------------------------------------

TITLE: Creating Screens for Named Route Navigation in Flutter
DESCRIPTION: Defines two screen widgets (FirstScreen and SecondScreen) that will be used for navigation. Each screen contains a button for navigating between them.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class FirstScreen extends StatelessWidget {
  const FirstScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the second screen when tapped.
          },
          child: const Text('Launch screen'),
        ),
      ),
    );
  }
}

class SecondScreen extends StatelessWidget {
  const SecondScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Screen')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate back to first screen when tapped.
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing a Command Class for UI State Management in Flutter
DESCRIPTION: This snippet shows the implementation of a Command class used for managing UI state and handling asynchronous operations in a Flutter app. It demonstrates how to handle different states of an operation like running, complete, and error.

LANGUAGE: dart
CODE:
abstract class Command<T> extends ChangeNotifier {
  Command();
  bool running = false;
  Result<T>? _result;

  /// true if action completed with error
  bool get error => _result is Error;

  /// true if action completed successfully
  bool get completed => _result is Ok;

  /// Internal execute implementation
  Future<void> _execute(action) async {
    if (_running) return;

    // Emit running state - e.g. button shows loading state
    _running = true;
    _result = null;
    notifyListeners();

    try {
      _result = await action();
    } finally {
      _running = false;
      notifyListeners();
    }
  }
}

----------------------------------------

TITLE: Flutter Widget Test Setup with Dependencies
DESCRIPTION: Demonstrates setup for widget testing of HomeScreen including mock router and fake repositories. Shows how to configure the test environment with necessary dependencies.

LANGUAGE: dart
CODE:
void main() {
  group('HomeScreen tests', () {
    late HomeViewModel viewModel;
    late MockGoRouter goRouter;
    late FakeBookingRepository bookingRepository;

    setUp(() {
      bookingRepository = FakeBookingRepository()
        ..createBooking(kBooking);
      viewModel = HomeViewModel(
        bookingRepository: bookingRepository,
        userRepository: FakeUserRepository(),
      );
      goRouter = MockGoRouter();
      when(() => goRouter.push(any())).thenAnswer((_) => Future.value(null));
    });

    // ...
  });
}

----------------------------------------

TITLE: Creating a Stateful Favorite Widget in Flutter
DESCRIPTION: Implementation of a custom FavoriteWidget that manages favorite state and count, containing both icon button and text display.

LANGUAGE: dart
CODE:
class FavoriteWidget extends StatefulWidget {
  const FavoriteWidget({super.key});

  @override
  State<FavoriteWidget> createState() => _FavoriteWidgetState();
}

----------------------------------------

TITLE: Creating Simultaneous Animations in Flutter
DESCRIPTION: Demonstrates how to use multiple tweens on the same animation controller, where each tween manages a different effect in the animation, such as size and opacity.

LANGUAGE: dart
CODE:
class AnimatedLogo extends AnimatedWidget {
  const AnimatedLogo({super.key, required Animation<double> animation})
    : super(listenable: animation);

  static final _opacityTween = Tween<double>(begin: 0.1, end: 1);
  static final _sizeTween = Tween<double>(begin: 0, end: 300);

  @override
  Widget build(BuildContext context) {
    final animation = listenable as Animation<double>;
    return Center(
      child: Opacity(
        opacity: _opacityTween.evaluate(animation),
        child: Container(
          margin: const EdgeInsets.symmetric(vertical: 10),
          height: _sizeTween.evaluate(animation),
          width: _sizeTween.evaluate(animation),
          child: const FlutterLogo(),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Sending POST Request with HTTP in Dart
DESCRIPTION: Creates a function to send a POST request to create an album using the http package. It encodes the title as JSON and sends it to a specified URL.

LANGUAGE: dart
CODE:
Future<http.Response> createAlbum(String title) {
  return http.post(
    Uri.parse('https://jsonplaceholder.typicode.com/albums'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{'title': title}),
  );
}

----------------------------------------

TITLE: Creating a Basic Flutter App with Material Design
DESCRIPTION: Shows how to create a basic Flutter app using MaterialApp and Scaffold widgets, including an AppBar and centered text in the body.

LANGUAGE: dart
CODE:
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const String appTitle = 'Flutter layout demo';
    return MaterialApp(
      title: appTitle,
      home: Scaffold(
        appBar: AppBar(title: const Text(appTitle)),
        body: const Center(
          child: Text('Hello World'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Handling nested classes with json_serializable in Dart
DESCRIPTION: Demonstrates how to use json_serializable with nested classes by setting explicitToJson to true.

LANGUAGE: dart
CODE:
import 'package:json_annotation/json_annotation.dart';

import 'address.dart';

part 'user.g.dart';

@JsonSerializable(explicitToJson: true)
class User {
  User(this.name, this.address);

  String name;
  Address address;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
  Map<String, dynamic> toJson() => _$UserToJson(this);
}

----------------------------------------

TITLE: Centering a Single Widget in Flutter
DESCRIPTION: Demonstrates how to center a single widget using the Center widget in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Center(
    child: BorderedImage(),
  );
}

----------------------------------------

TITLE: Complete Flutter App for Fetching and Displaying Data
DESCRIPTION: A complete Flutter application that demonstrates fetching data from an API, converting it to a Dart object, and displaying it using FutureBuilder.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Album> fetchAlbum() async {
  final response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
  );

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load album');
  }
}

class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'userId': int userId, 'id': int id, 'title': String title} => Album(
        userId: userId,
        id: id,
        title: title,
      ),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late Future<Album> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Data Example',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Scaffold(
        appBar: AppBar(title: const Text('Fetch Data Example')),
        body: Center(
          child: FutureBuilder<Album>(
            future: futureAlbum,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                return Text(snapshot.data!.title);
              } else if (snapshot.hasError) {
                return Text('${snapshot.error}');
              }

              // By default, show a loading spinner.
              return const CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }

}

----------------------------------------

TITLE: Implementing ChangeNotifier for State Management
DESCRIPTION: Example of using ChangeNotifier to manage state and notify listeners of changes.

LANGUAGE: dart
CODE:
class CounterNotifier extends ChangeNotifier {
  int _count = 0;
  int get count => _count;

  void increment() {
    _count++;
    notifyListeners();
  }
}

----------------------------------------

TITLE: Complete Flutter Application Implementation
DESCRIPTION: Full implementation of a Flutter app that demonstrates background JSON parsing with UI components.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<List<Photo>> fetchPhotos(http.Client client) async {
  final response = await client.get(
    Uri.parse('https://jsonplaceholder.typicode.com/photos'),
  );

  // Use the compute function to run parsePhotos in a separate isolate.
  return compute(parsePhotos, response.body);
}

// A function that converts a response body into a List<Photo>.
List<Photo> parsePhotos(String responseBody) {
  final parsed =
      (jsonDecode(responseBody) as List).cast<Map<String, dynamic>>();

  return parsed.map<Photo>((json) => Photo.fromJson(json)).toList();
}

class Photo {
  final int albumId;
  final int id;
  final String title;
  final String url;
  final String thumbnailUrl;

  const Photo({
    required this.albumId,
    required this.id,
    required this.title,
    required this.url,
    required this.thumbnailUrl,
  });

  factory Photo.fromJson(Map<String, dynamic> json) {
    return Photo(
      albumId: json['albumId'] as int,
      id: json['id'] as int,
      title: json['title'] as String,
      url: json['url'] as String,
      thumbnailUrl: json['thumbnailUrl'] as String,
    );
  }
}

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Isolate Demo';

    return const MaterialApp(
      title: appTitle,
      home: MyHomePage(title: appTitle),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late Future<List<Photo>> futurePhotos;

  @override
  void initState() {
    super.initState();
    futurePhotos = fetchPhotos(http.Client());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: FutureBuilder<List<Photo>>(
        future: futurePhotos,
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return const Center(child: Text('An error has occurred!'));
          } else if (snapshot.hasData) {
            return PhotosList(photos: snapshot.data!);
          } else {
            return const Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }
}

class PhotosList extends StatelessWidget {
  const PhotosList({super.key, required this.photos});

  final List<Photo> photos;

  @override
  Widget build(BuildContext context) {
    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
      ),
      itemCount: photos.length,
      itemBuilder: (context, index) {
        return Image.network(photos[index].thumbnailUrl);
      },
    );
  }
}

----------------------------------------

TITLE: Complete Flutter Text Input Example
DESCRIPTION: A full working example demonstrating both TextField and TextFormField implementations within a Flutter application, including proper layout and styling.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Form Styling Demo';
    return MaterialApp(
      title: appTitle,
      home: Scaffold(
        appBar: AppBar(title: const Text(appTitle)),
        body: const MyCustomForm(),
      ),
    );
  }
}

class MyCustomForm extends StatelessWidget {
  const MyCustomForm({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        const Padding(
          padding: EdgeInsets.symmetric(horizontal: 8, vertical: 16),
          child: TextField(
            decoration: InputDecoration(
              border: OutlineInputBorder(),
              hintText: 'Enter a search term',
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 16),
          child: TextFormField(
            decoration: const InputDecoration(
              border: UnderlineInputBorder(),
              labelText: 'Enter your username',
            ),
          ),
        ),
      ],
    );
  }
}

----------------------------------------

TITLE: Creating a ListView with Custom Tiles in Flutter
DESCRIPTION: Shows how to create a ListView with custom tiles for displaying business information.

LANGUAGE: dart
CODE:
Widget _buildList() {
  return ListView(
    children: [
      _tile('CineArts at the Empire', '85 W Portal Ave', Icons.theaters),
      _tile('The Castro Theater', '429 Castro St', Icons.theaters),
      _tile('Alamo Drafthouse Cinema', '2550 Mission St', Icons.theaters),
      _tile('Roxie Theater', '3117 16th St', Icons.theaters),
      _tile(
        'United Artists Stonestown Twin',
        '501 Buckingham Way',
        Icons.theaters,
      ),
      _tile('AMC Metreon 16', '135 4th St #3000', Icons.theaters),
      const Divider(),
      _tile('K\'s Kitchen', '757 Monterey Blvd', Icons.restaurant),
      _tile('Emmy\'s Restaurant', '1923 Ocean Ave', Icons.restaurant),
      _tile('Chaiya Thai Restaurant', '272 Claremont Blvd', Icons.restaurant),
      _tile('La Ciccia', '291 30th St', Icons.restaurant),
    ],
  );
}

ListTile _tile(String title, String subtitle, IconData icon) {
  return ListTile(
    title: Text(
      title,
      style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 20),
    ),
    subtitle: Text(subtitle),
    leading: Icon(icon, color: Colors.blue[500]),
  );
}

----------------------------------------

TITLE: Rendering Basic Animation in Flutter
DESCRIPTION: Demonstrates how to add basic animation to a widget using addListener() and setState(). It animates the Flutter logo to grow from nothing to full size.

LANGUAGE: dart
CODE:
class _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {
  late Animation<double> animation;
  late AnimationController controller;

  @override
  void initState() {
    super.initState();
    controller =
        AnimationController(duration: const Duration(seconds: 2), vsync: this);
    animation = Tween<double>(begin: 0, end: 300).animate(controller)
      ..addListener(() {
        setState(() {
          // The state that has changed here is the animation object's value.
        });
      });
    controller.forward();
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10),
        height: animation.value,
        width: animation.value,
        child: const FlutterLogo(),
      ),
    );
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }
}

----------------------------------------

TITLE: Complete Flutter Widget Test for Todo List App
DESCRIPTION: This comprehensive example demonstrates a complete widget test for a Todo List app in Flutter. It covers adding an item, verifying its presence, swiping to dismiss it, and ensuring it's removed from the list.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('Add and remove a todo', (tester) async {
    // Build the widget.
    await tester.pumpWidget(const TodoList());

    // Enter 'hi' into the TextField.
    await tester.enterText(find.byType(TextField), 'hi');

    // Tap the add button.
    await tester.tap(find.byType(FloatingActionButton));

    // Rebuild the widget with the new item.
    await tester.pump();

    // Expect to find the item on screen.
    expect(find.text('hi'), findsOneWidget);

    // Swipe the item to dismiss it.
    await tester.drag(find.byType(Dismissible), const Offset(500, 0));

    // Build the widget until the dismiss animation ends.
    await tester.pumpAndSettle();

    // Ensure that the item is no longer on screen.
    expect(find.text('hi'), findsNothing);
  });
}

class TodoList extends StatefulWidget {
  const TodoList({super.key});

  @override
  State<TodoList> createState() => _TodoListState();
}

class _TodoListState extends State<TodoList> {
  static const _appTitle = 'Todo List';
  final todos = <String>[];
  final controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: _appTitle,
      home: Scaffold(
        appBar: AppBar(title: const Text(_appTitle)),
        body: Column(
          children: [
            TextField(controller: controller),
            Expanded(
              child: ListView.builder(
                itemCount: todos.length,
                itemBuilder: (context, index) {
                  final todo = todos[index];

                  return Dismissible(
                    key: Key('$todo$index'),
                    onDismissed: (direction) => todos.removeAt(index),
                    background: Container(color: Colors.red),
                    child: ListTile(title: Text(todo)),
                  );
                },
              ),
            ),
          ],
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            setState(() {
              todos.add(controller.text);
              controller.clear();
            });
          },
          child: const Icon(Icons.add),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: User Repository with In-Memory Caching
DESCRIPTION: Implementation of a UserRepository class that demonstrates in-memory caching using the repository pattern, incorporating dependency injection and separation of concerns.

LANGUAGE: dart
CODE:
class UserRepository {
  UserRepository(this.api);
  
  final Api api;
  final Map<int, User?> _userCache = {};

  Future<User?> loadUser(int id) async {
    if (!_userCache.containsKey(id)) {
      final response = await api.get(id);
      if (response.statusCode == 200) {
        _userCache[id] = User.fromJson(response.body);
      } else {
        _userCache[id] = null;
      }
    }
    return _userCache[id];
  }
}

----------------------------------------

TITLE: Implementing ExpandableFab Widget in Flutter
DESCRIPTION: Defines the ExpandableFab widget, which is a stateful widget that manages the expansion and collapse of child action buttons. It includes parameters for initial state, distance of expansion, and child widgets.

LANGUAGE: dart
CODE:
@immutable
class ExpandableFab extends StatefulWidget {
  const ExpandableFab({
    super.key,
    this.initialOpen,
    required this.distance,
    required this.children,
  });

  final bool? initialOpen;
  final double distance;
  final List<Widget> children;

  @override
  State<ExpandableFab> createState() => _ExpandableFabState();
}

class _ExpandableFabState extends State<ExpandableFab> {
  @override
  Widget build(BuildContext context) {
    return const SizedBox();
  }
}

----------------------------------------

TITLE: Creating and Controlling an Animation in Flutter
DESCRIPTION: Illustrates how to create an AnimationController and control the animation by playing it forward or stopping it.

LANGUAGE: Dart
CODE:
final controller = AnimationController(
  duration: const Duration(seconds: 2),
  vsync: this,
);

// Play the animation forward
controller.forward();

// Stop the animation
controller.stop();

----------------------------------------

TITLE: Writing a Flutter Widget Test for Scrolling
DESCRIPTION: This snippet demonstrates how to write a widget test that scrolls through a long list and verifies a specific item's presence. It uses the scrollUntilVisible method from WidgetTester.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:scrolling/main.dart';

void main() {
  testWidgets('finds a deep item in a long list', (tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(
      MyApp(items: List<String>.generate(10000, (i) => 'Item $i')),
    );

    final listFinder = find.byType(Scrollable);
    final itemFinder = find.byKey(const ValueKey('item_50_text'));

    // Scroll until the item to be found appears.
    await tester.scrollUntilVisible(itemFinder, 500.0, scrollable: listFinder);

    // Verify that the item contains the correct text.
    expect(itemFinder, findsOneWidget);
  });
}

----------------------------------------

TITLE: Creating a Stack Layout with Overlaid Text in Flutter
DESCRIPTION: Demonstrates how to create a Stack layout with a CircleAvatar and overlaid text.

LANGUAGE: dart
CODE:
Widget _buildStack() {
  return Stack(
    alignment: const Alignment(0.6, 0.6),
    children: [
      const CircleAvatar(
        backgroundImage: AssetImage('images/pic.jpg'),
        radius: 100,
      ),
      Container(
        decoration: const BoxDecoration(color: Colors.black45),
        child: const Text(
          'Mia B',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ),
    ],
  );
}

----------------------------------------

TITLE: Basic HTTP GET Request in Flutter
DESCRIPTION: Demonstrates how to make a simple HTTP GET request using the http package in Flutter. The code shows fetching data from a REST API endpoint and printing the response body.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;

void main() async {
  var response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
  );
  print(response.body);
}

----------------------------------------

TITLE: Setting up ChangeNotifierProvider in Flutter main function
DESCRIPTION: This code snippet demonstrates how to set up a ChangeNotifierProvider in the main function of a Flutter app, providing an instance of CartModel to the widget tree.

LANGUAGE: dart
CODE:
void main() {
  runApp(
    ChangeNotifierProvider(
      create: (context) => CartModel(),
      child: const MyApp(),
    ),
  );
}

----------------------------------------

TITLE: Implementing StaggerDemo Stateful Widget
DESCRIPTION: Creates a stateful widget that manages the animation controller and handles user interaction to trigger the staggered animation sequence.

LANGUAGE: dart
CODE:
class StaggerDemo extends StatefulWidget {
  @override
  State<StaggerDemo> createState() => _StaggerDemoState();
}

class _StaggerDemoState extends State<StaggerDemo> with TickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();

    _controller = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
  }

  Future<void> _playAnimation() async {
    try {
      await _controller.forward().orCancel;
      await _controller.reverse().orCancel;
    } on TickerCanceled {
      // The animation got canceled, probably because it was disposed of.
    }
  }

  @override
  Widget build(BuildContext context) {
    timeDilation = 10.0; // 1.0 is normal animation speed.
    return Scaffold(
      appBar: AppBar(
        title: const Text('Staggered Animation'),
      ),
      body: GestureDetector(
        behavior: HitTestBehavior.opaque,
        onTap: () {
          _playAnimation();
        },
        child: Center(
          child: Container(
            width: 300,
            height: 300,
            decoration: BoxDecoration(
              color: Colors.black.withValues(alpha: 0.1),
              border: Border.all(
                color: Colors.black.withValues(alpha: 0.5),
              ),
            ),
            child: StaggerAnimation(controller:_controller.view),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Complete TabBar Demo in Flutter
DESCRIPTION: This is a complete example of implementing tabs in Flutter. It creates a TabBarDemo widget with three tabs, each displaying a different transportation icon.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const TabBarDemo());
}

class TabBarDemo extends StatelessWidget {
  const TabBarDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: DefaultTabController(
        length: 3,
        child: Scaffold(
          appBar: AppBar(
            bottom: const TabBar(
              tabs: [
                Tab(icon: Icon(Icons.directions_car)),
                Tab(icon: Icon(Icons.directions_transit)),
                Tab(icon: Icon(Icons.directions_bike)),
              ],
            ),
            title: const Text('Tabs Demo'),
          ),
          body: const TabBarView(
            children: [
              Icon(Icons.directions_car),
              Icon(Icons.directions_transit),
              Icon(Icons.directions_bike),
            ],
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Extracting Arguments in Flutter Widget
DESCRIPTION: Demonstrates how to extract arguments passed to a route using ModalRoute.of() within a StatelessWidget.

LANGUAGE: dart
CODE:
class ExtractArgumentsScreen extends StatelessWidget {
  const ExtractArgumentsScreen({super.key});

  static const routeName = '/extractArguments';

  @override
  Widget build(BuildContext context) {
    final args = ModalRoute.of(context)!.settings.arguments as ScreenArguments;

    return Scaffold(
      appBar: AppBar(title: Text(args.title)),
      body: Center(child: Text(args.message)),
    );
  }
}

----------------------------------------

TITLE: Implementing Custom Localization Class
DESCRIPTION: Create a custom class to manage localized values for your app.

LANGUAGE: dart
CODE:
class DemoLocalizations {
  DemoLocalizations(this.locale);

  final Locale locale;

  static DemoLocalizations of(BuildContext context) {
    return Localizations.of<DemoLocalizations>(context, DemoLocalizations)!;
  }

  static const _localizedValues = <String, Map<String, String>>{
    'en': {'title': 'Hello World'},
    'es': {'title': 'Hola Mundo'},
  };

  static List<String> languages() => _localizedValues.keys.toList();

  String get title {
    return _localizedValues[locale.languageCode]!['title']!;
  }
}

----------------------------------------

TITLE: Navigating to Named Route with Arguments in Flutter
DESCRIPTION: Demonstrates how to navigate to a named route and pass arguments using Navigator.pushNamed().

LANGUAGE: dart
CODE:
ElevatedButton(
  onPressed: () {
    Navigator.pushNamed(
      context,
      ExtractArgumentsScreen.routeName,
      arguments: ScreenArguments(
        'Extract Arguments Screen',
        'This message is extracted in the build method.',
      ),
    );
  },
  child: const Text('Navigate to screen that extracts arguments'),
),

----------------------------------------

TITLE: Updating UI State and Notifying Listeners in Flutter View Model
DESCRIPTION: This snippet demonstrates how to update UI state and notify listeners in a Flutter view model. It shows the implementation of a _load method that updates state and calls notifyListeners().

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  // ...

 Future<Result> _load() async {
    try {
      final userResult = await _userRepository.getUser();
      switch (userResult) {
        case Ok<User>():
          _user = userResult.value;
          _log.fine('Loaded user');
        case Error<User>():
          _log.warning('Failed to load user', userResult.error);
      }

      // ...

      return userResult;
    } finally {
      notifyListeners();
    }
  }
}

----------------------------------------

TITLE: Configuring API Client Service for Remote Data Access in Flutter
DESCRIPTION: Implementation of an API client service class that handles remote data operations through HTTP REST calls for UserProfile data.

LANGUAGE: dart
CODE:
class ApiClientService {
  /// performs GET network request to obtain a UserProfile
  Future<UserProfile> getUserProfile() async {
    // ···
  }

  /// performs PUT network request to update a UserProfile
  Future<void> putUserProfile(UserProfile userProfile) async {
    // ···
  }
}

----------------------------------------

TITLE: Implementing Selection Screen in Flutter
DESCRIPTION: Creates a SelectionScreen widget with two buttons for user selection.

LANGUAGE: dart
CODE:
class SelectionScreen extends StatelessWidget {
  const SelectionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Pick an option')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Padding(
              padding: const EdgeInsets.all(8),
              child: ElevatedButton(
                onPressed: () {
                  // Pop here with "Yep"...
                },
                child: const Text('Yep!'),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8),
              child: ElevatedButton(
                onPressed: () {
                  // Pop here with "Nope"...
                },
                child: const Text('Nope.'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing BubbleBackground Widget in Flutter
DESCRIPTION: This code snippet shows the implementation of the BubbleBackground widget, which uses a CustomPainter to draw gradient chat bubbles. It takes colors as input and applies them based on whether the message is from the current user or not.

LANGUAGE: dart
CODE:
BubbleBackground(
  // The colors of the gradient, which are different
  // depending on which user sent this message.
  colors:
      message.isMine
          ? const [Color(0xFF6C7689), Color(0xFF3A364B)]
          : const [Color(0xFF19B7FF), Color(0xFF491CCB)],
  // The content within the bubble.
  child: DefaultTextStyle.merge(
    style: const TextStyle(fontSize: 18.0, color: Colors.white),
    child: Padding(
      padding: const EdgeInsets.all(12),
      child: Text(message.text),
    ),
  ),
);

----------------------------------------

TITLE: Using a Tween with an Animation in Flutter
DESCRIPTION: Demonstrates how to use a Tween to interpolate between two values and combine it with an Animation to get concrete values for each frame.

LANGUAGE: Dart
CODE:
final tween = Tween<double>(begin: 0, end: 100);

// Evaluate the tween at the current value of the animation
final currentValue = tween.evaluate(animation);

// Create a new Animation that incorporates the tween
final tweenAnimation = tween.animate(controller);

----------------------------------------

TITLE: Reading Data from File in Flutter
DESCRIPTION: This function reads the counter value from a file and parses it as an integer. It includes error handling to return 0 if the file reading or parsing fails.

LANGUAGE: dart
CODE:
Future<int> readCounter() async {
  try {
    final file = await _localFile;

    // Read the file
    final contents = await file.readAsString();

    return int.parse(contents);
  } catch (e) {
    // If encountering an error, return 0
    return 0;
  }
}

----------------------------------------

TITLE: Setting Up Mockito for HTTP Client in Dart Tests
DESCRIPTION: Create a test file with Mockito annotations to generate a mock HTTP client for testing.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;
import 'package:mocking/main.dart';
import 'package:mockito/annotations.dart';

// Generate a MockClient using the Mockito package.
// Create new instances of this class in each test.
@GenerateMocks([http.Client])
void main() {
}

----------------------------------------

TITLE: Overriding Theme with Unique ThemeData in Flutter
DESCRIPTION: This example demonstrates how to override the overall theme for a specific widget by creating a unique ThemeData instance.

LANGUAGE: dart
CODE:
Theme(
  // Create a unique theme with `ThemeData`.
  data: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink)),
  child: FloatingActionButton(onPressed: () {}, child: const Icon(Icons.add)),
);

----------------------------------------

TITLE: Evenly Spacing Widgets in a Row in Flutter
DESCRIPTION: Shows how to evenly distribute space between widgets in a Row using mainAxisAlignment in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: [
      BorderedImage(),
      BorderedImage(),
      BorderedImage(),
    ],
  );
}

----------------------------------------

TITLE: Creating Basic Flutter ListView
DESCRIPTION: Demonstrates how to create a simple ListView widget with ListTile components. Each ListTile contains an icon and text, showing a basic list structure.

LANGUAGE: dart
CODE:
ListView(
  children: const <Widget>[
    ListTile(leading: Icon(Icons.map), title: Text('Map')),
    ListTile(leading: Icon(Icons.photo_album), title: Text('Album')),
    ListTile(leading: Icon(Icons.phone), title: Text('Phone')),
  ],
),

----------------------------------------

TITLE: Setting Up SQLite Dependencies
DESCRIPTION: Import required packages sqflite and path to work with SQLite databases in Flutter.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:flutter/widgets.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';

----------------------------------------

TITLE: Making a Network Request in Dart
DESCRIPTION: Function to fetch an album from a JSON placeholder API using the http.get() method.

LANGUAGE: dart
CODE:
Future<http.Response> fetchAlbum() {
  return http.get(Uri.parse('https://jsonplaceholder.typicode.com/albums/1'));
}

----------------------------------------

TITLE: Creating a Column with Evenly Spaced Images in Flutter
DESCRIPTION: Shows how to create a Column widget with evenly spaced images using mainAxisAlignment property.

LANGUAGE: dart
CODE:
Column(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    Image.asset('images/pic1.jpg'),
    Image.asset('images/pic2.jpg'),
    Image.asset('images/pic3.jpg'),
  ],
);

----------------------------------------

TITLE: Implementing Result Class for Error Handling
DESCRIPTION: Definition of a Result class that provides a type-safe way to handle both success and error cases using sealed classes.

LANGUAGE: dart
CODE:
sealed class Result<T> {
  const Result();

  /// Creates an instance of Result containing a value
  factory Result.ok(T value) => Ok(value);

  /// Create an instance of Result containing an error
  factory Result.error(Exception error) => Error(error);
}

final class Ok<T> extends Result<T> {
  const Ok(this.value);

  /// Returned value in result
  final T value;
}

final class Error<T> extends Result<T> {
  const Error(this.error);

  /// Returned error in result
  final Exception error;
}

----------------------------------------

TITLE: Basic TextField Implementation in Flutter
DESCRIPTION: Demonstrates how to create a basic TextField with an outline border and hint text using InputDecoration.

LANGUAGE: dart
CODE:
TextField(
  decoration: InputDecoration(
    border: OutlineInputBorder(),
    hintText: 'Enter a search term',
  ),
),

----------------------------------------

TITLE: Connecting to WebSocket Server in Dart
DESCRIPTION: Establishes a connection to a WebSocket server using the web_socket_channel package. It creates a WebSocketChannel object for bi-directional communication.

LANGUAGE: dart
CODE:
final channel = WebSocketChannel.connect(
  Uri.parse('wss://echo.websocket.events'),
);

----------------------------------------

TITLE: Managing state in Flutter with StatefulWidget
DESCRIPTION: Shows how to create a stateful widget to manage a counter that can be incremented.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class Counter extends StatefulWidget {
  const Counter({super.key});

  @override
  State<Counter> createState() => _CounterState();
}

class _CounterState extends State<Counter> {
  int _counter = 0;

  void _increment() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        ElevatedButton(onPressed: _increment, child: const Text('Increment')),
        const SizedBox(width: 16),
        Text('Count: $_counter'),
      ],
    );
  }
}

void main() {
  runApp(const MaterialApp(home: Scaffold(body: Center(child: Counter()))));
}

----------------------------------------

TITLE: Fetching Photos from API
DESCRIPTION: Function to fetch photos from JSONPlaceholder API using HTTP client.

LANGUAGE: dart
CODE:
Future<http.Response> fetchPhotos(http.Client client) async {
  return client.get(Uri.parse('https://jsonplaceholder.typicode.com/photos'));
}

----------------------------------------

TITLE: Basic Flutter App Structure
DESCRIPTION: Demonstrates the basic structure of a Flutter application with a material design scaffold, app bar, and centered content

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: const Text('My Home Page')),
        body: Center(
          child: Builder(
            builder: (context) {
              return Column(
                children: [
                  const Text('Hello World'),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      print('Click!');
                    },
                    child: const Text('A button'),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Extending Parent Theme in Flutter
DESCRIPTION: This snippet shows how to extend the parent theme using the copyWith() method, allowing for partial theme overrides.

LANGUAGE: dart
CODE:
Theme(
  // Find and extend the parent theme using `copyWith`.
  // To learn more, check out the section on `Theme.of`.
  data: Theme.of(
    context,
  ).copyWith(colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink)),
  child: const FloatingActionButton(onPressed: null, child: Icon(Icons.add)),
);

----------------------------------------

TITLE: Creating Basic GridView with Dynamic Content in Flutter
DESCRIPTION: Demonstrates how to create a basic grid view with 2 columns using GridView.count(). The example generates 100 text widgets displaying their index in the grid.

LANGUAGE: dart
CODE:
GridView.count(
  // Create a grid with 2 columns.
  // If you change the scrollDirection to horizontal,
  // this produces 2 rows.
  crossAxisCount: 2,
  // Generate 100 widgets that display their index in the list.
  children: List.generate(100, (index) {
    return Center(
      child: Text(
        'Item $index',
        style: TextTheme.of(context).headlineSmall,
      ),
    );
  }),
)

----------------------------------------

TITLE: Implementing Form Submission in Flutter
DESCRIPTION: Demonstrates how to create a submit button that validates the form and shows a success message using SnackBar when validation passes.

LANGUAGE: dart
CODE:
ElevatedButton(
  onPressed: () {
    // Validate returns true if the form is valid, or false otherwise.
    if (_formKey.currentState!.validate()) {
      // If the form is valid, display a snackbar. In the real world,
      // you'd often call a server or save the information in a database.
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Processing Data')),
      );
    }
  },
  child: const Text('Submit'),
),

----------------------------------------

TITLE: Implementing Title Section Widget
DESCRIPTION: Creates a widget for the title section containing location name, location text and star icon with rating.

LANGUAGE: dart
CODE:
class TitleSection extends StatelessWidget {
  const TitleSection({super.key, required this.name, required this.location});

  final String name;
  final String location;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(32),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.only(bottom: 8),
                  child: Text(
                    name,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
                Text(location, style: TextStyle(color: Colors.grey[500])),
              ],
            ),
          ),
          Icon(Icons.star, color: Colors.red[500]),
          const Text('41'),
        ],
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing LLM Communication in Dart
DESCRIPTION: Complete implementation of LLM communication methods including stream generation and message sending with history management

LANGUAGE: dart
CODE:
class GeminiProvider extends LlmProvider with ChangeNotifier {
  ...

  @override
  Stream<String> generateStream(
    String prompt, {
    Iterable<Attachment> attachments = const [],
  }) =>
      _generateStream(
        prompt: prompt,
        attachments: attachments,
        contentStreamGenerator: (c) => _model.generateContentStream([c]),
      );

  @override
  Stream<String> sendMessageStream(
    String prompt, {
    Iterable<Attachment> attachments = const [],
  }) async* {
    final userMessage = ChatMessage.user(prompt, attachments);
    final llmMessage = ChatMessage.llm();
    _history.addAll([userMessage, llmMessage]);

    final response = _generateStream(
      prompt: prompt,
      attachments: attachments,
      contentStreamGenerator: _chat!.sendMessageStream,
    );

    yield* response.map((chunk) {
      llmMessage.append(chunk);
      return chunk;
    });

    notifyListeners();
  }

  Stream<String> _generateStream({
    required String prompt,
    required Iterable<Attachment> attachments,
    required Stream<GenerateContentResponse> Function(Content)
        contentStreamGenerator,
  }) async* {
    final content = Content('user', [
      TextPart(prompt),
      ...attachments.map(_partFrom),
    ]);

    final response = contentStreamGenerator(content);
    yield* response
        .map((chunk) => chunk.text)
        .where((text) => text != null)
        .cast<String>();
  }

  @override
  Iterable<ChatMessage> get history => _history;

  @override
  set history(Iterable<ChatMessage> history) {
    _history.clear();
    _history.addAll(history);
    _chat = _startChat(history);
    notifyListeners();
  }
}

----------------------------------------

TITLE: Configuring Router with Dependency Injection in Flutter
DESCRIPTION: Demonstrates how to configure a GoRouter with dependency injection, creating view models and injecting repositories as needed for each route.

LANGUAGE: dart
CODE:
GoRouter router(
  AuthRepository authRepository,
) =>
    GoRouter(
      initialLocation: Routes.home,
      debugLogDiagnostics: true,
      redirect: _redirect,
      refreshListenable: authRepository,
      routes: [
        GoRoute(
          path: Routes.login,
          builder: (context, state) {
            return LoginScreen(
              viewModel: LoginViewModel(
                authRepository: context.read(),
              ),
            );
          },
        ),
        GoRoute(
          path: Routes.home,
          builder: (context, state) {
            final viewModel = HomeViewModel(
              bookingRepository: context.read(),
            );
            return HomeScreen(viewModel: viewModel);
          },
          routes: [
            // ...
          ],
        ),
      ],
    );

----------------------------------------

TITLE: Hero Animation Route Implementation in Flutter
DESCRIPTION: Main implementation of hero animation that creates source and destination routes. Uses MaterialPageRoute for navigation and handles the hero transition between screens.

LANGUAGE: dart
CODE:
class HeroAnimation extends StatelessWidget {
  const HeroAnimation({super.key});

  Widget build(BuildContext context) {
    timeDilation = 5.0;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Basic Hero Animation'),
      ),
      body: Center(
        child: PhotoHero(
          photo: 'images/flippers-alpha.png',
          width: 300.0,
          onTap: () {
            Navigator.of(context).push(MaterialPageRoute<void>(
              builder: (context) {
                return Scaffold(
                  appBar: AppBar(
                    title: const Text('Flippers Page'),
                  ),
                  body: Container(
                    color: Colors.lightBlueAccent,
                    padding: const EdgeInsets.all(16),
                    alignment: Alignment.topLeft,
                    child: PhotoHero(
                      photo: 'images/flippers-alpha.png',
                      width: 100.0,
                      onTap: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ),
                );
              }
            ));
          },
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Complete Flutter Long List Implementation
DESCRIPTION: Full implementation of a Flutter application demonstrating long list handling with ListView.builder, including the main app structure and list rendering logic

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MyApp(
      items: List<String>.generate(10000, (i) => 'Item $i'),
    ),
  );
}

class MyApp extends StatelessWidget {
  final List<String> items;

  const MyApp({super.key, required this.items});

  @override
  Widget build(BuildContext context) {
    const title = 'Long List';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: ListView.builder(
          itemCount: items.length,
          prototypeItem: ListTile(title: Text(items.first)),
          itemBuilder: (context, index) {
            return ListTile(title: Text(items[index]));
          },
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Exposing UI State in a Flutter View Model
DESCRIPTION: This code demonstrates how to expose UI state in a Flutter view model. It shows the use of private and public properties, as well as the use of UnmodifiableListView for immutability.

LANGUAGE: dart
CODE:
class HomeViewModel {
  HomeViewModel({
   required BookingRepository bookingRepository,
   required UserRepository userRepository,
  }) : _bookingRepository = bookingRepository,
      _userRepository = userRepository;
 
  final BookingRepository _bookingRepository;
  final UserRepository _userRepository;

  User? _user;
  User? get user => _user;

  List<BookingSummary> _bookings = [];
 
  /// Items in an [UnmodifiableListView] can't be directly modified,
  /// but changes in the source list can be modified. Since _bookings
  /// is private and bookings is not, the view has no way to modify the
  /// list directly.
  UnmodifiableListView<BookingSummary> get bookings => UnmodifiableListView(_bookings);

  // ...
}

----------------------------------------

TITLE: Programmatic Focus Control with FloatingActionButton
DESCRIPTION: Implements a FloatingActionButton that triggers focus on a specific TextField using the requestFocus() method of FocusNode.

LANGUAGE: dart
CODE:
FloatingActionButton(
  // When the button is pressed,
  // give focus to the text field using myFocusNode.
  onPressed: () => myFocusNode.requestFocus(),
),

----------------------------------------

TITLE: Specifying Assets in pubspec.yaml
DESCRIPTION: Demonstrates how to declare assets in the pubspec.yaml file for Flutter to include them in the app bundle.

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - assets/my_icon.png
    - assets/background.png

----------------------------------------

TITLE: Implementing ListView.builder in Flutter
DESCRIPTION: Creates a scrollable list view that builds its items on demand using ListView.builder. Includes itemCount for total items, prototypeItem for optimization, and itemBuilder for rendering each list item.

LANGUAGE: dart
CODE:
ListView.builder(
  itemCount: items.length,
  prototypeItem: ListTile(title: Text(items.first)),
  itemBuilder: (context, index) {
    return ListTile(title: Text(items[index]));
  },
)

----------------------------------------

TITLE: Complete Flutter Application with Delete Functionality
DESCRIPTION: Full implementation of a Flutter application demonstrating HTTP delete operations with UI integration.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Album> fetchAlbum() async {
  final response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
  );

  if (response.statusCode == 200) {
    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    throw Exception('Failed to load album');
  }
}

Future<Album> deleteAlbum(String id) async {
  final http.Response response = await http.delete(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
  );

  if (response.statusCode == 200) {
    return Album.empty();
  } else {
    throw Exception('Failed to delete album.');
  }
}

class Album {
  int? id;
  String? title;

  Album({this.id, this.title});

  Album.empty();

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'id': int id, 'title': String title} => Album(id: id, title: title),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() {
    return _MyAppState();
  }
}

class _MyAppState extends State<MyApp> {
  late Future<Album> _futureAlbum;

  @override
  void initState() {
    super.initState();
    _futureAlbum = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Delete Data Example',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Scaffold(
        appBar: AppBar(title: const Text('Delete Data Example')),
        body: Center(
          child: FutureBuilder<Album>(
            future: _futureAlbum,
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.done) {
                if (snapshot.hasData) {
                  return Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      Text(snapshot.data?.title ?? 'Deleted'),
                      ElevatedButton(
                        child: const Text('Delete Data'),
                        onPressed: () {
                          setState(() {
                            _futureAlbum = deleteAlbum(
                              snapshot.data!.id.toString(),
                            );
                          });
                        },
                      ),
                    ],
                  );
                } else if (snapshot.hasError) {
                  return Text('${snapshot.error}');
                }
              }
              return const CircularProgressIndicator();
            },
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Basic Container Layout Example
DESCRIPTION: Demonstrates how a Container fills the available space when given different constraints by its parent widget.

LANGUAGE: dart
CODE:
Container(color: red)

----------------------------------------

TITLE: Defining Download Button States
DESCRIPTION: Implements the download status enum and adds state-related properties to the button widget.

LANGUAGE: dart
CODE:
enum DownloadStatus { notDownloaded, fetchingDownload, downloading, downloaded }

@immutable
class DownloadButton extends StatelessWidget {
  const DownloadButton({
    super.key,
    required this.status,
    this.transitionDuration = const Duration(milliseconds: 500),
  });

  final DownloadStatus status;
  final Duration transitionDuration;

  @override
  Widget build(BuildContext context) {
    return const SizedBox();
  }
}

----------------------------------------

TITLE: Implementing ListView Builder in Flutter
DESCRIPTION: Creates a ListView.builder to display the list of todos with titles

LANGUAGE: dart
CODE:
ListView.builder(
  itemCount: todos.length,
  itemBuilder: (context, index) {
    return ListTile(title: Text(todos[index].title));
  },
)

----------------------------------------

TITLE: Implementing StaggerAnimation Stateless Widget
DESCRIPTION: Defines a stateless widget that manages multiple animations using AnimatedBuilder, including opacity, width, height, padding, borderRadius, and color animations.

LANGUAGE: dart
CODE:
class StaggerAnimation extends StatelessWidget {
  StaggerAnimation({super.key, required this.controller}) :
    opacity = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(
      CurvedAnimation(
        parent: controller,
        curve: const Interval(
          0.0,
          0.100,
          curve: Curves.ease,
        ),
      ),
    ),

  final AnimationController controller;
  final Animation<double> opacity;
  final Animation<double> width;
  final Animation<double> height;
  final Animation<EdgeInsets> padding;
  final Animation<BorderRadius?> borderRadius;
  final Animation<Color?> color;

  Widget _buildAnimation(BuildContext context, Widget? child) {
    return Container(
      padding: padding.value,
      alignment: Alignment.bottomCenter,
      child: Opacity(
        opacity: opacity.value,
        child: Container(
          width: width.value,
          height: height.value,
          decoration: BoxDecoration(
            color: color.value,
            border: Border.all(
              color: Colors.indigo[300]!,
              width: 3,
            ),
            borderRadius: borderRadius.value,
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      builder: _buildAnimation,
      animation: controller,
    );
  }
}

----------------------------------------

TITLE: Connecting TextEditingController to TextField
DESCRIPTION: Shows how to wire up a TextEditingController to a TextField widget using the controller property.

LANGUAGE: dart
CODE:
return TextField(controller: myController);

----------------------------------------

TITLE: Using onChanged Callback for TextField in Flutter
DESCRIPTION: This snippet shows how to use the onChanged callback to detect changes in a TextField. It prints the current text and its length to the console whenever the text changes.

LANGUAGE: dart
CODE:
TextField(
  onChanged: (text) {
    print('First text field: $text (${text.characters.length})');
  },
),

----------------------------------------

TITLE: Implementing OrientationBuilder for Responsive Grid Layout
DESCRIPTION: Shows how to use OrientationBuilder to dynamically adjust GridView columns based on device orientation.

LANGUAGE: dart
CODE:
body: OrientationBuilder(
  builder: (context, orientation) {
    return GridView.count(
      // Create a grid with 2 columns in portrait mode,
      // or 3 columns in landscape mode.
      crossAxisCount: orientation == Orientation.portrait ? 2 : 3,
    );
  },
),

----------------------------------------

TITLE: Creating First and Second Routes in Flutter (Cupertino Design)
DESCRIPTION: Defines two StatelessWidget classes, FirstRoute and SecondRoute, each representing a screen in the app using Cupertino design. Both routes contain a button for navigation.

LANGUAGE: dart
CODE:
class FirstRoute extends StatelessWidget {
  const FirstRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: const CupertinoNavigationBar(middle: Text('First Route')),
      child: Center(
        child: CupertinoButton(
          child: const Text('Open route'),
          onPressed: () {
            // Navigate to second route when tapped.
          },
        ),
      ),
    );
  }
}

class SecondRoute extends StatelessWidget {
  const SecondRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: const CupertinoNavigationBar(middle: Text('Second Route')),
      child: Center(
        child: CupertinoButton(
          onPressed: () {
            // Navigate back to first route when tapped.
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing ThemeSwitchViewModel in Flutter
DESCRIPTION: This snippet demonstrates the ThemeSwitchViewModel class, which manages the state and logic for the theme switching functionality. It interacts with the ThemeRepository to load and save the dark mode setting.

LANGUAGE: dart
CODE:
class ThemeSwitchViewModel extends ChangeNotifier {
  ThemeSwitchViewModel(this._themeRepository) {
    load = Command0(_load)..execute();
    toggle = Command0(_toggle);
  }

  final ThemeRepository _themeRepository;

  bool _isDarkMode = false;

  /// If true show dark mode
  bool get isDarkMode => _isDarkMode;

  late Command0 load;

  late Command0 toggle;

  /// Load the current theme setting from the repository
  Future<Result<void>> _load() async {
    try {
      final result = await _themeRepository.isDarkMode();
      if (result is Ok<bool>) {
        _isDarkMode = result.value;
      }
      return result;
    } on Exception catch (e) {
      return Result.error(e);
    } finally {
      notifyListeners();
    }
  }

  /// Toggle the theme setting
  Future<Result<void>> _toggle() async {
    try {
      _isDarkMode = !_isDarkMode;
      return await _themeRepository.setDarkMode(_isDarkMode);
    } on Exception catch (e) {
      return Result.error(e);
    } finally {
      notifyListeners();
    }
  }
}

----------------------------------------

TITLE: Displaying UI Data in a Flutter View
DESCRIPTION: This snippet demonstrates how to access and display UI data from a view model in a Flutter view. It shows the use of ListenableBuilder to rebuild the widget when the view model changes.

LANGUAGE: dart
CODE:
@override
  Widget build(BuildContext context) {
    return Scaffold(
      // Some code was removed for brevity.
      body: SafeArea(
        child: ListenableBuilder(
          listenable: viewModel,
          builder: (context, _) {
            return CustomScrollView(
              slivers: [
                SliverToBoxAdapter(...),
                SliverList.builder(
                   itemCount: viewModel.bookings.length,
                    itemBuilder: (_, index) => _Booking(
                      key: ValueKey(viewModel.bookings[index].id),
                      booking:viewModel.bookings[index],
                      onTap: () => context.push(Routes.bookingWithId(
                         viewModel.bookings[index].id)),
                      onDismissed: (_) => viewModel.deleteBooking.execute(
                           viewModel.bookings[index].id,
                         ),
                    ),
                ),
              ],
            );
          },
        ),
      ),


----------------------------------------

TITLE: Using Commands in a Flutter View Model
DESCRIPTION: This code demonstrates how to use Command objects in a Flutter view model. It shows the initialization of commands in the constructor and the implementation of methods that the commands will execute.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  HomeViewModel({
   required BookingRepository bookingRepository,
   required UserRepository userRepository,
  }) : _bookingRepository = bookingRepository,
      _userRepository = userRepository {
    // Load required data when this screen is built.
    load = Command0(_load)..execute();
    deleteBooking = Command1(_deleteBooking);
  }

  final BookingRepository _bookingRepository;
  final UserRepository _userRepository;

  late Command0 load;
  late Command1<void, int> deleteBooking;

  User? _user;
  User? get user => _user;

  List<BookingSummary> _bookings = [];
  List<BookingSummary> get bookings => _bookings;

  Future<Result> _load() async {
    // ...
  }

  Future<Result<void>> _deleteBooking(int id) async {
    // ...
  }

  // ...
}

----------------------------------------

TITLE: Font Configuration in pubspec.yaml
DESCRIPTION: YAML configuration for declaring custom fonts in Flutter project

LANGUAGE: yaml
CODE:
  fonts:
    - family: Raleway
      fonts:
        - asset: fonts/Raleway-Regular.ttf
        - asset: fonts/Raleway-Italic.ttf
          style: italic
    - family: RobotoMono
      fonts:
        - asset: fonts/RobotoMono-Regular.ttf
        - asset: fonts/RobotoMono-Bold.ttf
          weight: 700

----------------------------------------

TITLE: Creating Todos Screen Widget in Flutter
DESCRIPTION: Implements a StatelessWidget that displays a list of todos in a scaffold with an app bar

LANGUAGE: dart
CODE:
class TodosScreen extends StatelessWidget {
  // Requiring the list of todos.
  const TodosScreen({super.key, required this.todos});

  final List<Todo> todos;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Todos')),
      //passing in the ListView.builder
      body: ListView.builder(
        itemCount: todos.length,
        itemBuilder: (context, index) {
          return ListTile(title: Text(todos[index].title));
        },
      ),
    );
  }
}

----------------------------------------

TITLE: Complete Flutter Orientation-Responsive App Example
DESCRIPTION: Full implementation of a Flutter app that demonstrates orientation-responsive UI with a grid layout that adapts between portrait and landscape modes.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Orientation Demo';

    return const MaterialApp(
      title: appTitle,
      home: OrientationList(title: appTitle),
    );
  }
}

class OrientationList extends StatelessWidget {
  final String title;

  const OrientationList({super.key, required this.title});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: OrientationBuilder(
        builder: (context, orientation) {
          return GridView.count(
            // Create a grid with 2 columns in portrait mode, or
            // 3 columns in landscape mode.
            crossAxisCount: orientation == Orientation.portrait ? 2 : 3,
            // Generate 100 widgets that display their index in the list.
            children: List.generate(100, (index) {
              return Center(
                child: Text(
                  'Item $index',
                  style: TextTheme.of(context).displayLarge,
                ),
              );
            }),
          );
        },
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing Remote Booking Repository in Flutter
DESCRIPTION: A repository class that manages booking-related data, implementing the BookingRepository interface. Shows basic structure with dependency injection of ApiClient service.

LANGUAGE: dart
CODE:
class BookingRepositoryRemote implements BookingRepository {
  BookingRepositoryRemote({
    required ApiClient apiClient,
  }) : _apiClient = apiClient;

  final ApiClient _apiClient;
  List<Destination>? _cachedDestinations;

  Future<Result<void>> createBooking(Booking booking) async {...}
  Future<Result<Booking>> getBooking(int id) async {...}
  Future<Result<List<BookingSummary>>> getBookingsList() async {...}
  Future<Result<void>> delete(int id) async {...}
}

----------------------------------------

TITLE: Implementing PhotoHero Widget in Flutter
DESCRIPTION: A custom widget that encapsulates hero animation functionality, handling the widget's size, image display, and tap behavior. It builds a widget tree containing SizedBox, Hero, Material, InkWell and Image widgets.

LANGUAGE: dart
CODE:
class PhotoHero extends StatelessWidget {
  const PhotoHero({
    super.key,
    required this.photo,
    this.onTap,
    required this.width,
  });

  final String photo;
  final VoidCallback? onTap;
  final double width;

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: width,
      child: Hero(
        tag: photo,
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            onTap: onTap,
            child: Image.asset(
              photo,
              fit: BoxFit.contain,
            ),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing a TextField with Controller in Flutter
DESCRIPTION: Demonstrates how to create a TextField widget with a TextEditingController and custom decoration.

LANGUAGE: dart
CODE:
final TextEditingController _controller = TextEditingController();

@override
Widget build(BuildContext context) {
  return TextField(
    controller: _controller,
    decoration: const InputDecoration(
      border: OutlineInputBorder(),
      labelText: 'Mascot Name',
    ),
  );
}

----------------------------------------

TITLE: Setting Up TextEditingController Listener in Flutter
DESCRIPTION: This snippet demonstrates how to set up a listener for a TextEditingController in the initState method of a StatefulWidget.

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();

  // Start listening to changes.
  myController.addListener(_printLatestValue);
}

----------------------------------------

TITLE: Accessing CartModel without rebuilding using Provider.of in Flutter
DESCRIPTION: This snippet demonstrates how to access the CartModel using Provider.of with listen set to false, allowing access to the model without causing a rebuild when it changes.

LANGUAGE: dart
CODE:
Provider.of<CartModel>(context, listen: false).removeAll();

----------------------------------------

TITLE: Complete Flutter Navigation Example with Arguments
DESCRIPTION: A comprehensive example demonstrating named route navigation with arguments in Flutter, including argument definition, extraction, and different navigation methods.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      routes: {
        ExtractArgumentsScreen.routeName:
            (context) => const ExtractArgumentsScreen(),
      },
      onGenerateRoute: (settings) {
        if (settings.name == PassArgumentsScreen.routeName) {
          final args = settings.arguments as ScreenArguments;
          return MaterialPageRoute(
            builder: (context) {
              return PassArgumentsScreen(
                title: args.title,
                message: args.message,
              );
            },
          );
        }
        assert(false, 'Need to implement ${settings.name}');
        return null;
      },
      title: 'Navigation with Arguments',
      home: const HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Home Screen')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(
                  context,
                  ExtractArgumentsScreen.routeName,
                  arguments: ScreenArguments(
                    'Extract Arguments Screen',
                    'This message is extracted in the build method.',
                  ),
                );
              },
              child: const Text('Navigate to screen that extracts arguments'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamed(
                  context,
                  PassArgumentsScreen.routeName,
                  arguments: ScreenArguments(
                    'Accept Arguments Screen',
                    'This message is extracted in the onGenerateRoute '
                        'function.',
                  ),
                );
              },
              child: const Text('Navigate to a named that accepts arguments'),
            ),
          ],
        ),
      ),
    );
  }
}

class ExtractArgumentsScreen extends StatelessWidget {
  const ExtractArgumentsScreen({super.key});

  static const routeName = '/extractArguments';

  @override
  Widget build(BuildContext context) {
    final args = ModalRoute.of(context)!.settings.arguments as ScreenArguments;

    return Scaffold(
      appBar: AppBar(title: Text(args.title)),
      body: Center(child: Text(args.message)),
    );
  }
}

class PassArgumentsScreen extends StatelessWidget {
  static const routeName = '/passArguments';

  final String title;
  final String message;

  const PassArgumentsScreen({
    super.key,
    required this.title,
    required this.message,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: Center(child: Text(message)),
    );
  }
}

class ScreenArguments {
  final String title;
  final String message;

  ScreenArguments(this.title, this.message);
}

----------------------------------------

TITLE: Fetching and Parsing JSON Data with Dart
DESCRIPTION: This snippet demonstrates a Dart program that fetches data from dart.dev, decodes JSON, and prints it to the console. It showcases class declaration, async programming, HTTP requests, and JSON parsing.

LANGUAGE: dart
CODE:
import 'dart:convert';
import 'package:http/http.dart' as http;

class Package {
  final String name;
  final String latestVersion; 
  final String? description;

  Package(this.name, this.latestVersion, {this.description});

  @override
  String toString() {
    return 'Package{name: $name, latestVersion: $latestVersion, description: $description}';
  }
}

void main() async {
  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');
  final httpPackageResponse = await http.get(httpPackageUrl);
  if (httpPackageResponse.statusCode != 200) {
    print('Failed to retrieve the http package!');
    return;
  }
  final json = jsonDecode(httpPackageResponse.body);
  final package = Package(
    json['name'],
    json['latestVersion'],
    description: json['description'],
  );
  print(package);
}

----------------------------------------

TITLE: Launching FlutterActivity in Kotlin (Jetpack Compose)
DESCRIPTION: Example of how to launch a FlutterActivity from a Jetpack Compose button click event. This demonstrates integrating Flutter screens into a Compose-based Android app.

LANGUAGE: kotlin
CODE:
MyButton(onClick = {
    startActivity(
        FlutterActivity.createDefaultIntent(this)
    )
})

@Composable
fun MyButton(onClick: () -> Unit) {
    Button(onClick = onClick) {
        Text("Launch Flutter!")
    }
}

----------------------------------------

TITLE: Navigating to a New Screen Using Navigator in Flutter
DESCRIPTION: This snippet demonstrates how to navigate to a new screen using the Navigator's push() method with a MaterialPageRoute. It shows the basic approach for screen navigation in Flutter applications.

LANGUAGE: dart
CODE:
child: const Text('Open second screen'),
onPressed: () {
  Navigator.of(context).push(
    MaterialPageRoute(builder: (context) => const SecondScreen()),
  );
},

----------------------------------------

TITLE: Implementing Full-Screen Gradient for Chat Bubbles in Flutter
DESCRIPTION: This snippet shows the complete implementation of the BubblePainter class. It calculates the position of the bubble, configures a shader with the given colors, and uses a matrix translation to offset the shader based on the bubble's position within the Scrollable.

LANGUAGE: dart
CODE:
class BubblePainter extends CustomPainter {
  BubblePainter({
    required ScrollableState scrollable,
    required BuildContext bubbleContext,
    required List<Color> colors,
  }) : _scrollable = scrollable,
       _bubbleContext = bubbleContext,
       _colors = colors;

  final ScrollableState _scrollable;
  final BuildContext _bubbleContext;
  final List<Color> _colors;

  @override
  bool shouldRepaint(BubblePainter oldDelegate) {
    return oldDelegate._scrollable != _scrollable ||
        oldDelegate._bubbleContext != _bubbleContext ||
        oldDelegate._colors != _colors;
  }

  @override
  void paint(Canvas canvas, Size size) {
    final scrollableBox = _scrollable.context.findRenderObject() as RenderBox;
    final scrollableRect = Offset.zero & scrollableBox.size;
    final bubbleBox = _bubbleContext.findRenderObject() as RenderBox;

    final origin = bubbleBox.localToGlobal(
      Offset.zero,
      ancestor: scrollableBox,
    );
    final paint =
        Paint()
          ..shader = ui.Gradient.linear(
            scrollableRect.topCenter,
            scrollableRect.bottomCenter,
            _colors,
            [0.0, 1.0],
            TileMode.clamp,
            Matrix4.translationValues(-origin.dx, -origin.dy, 0.0).storage,
          );
    canvas.drawRect(Offset.zero & size, paint);
  }
}

----------------------------------------

TITLE: Complete Flutter App with Spaced Items List
DESCRIPTION: This snippet provides a complete Flutter application that demonstrates a list of evenly spaced items that can be scrolled when they don't fit the screen. It includes a customizable number of items and uses Material Design theming.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const SpacedItemsList());

class SpacedItemsList extends StatelessWidget {
  const SpacedItemsList({super.key});

  @override
  Widget build(BuildContext context) {
    const items = 4;

    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        cardTheme: CardThemeData(color: Colors.blue.shade50),
      ),
      home: Scaffold(
        body: LayoutBuilder(
          builder: (context, constraints) {
            return SingleChildScrollView(
              child: ConstrainedBox(
                constraints: BoxConstraints(minHeight: constraints.maxHeight),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: List.generate(
                    items,
                    (index) => ItemWidget(text: 'Item $index'),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

class ItemWidget extends StatelessWidget {
  const ItemWidget({super.key, required this.text});

  final String text;

  @override
  Widget build(BuildContext context) {
    return Card(child: SizedBox(height: 100, child: Center(child: Text(text))));
  }
}

----------------------------------------

TITLE: Accessing Flutter Assets in Android
DESCRIPTION: Demonstrates how to access Flutter assets in Android platform code using AssetManager.

LANGUAGE: java
CODE:
AssetManager assetManager = registrar.context().getAssets();
String key = registrar.lookupKeyForAsset("icons/heart.png");
AssetFileDescriptor fd = assetManager.openFd(key);

----------------------------------------

TITLE: Implementing Exit Confirmation Dialog in Flutter
DESCRIPTION: Shows how to create a confirmation dialog when the user attempts to exit the setup flow, ensuring they don't accidentally lose progress.

LANGUAGE: dart
CODE:
Future<bool> _isExitDesired() async {
  return await showDialog<bool>(
        context: context,
        builder: (context) {
          return AlertDialog(
            title: const Text('Are you sure?'),
            content: const Text(
              'If you exit device setup, your progress will be lost.',
            ),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(true);
                },
                child: const Text('Leave'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.of(context).pop(false);
                },
                child: const Text('Stay'),
              ),
            ],
          );
        },
      ) ??
      false;
}

----------------------------------------

TITLE: Parallax Flow Delegate Implementation
DESCRIPTION: Custom FlowDelegate that handles the parallax scrolling effect calculations and painting

LANGUAGE: dart
CODE:
class ParallaxFlowDelegate extends FlowDelegate {
  ParallaxFlowDelegate({
    required this.scrollable,
    required this.listItemContext,
    required this.backgroundImageKey,
  }) : super(repaint: scrollable.position);

  final ScrollableState scrollable;
  final BuildContext listItemContext;
  final GlobalKey backgroundImageKey;

  @override
  void paintChildren(FlowPaintingContext context) {
    final scrollableBox = scrollable.context.findRenderObject() as RenderBox;
    final listItemBox = listItemContext.findRenderObject() as RenderBox;
    final listItemOffset = listItemBox.localToGlobal(
      listItemBox.size.centerLeft(Offset.zero),
      ancestor: scrollableBox,
    );

    final viewportDimension = scrollable.position.viewportDimension;
    final scrollFraction = (listItemOffset.dy / viewportDimension).clamp(0.0, 1.0);
    final verticalAlignment = Alignment(0.0, scrollFraction * 2 - 1);

    final backgroundSize = (backgroundImageKey.currentContext!.findRenderObject() as RenderBox).size;
    final listItemSize = context.size;
    final childRect = verticalAlignment.inscribe(backgroundSize, Offset.zero & listItemSize);

    context.paintChild(0, transform: Transform.translate(offset: Offset(0.0, childRect.top)).transform);
  }
}

----------------------------------------

TITLE: Finding Text Widget in Flutter Tests
DESCRIPTION: Demonstrates how to locate a Text widget containing specific text using find.text() method in Flutter widget tests. The example builds a simple MaterialApp with a Text widget and verifies its presence.

LANGUAGE: dart
CODE:
testWidgets('finds a Text widget', (tester) async {
  // Build an App with a Text widget that displays the letter 'H'.
  await tester.pumpWidget(const MaterialApp(home: Scaffold(body: Text('H'))));

  // Find a widget that displays the letter 'H'.
  expect(find.text('H'), findsOneWidget);
});

----------------------------------------

TITLE: Complete Flutter App for Handling Text Field Changes
DESCRIPTION: This snippet provides a complete Flutter application that demonstrates both methods of handling text field changes: using onChanged callback and TextEditingController.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Retrieve Text Input',
      home: MyCustomForm(),
    );
  }
}

// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

// Define a corresponding State class.
// This class holds data related to the Form.
class _MyCustomFormState extends State<MyCustomForm> {
  // Create a text controller and use it to retrieve the current value
  // of the TextField.
  final myController = TextEditingController();

  @override
  void initState() {
    super.initState();

    // Start listening to changes.
    myController.addListener(_printLatestValue);
  }

  @override
  void dispose() {
    // Clean up the controller when the widget is removed from the widget tree.
    // This also removes the _printLatestValue listener.
    myController.dispose();
    super.dispose();
  }

  void _printLatestValue() {
    final text = myController.text;
    print('Second text field: $text (${text.characters.length})');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Retrieve Text Input')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              onChanged: (text) {
                print('First text field: $text (${text.characters.length})');
              },
            ),
            TextField(controller: myController),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing CircleListItem Widget in Flutter
DESCRIPTION: Defines a CircleListItem widget that displays a circular image with a loading placeholder.

LANGUAGE: dart
CODE:
class CircleListItem extends StatelessWidget {
  const CircleListItem({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
      child: Container(
        width: 54,
        height: 54,
        decoration: const BoxDecoration(
          color: Colors.black,
          shape: BoxShape.circle,
        ),
        child: ClipOval(
          child: Image.network(
            'https://docs.flutter.dev/cookbook'
            '/img-files/effects/split-check/Avatar1.jpg',
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Complete Physics-based Draggable Card Implementation
DESCRIPTION: Full implementation of a draggable card with spring physics animation. Includes gesture detection, physics simulation, and animation controller management.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter/physics.dart';

void main() {
  runApp(const MaterialApp(home: PhysicsCardDragDemo()));
}

class PhysicsCardDragDemo extends StatelessWidget {
  const PhysicsCardDragDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: const DraggableCard(child: FlutterLogo(size: 128)),
    );
  }
}

class DraggableCard extends StatefulWidget {
  const DraggableCard({required this.child, super.key});

  final Widget child;

  @override
  State<DraggableCard> createState() => _DraggableCardState();
}

class _DraggableCardState extends State<DraggableCard>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  Alignment _dragAlignment = Alignment.center;
  late Animation<Alignment> _animation;

  void _runAnimation(Offset pixelsPerSecond, Size size) {
    _animation = _controller.drive(
      AlignmentTween(begin: _dragAlignment, end: Alignment.center),
    );
    final unitsPerSecondX = pixelsPerSecond.dx / size.width;
    final unitsPerSecondY = pixelsPerSecond.dy / size.height;
    final unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);
    final unitVelocity = unitsPerSecond.distance;

    const spring = SpringDescription(mass: 30, stiffness: 1, damping: 1);
    final simulation = SpringSimulation(spring, 0, 1, -unitVelocity);
    _controller.animateWith(simulation);
  }

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(vsync: this);
    _controller.addListener(() {
      setState(() {
        _dragAlignment = _animation.value;
      });
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return GestureDetector(
      onPanDown: (details) {
        _controller.stop();
      },
      onPanUpdate: (details) {
        setState(() {
          _dragAlignment += Alignment(
            details.delta.dx / (size.width / 2),
            details.delta.dy / (size.height / 2),
          );
        });
      },
      onPanEnd: (details) {
        _runAnimation(details.velocity.pixelsPerSecond, size);
      },
      child: Align(alignment: _dragAlignment, child: Card(child: widget.child)),
    );
  }
}

----------------------------------------

TITLE: Reading Data with SharedPreferences in Dart
DESCRIPTION: Shows how to read an integer value from persistent storage using SharedPreferences in Dart. This snippet retrieves a counter value, defaulting to 0 if not found.

LANGUAGE: dart
CODE:
final prefs = await SharedPreferences.getInstance();

// Try reading the counter value from persistent storage.
// If not present, null is returned, so default to 0.
final counter = prefs.getInt('counter') ?? 0;

----------------------------------------

TITLE: Adding http Package to Flutter Project
DESCRIPTION: Use the flutter pub add command to add the http package as a dependency to your Flutter project.

LANGUAGE: console
CODE:
$ flutter pub add http

----------------------------------------

TITLE: Complete Flutter Text Input Example
DESCRIPTION: Full implementation of a Flutter application demonstrating text input retrieval with TextEditingController, including app structure and UI components.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Retrieve Text Input',
      home: MyCustomForm(),
    );
  }
}

class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

class _MyCustomFormState extends State<MyCustomForm> {
  final myController = TextEditingController();

  @override
  void dispose() {
    myController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Retrieve Text Input')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: TextField(controller: myController),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                content: Text(myController.text),
              );
            },
          );
        },
        tooltip: 'Show me the value!',
        child: const Icon(Icons.text_fields),
      ),
    );
  }
}

----------------------------------------

TITLE: Formatting Flutter Code using Dart CLI
DESCRIPTION: This command uses the Dart CLI to automatically format Flutter code files. It takes one or more file paths as arguments and applies the recommended Flutter code style to those files.

LANGUAGE: console
CODE:
$ dart format path1 path2 [...]

----------------------------------------

TITLE: Preparing Animation Controller for Staggered Menu in Flutter
DESCRIPTION: Sets up an AnimationController and defines animation durations for the staggered menu animation. This includes delays and durations for list items and the button animation.

LANGUAGE: dart
CODE:
class _MenuState extends State<Menu> with SingleTickerProviderStateMixin {
  late AnimationController _staggeredController;

  static const _initialDelayTime = Duration(milliseconds: 50);
  static const _itemSlideTime = Duration(milliseconds: 250);
  static const _staggerTime = Duration(milliseconds: 50);
  static const _buttonDelayTime = Duration(milliseconds: 150);
  static const _buttonTime = Duration(milliseconds: 500);
  final _animationDuration =
      _initialDelayTime +
      (_staggerTime * _menuTitles.length) +
      _buttonDelayTime +
      _buttonTime;

  @override
  void initState() {
    super.initState();

    _staggeredController = AnimationController(vsync: this);
  }

  @override
  void dispose() {
    _staggeredController.dispose();
    super.dispose();
  }
}

----------------------------------------

TITLE: Running Tests via Console Commands
DESCRIPTION: Commands for running Flutter tests from the terminal

LANGUAGE: console
CODE:
$ flutter pub add dev:test
flutter test test/counter_test.dart
flutter test --plain-name "Test start, increment, decrement"
flutter test --help

----------------------------------------

TITLE: Populating a Drawer with ListView in Flutter
DESCRIPTION: This snippet shows how to populate a Drawer with a ListView containing a DrawerHeader and ListTile widgets for navigation items.

LANGUAGE: dart
CODE:
Drawer(
  // Add a ListView to the drawer. This ensures the user can scroll
  // through the options in the drawer if there isn't enough vertical
  // space to fit everything.
  child: ListView(
    // Important: Remove any padding from the ListView.
    padding: EdgeInsets.zero,
    children: [
      const DrawerHeader(
        decoration: BoxDecoration(color: Colors.blue),
        child: Text('Drawer Header'),
      ),
      ListTile(
        title: const Text('Item 1'),
        onTap: () {
          // Update the state of the app.
          // ...
        },
      ),
      ListTile(
        title: const Text('Item 2'),
        onTap: () {
          // Update the state of the app.
          // ...
        },
      ),
    ],
  ),
);

----------------------------------------

TITLE: Implementing ViewModel with Injected Dependencies in Dart
DESCRIPTION: Shows how to implement a ViewModel class with injected dependencies (repositories) in Dart. The injected components are kept private to prevent direct access from the view.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  HomeViewModel({
    required BookingRepository bookingRepository,
    required UserRepository userRepository,
  })  : _bookingRepository = bookingRepository,
        _userRepository = userRepository;

  final BookingRepository _bookingRepository;
  final UserRepository _userRepository;

  // ...
}

----------------------------------------

TITLE: Complete Flutter Video Player Implementation
DESCRIPTION: Full implementation of a video player screen in Flutter, including initialization, display, and play/pause functionality.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

void main() => runApp(const VideoPlayerApp());

class VideoPlayerApp extends StatelessWidget {
  const VideoPlayerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Video Player Demo',
      home: VideoPlayerScreen(),
    );
  }
}

class VideoPlayerScreen extends StatefulWidget {
  const VideoPlayerScreen({super.key});

  @override
  State<VideoPlayerScreen> createState() => _VideoPlayerScreenState();
}

class _VideoPlayerScreenState extends State<VideoPlayerScreen> {
  late VideoPlayerController _controller;
  late Future<void> _initializeVideoPlayerFuture;

  @override
  void initState() {
    super.initState();

    // Create and store the VideoPlayerController. The VideoPlayerController
    // offers several different constructors to play videos from assets, files,
    // or the internet.
    _controller = VideoPlayerController.networkUrl(
      Uri.parse(
        'https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4',
      ),
    );

    // Initialize the controller and store the Future for later use.
    _initializeVideoPlayerFuture = _controller.initialize();

    // Use the controller to loop the video.
    _controller.setLooping(true);
  }

  @override
  void dispose() {
    // Ensure disposing of the VideoPlayerController to free up resources.
    _controller.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Butterfly Video')),
      // Use a FutureBuilder to display a loading spinner while waiting for the
      // VideoPlayerController to finish initializing.
      body: FutureBuilder(
        future: _initializeVideoPlayerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            // If the VideoPlayerController has finished initialization, use
            // the data it provides to limit the aspect ratio of the video.
            return AspectRatio(
              aspectRatio: _controller.value.aspectRatio,
              // Use the VideoPlayer widget to display the video.
              child: VideoPlayer(_controller),
            );
          } else {
            // If the VideoPlayerController is still initializing, show a
            // loading spinner.
            return const Center(child: CircularProgressIndicator());
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Wrap the play or pause in a call to `setState`. This ensures the
          // correct icon is shown.
          setState(() {
            // If the video is playing, pause it.
            if (_controller.value.isPlaying) {
              _controller.pause();
            } else {
              // If the video is paused, play it.
              _controller.play();
            }
          });
        },
        // Display the correct icon depending on the state of the player.
        child: Icon(
          _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Centering Text Widget in Flutter
DESCRIPTION: Demonstrates how to center a Text widget using the Center layout widget.

LANGUAGE: dart
CODE:
const Center(
  child: Text('Hello World'),
),

----------------------------------------

TITLE: Absorbing Key Events in Flutter Focus Widget
DESCRIPTION: Example showing how to absorb all key events in a subtree without allowing primary focus.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return Focus(
    onKeyEvent: (node, event) => KeyEventResult.handled,
    canRequestFocus: false,
    child: child,
  );
}

----------------------------------------

TITLE: Complete Flutter App for Displaying Network Image
DESCRIPTION: This snippet provides a complete Flutter application that demonstrates how to display an image from the internet using the Image.network() constructor within a MaterialApp and Scaffold structure.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    var title = 'Web Images';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: Text(title)),
        body: Image.network('https://picsum.photos/250?image=9'),
      ),
    );
  }
}

----------------------------------------

TITLE: Disposing TextEditingController in Flutter
DESCRIPTION: This snippet shows how to properly dispose of a TextEditingController in the dispose method of a StatefulWidget.

LANGUAGE: dart
CODE:
@override
void dispose() {
  // Clean up the controller when the widget is removed from the widget tree.
  // This also removes the _printLatestValue listener.
  myController.dispose();
  super.dispose();
}

----------------------------------------

TITLE: Complete Floating App Bar Implementation
DESCRIPTION: Full implementation combining CustomScrollView, SliverAppBar, and SliverList to create a floating app bar with scrollable content.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Floating App Bar';

    return MaterialApp(
      title: title,
      home: Scaffold(
        // No appbar provided to the Scaffold, only a body with a
        // CustomScrollView.
        body: CustomScrollView(
          slivers: [
            // Add the app bar to the CustomScrollView.
            const SliverAppBar(
              // Provide a standard title.
              title: Text(title),
              // Allows the user to reveal the app bar if they begin scrolling
              // back up the list of items.
              floating: true,
              // Display a placeholder widget to visualize the shrinking size.
              flexibleSpace: Placeholder(),
              // Make the initial height of the SliverAppBar larger than normal.
              expandedHeight: 200,
            ),
            // Next, create a SliverList
            SliverList(
              // Use a delegate to build items as they're scrolled on screen.
              delegate: SliverChildBuilderDelegate(
                // The builder function returns a ListTile with a title that
                // displays the index of the current item.
                (context, index) => ListTile(title: Text('Item #$index')),
                // Builds 1000 ListTiles
                childCount: 1000,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Adding LayoutBuilder with SingleChildScrollView in Flutter
DESCRIPTION: This snippet shows how to create a LayoutBuilder with a SingleChildScrollView as its child. The LayoutBuilder provides constraints that will be used in subsequent steps.

LANGUAGE: dart
CODE:
LayoutBuilder(
  builder: (context, constraints) {
    return SingleChildScrollView(child: Placeholder());
  },
);

----------------------------------------

TITLE: Complete Flutter Navigation Example (Cupertino Design)
DESCRIPTION: A complete example demonstrating navigation between two routes using Cupertino Design widgets in Flutter. It includes the main() function, FirstRoute, and SecondRoute implementations.

LANGUAGE: dart
CODE:
import 'package:flutter/cupertino.dart';

void main() {
  runApp(const CupertinoApp(title: 'Navigation Basics', home: FirstRoute()));
}

class FirstRoute extends StatelessWidget {
  const FirstRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: const CupertinoNavigationBar(middle: Text('First Route')),
      child: Center(
        child: CupertinoButton(
          child: const Text('Open route'),
          onPressed: () {
            Navigator.push(
              context,
              CupertinoPageRoute(builder: (context) => const SecondRoute()),
            );
          },
        ),
      ),
    );
  }
}

class SecondRoute extends StatelessWidget {
  const SecondRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: const CupertinoNavigationBar(middle: Text('Second Route')),
      child: Center(
        child: CupertinoButton(
          onPressed: () {
            Navigator.pop(context);
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Generating List Data Source in Dart
DESCRIPTION: Creates a data source by generating a list of 10,000 strings using List.generate constructor

LANGUAGE: dart
CODE:
List<String>.generate(10000, (i) => 'Item $i'),

----------------------------------------

TITLE: Complete Flutter Drawer Example with Navigation
DESCRIPTION: This comprehensive example demonstrates a full implementation of a drawer in a Flutter app, including state management for selected items and navigation between different views.

LANGUAGE: dart
CODE:
import 'package:flutter/material';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static const appTitle = 'Drawer Demo';

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: appTitle,
      home: MyHomePage(title: appTitle),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _selectedIndex = 0;
  static const TextStyle optionStyle = TextStyle(
    fontSize: 30,
    fontWeight: FontWeight.bold,
  );
  static const List<Widget> _widgetOptions = <Widget>[
    Text('Index 0: Home', style: optionStyle),
    Text('Index 1: Business', style: optionStyle),
    Text('Index 2: School', style: optionStyle),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        leading: Builder(
          builder: (context) {
            return IconButton(
              icon: const Icon(Icons.menu),
              onPressed: () {
                Scaffold.of(context).openDrawer();
              },
            );
          },
        ),
      ),
      body: Center(child: _widgetOptions[_selectedIndex]),
      drawer: Drawer(
        // Add a ListView to the drawer. This ensures the user can scroll
        // through the options in the drawer if there isn't enough vertical
        // space to fit everything.
        child: ListView(
          // Important: Remove any padding from the ListView.
          padding: EdgeInsets.zero,
          children: [
            const DrawerHeader(
              decoration: BoxDecoration(color: Colors.blue),
              child: Text('Drawer Header'),
            ),
            ListTile(
              title: const Text('Home'),
              selected: _selectedIndex == 0,
              onTap: () {
                // Update the state of the app
                _onItemTapped(0);
                // Then close the drawer
                Navigator.pop(context);
              },
            ),
            ListTile(
              title: const Text('Business'),
              selected: _selectedIndex == 1,
              onTap: () {
                // Update the state of the app
                _onItemTapped(1);
                // Then close the drawer
                Navigator.pop(context);
              },
            ),
            ListTile(
              title: const Text('School'),
              selected: _selectedIndex == 2,
              onTap: () {
                // Update the state of the app
                _onItemTapped(2);
                // Then close the drawer
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Fetching All ToDo Items from SQLite Database in Flutter
DESCRIPTION: This snippet demonstrates how to retrieve all ToDo items from the SQLite database using the sqflite package. It maps the database entries to Todo objects and returns them as a Result.

LANGUAGE: dart
CODE:
Future<Result<List<Todo>>> getAll() async {
  try {
    final entries = await _database!.query(
      _kTableTodo,
      columns: [_kColumnId, _kColumnTask],
    );
    final list =
        entries
            .map(
              (element) => Todo(
                id: element[_kColumnId] as int,
                task: element[_kColumnTask] as String,
              ),
            )
            .toList();
    return Result.ok(list);
  } on Exception catch (e) {
    return Result.error(e);
  }
}

----------------------------------------

TITLE: Defining Album Class with JSON Deserialization in Dart
DESCRIPTION: Defines an Album class with a factory constructor for creating an Album instance from JSON data using pattern matching.

LANGUAGE: dart
CODE:
class Album {
  final int id;
  final String title;

  const Album({required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'id': int id, 'title': String title} => Album(id: id, title: title),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

----------------------------------------

TITLE: Sending Data to WebSocket Server in Dart
DESCRIPTION: Demonstrates how to send data to the WebSocket server by adding messages to the channel's sink. This method is typically called in response to user actions.

LANGUAGE: dart
CODE:
channel.sink.add('Hello!');

----------------------------------------

TITLE: Album Model Class
DESCRIPTION: Dart class for Album model with JSON deserialization using pattern matching

LANGUAGE: dart
CODE:
class Album {
  final int id;
  final String title;

  const Album({required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'id': int id, 'title': String title} => Album(id: id, title: title),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

----------------------------------------

TITLE: Assigning FocusNode to TextField in Flutter
DESCRIPTION: Shows how to connect a FocusNode to a TextField widget through the focusNode property in the build method.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return TextField(focusNode: myFocusNode);
}

----------------------------------------

TITLE: Interactive SnackBar Example in Flutter
DESCRIPTION: This comprehensive example demonstrates a complete Flutter application for displaying SnackBars. It includes a main app structure, a custom StatelessWidget for the SnackBar demo, and a button that triggers the SnackBar display with an optional action.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const SnackBarDemo());

class SnackBarDemo extends StatelessWidget {
  const SnackBarDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SnackBar Demo',
      home: Scaffold(
        appBar: AppBar(title: const Text('SnackBar Demo')),
        body: const SnackBarPage(),
      ),
    );
  }
}

class SnackBarPage extends StatelessWidget {
  const SnackBarPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: ElevatedButton(
        onPressed: () {
          final snackBar = SnackBar(
            content: const Text('Yay! A SnackBar!'),
            action: SnackBarAction(
              label: 'Undo',
              onPressed: () {
                // Some code to undo the change.
              },
            ),
          );

          // Find the ScaffoldMessenger in the widget tree
          // and use it to show a SnackBar.
          ScaffoldMessenger.of(context).showSnackBar(snackBar);
        },
        child: const Text('Show SnackBar'),
      ),
    );
  }
}

----------------------------------------

TITLE: Adding an Action to a SnackBar in Flutter
DESCRIPTION: This snippet shows how to create a SnackBar with an additional action. The SnackBar includes both text content and a SnackBarAction widget with a label and onPressed callback for handling user interaction.

LANGUAGE: dart
CODE:
final snackBar = SnackBar(
  content: const Text('Yay! A SnackBar!'),
  action: SnackBarAction(
    label: 'Undo',
    onPressed: () {
      // Some code to undo the change.
    },
  ),
);

----------------------------------------

TITLE: Implementing Expanding ActionButton Animation in Flutter
DESCRIPTION: Creates a stateless widget _ExpandingActionButton to handle the animation and positioning of individual ActionButtons during expansion and collapse.

LANGUAGE: dart
CODE:
@immutable
class _ExpandingActionButton extends StatelessWidget {
  const _ExpandingActionButton({
    required this.directionInDegrees,
    required this.maxDistance,
    required this.progress,
    required this.child,
  });

  final double directionInDegrees;
  final double maxDistance;
  final Animation<double> progress;
  final Widget child;

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: progress,
      builder: (context, child) {
        final offset = Offset.fromDirection(
          directionInDegrees * (math.pi / 180.0),
          progress.value * maxDistance,
        );
        return Positioned(
          right: 4.0 + offset.dx,
          bottom: 4.0 + offset.dy,
          child: Transform.rotate(
            angle: (1.0 - progress.value) * math.pi / 2,
            child: child!,
          ),
        );
      },
      child: FadeTransition(opacity: progress, child: child),
    );
  }
}

----------------------------------------

TITLE: Optimizing Opacity and Clipping in Flutter
DESCRIPTION: Techniques for efficient implementation of opacity and clipping effects in Flutter, including alternatives to the Opacity widget and best practices for clipping operations.



----------------------------------------

TITLE: Creating a Scrollable List in Flutter
DESCRIPTION: Shows how to create a basic scrollable list using ListView in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return ListView(
    children: const [
      BorderedImage(),
      BorderedImage(),
      BorderedImage(),
    ],
  );
}

----------------------------------------

TITLE: Complete Flutter Named Routes Implementation
DESCRIPTION: Provides a full implementation of named route navigation in Flutter, including the main app setup, screen definitions, and navigation logic.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      title: 'Named Routes Demo',
      // Start the app with the "/" named route. In this case, the app starts
      // on the FirstScreen widget.
      initialRoute: '/',
      routes: {
        // When navigating to the "/" route, build the FirstScreen widget.
        '/': (context) => const FirstScreen(),
        // When navigating to the "/second" route, build the SecondScreen widget.
        '/second': (context) => const SecondScreen(),
      },
    ),
  );
}

class FirstScreen extends StatelessWidget {
  const FirstScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Screen')),
      body: Center(
        child: ElevatedButton(
          // Within the `FirstScreen` widget
          onPressed: () {
            // Navigate to the second screen using a named route.
            Navigator.pushNamed(context, '/second');
          },
          child: const Text('Launch screen'),
        ),
      ),
    );
  }
}

class SecondScreen extends StatelessWidget {
  const SecondScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Screen')),
      body: Center(
        child: ElevatedButton(
          // Within the SecondScreen widget
          onPressed: () {
            // Navigate back to the first screen by popping the current route
            // off the stack.
            Navigator.pop(context);
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Opening SQLite Database in Flutter
DESCRIPTION: This snippet demonstrates how to open or create a SQLite database using the sqflite package in Flutter. It includes creating a table for ToDo items if it doesn't exist.

LANGUAGE: dart
CODE:
Future<void> open() async {
  _database = await databaseFactory.openDatabase(
    join(await databaseFactory.getDatabasesPath(), 'app_database.db'),
    options: OpenDatabaseOptions(
      onCreate: (db, version) {
        return db.execute(
          'CREATE TABLE $_kTableTodo($_kColumnId INTEGER PRIMARY KEY AUTOINCREMENT, $_kColumnTask TEXT)',
        );
      },
      version: 1,
    ),
  );
}

----------------------------------------

TITLE: Accessing MediaQuery Data in Flutter
DESCRIPTION: Shows how to access MediaQuery data including padding information used by SafeArea to determine inset amounts for avoiding system UI elements and screen cutouts.

LANGUAGE: dart
CODE:
MediaQuery.of(context).padding

----------------------------------------

TITLE: Complete Flutter Focus Management Example
DESCRIPTION: A comprehensive example showing a complete implementation of focus management in Flutter, including both automatic and programmatic focus control with multiple text fields.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Text Field Focus', home: MyCustomForm());
  }
}

// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

// Define a corresponding State class.
// This class holds data related to the form.
class _MyCustomFormState extends State<MyCustomForm> {
  // Define the focus node. To manage the lifecycle, create the FocusNode in
  // the initState method, and clean it up in the dispose method.
  late FocusNode myFocusNode;

  @override
  void initState() {
    super.initState();

    myFocusNode = FocusNode();
  }

  @override
  void dispose() {
    // Clean up the focus node when the Form is disposed.
    myFocusNode.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Text Field Focus')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // The first text field is focused on as soon as the app starts.
            const TextField(autofocus: true),
            // The second text field is focused on when a user taps the
            // FloatingActionButton.
            TextField(focusNode: myFocusNode),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        // When the button is pressed,
        // give focus to the text field using myFocusNode.
        onPressed: () => myFocusNode.requestFocus(),
        tooltip: 'Focus Second Text Field',
        child: const Icon(Icons.edit),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}

----------------------------------------

TITLE: Loading Network Images in Flutter
DESCRIPTION: Shows how to load and display an image from a network URL in Flutter.

LANGUAGE: Dart
CODE:
Image.network('https://docs.flutter.dev/assets/images/docs/owl.jpg');

----------------------------------------

TITLE: Complete Flutter Navigation Example (Material Design)
DESCRIPTION: A complete example demonstrating navigation between two routes using Material Design widgets in Flutter. It includes the main() function, FirstRoute, and SecondRoute implementations.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(title: 'Navigation Basics', home: FirstRoute()));
}

class FirstRoute extends StatelessWidget {
  const FirstRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Route')),
      body: Center(
        child: ElevatedButton(
          child: const Text('Open route'),
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const SecondRoute()),
            );
          },
        ),
      ),
    );
  }
}

class SecondRoute extends StatelessWidget {
  const SecondRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Route')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.pop(context);
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Complete Flutter Application for Returning Data
DESCRIPTION: The full implementation of the Flutter application demonstrating how to return data from a screen.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(title: 'Returning Data', home: HomeScreen()));
}

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Returning Data Demo')),
      body: const Center(child: SelectionButton()),
    );
  }
}

class SelectionButton extends StatefulWidget {
  const SelectionButton({super.key});

  @override
  State<SelectionButton> createState() => _SelectionButtonState();
}

class _SelectionButtonState extends State<SelectionButton> {
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () {
        _navigateAndDisplaySelection(context);
      },
      child: const Text('Pick an option, any option!'),
    );
  }

  // A method that launches the SelectionScreen and awaits the result from
  // Navigator.pop.
  Future<void> _navigateAndDisplaySelection(BuildContext context) async {
    // Navigator.push returns a Future that completes after calling
    // Navigator.pop on the Selection Screen.
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const SelectionScreen()),
    );

    // When a BuildContext is used from a StatefulWidget, the mounted property
    // must be checked after an asynchronous gap.
    if (!context.mounted) return;

    // After the Selection Screen returns a result, hide any previous snackbars
    // and show the new result.
    ScaffoldMessenger.of(context)
      ..removeCurrentSnackBar()
      ..showSnackBar(SnackBar(content: Text('$result')));
  }

}

class SelectionScreen extends StatelessWidget {
  const SelectionScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Pick an option')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.all(8),
              child: ElevatedButton(
                onPressed: () {
                  // Close the screen and return "Yep!" as the result.
                  Navigator.pop(context, 'Yep!');
                },
                child: const Text('Yep!'),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(8),
              child: ElevatedButton(
                onPressed: () {
                  // Close the screen and return "Nope." as the result.
                  Navigator.pop(context, 'Nope.');
                },
                child: const Text('Nope.'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Converting HTTP Response to Custom Object in Dart
DESCRIPTION: Updates the createAlbum function to return a Future<Album> by converting the HTTP response to an Album object, handling success and error cases.

LANGUAGE: dart
CODE:
Future<Album> createAlbum(String title) async {
  final response = await http.post(
    Uri.parse('https://jsonplaceholder.typicode.com/albums'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{'title': title}),
  );

  if (response.statusCode == 201) {
    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    throw Exception('Failed to create album.');
  }
}

----------------------------------------

TITLE: Implementing CustomScrollView Base Structure
DESCRIPTION: Basic setup of CustomScrollView within a Scaffold widget to prepare for floating app bar implementation.

LANGUAGE: dart
CODE:
Scaffold(
  // No appBar property provided, only the body.
  body: CustomScrollView(
    // Add the app bar and list of items as slivers in the next steps.
    slivers: <Widget>[],
  ),
);

----------------------------------------

TITLE: Removing Data with SharedPreferences in Dart
DESCRIPTION: Demonstrates how to remove a key-value pair from persistent storage using SharedPreferences in Dart. This snippet removes the 'counter' key-value pair.

LANGUAGE: dart
CODE:
final prefs = await SharedPreferences.getInstance();

// Remove the counter key-value pair from persistent storage.
await prefs.remove('counter');

----------------------------------------

TITLE: Displaying ToDo List with ListenableBuilder in Flutter
DESCRIPTION: This snippet shows how to use ListenableBuilder to display a list of ToDo items in a ListView, with each item represented by a ListTile. It also includes functionality to delete items.

LANGUAGE: dart
CODE:
ListenableBuilder(
  listenable: widget.viewModel,
  builder: (context, child) {
    return ListView.builder(
      itemCount: widget.viewModel.todos.length,
      itemBuilder: (context, index) {
        final todo = widget.viewModel.todos[index];
        return ListTile(
          title: Text(todo.task),
          trailing: IconButton(
            icon: const Icon(Icons.delete),
            onPressed: () => widget.viewModel.delete.execute(todo.id),
          ),
        );
      },
    );
  },
)

----------------------------------------

TITLE: Flutter Layout Application
DESCRIPTION: Complete example application demonstrating layout concepts with numbered examples and interactive selection.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const HomePage());

const red = Colors.red;
const green = Colors.green;
const blue = Colors.blue;
const big = TextStyle(fontSize: 30);

//////////////////////////////////////////////////

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const FlutterLayoutArticle([
      Example1(),
      Example2(),
      // ... Additional examples omitted for brevity
    ]);
  }
}

----------------------------------------

TITLE: Efficient Grid and List Implementation in Flutter
DESCRIPTION: Best practices for implementing grids and lists in Flutter using lazy building techniques and avoiding intrinsic passes to optimize performance.



----------------------------------------

TITLE: Full Implementation of Command Pattern
DESCRIPTION: Provides a complete implementation of the Command pattern including Command0 and Command1 classes, using Result for action outcomes.

LANGUAGE: dart
CODE:
// Copyright 2024 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:async';

import 'package:flutter/foundation.dart';

import 'result.dart';

/// Defines a command action that returns a [Result] of type [T].
/// Used by [Command0] for actions without arguments.
typedef CommandAction0<T> = Future<Result<T>> Function();

/// Defines a command action that returns a [Result] of type [T].
/// Takes an argument of type [A].
/// Used by [Command1] for actions with one argument.
typedef CommandAction1<T, A> = Future<Result<T>> Function(A);

/// Facilitates interaction with a view model.
///
/// Encapsulates an action,
/// exposes its running and error states,
/// and ensures that it can't be launched again until it finishes.
///
/// Use [Command0] for actions without arguments.
/// Use [Command1] for actions with one argument.
///
/// Actions must return a [Result] of type [T].
///
/// Consume the action result by listening to changes,
/// then call to [clearResult] when the state is consumed.
abstract class Command<T> extends ChangeNotifier {
  bool _running = false;

  /// Whether the action is running.
  bool get running => _running;

  Result<T>? _result;

  /// Whether the action completed with an error.
  bool get error => _result is Error;

  /// Whether the action completed successfully.
  bool get completed => _result is Ok;

  /// The result of the most recent action.
  ///
  /// Returns `null` if the action is running or completed with an error.
  Result<T>? get result => _result;

  /// Clears the most recent action's result.
  void clearResult() {
    _result = null;
    notifyListeners();
  }

  /// Execute the provided [action], notifying listeners and
  /// setting the running and result states as necessary.
  Future<void> _execute(CommandAction0<T> action) async {
    // Ensure the action can't launch multiple times.
    // e.g. avoid multiple taps on button
    if (_running) return;

    // Notify listeners.
    // e.g. button shows loading state
    _running = true;
    _result = null;
    notifyListeners();

    try {
      _result = await action();
    } finally {
      _running = false;
      notifyListeners();
    }
  }
}

/// A [Command] that accepts no arguments.
final class Command0<T> extends Command<T> {
  /// Creates a [Command0] with the provided [CommandAction0].
  Command0(this._action);

  final CommandAction0<T> _action;

  /// Executes the action.
  Future<void> execute() async {
    await _execute(() => _action());
  }
}

/// A [Command] that accepts one argument.
final class Command1<T, A> extends Command<T> {
  /// Creates a [Command1] with the provided [CommandAction1].
  Command1(this._action);

  final CommandAction1<T, A> _action;

  /// Executes the action with the specified [argument].
  Future<void> execute(A argument) async {
    await _execute(() => _action(argument));
  }
}

----------------------------------------

TITLE: Complete Flutter List Implementation
DESCRIPTION: A complete Flutter application that implements a basic list view within a Material Design scaffold. Shows the full context of how to implement a ListView including app initialization and widget structure.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Basic List';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: ListView(
          children: const <Widget>[
            ListTile(leading: Icon(Icons.map), title: Text('Map')),
            ListTile(leading: Icon(Icons.photo_album), title: Text('Album')),
            ListTile(leading: Icon(Icons.phone), title: Text('Phone')),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Parsing Photos with Background Processing
DESCRIPTION: Functions to parse JSON response into Photo objects using compute for background processing.

LANGUAGE: dart
CODE:
List<Photo> parsePhotos(String responseBody) {
  final parsed =
      (jsonDecode(responseBody) as List).cast<Map<String, dynamic>>();

  return parsed.map<Photo>((json) => Photo.fromJson(json)).toList();
}

Future<List<Photo>> fetchPhotos(http.Client client) async {
  final response = await client.get(
    Uri.parse('https://jsonplaceholder.typicode.com/photos'),
  );

  // Use the compute function to run parsePhotos in a separate isolate.
  return compute(parsePhotos, response.body);
}

----------------------------------------

TITLE: Navigating to a Named Route in Flutter
DESCRIPTION: Uses Navigator.pushNamed() to navigate to a screen using its named route.

LANGUAGE: dart
CODE:
// Within the `FirstScreen` widget
onPressed: () {
  // Navigate to the second screen using a named route.
  Navigator.pushNamed(context, '/second');
}

----------------------------------------

TITLE: Complete Album Fetching Implementation with Authentication
DESCRIPTION: Full implementation of an authenticated API call to fetch and parse album data, including the Album model class with JSON deserialization logic.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:http/http.dart' as http;

Future<Album> fetchAlbum() async {
  final response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
    // Send authorization headers to the backend.
    headers: {HttpHeaders.authorizationHeader: 'Basic your_api_token_here'},
  );
  final responseJson = jsonDecode(response.body) as Map<String, dynamic>;

  return Album.fromJson(responseJson);
}

class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'userId': int userId, 'id': int id, 'title': String title} => Album(
        userId: userId,
        id: id,
        title: title,
      ),
      _ => throw const FormatException('Failed to load album.'),
    };
  }

----------------------------------------

TITLE: Creating Android Keystore Properties File
DESCRIPTION: Creating a key.properties file to store keystore information for signing Android apps.

LANGUAGE: Properties
CODE:
storePassword=<password-from-previous-step>
keyPassword=<password-from-previous-step>
keyAlias=upload
storeFile=<keystore-file-location>

----------------------------------------

TITLE: Saving Data with SharedPreferences in Dart
DESCRIPTION: Demonstrates how to save an integer value to persistent storage using SharedPreferences in Dart. This snippet loads the shared preferences instance and sets a counter value.

LANGUAGE: dart
CODE:
// Load and obtain the shared preferences for this app.
final prefs = await SharedPreferences.getInstance();

// Save the counter value to persistent storage under the 'counter' key.
await prefs.setInt('counter', counter);

----------------------------------------

TITLE: Creating a Scaffold with Drawer in Flutter
DESCRIPTION: This snippet shows how to create a basic Scaffold widget with an AppBar and a placeholder for a drawer.

LANGUAGE: dart
CODE:
Scaffold(
  appBar: AppBar(title: const Text('AppBar without hamburger button')),
  drawer: // Add a Drawer here in the next step.
);

----------------------------------------

TITLE: Implementing Animation Controls
DESCRIPTION: Adds a FloatingActionButton that triggers random property changes using setState to start the animation.

LANGUAGE: dart
CODE:
FloatingActionButton(
  // When the user taps the button
  onPressed: () {
    // Use setState to rebuild the widget with new values.
    setState(() {
      // Create a random number generator.
      final random = Random();

      // Generate a random width and height.
      _width = random.nextInt(300).toDouble();
      _height = random.nextInt(300).toDouble();

      // Generate a random color.
      _color = Color.fromRGBO(
        random.nextInt(256),
        random.nextInt(256),
        random.nextInt(256),
        1,
      );

      // Generate a random border radius.
      _borderRadius = BorderRadius.circular(
        random.nextInt(100).toDouble(),
      );
    });
  },
  child: const Icon(Icons.play_arrow),
)

----------------------------------------

TITLE: Implementing a ListView.Builder in Flutter
DESCRIPTION: Demonstrates how to use ListView.Builder for efficient list rendering in Flutter.

LANGUAGE: dart
CODE:
import 'dart:developer' as developer;

import 'package:flutter/material.dart';

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  List<Widget> widgets = [];

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < 100; i++) {
      widgets.add(getRow(i));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: ListView.builder(
        itemCount: widgets.length,
        itemBuilder: (context, position) {
          return getRow(position);
        },
      ),
    );
  }

  Widget getRow(int i) {
    return GestureDetector(
      onTap: () {
        setState(() {
          widgets.add(getRow(widgets.length));
          developer.log('row $i');
        });
      },
      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),
    );
  }
}

----------------------------------------

TITLE: Using SafeArea with Scaffold in Flutter
DESCRIPTION: Demonstrates the recommended way to implement SafeArea by wrapping the Scaffold body rather than the entire Scaffold. This ensures proper handling of system UI elements while allowing the AppBar to extend under the status bar.

LANGUAGE: dart
CODE:
Scaffold(
  body: SafeArea(
    child: YourContent(),
  ),
)

----------------------------------------

TITLE: Custom Focus Traversal Order in Flutter
DESCRIPTION: Example demonstrating how to implement custom focus traversal order for a row of buttons using FocusTraversalGroup and NumericFocusOrder.

LANGUAGE: dart
CODE:
class OrderedButtonRow extends StatelessWidget {
  const OrderedButtonRow({super.key});

  @override
  Widget build(BuildContext context) {
    return FocusTraversalGroup(
      policy: OrderedTraversalPolicy(),
      child: Row(
        children: <Widget>[
          const Spacer(),
          FocusTraversalOrder(
            order: const NumericFocusOrder(2),
            child: TextButton(child: const Text('ONE'), onPressed: () {}),
          ),
          const Spacer(),
          FocusTraversalOrder(
            order: const NumericFocusOrder(1),
            child: TextButton(child: const Text('TWO'), onPressed: () {}),
          ),
          const Spacer(),
          FocusTraversalOrder(
            order: const NumericFocusOrder(3),
            child: TextButton(child: const Text('THREE'), onPressed: () {}),
          ),
          const Spacer(),
        ],
      ),
    );
  }
}

----------------------------------------

TITLE: Camera Capture Button Implementation
DESCRIPTION: FloatingActionButton implementation for capturing photos using the camera controller.

LANGUAGE: dart
CODE:
FloatingActionButton(
  // Provide an onPressed callback.
  onPressed: () async {
    // Take the Picture in a try / catch block. If anything goes wrong,
    // catch the error.
    try {
      // Ensure that the camera is initialized.
      await _initializeControllerFuture;

      // Attempt to take a picture and then get the location
      // where the image file is saved.
      final image = await _controller.takePicture();
    } catch (e) {
      // If an error occurs, log the error to the console.
      print(e);
    }
  },
  child: const Icon(Icons.camera_alt),
)

----------------------------------------

TITLE: Creating a Deferred Widget in Dart
DESCRIPTION: Implement a simple deferred widget (DeferredBox) that can be downloaded at runtime.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

/// A simple blue 30x30 box.
class DeferredBox extends StatelessWidget {
  const DeferredBox({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(height: 30, width: 30, color: Colors.blue);
  }
}

----------------------------------------

TITLE: Displaying Asynchronous Data with FutureBuilder in Flutter
DESCRIPTION: Uses a FutureBuilder widget to display the result of the album creation process, handling loading, success, and error states.

LANGUAGE: dart
CODE:
FutureBuilder<Album>(
  future: _futureAlbum,
  builder: (context, snapshot) {
    if (snapshot.hasData) {
      return Text(snapshot.data!.title);
    } else if (snapshot.hasError) {
      return Text('${snapshot.error}');
    }

    return const CircularProgressIndicator();
  },
)

----------------------------------------

TITLE: Defining Data Model Class
DESCRIPTION: Create a Dog class that defines the data structure with id, name, and age properties.

LANGUAGE: dart
CODE:
class Dog {
  final int id;
  final String name;
  final int age;

  const Dog({required this.id, required this.name, required this.age});
}

----------------------------------------

TITLE: Implementing Basic Screens with Image in Flutter
DESCRIPTION: This snippet shows the initial setup of two screens (MainScreen and DetailScreen) displaying the same image. It demonstrates navigation between screens and handling taps, but without the Hero animation.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Main Screen')),
      body: GestureDetector(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) {
                return const DetailScreen();
              },
            ),
          );
        },
        child: Image.network('https://picsum.photos/250?image=9'),
      ),
    );
  }
}

class DetailScreen extends StatelessWidget {
  const DetailScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTap: () {
          Navigator.pop(context);
        },
        child: Center(
          child: Image.network('https://picsum.photos/250?image=9'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing ThemeSwitch Widget in Flutter
DESCRIPTION: This snippet shows the implementation of a ThemeSwitch widget, which displays a switch for toggling between light and dark modes. It uses a ThemeSwitchViewModel to manage its state and handle user interactions.

LANGUAGE: dart
CODE:
class ThemeSwitch extends StatelessWidget {
  const ThemeSwitch({super.key, required this.viewmodel});

  final ThemeSwitchViewModel viewmodel;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Row(
        children: [
          const Text('Dark Mode'),
          ListenableBuilder(
            listenable: viewmodel,
            builder: (context, _) {
              return Switch(
                value: viewmodel.isDarkMode,
                onChanged: (_) {
                  viewmodel.toggle.execute();
                },
              );
            },
          ),
        ],
      ),
    );
  }
}

----------------------------------------

TITLE: Complete Flutter App with Custom Theming
DESCRIPTION: This is a full Flutter app example demonstrating the use of custom themes, including color schemes, text themes, and theme overrides for specific widgets.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
// Include the Google Fonts package to provide more text format options
// https://pub.dev/packages/google_fonts
import 'package:google_fonts/google_fonts';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appName = 'Custom Themes';

    return MaterialApp(
      title: appName,
      theme: ThemeData(
        // Define the default brightness and colors.
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.purple,
          // TRY THIS: Change to "Brightness.light"
          //           and see that all colors change
          //           to better contrast a light background.
          brightness: Brightness.dark,
        ),

        // Define the default `TextTheme`. Use this to specify the default
        // text styling for headlines, titles, bodies of text, and more.
        textTheme: TextTheme(
          displayLarge: const TextStyle(
            fontSize: 72,
            fontWeight: FontWeight.bold,
          ),
          // TRY THIS: Change one of the GoogleFonts
          //           to "lato", "poppins", or "lora".
          //           The title uses "titleLarge"
          //           and the middle text uses "bodyMedium".
          titleLarge: GoogleFonts.oswald(
            fontSize: 30,
            fontStyle: FontStyle.italic,
          ),
          bodyMedium: GoogleFonts.merriweather(),
          displaySmall: GoogleFonts.pacifico(),
        ),
      ),
      home: const MyHomePage(title: appName),
    );
  }
}

class MyHomePage extends StatelessWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          title,
          style: Theme.of(context).textTheme.titleLarge!.copyWith(
            color: Theme.of(context).colorScheme.onSecondary,
          ),
        ),
        backgroundColor: Theme.of(context).colorScheme.secondary,
      ),
      body: Center(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
          color: Theme.of(context).colorScheme.primary,
          child: Text(
            'Text with a background color',
            // TRY THIS: Change the Text value
            //           or change the Theme.of(context).textTheme
            //           to "displayLarge" or "displaySmall".
            style: Theme.of(context).textTheme.bodyMedium!.copyWith(
              color: Theme.of(context).colorScheme.onPrimary,
            ),
          ),
        ),
      ),
      floatingActionButton: Theme(
        data: Theme.of(context).copyWith(
          // TRY THIS: Change the seedColor to "Colors.red" or
          //           "Colors.blue".
          colorScheme: ColorScheme.fromSeed(
            seedColor: Colors.pink,
            brightness: Brightness.dark,
          ),
        ),
        child: FloatingActionButton(
          onPressed: () {},
          child: const Icon(Icons.add),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Setting up PageRouteBuilder for Custom Route Transition in Flutter
DESCRIPTION: This snippet demonstrates how to create a basic PageRouteBuilder with a custom transition. It sets up two routes: a home route with a 'Go!' button and a second route titled 'Page 2'.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(home: Page1()));
}

class Page1 extends StatelessWidget {
  const Page1({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.of(context).push(_createRoute());
          },
          child: const Text('Go!'),
        ),
      ),
    );
  }
}

Route _createRoute() {
  return PageRouteBuilder(
    pageBuilder: (context, animation, secondaryAnimation) => const Page2(),
    transitionsBuilder: (context, animation, secondaryAnimation, child) {
      return child;
    },
  );
}

class Page2 extends StatelessWidget {
  const Page2({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: const Center(child: Text('Page 2')),
    );
  }
}

----------------------------------------

TITLE: Loading Shaders at Runtime in Dart
DESCRIPTION: Use FragmentProgram.fromAsset to load a shader into a FragmentProgram object at runtime. The asset name should match the path specified in pubspec.yaml.

LANGUAGE: dart
CODE:
void loadMyShader() async {
  var program = await FragmentProgram.fromAsset('shaders/myshader.frag');
}

----------------------------------------

TITLE: Image Display Widget
DESCRIPTION: Widget implementation to display captured images from file path.

LANGUAGE: dart
CODE:
Image.file(File('path/to/my/picture.png'));

----------------------------------------

TITLE: Pre-warming FlutterEngine Configuration
DESCRIPTION: Demonstrates how to configure and cache a pre-warmed FlutterEngine for better performance in both Kotlin and Java.

LANGUAGE: kotlin
CODE:
val flutterEngine = FlutterEngine(context)
flutterEngine.getDartExecutor().executeDartEntrypoint(
    DartEntrypoint.createDefault()
)
FlutterEngineCache
  .getInstance()
  .put("my_engine_id", flutterEngine)

----------------------------------------

TITLE: Converting HTTP Response to Album Object
DESCRIPTION: Updated fetchAlbum() function to return a Future<Album> by converting the HTTP response to an Album object.

LANGUAGE: dart
CODE:
Future<Album> fetchAlbum() async {
  final response = await http.get(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
  );

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Album.fromJson(jsonDecode(response.body) as Map<String, dynamic>);
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load album');
  }
}

----------------------------------------

TITLE: Camera Initialization in Flutter
DESCRIPTION: Dart code to initialize camera functionality and obtain available cameras on the device.

LANGUAGE: dart
CODE:
// Ensure that plugin services are initialized so that `availableCameras()`
// can be called before `runApp()`
WidgetsFlutterBinding.ensureInitialized();

// Obtain a list of the available cameras on the device.
final cameras = await availableCameras();

// Get a specific camera from the list of available cameras.
final firstCamera = cameras.first;

----------------------------------------

TITLE: Setting Up Environment Variables for App Store Connect API
DESCRIPTION: Set environment variables for the App Store Connect API key, issuer ID, and key identifier to simplify subsequent commands.

LANGUAGE: bash
CODE:
export APP_STORE_CONNECT_ISSUER_ID=aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee
export APP_STORE_CONNECT_KEY_IDENTIFIER=ABC1234567
export APP_STORE_CONNECT_PRIVATE_KEY=`cat /path/to/api/key/AuthKey_XXXYYYZZZ.p8`

----------------------------------------

TITLE: Asynchronous Programming with Futures in Dart
DESCRIPTION: Demonstrates using Futures for asynchronous operations in Dart.

LANGUAGE: Dart
CODE:
// Dart
import 'dart:convert';

import 'package:http/http.dart' as http;

class Example {
  Future<String> _getIPAddress() {
    final url = Uri.https('httpbin.org', '/ip');
    return http.get(url).then((response) {
      final ip = jsonDecode(response.body)['origin'] as String;
      return ip;
    });
  }
}

void main() {
  final example = Example();
  example
      ._getIPAddress()
      .then((ip) => print(ip))
      .catchError((error) => print(error));
}

----------------------------------------

TITLE: Creating a Scaffold for SnackBar Display in Flutter
DESCRIPTION: This snippet shows how to set up a basic MaterialApp with a Scaffold to provide the structure for displaying SnackBars. The Scaffold includes an AppBar and a body containing a SnackBarPage widget.

LANGUAGE: dart
CODE:
return MaterialApp(
  title: 'SnackBar Demo',
  home: Scaffold(
    appBar: AppBar(title: const Text('SnackBar Demo')),
    body: const SnackBarPage(),
  ),
);

----------------------------------------

TITLE: Displaying Animated GIF in Flutter
DESCRIPTION: This snippet shows how to display an animated GIF using the Image.network() constructor in Flutter.

LANGUAGE: dart
CODE:
Image.network(
  'https://docs.flutter.dev/assets/images/dash/dash-fainting.gif',
);

----------------------------------------

TITLE: Accessing Display Information in Flutter
DESCRIPTION: Code demonstrating how to retrieve physical display dimensions using Flutter's Display API. This is particularly useful for handling foldable devices and orientation changes.

LANGUAGE: dart
CODE:
/// AppState object.
ui.FlutterView? _view;

@override
void didChangeDependencies() {
  super.didChangeDependencies();
  _view = View.maybeOf(context);
}

void didChangeMetrics() {
  final ui.Display? display = _view?.display;
}

----------------------------------------

TITLE: Defining Album Class for JSON Deserialization
DESCRIPTION: Create an Album class with a factory constructor to convert JSON data into a Dart object using pattern matching.

LANGUAGE: dart
CODE:
class Album {
  final int userId;
  final int id;
  final String title;

  const Album({required this.userId, required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json) {
    return switch (json) {
      {'userId': int userId, 'id': int id, 'title': String title} => Album(
        userId: userId,
        id: id,
        title: title,
      ),
      _ => throw const FormatException('Failed to load album.'),
    };
  }
}

----------------------------------------

TITLE: Creating a MaterialApp with Custom Theme in Flutter
DESCRIPTION: This snippet demonstrates how to create a MaterialApp with a custom theme using ThemeData. It sets up a color scheme and text theme with custom fonts.

LANGUAGE: dart
CODE:
MaterialApp(
  title: appName,
  theme: ThemeData(
    // Define the default brightness and colors.
    colorScheme: ColorScheme.fromSeed(
      seedColor: Colors.purple,
      // ···
      brightness: Brightness.dark,
    ),

    // Define the default `TextTheme`. Use this to specify the default
    // text styling for headlines, titles, bodies of text, and more.
    textTheme: TextTheme(
      displayLarge: const TextStyle(
        fontSize: 72,
        fontWeight: FontWeight.bold,
      ),
      // ···
      titleLarge: GoogleFonts.oswald(
        fontSize: 30,
        fontStyle: FontStyle.italic,
      ),
      bodyMedium: GoogleFonts.merriweather(),
      displaySmall: GoogleFonts.pacifico(),
    ),
  ),
  home: const MyHomePage(title: appName),
);

----------------------------------------

TITLE: Creating a ListView in Flutter
DESCRIPTION: Shows how to create a simple ListView widget in Flutter.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return ListView(
    children: const <Widget>[
      Text('Row One'),
      Text('Row Two'),
      Text('Row Three'),
      Text('Row Four'),
    ],
  );
}

----------------------------------------

TITLE: Basic Horizontal ListView Implementation in Flutter
DESCRIPTION: Creates a basic horizontal scrolling list using ListView widget with Axis.horizontal scrollDirection. The list contains five colored containers of equal width.

LANGUAGE: dart
CODE:
ListView(
  // This next line does the trick.
  scrollDirection: Axis.horizontal,
  children: <Widget>[
    Container(width: 160, color: Colors.red),
    Container(width: 160, color: Colors.blue),
    Container(width: 160, color: Colors.green),
    Container(width: 160, color: Colors.yellow),
    Container(width: 160, color: Colors.orange),
  ],
)

----------------------------------------

TITLE: Configuring Flutter Project Pubspec File in YAML
DESCRIPTION: This snippet demonstrates a typical pubspec.yaml file for a Flutter project. It includes Flutter-specific fields for SDK dependencies, assets, fonts, and other configuration options. The file also specifies general project metadata and Dart SDK requirements.

LANGUAGE: yaml
CODE:
name: <project name>
description: A new Flutter project.

publish_to: none

version: 1.0.0+1

environment:
  sdk: ^3.7.0

dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  cupertino_icons: ^1.0.8

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^5.0.0

flutter:

  uses-material-design: true

  generate: true

  assets:
    - images/a_dot_burr.png
    - images/a_dot_ham.png

  fonts:
    - family: Schyler
      fonts:
        - asset: fonts/Schyler-Regular.ttf
        - asset: fonts/Schyler-Italic.ttf
          style: italic
    - family: Trajan Pro
      fonts:
        - asset: fonts/TrajanPro.ttf
        - asset: fonts/TrajanPro_Bold.ttf
          weight: 700

----------------------------------------

TITLE: Implementing MethodChannel Handler in Kotlin (Android)
DESCRIPTION: Sets up a MethodChannel and implements the method call handler to get battery level on Android.

LANGUAGE: kotlin
CODE:
private val CHANNEL = "samples.flutter.dev/battery"

override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {
  super.configureFlutterEngine(flutterEngine)
  MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {
    call, result ->
    if (call.method == "getBatteryLevel") {
      val batteryLevel = getBatteryLevel()

      if (batteryLevel != -1) {
        result.success(batteryLevel)
      } else {
        result.error("UNAVAILABLE", "Battery level not available.", null)
      }
    } else {
      result.notImplemented()
    }
  }
}

----------------------------------------

TITLE: Filtering Network Requests in Flutter DevTools
DESCRIPTION: Examples of filter queries to search and filter network requests in the DevTools Network View. These queries demonstrate how to filter by method, status, type, and free text across all categories.

LANGUAGE: plaintext
CODE:
my-endpoint m:get t:json s:200

LANGUAGE: plaintext
CODE:
https s:404

----------------------------------------

TITLE: Initializing Firestore Controller in Play Session
DESCRIPTION: Code to initialize the Firestore controller in the play session screen's initState method.

LANGUAGE: dart
CODE:
final firestore = context.read<FirebaseFirestore?>();
if (firestore == null) {
  _log.warning(
    "Firestore instance wasn't provided. "
    'Running without _firestoreController.',
  );
} else {
  _firestoreController = FirestoreController(
    instance: firestore,
    boardState: _boardState,
  );
}

----------------------------------------

TITLE: Checking First Frame Rasterization in Flutter
DESCRIPTION: This snippet demonstrates how to check if the first frame has been rasterized in a Flutter application using the WidgetsBinding.instance.firstFrameRasterized property.

LANGUAGE: dart
CODE:
WidgetsBinding.instance.firstFrameRasterized

----------------------------------------

TITLE: Declaring Shaders in pubspec.yaml
DESCRIPTION: Add custom shaders to a Flutter project by listing them in the 'shaders' section of the pubspec.yaml file.

LANGUAGE: yaml
CODE:
flutter:
  shaders:
    - shaders/myshader.frag

----------------------------------------

TITLE: Configuring Material Components in Android Gradle
DESCRIPTION: Adding the Material Components dependency to the Android app's build.gradle file.

LANGUAGE: Groovy
CODE:
dependencies {
    // ...
    implementation("com.google.android.material:material:<version>")
    // ...
}

----------------------------------------

TITLE: Implementing Database Service for Local Storage in Flutter
DESCRIPTION: Database service class implementation for local storage operations using SQL to store and retrieve UserProfile data.

LANGUAGE: dart
CODE:
class DatabaseService {
  /// Fetches the UserProfile from the database.
  /// Returns null if the user profile is not found.
  Future<UserProfile?> fetchUserProfile() async {
    // ···
  }

  /// Update UserProfile in the database.
  Future<void> updateUserProfile(UserProfile userProfile) async {
    // ···
  }
}

----------------------------------------

TITLE: Adding Hero Widget to First Screen in Flutter
DESCRIPTION: This snippet demonstrates how to wrap the Image widget on the first screen with a Hero widget. The Hero widget requires a tag for identification and the child widget to animate.

LANGUAGE: dart
CODE:
Hero(
  tag: 'imageHero',
  child: Image.network('https://picsum.photos/250?image=9'),
)

----------------------------------------

TITLE: Including Flutter Form Recipes Index in Markdown
DESCRIPTION: This snippet demonstrates the use of a Markdown include statement to incorporate a group index of Flutter form recipes into the page.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Getting Battery Level in C++ (Windows)
DESCRIPTION: Retrieves the battery level using Windows' GetSystemPowerStatus API.

LANGUAGE: cpp
CODE:
static int GetBatteryLevel() {
  SYSTEM_POWER_STATUS status;
  if (GetSystemPowerStatus(&status) == 0 || status.BatteryLifePercent == 255) {
    return -1;
  }
  return status.BatteryLifePercent;
}

----------------------------------------

TITLE: Implementing Autofocus TextField in Flutter
DESCRIPTION: Creates a simple TextField widget with automatic focus when rendered. Uses the autofocus property to give immediate focus to the text field when it becomes visible.

LANGUAGE: dart
CODE:
TextField(
  autofocus: true,
);

----------------------------------------

TITLE: Rendering Flutter Layout Widgets Catalog in Markdown
DESCRIPTION: This snippet uses a custom rendering mechanism to generate a catalog page for Flutter's layout widgets. It specifies the category name as 'Layout' and passes the 'catalog' variable to the rendering function.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Layout", catalog:catalog %}

----------------------------------------

TITLE: Deploying to Firebase Hosting
DESCRIPTION: Command to deploy the Flutter web application to Firebase Hosting, automatically running the build process.

LANGUAGE: console
CODE:
firebase deploy

----------------------------------------

TITLE: Combining Controller, Curve, and Tween in Dart
DESCRIPTION: This snippet demonstrates how to combine an AnimationController, CurvedAnimation, and IntTween to create a complex animation.

LANGUAGE: dart
CODE:
AnimationController controller = AnimationController(
  duration: const Duration(milliseconds: 500),
  vsync: this,
);
final Animation<double> curve = CurvedAnimation(
  parent: controller,
  curve: Curves.easeOut,
);
Animation<int> alpha = IntTween(begin: 0, end: 255).animate(curve);

----------------------------------------

TITLE: Creating Animation Intervals for Staggered Menu in Flutter
DESCRIPTION: Calculates and creates Interval objects for each list item and the button in the staggered menu animation. These intervals define the timing for each element's animation within the overall animation duration.

LANGUAGE: dart
CODE:
class _MenuState extends State<Menu> with SingleTickerProviderStateMixin {
  final List<Interval> _itemSlideIntervals = [];
  late Interval _buttonInterval;

  @override
  void initState() {
    super.initState();

    _createAnimationIntervals();

    _staggeredController = AnimationController(
      vsync: this,
      duration: _animationDuration,
    );
  }

  void _createAnimationIntervals() {
    for (var i = 0; i < _menuTitles.length; ++i) {
      final startTime = _initialDelayTime + (_staggerTime * i);
      final endTime = startTime + _itemSlideTime;
      _itemSlideIntervals.add(
        Interval(
          startTime.inMilliseconds / _animationDuration.inMilliseconds,
          endTime.inMilliseconds / _animationDuration.inMilliseconds,
        ),
      );
    }

    final buttonStartTime =
        Duration(milliseconds: (_menuTitles.length * 50)) + _buttonDelayTime;
    final buttonEndTime = buttonStartTime + _buttonTime;
    _buttonInterval = Interval(
      buttonStartTime.inMilliseconds / _animationDuration.inMilliseconds,
      buttonEndTime.inMilliseconds / _animationDuration.inMilliseconds,
    );
  }
}

----------------------------------------

TITLE: Creating TabController in Flutter
DESCRIPTION: This snippet shows how to create a TabController using DefaultTabController widget in Flutter. It wraps the Scaffold widget and specifies the number of tabs.

LANGUAGE: dart
CODE:
return MaterialApp(
  home: DefaultTabController(length: 3, child: Scaffold()),
);

----------------------------------------

TITLE: Creating a Custom Button Widget in Flutter
DESCRIPTION: Demonstrates how to create a custom button widget by composing existing widgets in Flutter.

LANGUAGE: dart
CODE:
class CustomButton extends StatelessWidget {
  final String label;

  const CustomButton(this.label, {super.key});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(onPressed: () {}, child: Text(label));
  }
}

----------------------------------------

TITLE: Basic InkWell Ripple Implementation in Flutter
DESCRIPTION: Basic example showing how to wrap a widget with InkWell to create ripple effects on tap. Shows implementation of onTap callback that displays a snackbar message.

LANGUAGE: dart
CODE:
InkWell(
  onTap: () {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(const SnackBar(content: Text('Tap')));
  },
  child: const Padding(
    padding: EdgeInsets.all(12),
    child: Text('Flat Button'),
  ),
)

----------------------------------------

TITLE: Configuring Multi-View Flutter Web Mode
DESCRIPTION: JavaScript configuration for enabling multi-view mode in Flutter web application

LANGUAGE: javascript
CODE:
_flutter.loader.load({
  onEntrypointLoaded: async function onEntrypointLoaded(engineInitializer) {
    let engine = await engineInitializer.initializeEngine({
      multiViewEnabled: true, // Enables embedded mode.
    });
    let app = await engine.runApp();
    // Make this `app` object available to your JS app.
  }
});

----------------------------------------

TITLE: Combining Tweens for Complex Page Transition Animation in Flutter
DESCRIPTION: This snippet demonstrates how to combine multiple Tweens using the chain() method to create a more complex animation effect for page transitions.

LANGUAGE: dart
CODE:
const begin = Offset(0.0, 1.0);
const end = Offset.zero;
const curve = Curves.ease;

var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));

----------------------------------------

TITLE: Rendering Catalog Page for Styling Widgets in Markdown
DESCRIPTION: This code snippet uses a custom rendering function to generate a catalog page for styling widgets in Flutter. It passes the category name 'Styling' and a catalog object to the rendering function.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Styling", catalog:catalog %}

----------------------------------------

TITLE: Creating a Flutter App with GoRouter for Universal Links
DESCRIPTION: This snippet demonstrates how to create a new Flutter application and set up routing using the go_router package to handle deep links.

LANGUAGE: console
CODE:
$ flutter create deeplink_cookbook
$ flutter pub add go_router

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:go_router/go_router';

void main() => runApp(MaterialApp.router(routerConfig: router));

/// This handles '/' and '/details'.
final router = GoRouter(
  routes: [
    GoRoute(
      path: '/',
      builder: (_, __) => Scaffold(
        appBar: AppBar(title: const Text('Home Screen')),
      ),
      routes: [
        GoRoute(
          path: 'details',
          builder: (_, __) => Scaffold(
            appBar: AppBar(title: const Text('Details Screen')),
          ),
        ),
      ],
    ),
  ],
);

----------------------------------------

TITLE: Handling Specific Key Combinations in Dart
DESCRIPTION: This code shows how to handle a specific key combination (Shift+N) using a global keyboard listener in a Flutter app.

LANGUAGE: dart
CODE:
bool _handleKey(KeyEvent event) {
  bool isShiftDown = isKeyDown({
    LogicalKeyboardKey.shiftLeft,
    LogicalKeyboardKey.shiftRight,
  });

  if (isShiftDown && event.logicalKey == LogicalKeyboardKey.keyN) {
    _createNewItem();
    return true;
  }

  return false;
}

----------------------------------------

TITLE: Adding a Listener to an Animation in Flutter
DESCRIPTION: Demonstrates how to add a listener to an Animation object, typically used in a State object to trigger a rebuild when the animation value changes.

LANGUAGE: Dart
CODE:
animation.addListener(() {
  setState(() {
    // The state that has changed here is the animation object's value.
  });
});

----------------------------------------

TITLE: Creating Draggable Menu Item in Flutter
DESCRIPTION: Implements a long-press draggable widget that allows menu items to be dragged across the screen.

LANGUAGE: dart
CODE:
LongPressDraggable<Item>(
  data: item,
  dragAnchorStrategy: pointerDragAnchorStrategy,
  feedback: DraggingListItem(
    dragKey: _draggableKey,
    photoProvider: item.imageProvider,
  ),
  child: MenuListItem(
    name: item.name,
    price: item.formattedTotalItemPrice,
    photoProvider: item.imageProvider,
  ),
)

----------------------------------------

TITLE: Using json_serializable to generate JSON serialization code in Dart
DESCRIPTION: Shows how to set up a User class with json_serializable annotations for automated JSON serialization code generation.

LANGUAGE: dart
CODE:
import 'package:json_annotation/json_annotation.dart';

part 'user.g.dart';

@JsonSerializable()
class User {
  User(this.name, this.email);

  String name;
  String email;

  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  Map<String, dynamic> toJson() => _$UserToJson(this);
}

----------------------------------------

TITLE: Recording Performance Timeline in Flutter Integration Test
DESCRIPTION: This snippet shows how to use the traceAction() method to record a performance timeline while scrolling through a list in a Flutter integration test.

LANGUAGE: dart
CODE:
await binding.traceAction(() async {
  // Scroll until the item to be found appears.
  await tester.scrollUntilVisible(
    itemFinder,
    500.0,
    scrollable: listFinder,
  );
}, reportKey: 'scrolling_timeline');

----------------------------------------

TITLE: Adding Hero Widget to Second Screen in Flutter
DESCRIPTION: This snippet shows how to add the Hero widget to the second screen, using the same tag as the first screen to complete the connection for animation.

LANGUAGE: dart
CODE:
Hero(
  tag: 'imageHero',
  child: Image.network('https://picsum.photos/250?image=9'),
)

----------------------------------------

TITLE: Implementing Basic Tap Handler with GestureDetector in Flutter
DESCRIPTION: Shows how to create a custom button wrapped in a GestureDetector that displays a snackbar when tapped. The example includes basic styling with Container and BoxDecoration.

LANGUAGE: dart
CODE:
GestureDetector(
  onTap: () {
    const snackBar = SnackBar(content: Text('Tap'));

    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  },
  child: Container(
    padding: const EdgeInsets.all(12),
    decoration: BoxDecoration(
      color: Colors.lightBlue,
      borderRadius: BorderRadius.circular(8),
    ),
    child: const Text('My Button'),
  ),
)

----------------------------------------

TITLE: Progress Indicator During Initialization
DESCRIPTION: Implementation showing how to display loading progress during different stages of Flutter initialization.

LANGUAGE: javascript
CODE:
{{flutter_js}}
{{flutter_build_config}}

const loading = document.createElement('div');
document.body.appendChild(loading);
loading.textContent = "Loading Entrypoint...";
_flutter.loader.load({
  onEntrypointLoaded: async function(engineInitializer) {
    loading.textContent = "Initializing engine...";
    const appRunner = await engineInitializer.initializeEngine();

    loading.textContent = "Running app...";
    await appRunner.runApp();
  }
});

----------------------------------------

TITLE: Showing SnackBar using ScaffoldMessenger (New Approach)
DESCRIPTION: This snippet shows the new approach of displaying a SnackBar using ScaffoldMessenger. It eliminates the need for a Builder and allows SnackBars to persist across routes.

LANGUAGE: dart
CODE:
Scaffold(
  key: scaffoldKey,
  body: GestureDetector(
    onTap: () {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: const Text('snack'),
        duration: const Duration(seconds: 1),
        action: SnackBarAction(
          label: 'ACTION',
          onPressed: () { },
        ),
      ));
    },
    child: const Text('SHOW SNACK'),
  ),
);

----------------------------------------

TITLE: Implementing StatefulWidget for Opacity Control
DESCRIPTION: Defines a StatefulWidget and its corresponding State class to manage the visibility state of the animated widget.

LANGUAGE: dart
CODE:
class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _visible = true;

  @override
  Widget build(BuildContext context) {
  }
}

----------------------------------------

TITLE: Viewing Flutter Help and Version
DESCRIPTION: Commands to display Flutter CLI help documentation and check the current SDK version.

LANGUAGE: console
CODE:
$ flutter --help --verbose

LANGUAGE: console
CODE:
$ flutter --version

----------------------------------------

TITLE: Pre-downloading Flutter Development Binaries
DESCRIPTION: Command to pre-download Flutter development binaries for offline development

LANGUAGE: console
CODE:
$ flutter precache

----------------------------------------

TITLE: Making HTTP Requests in Flutter
DESCRIPTION: Shows how to make HTTP GET requests and handle responses in Flutter using the http package.

LANGUAGE: Dart
CODE:
import 'dart:io';

LANGUAGE: Dart
CODE:
final url = Uri.parse('https://httpbin.org/ip');
final httpClient = HttpClient();

Future<void> getIPAddress() async {
  final request = await httpClient.getUrl(url);
  final response = await request.close();
  final responseBody = await response.transform(utf8.decoder).join();
  final ip = jsonDecode(responseBody)['origin'] as String;
  setState(() {
    _ipAddress = ip;
  });
}

----------------------------------------

TITLE: Complete Animated Container Implementation
DESCRIPTION: Full implementation of the animated container example including all necessary imports and widget structure.

LANGUAGE: dart
CODE:
import 'dart:math';

import 'package:flutter/material.dart';

void main() => runApp(const AnimatedContainerApp());

class AnimatedContainerApp extends StatefulWidget {
  const AnimatedContainerApp({super.key});

  @override
  State<AnimatedContainerApp> createState() => _AnimatedContainerAppState();
}

class _AnimatedContainerAppState extends State<AnimatedContainerApp> {
  // Define the various properties with default values. Update these properties
  // when the user taps a FloatingActionButton.
  double _width = 50;
  double _height = 50;
  Color _color = Colors.green;
  BorderRadiusGeometry _borderRadius = BorderRadius.circular(8);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: const Text('AnimatedContainer Demo')),
        body: Center(
          child: AnimatedContainer(
            // Use the properties stored in the State class.
            width: _width,
            height: _height,
            decoration: BoxDecoration(
              color: _color,
              borderRadius: _borderRadius,
            ),
            // Define how long the animation should take.
            duration: const Duration(seconds: 1),
            // Provide an optional curve to make the animation feel smoother.
            curve: Curves.fastOutSlowIn,
          ),
        ),
        floatingActionButton: FloatingActionButton(
          // When the user taps the button
          onPressed: () {
            // Use setState to rebuild the widget with new values.
            setState(() {
              // Create a random number generator.
              final random = Random();

              // Generate a random width and height.
              _width = random.nextInt(300).toDouble();
              _height = random.nextInt(300).toDouble();

              // Generate a random color.
              _color = Color.fromRGBO(
                random.nextInt(256),
                random.nextInt(256),
                random.nextInt(256),
                1,
              );

              // Generate a random border radius.
              _borderRadius = BorderRadius.circular(
                random.nextInt(100).toDouble(),
              );
            });
          },
          child: const Icon(Icons.play_arrow),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Animating Integer Values with IntTween in Dart
DESCRIPTION: This code shows how to use IntTween to animate integer values from 0 to 255 over a duration of 500 milliseconds.

LANGUAGE: dart
CODE:
AnimationController controller = AnimationController(
  duration: const Duration(milliseconds: 500),
  vsync: this,
);
Animation<int> alpha = IntTween(begin: 0, end: 255).animate(controller);

----------------------------------------

TITLE: Including Flutter Module in Kotlin-based settings.gradle.kts
DESCRIPTION: This Kotlin code snippet shows how to include a Flutter module as a subproject in the host app's settings.gradle.kts file.

LANGUAGE: kotlin
CODE:
// Include the host app project. Assumed existing content.
include(":app")            
// Replace "flutter_module" with whatever package_name you supplied when you ran:
// `$ flutter create -t module [package_name]
val filePath = settingsDir.parentFile.toString() + "/flutter_module/.android/include_flutter.groovy"
apply(from = File(filePath))

----------------------------------------

TITLE: Loading Text Assets in Dart
DESCRIPTION: Shows how to load a text asset (like a JSON file) using the rootBundle in a Flutter app.

LANGUAGE: dart
CODE:
import 'package:flutter/services.dart' show rootBundle;

Future<String> loadAsset() async {
  return await rootBundle.loadString('assets/config.json');
}

----------------------------------------

TITLE: Creating a Custom Stateless Widget
DESCRIPTION: This snippet shows how to create a custom stateless widget called PaddedText. It demonstrates overriding the build method to return a widget tree with padding and text.

LANGUAGE: dart
CODE:
class PaddedText extends StatelessWidget {
  const PaddedText({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: const Text('Hello, World!'),
    );
  }
}

----------------------------------------

TITLE: Creating a Simple Text Widget in Flutter
DESCRIPTION: Demonstrates how to create a basic Text widget with styling in Flutter.

LANGUAGE: dart
CODE:
Text(
  'I like Flutter!',
  style: TextStyle(fontWeight: FontWeight.bold),
);

----------------------------------------

TITLE: Building a Dynamic List with ListView.builder in Flutter
DESCRIPTION: Demonstrates how to create a dynamic list with an unknown number of items using ListView.builder in Flutter.

LANGUAGE: dart
CODE:
final List<ToDo> items = Repository.fetchTodos();

Widget build(BuildContext context) {
  return ListView.builder(
    itemCount: items.length,
    itemBuilder: (context, idx) {
      var item = items[idx];
      return Padding(
        padding: const EdgeInsets.all(8.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(item.description),
            Text(item.isComplete),
          ],
        ),
      );
    },
  );
}

----------------------------------------

TITLE: Implementing Native View Factory and View in Swift
DESCRIPTION: Create a NativeViewFactory and NativeView class in Swift to handle the creation and management of the native macOS view. This includes setting up the view hierarchy and adding native UI elements.

LANGUAGE: swift
CODE:
import Cocoa
import FlutterMacOS

class NativeViewFactory: NSObject, FlutterPlatformViewFactory {
  private var messenger: FlutterBinaryMessenger

  init(messenger: FlutterBinaryMessenger) {
    self.messenger = messenger
    super.init()
  }

  func create(
    withViewIdentifier viewId: Int64,
    arguments args: Any?
  ) -> NSView {
    return NativeView(
      viewIdentifier: viewId,
      arguments: args,
      binaryMessenger: messenger)
  }

  /// Implementing this method is only necessary when the `arguments` in `createWithFrame` is not `nil`.
  public func createArgsCodec() -> (FlutterMessageCodec & NSObjectProtocol)? {
    return FlutterStandardMessageCodec.sharedInstance()
  }
}

class NativeView: NSView {

  init(
    viewIdentifier viewId: Int64,
    arguments args: Any?,
    binaryMessenger messenger: FlutterBinaryMessenger?
  ) {
    super.init(frame: CGRect(x: 0, y: 0, width: 200, height: 200))
    wantsLayer = true
    layer?.backgroundColor = NSColor.systemBlue.cgColor
    // macOS views can be created here
    createNativeView(view: self)
  }
    
    required init?(coder nsCoder: NSCoder) {
        super.init(coder: nsCoder)
    }
    
  func createNativeView(view _view: NSView) {
    let nativeLabel = NSTextField()
    nativeLabel.frame = CGRect(x: 0, y: 0, width: 180, height: 48.0)
    nativeLabel.stringValue = "Native text from macOS"
    nativeLabel.textColor = NSColor.black
    nativeLabel.font = NSFont.systemFont(ofSize: 14)
    nativeLabel.isBezeled = false
    nativeLabel.focusRingType = .none
    nativeLabel.isEditable = true
    nativeLabel.sizeToFit()
    _view.addSubview(nativeLabel)
  }
}

----------------------------------------

TITLE: Complete Hero Animation Implementation in Flutter
DESCRIPTION: This snippet provides a full implementation of the Hero animation between two screens in a Flutter app. It includes the main app structure, both screens with Hero widgets, and navigation logic.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const HeroApp());

class HeroApp extends StatelessWidget {
  const HeroApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Transition Demo', home: MainScreen());
  }
}

class MainScreen extends StatelessWidget {
  const MainScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Main Screen')),
      body: GestureDetector(
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) {
                return const DetailScreen();
              },
            ),
          );
        },
        child: Hero(
          tag: 'imageHero',
          child: Image.network('https://picsum.photos/250?image=9'),
        ),
      ),
    );
  }
}

class DetailScreen extends StatelessWidget {
  const DetailScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        onTap: () {
          Navigator.pop(context);
        },
        child: Center(
          child: Hero(
            tag: 'imageHero',
            child: Image.network('https://picsum.photos/250?image=9'),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing MethodChannel Handler in Kotlin
DESCRIPTION: Adds a MethodChannel handler to the MainActivity to receive and process method calls from Flutter.

LANGUAGE: kotlin
CODE:
class MainActivity: FlutterActivity() {
    private val CHANNEL = "com.example.flutter_android_activity"

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        GeneratedPluginRegistrant.registerWith(flutterEngine)

        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "launchActivity" -> {
                    try {
                        val message = call.arguments
                        val intent = Intent(this@MainActivity, SecondActivity::class.java)
                        intent.putExtra("message", message.toString())
                        startActivity(intent)
                    } catch (e: Exception){}
                    result.success(true)
                }
                else -> {}
            }
        }
    }
}

----------------------------------------

TITLE: Creating a Flutter App with a Long List
DESCRIPTION: This snippet shows how to create a Flutter app that displays a long list of items using ListView.builder. It includes adding keys to widgets for easier testing.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp(items: List<String>.generate(10000, (i) => 'Item $i')));
}

class MyApp extends StatelessWidget {
  final List<String> items;

  const MyApp({super.key, required this.items});

  @override
  Widget build(BuildContext context) {
    const title = 'Long List';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: ListView.builder(
          // Add a key to the ListView. This makes it possible to
          // find the list and scroll through it in the tests.
          key: const Key('long_list'),
          itemCount: items.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(
                items[index],
                // Add a key to the Text widget for each item. This makes
                // it possible to look for a particular item in the list
                // and verify that the text is correct
                key: Key('item_${index}_text'),
              ),
            );
          },
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Opening a Drawer Programmatically in Flutter
DESCRIPTION: This code shows how to open a drawer programmatically using a custom leading widget in the AppBar and the Scaffold.of(context).openDrawer() method.

LANGUAGE: dart
CODE:
Scaffold(
  appBar: AppBar(
    title: const Text('AppBar with hamburger button'),
    leading: Builder(
      builder: (context) {
        return IconButton(
          icon: const Icon(Icons.menu),
          onPressed: () {
            Scaffold.of(context).openDrawer();
          },
        );
      },
    ),
  ),
  drawer: Drawer(
    child: // Populate the Drawer in the last step.
  ),
);

----------------------------------------

TITLE: Using AppLocalizations for Localized Strings
DESCRIPTION: Access localized strings using AppLocalizations in your Flutter widgets.

LANGUAGE: dart
CODE:
appBar: AppBar(
  // The [AppBar] title text should update its message
  // according to the system locale of the target platform.
  // Switching between English and Spanish locales should
  // cause this text to update.
  title: Text(AppLocalizations.of(context)!.helloWorld),
),

----------------------------------------

TITLE: Complete Example of Fading In Network Image with Asset Placeholder in Flutter
DESCRIPTION: This is a complete Flutter application that demonstrates fading in a network image using a local asset (loading.gif) as a placeholder.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Fade in images';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: Center(
          child: FadeInImage.assetNetwork(
            placeholder: 'assets/loading.gif',
            image: 'https://picsum.photos/250?image=9',
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Creating Shimmer Widget in Flutter
DESCRIPTION: Defines a Shimmer widget that provides the shimmer effect to its child widgets.

LANGUAGE: dart
CODE:
class Shimmer extends StatefulWidget {
  static ShimmerState? of(BuildContext context) {
    return context.findAncestorStateOfType<ShimmerState>();
  }

  const Shimmer({super.key, required this.linearGradient, this.child});

  final LinearGradient linearGradient;
  final Widget? child;

  @override
  ShimmerState createState() => ShimmerState();
}

class ShimmerState extends State<Shimmer> with SingleTickerProviderStateMixin {
  late AnimationController _shimmerController;

  @override
  void initState() {
    super.initState();

    _shimmerController = AnimationController.unbounded(vsync: this)
      ..repeat(min: -0.5, max: 1.5, period: const Duration(milliseconds: 1000));
  }

  @override
  void dispose() {
    _shimmerController.dispose();
    super.dispose();
  }

  LinearGradient get gradient => LinearGradient(
    colors: widget.linearGradient.colors,
    stops: widget.linearGradient.stops,
    begin: widget.linearGradient.begin,
    end: widget.linearGradient.end,
    transform: _SlidingGradientTransform(
      slidePercent: _shimmerController.value,
    ),
  );

  bool get isSized =>
      (context.findRenderObject() as RenderBox?)?.hasSize ?? false;

  Size get size => (context.findRenderObject() as RenderBox).size;

  Offset getDescendantOffset({
    required RenderBox descendant,
    Offset offset = Offset.zero,
  }) {
    final shimmerBox = context.findRenderObject() as RenderBox?;
    return descendant.localToGlobal(offset, ancestor: shimmerBox);
  }

  Listenable get shimmerChanges => _shimmerController;

  @override
  Widget build(BuildContext context) {
    return widget.child ?? const SizedBox();
  }
}

----------------------------------------

TITLE: Complete Banner Ad Widget Implementation in Flutter
DESCRIPTION: A full implementation of a stateful widget that loads and displays a banner ad. This example includes initialization, loading, displaying, and disposing of the ad.

LANGUAGE: dart
CODE:
import 'dart:io';

import 'package:flutter/widgets.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';

class MyBannerAdWidget extends StatefulWidget {
  final AdSize adSize;

  final String adUnitId =
      Platform.isAndroid
          ? 'ca-app-pub-3940256099942544/6300978111'
          : 'ca-app-pub-3940256099942544/2934735716';

  MyBannerAdWidget({super.key, this.adSize = AdSize.banner});

  @override
  State<MyBannerAdWidget> createState() => _MyBannerAdWidgetState();
}

class _MyBannerAdWidgetState extends State<MyBannerAdWidget> {
  BannerAd? _bannerAd;

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: SizedBox(
        width: widget.adSize.width.toDouble(),
        height: widget.adSize.height.toDouble(),
        child:
            _bannerAd == null
                ? const SizedBox()
                : AdWidget(ad: _bannerAd!),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _loadAd();
  }

  @override
  void dispose() {
    _bannerAd?.dispose();
    super.dispose();
  }

  void _loadAd() {
    final bannerAd = BannerAd(
      size: widget.adSize,
      adUnitId: widget.adUnitId,
      request: const AdRequest(),
      listener: BannerAdListener(
        onAdLoaded: (ad) {
          if (!mounted) {
            ad.dispose();
            return;
          }
          setState(() {
            _bannerAd = ad as BannerAd;
          });
        },
        onAdFailedToLoad: (ad, error) {
          debugPrint('BannerAd failed to load: $error');
          ad.dispose();
        },
      ),
    );

    bannerAd.load();
  }
}

----------------------------------------

TITLE: Implementing Expansion and Collapse Animation for ActionButtons in Flutter
DESCRIPTION: Adds animation controller and curved animation to control the expansion and collapse of child ActionButtons. It uses SingleTickerProviderStateMixin for animation control.

LANGUAGE: dart
CODE:
class _ExpandableFabState extends State<ExpandableFab>
    with SingleTickerProviderStateMixin {
  late final AnimationController _controller;
  late final Animation<double> _expandAnimation;
  bool _open = false;

  @override
  void initState() {
    super.initState();
    _open = widget.initialOpen ?? false;
    _controller = AnimationController(
      value: _open ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 250),
      vsync: this,
    );
    _expandAnimation = CurvedAnimation(
      curve: Curves.fastOutSlowIn,
      reverseCurve: Curves.easeOutQuad,
      parent: _controller,
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _toggle() {
    setState(() {
      _open = !_open;
      if (_open) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    });
  }
  }

----------------------------------------

TITLE: Implementing Adaptive Scrollbar in Flutter
DESCRIPTION: Shows how to create a scrollbar that adapts its visibility based on the platform type (desktop vs mobile).

LANGUAGE: dart
CODE:
return Scrollbar(
  thumbVisibility: DeviceType.isDesktop,
  controller: _scrollController,
  child: GridView.count(
    controller: _scrollController,
    padding: const EdgeInsets.all(Insets.extraLarge),
    childAspectRatio: 1,
    crossAxisCount: colCount,
    children: listChildren,
  ),
);

----------------------------------------

TITLE: Implementing Staggered Animation for Menu Items in Flutter
DESCRIPTION: Animates the list items in the menu using the calculated intervals. Each item slides from right to left and fades in, with a staggered delay between items.

LANGUAGE: dart
CODE:
List<Widget> _buildListItems() {
  final listItems = <Widget>[];
  for (var i = 0; i < _menuTitles.length; ++i) {
    listItems.add(
      AnimatedBuilder(
        animation: _staggeredController,
        builder: (context, child) {
          final animationPercent = Curves.easeOut.transform(
            _itemSlideIntervals[i].transform(_staggeredController.value),
          );
          final opacity = animationPercent;
          final slideDistance = (1.0 - animationPercent) * 150;

          return Opacity(
            opacity: opacity,
            child: Transform.translate(
              offset: Offset(slideDistance, 0),
              child: child,
            ),
          );
        },
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 36, vertical: 16),
          child: Text(
            _menuTitles[i],
            textAlign: TextAlign.left,
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.w500),
          ),
        ),
      ),
    );
  }
  return listItems;
}

----------------------------------------

TITLE: Cross-Platform View Implementation
DESCRIPTION: Platform-specific widget selection based on target platform

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  switch (defaultTargetPlatform) {
    case TargetPlatform.android:
    // return widget on Android.
    case TargetPlatform.iOS:
    // return widget on iOS.
    case TargetPlatform.macOS:
    // return widget on macOS.
    default:
      throw UnsupportedError('Unsupported platform view');
  }
}

----------------------------------------

TITLE: Loading Banner Ad in Flutter
DESCRIPTION: Demonstrates how to load a banner ad using the google_mobile_ads package. This includes creating a BannerAd instance, setting up a listener for ad events, and initiating the ad loading process.

LANGUAGE: dart
CODE:
void _loadAd() {
  final bannerAd = BannerAd(
    size: widget.adSize,
    adUnitId: widget.adUnitId,
    request: const AdRequest(),
    listener: BannerAdListener(
      onAdLoaded: (ad) {
        if (!mounted) {
          ad.dispose();
          return;
        }
        setState(() {
          _bannerAd = ad as BannerAd;
        });
      },
      onAdFailedToLoad: (ad, error) {
        debugPrint('BannerAd failed to load: $error');
        ad.dispose();
      },
    ),
  );

  bannerAd.load();
}

----------------------------------------

TITLE: Creating Stateful Widget for Animated Container
DESCRIPTION: Defines a StatefulWidget with properties for width, height, color and border radius that will be animated.

LANGUAGE: dart
CODE:
class AnimatedContainerApp extends StatefulWidget {
  const AnimatedContainerApp({super.key});

  @override
  State<AnimatedContainerApp> createState() => _AnimatedContainerAppState();
}

class _AnimatedContainerAppState extends State<AnimatedContainerApp> {
  // Define the various properties with default values. Update these properties
  // when the user taps a FloatingActionButton.
  double _width = 50;
  double _height = 50;
  Color _color = Colors.green;
  BorderRadiusGeometry _borderRadius = BorderRadius.circular(8);

  @override
  Widget build(BuildContext context) {
    // Fill this out in the next steps.
  }
}

----------------------------------------

TITLE: Monitoring Animation Progress in Flutter
DESCRIPTION: Demonstrates how to use addStatusListener() for notifications of changes to the animation's state, such as starting, stopping, or reversing direction.

LANGUAGE: dart
CODE:
animation = Tween<double>(begin: 0, end: 300).animate(controller)
  ..addStatusListener((status) {
    if (status == AnimationStatus.completed) {
      controller.reverse();
    } else if (status == AnimationStatus.dismissed) {
      controller.forward();
    }
  })
  ..addStatusListener((status) => print('$status'));
controller.forward();

----------------------------------------

TITLE: Creating TextEditingController in Flutter StatefulWidget
DESCRIPTION: Demonstrates the setup of a StatefulWidget with TextEditingController implementation, including proper disposal of resources.

LANGUAGE: dart
CODE:
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

class _MyCustomFormState extends State<MyCustomForm> {
  final myController = TextEditingController();

  @override
  void dispose() {
    myController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
  }
}

----------------------------------------

TITLE: Creating a Tween Animation in Dart
DESCRIPTION: This code shows how to create a Tween object to configure an animation to interpolate between a custom range of values.

LANGUAGE: dart
CODE:
tween = Tween<double>(begin: -200, end: 0);

----------------------------------------

TITLE: Declaring Internet Permission in Android Manifest
DESCRIPTION: This XML snippet shows how to declare internet usage permission in the Android manifest file (AndroidManifest.xml). This step is required for Android apps to make network calls.

LANGUAGE: xml
CODE:
<manifest xmlns:android...>
 ...
 <uses-permission android:name="android.permission.INTERNET" />
 <application ...
</manifest>

----------------------------------------

TITLE: Creating Form with GlobalKey in Flutter
DESCRIPTION: Demonstrates how to create a basic Form widget with a GlobalKey for form validation. Implements a StatefulWidget to properly manage the form's state and key.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  MyCustomFormState createState() {
    return MyCustomFormState();
  }
}

// Define a corresponding State class.
// This class holds data related to the form.
class MyCustomFormState extends State<MyCustomForm> {
  // Create a global key that uniquely identifies the Form widget
  // and allows validation of the form.
  //
  // Note: This is a `GlobalKey<FormState>`,
  // not a GlobalKey<MyCustomFormState>.
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    // Build a Form widget using the _formKey created above.
    return Form(
      key: _formKey,
      child: const Column(
        children: <Widget>[
          // Add TextFormFields and ElevatedButton here.
        ],
      ),
    );
  }
}

----------------------------------------

TITLE: Importing Timeline APIs in Dart
DESCRIPTION: Shows how to import the Timeline and TimelineTask APIs from the dart:developer library for custom event tracing.

LANGUAGE: dart
CODE:
import 'dart:developer';

----------------------------------------

TITLE: Camera Controller Implementation
DESCRIPTION: StatefulWidget implementation for camera control and preview display in Flutter.

LANGUAGE: dart
CODE:
class TakePictureScreen extends StatefulWidget {
  const TakePictureScreen({super.key, required this.camera});

  final CameraDescription camera;

  @override
  TakePictureScreenState createState() => TakePictureScreenState();
}

class TakePictureScreenState extends State<TakePictureScreen> {
  late CameraController _controller;
  late Future<void> _initializeControllerFuture;

  @override
  void initState() {
    super.initState();
    // To display the current output from the Camera,
    // create a CameraController.
    _controller = CameraController(
      // Get a specific camera from the list of available cameras.
      widget.camera,
      // Define the resolution to use.
      ResolutionPreset.medium,
    );

    // Next, initialize the controller. This returns a Future.
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    // Dispose of the controller when the widget is disposed.
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Fill this out in the next steps.
    return Container();
  }
}

----------------------------------------

TITLE: Implementing MethodChannel Handler in C++ (Windows)
DESCRIPTION: Sets up a flutter::MethodChannel and implements the method call handler to get battery level on Windows.

LANGUAGE: cpp
CODE:
flutter::MethodChannel<> channel(
    flutter_controller_->engine()->messenger(), "samples.flutter.dev/battery",
    &flutter::StandardMethodCodec::GetInstance());
channel.SetMethodCallHandler(
    [](const flutter::MethodCall<>& call,
       std::unique_ptr<flutter::MethodResult<>> result) {
      if (call.method_name() == "getBatteryLevel") {
        int battery_level = GetBatteryLevel();
        if (battery_level != -1) {
          result->Success(battery_level);
        } else {
          result->Error("UNAVAILABLE", "Battery level not available.");
        }
      } else {
        result->NotImplemented();
      }
    });

----------------------------------------

TITLE: Updating App Version in pubspec.yaml
DESCRIPTION: Update the version number of the app in the pubspec.yaml file. The version number consists of three numbers separated by dots, optionally followed by a build number after a '+' sign.

LANGUAGE: yaml
CODE:
version: 1.0.0+1

----------------------------------------

TITLE: Complete Example of Fading In Network Image with In-Memory Placeholder in Flutter
DESCRIPTION: This is a complete Flutter application that demonstrates fading in a network image using an in-memory transparent placeholder. It includes a circular progress indicator while the image is loading.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:transparent_image/transparent_image.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Fade in images';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: Stack(
          children: <Widget>[
            const Center(child: CircularProgressIndicator()),
            Center(
              child: FadeInImage.memoryNetwork(
                placeholder: kTransparentImage,
                image: 'https://picsum.photos/250?image=9',
              ),
            ),
          ],
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Returning Data from Selection Screen in Flutter
DESCRIPTION: Updates the onPressed callbacks for both buttons to return data using Navigator.pop().

LANGUAGE: dart
CODE:
ElevatedButton(
  onPressed: () {
    // Close the screen and return "Yep!" as the result.
    Navigator.pop(context, 'Yep!');
  },
  child: const Text('Yep!'),
)

LANGUAGE: dart
CODE:
ElevatedButton(
  onPressed: () {
    // Close the screen and return "Nope." as the result.
    Navigator.pop(context, 'Nope.');
  },
  child: const Text('Nope.'),
)

----------------------------------------

TITLE: Implementing ShimmerLoading Widget in Flutter
DESCRIPTION: Defines a ShimmerLoading widget that applies the shimmer effect to its child widget.

LANGUAGE: dart
CODE:
class ShimmerLoading extends StatefulWidget {
  const ShimmerLoading({
    super.key,
    required this.isLoading,
    required this.child,
  });

  final bool isLoading;
  final Widget child;

  @override
  State<ShimmerLoading> createState() => _ShimmerLoadingState();
}

class _ShimmerLoadingState extends State<ShimmerLoading> {
  Listenable? _shimmerChanges;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (_shimmerChanges != null) {
      _shimmerChanges!.removeListener(_onShimmerChange);
    }
    _shimmerChanges = Shimmer.of(context)?.shimmerChanges;
    if (_shimmerChanges != null) {
      _shimmerChanges!.addListener(_onShimmerChange);
    }
  }

  @override
  void dispose() {
    _shimmerChanges?.removeListener(_onShimmerChange);
    super.dispose();
  }

  void _onShimmerChange() {
    if (widget.isLoading) {
      setState(() {
        // Update the shimmer painting.
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!widget.isLoading) {
      return widget.child;
    }

    // Collect ancestor shimmer info.
    final shimmer = Shimmer.of(context)!;
    if (!shimmer.isSized) {
      // The ancestor Shimmer widget has not laid
      // itself out yet. Return an empty box.
      return const SizedBox();
    }
    final shimmerSize = shimmer.size;
    final gradient = shimmer.gradient;
    final offsetWithinShimmer = shimmer.getDescendantOffset(
      descendant: context.findRenderObject() as RenderBox,
    );

    return ShaderMask(
      blendMode: BlendMode.srcATop,
      shaderCallback: (bounds) {
        return gradient.createShader(
          Rect.fromLTWH(
            -offsetWithinShimmer.dx,
            -offsetWithinShimmer.dy,
            shimmerSize.width,
            shimmerSize.height,
          ),
        );
      },
      child: widget.child,
    );
  }
}

----------------------------------------

TITLE: Adding an Empty Drawer to a Scaffold in Flutter
DESCRIPTION: This code demonstrates how to add an empty Drawer widget to a Scaffold, which will later be populated with content.

LANGUAGE: dart
CODE:
Scaffold(
  appBar: AppBar(title: const Text('AppBar with hamburger button')),
  drawer: Drawer(
    child: // Populate the Drawer in the next step.
  ),
);

----------------------------------------

TITLE: Creating HTML Video Element with HtmlElementView in Dart
DESCRIPTION: This snippet demonstrates how to use HtmlElementView.fromTagName to create and configure an HTML video element within a Flutter web app. It sets the video source and applies styling.

LANGUAGE: dart
CODE:
HtmlElementView.fromTag('video', onElementCreated: (Object video) {
  video as web.HTMLVideoElement;
  video.src = 'https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4';
  video.style.width = '100%';
  video.style.height = '100%';
  // other customizations to the element...
});

----------------------------------------

TITLE: Testing Accessibility Guidelines in Flutter
DESCRIPTION: Unit test example showing how to test accessibility guidelines including tap target sizes, labels, and text contrast using Flutter's Accessibility Guideline API.

LANGUAGE: dart
CODE:
import 'package:flutter_test/flutter_test.dart';
import 'package:your_accessible_app/main.dart';

void main() {
  testWidgets('Follows a11y guidelines', (tester) async {
    final SemanticsHandle handle = tester.ensureSemantics();
    await tester.pumpWidget(const AccessibleApp());

    // Checks that tappable nodes have a minimum size of 48 by 48 pixels
    // for Android.
    await expectLater(tester, meetsGuideline(androidTapTargetGuideline));

    // Checks that tappable nodes have a minimum size of 44 by 44 pixels
    // for iOS.
    await expectLater(tester, meetsGuideline(iOSTapTargetGuideline));

    // Checks that touch targets with a tap or long press action are labeled.
    await expectLater(tester, meetsGuideline(labeledTapTargetGuideline));

    // Checks whether semantic nodes meet the minimum text contrast levels.
    // The recommended text contrast is 3:1 for larger text
    // (18 point and above regular).
    await expectLater(tester, meetsGuideline(textContrastGuideline));
    handle.dispose();
  });
}

----------------------------------------

TITLE: Example Call Graph Structure
DESCRIPTION: Demonstrates the call graph structure for the given package dependency example, showing the direct relationships between packages.

LANGUAGE: plaintext
CODE:
package:a --> package:b -->
                              package:d
package:a --> package:c -->

----------------------------------------

TITLE: Configuring Global Button Themes in Flutter
DESCRIPTION: Demonstrates how to set global button themes for TextButton, ElevatedButton, and OutlinedButton in a MaterialApp.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData.from(colorScheme: ColorScheme.light()).copyWith(
    textButtonTheme: TextButtonThemeData(style: flatButtonStyle),
    elevatedButtonTheme: ElevatedButtonThemeData(style: raisedButtonStyle),
    outlinedButtonTheme: OutlinedButtonThemeData(style: outlineButtonStyle),
  ),
)

----------------------------------------

TITLE: Complete Horizontal List Flutter Application
DESCRIPTION: Full Flutter application implementation showing a horizontal list within a Material app structure. Includes app initialization, scaffold setup, and a container with fixed height for the horizontal list.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Horizontal List';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: Container(
          margin: const EdgeInsets.symmetric(vertical: 20),
          height: 200,
          child: ListView(
            // This next line does the trick.
            scrollDirection: Axis.horizontal,
            children: <Widget>[
              Container(width: 160, color: Colors.red),
              Container(width: 160, color: Colors.blue),
              Container(width: 160, color: Colors.green),
              Container(width: 160, color: Colors.yellow),
              Container(width: 160, color: Colors.orange),
            ],
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Showing FlutterViewController in UIKit with Objective-C
DESCRIPTION: Demonstrates how to present a FlutterViewController using the FlutterEngine instance created in the AppDelegate in a UIKit Objective-C app.

LANGUAGE: objc
CODE:
@import Flutter;
#import "AppDelegate.h"
#import "ViewController.h"

@implementation ViewController
- (void)viewDidLoad {
    [super viewDidLoad];

    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button addTarget:self
               action:@selector(showFlutter)
     forControlEvents:UIControlEventTouchUpInside];
    [button setTitle:@"Show Flutter!" forState:UIControlStateNormal];
    button.backgroundColor = UIColor.blueColor;
    button.frame = CGRectMake(80.0, 210.0, 160.0, 40.0);
    [self.view addSubview:button];
}

- (void)showFlutter {
    FlutterEngine *flutterEngine =
        ((AppDelegate *)UIApplication.sharedApplication.delegate).flutterEngine;
    FlutterViewController *flutterViewController =
        [[FlutterViewController alloc] initWithEngine:flutterEngine nibName:nil bundle:nil];
    [self presentViewController:flutterViewController animated:YES completion:nil];
}
@end

----------------------------------------

TITLE: Adding Web Support to Existing Flutter Project
DESCRIPTION: This command adds web support to an existing Flutter project by creating a web/ directory with necessary assets.

LANGUAGE: console
CODE:
$ flutter create . --platforms web

----------------------------------------

TITLE: Using SlideTransition for Page Transition Animation in Flutter
DESCRIPTION: This snippet demonstrates how to use a SlideTransition widget with an Animation<Offset> to create a sliding animation effect for page transitions.

LANGUAGE: dart
CODE:
transitionsBuilder: (context, animation, secondaryAnimation, child) {
  const begin = Offset(0.0, 1.0);
  const end = Offset.zero;
  final tween = Tween(begin: begin, end: end);
  final offsetAnimation = animation.drive(tween);

  return SlideTransition(position: offsetAnimation, child: child);
},

----------------------------------------

TITLE: Complete Flutter Application with Tap Handling
DESCRIPTION: A full Flutter application example demonstrating tap handling implementation within a structured app architecture. Includes MaterialApp setup, custom StatelessWidget implementations, and gesture detection.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Gesture Demo';

    return const MaterialApp(title: title, home: MyHomePage(title: title));
  }
}

class MyHomePage extends StatelessWidget {
  final String title;

  const MyHomePage({super.key, required this.title});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: const Center(child: MyButton()),
    );
  }
}

class MyButton extends StatelessWidget {
  const MyButton({super.key});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        const snackBar = SnackBar(content: Text('Tap'));

        ScaffoldMessenger.of(context).showSnackBar(snackBar);
      },
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.lightBlue,
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Text('My Button'),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing SubscribeButtonViewModel with Optimistic Updates
DESCRIPTION: Complete implementation of the ViewModel that handles the subscription state and implements optimistic updates with error handling.

LANGUAGE: dart
CODE:
class SubscribeButtonViewModel extends ChangeNotifier {
  SubscribeButtonViewModel({required this.subscriptionRepository});

  final SubscriptionRepository subscriptionRepository;

  bool subscribed = false;
  bool error = false;

  Future<void> subscribe() async {
    if (subscribed) {
      return;
    }

    subscribed = true;
    notifyListeners();

    try {
      await subscriptionRepository.subscribe();
    } catch (e) {
      print('Failed to subscribe: $e');
      subscribed = false;
      error = true;
    } finally {
      notifyListeners();
    }
  }
}

----------------------------------------

TITLE: Platform-Aware Button Order in Dialogs
DESCRIPTION: Demonstrates how to implement platform-specific button ordering in dialogs, accounting for differences between Windows and other platforms.

LANGUAGE: dart
CODE:
TextDirection btnDirection =
    DeviceType.isWindows ? TextDirection.rtl : TextDirection.ltr;
return Row(
  children: [
    const Spacer(),
    Row(
      textDirection: btnDirection,
      children: [
        DialogButton(
          label: 'Cancel',
          onPressed: () => Navigator.pop(context, false),
        ),
        DialogButton(
          label: 'Ok',
          onPressed: () => Navigator.pop(context, true),
        ),
      ],
    ),
  ],
);

----------------------------------------

TITLE: Defining Named Routes in Flutter MaterialApp
DESCRIPTION: Configures the MaterialApp widget with initialRoute and routes properties to define named routes for navigation.

LANGUAGE: dart
CODE:
MaterialApp(
  title: 'Named Routes Demo',
  // Start the app with the "/" named route. In this case, the app starts
  // on the FirstScreen widget.
  initialRoute: '/',
  routes: {
    // When navigating to the "/" route, build the FirstScreen widget.
    '/': (context) => const FirstScreen(),
    // When navigating to the "/second" route, build the SecondScreen widget.
    '/second': (context) => const SecondScreen(),
  },
)

----------------------------------------

TITLE: Displaying Test Type Tradeoffs in Markdown Table
DESCRIPTION: This markdown table shows the trade-offs between different types of tests (unit, widget, and integration) in terms of confidence, maintenance cost, dependencies, and execution speed.

LANGUAGE: markdown
CODE:
| Tradeoff             | Unit   | Widget | Integration |
|----------------------|--------|--------|-------------|
| **Confidence**       | Low    | Higher | Highest     |
| **Maintenance cost** | Low    | Higher | Highest     |
| **Dependencies**     | Few    | More   | Most        |
| **Execution speed**  | Quick  | Quick  | Slow        |

----------------------------------------

TITLE: Creating Custom Focusable Widget in Flutter
DESCRIPTION: Example showing how to create a custom widget that changes appearance when focused using the Focus widget.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  static const String _title = 'Focus Sample';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: _title,
      home: Scaffold(
        appBar: AppBar(title: const Text(_title)),
        body: const Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[MyCustomWidget(), MyCustomWidget()],
        ),
      ),
    );
  }
}

class MyCustomWidget extends StatefulWidget {
  const MyCustomWidget({super.key});

  @override
  State<MyCustomWidget> createState() => _MyCustomWidgetState();
}

class _MyCustomWidgetState extends State<MyCustomWidget> {
  Color _color = Colors.white;
  String _label = 'Unfocused';

  @override
  Widget build(BuildContext context) {
    return Focus(
      onFocusChange: (focused) {
        setState(() {
          _color = focused ? Colors.black26 : Colors.white;
          _label = focused ? 'Focused' : 'Unfocused';
        });
      },
      child: Center(
        child: Container(
          width: 300,
          height: 50,
          alignment: Alignment.center,
          color: _color,
          child: Text(_label),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Package Version Declaration in YAML
DESCRIPTION: Example of declaring package dependencies with version constraints in pubspec.yaml. Shows proper version range syntax and best practices.

LANGUAGE: yaml
CODE:
dependencies:
  url_launcher: ^5.4.0    # Good, any version >= 5.4.0 but < 6.0.0
  image_picker: '5.4.3'   # Not so good, only version 5.4.3 works.

----------------------------------------

TITLE: Displaying a Basic SnackBar in Flutter
DESCRIPTION: This code demonstrates how to create a simple SnackBar with text content and display it using ScaffoldMessenger. It creates a constant SnackBar widget and then shows it using the ScaffoldMessenger's showSnackBar method.

LANGUAGE: dart
CODE:
const snackBar = SnackBar(content: Text('Yay! A SnackBar!'));

// Find the ScaffoldMessenger in the widget tree
// and use it to show a SnackBar.
ScaffoldMessenger.of(context).showSnackBar(snackBar);

----------------------------------------

TITLE: Adding Basic FlutterFragment in Java
DESCRIPTION: Shows how to add a basic FlutterFragment to an Android Activity using Java, including initialization and fragment management.

LANGUAGE: java
CODE:
public class MyActivity extends FragmentActivity {
    private static final String TAG_FLUTTER_FRAGMENT = "flutter_fragment";
    private FlutterFragment flutterFragment;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.my_activity_layout);
        FragmentManager fragmentManager = getSupportFragmentManager();
        flutterFragment = (FlutterFragment) fragmentManager
            .findFragmentByTag(TAG_FLUTTER_FRAGMENT);
        if (flutterFragment == null) {
            flutterFragment = FlutterFragment.createDefault();
            fragmentManager
                .beginTransaction()
                .add(
                    R.id.fragment_container,
                    flutterFragment,
                    TAG_FLUTTER_FRAGMENT
                )
                .commit();
        }
    }
}

----------------------------------------

TITLE: Implementing Flashing Circles Animation
DESCRIPTION: Creates repeating animations for the flashing circles within the typing indicator using sine functions for smooth color transitions.

LANGUAGE: dart
CODE:
class FlashingCircle extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: repeatingController,
      builder: (context, child) {
        final circleFlashPercent = dotIntervals[index].transform(
          repeatingController.value,
        );
        final circleColorPercent = sin(pi * circleFlashPercent);
        return Container(
          width: 12,
          height: 12,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: Color.lerp(
              flashingCircleDarkColor,
              flashingCircleBrightColor,
              circleColorPercent,
            ),
          ),
        );
      },
    );
  }

----------------------------------------

TITLE: Disabling Impeller for iOS Debugging
DESCRIPTION: Command to disable Impeller when debugging Flutter apps on iOS devices using the flutter run command.

LANGUAGE: console
CODE:
flutter run --no-enable-impeller

----------------------------------------

TITLE: Displaying Banner Ad Widget in Flutter
DESCRIPTION: Shows how to create a widget that displays a loaded banner ad. The ad is wrapped in a SafeArea and SizedBox for proper positioning and sizing.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return SafeArea(
    child: SizedBox(
      width: widget.adSize.width.toDouble(),
      height: widget.adSize.height.toDouble(),
      child:
          _bannerAd == null
              ? const SizedBox()
              : AdWidget(ad: _bannerAd!),
    ),
  );
}

----------------------------------------

TITLE: Creating Localized Messages in ARB Files
DESCRIPTION: Define localized messages in ARB (Application Resource Bundle) files for different languages.

LANGUAGE: json
CODE:
{
  "helloWorld": "Hello World!",
  "@helloWorld": {
    "description": "The conventional newborn programmer greeting"
  }
}

----------------------------------------

TITLE: Finding Local Path in Flutter
DESCRIPTION: This snippet demonstrates how to get the path to the documents directory using the path_provider package in Flutter. It's used to determine where to store app-specific files.

LANGUAGE: dart
CODE:
import 'package:path_provider/path_provider.dart';
  // ···
  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory();

    return directory.path;
  }

----------------------------------------

TITLE: Implementing Button Shape Display
DESCRIPTION: Adds animated container with shape decoration that changes based on download status.

LANGUAGE: dart
CODE:
@immutable
class ButtonShapeWidget extends StatelessWidget {
  const ButtonShapeWidget({
    super.key,
    required this.isDownloading,
    required this.isDownloaded,
    required this.isFetching,
    required this.transitionDuration,
  });

  final bool isDownloading;
  final bool isDownloaded;
  final bool isFetching;
  final Duration transitionDuration;

  @override
  Widget build(BuildContext context) {
    final ShapeDecoration shape;
    if (isDownloading || isFetching) {
      shape = const ShapeDecoration(
        shape: CircleBorder(),
        color: Colors.transparent,
      );
    } else {
      shape = const ShapeDecoration(
        shape: StadiumBorder(),
        color: CupertinoColors.lightBackgroundGray,
      );
    }

    return AnimatedContainer(
      duration: transitionDuration,
      curve: Curves.ease,
      width: double.infinity,
      decoration: shape,
      child: const SizedBox(),
    );
  }

----------------------------------------

TITLE: Defining List Item Classes in Flutter
DESCRIPTION: Creates abstract base class ListItem and concrete implementations HeadingItem and MessageItem for representing different types of list content. Each class implements methods to build title and subtitle widgets.

LANGUAGE: dart
CODE:
abstract class ListItem {
  Widget buildTitle(BuildContext context);
  Widget buildSubtitle(BuildContext context);
}

class HeadingItem implements ListItem {
  final String heading;

  HeadingItem(this.heading);

  @override
  Widget buildTitle(BuildContext context) {
    return Text(heading, style: Theme.of(context).textTheme.headlineSmall);
  }

  @override
  Widget buildSubtitle(BuildContext context) => const SizedBox.shrink();
}

class MessageItem implements ListItem {
  final String sender;
  final String body;

  MessageItem(this.sender, this.body);

  @override
  Widget buildTitle(BuildContext context) => Text(sender);

  @override
  Widget buildSubtitle(BuildContext context) => Text(body);
}

----------------------------------------

TITLE: Flutter App Structure
DESCRIPTION: Demonstrates the basic structure of a Flutter app with Cupertino styling

LANGUAGE: dart
CODE:
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const CupertinoApp(home: HomePage());
  }
}

----------------------------------------

TITLE: Detaching FlutterView from FlutterEngine in Android
DESCRIPTION: This snippet shows how to detach the FlutterView from the FlutterEngine when the FlutterView or Activity is no longer visible, to prevent resource leaks.

LANGUAGE: java
CODE:
flutterView.detachFromFlutterEngine();

----------------------------------------

TITLE: Applying Theme to a Container in Flutter
DESCRIPTION: This snippet shows how to apply the app's theme to a Container widget, setting its color and text style using Theme.of(context).

LANGUAGE: dart
CODE:
Container(
  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 12),
  color: Theme.of(context).colorScheme.primary,
  child: Text(
    'Text with a background color',
    // ···
    style: Theme.of(context).textTheme.bodyMedium!.copyWith(
      color: Theme.of(context).colorScheme.onPrimary,
    ),
  ),
),

----------------------------------------

TITLE: Loading JSON Data Using Isolate.run in Flutter
DESCRIPTION: Example of using Isolate.run to load and parse a large JSON file containing photo data without blocking the UI. The code demonstrates how to offload JSON decoding and object creation to a background isolate.

LANGUAGE: dart
CODE:
Future<List<Photo>> getPhotos() async {
  final String jsonString = await rootBundle.loadString('assets/photos.json');
  final List<Photo> photos = await Isolate.run<List<Photo>>(() {
    final List<Object?> photoData = jsonDecode(jsonString) as List<Object?>;
    return photoData.cast<Map<String, Object?>>.map(Photo.fromJson).toList();
  });
  return photos;
}

----------------------------------------

TITLE: Highlighting Repaints in Flutter
DESCRIPTION: This code shows how to enable the highlight repaints feature in Flutter. It sets debugRepaintRainbowEnabled to true, which helps in identifying areas of the app that are repainting too often.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void highlightRepaints() {
  debugRepaintRainbowEnabled = true;
}

----------------------------------------

TITLE: Implementing Scrollable List with SliverList
DESCRIPTION: Creation of a scrollable list using SliverList with SliverChildBuilderDelegate for lazy loading of list items.

LANGUAGE: dart
CODE:
SliverList(
  // Use a delegate to build items as they're scrolled on screen.
  delegate: SliverChildBuilderDelegate(
    // The builder function returns a ListTile with a title that
    // displays the index of the current item.
    (context, index) => ListTile(title: Text('Item #$index')),
    // Builds 1000 ListTiles
    childCount: 1000,
  ),
)

----------------------------------------

TITLE: Implementing History Management in Dart
DESCRIPTION: Example of history management implementation in a custom LLM provider, including construction, updates, and listener notifications

LANGUAGE: dart
CODE:
class GeminiProvider extends LlmProvider with ChangeNotifier {
  @immutable
  GeminiProvider({
    required GenerativeModel model,
    Iterable<ChatMessage>? history,
    ...
  })  : _model = model,
        _history = history?.toList() ?? [],
        ... { ... }

  final GenerativeModel _model;
  final List<ChatMessage> _history;
  ...

  @override
  Stream<String> sendMessageStream(
    String prompt, {
    Iterable<Attachment> attachments = const [],
  }) async* {
    final userMessage = ChatMessage.user(prompt, attachments);
    final llmMessage = ChatMessage.llm();
    _history.addAll([userMessage, llmMessage]);

    final response = _generateStream(
      prompt: prompt,
      attachments: attachments,
      contentStreamGenerator: _chat!.sendMessageStream,
    );

    yield* response.map((chunk) {
      llmMessage.append(chunk);
      return chunk;
    });

    notifyListeners();
  }

  @override
  Iterable<ChatMessage> get history => _history;

  @override
  set history(Iterable<ChatMessage> history) {
    _history.clear();
    _history.addAll(history);
    _chat = _startChat(history);
    notifyListeners();
  }

  ...
}

----------------------------------------

TITLE: Listening for WebSocket Messages in Flutter
DESCRIPTION: Uses a StreamBuilder widget to listen for incoming messages from the WebSocket server and display them in the UI. The stream property is set to the channel's stream.

LANGUAGE: dart
CODE:
StreamBuilder(
  stream: channel.stream,
  builder: (context, snapshot) {
    return Text(snapshot.hasData ? '${snapshot.data}' : '');
  },
),

----------------------------------------

TITLE: Invoking Platform Method and Handling Result in Dart
DESCRIPTION: Calls the platform-specific method to get battery level and updates the UI with the result.

LANGUAGE: dart
CODE:
Future<void> _getBatteryLevel() async {
  String batteryLevel;
  try {
    final result = await platform.invokeMethod<int>('getBatteryLevel');
    batteryLevel = 'Battery level at $result % .';
  } on PlatformException catch (e) {
    batteryLevel = "Failed to get battery level: '${e.message}'."
  }

  setState(() {
    _batteryLevel = batteryLevel;
  });
}

----------------------------------------

TITLE: Complete Flutter App for Reading and Writing Files
DESCRIPTION: This is a complete Flutter application that demonstrates reading and writing files. It includes a counter that persists its value to a file and reads it on app startup. The app uses a CounterStorage class to handle file operations.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(
    MaterialApp(
      title: 'Reading and Writing Files',
      home: FlutterDemo(storage: CounterStorage()),
    ),
  );
}

class CounterStorage {
  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory();

    return directory.path;
  }

  Future<File> get _localFile async {
    final path = await _localPath;
    return File('$path/counter.txt');
  }

  Future<int> readCounter() async {
    try {
      final file = await _localFile;

      // Read the file
      final contents = await file.readAsString();

      return int.parse(contents);
    } catch (e) {
      // If encountering an error, return 0
      return 0;
    }
  }

  Future<File> writeCounter(int counter) async {
    final file = await _localFile;

    // Write the file
    return file.writeAsString('$counter');
  }

}

class FlutterDemo extends StatefulWidget {
  const FlutterDemo({super.key, required this.storage});

  final CounterStorage storage;

  @override
  State<FlutterDemo> createState() => _FlutterDemoState();
}

class _FlutterDemoState extends State<FlutterDemo> {
  int _counter = 0;

  @override
  void initState() {
    super.initState();
    widget.storage.readCounter().then((value) {
      setState(() {
        _counter = value;
      });
    });
  }

  Future<File> _incrementCounter() {
    setState(() {
      _counter++;
    });

    // Write the variable as a string to the file.
    return widget.storage.writeCounter(_counter);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Reading and Writing Files')),
      body: Center(
        child: Text('Button tapped $_counter time${_counter == 1 ? '' : 's'}.'),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}

----------------------------------------

TITLE: Agreeing to Android Licenses in Console
DESCRIPTION: This command initiates the process of reviewing and agreeing to Android SDK platform licenses. It's a necessary step before using Flutter for Android development.

LANGUAGE: console
CODE:
flutter doctor --android-licenses

----------------------------------------

TITLE: Creating a Simple Layout with Padding in Flutter
DESCRIPTION: Demonstrates how to create a basic layout with a button and padding in Flutter.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(title: const Text('Sample App')),
    body: Center(
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.only(left: 20, right: 30),
        ),
        onPressed: () {},
        child: const Text('Hello'),
      ),
    ),
  );
}

----------------------------------------

TITLE: Configuring AndroidManifest.xml for SplitCompat Support
DESCRIPTION: Set the android:name property in AndroidManifest.xml to enable SplitCompat and PlayStoreDeferredComponentManager.

LANGUAGE: xml
CODE:
<manifest ...
  <application
     android:name="io.flutter.embedding.android.FlutterPlayStoreSplitApplication"
        ...
  </application>
</manifest>

----------------------------------------

TITLE: Creating a ListView Builder in Flutter
DESCRIPTION: Builds a ListView using the generated list of items, displaying each item as a ListTile.

LANGUAGE: dart
CODE:
ListView.builder(
  itemCount: items.length,
  itemBuilder: (context, index) {
    return ListTile(title: Text(items[index]));
  },
)

----------------------------------------

TITLE: Creating a shopping list with stateful and stateless widgets
DESCRIPTION: Demonstrates how to combine stateful and stateless widgets to create a shopping list application with toggleable items.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class Product {
  const Product({required this.name});

  final String name;
}

typedef CartChangedCallback = Function(Product product, bool inCart);

class ShoppingListItem extends StatelessWidget {
  ShoppingListItem({
    required this.product,
    required this.inCart,
    required this.onCartChanged,
  }) : super(key: ObjectKey(product));

  final Product product;
  final bool inCart;
  final CartChangedCallback onCartChanged;

  Color _getColor(BuildContext context) {
    return inCart ? Colors.black54 : Theme.of(context).primaryColor;
  }

  TextStyle? _getTextStyle(BuildContext context) {
    if (!inCart) return null;

    return const TextStyle(
      color: Colors.black54,
      decoration: TextDecoration.lineThrough,
    );
  }

  @override
  Widget build(BuildContext context) {
    return ListTile(
      onTap: () {
        onCartChanged(product, inCart);
      },
      leading: CircleAvatar(
        backgroundColor: _getColor(context),
        child: Text(product.name[0]),
      ),
      title: Text(product.name, style: _getTextStyle(context)),
    );
  }
}

class ShoppingList extends StatefulWidget {
  const ShoppingList({required this.products, super.key});

  final List<Product> products;

  @override
  State<ShoppingList> createState() => _ShoppingListState();
}

class _ShoppingListState extends State<ShoppingList> {
  final _shoppingCart = <Product>{};

  void _handleCartChanged(Product product, bool inCart) {
    setState(() {
      if (!inCart) {
        _shoppingCart.add(product);
      } else {
        _shoppingCart.remove(product);
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Shopping List')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 8),
        children: widget.products.map((product) {
          return ShoppingListItem(
            product: product,
            inCart: _shoppingCart.contains(product),
            onCartChanged: _handleCartChanged,
          );
        }).toList(),
      ),
    );
  }
}

void main() {
  runApp(
    const MaterialApp(
      title: 'Shopping App',
      home: ShoppingList(
        products: [
          Product(name: 'Eggs'),
          Product(name: 'Flour'),
          Product(name: 'Chocolate chips'),
        ],
      ),
    ),
  );
}

----------------------------------------

TITLE: Adding Box Shadows in Dart
DESCRIPTION: Adds multiple box shadows to a Container widget using BoxDecoration and BoxShadow in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  margin: const EdgeInsets.only(bottom: 16),
  decoration: BoxDecoration(
    color: Colors.grey[300],
  ),
  child: Center(
    child: Container(
      // red box
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.red[400],
        boxShadow: const <BoxShadow>[
          BoxShadow(
            color: Color(0xcc000000),
            offset: Offset(0, 2),
            blurRadius: 4,
          ),
          BoxShadow(
            color: Color(0x80000000),
            offset: Offset(0, 6),
            blurRadius: 20,
          ),
        ],
      ),
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Initializing Future<Album> in Flutter State
DESCRIPTION: Initialize the Future<Album> in the initState() method of a StatefulWidget to fetch data when the widget is created.

LANGUAGE: dart
CODE:
class _MyAppState extends State<MyApp> {
  late Future<Album> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbum();
  }
  // ...
}

----------------------------------------

TITLE: Creating Tab Content with TabBarView in Flutter
DESCRIPTION: This snippet shows how to create content for each tab using the TabBarView widget in Flutter. It displays icons corresponding to each tab.

LANGUAGE: dart
CODE:
body: const TabBarView(
  children: [
    Icon(Icons.directions_car),
    Icon(Icons.directions_transit),
    Icon(Icons.directions_bike),
  ],
),

----------------------------------------

TITLE: Games Services Controller Implementation
DESCRIPTION: Complete controller class for managing game services functionality including achievements, leaderboards, and authentication

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:games_services/games_services.dart';
import 'package:logging/logging.dart';

class GamesServicesController {
  static final Logger _log = Logger('GamesServicesController');

  final Completer<bool> _signedInCompleter = Completer();

  Future<bool> get signedIn => _signedInCompleter.future;

  Future<void> awardAchievement({
    required String iOS,
    required String android,
  }) async {
    if (!await signedIn) {
      _log.warning('Trying to award achievement when not logged in.');
      return;
    }

    try {
      await GamesServices.unlock(
        achievement: Achievement(androidID: android, iOSID: iOS),
      );
    } catch (e) {
      _log.severe('Cannot award achievement: $e');
    }
  }

  Future<void> initialize() async {
    try {
      await GamesServices.signIn();
      final signedIn = await GamesServices.isSignedIn;
      _signedInCompleter.complete(signedIn);
    } catch (e) {
      _log.severe('Cannot log into GamesServices: $e');
      _signedInCompleter.complete(false);
    }
  }

  Future<void> showAchievements() async {
    if (!await signedIn) {
      _log.severe('Trying to show achievements when not logged in.');
      return;
    }

    try {
      await GamesServices.showAchievements();
    } catch (e) {
      _log.severe('Cannot show achievements: $e');
    }
  }

  Future<void> showLeaderboard() async {
    if (!await signedIn) {
      _log.severe('Trying to show leaderboard when not logged in.');
      return;
    }

    try {
      await GamesServices.showLeaderboards(
        iOSLeaderboardID: 'some_id_from_app_store',
        androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',
      );
    } catch (e) {
      _log.severe('Cannot show leaderboard: $e');
    }
  }

  Future<void> submitLeaderboardScore(int score) async {
    if (!await signedIn) {
      _log.warning('Trying to submit leaderboard when not logged in.');
      return;
    }

    _log.info('Submitting $score to leaderboard.');

    try {
      await GamesServices.submitScore(
        score: Score(
          iOSLeaderboardID: 'some_id_from_app_store',
          androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',
          value: score,
        ),
      );
    } catch (e) {
      _log.severe('Cannot submit leaderboard score: $e');
    }
  }
}

----------------------------------------

TITLE: Initializing Width Animation with Tween in Flutter
DESCRIPTION: Creates a width animation using Tween with specified begin and end values, controlled by CurvedAnimation with a defined interval and ease curve.

LANGUAGE: dart
CODE:
width = Tween<double>(
  begin: 50.0,
  end: 150.0,
).animate(
  CurvedAnimation(
    parent: controller,
    curve: const Interval(
      0.125,
      0.250,
      curve: Curves.ease,
    ),
  ),
),

----------------------------------------

TITLE: Adding Flutter to System PATH
DESCRIPTION: Command to add Flutter binary directory to system PATH temporarily for current terminal session

LANGUAGE: console
CODE:
$ export PATH="$PATH:`pwd`/flutter/bin"

----------------------------------------

TITLE: Fixing License Page Theme Inheritance
DESCRIPTION: Fixes an issue where showLicensePage does not inherit the ambient Theme.

LANGUAGE: Dart
CODE:
Fix `showLicensePage` does not inherit ambient `Theme` by @TahaTesser in 161599

----------------------------------------

TITLE: Dart Snippet for Main Function
DESCRIPTION: VS Code snippet for quickly inserting a main function in Dart, which serves as the entry point for Dart and Flutter applications.

LANGUAGE: dart
CODE:
void main(List<String> args) {  }

----------------------------------------

TITLE: Importing Google Sign-In Auth Extension
DESCRIPTION: Import statement for the extension that enables Google Sign-In authentication for Google APIs.

LANGUAGE: dart
CODE:
import 'package:extension_google_sign_in_as_googleapis_auth/extension_google_sign_in_as_googleapis_auth.dart';

----------------------------------------

TITLE: Achievement Unlock Implementation
DESCRIPTION: Code to unlock achievements in both iOS and Android platforms

LANGUAGE: dart
CODE:
await GamesServices.unlock(
  achievement: Achievement(
    androidID: 'your android id',
    iOSID: 'your ios id',
  ),
);

----------------------------------------

TITLE: Basic HTTP PUT Request
DESCRIPTION: Function to update an album title using HTTP PUT request to JSONPlaceholder API

LANGUAGE: dart
CODE:
Future<http.Response> updateAlbum(String title) {
  return http.put(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{'title': title}),
  );
}

----------------------------------------

TITLE: Using Google Fonts in Flutter
DESCRIPTION: Demonstrates how to use Google Fonts in Flutter, both with default settings and customized properties.

LANGUAGE: dart
CODE:
Text(
  'This is Google Fonts',
  style: GoogleFonts.lato(),
),

LANGUAGE: dart
CODE:
Text(
  'This is Google Fonts',
  style: GoogleFonts.lato(
    textStyle: Theme.of(context).textTheme.displayLarge,
    fontSize: 48,
    fontWeight: FontWeight.w700,
    fontStyle: FontStyle.italic,
  ),
),

----------------------------------------

TITLE: Creating FlutterEngine in SwiftUI
DESCRIPTION: Demonstrates how to create a FlutterEngine object inside a SwiftUI Observable object called FlutterDependencies. The engine is pre-warmed by calling run(), and then injected into a ContentView using the environment() view modifier.

LANGUAGE: swift
CODE:
import SwiftUI
import Flutter
import FlutterPluginRegistrant

@Observable
class FlutterDependencies {
  let flutterEngine = FlutterEngine(name: "my flutter engine")
  init() {
    flutterEngine.run()
    GeneratedPluginRegistrant.register(with: self.flutterEngine);
  }
}

@main
struct MyApp: App {
    @State var flutterDependencies = FlutterDependencies()
    var body: some Scene {
      WindowGroup {
        ContentView()
          .environment(flutterDependencies)
      }
    }
}

----------------------------------------

TITLE: Complete Flutter Application with Swipe to Dismiss
DESCRIPTION: Full implementation of a Flutter app demonstrating swipe-to-dismiss functionality using Dismissible widgets in a ListView.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  MyAppState createState() {
    return MyAppState();
  }
}

class MyAppState extends State<MyApp> {
  final items = List<String>.generate(20, (i) => 'Item ${i + 1}');

  @override
  Widget build(BuildContext context) {
    const title = 'Dismissing Items';

    return MaterialApp(
      title: title,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: ListView.builder(
          itemCount: items.length,
          itemBuilder: (context, index) {
            final item = items[index];
            return Dismissible(
              key: Key(item),
              onDismissed: (direction) {
                setState(() {
                  items.removeAt(index);
                });

                ScaffoldMessenger.of(
                  context,
                ).showSnackBar(SnackBar(content: Text('$item dismissed')));
              },
              background: Container(color: Colors.red),
              child: ListTile(title: Text(item)),
            );
          },
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Writing Basic Unit Test in Dart
DESCRIPTION: Demonstrates how to write a basic unit test for the Counter class using the test package.

LANGUAGE: dart
CODE:
// Import the test package and Counter class
import 'package:counter_app/counter.dart';
import 'package:test/test.dart';

void main() {
  test('Counter value should be incremented', () {
    final counter = Counter();

    counter.increment();

    expect(counter.value, 1);
  });
}

----------------------------------------

TITLE: Basic Flutter Entry Point
DESCRIPTION: Demonstrates how to initialize a basic Flutter app with MaterialApp and HomePage widgets

LANGUAGE: dart
CODE:
void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Text(
          'Hello, World!',
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Adding video_player Dependency in Flutter
DESCRIPTION: Adds the video_player package as a dependency to the Flutter project using the flutter pub add command.

LANGUAGE: console
CODE:
$ flutter pub add video_player

----------------------------------------

TITLE: Flutter Theme Configuration After Migration
DESCRIPTION: Example showing how to configure ThemeData using the new xxxThemeData classes that conform to Flutter's component theme conventions.

LANGUAGE: dart
CODE:
final ThemeData theme = ThemeData(
    cardTheme: CardThemeData(),
    dialogTheme: DialogThemeData(),
    tabBarTheme: TabBarThemeData(),
);

----------------------------------------

TITLE: Using Transformed SVG Asset in Flutter
DESCRIPTION: Shows how to use a transformed SVG asset using the vector_graphics package in a Flutter application.

LANGUAGE: dart
CODE:
import 'package:vector_graphics/vector_graphics.dart';

const Widget logo = VectorGraphic(loader: AssetBytesLoader('assets/logo.svg'));

----------------------------------------

TITLE: Running Flutter App with Specific Flavor
DESCRIPTION: Console command to run Flutter application with a specific flavor configuration.

LANGUAGE: console
CODE:
$ flutter run --flavor staging

----------------------------------------

TITLE: Weather Display Widget in Flutter
DESCRIPTION: Creates a Flutter widget that displays weather data using FutureBuilder and the HomePageViewModel.

LANGUAGE: dart
CODE:
class HomePage extends StatelessWidget {
  const HomePage({super.key});

  final HomePageViewModel viewModel = const HomePageViewModel();

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      child: FutureBuilder<Weather>(
        future: viewModel.load(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return Center(child: Text(snapshot.data.toString()));
          } else {
            return const Center(child: CupertinoActivityIndicator());
          }
        },
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing Dismissible Widget in Flutter
DESCRIPTION: Wraps each list item in a Dismissible widget, enabling swipe-to-dismiss functionality with onDismissed callback and unique key.

LANGUAGE: dart
CODE:
itemBuilder: (context, index) {
  final item = items[index];
  return Dismissible(
    key: Key(item),
    onDismissed: (direction) {
      setState(() {
        items.removeAt(index);
      });

      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('$item dismissed')));
    },
    child: ListTile(title: Text(item)),
  );
},

----------------------------------------

TITLE: Adjusting Text Spacing in Dart
DESCRIPTION: Sets letter spacing for text within a Text widget using the letterSpacing property of TextStyle in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.red[400],
      ),
      child: const Text(
        'Lorem ipsum',
        style: TextStyle(
          color: Colors.white,
          fontSize: 24,
          fontWeight: FontWeight.w900,
          letterSpacing: 4,
        ),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Adding TextFormField with Validation in Flutter
DESCRIPTION: Shows how to add a TextFormField widget with validation logic that checks for empty input. The validator function returns an error message if the field is empty.

LANGUAGE: dart
CODE:
TextFormField(
  // The validator receives the text that the user has entered.
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Please enter some text';
    }
    return null;
  },
),

----------------------------------------

TITLE: Creating Tabs with TabBar in Flutter
DESCRIPTION: This code demonstrates how to create tabs using the TabBar widget in Flutter. It creates three tabs with icons and places them within an AppBar.

LANGUAGE: dart
CODE:
return MaterialApp(
  home: DefaultTabController(
    length: 3,
    child: Scaffold(
      appBar: AppBar(
        bottom: const TabBar(
          tabs: [
            Tab(icon: Icon(Icons.directions_car)),
            Tab(icon: Icon(Icons.directions_transit)),
            Tab(icon: Icon(Icons.directions_bike)),
          ],
        ),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Leaderboard Score Submission
DESCRIPTION: Implementation for submitting scores to game service leaderboards

LANGUAGE: dart
CODE:
await GamesServices.submitScore(
  score: Score(
    iOSLeaderboardID: 'some_id_from_app_store',
    androidLeaderboardID: 'sOmE_iD_fRoM_gPlAy',
    value: 100,
  ),
);

----------------------------------------

TITLE: Configuring Flutter Debug Mode in VS Code launch.json
DESCRIPTION: Example configuration in launch.json file to set Flutter build mode to debug for running the app in VS Code.

LANGUAGE: json
CODE:
"configurations": [
  {
    "name": "Flutter",
    "request": "launch",
    "type": "dart",
    "flutterMode": "debug"
  }
]

----------------------------------------

TITLE: Setting Container Width in CSS
DESCRIPTION: Sets a fixed width and max-width for a nested div in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    width: 100%;
    max-width: 240px;
}

----------------------------------------

TITLE: Creating FFI Plugin via Flutter CLI
DESCRIPTION: Console commands to create a new Flutter FFI plugin that supports multiple platforms including Android, iOS, macOS, Windows and Linux.

LANGUAGE: console
CODE:
$ flutter create --platforms=android,ios,macos,windows,linux --template=plugin_ffi native_add
$ cd native_add

----------------------------------------

TITLE: Basic HTTP Delete Request Implementation
DESCRIPTION: Function that performs a DELETE request to remove an album from a REST API endpoint.

LANGUAGE: dart
CODE:
Future<http.Response> deleteAlbum(String id) async {
  final http.Response response = await http.delete(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
  );

  return response;
}

----------------------------------------

TITLE: Cart Update Implementation in Flutter
DESCRIPTION: Handles the logic for adding items to a customer's cart when dropped.

LANGUAGE: dart
CODE:
void _itemDroppedOnCustomerCart({
  required Item item,
  required Customer customer,
}) {
  setState(() {
    customer.items.add(item);
  });
}

----------------------------------------

TITLE: Creating Counter Class in Dart
DESCRIPTION: Defines a simple Counter class with increment and decrement functionality for demonstration of unit testing.

LANGUAGE: dart
CODE:
class Counter {
  int value = 0;

  void increment() => value++;

  void decrement() => value--;
}

----------------------------------------

TITLE: Implementing CheckboxListTile and SwitchListTile in Flutter
DESCRIPTION: Demonstrates how to create CheckboxListTile and SwitchListTile widgets for toggling options with labels.

LANGUAGE: dart
CODE:
double timeDilation = 1.0;
bool _lights = false;

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      CheckboxListTile(
        title: const Text('Animate Slowly'),
        value: timeDilation != 1.0,
        onChanged: (bool? value) {
          setState(() {
            timeDilation = value! ? 10.0 : 1.0;
          });
        },
        secondary: const Icon(Icons.hourglass_empty),
      ),
      SwitchListTile(
        title: const Text('Lights'),
        value: _lights,
        onChanged: (bool value) {
          setState(() {
            _lights = value;
          });
        },
        secondary: const Icon(Icons.lightbulb_outline),
      ),
    ],
  );
}

----------------------------------------

TITLE: Initializing Sentry SDK in Flutter
DESCRIPTION: This code snippet demonstrates how to initialize the Sentry SDK in a Flutter application. It sets up error capturing and configures the DSN (Data Source Name) for the Sentry service.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';
import 'package:sentry_flutter/sentry_flutter.dart';

Future<void> main() async {
  await SentryFlutter.init(
    (options) => options.dsn = 'https://example@sentry.io/example',
    appRunner: () => runApp(const MyApp()),
  );
}

----------------------------------------

TITLE: Setting zsh as Default Shell on macOS
DESCRIPTION: This command changes the default shell to zsh using the chsh command.

LANGUAGE: console
CODE:
$ chsh -s `which zsh`

----------------------------------------

TITLE: Adding shared_preferences Dependency in Flutter
DESCRIPTION: Use the flutter pub add command to add the shared_preferences package as a dependency to your Flutter project.

LANGUAGE: console
CODE:
flutter pub add shared_preferences

----------------------------------------

TITLE: Centering Components in Dart
DESCRIPTION: Centers a Text widget within a Container using the Center widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Text(
      'Lorem ipsum',
      style: bold24Roboto,
    ),
  ),
);

----------------------------------------

TITLE: Enabling Impeller for macOS Deployment
DESCRIPTION: XML configuration to enable Impeller in the Info.plist file when deploying macOS apps.

LANGUAGE: xml
CODE:
<key>FLTEnableImpeller</key>
<true />

----------------------------------------

TITLE: Styling and Aligning Text in Dart
DESCRIPTION: Creates a Container widget with background color, dimensions, and a Text child with custom style in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: const Text(
    'Lorem ipsum',
    style: TextStyle(
      fontFamily: 'Georgia',
      fontSize: 24,
      fontWeight: FontWeight.bold,
    ),
    textAlign: TextAlign.center,
  ),
);

----------------------------------------

TITLE: Implementing a Progress Indicator in Flutter
DESCRIPTION: Demonstrates how to show a progress indicator for long-running tasks in Flutter.

LANGUAGE: dart
CODE:
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  List<Map<String, Object?>> widgets = [];

  @override
  void initState() {
    super.initState();
    loadData();
  }

  Widget getBody() {
    bool showLoadingDialog = widgets.isEmpty;
    if (showLoadingDialog) {
      return getProgressDialog();
    } else {
      return getListView();
    }
  }

  Widget getProgressDialog() {
    return const Center(child: CircularProgressIndicator());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: getBody(),
    );
  }

  ListView getListView() {
    return ListView.builder(
      itemCount: widgets.length,
      itemBuilder: (context, position) {
        return getRow(position);
      },
    );
  }

  Widget getRow(int i) {
    return Padding(
      padding: const EdgeInsets.all(10),
      child: Text("Row ${widgets[i][\"title\"]}"),
    );
  }

  Future<void> loadData() async {
    final dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');
    final response = await http.get(dataURL);
    setState(() {
      widgets =
          (jsonDecode(response.body) as List).cast<Map<String, Object?>>();
    });
  }
}

----------------------------------------

TITLE: ListView Implementation
DESCRIPTION: Shows how to create a scrollable list view in Flutter with custom row items

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return ListView.builder(
    itemCount: widgets.length,
    itemBuilder: (context, index) {
      return getRow(index);
    },
  );
}

----------------------------------------

TITLE: Implementing ListView.builder for Mixed Content in Flutter
DESCRIPTION: Uses ListView.builder to create a scrollable list that renders different widgets based on item type. Demonstrates how to convert data items into appropriate ListTile widgets.

LANGUAGE: dart
CODE:
ListView.builder(
  itemCount: items.length,
  itemBuilder: (context, index) {
    final item = items[index];

    return ListTile(
      title: item.buildTitle(context),
      subtitle: item.buildSubtitle(context),
    );
  },
)

----------------------------------------

TITLE: Initializing Download Button Base Structure
DESCRIPTION: Creates the base StatelessWidget structure for the download button with basic widget definition.

LANGUAGE: dart
CODE:
@immutable
class DownloadButton extends StatelessWidget {
  const DownloadButton({super.key});

  @override
  Widget build(BuildContext context) {
    // TODO:
    return const SizedBox();
  }
}

----------------------------------------

TITLE: Initializing Firebase in Flutter
DESCRIPTION: Code to initialize Firebase before running the app, ensuring Firebase is ready for use.

LANGUAGE: dart
CODE:
WidgetsFlutterBinding.ensureInitialized();

await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

----------------------------------------

TITLE: Basic stderr Logging in Flutter
DESCRIPTION: Example of logging to standard error in a Flutter application using stderr.writeln()

LANGUAGE: dart
CODE:
stderr.writeln('print me');

----------------------------------------

TITLE: Setting PUB_HOSTED_URL for Flutter SDK Installation
DESCRIPTION: Sets the PUB_HOSTED_URL environment variable to use a mirror site for package downloads.

LANGUAGE: console
CODE:
{{envvarset}}PUB_HOSTED_URL="https://pub.flutter-io.cn"

----------------------------------------

TITLE: TabBar Implementation After Migration
DESCRIPTION: Updated TabBar implementation using the new tabAlignment property to explicitly set tab alignment to start, removing the default 52.0 pixel offset.

LANGUAGE: dart
CODE:
TabBar(
  tabAlignment: TabAlignment.start,
  isScrollable: true,
  tabs: List<Tab>.generate(
    count,
    (int index) => Tab(text: 'Tab $index'),
  ).toList(),
);

----------------------------------------

TITLE: Implementing Mouse Over Effects in Dart
DESCRIPTION: This code shows how to create custom rollover and hover effects using MouseRegion in a Flutter app.

LANGUAGE: dart
CODE:
return MouseRegion(
  onEnter: (_) => setState(() => _isMouseOver = true),
  onExit: (_) => setState(() => _isMouseOver = false),
  onHover: (e) => print(e.localPosition),
  child: Container(
    height: 500,
    color: _isMouseOver ? Colors.blue : Colors.black,
  ),
);

----------------------------------------

TITLE: Creating a Widget Tree in Flutter
DESCRIPTION: Demonstrates how to create a more complex widget tree in Flutter using Material Design widgets.

LANGUAGE: Dart
CODE:
// Flutter
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Welcome to Flutter',
      home: Scaffold(
        appBar: AppBar(title: const Text('Welcome to Flutter')),
        body: const Center(child: Text('Hello world')),
      ),
    );
  }
}

----------------------------------------

TITLE: Configuring Environment Variables for Flutter Mirror (macOS/Linux/ChromeOS)
DESCRIPTION: Sets environment variables for PUB_HOSTED_URL and FLUTTER_STORAGE_BASE_URL to use a Flutter mirror site in China. This example uses the CFUG mirror.

LANGUAGE: shell
CODE:
export PUB_HOSTED_URL={{mirror.urls.pubhosted}};
export FLUTTER_STORAGE_BASE_URL={{mirror.urls.flutterstorage}}

----------------------------------------

TITLE: Complete Flutter Integration Test for Performance Profiling
DESCRIPTION: This is a complete example of a Flutter integration test that measures performance while scrolling through a list of items, including test setup and performance recording.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:your_package/main.dart';

void main() {
  final binding = IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  testWidgets('Counter increments smoke test', (tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(
      MyApp(items: List<String>.generate(10000, (i) => 'Item $i')),
    );

    final listFinder = find.byType(Scrollable);
    final itemFinder = find.byKey(const ValueKey('item_50_text'));

    await binding.traceAction(() async {
      // Scroll until the item to be found appears.
      await tester.scrollUntilVisible(
        itemFinder,
        500.0,
        scrollable: listFinder,
      );
    }, reportKey: 'scrolling_timeline');
  });
}

----------------------------------------

TITLE: Implementing Multi-View Flutter Application
DESCRIPTION: Dart implementation of a MultiViewApp widget that handles multiple Flutter views

LANGUAGE: dart
CODE:
import 'dart:ui' show FlutterView;
import 'package:flutter/widgets.dart';

class MultiViewApp extends StatefulWidget {
  const MultiViewApp({super.key, required this.viewBuilder});

  final WidgetBuilder viewBuilder;

  @override
  State<MultiViewApp> createState() => _MultiViewAppState();
}

class _MultiViewAppState extends State<MultiViewApp> with WidgetsBindingObserver {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _updateViews();
  }

  @override
  void didUpdateWidget(MultiViewApp oldWidget) {
    super.didUpdateWidget(oldWidget);
    _views.clear();
    _updateViews();
  }

  @override
  void didChangeMetrics() {
    _updateViews();
  }

  Map<Object, Widget> _views = <Object, Widget>{};

  void _updateViews() {
    final Map<Object, Widget> newViews = <Object, Widget>{};
    for (final FlutterView view in WidgetsBinding.instance.platformDispatcher.views) {
      final Widget viewWidget = _views[view.viewId] ?? _createViewWidget(view);
      newViews[view.viewId] = viewWidget;
    }
    setState(() {
      _views = newViews;
    });
  }

  Widget _createViewWidget(FlutterView view) {
    return View(
      view: view,
      child: Builder(
        builder: widget.viewBuilder,
      ),
    );
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ViewCollection(views: _views.values.toList(growable: false));
  }
}

----------------------------------------

TITLE: Implementing Swipe to Dismiss in Flutter
DESCRIPTION: Shows how to implement swipe-to-dismiss functionality using the Dismissible widget in Flutter.

LANGUAGE: Dart
CODE:
return Dismissible(
  key: Key(widget.key.toString()),
  onDismissed: (dismissDirection) {
    cards.removeLast();
  },
  child: Container(
    //...
  ),
);

----------------------------------------

TITLE: Saving Performance Results in Flutter Integration Test Driver
DESCRIPTION: This code demonstrates how to save performance results from a Flutter integration test, including writing a timeline summary and full timeline data to disk for later analysis.

LANGUAGE: dart
CODE:
import 'package:flutter_driver/flutter_driver.dart' as driver;
import 'package:integration_test/integration_test_driver.dart';

Future<void> main() {
  return integrationDriver(
    responseDataCallback: (data) async {
      if (data != null) {
        final timeline = driver.Timeline.fromJson(
          data['scrolling_timeline'] as Map<String, dynamic>,
        );

        // Convert the Timeline into a TimelineSummary that's easier to
        // read and understand.
        final summary = driver.TimelineSummary.summarize(timeline);

        // Then, write the entire timeline to disk in a json format.
        // This file can be opened in the Chrome browser's tracing tools
        // found by navigating to chrome://tracing.
        // Optionally, save the summary to disk by setting includeSummary
        // to true
        await summary.writeTimelineToFile(
          'scrolling_timeline',
          pretty: true,
          includeSummary: true,
        );
      }
    },
  );
}

----------------------------------------

TITLE: Displaying Video Player Widget in Flutter
DESCRIPTION: Uses FutureBuilder to display a loading spinner while the video initializes, then shows the video player wrapped in an AspectRatio widget.

LANGUAGE: dart
CODE:
FutureBuilder(
  future: _initializeVideoPlayerFuture,
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.done) {
      // If the VideoPlayerController has finished initialization, use
      // the data it provides to limit the aspect ratio of the video.
      return AspectRatio(
        aspectRatio: _controller.value.aspectRatio,
        // Use the VideoPlayer widget to display the video.
        child: VideoPlayer(_controller),
      );
    } else {
      // If the VideoPlayerController is still initializing, show a
      // loading spinner.
      return const Center(child: CircularProgressIndicator());
    }
  },
)

----------------------------------------

TITLE: Displaying Network Image in Flutter
DESCRIPTION: This snippet demonstrates how to use the Image.network() constructor to display an image from a URL in Flutter.

LANGUAGE: dart
CODE:
Image.network('https://picsum.photos/250?image=9'),

----------------------------------------

TITLE: Basic Flutter Widget Example
DESCRIPTION: Example showing a basic Flutter widget implementation that supports hot reload.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(onTap: () => print('tapped'));
  }
}

----------------------------------------

TITLE: Creating an Adaptive Layout with LayoutBuilder in Flutter
DESCRIPTION: Shows how to create a responsive layout that adapts to different screen sizes using LayoutBuilder in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return LayoutBuilder(
    builder: (BuildContext context, BoxConstraints constraints) {
      if (constraints.maxWidth <= 600) {
        return _MobileLayout();
      } else {
        return _DesktopLayout();
      }
    },
  );
}

----------------------------------------

TITLE: Reloading Shell Configuration in Zsh
DESCRIPTION: This command reloads the Zsh configuration file to apply changes made to environment variables, specifically after updating the JAVA_HOME path.

LANGUAGE: console
CODE:
source ~/.zshrc

----------------------------------------

TITLE: Android Manifest Configuration for Native Libraries
DESCRIPTION: XML configuration to control native library compression in Android manifest file by setting extractNativeLibs property.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     package="com.example.your_app_name" >
      <application
          android:name="io.flutter.app.FlutterApplication"
          android:label="your_app_name"
          android:icon="@mipmap/ic_launcher"
          android:extractNativeLibs="true"
          tools:replace="android:extractNativeLibs">

----------------------------------------

TITLE: Uninitialized Variables in Dart
DESCRIPTION: Demonstrates that uninitialized variables in Dart have a value of null, and introduces nullable types.

LANGUAGE: Dart
CODE:
// Dart
var name; // == null; raises a linter warning
int? x; // == null

----------------------------------------

TITLE: Defining Uniforms in GLSL Shader
DESCRIPTION: Example of declaring uniform values in a GLSL fragment shader, including float, vec2, vec4, and sampler2D types.

LANGUAGE: glsl
CODE:
uniform float uScale;
uniform sampler2D uTexture;
uniform vec2 uMagnitude;
uniform vec4 uColor;

----------------------------------------

TITLE: Self-Managed State Example with TapboxA
DESCRIPTION: Example of a widget managing its own state internally, demonstrating a simple tap interaction that toggles between active and inactive states.

LANGUAGE: dart
CODE:
class TapboxA extends StatefulWidget {
  const TapboxA({super.key});

  @override
  State<TapboxA> createState() => _TapboxAState();
}

class _TapboxAState extends State<TapboxA> {
  bool _active = false;

  void _handleTap() {
    setState(() {
      _active = !_active;
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: _handleTap,
      child: Container(
        width: 200,
        height: 200,
        decoration: BoxDecoration(
          color: _active ? Colors.lightGreen[700] : Colors.grey[600],
        ),
        child: Center(
          child: Text(
            _active ? 'Active' : 'Inactive',
            style: const TextStyle(fontSize: 32, color: Colors.white),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Creating a Form with Validation in Flutter
DESCRIPTION: Shows how to create a form with validation using Form and TextFormField widgets in Flutter.

LANGUAGE: Dart
CODE:
@override
Widget build(BuildContext context) {
  return Form(
    key: formKey,
    child: Column(
      children: <Widget>[
        TextFormField(
          validator: (value) {
            if (value != null && value.contains('@')) {
              return null;
            }
            return 'Not a valid email.';
          },
          onSaved: (val) {
            _email = val;
          },
          decoration: const InputDecoration(
            hintText: 'Enter your email',
            labelText: 'Email',
          ),
        ),
        ElevatedButton(onPressed: _submit, child: const Text('Login')),
      ],
    ),
  );
}

----------------------------------------

TITLE: Implementing Basic Flutter Widget Structure with Image and Text
DESCRIPTION: Creates a Flutter application with a StatefulWidget that displays an owl image, a show details button, and basic information text. The code sets up the foundation for implementing an opacity animation between states. It includes a main widget tree with MaterialApp, Scaffold, and custom FadeInDemo widget.

LANGUAGE: dart
CODE:
// Copyright 2019 the Dart project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file.

import 'package:flutter/material.dart';

const owlUrl =
    'https://raw.githubusercontent.com/flutter/website/main/src/content/assets/images/docs/owl.jpg';

class FadeInDemo extends StatefulWidget {
  const FadeInDemo({super.key});

  @override
  State<FadeInDemo> createState() => _FadeInDemoState();
}

class _FadeInDemoState extends State<FadeInDemo> {
  @override
  Widget build(BuildContext context) {
    return ListView(children: <Widget>[
      Image.network(owlUrl),
      TextButton(
        child: const Text(
          'Show Details',
          style: TextStyle(color: Colors.blueAccent),
        ),
        onPressed: () => {},
      ),
      const Column(
        children: [
          Text('Type: Owl'),
          Text('Age: 39'),
          Text('Employment: None'),
        ],
      )
    ]);
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: Scaffold(
        body: Center(
          child: FadeInDemo(),
        ),
      ),
    );
  }
}

void main() {
  runApp(
    const MyApp(),
  );
}

----------------------------------------

TITLE: Completing ExpandableFab Implementation in Flutter
DESCRIPTION: Finalizes the ExpandableFab widget by incorporating the _ExpandingActionButton for each child ActionButton and managing their positioning and animation.

LANGUAGE: dart
CODE:
class _ExpandableFabState extends State<ExpandableFab>
    with SingleTickerProviderStateMixin {
  @override
  Widget build(BuildContext context) {
    return SizedBox.expand(
      child: Stack(
        alignment: Alignment.bottomRight,
        clipBehavior: Clip.none,
        children: [
          _buildTapToCloseFab(),
          ..._buildExpandingActionButtons(),
          _buildTapToOpenFab(),
        ],
      ),
    );
  }

  List<Widget> _buildExpandingActionButtons() {
    final children = <Widget>[];
    final count = widget.children.length;
    final step = 90.0 / (count - 1);
    for (
      var i = 0, angleInDegrees = 0.0;
      i < count;
      i++, angleInDegrees += step
    ) {
      children.add(
        _ExpandingActionButton(
          directionInDegrees: angleInDegrees,
          maxDistance: widget.distance,
          progress: _expandAnimation,
          child: widget.children[i],
        ),
      );
    }
    return children;
  }
  }

----------------------------------------

TITLE: Creating User Input Widget for Album Title in Flutter
DESCRIPTION: Implements a Column widget with a TextField for user input and an ElevatedButton to trigger the album creation process.

LANGUAGE: dart
CODE:
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: <Widget>[
    TextField(
      controller: _controller,
      decoration: const InputDecoration(hintText: 'Enter Title'),
    ),
    ElevatedButton(
      onPressed: () {
        setState(() {
          _futureAlbum = createAlbum(_controller.text);
        });
      },
      child: const Text('Create Data'),
    ),
  ],
)

----------------------------------------

TITLE: Registering Snap Name
DESCRIPTION: Commands to log in to Snapcraft and register a snap name for publishing.

LANGUAGE: console
CODE:
$ snapcraft login
$ snapcraft register

----------------------------------------

TITLE: Accessing Flutter Assets in iOS (Objective-C)
DESCRIPTION: Shows how to access Flutter assets in iOS platform code using NSBundle in Objective-C.

LANGUAGE: objectivec
CODE:
NSString* key = [registrar lookupKeyForAsset:@"icons/heart.png"];
NSString* path = [[NSBundle mainBundle] pathForResource:key ofType:nil];

----------------------------------------

TITLE: Getting Started with Flutter App
DESCRIPTION: Shows how to initialize a basic Flutter app with a main function and MyApp widget

LANGUAGE: dart
CODE:
void main() {
  runApp(const MyApp());
}

----------------------------------------

TITLE: Initial Draggable Card Setup in Flutter
DESCRIPTION: Basic setup of a stateful widget that will become a draggable card. Includes the main app structure and placeholder widget.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(home: PhysicsCardDragDemo()));
}

class PhysicsCardDragDemo extends StatelessWidget {
  const PhysicsCardDragDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: const DraggableCard(child: FlutterLogo(size: 128)),
    );
  }
}

class DraggableCard extends StatefulWidget {
  const DraggableCard({required this.child, super.key});

  final Widget child;

  @override
  State<DraggableCard> createState() => _DraggableCardState();
}

class _DraggableCardState extends State<DraggableCard> {
  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Align(child: Card(child: widget.child));
  }
}

----------------------------------------

TITLE: Handling User Events in Flutter MVVM Architecture
DESCRIPTION: This code demonstrates how to handle user events in a Flutter view using MVVM architecture. It shows the implementation of a delete booking functionality triggered by a dismissible widget.

LANGUAGE: dart
CODE:
SliverList.builder(
  itemCount: widget.viewModel.bookings.length,
  itemBuilder: (_, index) => _Booking(
    key: ValueKey(viewModel.bookings[index].id),
    booking: viewModel.bookings[index],
    onTap: () => context.push(
      Routes.bookingWithId(viewModel.bookings[index].id)
    ),
    onDismissed: (_) =>
      viewModel.deleteBooking.execute(widget.viewModel.bookings[index].id),
  ),
),

----------------------------------------

TITLE: Flutter Web App Initial Setup
DESCRIPTION: Basic structure of a Flutter web app with a sign-up form containing text fields and a submit button.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const SignUpApp());

class SignUpApp extends StatelessWidget {
  const SignUpApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(routes: {'/': (context) => const SignUpScreen()});
  }
}

----------------------------------------

TITLE: Fading In Network Image with In-Memory Placeholder in Flutter
DESCRIPTION: This snippet demonstrates how to use FadeInImage.memoryNetwork to display a network image with a transparent placeholder. It requires the transparent_image package.

LANGUAGE: dart
CODE:
FadeInImage.memoryNetwork(
  placeholder: kTransparentImage,
  image: 'https://picsum.photos/250?image=9',
),

----------------------------------------

TITLE: Defining a View Model in Dart for Flutter MVVM Architecture
DESCRIPTION: This snippet shows how to define a view model class in Dart for a Flutter app using MVVM architecture. It demonstrates dependency injection of repositories and the basic structure of a view model.

LANGUAGE: dart
CODE:
class HomeViewModel {
  HomeViewModel({
    required BookingRepository bookingRepository,
    required UserRepository userRepository,
  }) :
    // Repositories are manually assigned because they're private members.
    _bookingRepository = bookingRepository,
    _userRepository = userRepository;

  final BookingRepository _bookingRepository;
  final UserRepository _userRepository;
  // ...
}

----------------------------------------

TITLE: Adding Flutter SDK to PATH in Shell Configuration
DESCRIPTION: This snippet shows how to add the Flutter SDK directory to the PATH environment variable in a shell configuration file. It uses a placeholder [PATH_OF_FLUTTER_GIT_DIRECTORY] which should be replaced with the actual path to the Flutter git repository.

LANGUAGE: console
CODE:
$ export PATH="$PATH:[PATH_OF_FLUTTER_GIT_DIRECTORY]/bin"

----------------------------------------

TITLE: Building Flutter macOS Release
DESCRIPTION: Command to create a release build of the Flutter macOS application.

LANGUAGE: console
CODE:
flutter build macos

----------------------------------------

TITLE: Migrating Button styleFrom Color Properties in Flutter
DESCRIPTION: Updates the usage of deprecated color properties in TextButton, ElevatedButton, and OutlinedButton styleFrom methods to their new equivalents. This change aligns the API with updated Material Design specifications.

LANGUAGE: dart
CODE:
TextButton.styleFrom(
  primary: Colors.red,
  onSurface: Colors.black,
);
ElevatedButton.styleFrom(
  primary: Colors.red,
  onPrimary: Colors.blue,
  onSurface: Colors.black,
);
OutlinedButton.styleFrom(
  primary: Colors.red,
  onSurface: Colors.black,
);

LANGUAGE: dart
CODE:
TextButton.styleFrom(
  foregroundColor: Colors.red,
  disabledForegroundColor: Colors.black,
);
ElevatedButton.styleFrom(
  backgroundColor: Colors.red,
  foregroundColor: Colors.blue,
  disabledForegroundColor: Colors.black,
);
OutlinedButton.styleFrom(
  foregroundColor: Colors.red,
  disabledForegroundColor: Colors.black,
);

----------------------------------------

TITLE: Flutter Asset Configuration
DESCRIPTION: Demonstrates how to configure assets and fonts in a Flutter app's pubspec.yaml file

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - assets/my_icon.png
    - assets/background.png
  fonts:
    - family: FiraSans
      fonts:
        - asset: fonts/FiraSans-Regular.ttf

----------------------------------------

TITLE: Implementing Hybrid Composition Platform View in Dart
DESCRIPTION: Dart implementation for hybrid composition platform view including necessary imports and build method. Uses PlatformViewLink and AndroidViewSurface for rendering native Android views.

LANGUAGE: dart
CODE:
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  const Map<String, dynamic> creationParams = <String, dynamic>{};

  return PlatformViewLink(
    viewType: viewType,
    surfaceFactory: (context, controller) {
      return AndroidViewSurface(
        controller: controller as AndroidViewController,
        gestureRecognizers: const <Factory<OneSequenceGestureRecognizer>>{},
        hitTestBehavior: PlatformViewHitTestBehavior.opaque,
      );
    },
    onCreatePlatformView: (params) {
      return PlatformViewsService.initSurfaceAndroidView(
          id: params.id,
          viewType: viewType,
          layoutDirection: TextDirection.ltr,
          creationParams: creationParams,
          creationParamsCodec: const StandardMessageCodec(),
          onFocus: () {
            params.onFocusChanged(true);
          },
        )
        ..addOnPlatformViewCreatedListener(params.onPlatformViewCreated)
        ..create();
    },
  );
}

----------------------------------------

TITLE: Accessing ColorScheme in Flutter Before Migration
DESCRIPTION: Shows how to access the default ColorScheme from ThemeData before the Material 3 token update.

LANGUAGE: dart
CODE:
final ColorScheme colors = ThemeData().colorScheme;

----------------------------------------

TITLE: Building the Subscribe Button UI Component
DESCRIPTION: Implementation of the UI component with state management and error handling using ListenableBuilder.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return ListenableBuilder(
    listenable: widget.viewModel,
    builder: (context, _) {
      return FilledButton(
        onPressed: widget.viewModel.subscribe,
        style:
            widget.viewModel.subscribed
                ? SubscribeButtonStyle.subscribed
                : SubscribeButtonStyle.unsubscribed,
        child:
            widget.viewModel.subscribed
                ? const Text('Subscribed')
                : const Text('Subscribe'),
      );
    },
  );
}

----------------------------------------

TITLE: Extending Command Pattern with Different Argument Types
DESCRIPTION: Demonstrates how to extend the Command pattern to support different numbers of arguments using Command0 and Command1.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  HomeViewModel() {
    load = Command0(_load)..execute();
    edit = Command1<String>(_edit);
  }

  User? get user => // ...

  // Command0 accepts 0 arguments
  late final Command0 load;

  // Command1 accepts 1 argument
  late final Command1 edit;

  Future<void> _load() async {
    // load user
  }

  Future<void> _edit(String name) async {
    // edit user
  }
}

----------------------------------------

TITLE: Implementing Animated Container in Flutter
DESCRIPTION: This code snippet demonstrates how to create an animated container in Flutter using the AnimatedContainer widget. It includes random generation of color, border radius, and margin, as well as a stateful widget to manage the animation state.

LANGUAGE: dart
CODE:
import 'dart:math';

import 'package:flutter/material.dart';

double randomBorderRadius() {
  return Random().nextDouble() * 64;
}

double randomMargin() {
  return Random().nextDouble() * 64;
}

Color randomColor() {
  return Color(0xFFFFFFFF & Random().nextInt(0xFFFFFFFF));
}

class AnimatedContainerDemo extends StatefulWidget {
  const AnimatedContainerDemo({super.key});

  @override
  State<AnimatedContainerDemo> createState() => _AnimatedContainerDemoState();
}

class _AnimatedContainerDemoState extends State<AnimatedContainerDemo> {
  late Color color;
  late double borderRadius;
  late double margin;

  @override
  void initState() {
    super.initState();
    color = randomColor();
    borderRadius = randomBorderRadius();
    margin = randomMargin();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          children: <Widget>[
            SizedBox(
              width: 128,
              height: 128,
              child: Container(
                margin: EdgeInsets.all(margin),
                decoration: BoxDecoration(
                  color: color,
                  borderRadius: BorderRadius.circular(borderRadius),
                ),
              ),
            ),
            ElevatedButton(
              child: const Text('Change'),
              onPressed: () => {},
            ),
          ],
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: AnimatedContainerDemo(),
    );
  }
}

void main() {
  runApp(
    const MyApp(),
  );
}

----------------------------------------

TITLE: Adding ConstrainedBox inside SingleChildScrollView in Flutter
DESCRIPTION: This snippet demonstrates how to add a ConstrainedBox as a child of SingleChildScrollView. The ConstrainedBox is configured with a minimum height equal to the maximum height of the LayoutBuilder constraints.

LANGUAGE: dart
CODE:
LayoutBuilder(
  builder: (context, constraints) {
    return SingleChildScrollView(
      child: ConstrainedBox(
        constraints: BoxConstraints(minHeight: constraints.maxHeight),
        child: Placeholder(),
      ),
    );
  },
);

----------------------------------------

TITLE: UI Update Implementation
DESCRIPTION: Widget code showing how to update the UI after performing a delete operation.

LANGUAGE: dart
CODE:
Column(
  mainAxisAlignment: MainAxisAlignment.center,
  children: <Widget>[
    Text(snapshot.data?.title ?? 'Deleted'),
    ElevatedButton(
      child: const Text('Delete Data'),
      onPressed: () {
        setState(() {
          _futureAlbum = deleteAlbum(
            snapshot.data!.id.toString(),
          );
        });
      },
    ),
  ],
);

----------------------------------------

TITLE: Updating Pigeon Configuration for New Directory Structure
DESCRIPTION: This snippet shows how to update the Pigeon input file to reflect the new directory structure after migrating to Swift Package Manager support.

LANGUAGE: dart
CODE:
javaOptions: JavaOptions(),
objcHeaderOut: 'ios/plugin_name/Sources/plugin_name/include/plugin_name/messages.g.h',
objcSourceOut: 'ios/plugin_name/Sources/plugin_name/messages.g.m',
objcOptions: ObjcOptions(
  headerIncludePath: './include/plugin_name/messages.g.h',
),
copyrightHeader: 'pigeons/copyright.txt',

----------------------------------------

TITLE: Opening iOS Archive in Xcode
DESCRIPTION: Command to open the built iOS archive in Xcode for further analysis and distribution.

LANGUAGE: bash
CODE:
open build/ios/archive/*.xcarchive

----------------------------------------

TITLE: Adding Custom Email Button to Context Menu
DESCRIPTION: Example showing how to add a custom 'Send email' button to the default context menu when an email address is selected.

LANGUAGE: dart
CODE:
TextField(
  contextMenuBuilder: (context, editableTextState) {
    final TextEditingValue value = editableTextState.textEditingValue;
    final List<ContextMenuButtonItem> buttonItems =
        editableTextState.contextMenuButtonItems;
    if (isValidEmail(value.selection.textInside(value.text))) {
      buttonItems.insert(
          0,
          ContextMenuButtonItem(
            label: 'Send email',
            onPressed: () {
              ContextMenuController.removeAny();
              Navigator.of(context).push(_showDialog(context));
            },
          ));
    }
    return AdaptiveTextSelectionToolbar.buttonItems(
      anchors: editableTextState.contextMenuAnchors,
      buttonItems: buttonItems,
    );
  },
)

----------------------------------------

TITLE: Implementing Custom LocalizationsDelegate
DESCRIPTION: Create a custom LocalizationsDelegate to load and manage your localized resources.

LANGUAGE: dart
CODE:
class DemoLocalizationsDelegate
    extends LocalizationsDelegate<DemoLocalizations> {
  const DemoLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) =>
      DemoLocalizations.languages().contains(locale.languageCode);

  @override
  Future<DemoLocalizations> load(Locale locale) {
    // Returning a SynchronousFuture here because an async "load" operation
    // isn't needed to produce an instance of DemoLocalizations.
    return SynchronousFuture<DemoLocalizations>(DemoLocalizations(locale));
  }

  @override
  bool shouldReload(DemoLocalizationsDelegate old) => false;
}

----------------------------------------

TITLE: Flutter Protected Folder Error
DESCRIPTION: Error message when Flutter SDK is installed in a protected directory that requires elevated privileges.

LANGUAGE: plaintext
CODE:
The Flutter SDK is installed in a protected folder and may not function correctly.\nPlease move the SDK to a location that is user-writable without Administration permissions and restart.

----------------------------------------

TITLE: Implementing ImageProvider with load method (Pre-migration)
DESCRIPTION: Example of implementing an ImageProvider subclass using the deprecated load method, along with a delegating provider.

LANGUAGE: dart
CODE:
class MyImageProvider extends ImageProvider<MyImageProvider> {
  @override
  ImageStreamCompleter load(MyImageProvider key, DecoderCallback decode) {
    return MultiFrameImageStreamCompleter(
        codec: _loadData(key, decode),
    );
  }

  Future<ui.Codec> _loadData(MyImageProvider key, DecoderCallback decode) async {
    final Uint8List bytes = await bytesFromSomeApi();
    return decode(bytes);
  }
}

class MyDelegatingProvider extends ImageProvider<MyDelegatingProvider> {
  MyDelegatingProvider(this.provider);

  final ImageProvder provider;

  @override
  ImageStreamCompleter load(MyDelegatingProvider key, DecoderCallback decode) {
    return provider.load(key, decode);
  }
}

----------------------------------------

TITLE: Complete Flutter GridView Application Example
DESCRIPTION: A complete Flutter application implementation showing how to integrate a GridView into a Material app with proper scaffolding and app bar. The example creates a scrollable grid of 100 numbered items.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const title = 'Grid List';

    return MaterialApp(
      title: title,
      home: Scaffold(
        appBar: AppBar(title: const Text(title)),
        body: GridView.count(
          // Create a grid with 2 columns.
          // If you change the scrollDirection to horizontal,
          // this produces 2 rows.
          crossAxisCount: 2,
          // Generate 100 widgets that display their index in the list.
          children: List.generate(100, (index) {
            return Center(
              child: Text(
                'Item $index',
                style: TextTheme.of(context).headlineSmall,
              ),
            );
          }),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Extending ChangeNotifier in a Flutter View Model
DESCRIPTION: This code shows how to extend ChangeNotifier in a Flutter view model to enable notifying listeners of state changes. It includes the basic structure of a view model with ChangeNotifier.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  HomeViewModel({
   required BookingRepository bookingRepository,
   required UserRepository userRepository,
  }) : _bookingRepository = bookingRepository,
      _userRepository = userRepository;
  final BookingRepository _bookingRepository;
  final UserRepository _userRepository;

  User? _user;
  User? get user => _user;

  List<BookingSummary> _bookings = [];
  List<BookingSummary> get bookings => _bookings;

  // ...
}

----------------------------------------

TITLE: Building Flutter Web App for Release
DESCRIPTION: Command to build a Flutter web application for deployment, generating files in the /build/web directory.

LANGUAGE: console
CODE:
flutter build web

----------------------------------------

TITLE: Testing TextInput State (After Migration) - Dart
DESCRIPTION: Updated approach for checking text input state after the migration change. This verifies that the state hasn't been modified by checking if it's null.

LANGUAGE: dart
CODE:
    expect(tester.testTextInput.editingState, isNull);

----------------------------------------

TITLE: Using Shaders with Canvas API in Dart
DESCRIPTION: Demonstrates how to use fragment shaders with different Canvas drawing methods like drawRect and drawPath.

LANGUAGE: dart
CODE:
void paint(Canvas canvas, Size size, FragmentShader shader) {
  // Draws a rectangle with the shader used as a color source.
  canvas.drawRect(
    Rect.fromLTWH(0, 0, size.width, size.height),
    Paint()..shader = shader,
  );

  // Draws a stroked rectangle with the shader only applied to the fragments
  // that lie within the stroke.
  canvas.drawRect(
    Rect.fromLTWH(0, 0, size.width, size.height),
    Paint()
      ..style = PaintingStyle.stroke
      ..shader = shader,
  )
}

----------------------------------------

TITLE: Creating a Left Column Layout in Flutter
DESCRIPTION: Demonstrates how to create a left column layout containing ratings, icons, title, and description text.

LANGUAGE: dart
CODE:
final leftColumn = Container(
  padding: const EdgeInsets.fromLTRB(20, 30, 20, 20),
  child: Column(children: [titleText, subTitle, ratings, iconList]),
);

----------------------------------------

TITLE: Demonstrating Potential Memory Leak with Closures in Dart
DESCRIPTION: This snippet shows how closures can inadvertently cause memory leaks by retaining references to large objects. It illustrates why closures require extra attention in memory management.

LANGUAGE: dart
CODE:
  final handler = () => print(myHugeObject.name);
  setHandler(handler);

----------------------------------------

TITLE: Updating Framework References in Xcode Project File
DESCRIPTION: This snippet shows how to modify the Xcode project file (project.pbxproj) to update framework references. It demonstrates changing the path to use the $(CONFIGURATION) variable for different build modes.

LANGUAGE: text
CODE:
312885572C1A441C009F74FF /* Flutter.xcframework */ = {
  isa = PBXFileReference;
  expectedSignature = "AppleDeveloperProgram:S8QB4VV633:FLUTTER.IO LLC";
  lastKnownFileType = wrapper.xcframework;
  name = Flutter.xcframework;
  path = "Flutter/$(CONFIGURATION)/Flutter.xcframework";
  sourceTree = "<group>";
};
312885582C1A441C009F74FF /* App.xcframework */ = {
  isa = PBXFileReference;
  lastKnownFileType = wrapper.xcframework;
  name = App.xcframework;
  path = "Flutter/$(CONFIGURATION)/App.xcframework";
  sourceTree = "<group>";
};

----------------------------------------

TITLE: Adding Input Hints in Flutter
DESCRIPTION: Demonstrates how to add placeholder text (hint) to an input field in Flutter.

LANGUAGE: dart
CODE:
Center(
  child: TextField(decoration: InputDecoration(hintText: 'This is a hint')),
)

----------------------------------------

TITLE: Disabling Impeller for iOS Deployment
DESCRIPTION: XML configuration to disable Impeller in the Info.plist file when deploying iOS apps.

LANGUAGE: xml
CODE:
<key>FLTEnableImpeller</key>
<false />

----------------------------------------

TITLE: Adding Suggested Prompts to Flutter LlmChatView
DESCRIPTION: Demonstrates how to implement suggested prompts in the LlmChatView to guide user interactions with predefined prompt examples.

LANGUAGE: dart
CODE:
class ChatPage extends StatelessWidget {
 const ChatPage({super.key});

 @override
 Widget build(BuildContext context) => Scaffold(
       appBar: AppBar(title: const Text(App.title)),
       body: LlmChatView(
         suggestions: [
           'I\'m a Star Wars fan. What should I wear for Halloween?',
           'I\'m allergic to peanuts. What candy should I avoid at Halloween?',
           'What\'s the difference between a pumpkin and a squash?',
         ],
         provider: GeminiProvider(
           model: GenerativeModel(
             model: 'gemini-1.5-flash',
             apiKey: geminiApiKey,
           ),
         ),
       ),
     );
}

----------------------------------------

TITLE: Uploading iOS App Bundle to App Store Connect
DESCRIPTION: Use the xcrun command-line tool to upload the iOS app bundle to App Store Connect. This requires an API key and issuer ID for authentication.

LANGUAGE: bash
CODE:
xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey your_api_key --apiIssuer your_issuer_id

----------------------------------------

TITLE: Configuring TextButton with ButtonStyle in Flutter
DESCRIPTION: Demonstrates how to create a TextButton with a custom foreground color using ButtonStyle and MaterialStateProperty.

LANGUAGE: dart
CODE:
TextButton(
  style: ButtonStyle(
    foregroundColor: MaterialStateProperty.all<Color>(Colors.blue),
  ),
  onPressed: () { },
  child: Text('TextButton'),
)

----------------------------------------

TITLE: Complete Flutter Application with Custom Fonts
DESCRIPTION: Complete implementation of a Flutter application showcasing custom font usage

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Fonts',
      // Set Raleway as the default app font.
      theme: ThemeData(fontFamily: 'Raleway'),
      home: const MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // The AppBar uses the app-default Raleway font.
      appBar: AppBar(title: const Text('Custom Fonts')),
      body: const Center(
        // This Text widget uses the RobotoMono font.
        child: Text(
          'Roboto Mono sample',
          style: TextStyle(fontFamily: 'RobotoMono'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Handling Command State Changes in View
DESCRIPTION: Shows how to listen for changes in command state and perform UI actions accordingly.

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  widget.viewModel.addListener(_onViewModelChanged);
}

@override
void dispose() {
  widget.viewModel.removeListener(_onViewModelChanged);
  super.dispose();
}

void _onViewModelChanged() {
  if (widget.viewModel.load.error != null) {
    widget.viewModel.load.clear();
    // Show Snackbar
  }
}

----------------------------------------

TITLE: Installing Camera Dependencies via Flutter CLI
DESCRIPTION: Commands to add required camera-related dependencies to a Flutter project.

LANGUAGE: console
CODE:
$ flutter pub add camera path_provider path

----------------------------------------

TITLE: Implementing Firestore Controller for Flutter Game
DESCRIPTION: A controller class that manages Firestore interactions, synchronizing game state between local and remote sources.

LANGUAGE: dart
CODE:
import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:logging/logging.dart';

import '../game_internals/board_state.dart';
import '../game_internals/playing_area.dart';
import '../game_internals/playing_card.dart';

class FirestoreController {
  static final _log = Logger('FirestoreController');

  final FirebaseFirestore instance;

  final BoardState boardState;

  late final _matchRef = instance.collection('matches').doc('match_1');

  late final _areaOneRef = _matchRef
      .collection('areas')
      .doc('area_one')
      .withConverter<List<PlayingCard>>(
        fromFirestore: _cardsFromFirestore,
        toFirestore: _cardsToFirestore,
      );

  late final _areaTwoRef = _matchRef
      .collection('areas')
      .doc('area_two')
      .withConverter<List<PlayingCard>>(
        fromFirestore: _cardsFromFirestore,
        toFirestore: _cardsToFirestore,
      );

  StreamSubscription? _areaOneFirestoreSubscription;
  StreamSubscription? _areaTwoFirestoreSubscription;

  StreamSubscription? _areaOneLocalSubscription;
  StreamSubscription? _areaTwoLocalSubscription;

  FirestoreController({required this.instance, required this.boardState}) {
    _areaOneFirestoreSubscription = _areaOneRef.snapshots().listen((snapshot) {
      _updateLocalFromFirestore(boardState.areaOne, snapshot);
    });
    _areaTwoFirestoreSubscription = _areaTwoRef.snapshots().listen((snapshot) {
      _updateLocalFromFirestore(boardState.areaTwo, snapshot);
    });

    _areaOneLocalSubscription = boardState.areaOne.playerChanges.listen((_) {
      _updateFirestoreFromLocalAreaOne();
    });
    _areaTwoLocalSubscription = boardState.areaTwo.playerChanges.listen((_) {
      _updateFirestoreFromLocalAreaTwo();
    });

    _log.fine('Initialized');
  }

  void dispose() {
    _areaOneFirestoreSubscription?.cancel();
    _areaTwoFirestoreSubscription?.cancel();
    _areaOneLocalSubscription?.cancel();
    _areaTwoLocalSubscription?.cancel();

    _log.fine('Disposed');
  }

  List<PlayingCard> _cardsFromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
    SnapshotOptions? options,
  ) {
    final data = snapshot.data()?['cards'] as List?;

    if (data == null) {
      _log.info('No data found on Firestore, returning empty list');
      return [];
    }

    final list = List.castFrom<Object?, Map<String, Object?>>(data);

    try {
      return list.map((raw) => PlayingCard.fromJson(raw)).toList();
    } catch (e) {
      throw FirebaseControllerException(
        'Failed to parse data from Firestore: $e',
      );
    }
  }

  Map<String, Object?> _cardsToFirestore(
    List<PlayingCard> cards,
    SetOptions? options,
  ) {
    return {'cards': cards.map((c) => c.toJson()).toList()};
  }

  Future<void> _updateFirestoreFromLocal(
    PlayingArea area,
    DocumentReference<List<PlayingCard>> ref,
  ) async {
    try {
      _log.fine('Updating Firestore with local data (${area.cards}) ...');
      await ref.set(area.cards);
      _log.fine('... done updating.');
    } catch (e) {
      throw FirebaseControllerException(
        'Failed to update Firestore with local data (${area.cards}): $e',
      );
    }
  }

  void _updateFirestoreFromLocalAreaOne() {
    _updateFirestoreFromLocal(boardState.areaOne, _areaOneRef);
  }

  void _updateFirestoreFromLocalAreaTwo() {
    _updateFirestoreFromLocal(boardState.areaTwo, _areaTwoRef);
  }

  void _updateLocalFromFirestore(
    PlayingArea area,
    DocumentSnapshot<List<PlayingCard>> snapshot,
  ) {
    _log.fine('Received new data from Firestore (${snapshot.data()})');

    final cards = snapshot.data() ?? [];

    if (listEquals(cards, area.cards)) {
      _log.fine('No change');
    } else {
      _log.fine('Updating local data with Firestore data ($cards)');
      area.replaceWith(cards);
    }
  }
}

class FirebaseControllerException implements Exception {
  final String message;

  FirebaseControllerException(this.message);

  @override
  String toString() => 'FirebaseControllerException: $message';
}

----------------------------------------

TITLE: Testing Swipe-to-Dismiss in Flutter Widget Tests
DESCRIPTION: This snippet demonstrates how to test swipe-to-dismiss functionality in a Flutter widget test, including simulating the swipe gesture and verifying that the item is removed from the list.

LANGUAGE: dart
CODE:
testWidgets('Add and remove a todo', (tester) async {
  // Enter text and add the item...

  // Swipe the item to dismiss it.
  await tester.drag(find.byType(Dismissible), const Offset(500, 0));

  // Build the widget until the dismiss animation ends.
  await tester.pumpAndSettle();

  // Ensure that the item is no longer on screen.
  expect(find.text('hi'), findsNothing);
});

----------------------------------------

TITLE: Migrating RaisedButton with Custom Pressed Elevation to ElevatedButton in Flutter
DESCRIPTION: Demonstrates how to migrate a RaisedButton with a custom pressed elevation to the new ElevatedButton using MaterialStateProperty.

LANGUAGE: dart
CODE:
RaisedButton(
  highlightElevation: 16,
  onPressed: () { },
  child: Text('RaisedButton with a custom elevation'),
)

ElevatedButton(
  style: ButtonStyle(
    elevation: MaterialStateProperty.resolveWith<double?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.pressed))
          return 16;
        return null;
      }),
  ),
  onPressed: () { },
  child: Text('ElevatedButton with a custom elevation'),
)

----------------------------------------

TITLE: Configuring Android Manifest for Predictive Back
DESCRIPTION: Adding the enableOnBackInvokedCallback flag to AndroidManifest.xml to enable predictive back gesture support for Android API 33+.

LANGUAGE: xml
CODE:
android:enableOnBackInvokedCallback="true"

----------------------------------------

TITLE: Opening Xcode Workspace
DESCRIPTION: Command to open the default Xcode workspace for the iOS version of the project.

LANGUAGE: console
CODE:
$ cd flavors_example && open ios/Runner.xcworkspace

----------------------------------------

TITLE: Setting up ChromeOS Lint Analysis
DESCRIPTION: Configuration for enabling ChromeOS-specific lint analysis in Flutter projects. Creates or updates analysis_options.yaml to include ChromeOS manifest checks for hardware compatibility and permissions.

LANGUAGE: yaml
CODE:
include: package:flutter/analysis_options_user.yaml
analyzer:
 optional-checks:
   chrome-os-manifest-checks

----------------------------------------

TITLE: Creating TodoListScreen with ViewModel in Flutter
DESCRIPTION: This code snippet shows how to create a TodoListScreen and its associated TodoListViewModel, passing the TodoRepository as a dependency.

LANGUAGE: dart
CODE:
TodoListScreen(
  viewModel: TodoListViewModel(todoRepository: widget.todoRepository),
)

----------------------------------------

TITLE: Creating iOS App Bundle with Flutter
DESCRIPTION: Use the Flutter CLI to create an iOS app bundle (.ipa file) for distribution. This command produces an Xcode build archive and an App Store app bundle.

LANGUAGE: bash
CODE:
flutter build ipa

----------------------------------------

TITLE: Creating a Card Layout with Multiple Sections in Flutter
DESCRIPTION: Shows how to create a Card layout with multiple sections, including ListTiles for contact information.

LANGUAGE: dart
CODE:
Widget _buildCard() {
  return SizedBox(
    height: 210,
    child: Card(
      child: Column(
        children: [
          ListTile(
            title: const Text(
              '1625 Main Street',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
            subtitle: const Text('My City, CA 99984'),
            leading: Icon(Icons.restaurant_menu, color: Colors.blue[500]),
          ),
          const Divider(),
          ListTile(
            title: const Text(
              '(408) 555-1212',
              style: TextStyle(fontWeight: FontWeight.w500),
            ),
            leading: Icon(Icons.contact_phone, color: Colors.blue[500]),
          ),
          ListTile(
            title: const Text('costa@example.com'),
            leading: Icon(Icons.contact_mail, color: Colors.blue[500]),
          ),
        ],
      ),
    ),
  );
}

----------------------------------------

TITLE: Showing Text Baselines in Flutter
DESCRIPTION: Shows how to visualize text baselines for alignment debugging by enabling debugPaintBaselinesEnabled

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void showBaselines() {
  debugPaintBaselinesEnabled = true;
}

----------------------------------------

TITLE: Generating HTML for Code and Image Display in Flutter Documentation
DESCRIPTION: This Liquid template generates HTML to display a code snippet alongside an image. It handles various optional parameters including width, height, caption, and CSS classes for customizing the display.

LANGUAGE: Liquid
CODE:
{% assign alt = alt | default: caption -%}
{% assign caption = caption | default: '' -%}
{% if width -%}
{% assign width = 'width: ' | append: width | append: ';' -%}
{% else -%}
{% assign width = '' -%}
{% endif -%}
{% if height -%}
{% assign height = 'height: ' | append: height | append: ';' -%}
{% else -%}
{% assign height = '' -%}
{% endif -%}


<figure class="code-and-image {{class}}">
  <div class="{{code-class}}">
    {{code}}
  </div>
  <div>
    <img src="/assets/images/docs/{{image}}" class="{{img-class}}" alt="{{alt | escape}}" style="{{img-style}} {{width}} {{height}}">
     {% if caption and caption != '' -%}
     <figcaption class="figure-caption {{figcaption-class}}">
       {{caption}}
     </figcaption>
    {% endif -%}
  </div>
</figure>

----------------------------------------

TITLE: Basic Flutter Page
DESCRIPTION: Demonstrates creating a basic Flutter page with a MaterialApp and MyHomePage widget, showing state management

LANGUAGE: dart
CODE:
class MyApp extends StatelessWidget {
  /// This widget is the root of your application.
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: 'Flutter Demo',
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }

----------------------------------------

TITLE: Migrating ThemeData Color Properties
DESCRIPTION: Examples for migrating deprecated ThemeData color properties to use ColorScheme and component-specific themes

LANGUAGE: dart
CODE:
var myTheme = ThemeData(
  //...
  errorColor: Colors.red,
  backgroundColor: Colors.blue,
  bottomAppBarColor: Colors.purple,
  toggleableActiveColor: Colors.orange,
  //...
);

LANGUAGE: dart
CODE:
var myTheme = ThemeData(
  //...
  colorScheme: ColorScheme(
    /// ...
    error: Colors.red,
    background: Colors.blue,
  ),
  bottomAppBarTheme: BottomAppBarTheme(
    color: Colors.purple,
  ),
  //...
);

----------------------------------------

TITLE: Checking for Zero in Dart
DESCRIPTION: Demonstrates explicit comparison for zero in Dart, as only boolean false is treated as false.

LANGUAGE: Dart
CODE:
/// Dart
var myNull;
var zero = 0;
if (zero == 0) {
  print('use "== 0" to check zero');
}

----------------------------------------

TITLE: Demonstrating Error Message for Double Disposal in Flutter
DESCRIPTION: This snippet shows the error message that occurs when dispose() is called on an object that has already been disposed.

LANGUAGE: plaintext
CODE:
Once you have called dispose() on a <class name>, it can no longer be used.

----------------------------------------

TITLE: Getting Battery Level in C (Linux)
DESCRIPTION: Retrieves the battery level using Linux's UPower API.

LANGUAGE: c
CODE:
static FlMethodResponse* get_battery_level() {
  g_autoptr(UpClient) up_client = up_client_new();
  g_autoptr(GPtrArray) devices = up_client_get_devices2(up_client);
  if (devices->len == 0) {
    return FL_METHOD_RESPONSE(fl_method_error_response_new(
        "UNAVAILABLE", "Device does not have a battery.", nullptr));
  }

  UpDevice* device = UP_DEVICE(g_ptr_array_index(devices, 0));
  double percentage = 0;
  g_object_get(device, "percentage", &percentage, nullptr);

  g_autoptr(FlValue) result =
      fl_value_new_int(static_cast<int64_t>(round(percentage)));
  return FL_METHOD_RESPONSE(fl_method_success_response_new(result));
}

----------------------------------------

TITLE: Running Flutter App with Wasm in Development
DESCRIPTION: Command to run a Flutter application in Chrome browser with WebAssembly enabled for development and testing purposes.

LANGUAGE: console
CODE:
$ flutter run -d chrome --wasm

----------------------------------------

TITLE: Implementing SubscriptionRepository with Simulated Network Request
DESCRIPTION: Implementation of the repository class that simulates a network request with a delay and forced failure for demonstration purposes.

LANGUAGE: dart
CODE:
class SubscriptionRepository {
  /// Simulates a network request and then fails.
  Future<void> subscribe() async {
    // Simulate a network request
    await Future.delayed(const Duration(seconds: 1));
    // Fail after one second
    throw Exception('Failed to subscribe');
  }
}

----------------------------------------

TITLE: Creating and Running Flutter Applications
DESCRIPTION: Basic workflow commands for creating, analyzing, testing, and running a Flutter application using the CLI tool.

LANGUAGE: console
CODE:
$ flutter create my_app
$ cd my_app
$ flutter analyze
$ flutter test
$ flutter run lib/main.dart

----------------------------------------

TITLE: Creating Selection Button in Flutter
DESCRIPTION: Implements a SelectionButton widget that launches the SelectionScreen and awaits its result.

LANGUAGE: dart
CODE:
class SelectionButton extends StatefulWidget {
  const SelectionButton({super.key});

  @override
  State<SelectionButton> createState() => _SelectionButtonState();
}

class _SelectionButtonState extends State<SelectionButton> {
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () {
        _navigateAndDisplaySelection(context);
      },
      child: const Text('Pick an option, any option!'),
    );
  }

  Future<void> _navigateAndDisplaySelection(BuildContext context) async {
    // Navigator.push returns a Future that completes after calling
    // Navigator.pop on the Selection Screen.
    final result = await Navigator.push(
      context,
      // Create the SelectionScreen in the next step.
      MaterialPageRoute(builder: (context) => const SelectionScreen()),
    );
  }
}

----------------------------------------

TITLE: Testing Flutter Repository Implementation
DESCRIPTION: Shows unit testing of a BookingRepository implementation using fake API client. Demonstrates testing repository layer with mocked service dependencies.

LANGUAGE: dart
CODE:
void main() {
  group('BookingRepositoryRemote tests', () {
    late BookingRepository bookingRepository;
    late FakeApiClient fakeApiClient;

    setUp(() {
      fakeApiClient = FakeApiClient();
      bookingRepository = BookingRepositoryRemote(
        apiClient: fakeApiClient,
      );
    });

    test('should get booking', () async {
      final result = await bookingRepository.getBooking(0);
      final booking = result.asOk.value;
      expect(booking, kBooking);
    });
  });
}

----------------------------------------

TITLE: Overriding Focus Overlay Color for TextButton in Flutter
DESCRIPTION: Demonstrates how to override only the focus overlay color for a TextButton using MaterialStateProperty.resolveWith.

LANGUAGE: dart
CODE:
TextButton(
  style: ButtonStyle(
    overlayColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.focused))
          return Colors.red;
        return null; // Defer to the widget's default.
      }
    ),
  ),
  onPressed: () { },
  child: Text('TextButton'),
)

----------------------------------------

TITLE: Customizing App Display Names in build.gradle.kts
DESCRIPTION: Configuration to set distinct app names for different flavor variants in the Gradle build file.

LANGUAGE: kotlin
CODE:
android {
    ...
    flavorDimensions += "default"
    productFlavors {
        create("staging") {
            dimension = "default"
            resValue(
                type = "string",
                name = "app_name",
                value = "Flavors staging")
            applicationIdSuffix = ".staging"
        }
        create("production") {
            dimension = "default"
            resValue(
                type = "string",
                name = "app_name",
                value = "Flavors production")
            applicationIdSuffix = ".production"
        }
    }
}

----------------------------------------

TITLE: Implementing Flutter Widget for macOS Platform View
DESCRIPTION: Create a Flutter widget that uses AppKitView to embed a native macOS view. This snippet shows how to set up the necessary imports and implement the build method.

LANGUAGE: dart
CODE:
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  return AppKitView(
    viewType: viewType,
    layoutDirection: TextDirection.ltr,
    creationParams: creationParams,
    creationParamsCodec: const StandardMessageCodec(),
  );
}

----------------------------------------

TITLE: Migrating RaisedButton with Custom Disabled Colors to ElevatedButton in Flutter
DESCRIPTION: Shows how to migrate a RaisedButton with custom disabled colors to the new ElevatedButton using styleFrom().

LANGUAGE: dart
CODE:
RaisedButton(
  disabledColor: Colors.red.withOpacity(0.12),
  disabledTextColor: Colors.red.withOpacity(0.38),
  onPressed: null,
  child: Text('RaisedButton with custom disabled colors'),
),

ElevatedButton(
  style: ElevatedButton.styleFrom(disabledForegroundColor: Colors.red),
  onPressed: null,
  child: Text('ElevatedButton with custom disabled colors'),
)

----------------------------------------

TITLE: Updating ColorScheme primaryVariant and secondaryVariant in Dart
DESCRIPTION: ColorScheme.primaryVariant and ColorScheme.secondaryVariant were deprecated in v2.6. Use primaryContainer and secondaryContainer instead to align with updated Material Design specifications.

LANGUAGE: dart
CODE:
var colorScheme = ColorScheme(
  primaryVariant: Colors.blue,
  secondaryVariant: Colors.amber,
);
var primaryColor = colorScheme.primaryVariant;
var secondaryColor = colorScheme.secondaryVariant;

LANGUAGE: dart
CODE:
var colorScheme = ColorScheme(
  primaryContainer: Colors.blue,
  secondaryContainer: Colors.amber,
);
var primaryColor = colorScheme.primaryContainer;
var secondaryColor = colorScheme.secondaryContainer;

----------------------------------------

TITLE: Basic Cache Implementation in Dart
DESCRIPTION: Demonstrates the fundamental three-step caching operation pattern using a simple in-memory cache implementation.

LANGUAGE: dart
CODE:
Data? _cachedData;

Future<Data> get data async {
    // Step 1: Check whether your cache already contains the desired data
    if (_cachedData == null) {
        // Step 2: Load the data if the cache was empty
        _cachedData = await _readData();
    }
    // Step 3: Return the value in the cache
    return _cachedData!;
}

----------------------------------------

TITLE: Implementing Full Command Class
DESCRIPTION: Provides a complete implementation of the Command class with execute and clear methods.

LANGUAGE: dart
CODE:
class Command extends ChangeNotifier {
  Command(this._action);

  bool _running = false;
  bool get running => _running;

  Exception? _error;
  Exception? get error => _error;

  bool _completed = false;
  bool get completed => _completed;

  final Future<void> Function() _action;

  Future<void> execute() async {
    if (_running) {
      return;
    }

    _running = true;
    _completed = false;
    _error = null;
    notifyListeners();

    try {
      await _action();
      _completed = true;
    } on Exception catch (error) {
      _error = error;
    } finally {
      _running = false;
      notifyListeners();
    }
  }

  void clear() {
    _running = false;
    _error = null;
    _completed = false;
  }
}

----------------------------------------

TITLE: Setting Light Theme in Android Styles XML
DESCRIPTION: Configuring the light theme to use Material Components in the Android styles XML file.

LANGUAGE: XML
CODE:
<style name="NormalTheme" parent="Theme.MaterialComponents.Light.NoActionBar">

----------------------------------------

TITLE: Defining UserProfile Data Model with Freezed in Flutter
DESCRIPTION: Definition of UserProfile data class using the freezed package for immutable data model creation.

LANGUAGE: dart
CODE:
@freezed
class UserProfile with _$UserProfile {
  const factory UserProfile({
    required String name,
    required String photoUrl,
  }) = _UserProfile;
}

----------------------------------------

TITLE: Setting Uniform Values for FragmentShader in Dart
DESCRIPTION: Demonstrates how to set uniform values for a FragmentShader instance, including float, vec2, vec4, and sampler2D types.

LANGUAGE: dart
CODE:
void updateShader(FragmentShader shader, Color color, Image image) {
  shader.setFloat(0, 23);  // uScale
  shader.setFloat(1, 114); // uMagnitude x
  shader.setFloat(2, 83);  // uMagnitude y

  // Convert color to premultiplied opacity.
  shader.setFloat(3, color.red / 255 * color.opacity);   // uColor r
  shader.setFloat(4, color.green / 255 * color.opacity); // uColor g
  shader.setFloat(5, color.blue / 255 * color.opacity);  // uColor b
  shader.setFloat(6, color.opacity);                     // uColor a

  // Initialize sampler uniform.
  shader.setImageSampler(0, image);
 }

----------------------------------------

TITLE: Using Expanded Widget to Size Widgets in a Row
DESCRIPTION: Demonstrates how to use the Expanded widget to make images fit within a Row, with one image taking up twice as much space.

LANGUAGE: dart
CODE:
Row(
  crossAxisAlignment: CrossAxisAlignment.center,
  children: [
    Expanded(child: Image.asset('images/pic1.jpg')),
    Expanded(flex: 2, child: Image.asset('images/pic2.jpg')),
    Expanded(child: Image.asset('images/pic3.jpg')),
  ],
);

----------------------------------------

TITLE: Setting Dark Theme in Android Styles XML
DESCRIPTION: Configuring the dark theme to use Material Components in the Android styles XML file.

LANGUAGE: XML
CODE:
<style name="NormalTheme" parent="Theme.MaterialComponents.DayNight.NoActionBar">

----------------------------------------

TITLE: Using SaveLayer Efficiently in Flutter
DESCRIPTION: Guidelines for minimizing the use of saveLayer() operations in Flutter applications to avoid performance impacts from excessive offscreen buffer allocation and render target switches.



----------------------------------------

TITLE: Recreating OutlineButton Style with OutlinedButton in Flutter
DESCRIPTION: Shows how to create a ButtonStyle that makes an OutlinedButton look like the deprecated OutlineButton, including state-dependent border color.

LANGUAGE: dart
CODE:
final ButtonStyle outlineButtonStyle = OutlinedButton.styleFrom(
  foregroundColor: Colors.black87,
  minimumSize: Size(88, 36),
  padding: EdgeInsets.symmetric(horizontal: 16),
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.all(Radius.circular(2)),
  ),
).copyWith(
  side: MaterialStateProperty.resolveWith<BorderSide?>(
    (Set<MaterialState> states) {
      if (states.contains(MaterialState.pressed)) {
        return BorderSide(
          color: Theme.of(context).colorScheme.primary,
          width: 1,
        );
      }
      return null;
    },
  ),
);

OutlinedButton(
  style: outlineButtonStyle,
  onPressed: () { },
  child: Text('Looks like an OutlineButton'),
)

----------------------------------------

TITLE: Migration Example for Updated Golden File Comparator
DESCRIPTION: Diff showing how to migrate from a custom comparator implementation to using the new default behavior by removing the manual override.

LANGUAGE: dart
CODE:
import 'package:integration_test/integration_test.dart';
-import 'package:my_integration_test/custom_golden_file_comparator.dart';

void main() {
-  goldenFileComparator = CustomGoldenFileComparatorThatWorks();

  // ...
}

----------------------------------------

TITLE: Pre-Migration Custom Action Implementation in Dart
DESCRIPTION: Example of custom Action implementation before the API revision, using LocalKey for action identification.

LANGUAGE: dart
CODE:
class MyAction extends Action {
  MyAction() : super(key);

  /// The [LocalKey] that uniquely identifies this action to an [Intent].
  static const LocalKey key = ValueKey<Type>(RequestFocusAction);

  @override
  void invoke(FocusNode node, MyIntent intent) {
    // ...
  }
}

----------------------------------------

TITLE: Building Custom Context Menu Widget
DESCRIPTION: Example showing how to create a fully custom context menu widget while retaining default button functionality.

LANGUAGE: dart
CODE:
class _MyContextMenu extends StatelessWidget {
  const _MyContextMenu({
    required this.anchor,
    required this.children,
  });

  final Offset anchor;
  final List<Widget> children;

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: <Widget>[
        Positioned(
          top: anchor.dy,
          left: anchor.dx,
          child: Container(
            width: 200,
            height: 200,
            color: Colors.amberAccent,
            child: Column(
              children: children,
            ),
          ),
        ),
      ],
    );
  }
}

----------------------------------------

TITLE: URL Parameter Based Renderer Configuration
DESCRIPTION: Custom bootstrap script that configures the Flutter renderer based on URL query parameters.

LANGUAGE: javascript
CODE:
{{flutter_js}}
{{flutter_build_config}}

const searchParams = new URLSearchParams(window.location.search);
const renderer = searchParams.get('renderer');
const userConfig = renderer ? {'renderer': renderer} : {};
_flutter.loader.load({
  config: userConfig,
});

----------------------------------------

TITLE: Creating ThemeSwitch with ViewModel in Flutter
DESCRIPTION: This snippet demonstrates how to create a ThemeSwitch widget and its associated ThemeSwitchViewModel, passing the ThemeRepository as a dependency.

LANGUAGE: dart
CODE:
ThemeSwitch(
  viewmodel: ThemeSwitchViewModel(widget.themeRepository),
),

----------------------------------------

TITLE: Running Flutter App in Profile Mode
DESCRIPTION: Command line instruction to launch a Flutter application in profile mode for performance analysis

LANGUAGE: console
CODE:
$ flutter run --profile

----------------------------------------

TITLE: Font Declaration in pubspec.yaml
DESCRIPTION: Configuration for declaring package fonts in the app's pubspec.yaml file. Shows how to reference font assets from a package using the packages/ prefix.

LANGUAGE: yaml
CODE:
flutter:
  fonts:
    - family: Raleway
      fonts:
        - asset: packages/awesome_package/fonts/Raleway-Regular.ttf
        - asset: packages/awesome_package/fonts/Raleway-Italic.ttf
          style: italic

----------------------------------------

TITLE: Flutter Test Widget Loading Configuration
DESCRIPTION: Shows implementation of widget loading utilities for testing, including provider setup and test app configuration with necessary dependencies.

LANGUAGE: dart
CODE:
void testApp(
  WidgetTester tester,
  Widget body, {
  GoRouter? goRouter,
}) async {
  tester.view.devicePixelRatio = 1.0;
  await tester.binding.setSurfaceSize(const Size(1200, 800));
  await mockNetworkImages(() async {
    await tester.pumpWidget(
      MaterialApp(
        localizationsDelegates: [
          GlobalWidgetsLocalizations.delegate,
          GlobalMaterialLocalizations.delegate,
          AppLocalizationDelegate(),
        ],
        theme: AppTheme.lightTheme,
        home: InheritedGoRouter(
          goRouter: goRouter ?? MockGoRouter(),
          child: Scaffold(
            body: body,
          ),
        ),
      ),
    );
  });
}

----------------------------------------

TITLE: Removing Deprecated RectangularSliderTrackShape Parameter in Flutter
DESCRIPTION: Shows how to update RectangularSliderTrackShape by removing the deprecated disabledThumbGapWidth parameter, which is no longer used by the framework.

LANGUAGE: dart
CODE:
RectangularSliderTrackShape(disabledThumbGapWidth: 2.0);

LANGUAGE: dart
CODE:
RectangularSliderTrackShape();

----------------------------------------

TITLE: Building and Opening macOS Flutter App in Xcode
DESCRIPTION: Commands to build a Flutter macOS app for release and open it in Xcode for further distribution steps. This is necessary for both App Store distribution and notarization for external distribution.

LANGUAGE: bash
CODE:
flutter build macos
open macos/Runner.xcworkspace

----------------------------------------

TITLE: Pre-Migration Actions Widget Configuration in Dart
DESCRIPTION: Example showing how to configure Actions and Shortcuts widgets before the API revision, using LocalKey for action mapping.

LANGUAGE: dart
CODE:
class MyWidget extends StatelessWidget {
  // ...
  @override
  Widget build(BuildContext context) {
    return Shortcuts(
      shortcuts: <LogicalKeySet, Intent> {
        LogicalKeySet(LogicalKeyboardKey.enter): Intent(ActivateAction.key),
      },
      child: Actions(
        actions: <LocalKey, ActionFactory>{
          Activate.key: () => ActivateAction(),
        },
        child: Container(),
      )
    );
  }
}

----------------------------------------

TITLE: Using Navigator with onPopPage in Flutter (Pre-migration)
DESCRIPTION: This code snippet demonstrates how to use the Navigator widget with the onPopPage property before the breaking change. It creates a Navigator with three pages and implements custom pop behavior.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

final MaterialPage<void> page1 = MaterialPage<void>(child: Placeholder());
final MaterialPage<void> page2 = MaterialPage<void>(child: Placeholder());
final MaterialPage<void> page3 = MaterialPage<void>(child: Placeholder());

void main() {
  final List<Page<void>> pages = <Page<void>>[page1, page2, page3];
  runApp(
    MaterialApp(
      home: Navigator(
        pages: pages,
        onPopPage: (Route<Object?> route, Object? result) {
          if (route.settings == page2) {
            return false;
          }
          if (route.didPop) {
            pages.remove(route.settings);
            return true;
          }
          return false;
        },
      ),
    ),
  );
}

----------------------------------------

TITLE: Implementing Basic Command Class
DESCRIPTION: Defines a Command class that encapsulates a view model action and exposes different states of the action.

LANGUAGE: dart
CODE:
class Command extends ChangeNotifier {
  Command(this._action);

  bool get running => // ...

  Exception? get error => // ...

  bool get completed => // ...

  void Function() _action;

  void execute() {
    // run _action
  }

  void clear() {
    // clear state
  }
}

----------------------------------------

TITLE: Example of Code That Fails After Obfuscation in Dart
DESCRIPTION: This Dart code snippet demonstrates an expectation that will fail in an obfuscated binary due to reliance on specific class names.

LANGUAGE: dart
CODE:
expect(foo.runtimeType.toString(), equals('Foo'));

----------------------------------------

TITLE: Testing Landscape Orientation in Flutter
DESCRIPTION: Writes a test to verify that the app displays 3 columns in landscape mode and correctly detects the orientation.

LANGUAGE: dart
CODE:
testWidgets('Displays 3 columns in landscape mode', (tester) async {
  await tester.pumpWidget(const MyApp());

  tester.view.physicalSize = const Size(800, 600);
  tester.view.devicePixelRatio = 1.0;
  addTearDown(() {
    tester.view.resetPhysicalSize();
  });
  await tester.pump();

  final orientation =
      MediaQuery.of(
        tester.element(find.byType(OrientationList)),
      ).orientation;
  expect(orientation, Orientation.landscape);

  final gridViewFinder = find.byType(GridView);
  final gridView = tester.widget<GridView>(gridViewFinder);
  final delegate =
      gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;
  expect(delegate.crossAxisCount, 3);
});

----------------------------------------

TITLE: Configuring iOS Fastlane Deployment Script
DESCRIPTION: Ruby script for configuring fastlane to deploy iOS apps to TestFlight without rebuilding the archive. Uses build_app and upload_to_testflight commands.

LANGUAGE: ruby
CODE:
build_app(
  skip_build_archive: true,
  archive_path: "../build/ios/archive/Runner.xcarchive",
)
upload_to_testflight

----------------------------------------

TITLE: Analyzing Flutter Rendering Layer Hierarchy in Plaintext
DESCRIPTION: This snippet presents a detailed breakdown of the Flutter rendering layer structure, showing the relationships between different layer types, their properties, and rendering information. It includes TransformLayer, OffsetLayer, and PictureLayer objects with their respective attributes and child elements.

LANGUAGE: plaintext
CODE:
flutter: TransformLayer#214da
flutter:  │ owner: RenderView#ebaaf
flutter:  │ creator: [root]
flutter:  │ engine layer: TransformEngineLayer#535de
flutter:  │ handles: 1
flutter:  │ offset: Offset(0.0, 0.0)
flutter:  │ transform:
flutter:  │   [0] 1.0,0.0,0.0,0.0
flutter:  │   [1] 0.0,1.0,0.0,0.0
flutter:  │   [2] 0.0,0.0,1.0,0.0
flutter:  │   [3] 0.0,0.0,0.0,1.0
flutter:  │
flutter:  ├─child 1: OffsetLayer#0f766
flutter:  │ │ creator: RepaintBoundary ← _FocusInheritedScope ← Semantics ←
flutter:  │ │   FocusScope ← PrimaryScrollController ← _ActionsScope ← Actions
flutter:  │ │   ← Builder ← PageStorage ← Offstage ← _ModalScopeStatus ←
flutter:  │ │   UnmanagedRestorationScope ← ⋯
flutter:  │ │ engine layer: OffsetEngineLayer#1768d
flutter:  │ │ handles: 2
flutter:  │ │ offset: Offset(0.0, 0.0)
flutter:  │ │
flutter:  │ ├─child 1: PictureLayer#dd023
flutter:  │ │   handles: 1
flutter:  │ │   paint bounds: Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:  │ │   picture: _NativePicture#36f94
flutter:  │ │   raster cache hints: isComplex = false, willChange = false
flutter:  │ │
flutter:  │ └─child 2: OffsetLayer#4cfc8
flutter:  │   │ creator: RepaintBoundary-[GlobalKey#bd5d9] ← IgnorePointer ←
flutter:  │   │   AnimatedBuilder ← Stack ←
flutter:  │   │   _CupertinoBackGestureDetector<dynamic> ← DecoratedBox ←
flutter:  │   │   DecoratedBoxTransition ← FractionalTranslation ←
flutter:  │   │   SlideTransition ← FractionalTranslation ← SlideTransition ←
flutter:  │   │   CupertinoPageTransition ← ⋯
flutter:  │   │ engine layer: OffsetEngineLayer#a1676
flutter:  │   │ handles: 2
flutter:  │   │ offset: Offset(0.0, 0.0)
flutter:  │   │
flutter:  │   └─child 1: PictureLayer#aee55
flutter:  │       handles: 1
flutter:  │       paint bounds: Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:  │       picture: _NativePicture#e732d
flutter:  │       raster cache hints: isComplex = false, willChange = false
flutter:  │
flutter:  └─child 2: PictureLayer#b16e5
flutter:      handles: 1
flutter:      paint bounds: Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:      picture: _NativePicture#eef0a
flutter:      raster cache hints: isComplex = false, willChange = false
flutter:

----------------------------------------

TITLE: Material 3 Configuration in Flutter
DESCRIPTION: Example showing how to opt out of Material 3 using the useMaterial3 property in ThemeData. This property can be set to false to continue using Material 2, though this will eventually be deprecated.

LANGUAGE: markdown
CODE:
useMaterial3: false

----------------------------------------

TITLE: Migrating RenderUnconstrainedBox to RenderConstraintsTransformBox in Dart
DESCRIPTION: This snippet demonstrates how to migrate from the deprecated RenderUnconstrainedBox to the new RenderConstraintsTransformBox. It shows examples for unconstrained, horizontally constrained, and vertically constrained cases.

LANGUAGE: dart
CODE:
// Unconstrained
final RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(
  constraintsTransform: ConstraintsTransformBox.unconstrained,
  textDirection: TextDirection.ltr,
  child: RenderConstrainedBox(
    additionalConstraints: const BoxConstraints.tightFor(height: 200.0),
  ),
  alignment: Alignment.center,
);

// Constrained in horizontal axis
final RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(
  constraintsTransform: ConstraintsTransformBox.widthUnconstrained,
  textDirection: TextDirection.ltr,
  child: RenderConstrainedBox(
    additionalConstraints: const BoxConstraints.tightFor(width: 200.0, height: 200.0),
  ),
  alignment: Alignment.center,
);

// Constrained in vertical axis
final RenderConstraintsTransformBox unconstrained = RenderConstraintsTransformBox(
  constraintsTransform: ConstraintsTransformBox.widthUnconstrained,
  textDirection: TextDirection.ltr,
  child: RenderFlex(
    direction: Axis.vertical,
    textDirection: TextDirection.ltr,
    children: <RenderBox>[flexible],
  ),
  alignment: Alignment.center,
);

----------------------------------------

TITLE: Resetting Clipboard with Empty String (Post-migration)
DESCRIPTION: Updated example of resetting the clipboard using an empty string after the migration. This is the correct way to reset the clipboard after the change.

LANGUAGE: dart
CODE:
void resetClipboard() {
  Clipboard.setData(ClipboardData(text: ''));
}

----------------------------------------

TITLE: Migrating TextSelectionOverlay.fadeDuration to SelectionOverlay.fadeDuration in Dart
DESCRIPTION: Updates the usage of TextSelectionOverlay.fadeDuration to the new SelectionOverlay.fadeDuration property.

LANGUAGE: dart
CODE:
SelectionOverlay.fadeDuration;

----------------------------------------

TITLE: Using Color Equality Matchers in Flutter Tests
DESCRIPTION: Shows how to use the closeTo or isColorSameAs matchers for comparing colors in tests, accounting for potential small differences in floating-point representations.

LANGUAGE: dart
CODE:
// Before: Check exact equality of int-based color.
expect(calculateColor(), const Color(0xffff00ff));

// After: Check rough equality of floating-point-based color.
expect(calculateColor(), isSameColorAs(const Color(0xffff00ff)));

----------------------------------------

TITLE: Migrating TextSelectionOverlay.fadeDuration to SelectionOverlay.fadeDuration in Dart
DESCRIPTION: Updates the usage of TextSelectionOverlay.fadeDuration to the new SelectionOverlay.fadeDuration property.

LANGUAGE: dart
CODE:
SelectionOverlay.fadeDuration;

----------------------------------------

TITLE: Configuring Windows Window Properties in C++
DESCRIPTION: Code snippet showing how to customize the initial window properties like title, size, and position for a Flutter Windows application.

LANGUAGE: cpp
CODE:
Win32Window::Point origin(10, 10);
Win32Window::Size size(1280, 720);
if (!window.CreateAndShow(L"myapp", origin, size))
{
    return EXIT_FAILURE;
}

----------------------------------------

TITLE: Loading ToDo Items in ViewModel for Flutter
DESCRIPTION: This code snippet demonstrates how to load ToDo items in the TodoListViewModel. It fetches the list of items from the TodoRepository and updates the view model's state.

LANGUAGE: dart
CODE:
List<Todo> _todos = [];

List<Todo> get todos => _todos;

Future<Result<void>> _load() async {
  try {
    final result = await _todoRepository.fetchTodos();
    switch (result) {
      case Ok<List<Todo>>():
        _todos = result.value;
        return Result.ok(null);
      case Error():
        return Result.error(result.error);
    }
  } on Exception catch (e) {
    return Result.error(e);
  } finally {
    notifyListeners();
  }
}

----------------------------------------

TITLE: Developer Logging with Categories
DESCRIPTION: Example showing how to use dart:developer logging with named categories to organize log messages

LANGUAGE: dart
CODE:
import 'dart:developer' as developer;

void main() {
  developer.log('log me', name: 'my.app.category');

  developer.log('log me 1', name: 'my.other.category');
  developer.log('log me 2', name: 'my.other.category');
}

----------------------------------------

TITLE: Defining Todo Class in Dart
DESCRIPTION: Creates a Todo class with title and description fields to represent todo items.

LANGUAGE: dart
CODE:
class Todo {
  final String title;
  final String description;

  const Todo(this.title, this.description);
}

----------------------------------------

TITLE: Showing FlutterViewController in UIKit with Swift
DESCRIPTION: Shows how to present a FlutterViewController using the FlutterEngine instance created in the AppDelegate in a UIKit Swift app.

LANGUAGE: swift
CODE:
import UIKit
import Flutter

class ViewController: UIViewController {
  override func viewDidLoad() {
    super.viewDidLoad()

    let button = UIButton(type:UIButton.ButtonType.custom)
    button.addTarget(self, action: #selector(showFlutter), for: .touchUpInside)
    button.setTitle("Show Flutter!", for: UIControl.State.normal)
    button.frame = CGRect(x: 80.0, y: 210.0, width: 160.0, height: 40.0)
    button.backgroundColor = UIColor.blue
    self.view.addSubview(button)
  }

  @objc func showFlutter() {
    let flutterEngine = (UIApplication.shared.delegate as! AppDelegate).flutterEngine
    let flutterViewController =
        FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil)
    present(flutterViewController, animated: true, completion: nil)
  }
}

----------------------------------------

TITLE: Extracting Flutter SDK Archive
DESCRIPTION: Extracts the downloaded Flutter SDK archive file.

LANGUAGE: console
CODE:
{{unzip}}{{sdk | replace: "opsys", download-os}}{{file-format}}

----------------------------------------

TITLE: Overriding forgetChild() in Flutter Element Subclass (After Migration)
DESCRIPTION: This snippet demonstrates the correct way to override the forgetChild() method after the migration, including the required super call.

LANGUAGE: dart
CODE:
class CustomElement extends Element {

    @override
    void forgetChild(Element child) {
        ...
        super.forgetChild(child);
    }
}

----------------------------------------

TITLE: Listing Available Flutter Fixes Using Dart CLI
DESCRIPTION: Command to display all available Flutter Fix changes for a project without applying them. Uses the --dry-run flag to preview potential changes.

LANGUAGE: console
CODE:
$ dart fix --dry-run

----------------------------------------

TITLE: Styling and Aligning Text in CSS
DESCRIPTION: Sets background color, dimensions, and font properties for a div element in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  Lorem ipsum
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Georgia;
}

----------------------------------------

TITLE: Accessing Secondary Color (Post-Migration)
DESCRIPTION: Updated example showing how to access the secondary color from ColorScheme after the deprecation of accentColor.

LANGUAGE: dart
CODE:
Color myColor = Theme.of(context).colorScheme.secondary;

----------------------------------------

TITLE: Migrating AppBar and AppBarTheme properties in Dart
DESCRIPTION: Demonstrates the migration of deprecated AppBar, SliverAppBar, and AppBarTheme properties to their new equivalents. This update aligns these components with Material Design and introduces more specific styling options.

LANGUAGE: dart
CODE:
var toolbarTextStyle = TextStyle(...);
var titleTextStyle = TextStyle(...);
AppBar(
  brightness: Brightness.light,
  textTheme: TextTheme(
    bodyMedium: toolbarTextStyle,
    titleLarge: titleTextStyle,
  )
  backwardsCompatibility: true,
);
AppBarTheme(color: Colors.blue);

LANGUAGE: dart
CODE:
var toolbarTextStyle = TextStyle(...);
var titleTextStyle = TextStyle(...);
AppBar(
  systemOverlayStyle: SystemOverlayStyle(statusBarBrightness: Brightness.light),
  toolbarTextStyle: toolbarTextStyle,
  titleTextStyle: titleTextStyle,
);
AppBarTheme(backgroundColor: Colors.blue);

----------------------------------------

TITLE: Creating a Flutter Package
DESCRIPTION: Command to create a new Flutter package using the package template

LANGUAGE: console
CODE:
$ flutter create --template=package hello

----------------------------------------

TITLE: Handling ViewModel Changes in View
DESCRIPTION: Implements the _onViewModelChanged method to handle changes in the view model, such as showing a SnackBar on error.

LANGUAGE: dart
CODE:
void _onViewModelChanged() {
  if (widget.viewModel.error != null) {
    // Show Snackbar
  }
}

----------------------------------------

TITLE: Implementing Input Validation in Flutter
DESCRIPTION: Shows how to implement input validation and display error messages in Flutter.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  String? _errorText;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: Center(
        child: TextField(
          onSubmitted: (text) {
            setState(() {
              if (!isEmail(text)) {
                _errorText = 'Error: This is not an email';
              } else {
                _errorText = null;
              }
            });
          },
          decoration: InputDecoration(
            hintText: 'This is a hint',
            errorText: _getErrorText(),
          ),
        ),
      ),
    );
  }

  String? _getErrorText() {
    return _errorText;
  }

  bool isEmail(String em) {
    String emailRegexp =
        r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|'
        r'(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';

    RegExp regExp = RegExp(emailRegexp);

    return regExp.hasMatch(em);
  }
}

----------------------------------------

TITLE: Markdown Template for Flutter Animation Documentation
DESCRIPTION: Markdown frontmatter and template code that defines the structure for Flutter's animation widgets documentation page. Uses Jekyll-style frontmatter and includes a template render command.

LANGUAGE: markdown
CODE:
---
title: Animation and motion widgets
short-title: Animation
description: A catalog of Flutter's animation widgets.
---

{% render docs/catalog-page.md, categoryName:"Animation and motion", catalog:catalog %}

----------------------------------------

TITLE: Implementing Native Android View in Kotlin
DESCRIPTION: Kotlin implementation of the native Android view components including the PlatformView implementation and factory class for view creation.

LANGUAGE: kotlin
CODE:
internal class NativeView(context: Context, id: Int, creationParams: Map<String?, Any?>?) : PlatformView {
    private val textView: TextView

    override fun getView(): View {
        return textView
    }

    override fun dispose() {}

    init {
        textView = TextView(context)
        textView.textSize = 72f
        textView.setBackgroundColor(Color.rgb(255, 255, 255))
        textView.text = "Rendered on a native Android view (id: $id)"
    }
}

LANGUAGE: kotlin
CODE:
class NativeViewFactory : PlatformViewFactory(StandardMessageCodec.INSTANCE) {
    override fun create(context: Context, viewId: Int, args: Any?): PlatformView {
        val creationParams = args as Map<String?, Any?>?
        return NativeView(context, viewId, creationParams)
    }
}

----------------------------------------

TITLE: Testing Text Input in Flutter Widget Tests
DESCRIPTION: This snippet demonstrates how to enter text into a TextField widget using the WidgetTester's enterText method in a Flutter widget test.

LANGUAGE: dart
CODE:
testWidgets('Add and remove a todo', (tester) async {
  // Build the widget
  await tester.pumpWidget(const TodoList());

  // Enter 'hi' into the TextField.
  await tester.enterText(find.byType(TextField), 'hi');
});

----------------------------------------

TITLE: Adding Activity to AndroidManifest.xml
DESCRIPTION: Declares the new Android activity in the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<activity android:name=".SecondActivity" android:exported="true" android:theme="@style/LaunchTheme"></activity>

----------------------------------------

TITLE: Implementing Space Animation for Typing Indicator
DESCRIPTION: Handles the smooth height animation for the typing indicator's appearance and disappearance using explicit animation controllers.

LANGUAGE: dart
CODE:
class _TypingIndicatorState extends State<TypingIndicator>
    with TickerProviderStateMixin {
  late AnimationController _appearanceController;
  late Animation<double> _indicatorSpaceAnimation;

  @override
  void initState() {
    super.initState();
    _appearanceController = AnimationController(vsync: this);
    _indicatorSpaceAnimation = CurvedAnimation(
      parent: _appearanceController,
      curve: const Interval(0.0, 0.4, curve: Curves.easeOut),
      reverseCurve: const Interval(0.0, 1.0, curve: Curves.easeOut),
    ).drive(Tween<double>(begin: 0.0, end: 60.0));
  }
}

----------------------------------------

TITLE: Setting Permanent Environment Variables for Flutter
DESCRIPTION: Demonstrates how to set permanent environment variables for Flutter, including PUB_HOSTED_URL, FLUTTER_STORAGE_BASE_URL, and PATH.

LANGUAGE: console
CODE:
{{permaddexample}}

----------------------------------------

TITLE: Arm64 Windows Build Path Example
DESCRIPTION: Shows the new build path structure for Arm64 architecture builds with architecture-specific directory.

LANGUAGE: plaintext
CODE:
build\windows\arm64\runner\Release\hello_world.exe

----------------------------------------

TITLE: Overriding TextScaler in MediaQuery in Dart
DESCRIPTION: Demonstrates how to override the TextScaler for a widget subtree using MediaQuery.

LANGUAGE: dart
CODE:
MediaQuery( 
  data: MediaQuery.of(context).copyWith(textScaler: _myCustomTextScaler),
  child: child,
)

----------------------------------------

TITLE: Accessing Path from RouteInformation in Dart
DESCRIPTION: Shows how to access the path from a RouteInformation object using the new uri property instead of the deprecated location property.

LANGUAGE: dart
CODE:
final String myPath = myRoute.uri.path;

----------------------------------------

TITLE: Implementing Full showAutocorrectionPromptRect Method in Dart
DESCRIPTION: For iOS applications supporting autocorrect, a full implementation of the showAutocorrectionPromptRect method is provided. This includes handling text changes, focus changes, and updating the autocorrection highlight range.

LANGUAGE: dart
CODE:
// Assume your `TextInputClient` is a `State` subclass, and it has a variable 
// `_currentPromptRectRange` that controls the autocorrection highlight.
class CustomTextInputClient extends State<...> implements TextInputClient {
  @override
  void updateEditingValue(TextEditingValue value) {
    // When the text changes, the highlight needs to be dismissed.
    if (value.text != _value.text) {
      setState(() {
        _currentPromptRectRange = null;
      });
    }
  }

  void _handleFocusChanged() {
    // When this text input loses focus, the autocorrection highlight needs
    // to be dismissed.
    if (!_hasFocus) {
      setState(() {
        _currentPromptRectRange = null;
      });
    }
  }

  @override
  void showAutocorrectionPromptRect(int start, int end) {
    // Updates the range of the highlight, as iOS requested.
    // This method isn't called when iOS decides to
    // dismiss the highlight.
    setState(() {
      _currentPromptRectRange = TextRange(start: start, end: end);
    });
  }
}

----------------------------------------

TITLE: Configuring Slow Animations in Flutter
DESCRIPTION: Shows how to enable slow motion animations for debugging by setting the timeDilation property to 5x slower speed

LANGUAGE: dart
CODE:
import 'package:flutter/scheduler.dart';

void setSlowAnimations() {
  timeDilation = 5.0;
}

----------------------------------------

TITLE: Setting Up and Running Flutter Example Apps
DESCRIPTION: A sequence of shell commands to create, analyze, test and run Flutter example applications. These commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Navigating to a Named Route in Flutter
DESCRIPTION: Demonstrates how to navigate to a named route in Flutter.

LANGUAGE: Dart
CODE:
Navigator.of(context).pushNamed('/a');

----------------------------------------

TITLE: Complete Flutter Test File for Orientation Testing
DESCRIPTION: The full widget_test.dart file containing all imports, test groups, and individual tests for portrait and landscape orientations.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:orientation_tests/main.dart';

void main() {
  group('Orientation', () {
    testWidgets('Displays 2 columns in portrait mode', (tester) async {
      await tester.pumpWidget(const MyApp());

      tester.view.physicalSize = const Size(600, 800);
      tester.view.devicePixelRatio = 1.0;
      addTearDown(() {
        tester.view.resetPhysicalSize();
      });
      await tester.pump();

      final orientation =
          MediaQuery.of(
            tester.element(find.byType(OrientationList)),
          ).orientation;
      expect(orientation, Orientation.portrait);

      final gridViewFinder = find.byType(GridView);
      final gridView = tester.widget<GridView>(gridViewFinder);
      final delegate =
          gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;
      expect(delegate.crossAxisCount, 2);
    });

    testWidgets('Displays 3 columns in landscape mode', (tester) async {
      await tester.pumpWidget(const MyApp());

      tester.view.physicalSize = const Size(800, 600);
      tester.view.devicePixelRatio = 1.0;
      addTearDown(() {
        tester.view.resetPhysicalSize();
      });
      await tester.pump();

      final orientation =
          MediaQuery.of(
            tester.element(find.byType(OrientationList)),
          ).orientation;
      expect(orientation, Orientation.landscape);

      final gridViewFinder = find.byType(GridView);
      final gridView = tester.widget<GridView>(gridViewFinder);
      final delegate =
          gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;
      expect(delegate.crossAxisCount, 3);
    });
  });
}

----------------------------------------

TITLE: Finding Widget by Key in Flutter Tests
DESCRIPTION: Shows how to find a widget using a specific Key identifier. This is useful when testing multiple instances of the same widget type and needing to locate a specific one.

LANGUAGE: dart
CODE:
testWidgets('finds a widget using a Key', (tester) async {
  // Define the test key.
  const testKey = Key('K');

  // Build a MaterialApp with the testKey.
  await tester.pumpWidget(MaterialApp(key: testKey, home: Container()));

  // Find the MaterialApp widget using the testKey.
  expect(find.byKey(testKey), findsOneWidget);
});

----------------------------------------

TITLE: Error Message for Clock Type Mismatch in Dart
DESCRIPTION: Example of the error message that may be encountered when using the old quiver Clock type with the new clock package implementation.

LANGUAGE: plaintext
CODE:
Error: The argument type 'Clock/*1*/' can't be assigned to the parameter type 'Clock/*2*/'.
 - 'Clock/*1*/' is from 'package:clock/src/clock.dart' ('<pub-cache>/clock/lib/src/clock.dart').
 - 'Clock/*2*/' is from 'package:quiver/time.dart' ('<pub-cache>/quiver/lib/time.dart').

----------------------------------------

TITLE: Implementing a DropdownMenu in Flutter
DESCRIPTION: Demonstrates how to create a DropdownMenu widget for selecting from a list of options with custom styling.

LANGUAGE: dart
CODE:
enum ColorLabel {
  blue('Blue', Colors.blue),
  pink('Pink', Colors.pink),
  green('Green', Colors.green),
  yellow('Orange', Colors.orange),
  grey('Grey', Colors.grey);

  const ColorLabel(this.label, this.color);
  final String label;
  final Color color;
}

// StatefulWidget...
@override
Widget build(BuildContext context) {
  return DropdownMenu<ColorLabel>(
    initialSelection: ColorLabel.green,
    controller: colorController,
    requestFocusOnTap: true,
    label: const Text('Color'),
    onSelected: (ColorLabel? color) {
      setState(() {
        selectedColor = color;
      });
    },
    dropdownMenuEntries: ColorLabel.values
      .map<DropdownMenuEntry<ColorLabel>>((
          (ColorLabel color) {
            return DropdownMenuEntry<ColorLabel>(
              value: color,
              label: color.label,
              enabled: color.label != 'Grey',
              style: MenuItemButton.styleFrom(
                foregroundColor: color.color,
              ),
            );
      }).toList(),
  );
}

----------------------------------------

TITLE: Updating pubspec.yaml for Integration Testing
DESCRIPTION: Example of updating the pubspec.yaml file to include integration_test and flutter_driver as dev_dependencies for testing a Flutter plugin.

LANGUAGE: YAML
CODE:
integration_test:
  sdk: flutter
flutter_driver:
  sdk: flutter

----------------------------------------

TITLE: Advanced TextInputClient Implementation with AutofillGroup
DESCRIPTION: Implementation showing how to use AutofillGroup for supporting multi-field autofill functionality in a stateful widget.

LANGUAGE: dart
CODE:
class CustomTextFieldState extends State<CustomTextField> implements TextInputClient {
  AutofillScope get currentAutofillScope => AutofillGroup.of(context);
}

----------------------------------------

TITLE: Implementing UI State in HomeViewModel
DESCRIPTION: Extends the HomeViewModel to include UI state properties for running status and error handling.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {

  User? get user => // ...

  bool get running => // ...

  Exception? get error => // ...

  void load() {
    // load user
  }
  // ···
}

----------------------------------------

TITLE: Basic Hello World App in Flutter
DESCRIPTION: Shows a simple Flutter app that displays 'Hello, world!' text.

LANGUAGE: Dart
CODE:
// Flutter
import 'package:flutter/material.dart';

void main() {
  runApp(
    const Center(
      child: Text('Hello, world!', textDirection: TextDirection.ltr),
    ),
  );
}

----------------------------------------

TITLE: Creating Flutter Project for Orientation Tests
DESCRIPTION: Command to create a new Flutter project called 'orientation_tests' using the Flutter CLI.

LANGUAGE: console
CODE:
flutter create orientation_tests

----------------------------------------

TITLE: Inspecting System Library Dependencies for Linux Flutter App
DESCRIPTION: This snippet demonstrates how to build a Linux Flutter app and inspect its system library dependencies using the ldd command.

LANGUAGE: console
CODE:
$ flutter build linux --release
$ ldd build/linux/x64/release/bundle/linux_desktop_test

----------------------------------------

TITLE: Checking PUB_HOSTED_URL on Unix-based Systems
DESCRIPTION: Commands to check and unset the PUB_HOSTED_URL environment variable in Unix-based systems

LANGUAGE: console
CODE:
echo $PUB_HOSTED_URL

LANGUAGE: console
CODE:
unset $PUB_HOSTED_URL

----------------------------------------

TITLE: Modifying AndroidManifest.xml for Flutter app style configuration
DESCRIPTION: This snippet shows how to update the Android manifest file to reference a custom style for the Flutter app. It highlights the meta-data element that needs to be modified to apply a custom NormalTheme style.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application ...>
        <activity ...>
            <!-- Style to modify: -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
            />
        </activity>
    </application>
</manifest>

----------------------------------------

TITLE: Legacy Platform Override for Desktop
DESCRIPTION: Previous implementation for handling Linux and Windows platforms by overriding with Fuchsia platform.

LANGUAGE: dart
CODE:
void _enablePlatformOverrideForDesktop() {
  if (!kIsWeb && (Platform.isWindows || Platform.isLinux)) {
    debugDefaultTargetPlatformOverride = TargetPlatform.fuchsia;
  }
}

void main() {
  _enablePlatformOverrideForDesktop();
  runApp(MyApp());
}

----------------------------------------

TITLE: Accessing device pixel ratio and locale before migration
DESCRIPTION: Example of accessing device pixel ratio and locale using the deprecated window property before migration.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  final double dpr = WidgetsBinding.instance.window.devicePixelRatio;
  final Locale locale = WidgetsBinding.instance.window.locale;
  return Text('The device pixel ratio is $dpr and the locale is $locale.');
}

----------------------------------------

TITLE: Updating AndroidManifest.xml for v2 Embedding
DESCRIPTION: Example of updating the AndroidManifest.xml file in a Flutter Android plugin's example app to use the new v2 embedding FlutterActivity and metadata.

LANGUAGE: XML
CODE:
<activity android:name="io.flutter.embedding.android.FlutterActivity"
        android:theme="@style/LaunchTheme"
        android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale"
        android:hardwareAccelerated="true"
        android:exported="true"
        android:windowSoftInputMode="adjustResize">
        <meta-data
            android:name="io.flutter.app.android.SplashScreenUntilFirstFrame"
            android:value="true" />
        <intent-filter>
            <action android:name="android.intent.action.MAIN"/>
            <category android:name="android.intent.category.LAUNCHER"/>
        </intent-filter>
    </activity>

----------------------------------------

TITLE: TextInputClient Interface Definition
DESCRIPTION: Abstract class definition showing the new currentAutofillScope getter that must be implemented by TextInputClient subclasses.

LANGUAGE: dart
CODE:
abstract class TextInputClient {
  AutofillScope get currentAutofillScope;
}

----------------------------------------

TITLE: Displaying Multiple ScrollViews After Migration in Flutter
DESCRIPTION: This code snippet demonstrates how to properly configure multiple side-by-side ListViews after the PrimaryScrollController changes, avoiding errors and designating a primary ScrollView for keyboard actions.

LANGUAGE: dart
CODE:
Scaffold(
  body: LayoutBuilder(
    builder: (context, constraints) {
      return Row(
        children: [
          SizedBox(
            height: constraints.maxHeight,
            width: constraints.maxWidth / 2,
            child: ListView.builder(
              // This ScrollView will use the PrimaryScrollController
              primary: true,
              itemBuilder: (BuildContext context, int index) {
                return Text('List 1 - Item $index');
              }
            ),
          ),
          SizedBox(
            height: constraints.maxHeight,
            width: constraints.maxWidth / 2,
            child: ListView.builder(
              itemBuilder: (BuildContext context, int index) {
                return Text('List 2 - Item $index');
              }
            ),
          ),
        ]
      );
    },
  ),
);

----------------------------------------

TITLE: Declaring Firestore Controller in Play Session State
DESCRIPTION: Adding a nullable field for the Firestore controller in the play session screen state.

LANGUAGE: dart
CODE:
FirestoreController? _firestoreController;

----------------------------------------

TITLE: Using Shared Preferences in Flutter
DESCRIPTION: Demonstrates how to use SharedPreferences for persistent key-value storage in Flutter.

LANGUAGE: Dart
CODE:
import 'package:shared_preferences/shared_preferences.dart';

LANGUAGE: Dart
CODE:
Future<void> updateCounter() async {
  final prefs = await SharedPreferences.getInstance();
  int? counter = prefs.getInt('counter');
  if (counter is int) {
    await prefs.setInt('counter', ++counter);
  }
  setState(() {
    _counter = counter;
  });
}

----------------------------------------

TITLE: Implementing Play/Pause Functionality in Flutter
DESCRIPTION: Adds a FloatingActionButton to toggle between playing and pausing the video, updating the button icon accordingly.

LANGUAGE: dart
CODE:
FloatingActionButton(
  onPressed: () {
    // Wrap the play or pause in a call to `setState`. This ensures the
    // correct icon is shown.
    setState(() {
      // If the video is playing, pause it.
      if (_controller.value.isPlaying) {
        _controller.pause();
      } else {
        // If the video is paused, play it.
        _controller.play();
      }
    });
  },
  // Display the correct icon depending on the state of the player.
  child: Icon(
    _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,
  ),
)

----------------------------------------

TITLE: Capturing Exceptions Programmatically with Sentry in Flutter
DESCRIPTION: This code snippet demonstrates how to programmatically capture and report exceptions to Sentry in a Flutter application using the Sentry API.

LANGUAGE: dart
CODE:
await Sentry.captureException(exception, stackTrace: stackTrace);

----------------------------------------

TITLE: Installing CocoaPods for iOS Development in macOS
DESCRIPTION: This command installs CocoaPods, a dependency manager for iOS projects. It uses the gem package manager with sudo privileges to install cocoapods globally.

LANGUAGE: console
CODE:
$ sudo gem install cocoapods

----------------------------------------

TITLE: Removing Gradle Deprecated Settings Test App
DESCRIPTION: Removes the 'gradle_deprecated_settings' test app and its reference from the lockfile exclusion YAML.

LANGUAGE: Dart
CODE:
Remove `gradle_deprecated_settings` test app, and remove reference from lockfile exclusion yaml by @gmackall in 161622

----------------------------------------

TITLE: Post-Migration Form Validation in Flutter
DESCRIPTION: Example showing Form validation using the new autovalidateMode parameter with AutovalidateMode.always in Flutter.

LANGUAGE: dart
CODE:
class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return FormField(
      autovalidateMode: AutovalidateMode.always,
      builder: (FormFieldState state) {
        return Container();
      },
    );
  }
}

----------------------------------------

TITLE: Configuring Gradle Signing for Android App
DESCRIPTION: Modifying the Android app's build.gradle.kts file to configure app signing using the keystore properties.

LANGUAGE: Kotlin
CODE:
import java.util.Properties
import java.io.FileInputStream

plugins {
   ...
}

val keystoreProperties = Properties()
val keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(FileInputStream(keystorePropertiesFile))
}

android {
   ...

   signingConfigs {
       create("release") {
           keyAlias = keystoreProperties["keyAlias"] as String
           keyPassword = keystoreProperties["keyPassword"] as String
           storeFile = keystoreProperties["storeFile"]?.let { file(it) }
           storePassword = keystoreProperties["storePassword"] as String
       }
   }
   buildTypes {
       release {
           signingConfig = signingConfigs.getByName("release")
       }
   }
   ...
}

----------------------------------------

TITLE: Customizing Chip Border Color After Migration
DESCRIPTION: Demonstrates how to maintain the original chip border color using ChipTheme after the Material 3 token update.

LANGUAGE: dart
CODE:
final chip = ChipTheme(
  data: ChipThemeData(
    side: BorderSide(
      color: Theme.of(context).colorScheme.outline
    ),
  ),
  child: ActionChip(
    label: const Text('action chip'), 
    onPressed: () {}
  )
);

----------------------------------------

TITLE: Implementing Custom Notification with visitAncestor (Pre-Migration)
DESCRIPTION: Example of a custom Notification class overriding visitAncestor method before the API change. This code will no longer work after the removal of visitAncestor.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';

class MyNotification extends Notification {

  @override
  bool visitAncestor(Element element) {
    print('Visiting $element');
    return super.visitAncestor(element);
  }
}

void methodThatSendsNotification(BuildContext? context) {
  MyNotification().dispatch(context);
}

----------------------------------------

TITLE: Generating Mixed List Items in Flutter
DESCRIPTION: Creates a list of mixed items containing headers and messages using List.generate. Every 6th item is a header, while others are messages.

LANGUAGE: dart
CODE:
final items = List<ListItem>.generate(
  1000,
  (i) =>
      i % 6 == 0
          ? HeadingItem('Heading $i')
          : MessageItem('Sender $i', 'Message body $i'),
);

----------------------------------------

TITLE: Adding Load Action to HomeViewModel
DESCRIPTION: Implements a load action in the HomeViewModel class to handle user data loading.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {

  User? get user => // ...
  // ···
  void load() {
    // load user
  }
  // ···
}

----------------------------------------

TITLE: Importing Widgets in Flutter
DESCRIPTION: Demonstrates how to import different widget libraries in Flutter.

LANGUAGE: Dart
CODE:
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:my_widgets/my_widgets.dart';

----------------------------------------

TITLE: Launching FlutterActivity with Cached Engine in Kotlin
DESCRIPTION: Shows how to launch a FlutterActivity using a pre-warmed and cached FlutterEngine. This approach significantly reduces the launch time of the Flutter screen.

LANGUAGE: kotlin
CODE:
myButton.setOnClickListener {
  startActivity(
    FlutterActivity
      .withCachedEngine("my_engine_id")
      .build(this)
  )
}

----------------------------------------

TITLE: Installing Sentry Flutter Package via Command Line
DESCRIPTION: This command adds the sentry_flutter package as a dependency to the Flutter project using the flutter pub add command.

LANGUAGE: console
CODE:
$ flutter pub add sentry_flutter

----------------------------------------

TITLE: Weather Display View in SwiftUI
DESCRIPTION: Creates a SwiftUI view that displays weather data using the ContentViewModel.

LANGUAGE: swift
CODE:
struct ContentView: View {
    @State var viewModel = ContentViewModel()
    var body: some View {
        Text(viewModel.result?.rawValue ?? "Loading...")
            .onAppear {
                viewModel.load()
        }
    }
}

----------------------------------------

TITLE: Including Cookbook Group Index in Markdown
DESCRIPTION: A markdown include directive that imports a shared cookbook group index template. This suggests a modular documentation structure where common elements are reused across different cookbook sections.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Cloning Flutter Repository from GitHub in Console
DESCRIPTION: Git command to clone the Flutter repository directly from GitHub, specifically the stable branch.

LANGUAGE: console
CODE:
$ git clone https://github.com/flutter/flutter.git -b stable

----------------------------------------

TITLE: Adding Test Dependency in pubspec.yaml
DESCRIPTION: Add an explicit dependency on flutter_test in the pubspec.yaml file for running tests with 'flutter test'.

LANGUAGE: yaml
CODE:
dev_dependencies:
  flutter_test:
    sdk: flutter

----------------------------------------

TITLE: Updating minSdkVersion in build.gradle for Flutter Android Projects
DESCRIPTION: Developers need to increase the minSdkVersion in their build.gradle file from 19 to at least 21 to align with Flutter's new minimum Android version requirement.

LANGUAGE: gradle
CODE:
android {
    defaultConfig {
        minSdkVersion 21
        // other configurations...
    }
}

----------------------------------------

TITLE: ImageFilter.blur Implementation Before Migration
DESCRIPTION: Example showing how ImageFilter.blur was implemented before the automatic tile mode selection, explicitly specifying TileMode.decal.

LANGUAGE: dart
CODE:
final filter = ui.ImageFilter.blur(sigmaX: 4, sigmaY: 4, tileMode: TileMode.decal);

----------------------------------------

TITLE: Displaying Gradle Build Error in Shell
DESCRIPTION: This snippet shows the error message that appears when trying to build an Android app with an incompatible Gradle version after upgrading to Android Studio Flamingo.

LANGUAGE: sh
CODE:
Caused by: org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:

----------------------------------------

TITLE: Setting Up Orientation Test Group in Dart
DESCRIPTION: Initializes the test file with necessary imports and creates a group for orientation tests.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:orientation_tests/main.dart';

void main() {
  group('Orientation', () {
    // ···
  });
}

----------------------------------------

TITLE: Configuring Translucent Theme for FlutterActivity
DESCRIPTION: Defines an Android theme with translucency support and applies it to FlutterActivity in the AndroidManifest.xml. This is required for creating translucent Flutter screens.

LANGUAGE: xml
CODE:
<style name="MyTheme" parent="@style/MyParentTheme">
  <item name="android:windowIsTranslucent">true</item>
</style>

LANGUAGE: xml
CODE:
<activity
  android:name="io.flutter.embedding.android.FlutterActivity"
  android:theme="@style/MyTheme"
  android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
  android:hardwareAccelerated="true"
  android:windowSoftInputMode="adjustResize"
  />

----------------------------------------

TITLE: Simple Widget Layout with Padding
DESCRIPTION: Shows how to create a simple widget layout with padding in Flutter

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(title: const Text('Sample App')),
    body: Center(
      child: CupertinoButton(
        onPressed: () {},
        padding: const EdgeInsets.only(left: 10, right: 10),
        child: const Text('Hello'),
      ),
    ),
  );
}

----------------------------------------

TITLE: Creating assetlinks.json for app links
DESCRIPTION: JSON structure for the assetlinks.json file, which is required for app links to work on Android.

LANGUAGE: json
CODE:
[
  {
    "relation": ["delegate_permission/common.handle_all_urls"],
    "target": {
      "namespace": "android_app",
      "package_name": "com.example.deeplink_cookbook",
      "sha256_cert_fingerprints": [
        "FF:2A:CF:7B:DD:CC:F1:03:3E:E8:B2:27:7C:A2:E3:3C:DE:13:DB:AC:8E:EB:3A:B9:72:A1:0E:26:8A:F5:EC:AF"
      ]
    }
  }
]

----------------------------------------

TITLE: Implementing ThemeRepository in Flutter
DESCRIPTION: This snippet shows the ThemeRepository class, which serves as the single source of truth for theme configuration settings. It interacts with the SharedPreferencesService to persist and retrieve the dark mode setting.

LANGUAGE: dart
CODE:
class ThemeRepository {
  ThemeRepository(this._service);

  final _darkModeController = StreamController<bool>.broadcast();

  final SharedPreferencesService _service;

  /// Get if dark mode is enabled
  Future<Result<bool>> isDarkMode() async {
    try {
      final value = await _service.isDarkMode();
      return Result.ok(value);
    } on Exception catch (e) {
      return Result.error(e);
    }
  }

  /// Set dark mode
  Future<Result<void>> setDarkMode(bool value) async {
    try {
      await _service.setDarkMode(value);
      _darkModeController.add(value);
      return Result.ok(null);
    } on Exception catch (e) {
      return Result.error(e);
    }
  }

  /// Stream that emits theme config changes.
  /// ViewModels should call [isDarkMode] to get the current theme setting.
  Stream<bool> observeDarkMode() => _darkModeController.stream;
}

----------------------------------------

TITLE: Fixing Unbounded Width Error in Flutter TextField
DESCRIPTION: Demonstrates how to resolve the 'An InputDecorator...cannot have an unbounded width' error by wrapping a TextField with an Expanded widget inside a Row.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return MaterialApp(
    home: Scaffold(
      appBar: AppBar(title: const Text('Unbounded Width of the TextField')),
      body: Row(children: [Expanded(child: TextFormField())]),
    ),
  );
}

----------------------------------------

TITLE: Creating Authenticated HTTP Client
DESCRIPTION: Code to obtain an authenticated HTTP client for making API requests.

LANGUAGE: dart
CODE:
var httpClient = (await _googleSignIn.authenticatedClient())!;

----------------------------------------

TITLE: Post-Migration Theme Configuration
DESCRIPTION: Example of how themes should be configured after the migration using FloatingActionButtonThemeData.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    floatingActionButtonTheme: FloatingActionButtonThemeData(
      foregroundColor: Colors.red,
    ),
  ),
)

----------------------------------------

TITLE: Creating BottomNavigationBarItem with Deprecated Title in Dart
DESCRIPTION: This code snippet demonstrates how to create a BottomNavigationBarItem using the deprecated 'title' parameter. It sets an icon and a Text widget as the title.

LANGUAGE: dart
CODE:
BottomNavigationBarItem(
  icon: Icons.add,
  title: Text('add'),
)

----------------------------------------

TITLE: Complete Flutter Widget Testing Example
DESCRIPTION: Complete implementation showing all three widget finding techniques combined in a single test file, including imports and main test structure.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('finds a Text widget', (tester) async {
    // Build an App with a Text widget that displays the letter 'H'.
    await tester.pumpWidget(const MaterialApp(home: Scaffold(body: Text('H'))));

    // Find a widget that displays the letter 'H'.
    expect(find.text('H'), findsOneWidget);
  });

  testWidgets('finds a widget using a Key', (tester) async {
    // Define the test key.
    const testKey = Key('K');

    // Build a MaterialApp with the testKey.
    await tester.pumpWidget(MaterialApp(key: testKey, home: Container()));

    // Find the MaterialApp widget using the testKey.
    expect(find.byKey(testKey), findsOneWidget);
  });

  testWidgets('finds a specific instance', (tester) async {
    const childWidget = Padding(padding: EdgeInsets.zero);

    // Provide the childWidget to the Container.
    await tester.pumpWidget(Container(child: childWidget));

    // Search for the childWidget in the tree and verify it exists.
    expect(find.byWidget(childWidget), findsOneWidget);
  });
}

----------------------------------------

TITLE: Creating a Ratings Row with Stars and Text in Flutter
DESCRIPTION: Demonstrates how to create a ratings row with star icons and review text using Row and Container widgets.

LANGUAGE: dart
CODE:
final stars = Row(
  mainAxisSize: MainAxisSize.min,
  children: [
    Icon(Icons.star, color: Colors.green[500]),
    Icon(Icons.star, color: Colors.green[500]),
    Icon(Icons.star, color: Colors.green[500]),
    const Icon(Icons.star, color: Colors.black),
    const Icon(Icons.star, color: Colors.black),
  ],
);

final ratings = Container(
  padding: const EdgeInsets.all(20),
  child: Row(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: [
      stars,
      const Text(
        '170 Reviews',
        style: TextStyle(
          color: Colors.black,
          fontWeight: FontWeight.w800,
          fontFamily: 'Roboto',
          letterSpacing: 0.5,
          fontSize: 20,
        ),
      ),
    ],
  ),
);

----------------------------------------

TITLE: Implementing UserProfile ViewModel in Flutter
DESCRIPTION: ViewModel implementation for handling UserProfile data and UI state management using ChangeNotifier.

LANGUAGE: dart
CODE:
class UserProfileViewModel extends ChangeNotifier {
  // ···
  final UserProfileRepository _userProfileRepository;

  UserProfile? get userProfile => _userProfile;
  // ···

  /// Load the user profile from the database or the network
  Future<void> load() async {
    // ···
  }

  /// Save the user profile with the new name
  Future<void> save(String newName) async {
    // ···
  }
}

----------------------------------------

TITLE: Setting Background Color in CSS
DESCRIPTION: Sets the background color of a div element using a hex color value in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  Lorem ipsum
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
}

----------------------------------------

TITLE: Extracting Flutter SDK Files in Console
DESCRIPTION: Commands to navigate to the development directory and unzip the downloaded Flutter SDK package.

LANGUAGE: console
CODE:
$ cd ~/development
$ unzip ~/Downloads/flutter_{{os}}_vX.X.X-{{site.sdk.channel}}.zip

----------------------------------------

TITLE: Add-to-App Pod Configuration in Ruby
DESCRIPTION: Alternative Podfile configuration for add-to-app projects to include App Clip target

LANGUAGE: ruby
CODE:
target 'MyApp' do
  install_all_flutter_pods(flutter_application_path)
end

target '<name of your App Clip target>'
  install_all_flutter_pods(flutter_application_path)
end

----------------------------------------

TITLE: Creating FocusNode Management in Flutter StatefulWidget
DESCRIPTION: Demonstrates proper FocusNode lifecycle management within a StatefulWidget. Creates and disposes of a FocusNode in initState and dispose methods respectively.

LANGUAGE: dart
CODE:
// Define a custom Form widget.
class MyCustomForm extends StatefulWidget {
  const MyCustomForm({super.key});

  @override
  State<MyCustomForm> createState() => _MyCustomFormState();
}

// Define a corresponding State class.
// This class holds data related to the form.
class _MyCustomFormState extends State<MyCustomForm> {
  // Define the focus node. To manage the lifecycle, create the FocusNode in
  // the initState method, and clean it up in the dispose method.
  late FocusNode myFocusNode;

  @override
  void initState() {
    super.initState();

    myFocusNode = FocusNode();
  }

  @override
  void dispose() {
    // Clean up the focus node when the Form is disposed.
    myFocusNode.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Fill this out in the next step.
  }
}

----------------------------------------

TITLE: Checking Focused Widget Type (Pre-Migration)
DESCRIPTION: Example of checking if the focused widget is an EditableText before migration. This approach no longer works after the change.

LANGUAGE: dart
CODE:
final Widget? focusedWidget = primaryFocus?.context?.widget;
if (focusedWidget is EditableText) {
  widget.controller.text = 'Updated Text';
}

----------------------------------------

TITLE: Configuring ABI Filters for Flutter Support in Groovy
DESCRIPTION: This Groovy code snippet shows how to set up ABI filters in the Android Gradle plugin to ensure compatibility with Flutter's supported architectures.

LANGUAGE: groovy
CODE:
android {
    // ...
    defaultConfig {
        ndk {
            // Filter for architectures supported by Flutter
            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }
}

----------------------------------------

TITLE: Creating FlutterEngine in UIKit with Objective-C
DESCRIPTION: Demonstrates creating a FlutterEngine as a property in the app delegate using Objective-C.

LANGUAGE: objc
CODE:
@import UIKit;
@import Flutter;

@interface AppDelegate : FlutterAppDelegate
@property (nonatomic,strong) FlutterEngine *flutterEngine;
@end

LANGUAGE: objc
CODE:
#import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h>

#import "AppDelegate.h"

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application
    didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> *)launchOptions {
  self.flutterEngine = [[FlutterEngine alloc] initWithName:@"my flutter engine"];
  [self.flutterEngine run];
  [GeneratedPluginRegistrant registerWithRegistry:self.flutterEngine];
  return [super application:application didFinishLaunchingWithOptions:launchOptions];
}

@end

----------------------------------------

TITLE: Migrating onKey focus handling in Flutter
DESCRIPTION: This example shows how to update Focus widget's onKey parameter to use the new onKeyEvent parameter, which now uses KeyEvent instead of RawKeyEvent in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Focus(
    onKey: (RawKeyEvent keyEvent) {
      print('Key event: $keyEvent');
      return KeyEventResult.ignored;
    }
    child: child,
  );
}

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Focus(
    onKeyEvent: (KeyEvent keyEvent) {
      print('Key event: $keyEvent');
      return KeyEventResult.ignored;
    }
    child: child,
  );
}

----------------------------------------

TITLE: Adding Internet Permission to Android Manifest
DESCRIPTION: Adds the INTERNET permission to the AndroidManifest.xml file for Android to allow video streaming from the internet.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application ...>

    </application>

    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

----------------------------------------

TITLE: Initializing Database Service in Flutter Main Function
DESCRIPTION: This snippet demonstrates how to initialize the DatabaseService in the main function of a Flutter application. It handles different platforms and sets up the appropriate database factory.

LANGUAGE: dart
CODE:
void main() {
  late DatabaseService databaseService;
  if (kIsWeb) {
    throw UnsupportedError('Platform not supported');
  } else if (Platform.isLinux || Platform.isWindows || Platform.isMacOS) {
    // Initialize FFI SQLite
    sqfliteFfiInit();
    databaseService = DatabaseService(databaseFactory: databaseFactoryFfi);
  } else {
    // Use default native SQLite
    databaseService = DatabaseService(databaseFactory: databaseFactory);
  }

  runApp(
    MainApp(
      // ···
      todoRepository: TodoRepository(database: databaseService),
    ),
  );
}

----------------------------------------

TITLE: Conditional Target Platform Assignment in Liquid
DESCRIPTION: This snippet uses Liquid templating to assign a target platform variable based on the input. It handles iOS, Android, and other platforms.

LANGUAGE: liquid
CODE:
{% case include.target %}
{% when 'mobile-ios' %}
   {% assign v-target = 'iOS' %}
{% when 'mobile-android','mobile' %}
   {% assign v-target = 'Android' %}
{% else %}
   {% assign v-target = include.target %}
{% endcase %}

----------------------------------------

TITLE: Conditional Target Platform Assignment in Liquid
DESCRIPTION: This snippet uses Liquid templating to assign a target platform variable based on the input. It handles iOS, Android, and other platforms.

LANGUAGE: liquid
CODE:
{% case include.target %}
{% when 'mobile-ios' %}
   {% assign v-target = 'iOS' %}
{% when 'mobile-android','mobile' %}
   {% assign v-target = 'Android' %}
{% else %}
   {% assign v-target = include.target %}
{% endcase %}

----------------------------------------

TITLE: Converting Enum to Class in Dart
DESCRIPTION: Example showing conversion of enum to a class, which will break hot reload.

LANGUAGE: dart
CODE:
class Color {
  Color(this.i, this.j);
  final int i;
  final int j;
}

----------------------------------------

TITLE: Getting Battery Level in Kotlin (Android)
DESCRIPTION: Retrieves the battery level using Android's BatteryManager API.

LANGUAGE: kotlin
CODE:
private fun getBatteryLevel(): Int {
  val batteryLevel: Int
  if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
    val batteryManager = getSystemService(Context.BATTERY_SERVICE) as BatteryManager
    batteryLevel = batteryManager.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY)
  } else {
    val intent = ContextWrapper(applicationContext).registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
    batteryLevel = intent!!.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) * 100 / intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1)
  }

  return batteryLevel
}

----------------------------------------

TITLE: Initializing Google Sign-In with YouTube Scope
DESCRIPTION: Configuration of GoogleSignIn instance with YouTube readonly scope for authentication.

LANGUAGE: dart
CODE:
final _googleSignIn = GoogleSignIn(
  scopes: <String>[YouTubeApi.youtubeReadonlyScope],
);

----------------------------------------

TITLE: Setting Dialog Background Color After Migration
DESCRIPTION: Updated example showing how to set dialog background color using the new DialogThemeData.backgroundColor property in Flutter ThemeData.

LANGUAGE: dart
CODE:
theme: ThemeData(
  dialogTheme: const DialogThemeData(backgroundColor: Colors.orange),
)

----------------------------------------

TITLE: Temporarily Disabling Dithering in Flutter
DESCRIPTION: Code example showing how to temporarily disable dithering in a Flutter application or test by setting Paint.enableDithering to false in the main method

LANGUAGE: dart
CODE:
  void main() {
    // TODO: Remove this after XYZ.
    Paint.enableDithering = false;

    runApp(MyApp());
  }

----------------------------------------

TITLE: Implementing Booking Retrieval in Flutter Repository
DESCRIPTION: Example implementation of getBooking method in BookingRepository that transforms API data into domain models by combining data from multiple endpoints.

LANGUAGE: dart
CODE:
Future<Result<Booking>> getBooking(int id) async {
  try {
    // Get the booking by ID from server.
    final resultBooking = await _apiClient.getBooking(id);
    if (resultBooking is Error<BookingApiModel>) {
      return Result.error(resultBooking.error);
    }
    final booking = resultBooking.asOk.value;

    final destination = _apiClient.getDestination(booking.destinationRef);
    final activities = _apiClient.getActivitiesForBooking(
            booking.activitiesRef);

    return Result.ok(
      Booking(
        startDate: booking.startDate,
        endDate: booking.endDate,
        destination: destination,
        activity: activities,
      ),
    );
  } on Exception catch (e) {
    return Result.error(e);
  }
}

----------------------------------------

TITLE: Complete Widget Testing Example in Dart
DESCRIPTION: This is a full example that combines the custom widget definition and the widget test. It demonstrates the entire process of widget testing in Flutter.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('MyWidget has a title and message', (tester) async {
    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));
    final titleFinder = find.text('T');
    final messageFinder = find.text('M');
    expect(titleFinder, findsOneWidget);
    expect(messageFinder, findsOneWidget);
  });
}

class MyWidget extends StatelessWidget {
  const MyWidget({super.key, required this.title, required this.message});

  final String title;
  final String message;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      home: Scaffold(
        appBar: AppBar(title: Text(title)),
        body: Center(child: Text(message)),
      ),
    );
  }
}

----------------------------------------

TITLE: Creating a Row of Star Icons with Packed Layout
DESCRIPTION: Shows how to create a Row of star icons with a packed layout using mainAxisSize property.

LANGUAGE: dart
CODE:
Row(
  mainAxisSize: MainAxisSize.min,
  children: [
    Icon(Icons.star, color: Colors.green[500]),
    Icon(Icons.star, color: Colors.green[500]),
    Icon(Icons.star, color: Colors.green[500]),
    const Icon(Icons.star, color: Colors.black),
    const Icon(Icons.star, color: Colors.black),
  ],
)

----------------------------------------

TITLE: Installing Firebase CLI
DESCRIPTION: Command to install the Firebase CLI globally using npm for Firebase Hosting deployment.

LANGUAGE: console
CODE:
npm install -g firebase-tools

----------------------------------------

TITLE: Animating Get Started Button in Flutter Staggered Menu
DESCRIPTION: Implements the animation for the 'Get Started' button at the bottom of the menu. The button fades in and scales up with a springy effect after the list items have animated.

LANGUAGE: dart
CODE:
Widget _buildGetStartedButton() {
  return SizedBox(
    width: double.infinity,
    child: Padding(
      padding: const EdgeInsets.all(24),
      child: AnimatedBuilder(
        animation: _staggeredController,
        builder: (context, child) {
          final animationPercent = Curves.elasticOut.transform(
            _buttonInterval.transform(_staggeredController.value),
          );
          final opacity = animationPercent.clamp(0.0, 1.0);
          final scale = (animationPercent * 0.5) + 0.5;

          return Opacity(
            opacity: opacity,
            child: Transform.scale(scale: scale, child: child),
          );
        },
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            shape: const StadiumBorder(),
            backgroundColor: Colors.blue,
            padding: const EdgeInsets.symmetric(horizontal: 48, vertical: 14),
          ),
          onPressed: () {},
          child: const Text(
            'Get Started',
            style: TextStyle(color: Colors.white, fontSize: 22),
          ),
        ),
      ),
    ),
  );
}

----------------------------------------

TITLE: Applying Theme in MaterialApp using ListenableBuilder in Flutter
DESCRIPTION: This snippet demonstrates how to use a ListenableBuilder to apply the theme to the MaterialApp based on the isDarkMode value from the MainAppViewModel.

LANGUAGE: dart
CODE:
ListenableBuilder(
  listenable: _viewModel,
  builder: (context, child) {
    return MaterialApp(
      theme: _viewModel.isDarkMode ? ThemeData.dark() : ThemeData.light(),
      home: child,
    );
  },
  child: //...
)

----------------------------------------

TITLE: Imperative UI State Change Example in Java
DESCRIPTION: Demonstrates the traditional imperative approach to UI modification where direct mutations are performed on view instances.

LANGUAGE: java
CODE:
// Imperative style
b.setColor(red)
b.clearChildren()
ViewC c3 = new ViewC(...)
b.add(c3)

----------------------------------------

TITLE: Implementing State Management for Favorite Widget
DESCRIPTION: State implementation for the FavoriteWidget that handles toggle functionality and UI updates.

LANGUAGE: dart
CODE:
void _toggleFavorite() {
  setState(() {
    if (_isFavorited) {
      _favoriteCount -= 1;
      _isFavorited = false;
    } else {
      _favoriteCount += 1;
      _isFavorited = true;
    }
  });
}

----------------------------------------

TITLE: Including macOS Software Requirements
DESCRIPTION: This snippet includes a separate Markdown file containing software requirements for macOS, passing the 'include.target' parameter.

LANGUAGE: liquid
CODE:
{% include docs/install/reqs/macos/software.md target=include.target %}

----------------------------------------

TITLE: Modified Generic Type Declaration
DESCRIPTION: Example showing modified generic class with additional type parameter that breaks hot reload.

LANGUAGE: dart
CODE:
class A<T, V> {
  T? i;
  V? v;
}

----------------------------------------

TITLE: Creating File Reference in Flutter
DESCRIPTION: This code creates a reference to a file named 'counter.txt' in the app's documents directory. It uses the File class from the dart:io library.

LANGUAGE: dart
CODE:
Future<File> get _localFile async {
  final path = await _localPath;
  return File('$path/counter.txt');
}

----------------------------------------

TITLE: Updating Localization Files for Stocks App
DESCRIPTION: Checks that the localization files of the stocks app are up-to-date.

LANGUAGE: Dart
CODE:
Check that localization files of stocks app are up-to-date by @goderbauer in 161608

----------------------------------------

TITLE: Showing SnackBar using Scaffold (Old Approach)
DESCRIPTION: This snippet demonstrates the previous approach of showing a SnackBar using the Scaffold. It requires a Builder to provide a new scope with a BuildContext under the Scaffold.

LANGUAGE: dart
CODE:
Scaffold(
  key: scaffoldKey,
  body: Builder(
    builder: (BuildContext context) {
      return GestureDetector(
        onTap: () {
          Scaffold.of(context).showSnackBar(SnackBar(
            content: const Text('snack'),
            duration: const Duration(seconds: 1),
            action: SnackBarAction(
              label: 'ACTION',
              onPressed: () { },
            ),
          ));
        },
        child: const Text('SHOW SNACK'),
      );
    },
  )
);

----------------------------------------

TITLE: Setting Java Compatibility for Flutter Integration
DESCRIPTION: This Groovy code snippet demonstrates how to set Java compatibility to version 11 or later, which is required for Flutter integration in an Android project.

LANGUAGE: groovy
CODE:
android {
    // ...
    compileOptions {
        sourceCompatibility = 11 // The minimum value
        targetCompatibility = 11 // The minimum value
    }
}

----------------------------------------

TITLE: Registering FlutterActivity in AndroidManifest.xml
DESCRIPTION: Add the FlutterActivity declaration to your AndroidManifest.xml file under the application tag. This step is necessary to use Flutter screens within your Android app.

LANGUAGE: xml
CODE:
<activity
  android:name="io.flutter.embedding.android.FlutterActivity"
  android:theme="@style/LaunchTheme"
  android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
  android:hardwareAccelerated="true"
  android:windowSoftInputMode="adjustResize"
  />

----------------------------------------

TITLE: Legacy RenderBox Implementation with performResize
DESCRIPTION: Original implementation using performResize method to set the size of a RenderBox.

LANGUAGE: dart
CODE:
  @override
  void performResize() {
     size = constraints.biggest;
  }

----------------------------------------

TITLE: URL Launcher Plugin Implementation
DESCRIPTION: Example of implementing the url_launcher plugin to open web URLs from a Flutter application

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:path/path.dart' as p;
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(home: DemoPage());
  }
}

class DemoPage extends StatelessWidget {
  const DemoPage({super.key});

  void launchURL() {
    launchUrl(p.toUri('https://flutter.dev'));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: ElevatedButton(
          onPressed: launchURL,
          child: const Text('Show Flutter homepage'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Implementing GoRouter for handling routes in Flutter
DESCRIPTION: Dart code snippet for implementing GoRouter in the main.dart file to handle routing in the Flutter application.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:go_router/go_router';

void main() => runApp(MaterialApp.router(routerConfig: router));

/// This handles '/' and '/details'.
final router = GoRouter(
  routes: [
    GoRoute(
      path: '/',
      builder: (_, __) => Scaffold(
        appBar: AppBar(title: const Text('Home Screen')),
      ),
      routes: [
        GoRoute(
          path: 'details',
          builder: (_, __) => Scaffold(
            appBar: AppBar(title: const Text('Details Screen')),
          ),
        ),
      ],
    ),
  ],
);

----------------------------------------

TITLE: Including External Release Notes Content in Markdown
DESCRIPTION: Template that imports content from an external markdown file containing release notes for Flutter DevTools 2.8.0 using Liquid include syntax.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.8.0-src.md %}

----------------------------------------

TITLE: Crashlytics Dependency in Firebase Plugin's Gradle File
DESCRIPTION: This Gradle snippet shows the Crashlytics dependency added by the Firebase Crashlytics plugin. It demonstrates how plugins can introduce their own dependencies, which may conflict with existing app dependencies.

LANGUAGE: groovy
CODE:
dependencies {
    …
    implementation("com.crashlytics.sdk.android:crashlytics:2.9.9")
    …
}

----------------------------------------

TITLE: Serving Website Locally
DESCRIPTION: Command to build and serve the website locally for development

LANGUAGE: console
CODE:
./dash_site serve

----------------------------------------

TITLE: Migrated OverflowBar Widget Usage
DESCRIPTION: Final implementation using OverflowBar widget with direct property configuration.

LANGUAGE: dart
CODE:
OverflowBar(
  alignment: MainAxisAlignment.center,
  children: <Widget>[
    // ...
  ],
),

----------------------------------------

TITLE: Evaluating Expressions in Flutter DevTools Console
DESCRIPTION: Demonstrates how to evaluate expressions and assign objects to variables in the Flutter DevTools Debug console. This can be done for paused or running applications in debug mode.

LANGUAGE: dart
CODE:
var x = $0

----------------------------------------

TITLE: Running Flutter Analysis for ChromeOS
DESCRIPTION: Command and sample output for running Flutter analysis with ChromeOS-specific checks enabled. Shows how to identify potential compatibility issues.

LANGUAGE: console
CODE:
$ flutter analyze

LANGUAGE: console
CODE:
Analyzing ...
warning • This hardware feature is not supported on ChromeOS •
android/app/src/main/AndroidManifest.xml:4:33 • unsupported_chrome_os_hardware

----------------------------------------

TITLE: Android 12 Splash Screen Configuration
DESCRIPTION: Implements the new splash screen API required for Android 12 and higher versions.

LANGUAGE: xml
CODE:
<style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
    <item name="android:windowSplashScreenBackground">@color/bgColor</item>
    <item name="android:windowSplashScreenAnimatedIcon">@drawable/launch_background</item>
</style>

----------------------------------------

TITLE: Variable Declaration in Dart
DESCRIPTION: Shows two ways to declare variables in Dart - explicitly typed and type-inferred.

LANGUAGE: Dart
CODE:
/// Dart
/// Both variables are acceptable.
String name = 'dart'; // Explicitly typed as a [String].
var otherName = 'Dart'; // Inferred [String] type.

----------------------------------------

TITLE: Implementing Animated Opacity in Flutter
DESCRIPTION: A Flutter application that demonstrates the use of AnimatedOpacity widget to create a fade-in animation effect. The example shows an owl image with a button that, when pressed, reveals additional details with a smooth fade-in transition over 2 seconds.

LANGUAGE: dart
CODE:
// Copyright 2019 the Dart project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file.

import 'package:flutter/material.dart';

const owlUrl =
    'https://raw.githubusercontent.com/flutter/website/main/src/content/assets/images/docs/owl.jpg';

class FadeInDemo extends StatefulWidget {
  const FadeInDemo({super.key});

  @override
  State<FadeInDemo> createState() => _FadeInDemoState();
}

class _FadeInDemoState extends State<FadeInDemo> {
  double opacity = 0;

  @override
  Widget build(BuildContext context) {
    return ListView(children: <Widget>[
      Image.network(owlUrl),
      TextButton(
        child: const Text(
          'Show Details',
          style: TextStyle(color: Colors.blueAccent),
        ),
        onPressed: () => setState(() {
          opacity = 1;
        }),
      ),
      AnimatedOpacity(
        duration: const Duration(seconds: 2),
        opacity: opacity,
        child: const Column(
          children: [
            Text('Type: Owl'),
            Text('Age: 39'),
            Text('Employment: None'),
          ],
        ),
      )
    ]);
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: Scaffold(
        body: Center(
          child: FadeInDemo(),
        ),
      ),
    );
  }
}

void main() {
  runApp(
    const MyApp(),
  );
}

----------------------------------------

TITLE: Creating and Using FragmentShader in Dart
DESCRIPTION: Create a FragmentShader instance from a FragmentProgram, set uniform values, and use it with Canvas API.

LANGUAGE: dart
CODE:
void updateShader(Canvas canvas, Rect rect, FragmentProgram program) {
  var shader = program.fragmentShader();
  shader.setFloat(0, 42.0);
  canvas.drawRect(rect, Paint()..shader = shader);
}

----------------------------------------

TITLE: Configuring Image Assets in pubspec.yaml
DESCRIPTION: YAML configuration to include image assets in the Flutter project.

LANGUAGE: yaml
CODE:
flutter:
  uses-material-design: true
  assets:
    - images/lake.jpg

----------------------------------------

TITLE: Enabling Impeller for macOS Debugging
DESCRIPTION: Command to enable Impeller when debugging Flutter apps on macOS using the flutter run command.

LANGUAGE: console
CODE:
flutter run --enable-impeller

----------------------------------------

TITLE: Validating Changes
DESCRIPTION: Command to check documentation and example code against site standards

LANGUAGE: console
CODE:
./dash_site check-all

----------------------------------------

TITLE: Migrated OverflowBar Implementation in Dart
DESCRIPTION: Updated implementation using OverflowBar widget with equivalent padding and spacing configurations.

LANGUAGE: dart
CODE:
Padding(
  padding: const EdgeInsets.all(8.0),
  child: OverflowBar(
    alignment: MainAxisAlignment.end,
    spacing: 8.0,
    overflowSpacing: 8.0,
    children: <Widget>[
      TextButton(child: const Text('Button 1'), onPressed: () {}),
      TextButton(child: const Text('Button 2'), onPressed: () {}),
      TextButton(child: const Text('Button 3'), onPressed: () {}),
    ],
  ),
),

----------------------------------------

TITLE: Creating Circles in Dart
DESCRIPTION: Creates a circular Container widget by setting shape to BoxShape.circle in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red circle
      decoration: BoxDecoration(
        color: Colors.red[400],
        shape: BoxShape.circle,
      ),
      padding: const EdgeInsets.all(16),
      width: 160,
      height: 160,
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
        textAlign: TextAlign.center,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Configuring Android Gradle Build Properties
DESCRIPTION: Reviewing and modifying the build.gradle.kts file to set various Android build properties.

LANGUAGE: Kotlin
CODE:
android {
    namespace = "com.example.[project]"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    ...

    defaultConfig {
        applicationId = "com.example.[project]"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        ...
    }
}

----------------------------------------

TITLE: Updated RenderBox Implementation with computeDryLayout
DESCRIPTION: New implementation using computeDryLayout method to calculate and return the size without modifying internal state.

LANGUAGE: dart
CODE:
  // This replaces the old performResize method.
  @override
  Size computeDryLayout(BoxConstraints constraints) {
     return constraints.biggest;
  }

----------------------------------------

TITLE: Creating a Form with Validation in Flutter
DESCRIPTION: Shows how to implement a Form widget with a TextFormField and validation logic.

LANGUAGE: dart
CODE:
final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

@override
Widget build(BuildContext context) {
  return Form(
    key: _formKey,
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        TextFormField(
          decoration: const InputDecoration(
            hintText: 'Enter your email',
          ),
          validator: (String? value) {
            if (value == null || value.isEmpty) {
              return 'Please enter some text';
            }
            return null;
          },
        ),
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 16.0),
          child: ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                // Process data.
              }
            },
            child: const Text('Submit'),
          ),
        ),
      ],
    ),
  );
}

----------------------------------------

TITLE: Implementing Tab Navigation in Flutter
DESCRIPTION: Demonstrates how to implement tab navigation using TabController, TabBar, and TabBarView in Flutter.

LANGUAGE: Dart
CODE:
class _MyAppState extends State<MyApp> with SingleTickerProviderStateMixin {
  late TabController controller = TabController(length: 2, vsync: this);

  @override
  Widget build(BuildContext context) {
    return TabBar(
      controller: controller,
      tabs: const <Tab>[
        Tab(icon: Icon(Icons.person)),
        Tab(icon: Icon(Icons.email)),
      ],
    );
  }
}

----------------------------------------

TITLE: Converting Colors to Extended sRGB Color Space in Dart
DESCRIPTION: Illustrates how to convert colors to a common color space (extended sRGB) before performing calculations, using the new Color.withValues method.

LANGUAGE: dart
CODE:
// Before
double redRatio(Color x, Color y) => x.red / y.red;

// After
double redRatio(Color x, Color y) {
  final xPrime = x.withValues(colorSpace: ColorSpace.extendedSRGB);
  final yPrime = y.withValues(colorSpace: ColorSpace.extendedSRGB);
  return xPrime.r / yPrime.r;
}

----------------------------------------

TITLE: Rendering Flutter Input Widgets Catalog in Markdown
DESCRIPTION: This code snippet uses a custom rendering function to generate a catalog page for Flutter's input widgets. It passes the category name 'Input' and a catalog object to the rendering function.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Input", catalog:catalog %}

----------------------------------------

TITLE: Creating a Column Layout in Flutter
DESCRIPTION: Demonstrates how to create a vertical layout using the Column widget in Flutter.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return const Column(
    mainAxisAlignment: MainAxisAlignment.center,
    children: <Widget>[
      Text('Column One'),
      Text('Column Two'),
      Text('Column Three'),
      Text('Column Four'),
    ],
  );
}

----------------------------------------

TITLE: Attaching FlutterView to FlutterEngine in Android
DESCRIPTION: This snippet demonstrates the minimum implementation needed for Flutter to render content. It involves attaching the FlutterView to the FlutterEngine when the view is added to a visible, resumed Activity.

LANGUAGE: java
CODE:
flutterView.attachToFlutterEngine(flutterEngine);
flutterEngine.getLifecycleChannel().appIsResumed();

----------------------------------------

TITLE: Executing Flutter Example Apps in Bash
DESCRIPTION: A series of commands to create, analyze, test, and run individual Flutter example apps. The process involves creating a project without overwriting existing files, changing to the project directory, running static analysis, executing tests, and finally running the app.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Demonstrating Previous ScrollView Behavior in Flutter
DESCRIPTION: This code snippet shows how a ListView would automatically attach to the PrimaryScrollController on all platforms before the change.

LANGUAGE: dart
CODE:
Scaffold(
  body: ListView.builder(
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    }
  ),
);

----------------------------------------

TITLE: Implementing Booking Deletion in Flutter Repository
DESCRIPTION: Implementation of the delete method in BookingRepository that handles the deletion of bookings through the API client.

LANGUAGE: dart
CODE:
Future<Result<void>> delete(int id) async {
  try {
    return _apiClient.deleteBooking(id);
  } on Exception catch (e) {
    return Result.error(e);
  }
}

----------------------------------------

TITLE: Generating Flutter Size Analysis File
DESCRIPTION: Command to build a Flutter application and generate a size analysis file using the --analyze-size flag. This file contains size information for the entire application including native code, Dart code, assets, and fonts.

LANGUAGE: plaintext
CODE:
flutter build <your target platform> --analyze-size

----------------------------------------

TITLE: Running Flutter Web App Using WebAssembly
DESCRIPTION: This command runs a Flutter web app in Chrome using WebAssembly.

LANGUAGE: console
CODE:
$ flutter run -d chrome --wasm

----------------------------------------

TITLE: Creating Circles in CSS
DESCRIPTION: Creates a circular div element by setting border-radius to 50% in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-circle">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-circle {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    text-align: center;
    width: 160px;
    height: 160px;
    border-radius: 50%;
}

----------------------------------------

TITLE: Showing FlutterViewController in SwiftUI
DESCRIPTION: Illustrates how to create a FlutterViewControllerRepresentable to represent the FlutterViewController in SwiftUI. The FlutterViewController constructor takes the pre-warmed FlutterEngine as an argument, which is injected through the view environment.

LANGUAGE: swift
CODE:
import SwiftUI
import Flutter

struct FlutterViewControllerRepresentable: UIViewControllerRepresentable {
  @Environment(FlutterDependencies.self) var flutterDependencies
  
  func makeUIViewController(context: Context) -> some UIViewController {
    return FlutterViewController(
      engine: flutterDependencies.flutterEngine,
      nibName: nil,
      bundle: nil)
  }
  
  func updateUIViewController(_ uiViewController: UIViewControllerType, context: Context) {}
}

struct ContentView: View {
  var body: some View {
    NavigationStack {
      NavigationLink("My Flutter Feature") {
        FlutterViewControllerRepresentable()
      }
    }
  }
}

----------------------------------------

TITLE: Java Implementation for Splash Screen Animation Control
DESCRIPTION: Controls splash screen animation behavior in Java, including disabling fade-out animation.

LANGUAGE: java
CODE:
import android.os.Build;
import android.os.Bundle;
import android.window.SplashScreenView;
import androidx.core.view.WindowCompat;
import io.flutter.embedding.android.FlutterActivity;

public class MainActivity extends FlutterActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            getSplashScreen()
                .setOnExitAnimationListener(
                    (SplashScreenView splashScreenView) -> {
                        splashScreenView.remove();
                    });
        }

        super.onCreate(savedInstanceState);
    }
}

----------------------------------------

TITLE: Including China-specific Notice with Liquid in HTML
DESCRIPTION: This snippet uses Liquid's render tag to include a separate Markdown file containing China-specific notices for Flutter installation.

LANGUAGE: HTML
CODE:
{% render docs/china-notice.md %}

----------------------------------------

TITLE: Scrolling with flutter_driver
DESCRIPTION: Example demonstrating scrolling functionality using flutter_driver's scroll method.

LANGUAGE: dart
CODE:
test('scroll, tap on the last item (Zedoary), verify selected', () async {
  // find the list of plants, by Key
  final listFinder = find.byValueKey('listOfPlants');

  // Scroll to the last position of the list
  // a -100,000 pixels is enough to reach the bottom of the list
  await driver.scroll(
    listFinder,
    0,
    -100000,
    const Duration(milliseconds: 500),
  );

  // find the item by text
  final item = find.text('Zedoary');

  // Wait for the list item to appear.
  await driver.waitFor(item);

  // Emulate a tap on the tile item.
  await driver.tap(item);

  // Wait for species name to be displayed
  await driver.waitFor(find.text('Curcuma zedoaria'));

  // 'please select' text should not be displayed
  await driver.waitForAbsent(
    find.text('Please select a plant from the list.'),
  );
});

----------------------------------------

TITLE: Creating a Repaint Example Page in Flutter
DESCRIPTION: This code creates a Flutter page that demonstrates repainting. It shows a circular progress indicator that causes the entire page to repaint on every frame.

LANGUAGE: dart
CODE:
class EverythingRepaintsPage extends StatelessWidget {
  const EverythingRepaintsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Repaint Example')),
      body: const Center(child: CircularProgressIndicator()),
    );
  }
}

----------------------------------------

TITLE: Markdown Template for Flutter Text Widget Documentation
DESCRIPTION: A markdown template file that uses Jekyll/Liquid templating to render a catalog page of Flutter's text-related widgets. The template includes frontmatter metadata and references a catalog page component.

LANGUAGE: markdown
CODE:
---
title: Text widgets
short-title: Text
description: A catalog of Flutter's widgets for displaying and styling text.
---

{% render docs/catalog-page.md, categoryName:"Text", catalog:catalog %}

----------------------------------------

TITLE: YAML Front Matter Configuration for Flutter Testing Documentation
DESCRIPTION: YAML configuration block that defines the page layout, title, and description for Flutter testing and debugging documentation using front matter syntax.

LANGUAGE: yaml
CODE:
---
layout: toc
title: Testing & debugging
description: Content covering testing and debugging Flutter apps.
---

----------------------------------------

TITLE: Initializing and Running Flutter Example Apps
DESCRIPTION: Series of command line instructions to create, analyze, test and run Flutter example applications. The commands should be executed from the repository root directory, where $PROJECT represents the specific app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Swift Compilation Error Example
DESCRIPTION: Example of compilation error in Swift due to incorrect nullability annotation

LANGUAGE: plaintext
CODE:
error build: Value of optional type 'UIView?' must be unwrapped to a value of type 'UIView'

----------------------------------------

TITLE: Variable Declaration in JavaScript
DESCRIPTION: Declares an untyped variable in JavaScript using let.

LANGUAGE: JavaScript
CODE:
// JavaScript
let name = 'JavaScript';

----------------------------------------

TITLE: Configuring Android App Manifest
DESCRIPTION: Reviewing and modifying the AndroidManifest.xml file for app configuration.

LANGUAGE: XML
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="[project]"
        ...
    </application>
    ...
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>

----------------------------------------

TITLE: Verifying Flutter Version in Bash
DESCRIPTION: Command to check the installed Flutter version. Ensure you're using Flutter 2.5 or newer before proceeding with the migration.

LANGUAGE: bash
CODE:
flutter --version

----------------------------------------

TITLE: Implementing Gesture Detection in Flutter
DESCRIPTION: Demonstrates how to use GestureDetector to handle various gestures in Flutter.

LANGUAGE: Dart
CODE:
@override
Widget build(BuildContext context) {
  return GestureDetector(
    child: Scaffold(
      appBar: AppBar(title: const Text('Gestures')),
      body: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Tap, Long Press, Swipe Horizontally or Vertically'),
          ],
        ),
      ),
    ),
    onTap: () {
      print('Tapped');
    },
    onLongPress: () {
      print('Long Pressed');
    },
    onVerticalDragEnd: (value) {
      print('Swiped Vertically');
    },
    onHorizontalDragEnd: (value) {
      print('Swiped Horizontally');
    },
  );
}

----------------------------------------

TITLE: Starting a Flutter Application for Debugging
DESCRIPTION: This snippet demonstrates how to start a Flutter application for debugging using the 'flutter run' command. It requires navigating to the app directory first.

LANGUAGE: console
CODE:
cd path/to/flutter/app
flutter run

----------------------------------------

TITLE: Rendering Cupertino Widgets Catalog Page in Flutter Documentation
DESCRIPTION: This snippet uses a custom rendering function to generate a catalog page for Cupertino widgets in Flutter documentation. It passes the category name 'Cupertino' and a catalog object to the rendering function.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Cupertino", catalog:catalog %}

----------------------------------------

TITLE: Updating Podspec File for New Directory Structure
DESCRIPTION: This snippet shows the changes required in the plugin's podspec file to reflect the new directory structure after migrating to Swift Package Manager support.

LANGUAGE: ruby
CODE:
s.source_files = 'plugin_name/Sources/plugin_name/**/*.{h,m}'
s.public_header_files = 'plugin_name/Sources/plugin_name/include/**/*.h'
s.module_map = 'plugin_name/Sources/plugin_name/include/cocoapods_plugin_name.modulemap'
s.resource_bundles = {'plugin_name_privacy' => ['plugin_name/Sources/plugin_name/PrivacyInfo.xcprivacy']}

----------------------------------------

TITLE: Running Flutter Doctor Command in Console
DESCRIPTION: This command validates all components of a complete Flutter development environment. It should be run in the terminal or PowerShell depending on the operating system.

LANGUAGE: console
CODE:
{{prompt}} flutter doctor

----------------------------------------

TITLE: Adding integration_test Package Configuration
DESCRIPTION: YAML configuration to add the integration_test package as a dev dependency to the project's pubspec.yaml file.

LANGUAGE: yaml
CODE:
dev_dependencies:
  integration_test:
    sdk: flutter

----------------------------------------

TITLE: Enabling Accessibility Semantics in Flutter Web
DESCRIPTION: Code snippet demonstrating how to programmatically enable accessibility semantics tree for web applications using SemanticsBinding.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter/semantics.dart';

void main() {
  runApp(const MyApp());
  SemanticsBinding.instance.ensureSemantics();
}

----------------------------------------

TITLE: Optimizing Image Loading in Flutter
DESCRIPTION: This code demonstrates how to optimize image loading in Flutter by using the cacheHeight and cacheWidth parameters. This approach reduces memory usage when loading large images.

LANGUAGE: dart
CODE:
class ResizedImage extends StatelessWidget {
  const ResizedImage({super.key});

  @override
  Widget build(BuildContext context) {
    return Image.asset('dash.png', cacheHeight: 213, cacheWidth: 392);
  }
}

----------------------------------------

TITLE: Creating Method Channel in Dart
DESCRIPTION: Defines a MethodChannel for communication between Flutter and Android, and implements a function to launch the Android activity.

LANGUAGE: dart
CODE:
const platformMethodChannel = MethodChannel(
  'com.example.flutter_android_activity',
);

void _launchAndroidActivity() {
  platformMethodChannel.invokeMethod(
    'launchActivity',
    {'message': 'Hello from Flutter'},
  );
}

----------------------------------------

TITLE: Creating New Flutter Project with Kotlin
DESCRIPTION: Command to create a new Flutter project using Kotlin as the Android language.

LANGUAGE: console
CODE:
$ flutter create --android-language kotlin flavors_example

----------------------------------------

TITLE: Starting Dart App in Paused State for Network Recording
DESCRIPTION: Command to start a Dart app in a paused state with the observatory enabled, allowing DevTools to begin recording network traffic before the app resumes. This is useful for capturing network requests during app startup.

LANGUAGE: plaintext
CODE:
dart run --pause-isolates-on-start --observe ...

----------------------------------------

TITLE: Markdown Job Posting Structure
DESCRIPTION: Base template structure for creating Flutter team job postings, including front matter and comment instructions for customization.

LANGUAGE: markdown
CODE:
---
title: <Job Title>
toc: false
---

{% comment %}
1. Make a copy of this document within the `src/jobs` directory
2. Name it something representative of the role
3. Remove the leading underscore (_) to allow the document to be published
4. Specify the full job title in the front matter
5. Update the sections with a TODO, removing the TODO when complete
6. Adjust the "To apply" link if necessary
{% endcomment %}

----------------------------------------

TITLE: Markdown Structure for Flutter Support Documentation
DESCRIPTION: Structured markdown document outlining various support options for Flutter developers, including community forums, bug reporting, and professional services.

LANGUAGE: markdown
CODE:
---
title: Flutter support
description: Where can you get support when developing with Flutter.
---

Welcome!

There are many different ways to get support
when developing with Flutter.
As Flutter is an open source project,
your options range from filing issues when you
run into bugs in the software,
to connecting with your local community,
to browsing and identifying a list of commercial agencies
and consultants who offer support services.

----------------------------------------

TITLE: Complete Delete Implementation with Response Handling
DESCRIPTION: Enhanced version of deleteAlbum function that includes response handling and error checking.

LANGUAGE: dart
CODE:
Future<Album> deleteAlbum(String id) async {
  final http.Response response = await http.delete(
    Uri.parse('https://jsonplaceholder.typicode.com/albums/$id'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
  );

  if (response.statusCode == 200) {
    return Album.empty();
  } else {
    throw Exception('Failed to delete album.');
  }
}

----------------------------------------

TITLE: Installing iOS Simulator Platform
DESCRIPTION: Command to download and install the iOS Simulator platform using xcodebuild

LANGUAGE: console
CODE:
xcodebuild -downloadPlatform iOS

----------------------------------------

TITLE: Including Release Notes Content with Jekyll Template
DESCRIPTION: A Jekyll/Liquid template directive that includes external release notes content from a markdown source file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.29.0-src.md %}

----------------------------------------

TITLE: Printing to Console in Dart
DESCRIPTION: Uses print() to output a message to the console in Dart.

LANGUAGE: Dart
CODE:
/// Dart
print('Hello world!');

----------------------------------------

TITLE: Flutter Xcode Cloud Post-Clone Script
DESCRIPTION: Shell script that runs after Xcode Cloud clones the repository. Sets up Flutter environment, installs dependencies, and configures CocoaPods for iOS builds.

LANGUAGE: sh
CODE:
#!/bin/sh

# Fail this script if any subcommand fails.
set -e

# The default execution directory of this script is the ci_scripts directory.
cd $CI_PRIMARY_REPOSITORY_PATH # change working directory to the root of your cloned repo.

# Install Flutter using git.
git clone https://github.com/flutter/flutter.git --depth 1 -b stable $HOME/flutter
export PATH="$PATH:$HOME/flutter/bin"

# Install Flutter artifacts for iOS (--ios), or macOS (--macos) platforms.
flutter precache --ios

# Install Flutter dependencies.
flutter pub get

# Install CocoaPods using Homebrew.
HOMEBREW_NO_AUTO_UPDATE=1 # disable homebrew's automatic updates.
brew install cocoapods

# Install CocoaPods dependencies.
cd ios && pod install # run `pod install` in the `ios` directory.

exit 0

----------------------------------------

TITLE: Recreating Windows Project in Flutter
DESCRIPTION: Command to recreate the Windows project files after deleting the existing ones in the windows/runner folder.

LANGUAGE: bash
CODE:
flutter create --platforms=windows .

----------------------------------------

TITLE: Simplifying Animation with AnimatedWidget in Flutter
DESCRIPTION: Shows how to use the AnimatedWidget helper class to create a widget that performs a reusable animation, separating the animation code from the widget code.

LANGUAGE: dart
CODE:
class AnimatedLogo extends AnimatedWidget {
  const AnimatedLogo({super.key, required Animation<double> animation})
    : super(listenable: animation);

  @override
  Widget build(BuildContext context) {
    final animation = listenable as Animation<double>;
    return Center(
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10),
        height: animation.value,
        width: animation.value,
        child: const FlutterLogo(),
      ),
    );
  }
}

----------------------------------------

TITLE: Configuring Asset Transformation in pubspec.yaml
DESCRIPTION: Demonstrates how to specify asset transformation configuration in the pubspec.yaml file using vector_graphics_compiler package for SVG files.

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - path: assets/logo.svg
      transformers:
        - package: vector_graphics_compiler

----------------------------------------

TITLE: Including Release Notes Content in Markdown
DESCRIPTION: Jekyll/Liquid template include statement that imports release notes content from an external markdown file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.36.0-src.md %}

----------------------------------------

TITLE: Including Cookbook Index in Markdown
DESCRIPTION: A markdown include statement that pulls in a cookbook group index template, likely containing a collection of persistence-related recipes and examples.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: VS Code Flutter Doctor Command
DESCRIPTION: Instructions for validating Flutter setup in VS Code by running Flutter Doctor through the command palette. This helps ensure proper Flutter configuration.

LANGUAGE: markdown
CODE:
1. Go to **View** > **Command Palette...**
2. Type `doctor`
3. Select **Flutter: Run Flutter Doctor**

----------------------------------------

TITLE: Setting Android SDK Root
DESCRIPTION: Command to set ANDROID_SDK_ROOT environment variable to the SDK tools directory.

LANGUAGE: console
CODE:
$ export ANDROID_SDK_ROOT="$TOOLS_PATH"

----------------------------------------

TITLE: Verifying Flutter device recognition on Windows
DESCRIPTION: This command checks if Flutter recognizes the connected Android device on a Windows system. It lists all available devices that Flutter can detect.

LANGUAGE: console
CODE:
c:\> flutter devices

----------------------------------------

TITLE: Including Release Notes Content in Markdown
DESCRIPTION: Markdown include directive to embed the content of release notes from an external source file named release-notes-2.17.0-src.md

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.17.0-src.md %}

----------------------------------------

TITLE: Making Network Requests in Flutter
DESCRIPTION: Shows how to make a simple network request using the http package in Flutter.

LANGUAGE: dart
CODE:
import 'dart:developer' as developer;
import 'package:http/http.dart' as http;

Future<void> loadData() async {
  var dataURL = Uri.parse('https://jsonplaceholder.typicode.com/posts');
  http.Response response = await http.get(dataURL);
  developer.log(response.body);
}

----------------------------------------

TITLE: Using LayoutBuilder for Constraint-Based Layouts
DESCRIPTION: LayoutBuilder provides layout constraints from the parent Widget, returning BoxConstraints object with width and height ranges. This is useful for custom widgets that need to adapt to their allocated space.

LANGUAGE: dart
CODE:
LayoutBuilder(builder: (context, constraints) {
  // Use constraints.maxWidth, constraints.maxHeight
})

----------------------------------------

TITLE: Enabling Layout Guidelines in Flutter
DESCRIPTION: This code snippet shows how to enable layout guidelines in Flutter for better understanding of the app's layout. It sets the debugPaintSizeEnabled flag to true.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void showLayoutGuidelines() {
  debugPaintSizeEnabled = true;
}

----------------------------------------

TITLE: Creating Text Excerpts in CSS
DESCRIPTION: Creates a text excerpt with ellipsis using CSS properties for overflow and line clamping.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum dolor sit amet, consec etur
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
}

----------------------------------------

TITLE: Updating App Version in pubspec.yaml
DESCRIPTION: Updating the version number of the Flutter app in the pubspec.yaml file.

LANGUAGE: YAML
CODE:
version: 1.0.0+1

----------------------------------------

TITLE: Photo Model Class Definition
DESCRIPTION: Dart class representing a photo with JSON deserialization functionality.

LANGUAGE: dart
CODE:
class Photo {
  final int albumId;
  final int id;
  final String title;
  final String url;
  final String thumbnailUrl;

  const Photo({
    required this.albumId,
    required this.id,
    required this.title,
    required this.url,
    required this.thumbnailUrl,
  });

  factory Photo.fromJson(Map<String, dynamic> json) {
    return Photo(
      albumId: json['albumId'] as int,
      id: json['id'] as int,
      title: json['title'] as String,
      url: json['url'] as String,
      thumbnailUrl: json['thumbnailUrl'] as String,
    );
  }
}

----------------------------------------

TITLE: Including Markdown Documentation Group Index
DESCRIPTION: Includes a markdown file containing the cookbook group index for unit testing documentation.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Importing and Using Flutter Generated Localizations in Dart
DESCRIPTION: This Dart code demonstrates how to import and use generated localizations from the synthetic package:flutter_gen. It shows the import statement and usage in a MaterialApp constructor.

LANGUAGE: dart
CODE:
import 'package:flutter_gen/gen_l10n/app_localizations.dart';
// ...
const MaterialApp(
  title: 'Localizations Sample App',
  localizationsDelegates: AppLocalizations.localizationsDelegates,
  supportedLocales: AppLocalizations.supportedLocales,
);

----------------------------------------

TITLE: Including Release Notes Content in Markdown
DESCRIPTION: Jekyll include directive that imports content from an external markdown file containing the full release notes for DevTools version 2.19.0.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.19.0-src.md %}

----------------------------------------

TITLE: Configuring Cache-Control Headers in HTML
DESCRIPTION: Examples of how to append build IDs to static resource links in HTML to defeat cache headers after deployment. This helps force an app download after updates.

LANGUAGE: html
CODE:
<!-- Option 1, append build ID as a query parameter in your links -->
<script src="flutter_bootstrap.js?v=123" async></script>

<!-- Option 2, update the filename and update your links -->
<script src="flutter_bootstrap.v123.js" async></script>

----------------------------------------

TITLE: Fetching Code Signing Files
DESCRIPTION: Command to fetch code signing files from App Store Connect using Codemagic CLI tools.

LANGUAGE: bash
CODE:
app-store-connect fetch-signing-files YOUR.APP.BUNDLE_ID \
    --platform MAC_OS \
    --type MAC_APP_STORE \
    --certificate-key=@file:/path/to/cert_key \
    --create

----------------------------------------

TITLE: Finding Flutter SDK Installation Path
DESCRIPTION: Command to locate the Flutter SDK binary directory in the system.

LANGUAGE: console
CODE:
find / -type d -wholename "flutter/bin" 2>/dev/null

----------------------------------------

TITLE: Executing Flutter Framework Preparation Script
DESCRIPTION: Shell script to run the Flutter framework preparation script as a pre-action in Xcode's build process. This script prepares the Flutter framework for use with Swift Package Manager.

LANGUAGE: sh
CODE:
"$FLUTTER_ROOT"/packages/flutter_tools/bin/macos_assemble.sh prepare

----------------------------------------

TITLE: Inline Formatting in Dart
DESCRIPTION: Applies inline formatting to text using RichText and TextSpan widgets in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      decoration: BoxDecoration(
        color: Colors.red[400],
      ),
      padding: const EdgeInsets.all(16),
      child: RichText(
        text: TextSpan(
          style: bold24Roboto,
          children: const <TextSpan>[
            TextSpan(text: 'Lorem '),
            TextSpan(
              text: 'ipsum',
              style: TextStyle(
                fontWeight: FontWeight.w300,
                fontStyle: FontStyle.italic,
                fontSize: 48,
              ),
            ),
          ],
        ),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Basic Custom Flutter Bootstrap Script
DESCRIPTION: Shows the minimal required code for a custom Flutter bootstrap JavaScript file with necessary tokens and loader initialization.

LANGUAGE: javascript
CODE:
{{flutter_js}}
{{flutter_build_config}}

_flutter.loader.load();

----------------------------------------

TITLE: Updating ShortcutManager.handleKeypress Method in Dart
DESCRIPTION: This code shows how to modify a custom ShortcutManager implementation to handle KeyEvents instead of RawKeyEvents, including the handling of key repeat events.

LANGUAGE: dart
CODE:
class _MyShortcutManager extends ShortcutManager {
  @override
  KeyEventResult handleKeypress(BuildContext context, KeyEvent event) {
    if (event is! KeyDownEvent && event is! KeyRepeatEvent) {
      return KeyEventResult.ignored;
    }
    if (event is KeyRepeatEvent) {
      // (Do something with repeated keys.)
    }
    // ... (your implementation here)
    return KeyEventResult.handled;
  }
}

----------------------------------------

TITLE: Initializing MethodChannel in Dart
DESCRIPTION: Sets up a MethodChannel for communication between Flutter and platform-specific code.

LANGUAGE: dart
CODE:
static const platform = MethodChannel('samples.flutter.dev/battery');

----------------------------------------

TITLE: Implementing MethodChannel Handler in Swift (iOS)
DESCRIPTION: Sets up a FlutterMethodChannel and implements the method call handler to get battery level on iOS.

LANGUAGE: swift
CODE:
let controller : FlutterViewController = window?.rootViewController as! FlutterViewController
let batteryChannel = FlutterMethodChannel(name: "samples.flutter.dev/battery",
                                          binaryMessenger: controller.binaryMessenger)
batteryChannel.setMethodCallHandler({
  [weak self] (call: FlutterMethodCall, result: FlutterResult) -> Void in
  guard call.method == "getBatteryLevel" else {
    result(FlutterMethodNotImplemented)
    return
  }
  self?.receiveBatteryLevel(result: result)
})

----------------------------------------

TITLE: Generating Card Grid with Liquid Template in HTML
DESCRIPTION: This snippet demonstrates how to create a card grid using Liquid templating within HTML. It iterates over a collection of documentation cards, generating a link and content for each.

LANGUAGE: html
CODE:
<div class="card-grid">
{% for card in docs_cards -%}
  <a class="card outlined-card" href="{{card.url}}">
    <div class="card-header">
      <span class="card-title">{{card.name}}</span>
    </div>
    <div class="card-content">
      <p>{{card.description}}</p>
    </div>
  </a>
{% endfor -%}
</div>

----------------------------------------

TITLE: Accepting Android Licenses for Flutter
DESCRIPTION: Command to accept Android SDK licenses required for Flutter development

LANGUAGE: console
CODE:
$ flutter doctor --android-licenses

----------------------------------------

TITLE: Installing FFI for Apple Silicon
DESCRIPTION: Commands to reinstall FFI gem with proper configuration for Apple Silicon Macs

LANGUAGE: console
CODE:
sudo gem uninstall ffi && sudo gem install ffi -- --enable-libffi-alloc

----------------------------------------

TITLE: Rendering Flutter Doctor Precedence Information
DESCRIPTION: This snippet renders a separate Markdown file containing information about Flutter Doctor precedence.

LANGUAGE: liquid
CODE:
{% render docs/install/reqs/flutter-sdk/flutter-doctor-precedence.md %}

----------------------------------------

TITLE: Handling Returned Data in Flutter
DESCRIPTION: Implements the _navigateAndDisplaySelection method to show a snackbar with the returned result.

LANGUAGE: dart
CODE:
Future<void> _navigateAndDisplaySelection(BuildContext context) async {
  // Navigator.push returns a Future that completes after calling
  // Navigator.pop on the Selection Screen.
  final result = await Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => const SelectionScreen()),
  );

  // When a BuildContext is used from a StatefulWidget, the mounted property
  // must be checked after an asynchronous gap.
  if (!context.mounted) return;

  // After the Selection Screen returns a result, hide any previous snackbars
  // and show the new result.
  ScaffoldMessenger.of(context)
    ..removeCurrentSnackBar()
    ..showSnackBar(SnackBar(content: Text('$result')));
}

----------------------------------------

TITLE: Implementing ActivityAware Interface in Java
DESCRIPTION: Implementation of the ActivityAware interface for Flutter Android plugins that need to interact with UI or Activity lifecycle. Shows methods for handling attachment, detachment, and configuration changes.

LANGUAGE: Java
CODE:
public class MyPlugin implements FlutterPlugin, ActivityAware {
  //...normal plugin behavior is hidden...

  @Override
  public void onAttachedToActivity(ActivityPluginBinding activityPluginBinding) {
    // TODO: your plugin is now attached to an Activity
  }

  @Override
  public void onDetachedFromActivityForConfigChanges() {
    // TODO: the Activity your plugin was attached to was
    // destroyed to change configuration.
    // This call will be followed by onReattachedToActivityForConfigChanges().
  }

  @Override
  public void onReattachedToActivityForConfigChanges(ActivityPluginBinding activityPluginBinding) {
    // TODO: your plugin is now attached to a new Activity
    // after a configuration change.
  }

  @Override
  public void onDetachedFromActivity() {
    // TODO: your plugin is no longer associated with an Activity.
    // Clean up references.
  }
}

----------------------------------------

TITLE: Implementing CardListItem Widget in Flutter
DESCRIPTION: Defines a CardListItem widget that displays an image and text with loading placeholders.

LANGUAGE: dart
CODE:
class CardListItem extends StatelessWidget {
  const CardListItem({super.key, required this.isLoading});

  final bool isLoading;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [_buildImage(), const SizedBox(height: 16), _buildText()],
      ),
    );
  }

  Widget _buildImage() {
    return AspectRatio(
      aspectRatio: 16 / 9,
      child: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.black,
          borderRadius: BorderRadius.circular(16),
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(16),
          child: Image.network(
            'https://docs.flutter.dev/cookbook'
            '/img-files/effects/split-check/Food1.jpg',
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }

  Widget _buildText() {
    if (isLoading) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: double.infinity,
            height: 24,
            decoration: BoxDecoration(
              color: Colors.black,
              borderRadius: BorderRadius.circular(16),
            ),
          ),
          const SizedBox(height: 16),
          Container(
            width: 250,
            height: 24,
            decoration: BoxDecoration(
              color: Colors.black,
              borderRadius: BorderRadius.circular(16),
            ),
          ),
        ],
      );
    } else {
      return const Padding(
        padding: EdgeInsets.symmetric(horizontal: 8),
        child: Text(
          'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do '
          'eiusmod tempor incididunt ut labore et dolore magna aliqua.',
        ),
      );
    }
  }
}

----------------------------------------

TITLE: Updating SystemChrome.setEnabledSystemUIOverlays in Dart
DESCRIPTION: Shows the migration from the deprecated setEnabledSystemUIOverlays method to setEnabledSystemUIMode. This change allows for setting up common fullscreen modes that match native Android app designs.

LANGUAGE: dart
CODE:
SystemChrome.setEnabledSystemUIOverlays(<SystemUiOverlay>[
  SystemUiOverlay.top,
  SystemUiOverlay.bottom,
]);

LANGUAGE: dart
CODE:
SystemChrome.setEnabledSystemUIMode(
  SystemUiMode.manual,
  overlays: <SystemUiOverlay>[
    SystemUiOverlay.top,
    SystemUiOverlay.bottom,
  ],
);

----------------------------------------

TITLE: Configuring Initial Route with Cached FlutterEngine in Java
DESCRIPTION: This snippet shows how to create a custom Application class in Java that instantiates a FlutterEngine, sets an initial route, executes the Dart entrypoint, and caches the engine for later use in FlutterActivity or FlutterFragment.

LANGUAGE: java
CODE:
public class MyApplication extends Application {
  @Override
  public void onCreate() {
    super.onCreate();
    // Instantiate a FlutterEngine.
    flutterEngine = new FlutterEngine(this);
    // Configure an initial route.
    flutterEngine.getNavigationChannel().setInitialRoute("your/route/here");
    // Start executing Dart code to pre-warm the FlutterEngine.
    flutterEngine.getDartExecutor().executeDartEntrypoint(
      DartEntrypoint.createDefault()
    );
    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.
    FlutterEngineCache
      .getInstance()
      .put("my_engine_id", flutterEngine);
  }
}

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: Series of commands to create, analyze, test and run Flutter example applications. These commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT

LANGUAGE: bash
CODE:
cd $PROJECT

LANGUAGE: bash
CODE:
dart analyze

LANGUAGE: bash
CODE:
flutter test

LANGUAGE: bash
CODE:
flutter run

----------------------------------------

TITLE: Installing Android Studio Dependencies on ChromeOS
DESCRIPTION: Command to install required system packages for Android Studio on ChromeOS. These packages provide necessary 64-bit libraries and compression support.

LANGUAGE: console
CODE:
$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

----------------------------------------

TITLE: Extracting Flutter SDK Archive
DESCRIPTION: Commands to extract the downloaded Flutter SDK archive to a development directory

LANGUAGE: console
CODE:
$ cd ~/development
$ tar xf ~/Downloads/flutter_{{os}}_vX.X.X-{{site.sdk.channel}}.tar.xz

----------------------------------------

TITLE: Configuring Xcode Command Line Tools
DESCRIPTION: Commands to configure Xcode command-line tools to use the installed version of Xcode

LANGUAGE: console
CODE:
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
sudo xcodebuild -runFirstLaunch

----------------------------------------

TITLE: GCD-based Weather ViewModel in Swift
DESCRIPTION: Implements a view model using Grand Central Dispatch (GCD) to handle asynchronous weather data loading.

LANGUAGE: swift
CODE:
@Observable class ContentViewModel {
    private(set) var result: Weather?

    private let queue = DispatchQueue(label: "weather_io_queue")
    func load() {
        // Mimic 1 second network delay.
        queue.asyncAfter(deadline: .now() + 1) { [weak self] in
            DispatchQueue.main.async {
                self?.result = .sunny
            }
        }
    }
}

----------------------------------------

TITLE: Configuring Cache Headers for Firebase Hosting
DESCRIPTION: JSON configuration for Firebase Hosting to set cache headers. This example sets different caching strategies for static assets and application scripts.

LANGUAGE: json
CODE:
{
  "hosting": {
    "headers": [
      {
        "source":
          "**/*.@(jpg|jpeg|gif|png|svg|webp|css|eot|otf|ttf|ttc|woff|woff2|font.css)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=3600,s-maxage=604800"
          }
        ]
      },
      {
        "source":
          "**/*.@(mjs|js|wasm|json)",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "max-age=0,s-maxage=604800"
          }
        ]
      }
    ]
  }
}

----------------------------------------

TITLE: MyMouseRegion Implementation After Migration in Dart
DESCRIPTION: This code snippet shows the updated implementation of MyMouseRegion class after the migration. It includes a new method didUnmountRenderObject to handle the mounted-exit check, preventing potential setState calls on unmounted widgets.

LANGUAGE: dart
CODE:
class MyMouseRegion extends SingleChildRenderObjectWidget {
  const MyMouseRegion({this.onHoverChange});

  final ValueChanged<bool> onHoverChange;

  @override
  RenderMouseRegion createRenderObject(BuildContext context) {
    return RenderMouseRegion(
      onEnter: (_) { onHoverChange(true); },
      onExit: (_) { onHoverChange(false); },
    );
  }

  @override
  void updateRenderObject(BuildContext context, RenderMouseRegion renderObject) {
    renderObject
      ..onEnter = (_) { onHoverChange(true); }
      ..onExit = (_) { onHoverChange(false); };
  }

  @override
  void didUnmountRenderObject(RenderMouseRegion renderObject) {
    renderObject
      ..onExit = onHoverChange == null ? null : (_) {};
  }
}

----------------------------------------

TITLE: Implementing Keyboard Shortcuts in Dart
DESCRIPTION: This snippet shows how to use the Shortcuts widget to implement keyboard shortcuts for a large section of the widget tree in a Flutter app.

LANGUAGE: dart
CODE:
// Define a class for each type of shortcut action you want
class CreateNewItemIntent extends Intent {
  const CreateNewItemIntent();
}

Widget build(BuildContext context) {
  return Shortcuts(
    // Bind intents to key combinations
    shortcuts: const <ShortcutActivator, Intent>{
      SingleActivator(LogicalKeyboardKey.keyN, control: true):
          CreateNewItemIntent(),
    },
    child: Actions(
      // Bind intents to an actual method in your code
      actions: <Type, Action<Intent>>{
        CreateNewItemIntent: CallbackAction<CreateNewItemIntent>(
          onInvoke: (intent) => _createNewItem(),
        ),
      },
      // Your sub-tree must be wrapped in a focusNode, so it can take focus.
      child: Focus(autofocus: true, child: Container()),
    ),
  );
}

----------------------------------------

TITLE: Getting Battery Level in Swift (iOS)
DESCRIPTION: Retrieves the battery level using iOS's UIDevice API.

LANGUAGE: swift
CODE:
private func receiveBatteryLevel(result: FlutterResult) {
  let device = UIDevice.current
  device.isBatteryMonitoringEnabled = true
  if device.batteryState == UIDevice.BatteryState.unknown {
    result(FlutterError(code: "UNAVAILABLE",
                        message: "Battery level not available.",
                        details: nil))
  } else {
    result(Int(device.batteryLevel * 100))
  }
}

----------------------------------------

TITLE: Checking DevTools Version in Console
DESCRIPTION: This command allows users to check their current version of DevTools using the Dart CLI. It prints the installed version of DevTools to the console.

LANGUAGE: console
CODE:
$ dart devtools --version

----------------------------------------

TITLE: Running Flutter Example Apps
DESCRIPTION: A series of commands to set up and run Flutter example apps. These steps include creating a project, changing to the project directory, analyzing the code, running tests, and launching the app. The $PROJECT variable represents the app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Managing Flutter Dependencies
DESCRIPTION: Commands for managing package dependencies using Flutter's pub command wrapper.

LANGUAGE: console
CODE:
$ flutter pub get
$ flutter pub outdated
$ flutter pub upgrade

----------------------------------------

TITLE: Creating and Changing to Flutter Installation Directory
DESCRIPTION: Creates a new directory for Flutter installation and changes the current directory to it.

LANGUAGE: console
CODE:
{{newdir}}; cd {{installdirsuggestion}}

----------------------------------------

TITLE: Displaying Flutter SDK Path
DESCRIPTION: Command to show the installation path of Flutter SDK when installed via snapd

LANGUAGE: console
CODE:
$ flutter sdk-path

----------------------------------------

TITLE: Complete Flutter Application Example
DESCRIPTION: Full example showing a Flutter application that implements package fonts, including the necessary pubspec.yaml configuration and a complete MaterialApp implementation.

LANGUAGE: yaml
CODE:
name: package_fonts
description: An example of how to use package fonts with Flutter

dependencies:
  awesome_package:
  flutter:
    sdk: flutter

dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  fonts:
    - family: Raleway
      fonts:
        - asset: packages/awesome_package/fonts/Raleway-Regular.ttf
        - asset: packages/awesome_package/fonts/Raleway-Italic.ttf
          style: italic
  uses-material-design: true

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Package Fonts', home: MyHomePage());
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // The AppBar uses the app-default font.
      appBar: AppBar(title: const Text('Package Fonts')),
      body: const Center(
        // This Text widget uses the Raleway font.
        child: Text(
          'Using the Raleway font from the awesome_package',
          style: TextStyle(fontFamily: 'Raleway'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Applying Themes in Flutter
DESCRIPTION: Shows how to apply and customize themes in a Flutter application.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        textSelectionTheme: const TextSelectionThemeData(
          selectionColor: Colors.red,
        ),
      ),
      home: const SampleAppPage(),
    );
  }
}

----------------------------------------

TITLE: Major Version Package Upgrade
DESCRIPTION: Command to update all dependencies to their latest versions, including major version updates, and update pubspec.yaml constraints.

LANGUAGE: console
CODE:
$ flutter pub upgrade --major-versions

----------------------------------------

TITLE: Defining Weather Enum in Swift
DESCRIPTION: Creates an enumeration for weather types in Swift with string raw values.

LANGUAGE: swift
CODE:
enum Weather: String {
    case rainy, sunny
}

----------------------------------------

TITLE: GitHub Actions Workflow for MSIX Publishing
DESCRIPTION: GitHub Actions workflow steps for packaging and publishing a Flutter Windows app to Microsoft Store. Includes setup of Microsoft Store CLI, dependency installation, MSIX packaging and publishing.

LANGUAGE: yaml
CODE:
- uses: microsoft/setup-msstore-cli@v1

- name: Configure the Microsoft Store CLI
  run: msstore reconfigure --tenantId ${{ secrets.AZURE_AD_TENANT_ID }} --clientId ${{ secrets.AZURE_AD_ClIENT_ID }} --clientSecret ${{ secrets.AZURE_AD_CLIENT_SECRET }} --sellerId ${{ secrets.SELLER_ID }}

- name: Install Dart dependencies
  run: flutter pub get

- name: Create MSIX package
  run: msstore package .

- name: Publish MSIX to the Microsoft Store
  run: msstore publish -v

----------------------------------------

TITLE: Creating Animated Speech Bubbles
DESCRIPTION: Implements the staggered animation for three speech bubbles with different sizes and positions.

LANGUAGE: dart
CODE:
late Animation<double> _smallBubbleAnimation;
late Animation<double> _mediumBubbleAnimation;
late Animation<double> _largeBubbleAnimation;

_smallBubbleAnimation = CurvedAnimation(
  parent: _appearanceController,
  curve: const Interval(0.0, 0.5, curve: Curves.elasticOut),
  reverseCurve: const Interval(0.0, 0.3, curve: Curves.easeOut),
);

----------------------------------------

TITLE: Flutter Navigator Route Removal - Before Change
DESCRIPTION: Previous implementation where route removal methods could not return results, leaving associated futures uncompleted.

LANGUAGE: dart
CODE:
Navigator.of(context).removeRoute(route);
Navigator.of(context).removeRouteBelow(route);

----------------------------------------

TITLE: Applying Horizontal Gradient in CSS
DESCRIPTION: Applies a horizontal linear gradient to a div element's background in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    padding: 16px;
    color: #ffffff;
    background: linear-gradient(90deg, #ef5350, rgba(0, 0, 0, 0) 80%);
}

----------------------------------------

TITLE: Generic Type Declaration Before Modification
DESCRIPTION: Example of a generic class before adding additional type parameter.

LANGUAGE: dart
CODE:
class A<T> {
  T? i;
}

----------------------------------------

TITLE: Defining Entry Point in Dart
DESCRIPTION: Defines the main() function as the entry point for a Dart application.

LANGUAGE: Dart
CODE:
/// Dart
void main() {}

----------------------------------------

TITLE: Building Flutter Windows App in Debug Mode
DESCRIPTION: Commands to build a Flutter application for Windows platform in debug mode using the Command Prompt or PowerShell. Shows both the build command and expected output.

LANGUAGE: console
CODE:
C:\> flutter build windows --debug

LANGUAGE: console
CODE:
Building Windows application...                                    31.4s
√  Built build\windows\runner\Debug\my_app.exe.

LANGUAGE: console
CODE:
flutter: The Dart VM service is listening on http://127.0.0.1:62080/KPHEj2qPD1E=/

----------------------------------------

TITLE: Configuring Flutter Android Studio Directory in Console
DESCRIPTION: This command is used to set the directory where Android Studio is installed if Flutter cannot locate it automatically. It helps Flutter find the necessary Android development tools.

LANGUAGE: console
CODE:
flutter config --android-studio-dir=<directory>

----------------------------------------

TITLE: Implementing Flutter Bindings Before Migration
DESCRIPTION: Example showing how to define custom bindings with ServicesBinding before SchedulerBinding prior to the dependency reversal.

LANGUAGE: dart
CODE:
class FooBinding extends BindingBase with ServicesBinding, SchedulerBinding {
 // ...
}

----------------------------------------

TITLE: Configuring Runtime Renderer Selection
DESCRIPTION: HTML code snippet showing how to customize the renderer selection at runtime using the Flutter loader configuration.

LANGUAGE: html
CODE:
<body>
  <script>
    {% raw %}{{flutter_js}}{% endraw %}
    {% raw %}{{flutter_build_config}}{% endraw %}

    // TODO: Replace this with your own code to determine which renderer to use.
    const useCanvasKit = true;

    const config = {
      renderer: useCanvasKit ? "canvaskit" : "skwasm",
    };
    _flutter.loader.load({
      config: config,
    });
  </script>
</body>

----------------------------------------

TITLE: Accessing Integer Color Components in Dart
DESCRIPTION: Provides an extension method to access color components as integers, converting from the new floating-point representation to the previous 8-bit integer format.

LANGUAGE: dart
CODE:
extension IntColorComponents on Color {
  int get intAlpha => _floatToInt8(this.a);
  int get intRed => _floatToInt8(this.r);
  int get intGreen => _floatToInt8(this.g);
  int get intBlue => _floatToInt8(this.b);

  int _floatToInt8(double x) {
    return (x * 255.0).round() & 0xff;
  }
}

----------------------------------------

TITLE: Controlling Focus Traversal Order in Dart
DESCRIPTION: This snippet shows how to use FocusTraversalGroup to control the order of focus traversal in a Flutter app.

LANGUAGE: dart
CODE:
return Column(
  children: [
    FocusTraversalGroup(child: MyFormWithMultipleColumnsAndRows()),
    SubmitButton(),
  ],
);

----------------------------------------

TITLE: Grouping Multiple Tests in Dart
DESCRIPTION: Shows how to group related tests together using the group function from the test package.

LANGUAGE: dart
CODE:
import 'package:counter_app/counter.dart';
import 'package:test/test.dart';

void main() {
  group('Test start, increment, decrement', () {
    test('value should start at 0', () {
      expect(Counter().value, 0);
    });

    test('value should be incremented', () {
      final counter = Counter();

      counter.increment();

      expect(counter.value, 1);
    });

    test('value should be decremented', () {
      final counter = Counter();

      counter.decrement();

      expect(counter.value, -1);
    });
  });
}

----------------------------------------

TITLE: Printing to Console in JavaScript
DESCRIPTION: Uses console.log() to print a message to the console in JavaScript.

LANGUAGE: JavaScript
CODE:
// JavaScript
console.log('Hello world!');

----------------------------------------

TITLE: Upgrading Package Dependencies
DESCRIPTION: Command to update all package dependencies to their latest compatible versions as specified in pubspec.yaml.

LANGUAGE: console
CODE:
$ flutter pub upgrade

----------------------------------------

TITLE: Including Release Notes Content with Markdown Include
DESCRIPTION: Uses Liquid template syntax to include external release notes content from a source markdown file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.25.0-src.md %}

----------------------------------------

TITLE: Initializing and Running Flutter Example Apps
DESCRIPTION: A sequence of commands to set up and execute Flutter example applications. The process includes creating a project, analyzing code, running tests, and launching the application. The variable $PROJECT represents the app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT

LANGUAGE: shell
CODE:
cd $PROJECT

LANGUAGE: shell
CODE:
dart analyze

LANGUAGE: shell
CODE:
flutter test

LANGUAGE: shell
CODE:
flutter run

----------------------------------------

TITLE: Basic Jetpack Compose Entry Point
DESCRIPTION: Shows the main activity setup and basic greeting composable in Jetpack Compose

LANGUAGE: kotlin
CODE:
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            SampleTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

----------------------------------------

TITLE: Implementing Counter with LayoutBuilder in Flutter (Before Migration)
DESCRIPTION: This code snippet demonstrates a Flutter app with a Counter widget using LayoutBuilder before the optimization. The counter increments without calling setState, which may have worked due to relayout triggers.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Counter(),
    );
  }
}

class Counter extends StatefulWidget {
  Counter({Key key}) : super(key: key);

  @override
  _CounterState createState() => _CounterState();
}

class _CounterState extends State<Counter> {
  int _counter = 0;

  @override
  Widget build(BuildContext context) {
    return Center(child: Container(
      child: LayoutBuilder(
        builder: (BuildContext context, BoxConstraints constraints) {
          return _ResizingBox(
            TextButton(
                onPressed: () {
                  _counter++;
                },
                child: Text('Increment Counter')),
            Text(_counter.toString()),
          );
        },
      ),
    ));
  }
}

class _ResizingBox extends StatefulWidget {
  _ResizingBox(this.child1, this.child2);

  final Widget child1;
  final Widget child2;

  @override
  State<StatefulWidget> createState() => _ResizingBoxState();
}

class _ResizingBoxState extends State<_ResizingBox>
    with SingleTickerProviderStateMixin {
  Animation animation;

  @override
  void initState() {
    super.initState();
    animation = AnimationController(
      vsync: this,
      duration: const Duration(minutes: 1),
    )
      ..forward()
      ..addListener(() {
        setState(() {});
      });
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        SizedBox(
          width: 100 + animation.value * 100,
          child: widget.child1,
        ),
        SizedBox(
          width: 100 + animation.value * 100,
          child: widget.child2,
        ),
      ],
    );
  }
}

----------------------------------------

TITLE: Creating a Color Tween Animation in Dart
DESCRIPTION: This snippet demonstrates how to create a ColorTween object to animate between two colors.

LANGUAGE: dart
CODE:
colorTween = ColorTween(begin: Colors.transparent, end: Colors.black54);

----------------------------------------

TITLE: Updating testWidgets timeout parameter in Dart
DESCRIPTION: The initialTimeout parameter of testWidgets was deprecated in v2.6. Use the timeout parameter instead to set test timeouts.

LANGUAGE: dart
CODE:
testWidgets('Test', (_) {}, initialTimeout:  Duration(seconds: 5));

LANGUAGE: dart
CODE:
testWidgets('Test', (_) {}, timeout:  Timeout(Duration(seconds: 5)));

----------------------------------------

TITLE: Configuring Named Routes in Flutter
DESCRIPTION: Shows how to set up named routes for navigation in a Flutter app.

LANGUAGE: Dart
CODE:
class NavigationApp extends StatelessWidget {
  // This widget is the root of your application.
  const NavigationApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      //...
      routes: <String, WidgetBuilder>{
        '/a': (context) => const UsualNavScreen(),
        '/b': (context) => const DrawerNavScreen(),
      },
      //...
    );
  }
}

----------------------------------------

TITLE: Function Declaration in JavaScript
DESCRIPTION: Shows a basic function declaration in JavaScript.

LANGUAGE: JavaScript
CODE:
// JavaScript
function fn() {
  return true;
}

----------------------------------------

TITLE: Running Linux GoogleTest
DESCRIPTION: Command to execute GoogleTest unit tests for Linux platform from the example directory.

LANGUAGE: sh
CODE:
build/linux/plugins/x64/debug/my_plugin/my_plugin_test

----------------------------------------

TITLE: Markdown Image Reference for VS Code Flutter Debug Icon
DESCRIPTION: Markdown syntax for displaying a play/resume button icon image used in VS Code's Flutter debugging interface. The image shows a small blue vertical line with a blue triangle that indicates playing or resuming the Flutter app.

LANGUAGE: markdown
CODE:
![Small blue vertical line with a blue triangle that indicates playing or resuming the Flutter app](/assets/images/docs/testing/debugging/vscode-ui/icons/play-or-resume.png)

----------------------------------------

TITLE: Accessing Theme Properties After Migration in Flutter
DESCRIPTION: Demonstrates how to access card, dialog and tabBar theme properties using the new ThemeData types after the normalization changes.

LANGUAGE: dart
CODE:
final CardThemeData cardTheme = Theme.of(context).cardTheme;
final CardThemeData cardTheme = CardTheme.of(context);

final DialogThemeData dialogTheme = Theme.of(context).dialogTheme;
final DialogThemeData dialogTheme = DialogTheme.of(context);

final TabBarThemeData tabBarTheme = Theme.of(context).tabBarTheme;
final TabBarThemeData tabBarTheme = TabBarTheme.of(context);

----------------------------------------

TITLE: Platform-Specific Widget Selection in Flutter
DESCRIPTION: Implement a build method that selects the appropriate widget based on the current platform using defaultTargetPlatform. This allows for platform-specific implementations within a single codebase.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  switch (defaultTargetPlatform) {
    case TargetPlatform.android:
    // return widget on Android.
    case TargetPlatform.iOS:
    // return widget on iOS.
    case TargetPlatform.macOS:
    // return widget on macOS.
    default:
      throw UnsupportedError('Unsupported platform view');
  }
}

----------------------------------------

TITLE: Migrating Color Opacity Usage in Dart
DESCRIPTION: Demonstrates how to migrate from the deprecated opacity and withOpacity methods to the new alpha channel access and withValues method for setting alpha values.

LANGUAGE: dart
CODE:
// Before: Access the alpha channel as a (converted) floating-point value.
final x = color.opacity;

// After: Access the alpha channel directly.
final x = color.a;

// Before: Create a new color with the specified opacity.
final x = color.withOpacity(0.0);

// After: Create a new color with the specified alpha channel value,
// accounting for the current or specified color space.
final x = color.withValues(alpha: 0.0);

----------------------------------------

TITLE: Implementing Action and Intent System in Flutter
DESCRIPTION: Complete example showing implementation of a text field with copy and select all functionality using Actions and Shortcuts

LANGUAGE: dart
CODE:
class SelectAllAction extends Action<SelectAllIntent> {
  SelectAllAction(this.model);

  final Model model;

  @override
  void invoke(covariant SelectAllIntent intent) => model.selectAll();
}

----------------------------------------

TITLE: Adding a Status Listener to an Animation in Flutter
DESCRIPTION: Shows how to add a status listener to an Animation object to monitor changes in the animation's status, such as when it starts, completes, or reverses.

LANGUAGE: Dart
CODE:
animation.addStatusListener((status) {
  if (status == AnimationStatus.completed) {
    // Animation has finished playing in the forward direction.
  } else if (status == AnimationStatus.dismissed) {
    // Animation has finished playing in the reverse direction.
  }
});

----------------------------------------

TITLE: Flutter Build Script Configuration in Bash
DESCRIPTION: XCode build phase script for compiling Flutter Dart code in App Clip target

LANGUAGE: bash
CODE:
/bin/sh "$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh" build

----------------------------------------

TITLE: Creating a Reusable Custom Widget in Flutter
DESCRIPTION: Shows how to create a reusable custom widget in Flutter with parameters.

LANGUAGE: Dart
CODE:
/// Flutter
class CustomCard extends StatelessWidget {
  const CustomCard({super.key, required this.index, required this.onPress});

  final int index;
  final void Function() onPress;

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Column(
        children: <Widget>[
          Text('Card $index'),
          TextButton(onPressed: onPress, child: const Text('Press')),
        ],
      ),
    );
  }
}

class UseCard extends StatelessWidget {
  const UseCard({super.key, required this.index});

  final int index;

  @override
  Widget build(BuildContext context) {
    /// Usage
    return CustomCard(
      index: index,
      onPress: () {
        print('Card $index');
      },
    );
  }
}

----------------------------------------

TITLE: Checking Current Flutter Channel
DESCRIPTION: Command to view the currently active Flutter channel.

LANGUAGE: console
CODE:
$ flutter channel

----------------------------------------

TITLE: Building Flutter Web App Using WebAssembly
DESCRIPTION: This command builds a Flutter web app using WebAssembly for release.

LANGUAGE: console
CODE:
$ flutter build web --wasm

----------------------------------------

TITLE: Creating Scrollbar with ScrollController in Flutter (Pre-Migration)
DESCRIPTION: This snippet shows how to manually create a Scrollbar with a ScrollController before the automatic desktop Scrollbar feature was implemented.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
Scrollbar(
  controller: controller,
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    }
  )
);

----------------------------------------

TITLE: Running Flutter Integration Tests via PowerShell
DESCRIPTION: PowerShell command execution showing Flutter test run, including dependency resolution, device selection, and test results. The test successfully completes after building the Windows executable.

LANGUAGE: powershell
CODE:
PS C:\path\to\counter_app> flutter test .\integration_test\app_test.dart
Resolving dependencies...
Downloading packages...
  flutter_lints 3.0.2 (4.0.0 available)
  leak_tracker 10.0.4 (10.0.5 available)
  leak_tracker_flutter_testing 3.0.3 (3.0.5 available)
  lints 3.0.0 (4.0.0 available)
  material_color_utilities 0.8.0 (0.11.1 available)
  meta 1.12.0 (1.15.0 available)
  test_api 0.7.0 (0.7.1 available)
  vm_service 14.2.1 (14.2.2 available)
Got dependencies!
8 packages have newer versions incompatible with dependency constraints.
Try `flutter pub outdated` for more information.

Connected devices:

Windows (desktop) • windows • windows-x64    • Microsoft Windows [Version 10.0.22631.3593]
Chrome (web)      • chrome  • web-javascript • Google Chrome 124.0.6367.207
Edge (web)        • edge    • web-javascript • Microsoft Edge 124.0.2478.97

[1]: Windows (windows)
[2]: Chrome (chrome)
[3]: Edge (edge)

Please choose one (or "q" to quit): 1

00:00 +0: loading C:/path/to/counter_app/integration_test/app_test.dart               B
00:29 +0: loading C:/path/to/counter_app/counter_app/integration_test/app_test.dart   29.1s
√ Built build\windows\x64\runner\Debug\counter_app.exe
00:31 +1: All tests passed!

----------------------------------------

TITLE: Camera Preview Implementation
DESCRIPTION: FutureBuilder implementation to display camera preview after initialization.

LANGUAGE: dart
CODE:
FutureBuilder<void>(
  future: _initializeControllerFuture,
  builder: (context, snapshot) {
    if (snapshot.connectionState == ConnectionState.done) {
      // If the Future is complete, display the preview.
      return CameraPreview(_controller);
    } else {
      // Otherwise, display a loading indicator.
      return const Center(child: CircularProgressIndicator());
    }
  },
)

----------------------------------------

TITLE: Liquid Template for Base Widgets Section
DESCRIPTION: Template code that generates cards for Flutter's base widgets, excluding Material and Cupertino components. Filters and displays widget categories in a card grid layout.

LANGUAGE: liquid
CODE:
{% assign categories = catalog.index | sort: 'name' -%}
{% for section in categories %}
  {%- if section.name != "Cupertino" and section.name != "Material components" and section.name != "Material 2 components" -%}
    <a class="card outlined-card" href="{{page.url}}{{section.id}}">
      <div class="card-header">
        <span class="card-title">{{section.name}}</span>
      </div>
      <div class="card-content">
        <p>{{section.description}}</p>
      </div>
    </a>
  {% endif -%}
{% endfor %}

----------------------------------------

TITLE: Overriding forgetChild() in Flutter Element Subclass (Before Migration)
DESCRIPTION: This snippet shows how an Element subclass overrides the forgetChild() method before the required change. It does not include the necessary super call.

LANGUAGE: dart
CODE:
class CustomElement extends Element {

    @override
    void forgetChild(Element child) {
        ...
    }
}

----------------------------------------

TITLE: Creating Scrollbar with ScrollController in Flutter (Pre-Migration)
DESCRIPTION: This snippet shows how to manually create a Scrollbar with a ScrollController before the automatic desktop Scrollbar feature was implemented.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
Scrollbar(
  controller: controller,
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    }
  )
);

----------------------------------------

TITLE: Writing Data to File in Flutter
DESCRIPTION: This function writes an integer counter value to a file as a string. It demonstrates how to write data to a file in Flutter using the writeAsString method.

LANGUAGE: dart
CODE:
Future<File> writeCounter(int counter) async {
  final file = await _localFile;

  // Write the file
  return file.writeAsString('$counter');
}

----------------------------------------

TITLE: Implementing a Custom Shake Curve in Dart
DESCRIPTION: This code shows how to create a custom Curve class called ShakeCurve, which implements a sinusoidal shaking effect.

LANGUAGE: dart
CODE:
import 'dart:math';

class ShakeCurve extends Curve {
  @override
  double transform(double t) => sin(t * pi * 2);
}

----------------------------------------

TITLE: Expected Output for zsh as Default Shell
DESCRIPTION: This snippet shows the expected output when zsh is set as the default shell.

LANGUAGE: console
CODE:
UserShell: /bin/zsh

----------------------------------------

TITLE: Creating Floating SliverAppBar
DESCRIPTION: Implementation of a floating app bar using SliverAppBar widget with configurable height and scroll behavior.

LANGUAGE: dart
CODE:
CustomScrollView(
  slivers: [
    // Add the app bar to the CustomScrollView.
    SliverAppBar(
      // Provide a standard title.
      title: Text(title),
      // Allows the user to reveal the app bar if they begin scrolling
      // back up the list of items.
      floating: true,
      // Display a placeholder widget to visualize the shrinking size.
      flexibleSpace: Placeholder(),
      // Make the initial height of the SliverAppBar larger than normal.
      expandedHeight: 200,
    ),
  ],
)

----------------------------------------

TITLE: iOS 18 Feature Support Table in Markdown
DESCRIPTION: A markdown table showing the support status of various iOS 18 features in Flutter 3.24.3, including Control Center widgets, icon colors, password integration, eye tracking, and other iOS-specific functionalities.

LANGUAGE: markdown
CODE:
| Feature | Status |
|---------|--------|
| Target and build for iOS 18 | Delivered, supported |
| Control Center (CC) widgets | Delivered, [supported][cc] Requires writing some Swift code to create a toggle for the CC |
| Light/dark/tinted icon colors | Delivered, [supported][icon] |
| Password apps work/integrate work with Flutter | Delivered, supported |
| Eye tracking of a Flutter app | Partially works; [known issues][eye] |
| iPhone mirroring (when viewing a Flutter app) | Partially works; [known issues][mirror] |
| iOS formatting menu | Not yet available; on roadmap |
| Showing Translate option for the context edit menu | Not yet available; on roadmap |
| Apple Intelligence (AI), such as New Writing Tools | Not yet available; on roadmap |
| iOS-style zoom page transition | Not yet available; on roadmap |
| Hover typing feature | Not available |
| [iPad-style tab bar][] | Not available |
| Large content viewer | Not available |
| Virtual trackpad feature | Not available |

----------------------------------------

TITLE: Using a Custom Button Widget in Flutter
DESCRIPTION: Shows how to use a custom button widget in a Flutter application.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return const Center(child: CustomButton('Hello'));
}

----------------------------------------

TITLE: Generating Installation Cards for Linux Development Setup in HTML
DESCRIPTION: This HTML snippet dynamically generates a card grid with installation options for setting up Linux development from different starting points. It uses Liquid templating to iterate over a list of target platforms and create corresponding installation cards.

LANGUAGE: html
CODE:
<div class="card-grid">
{% for target in target-list %}
{% assign targetLink = '/platform-integration/linux/install-linux/install-linux-from-' | append: target | downcase %}
  <a class="card outlined-card install-card card-linux" id="install-{{target | downcase}}" href="{{targetLink}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% case icon %}
      {% when 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% when 'web' -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endcase -%}
    </div>
    <div class="card-header text-center">
      <span class="card-title">Make {{ target }} and Linux desktop apps</span>
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Creating Scrollable Flutter Downloads Table Structure
DESCRIPTION: Defines an HTML table structure within a scrollable container to display Flutter version information including architecture, reference, release date, Dart version and provenance.

LANGUAGE: html
CODE:
<div class="scrollable-table">
  <table id="downloads-{{os}}-{{channel}}" class="table table-striped">
  <thead><tr><th>Flutter version</th><th>Architecture</th><th>Ref</th><th class="date">Release Date</th><th>Dart version</th><th>Provenance</th></tr></thead>
  <tbody><tr class="loading"><td colspan="6">Loading...</td></tr></tbody>
  </table>
</div>

----------------------------------------

TITLE: Configuring ThemeData with ColorScheme (Post-Migration)
DESCRIPTION: Updated example showing how to set the secondary color in ColorScheme after the deprecation of accentColor.

LANGUAGE: dart
CODE:
final ThemeData theme = ThemeData();
MaterialApp(
  theme: theme.copyWith(
    colorScheme: theme.colorScheme.copyWith(secondary: myColor),
  ),
  //...
)

----------------------------------------

TITLE: Marking Swift functions for FFI visibility in macOS
DESCRIPTION: This code snippet demonstrates how to mark Swift functions to make them visible to Dart when using FFI. It uses the @_cdecl attribute to expose the function with the specified name.

LANGUAGE: swift
CODE:
@_cdecl("myFunctionName")

----------------------------------------

TITLE: Problem Example: Multiple Navigators Under Single HeroControllerScope
DESCRIPTION: This code demonstrates the problematic pattern that will now throw an assertion error - having multiple Navigator widgets under a single hero controller scope created by MaterialApp.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      builder: (BuildContext context, Widget child) {
        // Builds two parallel navigators. This throws
        // error because both of navigators are under the same
        // hero controller scope created by MaterialApp.
        return Stack(
          children: <Widget>[
            Navigator(
              onGenerateRoute: (RouteSettings settings) {
                return MaterialPageRoute<void>(
                  settings: settings,
                  builder: (BuildContext context) {
                    return const Text('first Navigator');
                  }
                );
              },
            ),
            Navigator(
              onGenerateRoute: (RouteSettings settings) {
                return MaterialPageRoute<void>(
                  settings: settings,
                  builder: (BuildContext context) {
                    return const Text('Second Navigator');
                  }
                );
              },
            ),
          ],
        );
      }
    )
  );
}

----------------------------------------

TITLE: Configuring Normal Theme in Android styles.xml
DESCRIPTION: Defines the normal theme styling that is applied after the launch screen disappears.

LANGUAGE: xml
CODE:
<style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
    <item name="android:windowBackground">@drawable/normal_background</item>
</style>

----------------------------------------

TITLE: Creating Custom LoggingShortcutManager in Flutter
DESCRIPTION: Implementation of a custom ShortcutManager that logs handled key events

LANGUAGE: dart
CODE:
class LoggingShortcutManager extends ShortcutManager {
  @override
  KeyEventResult handleKeypress(BuildContext context, KeyEvent event) {
    final KeyEventResult result = super.handleKeypress(context, event);
    if (result == KeyEventResult.handled) {
      print('Handled shortcut $event in $context');
    }
    return result;
  }
}

----------------------------------------

TITLE: Implementing a ListView with Tap Detection in Flutter
DESCRIPTION: Demonstrates how to create a ListView with tap detection for each item in Flutter.

LANGUAGE: dart
CODE:
import 'dart:developer' as developer;

import 'package:flutter/material.dart';

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: ListView(children: _getListData()),
    );
  }

  List<Widget> _getListData() {
    List<Widget> widgets = [];
    for (int i = 0; i < 100; i++) {
      widgets.add(
        GestureDetector(
          onTap: () {
            developer.log('row tapped');
          },
          child: Padding(
            padding: const EdgeInsets.all(10),
            child: Text('Row $i'),
          ),
        ),
      );
    }
    return widgets;
  }
}

----------------------------------------

TITLE: Setting view-specific properties in tests before migration
DESCRIPTION: Example of setting view-specific properties in tests using the deprecated window property before migration.

LANGUAGE: dart
CODE:
testWidget('test name', (WidgetTester tester) async {
  tester.binding.window.devicePixelRatioTestValue = 2.0;
  tester.binding.window.displayFeaturesTestValue = <DisplayFeatures>[];
  tester.binding.window.gestureSettingsTestValue = const GestureSettings(physicalTouchSlop: 100);
  tester.binding.window.paddingTestValue = FakeViewPadding.zero;
  tester.binding.window.physicalGeometryTestValue = const Rect.fromLTRB(0,0, 500, 800);
  tester.binding.window.physicalSizeTestValue = const Size(300, 400);
  tester.binding.window.systemGestureInsetsTestValue = FakeViewPadding.zero;
  tester.binding.window.viewInsetsTestValue = FakeViewPadding.zero;
  tester.binding.window.viewPaddingTestValue = FakeViewPadding.zero;
});

----------------------------------------

TITLE: Running Flutter Apps on Desktop Platforms
DESCRIPTION: Platform-specific commands for running Flutter applications on Windows, macOS, and Linux

LANGUAGE: console
CODE:
C:\> flutter run -d windows
$ flutter run -d macos
$ flutter run -d linux

----------------------------------------

TITLE: Generating Platform-Specific Setup Links in HTML
DESCRIPTION: This snippet creates a card grid with links to macOS setup guides for different platforms (iOS, Android, web). It uses Liquid templating to dynamically generate the cards based on a predefined target list.

LANGUAGE: html
CODE:
<div class="card-grid">
{% for target in target-list %}
{% assign targetLink = '/platform-integration/macos/install-macos/install-macos-from-' | append: target | downcase %}
  <a class="card outlined-card install-card card-macos" id="install-{{target | downcase}}" href="{{targetLink}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% case icon %}
      {% when 'ios' -%}
        <span class="material-symbols" aria-hidden="true">phone_iphone</span>
      {% when 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% when 'web' -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endcase -%}
      <span class="material-symbols" aria-hidden="true">add</span>
      <span class="material-symbols" aria-hidden="true">laptop_mac</span>
    </div>
    <div class="card-header text-center">
      <span class="card-title">Make {{ target }} and macOS desktop apps</span>
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Creating Compose Activity in Kotlin
DESCRIPTION: Implements a new Compose-based Activity that can be launched from the Flutter app.

LANGUAGE: kotlin
CODE:
class SecondActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
                Column {
                    Text(text = "Second Activity")
                    Text("" + getIntent()?.getExtras()?.getString("message"))
                    Button(onClick = {  finish() }) {
                        Text("Exit")
                    }
                }
            }
        }
    }
}

----------------------------------------

TITLE: Configuring ScrollBehavior for Specific Widgets
DESCRIPTION: Demonstrates how to apply custom scroll behavior to individual widgets using ScrollConfiguration. This allows for granular control over scroll behavior in different parts of the application.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
ListView.builder(
  controller: controller,
  itemBuilder: (BuildContext context, int index) {
   return Text('Item $index');
 }
);

LANGUAGE: dart
CODE:
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  // Override behavior methods and getters like dragDevices
  @override
  Set<PointerDeviceKind> get dragDevices => { 
    PointerDeviceKind.touch,
    PointerDeviceKind.mouse,
    // etc.
  };
}

// ScrollBehavior can be set for a specific widget.
final ScrollController controller = ScrollController();
ScrollConfiguration(
  behavior: MyCustomScrollBehavior(),
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
     return Text('Item $index');
    }
  ),
);

----------------------------------------

TITLE: Applying Curve Animation to Page Transition in Flutter
DESCRIPTION: This snippet shows how to use a CurveTween to apply easing to the page transition animation, making it start quickly and end slowly.

LANGUAGE: dart
CODE:
var curve = Curves.ease;
var curveTween = CurveTween(curve: curve);

----------------------------------------

TITLE: Updating Golden Tests for Flutter Dithering Changes
DESCRIPTION: Command to update golden test files to reflect the new default dithering behavior in Flutter

LANGUAGE: console
CODE:
$ flutter test --update-goldens

----------------------------------------

TITLE: Disabling Impeller for Android Deployment
DESCRIPTION: XML configuration to disable Impeller in the AndroidManifest.xml file under the application tag.

LANGUAGE: xml
CODE:
<meta-data
    android:name="io.flutter.embedding.android.EnableImpeller"
    android:value="false" />

----------------------------------------

TITLE: Applying Vertical Gradient in CSS
DESCRIPTION: Applies a vertical linear gradient to a div element's background in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    padding: 16px;
    color: #ffffff;
    background: linear-gradient(180deg, #ef5350, rgba(0, 0, 0, 0) 80%);
}

----------------------------------------

TITLE: Including Flutter Doctor Verification Steps
DESCRIPTION: Template inclusion for running and interpreting Flutter doctor commands

LANGUAGE: markdown
CODE:
{% include docs/install/flutter-doctor.md devos=devos target=target config=config %}

----------------------------------------

TITLE: Configuring Launch Theme in Android styles.xml
DESCRIPTION: Defines the launch theme styling in styles.xml to set the window background drawable for the splash screen.

LANGUAGE: xml
CODE:
<style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
    <item name="android:windowBackground">@drawable/launch_background</item>
</style>

----------------------------------------

TITLE: Dart UiKitView Implementation
DESCRIPTION: Implementation of the build method for creating an iOS platform view using UiKitView widget

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  return UiKitView(
    viewType: viewType,
    layoutDirection: TextDirection.ltr,
    creationParams: creationParams,
    creationParamsCodec: const StandardMessageCodec(),
  );
}

----------------------------------------

TITLE: Removing AnimatedSize.vsync in Dart
DESCRIPTION: Shows how to remove the deprecated vsync property from AnimatedSize widget. This property is no longer necessary after AnimatedSize was converted to a StatefulWidget with built-in ticker provider functionality.

LANGUAGE: dart
CODE:
AnimatedSize(
  vsync: this,
  // ...
);

LANGUAGE: dart
CODE:
AnimatedSize(
  // ...
);

----------------------------------------

TITLE: Extracting Flutter SDK on Windows using PowerShell
DESCRIPTION: Command to extract the Flutter SDK zip file to the specified development directory using PowerShell's Expand-Archive cmdlet.

LANGUAGE: console
CODE:
PS C:\> Expand-Archive `
    –Path $env:USERPROFILE\Downloads\flutter_sdk_v1.0.0.zip `
    -Destination $env:USERPROFILE\dev\

----------------------------------------

TITLE: Solution: Separate HeroControllerScope for Each Navigator
DESCRIPTION: This code shows the correct implementation where each Navigator has its own HeroControllerScope, allowing proper hero animations to work independently.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      builder: (BuildContext context, Widget child) {
        // Builds two parallel navigators.
        return Stack(
          children: <Widget>[
            HeroControllerScope(
              controller: MaterialApp.createMaterialHeroController(),
              child: Navigator(
                onGenerateRoute: (RouteSettings settings) {
                  return MaterialPageRoute<void>(
                    settings: settings,
                    builder: (BuildContext context) {
                      return const Text('first Navigator');
                    }
                  );
                },
              ),
            ),
            HeroControllerScope(
              controller: MaterialApp.createMaterialHeroController(),
              child: Navigator(
                onGenerateRoute: (RouteSettings settings) {
                  return MaterialPageRoute<void>(
                    settings: settings,
                    builder: (BuildContext context) {
                      return const Text('second Navigator');
                    }
                  );
                },
              ),
            ),
          ],
        );
      }
    )
  );
}

----------------------------------------

TITLE: Android Manifest Configuration for FlutterActivity
DESCRIPTION: Configures the FlutterActivity in AndroidManifest.xml to use the launch theme and handle theme switching.

LANGUAGE: xml
CODE:
<activity
    android:name=".MyActivity"
    android:theme="@style/LaunchTheme"
    // ...>
    <meta-data
        android:name="io.flutter.embedding.android.NormalTheme"
        android:resource="@style/NormalTheme"
        />
    <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
    </intent-filter>
</activity>

----------------------------------------

TITLE: Optimizing Image Sizing in Flutter
DESCRIPTION: Shows how to properly size images to avoid memory issues using cacheHeight and cacheWidth parameters

LANGUAGE: dart
CODE:
class ResizedImage extends StatelessWidget {
  const ResizedImage({super.key});

  @override
  Widget build(BuildContext context) {
    return Image.asset('dash.png', cacheHeight: 213, cacheWidth: 392);
  }
}

----------------------------------------

TITLE: Configuring Repository Settings for Flutter AAR in Kotlin
DESCRIPTION: This Kotlin code snippet demonstrates how to set up repository settings in settings.gradle.kts to include the Flutter AAR and necessary repositories.

LANGUAGE: kotlin
CODE:
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        maven("https://storage.googleapis.com/download.flutter.io")
    }
}

----------------------------------------

TITLE: Adding Flutter Module Dependency in app/build.gradle
DESCRIPTION: This code snippet shows how to add an implementation dependency on the Flutter module in the app's build.gradle file. This is identical for both Groovy and Kotlin.

LANGUAGE: groovy
CODE:
dependencies {
    implementation(project(":flutter"))
}

----------------------------------------

TITLE: Update Golden Files Command
DESCRIPTION: Console command to update golden files if accepting the new default values.

LANGUAGE: console
CODE:
$ flutter test --update-goldens

----------------------------------------

TITLE: Creating Shape-Shifting Animation with AnimatedContainer in Flutter
DESCRIPTION: Shows how to animate multiple properties simultaneously using AnimatedContainer, including margin, borderRadius, and color transitions with custom duration and curve settings.

LANGUAGE: dart
CODE:
AnimatedContainer(
  margin: EdgeInsets.all(margin),
  decoration: BoxDecoration(
    color: color,
    borderRadius: BorderRadius.circular(borderRadius),
  ),
  duration: const Duration(milliseconds: 400),
  curve: Curves.easeInOutBack,
)

----------------------------------------

TITLE: Widget Hierarchy Example
DESCRIPTION: Shows how to create a widget hierarchy with nested containers, rows and image elements

LANGUAGE: dart
CODE:
Container(
  color: Colors.blue,
  child: Row(
    children: [
      Image.network('https://www.example.com/1.png'),
      const Text('A'),
    ],
  ),
);

----------------------------------------

TITLE: Creating a Drawer in Flutter
DESCRIPTION: Demonstrates how to create a drawer for navigation in Flutter.

LANGUAGE: Dart
CODE:
@override
Widget build(BuildContext context) {
  return Drawer(
    elevation: 20,
    child: ListTile(
      leading: const Icon(Icons.change_history),
      title: const Text('Screen2'),
      onTap: () {
        Navigator.of(context).pushNamed('/b');
      },
    ),
  );
}

----------------------------------------

TITLE: Flutter Module Directory Structure
DESCRIPTION: Shows the typical directory structure of a Flutter module project, including key folders and files.

LANGUAGE: plaintext
CODE:
my_flutter/
├── .ios/
│   ├── Runner.xcworkspace
│   └── Flutter/podhelper.rb
├── lib/
│   └── main.dart
├── test/
└── pubspec.yaml

----------------------------------------

TITLE: Implementing TextEditingClient After Migration in Dart
DESCRIPTION: This code snippet shows the implementation of the TextEditingClient interface after migration. It includes the new currentTextEditingValue getter along with the existing method overrides.

LANGUAGE: dart
CODE:
class _MyCustomTextWidgetState extends State<MyCustomWidget> implements TextEditingClient {
  ...

  @override
  TextEditingValue get currentTextEditingValue => widget.textEditingController.value;

  @override
  void updateEditingValue(TextEditingValue value) {
    ...
  }

  @override
  void performAction(TextInputAction action) {
    ...
  }

  @override
  void updateFloatingCursor(RawFloatingCursorPoint point) {
    ...
  }
}

----------------------------------------

TITLE: Adding Firebase Crashlytics Plugin in Flutter Module
DESCRIPTION: This YAML snippet shows how to add the Firebase Crashlytics plugin as a dependency in the pubspec.yaml file of a Flutter module. It specifies the plugin version to be used in the project.

LANGUAGE: yaml
CODE:
dependencies:
  …
  firebase_crashlytics: ^0.1.3
  …

----------------------------------------

TITLE: Implementing Data Model Methods
DESCRIPTION: Add toMap() and toString() methods to the Dog class for database operations and debugging.

LANGUAGE: dart
CODE:
class Dog {
  final int id;
  final String name;
  final int age;

  Dog({required this.id, required this.name, required this.age});

  Map<String, Object?> toMap() {
    return {'id': id, 'name': name, 'age': age};
  }

  @override
  String toString() {
    return 'Dog{id: $id, name: $name, age: $age}';
  }
}

----------------------------------------

TITLE: Refactoring with AnimatedBuilder in Flutter
DESCRIPTION: Shows how to use AnimatedBuilder to separate responsibilities into different classes: rendering the widget, defining the Animation object, and rendering the transition.

LANGUAGE: dart
CODE:
class GrowTransition extends StatelessWidget {
  const GrowTransition({
    required this.child,
    required this.animation,
    super.key,
  });

  final Widget child;
  final Animation<double> animation;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedBuilder(
        animation: animation,
        builder: (context, child) {
          return SizedBox(
            height: animation.value,
            width: animation.value,
            child: child,
          );
        },
        child: child,
      ),
    );
  }
}

----------------------------------------

TITLE: Setting Custom BorderRadius for AlertDialog in Flutter
DESCRIPTION: This snippet demonstrates how to maintain the original 2-pixel border radius for an AlertDialog in Flutter. It creates a simple app with a FloatingActionButton that shows an AlertDialog with custom shape.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        floatingActionButton: FloatingActionButton(onPressed: () {
          showDialog(
            context: context,
            builder: (BuildContext context) {
              return AlertDialog(
                content: Text('Alert!'),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.all(Radius.circular(2))),
              );
            },
          );
        }),
      ),
    );
  }
}

----------------------------------------

TITLE: Verifying Updated Flutter and Dart Command Locations
DESCRIPTION: After updating the path, this command confirms that both Flutter and Dart commands now come from the same directory, ensuring compatibility between the two tools.

LANGUAGE: console
CODE:
$ which flutter dart
/path-to-flutter-sdk/bin/flutter
/path-to-flutter-sdk/bin/dart

----------------------------------------

TITLE: Implementing Provider Configuration in Dart
DESCRIPTION: Example of implementing configuration support in a custom LLM provider using the Gemini provider as reference

LANGUAGE: dart
CODE:
class GeminiProvider extends LlmProvider ... {
  @immutable
  GeminiProvider({
    required GenerativeModel model,
    ...
  })  : _model = model,
        ...

  final GenerativeModel _model;
  ...
}

----------------------------------------

TITLE: Generating Flutter iOS Frameworks using CLI
DESCRIPTION: This command generates Flutter iOS frameworks to a specified output directory. It should be run every time changes are made to the Flutter module.

LANGUAGE: console
CODE:
$ flutter build ios-framework --output=/path/to/MyApp/Flutter/

----------------------------------------

TITLE: Creating a SetupFlow Widget for Nested Navigation in Flutter
DESCRIPTION: Defines a StatefulWidget for managing the nested setup flow, including its own Navigator and route generation.

LANGUAGE: dart
CODE:
class SetupFlow extends StatefulWidget {
  const SetupFlow({super.key, required this.setupPageRoute});

  final String setupPageRoute;

  @override
  State<SetupFlow> createState() => SetupFlowState();
}

class SetupFlowState extends State<SetupFlow> {
  final _navigatorKey = GlobalKey<NavigatorState>();

  // ... (other methods)

  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: false,
      onPopInvokedWithResult: (didPop, _) async {
        if (didPop) return;

        if (await _isExitDesired() && context.mounted) {
          _exitSetup();
        }
      },
      child: Scaffold(
        appBar: _buildFlowAppBar(),
        body: Navigator(
          key: _navigatorKey,
          initialRoute: widget.setupPageRoute,
          onGenerateRoute: _onGenerateRoute,
        ),
      ),
    );
  }

  Route<Widget> _onGenerateRoute(RouteSettings settings) {
    // ... (route generation logic)
  }
}

----------------------------------------

TITLE: Configuring Flutter DevTools for ChromeOS
DESCRIPTION: Commands to launch Flutter DevTools with specific ports that work on ChromeOS environment. Requires running two commands to start DevTools server and the Flutter app with an observatory port.

LANGUAGE: console
CODE:
$ flutter pub global run devtools --port 8000
$ cd path/to/your/app
$ flutter run --observatory-port=8080

----------------------------------------

TITLE: Configuring Flutter Localization Generation in YAML
DESCRIPTION: This YAML snippet shows how to configure Flutter to generate localization files. It sets 'generate: true' under the 'flutter' key in the pubspec.yaml file.

LANGUAGE: yaml
CODE:
flutter:
  generate: true

----------------------------------------

TITLE: Configuring PATH for CocoaPods in Zsh
DESCRIPTION: This bash snippet shows how to add the CocoaPods bin directory to the PATH environment variable in the Zsh shell configuration file.

LANGUAGE: bash
CODE:
export PATH=$HOME/.gem/bin:$PATH

----------------------------------------

TITLE: Setting platform-specific properties in tests before migration
DESCRIPTION: Example of setting platform-specific properties in tests using the deprecated window property before migration.

LANGUAGE: dart
CODE:
testWidgets('test name', (WidgetTester tester) async {
  tester.binding.window.accessibilityFeaturesTestValue = FakeAccessibilityFeatures.allOn;
  tester.binding.window.alwaysUse24HourFormatTestValue = false;
  tester.binding.window.brieflyShowPasswordTestValue = true;
  tester.binding.window.defaultRouteNameTestValue = '/test';
  tester.binding.window.initialLifecycleStateTestValue = 'painting';
  tester.binding.window.localesTestValue = <Locale>[const Locale('en-us'), const Locale('ar-jo')];
  tester.binding.window.localeTestValue = const Locale('ar-jo');
  tester.binding.window.nativeSpellCheckServiceDefinedTestValue = false;
  tester.binding.window.platformBrightnessTestValue = Brightness.dark;
  tester.binding.window.semanticsEnabledTestValue = true;
  tester.binding.window.textScaleFactorTestValue = 2.0;
});

----------------------------------------

TITLE: Implementing Texture Layer Platform View in Dart
DESCRIPTION: Dart implementation for texture layer platform view using AndroidView widget. Simpler implementation compared to hybrid composition but with different performance characteristics.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  // This is used in the platform side to register the view.
  const String viewType = '<platform-view-type>';
  // Pass parameters to the platform side.
  final Map<String, dynamic> creationParams = <String, dynamic>{};

  return AndroidView(
    viewType: viewType,
    layoutDirection: TextDirection.ltr,
    creationParams: creationParams,
    creationParamsCodec: const StandardMessageCodec(),
  );
}

----------------------------------------

TITLE: Implementing containsKey in ImageCache
DESCRIPTION: Default implementation of the new containsKey method in ImageCache that checks both pending and cached image buckets.

LANGUAGE: dart
CODE:
  bool containsKey(Object key) {
    return _pendingImages[key] != null || _cache[key] != null;
  }

----------------------------------------

TITLE: Adding Desktop Support to Existing Flutter Project
DESCRIPTION: Command to add desktop platform support to an existing Flutter application

LANGUAGE: console
CODE:
$ flutter create --platforms=windows,macos,linux .

----------------------------------------

TITLE: Flutter ThemeData Configuration Before Migration
DESCRIPTION: Example of how text selection properties were configured directly in ThemeData before the migration.

LANGUAGE: dart
CODE:
ThemeData(
  cursorColor: Colors.red,
  textSelectionColor: Colors.green,
  textSelectionHandleColor: Colors.blue,
)

----------------------------------------

TITLE: Defining Route Constants in Dart for Flutter Navigation
DESCRIPTION: Defines constant route names for the app's navigation, including top-level routes and nested setup flow routes.

LANGUAGE: dart
CODE:
const routeHome = '/';
const routeSettings = '/settings';
const routePrefixDeviceSetup = '/setup/';
const routeDeviceSetupStart = '/setup/$routeDeviceSetupStartPage';
const routeDeviceSetupStartPage = 'find_devices';
const routeDeviceSetupSelectDevicePage = 'select_device';
const routeDeviceSetupConnectingPage = 'connecting';
const routeDeviceSetupFinishedPage = 'finished';

----------------------------------------

TITLE: Creating Flutter App Desktop Entry
DESCRIPTION: Example .desktop file configuration for a Flutter application, specifying name, icon, and other metadata for desktop integration.

LANGUAGE: yaml
CODE:
[Desktop Entry]
Name=Super Cool App
Comment=Super Cool App that does everything
Exec=super-cool-app 
Icon=${SNAP}/meta/gui/super-cool-app.png # Replace name with your app name.
Terminal=false
Type=Application
Categories=Education; # Adjust accordingly your snap category.

----------------------------------------

TITLE: Using Newer Crashlytics Library in Existing Android App
DESCRIPTION: This Gradle snippet shows how to use a newer version of the Crashlytics library in the existing Android app. It demonstrates updating to a beta version of the Firebase Crashlytics library.

LANGUAGE: groovy
CODE:
dependencies {
    …
    implementation("com.google.firebase:firebase-crashlytics:17.0.0-beta03")
    …
}

----------------------------------------

TITLE: Implementing TextEditingClient Before Migration in Dart
DESCRIPTION: This code snippet demonstrates how a custom text widget state class implements the TextEditingClient interface before the migration. It includes overrides for updateEditingValue, performAction, and updateFloatingCursor methods.

LANGUAGE: dart
CODE:
class _MyCustomTextWidgetState extends State<MyCustomWidget> implements TextEditingClient {
  ...

  @override
  void updateEditingValue(TextEditingValue value) {
    ...
  }

  @override
  void performAction(TextInputAction action) {
    ...
  }

  @override
  void updateFloatingCursor(RawFloatingCursorPoint point) {
    ...
  }
}

----------------------------------------

TITLE: Setting Box Sizing in CSS
DESCRIPTION: Sets the box-sizing property to border-box for all HTML elements to match Flutter's box model.

LANGUAGE: css
CODE:
{
    box-sizing: border-box;
}

----------------------------------------

TITLE: New DOM Structure Using Slots
DESCRIPTION: Demonstrates the new DOM structure using slots and shadow root for platform views in Flutter web.

LANGUAGE: html
CODE:
...

<flt-glass-pane>
  #shadow-root
  | ...
  | <flt-platform-view-slot>
  |   <slot name="platform-view-1" />
  | </flt-platform-view-slot>
  | ...
  <flt-platform-view slot="platform-view-1">
    <div id="platform-view">Contents</div>
  </flt-platform-view>
  ...
</flt-glass-pane>

...

----------------------------------------

TITLE: Setting up and running Flutter example apps
DESCRIPTION: A sequence of commands to create, analyze, test and run Flutter example applications. The commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Migrating repeat key event handling in Flutter
DESCRIPTION: This snippet illustrates how to update code that used RawKeyEvent.repeat to handle repeated key events, now using the separate KeyRepeatEvent type in Flutter.

LANGUAGE: dart
CODE:
KeyEventResult _handleKeyEvent(RawKeyEvent keyEvent) {
  if (keyEvent is RawKeyDownEvent) {
    print('Key down: ${keyEvent.data.logicalKey.keyLabel}(${keyEvent.repeat ? ' (repeated)' : ''})');
  }
  return KeyEventResult.ignored;
}

LANGUAGE: dart
CODE:
KeyEventResult _handleKeyEvent(KeyEvent _) {
  if (keyEvent is KeyDownEvent || keyEvent is KeyRepeatEvent) {
    print('Key down: ${keyEvent.logicalKey.keyLabel}(${keyEvent is KeyRepeatEvent ? ' (repeated)' : ''})');
  }
  return KeyEventResult.ignored;
}

----------------------------------------

TITLE: Game Services Sign In Implementation
DESCRIPTION: Dart code to handle user authentication with game services

LANGUAGE: dart
CODE:
try {
  await GamesServices.signIn();
} on PlatformException catch (e) {
  // ... deal with failures ...
}

----------------------------------------

TITLE: Customer Class Implementation in Flutter
DESCRIPTION: Defines a Customer class that manages cart items and total price calculation.

LANGUAGE: dart
CODE:
class Customer {
  Customer({required this.name, required this.imageProvider, List<Item>? items})
    : items = items ?? [];

  final String name;
  final ImageProvider imageProvider;
  final List<Item> items;

  String get formattedTotalItemPrice {
    final totalPriceCents = items.fold<int>(
      0,
      (prev, item) => prev + item.totalPriceCents,
    );
    return '\$${(totalPriceCents / 100.0).toStringAsFixed(2)}';
  }
}

----------------------------------------

TITLE: Installing LXD Container Manager
DESCRIPTION: Command to install the LXD container manager using snap.

LANGUAGE: console
CODE:
$ sudo snap install lxd

----------------------------------------

TITLE: Flutter Run Output with DevTools URLs
DESCRIPTION: This snippet shows the output of 'flutter run', including the Observatory debugger URL and the Flutter DevTools URL. These URLs contain security tokens and are unique for each run of the app.

LANGUAGE: console
CODE:
An Observatory debugger and profiler on macOS is available at:
http://127.0.0.1:52129/QjqebSY4lQ8=/
The Flutter DevTools debugger and profiler on macOS is available at:
http://127.0.0.1:9100?uri=http://127.0.0.1:52129/QjqebSY4lQ8=/

----------------------------------------

TITLE: Configuring Xcode Command-Line Tools in macOS
DESCRIPTION: This snippet shows how to configure the command-line tools to use the installed version of Xcode. It uses sudo to run the xcode-select command and set the Xcode path.

LANGUAGE: console
CODE:
{{prompt1}} sudo sh -c 'xcode-select -s /Applications/Xcode.app/Contents/Developer && xcodebuild -runFirstLaunch'

----------------------------------------

TITLE: Setting platform-specific properties in tests after migration
DESCRIPTION: Example of setting platform-specific properties in tests using the new platformDispatcher property after migration.

LANGUAGE: dart
CODE:
testWidgets('test name', (WidgetTester tester) async {
  tester.platformDispatcher.accessibilityFeaturesTestValue = FakeAccessibilityFeatures.allOn;
  tester.platformDispatcher.alwaysUse24HourFormatTestValue = false;
  tester.platformDispatcher.brieflyShowPasswordTestValue = true;
  tester.platformDispatcher.defaultRouteNameTestValue = '/test';
  tester.platformDispatcher.initialLifecycleStateTestValue = 'painting';
  tester.platformDispatcher.localesTestValue = <Locale>[const Locale('en-us'), const Locale('ar-jo')];
  tester.platformDispatcher.localeTestValue = const Locale('ar-jo');
  tester.platformDispatcher.nativeSpellCheckServiceDefinedTestValue = false;
  tester.platformDispatcher.platformBrightnessTestValue = Brightness.dark;
  tester.platformDispatcher.semanticsEnabledTestValue = true;
  tester.platformDispatcher.textScaleFactorTestValue = 2.0;
});

----------------------------------------

TITLE: Creating FlutterEngine in UIKit with Swift
DESCRIPTION: Shows how to create a FlutterEngine as a property in the app delegate and initialize it on app startup.

LANGUAGE: swift
CODE:
import UIKit
import Flutter
import FlutterPluginRegistrant

@UIApplicationMain
class AppDelegate: FlutterAppDelegate {
  lazy var flutterEngine = FlutterEngine(name: "my flutter engine")

  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    flutterEngine.run();
    GeneratedPluginRegistrant.register(with: self.flutterEngine);
    return super.application(application, didFinishLaunchingWithOptions: launchOptions);
  }
}

----------------------------------------

TITLE: Migrating Checkbox FillColor - Before
DESCRIPTION: Example of Checkbox implementation before the fillColor behavior change, where fillColor was applied to the border in unselected state.

LANGUAGE: dart
CODE:
Checkbox(
  fillColor: MaterialStateProperty.resolveWith((states) {
    if (!states.contains(MaterialState.selected)) {
      return Colors.red;
    }
    return null;
  }),
  value: _checked,
  onChanged: _enabled
    ? (bool? value) {
        setState(() {
          _checked = value!;
        });
      }
    : null,
),

----------------------------------------

TITLE: Executing Flutter Example Apps in Shell
DESCRIPTION: A series of shell commands to set up and run Flutter example apps. These commands create the project, analyze the code, run tests, and launch the app. The variable $PROJECT represents the app project path.

LANGUAGE: Shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Switch Statement Before Migration
DESCRIPTION: Example of a switch statement handling TargetPlatform before the enum update.

LANGUAGE: dart
CODE:
void dance(TargetPlatform platform) {
  switch (platform) {
    case TargetPlatform.android:
      // Do Android dance.
      break;
    case TargetPlatform.fuchsia:
      // Do Fuchsia dance.
      break;
    case TargetPlatform.iOS:
      // Do iOS dance.
      break;
    case TargetPlatform.macOS:
      // Do macOS dance.
      break;
  }
}

----------------------------------------

TITLE: Using Command in HomeViewModel
DESCRIPTION: Demonstrates how to use the Command class in a HomeViewModel to handle the load action.

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  HomeViewModel() {
    load = Command(_load)..execute();
  }

  User? get user => // ...

  late final Command load;

  void _load() {
    // load user
  }
}

----------------------------------------

TITLE: Implementing Message and Attachment Handling in Dart
DESCRIPTION: Example of mapping between AI Toolkit message types and LLM-specific content types using the Gemini provider implementation

LANGUAGE: dart
CODE:
import 'package:google_generative_ai/google_generative_ai.dart';
...

class GeminiProvider extends LlmProvider with ChangeNotifier {
  ...
  static Part _partFrom(Attachment attachment) => switch (attachment) {
        (final FileAttachment a) => DataPart(a.mimeType, a.bytes),
        (final LinkAttachment a) => FilePart(a.url),
      };

  static Content _contentFrom(ChatMessage message) => Content(
        message.origin.isUser ? 'user' : 'model',
        [
          TextPart(message.text ?? ''),
          ...message.attachments.map(_partFrom),
        ],
      );
}

----------------------------------------

TITLE: Creating a Fade-In Animation in Flutter
DESCRIPTION: Demonstrates how to create a fade-in animation using AnimationController and FadeTransition in Flutter.

LANGUAGE: Dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const Center(child: LogoFade()));
}

class LogoFade extends StatefulWidget {
  const LogoFade({super.key});

  @override
  State<LogoFade> createState() => _LogoFadeState();
}

class _LogoFadeState extends State<LogoFade>
    with SingleTickerProviderStateMixin {
  late Animation<double> animation;
  late AnimationController controller;

  @override
  void initState() {
    super.initState();
    controller = AnimationController(
      duration: const Duration(milliseconds: 3000),
      vsync: this,
    );
    final CurvedAnimation curve = CurvedAnimation(
      parent: controller,
      curve: Curves.easeIn,
    );
    animation = Tween(begin: 0.0, end: 1.0).animate(curve);
    controller.forward();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FadeTransition(
      opacity: animation,
      child: const SizedBox(height: 300, width: 300, child: FlutterLogo()),
    );
  }
}

----------------------------------------

TITLE: Adding Crashlytics Dependency in Existing Android App
DESCRIPTION: This snippet shows how to add the Crashlytics dependency in the build.gradle file of an existing Android app. It demonstrates adding a specific version of the Crashlytics SDK as an implementation dependency.

LANGUAGE: groovy
CODE:
dependencies {
    …
    implementation("com.crashlytics.sdk.android:crashlytics:2.10.1")
    …
}

----------------------------------------

TITLE: Migrating SystemContextMenuController.show to showWithItems in Flutter
DESCRIPTION: This snippet shows how to migrate from the deprecated SystemContextMenuController.show method to the new showWithItems method, including obtaining default items and converting them to the required format.

LANGUAGE: dart
CODE:
_controller.show(selectionRect);

LANGUAGE: dart
CODE:
final List<IOSSystemContextMenuItem> defaultItems =
    SystemContextMenu.getDefaultItems(editableTextState);
final WidgetsLocalizations localizations =
    WidgetsLocalizations.of(context);
final List<IOSSystemContextMenuItemData> defaultItemDatas =
    defaultItems
        .map((IOSSystemContextMenuItem item) =>
            item.getData(localizations))
        .toList();
_controller.showWithItems(selectionRect, defaultItemDatas);

----------------------------------------

TITLE: Liquid Template for Design Systems Section
DESCRIPTION: Template code that generates cards for Flutter's built-in design system widgets (Material and Cupertino components). Uses Liquid templating to iterate through widget categories and display them in a card grid layout.

LANGUAGE: liquid
CODE:
{% assign categories = catalog.index | sort: 'name' -%}
{% for section in categories %}
  {%- if section.name == "Cupertino" or section.name == "Material components" -%}
    <a class="card outlined-card" href="{{page.url}}{{section.id}}">
      <div class="card-header">
        <span class="card-title">{{section.name}}</span>
      </div>
      <div class="card-content">
        <p>{{section.description}}</p>
      </div>
    </a>
  {% endif -%}
{% endfor %}

----------------------------------------

TITLE: Setting Absolute Position in CSS
DESCRIPTION: Positions a div element absolutely within a relative parent in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    position: relative;
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    position: absolute;
    top: 24px;
    left: 24px;
}

----------------------------------------

TITLE: Adjusting Text Spacing in CSS
DESCRIPTION: Sets letter spacing for text within a div element using the letter-spacing property in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    letter-spacing: 4px;
}

----------------------------------------

TITLE: Removing ThemeData.selectedRowColor in Flutter
DESCRIPTION: Demonstrates the removal of the deprecated selectedRowColor property from ThemeData, as it is no longer used by the framework.

LANGUAGE: dart
CODE:
ThemeData(
  // ...
  selectedRowColor: Colors.pink, // Would have no effect.  
);

LANGUAGE: dart
CODE:
ThemeData(
  // ...
  // Remove uses.  
);

----------------------------------------

TITLE: Migrating Checkbox FillColor - After
DESCRIPTION: Updated Checkbox implementation after the fillColor behavior change, using transparent fill color and BorderSide for border color in unselected state.

LANGUAGE: dart
CODE:
Checkbox(
  fillColor: MaterialStateProperty.resolveWith((states) {
    if (!states.contains(MaterialState.selected)) {
      return Colors.transparent;
    }
    return null;
  }),
  side: const BorderSide(color: Colors.red, width: 2),
  value: _checked,
  onChanged: _enabled
    ? (bool? value) {
        setState(() {
          _checked = value!;
        });
      }
    : null,
),

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: A sequence of command-line instructions for creating, analyzing, testing and running Flutter example applications. The commands should be executed from the repository root where $PROJECT represents the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Using Spacer and Expanded for Custom Spacing in Flutter
DESCRIPTION: This snippet demonstrates an alternative approach using Spacer and Expanded widgets for custom spacing between items. The Column is wrapped with an IntrinsicHeight widget to force it to size to a minimum height.

LANGUAGE: dart
CODE:
LayoutBuilder(
  builder: (context, constraints) {
    return SingleChildScrollView(
      child: ConstrainedBox(
        constraints: BoxConstraints(minHeight: constraints.maxHeight),
        child: IntrinsicHeight(
          child: Column(
            children: [
              ItemWidget(text: 'Item 1'),
              Spacer(),
              ItemWidget(text: 'Item 2'),
              Expanded(child: ItemWidget(text: 'Item 3')),
            ],
          ),
        ),
      ),
    );
  },
);

----------------------------------------

TITLE: Preventing Multiple Executions of Load Action
DESCRIPTION: Updates the load method to prevent multiple executions while the action is already running.

LANGUAGE: dart
CODE:
void load() {
  if (running) {
    return;
  }
  // load user
}

----------------------------------------

TITLE: Organizing Flutter App Package Structure
DESCRIPTION: Demonstrates the recommended folder structure for a large Flutter application following MVVM architecture. Shows organization of code by both feature and type, including main source code, tests, and testing utilities.

LANGUAGE: plaintext
CODE:
lib
├─┬─ ui
│ ├─┬─ core
│ │ ├─┬─ ui
│ │ │ └─── <shared widgets>
│ │ └─── themes
│ └─┬─ <FEATURE NAME>
│   ├─┬─ view_model
│   │ └─── <view_model class>.dart
│   └─┬─ widgets
│     ├── <feature name>_screen.dart
│     └── <other widgets>
├─┬─ domain
│ └─┬─ models
│   └─── <model name>.dart
├─┬─ data
│ ├─┬─ repositories
│ │ └─── <repository class>.dart
│ ├─┬─ services
│ │ └─── <service class>.dart
│ └─┬─ model
│   └─── <api model class>.dart
├─── config
├─── utils
├─── routing
├─── main_staging.dart
├─── main_development.dart
└─── main.dart

// The test folder contains unit and widget tests
test
├─── data
├─── domain
├─── ui
└─── utils

// The testing folder contains mocks other classes need to execute tests
testing
├─── fakes
└─── models

----------------------------------------

TITLE: Updating package:vm_service Constraint in DevTools
DESCRIPTION: Updates the dependency constraint for package:vm_service to version 14.0.0 or higher in the DevTools project.

LANGUAGE: yaml
CODE:
package:vm_service: ^14.0.0

----------------------------------------

TITLE: Installing Android Studio Prerequisites on Linux
DESCRIPTION: Installs required 64-bit libraries for Android Studio including libc6, libstdc++6, lib32z1, and libbz2-1.0.

LANGUAGE: console
CODE:
$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

----------------------------------------

TITLE: Previous TextStyle Implementation Using AccentTextTheme
DESCRIPTION: Shows how the text style was previously configured using the accentTextTheme button style.

LANGUAGE: dart
CODE:
// theme.accentTextTheme becomes theme.textTheme
final TextStyle textStyle = theme.accentTextTheme.button.copyWith(
  color: foregroundColor,
  letterSpacing: 1.2,
);

----------------------------------------

TITLE: Creating and Running Flutter Desktop Apps
DESCRIPTION: Commands for creating a new Flutter project and running it on different desktop platforms

LANGUAGE: console
CODE:
$ flutter create my_app
$ cd my_app

----------------------------------------

TITLE: Configuring Disabled TextButton with styleFrom() in Flutter
DESCRIPTION: Demonstrates how to set both enabled and disabled foreground colors for a TextButton using the styleFrom() method.

LANGUAGE: dart
CODE:
TextButton(
  style: TextButton.styleFrom(
    foregroundColor: Colors.blue,
    disabledForegroundColor: Colors.red,
  ),
  onPressed: null,
  child: Text('TextButton'),
)

----------------------------------------

TITLE: Implementing onGenerateRoute for Top-Level Navigation in Flutter
DESCRIPTION: Defines the onGenerateRoute function for the top-level Navigator, handling routing to main screens and the setup flow.

LANGUAGE: dart
CODE:
onGenerateRoute: (settings) {
  final Widget page;
  if (settings.name == routeHome) {
    page = const HomeScreen();
  } else if (settings.name == routeSettings) {
    page = const SettingsScreen();
  } else if (settings.name!.startsWith(routePrefixDeviceSetup)) {
    final subRoute = settings.name!.substring(
      routePrefixDeviceSetup.length,
    );
    page = SetupFlow(setupPageRoute: subRoute);
  } else {
    throw Exception('Unknown route: ${settings.name}');
  }

  return MaterialPageRoute<dynamic>(
    builder: (context) {
      return page;
    },
    settings: settings,
  );
},

----------------------------------------

TITLE: SnackBar Management Before Migration
DESCRIPTION: This code snippet demonstrates how SnackBars were managed using Scaffold before the migration to ScaffoldMessenger. It shows methods for showing, hiding, and removing SnackBars.

LANGUAGE: dart
CODE:
// The ScaffoldState of the current context was used for managing SnackBars.
Scaffold.of(context).showSnackBar(mySnackBar);
Scaffold.of(context).hideCurrentSnackBar(mySnackBar);
Scaffold.of(context).removeCurrentSnackBar(mySnackBar);

// If a Scaffold.key is specified, the ScaffoldState can be directly
// accessed without first obtaining it from a BuildContext via
// Scaffold.of. From the key, use the GlobalKey.currentState
// getter. This was previously used to manage SnackBars.
final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();
Scaffold(
  key: scaffoldKey,
  body: ...,
);

scaffoldKey.currentState.showSnackBar(mySnackBar);
scaffoldKey.currentState.hideCurrentSnackBar(mySnackBar);
scaffoldKey.currentState.removeCurrentSnackBar(mySnackBar);

----------------------------------------

TITLE: Creating a Row with Evenly Spaced Images in Flutter
DESCRIPTION: Demonstrates how to create a Row widget with evenly spaced images using mainAxisAlignment property.

LANGUAGE: dart
CODE:
Row(
  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
  children: [
    Image.asset('images/pic1.jpg'),
    Image.asset('images/pic2.jpg'),
    Image.asset('images/pic3.jpg'),
  ],
);

----------------------------------------

TITLE: Initializing and Executing Command in ViewModel
DESCRIPTION: Shows how to initialize a Command and execute it immediately in the ViewModel constructor.

LANGUAGE: dart
CODE:
HomeViewModel() {
  load = Command(_load)..execute();
}

----------------------------------------

TITLE: Including Flutter Module in Groovy-based settings.gradle
DESCRIPTION: This Groovy code snippet demonstrates how to include a Flutter module as a subproject in the host app's settings.gradle file.

LANGUAGE: groovy
CODE:
// Include the host app project.
include(":app")                                   // assumed existing content
setBinding(new Binding([gradle: this]))           // new
def filePath = settingsDir.parentFile.toString() + "/flutter_module/.android/include_flutter.groovy" // new
apply from: filePath                              // new

----------------------------------------

TITLE: Using SystemContextMenu Widget in Flutter (No Changes Required)
DESCRIPTION: This snippet demonstrates the usage of SystemContextMenu widget, which doesn't require any changes due to the deprecation.

LANGUAGE: dart
CODE:
class _MyWidgetState extends State<MyWidget> {
  @override
  Widget build(BuildContext context) {
    TextField(
      contextMenuBuilder: (BuildContext context, EditableTextState editableTextState) {
        return SystemContextMenu.editableText(
          editableTextState: editableTextState,
        );
      }
    );
  }
}

----------------------------------------

TITLE: Checking Platform in Flutter
DESCRIPTION: Shows how to check the current platform (iOS, Android, etc.) in Flutter.

LANGUAGE: Dart
CODE:
final platform = Theme.of(context).platform;
if (platform == TargetPlatform.iOS) {
  return 'iOS';
}
if (platform == TargetPlatform.android) {
  return 'android';
}
if (platform == TargetPlatform.fuchsia) {
  return 'fuchsia';
}
return 'not recognized ';

----------------------------------------

TITLE: Opting Out of Nonlinear Text Scaling in Flutter
DESCRIPTION: Code example showing how to temporarily opt-out of nonlinear text scaling on Android 14 by adding a modified MediaQuery at the top of the app's widget tree. This implementation uses the deprecated textScaleFactor API and will stop working once the API is removed from Flutter.

LANGUAGE: dart
CODE:
runApp(
  Builder(builder: (context) {
    final mediaQueryData = MediaQuery.of(context);
    final mediaQueryDataWithLinearTextScaling = mediaQueryData
      .copyWith(textScaler: TextScaler.linear(mediaQueryData.textScaler.textScaleFactor));
    return MediaQuery(data: mediaQueryDataWithLinearTextScaling, child: realWidgetTree);
  }),
);

----------------------------------------

TITLE: Setting Up and Running Flutter Example Apps
DESCRIPTION: A series of commands to create, analyze, test, and run individual Flutter example apps. The commands should be executed from the repository root, with $PROJECT representing the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Highlighting Oversized Images in Flutter
DESCRIPTION: This snippet demonstrates how to enable the feature that highlights oversized images in a Flutter app. It sets debugInvertOversizedImages to true, which helps identify images that are using more memory than required.

LANGUAGE: dart
CODE:
void showOversizedImages() {
  debugInvertOversizedImages = true;
}

----------------------------------------

TITLE: Migrating isInitialRoute Usage
DESCRIPTION: Examples demonstrating how to migrate from using deprecated isInitialRoute property to either explicit initialRoute value or onGenerateInitialRoutes API.

LANGUAGE: dart
CODE:
MaterialApp(
  onGenerateRoute: (RouteSetting setting) {
    if (setting.isInitialRoute)
      return FakeSplashRoute();
    else
      return RealRoute(setting);
  }
)

LANGUAGE: dart
CODE:
MaterialApp(
  initialRoute: '/', // Set this value explicitly. Default might be altered.
  onGenerateRoute: (RouteSetting setting) {
    if (setting.name == '/')
      return FakeSplashRoute();
    else
      return RealRoute(setting);
  }
)

LANGUAGE: dart
CODE:
MaterialApp(
  onGenerateRoute: (RouteSetting setting) {
    return RealRoute(setting);
  },
  onGenerateInitialRoutes: (String initialRouteName) {
    return <Route>[FakeSplashRoute()];
  }
)

----------------------------------------

TITLE: Container with Center Widget Example
DESCRIPTION: Shows how Center widget affects Container layout by allowing it to be any size up to the screen dimensions.

LANGUAGE: dart
CODE:
Center(child: Container(width: 100, height: 100, color: red))

----------------------------------------

TITLE: Implementing TodoRepository in Flutter
DESCRIPTION: This code snippet shows the implementation of the TodoRepository class, which acts as the source of truth for ToDo items. It uses a DatabaseService to perform CRUD operations on the SQLite database.

LANGUAGE: dart
CODE:
class TodoRepository {
  TodoRepository({required DatabaseService database}) : _database = database;

  final DatabaseService _database;

  Future<Result<List<Todo>>> fetchTodos() async {
    if (!_database.isOpen()) {
      await _database.open();
    }
    return _database.getAll();
  }

  Future<Result<Todo>> createTodo(String task) async {
    if (!_database.isOpen()) {
      await _database.open();
    }
    return _database.insert(task);
  }

  Future<Result<void>> deleteTodo(int id) async {
    if (!_database.isOpen()) {
      await _database.open();
    }
    return _database.delete(id);
  }
}

----------------------------------------

TITLE: Adding New Material Widgets
DESCRIPTION: Implementation of new ToggleButtons and ColorFilter material widgets

LANGUAGE: dart
CODE:
ToggleButtons(
  children: <Widget>[
    Icon(Icons.ac_unit),
    Icon(Icons.call),
    Icon(Icons.cake),
  ],
  onPressed: (int index) {
    setState(() {
      isSelected[index] = !isSelected[index];
    });
  },
  isSelected: isSelected,
)

----------------------------------------

TITLE: Installing Essential Linux Packages for Flutter Development
DESCRIPTION: Updates package lists and installs required system packages including curl, git, unzip, xz-utils, zip, and libglu1-mesa for Flutter development.

LANGUAGE: console
CODE:
$ sudo apt-get update -y && sudo apt-get upgrade -y;
$ sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa

----------------------------------------

TITLE: Pre-Migration Theme Configuration
DESCRIPTION: Example of how themes were configured before the migration using accentIconTheme.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    accentIconTheme: IconThemeData(color: Colors.red),
  ),
)

----------------------------------------

TITLE: Marking C++ symbols for FFI visibility in macOS
DESCRIPTION: This code snippet shows how to mark C++ symbols to ensure they are visible to Dart when using FFI. It uses attributes to prevent the linker from discarding the symbols during optimization.

LANGUAGE: cpp
CODE:
extern "C" __attribute__((visibility("default"))) __attribute__((used))

----------------------------------------

TITLE: Setting Up and Running Flutter Example Apps
DESCRIPTION: This snippet outlines the commands needed to create, analyze, test, and run individual Flutter example apps. It assumes the user is in the root directory of the Flutter repository and uses $PROJECT as a placeholder for the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Initializing and Running Flutter Example Apps
DESCRIPTION: Series of commands to set up and execute Flutter example applications from the repository root. The commands create a new Flutter project without overwriting existing files, run static analysis, execute tests, and launch the application.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Flutter Dark Theme Old Defaults Configuration
DESCRIPTION: Configuration to maintain old default colors for text selection in a dark theme.

LANGUAGE: dart
CODE:
ThemeData(
  textSelectionTheme: TextSelectionThemeData(
    cursorColor: const Color.fromRGBO(66, 133, 244, 1.0),
    selectionColor: const Color(0xff64ffda),
    selectionHandleColor: const Color(0xff1de9b6),
  )
)

----------------------------------------

TITLE: Implementing NoAnimationTransitionDelegate After Migration - Dart/Flutter
DESCRIPTION: Updated TransitionDelegate implementation using the new isWaitingForEnteringDecision and isWaitingForExitingDecision properties for improved route transition handling.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';

class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
  @override
  Iterable<RouteTransitionRecord> resolve({
    List<RouteTransitionRecord> newPageRouteHistory,
    Map<RouteTransitionRecord, RouteTransitionRecord> locationToExitingPageRoute,
    Map<RouteTransitionRecord, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
  }) {
    final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];

    for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
      // Renames isEntering to isWaitingForEnteringDecision.
      if (pageRoute.isWaitingForEnteringDecision) {
        pageRoute.markForAdd();
      }
      results.add(pageRoute);

    }
    for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
      // Checks the isWaitingForExitingDecision before calling the markFor methods.
      if (exitingPageRoute.isWaitingForExitingDecision) {
        exitingPageRoute.markForRemove();
        final List<RouteTransitionRecord> pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
        if (pagelessRoutes != null) {
          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
            pagelessRoute.markForRemove();
          }
        }
      }
      results.add(exitingPageRoute);

    }
    return results;
  }
}

----------------------------------------

TITLE: Adding Mockito and HTTP Dependencies in Flutter
DESCRIPTION: Add the required dependencies to the pubspec.yaml file for using Mockito and HTTP in Flutter tests.

LANGUAGE: console
CODE:
$ flutter pub add http dev:mockito dev:build_runner

----------------------------------------

TITLE: Defining ToDo Data Model in Flutter
DESCRIPTION: This snippet shows the definition of the Todo data class using the freezed package. It represents a ToDo item with an id and a task description.

LANGUAGE: dart
CODE:
@freezed
class Todo with _$Todo {
  const factory Todo({
    /// The unique identifier of the Todo item.
    required int id,

    /// The task description of the Todo item.
    required String task,
  }) = _Todo;
}

----------------------------------------

TITLE: Setting Background Color in Dart (BoxDecoration)
DESCRIPTION: Sets the background color of a Container widget using BoxDecoration in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  decoration: BoxDecoration(
    color: Colors.grey[300],
  ),
  child: Text(
    'Lorem ipsum',
    style: bold24Roboto,
  ),
);

----------------------------------------

TITLE: Implementing Flutter View Controller in Share Extension - Swift
DESCRIPTION: Shows how to embed a FlutterViewController within a share extension's view controller. The code demonstrates initialization and view setup for displaying Flutter content within the extension.

LANGUAGE: swift
CODE:
import UIKit
import Flutter

class ShareViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        showFlutter()
    }

    func showFlutter() {
        let flutterViewController = FlutterViewController(project: nil, nibName: nil, bundle: nil)
        addChild(flutterViewController)
        view.addSubview(flutterViewController.view)
        flutterViewController.view.frame = view.bounds
    }
}

----------------------------------------

TITLE: Implementing NoAnimationTransitionDelegate Before Migration - Dart/Flutter
DESCRIPTION: Example of TransitionDelegate implementation before the migration, showing the original approach using isEntering property for route transition management.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';

class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
  @override
  Iterable<RouteTransitionRecord> resolve({
    List<RouteTransitionRecord> newPageRouteHistory,
    Map<RouteTransitionRecord, RouteTransitionRecord> locationToExitingPageRoute,
    Map<RouteTransitionRecord, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
  }) {
    final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];

    for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
      if (pageRoute.isEntering) {
        pageRoute.markForAdd();
      }
      results.add(pageRoute);

    }
    for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
      exitingPageRoute.markForRemove();
      final List<RouteTransitionRecord> pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
      if (pagelessRoutes != null) {
        for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
          pagelessRoute.markForRemove();
        }
      }
      results.add(exitingPageRoute);

    }
    return results;
  }
}

----------------------------------------

TITLE: RenderEditable Layout Assertion Error Message
DESCRIPTION: This plaintext snippet shows the assertion error message that occurs when trying to hit-test a RenderEditable object before layout.

LANGUAGE: plaintext
CODE:
Failed assertion: line 123 pos 45: '!debugNeedsLayout': is not true.

----------------------------------------

TITLE: Applying Horizontal Gradient in Dart
DESCRIPTION: Applies a horizontal linear gradient to a Container widget's background using BoxDecoration in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment(-1.0, 0.0),
          end: Alignment(0.6, 0.0),
          colors: <Color>[
            Color(0xffef5350),
            Color(0x00ef5350),
          ],
        ),
      ),
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Creating a Flutter App
DESCRIPTION: Shows how to create a new Flutter app using the flutter create command.

LANGUAGE: Shell
CODE:
$ flutter create <projectname>

----------------------------------------

TITLE: Reading Asset List Using AssetManifest API (New Method)
DESCRIPTION: New recommended approach for reading the asset manifest using the AssetManifest API. This method provides a more direct and maintainable way to access asset information.

LANGUAGE: dart
CODE:
import 'package:flutter/services.dart';

void readAssetList() async {
  final assetManifest = await AssetManifest.loadFromAssetBundle(rootBundle);
  final assets = assetManifest.listAssets();
}

----------------------------------------

TITLE: Swift Platform View Implementation
DESCRIPTION: Native iOS implementation of platform view factory and view controller in Swift

LANGUAGE: swift
CODE:
import Flutter
import UIKit

class FLNativeViewFactory: NSObject, FlutterPlatformViewFactory {
    private var messenger: FlutterBinaryMessenger

    init(messenger: FlutterBinaryMessenger) {
        self.messenger = messenger
        super.init()
    }

    func create(
        withFrame frame: CGRect,
        viewIdentifier viewId: Int64,
        arguments args: Any?
    ) -> FlutterPlatformView {
        return FLNativeView(
            frame: frame,
            viewIdentifier: viewId,
            arguments: args,
            binaryMessenger: messenger)
    }

    public func createArgsCodec() -> FlutterMessageCodec & NSObjectProtocol {
          return FlutterStandardMessageCodec.sharedInstance()
    }
}

class FLNativeView: NSObject, FlutterPlatformView {
    private var _view: UIView

    init(
        frame: CGRect,
        viewIdentifier viewId: Int64,
        arguments args: Any?,
        binaryMessenger messenger: FlutterBinaryMessenger?
    ) {
        _view = UIView()
        super.init()
        createNativeView(view: _view)
    }

    func view() -> UIView {
        return _view
    }

    func createNativeView(view _view: UIView){
        _view.backgroundColor = UIColor.blue
        let nativeLabel = UILabel()
        nativeLabel.text = "Native text from iOS"
        nativeLabel.textColor = UIColor.white
        nativeLabel.textAlignment = .center
        nativeLabel.frame = CGRect(x: 0, y: 0, width: 180, height: 48.0)
        _view.addSubview(nativeLabel)
    }
}

----------------------------------------

TITLE: Using Custom Fonts in Flutter
DESCRIPTION: Shows how to use custom fonts in a Flutter application.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(title: const Text('Sample App')),
    body: const Center(
      child: Text(
        'This is a custom font text',
        style: TextStyle(fontFamily: 'MyCustomFont'),
      ),
    ),
  );
}

----------------------------------------

TITLE: Scaling Font Size with TextScaler in Dart
DESCRIPTION: Shows how to use TextScaler.scale method to scale font sizes instead of multiplying by textScaleFactor.

LANGUAGE: dart
CODE:
final scaledFontSize = MediaQuery.textScalerOf(context).scale(textStyle.fontSize);

----------------------------------------

TITLE: Deleting ToDo Item in Flutter ViewModel
DESCRIPTION: This code snippet demonstrates how to delete a ToDo item in the TodoListViewModel. It calls the TodoRepository to delete the item and updates the view model's state accordingly.

LANGUAGE: dart
CODE:
Future<Result<void>> _delete(int id) async {
  try {
    final result = await _todoRepository.deleteTodo(id);
    switch (result) {
      case Ok<void>():
        _todos.removeWhere((todo) => todo.id == id);
        return Result.ok(null);
      case Error():
        return Result.error(result.error);
    }
  } on Exception catch (e) {
    return Result.error(e);
  } finally {
    notifyListeners();
  }
}

----------------------------------------

TITLE: Updating Android App Build Gradle File
DESCRIPTION: Changes to be made in android/app/build.gradle file, including removing legacy apply statements and adding the new Plugin DSL syntax.

LANGUAGE: groovy
CODE:
plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

----------------------------------------

TITLE: Setting Platform-Specific Dimensions in Flutter using Liquid
DESCRIPTION: This snippet uses Liquid templating to set different dimension values based on the target platform (desktop, iOS, Android, web, or default). It allows for customized sizing of UI elements across different platforms in a Flutter project.

LANGUAGE: Liquid
CODE:
{% if include.target == 'desktop' -%}
36.0 | 56.0 |
{% elsif include.target == 'mobile-ios' -%}
36.0 | 56.0 |
{% elsif include.target == 'mobile-android' -%}
10.0 | 18.0 |
{% elsif include.target == 'web' -%}
2.5 | 2.5 |
{% else -%}
44.0 | 70.0 |
{% endif -%}

----------------------------------------

TITLE: Accessing AccentColor (Pre-Migration)
DESCRIPTION: Example of accessing the accentColor from the Theme before the deprecation.

LANGUAGE: dart
CODE:
Color myColor = Theme.of(context).accentColor;

----------------------------------------

TITLE: Implementing MethodChannel Handler in C (Linux)
DESCRIPTION: Sets up a FlMethodChannel and implements the method call handler to get battery level on Linux.

LANGUAGE: c
CODE:
g_autoptr(FlStandardMethodCodec) codec = fl_standard_method_codec_new();
self->battery_channel = fl_method_channel_new(
    fl_engine_get_binary_messenger(fl_view_get_engine(view)),
    "samples.flutter.dev/battery", FL_METHOD_CODEC(codec));
fl_method_channel_set_method_call_handler(
    self->battery_channel, battery_method_call_handler, self, nullptr);

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: A sequence of shell commands to set up and execute Flutter example applications. These commands create a Flutter project, analyze the code, run tests, and launch the application.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Conditional Scrollbar Application Based on Platform in Flutter
DESCRIPTION: This snippet shows how to conditionally apply a Scrollbar based on the current platform, manually adding it only for non-desktop platforms.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
final Widget child = ListView.builder(
  controller: controller,
  itemBuilder: (BuildContext context, int index) {
    return Text('Item $index');
  }
);
// Only manually add a `Scrollbar` when not on desktop platforms.
// Or, see other migrations for changing `ScrollBehavior`.
switch (currentPlatform) {
  case TargetPlatform.linux:
  case TargetPlatform.macOS:
  case TargetPlatform.windows:
    return child;
  case TargetPlatform.android:
  case TargetPlatform.fuchsia:
  case TargetPlatform.iOS:
    return Scrollbar(
      controller: controller,
      child: child;
    );
}

----------------------------------------

TITLE: Demonstrating RenderEditable Hit Test Error in Dart
DESCRIPTION: This code snippet shows an example that throws an assertion error because the RenderEditable hasn't been laid out before hit testing.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';

void main() {
  test('attach and detach correctly handle gesture', () {
    final RenderEditable editable = RenderEditable(
      textDirection: TextDirection.ltr,
      offset: ViewportOffset.zero(),
      textSelectionDelegate: FakeEditableTextState(),
      startHandleLayerLink: LayerLink(),
      endHandleLayerLink: LayerLink(),
    );
    final PipelineOwner owner = PipelineOwner(onNeedVisualUpdate: () {});
    editable.attach(owner);
    // This throws an assertion error because
    // the RenderEditable hasn't been laid out.
    editable.handleEvent(const PointerDownEvent(),
        BoxHitTestEntry(editable, const Offset(10, 10)));
    editable.detach();
  });
}

class FakeEditableTextState extends TextSelectionDelegate {
  @override
  TextEditingValue textEditingValue;
  @override
  void hideToolbar() {}
  @override
  void bringIntoView(TextPosition position) {}
}

----------------------------------------

TITLE: Navigating with Router in Flutter Using go_router Package
DESCRIPTION: This snippet illustrates how to navigate using the Router with the go_router package in Flutter. It shows a declarative approach to navigation, which is recommended for apps with advanced routing requirements.

LANGUAGE: dart
CODE:
child: const Text('Open second screen'),
onPressed: () => context.go('/second'),

----------------------------------------

TITLE: Building iOS IPA for Development Size Analysis
DESCRIPTION: Command to build an iOS IPA file for development and size analysis purposes.

LANGUAGE: bash
CODE:
flutter build ipa --export-method development

----------------------------------------

TITLE: Setting Custom ScrollBehavior for Flutter Application
DESCRIPTION: Example showing how to implement and apply a custom ScrollBehavior class at the application level using MaterialApp configuration

LANGUAGE: dart
CODE:
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  // Override behavior methods and getters like multitouchDragStrategy
  @override
  MultitouchDragStrategy getMultitouchDragStrategy(BuildContext context) => MultitouchDragStrategy.sumAllPointers;
}

// Set ScrollBehavior for an entire application.
MaterialApp(
  scrollBehavior: MyCustomScrollBehavior(),
  // ...
);

----------------------------------------

TITLE: Implementing a Dynamic ListView in Flutter
DESCRIPTION: Shows how to create a ListView that can be dynamically updated in Flutter.

LANGUAGE: dart
CODE:
import 'dart:developer' as developer;

import 'package:flutter/material.dart';

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  List<Widget> widgets = [];

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < 100; i++) {
      widgets.add(getRow(i));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: ListView(children: widgets),
    );
  }

  Widget getRow(int i) {
    return GestureDetector(
      onTap: () {
        setState(() {
          widgets = List.from(widgets);
          widgets.add(getRow(widgets.length));
          developer.log('row $i');
        });
      },
      child: Padding(padding: const EdgeInsets.all(10), child: Text('Row $i')),
    );
  }
}

----------------------------------------

TITLE: Adding Animation Listener with setState in Flutter
DESCRIPTION: This code snippet demonstrates how to add an animation listener that calls setState when using Animation and LayoutBuilder together in a Flutter widget.

LANGUAGE: dart
CODE:
Animation animation = … create animation …;
animation.addListener(() {
  setState(() {
    // Intentionally empty. The state is inside the animation object.
  });
});

----------------------------------------

TITLE: Async/Await in JavaScript
DESCRIPTION: Shows how to use async/await syntax for asynchronous programming in JavaScript.

LANGUAGE: JavaScript
CODE:
// JavaScript
class Example {
  async function _getIPAddress() {
    const url = 'https://httpbin.org/ip';
    const response = await fetch(url);
    const json = await response.json();
    const data = json.origin;
    return data;
  }
}

async function main() {
  const example = new Example();
  try {
    const ip = await example._getIPAddress();
    console.log(ip);
  } catch (error) {
    console.error(error);
  }
}

main();

----------------------------------------

TITLE: Using MaterialState in Flutter (Before Migration)
DESCRIPTION: Example of using MaterialState classes and properties before the migration to WidgetState.

LANGUAGE: dart
CODE:
MaterialState selected = MaterialState.selected;

final MaterialStateProperty<Color> backgroundColor;

class _MouseCursor extends MaterialStateMouseCursor{
  const _MouseCursor(this.resolveCallback);

  final MaterialPropertyResolver<MouseCursor?> resolveCallback;

  @override
  MouseCursor resolve(Set<MaterialState> states) => resolveCallback(states) ?? MouseCursor.uncontrolled;
}

BorderSide side = MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {
  if (states.contains(MaterialState.selected)) {
    return const BorderSide(color: Colors.red);
  }
  return null;
});

----------------------------------------

TITLE: Basic Trackpad Gesture Listener Implementation
DESCRIPTION: Example showing how to use Listener widget to handle both mouse scroll and trackpad pan/zoom events

LANGUAGE: dart
CODE:
void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Listener(
      onPointerSignal: (PointerSignalEvent event) {
        if (event is PointerScrollEvent) {
          debugPrint('mouse scrolled ${event.scrollDelta}');
        }
      },
      onPointerPanZoomStart: (PointerPanZoomStartEvent event) {
        debugPrint('trackpad scroll started');
      },
      onPointerPanZoomUpdate: (PointerPanZoomUpdateEvent event) {
        debugPrint('trackpad scrolled ${event.panDelta}');
      },
      onPointerPanZoomEnd: (PointerPanZoomEndEvent event) {
        debugPrint('trackpad scroll ended');
      },
      child: Container()
    );
  }
}

----------------------------------------

TITLE: Resolving Unbounded Height Error in Flutter ListView
DESCRIPTION: Shows how to fix the 'Vertical viewport was given unbounded height' error by wrapping a ListView with an Expanded widget inside a Column.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Center(
    child: Column(
      children: <Widget>[
        const Text('Header'),
        Expanded(
          child: ListView(
            children: const <Widget>[
              ListTile(leading: Icon(Icons.map), title: Text('Map')),
              ListTile(leading: Icon(Icons.subway), title: Text('Subway')),
            ],
          ),
        ),
      ],
    ),
  );
}

----------------------------------------

TITLE: Opting out of Material 3 in Flutter
DESCRIPTION: This snippet shows how to opt out of Material 3 design by setting useMaterial3 to false in the MaterialApp theme.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    useMaterial3: false,
    // other theme properties
  ),
  // other app properties
)

----------------------------------------

TITLE: Adding Flutter to PATH in zsh on macOS
DESCRIPTION: This code snippet shows how to add the Flutter binary directory to the PATH environment variable in the .zshenv file. This allows Flutter commands to be run from any terminal session.

LANGUAGE: bash
CODE:
export PATH=$HOME/development/flutter/bin:$PATH

----------------------------------------

TITLE: Pre-Migration ThemeData Configuration in Flutter
DESCRIPTION: Example showing how to configure toggleable widget colors using the deprecated toggleableActiveColor property in ThemeData

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(toggleableActiveColor: myColor),
  // ...
);

----------------------------------------

TITLE: Terminal Flutter Attach Command
DESCRIPTION: Basic command for attaching Flutter debugger to a running application. Used to enable debugging functionalities like hot reload and DevTools.

LANGUAGE: console
CODE:
$ flutter attach

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: A sequence of shell commands to create, analyze, test and run Flutter example applications. Commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Async/Await in Dart
DESCRIPTION: Demonstrates using async/await syntax for asynchronous programming in Dart.

LANGUAGE: Dart
CODE:
// Dart
import 'dart:convert';

import 'package:http/http.dart' as http;

class Example {
  Future<String> _getIPAddress() async {
    final url = Uri.https('httpbin.org', '/ip');
    final response = await http.get(url);
    final ip = jsonDecode(response.body)['origin'] as String;
    return ip;
  }
}

/// An async function returns a `Future`.
/// It can also return `void`, unless you use
/// the `avoid_void_async` lint. In that case,
/// return `Future<void>`.
void main() async {
  final example = Example();
  try {
    final ip = await example._getIPAddress();
    print(ip);
  } catch (error) {
    print(error);
  }
}

----------------------------------------

TITLE: GestureRecognizer with Trackpad Support
DESCRIPTION: Implementation using PanGestureRecognizer with Listener to handle trackpad gestures

LANGUAGE: dart
CODE:
void main() => runApp(Foo());

class Foo extends StatefulWidget {
  late final PanGestureRecognizer recognizer;

  @override
  void initState() {
    super.initState();
    recognizer = PanGestureRecognizer()
    ..onStart = _onPanStart
    ..onUpdate = _onPanUpdate
    ..onEnd = _onPanEnd;
  }

  void _onPanStart(DragStartDetails details) {
    debugPrint('onStart');
  }

  void _onPanUpdate(DragUpdateDetails details) {
    debugPrint('onUpdate');
  }

  void _onPanEnd(DragEndDetails details) {
    debugPrint('onEnd');
  }

  @override
  Widget build(BuildContext context) {
    return Listener(
      onPointerDown: recognizer.addPointer,
      onPointerPanZoomStart: recognizer.addPointerPanZoom,
      child: Container()
    );
  }
}

----------------------------------------

TITLE: Using PopScope and Form with onPopInvokedWithResult in Flutter (Post-migration)
DESCRIPTION: Example of using PopScope and Form with the new onPopInvokedWithResult callback after the migration to generic types. This code demonstrates the updated implementation with access to the pop result and generic type support.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      navigatorKey: nav,
      home: Column(
        children: [
          Form(
            canPop: false,
            onPopInvokedWithResult: (bool didPop, Object? result) {
              if (didPop) {
                return;
              }
              launchConfirmationDialog();
            },
            child: MyWidget(),
          ),
          PopScope<Object?>(
            canPop: false,
            onPopInvokedWithResult: (bool didPop, Object? result) {
              if (didPop) {
                return;
              }
              launchConfirmationDialog();
            },
            child: MyWidget(),
          ),
        ],
      ),
    ),
  );
}

----------------------------------------

TITLE: Using Platform Plugins in Background Isolates
DESCRIPTION: Example showing how to use platform plugins (like shared_preferences) in a background isolate using BackgroundIsolateBinaryMessenger. Demonstrates proper initialization and usage of platform channels in isolates.

LANGUAGE: dart
CODE:
import 'dart:isolate';

import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  RootIsolateToken rootIsolateToken = RootIsolateToken.instance!;
  Isolate.spawn(_isolateMain, rootIsolateToken);
}

Future<void> _isolateMain(RootIsolateToken rootIsolateToken) async {
  BackgroundIsolateBinaryMessenger.ensureInitialized(rootIsolateToken);
  SharedPreferences sharedPreferences = await SharedPreferences.getInstance();
  print(sharedPreferences.getBool('isDebug'));
}

----------------------------------------

TITLE: Rounding Corners in Dart
DESCRIPTION: Rounds the corners of a Container widget using BoxDecoration and BorderRadius in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red circle
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.red[400],
        borderRadius: const BorderRadius.all(
          Radius.circular(8),
        ),
      ),
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Initializing Firebase Hosting
DESCRIPTION: Command to initialize Firebase Hosting configuration for a Flutter web project.

LANGUAGE: console
CODE:
firebase init hosting

----------------------------------------

TITLE: Switch Statement After Migration
DESCRIPTION: Updated switch statement handling all TargetPlatform values including Linux and Windows.

LANGUAGE: dart
CODE:
void dance(TargetPlatform platform) {
  switch (platform) {
    case TargetPlatform.android:
      // Do Android dance.
      break;
    case TargetPlatform.fuchsia:
      // Do Fuchsia dance.
      break;
    case TargetPlatform.iOS:
      // Do iOS dance.
      break;
    case TargetPlatform.linux: // new case
      // Do Linux dance.
      break;
    case TargetPlatform.macOS:
      // Do macOS dance.
      break;
    case TargetPlatform.windows: // new case
      // Do Windows dance.
      break;
  }
}

----------------------------------------

TITLE: Asynchronous Programming with Promises in JavaScript
DESCRIPTION: Shows how to use Promises for asynchronous operations in JavaScript.

LANGUAGE: JavaScript
CODE:
// JavaScript
class Example {
  _getIPAddress() {
    const url = 'https://httpbin.org/ip';
    return fetch(url)
      .then(response => response.json())
      .then(responseJson => {
        const ip = responseJson.origin;
        return ip;
      });
  }
}

function main() {
  const example = new Example();
  example
    ._getIPAddress()
    .then(ip => console.log(ip))
    .catch(error => console.error(error));
}

main();

----------------------------------------

TITLE: Accessing Shared Preferences in Flutter
DESCRIPTION: Demonstrates how to access and update Shared Preferences in a Flutter application.

LANGUAGE: dart
CODE:
import 'dart:async';
import 'package:flutter/material.dart';

import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(
    const MaterialApp(
      home: Scaffold(
        body: Center(
          child: ElevatedButton(
            onPressed: _incrementCounter,
            child: Text('Increment Counter'),
          ),
        ),
      ),
    ),
  );
}

Future<void> _incrementCounter() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  int counter = (prefs.getInt('counter') ?? 0) + 1;
  await prefs.setInt('counter', counter);
}

----------------------------------------

TITLE: Updated TargetPlatform Enum Definition
DESCRIPTION: The new version of the TargetPlatform enum including Linux and Windows support.

LANGUAGE: dart
CODE:
enum TargetPlatform {
  android,
  fuchsia,
  iOS,
  linux, // new value
  macOS,
  windows, // new value
}

----------------------------------------

TITLE: Centering Components in CSS
DESCRIPTION: Centers content within a div using flexbox in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  Lorem ipsum
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}

----------------------------------------

TITLE: Legacy Flutter Plugins File Format
DESCRIPTION: Example of the deprecated .flutter-plugins file format that maps plugin names to their paths.

LANGUAGE: plaintext
CODE:
camera=/path/to/camera/plugin
shared_preferences=shared_preferences

----------------------------------------

TITLE: Creating a Widget Test in Dart
DESCRIPTION: This snippet demonstrates how to create a widget test using the testWidgets function. It builds the widget, finds specific text elements, and verifies their presence.

LANGUAGE: dart
CODE:
void main() {
  testWidgets('MyWidget has a title and message', (tester) async {
    await tester.pumpWidget(const MyWidget(title: 'T', message: 'M'));
    final titleFinder = find.text('T');
    final messageFinder = find.text('M');
    expect(titleFinder, findsOneWidget);
    expect(messageFinder, findsOneWidget);
  });
}

----------------------------------------

TITLE: Verifying Flutter device recognition on macOS
DESCRIPTION: This command checks if Flutter recognizes the connected Android device on a macOS system. It lists all available devices that Flutter can detect.

LANGUAGE: console
CODE:
$ flutter devices

----------------------------------------

TITLE: Migrating OutlineButton with Custom Shape and Border to OutlinedButton in Flutter
DESCRIPTION: Shows how to migrate an OutlineButton with a custom shape and border to the new OutlinedButton using styleFrom().

LANGUAGE: dart
CODE:
OutlineButton(
  shape: StadiumBorder(),
  highlightedBorderColor: Colors.red,
  borderSide: BorderSide(
    width: 2,
    color: Colors.red
  ),
  onPressed: () { },
  child: Text('OutlineButton with custom shape and border'),
)

OutlinedButton(
  style: OutlinedButton.styleFrom(
    shape: StadiumBorder(),
    side: BorderSide(
      width: 2,
      color: Colors.red
    ),
  ),
  onPressed: () { },
  child: Text('OutlinedButton with custom shape and border'),
)

----------------------------------------

TITLE: Initializing Firebase for Vertex AI
DESCRIPTION: Firebase initialization code required for using Vertex AI provider. Includes Firebase Core setup with default options.

LANGUAGE: dart
CODE:
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_vertexai/firebase_vertexai.dart';
import 'package:flutter_ai_toolkit/flutter_ai_toolkit.dart';

// ... other imports

import 'firebase_options.dart'; // from `flutterfire config`

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(const App());
}

----------------------------------------

TITLE: Setting up and Running Flutter Example Apps
DESCRIPTION: Series of commands to create, analyze, test and run Flutter example applications. The commands should be executed from the repository root, where $PROJECT represents the specific app project path (e.g., examples/layout/lakes/step6).

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: CupertinoTextField Migration Example
DESCRIPTION: Migration example for CupertinoTextField from using maxLengthEnforced to removing maxLength.

LANGUAGE: dart
CODE:
CupertinoTextField(
  maxLength: 6,
  maxLengthEnforced: false,
)

LANGUAGE: dart
CODE:
CupertinoTextField()

----------------------------------------

TITLE: ParentDataWidget Implementation Before Migration in Flutter
DESCRIPTION: This code snippet shows how a ParentDataWidget was implemented before the generic type change, using FrogJar as the generic type.

LANGUAGE: dart
CODE:
class FrogSize extends ParentDataWidget<FrogJar> {
  FrogSize({
    Key key,
    required this.size,
    required Widget child,
  }) : assert(child != null),
        assert(size != null),
        super(key: key, child: child);

  final Size size;

  @override
  void applyParentData(RenderObject renderObject) {
    final FrogJarParentData parentData = renderObject.parentData;
    if (parentData.size != size) {
      parentData.size = size;
      final RenderFrogJar targetParent = renderObject.parent;
      targetParent.markNeedsLayout();
    }
  }
}

class FrogJarParentData extends ParentData {
  Size size;
}

class FrogJar extends RenderObjectWidget {
  // ...
}

----------------------------------------

TITLE: Defining Home Screen in Flutter
DESCRIPTION: Creates a HomeScreen widget with an AppBar and a SelectionButton in the body.

LANGUAGE: dart
CODE:
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Returning Data Demo')),
      // Create the SelectionButton widget in the next step.
      body: const Center(child: SelectionButton()),
    );
  }
}

----------------------------------------

TITLE: Welcome Screen Widget
DESCRIPTION: A simple welcome screen widget that displays after successful sign-up.

LANGUAGE: dart
CODE:
class WelcomeScreen extends StatelessWidget {
  const WelcomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Text(
          'Welcome!',
          style: Theme.of(context).textTheme.displayMedium,
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Using TextTheme with OnSecondary Color (Post-Migration)
DESCRIPTION: Updated example showing how to get a headline style with onSecondary color after the deprecation of accentTextTheme.

LANGUAGE: dart
CODE:
final ThemeData theme = Theme.of(context);
TextStyle style = theme.textTheme.headline1.copyWith(
  color: theme.colorScheme.onSecondary,
)

----------------------------------------

TITLE: Implementing a Stateful Widget with Text Update in Flutter
DESCRIPTION: Shows how to create a stateful widget that updates text when a button is pressed.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const SampleApp());
}

class SampleApp extends StatelessWidget {
  const SampleApp({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sample App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const SampleAppPage(),
    );
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  // Default placeholder text.
  String textToShow = 'I Like Flutter';

  void _updateText() {
    setState(() {
      // Update the text.
      textToShow = 'Flutter is Awesome!';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: Center(child: Text(textToShow)),
      floatingActionButton: FloatingActionButton(
        onPressed: _updateText,
        tooltip: 'Update Text',
        child: const Icon(Icons.update),
      ),
    );
  }
}

----------------------------------------

TITLE: Updating minSdkVersion in AndroidManifest.xml for Flutter Android Projects
DESCRIPTION: The AndroidManifest.xml file also needs to be updated to reflect the new minimum SDK version of 21, ensuring compatibility with Flutter's raised minimum Android version requirement.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-sdk android:minSdkVersion="21" />
    <!-- other manifest contents -->
</manifest>

----------------------------------------

TITLE: Setting Container Width in Dart
DESCRIPTION: Sets a fixed width for a nested Container widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      width: 240, // max-width is 240
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.red[400],
      ),
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Configuring LinearProgressIndicator with Updated Design in Flutter
DESCRIPTION: This snippet demonstrates how to opt into the updated Material 3 design for LinearProgressIndicator by setting the year2023 flag to false. This enables new features like gaps between tracks, stop indicators, and rounded corners.

LANGUAGE: dart
CODE:
LinearProgressIndicator(
  year2023: false,
  value: 0.5,
),

----------------------------------------

TITLE: Using onGenerateRoute for Argument Extraction in Flutter
DESCRIPTION: Shows how to use onGenerateRoute to extract arguments and pass them to a widget when navigating.

LANGUAGE: dart
CODE:
MaterialApp(
  onGenerateRoute: (settings) {
    if (settings.name == PassArgumentsScreen.routeName) {
      final args = settings.arguments as ScreenArguments;
      return MaterialPageRoute(
        builder: (context) {
          return PassArgumentsScreen(
            title: args.title,
            message: args.message,
          );
        },
      );
    }
    assert(false, 'Need to implement ${settings.name}');
    return null;
  },
)

----------------------------------------

TITLE: Verifying PATH Update for Flutter SDK
DESCRIPTION: These commands are used to verify that the Flutter SDK has been successfully added to the PATH. The first command displays the current PATH, while the second checks the location of the flutter command.

LANGUAGE: console
CODE:
$ echo $PATH

LANGUAGE: console
CODE:
$ which flutter

----------------------------------------

TITLE: Migrating RaisedButton to ElevatedButton with Custom Colors in Flutter
DESCRIPTION: Shows how to migrate a RaisedButton with custom background and text colors to the new ElevatedButton using styleFrom().

LANGUAGE: dart
CODE:
RaisedButton(
  color: Colors.red, // background
  textColor: Colors.white, // foreground
  onPressed: () { },
  child: Text('RaisedButton with custom foreground/background'),
)

ElevatedButton(
  style: ElevatedButton.styleFrom(
    backgroundColor: Colors.red,
    foregroundColor: Colors.white,
  ),
  onPressed: () { },
  child: Text('ElevatedButton with custom foreground/background'),
)

----------------------------------------

TITLE: Implementing Mutable Zone Values in Flutter
DESCRIPTION: Example showing how to handle zone values when initialization and runApp must occur in the same zone using a mutable object pattern

LANGUAGE: dart
CODE:
import 'dart:async';
import 'package:flutter/material.dart';

class Mutable<T> {
  Mutable(this.value);
  T value;
}

void main() {
  var myValue = Mutable<double>(0.0);
  Zone.current.fork(
    zoneValues: {
      'myKey': myValue,
    }
  ).run(() {
    WidgetsFlutterBinding.ensureInitialized();
    var newValue = ...; // obtain value from plugin
    myValue.value = newValue; // update value in Zone
    runApp(...);
  });
}


----------------------------------------

TITLE: Setting Up and Running Flutter Example Apps
DESCRIPTION: A sequence of commands to initialize and run Flutter example applications. The process includes creating a new Flutter project without overwriting existing files, navigating to the project directory, analyzing code, running tests, and launching the application.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Inline Formatting in HTML
DESCRIPTION: Applies inline formatting to text using an <em> tag within a div element in HTML.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem <em>ipsum</em>
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
}
.red-box em {
    font: 300 48px Roboto;
    font-style: italic;
}

----------------------------------------

TITLE: Window Display Code After Migration - C++
DESCRIPTION: Updated code implementation that ensures the window is shown by adding a force redraw call, fixing potential timing issues with the first frame completion.

LANGUAGE: cpp
CODE:
flutter_controller_->engine()->SetNextFrameCallback([&]() {
  this->Show();
});

// Flutter can complete the first frame before the "show window" callback is
// registered. The following call ensures a frame is pending to ensure the
// window is shown. It is a no-op if the first frame hasn't completed yet.
flutter_controller_->ForceRedraw();

----------------------------------------

TITLE: Implementing Custom Notification without visitAncestor (Post-Migration)
DESCRIPTION: Updated implementation of a custom Notification class after the removal of visitAncestor. This code manually implements the ancestor traversal and notification dispatch.

LANGUAGE: dart
CODE:
import 'package:flutter/widgets.dart';

class MyNotification extends Notification {

  bool visitAncestor(Element element) {
    print('Visiting $element');
    if (element is ProxyElement) {
      final Widget widget = element.widget;
      if (widget is NotificationListener<MyNotification>) {
        return widget.onNotification?.call(notification) ?? true;
      }
    }
    return true;
  }
}

void methodThatSendsNotification(BuildContext? context) {
  context?.visitAncestor(MyNotification().visitAncestor);
}

----------------------------------------

TITLE: Building Flutter Web App with Wasm
DESCRIPTION: Command to build a Flutter web application with WebAssembly support, outputting to the build/web directory.

LANGUAGE: console
CODE:
$ flutter build web --wasm

----------------------------------------

TITLE: Creating Text Excerpts in Dart
DESCRIPTION: Creates a text excerpt with ellipsis using the maxLines and overflow properties of a Text widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      decoration: BoxDecoration(
        color: Colors.red[400],
      ),
      padding: const EdgeInsets.all(16),
      child: Text(
        'Lorem ipsum dolor sit amet, consec etur',
        style: bold24Roboto,
        overflow: TextOverflow.ellipsis,
        maxLines: 1,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Adding Asset Placeholder in Flutter pubspec.yaml
DESCRIPTION: This YAML snippet shows how to add a local asset (loading.gif) to the Flutter project's pubspec.yaml file for use as an image placeholder.

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - assets/loading.gif

----------------------------------------

TITLE: Scaling Components in Dart
DESCRIPTION: Scales a Container widget by 1.5 using the Transform widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Transform(
      alignment: Alignment.center,
      transform: Matrix4.identity()..scale(1.5),
      child: Container(
        // red box
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.red[400],
        ),
        child: Text(
          'Lorem ipsum',
          style: bold24Roboto,
          textAlign: TextAlign.center,
        ),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Implementing Tab Navigation with Scaffold in Flutter
DESCRIPTION: Shows a more complete example of tab navigation using Scaffold, TabBar, and TabBarView in Flutter.

LANGUAGE: Dart
CODE:
class _NavigationHomePageState extends State<NavigationHomePage>
    with SingleTickerProviderStateMixin {
  late TabController controller = TabController(length: 2, vsync: this);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      bottomNavigationBar: Material(
        color: Colors.blue,
        child: TabBar(
          tabs: const <Tab>[
            Tab(icon: Icon(Icons.person)),
            Tab(icon: Icon(Icons.email)),
          ],
          controller: controller,
        ),
      ),
      body: TabBarView(
        controller: controller,
        children: const <Widget>[HomeScreen(), TabScreen()],
      ),
    );
  }
}

----------------------------------------

TITLE: Configuring App Version in Flutter
DESCRIPTION: Update the version number in pubspec.yaml file. Version consists of three numbers separated by dots plus an optional build number after a plus sign.

LANGUAGE: yaml
CODE:
version: 1.0.0+1

----------------------------------------

TITLE: Implementing ImageProvider with loadBuffer method (Post-migration)
DESCRIPTION: Updated example of implementing an ImageProvider subclass using the new loadBuffer method, along with a delegating provider. This demonstrates the use of ImmutableBuffer and the new DecoderBufferCallback.

LANGUAGE: dart
CODE:
class MyImageProvider extends ImageProvider<MyImageProvider> {
  @override
  ImageStreamCompleter loadBuffer(MyImageProvider key, DecoderBufferCallback decode) {
    return MultiFrameImageStreamCompleter(
        codec: _loadData(key, decode),
    );
  }

  Future<ui.Codec> _loadData(MyImageProvider key, DecoderBufferCallback decode) async {
    final Uint8List bytes = await bytesFromSomeApi();
    final ui.ImmutableBuffer buffer = await ui.ImmutableBuffer.fromUint8List(bytes);
    return decode(buffer);
  }
}

class MyDelegatingProvider extends ImageProvider<MyDelegatingProvider> {
  MyDelegatingProvider(this.provider);

  final ImageProvder provider;

  @override
  ImageStreamCompleter loadBuffer(MyDelegatingProvider key, DecoderCallback decode) {
    return provider.loadBuffer(key, decode);
  }
}

----------------------------------------

TITLE: Markdown Documentation Structure for Flutter State Management
DESCRIPTION: A markdown document that outlines the structure and navigation for Flutter state management documentation, including front matter metadata, notes about state restoration, and links to related topics.

LANGUAGE: markdown
CODE:
---
title: State management
description: How to structure an app to manage the state of the data flowing through it.
next:
  title: Start thinking declaratively
  path: /data-and-backend/state-mgmt/declarative
---

:::note
If you have written a mobile app using Flutter
and wonder why your app's state is lost
on a restart, check out [Restore state on Android][]
or [Restore state on iOS][].
:::

----------------------------------------

TITLE: Providing Localization with Localizations Widget in Flutter
DESCRIPTION: This code snippet demonstrates how to provide localization for TextField using the Localizations widget when not using MaterialApp.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Localizations(
      locale: const Locale('en', 'US'),
      delegates: const <LocalizationsDelegate<dynamic>>[
        DefaultWidgetsLocalizations.delegate,
        DefaultMaterialLocalizations.delegate,
      ],
      child: MediaQuery(
        data: const MediaQueryData(),
        child: Directionality(
          textDirection: TextDirection.ltr,
          child: Material(
            child: TextField(),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Switching Flutter Channel
DESCRIPTION: Commands to switch to beta channel and upgrade Flutter SDK to that channel's latest version.

LANGUAGE: console
CODE:
$ flutter channel beta
$ flutter upgrade

----------------------------------------

TITLE: Running Flutter Doctor
DESCRIPTION: Commands to verify Flutter installation and check environment setup, with optional verbose output

LANGUAGE: console
CODE:
$ flutter doctor

LANGUAGE: console
CODE:
$ flutter doctor -v

----------------------------------------

TITLE: Removing Semantics Widget from InputChip in Flutter
DESCRIPTION: This snippet demonstrates how to remove the unnecessary Semantics widget wrapping the label of an InputChip after the semantic changes have been implemented in Flutter.

LANGUAGE: dart
CODE:
Widget myInputChip = InputChip(
  onPressed: () {},
  label: Text('My Input Chip'),
);

----------------------------------------

TITLE: Accessing device pixel ratio and locale after migration
DESCRIPTION: Example of accessing device pixel ratio and locale using View.of and platformDispatcher after migration.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  final double dpr = View.of(context).devicePixelRatio;
  final Locale locale = View.of(context).platformDispatcher.locale;
  return Text('The device pixel ratio is $dpr and the locale is $locale.');
}

----------------------------------------

TITLE: Declarative UI State Change Example in Flutter
DESCRIPTION: Shows Flutter's declarative approach where instead of mutating views, new widget instances are created to represent the updated UI state.

LANGUAGE: dart
CODE:
// Declarative style
return ViewB(color: red, child: const ViewC());

----------------------------------------

TITLE: Post-Migration TabBar Theme Configuration in Flutter
DESCRIPTION: Updated example showing how to set the tab bar indicator color using the new TabBarThemeData.indicatorColor property.

LANGUAGE: dart
CODE:
theme: ThemeData(
  tabBarTheme: const TabBarThemeData(indicatorColor: Colors.red),
  useMaterial3: false,
),

----------------------------------------

TITLE: Migrating Memory Allocations Usage in Dart
DESCRIPTION: Shows the migration from using MemoryAllocations to FlutterMemoryAllocations for tracking object creation in Flutter. The change affects how memory allocations are tracked while maintaining the same functionality.

LANGUAGE: dart
CODE:
if (kFlutterMemoryAllocationsEnabled) {
  MemoryAllocations.instance.dispatchObjectCreated(
    library: 'package:flutter/gestures.dart',
    className: '$MultiDragPointerState',
    object: this,
  );
}

LANGUAGE: dart
CODE:
if (kFlutterMemoryAllocationsEnabled) {
  FlutterMemoryAllocations.instance.dispatchObjectCreated(
    library: 'package:flutter/gestures.dart',
    className: '$MultiDragPointerState',
    object: this,
  );
}

----------------------------------------

TITLE: iOS Camera Permission Configuration
DESCRIPTION: XML configuration required in Info.plist to enable camera and microphone access on iOS devices.

LANGUAGE: xml
CODE:
<key>NSCameraUsageDescription</key>
<string>Explanation on why the camera access is needed.</string>
<key>NSMicrophoneUsageDescription</key>
<string>Explanation on why the microphone access is needed.</string>

----------------------------------------

TITLE: Rotating Components in Dart
DESCRIPTION: Rotates a Container widget by 15 degrees using the Transform widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Transform(
      alignment: Alignment.center,
      transform: Matrix4.identity()..rotateZ(15 * 3.1415927 / 180),
      child: Container(
        // red box
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.red[400],
        ),
        child: Text(
          'Lorem ipsum',
          style: bold24Roboto,
          textAlign: TextAlign.center,
        ),
      ),
    ),
  ),
);

----------------------------------------

TITLE: Certificate Key Export
DESCRIPTION: Command to export private keys from existing certificates for code signing.

LANGUAGE: bash
CODE:
openssl pkcs12 -in <certificate_name>.p12 -nodes -nocerts | openssl rsa -out cert_key

----------------------------------------

TITLE: Configuring L10n YAML for Direct Source Generation
DESCRIPTION: This YAML configuration disables the synthetic package and specifies the output directory for generated localization files. It sets 'synthetic-package: false' and defines 'arb-dir' and 'output-dir'.

LANGUAGE: yaml
CODE:
synthetic-package: false

# The files are generated into the path specified by `arb-dir`
arb-dir: lib/i18n

# Or, specifically provide an output path:
output-dir: lib/src/generated/i18n

----------------------------------------

TITLE: Implementing HighlightTextEditingController After Change
DESCRIPTION: Updated implementation of HighlightTextEditingController using the new BuildContext parameter to access Theme.accentColor.

LANGUAGE: dart
CODE:
class HighlightTextEditingController extends TextEditingController {
  @override
  TextSpan buildTextSpan({required BuildContext context, TextStyle? style, required bool withComposing}) {
    final Color color = Theme.of(context).accentColor;
    return super.buildTextSpan(context: context, style: TextStyle(color: color), withComposing: withComposing);
  }
}

----------------------------------------

TITLE: Generating Platform-Specific Android Setup Cards in HTML and Liquid
DESCRIPTION: This snippet creates a grid of cards with links to Android setup guides for different platforms. It uses Liquid templating to dynamically generate cards based on a list of target platforms, and includes platform-specific icons and styling.

LANGUAGE: html
CODE:
<div class="card-grid">
{% for target in target-list %}
{% assign targetLink = '/platform-integration/android/install-android/install-android-from-' | append: target | downcase | replace: " ", "-" %}

  {% if target contains 'macOS' or target contains 'iOS' %}
    {% assign bug = 'card-macos' %}
  {% elsif target contains 'Windows' %}
    {% assign bug = 'card-windows' %}
  {% elsif target contains 'Linux' %}
    {% assign bug = 'card-linux' %}
  {% elsif target contains 'ChromeOS' %}
    {% assign bug = 'card-chromeos' %}
  {% endif %}

  <a class="card outlined-card install-card {{bug}}" id="install-{{target | downcase}}" href="{{targetLink}}">
    {% assign icon = target | downcase | replace: " ", "-" -%}
    <div class="card-leading">
      {% case icon %}
      {% when 'macos' -%}
        <span class="material-symbols" aria-hidden="true">laptop_mac</span>
      {% when 'windows','linux' -%}
        <span class="material-symbols" aria-hidden="true">desktop_windows</span>
      {% when 'ios' -%}
        <span class="material-symbols" aria-hidden="true">phone_iphone</span>
      {% else -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endcase -%}
      <span class="material-symbols" aria-hidden="true">add</span>
      <span class="material-symbols" aria-hidden="true">phone_android</span>
    </div>
    <div class="card-header text-center">
      <span class="card-title">
        Make Android and
        {% if target contains "iOS" -%}
        {{target}} apps on macOS
        {%- elsif target contains "on" -%}
        {{ target | replace: "on", "apps on" }}
        {%- else -%}
        {{target}} desktop apps
        {%- endif -%}
      </span>
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Debug Production Configuration Settings
DESCRIPTION: Example configuration file for debug-production environment with API base URL setting.

LANGUAGE: plaintext
CODE:
# Debug-production build settings
API_BASE_URL = flavors.com/api

----------------------------------------

TITLE: Configuring Platform Tools Path
DESCRIPTION: Command to add Android platform tools to system PATH variable.

LANGUAGE: console
CODE:
$ export PATH="$PATH:$PLATFORM_PATH/platform-tools"

----------------------------------------

TITLE: Overriding addAllowedPointer in CustomGestureRecognizer (After Migration)
DESCRIPTION: This snippet demonstrates the correct way to override the addAllowedPointer method in CustomGestureRecognizer after the migration. It now accepts a PointerDownEvent parameter, aligning with the updated OneSequenceGestureRecognizer implementation.

LANGUAGE: dart
CODE:
class CustomGestureRecognizer extends ScaleGestureRecognizer {
  @override
  void addAllowedPointer(PointerDownEvent event) {
    // insert custom handling of event here...
    super.addAllowedPointer(event);
  }
}

----------------------------------------

TITLE: Migrating Custom Paint Delegate in Dart
DESCRIPTION: Shows how to update a custom paint delegate method to use TextScaler instead of textScaleFactor.

LANGUAGE: dart
CODE:
abstract class _MyCustomPaintDelegate { 
  void paint(PaintingContext context, Offset offset, TextScaler textScaler) { 
  }
}

----------------------------------------

TITLE: Using TextEditingController in Flutter
DESCRIPTION: Demonstrates how to use TextEditingController to manage a TextField and access its value in Flutter.

LANGUAGE: Dart
CODE:
final TextEditingController _controller = TextEditingController();

@override
Widget build(BuildContext context) {
  return Column(
    children: [
      TextField(
        controller: _controller,
        decoration: const InputDecoration(
          hintText: 'Type something',
          labelText: 'Text Field',
        ),
      ),
      ElevatedButton(
        child: const Text('Submit'),
        onPressed: () {
          showDialog(
            context: context,
            builder: (context) {
              return AlertDialog(
                title: const Text('Alert'),
                content: Text('You typed ${_controller.text}'),
              );
            },
          );
        },
      ),
    ],
  );
}

----------------------------------------

TITLE: Calling TextEditingController.buildTextSpan Before Migration
DESCRIPTION: Example of calling buildTextSpan before the migration, which will now cause an error due to missing context parameter.

LANGUAGE: dart
CODE:
TextEditingController controller = /* ... */;
TextSpan span = controller.buildTextSpan(withComposing: false);

----------------------------------------

TITLE: Recreating RaisedButton Style with ElevatedButton in Flutter
DESCRIPTION: Demonstrates how to create a ButtonStyle that makes an ElevatedButton look like the deprecated RaisedButton.

LANGUAGE: dart
CODE:
final ButtonStyle raisedButtonStyle = ElevatedButton.styleFrom(
  foregroundColor: Colors.black87,
  backgroundColor: Colors.grey[300],
  minimumSize: Size(88, 36),
  padding: EdgeInsets.symmetric(horizontal: 16),
  shape: const RoundedRectangleBorder(
    borderRadius: BorderRadius.all(Radius.circular(2)),
  ),
);
ElevatedButton(
  style: raisedButtonStyle,
  onPressed: () { },
  child: Text('Looks like a RaisedButton'),
)

----------------------------------------

TITLE: Defining Text Style in Dart
DESCRIPTION: Creates a TextStyle object with white color, 24pt font size, and bold weight for use in Flutter widgets.

LANGUAGE: dart
CODE:
TextStyle bold24Roboto = const TextStyle(
  color: Colors.white,
  fontSize: 24,
  fontWeight: FontWeight.bold,
);

----------------------------------------

TITLE: Including Apple Silicon Information
DESCRIPTION: This snippet includes a separate Markdown file containing information about Apple Silicon.

LANGUAGE: liquid
CODE:
{% include docs/install/reqs/macos/apple-silicon.md %}

----------------------------------------

TITLE: Setting Absolute Position in Dart
DESCRIPTION: Positions a Container widget absolutely within a Stack widget in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Stack(
    children: [
      Positioned(
        // red box
        left: 24,
        top: 24,
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.red[400],
          ),
          child: Text(
            'Lorem ipsum',
            style: bold24Roboto,
          ),
        ),
      ),
    ],
  ),
);

----------------------------------------

TITLE: Uploading and Releasing Snap to Store
DESCRIPTION: Command to upload a snap file to the Snap Store and release it to a specific channel.

LANGUAGE: console
CODE:
$ snapcraft upload --release=<channel> <file>.snap

----------------------------------------

TITLE: Using AccentTextTheme (Pre-Migration)
DESCRIPTION: Example of using accentTextTheme to get a headline style before the deprecation.

LANGUAGE: dart
CODE:
TextStyle style = Theme.of(context).accentTextTheme.headline1;

----------------------------------------

TITLE: Debug Staging Configuration Settings
DESCRIPTION: Example configuration file for debug-staging environment with API base URL setting.

LANGUAGE: plaintext
CODE:
# Debug-staging build settings
API_BASE_URL = staging.flavors.com/api

----------------------------------------

TITLE: Post-Migration Swift Implementation
DESCRIPTION: Example of Swift code after migration with proper optional type handling

LANGUAGE: swift
CODE:
  var splashScreenView : UIView? = UIView()
  var flutterEngine = FlutterEngine(name: "my flutter engine")
  let flutterViewController = FlutterViewController(engine: flutterEngine, nibName: nil, bundle: nil)
  let splashScreenView = flutterViewController.splashScreenView // compiles successfully
  if let splashScreenView = splashScreenView {
  }

----------------------------------------

TITLE: Rotating Components in CSS
DESCRIPTION: Rotates a div element by 15 degrees using the transform property in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    transform: rotate(15deg);
}

----------------------------------------

TITLE: Calling TextEditingController.buildTextSpan After Migration
DESCRIPTION: Updated example of calling buildTextSpan after the migration, including the required context parameter.

LANGUAGE: dart
CODE:
BuildContext context = /* ... */;
TextEditingController controller = /* ... */;
TextSpan span = controller.buildTextSpan(context: context, withComposing: false);

----------------------------------------

TITLE: Building Snap with Multipass VM Backend
DESCRIPTION: Command to build a snap using the Snapcraft tool with the Multipass VM backend.

LANGUAGE: console
CODE:
$ snapcraft

----------------------------------------

TITLE: Setting up Android SDK Tools Path
DESCRIPTION: Commands to unzip Android SDK tools and add them to system PATH variable.

LANGUAGE: console
CODE:
$ unzip ~/sdk-tools-linux*
$ export PATH="$PATH:$TOOLS_PATH/tools/bin"

----------------------------------------

TITLE: Sorting Flutter Widgets Alphabetically in Liquid
DESCRIPTION: This snippet sorts the catalog of Flutter widgets alphabetically by name using Liquid templating.

LANGUAGE: liquid
CODE:
{% assign sorted = catalog.widgets | sort:'name' -%}

----------------------------------------

TITLE: New Scrollable AlertDialog Implementation in Dart
DESCRIPTION: Shows the updated implementation that wraps both title and content widgets in a SingleChildScrollView above the button bar for automatic scrolling.

LANGUAGE: dart
CODE:
Column(
  mainAxisSize: MainAxisSize.min,
  crossAxisAlignment: CrossAxisAlignment.stretch,
  children: <Widget>[
    if (title != null || content != null)
      SingleChildScrollView(
        child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.stretch,
         children: <Widget>[
           if (title != null)
             titleWidget,
             if (content != null)
             contentWidget,
         ],
       ),
     ),
   // ...
  ],
);

----------------------------------------

TITLE: Checking for Null or Zero in JavaScript
DESCRIPTION: Shows how JavaScript treats null and zero as false in conditional statements.

LANGUAGE: JavaScript
CODE:
// JavaScript
let myNull = null;
if (!myNull) {
  console.log('null is treated as false');
}
let zero = 0;
if (!zero) {
  console.log('0 is treated as false');
}

----------------------------------------

TITLE: Navigating to Android Directory in Console
DESCRIPTION: This command changes the current directory to the Android folder of the Flutter project, which is necessary for manual Gradle updates.

LANGUAGE: console
CODE:
$ cd android

----------------------------------------

TITLE: Rendering Dart Installation Admonition
DESCRIPTION: This snippet renders a separate Markdown file containing an admonition about installing Dart.

LANGUAGE: liquid
CODE:
{% render docs/install/admonitions/install-dart.md %}

----------------------------------------

TITLE: Implementing a Fade Animation in Flutter
DESCRIPTION: Demonstrates how to create a fade animation for a widget in Flutter.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const FadeAppTest());
}

class FadeAppTest extends StatelessWidget {
  const FadeAppTest({super.key});
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fade Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const MyFadeTest(title: 'Fade Demo'),
    );
  }
}

class MyFadeTest extends StatefulWidget {
  const MyFadeTest({super.key, required this.title});

  final String title;
  @override
  State<MyFadeTest> createState() => _MyFadeTest();
}

class _MyFadeTest extends State<MyFadeTest> with TickerProviderStateMixin {
  late AnimationController controller;
  late CurvedAnimation curve;

  @override
  void initState() {
    super.initState();
    controller = AnimationController(
      duration: const Duration(milliseconds: 2000),
      vsync: this,
    );
    curve = CurvedAnimation(parent: controller, curve: Curves.easeIn);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: Center(
        child: FadeTransition(
          opacity: curve,
          child: const FlutterLogo(size: 100),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        tooltip: 'Fade',
        onPressed: () {
          controller.forward();
        },
        child: const Icon(Icons.brush),
      ),
    );
  }
}

----------------------------------------

TITLE: Disabling Platform Support in Flutter
DESCRIPTION: Command to disable specific platform support in Flutter configuration using flutter config command

LANGUAGE: console
CODE:
$ flutter config --no-enable-ios

----------------------------------------

TITLE: Detailed Gradle Build Error Output
DESCRIPTION: This code block displays the full error message and stack trace when a Gradle build fails due to Java version incompatibility. It shows the specific error about unsupported class file major version 61.

LANGUAGE: sh
CODE:
FAILURE: Build failed with an exception.

* Where:
Build file '…/example/android/build.gradle'
* What went wrong:
Could not compile build file '…/example/android/build.gradle'.
> startup failed:
  General error during conversion: Unsupported class file major version 61

  java.lang.IllegalArgumentException: Unsupported class file major version 61
  	at groovyjarjarasm.asm.ClassReader.<init>(ClassReader.java:189)
  	at groovyjarjarasm.asm.ClassReader.<init>(ClassReader.java:170)
  	[…
  	 …
  	 … 209 more lines of Groovy and Gradle stack trace …
  	 …
  	 …]
  	at java.base/java.lang.Thread.run(Thread.java:833)

----------------------------------------

TITLE: Implementing Custom ScrollBehavior for MaterialApp in Flutter
DESCRIPTION: This snippet demonstrates how to create a custom ScrollBehavior and apply it to an entire MaterialApp.

LANGUAGE: dart
CODE:
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  // Override behavior methods like buildOverscrollIndicator and buildScrollbar
}

// ScrollBehavior can now be configured for an entire application.
MaterialApp(
  scrollBehavior: MyCustomScrollBehavior(),
  // ...
);

----------------------------------------

TITLE: HTTP Package Import
DESCRIPTION: Import statement for the HTTP package in Dart

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;

----------------------------------------

TITLE: Enabling Layout Guidelines in Flutter
DESCRIPTION: Demonstrates how to enable visual layout guidelines for debugging by setting debugPaintSizeEnabled

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void showLayoutGuidelines() {
  debugPaintSizeEnabled = true;
}

----------------------------------------

TITLE: Dart VM Service Output in Xcode
DESCRIPTION: Example console output showing the Dart VM service URI when running a Flutter app in Xcode.

LANGUAGE: console
CODE:
2023-07-12 14:55:39.966191-0500 Runner[58361:53017145]
    flutter: The Dart VM service is listening on
    http://127.0.0.1:50642/00wEOvfyff8=/

----------------------------------------

TITLE: Setting Default Font in MaterialApp
DESCRIPTION: Dart code showing how to set a default font for the entire Flutter application

LANGUAGE: dart
CODE:
return MaterialApp(
  title: 'Custom Fonts',
  // Set Raleway as the default app font.
  theme: ThemeData(fontFamily: 'Raleway'),
  home: const MyHomePage(),
);

----------------------------------------

TITLE: Setting Overlay Colors for TextButton States in Flutter
DESCRIPTION: Shows how to set different overlay colors for hovered, focused, and pressed states of a TextButton using MaterialStateProperty.resolveWith.

LANGUAGE: dart
CODE:
TextButton(
  style: ButtonStyle(
    foregroundColor: MaterialStateProperty.all<Color>(Colors.blue),
    overlayColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.hovered))
          return Colors.blue.withOpacity(0.04);
        if (states.contains(MaterialState.focused) ||
            states.contains(MaterialState.pressed))
          return Colors.blue.withOpacity(0.12);
        return null; // Defer to the widget's default.
      },
    ),
  ),
  onPressed: () { },
  child: Text('TextButton')
)

----------------------------------------

TITLE: Defining Entry Point in JavaScript
DESCRIPTION: Defines a function that can be used as an entry point in JavaScript.

LANGUAGE: JavaScript
CODE:
// JavaScript
function startHere() {
  // Can be used as entry point
}

----------------------------------------

TITLE: Setting Custom ScrollBehavior for Flutter Application
DESCRIPTION: Shows how to implement and apply a custom ScrollBehavior class at the application level using MaterialApp. This allows for custom configuration of which pointer devices can trigger scrolling.

LANGUAGE: dart
CODE:
MaterialApp(
  // ...
);

LANGUAGE: dart
CODE:
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  // Override behavior methods and getters like dragDevices
  @override
  Set<PointerDeviceKind> get dragDevices => { 
    PointerDeviceKind.touch,
    PointerDeviceKind.mouse,
    // etc.
  };
}

// Set ScrollBehavior for an entire application.
MaterialApp(
  scrollBehavior: MyCustomScrollBehavior(),
  // ...
);

----------------------------------------

TITLE: ExclusiveAppComponent Callback Method in Java
DESCRIPTION: The callback method that needs to be implemented when wrapping an activity with ExclusiveAppComponent. This method is called when the activity is being replaced by another activity attaching to the FlutterEngine.

LANGUAGE: java
CODE:
void detachFromFlutterEngine();

----------------------------------------

TITLE: Flutter Home Page
DESCRIPTION: Shows implementation of a basic home page widget with text display

LANGUAGE: dart
CODE:
class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return const Scaffold(body: Center(child: Text('Hello, World!')));
  }
}

----------------------------------------

TITLE: Installing Linux Development Packages via apt-get
DESCRIPTION: Command to install required development packages including clang compiler, cmake build system, ninja build tool, pkg-config, GTK3 development libraries, and C++ standard library development files using apt package manager.

LANGUAGE: console
CODE:
$ sudo apt-get install \
         clang cmake git \
         ninja-build pkg-config \
         libgtk-3-dev liblzma-dev \
         libstdc++-12-dev

----------------------------------------

TITLE: Providing Firestore Instance to Flutter App
DESCRIPTION: Using Provider to make the Firestore instance available throughout the app.

LANGUAGE: dart
CODE:
runApp(Provider.value(value: FirebaseFirestore.instance, child: MyApp()));

----------------------------------------

TITLE: Avoiding Memory Leaks with BuildContext in Flutter
DESCRIPTION: These examples demonstrate how to properly handle BuildContext to avoid memory leaks in Flutter. The first snippet shows a leak-prone approach, while the second shows the correct way to use BuildContext in closures.

LANGUAGE: dart
CODE:
// BAD: DO NOT DO THIS
// This code is leak prone:
@override
Widget build(BuildContext context) {
  final handler = () => apply(Theme.of(context));
  useHandler(handler);
…

LANGUAGE: dart
CODE:
// GOOD
@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  final handler = () => apply(theme);
  useHandler(handler);
…

----------------------------------------

TITLE: Avoiding Memory Leaks with BuildContext in Flutter
DESCRIPTION: These examples demonstrate how to properly handle BuildContext to avoid memory leaks in Flutter. The first snippet shows a leak-prone approach, while the second shows the correct way to use BuildContext in closures.

LANGUAGE: dart
CODE:
// BAD: DO NOT DO THIS
// This code is leak prone:
@override
Widget build(BuildContext context) {
  final handler = () => apply(Theme.of(context));
  useHandler(handler);
…

LANGUAGE: dart
CODE:
// GOOD
@override
Widget build(BuildContext context) {
  final theme = Theme.of(context);
  final handler = () => apply(theme);
  useHandler(handler);
…

----------------------------------------

TITLE: Configuring ThemeData with AccentColor (Pre-Migration)
DESCRIPTION: Example of setting the accentColor in ThemeData before the deprecation.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(accentColor: myColor),
  // ...
);

----------------------------------------

TITLE: Symbol Export Declaration in C/C++/Objective-C
DESCRIPTION: Code to mark symbols as visible to Dart and prevent linker optimization in C/C++/Objective-C.

LANGUAGE: objc
CODE:
extern "C" __attribute__((visibility("default"))) __attribute__((used))

----------------------------------------

TITLE: Implementing HighlightTextEditingController Before Change
DESCRIPTION: Example of implementing a custom TextEditingController to highlight text with a specific color before the BuildContext parameter was added.

LANGUAGE: dart
CODE:
class HighlightTextEditingController extends TextEditingController {
  HighlightTextEditingController(this.highlightColor);

  final Color highlightColor;

  @override
  TextSpan buildTextSpan({TextStyle? style, required bool withComposing}) {
    return super.buildTextSpan(style: TextStyle(color: highlightColor), withComposing: withComposing);
  }


----------------------------------------

TITLE: Creating First and Second Routes in Flutter (Material Design)
DESCRIPTION: Defines two StatelessWidget classes, FirstRoute and SecondRoute, each representing a screen in the app. Both routes contain a button for navigation.

LANGUAGE: dart
CODE:
class FirstRoute extends StatelessWidget {
  const FirstRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Route')),
      body: Center(
        child: ElevatedButton(
          child: const Text('Open route'),
          onPressed: () {
            // Navigate to second route when tapped.
          },
        ),
      ),
    );
  }
}

class SecondRoute extends StatelessWidget {
  const SecondRoute({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Second Route')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate back to first route when tapped.
          },
          child: const Text('Go back!'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Setting Custom ScrollBehavior for Specific Widget
DESCRIPTION: Example demonstrating how to apply custom scroll behavior to a specific ListView widget using ScrollConfiguration

LANGUAGE: dart
CODE:
class MyCustomScrollBehavior extends MaterialScrollBehavior {
  // Override behavior methods and getters like multitouchDragStrategy
  @override
  MultitouchDragStrategy getMultitouchDragStrategy(BuildContext context) => MultitouchDragStrategy.sumAllPointers;
}

// ScrollBehavior can be set for a specific widget.
final ScrollController controller = ScrollController();
ScrollConfiguration(
  behavior: MyCustomScrollBehavior(),
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    },
  ),
);

----------------------------------------

TITLE: Demonstrating Object Reachability and Retaining Paths in Dart
DESCRIPTION: This snippet illustrates the concepts of root objects, reachability, and retaining paths in Dart memory management. It shows how objects become unreachable and eligible for garbage collection.

LANGUAGE: dart
CODE:
class Child{}

class Parent {
  Child? child;
}

Parent parent1 = Parent();

void myFunction() {

  Child? child = Child();

  // The `child` object was allocated in memory.
  // It's now retained from garbage collection
  // by one retaining path (root …-> myFunction -> child).

  Parent? parent2 = Parent()..child = child;
  parent1.child = child;

  // At this point the `child` object has three retaining paths:
  // root …-> myFunction -> child
  // root …-> myFunction -> parent2 -> child
  // root -> parent1 -> child

  child = null;
  parent1.child = null;
  parent2 = null;

  // At this point, the `child` instance is unreachable
  // and will eventually be garbage collected.

  …
}

----------------------------------------

TITLE: Demonstrating Object Reachability and Retaining Paths in Dart
DESCRIPTION: This snippet illustrates the concepts of root objects, reachability, and retaining paths in Dart memory management. It shows how objects become unreachable and eligible for garbage collection.

LANGUAGE: dart
CODE:
class Child{}

class Parent {
  Child? child;
}

Parent parent1 = Parent();

void myFunction() {

  Child? child = Child();

  // The `child` object was allocated in memory.
  // It's now retained from garbage collection
  // by one retaining path (root …-> myFunction -> child).

  Parent? parent2 = Parent()..child = child;
  parent1.child = child;

  // At this point the `child` object has three retaining paths:
  // root …-> myFunction -> child
  // root …-> myFunction -> parent2 -> child
  // root -> parent1 -> child

  child = null;
  parent1.child = null;
  parent2 = null;

  // At this point, the `child` instance is unreachable
  // and will eventually be garbage collected.

  …
}

----------------------------------------

TITLE: Building macOS Application Status
DESCRIPTION: Console output showing the build process status for macOS application.

LANGUAGE: console
CODE:
Building macOS application...

----------------------------------------

TITLE: Accessing Frame Timing Information in Flutter
DESCRIPTION: This code reference points to the FrameTiming class in Flutter's API, which provides detailed timing information for frame rendering, including build duration, raster duration, and total span.

LANGUAGE: dart
CODE:
FrameTiming

----------------------------------------

TITLE: Migrating RaisedButton with Custom Elevations to ElevatedButton in Flutter
DESCRIPTION: Shows how to migrate a RaisedButton with custom elevations for different states to the new ElevatedButton using styleFrom().

LANGUAGE: dart
CODE:
RaisedButton(
  elevation: 2,
  focusElevation: 4,
  hoverElevation: 4,
  highlightElevation: 8,
  disabledElevation: 0,
  onPressed: () { },
  child: Text('RaisedButton with custom elevations'),
)

ElevatedButton(
  style: ElevatedButton.styleFrom(elevation: 2),
  onPressed: () { },
  child: Text('ElevatedButton with custom elevations'),
)

----------------------------------------

TITLE: Updating AndroidManifest.xml for Custom App Names
DESCRIPTION: XML configuration in AndroidManifest to use the flavor-specific app names.

LANGUAGE: xml
CODE:
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="@string/app_name"
        ...
    />
/>

----------------------------------------

TITLE: Implementing Empty showAutocorrectionPromptRect Method in Dart
DESCRIPTION: For applications that don't target iOS or don't support autocorrect, an empty implementation of the new method can be added to the TextInputClient interface.

LANGUAGE: dart
CODE:
class CustomTextInputClient implements TextInputClient {
  void showAutocorrectionPromptRect(int start, int end) {}
}

----------------------------------------

TITLE: Extended Device Timeout Configuration
DESCRIPTION: Command to extend the device timeout when running Flutter applications

LANGUAGE: console
CODE:
flutter run --device-timeout 60

----------------------------------------

TITLE: Including Release Notes Content with Jekyll
DESCRIPTION: Jekyll include directive to import release notes content from an external markdown file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.15.0-src.md %}

----------------------------------------

TITLE: Implementing Basic Enum in Dart
DESCRIPTION: Example showing a basic color enumeration before modification.

LANGUAGE: dart
CODE:
enum Color { red, green, blue }

----------------------------------------

TITLE: Custom ImageCache Implementation Example
DESCRIPTION: Example showing how to implement a custom ImageCache with the required containsKey override after migration.

LANGUAGE: dart
CODE:
class MyImageCache implements ImageCache {
  @override
  bool containsKey(Object key) {
    // Check if your custom cache is tracking this key.
  }

  ...
}

----------------------------------------

TITLE: Implementing Flutter Bindings After Migration
DESCRIPTION: Example showing the updated way to define custom bindings with SchedulerBinding before ServicesBinding after the dependency reversal.

LANGUAGE: dart
CODE:
class FooBinding extends BindingBase with SchedulerBinding, ServicesBinding {
 // ...
}

----------------------------------------

TITLE: Flutter ThemeData Configuration After Migration
DESCRIPTION: Example of how text selection properties should be configured using TextSelectionTheme after the migration.

LANGUAGE: dart
CODE:
ThemeData(
  textSelectionTheme: TextSelectionThemeData(
    cursorColor: Colors.red,
    selectionColor: Colors.green,
    selectionHandleColor: Colors.blue,
  )
)

----------------------------------------

TITLE: Running iOS/macOS XCTest via Command Line
DESCRIPTION: Command to run XCTest unit tests for iOS or macOS platforms using xcodebuild in the respective example directory.

LANGUAGE: sh
CODE:
xcodebuild test -workspace Runner.xcworkspace -scheme Runner -configuration Debug

----------------------------------------

TITLE: iOS Flutter Build Output
DESCRIPTION: Example output from building an iOS Flutter app in the terminal. It shows a warning about disabled codesigning and indicates the build process for the specified app.

LANGUAGE: console
CODE:
Warning: Building for device with codesigning disabled. You will have to manually codesign before deploying to device.
Building com.example.myApp for device (ios)...

----------------------------------------

TITLE: Running Flutter App with Flavor
DESCRIPTION: Command to run a Flutter app with a specific flavor using the Flutter CLI.

LANGUAGE: console
CODE:
$ flutter run --flavor staging

----------------------------------------

TITLE: Removing button:true from Semantics Widget in InputChip
DESCRIPTION: This snippet shows how to remove the button:true property from the Semantics widget wrapping the label of an InputChip while retaining other semantic properties after the changes in Flutter.

LANGUAGE: dart
CODE:
Widget myInputChip = InputChip(
  onPressed: () {},
  label: Semantics(
    hint: 'Example Hint',
    child: Text('My Input Chip'),
  ),
);

----------------------------------------

TITLE: Creating New Flutter Project
DESCRIPTION: Command to create a new Flutter project named 'flavors_example' using Flutter CLI.

LANGUAGE: console
CODE:
$ flutter create flavors_example

----------------------------------------

TITLE: Demonstrating Code Migration for Breaking Change in Flutter
DESCRIPTION: This snippet shows example code before and after a hypothetical breaking change in Flutter. It's intended to illustrate how developers should present code samples in their migration guides.

LANGUAGE: dart
CODE:
// Example of code before the change.

LANGUAGE: dart
CODE:
// Example of code after the change.

----------------------------------------

TITLE: Removing ThemeData.primaryColorBrightness in Dart
DESCRIPTION: ThemeData.primaryColorBrightness was deprecated in v2.6 and has been removed. Brightness is now extrapolated from ThemeData.primaryColor if ThemeData.brightness is not explicitly provided.

LANGUAGE: dart
CODE:
var themeData = ThemeData(
  primaryColorBrightness: Brightness.dark,
);

LANGUAGE: dart
CODE:
var themeData = ThemeData(
);

----------------------------------------

TITLE: Building a Stateful Text Widget
DESCRIPTION: Demonstrates how to create a stateful widget that updates text on button press

LANGUAGE: dart
CODE:
class SampleApp extends StatelessWidget {
  const SampleApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Sample App', home: SampleAppPage());
  }
}

class SampleAppPage extends StatefulWidget {
  const SampleAppPage({super.key});

  @override
  State<SampleAppPage> createState() => _SampleAppPageState();
}

class _SampleAppPageState extends State<SampleAppPage> {
  String textToShow = 'I Like Flutter';

  void _updateText() {
    setState(() {
      textToShow = 'Flutter is Awesome!';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Sample App')),
      body: Center(child: Text(textToShow)),
      floatingActionButton: FloatingActionButton(
        onPressed: _updateText,
        tooltip: 'Update Text',
        child: const Icon(Icons.update),
      ),
    );
  }
}

----------------------------------------

TITLE: Signing Xcode License Agreement via Terminal
DESCRIPTION: Command to sign the Xcode license agreement through terminal

LANGUAGE: console
CODE:
sudo xcodebuild -license

----------------------------------------

TITLE: Including Release Notes Template in Markdown
DESCRIPTION: Jekyll/Liquid template include statement to embed release notes content from an external markdown file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.11.2-src.md %}

----------------------------------------

TITLE: Flutter Attach Console Output
DESCRIPTION: Example output when Flutter debugger successfully attaches to a device, showing available debug commands and Observatory debugger URL.

LANGUAGE: console
CODE:
Syncing files to device iPhone 15 Pro...
 7,738ms (!)

To hot reload the changes while running, press "r".
To hot restart (and rebuild state). press "R".
An Observatory debugger and profiler on iPhone 15 Pro is available at:
http://127.0.0.1:65525/EXmCgco5zjo=/
For a more detailed help message, press "h".
To detach, press "d"; to quit, press "q".

----------------------------------------

TITLE: Demonstrating Pre-Migration Usage of TestWidgetsFlutterBinding.clock in Dart
DESCRIPTION: Example of how TestWidgetsFlutterBinding.clock was used before the migration, potentially causing type mismatch errors after the update.

LANGUAGE: dart
CODE:
testWidgets('some test', (WidgetTester tester) {
  someApiThatWantsAQuiverClock(tester.binding.clock);
});

----------------------------------------

TITLE: Font Directory Structure Example
DESCRIPTION: Example of the expected folder structure for font files

LANGUAGE: plaintext
CODE:
custom_fonts/
|- fonts/
  |- Raleway-Regular.ttf
  |- Raleway-Italic.ttf
  |- RobotoMono-Regular.ttf
  |- RobotoMono-Bold.ttf

----------------------------------------

TITLE: Overriding TextEditingController.buildTextSpan After Migration
DESCRIPTION: Updated example of overriding buildTextSpan method after the migration, including the new BuildContext parameter.

LANGUAGE: dart
CODE:
class MyTextEditingController {
  @override
  TextSpan buildTextSpan({required BuildContext context, TextStyle? style, required bool withComposing}) {
    /* ... */
  }
}

----------------------------------------

TITLE: Migrating Navigation Components in Flutter Material 3
DESCRIPTION: Examples showing how to migrate from BottomNavigationBar to NavigationBar and from Drawer to NavigationDrawer in Material 3.

LANGUAGE: dart
CODE:
NavigationBar(
  destinations: const <Widget>[
    NavigationDestination(
      icon: Icon(Icons.home),
      label: 'Home',
    ),
    NavigationDestination(
      icon: Icon(Icons.business),
      label: 'Business',
    ),
    NavigationDestination(
      icon: Icon(Icons.school),
      label: 'School',
    ),
  ],
),

----------------------------------------

TITLE: Post-Migration ThemeData Configuration in Flutter
DESCRIPTION: Updated implementation showing how to configure colors for toggleable widgets using SwitchThemeData, RadioThemeData, and CheckboxThemeData with MaterialStateProperty

LANGUAGE: dart
CODE:
final ThemeData theme = ThemeData();
MaterialApp(
  theme: theme.copyWith(
    switchTheme: SwitchThemeData(
      thumbColor: MaterialStateProperty.resolveWith<Color?>(
          (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled)) {
          return null;
        }
        if (states.contains(MaterialState.selected)) {
          return myColor;
        }
        return null;
      }),
      trackColor: MaterialStateProperty.resolveWith<Color?>(
          (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled)) {
          return null;
        }
        if (states.contains(MaterialState.selected)) {
          return myColor;
        }
        return null;
      }),
    ),
    radioTheme: RadioThemeData(
      fillColor: MaterialStateProperty.resolveWith<Color?>(
          (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled)) {
          return null;
        }
        if (states.contains(MaterialState.selected)) {
          return myColor;
        }
        return null;
      }),
    ),
    checkboxTheme: CheckboxThemeData(
      fillColor: MaterialStateProperty.resolveWith<Color?>(
          (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled)) {
          return null;
        }
        if (states.contains(MaterialState.selected)) {
          return myColor;
        }
        return null;
      }),
    ),
  ),
  //...
)

----------------------------------------

TITLE: Finding Specific Widget Instance in Flutter Tests
DESCRIPTION: Illustrates how to locate a specific widget instance in the widget tree. This is particularly useful when testing widgets with child properties and verifying the correct rendering of child widgets.

LANGUAGE: dart
CODE:
testWidgets('finds a specific instance', (tester) async {
  const childWidget = Padding(padding: EdgeInsets.zero);

  // Provide the childWidget to the Container.
  await tester.pumpWidget(Container(child: childWidget));

  // Search for the childWidget in the tree and verify it exists.
  expect(find.byWidget(childWidget), findsOneWidget);
});

----------------------------------------

TITLE: Category Widget Grid Template
DESCRIPTION: Liquid template that generates a responsive card grid layout for Flutter widgets. Handles category descriptions, widget filtering, and displays components with images/vectors, titles and descriptions. Includes support for subcategories and fallback placeholder images.

LANGUAGE: liquid
CODE:
{% assign category = catalog.index | find: "name", categoryName %}

{{category.description}}

{% assign components = catalog.widgets | widget_filter: "categories", categoryName %}
{% if components.size != 0 -%}
<div class="card-grid">
{% for comp in components -%}
  <a class="card outlined-card" href="{{comp.link}}">
    <div class="card-image-holder">
      {% if comp.vector -%}
        {{comp.vector}}
      {% elsif comp.image -%}
        <img alt="Image/visualization of the {{comp.name}} widget." src="{{comp.image.src}}">
      {% else -%}
        <img alt="Flutter logo for widget missing visualization image." src="/assets/images/docs/catalog-widget-placeholder.png" aria-hidden="true">
      {% endif -%}
    </div>
    <div class="card-header">
      <header class="card-title">{{comp.name}}</header>
    </div>
    <div class="card-content">
      <p>{{ comp.description | truncatewords: 25 }}</p>
    </div>
  </a>
{% endfor -%}
</div>
{% endif -%}

{% if category.subcategories and category.subcategories.size != 0 -%}
{% for sub in category.subcategories -%}
  {% assign components = catalog.widgets | widget_filter: "subcategories", sub.name %}
  {% if components.size != 0 -%}
  
  ## {{sub.name}}

  <div class="card-grid">
    {% for comp in components -%}
      <a class="card outlined-card" href="{{comp.link}}">
        <div class="card-image-holder">
          {% if comp.vector -%}
            {{comp.vector}}
          {% elsif comp.image -%}
            <img alt="Rendered image or visualization of the {{comp.name}} widget." src="{{comp.image.src}}">
          {% else -%}
            <img alt="Placeholder Flutter logo in place of missing widget image or visualization." src="/assets/images/docs/catalog-widget-placeholder.png" aria-hidden="true">
          {% endif -%}
        </div>
        <div class="card-header">
          <header class="card-title">{{comp.name}}</header>
        </div>
        <div class="card-content">
          <p>{{ comp.description | truncatewords: 25 }}</p>
        </div>
      </a>
    {% endfor -%}
  </div>
  {% endif -%}
{% endfor -%}
{% endif %}

----------------------------------------

TITLE: Fetching Code Signing Files from App Store Connect
DESCRIPTION: Use the Codemagic CLI tools to fetch code signing files from App Store Connect. This command creates or uses an existing certificate based on the provided private key.

LANGUAGE: bash
CODE:
app-store-connect fetch-signing-files $(xcode-project detect-bundle-id) \
    --platform IOS \
    --type IOS_APP_STORE \
    --certificate-key=@file:/path/to/cert_key \
    --create

----------------------------------------

TITLE: Overriding Localizations After Migration in Dart
DESCRIPTION: Example of overriding MaterialLocalizations and WidgetsLocalizations with custom translations after the migration.

LANGUAGE: dart
CODE:
class MaterialLocalizationsMyLanguage extends MaterialLocalizationsEn {
  // ...
}

class WidgetsLocalizationsMyLanguage extends WidgetsLocalizationsEn {
  // ...
  @override
  String get reorderItemRight => 'my translation';
}

----------------------------------------

TITLE: Importing YouTube API Package in Dart
DESCRIPTION: Import statement for accessing the YouTube API functionality through the googleapis package.

LANGUAGE: dart
CODE:
/// Provides the `YouTubeApi` class.
import 'package:googleapis/youtube/v3.dart';

----------------------------------------

TITLE: AndroidViewController ID Migration - Dart
DESCRIPTION: Migration guide for replacing deprecated id property with viewId in AndroidViewController and related classes. Affects SurfaceAndroidViewController and TextureAndroidViewController.

LANGUAGE: dart
CODE:
final SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(
  viewId: 10,
  viewType: 'FixTester',
  layoutDirection: TextDirection.ltr,
);
int viewId = surfaceController.id;
final SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(
  error: '',
);
final TextureAndroidViewController textureController = TextureAndroidViewController(
  error: '',
);
final TextureAndroidViewController textureController = TextureAndroidViewController(
  viewId: 10,
  viewType: 'FixTester',
  layoutDirection: TextDirection.ltr,
);
viewId = textureController.id;

LANGUAGE: dart
CODE:
final SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(
  viewId: 10,
  viewType: 'FixTester',
  layoutDirection: TextDirection.ltr,
);
int viewId = surfaceController.viewId;
final SurfaceAndroidViewController surfaceController = SurfaceAndroidViewController(
  error: '',
);
final TextureAndroidViewController textureController = TextureAndroidViewController(
  error: '',
);
final TextureAndroidViewController textureController = TextureAndroidViewController(
  viewId: 10,
  viewType: 'FixTester',
  layoutDirection: TextDirection.ltr,
);
viewId = textureController.viewId;

----------------------------------------

TITLE: Accepting Android Licenses
DESCRIPTION: Command to run Flutter doctor for accepting Android licenses.

LANGUAGE: console
CODE:
$ flutter doctor --android-licenses

----------------------------------------

TITLE: Flutter Embed Script Configuration in Bash
DESCRIPTION: XCode build phase script for embedding Flutter app and engine in App Clip bundle

LANGUAGE: bash
CODE:
/bin/sh "$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh" embed_and_thin

----------------------------------------

TITLE: Rendering Flutter Scrolling Widgets Catalog Page in Markdown
DESCRIPTION: This snippet uses a custom rendering system to generate a catalog page for Flutter's scrolling widgets. It passes the category name 'Scrolling' and a catalog object to a template called 'docs/catalog-page.md'.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Scrolling", catalog:catalog %}

----------------------------------------

TITLE: Removing Unnecessary Non-null Assertion in Flutter
DESCRIPTION: Example demonstrating the removal of unnecessary non-null assertion operator when using the new non-nullable 'of' method.

LANGUAGE: dart
CODE:
ScrollController controller = Scrollable.of(context);

----------------------------------------

TITLE: Semantics Tree Structure After Tooltip Change in Dart
DESCRIPTION: This code snippet demonstrates the updated structure of the semantics tree generated by the Tooltip widget after the accessibility traversal order change. It shows the new position of the tooltip message as a child of the Tooltip's child node.

LANGUAGE: dart
CODE:
SemanticsNode#0
 │
 └─SemanticsNode#1
   │
   └─SemanticsNode#5
     │ flags: hasImplicitScrolling
     │ scrollChildren: 3
     │
     ├─SemanticsNode#2
     │   tags: RenderViewport.twoPane
     │   label: "before"
     │   textDirection: ltr
     │
     ├─SemanticsNode#3
     │ │ tags: RenderViewport.twoPane
     │ │ label: "child"
     │ │ tooltip: "message"
     │ │ textDirection: ltr
     │ │
     │ └─SemanticsNode#6
     │     label: "message"
     │     textDirection: ltr
     │
     └─SemanticsNode#4
         tags: RenderViewport.twoPane
         label: "after"
         textDirection: ltr

----------------------------------------

TITLE: Setting Flutter PATH in Shell
DESCRIPTION: Dynamic command template for adding Flutter to PATH environment variable in various shell configurations.

LANGUAGE: console
CODE:
$ {{shell.set-path}}

----------------------------------------

TITLE: YAML Front Matter for Flutter Packages Documentation
DESCRIPTION: YAML configuration block that defines the page layout and metadata for Flutter packages and plugins documentation. Specifies that the page should use a table of contents layout and sets the title and description.

LANGUAGE: yaml
CODE:
---
layout: toc
title: Packages & plugins
description: >
  Content covering using and developing packages and plugins for Flutter apps.
---

----------------------------------------

TITLE: Setting AdMob App ID in iOS Info.plist
DESCRIPTION: Shows how to add the AdMob App ID to the iOS Info.plist file. This is necessary for the AdMob SDK to work properly on iOS devices.

LANGUAGE: xml
CODE:
<key>GADApplicationIdentifier</key>
<string>ca-app-pub-################~##########</string>

----------------------------------------

TITLE: Building and Publishing iOS App with Codemagic CLI Tools
DESCRIPTION: A series of commands using Codemagic CLI tools to build the Flutter iOS project and publish it to App Store Connect.

LANGUAGE: bash
CODE:
flutter packages pub get
find . -name "Podfile" -execdir pod install \;
flutter build ipa --release \
    --export-options-plist=$HOME/export_options.plist
app-store-connect publish \
    --path $(find $(pwd) -name "*.ipa")

----------------------------------------

TITLE: Implementing CupertinoTabBar with Localizations Widget in Flutter
DESCRIPTION: This code snippet demonstrates how to implement CupertinoTabBar by using the Localizations widget to provide the necessary localizations.

LANGUAGE: dart
CODE:
import 'package:flutter/cupertino.dart';

void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Localizations(
      locale: const Locale('en', 'US'),
      delegates: <LocalizationsDelegate<dynamic>>[
        DefaultWidgetsLocalizations.delegate,
        DefaultCupertinoLocalizations.delegate,
      ],
      child: MediaQuery(
        data: const MediaQueryData(),
        child: CupertinoTabBar(
          items: const <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(CupertinoIcons.add_circled),
              label: 'Tab 1',
            ),
            BottomNavigationBarItem(
              icon: Icon(CupertinoIcons.add_circled_solid),
              label: 'Tab 2',
            ),
          ],
          currentIndex: 1,
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Checking Flutter Version
DESCRIPTION: Command to verify the installed Flutter version

LANGUAGE: console
CODE:
flutter --version

----------------------------------------

TITLE: Legacy Windows Build Path Example
DESCRIPTION: Shows the previous build path structure before architecture-specific directories were introduced.

LANGUAGE: plaintext
CODE:
build\windows\runner\Release\hello_world.exe

----------------------------------------

TITLE: Updated Image Asset Path in Flutter
DESCRIPTION: Remove leading slashes from image asset paths when using Image.asset().

LANGUAGE: dart
CODE:
new Image.asset('foo/bar.png')

----------------------------------------

TITLE: Creating a StatelessWidget Text Example
DESCRIPTION: Shows how to create a simple text widget using Flutter's StatelessWidget

LANGUAGE: dart
CODE:
Text(
  'I like Flutter!',
  style: TextStyle(fontWeight: FontWeight.bold),
);

----------------------------------------

TITLE: Installing Android SDK Packages
DESCRIPTION: Command to install necessary Android SDK packages including build tools, emulator, platform tools, and system images using sdkmanager.

LANGUAGE: console
CODE:
$ sdkmanager "build-tools;28.0.3" "emulator" "tools" "platform-tools" "platforms;android-28" "extras;google;google_play_services" "extras;google;webdriver" "system-images;android-28;google_apis_playstore;x86_64"

----------------------------------------

TITLE: Initializing Full Page Flutter Web Application
DESCRIPTION: Basic HTML setup for loading Flutter in full page mode using flutter_bootstrap.js

LANGUAGE: html
CODE:
<!DOCTYPE html>
<html>
  <head>
  </head>
  <body>
    <script src="flutter_bootstrap.js" defer></script>
  </body>
</html>

----------------------------------------

TITLE: Returning to Previous Screen in Flutter Named Route Navigation
DESCRIPTION: Uses Navigator.pop() to navigate back to the previous screen in the navigation stack.

LANGUAGE: dart
CODE:
// Within the SecondScreen widget
onPressed: () {
  // Navigate back to the first screen by popping the current route
  // off the stack.
  Navigator.pop(context);
}

----------------------------------------

TITLE: Migrating Chip useDeleteButtonTooltip to deleteButtonTooltipMessage in Dart
DESCRIPTION: Updates Chip, InputChip, and RawChip classes to use the new deleteButtonTooltipMessage property instead of the deprecated useDeleteButtonTooltip.

LANGUAGE: dart
CODE:
Chip(deleteButtonTooltipMessage: '');
InputChip();
RawChip rawChip = RawChip();
rawChip.deleteButtonTooltipMessage;

----------------------------------------

TITLE: Rendering Flutter Painting and Effects Catalog Page in Markdown
DESCRIPTION: This snippet uses a custom rendering instruction to generate a catalog page for Flutter's painting and effect widgets. It likely pulls in content from another file or data source to populate the catalog.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Painting and effects", catalog:catalog %}

----------------------------------------

TITLE: Displaying Multiple ScrollViews Before Migration in Flutter
DESCRIPTION: This code snippet shows how multiple side-by-side ListViews would throw errors due to conflicts with the PrimaryScrollController before the change.

LANGUAGE: dart
CODE:
Scaffold(
  body: LayoutBuilder(
    builder: (context, constraints) {
      return Row(
        children: [
          SizedBox(
            height: constraints.maxHeight,
            width: constraints.maxWidth / 2,
            child: ListView.builder(
              itemBuilder: (BuildContext context, int index) {
                return Text('List 1 - Item $index');
              }
            ),
          ),
          SizedBox(
            height: constraints.maxHeight,
            width: constraints.maxWidth / 2,
            child: ListView.builder(
              itemBuilder: (BuildContext context, int index) {
                return Text('List 2 - Item $index');
              }
            ),
          ),
        ]
      );
    },
  ),
);

----------------------------------------

TITLE: Configuring MaterialApp for Localization
DESCRIPTION: Set up localizationsDelegates and supportedLocales for MaterialApp to enable localization.

LANGUAGE: dart
CODE:
return const MaterialApp(
  title: 'Localizations Sample App',
  localizationsDelegates: [
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
  ],
  supportedLocales: [
    Locale('en'), // English
    Locale('es'), // Spanish
  ],
  home: MyHomePage(),
);

----------------------------------------

TITLE: Using styleFrom() to Configure TextButton in Flutter
DESCRIPTION: Shows how to use the styleFrom() utility method to create a ButtonStyle with custom foreground color for a TextButton.

LANGUAGE: dart
CODE:
TextButton(
  style: TextButton.styleFrom(
    foregroundColor: Colors.blue,
  ),
  onPressed: () { },
  child: Text('TextButton'),
)

----------------------------------------

TITLE: Creating a Function to Print Latest TextField Value in Flutter
DESCRIPTION: This snippet defines a function that prints the current value and length of a TextField using a TextEditingController.

LANGUAGE: dart
CODE:
void _printLatestValue() {
  final text = myController.text;
  print('Second text field: $text (${text.characters.length})');
}

----------------------------------------

TITLE: Initializing VideoPlayerController in Flutter
DESCRIPTION: Creates and initializes a VideoPlayerController to manage video playback from a network URL.

LANGUAGE: dart
CODE:
class _VideoPlayerScreenState extends State<VideoPlayerScreen> {
  late VideoPlayerController _controller;
  late Future<void> _initializeVideoPlayerFuture;

  @override
  void initState() {
    super.initState();

    // Create and store the VideoPlayerController. The VideoPlayerController
    // offers several different constructors to play videos from assets, files,
    // or the internet.
    _controller = VideoPlayerController.networkUrl(
      Uri.parse(
        'https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4',
      ),
    );

    _initializeVideoPlayerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    // Ensure disposing of the VideoPlayerController to free up resources.
    _controller.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Complete the code in the next step.
    return Container();
  }
}

----------------------------------------

TITLE: Extracting Flutter SDK on Linux
DESCRIPTION: Command to extract the Flutter SDK archive using tar command on Linux systems to the development directory.

LANGUAGE: console
CODE:
$ tar -xf ~/Downloads/flutter_sdk_v1.0.0.zip -C ~/development/

----------------------------------------

TITLE: Migrating MethodChannel Mock Handlers
DESCRIPTION: Code example showing how to migrate MethodChannel mock handler implementation using TestDefaultBinaryMessenger.

LANGUAGE: dart
CODE:
// old code
myMethodChannel.setMockMethodCallHandler(...);
myMethodChannel.checkMockMethodCallHandler(...);
// new code
tester.binding.defaultBinaryMessenger.setMockMethodCallHandler(myMethodChannel, ...);
tester.binding.defaultBinaryMessenger.checkMockMessageHandler(myMethodChannel, ...);

----------------------------------------

TITLE: Updating PaintingBinding.instantiateImageCodec to instantiateImageCodecFromBuffer in Dart
DESCRIPTION: Replaces the deprecated PaintingBinding.instantiateImageCodec method with the new instantiateImageCodecFromBuffer method for faster image loading performance.

LANGUAGE: dart
CODE:
PaintingBinding.instance.instantiateImageCodecFromBuffer

----------------------------------------

TITLE: Plugin Platform Support Configuration
DESCRIPTION: YAML configuration for specifying supported platforms in a Flutter plugin

LANGUAGE: yaml
CODE:
flutter:
  plugin:
    platforms:
      android:
        package: com.example.hello
        pluginClass: HelloPlugin
      ios:
        pluginClass: HelloPlugin

----------------------------------------

TITLE: Flutter Build Output for Android App Bundle
DESCRIPTION: This console output shows the result of running the Flutter build command for an Android app bundle. It indicates the time taken for the Gradle task and the location of the generated AAB file.

LANGUAGE: console
CODE:
Running Gradle task 'bundleDebug'...                               27.1s
✓ Built build/app/outputs/bundle/debug/app-debug.aab.

----------------------------------------

TITLE: Adding Flutter Plugin Dependencies
DESCRIPTION: Example of adding a Flutter plugin to a project by running the flutter pub add command and importing it in Dart code.

LANGUAGE: shell
CODE:
flutter pub add package_name

LANGUAGE: dart
CODE:
import 'package:package_name/package_name.dart';

----------------------------------------

TITLE: Platform-Adaptive Text Field Styling
DESCRIPTION: Code sample showing how to style TextField widgets differently on iOS vs Android by customizing borders, colors and padding to match platform conventions.

LANGUAGE: dart
CODE:
Widget _createAdaptiveTextField() {
  final _border = OutlineInputBorder(
    borderSide: BorderSide(color: CupertinoColors.lightBackgroundGray),
  );

  final iOSDecoration = InputDecoration(
    border: _border,
    enabledBorder: _border,
    focusedBorder: _border,
    filled: true,
    fillColor: CupertinoColors.white,
    hoverColor: CupertinoColors.white,
    contentPadding: EdgeInsets.fromLTRB(10, 0, 0, 0),
  );

  return Platform.isIOS
      ? SizedBox(
          height: 36.0,
          child: TextField(
            decoration: iOSDecoration,
          ),
        )
      : TextField();
}

----------------------------------------

TITLE: Migrating Stack Widget Clipping Behavior in Flutter
DESCRIPTION: This snippet demonstrates how to migrate a Stack widget from using the deprecated 'overflow' property to the new 'clipBehavior' property. It shows the code before and after migration, replacing 'overflow: Overflow.visible' with 'clipBehavior: Clip.none'.

LANGUAGE: dart
CODE:
    await tester.pumpWidget(
      Directionality(
        textDirection: TextDirection.ltr,
        child: Center(
          child: Stack(
            overflow: Overflow.visible,
            children: const <Widget>[
              SizedBox(
                width: 100,
                height: 100,
              ),
            ],
          ),
        ),
      ),
    );

LANGUAGE: dart
CODE:
    await tester.pumpWidget(
      Directionality(
        textDirection: TextDirection.ltr,
        child: Center(
          child: Stack(
            clipBehavior: Clip.none,
            children: const <Widget>[
              SizedBox(
                width: 100.0,
                height: 100.0,
              ),
            ],
          ),
        ),
      ),
    );

----------------------------------------

TITLE: Migrating FlatButton with Custom Overlay Colors to TextButton in Flutter
DESCRIPTION: Demonstrates how to migrate a FlatButton with custom focus, hover, and splash colors to the new TextButton using MaterialStateProperty.

LANGUAGE: dart
CODE:
FlatButton(
  focusColor: Colors.red,
  hoverColor: Colors.green,
  splashColor: Colors.blue,
  onPressed: () { },
  child: Text('FlatButton with custom overlay colors'),
)

TextButton(
  style: ButtonStyle(
    overlayColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.focused))
          return Colors.red;
        if (states.contains(MaterialState.hovered))
            return Colors.green;
        if (states.contains(MaterialState.pressed))
            return Colors.blue;
        return null; // Defer to the widget's default.
    }),
  ),
  onPressed: () { },
  child: Text('TextButton with custom overlay colors'),
)

----------------------------------------

TITLE: Implementing New Material 3 Components in Flutter
DESCRIPTION: Examples demonstrating implementation of new Material 3 components like SliverAppBar.medium and TabBar with new alignment options.

LANGUAGE: dart
CODE:
CustomScrollView(
  slivers: <Widget>[
    const SliverAppBar.medium(
      title: Text('Title'),
    ),
    SliverToBoxAdapter(
      child: Card(
        child: SizedBox(
          height: 1200,
          child: Padding(
            padding: const EdgeInsets.fromLTRB(8, 100, 8, 100),
            child: Text(
              'Here be scrolling content...',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
          ),
        ),
      ),
    ),
  ],
),

----------------------------------------

TITLE: Creating Database Table
DESCRIPTION: Define and create the dogs table with appropriate columns and data types.

LANGUAGE: dart
CODE:
final database = openDatabase(
  join(await getDatabasesPath(), 'doggie_database.db'),
  onCreate: (db, version) {
    return db.execute(
      'CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER)',
    );
  },
  version: 1,
);

----------------------------------------

TITLE: Testing app links using ADB
DESCRIPTION: ADB command to test the app link setup by simulating an intent to open the app.

LANGUAGE: console
CODE:
adb shell 'am start -a android.intent.action.VIEW \
    -c android.intent.category.BROWSABLE \
    -d "http://<web-domain>/details"' \
    <package name>

----------------------------------------

TITLE: Running Flutter Doctor Check on Windows
DESCRIPTION: This command checks the environment and displays a report of the Flutter installation status, highlighting any missing dependencies or additional setup tasks required.

LANGUAGE: batchfile
CODE:
C:\src\flutter>flutter doctor

----------------------------------------

TITLE: Scrolling with integration_test
DESCRIPTION: Example showing scrolling functionality using integration_test's scrollUntilVisible method.

LANGUAGE: dart
CODE:
testWidgets('scroll, tap on the last item (Zedoary), verify selected', (
  tester,
) async {
  await tester.pumpWidget(const PlantsApp());

  // wait for data to load
  await tester.pumpAndSettle();

  // find the item by text
  final item = find.text('Zedoary');

  // finds Scrollable widget and scrolls until item is visible
  // a 100,000 pixels is enough to reach the bottom of the list
  await tester.scrollUntilVisible(item, 100000);

  // assert item is found
  expect(item, findsOneWidget);

  // Emulate a tap on the tile item.
  await tester.tap(item);
  await tester.pumpAndSettle();

  // Wait for species name to be displayed
  expect(find.text('Curcuma zedoaria'), findsOneWidget);

  // 'please select' text should not be displayed
  expect(find.text('Please select a plant from the list.'), findsNothing);
});

----------------------------------------

TITLE: Migrating androidOverscrollIndicator to useMaterial3 in Dart
DESCRIPTION: Updates the ScrollBehavior, MaterialScrollBehavior, and ThemeData to use the useMaterial3 flag instead of the deprecated androidOverscrollIndicator.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: Theme.light().copyWith(
    // defaults to true and stretching indicator,
    // false results in glowing indicator
    useMaterial3: false,
  ),
  //...
);

----------------------------------------

TITLE: Migrating OutlineButton with State-Dependent Border Color to OutlinedButton in Flutter
DESCRIPTION: Demonstrates how to migrate an OutlineButton with a state-dependent border color to the new OutlinedButton using MaterialStateProperty.

LANGUAGE: dart
CODE:
OutlineButton(
  shape: StadiumBorder(),
  highlightedBorderColor: Colors.blue,
  borderSide: BorderSide(
    width: 2,
    color: Colors.red
  ),
  onPressed: () { },
  child: Text('OutlineButton with custom shape and border'),
)

OutlinedButton(
  style: ButtonStyle(
    shape: MaterialStateProperty.all<OutlinedBorder>(StadiumBorder()),
    side: MaterialStateProperty.resolveWith<BorderSide>(
      (Set<MaterialState> states) {
        final Color color = states.contains(MaterialState.pressed)
          ? Colors.blue
          : Colors.red;
        return BorderSide(color: color, width: 2);
      }
    ),
  ),
  onPressed: () { },
  child: Text('OutlinedButton with custom shape and border'),
)

----------------------------------------

TITLE: Providing Scroll Context to BubblePainter in Flutter
DESCRIPTION: This code snippet shows how to provide the necessary context and scrolling information to the BubblePainter. It includes references to the ScrollableState and the BuildContext of the bubble.

LANGUAGE: dart
CODE:
BubblePainter(
  colors: colors,
  bubbleContext: context,
  scrollable: ScrollableState(),
),

----------------------------------------

TITLE: Flutter SDK Components List
DESCRIPTION: Markdown list detailing the key components and tools available in the Flutter SDK, including the Dart SDK, rendering engine, framework, widgets, testing tools, and command-line utilities.

LANGUAGE: markdown
CODE:
* [Dart SDK][]
* Heavily optimized, mobile-first 2D rendering engine with
  excellent support for text
* Modern react-style framework
* Rich set of widgets implementing Material Design and iOS styles
* APIs for unit and integration tests
* Interop and plugin APIs to connect to the system and 3rd-party SDKs
* Headless test runner for running tests on Windows, Linux, and Mac
* [Flutter DevTools][] for testing, debugging, and profiling your app
* `flutter` and `dart` command-line tools for creating, building, testing,
  and compiling your apps

----------------------------------------

TITLE: Generating Platform Selection Cards with Liquid and HTML
DESCRIPTION: This snippet creates a card grid for selecting the initial target platform for Flutter development on macOS. It uses Liquid templating to dynamically generate cards for iOS, Android, Web, and Desktop options, with iOS being recommended.

LANGUAGE: liquid
CODE:
<div class="card-grid narrow">
{% for target in target-list %}
  {% case target %}
  {% when "iOS", "Android" %}
  {% assign targetlink = target | downcase | prepend: 'mobile-' %}
  {% else %}
  {% assign targetlink = target | downcase %}
  {% endcase %}

  <a class="card outlined-card install-card card-macos" id="install-{{os | downcase}}" href="/get-started/install/{{os | downcase}}/{{targetlink}}" aria-label="macOS setup instructions for first deploying to {{target}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% case icon %}
      {% when 'desktop' -%}
        <span class="material-symbols" aria-hidden="true">laptop_mac</span>
      {% when 'ios' -%}
        <span class="material-symbols" aria-hidden="true">phone_iphone</span>
      {% when 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% when 'web' -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endcase -%}
    </div>
    <div class="card-header text-center">
      <span class="card-title">{{target}}</span>
      {% if icon == 'ios' -%}
        <span class="card-subtitle">Recommended</span>
      {% endif -%}
    </div>
  </a>

{% endfor %}
</div>

----------------------------------------

TITLE: Adding Play Core Dependency in Android Gradle
DESCRIPTION: Add the Play Core dependency to the Android app's build.gradle file for deferred component support.

LANGUAGE: groovy
CODE:
dependencies {
  ...
  implementation "com.google.android.play:core:1.8.0"
  ...
}

----------------------------------------

TITLE: Importing HTTP Package in Dart
DESCRIPTION: Imports the http package to enable making HTTP requests in a Dart application.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;

----------------------------------------

TITLE: Allowing Arbitrary Loads for iOS Debug Builds in Flutter
DESCRIPTION: This XML snippet demonstrates how to allow arbitrary loads (including HTTP connections) for iOS debug builds in a Flutter application by modifying the Info-debug.plist file.

LANGUAGE: xml
CODE:
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>

----------------------------------------

TITLE: Implementing Selectable Text in Flutter
DESCRIPTION: Shows how to implement selectable text functionality using SelectableText widget, with examples for both simple and rich text.

LANGUAGE: dart
CODE:
return const SelectableText('Select me!');

LANGUAGE: dart
CODE:
return const SelectableText.rich(
  TextSpan(
    children: [
      TextSpan(text: 'Hello'),
      TextSpan(text: 'Bold', style: TextStyle(fontWeight: FontWeight.bold)),
    ],
  ),
);

----------------------------------------

TITLE: Basic Container Color Usage in Flutter
DESCRIPTION: Simple example showing how to create a Container with a background color in Flutter.

LANGUAGE: dart
CODE:
return Container(color: Colors.red);

----------------------------------------

TITLE: Closing a Drawer Programmatically in Flutter
DESCRIPTION: This snippet demonstrates how to close a drawer programmatically after a user taps an item, using Navigator.pop(context).

LANGUAGE: dart
CODE:
ListTile(
  title: const Text('Item 1'),
  onTap: () {
    // Update the state of the app
    // ...
    // Then close the drawer
    Navigator.pop(context);
  },
),

----------------------------------------

TITLE: ModalRoute Pop Entry Registration
DESCRIPTION: Example of registering and unregistering PopScope widgets with ModalRoute for back navigation control.

LANGUAGE: dart
CODE:
@override
void didChangeDependencies() {
  super.didChangeDependencies();
  final ModalRoute<dynamic>? nextRoute = ModalRoute.of(context);
  if (nextRoute != _route) {
    _route?.unregisterPopEntry(this);
    _route = nextRoute;
    _route?.registerPopEntry(this);
  }
}

----------------------------------------

TITLE: Setting AdMob App ID in Android Manifest
DESCRIPTION: Demonstrates how to add the AdMob App ID to the Android manifest file. This is required for the AdMob SDK to function correctly on Android devices.

LANGUAGE: xml
CODE:
<manifest>
    <application>
        ...

        <!-- Sample AdMob app ID: ca-app-pub-3940256099942544~3347511713 -->
        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy"/>
    </application>
</manifest>

----------------------------------------

TITLE: Adding go_router package to Flutter project
DESCRIPTION: Command to add the go_router package as a dependency to the Flutter project.

LANGUAGE: console
CODE:
$ flutter pub add go_router

----------------------------------------

TITLE: Running Flutter Doctor for Android Licenses in Console
DESCRIPTION: This command enables signing of Android SDK licenses. It should be run in an elevated console window after installing all prerequisites for Flutter development.

LANGUAGE: console
CODE:
{{prompt}} flutter doctor --android-licenses

----------------------------------------

TITLE: Backward-Compatible Raw Image Parsing in Flutter
DESCRIPTION: Implementation that works with both pre-patch and post-patch Flutter versions, detecting the correct behavior at runtime.

LANGUAGE: dart
CODE:
Uint8List verticallyFlipImage(Uint8List sourceBytes, int width, int height) {
  // Same as the example above.
}

late Future<bool> imageRawUsesCorrectBehavior = (() async {
  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(
    await ui.ImmutableBuffer.fromUint8List(Uint8List.fromList(<int>[0xED, 0, 0, 0xFF])),
    width: 1, height: 1, pixelFormat: ui.PixelFormat.rgba8888);
  final ui.Image image = (await (await descriptor.instantiateCodec()).getNextFrame()).image;
  final Uint8List resultPixels = Uint8List.sublistView(
    (await image.toByteData(format: ui.ImageByteFormat.rawStraightRgba))!);
  return resultPixels[0] == 0xED;
})();

Future<ui.Image> parseMyImage(Uint8List image, int width, int height) async {
  final Uint8List correctedImage = (await imageRawUsesCorrectBehavior) ?
    verticallyFlipImage(image, width, height) : image;
  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(
    await ui.ImmutableBuffer.fromUint8List(correctedImage), // Use the corrected image
    width: width,
    height: height,
    pixelFormat: ui.PixelFormat.bgra8888, // Use the alternate format
  );
  return (await (await descriptor.instantiateCodec()).getNextFrame()).image;
}

----------------------------------------

TITLE: Removing PlatformsViewsService.synchronizeToNativeViewHierarchy call in Dart
DESCRIPTION: Removes the deprecated call to PlatformsViewsService.synchronizeToNativeViewHierarchy, which is no longer required for performance improvements.

LANGUAGE: dart
CODE:


----------------------------------------

TITLE: Configuring Environment Variables for Flutter Mirror (Windows)
DESCRIPTION: Sets environment variables for PUB_HOSTED_URL and FLUTTER_STORAGE_BASE_URL to use a Flutter mirror site in China on Windows. This example uses the CFUG mirror.

LANGUAGE: shell
CODE:
$env:PUB_HOSTED_URL="{{mirror.urls.pubhosted}}";
$env:FLUTTER_STORAGE_BASE_URL="{{mirror.urls.flutterstorage}}"

----------------------------------------

TITLE: Platform Selection Cards using Liquid Templates and HTML
DESCRIPTION: Generates a responsive card grid interface allowing users to choose between Android and Web platforms for Flutter development on ChromeOS. Uses Liquid templating for dynamic content and Material Design icons for platform identification.

LANGUAGE: html
CODE:
<div class="card-grid narrow">
{% for target in target-list %}
  <a class="card outlined-card install-card card-chromeos" id="install-{{os | remove: ' ' | downcase}}" href="/get-started/install/{{os | remove: ' ' | downcase}}/{{target | downcase}}" aria-label="ChromeOS setup instructions for first deploying to {{target}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% if icon == 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% else -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endif -%}
    </div>
    <div class="card-header text-center">
      <span class="card-title">{{target}}</span>
      {% if icon == 'android' -%}
        <span class="card-subtitle">Recommended</span>
      {% endif -%}
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Removing Flutter Configuration Files
DESCRIPTION: Command to remove Flutter configuration directories and files from the user's home directory.

LANGUAGE: console
CODE:
C:\> Remove-Item -Recurse -Force -Path $env:APPDATA\.flutter-devtools

----------------------------------------

TITLE: Chaining Multiple Asset Transformers
DESCRIPTION: Demonstrates how to chain multiple asset transformers in sequence using pubspec.yaml configuration.

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - path: assets/bird.png
      transformers:
        - package: grayscale_filter
        - package: png_optimizer

----------------------------------------

TITLE: Updating Android Build Gradle File
DESCRIPTION: Updated content for android/build.gradle file after removing the buildscript block.

LANGUAGE: groovy
CODE:
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

----------------------------------------

TITLE: Setting up FlutterInjector for Android JUnit Tests in Java
DESCRIPTION: This code snippet demonstrates how to set up FlutterInjector with a mocked FlutterJNI for testing Flutter's Android engine embedding without loading the native library. It replaces the deprecated FlutterMain.setIsRunningInRobolectricTest(true) API.

LANGUAGE: java
CODE:
FlutterJNI mockFlutterJNI = mock(FlutterJNI.class);
FlutterInjector.setInstance(
        new FlutterInjector.Builder()
            .setFlutterLoader(new FlutterLoader(mockFlutterJNI))
            .build());

----------------------------------------

TITLE: Configuring Advanced Locale Support
DESCRIPTION: Define more specific locale variants for languages like Chinese using Locale.fromSubtags.

LANGUAGE: dart
CODE:
supportedLocales: [
  Locale.fromSubtags(languageCode: 'zh'), // generic Chinese 'zh'
  Locale.fromSubtags(
    languageCode: 'zh',
    scriptCode: 'Hans',
  ), // generic simplified Chinese 'zh_Hans'
  Locale.fromSubtags(
    languageCode: 'zh',
    scriptCode: 'Hant',
  ), // generic traditional Chinese 'zh_Hant'
  Locale.fromSubtags(
    languageCode: 'zh',
    scriptCode: 'Hans',
    countryCode: 'CN',
  ), // 'zh_Hans_CN'
  Locale.fromSubtags(
    languageCode: 'zh',
    scriptCode: 'Hant',
    countryCode: 'TW',
  ), // 'zh_Hant_TW'
  Locale.fromSubtags(
    languageCode: 'zh',
    scriptCode: 'Hant',
    countryCode: 'HK',
  ), // 'zh_Hant_HK'
],

----------------------------------------

TITLE: Configuring Centralized Repository Settings in Gradle
DESCRIPTION: This Groovy code snippet shows how to set up centralized repository declarations in settings.gradle for Flutter integration, as recommended for Gradle 7 and above.

LANGUAGE: groovy
CODE:
dependencyResolutionManagement {
   repositoriesMode = RepositoriesMode.PREFER_SETTINGS
   repositories {
       google()
       mavenCentral()
   }
}

----------------------------------------

TITLE: Importing http Package in Dart
DESCRIPTION: Import the http package in your Dart file to use its functionality for making network requests.

LANGUAGE: dart
CODE:
import 'package:http/http.dart' as http;

----------------------------------------

TITLE: Installing Java Dependencies
DESCRIPTION: Commands to install Java Runtime Environment (JRE) and Java Development Kit (JDK) using apt package manager.

LANGUAGE: console
CODE:
$ sudo apt update
$ sudo apt install default-jre
$ sudo apt install default-jdk

----------------------------------------

TITLE: Configuring Android Launch Theme Style
DESCRIPTION: Example of how to properly configure the Android launch theme style resources to display a custom splash screen using the windowBackground attribute.

LANGUAGE: xml
CODE:
<resources>
    <style
        name="SomeTheme"
        // ...
        >
        <!-- Show a splash screen on the activity. Automatically removed when
             Flutter draws its first frame -->
        <item name="android:windowBackground">@drawable/some_splash_screen</item>
    </style>
</resources>

----------------------------------------

TITLE: New attachToActivity Method Signature in Java
DESCRIPTION: The new method signature for attachToActivity, which now takes an ExclusiveAppComponent<Activity> instead of an Activity. This change enforces exclusion between activities connecting to the FlutterEngine.

LANGUAGE: java
CODE:
void attachToActivity(
    @NonNull ExclusiveAppComponent<Activity> exclusiveActivity,
    @NonNull Lifecycle lifecycle);

----------------------------------------

TITLE: Configuring AndroidX in Flutter Module
DESCRIPTION: YAML configuration to enable AndroidX in a Flutter module project that's being added to an existing Android app.

LANGUAGE: yaml
CODE:
 module:
   ...
    androidX: true # Add this line.

----------------------------------------

TITLE: Implementing MainAppViewModel in Flutter
DESCRIPTION: This snippet shows the MainAppViewModel class, which listens to changes in the ThemeRepository and exposes the dark mode setting to the MaterialApp widget.

LANGUAGE: dart
CODE:
class MainAppViewModel extends ChangeNotifier {
  MainAppViewModel(this._themeRepository) {
    _subscription = _themeRepository.observeDarkMode().listen((isDarkMode) {
      _isDarkMode = isDarkMode;
      notifyListeners();
    });
    _load();
  }

  final ThemeRepository _themeRepository;
  StreamSubscription<bool>? _subscription;

  bool _isDarkMode = false;

  bool get isDarkMode => _isDarkMode;

  Future<void> _load() async {
    try {
      final result = await _themeRepository.isDarkMode();
      if (result is Ok<bool>) {
        _isDarkMode = result.value;
      }
    } on Exception catch (_) {
      // handle error
    } finally {
      notifyListeners();
    }
  }

  @override
  void dispose() {
    _subscription?.cancel();
    super.dispose();
  }
}

----------------------------------------

TITLE: Applying Project-wide Flutter Fixes Using Dart CLI
DESCRIPTION: Command to automatically apply all available Flutter Fix changes across an entire project. Uses the --apply flag to implement the changes.

LANGUAGE: console
CODE:
$ dart fix --apply

----------------------------------------

TITLE: Flutter SDK Installation Options in Liquid
DESCRIPTION: This snippet creates a tabbed interface using Liquid templating to present two installation options for the Flutter SDK: using VS Code or manual download and installation.

LANGUAGE: liquid
CODE:
{% tabs "vs-code-or-download" %}
{% tab "Use VS Code to install" %}

{% include docs/install/flutter/vscode.md os=include.os terminal=include.terminal target=v-target %}

{% endtab %}
{% tab "Download and install" %}

{% include docs/install/flutter/download.md os=include.os terminal=include.terminal target=v-target %}

{% endtab %}
{% endtabs %}

----------------------------------------

TITLE: Page Frontmatter in Markdown
DESCRIPTION: YAML frontmatter section defining the page title and description for a Flutter documentation page about image handling.

LANGUAGE: markdown
CODE:
---
title: Images
description: A catalog of recipes for handling images in your Flutter app.
---

----------------------------------------

TITLE: Importing Flutter Localizations Library
DESCRIPTION: Import the flutter_localizations library in your Dart file.

LANGUAGE: dart
CODE:
import 'package:flutter_localizations/flutter_localizations.dart';

----------------------------------------

TITLE: Removing MouseTracker Annotation Methods in Dart
DESCRIPTION: This snippet shows the removal of three methods from the MouseTracker class: attachAnnotation, detachAnnotation, and isAnnotationAttached. These methods are no longer needed as MouseTracker no longer tracks all annotations on the screen.

LANGUAGE: dart
CODE:
class MouseTracker extends ChangeNotifier {
    // ...
-   void attachAnnotation(MouseTrackerAnnotation annotation) {/* ... */}

-   void detachAnnotation(MouseTrackerAnnotation annotation) {/* ... */}

-   @visibleForTesting
-   bool isAnnotationAttached(MouseTrackerAnnotation annotation) {/* ... */}
  }

----------------------------------------

TITLE: Binding Instance Disambiguation Helper
DESCRIPTION: Helper method to handle migration of binding instance properties from nullable to non-nullable in Flutter 3. This allows code to support both pre-3.0 and 3.0+ versions.

LANGUAGE: dart
CODE:
/// This allows a value of type T or T?
/// to be treated as a value of type T?.
///
/// We use this so that APIs that have become
/// non-nullable can still be used with `!` and `?`
/// to support older versions of the API as well.
T? _ambiguate<T>(T? value) => value;

----------------------------------------

TITLE: Using describeEnum and EnumProperty before migration in Dart
DESCRIPTION: Example of how describeEnum and EnumProperty were used before the migration. It shows the usage of describeEnum to get the string value of an enum and EnumProperty with a non-Enum type.

LANGUAGE: dart
CODE:
enum MyEnum { paper, rock }

print(describeEnum(MyEnum.paper)); // output: paper

// TextInputType is not an Enum
properties.add(EnumProperty<TextInputType>( ... ));

----------------------------------------

TITLE: Migrating RaisedButton with Custom Disabled Colors to ElevatedButton using MaterialStateProperty in Flutter
DESCRIPTION: Demonstrates how to migrate a RaisedButton with custom disabled colors to the new ElevatedButton using MaterialStateProperty for full control over disabled colors.

LANGUAGE: dart
CODE:
RaisedButton(
  disabledColor: Colors.red,
  disabledTextColor: Colors.blue,
  onPressed: null,
  child: Text('RaisedButton with custom disabled colors'),
)

ElevatedButton(
  style: ButtonStyle(
    backgroundColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled))
          return Colors.red;
        return null; // Defer to the widget's default.
    }),
    foregroundColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled))
          return Colors.blue;
        return null; // Defer to the widget's default.
    }),
  ),
  onPressed: null,
  child: Text('ElevatedButton with custom disabled colors'),
)

----------------------------------------

TITLE: Migrating RaisedButton with Custom Disabled Colors to ElevatedButton using MaterialStateProperty in Flutter
DESCRIPTION: Demonstrates how to migrate a RaisedButton with custom disabled colors to the new ElevatedButton using MaterialStateProperty for full control over disabled colors.

LANGUAGE: dart
CODE:
RaisedButton(
  disabledColor: Colors.red,
  disabledTextColor: Colors.blue,
  onPressed: null,
  child: Text('RaisedButton with custom disabled colors'),
)

ElevatedButton(
  style: ButtonStyle(
    backgroundColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled))
          return Colors.red;
        return null; // Defer to the widget's default.
    }),
    foregroundColor: MaterialStateProperty.resolveWith<Color?>(
      (Set<MaterialState> states) {
        if (states.contains(MaterialState.disabled))
          return Colors.blue;
        return null; // Defer to the widget's default.
    }),
  ),
  onPressed: null,
  child: Text('ElevatedButton with custom disabled colors'),
)

----------------------------------------

TITLE: Migrating CheckboxThemeData FillColor - Before
DESCRIPTION: Example of CheckboxThemeData implementation before the fillColor behavior change.

LANGUAGE: dart
CODE:
checkboxTheme: CheckboxThemeData(
  fillColor: MaterialStateProperty.resolveWith((states) {
    if (!states.contains(MaterialState.selected)) {
      return Colors.red;
    }
    return null;
  }),
),

----------------------------------------

TITLE: Embedding Flutter via iframe
DESCRIPTION: Simple iframe implementation for embedding Flutter web application

LANGUAGE: html
CODE:
<iframe src="https://url-to-your-flutter/index.html"></iframe>

----------------------------------------

TITLE: Creating a Video Wrapper with Custom Liquid Tags in HTML
DESCRIPTION: This snippet illustrates how to create a video wrapper using custom Liquid tags in HTML. It embeds a YouTube video with a specific title and description.

LANGUAGE: html
CODE:
{% videoWrapper 'Only have 60 seconds? Learn how to build and deploy a Flutter App!' %}
{% ytEmbed 'ZnufaryH43s', 'How to build and deploy a Flutter app in 60 seconds!' %}
{% endvideoWrapper %}

----------------------------------------

TITLE: Initializing Flutter SDK in VS Code Output Panel
DESCRIPTION: Displays the console output shown in VS Code's Output panel during the initialization of the Flutter SDK. It includes running pub upgrade, resolving dependencies, and downloading various tools and assets.

LANGUAGE: console
CODE:
Building flutter tool...
Running pub upgrade...
Resolving dependencies...
Got dependencies.
Downloading Material fonts...
Downloading Gradle Wrapper...
Downloading package sky_engine...
Downloading flutter_patched_sdk tools...
Downloading flutter_patched_sdk_product tools...
Downloading windows-x64 tools...
Downloading windows-x64/font-subset tools...

----------------------------------------

TITLE: TabBar Implementation Before Migration
DESCRIPTION: Example of TabBar implementation before the introduction of tabAlignment property, showing the default scrollable TabBar configuration.

LANGUAGE: dart
CODE:
TabBar(
  isScrollable: true,
  tabs: List<Tab>.generate(
    count,
    (int index) => Tab(text: 'Tab $index'),
  ).toList(),
);

----------------------------------------

TITLE: Migrating Surface Creation in Android Flutter Plugins
DESCRIPTION: Demonstrates how to migrate from manually creating a Surface with SurfaceTexture to using the getSurface() method from SurfaceProducer.

LANGUAGE: java
CODE:
- Surface surface = new Surface(entry.surfaceTexture());
+ Surface surface = producer.getSurface();

----------------------------------------

TITLE: Using Deferred Import and Loading in Dart
DESCRIPTION: Import a deferred library and use FutureBuilder to load and display the deferred widget.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';
import 'box.dart' deferred as box;

class SomeWidget extends StatefulWidget {
  const SomeWidget({super.key});

  @override
  State<SomeWidget> createState() => _SomeWidgetState();
}

class _SomeWidgetState extends State<SomeWidget> {
  late Future<void> _libraryFuture;

  @override
  void initState() {
    super.initState();
    _libraryFuture = box.loadLibrary();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<void>(
      future: _libraryFuture,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          if (snapshot.hasError) {
            return Text('Error: ${snapshot.error}');
          }
          return box.DeferredBox();
        }
        return const CircularProgressIndicator();
      },
    );
  }
}

----------------------------------------

TITLE: Book Details Template with Liquid
DESCRIPTION: Creates detailed book entries with cover images, titles, authors, and descriptions using Liquid templating and HTML structure

LANGUAGE: liquid
CODE:
{% for book in books %}
<div class="book-img-with-details">
<a href="{{book.link}}" title="{{book.title}}">
  <img src="/assets/images/docs/cover/{{book.cover}}" alt="{{book.title}}">
</a>
<div class="details">

<h3 class="title" id="{{book.title}} | slugify">
<a href="{{book.link}}">{{book.title}}</a>
</h3>

by {{book.authors | array_to_sentence_string}}
{:.authors}

{{book.desc}}
</div>
</div>
{% endfor -%}

----------------------------------------

TITLE: Disabling Swift Package Manager in pubspec.yaml
DESCRIPTION: Configuration to disable Swift Package Manager for a specific Flutter project by adding a setting to the pubspec.yaml file.

LANGUAGE: yaml
CODE:
# The following section is specific to Flutter packages.
flutter:
  disable-swift-package-manager: true

----------------------------------------

TITLE: Semantics Tree Structure Before Tooltip Change in Dart
DESCRIPTION: This code snippet shows the structure of the semantics tree generated by the Tooltip widget before the accessibility traversal order change. It illustrates the position of the tooltip message in the tree.

LANGUAGE: dart
CODE:
SemanticsNode#0
 │
 ├─SemanticsNode#1
 │ │
 │ └─SemanticsNode#5
 │   │ flags: hasImplicitScrolling
 │   │ scrollChildren: 3
 │   │
 │   ├─SemanticsNode#2
 │   │   tags: RenderViewport.twoPane
 │   │   label: "before"
 │   │   textDirection: ltr
 │   │
 │   ├─SemanticsNode#3
 │   │   tags: RenderViewport.twoPane
 │   │   label: "child"
 │   │   tooltip: "message"
 │   │   textDirection: ltr
 │   │
 │   └─SemanticsNode#4
 │       tags: RenderViewport.twoPane
 │       label: "after"
 │       textDirection: ltr
 │
 └─SemanticsNode#6
     label: "message"
     textDirection: ltr

----------------------------------------

TITLE: Fallback Implementation for Impossible Dry Layout Calculations
DESCRIPTION: Implementation for cases where dry layout cannot be computed, such as when size depends on baseline metrics.

LANGUAGE: dart
CODE:
  @override
  Size computeDryLayout(BoxConstraints constraints) {
    assert(debugCannotComputeDryLayout(
      reason: 'Layout requires baseline metrics, which are only available after a full layout.'
    ));
    return const Size(0, 0);
  }

----------------------------------------

TITLE: Demonstrating CupertinoTabBar Assertion Error in Flutter
DESCRIPTION: This code snippet shows the assertion error that occurs when a CupertinoTabBar is instantiated without proper localizations.

LANGUAGE: plaintext
CODE:
CupertinoTabBar requires a Localizations parent in order to provide an appropriate Semantics hint
for tab indexing. A CupertinoApp provides the DefaultCupertinoLocalizations, or you can
instantiate your own Localizations.
'package:flutter/src/cupertino/bottom_tab_bar.dart':
Failed assertion: line 213 pos 7: 'localizations != null'

----------------------------------------

TITLE: Customizing Context Menu Button Visibility
DESCRIPTION: Example demonstrating how to selectively show or hide specific context menu buttons using contextMenuBuilder.

LANGUAGE: dart
CODE:
TextField(
  contextMenuBuilder: (context, editableTextState) {
    final List<ContextMenuButtonItem> buttonItems =
        editableTextState.contextMenuButtonItems;
    buttonItems.removeWhere((ContextMenuButtonItem buttonItem) {
      return buttonItem.type == ContextMenuButtonType.cut;
    });
    return AdaptiveTextSelectionToolbar.buttonItems(
      anchors: editableTextState.contextMenuAnchors,
      buttonItems: buttonItems,
    );
  },
)

----------------------------------------

TITLE: Implementing ProcessExternalWindowMessage in WndProc for Flutter Windows App
DESCRIPTION: This code snippet demonstrates how to modify a WndProc function to invoke FlutterEngine::ProcessExternalWindowMessage. It checks the returned result and handles it appropriately, allowing the original WndProc contents to execute if the message is not consumed.

LANGUAGE: cpp
CODE:
LRESULT Window::Messagehandler(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam) {
    std::optional<LRESULT> result = flutter_controller_->engine()->ProcessExternalWindowMessage(hwnd, msg, wparam, lparam);
    if (result.has_value()) {
        return *result;
    }
    // Original contents of WndProc...
}

----------------------------------------

TITLE: Checking Flutter Build Options for Obfuscation Support
DESCRIPTION: This command displays the available options for a specific build target, including obfuscation-related flags.

LANGUAGE: console
CODE:
$ flutter build <build-target> -h

----------------------------------------

TITLE: Example Project Structure for Flutter-iOS Integration
DESCRIPTION: Demonstrates the expected directory structure when integrating Flutter into an existing iOS app. It shows the relative positions of the Flutter module and the iOS app directories.

LANGUAGE: plaintext
CODE:
/path/to/MyApp
├── my_flutter/
│   └── .ios/
│       └── Flutter/
│         └── podhelper.rb
└── MyApp/
    └── Podfile

----------------------------------------

TITLE: Basic TextInputClient Implementation
DESCRIPTION: Simple implementation for cases where multi-field autofill support is not needed, returning null for the currentAutofillScope getter.

LANGUAGE: dart
CODE:
class CustomTextField implements TextInputClient {
  // Not having an AutofillScope does not prevent the input field
  // from being autofilled. However, only this input field is
  // autofilled when autofill is triggered on it.
  AutofillScope get currentAutofillScope => null;
}

----------------------------------------

TITLE: Migrating Surface Texture Creation in Android Flutter Plugins
DESCRIPTION: Shows how to migrate from the older createSurfaceTexture API to the new createSurfaceProducer API for texture registry entries.

LANGUAGE: java
CODE:
- TextureRegistry.SurfaceTextureEntry entry = textureRegistry.createSurfaceTexture();
+ TextureRegistry.SurfaceProducer producer = textureRegistry.createSurfaceProducer();

----------------------------------------

TITLE: ImageFilter.blur Implementation After Migration
DESCRIPTION: Updated implementation of ImageFilter.blur that relies on automatic tile mode selection based on context, removing the explicit tileMode parameter.

LANGUAGE: dart
CODE:
final filter = ui.ImageFilter.blur(sigmaX: 4, sigmaY: 4);

----------------------------------------

TITLE: Configuring VS Code Launch Profile Mode
DESCRIPTION: JSON configuration to enable profile mode in VS Code for Flutter performance debugging

LANGUAGE: json
CODE:
"configurations": [
  {
    "name": "Flutter",
    "request": "launch",
    "type": "dart",
    "flutterMode": "profile"
  }
]

----------------------------------------

TITLE: Launching DevTools from Command Line
DESCRIPTION: This snippet shows the output when launching DevTools from the command line using 'dart devtools'. It displays the URL where DevTools is being served.

LANGUAGE: plaintext
CODE:
Serving DevTools at http://127.0.0.1:9100

----------------------------------------

TITLE: Inline Flutter Bootstrap Script HTML
DESCRIPTION: Demonstrates how to inline the Flutter bootstrap JavaScript directly in the HTML using a template token.

LANGUAGE: html
CODE:
<html>
  <body>
    <script>
      {{flutter_bootstrap_js}}
    </script>
  </body>
</html>

----------------------------------------

TITLE: Enabling Swift Package Manager via Flutter CLI
DESCRIPTION: Commands to upgrade Flutter SDK and enable Swift Package Manager support globally.

LANGUAGE: sh
CODE:
flutter upgrade

LANGUAGE: sh
CODE:
flutter config --enable-swift-package-manager

----------------------------------------

TITLE: Platform View Registration with Dimensions
DESCRIPTION: Example of registering a platform view with proper dimension settings to prevent warnings.

LANGUAGE: dart
CODE:
ui.platformViewRegistry.registerViewFactory(viewType, (int viewId) {
  final html.Element htmlElement = html.DivElement()
    // ..other props
    ..style.width = '100%'
    ..style.height = '100%';
  // ...
  return htmlElement;
});

----------------------------------------

TITLE: Implementing CupertinoTabBar Without Localizations in Flutter
DESCRIPTION: This code snippet demonstrates the incorrect implementation of CupertinoTabBar without proper localizations, which leads to an assertion error.

LANGUAGE: dart
CODE:
import 'package:flutter/cupertino.dart';

void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MediaQuery(
      data: const MediaQueryData(),
      child: CupertinoTabBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(CupertinoIcons.add_circled),
            label: 'Tab 1',
          ),
          BottomNavigationBarItem(
            icon: Icon(CupertinoIcons.add_circled_solid),
            label: 'Tab 2',
          ),
        ],
        currentIndex: 1,
      ),
    );
  }
}

----------------------------------------

TITLE: Creating RouteInformation with URI in Dart
DESCRIPTION: Demonstrates how to create a RouteInformation object using a URI instead of a location string. This change allows for handling mobile deeplinks from different web domains.

LANGUAGE: dart
CODE:
final RouteInformation myRoute = RouteInformation(uri: Uri.parse('/myroute'));

----------------------------------------

TITLE: Disabling Nonlinear Text Scaling in Dart
DESCRIPTION: Shows how to temporarily opt-out of nonlinear text scaling on Android 14 by modifying the MediaQuery at the top of the app's widget tree.

LANGUAGE: dart
CODE:
runApp(
  Builder(builder: (context) {
    final mediaQueryData = MediaQuery.of(context);
    final mediaQueryDataWithLinearTextScaling = mediaQueryData
      .copyWith(textScaler: TextScaler.linear(mediaQueryData.textScaler.textScaleFactor));
    return MediaQuery(data: mediaQueryDataWithLinearTextScaling, child: realWidgetTree);
  }),
);

----------------------------------------

TITLE: Flutter App Version Configuration
DESCRIPTION: YAML configuration for setting the version number of a Flutter Windows desktop application in pubspec.yaml file. The version consists of a build name (three dot-separated numbers) and an optional build number.

LANGUAGE: yaml
CODE:
version: 1.0.0+1

----------------------------------------

TITLE: Using Navigator with onDidRemovePage in Flutter (Post-migration)
DESCRIPTION: This code snippet shows how to use the Navigator widget with the new onDidRemovePage property after the breaking change. It demonstrates the updated approach to managing page navigation and pop behavior.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

final MaterialPage<void> page1 = MaterialPage<void>(child: Placeholder());
final MaterialPage<void> page2 = MaterialPage<void>(canPop: false, child: Placeholder());
final MaterialPage<void> page3 = MaterialPage<void>(child: Placeholder());

void main() {
  final List<Page<void>> pages = <Page<void>>[page1, page2, page3];
  runApp(
    MaterialApp(
      home: Navigator(
        pages: pages,
        onDidRemovePage: (Page<Object?> page) {
          pages.remove(page);
        },
      ),
    ),
  );
}

----------------------------------------

TITLE: Flutter Navigator Route Removal - After Change
DESCRIPTION: Updated implementation where route removal methods can return results, properly completing associated futures.

LANGUAGE: dart
CODE:
Navigator.of(context).removeRoute(route, result);
Navigator.of(context).removeRouteBelow(route, result);

----------------------------------------

TITLE: Updated showDialog Usage in Flutter
DESCRIPTION: The showDialog function now takes a builder parameter instead of a widget parameter.

LANGUAGE: dart
CODE:
showDialog(context: context, builder: (BuildContext context) => new Text('hello'))

----------------------------------------

TITLE: Adding Flutter to PATH Environment Variable
DESCRIPTION: Adds the Flutter bin directory to the system PATH environment variable.

LANGUAGE: console
CODE:
{{setpath}}

----------------------------------------

TITLE: Removed Android V1 Embedding Classes
DESCRIPTION: List of Java classes that were removed from Flutter's Android v1 embedding in version 3.29.0

LANGUAGE: text
CODE:
io.flutter.app.FlutterActivity
io.flutter.app.FlutterActivityDelegate
io.flutter.app.FlutterActivityEvents
io.flutter.app.FlutterApplication
io.flutter.app.FlutterFragmentActivity
io.flutter.app.FlutterPlayStoreSplitApplication
io.flutter.app.FlutterPluginRegistry

io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry
io.flutter.embedding.engine.plugins.shim.ShimRegistrar

io.flutter.view.FlutterMain
io.flutter.view.FlutterNativeView
io.flutter.view.FlutterView

----------------------------------------

TITLE: Migrating to FocusNode.canRequestFocus in Dart
DESCRIPTION: This code snippet shows how to migrate from the deprecated TextField.canRequestFocus to using FocusNode.canRequestFocus in a Flutter widget.

LANGUAGE: dart
CODE:
class _MyWidgetState extends State<MyWidget> {
  final FocusNode _focusNode = FocusNode(canRequestFocus: false);

  @override
  Widget build(BuildContext context) {
    return TextField(
      focusNode: _focusNode,
    );
  }
}

----------------------------------------

TITLE: Implementing Path URL Strategy in Dart
DESCRIPTION: This code demonstrates how to implement the path URL strategy in a Flutter web app. It imports the necessary package and calls usePathUrlStrategy before running the app.

LANGUAGE: dart
CODE:
import 'package:flutter_web_plugins/url_strategy.dart';

void main() {
  usePathUrlStrategy();
  runApp(ExampleApp());
}

----------------------------------------

TITLE: Rendering Flutter Interaction Model Widgets Catalog in Markdown
DESCRIPTION: This snippet uses a custom rendering directive to generate a catalog page for Flutter's interaction model widgets. It passes the category name and catalog data to a template file for rendering.

LANGUAGE: markdown
CODE:
{% render docs/catalog-page.md, categoryName:"Interaction models", catalog:catalog %}

----------------------------------------

TITLE: Generating Dynamic Links for Flutter SDK Management using Liquid
DESCRIPTION: This code snippet uses Liquid templating to generate a list of links for managing Flutter SDK. It dynamically adjusts the links based on the user's development environment, target platform, and required next steps.

LANGUAGE: liquid
CODE:
{% assign choice = include.config %}
{% assign next-step = doctor[include.config] %}
{% assign mod-target = include.target | remove: 'mobile-' | downcase %}
{% if mod-target == 'desktop' %}
  {% assign webtarget = include.devos | append: '-desktop' | downcase %}
  {% assign andtarget = include.devos | downcase %}
  {% assign mod-target = include.devos | downcase %}
{% elsif mod-target == 'web' %}
  {% assign andtarget = 'web-on-' | append: include.devos | downcase %}
{% else %}
  {% assign webtarget = mod-target | append: '-on-' | append: include.devos | downcase %}
  {% assign andtarget = include.devos | downcase %}
{% endif %}

* [Upgrade Flutter][upgrade]
{%- case next-step.add-android %}
{%- when 'Y' %}
* [Add Android compilation tools](/platform-integration/android/install-android/install-android-from-{{andtarget}})
{%- endcase %}
{%- case next-step.add-chrome %}
{%- when 'Y' %}
* [Add web as a build target](/platform-integration/web/install-web/)
{%- endcase %}
{%- case next-step.add-simulator %}
{%- when 'Y' %}
* [Add iOS simulator or device](/platform-integration/ios/install-ios/install-ios-from-{{mod-target}})
{%- endcase %}
{%- case next-step.add-xcode %}
{%- when 'Y' %}
* [Add macOS compilation tools](/platform-integration/macos/install-macos/install-macos-from-{{mod-target}})
{%- endcase %}
{%- case next-step.add-linux-tools %}
{%- when 'Y' %}
* [Add Linux compilation tools](/platform-integration/linux/install-linux/install-linux-from-{{mod-target}})
{%- endcase %}
{%- case next-step.add-visual-studio %}
{%- when 'Y' %}
* [Add Windows desktop compilation tools](/platform-integration/windows/install-windows/install-windows-from-{{mod-target}})
{%- endcase %}
* [Uninstall Flutter][uninstall]

[upgrade]: /release/upgrade
[uninstall]: /get-started/uninstall?tab={{include.devos}}

----------------------------------------

TITLE: Updating MainActivity for v2 Embedding in Java
DESCRIPTION: Example of updating the MainActivity in a Flutter Android plugin's example app to use the new v2 embedding FlutterActivity.

LANGUAGE: Java
CODE:
package io.flutter.plugins.firebasecoreexample;

import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugins.firebase.core.FirebaseCorePlugin;

public class MainActivity extends FlutterActivity {
  // You can keep this empty class or remove it. Plugins on the new embedding
  // now automatically registers plugins.
}

----------------------------------------

TITLE: Testing TextInput State (Before Migration) - Dart
DESCRIPTION: Example of checking text input state before the migration change. This approach relied on dirty state from previous tests and would check for empty text in the editing state.

LANGUAGE: dart
CODE:
    expect(tester.testTextInput.editingState['text'], isEmpty);

----------------------------------------

TITLE: Applying Uniform Page Transitions Across All Platforms in Flutter
DESCRIPTION: This snippet shows how to apply the same page transition builder (FadeUpwardsPageTransitionsBuilder) to all platforms.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    pageTransitionsTheme: PageTransitionsTheme(
      builders: Map<TargetPlatform, PageTransitionsBuilder>.fromIterable(
        TargetPlatform.values,
        value: (dynamic _) => const FadeUpwardsPageTransitionsBuilder(),
      ),
    ),
  ),
)

----------------------------------------

TITLE: Running Flutter Doctor with Verbose Output in Console
DESCRIPTION: This command runs the Flutter doctor with a verbose flag to provide more detailed output for troubleshooting purposes. It's useful when the standard command returns an error.

LANGUAGE: console
CODE:
{{prompt}} flutter doctor -v

----------------------------------------

TITLE: Deprecated attachToActivity Method Signature in Java
DESCRIPTION: The old, now deprecated method signature for attachToActivity, which took an Activity directly. This method was removed in Flutter 2.

LANGUAGE: java
CODE:
void attachToActivity(@NonNull Activity activity, @NonNull Lifecycle lifecycle);

----------------------------------------

TITLE: Upgrading Flutter SDK in Bash
DESCRIPTION: Command to update the Flutter SDK to the latest version if needed for the migration process.

LANGUAGE: bash
CODE:
flutter upgrade

----------------------------------------

TITLE: Liquid Template Comment and Note Block
DESCRIPTION: A template block containing a maintainer's note about managing API documentation links between master and stable channels, followed by a note directive informing users about documentation locations.

LANGUAGE: liquid
CODE:
{% comment %}
  My reason for making this note an include is so
  that it's easier to search for it and to replace
  the master API links with stable API links once
  changes land. This has become an issue now that
  we maintain breaking changes docs for future
  releases on our site. - sz
{% endcomment %}

:::note
The following link(s) take you to the
[latest docs][] on the master channel.
You can find the docs for the stable
channel at [api.flutter.dev][].
:::

[api.flutter.dev]: {{site.api}}
[latest docs]: {{site.main-api}}

----------------------------------------

TITLE: Original Objective-C SplashScreenView Declaration
DESCRIPTION: Previous nonnull declaration of the splashScreenView property in FlutterViewController

LANGUAGE: objc
CODE:
@property(strong, nonatomic) UIView* splashScreenView;

----------------------------------------

TITLE: Updating Text Using Intent (Post-Migration)
DESCRIPTION: Updated approach to modify the text of a focused EditableText using an Intent. This method works with the new FocusNode attachment implementation.

LANGUAGE: dart
CODE:
final BuildContext? focusedContext = primaryFocus?.context;
if (focusedContext != null) {
  Actions.maybeInvoke(focusedContext, ReplaceTextIntent('UpdatedText'));
}

----------------------------------------

TITLE: Accessing PageView Controller After Nullability Update in Dart
DESCRIPTION: Demonstrates how to access the PageView controller after the nullability update. The controller is now nullable and requires null-assertion operator.

LANGUAGE: dart
CODE:
pageView.controller!.page

----------------------------------------

TITLE: Implementing CallbackShortcuts in Flutter
DESCRIPTION: Example showing how to use CallbackShortcuts widget to handle arrow key presses for incrementing/decrementing a counter.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return CallbackShortcuts(
    bindings: <ShortcutActivator, VoidCallback>{
      const SingleActivator(LogicalKeyboardKey.arrowUp): () {
        setState(() => count = count + 1);
      },
      const SingleActivator(LogicalKeyboardKey.arrowDown): () {
        setState(() => count = count - 1);
      },
    },
    child: Focus(
      autofocus: true,
      child: Column(
        children: <Widget>[
          const Text('Press the up arrow key to add to the counter'),
          const Text('Press the down arrow key to subtract from the counter'),
          Text('count: $count'),
        ],
      ),
    ),
  );
}

----------------------------------------

TITLE: Including Release Notes Content in Markdown
DESCRIPTION: Markdown include directive to load release notes content from an external file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.13.1-src.md %}

----------------------------------------

TITLE: Generating Dynamic Topic List in Liquid for Flutter Documentation
DESCRIPTION: This Liquid template code analyzes the current page's URL, navigates through the site's structure, and generates a list of relevant topics or subtopics. It handles different levels of nesting and formats the output as a Markdown list.

LANGUAGE: liquid
CODE:
{% assign url = page.url | regex_replace: '/index$|/index.html$|/$' -%}
{% assign path_parts = url | split: '/' -%}
{% assign topics = sidenav -%}
{% assign path = '' -%}

{% comment %}
  - path_parts[0] == '' because page.url always starts with '/'
{% endcomment -%}

{% for path_part in path_parts -%}
  {% if forloop.first == true -%}
    {% assign path = '' -%}
  {% else -%}
    {% assign path = path | append: '/' | append: path_part -%}
  {% endif -%}
  {% if forloop.index0 > 0 and path != '/ui' -%}
    {% assign topics = topics | where: "permalink", path -%}
    {% assign topics = topics[0].children | where: "title" -%}
  {% endif -%}
{% endfor -%}

{% if topics -%}
### Topics

{% for topic in topics -%}

{% if topic.permalink == nil -%}
{% if topic contains 'header' %}
#### {{topic.header}}

{% else -%}
  - {{topic.title}}
{% endif -%}
{% else -%}
  - [{{topic.title}}]({{topic.permalink}})
{% endif -%}
{% endfor %}
{% endif -%}

{{content}}

----------------------------------------

TITLE: Reloading Shell Profile
DESCRIPTION: Command to reload the current shell profile to apply PATH changes.

LANGUAGE: console
CODE:
source $HOME/.<rc file>

----------------------------------------

TITLE: Modifying Existing ScrollBehavior Configuration
DESCRIPTION: Example showing how to modify an existing ScrollBehavior instance using copyWith to adjust multitouch drag strategy

LANGUAGE: dart
CODE:
// ScrollBehavior can be copied and adjusted.
final ScrollController controller = ScrollController();
ScrollConfiguration(
  behavior: ScrollConfiguration.of(context).copyWith(
    multitouchDragStrategy: MultitouchDragStrategy.sumAllPointers,
  ),
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    },
  ),
);

----------------------------------------

TITLE: Demonstrating New ScrollView Behavior in Flutter
DESCRIPTION: This code snippet illustrates how the same ListView now only attaches to the PrimaryScrollController by default on mobile platforms after the change.

LANGUAGE: dart
CODE:
Scaffold(
  body: ListView.builder(
    itemBuilder: (BuildContext context, int index) {
      return Text('Item $index');
    }
  ),
);

----------------------------------------

TITLE: Previous DOM Structure for Platform Views
DESCRIPTION: Shows the old DOM structure for platform views in Flutter web before the implementation of slots.

LANGUAGE: html
CODE:
...

<flt-glass-pane>
  ...
  <div id="platform-view">Contents</div> <!-- canvaskit -->
  <!-- OR -->
  <flt-platform-view>
    #shadow-root
    | <div id="platform-view">Contents</div> <!-- html -->
  </flt-platform-view>
  ...
</flt-glass-pane>

...

----------------------------------------

TITLE: Configuring Asset Transformer with Arguments
DESCRIPTION: Example of specifying arguments for asset transformers in pubspec.yaml configuration.

LANGUAGE: yaml
CODE:
flutter:
  assets:
    - path: assets/logo.svg
      transformers:
        - package: vector_graphics_compiler
          args: ['--tessellate', '--font-size=14']

----------------------------------------

TITLE: Testing Modal Route Semantics - Before Migration
DESCRIPTION: Example test code demonstrating how to verify semantics node hierarchy and properties before the modal route semantics ordering change. The code checks the semantics tree structure, node rectangles, and semantic flags.

LANGUAGE: dart
CODE:
import 'dart:ui';

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/material.dart';

void main() {
  testWidgets('example test', (WidgetTester tester) async {
    final SemanticsHandle handle =
        tester.binding.pipelineOwner.ensureSemantics();

    // Build our app and trigger a frame.
    await tester.pumpWidget(MaterialApp(home: Scaffold(body: Text('test'))));

    final SemanticsNode root =
        tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;

    final SemanticsNode firstNode = getChild(root);
    expect(firstNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));

    // Fixes the test by expecting an additional node above the scope route.
    final SemanticsNode secondNode = getChild(firstNode);
    expect(secondNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));

    final SemanticsNode thirdNode = getChild(secondNode);
    expect(thirdNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));
    expect(thirdNode.hasFlag(SemanticsFlag.scopesRoute), true);

    final SemanticsNode forthNode = getChild(thirdNode);
    expect(forthNode.rect, Rect.fromLTRB(0.0, 0.0, 56.0, 14.0));
    expect(forthNode.label, 'test');
    handle.dispose();
  });
}

SemanticsNode getChild(SemanticsNode node) {
  SemanticsNode child;
  bool visiter(SemanticsNode target) {
    child = target;
    return false;
  }

  node.visitChildren(visiter);
  return child;
}

----------------------------------------

TITLE: Removing ThemeData.fixTextFieldOutlineLabel in Dart
DESCRIPTION: ThemeData.fixTextFieldOutlineLabel was deprecated in v2.5 and has been removed. This property was a temporary migration flag that is no longer needed.

LANGUAGE: dart
CODE:
var themeData = ThemeData(
  fixTextFieldOutlineLabel: true,  
);

LANGUAGE: dart
CODE:
var themeData = ThemeData(
);

----------------------------------------

TITLE: Preventing Content Overscaling in Dart
DESCRIPTION: Demonstrates how to use MediaQuery.withClampedTextScaling to prevent content from overscaling.

LANGUAGE: dart
CODE:
MediaQuery.withClampedTextScaling(
  maxScaleFactor: _kMaxTitleTextScaleFactor,
  child: title,
)

----------------------------------------

TITLE: Migrating ShortcutActivator.accepts Method in Dart
DESCRIPTION: This snippet demonstrates how to update a custom ShortcutActivator implementation to use the new KeyEvent and HardwareKeyboard parameters instead of RawKeyEvent and RawKeyboard.

LANGUAGE: dart
CODE:
class MyActivator extends ShortcutActivator {
  @override
  bool accepts(KeyEvent event, HardwareKeyboard state) {
    // ... (your implementation here)
    return false;
  }
  // ...
}

----------------------------------------

TITLE: Removing Flutter SDK Directory
DESCRIPTION: Command to remove the Flutter SDK directory from the system. The exact path varies by operating system, with Windows using Remove-Item and Unix-based systems using rm -rf.

LANGUAGE: console
CODE:
Remove-Item -Recurse -Force -Path 'C:\user\{username}\dev\flutter'

----------------------------------------

TITLE: Error Message for Run Loop Migration
DESCRIPTION: Console error output shown when the Windows project build fails due to missing run loop implementation, requiring additional migration steps.

LANGUAGE: console
CODE:
flutter_window.obj : error LNK2019: unresolved external symbol "public: void __cdecl RunLoop::RegisterFlutterInstance(class flutter::FlutterEngine *)" (?RegisterFlutterInstance@RunLoop@@QEAAXPEAVFlutterEngine@flutter@@@Z) referenced in function "protected: virtual bool __cdecl FlutterWindow::OnCreate(void)" (?OnCreate@FlutterWindow@@MEAA_NXZ)

----------------------------------------

TITLE: Tap Actions with flutter_driver
DESCRIPTION: Example demonstrating tap actions and widget absence verification using flutter_driver.

LANGUAGE: dart
CODE:
test('tap on the first item (Alder), verify selected', () async {
  // find the item by text
  final item = find.text('Alder');

  // Wait for the list item to appear.
  await driver.waitFor(item);

  // Emulate a tap on the tile item.
  await driver.tap(item);

  // Wait for species name to be displayed
  await driver.waitFor(find.text('Alnus'));

  // 'please select' text should not be displayed
  await driver.waitForAbsent(
    find.text('Please select a plant from the list.'),
  );
});

----------------------------------------

TITLE: Measuring Screen Size with MediaQuery
DESCRIPTION: Using MediaQuery.sizeOf to obtain the app window dimensions in logical pixels. This method is preferred over MediaQuery.of for better performance when only size information is needed.

LANGUAGE: dart
CODE:
MediaQuery.sizeOf(context)

----------------------------------------

TITLE: Adding Box Shadows in CSS
DESCRIPTION: Adds multiple box shadows to a div element using the box-shadow property in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.8),
              0 6px 20px rgba(0, 0, 0, 0.5);
}

----------------------------------------

TITLE: Adding Flutter to PATH Permanently
DESCRIPTION: Command to append Flutter PATH configuration to .bashrc file for persistent PATH updates across sessions.

LANGUAGE: console
CODE:
echo 'export PATH="$PATH:<path_to_flutter_directory>/flutter/bin"' >> $HOME/.bashrc

----------------------------------------

TITLE: Configuring Custom Page Transitions in Flutter MaterialApp
DESCRIPTION: This snippet demonstrates how to explicitly set FadeUpwardsPageTransitionsBuilder for specific platforms after the migration.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    pageTransitionsTheme: const PageTransitionsTheme(
      builders: <TargetPlatform, PageTransitionsBuilder>{
        TargetPlatform.android: FadeUpwardsPageTransitionsBuilder(), // Apply this to every platforms you need.
      },
    ),
  ),
)

----------------------------------------

TITLE: Previous FloatingActionButton Foreground Color Implementation
DESCRIPTION: Shows how the foreground color was previously determined using accentIconTheme as a fallback option.

LANGUAGE: dart
CODE:
    final Color foregroundColor = this.foregroundColor
      ?? floatingActionButtonTheme.foregroundColor
      ?? theme.accentIconTheme.color // To be removed.
      ?? theme.colorScheme.onSecondary;

----------------------------------------

TITLE: Migrating maxLengthEnforced to maxLengthEnforcement in Flutter Text Fields
DESCRIPTION: Demonstrates how to update TextField, TextFormField, and CupertinoTextField from using the deprecated maxLengthEnforced property to the new maxLengthEnforcement property. This change allows for more granular control over max length behavior.

LANGUAGE: dart
CODE:
const TextField textField = TextField(maxLengthEnforced: true);
const TextField textField = TextField(maxLengthEnforced: false);
final lengthEnforced = textField.maxLengthEnforced;

const TextFormField textFormField = TextFormField(maxLengthEnforced: true);
const TextFormField textFormField = TextFormField(maxLengthEnforced: false);
final lengthEnforced = textFormField.maxLengthEnforced;

const CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforced: true);
const CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforced: false);
final lengthEnforced = cupertinoTextField.maxLengthEnforced;

LANGUAGE: dart
CODE:
const TextField textField = TextField(maxLengthEnforcement: MaxLengthEnforcement.enforce);
const TextField textField = TextField(maxLengthEnforcement: MaxLengthEnforcement.none);
final lengthEnforced = textField.maxLengthEnforcement;

const TextFormField textFormField = TextFormField(maxLengthEnforcement: MaxLengthEnforcement.enforce);
const TextFormField textFormField = TextFormField(maxLengthEnforcement: MaxLengthEnforcement.none);
final lengthEnforced = textFormField.maxLengthEnforcement;

const CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforcement: MaxLengthEnforcement.enforce);
const CupertinoTextField cupertinoTextField = CupertinoTextField(maxLengthEnforcement: MaxLengthEnforcement.none);
final lengthEnforced = cupertinoTextField.maxLengthEnforcement;

----------------------------------------

TITLE: Pre-Migration AlertDialog Example in Dart
DESCRIPTION: Example of AlertDialog implementation before the scrollable changes, showing nested SingleChildScrollView that won't work as intended.

LANGUAGE: dart
CODE:
AlertDialog(
  title: Text(
    'Very, very large title that is also scrollable',
    textScaleFactor: 5,
  ),
  content: SingleChildScrollView( // won't be scrollable
    child: Text('Scrollable content', textScaleFactor: 5),
  ),
  actions: <Widget>[
    TextButton(child: Text('Button 1'), onPressed: () {}),
    TextButton(child: Text('Button 2'), onPressed: () {}),
  ],
)

----------------------------------------

TITLE: Inserting Button and Image in Markdown
DESCRIPTION: This snippet demonstrates how to create a container with an image and a button in Markdown. It uses HTML elements within the Markdown file to structure the content.

LANGUAGE: markdown
CODE:
<div class="juicy-button-container">
  <img src="/assets/images/docs/get-started/codelab-goal-background.jpg" alt="The illustration of the initial and the resulting app that you will build in this codelab.">

  <a class="filled-button"
     target="_blank"
     href="https://codelabs.developers.google.com/codelabs/flutter-codelab-first">
    &#9654;&nbsp; Start codelab
  </a>

</div>

----------------------------------------

TITLE: Post-Migration AlertDialog Example in Dart
DESCRIPTION: Example of AlertDialog implementation after the scrollable changes, showing simplified structure without nested SingleChildScrollView.

LANGUAGE: dart
CODE:
AlertDialog(
  title: Text('Very, very large title', textScaleFactor: 5),
  content: Text('Very, very large content', textScaleFactor: 5),
  actions: <Widget>[
    TextButton(child: Text('Button 1'), onPressed: () {}),
    TextButton(child: Text('Button 2'), onPressed: () {}),
  ],
)

----------------------------------------

TITLE: Removing Pub Cache
DESCRIPTION: Command to remove the Pub package cache directory. This step is optional and should be skipped if keeping Dart while removing Flutter.

LANGUAGE: console
CODE:
C:\> Remove-Item -Recurse -Force -Path $env:LOCALAPPDATA\Pub\Cache

----------------------------------------

TITLE: Zone Mismatch Warning Message Example
DESCRIPTION: Example of the warning message displayed when Flutter detects initialization and runApp calls in different zones

LANGUAGE: plaintext
CODE:
════════ Exception caught by Flutter framework ════════════════════════════════════
The following assertion was thrown during runApp:
Zone mismatch.

The Flutter bindings were initialized in a different zone than is now being used.
This will likely cause confusion and bugs as any zone-specific configuration will
inconsistently use the configuration of the original binding initialization zone or
this zone based on hard-to-predict factors such as which zone was active when a
particular callback was set.
It is important to use the same zone when calling `ensureInitialized` on the
binding as when calling `runApp` later.
To make this warning fatal, set BindingBase.debugZoneErrorsAreFatal to true before
the bindings are initialized (i.e. as the first statement in `void main() { }`).
[...]
═══════════════════════════════════════════════════════════════════════════════════

----------------------------------------

TITLE: Implementing TextInputClient Before Migration
DESCRIPTION: Example of a custom TextInputClient implementation before adding the insertContent method.

LANGUAGE: dart
CODE:
class MyCustomTextInputClient implements TextInputClient {
  // ...
}

----------------------------------------

TITLE: Tap Actions with integration_test
DESCRIPTION: Example showing tap actions and widget absence verification using integration_test.

LANGUAGE: dart
CODE:
testWidgets('tap on the first item (Alder), verify selected', (tester) async {
  await tester.pumpWidget(const PlantsApp());

  // wait for data to load
  await tester.pumpAndSettle();

  // find the item by text
  final item = find.text('Alder');

  // assert item is found
  expect(item, findsOneWidget);

  // Emulate a tap on the tile item.
  await tester.tap(item);
  await tester.pumpAndSettle();

  // Species name should be displayed
  expect(find.text('Alnus'), findsOneWidget);

  // 'please select' text should not be displayed
  expect(find.text('Please select a plant from the list.'), findsNothing);
});

----------------------------------------

TITLE: Implementing Policy-Based Link Handling in Flutter
DESCRIPTION: This snippet demonstrates how to create a policy-based method for determining whether to allow purchase clicks based on the platform. It avoids direct platform checks and uses a more flexible approach.

LANGUAGE: dart
CODE:
bool shouldAllowPurchaseClick() {
  // Banned by Apple App Store guidelines. 
  return !Platform.isIOS;
}

...
TextSpan(
  text: 'Buy in browser',
  style: new TextStyle(color: Colors.blue),
  recognizer: shouldAllowPurchaseClick ? TapGestureRecognizer()
    ..onTap = () { launch('<some url>') : null;
  } : null,

----------------------------------------

TITLE: Including DevTools Release Notes Content in Markdown
DESCRIPTION: Template file that imports the main release notes content via a markdown include statement, using Liquid template syntax.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.38.0-src.md %}

----------------------------------------

TITLE: Setting Background Color in Dart (Direct)
DESCRIPTION: Sets the background color of a Container widget using the color property in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Text(
    'Lorem ipsum',
    style: bold24Roboto,
  ),
);

----------------------------------------

TITLE: Running Flutter Doctor in Console
DESCRIPTION: Command to check for dependencies and verify the Flutter installation setup.

LANGUAGE: console
CODE:
$ flutter doctor

----------------------------------------

TITLE: Handling gestures in Flutter with GestureDetector
DESCRIPTION: Demonstrates how to use GestureDetector to create a custom button that responds to taps.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

class MyButton extends StatelessWidget {
  const MyButton({super.key});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        print('MyButton was tapped!');
      },
      child: Container(
        height: 50,
        padding: const EdgeInsets.all(8),
        margin: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(5),
          color: Colors.lightGreen[500],
        ),
        child: const Center(child: Text('Engage')),
      ),
    );
  }
}

void main() {
  runApp(const MaterialApp(home: Scaffold(body: Center(child: MyButton()))));
}

----------------------------------------

TITLE: Configuring DevTools Extension Settings in YAML
DESCRIPTION: DevTools extension enablement states are stored in a 'devtools_options.yaml' file in the project root. This file can be project-wide if checked into source control, or user-specific if ignored by version control.

LANGUAGE: yaml
CODE:
devtools_options.yaml

----------------------------------------

TITLE: Updating State in Flutter with setState
DESCRIPTION: This code snippet shows the correct way to update state in a Flutter widget after the optimization, where the buttonLabel is modified within a setState call to ensure proper rebuilding.

LANGUAGE: dart
CODE:
class FooState extends State<Foo> {
  String buttonLabel = 'Click Me';
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () async {
        final newLabel = await Navigator.pushNamed(context, '/bar');
        setState(() {
          buttonLabel = newLabel;
        });
      },
      child: Text(buttonLabel),
    );
  }
}

----------------------------------------

TITLE: Adding Global Keyboard Listeners in Dart
DESCRIPTION: This code shows how to add and remove global keyboard listeners using HardwareKeyboard in a Flutter app.

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  HardwareKeyboard.instance.addHandler(_handleKey);
}

@override
void dispose() {
  HardwareKeyboard.instance.removeHandler(_handleKey);
  super.dispose();
}

----------------------------------------

TITLE: Adding Internet Permission to AndroidManifest.xml for Flutter Android Apps
DESCRIPTION: This XML snippet adds the INTERNET permission to the AndroidManifest.xml file, which is required for Android apps to fetch data from the internet. This permission should be added within the manifest tag of the AndroidManifest.xml file.

LANGUAGE: xml
CODE:
<!-- Required to fetch data from the internet. -->
<uses-permission android:name="android.permission.INTERNET" />

----------------------------------------

TITLE: Configuring LLM System Instructions in Flutter
DESCRIPTION: Shows how to set system instructions for the LLM provider to optimize responses based on specific use cases like recipe generation.

LANGUAGE: dart
CODE:
class _HomePageState extends State<HomePage> {
  ...
  LlmProvider _createProvider([List<ChatMessage>? history]) => GeminiProvider(
      history: history,
        ...,
        model: GenerativeModel(
          model: 'gemini-1.5-flash',
          apiKey: geminiApiKey,
          ...,
          systemInstruction: Content.system('''
You are a helpful assistant that generates recipes based on the ingredients and 
instructions provided as well as my food preferences, which are as follows:
${Settings.foodPreferences.isEmpty ? 'I don\'t have any food preferences' : Settings.foodPreferences}

You should keep things casual and friendly. You may generate multiple recipes in a single response, but only if asked. ...
''',
          ),
        ),
      );
}

----------------------------------------

TITLE: Parsing Raw Image Data (Pre-Migration)
DESCRIPTION: Legacy code for parsing raw image data, assuming incorrect pixel order and color channel arrangement.

LANGUAGE: dart
CODE:
import 'dart:typed_data';
import 'dart:ui' as ui;

// Parse `image` as a displayable image.
//
// Each byte in `image` is a pixel channel, in the order of blue, green, red,
// and alpha, starting from the bottom left corner and going row first.
Future<ui.Image> parseMyImage(Uint8List image, int width, int height) async {
  final ui.ImageDescriptor descriptor = ui.ImageDescriptor.raw(
    await ui.ImmutableBuffer.fromUint8List(image),
    width: width,
    height: height,
    pixelFormat: ui.PixelFormat.rgba8888,
  );
  return (await (await descriptor.instantiateCodec()).getNextFrame()).image;
}

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: Sequence of commands to create, analyze, test and run Flutter example applications. Commands should be executed from the repository root directory, where $PROJECT represents the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Using Deprecated TextField.canRequestFocus in Dart
DESCRIPTION: This code snippet demonstrates the usage of the deprecated TextField.canRequestFocus parameter in a Flutter widget.

LANGUAGE: dart
CODE:
class _MyWidgetState extends State<MyWidget> {
  @override
  Widget build(BuildContext context) {
    return TextField(
      canRequestFocus: false,
    );
  }
}

----------------------------------------

TITLE: Type Checking Golden File Comparator in Dart
DESCRIPTION: Example showing type checking of the golden file comparator, which will now return a different type than before due to the implementation changes.

LANGUAGE: dart
CODE:
if (goldenFileComparator is ...) {
  // The new default is a new (hidden) type that has not existed before.
}

----------------------------------------

TITLE: Basic Flutter Web Bootstrap HTML
DESCRIPTION: Shows how to include the Flutter bootstrap script in an HTML file using an async script tag.

LANGUAGE: html
CODE:
<html>
  <body>
    <script src="flutter_bootstrap.js" async></script>
  </body>
</html>

----------------------------------------

TITLE: Flutter Pub Get Network Error
DESCRIPTION: Error message when Flutter pub get command fails with exit code 69, typically due to network issues.

LANGUAGE: plaintext
CODE:
Running "flutter pub get" in flutter_tools...\nResolving dependencies in .../flutter/packages/flutter_tools... (28.0s)\nGot TLS error trying to find package test at https://pub.dev/.\npub get failed\ncommand:\n".../flutter/bin/cache/dart-sdk/bin/\ndart __deprecated_pub --color --directory\n.../flutter/packages/flutter_tools get --example"\npub env: {\n  "FLUTTER_ROOT": ".../flutter",\n  "PUB_ENVIRONMENT": "flutter_cli:get",\n  "PUB_CACHE": ".../.pub-cache",\n}\nexit code: 69

----------------------------------------

TITLE: Installing Flutter Using Snapd
DESCRIPTION: Command to install Flutter SDK using the snapd package manager with classic confinement

LANGUAGE: console
CODE:
$ sudo snap install flutter --classic

----------------------------------------

TITLE: Configuring ColorScheme.fromSeed in Flutter
DESCRIPTION: Example showing how to migrate ColorScheme.fromSeed usage to support brighter colors using dynamicSchemeVariant parameter.

LANGUAGE: dart
CODE:
ColorScheme.fromSeed(
    seedColor: Color(0xFF0000FF), // Bright blue
)

LANGUAGE: dart
CODE:
ColorScheme.fromSeed(
    seedColor: Color(0xFF0000FF), // Bright blue
    dynamicSchemeVariant: DynamicSchemeVariant.fidelity,
)

----------------------------------------

TITLE: Setting Visual Density in MaterialApp in Dart
DESCRIPTION: This snippet demonstrates how to set a custom visual density for a MaterialApp in Flutter, adjusting the UI based on touch mode.

LANGUAGE: dart
CODE:
double densityAmt = touchMode ? 0.0 : -1.0;
VisualDensity density = VisualDensity(
  horizontal: densityAmt,
  vertical: densityAmt,
);
return MaterialApp(
  theme: ThemeData(visualDensity: density),
  home: MainAppScaffold(),
  debugShowCheckedModeBanner: false,
);

----------------------------------------

TITLE: Optimizing Repaints with RepaintBoundary in Flutter
DESCRIPTION: This snippet shows how to use RepaintBoundary to optimize repainting in a Flutter app. It wraps the CircularProgressIndicator in a RepaintBoundary, causing only that section of the screen to repaint.

LANGUAGE: dart
CODE:
class AreaRepaintsPage extends StatelessWidget {
  const AreaRepaintsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Repaint Example')),
      body: const Center(
        child: RepaintBoundary(child: CircularProgressIndicator()),
      ),
    );
  }
}

----------------------------------------

TITLE: Checking for Pressed Keys in Dart
DESCRIPTION: This snippet demonstrates how to check if specific keys are being held down using HardwareKeyboard in a Flutter app.

LANGUAGE: dart
CODE:
static bool isKeyDown(Set<LogicalKeyboardKey> keys) {
  return keys
      .intersection(HardwareKeyboard.instance.logicalKeysPressed)
      .isNotEmpty;
}

----------------------------------------

TITLE: Using PopScope and Form with onPopInvoked in Flutter (Pre-migration)
DESCRIPTION: Example of using PopScope and Form with the onPopInvoked callback before the migration to generic types. This code demonstrates the previous implementation without access to the pop result.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(
    MaterialApp(
      navigatorKey: nav,
      home: Column(
        children: [
          Form(
            canPop: false,
            onPopInvoked: (bool didPop) {
              if (didPop) {
                return;
              }
              launchConfirmationDialog();
            },
            child: MyWidget(),
          ),
          PopScope(
            canPop: false,
            onPopInvoked: (bool didPop) {
              if (didPop) {
                return;
              }
              launchConfirmationDialog();
            },
            child: MyWidget(),
          ),
        ],
      ),
    ),
  );
}

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: Series of command line instructions to create, analyze, test and run Flutter example applications. The process involves creating a new Flutter project without overwriting existing files, changing to the project directory, running static analysis, executing tests, and launching the app.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Configuring CircularProgressIndicator with Updated Design in Flutter
DESCRIPTION: This snippet shows how to opt into the updated Material 3 design for CircularProgressIndicator by setting the year2023 flag to false. This enables new features like track gaps and rounded stroke caps.

LANGUAGE: dart
CODE:
CircularProgressIndicator(
  year2023: false,
  value: 0.5,
),

----------------------------------------

TITLE: Legacy Custom Golden File Comparator Setup in Dart
DESCRIPTION: Example of the previous workaround implementation that manually set a custom golden file comparator. This approach is no longer necessary with the new default implementation.

LANGUAGE: dart
CODE:
import 'package:integration_test/integration_test.dart';
import 'package:my_integration_test/custom_golden_file_comparator.dart';

void main() {
  goldenFileComparator = CustomGoldenFileComparatorThatWorks();

  // ...
}

----------------------------------------

TITLE: Creating an FFI plugin for macOS in Flutter
DESCRIPTION: This command creates a new Flutter plugin with FFI support for macOS. It sets up the necessary file structure and build configurations for integrating C/C++ code with Dart.

LANGUAGE: shell
CODE:
$ flutter create --platforms=macos --template=plugin_ffi native_add
$ cd native_add

----------------------------------------

TITLE: Upgrading Flutter SDK using Console Command
DESCRIPTION: Basic command to upgrade Flutter SDK to the latest version available in the current channel.

LANGUAGE: console
CODE:
$ flutter upgrade

----------------------------------------

TITLE: Using Samplers in GLSL Shader
DESCRIPTION: Demonstrates how to use a sampler2D uniform to access an Image object in a GLSL fragment shader.

LANGUAGE: glsl
CODE:
#include <flutter/runtime_effect.glsl>

uniform vec2 uSize;
uniform sampler2D uTexture;

out vec4 fragColor;

void main() {
  vec2 uv = FlutterFragCoord().xy / uSize;
  fragColor = texture(uTexture, uv);
}

----------------------------------------

TITLE: Cloning Flutter SDK Repository
DESCRIPTION: Downloads the Flutter SDK from GitHub's official Flutter repository using the stable branch

LANGUAGE: console
CODE:
git clone https://github.com/flutter/flutter.git -b stable

----------------------------------------

TITLE: Implementing Keyboard Listener for Focus in Dart
DESCRIPTION: This code demonstrates how to use the Focus widget to listen for keyboard events on a specific widget in a Flutter app.

LANGUAGE: dart
CODE:
  @override
  Widget build(BuildContext context) {
    return Focus(
      onKeyEvent: (node, event) {
        if (event is KeyDownEvent) {
          print(event.logicalKey);
        }
        return KeyEventResult.ignored;
      },
      child: ConstrainedBox(
        constraints: const BoxConstraints(maxWidth: 400),
        child: const TextField(
          decoration: InputDecoration(border: OutlineInputBorder()),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Starting Flutter App in Paused State for Network Recording
DESCRIPTION: Command to start a Flutter app in a paused state, allowing DevTools to begin recording network traffic before the app resumes. This is useful for capturing network requests during app startup.

LANGUAGE: plaintext
CODE:
flutter run --start-paused ...

----------------------------------------

TITLE: Error Message for Insecure HTTP Connection in Flutter
DESCRIPTION: This snippet shows the error message thrown when an application attempts to make an insecure HTTP connection on iOS or Android platforms in Flutter.

LANGUAGE: plaintext
CODE:
Insecure HTTP is not allowed by platform: <host>

----------------------------------------

TITLE: Migrating WidgetTester.enterText in Flutter Tests
DESCRIPTION: Demonstrates how to update code using WidgetTester.enterText to maintain the previous behavior of setting an invalid selection range.

LANGUAGE: dart
CODE:
await tester.enterText(finder, text);

LANGUAGE: dart
CODE:
await tester.showKeyboard(finder);
await tester.updateEditingValue(TextEditingValue(
  text: text,
));
await tester.idle();

----------------------------------------

TITLE: Showing Baselines in Flutter
DESCRIPTION: This snippet demonstrates how to make all baselines visible in a Flutter app. It sets the debugPaintBaselinesEnabled flag to true, which is useful for checking text alignment.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void showBaselines() {
  debugPaintBaselinesEnabled = true;
}

----------------------------------------

TITLE: Showing Baselines in Flutter
DESCRIPTION: This snippet demonstrates how to make all baselines visible in a Flutter app. It sets the debugPaintBaselinesEnabled flag to true, which is useful for checking text alignment.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void showBaselines() {
  debugPaintBaselinesEnabled = true;
}

----------------------------------------

TITLE: Disabling Flutter Analytics Reporting
DESCRIPTION: Command to opt out of anonymous crash reporting and feature usage statistics for Flutter.

LANGUAGE: console
CODE:
$ flutter --disable-analytics

----------------------------------------

TITLE: Using WidgetState in Flutter (After Migration)
DESCRIPTION: Example of using WidgetState classes and properties after the migration from MaterialState.

LANGUAGE: dart
CODE:
WidgetState selected = WidgetState.selected;

final WidgetStateProperty<Color> backgroundColor;

class _MouseCursor extends WidgetStateMouseCursor{
  const _MouseCursor(this.resolveCallback);

  final WidgetPropertyResolver<MouseCursor?> resolveCallback;

  @override
  MouseCursor resolve(Set<WidgetState> states) => resolveCallback(states) ?? MouseCursor.uncontrolled;
}

BorderSide side = WidgetStateBorderSide.resolveWith((Set<WidgetState> states) {
  if (states.contains(WidgetState.selected)) {
    return const BorderSide(color: Colors.red);
  }
  return null;
});

----------------------------------------

TITLE: Binding Usage Examples
DESCRIPTION: Examples showing how to use bindings before and after Flutter 3.0 migration, demonstrating the transition from nullable to non-nullable instance properties.

LANGUAGE: dart
CODE:
// Pre Flutter 3.0
SchedulerBinding.instance!.addPostFrameCallback(...);

// During migration
_ambiguate(SchedulerBinding.instance)!.addPostFrameCallback(...);

// Post Flutter 3.0
SchedulerBinding.instance.addPostFrameCallback(...);

----------------------------------------

TITLE: Original ButtonBarTheme Widget Usage
DESCRIPTION: Example showing ButtonBarTheme widget usage that needs to be migrated.

LANGUAGE: dart
CODE:
ButtonBarTheme(
  data: ButtonBarThemeData(
    alignment: MainAxisAlignment.center,
  ),
  child: ButtonBar(
    children: <Widget>[
      // ...
    ],
  ),
),

----------------------------------------

TITLE: Updated Objective-C SplashScreenView Declaration
DESCRIPTION: New nullable declaration of the splashScreenView property in FlutterViewController

LANGUAGE: objc
CODE:
@property(strong, nonatomic, nullable) UIView* splashScreenView;

----------------------------------------

TITLE: Using Scaffold with Drawer in Flutter
DESCRIPTION: Shows how to use a Scaffold with an AppBar and Drawer for navigation in Flutter.

LANGUAGE: Dart
CODE:
@override
Widget build(BuildContext context) {
  return Scaffold(
    drawer: Drawer(
      elevation: 20,
      child: ListTile(
        leading: const Icon(Icons.change_history),
        title: const Text('Screen2'),
        onTap: () {
          Navigator.of(context).pushNamed('/b');
        },
      ),
    ),
    appBar: AppBar(title: const Text('Home')),
    body: Container(),
  );
}

----------------------------------------

TITLE: Original TargetPlatform Enum Definition
DESCRIPTION: The previous version of the TargetPlatform enum before adding Linux and Windows support.

LANGUAGE: dart
CODE:
enum TargetPlatform {
  android,
  fuchsia,
  iOS,
  macOS,
}

----------------------------------------

TITLE: Dart VM Service URI Output in Xcode Console
DESCRIPTION: Console output showing the Dart VM service URI when running a Flutter app in Xcode. This URI is needed to attach VS Code debugger to the running Flutter app.

LANGUAGE: console
CODE:
2023-07-12 14:55:39.966191-0500 Runner[58361:53017145]
    flutter: The Dart VM service is listening on
    http://127.0.0.1:50642/00wEOvfyff8=/

----------------------------------------

TITLE: Updating DropdownMenu TextField Text Style in Flutter
DESCRIPTION: Shows how to set the DropdownMenu's TextField to use the previous default text style (TextTheme.labelLarge) after the migration to Material 3.

LANGUAGE: dart
CODE:
DropdownMenu<ColorLabel>(
  textStyle: Theme.of(context).textTheme.labelLarge,
  initialSelection: ColorLabel.green,
  controller: colorController,
  label: const Text('Color'),
  dropdownMenuEntries: colorEntries,
  onSelected: (ColorLabel? color) {
    setState(() {
      selectedColor = color;
    });
  },
),

LANGUAGE: dart
CODE:
dropdownMenuTheme: DropdownMenuThemeData(
  textStyle: TextStyle(
    fontStyle: FontStyle.italic,
    fontWeight: FontWeight.bold,
  ),
),

----------------------------------------

TITLE: Setting Dialog Background Color Before Migration
DESCRIPTION: Example showing how to set dialog background color using the deprecated ThemeData.dialogBackgroundColor property in Flutter.

LANGUAGE: dart
CODE:
theme: ThemeData(
  dialogBackgroundColor: Colors.orange,
)

----------------------------------------

TITLE: Implementing CRUD Operations
DESCRIPTION: Functions for inserting, querying, updating, and deleting dog records in the database.

LANGUAGE: dart
CODE:
Future<void> insertDog(Dog dog) async {
  final db = await database;
  await db.insert('dogs', dog.toMap(), conflictAlgorithm: ConflictAlgorithm.replace);
}

Future<List<Dog>> dogs() async {
  final db = await database;
  final List<Map<String, Object?>> dogMaps = await db.query('dogs');
  return [
    for (final {'id': id as int, 'name': name as String, 'age': age as int} in dogMaps)
      Dog(id: id, name: name, age: age),
  ];
}

Future<void> updateDog(Dog dog) async {
  final db = await database;
  await db.update('dogs', dog.toMap(), where: 'id = ?', whereArgs: [dog.id]);
}

Future<void> deleteDog(int id) async {
  final db = await database;
  await db.delete('dogs', where: 'id = ?', whereArgs: [id]);
}

----------------------------------------

TITLE: Implementing CRUD Operations
DESCRIPTION: Functions for inserting, querying, updating, and deleting dog records in the database.

LANGUAGE: dart
CODE:
Future<void> insertDog(Dog dog) async {
  final db = await database;
  await db.insert('dogs', dog.toMap(), conflictAlgorithm: ConflictAlgorithm.replace);
}

Future<List<Dog>> dogs() async {
  final db = await database;
  final List<Map<String, Object?>> dogMaps = await db.query('dogs');
  return [
    for (final {'id': id as int, 'name': name as String, 'age': age as int} in dogMaps)
      Dog(id: id, name: name, age: age),
  ];
}

Future<void> updateDog(Dog dog) async {
  final db = await database;
  await db.update('dogs', dog.toMap(), where: 'id = ?', whereArgs: [dog.id]);
}

Future<void> deleteDog(int id) async {
  final db = await database;
  await db.delete('dogs', where: 'id = ?', whereArgs: [id]);
}

----------------------------------------

TITLE: Deleting ToDo Item from SQLite Database in Flutter
DESCRIPTION: This code snippet shows how to delete a ToDo item from the SQLite database using the sqflite package. It returns a Result object indicating success or failure of the operation.

LANGUAGE: dart
CODE:
Future<Result<void>> delete(int id) async {
  try {
    final rowsDeleted = await _database!.delete(
      _kTableTodo,
      where: '$_kColumnId = ?',
      whereArgs: [id],
    );
    if (rowsDeleted == 0) {
      return Result.error(Exception('No todo found with id $id'));
    }
    return Result.ok(null);
  } on Exception catch (e) {
    return Result.error(e);
  }
}

----------------------------------------

TITLE: Error Message for Incorrect Parameter Type
DESCRIPTION: This plaintext snippet shows the error message that will be displayed if the old implementation is used after the change. It indicates that PointerEvent cannot be assigned to the parameter type PointerDownEvent.

LANGUAGE: plaintext
CODE:
super.addAllowedPointer(event); The argument type 'PointerEvent' can't be assigned to the parameter type 'PointerDownEvent'.
                                #argument_type_not_assignable

----------------------------------------

TITLE: Initializing macOS Catalina Support
DESCRIPTION: Upgrade path for Flutter to support macOS Catalina, iOS 13 and Xcode 11 compatibility

LANGUAGE: shell
CODE:
# Upgrade to Flutter 1.9.1 stable before upgrading to Catalina
flutter upgrade

----------------------------------------

TITLE: Original ButtonBar Implementation in Dart
DESCRIPTION: Example showing the original ButtonBar widget usage with button padding and overflow spacing configuration.

LANGUAGE: dart
CODE:
ButtonBar(
  buttonPadding: const EdgeInsets.all(8.0),
  overflowButtonSpacing: 8.0,
  children: <Widget>[
    TextButton(child: const Text('Button 1'), onPressed: () {}),
    TextButton(child: const Text('Button 2'), onPressed: () {}),
    TextButton(child: const Text('Button 3'), onPressed: () {}),
  ],
),

----------------------------------------

TITLE: Testing Modal Route Semantics - After Migration
DESCRIPTION: Updated test code that accounts for the new semantics node structure after the modal route semantics ordering change. The code includes an additional node check above the scope route.

LANGUAGE: dart
CODE:
import 'dart:ui';

import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/material.dart';

void main() {
  testWidgets('example test', (WidgetTester tester) async {
    final SemanticsHandle handle =
        tester.binding.pipelineOwner.ensureSemantics();

    // Build our app and trigger a frame.
    await tester.pumpWidget(MaterialApp(home: Scaffold(body: Text('test'))));

    final SemanticsNode root =
        tester.binding.pipelineOwner.semanticsOwner.rootSemanticsNode;

    final SemanticsNode firstNode = getChild(root);
    expect(firstNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));

    // Fixes the test by expecting an additional node above the scope route.
    final SemanticsNode secondNode = getChild(firstNode);
    expect(secondNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));

    final SemanticsNode thirdNode = getChild(secondNode);
    expect(thirdNode.rect, Rect.fromLTRB(0.0, 0.0, 800.0, 600.0));
    expect(thirdNode.hasFlag(SemanticsFlag.scopesRoute), true);

    final SemanticsNode forthNode = getChild(thirdNode);
    expect(forthNode.rect, Rect.fromLTRB(0.0, 0.0, 56.0, 14.0));
    expect(forthNode.label, 'test');
    handle.dispose();
  });
}

SemanticsNode getChild(SemanticsNode node) {
  SemanticsNode child;
  bool visiter(SemanticsNode target) {
    child = target;
    return false;
  }

  node.visitChildren(visiter);
  return child;
}

----------------------------------------

TITLE: Uninitialized Variables in JavaScript
DESCRIPTION: Shows that uninitialized variables in JavaScript have a value of undefined.

LANGUAGE: JavaScript
CODE:
// JavaScript
let name; // == undefined

----------------------------------------

TITLE: Binding Warning Example
DESCRIPTION: Example of a warning that may appear when migrating code to Flutter 3.0 due to the binding API simplification.

LANGUAGE: plaintext
CODE:
Warning: Operand of null-aware operation '!' has type 'SchedulerBinding' which excludes null.

----------------------------------------

TITLE: Migrating RouteSettings.copyWith Usage in Dart
DESCRIPTION: Shows how to migrate from the deprecated RouteSettings.copyWith method to using the RouteSettings constructor directly. The migration preserves the same functionality while using the more explicit constructor approach.

LANGUAGE: dart
CODE:
RouteSettings newSettings = oldSettings.copyWith(name: 'new name');

LANGUAGE: dart
CODE:
RouteSettings newSettings = RouteSettings(name: 'new name', arguments: oldSettings.arguments);

----------------------------------------

TITLE: PowerShell Command for Checking Paths
DESCRIPTION: Special command syntax for checking Flutter and Dart paths in PowerShell, using where.exe instead of where due to PowerShell alias conflicts.

LANGUAGE: console
CODE:
PS C:\> where.exe flutter dart

----------------------------------------

TITLE: Slowing Animations in Flutter
DESCRIPTION: This snippet demonstrates how to slow down animations in Flutter by 5 times for easier visual inspection. It uses the timeDilation property from the scheduler package.

LANGUAGE: dart
CODE:
import 'package:flutter/scheduler.dart';

void setSlowAnimations() {
  timeDilation = 5.0;
}

----------------------------------------

TITLE: Implementing Counter with LayoutBuilder in Flutter (After Migration)
DESCRIPTION: This code snippet shows the same Flutter app with the Counter widget using LayoutBuilder after the optimization. The counter increment now calls setState to ensure proper rebuilding of the widget.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: Counter(),
    );
  }
}

class Counter extends StatefulWidget {
  Counter({Key key}) : super(key: key);

  @override
  _CounterState createState() => _CounterState();
}

class _CounterState extends State<Counter> {
  int _counter = 0;

  @override
  Widget build(BuildContext context) {
    return Center(child: Container(
      child: LayoutBuilder(
        builder: (BuildContext context, BoxConstraints constraints) {
          return _ResizingBox(
            TextButton(
                onPressed: () {
                  setState(() {
                    _counter++;
                  });
                },
                child: Text('Increment Counter')),
            Text(_counter.toString()),
          );
        },
      ),
    ));
  }
}

class _ResizingBox extends StatefulWidget {
  _ResizingBox(this.child1, this.child2);

  final Widget child1;
  final Widget child2;

  @override
  State<StatefulWidget> createState() => _ResizingBoxState();
}

class _ResizingBoxState extends State<_ResizingBox>
    with SingleTickerProviderStateMixin {
  Animation animation;

  @override
  void initState() {
    super.initState();
    animation = AnimationController(
      vsync: this,
      duration: const Duration(minutes: 1),
    )
      ..forward()
      ..addListener(() {
        setState(() {});
      });
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        SizedBox(
          width: 100 + animation.value * 100,
          child: widget.child1,
        ),
        SizedBox(
          width: 100 + animation.value * 100,
          child: widget.child2,
        ),
      ],
    );
  }
}

----------------------------------------

TITLE: New Flutter Plugins Dependencies JSON Format
DESCRIPTION: Example of the new .flutter-plugins-dependencies JSON format that includes detailed dependency information, versions, and Flutter framework metadata.

LANGUAGE: json
CODE:
{
  "dependencyGraph": {
    "camera": {
      "name": "camera",
      "version": "0.10.0",
      "dependencies": {
        "flutter": "0.0.0"
      }
    },
    "shared_preferences": {
      "name": "shared_preferences",
      "version": "2.0.15",
      "dependencies": {
        "flutter": "0.0.0"
      }
    }
  },
  "flutter": {
    "frameworkRevision": "3a0f99d4f2",
    "channel": "stable"
  }
}

----------------------------------------

TITLE: Dart Configuration File Paths
DESCRIPTION: Lists the Dart configuration file paths that can be removed. These files contain Dart-specific settings and server information.

LANGUAGE: plaintext
CODE:
%LOCALAPPDATA%\.dartServer
%APPDATA%\.dart
%APPDATA%\.dart-tool

----------------------------------------

TITLE: Basic Flutter Lints Configuration
DESCRIPTION: Minimal configuration to enable flutter_lints package in a Flutter project's analysis_options.yaml file.

LANGUAGE: yaml
CODE:
include: package:flutter_lints/flutter.yaml

----------------------------------------

TITLE: Checking Node Version
DESCRIPTION: Command to verify the installed Node.js version

LANGUAGE: console
CODE:
node --version

----------------------------------------

TITLE: Using TextField Without Localization in Flutter
DESCRIPTION: This code snippet demonstrates the usage of TextField without proper localization, which will result in an assertion error.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(Foo());

class Foo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MediaQuery(
      data: const MediaQueryData(),
      child: Directionality(
        textDirection: TextDirection.ltr,
        child: Material(
          child: TextField(),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Importing MouseTracker from Rendering Package - Dart
DESCRIPTION: Code snippet showing how to import MouseTracker and related symbols from the Flutter rendering package after their migration from the gestures package. This import provides access to MouseDetectorAnnotationFinder, MouseTracker, MouseTrackerAnnotation, and various pointer event listeners.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

----------------------------------------

TITLE: Creating a RichText Widget with Multiple Text Styles
DESCRIPTION: Shows how to use RichText and TextSpan to display text with different styles within a single widget.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return RichText(
    text: TextSpan(
      text: 'Hello ',
      style: DefaultTextStyle.of(context).style,
      children: const <TextSpan>[
        TextSpan(text: 'bold', style: TextStyle(fontWeight: FontWeight.bold)),
        TextSpan(text: ' world!'),
      ],
    ),
  );
}

----------------------------------------

TITLE: Migrating Navigator.pop() Boolean Return Value
DESCRIPTION: Example showing how to migrate from depending on Navigator.pop() return value to using Navigator.canPop() for checking route stack status.

LANGUAGE: dart
CODE:
TextField(
  onTap: () {
    if (Navigator.pop(context))
      print('There still is at least one route after pop');
    else
      print('Oops! No more routes.');
  }
)

LANGUAGE: dart
CODE:
TextField(
  onTap: () {
    if (Navigator.canPop(context))
      print('There still is at least one route after pop');
    else
      print('Oops! No more routes.');
    // Our navigator pops the route anyway.
    Navigator.pop(context);
  }
)

----------------------------------------

TITLE: Checking Flutter and Dart Command Paths - Correct Configuration
DESCRIPTION: Example showing the correct output of 'where' command after fixing path order, with Flutter SDK commands appearing before Dart SDK commands.

LANGUAGE: console
CODE:
C:\>where flutter dart
C:\dev\src\flutter\bin\flutter
C:\dev\src\flutter\bin\flutter.bat
C:\dev\src\flutter\bin\dart
C:\dev\src\flutter\bin\dart.bat
C:\dev\src\dart-sdk\bin\dart.exe

----------------------------------------

TITLE: Migrating isKeyPressed and related functions in Flutter
DESCRIPTION: This snippet demonstrates how to migrate from using RawKeyEvent methods like isKeyPressed to the equivalent HardwareKeyboard methods in Flutter. It shows the changes needed to check for modifier keys and specific key presses.

LANGUAGE: dart
CODE:
KeyEventResult _handleKeyEvent(RawKeyEvent keyEvent) {
  if (keyEvent.isControlPressed ||
      keyEvent.isShiftPressed ||
      keyEvent.isAltPressed ||
      keyEvent.isMetaPressed) {
    print('Modifier pressed: $keyEvent');
  }
  if (keyEvent.isKeyPressed(LogicalKeyboardKey.keyA)) {
    print('Key A pressed.');
  }
  return KeyEventResult.ignored;
}

LANGUAGE: dart
CODE:
KeyEventResult _handleKeyEvent(KeyEvent _) {
  if (HardwareKeyboard.instance.isControlPressed ||
      HardwareKeyboard.instance.isShiftPressed ||
      HardwareKeyboard.instance.isAltPressed ||
      HardwareKeyboard.instance.isMetaPressed) {
    print('Modifier pressed: $keyEvent');
  }
  if (HardwareKeyboard.instance.isLogicalKeyPressed(LogicalKeyboardKey.keyA)) {
    print('Key A pressed.');
  }
  return KeyEventResult.ignored;
}

----------------------------------------

TITLE: Creating a Policy Class for Flutter App Behaviors
DESCRIPTION: This snippet shows how to create a separate Policy class to encapsulate platform-specific behavior decisions. This approach improves testability and maintainability of the code.

LANGUAGE: dart
CODE:
class Policy {

  bool shouldAllowPurchaseClick() {
    // Banned by Apple App Store guidelines. 
    return !Platform.isIOS;
  }
}

----------------------------------------

TITLE: Implementing TextInputClient With Scribble Support in Dart
DESCRIPTION: This code snippet demonstrates how to implement a custom TextInputClient with Scribble support. It includes the new methods showToolbar, insertTextPlaceholder, and removeTextPlaceholder required for Scribble functionality.

LANGUAGE: dart
CODE:
class MyCustomTextInputClient implements TextInputClient {
  ...
  @override
  void showToolbar() {
    ...
  }
  
  @override
  void insertTextPlaceholder(Size size) {
    ...
  }
  
  @override
  void removeTextPlaceholder() {
    ...
  }
}

----------------------------------------

TITLE: Widget Verification with integration_test
DESCRIPTION: Example showing how to verify widget display using integration_test's expect and findsOneWidget matcher.

LANGUAGE: dart
CODE:
testWidgets(
  'do not select any item, verify please select text is displayed',
  (tester) async {
    // load the PlantsApp widget
    await tester.pumpWidget(const PlantsApp());

    // wait for data to load
    await tester.pumpAndSettle();

    // Find widget with 'please select'
    final finder = find.text('Please select a plant from the list.');

    // Check if widget is displayed
    expect(finder, findsOneWidget);
  },
);

----------------------------------------

TITLE: Using Chip and RawChip Widgets with useDeleteButtonTooltip in Flutter
DESCRIPTION: This code snippet demonstrates the usage of Chip and RawChip widgets with the deprecated useDeleteButtonTooltip property to control the visibility of the delete button tooltip.

LANGUAGE: dart
CODE:
Chip(
  label: const Text('Disabled delete button tooltip'),
  onDeleted: _handleDeleteChip,
  useDeleteButtonTooltip: false,
);

RawChip(
  label: const Text('Enabled delete button tooltip'),
  onDeleted: _handleDeleteChip,
  useDeleteButtonTooltip: true,
);

----------------------------------------

TITLE: Updating State in Flutter without setState
DESCRIPTION: This code snippet demonstrates the incorrect way of updating state in a Flutter widget, where the buttonLabel is modified without calling setState, which may lead to issues after the optimization.

LANGUAGE: dart
CODE:
class FooState extends State<Foo> {
  String buttonLabel = 'Click Me';
  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () async {
        // Illegal state modification that should be wrapped in setState.
        buttonLabel = await Navigator.pushNamed(context, '/bar');
      },
      child: Text(buttonLabel),
    );
  }
}

----------------------------------------

TITLE: Installing Local Snap for Testing
DESCRIPTION: Command to install a locally built snap file for testing purposes.

LANGUAGE: console
CODE:
$ sudo snap install ./super-cool-app_0.1.0_amd64.snap --dangerous

----------------------------------------

TITLE: Displaying Flutter Analytics Configuration
DESCRIPTION: Command to display the current analytics setting for Flutter.

LANGUAGE: console
CODE:
$ flutter config

----------------------------------------

TITLE: Migrating BinaryMessenger Mock Handlers
DESCRIPTION: Code example showing how to migrate BinaryMessenger mock handler implementation from the old pattern to the new TestDefaultBinaryMessenger pattern.

LANGUAGE: dart
CODE:
// old code
ServicesBinding.defaultBinaryMessenger.setMockMessageHandler(...);
ServicesBinding.defaultBinaryMessenger.checkMockMessageHandler(...);
// new code
tester.binding.defaultBinaryMessenger.setMockMessageHandler(...);
tester.binding.defaultBinaryMessenger.checkMockMessageHandler(...);

----------------------------------------

TITLE: Resetting view-specific properties in tests after migration
DESCRIPTION: Example of resetting view-specific properties in tests using the new view property after migration.

LANGUAGE: dart
CODE:
testWidget('test name', (WidgetTester tester) async {
  addTearDown(tester.view.resetDevicePixelRatio);
  addTearDown(tester.view.resetDisplayFeatures);
  addTearDown(tester.view.resetGestureSettings);
  addTearDown(tester.view.resetPadding);
  addTearDown(tester.view.resetPhysicalGeometry);
  addTearDown(tester.view.resetPhysicalSize);
  addTearDown(tester.view.resetSystemGestureInsets);
  addTearDown(tester.view.resetViewInsets);
  addTearDown(tester.view.resetViewPadding);
});

----------------------------------------

TITLE: Running Android Unit Tests via Gradle
DESCRIPTION: Command to execute Android JUnit tests for a Flutter plugin from the command line in the example/android directory.

LANGUAGE: shell
CODE:
./gradlew testDebugUnitTest

----------------------------------------

TITLE: Updating Kotlin Version in build.gradle
DESCRIPTION: Code diff showing how to update the Kotlin version in the Android build.gradle file from 1.3.50 to 1.5.31.

LANGUAGE: groovy
CODE:
  buildscript {
-     ext.kotlin_version = '1.3.50'
+     ext.kotlin_version = '1.5.31'

----------------------------------------

TITLE: Updating MediaQuery.of calls without nullOk in Dart
DESCRIPTION: Shows how to modify MediaQuery.of calls that previously used nullOk=false (default) to work with non-nullable return values, removing unnecessary non-null assertions or nullable type annotations.

LANGUAGE: dart
CODE:
MediaQueryData data = MediaQuery.of(context)!; // nullOk false by default.
MediaQueryData? data = MediaQuery.of(context); // nullOk false by default.

LANGUAGE: dart
CODE:
MediaQueryData data = MediaQuery.of(context); // No ! or ? operator here now.

----------------------------------------

TITLE: Launching iOS Simulator
DESCRIPTION: Command to start the iOS Simulator application

LANGUAGE: console
CODE:
open -a Simulator

----------------------------------------

TITLE: Testing Container Color After Migration
DESCRIPTION: Updated testing approach for container colors after the ColoredBox optimization, showing direct color property access and ColoredBox assertions.

LANGUAGE: dart
CODE:
testWidgets('Container color', (WidgetTester tester) async {
  await tester.pumpWidget(Container(color: Colors.red));

  final Container container = tester.widgetList<Container>().first;
  expect(container.color, Colors.red);
  // If your test needed to work directly with the BoxDecoration, it should
  // instead look for the ColoredBox, e.g.:
  expect(find.byType(BoxDecoration), findsNothing);
  expect(find.byType(ColoredBox), findsOneWidget);
});

----------------------------------------

TITLE: Using InputDecoration.maintainHintSize in Flutter (Recommended)
DESCRIPTION: This code snippet shows the recommended approach using InputDecoration.maintainHintSize parameter in a TextField widget. This replaces the deprecated maintainHintHeight and affects both intrinsic width and height.

LANGUAGE: dart
CODE:
TextField(
  indicator: InputDecoration(
    maintainHintSize: false,
  ),
),

----------------------------------------

TITLE: Updating build.gradle for AndroidX in Groovy
DESCRIPTION: Example of updating the build.gradle file in a Flutter Android plugin's example app to use AndroidX test dependencies instead of the old support library.

LANGUAGE: Groovy
CODE:
defaultConfig {
  ...
  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  ...
}

dependencies {
...
androidTestImplementation 'androidx.test:runner:1.2.0'
androidTestImplementation 'androidx.test:rules:1.2.0'
androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
...
}

----------------------------------------

TITLE: Creating Static Menu Structure in Flutter
DESCRIPTION: Defines a stateful widget 'Menu' that displays a list of titles and a 'Get Started' button in static locations. This forms the base structure for the animated menu.

LANGUAGE: dart
CODE:
class Menu extends StatefulWidget {
  const Menu({super.key});

  @override
  State<Menu> createState() => _MenuState();
}

class _MenuState extends State<Menu> {
  static const _menuTitles = [
    'Declarative Style',
    'Premade Widgets',
    'Stateful Hot Reload',
    'Native Performance',
    'Great Community',
  ];

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.white,
      child: Stack(
        fit: StackFit.expand,
        children: [_buildFlutterLogo(), _buildContent()],
      ),
    );
  }

  Widget _buildFlutterLogo() {
    // TODO: We'll implement this later.
    return Container();
  }

  Widget _buildContent() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 16),
        ..._buildListItems(),
        const Spacer(),
        _buildGetStartedButton(),
      ],
    );
  }

  List<Widget> _buildListItems() {
    final listItems = <Widget>[];
    for (var i = 0; i < _menuTitles.length; ++i) {
      listItems.add(
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 36, vertical: 16),
          child: Text(
            _menuTitles[i],
            textAlign: TextAlign.left,
            style: const TextStyle(fontSize: 24, fontWeight: FontWeight.w500),
          ),
        ),
      );
    }
    return listItems;
  }

  Widget _buildGetStartedButton() {
    return SizedBox(
      width: double.infinity,
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            shape: const StadiumBorder(),
            backgroundColor: Colors.blue,
            padding: const EdgeInsets.symmetric(horizontal: 48, vertical: 14),
          ),
          onPressed: () {},
          child: const Text(
            'Get Started',
            style: TextStyle(color: Colors.white, fontSize: 22),
          ),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Updating MenuItemButton Text Style in Flutter
DESCRIPTION: Demonstrates how to update the MenuItemButton to use the previous default text style (TextTheme.bodyLarge) after the migration to Material 3.

LANGUAGE: dart
CODE:
MenuItemButton(
  style: MenuItemButton.styleFrom(
    textStyle: Theme.of(context).textTheme.bodyLarge,
  ),
  child: Text(MenuEntry.about.label),
  onPressed: () => _activate(MenuEntry.about),
),

LANGUAGE: dart
CODE:
menuButtonTheme: MenuButtonThemeData(
  style: MenuItemButton.styleFrom(
    textStyle: Theme.of(context).textTheme.bodyLarge,
  ),
),

----------------------------------------

TITLE: Accessing text scale factor before migration
DESCRIPTION: Example of accessing text scale factor using the deprecated window property before migration.

LANGUAGE: dart
CODE:
double getTextScaleFactor() {
  return WidgetsBinding.instance.window.textScaleFactor;
}

----------------------------------------

TITLE: InputDecoration.collapsed Usage After Migration
DESCRIPTION: Updated example showing correct usage of InputDecoration.collapsed constructor with only relevant parameters.

LANGUAGE: dart
CODE:
InputDecoration.collapsed(
  hintText: 'Hint',
),

----------------------------------------

TITLE: Overriding addAllowedPointer in CustomGestureRecognizer (Before Migration)
DESCRIPTION: This snippet shows how CustomGestureRecognizer, a subclass of ScaleGestureRecognizer, overrides the addAllowedPointer method before the migration. It accepts a PointerEvent parameter, which is now considered incorrect.

LANGUAGE: dart
CODE:
class CustomGestureRecognizer extends ScaleGestureRecognizer {
  @override
  void addAllowedPointer(PointerEvent event) {
    // insert custom handling of event here...
    super.addAllowedPointer(event);
  }
}

----------------------------------------

TITLE: Configuring ABI Filters for Flutter Support in Kotlin
DESCRIPTION: This Kotlin code snippet demonstrates how to configure ABI filters in the Android Gradle plugin to limit supported architectures for Flutter integration.

LANGUAGE: kotlin
CODE:
android {
    //...
    defaultConfig {
        ndk {
            // Filter for architectures supported by Flutter
            abiFilters += listOf("armeabi-v7a", "arm64-v8a", "x86_64")
        }
    }
}

----------------------------------------

TITLE: Handling AppLifecycleState in Dart (After Migration)
DESCRIPTION: This code snippet demonstrates how to update the switch statement to include the new AppLifecycleState.hidden enum value. It shows how to handle the new state along with existing visible and non-visible app states.

LANGUAGE: dart
CODE:
void didChangeAppLifecycleState(AppLifecycleState state) {
  switch (state) {
    case AppLifecycleState.resumed:
    case AppLifecycleState.inactive:
      // Do something when the app is visible...
      break;
    case AppLifecycleState.hidden:  // <-- This is the new state.
    case AppLifecycleState.paused:
    case AppLifecycleState.detached:
      // Do something when the app is not visible...
      break;
  }
}

----------------------------------------

TITLE: Logging Custom Object Data
DESCRIPTION: Example showing how to log custom object data using JSON encoding and the error parameter of developer.log()

LANGUAGE: dart
CODE:
import 'dart:convert';
import 'dart:developer' as developer;

void main() {
  var myCustomObject = MyCustomObject();

  developer.log(
    'log me',
    name: 'my.app.category',
    error: jsonEncode(myCustomObject),
  );
}

----------------------------------------

TITLE: Using TestWidgetsFlutterBinding.clock.now Function in Dart
DESCRIPTION: Migration option 3: Demonstrates how to modify an API to accept a DateTime function instead of a Clock object, making it compatible with both clock implementations.

LANGUAGE: dart
CODE:
testWidgets('some test', (WidgetTester tester) {
  modifiedApiThatTakesANowFunction(tester.binding.clock.now);
});

----------------------------------------

TITLE: Importing Firebase and Controller in Play Session
DESCRIPTION: Import statements for Firestore and the custom Firestore controller in the play session screen.

LANGUAGE: dart
CODE:
import 'package:cloud_firestore/cloud_firestore.dart';
import '../multiplayer/firestore_controller.dart';

----------------------------------------

TITLE: Running Flutter Web in Default Mode
DESCRIPTION: Commands to run and build Flutter web applications in default mode using the canvaskit renderer.

LANGUAGE: console
CODE:
flutter run -d chrome
flutter build web

----------------------------------------

TITLE: Migrating ColorScheme in Flutter Material 3
DESCRIPTION: Examples showing how to update ColorScheme implementation from Material 2 to Material 3, including using ColorScheme.fromSeed and handling background colors.

LANGUAGE: dart
CODE:
theme: ThemeData(
  colorScheme: ColorScheme.light(primary: Colors.blue),
),

LANGUAGE: dart
CODE:
theme: ThemeData(
  colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
),

----------------------------------------

TITLE: Error Messages for Deprecated Methods
DESCRIPTION: Example error messages that developers may encounter when using the deprecated platform channel testing methods.

LANGUAGE: plaintext
CODE:
  error - The method 'setMockMessageHandler' isn't defined for the type 'BinaryMessenger' at test/sensors_test.dart:64:8 - (undefined_method)

  error • The method 'setMockMethodCallHandler' isn't defined for the type 'MethodChannel' • test/widgets/editable_text_test.dart:5623:30 • undefined_method

[error] The method 'setMockMessageHandler' isn't defined for the type 'BasicMessageChannel' (test/material/feedback_test.dart:37:36)

----------------------------------------

TITLE: Implementing TextInputClient with Empty insertContent Method
DESCRIPTION: Example of a custom TextInputClient implementation with an empty insertContent method for cases where rich content insertion is not needed.

LANGUAGE: dart
CODE:
class MyCustomTextInputClient implements TextInputClient {
  // ...
  @override
  void insertContent() {}
  // ...
}

----------------------------------------

TITLE: Adding Flutter Web Plugins Dependency in YAML
DESCRIPTION: This snippet shows how to include flutter_web_plugins as an SDK dependency in the pubspec.yaml file. This is necessary to use the usePathUrlStrategy function.

LANGUAGE: yaml
CODE:
dependencies:
  flutter:
    sdk: flutter
  flutter_web_plugins:
    sdk: flutter

----------------------------------------

TITLE: Programmatic Breakpoints
DESCRIPTION: Example showing how to set conditional programmatic breakpoints using the debugger() statement

LANGUAGE: dart
CODE:
import 'dart:developer';

void someFunction(double offset) {
  debugger(when: offset > 30);
  // ...
}

----------------------------------------

TITLE: Migrating TextTheme Properties in Dart
DESCRIPTION: Example of migrating from deprecated TextStyle properties in TextTheme to their new equivalents. This change aligns the naming convention with the updated Material Design specification.

LANGUAGE: dart
CODE:
// TextTheme
// Base constructor
TextTheme(
  display4: displayStyle4,
  display3: displayStyle3,
  display2: displayStyle2,
  display1: displayStyle1,
  headline: headlineStyle,
  title: titleStyle,
  subhead: subheadStyle,
  body2: body2Style,
  body1: body1Style,
  caption: captionStyle,
  button: buttonStyle,
  subtitle: subtitleStyle,
  overline: overlineStyle,
);

// copyWith
TextTheme.copyWith(
  display4: displayStyle4,
  display3: displayStyle3,
  display2: displayStyle2,
  display1: displayStyle1,
  headline: headlineStyle,
  title: titleStyle,
  subhead: subheadStyle,
  body2: body2Style,
  body1: body1Style,
  caption: captionStyle,
  button: buttonStyle,
  subtitle: subtitleStyle,
  overline: overlineStyle,
);

// Getters
TextStyle style;
style = textTheme.display4;
style = textTheme.display3;
style = textTheme.display2;
style = textTheme.display1;
style = textTheme.headline;
style = textTheme.title;
style = textTheme.subhead;
style = textTheme.body2;
style = textTheme.body1;
style = textTheme.caption;
style = textTheme.button;
style = textTheme.subtitle;
style = textTheme.overline;

LANGUAGE: dart
CODE:
// TextTheme
// Base constructor
TextTheme(
  headline1: displayStyle4,
  headline2: displayStyle3,
  headline3: displayStyle2,
  headline4: displayStyle1,
  headline5: headlineStyle,
  headline6: titleStyle,
  subtitle1: subheadStyle,
  bodyText1: body2Style,
  bodyText2: body1Style,
  caption: captionStyle,
  button: buttonStyle,
  subtitle2: subtitleStyle,
  overline: overlineStyle,
);

TextTheme.copyWith(
  headline1: displayStyle4,
  headline2: displayStyle3,
  headline3: displayStyle2,
  headline4: displayStyle1,
  headline5: headlineStyle,
  headline6: titleStyle,
  subtitle1: subheadStyle,
  bodyText1: body2Style,
  bodyText2: body1Style,
  caption: captionStyle,
  button: buttonStyle,
  subtitle2: subtitleStyle,
  overline: overlineStyle,
);

TextStyle style;
style = textTheme.headline1;
style = textTheme.headline2;
style = textTheme.headline3;
style = textTheme.headline4;
style = textTheme.headline5;
style = textTheme.headline6;
style = textTheme.subtitle1;
style = textTheme.bodyText1;
style = textTheme.bodyText2;
style = textTheme.caption;
style = textTheme.button;
style = textTheme.subtitle2;
style = textTheme.overline;

----------------------------------------

TITLE: Widget Tree Dumping
DESCRIPTION: Example showing how to dump the widget tree for debugging layout and widget hierarchy issues

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(home: AppHome()));
}

class AppHome extends StatelessWidget {
  const AppHome({super.key});

  @override
  Widget build(BuildContext context) {
    return Material(
      child: Center(
        child: TextButton(
          onPressed: () {
            debugDumpApp();
          },
          child: const Text('Dump Widget Tree'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Creating package:quiver Clock from package:clock Clock in Dart
DESCRIPTION: Migration option 1: Shows how to create a package:quiver Clock instance from the new package:clock Clock, resolving type mismatch issues.

LANGUAGE: dart
CODE:
testWidgets('some test', (WidgetTester tester) {
  someApiThatWantsAQuiverClock(Clock(tester.binding.clock.now));
});

----------------------------------------

TITLE: Console Commands for Font Directory Setup
DESCRIPTION: Terminal commands to set up the font directory structure and import font files

LANGUAGE: console
CODE:
$ mv /path/to/my_app /path/to/custom_fonts
$ cd /path/to/custom_fonts
$ mkdir fonts
$ cp ~/Downloads/*.ttf ./fonts

----------------------------------------

TITLE: InputDecoration.collapsed Usage Before Migration
DESCRIPTION: Example showing deprecated usage of InputDecoration.collapsed constructor with invalid floating label parameters that have no effect.

LANGUAGE: dart
CODE:
InputDecoration.collapsed(
  hintText: 'Hint',
  floatingLabelAlignment: FloatingLabelAlignment.center,
  floatingLabelBehavior: FloatingLabelBehavior.auto,
),

----------------------------------------

TITLE: Error Message for Outdated Kotlin Version
DESCRIPTION: The error message displayed when attempting to build a Flutter Android app with an outdated Kotlin version.

LANGUAGE: plaintext
CODE:
┌─ Flutter Fix ────────────────────────────────────────────────────────────┐
│                                                                          │
│ [!] Your project requires a newer version of the Kotlin Gradle plugin.   │
│ Find the latest version on                                               │
│ https://kotlinlang.org/docs/gradle.html#plugin-and-versions, then update │
│ <path-to-app>/android/build.gradle:                                      │
│ ext.kotlin_version = '<latest-version>'                                  │
│                                                                          │
└──────────────────────────────────────────────────────────────────────────┘

----------------------------------------

TITLE: Custom Widgets for Ignoring Pointer Events Without Modifying Semantics in Flutter
DESCRIPTION: This snippet provides custom implementations of IgnorePointer, AbsorbPointer, and SliverIgnorePointer that ignore pointer events without modifying the semantics tree. These can be used as replacements when ignoringSemantics was previously set to false.

LANGUAGE: dart
CODE:
/// A widget ignores pointer events without modifying the semantics tree.
class _IgnorePointerWithSemantics extends SingleChildRenderObjectWidget {
  const _IgnorePointerWithSemantics({
    super.child,
  });

  @override
  _RenderIgnorePointerWithSemantics createRenderObject(BuildContext context) {
    return _RenderIgnorePointerWithSemantics();
  }
}

class _RenderIgnorePointerWithSemantics extends RenderProxyBox {
  _RenderIgnorePointerWithSemantics();

  @override
  bool hitTest(BoxHitTestResult result, { required Offset position }) => false;
}

/// A widget absorbs pointer events without modifying the semantics tree.
class _AbsorbPointerWithSemantics extends SingleChildRenderObjectWidget {
  const _AbsorbPointerWithSemantics({
    super.child,
  });

  @override
  _RenderAbsorbPointerWithSemantics createRenderObject(BuildContext context) {
    return _RenderAbsorbPointerWithSemantics();
  }
}

class _RenderAbsorbPointerWithSemantics extends RenderProxyBox {
  _RenderAbsorbPointerWithSemantics();

  @override
  bool hitTest(BoxHitTestResult result, { required Offset position }) {
    return size.contains(position);
  }
}

/// A sliver ignores pointer events without modifying the semantics tree.
class _SliverIgnorePointerWithSemantics extends SingleChildRenderObjectWidget {
  const _SliverIgnorePointerWithSemantics({
    super.child,
  });

  @override
  _RenderSliverIgnorePointerWithSemantics createRenderObject(BuildContext context) {
    return _RenderSliverIgnorePointerWithSemantics();
  }
}

class _RenderSliverIgnorePointerWithSemantics extends RenderProxySliver {
  _RenderSliverIgnorePointerWithSemantics();

  @override
  bool hitTest(BoxHitTestResult result, { required Offset position }) => false;
}

----------------------------------------

TITLE: Updating RenderObjectElement Methods in Flutter
DESCRIPTION: Shows how to migrate from deprecated RenderObjectElement methods to their new counterparts with updated function signatures for inserting, moving, and removing child render objects.

LANGUAGE: dart
CODE:
element.insertChildRenderObject(child, slot);
element.moveChildRenderObject(child, slot);
element.removeChildRenderObject(child);

LANGUAGE: dart
CODE:
element.insertRenderObjectChild(child, slot);
element.moveRenderObjectChild(child, oldSlot, newSlot);
element.removeRenderObjectChild(child, slot);

----------------------------------------

TITLE: Pre-Migration Form Validation in Flutter
DESCRIPTION: Example showing Form validation using the deprecated autovalidate parameter in Flutter.

LANGUAGE: dart
CODE:
class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return FormField(
      autovalidate: true,
      builder: (FormFieldState state) {
        return Container();
      },
    );
  }
}

----------------------------------------

TITLE: Running Flutter Example Apps Commands
DESCRIPTION: Series of commands to create, analyze, test and run Flutter example applications. These commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT

LANGUAGE: bash
CODE:
cd $PROJECT

LANGUAGE: bash
CODE:
dart analyze

LANGUAGE: bash
CODE:
flutter test

LANGUAGE: bash
CODE:
flutter run

----------------------------------------

TITLE: Creating Flutter App via Terminal
DESCRIPTION: Commands for creating a new Flutter application using the Flutter CLI. Shows basic create command with empty template option and project naming.

LANGUAGE: console
CODE:
$ flutter create --empty

LANGUAGE: console
CODE:
$ flutter create my_app

LANGUAGE: console
CODE:
$ cd my_app

----------------------------------------

TITLE: Implementing Temporary TextEditingClient Interface in Dart
DESCRIPTION: This snippet shows how to create a temporary abstract class to add the new currentTextEditingValue getter before the change lands in the framework. It allows for early migration and can be removed later.

LANGUAGE: dart
CODE:
abstract class _TemporaryTextEditingClient {
  TextEditingValue get currentTextEditingValue;
}

----------------------------------------

TITLE: Locking Device Orientation in Flutter
DESCRIPTION: Shows how to lock the device orientation to specific modes using SystemChrome.setPreferredOrientations().

LANGUAGE: dart
CODE:
void main() {
  WidgetsFlutterBinding.ensureInitialized();
  SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]);
  runApp(const MyApp());
}

----------------------------------------

TITLE: Running Flutter Web in WebAssembly Mode
DESCRIPTION: Commands to run and build Flutter web applications in WebAssembly mode, which enables both skwasm and canvaskit renderers.

LANGUAGE: console
CODE:
flutter run -d chrome --wasm
flutter build web --wasm

----------------------------------------

TITLE: Updating App Build Gradle for GMS and Crashlytics
DESCRIPTION: Adding Google Mobile Services and Crashlytics plugin declarations to the plugins block in android/app/build.gradle.

LANGUAGE: groovy
CODE:
plugins {
    id "com.android.application"
    id "dev.flutter.flutter-gradle-plugin"
    id "org.jetbrains.kotlin.android"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

----------------------------------------

TITLE: Examining Legacy Android Gradle Build File
DESCRIPTION: Example of a legacy android/build.gradle file showing the buildscript block with AGP and Kotlin version declarations.

LANGUAGE: groovy
CODE:
buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(':app')
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

----------------------------------------

TITLE: Generating Widget Cards with Liquid and HTML
DESCRIPTION: This snippet generates a grid of cards for each Flutter widget, including images, names, and descriptions. It uses Liquid templating to iterate through the sorted widgets and conditional statements to handle different image types.

LANGUAGE: liquid
CODE:
<div class="card-grid">
{% for comp in sorted -%}
  <a class="card outlined-card" href="{{comp.link}}">
    <div class="card-image-holder">
      {% if comp.vector -%}
        {{comp.vector}}
      {% elsif comp.image -%}
        <img alt="Rendered image or visualization of the {{comp.name}} widget." src="{{comp.image.src}}">
      {% else -%}
        <img alt="Flutter logo for widget missing visualization image." src="/assets/images/docs/catalog-widget-placeholder.png" aria-hidden="true">
      {% endif -%}
    </div>
    <div class="card-header">
      <span class="card-title">{{comp.name}}</span>
    </div>
    <div class="card-content">
      <p class="card-text">{{ comp.description | truncatewords: 25 }}</p>
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Legacy ImageProvider Implementation
DESCRIPTION: Example of the old pattern for implementing ImageProvider before the resolve method changes.

LANGUAGE: dart
CODE:
class MyImageProvider extends ImageProvider<Object> {
  @override
  ImageStream resolve(ImageConfiguration configuration) {
    // create stream
    // set up error handling
    // interact with ImageCache
    // call obtainKey/load, etc.
  }
  ...
}

----------------------------------------

TITLE: Testing Container Color Before Migration
DESCRIPTION: Example of how container color testing was performed before the ColoredBox optimization, using BoxDecoration assertions.

LANGUAGE: dart
CODE:
testWidgets('Container color', (WidgetTester tester) async {
  await tester.pumpWidget(Container(color: Colors.red));

  final Container container = tester.widgetList<Container>().first;
  expect(container.decoration.color, Colors.red);
  // Or, a test may have specifically looked for the BoxDecoration, e.g.:
  expect(find.byType(BoxDecoration), findsOneWidget);
});

----------------------------------------

TITLE: Implementing TextInputClient After Migration with Custom Logic
DESCRIPTION: Example of a custom TextInputClient implementation after adding the insertContent method with custom logic.

LANGUAGE: dart
CODE:
class MyCustomTextInputClient implements TextInputClient {
  // ...
  @override
  void insertContent() {
    // ...
  }
  // ...
}

----------------------------------------

TITLE: Setting up and Running Flutter Example Apps
DESCRIPTION: A sequence of commands to initialize, analyze, test and run Flutter example applications. Commands should be executed from the repository root, where $PROJECT represents the specific app project path.

LANGUAGE: shell
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run

----------------------------------------

TITLE: Implementing Multiple Commands in ViewModel
DESCRIPTION: Shows how to define and use multiple Command objects in a single ViewModel to handle different actions.

LANGUAGE: dart
CODE:
class HomeViewModel2 extends ChangeNotifier {
  HomeViewModel2() {
    load = Command(_load)..execute();
    delete = Command(_delete);
  }

  User? get user => // ...

  late final Command load;

  late final Command delete;

  Future<void> _load() async {
    // load user
  }

  Future<void> _delete() async {
    // delete user
  }
}

----------------------------------------

TITLE: Basic TextField with maxLength Before Migration
DESCRIPTION: Example of TextField implementation before the migration using default or explicit maxLengthEnforced parameter.

LANGUAGE: dart
CODE:
TextField(maxLength: 6)

LANGUAGE: dart
CODE:
TextField(
  maxLength: 6,
  maxLengthEnforced: true,
)

----------------------------------------

TITLE: Highlighting Repaints in Flutter
DESCRIPTION: Example code showing how to detect performance issues by highlighting repainted areas, demonstrating use of RepaintBoundary

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';

void highlightRepaints() {
  debugRepaintRainbowEnabled = true;
}

----------------------------------------

TITLE: Updating Golden Files for Flutter Tests
DESCRIPTION: This console command updates the golden files used in Flutter tests to reflect the new default BorderRadius of Dialog widgets. It should be run if developers prefer the new behavior but have failing golden file tests.

LANGUAGE: console
CODE:
flutter test --update-goldens

----------------------------------------

TITLE: Configuring iOS Deep Linking Flag
DESCRIPTION: Sets the Flutter deep linking enabled flag to false in the iOS info.plist file. This configuration is necessary when using third-party deep linking plugins to prevent conflicts.

LANGUAGE: xml
CODE:
 <key>FlutterDeepLinkingEnabled</key>
 <false/>

----------------------------------------

TITLE: Legacy Gradle Plugin Configuration
DESCRIPTION: Old settings.gradle configuration that explicitly reads the .flutter-plugins file to configure Android plugin projects.

LANGUAGE: groovy
CODE:
include ':app'

def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()

def plugins = new Properties()
def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
if (pluginsFile.exists()) {
    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
}

plugins.each { name, path ->
    def pluginDirectory = flutterProjectRoot.resolve(path).resolve('android').toFile()
    include ":$name"
    project(":$name").projectDir = pluginDirectory
}

----------------------------------------

TITLE: Building Snap with LXD Container Backend
DESCRIPTION: Command to build a snap using the Snapcraft tool with the LXD container backend.

LANGUAGE: console
CODE:
$ snapcraft --use-lxd

----------------------------------------

TITLE: Scaling Components in CSS
DESCRIPTION: Scales a div element by 1.5 using the transform property in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    transform: scale(1.5);
}

----------------------------------------

TITLE: Extending HomeViewModel with Multiple Actions
DESCRIPTION: Expands the HomeViewModel to include separate running and error states for multiple actions (load and edit).

LANGUAGE: dart
CODE:
class HomeViewModel extends ChangeNotifier {
  User? get user => // ...

  bool get runningLoad => // ...

  Exception? get errorLoad => // ...

  bool get runningEdit => // ...

  Exception? get errorEdit => // ...

  void load() {
    // load user
  }

  void edit(String name) {
    // edit user
  }
}

----------------------------------------

TITLE: Implementing New Color Methods in Custom Color Classes in Dart
DESCRIPTION: Shows how to implement new methods required by the Color interface in custom classes that implement Color, focusing on converting existing integer-based properties to normalized floating-point values.

LANGUAGE: dart
CODE:
class Foo implements Color {
  int _red;

  @override
  double get r => _red / 255.0;
}

----------------------------------------

TITLE: Embedding YouTube Video in Flutter Documentation
DESCRIPTION: This snippet demonstrates how to embed a YouTube video in Flutter documentation using a custom Liquid tag.

LANGUAGE: Liquid
CODE:
{% ytEmbed 'zKQYGKAe5W8?start=2778', 'Flutter Forward 2023 Livestream' %}

----------------------------------------

TITLE: Building Flutter Web App for Release
DESCRIPTION: This command generates a release build of a Flutter web app, populating the build/web directory with built files.

LANGUAGE: console
CODE:
$ flutter build web

----------------------------------------

TITLE: Disabling Text Scaling for Icon Fonts in Dart
DESCRIPTION: Shows how to use MediaQuery.withNoTextScaling to disable text scaling for icon fonts.

LANGUAGE: dart
CODE:
MediaQuery.withNoTextScaling(
  child: IconTheme(
    data: ...
    child: icon,
  ),
)

----------------------------------------

TITLE: Original ButtonBarTheme in ThemeData
DESCRIPTION: Example of ButtonBarTheme configuration within ThemeData that should be removed.

LANGUAGE: dart
CODE:
ThemeData(
  buttonBarTheme: ButtonBarThemeData(
    alignment: MainAxisAlignment.center,
  ),
),

----------------------------------------

TITLE: Checking Wasm Runtime Environment
DESCRIPTION: Dart code snippets to verify if the application is running with WebAssembly at runtime using environment variables or number representation tests.

LANGUAGE: dart
CODE:
const isRunningWithWasm = bool.fromEnvironment('dart.tool.dart2wasm');

LANGUAGE: dart
CODE:
final isRunningWithWasm = identical(double.nan, double.nan);

----------------------------------------

TITLE: Modern Gradle Plugin Configuration
DESCRIPTION: Updated settings.gradle.kts configuration using the new flutter-plugin-loader Gradle plugin to handle plugin dependencies.

LANGUAGE: kotlin
CODE:
pluginManagement {
    val flutterSdkPath = run {
        val properties = java.util.Properties()
        file("local.properties").inputStream().use { properties.load(it) }
        val flutterSdkPath = properties.getProperty("flutter.sdk")
        require(flutterSdkPath != null) { "flutter.sdk not set in local.properties" }
        flutterSdkPath
    }

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id("dev.flutter.flutter-plugin-loader") version "1.0.0"
    id("com.android.application") version "8.1.0" apply false
    id("org.jetbrains.kotlin.android") version "1.8.22" apply false
}

include(":app")

----------------------------------------

TITLE: Cloning Repository with Submodules
DESCRIPTION: Command to clone the Flutter website repository with its submodules

LANGUAGE: console
CODE:
git clone --recurse-submodules https://github.com/flutter/website.git

----------------------------------------

TITLE: Initializing Git Submodules
DESCRIPTION: Command to initialize and update git submodules after cloning

LANGUAGE: console
CODE:
git submodule update --init --recursive

----------------------------------------

TITLE: Flutter Documentation Front Matter in Markdown
DESCRIPTION: YAML front matter configuration for the Flutter documentation page, defining the title, description, and navigation structure.

LANGUAGE: markdown
CODE:
---
title: Architecting Flutter apps
short-title: Architecture
description: >
  Learn how to structure Flutter apps.
toc: false
next:
  title: Architecture concepts
  path: /app-architecture/concepts
---

----------------------------------------

TITLE: Setting view-specific properties in tests after migration
DESCRIPTION: Example of setting view-specific properties in tests using the new view property after migration.

LANGUAGE: dart
CODE:
testWidget('test name', (WidgetTester tester) async {
  tester.view.devicePixelRatio = 2.0;
  tester.view.displayFeatures = <DisplayFeatures>[];
  tester.view.gestureSettings = const GestureSettings(physicalTouchSlop: 100);
  tester.view.padding = FakeViewPadding.zero;
  tester.view.physicalGeometry = const Rect.fromLTRB(0,0, 500, 800);
  tester.view.physicalSize = const Size(300, 400);
  tester.view.systemGestureInsets = FakeViewPadding.zero;
  tester.view.viewInsets = FakeViewPadding.zero;
  tester.view.viewPadding = FakeViewPadding.zero;
});

----------------------------------------

TITLE: TextField without Length Enforcement After Migration
DESCRIPTION: Updated implementation using MaxLengthEnforcement.none to show length error without truncation.

LANGUAGE: dart
CODE:
TextField(
  maxLength: 6,
  maxLengthEnforcement: MaxLengthEnforcement.none,
)

----------------------------------------

TITLE: Using InputDecoration.maintainHintHeight in Flutter (Deprecated)
DESCRIPTION: This code snippet demonstrates the usage of the deprecated InputDecoration.maintainHintHeight parameter in a TextField widget. This approach is no longer recommended.

LANGUAGE: dart
CODE:
TextField(
  indicator: InputDecoration(
    maintainHintHeight: false,
  ),
),

----------------------------------------

TITLE: Resetting Clipboard with Null (Pre-migration)
DESCRIPTION: Example of resetting the clipboard using null before the migration. This code is no longer valid after the change.

LANGUAGE: dart
CODE:
void resetClipboard() {
  Clipboard.setData(ClipboardData(text: null));
}

----------------------------------------

TITLE: Using Enum.name and DiagnosticsProperty after migration in Dart
DESCRIPTION: Example of how to use Enum.name instead of describeEnum and DiagnosticsProperty instead of EnumProperty for non-Enum types after the migration in Flutter.

LANGUAGE: dart
CODE:
enum MyEnum { paper, rock }

print(MyEnum.paper.name); // output: paper

// TextInputType is not an Enum
properties.add(DiagnosticsProperty<TextInputType>( ... ));

----------------------------------------

TITLE: Defining TextScaler Abstract Class in Dart
DESCRIPTION: Introduces the new TextScaler abstract class that replaces textScaleFactor. It includes a scale method for scaling font sizes and a deprecated textScaleFactor getter for backward compatibility.

LANGUAGE: dart
CODE:
abstract class TextScaler { 
  double scale(double fontSize);
  double get textScaleFactor; // Deprecated. 
}

----------------------------------------

TITLE: Including Flutter Installation Requirements for Linux
DESCRIPTION: Template inclusion for base Linux requirements for Flutter development

LANGUAGE: markdown
CODE:
{% include docs/install/reqs/linux/base.md os=devos target=target %}

----------------------------------------

TITLE: Analyzing App Size for Various Platforms
DESCRIPTION: Commands to build and analyze app size for different platforms using the --analyze-size flag.

LANGUAGE: bash
CODE:
flutter build apk --analyze-size
flutter build appbundle --analyze-size
flutter build ios --analyze-size
flutter build linux --analyze-size
flutter build macos --analyze-size
flutter build windows --analyze-size

----------------------------------------

TITLE: Example Output of Flutter Size Analysis Command
DESCRIPTION: Sample output from running the Flutter build command with size analysis. It shows the total compressed size of the app and the location of the generated size analysis file.

LANGUAGE: plaintext
CODE:
flutter build apk --analyze-size --target-platform=android-arm64
...
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
app-release.apk (total compressed)                               6 MB
...
▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
A summary of your APK analysis can be found at: build/apk-code-size-analysis_01.json

----------------------------------------

TITLE: Displaying TextField Localization Error in Flutter
DESCRIPTION: This snippet shows the assertion error message when a TextField is used without proper localization.

LANGUAGE: plaintext
CODE:
No MaterialLocalizations found.
TextField widgets require MaterialLocalizations to be provided by a Localizations widget ancestor.
The material library uses Localizations to generate messages, labels, and abbreviations.
To introduce a MaterialLocalizations, either use a MaterialApp at the root of your application to
include them automatically, or add a Localization widget with a MaterialLocalizations delegate.
The specific widget that could not find a MaterialLocalizations ancestor was:
  TextField

----------------------------------------

TITLE: Symbol Export Declaration in Swift
DESCRIPTION: Code to mark functions as callable from C in Swift for FFI integration.

LANGUAGE: swift
CODE:
@_cdecl("myFunctionName")

----------------------------------------

TITLE: Correct Disposal Method in Flutter (After Migration)
DESCRIPTION: This code snippet demonstrates the correct way to dispose of an object, checking if the current code created the object before calling dispose().

LANGUAGE: dart
CODE:
if (xIsCreatedByMe) {
  x.dispose();
}

----------------------------------------

TITLE: Handling AppLifecycleState in Dart (Before Migration)
DESCRIPTION: This code snippet shows how to handle AppLifecycleState enum values in a switch statement before the addition of the 'hidden' state. It demonstrates handling visible and non-visible app states.

LANGUAGE: dart
CODE:
void didChangeAppLifecycleState(AppLifecycleState state) {
  switch (state) {
    case AppLifecycleState.resumed:
    case AppLifecycleState.inactive:
      // Do something when the app is visible...
      break;
    case AppLifecycleState.paused:
    case AppLifecycleState.detached:
      // Do something when the app is not visible...
      break;
  }
}

----------------------------------------

TITLE: Dart Platform View Import Declarations
DESCRIPTION: Required imports for implementing platform views in Flutter

LANGUAGE: dart
CODE:
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

----------------------------------------

TITLE: Modifying Existing ScrollBehavior in Flutter
DESCRIPTION: This snippet demonstrates how to copy and modify the existing ScrollBehavior for a specific widget to disable scrollbars.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
ScrollConfiguration(
  behavior: ScrollConfiguration.of(context).copyWith(scrollbars: false),
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
     return Text('Item $index');
    }
  ),
);

----------------------------------------

TITLE: Including Release Notes Template in Markdown
DESCRIPTION: Template include statement to pull in release notes content from an external markdown file named release-notes-2.37.2-src.md

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.37.2-src.md %}

----------------------------------------

TITLE: Building and Deploying
DESCRIPTION: Commands for building the site and deploying to Firebase

LANGUAGE: console
CODE:
./dash_site build
firebase deploy --only hosting

----------------------------------------

TITLE: Including Release Notes Template in Markdown
DESCRIPTION: Uses Jekyll/Liquid template syntax to include the content of release notes from an external markdown file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.14.0-src.md %}

----------------------------------------

TITLE: Previous AlertDialog Column Implementation in Dart
DESCRIPTION: Shows the original implementation where title and content widgets were listed consecutively in a Column widget without scrolling capability.

LANGUAGE: dart
CODE:
Column(
  mainAxisSize: MainAxisSize.min,
  crossAxisAlignment: CrossAxisAlignment.stretch,
  children: <Widget>[
    if (title != null)
      Padding(
        padding: titlePadding ?? EdgeInsets.fromLTRB(24, 24, 24, content == null ? 20 : 0),
        child: DefaultTextStyle(
          style: titleTextStyle ?? dialogTheme.titleTextStyle ?? theme.textTheme.title,
          child: Semantics(
          child: title,
          namesRoute: true,
          container: true,
          ),
        ),
      ),
    if (content != null)
      Flexible(
        child: Padding(
        padding: contentPadding,
        child: DefaultTextStyle(
          style: contentTextStyle ?? dialogTheme.contentTextStyle ?? theme.textTheme.subhead,
          child: content,
        ),
      ),
    ),
    // ...
  ],
);

----------------------------------------

TITLE: Creating ListView with Automatic Scrollbar on Desktop in Flutter
DESCRIPTION: This snippet demonstrates how to create a ListView after the automatic desktop Scrollbar feature was implemented. The Scrollbar is automatically applied on desktop platforms.

LANGUAGE: dart
CODE:
final ScrollController controller = ScrollController();
ListView.builder(
  controller: controller,
  itemBuilder: (BuildContext context, int index) {
   return Text('Item $index');
 }
);

----------------------------------------

TITLE: Migrating SystemNavigator.routeUpdated in Dart
DESCRIPTION: Demonstrates the migration from the deprecated routeUpdated method to routeInformationUpdated. This change consolidates route update methods and improves handling of single-entry history mode.

LANGUAGE: dart
CODE:
SystemNavigator.routeUpdated(routeName: 'foo', previousRouteName: 'bar');

LANGUAGE: dart
CODE:
SystemNavigator.routeInformationUpdated(location: 'foo');

----------------------------------------

TITLE: Incorrect Disposal Method in Flutter (Before Migration)
DESCRIPTION: This code snippet shows the incorrect way of disposing an object, which may lead to double disposal errors.

LANGUAGE: dart
CODE:
x.dispose();

----------------------------------------

TITLE: Creating a Row Layout in Flutter
DESCRIPTION: Demonstrates how to create a horizontal layout using the Row widget in Flutter.

LANGUAGE: dart
CODE:
@override
Widget build(BuildContext context) {
  return const Row(
    mainAxisAlignment: MainAxisAlignment.center,
    children: <Widget>[
      Text('Row One'),
      Text('Row Two'),
      Text('Row Three'),
      Text('Row Four'),
    ],
  );
}

----------------------------------------

TITLE: Implementing Basic Menu List Item in Flutter
DESCRIPTION: Creates a basic menu list item widget displaying food item details.

LANGUAGE: dart
CODE:
MenuListItem(
  name: item.name,
  price: item.formattedTotalItemPrice,
  photoProvider: item.imageProvider,
)

----------------------------------------

TITLE: Configuring Platform-Specific Sizing in Flutter using Liquid
DESCRIPTION: This snippet uses Liquid templating to set sizing values based on the target platform (desktop, mobile, web, or default). It allows for responsive design in a Flutter project by providing different dimensions for various device types.

LANGUAGE: Liquid
CODE:
{% if include.target == 'desktop' -%}
4.0 | 52.0 |
{% elsif include.target == 'mobile' -%}
10.0 | 10.0 |
{% elsif include.target == 'web' -%}
2.5 | 2.5 |
{% else -%}
11.0 | 60.0 |
{% endif -%}

----------------------------------------

TITLE: Loading Image Assets in Dart
DESCRIPTION: Demonstrates how to load an image asset using the AssetImage class in a Flutter widget's build method.

LANGUAGE: dart
CODE:
return const Image(image: AssetImage('assets/background.png'));

----------------------------------------

TITLE: Post-Migration Actions Widget Configuration in Dart
DESCRIPTION: Updated example showing the new way to configure Actions and Shortcuts widgets using Type-based action mapping and direct Intent instances.

LANGUAGE: dart
CODE:
class MyWidget extends StatelessWidget {
  // ...
  @override
  Widget build(BuildContext context) {
    return Shortcuts(
      shortcuts: <LogicalKeySet, Intent> {
        LogicalKeySet(LogicalKeyboardKey.enter): ActivateIntent,
      },
      child: Actions(
        actions: <Type, Action<Intent>>{
          ActivateIntent: ActivateAction(),
        },
        child: Container(),
      )
    );
  }
}

----------------------------------------

TITLE: Building Release Versions for Desktop Platforms
DESCRIPTION: Commands for generating release builds for Windows, macOS, and Linux desktop applications

LANGUAGE: console
CODE:
PS C:\> flutter build windows
$ flutter build macos
$ flutter build linux

----------------------------------------

TITLE: Camera Preview Rotation Calculation Formula
DESCRIPTION: Formula for calculating correct camera preview rotation based on sensor orientation and device orientation.

LANGUAGE: plaintext
CODE:
rotation = (sensorOrientationDegrees - deviceOrientationDegrees * sign + 360) % 360

----------------------------------------

TITLE: Migrating Stack Overflow Property to ClipBehavior in Flutter
DESCRIPTION: Demonstrates how to update the deprecated Stack.overflow property to the new Stack.clipBehavior property, unifying clip behaviors across the framework.

LANGUAGE: dart
CODE:
const Stack stack = Stack(overflow: Overflow.visible);
const Stack stack = Stack(overflow: Overflow.clip);

LANGUAGE: dart
CODE:
const Stack stack = Stack(clipBehavior: Clip.none);
const Stack stack = Stack(clipBehavior: Clip.hardEdge);

----------------------------------------

TITLE: App Clip Pod Installation Configuration in Ruby
DESCRIPTION: Podfile configuration to install Flutter dependencies for both main app and App Clip targets

LANGUAGE: ruby
CODE:
use_frameworks!
use_modular_headers!
flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

target 'Runner'
target '<name of your App Clip target>'

----------------------------------------

TITLE: Applying TextButtonTheme to a Widget Subtree in Flutter
DESCRIPTION: Shows how to apply a TextButtonTheme to a specific widget subtree.

LANGUAGE: dart
CODE:
TextButtonTheme(
  data: TextButtonThemeData(style: flatButtonStyle),
  child: myWidgetSubtree,
)

----------------------------------------

TITLE: Updated ThemeData without ButtonBarTheme
DESCRIPTION: Updated ThemeData implementation with ButtonBarTheme removed.

LANGUAGE: dart
CODE:
ThemeData(
  // ...
),

----------------------------------------

TITLE: Conditional Development Tools Display Template using Liquid
DESCRIPTION: Template logic that determines which development tools to display based on target platform. Handles Android/mobile, desktop Windows, and web development environments with specific version requirements and installation notes.

LANGUAGE: liquid
CODE:
{% if include.target == 'Android' %}
{% assign mod-target = 'mobile' %}
{% else %}
{% assign mod-target = include.target %}
{% endif %}

{% if mod-target == 'desktop' -%}

* [Visual Studio 2022][] to debug and compile native C++ Windows code.
  Make sure to install the **Desktop development with C++** workload.
  This enables building Windows app including all of its default components.
  **Visual Studio** is an IDE separate from **[Visual Studio _Code_][]**.

{% elsif mod-target == 'mobile' -%}

* [Android Studio][] {{site.appmin.android_studio}} or later
  to debug and compile Java or Kotlin code for Android.
  Flutter requires the full version of Android Studio.

{% elsif mod-target == 'web' -%}

* [Google Chrome][] to debug JavaScript code for web apps.

{% else -%}

* [Visual Studio 2022][] with the **Desktop development with C++** workload
  or [Build Tools for Visual Studio 2022][].
  This enables building Windows app including all of its default components.
  **Visual Studio** is an IDE separate from **[Visual Studio _Code_][]**.
* [Android Studio][] {{site.appmin.android_studio}} or later
  to debug and compile Java or Kotlin code for Android.
  Flutter requires the full version of Android Studio.
* The latest version of [Google Chrome][] to debug JavaScript code for web apps.

{% endif -%}

----------------------------------------

TITLE: Static Field Initialization Example
DESCRIPTION: Example demonstrating static field initialization behavior with hot reload.

LANGUAGE: dart
CODE:
const foo = 1;
int get bar => foo;
void onClick() {
  print(foo);
  print(bar);
}

----------------------------------------

TITLE: Updating Gradle Version Manually in Console
DESCRIPTION: This command updates the Gradle wrapper to version 7.6.1, which is compatible with Java 17 used in Android Studio Flamingo. The version can be any number between 7.3 and 7.6.1, inclusive.

LANGUAGE: console
CODE:
$ ./gradlew wrapper --gradle-version=7.6.1

----------------------------------------

TITLE: Updating VelocityTracker Constructor in Flutter
DESCRIPTION: Shows how to migrate from the deprecated default VelocityTracker constructor to the new VelocityTracker.withKind() constructor, which allows specifying a PointerDeviceKind.

LANGUAGE: dart
CODE:
final VelocityTracker tracker = VelocityTracker();

LANGUAGE: dart
CODE:
final VelocityTracker tracker = VelocityTracker.withKind(PointerDeviceKind.touch);

----------------------------------------

TITLE: Creating BottomNavigationBarItem with New Label in Dart
DESCRIPTION: This code snippet shows the updated way to create a BottomNavigationBarItem using the new 'label' parameter. It sets an icon and a string as the label.

LANGUAGE: dart
CODE:
BottomNavigationBarItem(
  icon: Icons.add,
  label: 'add',
)

----------------------------------------

TITLE: Adding Network Client Entitlement to macOS Entitlements Files for Flutter macOS Apps
DESCRIPTION: This XML snippet adds the network client entitlement to macOS entitlements files. It should be added to both DebugProfile.entitlements and Release.entitlements files in the macos/Runner directory. This entitlement is necessary for macOS apps to access the internet.

LANGUAGE: xml
CODE:
<!-- Required to fetch data from the internet. -->
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: Basic Parallax Recipe Widget Structure
DESCRIPTION: Initial setup of the ParallaxRecipe widget with a ScrollView and Column for list display.

LANGUAGE: dart
CODE:
class ParallaxRecipe extends StatelessWidget {
  const ParallaxRecipe({super.key});

  @override
  Widget build(BuildContext context) {
    return const SingleChildScrollView(child: Column(children: []));
  }
}

----------------------------------------

TITLE: Running Flutter Web Server Command
DESCRIPTION: Command to run Flutter web apps using a web server, allowing access through any browser. Note that debugging capabilities may be limited when not using Chrome.

LANGUAGE: bash
CODE:
flutter run -d web-server

----------------------------------------

TITLE: Configuring Jekyll Page Layout for Flutter Docs
DESCRIPTION: YAML front matter configuration for a Flutter documentation page, specifying the layout type, page title, short title, and description.

LANGUAGE: markdown
CODE:
---
layout: toc
title: Flutter reference docs
short-title: Reference
description: Miscellaneous reference docs relating to Flutter.
---

----------------------------------------

TITLE: Applying Updated CircularProgressIndicator Design App-wide in Flutter
DESCRIPTION: This code demonstrates how to update the entire app to use the new CircularProgressIndicator design by setting the ProgressIndicatorThemeData.year2023 property to false in the MaterialApp theme.

LANGUAGE: dart
CODE:
return MaterialApp(
  theme: ThemeData(progressIndicatorTheme: const ProgressIndicatorThemeData(year2023: false)),
        // ...
        CircularProgressIndicator(
          year2023: false,
          value: 0.5,
        ),
        // ...

----------------------------------------

TITLE: Retrieving Shader Persistent Cache on Android
DESCRIPTION: This snippet demonstrates how to retrieve the shader persistent cache from an Android device using ADB commands. It involves accessing the app's private folder, copying it to a public location, and then pulling it to the local machine.

LANGUAGE: shell
CODE:
adb shell
run-as <com.your_app_package_name>
cp <your_folder> <some_public_folder, e.g., /sdcard> -r
adb pull <some_public_folder/your_folder>

----------------------------------------

TITLE: Post-Migration Custom Action Implementation in Dart
DESCRIPTION: Updated example showing the new way to implement custom Actions using generic typing and simplified invocation.

LANGUAGE: dart
CODE:
class MyIntent extends Intent {
  const MyIntent();
}

class MyAction extends Action<MyIntent> {
  @override
  Object invoke(MyIntent intent) {
    // ...
  }
}

----------------------------------------

TITLE: Latest Release Announcements
DESCRIPTION: Markdown formatted text announcing Flutter releases and documentation updates

LANGUAGE: markdown
CODE:
## 14 May 2024: Google I/O 3.22 release

Flutter 3.22 is live! For more information, check out the [Flutter 3.22 umbrella blog post][3.22-umbrella] and the [Flutter 3.22 technical blog post][3.22-tech].

You might also check out the [Dart 3.4 release][] blog post. In particular, Dart now provides a "baked in" language macro, `JsonCodable`, for serializing and deserializing JSON data. A future (and unspecified) Dart release will allow you to create your own macros. To learn more, check out [dart.dev/go/macros][].

----------------------------------------

TITLE: Creating FFI Plugin using Flutter CLI
DESCRIPTION: Command to create a new Flutter FFI plugin named 'native_add' supporting multiple platforms.

LANGUAGE: console
CODE:
$ flutter create --platforms=android,ios,macos,windows,linux --template=plugin_ffi native_add
$ cd native_add

----------------------------------------

TITLE: Migrating GestureRecognizer.kind to supportedDevices in Dart
DESCRIPTION: Demonstrates how to update GestureRecognizer initialization from using the deprecated 'kind' property to the new 'supportedDevices' property. This change allows for multiple device types to be recognized for a gesture.

LANGUAGE: dart
CODE:
var myRecognizer = GestureRecognizer(
  kind: PointerDeviceKind.mouse,  
);

LANGUAGE: dart
CODE:
var myRecognizer = GestureRecognizer(
  supportedDevices: <PointerDeviceKind>[ PointerDeviceKind.mouse ],
);

----------------------------------------

TITLE: New ImageCache Logic in Dart
DESCRIPTION: Pseudocode representing the new ImageCache algorithm in Flutter. This version no longer increases maxByteSize for large images, only adding images that fit within the current maxByteSize.

LANGUAGE: dart
CODE:
// New logic pseudocode
void onLoadImage(Image image) {
  if (image.byteSize < _cache.maxByteSize) {
    _cache.add(image);
    while (_cache.count > _cache.maxCount
        || _cache.byteSize > cache.maxByteSize) {
      cache.discardOldestImage();
    }
  }
}

----------------------------------------

TITLE: Podfile Configuration
DESCRIPTION: Updates to the iOS Podfile to include new build configurations for staging and production schemes.

LANGUAGE: ruby
CODE:
project 'Runner', {
  ...
  'Debug' => :debug,
  'Debug-staging' => :debug,
  'Debug-production' => :debug,
  'Profile' => :release,
  'Profile-staging' => :release,
  'Profile-production' => :release,
  'Release' => :release,
  'Release-staging' => :release,
  'Release-production' => :release,
  ...


----------------------------------------

TITLE: Installing Chrome Browser via Linux Command Line
DESCRIPTION: A series of commands to download Google's signing key, set up the Chrome repository, and install Chrome using apt. This process includes importing Google's public key, configuring the package repository, and installing Chrome using apt-get.

LANGUAGE: console
CODE:
$ wget https://dl-ssl.google.com/linux/linux_signing_key.pub -O /tmp/google.pub
$ gpg --no-default-keyring \
        --keyring /etc/apt/keyrings/google-chrome.gpg \
        --import /tmp/google.pub
$ echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
$ sudo apt-get update -y; sudo apt-get install -y google-chrome-stable

----------------------------------------

TITLE: Dependency Override in Gradle
DESCRIPTION: Example of forcing a specific version of a library in Android Gradle build configuration

LANGUAGE: groovy
CODE:
configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:28.0-android'
    }
}

----------------------------------------

TITLE: Installing Required System Libraries for Linux Flutter App
DESCRIPTION: This command installs the necessary system libraries (GTK, blkid, and lzma) for a Linux Flutter application.

LANGUAGE: console
CODE:
$ sudo apt-get install libgtk-3-0 libblkid1 liblzma5

----------------------------------------

TITLE: Updating Draggable and LongPressDraggable dragAnchor in Dart
DESCRIPTION: This snippet shows how to update the deprecated dragAnchor property in Draggable and LongPressDraggable widgets to use the new dragAnchorStrategy property.

LANGUAGE: dart
CODE:
Draggable draggable = Draggable();
draggable = Draggable(dragAnchorStrategy: childDragAnchorStrategy);
draggable = Draggable(dragAnchorStrategy: pointerDragAnchorStrategy);

LongPressDraggable longPressDraggable = LongPressDraggable();
longPressDraggable = LongPressDraggable(dragAnchorStrategy: childDragAnchorStrategy);
longPressDraggable = LongPressDraggable(dragAnchorStrategy: pointerDragAnchorStrategy);

----------------------------------------

TITLE: Migrating Text Selection Theme in Flutter ThemeData
DESCRIPTION: Illustrates how to update ThemeData to use the new TextSelectionThemeData instead of individual text selection properties, providing more comprehensive theming for text selection.

LANGUAGE: dart
CODE:
ThemeData(
  useTextSelectionTheme: false,
  textSelectionColor: Colors.blue,
  cursorColor: Colors.green,
  textSelectionHandleColor: Colors.red,
);

LANGUAGE: dart
CODE:
ThemeData(
  textSelectionTheme: TextSelectionThemeData(
    selectionColor: Colors.blue,
    cursorColor: Colors.green,
    selectionHandleColor: Colors.red,
  ),
);

----------------------------------------

TITLE: Displaying Flutter Download Progress in VS Code Output Panel
DESCRIPTION: Shows the console output displayed in VS Code's Output panel while downloading and initializing the Flutter SDK. It includes checking the Dart SDK version, downloading components, and running initial setup commands.

LANGUAGE: console
CODE:
Checking Dart SDK version...
Downloading Dart SDK from the Flutter engine ...
Expanding downloaded archive...

----------------------------------------

TITLE: Applying Vertical Gradient in Dart
DESCRIPTION: Applies a vertical linear gradient to a Container widget's background using BoxDecoration in Flutter.

LANGUAGE: dart
CODE:
final container = Container(
  // grey box
  width: 320,
  height: 240,
  color: Colors.grey[300],
  child: Center(
    child: Container(
      // red box
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment(0.0, 0.6),
          colors: <Color>[
            Color(0xffef5350),
            Color(0x00ef5350),
          ],
        ),
      ),
      padding: const EdgeInsets.all(16),
      child: Text(
        'Lorem ipsum',
        style: bold24Roboto,
      ),
    ),
  ),
);

----------------------------------------

TITLE: Building Android App Bundle for Size Analysis
DESCRIPTION: Command to build an Android app bundle for upload to Google Play Console and size analysis.

LANGUAGE: bash
CODE:
flutter build appbundle

----------------------------------------

TITLE: Loading Platform Library in Dart
DESCRIPTION: Example of loading a platform library (OpenGL ES v3) using DynamicLibrary.open in Dart.

LANGUAGE: dart
CODE:
DynamicLibrary.open('libGLES_v3.so');

----------------------------------------

TITLE: Removing MaterialButtonWithIconMixin in Dart
DESCRIPTION: Removes the deprecated MaterialButtonWithIconMixin from a custom button class, as it is no longer used with new button classes.

LANGUAGE: dart
CODE:
class MyButtonClass extends StatelessWidget {
  // ...
}

----------------------------------------

TITLE: Modifying Existing ScrollBehavior Configuration
DESCRIPTION: Shows how to copy and modify an existing ScrollBehavior configuration using copyWith(). This approach allows for quick modifications to existing scroll behavior settings.

LANGUAGE: dart
CODE:
// ScrollBehavior can be copied and adjusted.
final ScrollController controller = ScrollController();
ScrollConfiguration(
  behavior: ScrollConfiguration.of(context).copyWith(dragDevices: {
    PointerDeviceKind.touch,
    PointerDeviceKind.mouse,
  }),
  child: ListView.builder(
    controller: controller,
    itemBuilder: (BuildContext context, int index) {
     return Text('Item $index');
    }
  ),
);

----------------------------------------

TITLE: Disabling Swift Package Manager Globally via Flutter CLI
DESCRIPTION: Command to disable Swift Package Manager support globally for all Flutter projects on the current machine.

LANGUAGE: sh
CODE:
flutter config --no-enable-swift-package-manager

----------------------------------------

TITLE: Generating Platform Selection Cards with Liquid and HTML
DESCRIPTION: This snippet creates a card grid for selecting the target platform (Android, Web, or Desktop) when setting up Flutter on Linux. It uses Liquid templating to dynamically generate cards for each platform with appropriate icons and labels.

LANGUAGE: liquid
CODE:
<div class="card-grid narrow">
{% for target in target-list %}
  <a class="card outlined-card install-card card-linux" id="install-{{os | remove: ' ' | downcase}}" href="/get-started/install/{{os | remove: ' ' | downcase}}/{{target | downcase}}" aria-label="Linux setup instructions for first deploying to {{target}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% if icon == 'desktop' -%}
        <span class="material-symbols" aria-hidden="true">desktop_windows</span>
      {% elsif icon == 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% else -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endif -%}
    </div>
    <div class="card-header text-center">
      <span class="card-title">{{target}}</span>
      {% if icon == 'android' -%}
        <span class="card-subtitle">Recommended</span>
      {% endif -%}
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Generating Platform Selection Cards with Liquid and HTML
DESCRIPTION: This snippet creates a card grid for selecting the target platform (Android, Web, or Desktop) when setting up Flutter on Linux. It uses Liquid templating to dynamically generate cards for each platform with appropriate icons and labels.

LANGUAGE: liquid
CODE:
<div class="card-grid narrow">
{% for target in target-list %}
  <a class="card outlined-card install-card card-linux" id="install-{{os | remove: ' ' | downcase}}" href="/get-started/install/{{os | remove: ' ' | downcase}}/{{target | downcase}}" aria-label="Linux setup instructions for first deploying to {{target}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% if icon == 'desktop' -%}
        <span class="material-symbols" aria-hidden="true">desktop_windows</span>
      {% elsif icon == 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% else -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endif -%}
    </div>
    <div class="card-header text-center">
      <span class="card-title">{{target}}</span>
      {% if icon == 'android' -%}
        <span class="card-subtitle">Recommended</span>
      {% endif -%}
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Including Flutter Testing Documentation TOC
DESCRIPTION: Template includes for generating tables of contents for different types of Flutter tests using markdown includes. Each section references a shared testing-toc.md file with a specific type parameter.

LANGUAGE: markdown
CODE:
{% include docs/testing-toc.md type='integration' %}

LANGUAGE: markdown
CODE:
{% include docs/testing-toc.md type='unit' %}

LANGUAGE: markdown
CODE:
{% include docs/testing-toc.md type='widget' %}

----------------------------------------

TITLE: Enabling Deferred Components in pubspec.yaml
DESCRIPTION: Add the deferred-components entry to the Flutter section in pubspec.yaml to opt into deferred components.

LANGUAGE: yaml
CODE:
flutter:
  ...
  deferred-components:
  ...

----------------------------------------

TITLE: Updating OverscrollIndicatorNotification.disallowGlow in Dart
DESCRIPTION: OverscrollIndicatorNotification.disallowGlow was deprecated in v2.5. Use disallowIndicator instead to support multiple types of overscroll indicators.

LANGUAGE: dart
CODE:
bool _handleOverscrollIndicatorNotification(OverscrollIndicatorNotification notification) {
  notification.disallowGlow();
  return false;
}

LANGUAGE: dart
CODE:
bool _handleOverscrollIndicatorNotification(OverscrollIndicatorNotification notification) {
  notification.disallowIndicator();
  return false;
}

----------------------------------------

TITLE: MyMouseRegion Implementation Before Migration in Dart
DESCRIPTION: This code snippet shows the implementation of MyMouseRegion class before the migration. It demonstrates how RenderMouseRegion was used to handle mouse enter and exit events.

LANGUAGE: dart
CODE:
class MyMouseRegion extends SingleChildRenderObjectWidget {
  const MyMouseRegion({this.onHoverChange});

  final ValueChanged<bool> onHoverChange;

  @override
  RenderMouseRegion createRenderObject(BuildContext context) {
    return RenderMouseRegion(
      onEnter: (_) { onHoverChange(true); },
      onExit: (_) { onHoverChange(false); },
    );
  }

  @override
  void updateRenderObject(BuildContext context, RenderMouseRegion renderObject) {
    renderObject
      ..onEnter = (_) { onHoverChange(true); }
      ..onExit = (_) { onHoverChange(false); };
  }
}

----------------------------------------

TITLE: Checking Flutter and Dart Command Paths - Initial State
DESCRIPTION: Example showing the output of 'where' command to check Flutter and Dart command locations, demonstrating incorrect path ordering where Dart SDK commands appear before Flutter SDK commands.

LANGUAGE: console
CODE:
C:\>where flutter dart
C:\path-to-flutter-sdk\bin\flutter
C:\path-to-flutter-sdk\bin\flutter.bat
C:\path-to-dart-sdk\bin\dart.exe        :: this should go after `C:\path-to-flutter-sdk\bin\` commands
C:\path-to-flutter-sdk\bin\dart
C:\path-to-flutter-sdk\bin\dart.bat

----------------------------------------

TITLE: Building Flutter App for macOS in Debug Mode
DESCRIPTION: Command to build a Flutter application for macOS platform in debug mode using the Flutter CLI.

LANGUAGE: console
CODE:
flutter build macos --debug

----------------------------------------

TITLE: Including Markdown Template in Flutter Design Cookbook
DESCRIPTION: This snippet includes a Markdown template file that likely contains the main content for the Flutter design cookbook. It uses Liquid templating syntax to include an external file.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: macOS Configuration Regeneration Command
DESCRIPTION: Command to regenerate macOS project configuration files after updating minimum deployment target.

LANGUAGE: shell
CODE:
flutter build macos --config-only

----------------------------------------

TITLE: Obfuscating Flutter App and Generating Symbol Map
DESCRIPTION: This command builds the app in release mode with obfuscation enabled and generates a symbol map for future debugging.

LANGUAGE: console
CODE:
$ flutter build <build-target> \ 
   --obfuscate \ 
   --split-debug-info=/<symbols-directory>

----------------------------------------

TITLE: Generating Obfuscation Map for Flutter App
DESCRIPTION: This command builds the app with obfuscation and generates a JSON file containing the obfuscation map, which pairs original names with their obfuscated counterparts.

LANGUAGE: console
CODE:
$ flutter build <build-target> \
   --obfuscate \
   --split-debug-info=/<symbols-directory> \
   --extra-gen-snapshot-options=--save-obfuscation-map=/<obfuscation-map-file>

----------------------------------------

TITLE: Implementing Predictive Back Transitions in Flutter MaterialApp
DESCRIPTION: Setting up the PageTransitionsTheme in Flutter MaterialApp to enable predictive back animations for Android platform using PredictiveBackPageTransitionsBuilder.

LANGUAGE: dart
CODE:
MaterialApp(
  theme: ThemeData(
    pageTransitionsTheme: const PageTransitionsTheme(
      builders: <TargetPlatform, PageTransitionsBuilder>{
        // Set the predictive back transitions for Android.
        TargetPlatform.android: PredictiveBackPageTransitionsBuilder(),
      },
    ),
  ),
  ...
),

----------------------------------------

TITLE: Updating AnimationSheetBuilder in Dart
DESCRIPTION: The display and sheetSize methods of AnimationSheetBuilder were deprecated in v2.3. Use the collate method instead for a more streamlined process of creating animation sheets.

LANGUAGE: dart
CODE:
final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(
    frameSize: const Size(40, 40)
);

await tester.pumpFrames(animationSheet.record(
  const Directionality(
    textDirection: TextDirection.ltr,
    child: Padding(
      padding: EdgeInsets.all(4),
      child: CircularProgressIndicator(),
    ),
  ),
), const Duration(seconds: 2));

tester.binding.setSurfaceSize(animationSheet.sheetSize());

final Widget display = await animationSheet.display();
await tester.pumpWidget(display);

await expectLater(
  find.byWidget(display),
  matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),
);

LANGUAGE: dart
CODE:
final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(
    frameSize: const Size(40, 40)
);

await tester.pumpFrames(animationSheet.record(
  const Directionality(
    textDirection: TextDirection.ltr,
    child: Padding(
      padding: EdgeInsets.all(4),
      child: CircularProgressIndicator(),
    ),
  ),
), const Duration(seconds: 2));

await expectLater(
  animationSheet.collate(20),
  matchesGoldenFile('material.circular_progress_indicator.indeterminate.png'),
);

----------------------------------------

TITLE: Weather Enum in Dart
DESCRIPTION: Defines an enumeration for weather types in Dart.

LANGUAGE: dart
CODE:
enum Weather { rainy, windy, sunny }

----------------------------------------

TITLE: Rendering Responsive Figure HTML Element
DESCRIPTION: Generates an HTML figure element containing the image with configured parameters and an optional caption. Uses the processed width, height, and style attributes.

LANGUAGE: html
CODE:
<figure class="{{class}}">
  <div class="site-figure-container">
    <img src="/assets/images/docs/{{image}}" class="{{img-class}}" alt="{{alt | escape}}" style="{{width}} {{height}} {{img-style}}">
    {% if caption and caption != '' -%}
      <figcaption class="figure-caption">{{caption}}</figcaption>
    {% endif -%}
  </div>
</figure>

----------------------------------------

TITLE: Running Flutter Doctor
DESCRIPTION: Executes the Flutter diagnostic tool to check for dependencies and verify the installation setup

LANGUAGE: console
CODE:
flutter doctor

----------------------------------------

TITLE: Running Flutter CLI for Swift Package Manager Migration
DESCRIPTION: Command line output showing the automatic migration process when running a Flutter app after enabling Swift Package Manager integration.

LANGUAGE: console
CODE:
$ flutter run
Adding Swift Package Manager integration...

----------------------------------------

TITLE: Including Markdown Cookbook Index
DESCRIPTION: Includes a markdown file containing the cookbook group index for Flutter effects documentation.

LANGUAGE: markdown
CODE:
---
title: Effects
description: A catalog of recipes for adding effects to your Flutter app.
---

{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Symbolizing Obfuscated Stack Trace in Flutter
DESCRIPTION: This command deobfuscates a stack trace using the generated symbol map, making it human-readable for debugging purposes.

LANGUAGE: console
CODE:
$ flutter symbolize \
   -i <stack-trace-file> \
   -d <obfuscated-symbols-file>

----------------------------------------

TITLE: Form Autovalidation API Migration - Dart
DESCRIPTION: Migration guide for replacing deprecated autovalidate property with autovalidateMode in Form and related classes. Shows how to update Form, FormField, TextFormField and DropdownButtonFormField implementations.

LANGUAGE: dart
CODE:
const Form form = Form(autovalidate: true);
const Form form = Form(autovalidate: false);
final autoMode = form.autovalidate;

const FormField formField = FormField(autovalidate: true);
const FormField formField = FormField(autovalidate: false);
final autoMode = formField.autovalidate;

const TextFormField textFormField = TextFormField(autovalidate: true);
const TextFormField textFormField = TextFormField(autovalidate: false);

const DropdownButtonFormField dropDownButtonFormField = DropdownButtonFormField(autovalidate: true);
const DropdownButtonFormField dropdownButtonFormField = DropdownButtonFormField(autovalidate: false);

LANGUAGE: dart
CODE:
const Form form = Form(autovalidateMode: AutovalidateMode.always);
const Form form = Form(autovalidateMode: AutovalidateMode.disabled);
final autoMode = form.autovalidateMode;

const FormField formField = FormField(autovalidateMode: AutovalidateMode.always);
const FormField formField = FormField(autovalidateMode: AutovalidateMode.disabled);
final autoMode = formField.autovalidateMode;

const TextFormField textFormField = TextFormField(autovalidateMode: AutovalidateMode.always);
const TextFormField textFormField = TextFormField(autovalidateMode: AutovalidateMode.disabled);

const DropdownButtonFormField dropDownButtonFormField = DropdownButtonFormField(autovalidateMode: AutovalidateMode.always);
const DropdownButtonFormField dropdownButtonFormField = DropdownButtonFormField(autovalidateMode: AutovalidateMode.disabled);

----------------------------------------

TITLE: Building iOS Flutter App in Terminal
DESCRIPTION: Command to build the iOS version of a Flutter app in the terminal without code signing. This generates the necessary iOS platform dependencies.

LANGUAGE: console
CODE:
$ flutter build ios --config-only --no-codesign --debug

----------------------------------------

TITLE: Adding Flutter to PATH in Console
DESCRIPTION: Command to add the Flutter tool to the system PATH for the current terminal session.

LANGUAGE: console
CODE:
$ export PATH="$PATH:`pwd`/flutter/bin"

----------------------------------------

TITLE: Removing Flutter PATH Entry in Zsh Configuration
DESCRIPTION: This code snippet shows the line that needs to be removed from the ~/.zshenv file to unset the Flutter PATH entry. It demonstrates how the Flutter binary directory was previously added to the PATH environment variable.

LANGUAGE: bash
CODE:
export PATH=$HOME/development/flutter/bin:$PATH

----------------------------------------

TITLE: Including macOS zsh Configuration Information
DESCRIPTION: This snippet includes a separate Markdown file containing information about zsh configuration on macOS, passing the 'include.target' parameter.

LANGUAGE: liquid
CODE:
{% include docs/install/reqs/macos/zsh-config.md target=include.target %}

----------------------------------------

TITLE: Defining Markdown Frontmatter for Flutter Getting Started Page
DESCRIPTION: This snippet contains the YAML frontmatter for the Flutter 'Get started' page. It defines the title, description, and includes a comment about the page's purpose as a placeholder for Firebase redirection.

LANGUAGE: markdown
CODE:
---
title: Get started
description: Get started developing your first app with Flutter!
# This is a placeholder page (Firebase redirects this page's URL to another);
# it is necessary to allow breadcrumbs to work.
---

----------------------------------------

TITLE: Including Navigation Cookbook Index Template in Markdown
DESCRIPTION: Includes a template file that contains a group index of navigation-related cookbook entries for Flutter documentation

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Implementing Native Android View in Java
DESCRIPTION: Java implementation of the native Android view components including the PlatformView implementation and factory class for view creation.

LANGUAGE: java
CODE:
class NativeView implements PlatformView {
   @NonNull private final TextView textView;

    NativeView(@NonNull Context context, int id, @Nullable Map<String, Object> creationParams) {
        textView = new TextView(context);
        textView.setTextSize(72);
        textView.setBackgroundColor(Color.rgb(255, 255, 255));
        textView.setText("Rendered on a native Android view (id: " + id + ")");
    }

    @NonNull
    @Override
    public View getView() {
        return textView;
    }

    @Override
    public void dispose() {}
}

LANGUAGE: java
CODE:
class NativeViewFactory extends PlatformViewFactory {

  NativeViewFactory() {
    super(StandardMessageCodec.INSTANCE);
  }

  @NonNull
  @Override
  public PlatformView create(@NonNull Context context, int id, @Nullable Object args) {
    final Map<String, Object> creationParams = (Map<String, Object>) args;
    return new NativeView(context, id, creationParams);
  }
}

----------------------------------------

TITLE: Migrating InputDecoration and InputDecorationTheme in Dart
DESCRIPTION: Example of migrating from the deprecated hasFloatingPlaceholder property to the new floatingLabelBehavior property in InputDecoration and InputDecorationTheme. This change allows for more flexible label behaviors.

LANGUAGE: dart
CODE:
// InputDecoration
// Base constructor
InputDecoration(hasFloatingPlaceholder: true);
InputDecoration(hasFloatingPlaceholder: false);

// collapsed constructor
InputDecoration.collapsed(hasFloatingPlaceholder: true);
InputDecoration.collapsed(hasFloatingPlaceholder: false);

// Field access
inputDecoration.hasFloatingPlaceholder;

// InputDecorationTheme
// Base constructor
InputDecorationTheme(hasFloatingPlaceholder: true);
InputDecorationTheme(hasFloatingPlaceholder: false);

// Field access
inputDecorationTheme.hasFloatingPlaceholder;

// copyWith
inputDecorationTheme.copyWith(hasFloatingPlaceholder: false);
inputDecorationTheme.copyWith(hasFloatingPlaceholder: true);

LANGUAGE: dart
CODE:
// InputDecoration
// Base constructor
InputDecoration(floatingLabelBehavior: FloatingLabelBehavior.auto);
InputDecoration(floatingLabelBehavior: FloatingLabelBehavior.never);

// collapsed constructor
InputDecoration.collapsed(floatingLabelBehavior: FloatingLabelBehavior.auto);
InputDecoration.collapsed(floatingLabelBehavior: FloatingLabelBehavior.never);

// Field access
inputDecoration.floatingLabelBehavior;

// InputDecorationTheme
// Base constructor
InputDecorationTheme(floatingLabelBehavior: FloatingLabelBehavior.auto);
InputDecorationTheme(floatingLabelBehavior: FloatingLabelBehavior.never);

// Field access
inputDecorationTheme.floatingLabelBehavior;

// copyWith
inputDecorationTheme.copyWith(floatingLabelBehavior: FloatingLabelBehavior.never);
inputDecorationTheme.copyWith(floatingLabelBehavior: FloatingLabelBehavior.auto);

----------------------------------------

TITLE: Generating Platform Support Table in Markdown
DESCRIPTION: This snippet uses Liquid templating to generate a markdown table listing supported deployment platforms for Flutter. It iterates over a 'platforms' data structure to populate rows with platform details, including target architectures and version information.

LANGUAGE: markdown
CODE:
| Target platform | Target architectures | Supported versions | CI-tested versions |  Unsupported versions |
|---|:---:|:---:|:---:|:---:|
{%- for platform in opsys %}
  | {{platform.platform}} | {{platform.target-arch}} | {{platform.supported}} | {{platform.ci-tested}} | {{platform.unsupported}} |
{%- endfor %}

{:.table .table-striped}

----------------------------------------

TITLE: Pre-downloading Flutter Development Binaries in Console
DESCRIPTION: Command to pre-download necessary Flutter development binaries, useful for hermetic build environments or limited network connectivity scenarios.

LANGUAGE: console
CODE:
$ flutter precache

----------------------------------------

TITLE: Setting FLUTTER_STORAGE_BASE_URL for Flutter SDK Installation
DESCRIPTION: Sets the FLUTTER_STORAGE_BASE_URL environment variable to use a mirror site for Flutter storage.

LANGUAGE: console
CODE:
{{envvarset}}FLUTTER_STORAGE_BASE_URL="https://storage.flutter-io.cn"

----------------------------------------

TITLE: Conditional Variable Assignment in Liquid Template
DESCRIPTION: This snippet uses Liquid template syntax to conditionally assign a value to the 'v-target' variable based on the 'include.target' parameter.

LANGUAGE: liquid
CODE:
{% case include.target %}
{% when 'mobile-ios' %}
{% assign v-target = "iOS" %}
{% when 'mobile-android' %}
{% assign v-target = "Android" %}
{% else %}
{% assign v-target = include.target %}
{% endcase %}

----------------------------------------

TITLE: Dialog Builder Migration
DESCRIPTION: Migration example showing update from showDialog child parameter to builder pattern

LANGUAGE: dart
CODE:
showDialog(child: myWidget);

LANGUAGE: dart
CODE:
showDialog(builder: (context) => myWidget);

----------------------------------------

TITLE: Rounding Corners in CSS
DESCRIPTION: Rounds the corners of a div element using the border-radius property in CSS.

LANGUAGE: css
CODE:
<div class="grey-box">
  <div class="red-box">
    Lorem ipsum
  </div>
</div>

.grey-box {
    background-color: #e0e0e0; /* grey 300 */
    width: 320px;
    height: 240px;
    font: 900 24px Roboto;
    display: flex;
    align-items: center;
    justify-content: center;
}
.red-box {
    background-color: #ef5350; /* red 400 */
    padding: 16px;
    color: #ffffff;
    border-radius: 8px;
}

----------------------------------------

TITLE: Configuring VS Code Launch Settings for Flutter Debugging
DESCRIPTION: Example launch.json configuration file that sets up debugging configurations for Flutter applications. Includes three launch configurations for default, profile, and release modes with corresponding debugging settings.

LANGUAGE: json
CODE:
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "my_app",
            "request": "launch",
            "type": "dart"
        },
        {
            "name": "my_app (profile mode)",
            "request": "launch",
            "type": "dart",
            "flutterMode": "profile"
        },
        {
            "name": "my_app (release mode)",
            "request": "launch",
            "type": "dart",
            "flutterMode": "release"
        }
    ]
}

----------------------------------------

TITLE: Flutter SDK Download URLs
DESCRIPTION: Example URLs showing the original Google Storage URL and the corresponding China mirror URL for downloading the Flutter SDK.

LANGUAGE: console
CODE:
https://storage.googleapis.com/{{filepath}}

LANGUAGE: console
CODE:
https://storage.flutter-io.cn/{{filepath}}

----------------------------------------

TITLE: Setting Flutter PATH for Current Session
DESCRIPTION: Command to add Flutter SDK to PATH variable for the current terminal session only. Requires replacing [PATH_TO_FLUTTER_GIT_DIRECTORY] with actual Flutter installation path.

LANGUAGE: console
CODE:
export PATH="$PATH:[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin"

----------------------------------------

TITLE: Adding Padding to a Widget in Flutter
DESCRIPTION: Shows how to add padding around a widget using the Container widget in Flutter.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) {
  return Container(
    padding: EdgeInsets.all(16.0),
    child: BorderedImage(),
  );
}

----------------------------------------

TITLE: Including Release Notes via Markdown Include
DESCRIPTION: A Markdown include directive that loads the content from a separate release notes source file.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.41.0-src.md %}

----------------------------------------

TITLE: Inserting ToDo Item in SQLite Database for Flutter
DESCRIPTION: This code snippet shows how to insert a new ToDo item into the SQLite database using the sqflite package. It returns a Result object containing the newly created Todo instance.

LANGUAGE: dart
CODE:
Future<Result<Todo>> insert(String task) async {
  try {
    final id = await _database!.insert(_kTableTodo, {_kColumnTask: task});
    return Result.ok(Todo(id: id, task: task));
  } on Exception catch (e) {
    return Result.error(e);
  }
}

----------------------------------------

TITLE: Generating Platform-Specific Installation Cards using Liquid Templating
DESCRIPTION: This snippet uses Liquid templating to generate a card grid with installation options for iOS development from different starting platforms. It dynamically creates links and icons based on the target platform.

LANGUAGE: liquid
CODE:
<div class="card-grid">
{% for target in target-list %}
{% assign targetLink = '/platform-integration/ios/install-ios/install-ios-from-' | append: target | downcase %}
  <a class="card outlined-card install-card card-macos" id="install-{{target | downcase}}" href="{{targetLink}}">
    {% assign icon = target | downcase -%}
    <div class="card-leading">
      {% case icon %}
      {% when 'macos' -%}
        <span class="material-symbols" aria-hidden="true">laptop_mac</span>
      {% when 'android' -%}
        <span class="material-symbols" aria-hidden="true">phone_android</span>
      {% when 'web' -%}
        <span class="material-symbols" aria-hidden="true">web</span>
      {% endcase -%}
      <span class="material-symbols" aria-hidden="true">add</span>
      <span class="material-symbols" aria-hidden="true">phone_iphone</span>
    </div>
    <div class="card-header text-center">
      <span class="card-title">Make iOS and {{ target }}{% if target == 'macOS' %} desktop{% endif %} apps</span>
    </div>
  </a>
{% endfor %}
</div>

----------------------------------------

TITLE: Checking PUB_HOSTED_URL on Windows
DESCRIPTION: Commands to check and remove the PUB_HOSTED_URL environment variable in Windows PowerShell

LANGUAGE: console
CODE:
echo $env:PUB_HOSTED_URL

LANGUAGE: console
CODE:
Remove-Item $env:PUB_HOSTED_URL

----------------------------------------

TITLE: Including Cookbook Group Index in Markdown
DESCRIPTION: A Liquid template include statement that pulls in a shared cookbook group index markdown file.

LANGUAGE: markdown
CODE:
{% include docs/cookbook-group-index.md %}

----------------------------------------

TITLE: Configuring Initial Route with Cached FlutterEngine in Kotlin
DESCRIPTION: This snippet demonstrates how to create a custom Application class in Kotlin that instantiates a FlutterEngine, sets an initial route, executes the Dart entrypoint, and caches the engine for later use in FlutterActivity or FlutterFragment.

LANGUAGE: kotlin
CODE:
class MyApplication : Application() {
  lateinit var flutterEngine : FlutterEngine
  override fun onCreate() {
    super.onCreate()
    // Instantiate a FlutterEngine.
    flutterEngine = FlutterEngine(this)
    // Configure an initial route.
    flutterEngine.navigationChannel.setInitialRoute("your/route/here");
    // Start executing Dart code to pre-warm the FlutterEngine.
    flutterEngine.dartExecutor.executeDartEntrypoint(
      DartExecutor.DartEntrypoint.createDefault()
    )
    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.
    FlutterEngineCache
      .getInstance()
      .put("my_engine_id", flutterEngine)
  }
}

----------------------------------------

TITLE: Installing iOS Simulator Platform
DESCRIPTION: Command to download and install the iOS Simulator for Xcode 15 or greater

LANGUAGE: console
CODE:
xcodebuild -downloadPlatform iOS

----------------------------------------

TITLE: Keyboard Shortcut Reference in Markdown
DESCRIPTION: Documents the keyboard shortcut combination for searching files in the File Explorer component

LANGUAGE: markdown
CODE:
<kbd>Ctrl</kbd> / <kbd>Cmd</kbd> + <kbd>P</kbd>

----------------------------------------

TITLE: Removing Deprecated FlutterActivity Splash Screen Implementation
DESCRIPTION: Example of the deprecated provideSplashScreen() implementation that should be removed from FlutterActivity. This code shows how custom splash screens were previously constructed as Drawables.

LANGUAGE: java
CODE:
@Override
public SplashScreen provideSplashScreen() {
    // ...
    return new DrawableSplashScreen(
        new SomeDrawable(
            ContextCompat.getDrawable(this, R.some_splash_screen)));
}

----------------------------------------

TITLE: Migrating TestTextInput.enterText in Flutter Tests
DESCRIPTION: Shows how to update code using TestTextInput.enterText to maintain the previous behavior of setting an invalid selection range.

LANGUAGE: dart
CODE:
await testTextInput.enterText(text);

LANGUAGE: dart
CODE:
await testTextInput.updateEditingValue(TextEditingValue(
  text: text,
));

----------------------------------------

TITLE: Flutter App Entry Point
DESCRIPTION: Shows how to initialize a Flutter app with main() and MyApp widget, equivalent to LoadApplication in Xamarin.Forms

LANGUAGE: dart
CODE:
void main() {
  runApp(const MyApp());
}

----------------------------------------

TITLE: Running Windows GoogleTest
DESCRIPTION: Command to run GoogleTest unit tests for Windows platform from the example directory.

LANGUAGE: sh
CODE:
build/windows/plugins/my_plugin/Debug/my_plugin_test.exe

----------------------------------------

TITLE: Checking Flutter and Dart Command Locations
DESCRIPTION: This command uses 'which' to display the locations of the Flutter and Dart executables. It helps identify if they are coming from the same directory, which is important for compatibility.

LANGUAGE: console
CODE:
$ which flutter dart
/path-to-flutter-sdk/bin/flutter
/usr/local/bin/dart

----------------------------------------

TITLE: Asynchronous Weather ViewModel in Dart
DESCRIPTION: Implements a view model in Dart that handles asynchronous weather data loading using Futures.

LANGUAGE: dart
CODE:
@immutable
class HomePageViewModel {
  const HomePageViewModel();
  Future<Weather> load() async {
    await Future.delayed(const Duration(seconds: 1));
    return Weather.sunny;
  }
}

----------------------------------------

TITLE: Embedding YouTube Videos in Markdown
DESCRIPTION: This snippet demonstrates how to embed multiple YouTube videos in a markdown file using a custom 'ytEmbed' tag. It iterates through a list of widget names and corresponding video URLs to generate embed code for each video.

LANGUAGE: markdown
CODE:
{% assign animated-widgets = 'AnimatedOpacity, AnimatedPadding, AnimatedPositioned, AnimatedSwitcher' | split: ", " %}
{% assign animated-urls = 'QZAvjqOqiLY, PY2m0fhGNz4, hC3s2YdtWt8, 2W7POjFb88g' | split: ", " %}

{% for widget in animated-widgets %}
{% assign videoUrl = animated-urls[forloop.index0] %}
{% assign videoDescription = 'Learn about the ' | append: widget | append: ' Flutter Widget' %}

{% ytEmbed videoUrl, videoDescription %}

{% endfor -%}

----------------------------------------

TITLE: Initializing ThemeRepository in Flutter Main Function
DESCRIPTION: This snippet shows how to initialize the ThemeRepository and SharedPreferencesService in the main() function and pass them to the MainApp widget as constructor arguments.

LANGUAGE: dart
CODE:
void main() {
  // ···
  runApp(
    MainApp(
      themeRepository: ThemeRepository(SharedPreferencesService()),
      // ···
    ),
  );
}

----------------------------------------

TITLE: Liquid Template Comment Block for External Link
DESCRIPTION: Jekyll/Liquid template comment block containing an external job posting link

LANGUAGE: liquid
CODE:
{% comment %}
external link:
https://www.google.com/about/careers/applications/jobs/results/95463419917804230-technical-writer-languages
{% endcomment %}

----------------------------------------

TITLE: Including Flutter Doctor Instructions in Markdown
DESCRIPTION: This snippet includes a Markdown file with instructions for running flutter doctor to verify the Android setup. It uses Liquid templating to specify the target platform, development OS, and configuration.

LANGUAGE: markdown
CODE:
{% include docs/install/flutter-doctor.md target='Android' devos='Windows' config='WindowsDesktopAndroid' %}

----------------------------------------

TITLE: Running Flutter Web App in Chrome
DESCRIPTION: This command runs a Flutter web app in Chrome for development and debugging.

LANGUAGE: console
CODE:
$ flutter run -d chrome

----------------------------------------

TITLE: URL Skip Patterns for Flutter Documentation Link Checker
DESCRIPTION: Collection of URL patterns organized by category (robots-restricted sites, problematic external links, special anchor handling, preconnect links, and temporary exclusions) to be excluded from link validation checks.

LANGUAGE: plaintext
CODE:
# Enter regexp pattern, one per line.

# -----------------------------------------------------------------------------
# Sites that don't allow robots. Linkcheck won't bother those sites, but if we
# don't skip them, linkcheck prints every link that didn't check. This list is
# sometimes too long for Travis, so it is simpler just to skip all site links.

https://github.com
https://main-api.flutter.dev

# -----------------------------------------------------------------------------
# Valid external links that result in connection failures too often:

https://dart-pub.mirrors.sjtug.sjtu.edu.cn
https://hk.saowen.com/a/fbb6e484de022173fe85248875286060ce40d069c97420bc0be49d838e19e372
https://itunes.apple.com/cn/app/id895682747
https://now.qq.com

# -----------------------------------------------------------------------------
# Links with "anchors" that aren't really anchors
# (and so linkcheck reports the anchors as missing)

https://flutter.dev/events/flutter-forward/#17-days-of-flutter
https://codelabs.developers.google.com/codelabs/flutter/\#6
https://groups.google.com/forum/\#!forum/flutter-dev
https://groups.google.com/forum/\#!forum/flutter-announce
https://guides.cocoapods.org/syntax/podspec.html\#dependency
https://help.apple.com/.*?/\#/dev

# Links that get redirected, and the target page doesn't have the specified anchor:
https://developer.android.com/guide/practices/ui_guidelines/icon_design_launcher\#size
https://material.io/guidelines/motion/transforming-material.html\#transforming-material-radial-transformation

# -----------------------------------------------------------------------------
# Preconnect links that return 404s

fonts.gstatic.com
fonts.googleapis.com

# -----------------------------------------------------------------------------
# Temporary skip rules below this point

# FIXME(Temporary): linkcheck seems to be intermittently failing when accessing main.css
# https://github.com/dart-lang/site-www/issues/1107
/assets/main(-[0-9a-f]+)?.css

# All redirects via firebase.json, which will be picked up via Firebase emulator
/go/.*?

# FIXME Not sure here, "connection failed" on every go
/tools/devtools/vscode

# robots
http:///robots.txt

----------------------------------------

TITLE: Flutter Light Theme Old Defaults Configuration
DESCRIPTION: Configuration to maintain old default colors for text selection in a light theme.

LANGUAGE: dart
CODE:
ThemeData(
  textSelectionTheme: TextSelectionThemeData(
    cursorColor: const Color.fromRGBO(66, 133, 244, 1.0),
    selectionColor: const Color(0xff90caf9),
    selectionHandleColor: const Color(0xff64b5f6),
  )
)

----------------------------------------

TITLE: Analyzer Error Messages for ParentDataWidget Migration in Flutter
DESCRIPTION: These are the error messages displayed by the analyzer when code needs to be migrated due to the ParentDataWidget generic type change.

LANGUAGE: plaintext
CODE:
  error • Missing concrete implementation of 'getter ParentDataWidget.debugTypicalAncestorWidgetClass' • lib/main.dart:114:7 • non_abstract_class_inherits_abstract_member
  error • 'FrogJar' doesn't extend 'ParentData' • lib/main.dart:114:41 • type_argument_not_matching_bounds

----------------------------------------

TITLE: Configuring Deferred Components in pubspec.yaml
DESCRIPTION: Define deferred components, their libraries, and assets in the pubspec.yaml file.

LANGUAGE: yaml
CODE:
flutter:
  ...
  deferred-components:
    - name: boxComponent
      libraries:
        - package:MyAppName/box.Dart
      assets:
        - assets/image.jpg
        - assets/picture.png
        - assets/gallery/

----------------------------------------

TITLE: Installing Prerequisite Packages for Android Studio on Linux
DESCRIPTION: This command installs the necessary prerequisite packages for Android Studio on a Linux system using the apt package manager. These packages are required for proper functioning of Android Studio and Android development.

LANGUAGE: console
CODE:
$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

----------------------------------------

TITLE: Creating an AnimationController in Dart
DESCRIPTION: This snippet demonstrates how to create an AnimationController object, which generates new values for each frame over a specified duration.

LANGUAGE: dart
CODE:
controller = AnimationController(
  duration: const Duration(seconds: 2),
  vsync: this,
);

----------------------------------------

TITLE: Defining Arguments Class for Flutter Navigation
DESCRIPTION: Creates a ScreenArguments class to store title and message data for passing to routes.

LANGUAGE: dart
CODE:
class ScreenArguments {
  final String title;
  final String message;

  ScreenArguments(this.title, this.message);
}

----------------------------------------

TITLE: Configuring Flutter Snapcraft YAML
DESCRIPTION: Example snapcraft.yaml configuration for a Flutter application, including metadata, grade, confinement, base, apps, and parts sections.

LANGUAGE: yaml
CODE:
name: super-cool-app
version: 0.1.0
summary: Super Cool App
description: Super Cool App that does everything!

confinement: strict
base: core22
grade: stable

slots:
  dbus-super-cool-app: # adjust accordingly to your app name
    interface: dbus
    bus: session
    name: org.bar.super_cool_app # adjust accordingly to your app name and
    
apps:
  super-cool-app:
    command: super_cool_app
    extensions: [gnome] # gnome includes the libraries required by flutter
    plugs:
    - network
    slots:
      - dbus-super-cool-app
parts:
  super-cool-app:
    source: .
    plugin: flutter
    flutter-target: lib/main.dart # The main entry-point file of the application

----------------------------------------

TITLE: Setting Up ViewModel Listener in View
DESCRIPTION: Shows how to set up a listener for view model changes in the view's initState and dispose methods.

LANGUAGE: dart
CODE:
@override
void initState() {
  super.initState();
  widget.viewModel.addListener(_onViewModelChanged);
}

@override
void dispose() {
  widget.viewModel.removeListener(_onViewModelChanged);
  super.dispose();
}

----------------------------------------

TITLE: Including Deferred Components in Android Gradle Settings
DESCRIPTION: Add deferred components to the android/settings.gradle file for inclusion in the Android build.

LANGUAGE: groovy
CODE:
include ':app', ':boxComponent', ':circleComponent', ':assetComponent'
...

----------------------------------------

TITLE: Including Android Compiler Setup Instructions
DESCRIPTION: Template inclusion for Android compiler configuration on Linux

LANGUAGE: markdown
CODE:
{% include docs/install/compiler/android.md devos=devos target=target attempt='first' %}

----------------------------------------

TITLE: Embedding YouTube Videos with Custom Liquid Tags in HTML
DESCRIPTION: This code snippet shows how to embed YouTube videos using custom Liquid tags within an HTML structure. It creates a card grid layout for multiple video embeds.

LANGUAGE: html
CODE:
<div class="card-grid">
  <div class="card wrapped-card outlined-card">
    <div class="card-content">
      {% ytEmbed 'xWV71C2kp38', 'Create your first Flutter app', true %}
    </div>
  </div>
  <div class="card wrapped-card outlined-card">
    <div class="card-content">
      {% ytEmbed 'QlwiL_yLh6E', 'What is state?', true %}
    </div>
  </div>
</div>

----------------------------------------

TITLE: Accessing YouTube Playlist Data
DESCRIPTION: Example of using the YouTube API to fetch playlist items from a user's liked videos list.

LANGUAGE: dart
CODE:
var youTubeApi = YouTubeApi(httpClient);

var favorites = await youTubeApi.playlistItems.list(
  ['snippet'],
  playlistId: 'LL', // Liked List
);

----------------------------------------

TITLE: Configuring Initial Route with Cached FlutterEngine in Java
DESCRIPTION: This snippet illustrates how to set up a custom initial route with a cached FlutterEngine in a Java Android application. It covers the steps of creating a FlutterEngine instance, setting the initial route, executing the Dart entrypoint, and caching the engine for use in FlutterActivity or FlutterFragment.

LANGUAGE: java
CODE:
public class MyApplication extends Application {
  @Override
  public void onCreate() {
    super.onCreate();
    // Instantiate a FlutterEngine.
    flutterEngine = new FlutterEngine(this);
    // Configure an initial route.
    flutterEngine.getNavigationChannel().setInitialRoute("your/route/here");
    // Start executing Dart code to pre-warm the FlutterEngine.
    flutterEngine.getDartExecutor().executeDartEntrypoint(
      DartEntrypoint.createDefault()
    );
    // Cache the FlutterEngine to be used by FlutterActivity or FlutterFragment.
    FlutterEngineCache
      .getInstance()
      .put("my_engine_id", flutterEngine);
  }
}

----------------------------------------

TITLE: Installing HTTP Package
DESCRIPTION: Command to add the http package as a dependency to a Flutter project

LANGUAGE: console
CODE:
$ flutter pub add http

----------------------------------------

TITLE: Testing Portrait Orientation in Flutter
DESCRIPTION: Writes a test to verify that the app displays 2 columns in portrait mode and correctly detects the orientation.

LANGUAGE: dart
CODE:
testWidgets('Displays 2 columns in portrait mode', (tester) async {
  await tester.pumpWidget(const MyApp());

  tester.view.physicalSize = const Size(600, 800);
  tester.view.devicePixelRatio = 1.0;
  addTearDown(() {
    tester.view.resetPhysicalSize();
  });
  await tester.pump();

  final orientation =
      MediaQuery.of(
        tester.element(find.byType(OrientationList)),
      ).orientation;
  expect(orientation, Orientation.portrait);

  final gridViewFinder = find.byType(GridView);
  final gridView = tester.widget<GridView>(gridViewFinder);
  final delegate =
      gridView.gridDelegate as SliverGridDelegateWithFixedCrossAxisCount;
  expect(delegate.crossAxisCount, 2);
});

----------------------------------------

TITLE: Configuring Repository Settings for Flutter AAR in Groovy
DESCRIPTION: This Groovy code snippet shows how to configure repository settings in settings.gradle to include the Flutter AAR and necessary repositories.

LANGUAGE: groovy
CODE:
dependencyResolutionManagement {
    repositoriesMode = RepositoriesMode.PREFER_SETTINGS
    repositories {
        google()
        mavenCentral()

        maven {
            url = uri("some/path/flutter_module/build/host/outputs/repo")
        }

        maven {
            url = uri("https://storage.googleapis.com/download.flutter.io")
        }
    }
}

----------------------------------------

TITLE: Importing Release Notes Content in Markdown
DESCRIPTION: This snippet demonstrates how to include external Markdown content within a Markdown file using Jekyll's include directive.

LANGUAGE: markdown
CODE:
{% include ./release-notes-2.32.0-src.md %}

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This snippet embeds a YouTube video introducing the Flutter Widget of the Week series using a custom Liquid tag.

LANGUAGE: liquid
CODE:
{% ytEmbed 'b_sQ9bMltGU', 'Introducing the Flutter Widget of the Week' %}

----------------------------------------

TITLE: Flutter App with Orientation-Responsive Layout
DESCRIPTION: The main.dart file containing the Flutter app that changes its layout based on the device orientation, displaying either 2 or 3 columns.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Orientation Demo';

    return const MaterialApp(
      title: appTitle,
      home: OrientationList(title: appTitle),
    );
  }
}

class OrientationList extends StatelessWidget {
  final String title;

  const OrientationList({super.key, required this.title});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(title)),
      body: OrientationBuilder(
        builder: (context, orientation) {
          return GridView.count(
            crossAxisCount: orientation == Orientation.portrait ? 2 : 3,
            children: List.generate(100, (index) {
              return Center(
                child: Text(
                  'Item $index',
                  style: TextTheme.of(context).displayLarge,
                ),
              );
            }),
          );
        },
      ),
    );
  }
}

----------------------------------------

TITLE: Adding Flutter Module Dependencies in Kotlin-based Android Project
DESCRIPTION: This Kotlin code snippet demonstrates how to add Flutter module dependencies to a Kotlin DSL-based Android project's build.gradle.kts file.

LANGUAGE: kotlin
CODE:
android {
    buildTypes {
        release {
          ...
        }
        debug {
          ...
        }
        create("profile") {
            initWith(getByName("debug"))
        }
}

dependencies {
  // ...
  debugImplementation("com.example.flutter_module:flutter_debug:1.0")
  releaseImplementation("com.example.flutter_module:flutter_release:1.0")
  add("profileImplementation", "com.example.flutter_module:flutter_profile:1.0")
}

----------------------------------------

TITLE: Registering Platform View in MainFlutterWindow.swift
DESCRIPTION: Register the native view factory in the app's MainFlutterWindow.swift file. This step is necessary to make the platform view available to the Flutter engine.

LANGUAGE: swift
CODE:
import Cocoa
import FlutterMacOS

class MainFlutterWindow: NSWindow {
  override func awakeFromNib() {
    // ...

    let registrar = flutterViewController.registrar(forPlugin: "plugin-name")
    let factory = NativeViewFactory(messenger: registrar.messenger)
    registrar.register(
      factory,
      withId: "<platform-view-type>")
  }
}

----------------------------------------

TITLE: Running Flutter Tests via Console
DESCRIPTION: Command to run the widget tests for the orientation_tests project.

LANGUAGE: console
CODE:
flutter test test/widget_test.dart

----------------------------------------

TITLE: Launching Transparent FlutterActivity in Kotlin
DESCRIPTION: Demonstrates how to start a FlutterActivity with a transparent background. This is useful for creating modal-like Flutter screens or overlays in your Android app.

LANGUAGE: kotlin
CODE:
// Using a new FlutterEngine.
startActivity(
  FlutterActivity
    .withNewEngine()
    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)
    .build(this)
);

// Using a cached FlutterEngine.
startActivity(
  FlutterActivity
    .withCachedEngine("my_engine_id")
    .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.transparent)
    .build(this)
);

----------------------------------------

TITLE: Setting up Basic Flutter Architecture Classes
DESCRIPTION: Initial setup of the core classes needed for the optimistic state implementation: SubscribeButton widget, SubscribeButtonViewModel, and SubscriptionRepository.

LANGUAGE: dart
CODE:
class SubscribeButton extends StatefulWidget {
  const SubscribeButton({super.key});

  @override
  State<SubscribeButton> createState() => _SubscribeButtonState();
}

class _SubscribeButtonState extends State<SubscribeButton> {
  @override
  Widget build(BuildContext context) {
    return const Placeholder();
  }
}

class SubscribeButtonViewModel extends ChangeNotifier {}

class SubscriptionRepository {}

----------------------------------------

TITLE: Pre-warming FlutterEngine in Kotlin Application Class
DESCRIPTION: Initializes and caches a FlutterEngine in the Application class to improve the launch time of FlutterActivity. This technique pre-warms the Flutter engine for faster subsequent launches.

LANGUAGE: kotlin
CODE:
class MyApplication : Application() {
  lateinit var flutterEngine : FlutterEngine

  override fun onCreate() {
    super.onCreate()

    // Instantiate a FlutterEngine.
    flutterEngine = FlutterEngine(this)

    // Start executing Dart code to pre-warm the FlutterEngine.
    flutterEngine.dartExecutor.executeDartEntrypoint(
      DartExecutor.DartEntrypoint.createDefault()
    )

    // Cache the FlutterEngine to be used by FlutterActivity.
    FlutterEngineCache
      .getInstance()
      .put("my_engine_id", flutterEngine)
  }
}

----------------------------------------

TITLE: Setting Up Providers for Dependency Injection in Flutter
DESCRIPTION: Shows how to set up providers for services and repositories at the top level of the widget tree in a Flutter application. This allows for dependency injection throughout the app.

LANGUAGE: dart
CODE:
runApp(
  MultiProvider(
    providers: [
      Provider(create: (context) => AuthApiClient()),
      Provider(create: (context) => ApiClient()),
      Provider(create: (context) => SharedPreferencesService()),
      ChangeNotifierProvider(
        create: (context) => AuthRepositoryRemote(
          authApiClient: context.read(),
          apiClient: context.read(),
          sharedPreferencesService: context.read(),
        ) as AuthRepository,
      ),
      Provider(create: (context) =>
        DestinationRepositoryRemote(
          apiClient: context.read(),
        ) as DestinationRepository,
      ),
      Provider(create: (context) =>
        ContinentRepositoryRemote(
          apiClient: context.read(),
        ) as ContinentRepository,
      ),
      // In the Compass app, additional service and repository providers live here.
    ],
    child: const MainApp(),
  ),
);

----------------------------------------

TITLE: Launching FlutterActivity with Custom Route in Kotlin
DESCRIPTION: Demonstrates how to launch a FlutterActivity with a custom initial route. This is useful when you want to navigate to a specific screen in your Flutter app directly from Android.

LANGUAGE: kotlin
CODE:
myButton.setOnClickListener {
  startActivity(
    FlutterActivity
      .withNewEngine()
      .initialRoute("/my_route")
      .build(this)
  )
}

----------------------------------------

TITLE: FFI Implementation Example
DESCRIPTION: Demonstrates using Dart's Foreign Function Interface (FFI) to call native Win32 APIs

LANGUAGE: dart
CODE:
import 'dart:ffi';
import 'package:ffi/ffi.dart';

typedef MessageBoxNative =
    Int32 Function(
      IntPtr hWnd,
      Pointer<Utf16> lpText,
      Pointer<Utf16> lpCaption,
      Int32 uType,
    );

typedef MessageBoxDart =
    int Function(
      int hWnd,
      Pointer<Utf16> lpText,
      Pointer<Utf16> lpCaption,
      int uType,
    );

void exampleFfi() {
  final user32 = DynamicLibrary.open('user32.dll');
  final messageBox = user32.lookupFunction<MessageBoxNative, MessageBoxDart>(
    'MessageBoxW',
  );

  final result = messageBox(
    0, // No owner window
    'Test message'.toNativeUtf16(), // Message
    'Window caption'.toNativeUtf16(), // Window title
    0, // OK button only
  );
}

----------------------------------------

TITLE: Android Plugin Dependencies
DESCRIPTION: Example of adding plugin dependencies in Android Gradle configuration

LANGUAGE: groovy
CODE:
android {
    dependencies {
        compileOnly rootProject.findProject(":url_launcher")
    }
}

----------------------------------------

TITLE: Removing Dart Configuration Files
DESCRIPTION: Command to remove Dart configuration directories and files from the user's home directory.

LANGUAGE: console
CODE:
C:\> Remove-Item -Recurse -Force -Path $env:LOCALAPPDATA\.dartServer,$env:APPDATA\.dart,$env:APPDATA\.dart-tool

----------------------------------------

TITLE: Including Next Steps Instructions
DESCRIPTION: Template inclusion for post-installation steps and further setup instructions

LANGUAGE: markdown
CODE:
{% include docs/install/next-steps.md devos=devos target=target config=config %}

----------------------------------------

TITLE: TextFormField Implementation in Flutter
DESCRIPTION: Shows how to create a TextFormField with an underline border and label text, suitable for form integration.

LANGUAGE: dart
CODE:
TextFormField(
  decoration: const InputDecoration(
    border: UnderlineInputBorder(),
    labelText: 'Enter your username',
  ),
),

----------------------------------------

TITLE: Creating Base Flutter App Structure
DESCRIPTION: Initial app setup with MaterialApp and Scaffold widgets, defining the basic structure and app bar.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const String appTitle = 'Flutter layout demo';
    return MaterialApp(
      title: appTitle,
      home: Scaffold(
        appBar: AppBar(title: const Text(appTitle)),
        body: const Center(
          child: Text('Hello World'),
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Accessing Current Position in GLSL Shader
DESCRIPTION: Shows how to access the current fragment position in a GLSL shader using the FlutterFragCoord function from the flutter/runtime_effect.glsl library.

LANGUAGE: glsl
CODE:
#include <flutter/runtime_effect.glsl>

void main() {
  vec2 currentPos = FlutterFragCoord().xy;
}

----------------------------------------

TITLE: Running Cupertino Example Code in Flutter
DESCRIPTION: Command line instructions for running a Cupertino widget example (CupertinoSwitch) from the Flutter examples directory. Shows the navigation and execution steps required to test Cupertino components.

LANGUAGE: console
CODE:
cd path/to/flutter
cd examples/api
flutter run lib/cupertino/switch/cupertino_switch.0.dart

----------------------------------------

TITLE: Accessing Flutter Assets in iOS (Swift)
DESCRIPTION: Demonstrates how to access Flutter assets in iOS platform code using Bundle in Swift.

LANGUAGE: swift
CODE:
let key = controller.lookupKey(forAsset: "icons/heart.png")
let mainBundle = Bundle.main
let path = mainBundle.path(forResource: key, ofType: nil)

----------------------------------------

TITLE: Installing Codemagic CLI Tools
DESCRIPTION: Command to install Codemagic CLI tools via pip3 for automated build and deployment.

LANGUAGE: bash
CODE:
pip3 install codemagic-cli-tools

----------------------------------------

TITLE: Avoiding setState Called During Build Error in Flutter
DESCRIPTION: Shows how to properly navigate to a new screen and display a dialog without triggering the 'setState called during build' error.

LANGUAGE: dart
CODE:
class FirstScreen extends StatelessWidget {
  const FirstScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('First Screen')),
      body: Center(
        child: ElevatedButton(
          child: const Text('Launch screen'),
          onPressed: () {
            // Navigate to the second screen using a named route.
            Navigator.pushNamed(context, '/second');
            // Immediately show a dialog upon loading the second screen.
            Navigator.push(
              context,
              PageRouteBuilder(
                barrierDismissible: true,
                opaque: false,
                pageBuilder: (_, anim1, anim2) => const MyDialog(),
              ),
            );
          },
        ),
      ),
    );
  }
}

----------------------------------------

TITLE: Configuring Android Product Flavors
DESCRIPTION: Kotlin configuration in build.gradle.kts to set up staging and production flavors with their respective dimensions and application ID suffixes.

LANGUAGE: kotlin
CODE:
android {
    ...
    buildTypes {
        getByName("debug") {...}
        getByName("release") {...}
    }
    ...
    flavorDimensions += "default"
    productFlavors {
        create("staging") {
            dimension = "default"
            applicationIdSuffix = ".staging"
        }
        create("production") {
            dimension = "default"
            applicationIdSuffix = ".production"
        }
    }
}

----------------------------------------

TITLE: Accessing text scale factor after migration
DESCRIPTION: Example of accessing text scale factor using platformDispatcher after migration.

LANGUAGE: dart
CODE:
double getTextScaleFactor() {
  // View.of(context).platformDispatcher.textScaleFactor if a BuildContext is available, otherwise:
  return WidgetsBinding.instance.platformDispatcher.textScaleFactor;
}

----------------------------------------

TITLE: Enabling Network Access in macOS Entitlements
DESCRIPTION: This XML snippet demonstrates how to allow network access in macOS apps by adding the necessary key to the entitlements file. This is required for macOS apps to make network calls.

LANGUAGE: xml
CODE:
<key>com.apple.security.network.client</key>
<true/>

----------------------------------------

TITLE: Plugin Registration Method Removal
DESCRIPTION: Example of the registerWith method that should be removed from FlutterPlugin implementations during migration

LANGUAGE: java
CODE:
public static void registerWith(@NonNull io.flutter.plugin.common.PluginRegistry.Registrar registrar);

----------------------------------------

TITLE: Importing Google Sign-In Package in Dart
DESCRIPTION: Import statement for the Google Sign-In functionality needed for authentication.

LANGUAGE: dart
CODE:
/// Provides the `GoogleSignIn` class
import 'package:google_sign_in/google_sign_in.dart';

----------------------------------------

TITLE: TextField with Enforced MaxLength After Migration
DESCRIPTION: Updated TextField implementation using MaxLengthEnforcement.enforced to strictly enforce character limit.

LANGUAGE: dart
CODE:
TextField(
  maxLength: 6,
  maxLengthEnforcement: MaxLengthEnforcement.enforced,
)

----------------------------------------

TITLE: Project Structure for Flutter Tests
DESCRIPTION: Shows the recommended folder structure for organizing test files in a Flutter project.

LANGUAGE: plaintext
CODE:
counter_app/
  lib/
    counter.dart
  test/
    counter_test.dart

----------------------------------------

TITLE: Converting to maybeOf Pattern in Flutter
DESCRIPTION: Example showing how to migrate from a nullable 'of' pattern to using the new 'maybeOf' method to handle nullable returns.

LANGUAGE: dart
CODE:
ScrollController? controller = Scrollable.maybeOf(context);

----------------------------------------

TITLE: Closing WebSocket Connection in Dart
DESCRIPTION: Shows how to properly close the WebSocket connection when it's no longer needed, typically in the dispose method of a StatefulWidget.

LANGUAGE: dart
CODE:
channel.sink.close();

----------------------------------------

TITLE: Installing HTTP Package via Console
DESCRIPTION: Command to add the http package as a dependency to a Flutter project.

LANGUAGE: console
CODE:
$ flutter pub add http

----------------------------------------

TITLE: Corrected RenderEditable Hit Test Implementation in Dart
DESCRIPTION: This code snippet demonstrates the correct way to lay out a RenderEditable object before hit testing, addressing the 'debugNeedsLayout' assertion error.

LANGUAGE: dart
CODE:
import 'package:flutter/rendering.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';

void main() {
  test('attach and detach correctly handle gesture', () {
    final RenderEditable editable = RenderEditable(
      textDirection: TextDirection.ltr,
      offset: ViewportOffset.zero(),
      textSelectionDelegate: FakeEditableTextState(),
      startHandleLayerLink: LayerLink(),
      endHandleLayerLink: LayerLink(),
    );
    // Lay out the RenderEditable first.
    editable.layout(BoxConstraints.loose(const Size(1000.0, 1000.0)));
    final PipelineOwner owner = PipelineOwner(onNeedVisualUpdate: () {});
    editable.attach(owner);
    editable.handleEvent(const PointerDownEvent(),
        BoxHitTestEntry(editable, const Offset(10, 10)));
    editable.detach();
  });
}

class FakeEditableTextState extends TextSelectionDelegate {
  @override
  TextEditingValue textEditingValue;
  @override
  void hideToolbar() {}
  @override
  void bringIntoView(TextPosition position) {}
}

----------------------------------------

TITLE: Installing HTTP Package via Console
DESCRIPTION: Command to add the HTTP package as a dependency to the Flutter project.

LANGUAGE: console
CODE:
$ flutter pub add http

----------------------------------------

TITLE: ParentDataWidget Implementation After Migration in Flutter
DESCRIPTION: This code snippet demonstrates how to update a ParentDataWidget implementation after the generic type change, using FrogJarParentData as the generic type and adding the debugTypicalAncestorWidgetClass getter.

LANGUAGE: dart
CODE:
class FrogSize extends ParentDataWidget<FrogJarParentData> { // FrogJar changed to FrogJarParentData
  FrogSize({
    Key key,
    required this.size,
    required Widget child,
  }) : assert(child != null),
        assert(size != null),
        super(key: key, child: child);

  final Size size;

  @override
  void applyParentData(RenderObject renderObject) {
    final FrogJarParentData parentData = renderObject.parentData;
    if (parentData.size != size) {
      parentData.size = size;
      final RenderFrogJar targetParent = renderObject.parent;
      targetParent.markNeedsLayout();
    }
  }

  @override
  Type get debugTypicalAncestorWidgetClass => FrogJar; // Newly added
}

----------------------------------------

TITLE: Basic GET Request with Authorization Header in Flutter
DESCRIPTION: Simple example of making an authenticated GET request using the http package with an Authorization header.

LANGUAGE: dart
CODE:
final response = await http.get(
  Uri.parse('https://jsonplaceholder.typicode.com/albums/1'),
  // Send authorization headers to the backend.
  headers: {HttpHeaders.authorizationHeader: 'Basic your_api_token_here'},
);

----------------------------------------

TITLE: Custom CupertinoThemeData Implementation Example
DESCRIPTION: Demonstrates how to create a custom CupertinoThemeData subclass that always uses dark mode

LANGUAGE: dart
CODE:
class AlwaysDarkCupertinoThemeData extends CupertinoThemeData {
  Brightness brightness => Brightness.dark;
}

----------------------------------------

TITLE: Disposing Firestore Controller in Play Session
DESCRIPTION: Code to dispose of the Firestore controller when the play session screen is disposed.

LANGUAGE: dart
CODE:
_firestoreController?.dispose();

----------------------------------------

TITLE: Updating Android Settings Gradle File
DESCRIPTION: Updated content for android/settings.gradle file using the new Plugin DSL syntax. Replace {agpVersion} and {kotlinVersion} with your project's values.

LANGUAGE: groovy
CODE:
pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "{agpVersion}" apply false
    id "org.jetbrains.kotlin.android" version "{kotlinVersion}" apply false
}

include ":app"

----------------------------------------

TITLE: Creating CustomPainter for Gradient Chat Bubbles in Flutter
DESCRIPTION: This snippet defines the BubbleBackground widget and BubblePainter class. The BubblePainter is a CustomPainter that will be responsible for painting the gradient backgrounds of the chat bubbles.

LANGUAGE: dart
CODE:
@immutable
class BubbleBackground extends StatelessWidget {
  const BubbleBackground({super.key, required this.colors, this.child});

  final List<Color> colors;
  final Widget? child;

  @override
  Widget build(BuildContext context) {
    return CustomPaint(painter: BubblePainter(colors: colors), child: child);
  }
}

class BubblePainter extends CustomPainter {
  BubblePainter({required List<Color> colors}) : _colors = colors;

  final List<Color> _colors;

  @override
  void paint(Canvas canvas, Size size) {
    // TODO:
  }

  @override
  bool shouldRepaint(BubblePainter oldDelegate) {
    // TODO:
    return false;
  }
}

----------------------------------------

TITLE: Widget Verification with flutter_driver
DESCRIPTION: Example showing how to verify widget display using flutter_driver's waitFor method.

LANGUAGE: dart
CODE:
test(
  'do not select any item, verify please select text is displayed',
  () async {
    // Wait for 'please select' text is displayed
    await driver.waitFor(find.text('Please select a plant from the list.'));
  },
);

----------------------------------------

TITLE: Creating Customer Cart Drop Target in Flutter
DESCRIPTION: Implements a drop target for draggable menu items using DragTarget widget.

LANGUAGE: dart
CODE:
DragTarget<Item>(
  builder: (context, candidateItems, rejectedItems) {
    return CustomerCart(
      hasItems: customer.items.isNotEmpty,
      highlighted: candidateItems.isNotEmpty,
      customer: customer,
    );
  },
  onAcceptWithDetails: (details) {
    _itemDroppedOnCustomerCart(item: details.data, customer: customer);
  },
)

----------------------------------------

TITLE: Converting MediaQuery.of with nullOk to maybeOf in Dart
DESCRIPTION: Demonstrates how to replace a MediaQuery.of call that uses nullOk=true with the new MediaQuery.maybeOf method to obtain a nullable MediaQueryData.

LANGUAGE: dart
CODE:
MediaQueryData? data = MediaQuery.of(context, nullOk: true);

LANGUAGE: dart
CODE:
MediaQueryData? data = MediaQuery.maybeOf(context);

----------------------------------------

TITLE: Android Cmdline-tools Missing Error
DESCRIPTION: Error message from Flutter doctor indicating missing Android command-line tools component.

LANGUAGE: plaintext
CODE:
[!] Android toolchain - develop for Android devices (Android SDK version 33.0.2) \n    • Android SDK at C:\Users\My PC\AppData\Local\Android\sdk \n    X cmdline-tools component is missing

----------------------------------------

TITLE: Pre-Migration TabBar Theme Configuration in Flutter
DESCRIPTION: Example showing how to set the tab bar indicator color using the deprecated ThemeData.indicatorColor property.

LANGUAGE: dart
CODE:
theme: ThemeData(
  indicatorColor: Colors.red,
  useMaterial3: false,
),

----------------------------------------

TITLE: Installing Flutter Plugin in JetBrains IDEs
DESCRIPTION: Steps for installing the Flutter plugin in Android Studio or IntelliJ IDEA, covering both macOS and Windows/Linux platforms. Includes keyboard shortcuts and navigation paths.

LANGUAGE: markdown
CODE:
macOS:
1. Start Android Studio or IntelliJ
2. Go to **Android Studio** > **Settings...**
3. Select **Plugins**
4. Select **Marketplace**
5. Search for `flutter`
6. Click **Install**

Linux/Windows:
1. Go to **File** > **Settings**
2. Select **Plugins**
3. Select **Marketplace**
4. Search for `flutter`
5. Click **Install**

----------------------------------------

TITLE: Migrating GestureDetector Configuration
DESCRIPTION: Demonstrates the migration from the deprecated 'kind' parameter to 'supportedDevices' in GestureDetector configuration. This change allows for multiple pointer device types to be specified.

LANGUAGE: dart
CODE:
VerticalDragGestureRecognizer(
  kind: PointerDeviceKind.touch,
);

LANGUAGE: dart
CODE:
VerticalDragGestureRecognizer(
  supportedDevices: <PointerDeviceKind>{ PointerDeviceKind.touch },
);

----------------------------------------

TITLE: Removing Unused Repository Dependencies
DESCRIPTION: Removes no-longer-used repository dependencies.

LANGUAGE: Dart
CODE:
[deps] remove no-longer-used repo deps by @devoncarew in 161605

----------------------------------------

TITLE: Updating cupertino_icons Dependency in Flutter pubspec.yaml
DESCRIPTION: This snippet shows how to update the cupertino_icons package dependency in a Flutter project's pubspec.yaml file from version 0.1.3 to 1.0.0.

LANGUAGE: yaml
CODE:
dependencies:
  ... // Other dependencies
  cupertino_icons: ^0.1.0

LANGUAGE: yaml
CODE:
dependencies:
  ... // Other dependencies
  cupertino_icons: ^1.0.0

----------------------------------------

TITLE: Setting Drag Start Behavior in Flutter
DESCRIPTION: Example of how to set the dragStartBehavior for a GestureDetector to maintain the previous functionality of starting drag gestures at the touch down location.

LANGUAGE: dart
CODE:
GestureDectector( 
  dragStartBehavior: DragStartBehavior.down,
  onVerticalDragDown: myDragDown 
  onVerticalDragEnd: myDragEnd, 
  onVerticalDragStart: myDragStart, 
  onVerticalDragUpdate: myDragUpdate, 
  onVerticalDragCancel: myDragCancel, 
  onHorizontalDragDown: myDragDown 
  onHorizontalDragEnd: myDragEnd, 
  onHorizontalDragStart: myDragStart, 
  onHorizontalDragUpdate: myDragUpdate, 
  onHorizontalDragCancel: myDragCancel, 
// Other fields… 
)

----------------------------------------

TITLE: Accessing Theme Properties Before Migration in Flutter
DESCRIPTION: Shows how to access card, dialog and tabBar theme properties using the old theme types before the normalization changes.

LANGUAGE: dart
CODE:
final CardTheme cardTheme = Theme.of(context).cardTheme;
final CardTheme cardTheme = CardTheme.of(context);

final DialogTheme dialogTheme = Theme.of(context).dialogTheme;
final DialogTheme dialogTheme = DialogTheme.of(context);

final TabBarTheme tabBarTheme = Theme.of(context).tabBarTheme;
final TabBarTheme tabBarTheme = TabBarTheme.of(context);

----------------------------------------

TITLE: Overriding Cupertino Theme in Flutter
DESCRIPTION: Example of how to override the default Cupertino theme in Flutter using the cupertinoOverrideTheme property of ThemeData.

LANGUAGE: dart
CODE:
Widget build(BuildContext context) { 
  // Set theme data for override in the CupertinoThemeData's constructor 
  Theme.of(context).cupertinoOverrideTheme = CupertinoThemeData(  
    brightness: Brightness.dark,  
    primaryColor: Color(0xFF42A5F5) 
  ); 
  return Text( 
    'Example', 
    style: Theme.of(context).textTheme.title, 
  ); 
}

----------------------------------------

TITLE: Using Chip and RawChip Widgets with deleteButtonTooltipMessage in Flutter
DESCRIPTION: This code snippet shows the updated usage of Chip and RawChip widgets using the new deleteButtonTooltipMessage property to control the visibility of the delete button tooltip. An empty string disables the tooltip.

LANGUAGE: dart
CODE:
Chip(
  label: const Text('Disabled delete button tooltip'),
  onDeleted: _handleDeleteChip,
  deleteButtonTooltipMessage: '',
);

RawChip(
  label: const Text('Enabled delete button tooltip'),
  onDeleted: _handleDeleteChip,
);

----------------------------------------

TITLE: Building Windows App in Flutter
DESCRIPTION: Command to verify that the migrated Windows app builds successfully after completing the migration steps.

LANGUAGE: bash
CODE:
flutter build windows

----------------------------------------

TITLE: Modifying AnnotatedRegionLayer Local Position Calculation in Dart
DESCRIPTION: Updated implementation of findAnnotations method in AnnotatedRegionLayer to make the local position relative to the clipping region by subtracting the offset from the position. This change makes the position values more meaningful and consistent across different rendering scenarios.

LANGUAGE: dart
CODE:
class AnnotatedRegionLayer<T> extends ContainerLayer {
  @override
  bool findAnnotations<S>(AnnotationResult<S> result, Offset localPosition, { required bool onlyFirst }) {
    ...
    if (/* shouldAddAnnotation */) {
      result.add(AnnotationEntry<S>(
        annotation: typedValue,
        // Used to be:
        // localPosition: localPosition,
        localPosition: localPosition - offset,
      ));
    }
    ...
  }
}

----------------------------------------

TITLE: TextField without Length Enforcement Before Migration
DESCRIPTION: Example showing how to implement TextField without length enforcement before the migration.

LANGUAGE: dart
CODE:
TextField(
  maxLength: 6,
  maxLengthEnforced: false,
)

----------------------------------------

TITLE: Deprecated FlutterMain.setIsRunningInRobolectricTest Usage in Java
DESCRIPTION: This code snippet shows the deprecated method of setting up Robolectric tests for Flutter's Android engine embedding. It uses FlutterMain.setIsRunningInRobolectricTest(true), which has been removed and should be replaced with the FlutterInjector approach.

LANGUAGE: java
CODE:
FlutterMain.setIsRunningInRobolectricTest(true);

----------------------------------------

TITLE: Semantics Tree Structure Example
DESCRIPTION: Sample output showing the semantics tree structure after implementing scrollable AlertDialog.

LANGUAGE: plaintext
CODE:
flutter:        ├─SemanticsNode#30 <-- SingleChildScrollView
flutter:          │ flags: hasImplicitScrolling
flutter:          │ scrollExtentMin: 0.0
flutter:          │ scrollPosition: 0.0
flutter:          │ scrollExtentMax: 0.0
flutter:          │
flutter:          ├─SemanticsNode#31 <-- title
flutter:          │   flags: namesRoute
flutter:          │   label: "Hello"
flutter:          │
flutter:          └─SemanticsNode#32 <-- contents
flutter:              label: "Huge content"

----------------------------------------

TITLE: Implementing PopScope for Basic Back Navigation
DESCRIPTION: Shows how to use PopScope widget to handle back navigation with ahead-of-time control using canPop and onPopInvoked callbacks.

LANGUAGE: dart
CODE:
PopScope(
  canPop: _myPopDisableEnableLogic(),
  onPopInvoked: (bool didPop) {
    // Handle the pop. If `didPop` is false, it was blocked.
  },
)

----------------------------------------

TITLE: Updated CupertinoThemeData Brightness Implementation
DESCRIPTION: Shows the new implementation of brightness as a nullable stored property

LANGUAGE: dart
CODE:
final Brightness brightness;

----------------------------------------

TITLE: Migrating PlatformMenuBar.body to child in Flutter
DESCRIPTION: Illustrates the change from using the deprecated body property to the new child property in PlatformMenuBar, aligning it with other widgets in the framework.

LANGUAGE: dart
CODE:
PlatformMenuBar(
  body: myWidget,
);

LANGUAGE: dart
CODE:
PlatformMenuBar(
  child: myWidget,
);

----------------------------------------

TITLE: Previous CupertinoThemeData Brightness Implementation
DESCRIPTION: Shows how brightness was previously implemented as a getter that defaulted to Brightness.light when null

LANGUAGE: dart
CODE:
Brightness get brightness => _brightness ?? Brightness.light;
final Brightness _brightness;

----------------------------------------

TITLE: Migrating TestWindow properties to TestPlatformDispatcher in Dart
DESCRIPTION: Updates test code to use TestPlatformDispatcher instead of the deprecated TestWindow properties for multi-window support preparation.

LANGUAGE: dart
CODE:
testWidgets('My test', (WidgetTester tester) aysnc {
  // For all instances, replace window with platformDispatcher
  tester.binding.platformDispatcher.textScaleFactorTestValue = 42;
  addTearDown(tester.binding.platformDispatcher.clearTextScaleFactorTestValue);
  // ...
});

----------------------------------------

TITLE: Updating DropdownMenuEntry Text Style in Flutter
DESCRIPTION: Illustrates how to update the DropdownMenuEntry to use the previous default text style (TextTheme.bodyLarge) after the migration to Material 3.

LANGUAGE: dart
CODE:
DropdownMenuEntry<ColorLabel>(
  style: MenuItemButton.styleFrom(
    textStyle: Theme.of(context).textTheme.bodyLarge,
  ),
  value: color,
  label: color.label,
),

LANGUAGE: dart
CODE:
menuButtonTheme: MenuButtonThemeData(
  style: MenuItemButton.styleFrom(
    textStyle: Theme.of(context).textTheme.bodyLarge,
  ),
),

----------------------------------------

TITLE: CupertinoDialog Migration to CupertinoAlertDialog
DESCRIPTION: Migration example showing how to update deprecated CupertinoDialog to CupertinoAlertDialog

LANGUAGE: dart
CODE:
CupertinoDialog(child: myWidget);

LANGUAGE: dart
CODE:
CupertinoAlertDialog(content: myWidget);

----------------------------------------

TITLE: Old ImageCache Logic in Dart
DESCRIPTION: Pseudocode representing the old ImageCache algorithm in Flutter. This version would increase the maxByteSize to accommodate large images.

LANGUAGE: dart
CODE:
// Old logic pseudocode
void onLoadImage(Image image) {
  if (image.byteSize > _cache.maxByteSize) {
    _cache.maxByteSize = image.byteSize + 1000;
  }
  _cache.add(image);
  while (_cache.count > _cache.maxCount
      || _cache.byteSize > _cache.maxByteSize) {
    _cache.discardOldestImage();
  }
}

----------------------------------------

TITLE: Displaying Flutter Semantics Tree in Plaintext
DESCRIPTION: This snippet shows the output of a Flutter semantics tree, representing the accessibility structure of a Flutter application. It details multiple SemanticsNode objects with their properties such as position, flags, and labels.

LANGUAGE: plaintext
CODE:
flutter: SemanticsNode#0
flutter:  │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:  │
flutter:  └─SemanticsNode#1
flutter:    │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:    │ textDirection: ltr
flutter:    │
flutter:    └─SemanticsNode#2
flutter:      │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:      │ sortKey: OrdinalSortKey#824a2(order: 0.0)
flutter:      │
flutter:      └─SemanticsNode#3
flutter:        │ Rect.fromLTRB(0.0, 0.0, 800.0, 600.0)
flutter:        │ flags: scopesRoute
flutter:        │
flutter:        └─SemanticsNode#4
flutter:            Rect.fromLTRB(278.0, 267.0, 522.0, 333.0)
flutter:            actions: tap
flutter:            flags: isButton, hasEnabledState, isEnabled
flutter:            label:
              "Clickable text here!
              Click Me!"
flutter:            textDirection: ltr

flutter: Clicked!

----------------------------------------

TITLE: Migrating IgnorePointer, AbsorbPointer, and SliverIgnorePointer in Flutter
DESCRIPTION: This snippet demonstrates how to migrate code using IgnorePointer, AbsorbPointer, and SliverIgnorePointer with ignoringSemantics set to true. The migration involves using ExcludeSemantics to achieve the same behavior.

LANGUAGE: dart
CODE:
IgnorePointer(
  ignoringSemantics: true,
  child: const PlaceHolder(),
);

AbsorbPointer(
  ignoringSemantics: true,
  child: const PlaceHolder(),
);

SliverIgnorePointer(
  ignoringSemantics: true,
  child: const PlaceHolder(),
);

LANGUAGE: dart
CODE:
ExcludeSemantics(
  child: IgnorePointer(
    child: const PlaceHolder(),
  ),
);

ExcludeSemantics(
  child: AbsorbPointer(
    child: const PlaceHolder(),
  ),
);

SliverIgnorePointer(
  child: ExcludeSemantics(
    child: const PlaceHolder(),
  ),
);

----------------------------------------

TITLE: Displaying Flutter Focus Tree Structure in Plaintext
DESCRIPTION: This snippet shows the hierarchical structure of the Flutter focus system, including the primary focus, root scope, and various child nodes. It provides detailed information about each node's context, focus state, and children.

LANGUAGE: plaintext
CODE:
flutter: FocusManager#9d096
flutter:  │ primaryFocus: FocusScopeNode#926dc(_ModalScopeState<dynamic>
flutter:  │   Focus Scope [PRIMARY FOCUS])
flutter:  │ primaryFocusCreator: FocusScope ← PrimaryScrollController ←
flutter:  │   _ActionsScope ← Actions ← Builder ← PageStorage ← Offstage ←
flutter:  │   _ModalScopeStatus ← UnmanagedRestorationScope ←
flutter:  │   RestorationScope ← AnimatedBuilder ←
flutter:  │   _ModalScope<dynamic>-[LabeledGlobalKey<_ModalScopeState<dynamic>>#bd53e]
flutter:  │   ← Semantics ← _RenderTheaterMarker ← _EffectiveTickerMode ←
flutter:  │   TickerMode ←
flutter:  │   _OverlayEntryWidget-[LabeledGlobalKey<_OverlayEntryWidgetState>#89dd7]
flutter:  │   ← _Theater ← Overlay-[LabeledGlobalKey<OverlayState>#52f82] ←
flutter:  │   UnmanagedRestorationScope ← ⋯
flutter:  │
flutter:  └─rootScope: FocusScopeNode#f4205(Root Focus Scope [IN FOCUS PATH])
flutter:    │ IN FOCUS PATH
flutter:    │ focusedChildren: FocusScopeNode#a0d10(Navigator Scope [IN FOCUS
flutter:    │   PATH])
flutter:    │
flutter:    └─Child 1: FocusNode#088ec([IN FOCUS PATH])
flutter:      │ context: Focus
flutter:      │ NOT FOCUSABLE
flutter:      │ IN FOCUS PATH
flutter:      │
flutter:      └─Child 1: FocusNode#85f70(Shortcuts [IN FOCUS PATH])
flutter:        │ context: Focus
flutter:        │ NOT FOCUSABLE
flutter:        │ IN FOCUS PATH
flutter:        │
flutter:        └─Child 1: FocusNode#f0c18(Shortcuts [IN FOCUS PATH])
flutter:          │ context: Focus
flutter:          │ NOT FOCUSABLE
flutter:          │ IN FOCUS PATH
flutter:          │
flutter:          └─Child 1: FocusNode#0749f(Shortcuts [IN FOCUS PATH])
flutter:            │ context: Focus
flutter:            │ NOT FOCUSABLE
flutter:            │ IN FOCUS PATH
flutter:            │
flutter:            └─Child 1: _FocusTraversalGroupNode#28990(FocusTraversalGroup [IN FOCUS PATH])
flutter:              │ context: Focus
flutter:              │ NOT FOCUSABLE
flutter:              │ IN FOCUS PATH
flutter:              │
flutter:              └─Child 1: FocusNode#5b515(Shortcuts [IN FOCUS PATH])
flutter:                │ context: Focus
flutter:                │ NOT FOCUSABLE
flutter:                │ IN FOCUS PATH
flutter:                │
flutter:                └─Child 1: FocusScopeNode#a0d10(Navigator Scope [IN FOCUS PATH])
flutter:                  │ context: FocusScope
flutter:                  │ IN FOCUS PATH
flutter:                  │ focusedChildren: FocusScopeNode#926dc(_ModalScopeState<dynamic>
flutter:                  │   Focus Scope [PRIMARY FOCUS])
flutter:                  │
flutter:                  └─Child 1: _FocusTraversalGroupNode#72c8a(FocusTraversalGroup [IN FOCUS PATH])
flutter:                    │ context: Focus
flutter:                    │ NOT FOCUSABLE
flutter:                    │ IN FOCUS PATH
flutter:                    │
flutter:                    └─Child 1: FocusNode#eb709(Navigator [IN FOCUS PATH])
flutter:                      │ context: Focus
flutter:                      │ IN FOCUS PATH
flutter:                      │
flutter:                      └─Child 1: FocusScopeNode#926dc(_ModalScopeState<dynamic> Focus Scope [PRIMARY FOCUS])
flutter:                        │ context: FocusScope
flutter:                        │ PRIMARY FOCUS
flutter:                        │
flutter:                        └─Child 1: FocusNode#a6b74
flutter:                            context: Focus


----------------------------------------

TITLE: Customized Flutter Lints Configuration
DESCRIPTION: Example of a complete analysis_options.yaml file showing how to customize lint rules, including comments explaining configuration options and usage. This is the default configuration generated by flutter create.

LANGUAGE: yaml
CODE:
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

----------------------------------------

TITLE: Updating Podspec File for Flutter Plugin
DESCRIPTION: Changes required in the plugin's podspec file to point to the new directory structure created for Swift Package Manager support.

LANGUAGE: ruby
CODE:
s.source_files = 'plugin_name/Sources/plugin_name/**/*.swift'
s.resource_bundles = {'plugin_name_privacy' => ['plugin_name/Sources/plugin_name/PrivacyInfo.xcprivacy']}

----------------------------------------

TITLE: Reading Asset List Using AssetManifest.json (Legacy Method)
DESCRIPTION: Legacy method of reading the asset manifest using AssetManifest.json file. This approach involves loading and parsing JSON content from the asset bundle.

LANGUAGE: dart
CODE:
import 'dart:convert';
import 'package:flutter/services.dart';

void readAssetList() async {
  final assetManifestContent = await rootBundle.loadString('AssetManifest.json');
  final decodedAssetManifest =
      json.decode(assetManifestContent) as Map<String, Object?>;
  final assets = decodedAssetManifest.keys.toList().cast<String>();
}

----------------------------------------

TITLE: Flutter Pre-Build Script Configuration
DESCRIPTION: Shell script command to prepare Flutter framework before building, must be added as a pre-action build script in Xcode scheme settings.

LANGUAGE: sh
CODE:
"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh" prepare

----------------------------------------

TITLE: Creating New Flutter Project with AndroidX
DESCRIPTION: Command to create a new Flutter project that uses AndroidX by default. This is used when direct migration through Android Studio isn't possible.

LANGUAGE: console
CODE:
flutter create -t <project-type> <new-project-path>

----------------------------------------

TITLE: Platform-Specific Spacing Values with Liquid Template
DESCRIPTION: Defines platform-specific spacing measurements using Liquid templating syntax. The spacing values are tailored for desktop (4.0/52.0), mobile (10.0/10.0), web (2.5/2.5), and a default fallback (11.0/60.0).

LANGUAGE: liquid
CODE:
{% if include.target == 'desktop' -%}
4.0 | 52.0 |
{% elsif include.target == 'mobile' -%}
10.0 | 10.0 |
{% elsif include.target == 'web' -%}
2.5 | 2.5 |
{% else -%}
11.0 | 60.0 |
{% endif -%}

{:.table .table-striped}

----------------------------------------

TITLE: Implementing Surface Lifecycle Callbacks in Android Flutter Plugins
DESCRIPTION: Shows how to implement lifecycle callbacks for Surface management using the SurfaceProducer API to handle surface availability and destruction events.

LANGUAGE: java
CODE:
surfaceProducer.setCallback(
   new TextureRegistry.SurfaceProducer.Callback() {
      @Override
      public void onSurfaceAvailable() {
         // Do surface initialization here, and draw the current frame.
      }

      @Override
      public void onSurfaceDestroyed() {
         // Do surface cleanup here, and stop drawing frames.
      }
   }
);

----------------------------------------

TITLE: Adding Flutter to System PATH
DESCRIPTION: Configures the system PATH to include the Flutter binary directory for command-line access

LANGUAGE: console
CODE:
echo PATH="$PATH:`pwd`/flutter/bin" >> ~/.profile
source ~/.profile

----------------------------------------

TITLE: Route Pop Disposition Check
DESCRIPTION: Shows how to check if back gestures are disabled for a route using the popDisposition property.

LANGUAGE: dart
CODE:
if (myRoute.popDisposition == RoutePopDisposition.doNotPop) {
  // Back gestures are disabled.
}

----------------------------------------

TITLE: Extending Device Timeout for Flutter Run Command
DESCRIPTION: This command extends the timeout for detecting iOS devices when running Flutter apps. It's useful when the default 10-second timeout is insufficient.

LANGUAGE: console
CODE:
$ flutter run --device-timeout 60

----------------------------------------

TITLE: Updating RenderEditable and TextSelectionDelegate Methods in Flutter
DESCRIPTION: Shows how to migrate from deprecated RenderEditable.onSelectionChanged and TextSelectionDelegate.textEditingValue to the new TextSelectionDelegate.userUpdateTextEditingValue method for correct text selection handling.

LANGUAGE: dart
CODE:
renderEditable.onSelectionChanged(selection, renderObject, cause);
textSelectionDelegate.textEditingValue = value;

LANGUAGE: dart
CODE:
textSelectionDelegate.userUpdateTextEditingValue(value, cause);

----------------------------------------

TITLE: Cross-Platform Image Figure Template in HTML
DESCRIPTION: HTML template that displays two images side by side for Android and iOS platforms, using liquid template variables for image sources and alt text. Includes figure containers with platform-specific captions and styling classes.

LANGUAGE: html
CODE:
<figure>
  <div class="site-figure-container">
    <img src='/assets/images/docs/get-started/android/{{include.image}}' alt='{{include.alt}} on Android' class='{{include.class}}'>
    <figcaption class="figure-caption">Android</figcaption>
  </div>
  <div class="site-figure-container">
    <img src='/assets/images/docs/get-started/ios/{{include.image}}' alt='{{include.alt}} on iOS' class='{{include.class}}'>
    <figcaption class="figure-caption">iOS</figcaption>
  </div>
</figure>

----------------------------------------

TITLE: Using Material Design components in Flutter
DESCRIPTION: Shows how to use Material Design widgets like Scaffold, AppBar, and FloatingActionButton to create a basic app structure.

LANGUAGE: dart
CODE:
import 'package:flutter/material.dart';

void main() {
  runApp(const MaterialApp(title: 'Flutter Tutorial', home: TutorialHome()));
}

class TutorialHome extends StatelessWidget {
  const TutorialHome({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: const IconButton(
          icon: Icon(Icons.menu),
          tooltip: 'Navigation menu',
          onPressed: null,
        ),
        title: const Text('Example title'),
        actions: const [
          IconButton(
            icon: Icon(Icons.search),
            tooltip: 'Search',
            onPressed: null,
          ),
        ],
      ),
      body: const Center(child: Text('Hello, world!')),
      floatingActionButton: const FloatingActionButton(
        tooltip: 'Add',
        onPressed: null,
        child: Icon(Icons.add),
      ),
    );
  }
}

----------------------------------------

TITLE: Adding Flutter Engine to iOS Podfile
DESCRIPTION: Configuration for adding the Flutter engine to an iOS project's Podfile using CocoaPods. The podspec path must include the build mode (Debug/Release) and point to the Flutter.podspec file.

LANGUAGE: ruby
CODE:
pod 'Flutter', :podspec => '/path/to/MyApp/Flutter/[build mode]/Flutter.podspec'

----------------------------------------

TITLE: Embedding YouTube Video in Markdown
DESCRIPTION: This snippet shows how to embed a YouTube video in a Markdown file using a custom Liquid tag. It includes the video ID and title as parameters.

LANGUAGE: markdown
CODE:
{% ytEmbed '8sAyPDLorek', 'Building your first Flutter app - with a Codelab!' %}

----------------------------------------

TITLE: Accessing Visual Density in Custom Views in Dart
DESCRIPTION: This code shows how to access the current visual density in custom views within a Flutter app.

LANGUAGE: dart
CODE:
VisualDensity density = Theme.of(context).visualDensity;

----------------------------------------

TITLE: Running Flutter Doctor for Installation Verification
DESCRIPTION: Executes the Flutter Doctor command to verify the Flutter installation and identify any issues.

LANGUAGE: console
CODE:
{{prompt}} flutter doctor

----------------------------------------

TITLE: Installing Android Studio Prerequisites on Linux
DESCRIPTION: This command installs the necessary packages for Android Studio on a Linux system using apt-get. It includes libc6, libstdc++6, lib32z1, and libbz2-1.0 for AMD64 architecture.

LANGUAGE: console
CODE:
$ sudo apt-get install libc6:amd64 libstdc++6:amd64 lib32z1 libbz2-1.0:amd64

----------------------------------------

TITLE: Implementing Animated Container with Random Properties in Flutter
DESCRIPTION: This snippet creates a Flutter application with an animated container that changes its properties (color, border radius, margin) randomly when a button is pressed. It utilizes StatefulWidget, AnimatedContainer, and Random number generation to achieve the animation effect.

LANGUAGE: dart
CODE:
// Copyright 2019 the Dart project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file.

import 'dart:math';

import 'package:flutter/material.dart';

const _duration = Duration(milliseconds: 400);

double randomBorderRadius() {
  return Random().nextDouble() * 64;
}

double randomMargin() {
  return Random().nextDouble() * 64;
}

Color randomColor() {
  return Color(0xFFFFFFFF & Random().nextInt(0xFFFFFFFF));
}

class AnimatedContainerDemo extends StatefulWidget {
  const AnimatedContainerDemo({super.key});

  @override
  State<AnimatedContainerDemo> createState() => _AnimatedContainerDemoState();
}

class _AnimatedContainerDemoState extends State<AnimatedContainerDemo> {
  late Color color;
  late double borderRadius;
  late double margin;

  @override
  void initState() {
    super.initState();
    color = randomColor();
    borderRadius = randomBorderRadius();
    margin = randomMargin();
  }

  void change() {
    setState(() {
      color = randomColor();
      borderRadius = randomBorderRadius();
      margin = randomMargin();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          children: <Widget>[
            SizedBox(
              width: 128,
              height: 128,
              child: AnimatedContainer(
                margin: EdgeInsets.all(margin),
                decoration: BoxDecoration(
                  color: color,
                  borderRadius: BorderRadius.circular(borderRadius),
                ),
                duration: _duration,
              ),
            ),
            ElevatedButton(
              child: const Text('Change'),
              onPressed: () => change(),
            ),
          ],
        ),
      ),
    );
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      debugShowCheckedModeBanner: false,
      home: AnimatedContainerDemo(),
    );
  }
}

void main() {
  runApp(
    const MyApp(),
  );
}

----------------------------------------

TITLE: Setting Up and Running Flutter Example Apps
DESCRIPTION: A series of commands to create, analyze, test, and run individual Flutter example apps. The $PROJECT variable represents the app project path, such as 'examples/layout/lakes/step6'.

LANGUAGE: bash
CODE:
flutter create --no-overwrite $PROJECT
cd $PROJECT
dart analyze
flutter test
flutter run